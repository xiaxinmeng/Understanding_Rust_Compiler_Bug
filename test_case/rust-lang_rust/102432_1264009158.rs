plain
  IMAGE: x86_64-gnu-tools
##[endgroup]
From https://github.com/rust-lang/rust
 * branch              master     -> FETCH_HEAD
Searching for toolstate changes between 75d3027fb5ce1af6712e4503c9574802212101bd and fee9449edef67eceb0c364b9defec7fe938f69e4
Clippy or rustfmt subtrees were updated
##[group]Run src/ci/scripts/verify-channel.sh
src/ci/scripts/verify-channel.sh
shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
env:
---
diff of fixed:

 // run-rustfix
 
 #![warn(clippy::all)]
 #![warn(clippy::redundant_pattern_matching)]
-#![allow(unused_braces, unused_must_use, clippy::needless_bool, clippy::match_like_matches_macro)]
+#![allow(clippy::needless_bool, clippy::match_like_matches_macro)]
 use std::net::{
 use std::net::{
     IpAddr::{self, V4, V6},
     Ipv4Addr, Ipv6Addr,
 
 fn main() {
 fn main() {
     let ipaddr: IpAddr = V4(Ipv4Addr::LOCALHOST);
     if ipaddr.is_ipv4() {}
 
     if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}
 
     if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}
 
     while V4(Ipv4Addr::LOCALHOST).is_ipv4() {}
 
     while V6(Ipv6Addr::LOCALHOST).is_ipv6() {}
 
     if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}
 
     if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}
 
     if let V4(ipaddr) = V4(Ipv4Addr::LOCALHOST) {
         println!("{}", ipaddr);
 
 
     V4(Ipv4Addr::LOCALHOST).is_ipv4();
 
     V4(Ipv4Addr::LOCALHOST).is_ipv6();
 
     V6(Ipv6Addr::LOCALHOST).is_ipv6();
 
     V6(Ipv6Addr::LOCALHOST).is_ipv4();
 
     let _ = if V4(Ipv4Addr::LOCALHOST).is_ipv4() {
     } else {
         false
     };
 
 
     ipaddr_const();
 
     let _ = if gen_ipaddr().is_ipv4() {
         1
     } else if gen_ipaddr().is_ipv6() {
     } else {
         3
     };
 }
 }
 
 fn gen_ipaddr() -> IpAddr {
     V4(Ipv4Addr::LOCALHOST)
 
 const fn ipaddr_const() {
 const fn ipaddr_const() {
     if V4(Ipv4Addr::LOCALHOST).is_ipv4() {}
 
     if V6(Ipv6Addr::LOCALHOST).is_ipv6() {}
 
     while V4(Ipv4Addr::LOCALHOST).is_ipv4() {}
 
     while V6(Ipv6Addr::LOCALHOST).is_ipv6() {}
 
     V4(Ipv4Addr::LOCALHOST).is_ipv4();
 
     V6(Ipv6Addr::LOCALHOST).is_ipv6();
 

The actual fixed differed from the expected fixed.
The actual fixed differed from the expected fixed.
Actual fixed saved to /checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui/redundant_pattern_matching_ipaddr.stage-id.fixed
To only update this specific test, also pass `--test-args redundant_pattern_matching_ipaddr.rs`

error: 1 errors occurred comparing output.
status: exit status: 1
status: exit status: 1
command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/clippy-driver" "tests/ui/redundant_pattern_matching_ipaddr.rs" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui/redundant_pattern_matching_ipaddr.stage-id" "-A" "unused" "--emit=metadata" "-Dwarnings" "-Zui-testing" "-L" "dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps" "-L" "dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps" "--extern" "regex=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libregex-619ac20e364f2b2c.rlib" "--extern" "clippy_lints=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_lints-c1e1f74e095ae40d.rlib" "--extern" "serde=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libserde-6d40e81f2d712f90.rlib" "--extern" "if_chain=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libif_chain-03f75cdc6d4d3afc.rlib" "--extern" "parking_lot=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libparking_lot-4554cde6a1339e03.rlib" "--extern" "futures=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libfutures-26d514bd19819efd.rlib" "--extern" "clippy_utils=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_utils-47229815ed3188f9.rlib" "--extern" "serde_derive=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps/libserde_derive-8323cb9c07857194.so" "--extern" "rustc_semver=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/librustc_semver-963bbd3f89834643.rlib" "--extern" "syn=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libsyn-7ff7e3754178d9fd.rlib" "--extern" "tokio=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libtokio-e0524b7e2611e851.rlib" "--extern" "quote=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libquote-ebef35b6fea9c910.rlib" "--extern" "derive_new=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps/libderive_new-52a645b5b90627c6.so" "--extern" "itertools=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libitertools-cdd893c121eb00e4.rlib" "--edition=2021" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui/redundant_pattern_matching_ipaddr.stage-id.aux"
------------------------------------------

------------------------------------------
stderr:
stderr:
------------------------------------------
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":296,"byte_end":301,"line_start":14,"line_end":14,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"    if let V4(_) = &ipaddr {}","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::redundant-pattern-matching` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":289,"byte_end":311,"line_start":14,"line_end":14,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    if let V4(_) = &ipaddr {}","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":"if ipaddr.is_ipv4()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:14:12\n   |\nLL |     if let V4(_) = &ipaddr {}\n   |     -------^^^^^---------- help: try this: `if ipaddr.is_ipv4()`\n   |\n   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":327,"byte_end":332,"line_start":16,"line_end":16,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":320,"byte_end":358,"line_start":16,"line_end":16,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":"if V4(Ipv4Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:16:12\n   |\nLL |     if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n   |     -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":374,"byte_end":379,"line_start":18,"line_end":18,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":367,"byte_end":405,"line_start":18,"line_end":18,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":"if V6(Ipv6Addr::LOCALHOST).is_ipv6()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:18:12\n   |\nLL |     if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n   |     -------^^^^^-------------------------- help: try this: `if V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":424,"byte_end":429,"line_start":20,"line_end":20,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":15,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":414,"byte_end":455,"line_start":20,"line_end":20,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":"while V4(Ipv4Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:20:15\n   |\nLL |     while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n   |     ----------^^^^^-------------------------- help: try this: `while V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":474,"byte_end":479,"line_start":22,"line_end":22,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":15,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":464,"byte_end":505,"line_start":22,"line_end":22,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":"while V6(Ipv6Addr::LOCALHOST).is_ipv6()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:22:15\n   |\nLL |     while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n   |     ----------^^^^^-------------------------- help: try this: `while V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":693,"byte_end":777,"line_start":32,"line_end":35,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V4(Ipv4Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => true,","highlight_start":1,"highlight_end":23},{"text":"        V6(_) => false,","highlight_start":1,"highlight_end":24},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":693,"byte_end":777,"line_start":32,"line_end":35,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V4(Ipv4Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => true,","highlight_start":1,"highlight_end":23},{"text":"        V6(_) => false,","highlight_start":1,"highlight_end":24},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"V4(Ipv4Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:32:5\n   |\nLL | /     match V4(Ipv4Addr::LOCALHOST) {\nLL | |         V4(_) => true,\nLL | |         V6(_) => false,\nLL | |     };\n   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":784,"byte_end":868,"line_start":37,"line_end":40,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V4(Ipv4Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => false,","highlight_start":1,"highlight_end":24},{"text":"        V6(_) => true,","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":784,"byte_end":868,"line_start":37,"line_end":40,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V4(Ipv4Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => false,","highlight_start":1,"highlight_end":24},{"text":"        V6(_) => true,","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"V4(Ipv4Addr::LOCALHOST).is_ipv6()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:37:5\n   |\nLL | /     match V4(Ipv4Addr::LOCALHOST) {\nLL | |         V4(_) => false,\nLL | |         V6(_) => true,\nLL | |     };\n   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv6()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":875,"byte_end":959,"line_start":42,"line_end":45,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V6(Ipv6Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => false,","highlight_start":1,"highlight_end":24},{"text":"        V6(_) => true,","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":875,"byte_end":959,"line_start":42,"line_end":45,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V6(Ipv6Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => false,","highlight_start":1,"highlight_end":24},{"text":"        V6(_) => true,","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"V6(Ipv6Addr::LOCALHOST).is_ipv6()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:42:5\n   |\nLL | /     match V6(Ipv6Addr::LOCALHOST) {\nLL | |         V4(_) => false,\nLL | |         V6(_) => true,\nLL | |     };\n   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":966,"byte_end":1050,"line_start":47,"line_end":50,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V6(Ipv6Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => true,","highlight_start":1,"highlight_end":23},{"text":"        V6(_) => false,","highlight_start":1,"highlight_end":24},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":966,"byte_end":1050,"line_start":47,"line_end":50,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V6(Ipv6Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => true,","highlight_start":1,"highlight_end":23},{"text":"        V6(_) => false,","highlight_start":1,"highlight_end":24},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"V6(Ipv6Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:47:5\n   |\nLL | /     match V6(Ipv6Addr::LOCALHOST) {\nLL | |         V4(_) => true,\nLL | |         V6(_) => false,\nLL | |     };\n   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1072,"byte_end":1077,"line_start":52,"line_end":52,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    let _ = if let V4(_) = V4(Ipv4Addr::LOCALHOST) {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1065,"byte_end":1103,"line_start":52,"line_end":52,"column_start":13,"column_end":51,"is_primary":true,"text":[{"text":"    let _ = if let V4(_) = V4(Ipv4Addr::LOCALHOST) {","highlight_start":13,"highlight_end":51}],"label":null,"suggested_replacement":"if V4(Ipv4Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:52:20\n   |\nLL |     let _ = if let V4(_) = V4(Ipv4Addr::LOCALHOST) {\n   |             -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1194,"byte_end":1199,"line_start":60,"line_end":60,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    let _ = if let V4(_) = gen_ipaddr() {","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1187,"byte_end":1214,"line_start":60,"line_end":60,"column_start":13,"column_end":40,"is_primary":true,"text":[{"text":"    let _ = if let V4(_) = gen_ipaddr() {","highlight_start":13,"highlight_end":40}],"label":null,"suggested_replacement":"if gen_ipaddr().is_ipv4()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:60:20\n   |\nLL |     let _ = if let V4(_) = gen_ipaddr() {\n   |             -------^^^^^--------------- help: try this: `if gen_ipaddr().is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1245,"byte_end":1250,"line_start":62,"line_end":62,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    } else if let V6(_) = gen_ipaddr() {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1238,"byte_end":1265,"line_start":62,"line_end":62,"column_start":12,"column_end":39,"is_primary":true,"text":[{"text":"    } else if let V6(_) = gen_ipaddr() {","highlight_start":12,"highlight_end":39}],"label":null,"suggested_replacement":"if gen_ipaddr().is_ipv6()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:62:19\n   |\nLL |     } else if let V6(_) = gen_ipaddr() {\n   |            -------^^^^^--------------- help: try this: `if gen_ipaddr().is_ipv6()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1407,"byte_end":1412,"line_start":74,"line_end":74,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1400,"byte_end":1438,"line_start":74,"line_end":74,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":"if V4(Ipv4Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:74:12\n   |\nLL |     if let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n   |     -------^^^^^-------------------------- help: try this: `if V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1454,"byte_end":1459,"line_start":76,"line_end":76,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1447,"byte_end":1485,"line_start":76,"line_end":76,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":"if V6(Ipv6Addr::LOCALHOST).is_ipv6()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:76:12\n   |\nLL |     if let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n   |     -------^^^^^-------------------------- help: try this: `if V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1504,"byte_end":1509,"line_start":78,"line_end":78,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":15,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1494,"byte_end":1535,"line_start":78,"line_end":78,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"    while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":"while V4(Ipv4Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:78:15\n   |\nLL |     while let V4(_) = V4(Ipv4Addr::LOCALHOST) {}\n   |     ----------^^^^^-------------------------- help: try this: `while V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1554,"byte_end":1559,"line_start":80,"line_end":80,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":15,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1544,"byte_end":1585,"line_start":80,"line_end":80,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"    while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":"while V6(Ipv6Addr::LOCALHOST).is_ipv6()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:80:15\n   |\nLL |     while let V6(_) = V6(Ipv6Addr::LOCALHOST) {}\n   |     ----------^^^^^-------------------------- help: try this: `while V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv4()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1594,"byte_end":1678,"line_start":82,"line_end":85,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V4(Ipv4Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => true,","highlight_start":1,"highlight_end":23},{"text":"        V6(_) => false,","highlight_start":1,"highlight_end":24},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1594,"byte_end":1678,"line_start":82,"line_end":85,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V4(Ipv4Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => true,","highlight_start":1,"highlight_end":23},{"text":"        V6(_) => false,","highlight_start":1,"highlight_end":24},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"V4(Ipv4Addr::LOCALHOST).is_ipv4()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv4()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:82:5\n   |\nLL | /     match V4(Ipv4Addr::LOCALHOST) {\nLL | |         V4(_) => true,\nLL | |         V6(_) => false,\nLL | |     };\n   | |_____^ help: try this: `V4(Ipv4Addr::LOCALHOST).is_ipv4()`\n\n"}
{"message":"redundant pattern matching, consider using `is_ipv6()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1685,"byte_end":1769,"line_start":87,"line_end":90,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V6(Ipv6Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => false,","highlight_start":1,"highlight_end":24},{"text":"        V6(_) => true,","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try this","code":null,"level":"help","spans":[{"file_name":"tests/ui/redundant_pattern_matching_ipaddr.rs","byte_start":1685,"byte_end":1769,"line_start":87,"line_end":90,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    match V6(Ipv6Addr::LOCALHOST) {","highlight_start":5,"highlight_end":36},{"text":"        V4(_) => false,","highlight_start":1,"highlight_end":24},{"text":"        V6(_) => true,","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"V6(Ipv6Addr::LOCALHOST).is_ipv6()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: redundant pattern matching, consider using `is_ipv6()`\n  --> tests/ui/redundant_pattern_matching_ipaddr.rs:87:5\n   |\nLL | /     match V6(Ipv6Addr::LOCALHOST) {\nLL | |         V4(_) => false,\nLL | |         V6(_) => true,\nLL | |     };\n   | |_____^ help: try this: `V6(Ipv6Addr::LOCALHOST).is_ipv6()`\n\n"}

------------------------------------------

thread 'compile_test' panicked at 'Some tests failed', /cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.8.0/src/lib.rs:111:22
