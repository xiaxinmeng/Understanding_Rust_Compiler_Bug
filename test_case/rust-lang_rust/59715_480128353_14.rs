\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/borrowck/two-phase-nonrecv-autoref.rs","byte_start":3411,"byte_end":3412,"line_start":85,"line_end":85,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        f(f(10));","highlight_start":9,"highlight_end":10}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/borrowck/two-phase-nonrecv-autoref.rs","byte_start":3413,"byte_end":3414,"line_start":85,"line_end":85,"column_start":11,"column_end":12,"is_primary":true,"text":[{"text":"        f(f(10));","highlight_start":11,"highlight_end":12}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/borrowck/two-phase-nonrecv-autoref.rs","byte_start":3373,"byte_end":3374,"line_start":84,"line_end":84,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {","highlight_start":21,"highlight_end":22}],"label":"move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0382]: use of moved value: `f`\n  --> /checkout/src/test/ui/borrowck/two-phase-nonrecv-autoref.rs:85:11\n   |\nLL |     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n   |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\nLL |         f(f(10));\n   |         - ^ value used here after move\n   |         |\n   |         value moved here\n\n"}
[01:31:30] {"message":"cannot borrow `a` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n