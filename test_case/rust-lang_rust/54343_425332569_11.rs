\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/first-edition/ownership.html\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/borrowck/borrowck-uninit-field-access.rs","byte_start":1021,"byte_end":1033,"line_start":38,"line_end":38,"column_start":18,"column_end":30,"is_primary":false,"text":[{"text":"    let _moved = line1.origin;","highlight_start":18,"highlight_end":30}],"label":"value moved here ","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/borrowck/borrowck-uninit-field-access.rs","byte_start":1047,"byte_end":1061,"line_start":39,"line_end":39,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"    let _ = line1.origin.x + 1; //[ast]~ ERROR use of moved value: `line1.origin.x`","highlight_start":13,"highlight_end":27}],"labenonrecv-autoref.rs","byte_start":5787,"byte_end":5788,"line_start":167,"line_end":167,"column_start":7,"column_end":8,"is_primary":true,"text":[{"text":"    i[i[3]] = 4;","highlight_start":7,"highlight_end":8}],"label":"immutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/borrowck/two-phase-nonrecv-autoref.rs","byte_start":5785,"byte_end":5786,"line_start":167,"line_end":167,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    i[i[3]] = 4;","highlight_start":5,"highlight_end":6}],"label":"mutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/borrowck/two-phase-nonrecv-autoref.rs","byte_start":5785,"byte_end":5792,"line_start":167,"line_end":167,"column_start":5,"column_end":12,"is_primary":false,"text":[{"text":"    i[i[3]] = 4;","highlight_start":5,"highlight_end":12}],"label":"borrow later used here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n  --> /checkout/src/test/ui/borrowck/two-phase-nonrecv-autoref.rs:167:7\n   |\nLL |     i[i[3]] = 4;\n   |     --^----\n   |     | |\n   |     | immutable borrow occurs here\n   |     mutable borrow occurs here\n   |     borrow later used here\n\n"}
[00:47:53] {"message":"cannot borrow `i` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable aruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n