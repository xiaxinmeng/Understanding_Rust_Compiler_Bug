\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::core::macros::assert_ne macros>","byte_start":235,"byte_end":248,"line_start":10,"line_end":10,"column_start":12,"column_end":25,"is_primary":true,"text":[{"text":"left_val , & * right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) =>","highlight_start":12,"highlight_end":25}],"label":"`T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::std::macros::panic macros>","byte_start":314,"byte_end":353,"line_start":9,"line_end":9,"column_start":3,"column_end":42,"is_primary":false,"text":[{"text":"& format_args ! ( $ fmt , $ ( $ arg ) + ) , & (","highlight_start":3,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_ne macros>","byte_start":136,"byte_end":250,"line_start":6,"line_end":10,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# , & *","highlight_start":1,"highlight_end":23},{"text":"left_val , & * right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) =>","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/run-pass/raw-fat-ptr.rs","byte_start":857,"byte_end":880,"line_start":26,"line_end":26,"column_start":17,"column_end":40,"is_primary":false,"text":[{"text":"                assert_ne!(a[i], a[j]);","highlight_start":17,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"<::core::macros::assert_ne macros>","byte_start":0,"byte_end":671,"line_start":1,"line_end":21,"column_start":1,"column_end":77,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if * left_val == * right_val {","highlight_start":1,"highlight_end":31},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# , & *","highlight_start":1,"highlight_end":23},{"text":"left_val , & * right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) =>","highlight_start":1,"highlight_end":79},{"text":"{ assert_ne ! ( $ left , $ right ) } ; (","highlight_start":1,"highlight_end":41},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if * left_val == * right_val {","highlight_start":1,"highlight_end":31},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"# ,","highlight_start":1,"highlight_end":23},{"text":"& * left_val , & * right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":1,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"<::std::macros::panic macros>","byte_start":0,"byte_end":427,"line_start":1,"line_end":10,"column_start":1,"column_end":68,"is_primary":false,"text":[{"text":"(  ) => ( { panic ! ( \"explicit panic\" ) } ) ; ( $ msg : expr ) => (","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"$ crate :: rt :: begin_panic (","highlight_start":1,"highlight_end":31},{"text":"$ msg , & ( file ! (  ) , line ! (  ) , __rust_unstable_column ! (  ) ) ) } )","highlight_start":1,"highlight_end":78},{"text":"; ( $ msg : expr , ) => ( { panic ! ( $ msg ) } ) ; (","highlight_start":1,"highlight_end":54},{"text":"$ fmt : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"$ crate :: rt :: begin_panic_fmt (","highlight_start":1,"highlight_end":35},{"text":"& format_args ! ( $ fmt , $ ( $ arg ) + ) , & (","highlight_start":1,"highlight_end":48},{"text":"file ! (  ) , line ! (  ) , __rust_unstable_column ! (  ) ) ) } ) ;","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `T`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider adding a `where T: std::fmt::Debug` bound","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&T`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0277]: `T` doesn't implement `std::fmt::Debug`\n  --> /checkout/src/test/run-pass/raw-fat-ptr.rs:26:17\n   |\nLL |                 assert_ne!(a[i], a[j]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n   |\n   = help: the trait `std::fmt::Debug` is not implemented for `T`\n   = help: consider adding a `where T: std::fmt::Debug` bound\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&T`\n   = note: required by `std::fmt::Debug::fmt`\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n\n"}
[01:18:31] {"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0277`.\n"}
[01:18:31] 
[01:18:31] ------------------------------------------
[01:18:31] 
---
[01:18:31] 
[01:18:31] thread 'main' panicked at 'Some tests failed', src/tools/compiletest/src/main.rs:496:22
[01:18:31] 
[01:18:31] 
[01:18:31] command did not execute successfully: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest" "--compile-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib" "--run-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib" "--rustc-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "--src-base" "/checkout/src/test/run-pass" "--build-base" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/run-pass" "--stage-id" "stage2-x86_64-unknown-linux-gnu" "--mode" "run-pass" "--target" "x86_64-unknown-linux-gnu" "--host" "x86_64-unknown-linux-gnu" "--llvm-filecheck" "/usr/lib/llvm-6.0/bin/FileCheck" "--host-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--target-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--docck-python" "/usr/bin/python2.7" "--lldb-python" "/usr/bin/python2.7" "--gdb" "/usr/bin/gdb" "--quiet" "--llvm-version" "6.0.0\n" "--system-llvm" "--cc" "" "--cxx" "" "--cflags" "" "--llvm-components" "" "--llvm-cxxflags" "" "--adb-path" "adb" "--adb-test-dir" "/data/tmp/work" "--android-cross-path" "" "--color" "always"
[01:18:31] 
[01:18:31] 
[01:18:31] failed to run: /checkout/obj/build/bootstrap/debug/bootstrap test
[01:18:31] Build completed unsuccessfully in 0:11:37
[01:18:31] Build completed unsuccessfully in 0:11:37
[01:18:31] Makefile:48: recipe for target 'check' failed
[01:18:31] make: *** [check] Error 1
The command "stamp sh -x -c "$RUN_SCRIPT"" exited with 2.
travis_time:start:0593e7e5
$ date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
Fri Mar 15 05:48:59 UTC 2019
---
travis_time:end:21d2dff2:start=1552628941330823466,finish=1552628941395234015,duration=64410549
travis_fold:end:after_failure.4
travis_fold:start:after_failure.5
travis_time:start:2c6cb699
$ cat ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers || true
cat: ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers: No such file or directory
travis_fold:end:after_failure.5
travis_fold:start:after_failure.6
travis_time:start:182cc235
$ dmesg | grep -i kill
