\n\nEnsure that the expressions given can be evaluated as the desired integer type.\nSee the FFI section of the Reference for more information about using a custom\ninteger type:\n\nhttps://doc.rust-lang.org/reference.html#ffi-attributes\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":1566,"byte_end":1643,"line_start":51,"line_end":51,"column_start":5,"column_end":82,"is_primary":true,"text":[{"text":"    const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };","highlight_start":5,"highlight_end":82}],"label":"type validation failed: encountered a pointer, but expected the type i64","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0080]: this constant likely exhibits undefined behavior\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:51:5\n   |\nLL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type i64\n   |\n   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":1713,"byte_end":1793,"line_start":54,"line_end":54,"column_start":5,"column_end":85,"is_primary":true,"text":[{"text":"    const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };","highlight_start":5,"highlight_end":85}],"label":"attempted to read undefined bytes","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: this constant cannot be used\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:54:5\n   |\nLL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":1883,"byte_end":1919,"line_start":57,"line_end":57,"column_start":45,"column_end":81,"is_primary":false,"text":[{"text":"    const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };","highlight_start":45,"highlight_end":81}],"label":"a raw memory access tried to access part of a pointer value as raw bytes","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":1843,"byte_end":1922,"line_start":57,"line_end":57,"column_start":5,"column_end":84,"is_primary":true,"text":[{"text":"    const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };","highlight_start":5,"highlight_end":84}]84}],"label":"type validation failed: encountered a pointer, but expected the type f64","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0080]: this constant likely exhibits undefined behavior\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:60:5\n   |\nLL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type f64\n   |\n   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":2163,"byte_end":2204,"line_start":63,"line_end":63,"column_start":47,"column_end":88,"is_primary":false,"text":[{"text":"    const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };","highlight_start":47,"highlight_end":88}],"label":"a raw memory a to access part of a pointer value as raw bytes","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":2257,"byte_end":2339,"line_start":66,"line_end":66,"column_start":5,"column_end":87,"is_primary":true,"text":[{"text":"    const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };","highlight_start":5,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: this constant cannot be used\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:66:5\n   |\nLL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n   |                                               |\n   |                                               a raw memory access tried to access part of a pointer value as raw bytes\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":2423,"byte_end":2455,"line_start":69,"line_end":69,"column_start":39,"column_end":71,"is_primary":false,"text":[{"text":"    const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };","highlight_start":39,"highlight_end":71}],"label":"a raw memory access tried to access part of a pointer valuesion":null},{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":2508,"byte_end":2580,"line_start":72,"line_end":72,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: this constant cannot be used\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:72:5\n   |\nLL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n   |                                         |\n   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":2666,"byte_end":2699,"line_start":75,"line_end":75,"column_start":41,"column_end":74,"is_primary":false,"text":[{"text":"    const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };","highlight_start":41,"highlight_end":74}],"label":"a raw memory access tried to access part of a pointer value as raw bytes","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/consts/const-eval/conne_start":81,"line_end":81,"column_start":43,"column_end":77,"is_primary":false,"text":[{"text":"    const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };","highlight_start":43,"highlight_end":77}],"label":"a raw memory access tried to access part of a pointer value as raw bytes","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":2894,"byte_end":2969,"line_start":81,"line_end":81,"column_start":5,"column_end":80,"is_primary":true,"text":[{"text":"    const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };","highlight_start":5,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: this constant cannot be used\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:81:5\n   |\nLL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n   |                                           |\n   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":3053,"byte_end":3084,"line_start":84,"line_end":84,"column_start":39,"column_end":70,"is_primary":false,"text":[{"text":"    const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };","highlight_start":39,"highlight_end":70}],"label":"a raw memory access tried to access part of a pointer value as raw bytes","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":3019,"byte_end":3087,"line_start":84,"line_end":84,"column_start":5,"column_end":73,"is_primary":true,"text":[{"text":"    const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };","highlight_start":5,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: this constant cannot be used\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:84:5\n   |\nLL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------^^^\n   |                                       |\n   |                                       a raw memory access tried to access part of a pointer value as raw bytes\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":3173,"byte_end":3205,"line_start":87,"line_end":87,"column_start":41,"column_end":73,"is_primary":false,"text":[{"text":"    const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };","highlight_start":41,"highlight_end":73}],"label":"a raw memory access tried to access part of a pointer value as raw bytes","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":3137,"byte_end":3208,"line_start":87,"line_end":87,"column_start":5,"column_end":76,"is_primary":true,"text":[{"text":"    const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };","highlight_start":5,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: this constant cannot be used\n  --> /checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs:87:5\n   |\nLL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n   |                                         |\n   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n\n"}
[00:48:51] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs","byte_start":3294,"byte_end":3326,"line_start":90,"line_end":90,"column_start":41,"column_end":73,"is_primary":false,"text":[{"text":"    const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };","highlight_start":41,"highlight_end":73o sensibly evaluate an\nconstant expression that had to be evaluated. Attempting to divide by 0\nor causing integer overflow are two ways to induce this error. For example:\n\n