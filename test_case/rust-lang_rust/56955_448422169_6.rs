\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-41974.rs","byte_start":535,"byte_end":536,"line_start":17,"line_end":17,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"impl<T> Drop for T where T: A { //~ ERROR E0119","highlight_start":18,"highlight_end":19}],"label":"implementing Drop requires a struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0120]: the Drop trait may only be implemented on structures\n  --> /checkout/src/test/ui/issues/issue-41974.rs:17:18\n   |\nLL | impl<T> Drop for T where T: A { //~ ERROR E0119\n   |                  ^ implementing Drop requires a struct\n\n"}
[00:48:39] {"message":"type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)","code":{"code":"E0210","explanation":"\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule concerns the use of type parameters in an\nimplementation of a foreign trait (a trait defined in another crate), and\nstates that type parameters must be \"covered\" by a local type. To understand\nwhat this means, it is perhaps easiest to consider a few examples.\n\nIf `ForeignTrait` is a trait defined in some external crate `foo`, then the\nfollowing trait `impl` is an error:\n\n