\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs","byte_start":3247,"byte_end":3250,"line_start":120,"line_end":120,"column_start":15,"column_end":18,"is_primary":true,"text":[{"text":"    let z = x.foo(); //~ ERROR multiple applicable items in scope","highlight_start":15,"highlight_end":18}],"label":"multiple `foo` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"candidate #1 is defined in an impl of the trait `internal::X` for the type `_`","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs","byte_start":1253,"byte_end":1290,"line_start":43,"line_end":43,"column_start":9,"column_end":46,"is_primary":true,"text":[{"text":"        fn foo(self: Smaht<Self, u64>) -> u64 {","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `_`","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs","byte_start":1680,"byte_end":1692,"line_start":70,"line_end":70,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        fn foo(self) {}","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"candidate #3 is defined in the trait `FinalFoo`","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs","byte_start":1476,"byte_end":1496,"line_start":57,"line_end":57,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    fn foo(&self) -> u8;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"to disambiguate the method call, write `FinalFoo::foo(x)` instead","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"error[E0034]: multiple applicable items in scope\n  --> /checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs:120:15\n   |\nLL |     let z = x.foo(); //~ ERROR multiple applicable items in scope\n   |               ^^^ multiple `foo` found\n   |\nnote: candidate #1 is defined in an impl of the trait `internal::X` for the type `_`\n  --> /checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs:43:9\n   |\nLL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `_`\n  --> /checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs:70:9\n   |\nLL |         fn foo(self) {}\n   |         ^^^^^^^^^^^^\nnote: candidate #3 is defined in the trait `FinalFoo`\n  --> /checkout/src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs:57:5\n   |\nLL |     fn foo(&self) -> u8;\n   |     ^^^^^^^^^^^^^^^^^^^^\n   = help: to disambiguate the method call, write `FinalFoo::foo(x)` instead\n\n"}
[01:08:54] {"message":"mismatched types","code":{"code":"E0308","explanation":"\nThis error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n