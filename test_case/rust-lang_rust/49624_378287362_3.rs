\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/e0119/issue-28981.rs","byte_start":502,"byte_end":525,"line_start":15,"line_end":15,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"impl<Foo> Deref for Foo { } //~ ERROR must be used","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"conflicting implementation in crate `core`:\n- impl<'b, T> std::ops::Deref for std::cell::Ref<'b, T>\n  where T: ?Sized;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `std::cell::Ref<'_, _>`:\n  --> /checkout/src/test/ui/e0119/issue-28981.rs:15:1\n   |\nLL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: conflicting implementation in crate `core`:\n           - impl<'b, T> std::ops::Deref for std::cell::Ref<'b, T>\n             where T: ?Sized;\n\n"}
[00:41:40] {"message":"type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<Foo>`)","code":{"code":"E0210","explanation":"\nThis error indicates a violation of one of Rust's orphan rules for trait\nimplementations. The rule concerns the use of type parameters in an\nimplementation of a foreign trait (a trait defined in another crate), and\nstates that type parameters must be \"covered\" by a local type. To understand\nwhat this means, it is perhaps easiest to consider a few examples.\n\nIf `ForeignTrait` is a trait defined in some external crate `foo`, then the\nfollowing trait `impl` is an error:\n\n