plain

 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:7:62
    |
 LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
    |                                                              ^^^^ future returned by `private_future` is not `Send`
    |
 note: future is not `Send` as this value is used across an await
+  --> $DIR/future_not_send.rs:8:20
    |
    |
 LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
    |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`
 LL |     async { true }.await
-   |                   ^^^^^^ await occurs here, with `rc` maybe used later
+   |                    ^^^^^ await occurs here, with `rc` maybe used later
 LL | }
    | - `rc` is later dropped here
    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`
 note: future is not `Send` as this value is used across an await
+  --> $DIR/future_not_send.rs:8:20
    |
    |
 LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
    |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`
 LL |     async { true }.await
-   |                   ^^^^^^ await occurs here, with `cell` maybe used later
+   |                    ^^^^^ await occurs here, with `cell` maybe used later
 LL | }
    | - `cell` is later dropped here
    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`
    = note: `-D clippy::future-not-send` implied by `-D warnings`
 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:11:42
    |
    |
 LL | pub async fn public_future(rc: Rc<[u8]>) {
    |                                          ^ future returned by `public_future` is not `Send`
    |
 note: future is not `Send` as this value is used across an await
+  --> $DIR/future_not_send.rs:12:20
    |
    |
 LL | pub async fn public_future(rc: Rc<[u8]>) {
    |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`
 LL |     async { true }.await;
-   |                   ^^^^^^ await occurs here, with `rc` maybe used later
+   |                    ^^^^^ await occurs here, with `rc` maybe used later
 LL | }
    | - `rc` is later dropped here
    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`
 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:19:63
    |
    |
 LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
    |                                                               ^^^^ future returned by `private_future2` is not `Send`
    |
 note: captured value is not `Send`
    |
    |
 LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
    |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`
    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`
 note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`
    |
    |
 LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
    |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`
    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`
 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:23:43
    |
    |
 LL | pub async fn public_future2(rc: Rc<[u8]>) {}
    |                                           ^ future returned by `public_future2` is not `Send`
    |
 note: captured value is not `Send`
    |
    |
 LL | pub async fn public_future2(rc: Rc<[u8]>) {}
    |                             ^^ has type `std::rc::Rc<[u8]>` which is not `Send`
    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`
 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:34:39
    |
 LL |     async fn private_future(&self) -> usize {
 LL |     async fn private_future(&self) -> usize {
    |                                       ^^^^^ future returned by `private_future` is not `Send`
    |
 note: future is not `Send` as this value is used across an await
+  --> $DIR/future_not_send.rs:35:24
    |
 LL |     async fn private_future(&self) -> usize {
 LL |     async fn private_future(&self) -> usize {
    |                             ----- has type `&Dummy` which is not `Send`
 LL |         async { true }.await;
-   |                       ^^^^^^ await occurs here, with `&self` maybe used later
+   |                        ^^^^^ await occurs here, with `&self` maybe used later
 LL |         self.rc.len()
 LL |     }
    |     - `&self` is later dropped here
    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`
 
 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:39:39
    |
    |
 LL |     pub async fn public_future(&self) {
    |                                       ^ future returned by `public_future` is not `Send`
    |
 note: future is not `Send` as this value is used across an await
+  --> $DIR/future_not_send.rs:40:31
    |
 LL |     pub async fn public_future(&self) {
 LL |     pub async fn public_future(&self) {
    |                                ----- has type `&Dummy` which is not `Send`
 LL |         self.private_future().await;
-   |                              ^^^^^^ await occurs here, with `&self` maybe used later
+   |                               ^^^^^ await occurs here, with `&self` maybe used later
 LL |     }
    |     - `&self` is later dropped here
    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`
 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:49:37
    |
    |
 LL | async fn generic_future<T>(t: T) -> T
    |                                     ^ future returned by `generic_future` is not `Send`
    |
 note: future is not `Send` as this value is used across an await
+  --> $DIR/future_not_send.rs:54:20
    |
 LL |     let rt = &t;
 LL |     let rt = &t;
    |         -- has type `&T` which is not `Send`
 LL |     async { true }.await;
-   |                   ^^^^^^ await occurs here, with `rt` maybe used later
+   |                    ^^^^^ await occurs here, with `rt` maybe used later
 LL | }
 LL | }
    | - `rt` is later dropped here
    = note: `T` doesn't implement `std::marker::Sync`
 error: future cannot be sent between threads safely
   --> $DIR/future_not_send.rs:65:34
    |
    |
 LL | async fn unclear_future<T>(t: T) {}
    |                                  ^ future returned by `unclear_future` is not `Send`
    |
 note: captured value is not `Send`
    |
    |
 LL | async fn unclear_future<T>(t: T) {}
    |                            ^ has type `T` which is not `Send`
    = note: `T` doesn't implement `std::marker::Send`
 error: aborting due to 8 previous errors
 
 


The actual stderr differed from the expected stderr.
Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui/future_not_send.stage-id.stderr
To update references, rerun the tests and pass the `--bless` flag
To only update this specific test, also pass `--test-args future_not_send.rs`

error: 1 errors occurred comparing output.
status: exit status: 1
command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/clippy-driver" "tests/ui/future_not_send.rs" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui/future_not_send.stage-id" "-A" "unused" "--emit=metadata" "-Dwarnings" "-Zui-testing" "-L" "dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps" "-L" "dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps" "--extern" "clippy_lints=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_lints-48d2da227b3f9b72.rlib" "--extern" "syn=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libsyn-9936341359a757f2.rlib" "--extern" "regex=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libregex-619ac20e364f2b2c.rlib" "--extern" "serde=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libserde-e22c295747291f5a.rlib" "--extern" "clippy_utils=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_utils-bad1548ee8a3ddef.rlib" "--extern" "rustc_semver=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/librustc_semver-963bbd3f89834643.rlib" "--extern" "itertools=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libitertools-b6f83e8bf7b1d2e3.rlib" "--extern" "derive_new=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps/libderive_new-37e0204bcdda2709.so" "--extern" "futures=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libfutures-99ea93d45a2253f6.rlib" "--extern" "parking_lot=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libparking_lot-b83448bd4610d9d2.rlib" "--extern" "serde_derive=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps/libserde_derive-c7bacd82195bfecc.so" "--extern" "quote=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libquote-21e023f2887ebff8.rlib" "--extern" "tokio=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libtokio-e0524b7e2611e851.rlib" "--extern" "if_chain=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libif_chain-03f75cdc6d4d3afc.rlib" "--edition=2021" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/ui/future_not_send.stage-id.aux"
------------------------------------------

------------------------------------------
stderr:
stderr:
------------------------------------------
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":155,"byte_end":159,"line_start":7,"line_end":7,"column_start":62,"column_end":66,"is_primary":true,"text":[{"text":"async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":62,"highlight_end":66}],"label":"future returned by `private_future` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":155,"byte_end":159,"line_start":7,"line_end":7,"column_start":62,"column_end":66,"is_primary":false,"text":[{"text":"async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":62,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":181,"byte_end":186,"line_start":8,"line_end":8,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    async { true }.await","highlight_start":20,"highlight_end":25}],"label":"await occurs here, with `rc` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":181,"byte_end":186,"line_start":8,"line_end":8,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"    async { true }.await","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"tests/ui/future_not_send.rs","byte_start":118,"byte_end":120,"line_start":7,"line_end":7,"column_start":25,"column_end":27,"is_primary":false,"text":[{"text":"async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":25,"highlight_end":27}],"label":"has type `std::rc::Rc<[u8]>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ui/future_not_send.rs","byte_start":187,"byte_end":188,"line_start":9,"line_end":9,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`rc` is later dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":160,"byte_end":188,"line_start":7,"line_end":9,"column_start":67,"column_end":2,"is_primary":false,"text":[{"text":"async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":67,"highlight_end":68},{"text":"    async { true }.await","highlight_start":1,"highlight_end":25},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":181,"byte_end":186,"line_start":8,"line_end":8,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    async { true }.await","highlight_start":20,"highlight_end":25}],"label":"await occurs here, with `cell` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":181,"byte_end":186,"line_start":8,"line_end":8,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"    async { true }.await","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"tests/ui/future_not_send.rs","byte_start":132,"byte_end":136,"line_start":7,"line_end":7,"column_start":39,"column_end":43,"is_primary":false,"text":[{"text":"async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":39,"highlight_end":43}],"label":"has type `&std::cell::Cell<usize>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ui/future_not_send.rs","byte_start":187,"byte_end":188,"line_start":9,"line_end":9,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`cell` is later dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":160,"byte_end":188,"line_start":7,"line_end":9,"column_start":67,"column_end":2,"is_primary":false,"text":[{"text":"async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":67,"highlight_end":68},{"text":"    async { true }.await","highlight_start":1,"highlight_end":25},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::cell::Cell<usize>` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`-D clippy::future-not-send` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:7:62\n   |\nLL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n   |                                                              ^^^^ future returned by `private_future` is not `Send`\n   |\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/future_not_send.rs:8:20\n   |\nLL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n   |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`\nLL |     async { true }.await\n   |                    ^^^^^ await occurs here, with `rc` maybe used later\nLL | }\n   | - `rc` is later dropped here\n   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/future_not_send.rs:8:20\n   |\nLL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n   |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`\nLL |     async { true }.await\n   |                    ^^^^^ await occurs here, with `cell` maybe used later\nLL | }\n   | - `cell` is later dropped here\n   = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n   = note: `-D clippy::future-not-send` implied by `-D warnings`\n\n"}
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":231,"byte_end":231,"line_start":11,"line_end":11,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"pub async fn public_future(rc: Rc<[u8]>) {","highlight_start":42,"highlight_end":42}],"label":"future returned by `public_future` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":231,"byte_end":231,"line_start":11,"line_end":11,"column_start":42,"column_end":42,"is_primary":false,"text":[{"text":"pub async fn public_future(rc: Rc<[u8]>) {","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":252,"byte_end":257,"line_start":12,"line_end":12,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    async { true }.await;","highlight_start":20,"highlight_end":25}],"label":"await occurs here, with `rc` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":252,"byte_end":257,"line_start":12,"line_end":12,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"    async { true }.await;","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"tests/ui/future_not_send.rs","byte_start":217,"byte_end":219,"line_start":11,"line_end":11,"column_start":28,"column_end":30,"is_primary":false,"text":[{"text":"pub async fn public_future(rc: Rc<[u8]>) {","highlight_start":28,"highlight_end":30}],"label":"has type `std::rc::Rc<[u8]>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ui/future_not_send.rs","byte_start":259,"byte_end":260,"line_start":13,"line_end":13,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`rc` is later dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":231,"byte_end":260,"line_start":11,"line_end":13,"column_start":42,"column_end":2,"is_primary":false,"text":[{"text":"pub async fn public_future(rc: Rc<[u8]>) {","highlight_start":42,"highlight_end":43},{"text":"    async { true }.await;","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:11:42\n   |\nLL | pub async fn public_future(rc: Rc<[u8]>) {\n   |                                          ^ future returned by `public_future` is not `Send`\n   |\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/future_not_send.rs:12:20\n   |\nLL | pub async fn public_future(rc: Rc<[u8]>) {\n   |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`\nLL |     async { true }.await;\n   |                    ^^^^^ await occurs here, with `rc` maybe used later\nLL | }\n   | - `rc` is later dropped here\n   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n\n"}
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":404,"byte_end":408,"line_start":19,"line_end":19,"column_start":63,"column_end":67,"is_primary":true,"text":[{"text":"async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":63,"highlight_end":67}],"label":"future returned by `private_future2` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":404,"byte_end":408,"line_start":19,"line_end":19,"column_start":63,"column_end":67,"is_primary":false,"text":[{"text":"async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":63,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":367,"byte_end":369,"line_start":19,"line_end":19,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":26,"highlight_end":28}],"label":"has type `std::rc::Rc<[u8]>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":367,"byte_end":369,"line_start":19,"line_end":19,"column_start":26,"column_end":28,"is_primary":false,"text":[{"text":"async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":381,"byte_end":385,"line_start":19,"line_end":19,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":40,"highlight_end":44}],"label":"has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":381,"byte_end":385,"line_start":19,"line_end":19,"column_start":40,"column_end":44,"is_primary":false,"text":[{"text":"async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {","highlight_start":40,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::cell::Cell<usize>` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:19:63\n   |\nLL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n   |                                                               ^^^^ future returned by `private_future2` is not `Send`\n   |\nnote: captured value is not `Send`\n  --> tests/ui/future_not_send.rs:19:26\n   |\nLL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n   |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\nnote: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n  --> tests/ui/future_not_send.rs:19:40\n   |\nLL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`\n   = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n\n"}
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":465,"byte_end":465,"line_start":23,"line_end":23,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"pub async fn public_future2(rc: Rc<[u8]>) {}","highlight_start":43,"highlight_end":43}],"label":"future returned by `public_future2` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":465,"byte_end":465,"line_start":23,"line_end":23,"column_start":43,"column_end":43,"is_primary":false,"text":[{"text":"pub async fn public_future2(rc: Rc<[u8]>) {}","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":451,"byte_end":453,"line_start":23,"line_end":23,"column_start":29,"column_end":31,"is_primary":true,"text":[{"text":"pub async fn public_future2(rc: Rc<[u8]>) {}","highlight_start":29,"highlight_end":31}],"label":"has type `std::rc::Rc<[u8]>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":451,"byte_end":453,"line_start":23,"line_end":23,"column_start":29,"column_end":31,"is_primary":false,"text":[{"text":"pub async fn public_future2(rc: Rc<[u8]>) {}","highlight_start":29,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:23:43\n   |\nLL | pub async fn public_future2(rc: Rc<[u8]>) {}\n   |                                           ^ future returned by `public_future2` is not `Send`\n   |\nnote: captured value is not `Send`\n  --> tests/ui/future_not_send.rs:23:29\n   |\nLL | pub async fn public_future2(rc: Rc<[u8]>) {}\n   |                             ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n\n"}
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":621,"byte_end":626,"line_start":34,"line_end":34,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"    async fn private_future(&self) -> usize {","highlight_start":39,"highlight_end":44}],"label":"future returned by `private_future` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":621,"byte_end":626,"line_start":34,"line_end":34,"column_start":39,"column_end":44,"is_primary":false,"text":[{"text":"    async fn private_future(&self) -> usize {","highlight_start":39,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":652,"byte_end":657,"line_start":35,"line_end":35,"column_start":24,"column_end":29,"is_primary":true,"text":[{"text":"        async { true }.await;","highlight_start":24,"highlight_end":29}],"label":"await occurs here, with `&self` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":652,"byte_end":657,"line_start":35,"line_end":35,"column_start":24,"column_end":29,"is_primary":false,"text":[{"text":"        async { true }.await;","highlight_start":24,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"tests/ui/future_not_send.rs","byte_start":611,"byte_end":616,"line_start":34,"line_end":34,"column_start":29,"column_end":34,"is_primary":false,"text":[{"text":"    async fn private_future(&self) -> usize {","highlight_start":29,"highlight_end":34}],"label":"has type `&Dummy` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ui/future_not_send.rs","byte_start":685,"byte_end":686,"line_start":37,"line_end":37,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"`&self` is later dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":627,"byte_end":686,"line_start":34,"line_end":37,"column_start":45,"column_end":6,"is_primary":false,"text":[{"text":"    async fn private_future(&self) -> usize {","highlight_start":45,"highlight_end":46},{"text":"        async { true }.await;","highlight_start":1,"highlight_end":30},{"text":"        self.rc.len()","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:34:39\n   |\nLL |     async fn private_future(&self) -> usize {\n   |                                       ^^^^^ future returned by `private_future` is not `Send`\n   |\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/future_not_send.rs:35:24\n   |\nLL |     async fn private_future(&self) -> usize {\n   |                             ----- has type `&Dummy` which is not `Send`\nLL |         async { true }.await;\n   |                        ^^^^^ await occurs here, with `&self` maybe used later\nLL |         self.rc.len()\nLL |     }\n   |     - `&self` is later dropped here\n   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n\n"}
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":726,"byte_end":726,"line_start":39,"line_end":39,"column_start":39,"column_end":39,"is_primary":true,"text":[{"text":"    pub async fn public_future(&self) {","highlight_start":39,"highlight_end":39}],"label":"future returned by `public_future` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":726,"byte_end":726,"line_start":39,"line_end":39,"column_start":39,"column_end":39,"is_primary":false,"text":[{"text":"    pub async fn public_future(&self) {","highlight_start":39,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":758,"byte_end":763,"line_start":40,"line_end":40,"column_start":31,"column_end":36,"is_primary":true,"text":[{"text":"        self.private_future().await;","highlight_start":31,"highlight_end":36}],"label":"await occurs here, with `&self` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":758,"byte_end":763,"line_start":40,"line_end":40,"column_start":31,"column_end":36,"is_primary":false,"text":[{"text":"        self.private_future().await;","highlight_start":31,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"tests/ui/future_not_send.rs","byte_start":719,"byte_end":724,"line_start":39,"line_end":39,"column_start":32,"column_end":37,"is_primary":false,"text":[{"text":"    pub async fn public_future(&self) {","highlight_start":32,"highlight_end":37}],"label":"has type `&Dummy` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ui/future_not_send.rs","byte_start":769,"byte_end":770,"line_start":41,"line_end":41,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"`&self` is later dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":726,"byte_end":770,"line_start":39,"line_end":41,"column_start":39,"column_end":6,"is_primary":false,"text":[{"text":"    pub async fn public_future(&self) {","highlight_start":39,"highlight_end":40},{"text":"        self.private_future().await;","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:39:39\n   |\nLL |     pub async fn public_future(&self) {\n   |                                       ^ future returned by `public_future` is not `Send`\n   |\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/future_not_send.rs:40:31\n   |\nLL |     pub async fn public_future(&self) {\n   |                                ----- has type `&Dummy` which is not `Send`\nLL |         self.private_future().await;\n   |                               ^^^^^ await occurs here, with `&self` maybe used later\nLL |     }\n   |     - `&self` is later dropped here\n   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n\n"}
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":954,"byte_end":955,"line_start":49,"line_end":49,"column_start":37,"column_end":38,"is_primary":true,"text":[{"text":"async fn generic_future<T>(t: T) -> T","highlight_start":37,"highlight_end":38}],"label":"future returned by `generic_future` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":954,"byte_end":955,"line_start":49,"line_end":49,"column_start":37,"column_end":38,"is_primary":false,"text":[{"text":"async fn generic_future<T>(t: T) -> T","highlight_start":37,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":1013,"byte_end":1018,"line_start":54,"line_end":54,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    async { true }.await;","highlight_start":20,"highlight_end":25}],"label":"await occurs here, with `rt` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":1013,"byte_end":1018,"line_start":54,"line_end":54,"column_start":20,"column_end":25,"is_primary":false,"text":[{"text":"    async { true }.await;","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"tests/ui/future_not_send.rs","byte_start":985,"byte_end":987,"line_start":53,"line_end":53,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"    let rt = &t;","highlight_start":9,"highlight_end":11}],"label":"has type `&T` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ui/future_not_send.rs","byte_start":1026,"byte_end":1027,"line_start":56,"line_end":56,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`rt` is later dropped here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`T` doesn't implement `std::marker::Sync`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:49:37\n   |\nLL | async fn generic_future<T>(t: T) -> T\n   |                                     ^ future returned by `generic_future` is not `Send`\n   |\nnote: future is not `Send` as this value is used across an await\n  --> tests/ui/future_not_send.rs:54:20\n   |\nLL |     let rt = &t;\n   |         -- has type `&T` which is not `Send`\nLL |     async { true }.await;\n   |                    ^^^^^ await occurs here, with `rt` maybe used later\nLL |     t\nLL | }\n   | - `rt` is later dropped here\n   = note: `T` doesn't implement `std::marker::Sync`\n\n"}
{"message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":1150,"byte_end":1150,"line_start":65,"line_end":65,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"async fn unclear_future<T>(t: T) {}","highlight_start":34,"highlight_end":34}],"label":"future returned by `unclear_future` is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":1150,"byte_end":1150,"line_start":65,"line_end":65,"column_start":34,"column_end":34,"is_primary":false,"text":[{"text":"async fn unclear_future<T>(t: T) {}","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"tests/ui/future_not_send.rs","byte_start":1144,"byte_end":1145,"line_start":65,"line_end":65,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"async fn unclear_future<T>(t: T) {}","highlight_start":28,"highlight_end":29}],"label":"has type `T` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/future_not_send.rs","byte_start":1144,"byte_end":1145,"line_start":65,"line_end":65,"column_start":28,"column_end":29,"is_primary":false,"text":[{"text":"async fn unclear_future<T>(t: T) {}","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"tests/ui/future_not_send.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`T` doesn't implement `std::marker::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: future cannot be sent between threads safely\n  --> tests/ui/future_not_send.rs:65:34\n   |\nLL | async fn unclear_future<T>(t: T) {}\n   |                                  ^ future returned by `unclear_future` is not `Send`\n   |\nnote: captured value is not `Send`\n  --> tests/ui/future_not_send.rs:65:28\n   |\nLL | async fn unclear_future<T>(t: T) {}\n   |                            ^ has type `T` which is not `Send`\n   = note: `T` doesn't implement `std::marker::Send`\n\n"}

------------------------------------------

thread 'compile_test' panicked at 'Some tests failed', /cargo/registry/src/index.crates.io-6f17d22bba15001f/compiletest_rs-0.10.0/src/lib.rs:111:22
