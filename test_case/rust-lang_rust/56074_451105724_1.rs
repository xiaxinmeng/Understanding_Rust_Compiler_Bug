\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/impl-trait/infinite-impl-trait-issue-38064.rs","byte_start":154,"byte_end":163,"line_start":8,"line_end":8,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"fn foo() -> impl Quux { //~ opaque type expands to a recursive type","highlight_start":13,"highlight_end":22}],"label":"expands to self-referential type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/impl-trait/infinite-impl-trait-issue-38064.rs","byte_start":154,"byte_end":163,"line_start":8,"line_end":8,"column_start":13,"column_end":22,"is_primary":false,"text":[{"text":"fn foo() -> impl Quux { //~ opaque type expands to a recursive type","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `existential type`","def_site_span":{"file_name":"/checkout/src/test/ui/impl-trait/infinite-impl-trait-issue-38064.rs","byte_start":154,"byte_end":163,"line_start":8,"line_end":8,"column_start":13,"column_end":22,"is_primary":false,"text":[{"text":"fn foo() -> impl Quux { //~ opaque type expands to a recursive type","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expanded type is `foo::Foo<bar::Bar<impl Quux>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0720]: opaque type expands to a recursive type\n  --> /checkout/src/test/ui/impl-trait/infinite-impl-trait-issue-38064.rs:8:13\n   |\nLL | fn foo() -> impl Quux { //~ opaque type expands to a recursive type\n   |             ^^^^^^^^^ expands to self-referential type\n   |\n   = note: expanded type is `foo::Foo<bar::Bar<impl Quux>>`\n\n"}
[00:48:39] {"message":"opaque type expands to a recursive type","code":{"code":"E0720","explanation":"\nAn `impl Trait` type expands to a recursive type.\n\nAn `impl Trait` type must be expandable to a concrete type that contains no\n`impl Trait` types. For example the following example tries to create an\n`impl Trait` type `T` that is equal to `[T, T]`:\n\n