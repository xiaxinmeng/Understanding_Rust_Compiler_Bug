plain
travis_time:end:19b1eccc:start=1547999115872601801,finish=1547999187262564648,duration=71389962847
$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout

Encrypted environment variables have been removed for security reasons.
See https://docs.travis-ci.com/user/pull-requests/#pull-requests-and-security-restrictions
$ export SCCACHE_BUCKET=rust-lang-ci-sccache2
$ export SCCACHE_REGION=us-west-1
Setting environment variables from .travis.yml
$ export IMAGE=x86_64-gnu-llvm-6.0
---
travis_time:start:test_incremental
Check compiletest suite=incremental mode=incremental (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
[01:11:22] 
[01:11:22] running 96 tests
[01:11:34] .FF........F..F...F..F.FF..FFF.FFFFFFF.....FFF..F.......................F...........F..F.FF...F.
[01:11:34] 
[01:11:34] ---- [incremental] incremental/change_add_field/struct_point.rs stdout ----
[01:11:34] 
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/change_add_field/struct_point.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/change_add_field/struct_point/struct_point.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/change_add_field/struct_point/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/change_add_field/struct_point/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`TypeckTables(fn_with_type_in_sig::boop)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/change_add_field/struct_point.rs","byte_start":2240,"byte_end":2329,"line_start":74,"line_end":76,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn boop(p: Option<&Point>) -> f32 {","highlight_start":5,"highlight_end":44},{"text":"        p.map(|p| p.total()).unwrap_or(0.0)","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(fn_with_type_in_sig::boop)` should be dirty but is not\n  --> /checkout/src/test/incremental/change_add_field/struct_point.rs:74:5\n   |\nLL | /     pub fn boop(p: Option<&Point>) -> f32 {\nLL | |         p.map(|p| p.total()).unwrap_or(0.0)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(call_fn_with_type_in_sig::bip)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/change_add_field/struct_point.rs","byte_start":2771,"byte_end":2838,"line_start":90,"line_end":92,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn bip() -> f32 {","highlight_start":5,"highlight_end":26},{"text":"        fn_with_type_in_sig::boop(None)","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(call_fn_with_type_in_sig::bip)` should be dirty but is not\n  --> /checkout/src/test/incremental/change_add_field/struct_point.rs:90:5\n   |\nLL | /     pub fn bip() -> f32 {\nLL | |         fn_with_type_in_sig::boop(None)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(fn_with_type_in_body::boop)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/change_add_field/struct_point.rs","byte_start":3252,"byte_end":3312,"line_start":106,"line_end":108,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn boop() -> f32 {","highlight_start":5,"highlight_end":27},{"text":"        Point::origin().total()","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(fn_with_type_in_body::boop)` should be dirty but is not\n  --> /checkout/src/test/incremental/change_add_field/struct_point.rs:106:5\n   |\nLL | /     pub fn boop() -> f32 {\nLL | |         Point::origin().total()\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(fn_make_struct::make_origin)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/change_add_field/struct_point.rs","byte_start":3921,"byte_end":3988,"line_start":129,"line_end":131,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn make_origin(p: Point) -> Point {","highlight_start":5,"highlight_end":44},{"text":"        Point { ..p }","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(fn_make_struct::make_origin)` should be dirty but is not\n  --> /checkout/src/test/incremental/change_add_field/struct_point.rs:129:5\n   |\nLL | /     pub fn make_origin(p: Point) -> Point {\nLL | |         Point { ..p }\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(fn_read_field::get_x)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/change_add_field/struct_point.rs","byte_start":4171,"byte_end":4220,"line_start":139,"line_end":141,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn get_x(p: Point) -> f32 {","highlight_start":5,"highlight_end":36},{"text":"        p.x","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(fn_read_field::get_x)` should be dirty but is not\n  --> /checkout/src/test/incremental/change_add_field/struct_point.rs:139:5\n   |\nLL | /     pub fn get_x(p: Point) -> f32 {\nLL | |         p.x\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(fn_write_field::inc_x)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/change_add_field/struct_point.rs","byte_start":4407,"byte_end":4462,"line_start":149,"line_end":151,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn inc_x(p: &mut Point) {","highlight_start":5,"highlight_end":34},{"text":"        p.x += 1.0;","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(fn_write_field::inc_x)` should be dirty but is not\n  --> /checkout/src/test/incremental/change_add_field/struct_point.rs:149:5\n   |\nLL | /     pub fn inc_x(p: &mut Point) {\nLL | |         p.x += 1.0;\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 6 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/change_add_field/struct_point.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] note: Run with `RUST_BACKTRACE=1` for a backtrace.
[01:11:34] note: Run with `RUST_BACKTRACE=1` for a backtrace.
[01:11:34] 
[01:11:34] ---- [incremental] incremental/callee_caller_cross_crate/b.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `rpass2`: compilation failed!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/callee_caller_cross_crate/b.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "rpass2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/callee_caller_cross_crate/b/b.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/callee_caller_cross_crate/b/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/callee_caller_cross_crate/b/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`TypeckTables(call_function0)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/callee_caller_cross_crate/b.rs","byte_start":176,"byte_end":225,"line_start":10,"line_end":12,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn call_function0() {","highlight_start":1,"highlight_end":26},{"text":"    a::function0(77);","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(call_function0)` should be dirty but is not\n  --> /checkout/src/test/incremental/callee_caller_cross_crate/b.rs:10:1\n   |\nLL | / pub fn call_function0() {\nLL | |     a::function0(77);\nLL | | }\n   | |_^\n\n"}
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/callee_caller_cross_crate/b.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] thread '[incremental] incremental/callee_caller_cross_crate/b.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] ---- [incremental] incremental/change_pub_inherent_method_sig/struct_point.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/change_pub_inherent_method_sig/struct_point.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/change_pub_inherent_method_sig/struct_point/struct_point.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/change_pub_inherent_method_sig/struct_point/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/change_pub_inherent_method_sig/struct_point/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`TypeckTables(fn_calls_changed_method::check)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/change_pub_inherent_method_sig/struct_point.rs","byte_start":1765,"byte_end":1866,"line_start":56,"line_end":59,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn check() {","highlight_start":5,"highlight_end":21},{"text":"        let p = Point { x: 2.0, y: 2.0 };","highlight_start":1,"highlight_end":42},{"text":"        p.distance_from_point(None);","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(fn_calls_changed_method::check)` should be dirty but is not\n  --> /checkout/src/test/incremental/change_pub_inherent_method_sig/struct_point.rs:56:5\n   |\nLL | /     pub fn check() {\nLL | |         let p = Point { x: 2.0, y: 2.0 };\nLL | |         p.distance_from_point(None);\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/change_pub_inherent_method_sig/struct_point.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] thread '[incremental] incremental/change_pub_inherent_method_sig/struct_point.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] ---- [incremental] incremental/dirty_clean.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: /checkout/src/test/incremental/dirty_clean.rs:29: expected error not found: `TypeckTables(y::y)` should be clean but is not
[01:11:34] 
[01:11:34] error in revision `cfail2`: 0 unexpected errors found, 1 expected errors not found
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/dirty_clean.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/dirty_clean/dirty_clean.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/dirty_clean/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/dirty_clean/auxiliary"
[01:11:34]     Error {
[01:11:34]         line_num: 29,
[01:11:34]         kind: Some(
[01:11:34]             Error
[01:11:34]             Error
[01:11:34]         ),
[01:11:34]         msg: "`TypeckTables(y::y)` should be clean but is not"
[01:11:34] ]
[01:11:34] 
[01:11:34] thread '[incremental] incremental/dirty_clean.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:1342:13
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/call_expressions.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/call_expressions.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/call_expressions/call_expressions.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/call_expressions/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/call_expressions/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_callee_function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":876,"byte_end":929,"line_start":30,"line_end":32,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_callee_function() {","highlight_start":1,"highlight_end":34},{"text":"    callee2(1, 2)","highlight_start":1,"highlight_end":18},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_callee_function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:30:1\n   |\nLL | / pub fn change_callee_function() {\nLL | |     callee2(1, 2)\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_callee_function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":876,"byte_end":929,"line_start":30,"line_end":32,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_callee_function() {","highlight_start":1,"highlight_end":34},{"text":"    callee2(1, 2)","highlight_start":1,"highlight_end":18},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_callee_function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:30:1\n   |\nLL | / pub fn change_callee_function() {\nLL | |     callee2(1, 2)\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_argument_function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":1208,"byte_end":1263,"line_start":45,"line_end":47,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_argument_function() {","highlight_start":1,"highlight_end":36},{"text":"    callee1(1, 3)","highlight_start":1,"highlight_end":18},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_argument_function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:45:1\n   |\nLL | / pub fn change_argument_function() {\nLL | |     callee1(1, 3)\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_callee_method)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":2208,"byte_end":2287,"line_start":86,"line_end":89,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_callee_method() {","highlight_start":1,"highlight_end":32},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    s.method2('x', true);","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_callee_method)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:86:1\n   |\nLL | / pub fn change_callee_method() {\nLL | |     let s = Struct;\nLL | |     s.method2('x', true);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_callee_method)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":2208,"byte_end":2287,"line_start":86,"line_end":89,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_callee_method() {","highlight_start":1,"highlight_end":32},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    s.method2('x', true);","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_callee_method)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:86:1\n   |\nLL | / pub fn change_callee_method() {\nLL | |     let s = Struct;\nLL | |     s.method2('x', true);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_argument_method)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":2592,"byte_end":2673,"line_start":103,"line_end":106,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_argument_method() {","highlight_start":1,"highlight_end":34},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    s.method1('y', true);","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_argument_method)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:103:1\n   |\nLL | / pub fn change_argument_method() {\nLL | |     let s = Struct;\nLL | |     s.method1('y', true);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_ufcs_callee_method)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":3004,"byte_end":3098,"line_start":120,"line_end":123,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_ufcs_callee_method() {","highlight_start":1,"highlight_end":37},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    Struct::method2(&s, 'x', true);","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_ufcs_callee_method)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:120:1\n   |\nLL | / pub fn change_ufcs_callee_method() {\nLL | |     let s = Struct;\nLL | |     Struct::method2(&s, 'x', true);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_ufcs_callee_method)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":3004,"byte_end":3098,"line_start":120,"line_end":123,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_ufcs_callee_method() {","highlight_start":1,"highlight_end":37},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    Struct::method2(&s, 'x', true);","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_ufcs_callee_method)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:120:1\n   |\nLL | / pub fn change_ufcs_callee_method() {\nLL | |     let s = Struct;\nLL | |     Struct::method2(&s, 'x', true);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_argument_method_ufcs)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":3418,"byte_end":3515,"line_start":137,"line_end":140,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_argument_method_ufcs() {","highlight_start":1,"highlight_end":39},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    Struct::method1(&s, 'x', false);","highlight_start":1,"highlight_end":37},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_argument_method_ufcs)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:137:1\n   |\nLL | / pub fn change_argument_method_ufcs() {\nLL | |     let s = Struct;\nLL | |     Struct::method1(&s, 'x', false);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_to_ufcs)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":3945,"byte_end":4028,"line_start":156,"line_end":159,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_to_ufcs() {","highlight_start":1,"highlight_end":26},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    Struct::method1(&s, 'x', true);","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_to_ufcs)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:156:1\n   |\nLL | / pub fn change_to_ufcs() {\nLL | |     let s = Struct;\nLL | |     Struct::method1(&s, 'x', true);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_to_ufcs)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":3945,"byte_end":4028,"line_start":156,"line_end":159,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_to_ufcs() {","highlight_start":1,"highlight_end":26},{"text":"    let s = Struct;","highlight_start":1,"highlight_end":20},{"text":"    Struct::method1(&s, 'x', true);","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_to_ufcs)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:156:1\n   |\nLL | / pub fn change_to_ufcs() {\nLL | |     let s = Struct;\nLL | |     Struct::method1(&s, 'x', true);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_ufcs_callee_indirectly::change_ufcs_callee_indirectly)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":4471,"byte_end":4581,"line_start":178,"line_end":181,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn change_ufcs_callee_indirectly() {","highlight_start":5,"highlight_end":45},{"text":"        let s = Struct;","highlight_start":1,"highlight_end":24},{"text":"        Struct::method1(&s, 'q', false)","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_ufcs_callee_indirectly::change_ufcs_callee_indirectly)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:178:5\n   |\nLL | /     pub fn change_ufcs_callee_indirectly() {\nLL | |         let s = Struct;\nLL | |         Struct::method1(&s, 'q', false)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_ufcs_callee_indirectly::change_ufcs_callee_indirectly)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/call_expressions.rs","byte_start":4471,"byte_end":4581,"line_start":178,"line_end":181,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn change_ufcs_callee_indirectly() {","highlight_start":5,"highlight_end":45},{"text":"        let s = Struct;","highlight_start":1,"highlight_end":24},{"text":"        Struct::method1(&s, 'q', false)","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_ufcs_callee_indirectly::change_ufcs_callee_indirectly)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/call_expressions.rs:178:5\n   |\nLL | /     pub fn change_ufcs_callee_indirectly() {\nLL | |         let s = Struct;\nLL | |         Struct::method1(&s, 'q', false)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"aborting due to 13 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 13 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/call_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/closure_expressions.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/closure_expressions.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/closure_expressions/closure_expressions.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/closure_expressions/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/closure_expressions/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(add_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":1112,"byte_end":1184,"line_start":42,"line_end":45,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_parameter() {","highlight_start":1,"highlight_end":25},{"text":"    let x = 0u32;","highlight_start":1,"highlight_end":18},{"text":"    let _ = |x: u32| x + 1;","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:42:1\n   |\nLL | / pub fn add_parameter() {\nLL | |     let x = 0u32;\nLL | |     let _ = |x: u32| x + 1;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":1112,"byte_end":1184,"line_start":42,"line_end":45,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_parameter() {","highlight_start":1,"highlight_end":25},{"text":"    let x = 0u32;","highlight_start":1,"highlight_end":18},{"text":"    let _ = |x: u32| x + 1;","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:42:1\n   |\nLL | / pub fn add_parameter() {\nLL | |     let x = 0u32;\nLL | |     let _ = |x: u32| x + 1;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_parameter_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":1472,"byte_end":1535,"line_start":58,"line_end":60,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_parameter_pattern() {","highlight_start":1,"highlight_end":36},{"text":"    let _ = |&x: &u32| x;","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_parameter_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:58:1\n   |\nLL | / pub fn change_parameter_pattern() {\nLL | |     let _ = |&x: &u32| x;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_parameter_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":1472,"byte_end":1535,"line_start":58,"line_end":60,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_parameter_pattern() {","highlight_start":1,"highlight_end":36},{"text":"    let _ = |&x: &u32| x;","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_parameter_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:58:1\n   |\nLL | / pub fn change_parameter_pattern() {\nLL | |     let _ = |&x: &u32| x;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_type_ascription_to_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":2148,"byte_end":2259,"line_start":89,"line_end":92,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_type_ascription_to_parameter() {","highlight_start":1,"highlight_end":44},{"text":"    let closure = |x: u32| x + 1u32;","highlight_start":1,"highlight_end":37},{"text":"    let _: u32 = closure(1);","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_type_ascription_to_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:89:1\n   |\nLL | / pub fn add_type_ascription_to_parameter() {\nLL | |     let closure = |x: u32| x + 1u32;\nLL | |     let _: u32 = closure(1);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_type_ascription_to_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":2148,"byte_end":2259,"line_start":89,"line_end":92,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_type_ascription_to_parameter() {","highlight_start":1,"highlight_end":44},{"text":"    let closure = |x: u32| x + 1u32;","highlight_start":1,"highlight_end":37},{"text":"    let _: u32 = closure(1);","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_type_ascription_to_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:89:1\n   |\nLL | / pub fn add_type_ascription_to_parameter() {\nLL | |     let closure = |x: u32| x + 1u32;\nLL | |     let _: u32 = closure(1);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_parameter_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":2600,"byte_end":2701,"line_start":106,"line_end":109,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_parameter_type() {","highlight_start":1,"highlight_end":33},{"text":"    let closure = |x: u16| (x as u64) + 1;","highlight_start":1,"highlight_end":43},{"text":"    let _ = closure(1);","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_parameter_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:106:1\n   |\nLL | / pub fn change_parameter_type() {\nLL | |     let closure = |x: u16| (x as u64) + 1;\nLL | |     let _ = closure(1);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_parameter_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/closure_expressions.rs","byte_start":2600,"byte_end":2701,"line_start":106,"line_end":109,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_parameter_type() {","highlight_start":1,"highlight_end":33},{"text":"    let closure = |x: u16| (x as u64) + 1;","highlight_start":1,"highlight_end":43},{"text":"    let _ = closure(1);","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_parameter_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/closure_expressions.rs:106:1\n   |\nLL | / pub fn change_parameter_type() {\nLL | |     let closure = |x: u16| (x as u64) + 1;\nLL | |     let _ = closure(1);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 8 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/closure_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/exported_vs_not.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/exported_vs_not.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/exported_vs_not/exported_vs_not.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/exported_vs_not/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/exported_vs_not/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(body_not_exported_to_metadata)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/exported_vs_not.rs","byte_start":581,"byte_end":636,"line_start":21,"line_end":23,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn body_not_exported_to_metadata() -> u32 {","highlight_start":1,"highlight_end":48},{"text":"    2","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(body_not_exported_to_metadata)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/exported_vs_not.rs:21:1\n   |\nLL | / pub fn body_not_exported_to_metadata() -> u32 {\nLL | |     2\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(body_exported_to_metadata_because_of_inline)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/exported_vs_not.rs","byte_start":1070,"byte_end":1139,"line_start":41,"line_end":43,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn body_exported_to_metadata_because_of_inline() -> u32 {","highlight_start":1,"highlight_end":62},{"text":"    2","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(body_exported_to_metadata_because_of_inline)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/exported_vs_not.rs:41:1\n   |\nLL | / pub fn body_exported_to_metadata_because_of_inline() -> u32 {\nLL | |     2\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(body_exported_to_metadata_because_of_generic)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/exported_vs_not.rs","byte_start":1562,"byte_end":1632,"line_start":61,"line_end":63,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn body_exported_to_metadata_because_of_generic() -> u32 {","highlight_start":1,"highlight_end":63},{"text":"    2","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(body_exported_to_metadata_because_of_generic)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/exported_vs_not.rs:61:1\n   |\nLL | / pub fn body_exported_to_metadata_because_of_generic() -> u32 {\nLL | |     2\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 3 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/exported_vs_not.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/enum_constructors.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/enum_constructors.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/enum_constructors/enum_constructors.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/enum_constructors/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/enum_constructors/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_field_value_struct_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":965,"byte_end":1083,"line_start":39,"line_end":45,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_field_value_struct_like() -> Enum {","highlight_start":1,"highlight_end":50},{"text":"    Enum::Struct {","highlight_start":1,"highlight_end":19},{"text":"        x: 0,","highlight_start":1,"highlight_end":14},{"text":"        y: 2,","highlight_start":1,"highlight_end":14},{"text":"        z: 2,","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_field_value_struct_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:39:1\n   |\nLL | / pub fn change_field_value_struct_like() -> Enum {\nLL | |     Enum::Struct {\nLL | |         x: 0,\nLL | |         y: 2,\nLL | |         z: 2,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_field_order_struct_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":1542,"byte_end":1660,"line_start":64,"line_end":70,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_field_order_struct_like() -> Enum {","highlight_start":1,"highlight_end":50},{"text":"    Enum::Struct {","highlight_start":1,"highlight_end":19},{"text":"        y: 4,","highlight_start":1,"highlight_end":14},{"text":"        x: 3,","highlight_start":1,"highlight_end":14},{"text":"        z: 5,","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_field_order_struct_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:64:1\n   |\nLL | / pub fn change_field_order_struct_like() -> Enum {\nLL | |     Enum::Struct {\nLL | |         y: 4,\nLL | |         x: 3,\nLL | |         z: 5,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_path_struct_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":2221,"byte_end":2346,"line_start":101,"line_end":107,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_path_struct_like() {","highlight_start":1,"highlight_end":47},{"text":"    let _ = Enum2::Struct {","highlight_start":1,"highlight_end":28},{"text":"        x: 0,","highlight_start":1,"highlight_end":14},{"text":"        y: 1,","highlight_start":1,"highlight_end":14},{"text":"        z: 2,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_path_struct_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:101:1\n   |\nLL | / pub fn change_constructor_path_struct_like() {\nLL | |     let _ = Enum2::Struct {\nLL | |         x: 0,\nLL | |         y: 1,\nLL | |         z: 2,\nLL | |     };\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_path_struct_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":2221,"byte_end":2346,"line_start":101,"line_end":107,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_path_struct_like() {","highlight_start":1,"highlight_end":47},{"text":"    let _ = Enum2::Struct {","highlight_start":1,"highlight_end":28},{"text":"        x: 0,","highlight_start":1,"highlight_end":14},{"text":"        y: 1,","highlight_start":1,"highlight_end":14},{"text":"        z: 2,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_path_struct_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:101:1\n   |\nLL | / pub fn change_constructor_path_struct_like() {\nLL | |     let _ = Enum2::Struct {\nLL | |         x: 0,\nLL | |         y: 1,\nLL | |         z: 2,\nLL | |     };\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_variant_struct_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":2689,"byte_end":2818,"line_start":124,"line_end":130,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_variant_struct_like() {","highlight_start":1,"highlight_end":50},{"text":"    let _ = Enum2::Struct2 {","highlight_start":1,"highlight_end":29},{"text":"        x: 0,","highlight_start":1,"highlight_end":14},{"text":"        y: 1,","highlight_start":1,"highlight_end":14},{"text":"        z: 2,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_variant_struct_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:124:1\n   |\nLL | / pub fn change_constructor_variant_struct_like() {\nLL | |     let _ = Enum2::Struct2 {\nLL | |         x: 0,\nLL | |         y: 1,\nLL | |         z: 2,\nLL | |     };\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_path_indirectly_struct_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":3248,"byte_end":3374,"line_start":146,"line_end":152,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> TheEnum {","highlight_start":5,"highlight_end":35},{"text":"        TheEnum::Struct {","highlight_start":1,"highlight_end":26},{"text":"            x: 0,","highlight_start":1,"highlight_end":18},{"text":"            y: 1,","highlight_start":1,"highlight_end":18},{"text":"            z: 2,","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_path_indirectly_struct_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:146:5\n   |\nLL | /     pub fn function() -> TheEnum {\nLL | |         TheEnum::Struct {\nLL | |             x: 0,\nLL | |             y: 1,\nLL | |             z: 2,\nLL | |         }\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_path_indirectly_struct_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":3248,"byte_end":3374,"line_start":146,"line_end":152,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> TheEnum {","highlight_start":5,"highlight_end":35},{"text":"        TheEnum::Struct {","highlight_start":1,"highlight_end":26},{"text":"            x: 0,","highlight_start":1,"highlight_end":18},{"text":"            y: 1,","highlight_start":1,"highlight_end":18},{"text":"            z: 2,","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_path_indirectly_struct_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:146:5\n   |\nLL | /     pub fn function() -> TheEnum {\nLL | |         TheEnum::Struct {\nLL | |             x: 0,\nLL | |             y: 1,\nLL | |             z: 2,\nLL | |         }\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_variant_indirectly_struct_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":3785,"byte_end":3901,"line_start":166,"line_end":172,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> Enum2 {","highlight_start":5,"highlight_end":33},{"text":"        Variant {","highlight_start":1,"highlight_end":18},{"text":"            x: 0,","highlight_start":1,"highlight_end":18},{"text":"            y: 1,","highlight_start":1,"highlight_end":18},{"text":"            z: 2,","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_variant_indirectly_struct_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:166:5\n   |\nLL | /     pub fn function() -> Enum2 {\nLL | |         Variant {\nLL | |             x: 0,\nLL | |             y: 1,\nLL | |             z: 2,\nLL | |         }\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(change_field_value_tuple_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":4199,"byte_end":4274,"line_start":185,"line_end":187,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_field_value_tuple_like() -> Enum {","highlight_start":1,"highlight_end":49},{"text":"    Enum::Tuple(0, 1, 3)","highlight_start":1,"highlight_end":25},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_field_value_tuple_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:185:1\n   |\nLL | / pub fn change_field_value_tuple_like() -> Enum {\nLL | |     Enum::Tuple(0, 1, 3)\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_path_tuple_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":4600,"byte_end":4682,"line_start":203,"line_end":205,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_path_tuple_like() {","highlight_start":1,"highlight_end":46},{"text":"    let _ = Enum2::Tuple(0, 1, 2);","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_path_tuple_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:203:1\n   |\nLL | / pub fn change_constructor_path_tuple_like() {\nLL | |     let _ = Enum2::Tuple(0, 1, 2);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_path_tuple_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":4600,"byte_end":4682,"line_start":203,"line_end":205,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_path_tuple_like() {","highlight_start":1,"highlight_end":46},{"text":"    let _ = Enum2::Tuple(0, 1, 2);","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_path_tuple_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:203:1\n   |\nLL | / pub fn change_constructor_path_tuple_like() {\nLL | |     let _ = Enum2::Tuple(0, 1, 2);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_variant_tuple_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":5015,"byte_end":5101,"line_start":221,"line_end":223,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_variant_tuple_like() {","highlight_start":1,"highlight_end":49},{"text":"    let _ = Enum2::Tuple2(0, 1, 2);","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_variant_tuple_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:221:1\n   |\nLL | / pub fn change_constructor_variant_tuple_like() {\nLL | |     let _ = Enum2::Tuple2(0, 1, 2);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_variant_tuple_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":5015,"byte_end":5101,"line_start":221,"line_end":223,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_variant_tuple_like() {","highlight_start":1,"highlight_end":49},{"text":"    let _ = Enum2::Tuple2(0, 1, 2);","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_variant_tuple_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:221:1\n   |\nLL | / pub fn change_constructor_variant_tuple_like() {\nLL | |     let _ = Enum2::Tuple2(0, 1, 2);\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_path_indirectly_tuple_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":5531,"byte_end":5599,"line_start":239,"line_end":241,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> TheEnum {","highlight_start":5,"highlight_end":35},{"text":"        TheEnum::Tuple(0, 1, 2)","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_path_indirectly_tuple_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:239:5\n   |\nLL | /     pub fn function() -> TheEnum {\nLL | |         TheEnum::Tuple(0, 1, 2)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_path_indirectly_tuple_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":5531,"byte_end":5599,"line_start":239,"line_end":241,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> TheEnum {","highlight_start":5,"highlight_end":35},{"text":"        TheEnum::Tuple(0, 1, 2)","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_path_indirectly_tuple_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:239:5\n   |\nLL | /     pub fn function() -> TheEnum {\nLL | |         TheEnum::Tuple(0, 1, 2)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_variant_indirectly_tuple_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":6020,"byte_end":6079,"line_start":256,"line_end":258,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> Enum2 {","highlight_start":5,"highlight_end":33},{"text":"        Variant(0, 1, 2)","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_variant_indirectly_tuple_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:256:5\n   |\nLL | /     pub fn function() -> Enum2 {\nLL | |         Variant(0, 1, 2)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_variant_indirectly_tuple_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":6020,"byte_end":6079,"line_start":256,"line_end":258,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> Enum2 {","highlight_start":5,"highlight_end":33},{"text":"        Variant(0, 1, 2)","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_variant_indirectly_tuple_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:256:5\n   |\nLL | /     pub fn function() -> Enum2 {\nLL | |         Variant(0, 1, 2)\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_path_c_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":6457,"byte_end":6523,"line_start":283,"line_end":285,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_path_c_like() {","highlight_start":1,"highlight_end":42},{"text":"    let _ = Clike2::B;","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_path_c_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:283:1\n   |\nLL | / pub fn change_constructor_path_c_like() {\nLL | |     let _ = Clike2::B;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_path_c_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":6457,"byte_end":6523,"line_start":283,"line_end":285,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_path_c_like() {","highlight_start":1,"highlight_end":42},{"text":"    let _ = Clike2::B;","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_path_c_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:283:1\n   |\nLL | / pub fn change_constructor_path_c_like() {\nLL | |     let _ = Clike2::B;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_variant_c_like)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":6812,"byte_end":6880,"line_start":298,"line_end":300,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_variant_c_like() {","highlight_start":1,"highlight_end":45},{"text":"    let _ = Clike::C;","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_variant_c_like)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:298:1\n   |\nLL | / pub fn change_constructor_variant_c_like() {\nLL | |     let _ = Clike::C;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_path_indirectly_c_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":7304,"byte_end":7359,"line_start":316,"line_end":318,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> TheEnum {","highlight_start":5,"highlight_end":35},{"text":"        TheEnum::B","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_path_indirectly_c_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:316:5\n   |\nLL | /     pub fn function() -> TheEnum {\nLL | |         TheEnum::B\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_constructor_path_indirectly_c_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":7304,"byte_end":7359,"line_start":316,"line_end":318,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> TheEnum {","highlight_start":5,"highlight_end":35},{"text":"        TheEnum::B","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_constructor_path_indirectly_c_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:316:5\n   |\nLL | /     pub fn function() -> TheEnum {\nLL | |         TheEnum::B\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_variant_indirectly_c_like::function)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/enum_constructors.rs","byte_start":7750,"byte_end":7800,"line_start":333,"line_end":335,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn function() -> Clike {","highlight_start":5,"highlight_end":33},{"text":"        Variant","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_variant_indirectly_c_like::function)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/enum_constructors.rs:333:5\n   |\nLL | /     pub fn function() -> Clike {\nLL | |         Variant\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"aborting due to 23 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 23 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/enum_constructors.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/function_interfaces.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/function_interfaces.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/function_interfaces/function_interfaces.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/function_interfaces/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/function_interfaces/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(add_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":855,"byte_end":886,"line_start":29,"line_end":29,"column_start":1,"column_end":32,"is_primary":true,"text":[{"text":"pub fn add_parameter(p: i32) {}","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:29:1\n   |\nLL | pub fn add_parameter(p: i32) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":855,"byte_end":886,"line_start":29,"line_end":29,"column_start":1,"column_end":32,"is_primary":true,"text":[{"text":"pub fn add_parameter(p: i32) {}","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:29:1\n   |\nLL | pub fn add_parameter(p: i32) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(type_of_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":1468,"byte_end":1503,"line_start":52,"line_end":52,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub fn type_of_parameter(p: i64) {}","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(type_of_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:52:1\n   |\nLL | pub fn type_of_parameter(p: i64) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(type_of_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":1468,"byte_end":1503,"line_start":52,"line_end":52,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub fn type_of_parameter(p: i64) {}","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(type_of_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:52:1\n   |\nLL | pub fn type_of_parameter(p: i64) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(type_of_parameter_ref)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":1821,"byte_end":1865,"line_start":64,"line_end":64,"column_start":1,"column_end":45,"is_primary":true,"text":[{"text":"pub fn type_of_parameter_ref(p: &mut i32) {}","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(type_of_parameter_ref)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:64:1\n   |\nLL | pub fn type_of_parameter_ref(p: &mut i32) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(type_of_parameter_ref)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":1821,"byte_end":1865,"line_start":64,"line_end":64,"column_start":1,"column_end":45,"is_primary":true,"text":[{"text":"pub fn type_of_parameter_ref(p: &mut i32) {}","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(type_of_parameter_ref)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:64:1\n   |\nLL | pub fn type_of_parameter_ref(p: &mut i32) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(order_of_parameters)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":2190,"byte_end":2237,"line_start":76,"line_end":76,"column_start":1,"column_end":48,"is_primary":true,"text":[{"text":"pub fn order_of_parameters(p2: i64, p1: i32) {}","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(order_of_parameters)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:76:1\n   |\nLL | pub fn order_of_parameters(p2: i64, p1: i32) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(order_of_parameters)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":2190,"byte_end":2237,"line_start":76,"line_end":76,"column_start":1,"column_end":48,"is_primary":true,"text":[{"text":"pub fn order_of_parameters(p2: i64, p1: i32) {}","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(order_of_parameters)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:76:1\n   |\nLL | pub fn order_of_parameters(p2: i64, p1: i32) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(make_unsafe)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":2538,"byte_end":2568,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub unsafe fn make_unsafe() {}","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(make_unsafe)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:88:1\n   |\nLL | pub unsafe fn make_unsafe() {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(make_unsafe)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":2538,"byte_end":2568,"line_start":88,"line_end":88,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"pub unsafe fn make_unsafe() {}","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(make_unsafe)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:88:1\n   |\nLL | pub unsafe fn make_unsafe() {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(make_extern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":2827,"byte_end":2861,"line_start":99,"line_end":99,"column_start":1,"column_end":35,"is_primary":true,"text":[{"text":"pub extern \"C\" fn make_extern() {}","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(make_extern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:99:1\n   |\nLL | pub extern \"C\" fn make_extern() {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(make_intrinsic)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":3134,"byte_end":3184,"line_start":110,"line_end":110,"column_start":1,"column_end":51,"is_primary":true,"text":[{"text":"pub extern \"rust-intrinsic\" fn make_intrinsic() {}","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(make_intrinsic)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:110:1\n   |\nLL | pub extern \"rust-intrinsic\" fn make_intrinsic() {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(return_impl_trait)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":7065,"byte_end":7115,"line_start":263,"line_end":265,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn return_impl_trait() -> impl Clone {","highlight_start":1,"highlight_end":43},{"text":"    0","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(return_impl_trait)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:263:1\n   |\nLL | / pub fn return_impl_trait() -> impl Clone {\nLL | |     0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_return_type_indirectly::indirect_return_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":7908,"byte_end":7981,"line_start":297,"line_end":299,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn indirect_return_type() -> ReturnType {","highlight_start":5,"highlight_end":50},{"text":"        ReturnType {}","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_return_type_indirectly::indirect_return_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:297:5\n   |\nLL | /     pub fn indirect_return_type() -> ReturnType {\nLL | |         ReturnType {}\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_return_type_indirectly::indirect_return_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":7908,"byte_end":7981,"line_start":297,"line_end":299,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn indirect_return_type() -> ReturnType {","highlight_start":5,"highlight_end":50},{"text":"        ReturnType {}","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_return_type_indirectly::indirect_return_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:297:5\n   |\nLL | /     pub fn indirect_return_type() -> ReturnType {\nLL | |         ReturnType {}\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(change_parameter_type_indirectly::indirect_parameter_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":8425,"byte_end":8476,"line_start":314,"line_end":314,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn indirect_parameter_type(p: ParameterType) {}","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_parameter_type_indirectly::indirect_parameter_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:314:5\n   |\nLL |     pub fn indirect_parameter_type(p: ParameterType) {}\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_parameter_type_indirectly::indirect_parameter_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/function_interfaces.rs","byte_start":8425,"byte_end":8476,"line_start":314,"line_end":314,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn indirect_parameter_type(p: ParameterType) {}","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_parameter_type_indirectly::indirect_parameter_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/function_interfaces.rs:314:5\n   |\nLL |     pub fn indirect_parameter_type(p: ParameterType) {}\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"aborting due to 17 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 17 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/function_interfaces.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/if_expressions.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/if_expressions.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/if_expressions/if_expressions.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/if_expressions/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/if_expressions/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_condition)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":826,"byte_end":918,"line_start":30,"line_end":36,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_condition(x: bool) -> u32 {","highlight_start":1,"highlight_end":42},{"text":"    if !x {","highlight_start":1,"highlight_end":12},{"text":"        return 1","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    return 0","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_condition)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:30:1\n   |\nLL | / pub fn change_condition(x: bool) -> u32 {\nLL | |     if !x {\nLL | |         return 1\nLL | |     }\nLL | |\nLL | |     return 0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_condition)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":826,"byte_end":918,"line_start":30,"line_end":36,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_condition(x: bool) -> u32 {","highlight_start":1,"highlight_end":42},{"text":"    if !x {","highlight_start":1,"highlight_end":12},{"text":"        return 1","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    return 0","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_condition)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:30:1\n   |\nLL | / pub fn change_condition(x: bool) -> u32 {\nLL | |     if !x {\nLL | |         return 1\nLL | |     }\nLL | |\nLL | |     return 0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_then_branch)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":1233,"byte_end":1326,"line_start":51,"line_end":57,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_then_branch(x: bool) -> u32 {","highlight_start":1,"highlight_end":44},{"text":"    if x {","highlight_start":1,"highlight_end":11},{"text":"        return 2","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    return 0","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_then_branch)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:51:1\n   |\nLL | / pub fn change_then_branch(x: bool) -> u32 {\nLL | |     if x {\nLL | |         return 2\nLL | |     }\nLL | |\nLL | |     return 0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_else_branch)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":1645,"byte_end":1740,"line_start":74,"line_end":80,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_else_branch(x: bool) -> u32 {","highlight_start":1,"highlight_end":44},{"text":"    if x {","highlight_start":1,"highlight_end":11},{"text":"        1","highlight_start":1,"highlight_end":10},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        3","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_else_branch)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:74:1\n   |\nLL | / pub fn change_else_branch(x: bool) -> u32 {\nLL | |     if x {\nLL | |         1\nLL | |     } else {\nLL | |         3\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_else_branch)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":2058,"byte_end":2178,"line_start":99,"line_end":108,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_else_branch(x: bool) -> u32 {","highlight_start":1,"highlight_end":41},{"text":"    let mut ret = 1;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if x {","highlight_start":1,"highlight_end":11},{"text":"        ret = 2;","highlight_start":1,"highlight_end":17},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ret","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_else_branch)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:99:1\n   |\nLL | / pub fn add_else_branch(x: bool) -> u32 {\nLL | |     let mut ret = 1;\nLL | |\nLL | |     if x {\n...  |\nLL | |     ret\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_condition_if_let)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":2528,"byte_end":2640,"line_start":125,"line_end":131,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_condition_if_let(x: Option<u32>) -> u32 {","highlight_start":1,"highlight_end":56},{"text":"    if let Some(_) = x {","highlight_start":1,"highlight_end":25},{"text":"        return 1","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    0","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_condition_if_let)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:125:1\n   |\nLL | / pub fn change_condition_if_let(x: Option<u32>) -> u32 {\nLL | |     if let Some(_) = x {\nLL | |         return 1\nLL | |     }\nLL | |\nLL | |     0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_condition_if_let)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":2528,"byte_end":2640,"line_start":125,"line_end":131,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_condition_if_let(x: Option<u32>) -> u32 {","highlight_start":1,"highlight_end":56},{"text":"    if let Some(_) = x {","highlight_start":1,"highlight_end":25},{"text":"        return 1","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    0","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_condition_if_let)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:125:1\n   |\nLL | / pub fn change_condition_if_let(x: Option<u32>) -> u32 {\nLL | |     if let Some(_) = x {\nLL | |         return 1\nLL | |     }\nLL | |\nLL | |     0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_then_branch_if_let)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":2991,"byte_end":3109,"line_start":148,"line_end":154,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {","highlight_start":1,"highlight_end":58},{"text":"    if let Some(x) = x {","highlight_start":1,"highlight_end":25},{"text":"        return x + 1","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    0","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_then_branch_if_let)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:148:1\n   |\nLL | / pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\nLL | |     if let Some(x) = x {\nLL | |         return x + 1\nLL | |     }\nLL | |\nLL | |     0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_then_branch_if_let)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":2991,"byte_end":3109,"line_start":148,"line_end":154,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {","highlight_start":1,"highlight_end":58},{"text":"    if let Some(x) = x {","highlight_start":1,"highlight_end":25},{"text":"        return x + 1","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    0","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_then_branch_if_let)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:148:1\n   |\nLL | / pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\nLL | |     if let Some(x) = x {\nLL | |         return x + 1\nLL | |     }\nLL | |\nLL | |     0\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_else_branch_if_let)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":3456,"byte_end":3579,"line_start":171,"line_end":177,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {","highlight_start":1,"highlight_end":58},{"text":"    if let Some(x) = x {","highlight_start":1,"highlight_end":25},{"text":"        x","highlight_start":1,"highlight_end":10},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        2","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_else_branch_if_let)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:171:1\n   |\nLL | / pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\nLL | |     if let Some(x) = x {\nLL | |         x\nLL | |     } else {\nLL | |         2\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_else_branch_if_let)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/if_expressions.rs","byte_start":3925,"byte_end":4073,"line_start":196,"line_end":205,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {","highlight_start":1,"highlight_end":55},{"text":"    let mut ret = 1;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if let Some(x) = x {","highlight_start":1,"highlight_end":25},{"text":"        ret = x;","highlight_start":1,"highlight_end":17},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ret","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_else_branch_if_let)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/if_expressions.rs:196:1\n   |\nLL | / pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\nLL | |     let mut ret = 1;\nLL | |\nLL | |     if let Some(x) = x {\n...  |\nLL | |     ret\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 11 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 11 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/if_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/for_loops.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/for_loops.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/for_loops/for_loops.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/for_loops/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/for_loops/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_loop_body)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":827,"byte_end":933,"line_start":30,"line_end":36,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_loop_body() {","highlight_start":1,"highlight_end":28},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for _ in 0..1 {","highlight_start":1,"highlight_end":20},{"text":"        _x = 2;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_loop_body)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:30:1\n   |\nLL | / pub fn change_loop_body() {\nLL | |     let mut _x = 0;\nLL | |     for _ in 0..1 {\nLL | |         _x = 2;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_iteration_variable_name)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":1280,"byte_end":1401,"line_start":53,"line_end":59,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_iteration_variable_name() {","highlight_start":1,"highlight_end":42},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for _a in 0..1 {","highlight_start":1,"highlight_end":21},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_iteration_variable_name)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:53:1\n   |\nLL | / pub fn change_iteration_variable_name() {\nLL | |     let mut _x = 0;\nLL | |     for _a in 0..1 {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_iteration_variable_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":1771,"byte_end":1902,"line_start":76,"line_end":82,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_iteration_variable_pattern() {","highlight_start":1,"highlight_end":45},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for &_i in &[0, 1, 2] {","highlight_start":1,"highlight_end":28},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_iteration_variable_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:76:1\n   |\nLL | / pub fn change_iteration_variable_pattern() {\nLL | |     let mut _x = 0;\nLL | |     for &_i in &[0, 1, 2] {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_iteration_variable_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":1771,"byte_end":1902,"line_start":76,"line_end":82,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_iteration_variable_pattern() {","highlight_start":1,"highlight_end":45},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for &_i in &[0, 1, 2] {","highlight_start":1,"highlight_end":28},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_iteration_variable_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:76:1\n   |\nLL | / pub fn change_iteration_variable_pattern() {\nLL | |     let mut _x = 0;\nLL | |     for &_i in &[0, 1, 2] {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_iterable)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":2239,"byte_end":2350,"line_start":99,"line_end":105,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_iterable() {","highlight_start":1,"highlight_end":27},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for _ in &[0, 1, 3] {","highlight_start":1,"highlight_end":26},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_iterable)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:99:1\n   |\nLL | / pub fn change_iterable() {\nLL | |     let mut _x = 0;\nLL | |     for _ in &[0, 1, 3] {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_break)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":2674,"byte_end":2773,"line_start":121,"line_end":127,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_break() {","highlight_start":1,"highlight_end":21},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for _ in 0..1 {","highlight_start":1,"highlight_end":20},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_break)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:121:1\n   |\nLL | / pub fn add_break() {\nLL | |     let mut _x = 0;\nLL | |     for _ in 0..1 {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_break)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":2674,"byte_end":2773,"line_start":121,"line_end":127,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_break() {","highlight_start":1,"highlight_end":21},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for _ in 0..1 {","highlight_start":1,"highlight_end":20},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_break)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:121:1\n   |\nLL | / pub fn add_break() {\nLL | |     let mut _x = 0;\nLL | |     for _ in 0..1 {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_break_label)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":4033,"byte_end":4206,"line_start":192,"line_end":200,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_break_label() {","highlight_start":1,"highlight_end":30},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    'outer: for _ in 0..1 {","highlight_start":1,"highlight_end":28},{"text":"        'inner: for _ in 0..1 {","highlight_start":1,"highlight_end":32},{"text":"            _x = 1;","highlight_start":1,"highlight_end":20},{"text":"            break 'outer;","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_break_label)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:192:1\n   |\nLL | / pub fn change_break_label() {\nLL | |     let mut _x = 0;\nLL | |     'outer: for _ in 0..1 {\nLL | |         'inner: for _ in 0..1 {\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_continue_label)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":5073,"byte_end":5252,"line_start":242,"line_end":250,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_continue_label() {","highlight_start":1,"highlight_end":33},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    'outer: for _ in 0..1 {","highlight_start":1,"highlight_end":28},{"text":"        'inner: for _ in 0..1 {","highlight_start":1,"highlight_end":32},{"text":"            _x = 1;","highlight_start":1,"highlight_end":20},{"text":"            continue 'outer;","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_continue_label)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:242:1\n   |\nLL | / pub fn change_continue_label() {\nLL | |     let mut _x = 0;\nLL | |     'outer: for _ in 0..1 {\nLL | |         'inner: for _ in 0..1 {\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_continue_to_break)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/for_loops.rs","byte_start":5595,"byte_end":5709,"line_start":267,"line_end":273,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_continue_to_break() {","highlight_start":1,"highlight_end":36},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    for _ in 0..1 {","highlight_start":1,"highlight_end":20},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_continue_to_break)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/for_loops.rs:267:1\n   |\nLL | / pub fn change_continue_to_break() {\nLL | |     let mut _x = 0;\nLL | |     for _ in 0..1 {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 10 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 10 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/for_loops.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/inline_asm.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/inline_asm.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/inline_asm/inline_asm.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/inline_asm/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/inline_asm/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_template)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inline_asm.rs","byte_start":1050,"byte_end":1248,"line_start":39,"line_end":50,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_template(a: i32) -> i32 {","highlight_start":1,"highlight_end":40},{"text":"    let c: i32;","highlight_start":1,"highlight_end":16},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(\"add 2, $0\"","highlight_start":1,"highlight_end":25},{"text":"             : \"=r\"(c)","highlight_start":1,"highlight_end":23},{"text":"             : \"0\"(a)","highlight_start":1,"highlight_end":22},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             );","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    c","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_template)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inline_asm.rs:39:1\n   |\nLL | / pub fn change_template(a: i32) -> i32 {\nLL | |     let c: i32;\nLL | |     unsafe {\nLL | |         asm!(\"add 2, $0\"\n...  |\nLL | |     c\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_output)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inline_asm.rs","byte_start":1830,"byte_end":2074,"line_start":75,"line_end":87,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_output(a: i32) -> i32 {","highlight_start":1,"highlight_end":38},{"text":"    let mut _out1: i32 = 0;","highlight_start":1,"highlight_end":28},{"text":"    let mut _out2: i32 = 0;","highlight_start":1,"highlight_end":28},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(\"add 1, $0\"","highlight_start":1,"highlight_end":25},{"text":"             : \"=r\"(_out2)","highlight_start":1,"highlight_end":27},{"text":"             : \"0\"(a)","highlight_start":1,"highlight_end":22},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             );","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    _out1","highlight_start":1,"highlight_end":10},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_output)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inline_asm.rs:75:1\n   |\nLL | / pub fn change_output(a: i32) -> i32 {\nLL | |     let mut _out1: i32 = 0;\nLL | |     let mut _out2: i32 = 0;\nLL | |     unsafe {\n...  |\nLL | |     _out1\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_input)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inline_asm.rs","byte_start":2621,"byte_end":2831,"line_start":111,"line_end":122,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_input(_a: i32, _b: i32) -> i32 {","highlight_start":1,"highlight_end":47},{"text":"    let _out;","highlight_start":1,"highlight_end":14},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(\"add 1, $0\"","highlight_start":1,"highlight_end":25},{"text":"             : \"=r\"(_out)","highlight_start":1,"highlight_end":26},{"text":"             : \"0\"(_b)","highlight_start":1,"highlight_end":23},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             );","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    _out","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_input)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inline_asm.rs:111:1\n   |\nLL | / pub fn change_input(_a: i32, _b: i32) -> i32 {\nLL | |     let _out;\nLL | |     unsafe {\nLL | |         asm!(\"add 1, $0\"\n...  |\nLL | |     _out\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_input_constraint)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inline_asm.rs","byte_start":3401,"byte_end":3631,"line_start":146,"line_end":157,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {","highlight_start":1,"highlight_end":58},{"text":"    let _out;","highlight_start":1,"highlight_end":14},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(\"add 1, $0\"","highlight_start":1,"highlight_end":25},{"text":"             : \"=r\"(_out)","highlight_start":1,"highlight_end":26},{"text":"             : \"r\"(_a), \"0\"(_b)","highlight_start":1,"highlight_end":32},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             );","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    _out","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_input_constraint)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inline_asm.rs:146:1\n   |\nLL | / pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\nLL | |     let _out;\nLL | |     unsafe {\nLL | |         asm!(\"add 1, $0\"\n...  |\nLL | |     _out\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_clobber)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inline_asm.rs","byte_start":4174,"byte_end":4383,"line_start":181,"line_end":192,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_clobber(_a: i32) -> i32 {","highlight_start":1,"highlight_end":40},{"text":"    let _out;","highlight_start":1,"highlight_end":14},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(\"add 1, $0\"","highlight_start":1,"highlight_end":25},{"text":"             : \"=r\"(_out)","highlight_start":1,"highlight_end":26},{"text":"             : \"0\"(_a)","highlight_start":1,"highlight_end":23},{"text":"             : \"eax\"","highlight_start":1,"highlight_end":21},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             );","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    _out","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_clobber)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inline_asm.rs:181:1\n   |\nLL | / pub fn change_clobber(_a: i32) -> i32 {\nLL | |     let _out;\nLL | |     unsafe {\nLL | |         asm!(\"add 1, $0\"\n...  |\nLL | |     _out\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_options)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inline_asm.rs","byte_start":4926,"byte_end":5140,"line_start":216,"line_end":227,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_options(_a: i32) -> i32 {","highlight_start":1,"highlight_end":40},{"text":"    let _out;","highlight_start":1,"highlight_end":14},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        asm!(\"add 1, $0\"","highlight_start":1,"highlight_end":25},{"text":"             : \"=r\"(_out)","highlight_start":1,"highlight_end":26},{"text":"             : \"0\"(_a)","highlight_start":1,"highlight_end":23},{"text":"             :","highlight_start":1,"highlight_end":15},{"text":"             : \"volatile\"","highlight_start":1,"highlight_end":26},{"text":"             );","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    _out","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_options)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inline_asm.rs:216:1\n   |\nLL | / pub fn change_options(_a: i32) -> i32 {\nLL | |     let _out;\nLL | |     unsafe {\nLL | |         asm!(\"add 1, $0\"\n...  |\nLL | |     _out\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 6 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/inline_asm.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/let_expressions.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/let_expressions.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/let_expressions/let_expressions.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/let_expressions/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/let_expressions/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_name)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":770,"byte_end":813,"line_start":27,"line_end":29,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_name() {","highlight_start":1,"highlight_end":23},{"text":"    let _y = 2u64;","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_name)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:27:1\n   |\nLL | / pub fn change_name() {\nLL | |     let _y = 2u64;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":1094,"byte_end":1139,"line_start":43,"line_end":45,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_type() {","highlight_start":1,"highlight_end":20},{"text":"    let _x: u32 = 2u32;","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:43:1\n   |\nLL | / pub fn add_type() {\nLL | |     let _x: u32 = 2u32;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":1094,"byte_end":1139,"line_start":43,"line_end":45,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_type() {","highlight_start":1,"highlight_end":20},{"text":"    let _x: u32 = 2u32;","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:43:1\n   |\nLL | / pub fn add_type() {\nLL | |     let _x: u32 = 2u32;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":1425,"byte_end":1469,"line_start":59,"line_end":61,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_type() {","highlight_start":1,"highlight_end":23},{"text":"    let _x: u8 = 2;","highlight_start":1,"highlight_end":20},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:59:1\n   |\nLL | / pub fn change_type() {\nLL | |     let _x: u8 = 2;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":1425,"byte_end":1469,"line_start":59,"line_end":61,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_type() {","highlight_start":1,"highlight_end":23},{"text":"    let _x: u8 = 2;","highlight_start":1,"highlight_end":20},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:59:1\n   |\nLL | / pub fn change_type() {\nLL | |     let _x: u8 = 2;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_mutability_of_reference_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":1776,"byte_end":1846,"line_start":75,"line_end":77,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_reference_type() {","highlight_start":1,"highlight_end":47},{"text":"    let _x: &mut u64;","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_mutability_of_reference_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:75:1\n   |\nLL | / pub fn change_mutability_of_reference_type() {\nLL | |     let _x: &mut u64;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_mutability_of_reference_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":1776,"byte_end":1846,"line_start":75,"line_end":77,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_reference_type() {","highlight_start":1,"highlight_end":47},{"text":"    let _x: &mut u64;","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_mutability_of_reference_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:75:1\n   |\nLL | / pub fn change_mutability_of_reference_type() {\nLL | |     let _x: &mut u64;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_mutability_of_slot)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":2150,"byte_end":2209,"line_start":91,"line_end":93,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_slot() {","highlight_start":1,"highlight_end":37},{"text":"    let _x: u64 = 0;","highlight_start":1,"highlight_end":21},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_mutability_of_slot)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:91:1\n   |\nLL | / pub fn change_mutability_of_slot() {\nLL | |     let _x: u64 = 0;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_mutability_of_slot)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":2150,"byte_end":2209,"line_start":91,"line_end":93,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_slot() {","highlight_start":1,"highlight_end":37},{"text":"    let _x: u64 = 0;","highlight_start":1,"highlight_end":21},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_mutability_of_slot)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:91:1\n   |\nLL | / pub fn change_mutability_of_slot() {\nLL | |     let _x: u64 = 0;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_simple_binding_to_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":2520,"byte_end":2596,"line_start":107,"line_end":109,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_simple_binding_to_pattern() {","highlight_start":1,"highlight_end":44},{"text":"    let (_a, _b) = (0u8, 'x');","highlight_start":1,"highlight_end":31},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_simple_binding_to_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:107:1\n   |\nLL | / pub fn change_simple_binding_to_pattern() {\nLL | |     let (_a, _b) = (0u8, 'x');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_simple_binding_to_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":2520,"byte_end":2596,"line_start":107,"line_end":109,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_simple_binding_to_pattern() {","highlight_start":1,"highlight_end":44},{"text":"    let (_a, _b) = (0u8, 'x');","highlight_start":1,"highlight_end":31},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_simple_binding_to_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:107:1\n   |\nLL | / pub fn change_simple_binding_to_pattern() {\nLL | |     let (_a, _b) = (0u8, 'x');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_name_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":2890,"byte_end":2956,"line_start":123,"line_end":125,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_name_in_pattern() {","highlight_start":1,"highlight_end":34},{"text":"    let (_a, _c) = (1u8, 'y');","highlight_start":1,"highlight_end":31},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_name_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:123:1\n   |\nLL | / pub fn change_name_in_pattern() {\nLL | |     let (_a, _c) = (1u8, 'y');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_ref_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":3259,"byte_end":3325,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_ref_in_pattern() {","highlight_start":1,"highlight_end":30},{"text":"    let (ref _a, _b) = (1u8, 'y');","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_ref_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:139:1\n   |\nLL | / pub fn add_ref_in_pattern() {\nLL | |     let (ref _a, _b) = (1u8, 'y');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_ref_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":3259,"byte_end":3325,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_ref_in_pattern() {","highlight_start":1,"highlight_end":30},{"text":"    let (ref _a, _b) = (1u8, 'y');","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_ref_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:139:1\n   |\nLL | / pub fn add_ref_in_pattern() {\nLL | |     let (ref _a, _b) = (1u8, 'y');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_amp_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":3629,"byte_end":3693,"line_start":155,"line_end":157,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_amp_in_pattern() {","highlight_start":1,"highlight_end":30},{"text":"    let (&_a, _b) = (&1u8, 'y');","highlight_start":1,"highlight_end":33},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_amp_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:155:1\n   |\nLL | / pub fn add_amp_in_pattern() {\nLL | |     let (&_a, _b) = (&1u8, 'y');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_amp_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":3629,"byte_end":3693,"line_start":155,"line_end":157,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_amp_in_pattern() {","highlight_start":1,"highlight_end":30},{"text":"    let (&_a, _b) = (&1u8, 'y');","highlight_start":1,"highlight_end":33},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_amp_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:155:1\n   |\nLL | / pub fn add_amp_in_pattern() {\nLL | |     let (&_a, _b) = (&1u8, 'y');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_mutability_of_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":4018,"byte_end":4106,"line_start":171,"line_end":173,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_binding_in_pattern() {","highlight_start":1,"highlight_end":51},{"text":"    let (mut _a, _b) = (99u8, 'q');","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_mutability_of_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:171:1\n   |\nLL | / pub fn change_mutability_of_binding_in_pattern() {\nLL | |     let (mut _a, _b) = (99u8, 'q');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_mutability_of_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":4018,"byte_end":4106,"line_start":171,"line_end":173,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_binding_in_pattern() {","highlight_start":1,"highlight_end":51},{"text":"    let (mut _a, _b) = (99u8, 'q');","highlight_start":1,"highlight_end":36},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_mutability_of_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:171:1\n   |\nLL | / pub fn change_mutability_of_binding_in_pattern() {\nLL | |     let (mut _a, _b) = (99u8, 'q');\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_initializer)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":4392,"byte_end":4444,"line_start":187,"line_end":189,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_initializer() {","highlight_start":1,"highlight_end":27},{"text":"    let _x: i16 = 3i16;","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_initializer)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:187:1\n   |\nLL | / pub fn add_initializer() {\nLL | |     let _x: i16 = 3i16;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_initializer)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":4392,"byte_end":4444,"line_start":187,"line_end":189,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_initializer() {","highlight_start":1,"highlight_end":27},{"text":"    let _x: i16 = 3i16;","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_initializer)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:187:1\n   |\nLL | / pub fn add_initializer() {\nLL | |     let _x: i16 = 3i16;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_initializer)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/let_expressions.rs","byte_start":4722,"byte_end":4772,"line_start":203,"line_end":205,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_initializer() {","highlight_start":1,"highlight_end":30},{"text":"    let _x = 5u16;","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_initializer)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/let_expressions.rs:203:1\n   |\nLL | / pub fn change_initializer() {\nLL | |     let _x = 5u16;\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 21 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 21 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/let_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/loop_expressions.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/loop_expressions.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/loop_expressions/loop_expressions.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/loop_expressions/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/loop_expressions/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_loop_body)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":819,"byte_end":916,"line_start":30,"line_end":36,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_loop_body() {","highlight_start":1,"highlight_end":28},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        _x = 2;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_loop_body)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:30:1\n   |\nLL | / pub fn change_loop_body() {\nLL | |     let mut _x = 0;\nLL | |     loop {\nLL | |         _x = 2;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_break)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":1231,"byte_end":1321,"line_start":52,"line_end":58,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_break() {","highlight_start":1,"highlight_end":21},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_break)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:52:1\n   |\nLL | / pub fn add_break() {\nLL | |     let mut _x = 0;\nLL | |     loop {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_break)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":1231,"byte_end":1321,"line_start":52,"line_end":58,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_break() {","highlight_start":1,"highlight_end":21},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_break)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:52:1\n   |\nLL | / pub fn add_break() {\nLL | |     let mut _x = 0;\nLL | |     loop {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_break_label)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":2541,"byte_end":2696,"line_start":123,"line_end":131,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_break_label() {","highlight_start":1,"highlight_end":30},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    'outer: loop {","highlight_start":1,"highlight_end":19},{"text":"        'inner: loop {","highlight_start":1,"highlight_end":23},{"text":"            _x = 1;","highlight_start":1,"highlight_end":20},{"text":"            break 'outer;","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_break_label)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:123:1\n   |\nLL | / pub fn change_break_label() {\nLL | |     let mut _x = 0;\nLL | |     'outer: loop {\nLL | |         'inner: loop {\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_break_label)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":2541,"byte_end":2696,"line_start":123,"line_end":131,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_break_label() {","highlight_start":1,"highlight_end":30},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    'outer: loop {","highlight_start":1,"highlight_end":19},{"text":"        'inner: loop {","highlight_start":1,"highlight_end":23},{"text":"            _x = 1;","highlight_start":1,"highlight_end":20},{"text":"            break 'outer;","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_break_label)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:123:1\n   |\nLL | / pub fn change_break_label() {\nLL | |     let mut _x = 0;\nLL | |     'outer: loop {\nLL | |         'inner: loop {\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_continue_label)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":3527,"byte_end":3688,"line_start":173,"line_end":181,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_continue_label() {","highlight_start":1,"highlight_end":33},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    'outer: loop {","highlight_start":1,"highlight_end":19},{"text":"        'inner: loop {","highlight_start":1,"highlight_end":23},{"text":"            _x = 1;","highlight_start":1,"highlight_end":20},{"text":"            continue 'outer;","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_continue_label)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:173:1\n   |\nLL | / pub fn change_continue_label() {\nLL | |     let mut _x = 0;\nLL | |     'outer: loop {\nLL | |         'inner: loop {\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_continue_label)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":3527,"byte_end":3688,"line_start":173,"line_end":181,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_continue_label() {","highlight_start":1,"highlight_end":33},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    'outer: loop {","highlight_start":1,"highlight_end":19},{"text":"        'inner: loop {","highlight_start":1,"highlight_end":23},{"text":"            _x = 1;","highlight_start":1,"highlight_end":20},{"text":"            continue 'outer;","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_continue_label)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:173:1\n   |\nLL | / pub fn change_continue_label() {\nLL | |     let mut _x = 0;\nLL | |     'outer: loop {\nLL | |         'inner: loop {\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_continue_to_break)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":4036,"byte_end":4141,"line_start":198,"line_end":204,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_continue_to_break() {","highlight_start":1,"highlight_end":36},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_continue_to_break)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:198:1\n   |\nLL | / pub fn change_continue_to_break() {\nLL | |     let mut _x = 0;\nLL | |     loop {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_continue_to_break)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/loop_expressions.rs","byte_start":4036,"byte_end":4141,"line_start":198,"line_end":204,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_continue_to_break() {","highlight_start":1,"highlight_end":36},{"text":"    let mut _x = 0;","highlight_start":1,"highlight_end":20},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        _x = 1;","highlight_start":1,"highlight_end":16},{"text":"        break;","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_continue_to_break)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/loop_expressions.rs:198:1\n   |\nLL | / pub fn change_continue_to_break() {\nLL | |     let mut _x = 0;\nLL | |     loop {\nLL | |         _x = 1;\nLL | |         break;\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 9 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 9 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/loop_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/inherent_impls.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/inherent_impls.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/inherent_impls/inherent_impls.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/inherent_impls/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/inherent_impls/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(Foo::method_body)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":1276,"byte_end":1339,"line_start":47,"line_end":49,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn method_body() {","highlight_start":5,"highlight_end":27},{"text":"        println!(\"Hello, world!\");","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::method_body)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:47:5\n   |\nLL | /     pub fn method_body() {\nLL | |         println!(\"Hello, world!\");\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::method_body)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":1276,"byte_end":1339,"line_start":47,"line_end":49,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn method_body() {","highlight_start":5,"highlight_end":27},{"text":"        println!(\"Hello, world!\");","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::method_body)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:47:5\n   |\nLL | /     pub fn method_body() {\nLL | |         println!(\"Hello, world!\");\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::method_body_inlined)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":1797,"byte_end":1868,"line_start":69,"line_end":71,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn method_body_inlined() {","highlight_start":5,"highlight_end":35},{"text":"        println!(\"Hello, world!\");","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::method_body_inlined)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:69:5\n   |\nLL | /     pub fn method_body_inlined() {\nLL | |         println!(\"Hello, world!\");\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::method_body_inlined)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":1797,"byte_end":1868,"line_start":69,"line_end":71,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn method_body_inlined() {","highlight_start":5,"highlight_end":35},{"text":"        println!(\"Hello, world!\");","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::method_body_inlined)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:69:5\n   |\nLL | /     pub fn method_body_inlined() {\nLL | |         println!(\"Hello, world!\");\nLL | |     }\n   | |_____^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::method_selfness)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":2628,"byte_end":2661,"line_start":102,"line_end":102,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn method_selfness(&self) { }","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::method_selfness)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:102:5\n   |\nLL |     pub fn method_selfness(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::method_selfness)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":2628,"byte_end":2661,"line_start":102,"line_end":102,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn method_selfness(&self) { }","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::method_selfness)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:102:5\n   |\nLL |     pub fn method_selfness(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::method_selfmutness)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":3070,"byte_end":3110,"line_start":120,"line_end":120,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn method_selfmutness(&mut self) { }","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::method_selfmutness)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:120:5\n   |\nLL |     pub fn method_selfmutness(&mut self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::method_selfmutness)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":3070,"byte_end":3110,"line_start":120,"line_end":120,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn method_selfmutness(&mut self) { }","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::method_selfmutness)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:120:5\n   |\nLL |     pub fn method_selfmutness(&mut self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::add_method_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":3996,"byte_end":4042,"line_start":160,"line_end":160,"column_start":5,"column_end":51,"is_primary":true,"text":[{"text":"    pub fn add_method_parameter(&self, _: i32) { }","highlight_start":5,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::add_method_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:160:5\n   |\nLL |     pub fn add_method_parameter(&self, _: i32) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::add_method_parameter)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":3996,"byte_end":4042,"line_start":160,"line_end":160,"column_start":5,"column_end":51,"is_primary":true,"text":[{"text":"    pub fn add_method_parameter(&self, _: i32) { }","highlight_start":5,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::add_method_parameter)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:160:5\n   |\nLL |     pub fn add_method_parameter(&self, _: i32) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::change_method_parameter_name)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":4420,"byte_end":4474,"line_start":177,"line_end":177,"column_start":5,"column_end":59,"is_primary":true,"text":[{"text":"    pub fn change_method_parameter_name(&self, b: i64) { }","highlight_start":5,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::change_method_parameter_name)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:177:5\n   |\nLL |     pub fn change_method_parameter_name(&self, b: i64) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::change_method_return_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":4896,"byte_end":4947,"line_start":196,"line_end":196,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn change_method_return_type(&self) -> u8 { 0 }","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::change_method_return_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:196:5\n   |\nLL |     pub fn change_method_return_type(&self) -> u8 { 0 }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::change_method_return_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":4896,"byte_end":4947,"line_start":196,"line_end":196,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn change_method_return_type(&self) -> u8 { 0 }","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::change_method_return_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:196:5\n   |\nLL |     pub fn change_method_return_type(&self) -> u8 { 0 }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::change_method_parameter_order)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":5738,"byte_end":5801,"line_start":231,"line_end":231,"column_start":5,"column_end":68,"is_primary":true,"text":[{"text":"    pub fn change_method_parameter_order(&self, b: i64, a: i64) { }","highlight_start":5,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::change_method_parameter_order)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:231:5\n   |\nLL |     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(Foo::make_method_unsafe)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":6212,"byte_end":6255,"line_start":251,"line_end":251,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub unsafe fn make_method_unsafe(&self) { }","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(Foo::make_method_unsafe)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:251:5\n   |\nLL |     pub unsafe fn make_method_unsafe(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::make_method_unsafe)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":6212,"byte_end":6255,"line_start":251,"line_end":251,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub unsafe fn make_method_unsafe(&self) { }","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::make_method_unsafe)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:251:5\n   |\nLL |     pub unsafe fn make_method_unsafe(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::make_method_extern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":6618,"byte_end":6661,"line_start":268,"line_end":268,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub extern fn make_method_extern(&self) { }","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::make_method_extern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:268:5\n   |\nLL |     pub extern fn make_method_extern(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::change_method_calling_convention)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":7049,"byte_end":7115,"line_start":285,"line_end":285,"column_start":5,"column_end":71,"is_primary":true,"text":[{"text":"    pub extern \"system\" fn change_method_calling_convention(&self) { }","highlight_start":5,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::change_method_calling_convention)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:285:5\n   |\nLL |     pub extern \"system\" fn change_method_calling_convention(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(Foo::add_lifetime_bound_to_lifetime_param_of_method)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":9642,"byte_end":9718,"line_start":360,"line_end":360,"column_start":5,"column_end":81,"is_primary":true,"text":[{"text":"    pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }","highlight_start":5,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(Foo::add_lifetime_bound_to_lifetime_param_of_method)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:360:5\n   |\nLL |     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(<Bar<T>>::add_type_parameter_to_impl)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":12771,"byte_end":12815,"line_start":453,"line_end":453,"column_start":5,"column_end":49,"is_primary":true,"text":[{"text":"    pub fn add_type_parameter_to_impl(&self) { }","highlight_start":5,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(<Bar<T>>::add_type_parameter_to_impl)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:453:5\n   |\nLL |     pub fn add_type_parameter_to_impl(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(<Bar<T>>::add_type_parameter_to_impl)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":12771,"byte_end":12815,"line_start":453,"line_end":453,"column_start":5,"column_end":49,"is_primary":true,"text":[{"text":"    pub fn add_type_parameter_to_impl(&self) { }","highlight_start":5,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(<Bar<T>>::add_type_parameter_to_impl)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:453:5\n   |\nLL |     pub fn add_type_parameter_to_impl(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`MirValidated(<Bar<u64>>::change_impl_self_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":13227,"byte_end":13266,"line_start":470,"line_end":470,"column_start":5,"column_end":44,"is_primary":true,"text":[{"text":"    pub fn change_impl_self_type(&self) { }","highlight_start":5,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(<Bar<u64>>::change_impl_self_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:470:5\n   |\nLL |     pub fn change_impl_self_type(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"`TypeckTables(<Bar<u64>>::change_impl_self_type)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/inherent_impls.rs","byte_start":13227,"byte_end":13266,"line_start":470,"line_end":470,"column_start":5,"column_end":44,"is_primary":true,"text":[{"text":"    pub fn change_impl_self_type(&self) { }","highlight_start":5,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(<Bar<u64>>::change_impl_self_type)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/inherent_impls.rs:470:5\n   |\nLL |     pub fn change_impl_self_type(&self) { }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:11:34] {"message":"aborting due to 23 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 23 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/inherent_impls.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/match_expressions.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/match_expressions.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/match_expressions/match_expressions.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/match_expressions/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/match_expressions/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(add_arm)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":845,"byte_end":964,"line_start":31,"line_end":38,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_arm(x: u32) -> u32 {","highlight_start":1,"highlight_end":32},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 => 1,","highlight_start":1,"highlight_end":16},{"text":"        2 => 2,","highlight_start":1,"highlight_end":16},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_arm)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:31:1\n   |\nLL | / pub fn add_arm(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 => 1,\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_arm)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":845,"byte_end":964,"line_start":31,"line_end":38,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_arm(x: u32) -> u32 {","highlight_start":1,"highlight_end":32},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 => 1,","highlight_start":1,"highlight_end":16},{"text":"        2 => 2,","highlight_start":1,"highlight_end":16},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_arm)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:31:1\n   |\nLL | / pub fn add_arm(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 => 1,\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_order_of_arms)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":1308,"byte_end":1424,"line_start":56,"line_end":62,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_order_of_arms(x: u32) -> u32 {","highlight_start":1,"highlight_end":45},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        1 => 1,","highlight_start":1,"highlight_end":16},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_order_of_arms)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:56:1\n   |\nLL | / pub fn change_order_of_arms(x: u32) -> u32 {\nLL | |     match x {\nLL | |         1 => 1,\nLL | |         0 => 0,\nLL | |         _ => 100,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_guard_clause)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":1786,"byte_end":1912,"line_start":80,"line_end":86,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_guard_clause(x: u32, y: bool) -> u32 {","highlight_start":1,"highlight_end":50},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 if y => 1,","highlight_start":1,"highlight_end":21},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_guard_clause)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:80:1\n   |\nLL | / pub fn add_guard_clause(x: u32, y: bool) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 if y => 1,\nLL | |         _ => 100,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_guard_clause)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":1786,"byte_end":1912,"line_start":80,"line_end":86,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_guard_clause(x: u32, y: bool) -> u32 {","highlight_start":1,"highlight_end":50},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 if y => 1,","highlight_start":1,"highlight_end":21},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_guard_clause)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:80:1\n   |\nLL | / pub fn add_guard_clause(x: u32, y: bool) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 if y => 1,\nLL | |         _ => 100,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_guard_clause)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":2285,"byte_end":2415,"line_start":104,"line_end":110,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_guard_clause(x: u32, y: bool) -> u32 {","highlight_start":1,"highlight_end":53},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 if !y => 1,","highlight_start":1,"highlight_end":22},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_guard_clause)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:104:1\n   |\nLL | / pub fn change_guard_clause(x: u32, y: bool) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 if !y => 1,\nLL | |         _ => 100,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_guard_clause)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":2285,"byte_end":2415,"line_start":104,"line_end":110,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_guard_clause(x: u32, y: bool) -> u32 {","highlight_start":1,"highlight_end":53},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 if !y => 1,","highlight_start":1,"highlight_end":22},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_guard_clause)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:104:1\n   |\nLL | / pub fn change_guard_clause(x: u32, y: bool) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 if !y => 1,\nLL | |         _ => 100,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_at_binding)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":2764,"byte_end":2876,"line_start":128,"line_end":134,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_at_binding(x: u32) -> u32 {","highlight_start":1,"highlight_end":39},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 => 1,","highlight_start":1,"highlight_end":16},{"text":"        x @ _ => x,","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_at_binding)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:128:1\n   |\nLL | / pub fn add_at_binding(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 => 1,\nLL | |         x @ _ => x,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_at_binding)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":2764,"byte_end":2876,"line_start":128,"line_end":134,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_at_binding(x: u32) -> u32 {","highlight_start":1,"highlight_end":39},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 => 1,","highlight_start":1,"highlight_end":16},{"text":"        x @ _ => x,","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_at_binding)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:128:1\n   |\nLL | / pub fn add_at_binding(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 => 1,\nLL | |         x @ _ => x,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_name_of_at_binding)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":3227,"byte_end":3350,"line_start":152,"line_end":158,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_name_of_at_binding(x: u32) -> u32 {","highlight_start":1,"highlight_end":50},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 => 1,","highlight_start":1,"highlight_end":16},{"text":"        y @ _ => 7,","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_name_of_at_binding)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:152:1\n   |\nLL | / pub fn change_name_of_at_binding(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 => 1,\nLL | |         y @ _ => 7,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_simple_name_to_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":3712,"byte_end":3838,"line_start":175,"line_end":180,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_simple_name_to_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":54},{"text":"    match (x, x & 1) {","highlight_start":1,"highlight_end":23},{"text":"        (0, 0) => 0,","highlight_start":1,"highlight_end":21},{"text":"        (x, y) => 1,","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_simple_name_to_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:175:1\n   |\nLL | / pub fn change_simple_name_to_pattern(x: u32) -> u32 {\nLL | |     match (x, x & 1) {\nLL | |         (0, 0) => 0,\nLL | |         (x, y) => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_simple_name_to_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":3712,"byte_end":3838,"line_start":175,"line_end":180,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_simple_name_to_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":54},{"text":"    match (x, x & 1) {","highlight_start":1,"highlight_end":23},{"text":"        (0, 0) => 0,","highlight_start":1,"highlight_end":21},{"text":"        (x, y) => 1,","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_simple_name_to_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:175:1\n   |\nLL | / pub fn change_simple_name_to_pattern(x: u32) -> u32 {\nLL | |     match (x, x & 1) {\nLL | |         (0, 0) => 0,\nLL | |         (x, y) => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_name_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":4203,"byte_end":4340,"line_start":198,"line_end":204,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_name_in_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":47},{"text":"    match (x, x & 1) {","highlight_start":1,"highlight_end":23},{"text":"        (b, 0) => 0,","highlight_start":1,"highlight_end":21},{"text":"        (a, 1) => a,","highlight_start":1,"highlight_end":21},{"text":"        _ => 100,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_name_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:198:1\n   |\nLL | / pub fn change_name_in_pattern(x: u32) -> u32 {\nLL | |     match (x, x & 1) {\nLL | |         (b, 0) => 0,\nLL | |         (a, 1) => a,\nLL | |         _ => 100,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_mutability_of_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":4712,"byte_end":4847,"line_start":221,"line_end":226,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":64},{"text":"    match (x, x & 1) {","highlight_start":1,"highlight_end":23},{"text":"        (mut a, 0) => 0,","highlight_start":1,"highlight_end":25},{"text":"        _ => 1,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_mutability_of_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:221:1\n   |\nLL | / pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\nLL | |     match (x, x & 1) {\nLL | |         (mut a, 0) => 0,\nLL | |         _ => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_mutability_of_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":4712,"byte_end":4847,"line_start":221,"line_end":226,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":64},{"text":"    match (x, x & 1) {","highlight_start":1,"highlight_end":23},{"text":"        (mut a, 0) => 0,","highlight_start":1,"highlight_end":25},{"text":"        _ => 1,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_mutability_of_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:221:1\n   |\nLL | / pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\nLL | |     match (x, x & 1) {\nLL | |         (mut a, 0) => 0,\nLL | |         _ => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_ref_to_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":5201,"byte_end":5326,"line_start":243,"line_end":248,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":54},{"text":"    match (x, x & 1) {","highlight_start":1,"highlight_end":23},{"text":"        (ref a, 0) => 0,","highlight_start":1,"highlight_end":25},{"text":"        _ => 1,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_ref_to_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:243:1\n   |\nLL | / pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\nLL | |     match (x, x & 1) {\nLL | |         (ref a, 0) => 0,\nLL | |         _ => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_ref_to_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":5201,"byte_end":5326,"line_start":243,"line_end":248,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":54},{"text":"    match (x, x & 1) {","highlight_start":1,"highlight_end":23},{"text":"        (ref a, 0) => 0,","highlight_start":1,"highlight_end":25},{"text":"        _ => 1,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_ref_to_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:243:1\n   |\nLL | / pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\nLL | |     match (x, x & 1) {\nLL | |         (ref a, 0) => 0,\nLL | |         _ => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_amp_to_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":5675,"byte_end":5798,"line_start":265,"line_end":270,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":54},{"text":"    match (&x, x & 1) {","highlight_start":1,"highlight_end":24},{"text":"        (&a, 0) => 0,","highlight_start":1,"highlight_end":22},{"text":"        _ => 1,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_amp_to_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:265:1\n   |\nLL | / pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\nLL | |     match (&x, x & 1) {\nLL | |         (&a, 0) => 0,\nLL | |         _ => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_amp_to_binding_in_pattern)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":5675,"byte_end":5798,"line_start":265,"line_end":270,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {","highlight_start":1,"highlight_end":54},{"text":"    match (&x, x & 1) {","highlight_start":1,"highlight_end":24},{"text":"        (&a, 0) => 0,","highlight_start":1,"highlight_end":22},{"text":"        _ => 1,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_amp_to_binding_in_pattern)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:265:1\n   |\nLL | / pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\nLL | |     match (&x, x & 1) {\nLL | |         (&a, 0) => 0,\nLL | |         _ => 1,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_rhs_of_arm)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":6137,"byte_end":6248,"line_start":288,"line_end":294,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_rhs_of_arm(x: u32) -> u32 {","highlight_start":1,"highlight_end":42},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 => 0,","highlight_start":1,"highlight_end":16},{"text":"        1 => 3,","highlight_start":1,"highlight_end":16},{"text":"        _ => 2,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_rhs_of_arm)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:288:1\n   |\nLL | / pub fn change_rhs_of_arm(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 => 0,\nLL | |         1 => 3,\nLL | |         _ => 2,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_alternative_to_arm)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":6605,"byte_end":6725,"line_start":312,"line_end":318,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_alternative_to_arm(x: u32) -> u32 {","highlight_start":1,"highlight_end":47},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 | 7 => 0,","highlight_start":1,"highlight_end":20},{"text":"        1 => 3,","highlight_start":1,"highlight_end":16},{"text":"        _ => 2,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_alternative_to_arm)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:312:1\n   |\nLL | / pub fn add_alternative_to_arm(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 | 7 => 0,\nLL | |         1 => 3,\nLL | |         _ => 2,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_alternative_to_arm)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/match_expressions.rs","byte_start":6605,"byte_end":6725,"line_start":312,"line_end":318,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_alternative_to_arm(x: u32) -> u32 {","highlight_start":1,"highlight_end":47},{"text":"    match x {","highlight_start":1,"highlight_end":14},{"text":"        0 | 7 => 0,","highlight_start":1,"highlight_end":20},{"text":"        1 => 3,","highlight_start":1,"highlight_end":16},{"text":"        _ => 2,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_alternative_to_arm)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/match_expressions.rs:312:1\n   |\nLL | / pub fn add_alternative_to_arm(x: u32) -> u32 {\nLL | |     match x {\nLL | |         0 | 7 => 0,\nLL | |         1 => 3,\nLL | |         _ => 2,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 22 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 22 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/match_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/panic_exprs.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/panic_exprs.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/panic_exprs/panic_exprs.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/panic_exprs/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-C" "debug-assertions" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/panic_exprs/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(indexing)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":932,"byte_end":1076,"line_start":23,"line_end":32,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn indexing(slice: &[u8]) -> u8 {","highlight_start":1,"highlight_end":38},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        slice[100]","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        slice[100]","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(indexing)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:23:1\n   |\nLL | / pub fn indexing(slice: &[u8]) -> u8 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         slice[100]\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(arithmetic_overflow_plus)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":1262,"byte_end":1413,"line_start":38,"line_end":47,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn arithmetic_overflow_plus(val: i32) -> i32 {","highlight_start":1,"highlight_end":51},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val + 1","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val + 1","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(arithmetic_overflow_plus)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:38:1\n   |\nLL | / pub fn arithmetic_overflow_plus(val: i32) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         val + 1\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(arithmetic_overflow_minus)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":1600,"byte_end":1752,"line_start":53,"line_end":62,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn arithmetic_overflow_minus(val: i32) -> i32 {","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val - 1","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val - 1","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(arithmetic_overflow_minus)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:53:1\n   |\nLL | / pub fn arithmetic_overflow_minus(val: i32) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         val - 1\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(arithmetic_overflow_mult)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":1938,"byte_end":2089,"line_start":68,"line_end":77,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn arithmetic_overflow_mult(val: i32) -> i32 {","highlight_start":1,"highlight_end":51},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val * 2","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val * 2","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(arithmetic_overflow_mult)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:68:1\n   |\nLL | / pub fn arithmetic_overflow_mult(val: i32) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         val * 2\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(arithmetic_overflow_negation)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":2275,"byte_end":2424,"line_start":83,"line_end":92,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn arithmetic_overflow_negation(val: i32) -> i32 {","highlight_start":1,"highlight_end":55},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        -val","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        -val","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(arithmetic_overflow_negation)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:83:1\n   |\nLL | / pub fn arithmetic_overflow_negation(val: i32) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         -val\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(division_by_zero)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":2610,"byte_end":2753,"line_start":98,"line_end":107,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn division_by_zero(val: i32) -> i32 {","highlight_start":1,"highlight_end":43},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        2 / val","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        2 / val","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(division_by_zero)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:98:1\n   |\nLL | / pub fn division_by_zero(val: i32) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         2 / val\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(mod_by_zero)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":2938,"byte_end":3076,"line_start":112,"line_end":121,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn mod_by_zero(val: i32) -> i32 {","highlight_start":1,"highlight_end":38},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        2 % val","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        2 % val","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(mod_by_zero)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:112:1\n   |\nLL | / pub fn mod_by_zero(val: i32) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         2 % val\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(shift_left)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":3262,"byte_end":3423,"line_start":127,"line_end":136,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn shift_left(val: i32, shift: usize) -> i32 {","highlight_start":1,"highlight_end":51},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val << shift","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val << shift","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(shift_left)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:127:1\n   |\nLL | / pub fn shift_left(val: i32, shift: usize) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         val << shift\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(shift_right)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/panic_exprs.rs","byte_start":3610,"byte_end":3772,"line_start":142,"line_end":151,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn shift_right(val: i32, shift: usize) -> i32 {","highlight_start":1,"highlight_end":52},{"text":"    #[cfg(cfail1)]","highlight_start":1,"highlight_end":19},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val >> shift","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(not(cfail1))]","highlight_start":1,"highlight_end":24},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        val >> shift","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(shift_right)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/panic_exprs.rs:142:1\n   |\nLL | / pub fn shift_right(val: i32, shift: usize) -> i32 {\nLL | |     #[cfg(cfail1)]\nLL | |     {\nLL | |         val >> shift\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"aborting due to 9 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 9 previous errors\n\n"}
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] thread '[incremental] incremental/hashes/panic_exprs.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[01:11:34] 
[01:11:34] 
[01:11:34] ---- [incremental] incremental/hashes/struct_constructors.rs stdout ----
[01:11:34] 
[01:11:34] error in revision `cfail2`: test compilation failed although it shouldn't!
[01:11:34] status: exit code: 1
[01:11:34] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/incremental/hashes/struct_constructors.rs" "--target=x86_64-unknown-linux-gnu" "--cfg" "cfail2" "-C" "incremental=/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/struct_constructors/struct_constructors.inc" "-Z" "incremental-verify-ich" "-Z" "incremental-queries" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/struct_constructors/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-Z" "query-dep-graph" "-Zincremental-ignore-spans" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental/hashes/struct_constructors/auxiliary"
[01:11:34] ------------------------------------------
[01:11:34] 
[01:11:34] ------------------------------------------
[01:11:34] stderr:
[01:11:34] stderr:
[01:11:34] ------------------------------------------
[01:11:34] {"message":"`MirValidated(change_field_value_regular_struct)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/struct_constructors.rs","byte_start":935,"byte_end":1066,"line_start":36,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_field_value_regular_struct() -> RegularStruct {","highlight_start":1,"highlight_end":62},{"text":"    RegularStruct {","highlight_start":1,"highlight_end":20},{"text":"        x: 0,","highlight_start":1,"highlight_end":14},{"text":"        y: 2,","highlight_start":1,"highlight_end":14},{"text":"        z: 2,","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_field_value_regular_struct)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/struct_constructors.rs:36:1\n   |\nLL | / pub fn change_field_value_regular_struct() -> RegularStruct {\nLL | |     RegularStruct {\nLL | |         x: 0,\nLL | |         y: 2,\nLL | |         z: 2,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_field_order_regular_struct)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/struct_constructors.rs","byte_start":1408,"byte_end":1539,"line_start":59,"line_end":65,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_field_order_regular_struct() -> RegularStruct {","highlight_start":1,"highlight_end":62},{"text":"    RegularStruct {","highlight_start":1,"highlight_end":20},{"text":"        y: 4,","highlight_start":1,"highlight_end":14},{"text":"        x: 3,","highlight_start":1,"highlight_end":14},{"text":"        z: 5,","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_field_order_regular_struct)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/struct_constructors.rs:59:1\n   |\nLL | / pub fn change_field_order_regular_struct() -> RegularStruct {\nLL | |     RegularStruct {\nLL | |         y: 4,\nLL | |         x: 3,\nLL | |         z: 5,\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(add_field_regular_struct)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/struct_constructors.rs","byte_start":1973,"byte_end":2184,"line_start":87,"line_end":99,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_field_regular_struct() -> RegularStruct {","highlight_start":1,"highlight_end":53},{"text":"    let struct1 = RegularStruct {","highlight_start":1,"highlight_end":34},{"text":"        x: 3,","highlight_start":1,"highlight_end":14},{"text":"        y: 4,","highlight_start":1,"highlight_end":14},{"text":"        z: 5,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    RegularStruct {","highlight_start":1,"highlight_end":20},{"text":"        x: 7,","highlight_start":1,"highlight_end":14},{"text":"        y: 8,","highlight_start":1,"highlight_end":14},{"text":"        .. struct1","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(add_field_regular_struct)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/struct_constructors.rs:87:1\n   |\nLL | / pub fn add_field_regular_struct() -> RegularStruct {\nLL | |     let struct1 = RegularStruct {\nLL | |         x: 3,\nLL | |         y: 4,\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(add_field_regular_struct)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/struct_constructors.rs","byte_start":1973,"byte_end":2184,"line_start":87,"line_end":99,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn add_field_regular_struct() -> RegularStruct {","highlight_start":1,"highlight_end":53},{"text":"    let struct1 = RegularStruct {","highlight_start":1,"highlight_end":34},{"text":"        x: 3,","highlight_start":1,"highlight_end":14},{"text":"        y: 4,","highlight_start":1,"highlight_end":14},{"text":"        z: 5,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    RegularStruct {","highlight_start":1,"highlight_end":20},{"text":"        x: 7,","highlight_start":1,"highlight_end":14},{"text":"        y: 8,","highlight_start":1,"highlight_end":14},{"text":"        .. struct1","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(add_field_regular_struct)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/struct_constructors.rs:87:1\n   |\nLL | / pub fn add_field_regular_struct() -> RegularStruct {\nLL | |     let struct1 = RegularStruct {\nLL | |         x: 3,\nLL | |         y: 4,\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_field_label_regular_struct)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/struct_constructors.rs","byte_start":2641,"byte_end":2861,"line_start":122,"line_end":134,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_field_label_regular_struct() -> RegularStruct {","highlight_start":1,"highlight_end":62},{"text":"    let struct1 = RegularStruct {","highlight_start":1,"highlight_end":34},{"text":"        x: 3,","highlight_start":1,"highlight_end":14},{"text":"        y: 4,","highlight_start":1,"highlight_end":14},{"text":"        z: 5,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    RegularStruct {","highlight_start":1,"highlight_end":20},{"text":"        x: 7,","highlight_start":1,"highlight_end":14},{"text":"        z: 9,","highlight_start":1,"highlight_end":14},{"text":"        .. struct1","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_field_label_regular_struct)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/struct_constructors.rs:122:1\n   |\nLL | / pub fn change_field_label_regular_struct() -> RegularStruct {\nLL | |     let struct1 = RegularStruct {\nLL | |         x: 3,\nLL | |         y: 4,\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`TypeckTables(change_field_label_regular_struct)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/struct_constructors.rs","byte_start":2641,"byte_end":2861,"line_start":122,"line_end":134,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_field_label_regular_struct() -> RegularStruct {","highlight_start":1,"highlight_end":62},{"text":"    let struct1 = RegularStruct {","highlight_start":1,"highlight_end":34},{"text":"        x: 3,","highlight_start":1,"highlight_end":14},{"text":"        y: 4,","highlight_start":1,"highlight_end":14},{"text":"        z: 5,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    RegularStruct {","highlight_start":1,"highlight_end":20},{"text":"        x: 7,","highlight_start":1,"highlight_end":14},{"text":"        z: 9,","highlight_start":1,"highlight_end":14},{"text":"        .. struct1","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `TypeckTables(change_field_label_regular_struct)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/struct_constructors.rs:122:1\n   |\nLL | / pub fn change_field_label_regular_struct() -> RegularStruct {\nLL | |     let struct1 = RegularStruct {\nLL | |         x: 3,\nLL | |         y: 4,\n...  |\nLL | |     }\nLL | | }\n   | |_^\n\n"}
[01:11:34] {"message":"`MirValidated(change_constructor_path_regular_struct)` should be dirty but is not","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/incremental/hashes/struct_constructors.rs","byte_start":3290,"byte_end":3419,"line_start":157,"line_end":163,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn change_constructor_path_regular_struct() {","highlight_start":1,"highlight_end":50},{"text":"    let _ = RegularStruct2 {","highlight_start":1,"highlight_end":29},{"text":"        x: 0,","highlight_start":1,"highlight_end":14},{"text":"        y: 1,","highlight_start":1,"highlight_end":14},{"text":"        z: 2,","highlight_start":1,"highlight_end":14},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: `MirValidated(change_constructor_path_regular_struct)` should be dirty but is not\n  --> /checkout/src/test/incremental/hashes/struct_constructors.rs:157:1\n   |\nLL | / pub fn change_constructor_path_regular_struct() {\nLL | |     let _ = RegularStruct2 {\nLL | |         x: 0,\nLL | |         y: 1,\nLL | |         z: 2,\nLL | |     };\nLL | | }\n   | |_^\n\n"}
---
[01:11:34] test result: FAILED. 68 passed; 28 failed; 0 ignored; 0 measured; 0 filtered out
[01:11:34] 
[01:11:34] 
[01:11:34] 
[01:11:34] command did not execute successfully: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest" "--compile-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib" "--run-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib" "--rustc-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "--src-base" "/checkout/src/test/incremental" "--build-base" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/incremental" "--stage-id" "stage2-x86_64-unknown-linux-gnu" "--mode" "incremental" "--target" "x86_64-unknown-linux-gnu" "--host" "x86_64-unknown-linux-gnu" "--llvm-filecheck" "/usr/lib/llvm-6.0/bin/FileCheck" "--host-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--target-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--docck-python" "/usr/bin/python2.7" "--lldb-python" "/usr/bin/python2.7" "--gdb" "/usr/bin/gdb" "--quiet" "--llvm-version" "6.0.0\n" "--system-llvm" "--cc" "" "--cxx" "" "--cflags" "" "--llvm-components" "" "--llvm-cxxflags" "" "--adb-path" "adb" "--adb-test-dir" "/data/tmp/work" "--android-cross-path" "" "--color" "always"
[01:11:34] 
[01:11:34] 
[01:11:34] failed to run: /checkout/obj/build/bootstrap/debug/bootstrap test
[01:11:34] Build completed unsuccessfully in 0:11:32
[01:11:34] Build completed unsuccessfully in 0:11:32
[01:11:34] make: *** [check] Error 1
[01:11:34] Makefile:48: recipe for target 'check' failed
The command "stamp sh -x -c "$RUN_SCRIPT"" exited with 2.
travis_time:start:10b95090
$ date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
Sun Jan 20 16:58:11 UTC 2019
---
travis_time:end:2ef5c654:start=1548003492701603439,finish=1548003492756578953,duration=54975514
travis_fold:end:after_failure.4
travis_fold:start:after_failure.5
travis_time:start:1f7e80e8
$ cat ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers || true
cat: ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers: No such file or directory
travis_fold:end:after_failure.5
travis_fold:start:after_failure.6
travis_time:start:1292cde4
$ dmesg | grep -i kill
