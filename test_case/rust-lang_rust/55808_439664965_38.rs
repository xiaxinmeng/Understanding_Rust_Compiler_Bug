\n\nIf the trait `Foo` was deriving from something like `Super<String>` or\n`Super<T>` (where `Foo` itself is `Foo<T>`), this is okay, because given a type\n`get_a()` will definitely return an object of that type.\n\nHowever, if it derives from `Super<Self>`, even though `Super` is object safe,\nthe method `get_a()` would return an object of unknown type when called on the\nfunction. `Self` type parameters let us make object safe traits no longer safe,\nso they are forbidden when specifying supertraits.\n\nThere's no easy fix for this, generally code will need to be refactored so that\nyou no longer need to derive from `Super<Self>`.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/traits/trait-alias-object.rs","byte_start":570,"byte_end":581,"line_start":17,"line_end":17,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"    let _: &dyn EqAlias = &123;","highlight_start":13,"highlight_end":24}],"label":"the trait `EqAlias` cannot be made into an object","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait cannot use `Self` as a type parameter in the supertraits or where-clauses","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0038]: the trait `EqAlias` cannot be made into an object\n  --> /checkout/src/test/ui/traits/trait-alias-object.rs:17:13\n   |\nLL |     let _: &dyn EqAlias = &123;\n   |             ^^^^^^^^^^^ the trait `EqAlias` cannot be made into an object\n   |\n   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n\n"}
[00:48:35] {"message":"the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified","code":{"code":"E0191","explanation":"\nTrait objects need to have all associated types specified. Erroneous code\nexample:\n\n