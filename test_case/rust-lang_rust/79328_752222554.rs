plain
  SCCACHE_BUCKET: rust-lang-ci-sccache2
  TOOLSTATE_REPO: https://github.com/rust-lang-nursery/rust-toolstate
  CACHE_DOMAIN: ci-caches.rust-lang.org
  EXTRA_VARIABLES: {
 "CI_ONLY_WHEN_SUBMODULES_CHANGED": 1
##[endgroup]
adding extra environment variable CI_ONLY_WHEN_SUBMODULES_CHANGED
linux builder detected, using docker to run the build
##[group]Run src/ci/scripts/should-skip-this.sh
---
  CACHE_DOMAIN: ci-caches.rust-lang.org
  CI_ONLY_WHEN_SUBMODULES_CHANGED: 1
  IMAGE: x86_64-gnu-tools
##[endgroup]
Executing the job since clippy subtree was updated
with:
  github_token: ***
  check_every_seconds: 60
env:
---
failures:

---- compile_test stdout ----
normalized stderr:
error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
   |
   |
LL | /     fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint
LL | |     {
LL | |         assert!(x == 5, "wrong argument");
LL | |         Ok(true)
LL | |     }
   |
   |
   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`
   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
   |
   |
LL |         assert!(x == 5, "wrong argument");
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)


error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
   |
   |
LL | /     fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint
LL | |     {
LL | |         assert_eq!(x, 5);
LL | |         Ok(true)
LL | |     }
   |
   |
   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
   |
   |
LL |         assert_eq!(x, 5);
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)


error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
   |
   |
LL | /     fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint
LL | |     {
LL | |         assert_ne!(x, 1);
LL | |         Ok(true)
LL | |     }
   |
   |
   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
   |
   |
LL |         assert_ne!(x, 1);
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 3 previous errors


error: test failed, to rerun pass '--test compile-test'


expected stderr:
error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
   |
   |
LL | /     fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint
LL | |     {
LL | |         assert!(x == 5, "wrong argument");
LL | |         Ok(true)
LL | |     }
   |
   |
   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`
   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
   |
   |
LL |         assert!(x == 5, "wrong argument");
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)


error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
   |
   |
LL | /     fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint
LL | |     {
LL | |         assert_eq!(x, 5);
LL | |         Ok(true)
LL | |     }
   |
   |
   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
   |
   |
LL |         assert_eq!(x, 5);
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)


error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
   |
   |
LL | /     fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint
LL | |     {
LL | |         assert_ne!(x, 1);
LL | |         Ok(true)
LL | |     }
   |
   |
   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
   |
   |
LL |         assert_ne!(x, 1);
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 3 previous errors




diff of stderr:

 error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
    |
    |
 LL | /     fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint
 LL | |     {
 LL | |         assert!(x == 5, "wrong argument");
 LL | |         Ok(true)
 LL | |     }
    |
    |
    = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`
    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
 note: return Err() instead of panicking
    |
    |
 LL |         assert!(x == 5, "wrong argument");
-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)
 
 
 error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
    |
    |
 LL | /     fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint
 LL | |     {
 LL | |         assert_eq!(x, 5);
 LL | |         Ok(true)
 LL | |     }
    |
    |
    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
 note: return Err() instead of panicking
    |
    |
 LL |         assert_eq!(x, 5);
    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)
 
 
 error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`
    |
    |
 LL | /     fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint
 LL | |     {
 LL | |         assert_ne!(x, 1);
 LL | |         Ok(true)
 LL | |     }
    |
    |
    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
 note: return Err() instead of panicking
    |
    |
 LL |         assert_ne!(x, 1);
    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)
 
 error: aborting due to 3 previous errors
 
 
 

The actual stderr differed from the expected stderr.
Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/build/clippy-7d596e70088d0ccb/out/test_build_base/panic_in_result_fn_assertions.stderr
To update references, run this command from build directory:
tests/ui/update-references.sh '/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/build/clippy-7d596e70088d0ccb/out/test_build_base' 'panic_in_result_fn_assertions.rs'
error: 1 errors occurred comparing output.
status: exit code: 1
status: exit code: 1
command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools-bin/clippy-driver" "tests/ui/panic_in_result_fn_assertions.rs" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/build/clippy-7d596e70088d0ccb/out/test_build_base" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/build/clippy-7d596e70088d0ccb/out/test_build_base/panic_in_result_fn_assertions.stage-id" "-A" "unused" "--emit=metadata" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps" "-Dwarnings" "-Zui-testing" "--extern" "syn=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libsyn-efc540c81be69f24.rlib" "--extern" "quote=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libquote-45a3ec2898545ae5.rlib" "--extern" "serde=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libserde-3e5755171965ca17.rlib" "--extern" "regex=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libregex-e3c044d770c3edb5.rlib" "--extern" "clippy_lints=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_lints-f8eb452cc9665d35.rlib" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/build/clippy-7d596e70088d0ccb/out/test_build_base/panic_in_result_fn_assertions.stage-id.aux"
------------------------------------------

------------------------------------------
stderr:
stderr:
------------------------------------------
{"message":"used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`","code":{"code":"clippy::panic_in_result_fn","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":99,"byte_end":257,"line_start":7,"line_end":11,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint","highlight_start":5,"highlight_end":91},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":1,"highlight_end":43},{"text":"        Ok(true)","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::panic-in-result-fn` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"return Err() instead of panicking","code":null,"level":"note","spans":[{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":true,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":41477,"byte_end":41633,"line_start":1222,"line_end":1225,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! assert {","highlight_start":5,"highlight_end":26},{"text":"        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":61},{"text":"        ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/std/src/macros.rs","byte_start":544,"byte_end":577,"line_start":14,"line_end":14,"column_start":27,"column_end":60,"is_primary":true,"text":[{"text":"    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });","highlight_start":27,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":41477,"byte_end":41633,"line_start":1222,"line_end":1225,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! assert {","highlight_start":5,"highlight_end":26},{"text":"        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":61},{"text":"        ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/checkout/library/std/src/macros.rs","byte_start":447,"byte_end":699,"line_start":12,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":1},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":1},{"text":"    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":1},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":1},{"text":"    });","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/std/src/macros.rs","byte_start":546,"byte_end":569,"line_start":14,"line_end":14,"column_start":29,"column_end":52,"is_primary":true,"text":[{"text":"    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });","highlight_start":29,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":41477,"byte_end":41633,"line_start":1222,"line_end":1225,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! assert {","highlight_start":5,"highlight_end":26},{"text":"        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":61},{"text":"        ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/checkout/library/std/src/macros.rs","byte_start":447,"byte_end":699,"line_start":12,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":62},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/std/src/macros.rs","byte_start":546,"byte_end":575,"line_start":14,"line_end":14,"column_start":29,"column_end":58,"is_primary":true,"text":[{"text":"    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });","highlight_start":29,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":200,"byte_end":234,"line_start":9,"line_end":9,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        assert!(x == 5, \"wrong argument\");","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":41477,"byte_end":41633,"line_start":1222,"line_end":1225,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! assert {","highlight_start":5,"highlight_end":26},{"text":"        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":61},{"text":"        ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/checkout/library/std/src/macros.rs","byte_start":447,"byte_end":699,"line_start":12,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":62},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n  --> tests/ui/panic_in_result_fn_assertions.rs:7:5\n   |\nLL | /     fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\nLL | |     {\nLL | |         assert!(x == 5, \"wrong argument\");\nLL | |         Ok(true)\nLL | |     }\n   | |_____^\n   |\n   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\nnote: return Err() instead of panicking\n  --> tests/ui/panic_in_result_fn_assertions.rs:9:9\n   |\nLL |         assert!(x == 5, \"wrong argument\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`","code":{"code":"clippy::panic_in_result_fn","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":263,"byte_end":394,"line_start":13,"line_end":17,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint","highlight_start":5,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        assert_eq!(x, 5);","highlight_start":1,"highlight_end":26},{"text":"        Ok(true)","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"return Err() instead of panicking","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":500,"byte_end":528,"line_start":17,"line_end":17,"column_start":9,"column_end":37,"is_primary":true,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":9,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1547,"byte_end":1659,"line_start":48,"line_end":50,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":500,"byte_end":566,"line_start":17,"line_end":17,"column_start":9,"column_end":75,"is_primary":true,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1547,"byte_end":1659,"line_start":48,"line_end":50,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":true,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1547,"byte_end":1659,"line_start":48,"line_end":50,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":25303,"byte_end":25457,"line_start":749,"line_end":752,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1167,"byte_end":1707,"line_start":41,"line_end":54,"column_start":41,"column_end":6,"is_primary":true,"text":[{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":41,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1177,"byte_end":1701,"line_start":42,"line_end":53,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":9,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1183,"byte_end":1200,"line_start":42,"line_end":42,"column_start":15,"column_end":32,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":15,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1184,"byte_end":1190,"line_start":42,"line_end":42,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":16,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1192,"byte_end":1199,"line_start":42,"line_end":42,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1240,"byte_end":1691,"line_start":43,"line_end":52,"column_start":38,"column_end":14,"is_primary":true,"text":[{"text":"            (left_val, right_val) => {","highlight_start":38,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1258,"byte_end":1677,"line_start":44,"line_end":51,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":17,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1261,"byte_end":1287,"line_start":44,"line_end":44,"column_start":20,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":20,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1262,"byte_end":1287,"line_start":44,"line_end":44,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1263,"byte_end":1272,"line_start":44,"line_end":44,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":22,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1264,"byte_end":1272,"line_start":44,"line_end":44,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":23,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1276,"byte_end":1286,"line_start":44,"line_end":44,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":35,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1277,"byte_end":1286,"line_start":44,"line_end":44,"column_start":36,"column_end":45,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":36,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1288,"byte_end":1677,"line_start":44,"line_end":51,"column_start":47,"column_end":18,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":47,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1562,"byte_end":1633,"line_start":48,"line_end":50,"column_start":36,"column_end":17,"is_primary":true,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":36,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1635,"byte_end":1645,"line_start":50,"line_end":50,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1635,"byte_end":1645,"line_start":50,"line_end":50,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1547,"byte_end":1659,"line_start":48,"line_end":50,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":25303,"byte_end":25457,"line_start":749,"line_end":752,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1636,"byte_end":1645,"line_start":50,"line_end":50,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1637,"byte_end":1645,"line_start":50,"line_end":50,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1647,"byte_end":1658,"line_start":50,"line_end":50,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1647,"byte_end":1658,"line_start":50,"line_end":50,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1547,"byte_end":1659,"line_start":48,"line_end":50,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":25303,"byte_end":25457,"line_start":749,"line_end":752,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1648,"byte_end":1658,"line_start":50,"line_end":50,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":32,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1649,"byte_end":1658,"line_start":50,"line_end":50,"column_start":33,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":33,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":354,"byte_end":371,"line_start":15,"line_end":15,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_eq!(x, 5);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1102,"byte_end":2368,"line_start":40,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n  --> tests/ui/panic_in_result_fn_assertions.rs:13:5\n   |\nLL | /     fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint\nLL | |     {\nLL | |         assert_eq!(x, 5);\nLL | |         Ok(true)\nLL | |     }\n   | |_____^\n   |\n   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\nnote: return Err() instead of panicking\n  --> tests/ui/panic_in_result_fn_assertions.rs:15:9\n   |\nLL |         assert_eq!(x, 5);\n   |         ^^^^^^^^^^^^^^^^^\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`","code":{"code":"clippy::panic_in_result_fn","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":400,"byte_end":531,"line_start":19,"line_end":23,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint","highlight_start":5,"highlight_end":81},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        assert_ne!(x, 1);","highlight_start":1,"highlight_end":26},{"text":"        Ok(true)","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"return Err() instead of panicking","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":500,"byte_end":528,"line_start":17,"line_end":17,"column_start":9,"column_end":37,"is_primary":true,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":9,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3342,"byte_end":3454,"line_start":99,"line_end":101,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":500,"byte_end":566,"line_start":17,"line_end":17,"column_start":9,"column_end":75,"is_primary":true,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3342,"byte_end":3454,"line_start":99,"line_end":101,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":true,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3342,"byte_end":3454,"line_start":99,"line_end":101,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":25303,"byte_end":25457,"line_start":749,"line_end":752,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2965,"byte_end":3502,"line_start":92,"line_end":105,"column_start":41,"column_end":6,"is_primary":true,"text":[{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":41,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2975,"byte_end":3496,"line_start":93,"line_end":104,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":9,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2981,"byte_end":2998,"line_start":93,"line_end":93,"column_start":15,"column_end":32,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":15,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2982,"byte_end":2988,"line_start":93,"line_end":93,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":16,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2990,"byte_end":2997,"line_start":93,"line_end":93,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"        match (&$left, &$right) {","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3038,"byte_end":3486,"line_start":94,"line_end":103,"column_start":38,"column_end":14,"is_primary":true,"text":[{"text":"            (left_val, right_val) => {","highlight_start":38,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3056,"byte_end":3472,"line_start":95,"line_end":102,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if *left_val == *right_val {","highlight_start":17,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3059,"byte_end":3068,"line_start":95,"line_end":95,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":"                if *left_val == *right_val {","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3059,"byte_end":3082,"line_start":95,"line_end":95,"column_start":20,"column_end":43,"is_primary":true,"text":[{"text":"                if *left_val == *right_val {","highlight_start":20,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3060,"byte_end":3068,"line_start":95,"line_end":95,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"                if *left_val == *right_val {","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3072,"byte_end":3082,"line_start":95,"line_end":95,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                if *left_val == *right_val {","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3073,"byte_end":3082,"line_start":95,"line_end":95,"column_start":34,"column_end":43,"is_primary":true,"text":[{"text":"                if *left_val == *right_val {","highlight_start":34,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3083,"byte_end":3472,"line_start":95,"line_end":102,"column_start":44,"column_end":18,"is_primary":true,"text":[{"text":"                if *left_val == *right_val {","highlight_start":44,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3357,"byte_end":3428,"line_start":99,"line_end":101,"column_start":36,"column_end":17,"is_primary":true,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":36,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3430,"byte_end":3440,"line_start":101,"line_end":101,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3430,"byte_end":3440,"line_start":101,"line_end":101,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3342,"byte_end":3454,"line_start":99,"line_end":101,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":25303,"byte_end":25457,"line_start":749,"line_end":752,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3431,"byte_end":3440,"line_start":101,"line_end":101,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3432,"byte_end":3440,"line_start":101,"line_end":101,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3442,"byte_end":3453,"line_start":101,"line_end":101,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3442,"byte_end":3453,"line_start":101,"line_end":101,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":529,"byte_end":565,"line_start":17,"line_end":17,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3342,"byte_end":3454,"line_start":99,"line_end":101,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":21,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":224,"byte_end":575,"line_start":6,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panic!(\"explicit panic\")","highlight_start":1,"highlight_end":41},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":25303,"byte_end":25457,"line_start":749,"line_end":752,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3443,"byte_end":3453,"line_start":101,"line_end":101,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":32,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":3444,"byte_end":3453,"line_start":101,"line_end":101,"column_start":33,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":33,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/panic_in_result_fn_assertions.rs","byte_start":491,"byte_end":508,"line_start":21,"line_end":21,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"        assert_ne!(x, 1);","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2900,"byte_end":4160,"line_start":91,"line_end":121,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panic!(r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":74},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n  --> tests/ui/panic_in_result_fn_assertions.rs:19:5\n   |\nLL | /     fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint\nLL | |     {\nLL | |         assert_ne!(x, 1);\nLL | |         Ok(true)\nLL | |     }\n   | |_____^\n   |\n   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\nnote: return Err() instead of panicking\n  --> tests/ui/panic_in_result_fn_assertions.rs:21:9\n   |\nLL |         assert_ne!(x, 1);\n   |         ^^^^^^^^^^^^^^^^^\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}

------------------------------------------

thread 'compile_test' panicked at 'Some tests failed', /cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.5.0/src/lib.rs:105:22
