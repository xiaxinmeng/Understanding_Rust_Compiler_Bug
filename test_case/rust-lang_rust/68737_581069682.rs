plain
2020-02-01T19:55:58.6938274Z ========================== Starting Command Output ===========================
2020-02-01T19:55:58.6940050Z [command]/bin/bash --noprofile --norc /home/vsts/work/_temp/25349a54-d792-4a6c-a77f-1e551c2fc266.sh
2020-02-01T19:55:58.6940087Z 
2020-02-01T19:55:58.6942699Z ##[section]Finishing: Disable git automatic line ending conversion
2020-02-01T19:55:58.6949302Z ##[section]Starting: Checkout rust-lang/rust@refs/pull/68737/merge to s
2020-02-01T19:55:58.6951451Z Task         : Get sources
2020-02-01T19:55:58.6951541Z Description  : Get sources from a repository. Supports Git, TfsVC, and SVN repositories.
2020-02-01T19:55:58.6951578Z Version      : 1.0.0
2020-02-01T19:55:58.6951614Z Author       : Microsoft
---
2020-02-01T19:56:04.1751395Z ##[command]git remote add origin https://github.com/rust-lang/rust
2020-02-01T19:56:04.1766016Z ##[command]git config gc.auto 0
2020-02-01T19:56:04.1771926Z ##[command]git config --get-all http.https://github.com/rust-lang/rust.extraheader
2020-02-01T19:56:04.1778061Z ##[command]git config --get-all http.proxy
2020-02-01T19:56:04.1785263Z ##[command]git -c http.extraheader="AUTHORIZATION: basic ***" fetch --force --tags --prune --progress --no-recurse-submodules --depth=2 origin +refs/heads/*:refs/remotes/origin/* +refs/pull/68737/merge:refs/remotes/pull/68737/merge
---
2020-02-01T20:51:45.9562097Z .................................................................................................... 1700/9561
2020-02-01T20:51:50.7952150Z .................................................................................................... 1800/9561
2020-02-01T20:52:03.2551725Z .........................i.......................................................................... 1900/9561
2020-02-01T20:52:10.0716690Z .................................................................................................... 2000/9561
2020-02-01T20:52:24.4264741Z ...............iiiii................................................................................ 2100/9561
2020-02-01T20:52:34.2530836Z .................................................................................................... 2300/9561
2020-02-01T20:52:36.5686473Z .................................................................................................... 2400/9561
2020-02-01T20:52:41.9668104Z .................................................................................................... 2500/9561
2020-02-01T20:53:03.0649219Z .................................................................................................... 2600/9561
---
2020-02-01T20:55:36.7088548Z .................................................................................................... 4800/9561
2020-02-01T20:55:41.6833197Z ..........................................................i...............i......................... 4900/9561
2020-02-01T20:55:49.4424931Z .................................................................................................... 5000/9561
2020-02-01T20:55:57.5317521Z .................................................................................................... 5100/9561
2020-02-01T20:56:02.5061507Z .i.................................................................................................. 5200/9561
2020-02-01T20:56:13.6229392Z ...........................................................................ii.ii........i...i....... 5300/9561
2020-02-01T20:56:22.1761560Z .............i...................................................................................... 5500/9561
2020-02-01T20:56:32.1967088Z .................................................................................................... 5600/9561
2020-02-01T20:56:38.8028231Z ..............................................................i..................................... 5700/9561
2020-02-01T20:56:46.0500810Z .................................................................................................... 5800/9561
2020-02-01T20:56:46.0500810Z .................................................................................................... 5800/9561
2020-02-01T20:56:53.7528485Z .................................................................................................... 5900/9561
2020-02-01T20:57:02.6497435Z .....................................................ii...i..ii...........i......................... 6000/9561
2020-02-01T20:57:23.4998612Z .................................................................................................... 6200/9561
2020-02-01T20:57:30.7428756Z .................................................................................................... 6300/9561
2020-02-01T20:57:30.7428756Z .................................................................................................... 6300/9561
2020-02-01T20:57:38.9288472Z .................................................................................i..ii.............. 6400/9561
2020-02-01T20:58:06.1154994Z .................................................................................................... 6600/9561
2020-02-01T20:58:11.6490803Z .........................................................i.......................................... 6700/9561
2020-02-01T20:58:13.7969366Z .................................................................................................... 6800/9561
2020-02-01T20:58:16.0485248Z ..........................................................i......................................... 6900/9561
---
2020-02-01T20:59:54.7256138Z .................................................................................................... 7600/9561
2020-02-01T20:59:59.9930920Z .................................................................................................... 7700/9561
2020-02-01T21:00:06.6206942Z .................................................................................................... 7800/9561
2020-02-01T21:00:16.8396978Z .................................................................................................... 7900/9561
2020-02-01T21:00:22.7624472Z ..............iiiiiii.i............................................................................. 8000/9561
2020-02-01T21:00:37.1868252Z .................................................................................................... 8200/9561
2020-02-01T21:00:47.6210813Z .................................................................................................... 8300/9561
2020-02-01T21:01:00.8186550Z .................................................................................................... 8400/9561
2020-02-01T21:01:07.8826232Z .................................................................................................... 8500/9561
---
2020-02-01T21:03:26.8460475Z  finished in 7.685
2020-02-01T21:03:26.8639642Z Check compiletest suite=codegen mode=codegen (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-01T21:03:27.0188296Z 
2020-02-01T21:03:27.0188717Z running 172 tests
2020-02-01T21:03:30.1820619Z iiii......i...........ii..iiii...i....i...........i............i..i..................i....i......... 100/172
2020-02-01T21:03:32.5250027Z ...i.i.i...iii..iiiiiiiiii.......................iii............ii......
2020-02-01T21:03:32.5254122Z 
2020-02-01T21:03:32.5255059Z  finished in 5.661
2020-02-01T21:03:32.5435701Z Check compiletest suite=codegen-units mode=codegen-units (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-01T21:03:32.7131382Z 
---
2020-02-01T21:03:34.7193246Z  finished in 2.175
2020-02-01T21:03:34.7375294Z Check compiletest suite=assembly mode=assembly (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-01T21:03:34.8813815Z 
2020-02-01T21:03:34.8814498Z running 9 tests
2020-02-01T21:03:34.8815404Z iiiiiiiii
2020-02-01T21:03:34.8816888Z 
2020-02-01T21:03:34.8817331Z  finished in 0.144
2020-02-01T21:03:34.8990802Z Check compiletest suite=incremental mode=incremental (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-01T21:03:35.0473227Z 
---
2020-02-01T21:03:56.4150533Z  finished in 21.516
2020-02-01T21:03:56.4362172Z Check compiletest suite=debuginfo mode=debuginfo (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-01T21:03:56.6301869Z 
2020-02-01T21:03:56.6302391Z running 116 tests
2020-02-01T21:04:10.0167090Z iiiii..i.....i..i...i..i.i.i..i..i..ii....i.i....ii..........iiii..........i.....i..i.......ii.i.ii. 100/116
2020-02-01T21:04:11.8530443Z ....iiii.....ii.
2020-02-01T21:04:11.8532308Z 
2020-02-01T21:04:11.8533117Z  finished in 15.417
2020-02-01T21:04:11.8540441Z Uplifting stage1 rustc (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-01T21:04:11.8541324Z Copying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)
---
2020-02-01T21:11:36.8661153Z 
2020-02-01T21:11:36.8661469Z error: pretty-printed source does not match expected source
2020-02-01T21:11:36.8661666Z expected:
2020-02-01T21:11:36.8661988Z ------------------------------------------
2020-02-01T21:11:36.8662345Z // pp-exact
2020-02-01T21:11:36.8662606Z fn main() { }
2020-02-01T21:11:36.8662633Z 
2020-02-01T21:11:36.8662744Z #[cfg(FALSE)]
2020-02-01T21:11:36.8662744Z #[cfg(FALSE)]
2020-02-01T21:11:36.8662798Z fn syntax() {
2020-02-01T21:11:36.8662840Z     let _ = #[attr] box 0;
2020-02-01T21:11:36.8662881Z     let _ = #[attr] [#![attr] ];
2020-02-01T21:11:36.8662939Z     let _ = #[attr] [#![attr] 0];
2020-02-01T21:11:36.8662999Z     let _ = #[attr] [#![attr] 0; 0];
2020-02-01T21:11:36.8663042Z     let _ = #[attr] [#![attr] 0, 0, 0];
2020-02-01T21:11:36.8663083Z     let _ = #[attr] foo();
2020-02-01T21:11:36.8663139Z     let _ = #[attr] x.foo();
2020-02-01T21:11:36.8663465Z     let _ = #[attr] (#![attr] );
2020-02-01T21:11:36.8663510Z     let _ = #[attr] (#![attr] #[attr] 0,);
2020-02-01T21:11:36.8663569Z     let _ = #[attr] (#![attr] #[attr] 0, 0);
2020-02-01T21:11:36.8663615Z     let _ = #[attr] 0 + #[attr] 0;
2020-02-01T21:11:36.8663658Z     let _ = #[attr] 0 / #[attr] 0;
2020-02-01T21:11:36.8663701Z     let _ = #[attr] 0 & #[attr] 0;
2020-02-01T21:11:36.8663759Z     let _ = #[attr] 0 % #[attr] 0;
2020-02-01T21:11:36.8663919Z     let _ = #[attr] (0 + 0);
2020-02-01T21:11:36.8663964Z     let _ = #[attr] !0;
2020-02-01T21:11:36.8664453Z     let _ = #[attr] -0;
2020-02-01T21:11:36.8664651Z     let _ = #[attr] false;
2020-02-01T21:11:36.8664729Z     let _ = #[attr] 0;
2020-02-01T21:11:36.8665018Z     let _ = #[attr] 'c';
2020-02-01T21:11:36.8665068Z     let _ = #[attr] x as Y;
2020-02-01T21:11:36.8665113Z     let _ = #[attr] (x as Y);
2020-02-01T21:11:36.8665398Z         #[attr] while true {
2020-02-01T21:11:36.8665443Z                     #![attr]
2020-02-01T21:11:36.8665537Z                 };
2020-02-01T21:11:36.8665604Z     let _ =
2020-02-01T21:11:36.8665604Z     let _ =
2020-02-01T21:11:36.8665650Z         #[attr] while let Some(false) = true {
2020-02-01T21:11:36.8665763Z                     #![attr]
2020-02-01T21:11:36.8665807Z                 };
2020-02-01T21:11:36.8665849Z     let _ =
2020-02-01T21:11:36.8665906Z         #[attr] for x in y {
2020-02-01T21:11:36.8665950Z                     #![attr]
2020-02-01T21:11:36.8666034Z     let _ =
2020-02-01T21:11:36.8666034Z     let _ =
2020-02-01T21:11:36.8666092Z         #[attr] loop  {
2020-02-01T21:11:36.8666135Z                     #![attr]
2020-02-01T21:11:36.8666232Z     let _ =
2020-02-01T21:11:36.8666283Z         #[attr] match true {
2020-02-01T21:11:36.8666327Z                     #![attr]
2020-02-01T21:11:36.8666387Z                             #[attr]
2020-02-01T21:11:36.8666387Z                             #[attr]
2020-02-01T21:11:36.8666434Z                             _ => false,
2020-02-01T21:11:36.8666476Z                 };
2020-02-01T21:11:36.8666527Z     let _ = #[attr] || #[attr] foo;
2020-02-01T21:11:36.8666590Z     let _ = #[attr] move || #[attr] foo;
2020-02-01T21:11:36.8666674Z         #[attr] ||
2020-02-01T21:11:36.8666732Z                     #[attr] {
2020-02-01T21:11:36.8666959Z                                 #![attr]
2020-02-01T21:11:36.8667036Z                                 foo
---
2020-02-01T21:11:36.8669499Z                     #![attr]
2020-02-01T21:11:36.8670219Z                     let _ = ();
2020-02-01T21:11:36.8670290Z                     foo
2020-02-01T21:11:36.8670330Z                 };
2020-02-01T21:11:36.8670411Z     let _ = #[attr] x = y;
2020-02-01T21:11:36.8670474Z     let _ = #[attr] (x = y);
2020-02-01T21:11:36.8670534Z     let _ = #[attr] x += y;
2020-02-01T21:11:36.8670650Z     let _ = #[attr] (x += y);
2020-02-01T21:11:36.8670712Z     let _ = #[attr] foo.bar;
2020-02-01T21:11:36.8670780Z     let _ = (#[attr] foo).bar;
2020-02-01T21:11:36.8670837Z     let _ = #[attr] foo.0;
2020-02-01T21:11:36.8670878Z     let _ = (#[attr] foo).0;
2020-02-01T21:11:36.8670918Z     let _ = #[attr] foo[bar];
2020-02-01T21:11:36.8671091Z     let _ = (#[attr] foo)[bar];
2020-02-01T21:11:36.8671179Z     let _ = #[attr] 0..#[attr] 0;
2020-02-01T21:11:36.8671222Z     let _ = #[attr] 0..;
2020-02-01T21:11:36.8671277Z     let _ = #[attr] (0..0);
2020-02-01T21:11:36.8671318Z     let _ = #[attr] (0..);
2020-02-01T21:11:36.8671579Z     let _ = #[attr] (..0);
2020-02-01T21:11:36.8671676Z     let _ = #[attr] (..);
2020-02-01T21:11:36.8671781Z     let _ = #[attr] foo::bar::baz;
2020-02-01T21:11:36.8671825Z     let _ = #[attr] &0;
2020-02-01T21:11:36.8671880Z     let _ = #[attr] &mut 0;
2020-02-01T21:11:36.8671923Z     let _ = #[attr] &#[attr] 0;
2020-02-01T21:11:36.8671966Z     let _ = #[attr] &mut #[attr] 0;
2020-02-01T21:11:36.8672026Z     let _ = #[attr] break ;
2020-02-01T21:11:36.8672068Z     let _ = #[attr] continue ;
2020-02-01T21:11:36.8672110Z     let _ = #[attr] return;
2020-02-01T21:11:36.8672151Z     let _ = #[attr] foo!();
2020-02-01T21:11:36.8672213Z     let _ = #[attr] foo!(# ! [attr]);
2020-02-01T21:11:36.8672255Z     let _ = #[attr] foo![];
2020-02-01T21:11:36.8672305Z     let _ = #[attr] foo![# ! [attr]];
2020-02-01T21:11:36.8672362Z     let _ = #[attr] foo! { };
2020-02-01T21:11:36.8672525Z     let _ = #[attr] foo! { # ! [attr] };
2020-02-01T21:11:36.8672604Z     let _ = #[attr] Foo{#![attr] bar: baz,};
2020-02-01T21:11:36.8672676Z     let _ = #[attr] Foo{#![attr] ..foo};
2020-02-01T21:11:36.8672721Z     let _ = #[attr] Foo{#![attr] bar: baz, ..foo};
2020-02-01T21:11:36.8672768Z     let _ = #[attr] (#![attr] 0);
2020-02-01T21:11:36.8672998Z     {
2020-02-01T21:11:36.8673039Z         #[attr]
2020-02-01T21:11:36.8673081Z         let _ = 0;
2020-02-01T21:11:36.8673226Z 
---
2020-02-01T21:11:36.8676623Z 
2020-02-01T21:11:36.8676979Z ------------------------------------------
2020-02-01T21:11:36.8677026Z actual:
2020-02-01T21:11:36.8677436Z ------------------------------------------
2020-02-01T21:11:36.8677817Z // pp-exact
2020-02-01T21:11:36.8678082Z fn main() { }
2020-02-01T21:11:36.8678128Z 
2020-02-01T21:11:36.8678203Z #[cfg(FALSE)]
2020-02-01T21:11:36.8678203Z #[cfg(FALSE)]
2020-02-01T21:11:36.8678261Z fn syntax() {
2020-02-01T21:11:36.8678302Z     let _ = #[attr] box 0;
2020-02-01T21:11:36.8678385Z     let _ = #[attr] [#![attr] ];
2020-02-01T21:11:36.8678428Z     let _ = #[attr] [#![attr] 0];
2020-02-01T21:11:36.8678495Z     let _ = #[attr] [#![attr] 0; 0];
2020-02-01T21:11:36.8678563Z     let _ = #[attr] [#![attr] 0, 0, 0];
2020-02-01T21:11:36.8678605Z     let _ = #[attr] foo();
2020-02-01T21:11:36.8678764Z     let _ = #[attr] x.foo();
2020-02-01T21:11:36.8678849Z     let _ = #[attr] (#![attr] );
2020-02-01T21:11:36.8678902Z     let _ = #[attr] (#![attr] #[attr] 0,);
2020-02-01T21:11:36.8678975Z     let _ = #[attr] (#![attr] #[attr] 0, 0);
2020-02-01T21:11:36.8679038Z     let _ = #[attr] 0 + #[attr] 0;
2020-02-01T21:11:36.8679217Z     let _ = #[attr] 0 / #[attr] 0;
2020-02-01T21:11:36.8679288Z     let _ = #[attr] 0 & #[attr] 0;
2020-02-01T21:11:36.8679344Z     let _ = #[attr] 0 % #[attr] 0;
2020-02-01T21:11:36.8679410Z     let _ = #[attr] (0 + 0);
2020-02-01T21:11:36.8679452Z     let _ = #[attr] !0;
2020-02-01T21:11:36.8679766Z     let _ = #[attr] -0;
2020-02-01T21:11:36.8679811Z     let _ = #[attr] false;
2020-02-01T21:11:36.8679851Z     let _ = #[attr] 0;
2020-02-01T21:11:36.8680237Z     let _ = #[attr] 'c';
2020-02-01T21:11:36.8680416Z     let _ = #[attr] x as Y;
2020-02-01T21:11:36.8680498Z     let _ = #[attr] (x as Y);
2020-02-01T21:11:36.8680822Z         #[attr] while true {
2020-02-01T21:11:36.8680891Z                     #![attr]
2020-02-01T21:11:36.8680948Z                 };
2020-02-01T21:11:36.8681025Z     let _ =
2020-02-01T21:11:36.8681025Z     let _ =
2020-02-01T21:11:36.8681070Z         #[attr] while let Some(false) = true {
2020-02-01T21:11:36.8681159Z                     #![attr]
2020-02-01T21:11:36.8681203Z                 };
2020-02-01T21:11:36.8681242Z     let _ =
2020-02-01T21:11:36.8681455Z         #[attr] for x in y {
2020-02-01T21:11:36.8681526Z                     #![attr]
2020-02-01T21:11:36.8681642Z     let _ =
2020-02-01T21:11:36.8681642Z     let _ =
2020-02-01T21:11:36.8681709Z         #[attr] loop  {
2020-02-01T21:11:36.8681771Z                     #![attr]
2020-02-01T21:11:36.8681890Z     let _ =
2020-02-01T21:11:36.8681950Z         #[attr] match true {
2020-02-01T21:11:36.8682131Z                     #![attr]
2020-02-01T21:11:36.8682186Z                             #[attr]
2020-02-01T21:11:36.8682186Z                             #[attr]
2020-02-01T21:11:36.8682356Z                             _ => false,
2020-02-01T21:11:36.8682441Z                 };
2020-02-01T21:11:36.8682508Z     let _ = #[attr] || #[attr] foo;
2020-02-01T21:11:36.8682584Z     let _ = #[attr] move || #[attr] foo;
2020-02-01T21:11:36.8682705Z         #[attr] ||
2020-02-01T21:11:36.8682747Z                     #[attr] {
2020-02-01T21:11:36.8682808Z                                 #![attr]
2020-02-01T21:11:36.8682968Z                                 foo
---
2020-02-01T21:11:36.8685389Z                     #![attr]
2020-02-01T21:11:36.8685457Z                     let _ = ();
2020-02-01T21:11:36.8685520Z                     foo
2020-02-01T21:11:36.8685589Z                 };
2020-02-01T21:11:36.8685629Z     let _ = #[attr] x = y;
2020-02-01T21:11:36.8685670Z     let _ = #[attr] (x = y);
2020-02-01T21:11:36.8685830Z     let _ = #[attr] x += y;
2020-02-01T21:11:36.8685898Z     let _ = #[attr] (x += y);
2020-02-01T21:11:36.8685939Z     let _ = #[attr] foo.bar;
2020-02-01T21:11:36.8686023Z     let _ = (#[attr] foo).bar;
2020-02-01T21:11:36.8686065Z     let _ = #[attr] foo.0;
2020-02-01T21:11:36.8686106Z     let _ = (#[attr] foo).0;
2020-02-01T21:11:36.8686265Z     let _ = #[attr] foo[bar];
2020-02-01T21:11:36.8686334Z     let _ = (#[attr] foo)[bar];
2020-02-01T21:11:36.8686378Z     let _ = #[attr] 0..#[attr] 0;
2020-02-01T21:11:36.8686442Z     let _ = #[attr] 0..;
2020-02-01T21:11:36.8686590Z     let _ = #[attr] (0..0);
2020-02-01T21:11:36.8686655Z     let _ = #[attr] (0..);
2020-02-01T21:11:36.8686711Z     let _ = #[attr] (..0);
2020-02-01T21:11:36.8686780Z     let _ = #[attr] (..);
2020-02-01T21:11:36.8686831Z     let _ = #[attr] foo::bar::baz;
2020-02-01T21:11:36.8686999Z     let _ = #[attr] &0;
2020-02-01T21:11:36.8687066Z     let _ = #[attr] &mut 0;
2020-02-01T21:11:36.8687107Z     let _ = #[attr] &#[attr] 0;
2020-02-01T21:11:36.8687164Z     let _ = #[attr] &mut #[attr] 0;
2020-02-01T21:11:36.8687309Z     let _ = #[attr] break ;
2020-02-01T21:11:36.8687382Z     let _ = #[attr] continue ;
2020-02-01T21:11:36.8687442Z     let _ = #[attr] return;
2020-02-01T21:11:36.8687481Z     let _ = #[attr] foo!();
2020-02-01T21:11:36.8687522Z     let _ = #[attr] foo!(# ! [attr]);
2020-02-01T21:11:36.8687686Z     let _ = #[attr] foo![];
2020-02-01T21:11:36.8687760Z     let _ = #[attr] foo![# ! [attr]];
2020-02-01T21:11:36.8687884Z     let _ = #[attr] foo! { };
2020-02-01T21:11:36.8687953Z     let _ = #[attr] foo! { # ! [attr] };
2020-02-01T21:11:36.8687997Z     let _ = #[attr] Foo {#![attr]  bar: baz,};
2020-02-01T21:11:36.8688168Z     let _ = #[attr] Foo {#![attr]  ..foo};
2020-02-01T21:11:36.8688278Z     let _ = #[attr] Foo {#![attr]  bar: baz , ..foo};
2020-02-01T21:11:36.8688323Z     let _ = #[attr] (#![attr] 0);
2020-02-01T21:11:36.8688389Z     {
2020-02-01T21:11:36.8688441Z         #[attr]
2020-02-01T21:11:36.8688481Z         let _ = 0;
2020-02-01T21:11:36.8688507Z 
---
2020-02-01T21:11:36.8691813Z 
2020-02-01T21:11:36.8692127Z ------------------------------------------
2020-02-01T21:11:36.8692292Z 
2020-02-01T21:11:36.8692347Z 
2020-02-01T21:11:36.8765049Z [ERROR compiletest::runtest] fatal error, panic: "pretty-printed source does not match expected source\nexpected:\n------------------------------------------\n// pp-exact\n\nfn main() { }\n\n#[cfg(FALSE)]\nfn syntax() {\n    let _ = #[attr] box 0;\n    let _ = #[attr] [#![attr] ];\n    let _ = #[attr] [#![attr] 0];\n    let _ = #[attr] [#![attr] 0; 0];\n    let _ = #[attr] [#![attr] 0, 0, 0];\n    let _ = #[attr] foo();\n    let _ = #[attr] x.foo();\n    let _ = #[attr] (#![attr] );\n    let _ = #[attr] (#![attr] #[attr] 0,);\n    let _ = #[attr] (#![attr] #[attr] 0, 0);\n    let _ = #[attr] 0 + #[attr] 0;\n    let _ = #[attr] 0 / #[attr] 0;\n    let _ = #[attr] 0 & #[attr] 0;\n    let _ = #[attr] 0 % #[attr] 0;\n    let _ = #[attr] (0 + 0);\n    let _ = #[attr] !0;\n    let _ = #[attr] -0;\n    let _ = #[attr] false;\n    let _ = #[attr] 0;\n    let _ = #[attr] \'c\';\n    let _ = #[attr] x as Y;\n    let _ = #[attr] (x as Y);\n    let _ =\n        #[attr] while true {\n                    #![attr]\n                };\n    let _ =\n        #[attr] while let Some(false) = true {\n                    #![attr]\n                };\n    let _ =\n        #[attr] for x in y {\n                    #![attr]\n                };\n    let _ =\n        #[attr] loop  {\n                    #![attr]\n                };\n    let _ =\n        #[attr] match true {\n                    #![attr]\n                            #[attr]\n                            _ => false,\n                };\n    let _ = #[attr] || #[attr] foo;\n    let _ = #[attr] move || #[attr] foo;\n    let _ =\n        #[attr] ||\n                    #[attr] {\n                                #![attr]\n                                foo\n                            };\n    let _ =\n        #[attr] move ||\n                    #[attr] {\n                                #![attr]\n                                foo\n                            };\n    let _ =\n        #[attr] ||\n                    {\n                        #![attr]\n                        foo\n                    };\n    let _ =\n        #[attr] move ||\n                    {\n                        #![attr]\n                        foo\n                    };\n    let _ =\n        #[attr] {\n                    #![attr]\n                };\n    let _ =\n        #[attr] {\n                    #![attr]\n                    let _ = ();\n                };\n    let _ =\n        #[attr] {\n                    #![attr]\n                    let _ = ();\n                    foo\n                };\n    let _ = #[attr] x = y;\n    let _ = #[attr] (x = y);\n    let _ = #[attr] x += y;\n    let _ = #[attr] (x += y);\n    let _ = #[attr] foo.bar;\n    let _ = (#[attr] foo).bar;\n    let _ = #[attr] foo.0;\n    let _ = (#[attr] foo).0;\n    let _ = #[attr] foo[bar];\n    let _ = (#[attr] foo)[bar];\n    let _ = #[attr] 0..#[attr] 0;\n    let _ = #[attr] 0..;\n    let _ = #[attr] (0..0);\n    let _ = #[attr] (0..);\n    let _ = #[attr] (..0);\n    let _ = #[attr] (..);\n    let _ = #[attr] foo::bar::baz;\n    let _ = #[attr] &0;\n    let _ = #[attr] &mut 0;\n    let _ = #[attr] &#[attr] 0;\n    let _ = #[attr] &mut #[attr] 0;\n    let _ = #[attr] break ;\n    let _ = #[attr] continue ;\n    let _ = #[attr] return;\n    let _ = #[attr] foo!();\n    let _ = #[attr] foo!(# ! [attr]);\n    let _ = #[attr] foo![];\n    let _ = #[attr] foo![# ! [attr]];\n    let _ = #[attr] foo! { };\n    let _ = #[attr] foo! { # ! [attr] };\n    let _ = #[attr] Foo{#![attr] bar: baz,};\n    let _ = #[attr] Foo{#![attr] ..foo};\n    let _ = #[attr] Foo{#![attr] bar: baz, ..foo};\n    let _ = #[attr] (#![attr] 0);\n\n    {\n        #[attr]\n        let _ = 0;\n\n        #[attr]\n        0;\n\n        #[attr]\n        foo!();\n\n        #[attr]\n        foo! { }\n\n        #[attr]\n        foo![];\n    }\n\n    {\n        #[attr]\n        let _ = 0;\n    }\n    {\n\n        #[attr]\n        0\n    }\n    {\n\n        #[attr]\n        {\n            #![attr]\n        }\n    }\n    {\n\n        #[attr]\n        foo!()\n    }\n    {\n\n        #[attr]\n        foo![]\n    }\n    {\n\n        #[attr]\n        foo! { }\n    }\n}\n\n------------------------------------------\nactual:\n------------------------------------------\n// pp-exact\n\nfn main() { }\n\n#[cfg(FALSE)]\nfn syntax() {\n    let _ = #[attr] box 0;\n    let _ = #[attr] [#![attr] ];\n    let _ = #[attr] [#![attr] 0];\n    let _ = #[attr] [#![attr] 0; 0];\n    let _ = #[attr] [#![attr] 0, 0, 0];\n    let _ = #[attr] foo();\n    let _ = #[attr] x.foo();\n    let _ = #[attr] (#![attr] );\n    let _ = #[attr] (#![attr] #[attr] 0,);\n    let _ = #[attr] (#![attr] #[attr] 0, 0);\n    let _ = #[attr] 0 + #[attr] 0;\n    let _ = #[attr] 0 / #[attr] 0;\n    let _ = #[attr] 0 & #[attr] 0;\n    let _ = #[attr] 0 % #[attr] 0;\n    let _ = #[attr] (0 + 0);\n    let _ = #[attr] !0;\n    let _ = #[attr] -0;\n    let _ = #[attr] false;\n    let _ = #[attr] 0;\n    let _ = #[attr] \'c\';\n    let _ = #[attr] x as Y;\n    let _ = #[attr] (x as Y);\n    let _ =\n        #[attr] while true {\n                    #![attr]\n                };\n    let _ =\n        #[attr] while let Some(false) = true {\n                    #![attr]\n                };\n    let _ =\n        #[attr] for x in y {\n                    #![attr]\n                };\n    let _ =\n        #[attr] loop  {\n                    #![attr]\n                };\n    let _ =\n        #[attr] match true {\n                    #![attr]\n                            #[attr]\n                            _ => false,\n                };\n    let _ = #[attr] || #[attr] foo;\n    let _ = #[attr] move || #[attr] foo;\n    let _ =\n        #[attr] ||\n                    #[attr] {\n                                #![attr]\n                                foo\n                            };\n    let _ =\n        #[attr] move ||\n                    #[attr] {\n                                #![attr]\n                                foo\n                            };\n    let _ =\n        #[attr] ||\n                    {\n                        #![attr]\n                        foo\n                    };\n    let _ =\n        #[attr] move ||\n                    {\n                        #![attr]\n                        foo\n                    };\n    let _ =\n        #[attr] {\n                    #![attr]\n                };\n    let _ =\n        #[attr] {\n                    #![attr]\n                    let _ = ();\n                };\n    let _ =\n        #[attr] {\n                    #![attr]\n                    let _ = ();\n                    foo\n                };\n    let _ = #[attr] x = y;\n    let _ = #[attr] (x = y);\n    let _ = #[attr] x += y;\n    let _ = #[attr] (x += y);\n    let _ = #[attr] foo.bar;\n    let _ = (#[attr] foo).bar;\n    let _ = #[attr] foo.0;\n    let _ = (#[attr] foo).0;\n    let _ = #[attr] foo[bar];\n    let _ = (#[attr] foo)[bar];\n    let _ = #[attr] 0..#[attr] 0;\n    let _ = #[attr] 0..;\n    let _ = #[attr] (0..0);\n    let _ = #[attr] (0..);\n    let _ = #[attr] (..0);\n    let _ = #[attr] (..);\n    let _ = #[attr] foo::bar::baz;\n    let _ = #[attr] &0;\n    let _ = #[attr] &mut 0;\n    let _ = #[attr] &#[attr] 0;\n    let _ = #[attr] &mut #[attr] 0;\n    let _ = #[attr] break ;\n    let _ = #[attr] continue ;\n    let _ = #[attr] return;\n    let _ = #[attr] foo!();\n    let _ = #[attr] foo!(# ! [attr]);\n    let _ = #[attr] foo![];\n    let _ = #[attr] foo![# ! [attr]];\n    let _ = #[attr] foo! { };\n    let _ = #[attr] foo! { # ! [attr] };\n    let _ = #[attr] Foo {#![attr]  bar: baz,};\n    let _ = #[attr] Foo {#![attr]  ..foo};\n    let _ = #[attr] Foo {#![attr]  bar: baz , ..foo};\n    let _ = #[attr] (#![attr] 0);\n\n    {\n        #[attr]\n        let _ = 0;\n\n        #[attr]\n        0;\n\n        #[attr]\n        foo!();\n\n        #[attr]\n        foo! { }\n\n        #[attr]\n        foo![];\n    }\n\n    {\n        #[attr]\n        let _ = 0;\n    }\n    {\n\n        #[attr]\n        0\n    }\n    {\n\n        #[attr]\n        {\n            #![attr]\n        }\n    }\n    {\n\n        #[attr]\n        foo!()\n    }\n    {\n\n        #[attr]\n        foo![]\n    }\n    {\n\n        #[attr]\n        foo! { }\n    }\n}\n\n------------------------------------------\n\n"
2020-02-01T21:11:36.8769031Z thread '[pretty] pretty/ast-stmt-expr-attr.rs' panicked at 'fatal error', src/tools/compiletest/src/runtest.rs:2124:9
2020-02-01T21:11:36.8774925Z 
2020-02-01T21:11:36.8775554Z ---- [pretty] pretty/stmt_expr_attributes.rs stdout ----
2020-02-01T21:11:36.8775628Z 
2020-02-01T21:11:36.8776224Z error: pretty-printed source does not match expected source
2020-02-01T21:11:36.8776224Z error: pretty-printed source does not match expected source
2020-02-01T21:11:36.8776278Z expected:
2020-02-01T21:11:36.8781307Z ------------------------------------------
2020-02-01T21:11:36.8781547Z // pp-exact
2020-02-01T21:11:36.8781851Z #![feature(box_syntax)]
2020-02-01T21:11:36.8781913Z #![feature(rustc_attrs)]
2020-02-01T21:11:36.8781958Z #![feature(stmt_expr_attributes)]
2020-02-01T21:11:36.8781987Z 
2020-02-01T21:11:36.8781987Z 
2020-02-01T21:11:36.8782027Z fn main() { }
2020-02-01T21:11:36.8782074Z 
2020-02-01T21:11:36.8782113Z fn _0() {
2020-02-01T21:11:36.8782179Z     #[rustc_dummy]
2020-02-01T21:11:36.8782236Z     foo();
2020-02-01T21:11:36.8782276Z }
2020-02-01T21:11:36.8782302Z 
2020-02-01T21:11:36.8782302Z 
2020-02-01T21:11:36.8782341Z fn _1() {
2020-02-01T21:11:36.8782421Z     #[rustc_dummy]
2020-02-01T21:11:36.8782462Z     unsafe {
2020-02-01T21:11:36.8782503Z         // code
2020-02-01T21:11:36.8782560Z     }
2020-02-01T21:11:36.8782560Z     }
2020-02-01T21:11:36.8782731Z }
2020-02-01T21:11:36.8782766Z 
2020-02-01T21:11:36.8782929Z fn _2() {
2020-02-01T21:11:36.8783008Z     #[rustc_dummy]
2020-02-01T21:11:36.8783047Z     { foo(); }
2020-02-01T21:11:36.8783073Z 
2020-02-01T21:11:36.8783134Z     {
2020-02-01T21:11:36.8783134Z     {
2020-02-01T21:11:36.8783372Z         #![rustc_dummy]
2020-02-01T21:11:36.8783439Z         foo()
2020-02-01T21:11:36.8783492Z     }
2020-02-01T21:11:36.8783529Z }
2020-02-01T21:11:36.8783553Z 
2020-02-01T21:11:36.8783553Z 
2020-02-01T21:11:36.8783591Z fn _3() {
2020-02-01T21:11:36.8783669Z     #[rustc_dummy]
2020-02-01T21:11:36.8783669Z     #[rustc_dummy]
2020-02-01T21:11:36.8783710Z     match () { _ => { } }
2020-02-01T21:11:36.8783790Z 
2020-02-01T21:11:36.8783790Z 
2020-02-01T21:11:36.8783827Z fn _4() {
2020-02-01T21:11:36.8783889Z     #[rustc_dummy]
2020-02-01T21:11:36.8783945Z     match () {
2020-02-01T21:11:36.8783945Z     match () {
2020-02-01T21:11:36.8783985Z         #![rustc_dummy]
2020-02-01T21:11:36.8784080Z     }
2020-02-01T21:11:36.8784112Z 
2020-02-01T21:11:36.8784269Z     let _ =
2020-02-01T21:11:36.8784269Z     let _ =
2020-02-01T21:11:36.8784313Z         #[rustc_dummy] match () {
2020-02-01T21:11:36.8784375Z                            #![rustc_dummy]
2020-02-01T21:11:36.8784552Z                        };
2020-02-01T21:11:36.8784605Z }
2020-02-01T21:11:36.8784631Z 
2020-02-01T21:11:36.8784631Z 
2020-02-01T21:11:36.8784670Z fn _5() {
2020-02-01T21:11:36.8784734Z     #[rustc_dummy]
2020-02-01T21:11:36.8784791Z     let x = 1;
2020-02-01T21:11:36.8784818Z 
2020-02-01T21:11:36.8784818Z 
2020-02-01T21:11:36.8784859Z     let x = #[rustc_dummy] 1;
2020-02-01T21:11:36.8784943Z     let y = ();
2020-02-01T21:11:36.8784983Z     let z = ();
2020-02-01T21:11:36.8785009Z 
2020-02-01T21:11:36.8785009Z 
2020-02-01T21:11:36.8785050Z     foo3(x, #[rustc_dummy] y, z);
2020-02-01T21:11:36.8785095Z 
2020-02-01T21:11:36.8785135Z     qux(3 + #[rustc_dummy] 2);
2020-02-01T21:11:36.8785200Z 
2020-02-01T21:11:36.8785200Z 
2020-02-01T21:11:36.8785262Z fn _6() {
2020-02-01T21:11:36.8785326Z     #[rustc_dummy]
2020-02-01T21:11:36.8785326Z     #[rustc_dummy]
2020-02-01T21:11:36.8785368Z     [#![rustc_dummy] 1, 2, 3];
2020-02-01T21:11:36.8785412Z 
2020-02-01T21:11:36.8785457Z     let _ = #[rustc_dummy] [#![rustc_dummy] 1, 2, 3];
2020-02-01T21:11:36.8785534Z     #[rustc_dummy]
2020-02-01T21:11:36.8785534Z     #[rustc_dummy]
2020-02-01T21:11:36.8785590Z     [#![rustc_dummy] 1; 4];
2020-02-01T21:11:36.8785618Z 
2020-02-01T21:11:36.8785661Z     let _ = #[rustc_dummy] [#![rustc_dummy] 1; 4];
2020-02-01T21:11:36.8785742Z 
2020-02-01T21:11:36.8785781Z struct Foo {
2020-02-01T21:11:36.8785822Z     data: (),
2020-02-01T21:11:36.8785860Z }
2020-02-01T21:11:36.8785860Z }
2020-02-01T21:11:36.8785903Z 
2020-02-01T21:11:36.8785942Z struct Bar(());
2020-02-01T21:11:36.8785969Z 
2020-02-01T21:11:36.8786007Z fn _7() {
2020-02-01T21:11:36.8786087Z     #[rustc_dummy]
2020-02-01T21:11:36.8786087Z     #[rustc_dummy]
2020-02-01T21:11:36.8786130Z     Foo{#![rustc_dummy] data: (),};
2020-02-01T21:11:36.8786159Z 
2020-02-01T21:11:36.8786224Z     let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};
2020-02-01T21:11:36.8786291Z 
2020-02-01T21:11:36.8786291Z 
2020-02-01T21:11:36.8786329Z fn _8() {
2020-02-01T21:11:36.8786408Z     #[rustc_dummy]
2020-02-01T21:11:36.8786408Z     #[rustc_dummy]
2020-02-01T21:11:36.8786458Z     (#![rustc_dummy] );
2020-02-01T21:11:36.8786536Z     #[rustc_dummy]
2020-02-01T21:11:36.8786536Z     #[rustc_dummy]
2020-02-01T21:11:36.8786578Z     (#![rustc_dummy] 0);
2020-02-01T21:11:36.8786644Z     #[rustc_dummy]
2020-02-01T21:11:36.8786644Z     #[rustc_dummy]
2020-02-01T21:11:36.8786701Z     (#![rustc_dummy] 0,);
2020-02-01T21:11:36.8786767Z     #[rustc_dummy]
2020-02-01T21:11:36.8786767Z     #[rustc_dummy]
2020-02-01T21:11:36.8786808Z     (#![rustc_dummy] 0, 1);
2020-02-01T21:11:36.8786889Z 
2020-02-01T21:11:36.8786889Z 
2020-02-01T21:11:36.8786927Z fn _9() {
2020-02-01T21:11:36.8786972Z     macro_rules! stmt_mac { () => { let _ = () ; } }
2020-02-01T21:11:36.8787056Z     #[rustc_dummy]
2020-02-01T21:11:36.8787096Z     stmt_mac!();
2020-02-01T21:11:36.8787181Z 
2020-02-01T21:11:36.8787247Z     #[rustc_dummy]
2020-02-01T21:11:36.8787247Z     #[rustc_dummy]
2020-02-01T21:11:36.8787288Z     stmt_mac! { };
2020-02-01T21:11:36.8787354Z     #[rustc_dummy]
2020-02-01T21:11:36.8787411Z     stmt_mac![];
2020-02-01T21:11:36.8787438Z 
2020-02-01T21:11:36.8787485Z     #[rustc_dummy]
2020-02-01T21:11:36.8787485Z     #[rustc_dummy]
2020-02-01T21:11:36.8787541Z     stmt_mac! { }
2020-02-01T21:11:36.8787606Z     let _ = ();
2020-02-01T21:11:36.8787644Z }
2020-02-01T21:11:36.8787670Z 
2020-02-01T21:11:36.8787670Z 
2020-02-01T21:11:36.8787727Z macro_rules! expr_mac { () => { () } }
2020-02-01T21:11:36.8787756Z 
2020-02-01T21:11:36.8787794Z fn _10() {
2020-02-01T21:11:36.8787853Z     let _ = #[rustc_dummy] expr_mac!();
2020-02-01T21:11:36.8787898Z     let _ = #[rustc_dummy] expr_mac![];
2020-02-01T21:11:36.8787942Z     let _ = #[rustc_dummy] expr_mac! { };
2020-02-01T21:11:36.8788025Z 
2020-02-01T21:11:36.8788025Z 
2020-02-01T21:11:36.8788064Z fn _11() {
2020-02-01T21:11:36.8788106Z     let _ = #[rustc_dummy] box 0;
2020-02-01T21:11:36.8788177Z     let _: [(); 0] = #[rustc_dummy] [#![rustc_dummy] ];
2020-02-01T21:11:36.8788225Z     let _ = #[rustc_dummy] [#![rustc_dummy] 0, 0];
2020-02-01T21:11:36.8788273Z     let _ = #[rustc_dummy] [#![rustc_dummy] 0; 0];
2020-02-01T21:11:36.8788319Z     let _ = #[rustc_dummy] foo();
2020-02-01T21:11:36.8788441Z     let _ = #[rustc_dummy] 1i32.clone();
2020-02-01T21:11:36.8788488Z     let _ = #[rustc_dummy] (#![rustc_dummy] );
2020-02-01T21:11:36.8788535Z     let _ = #[rustc_dummy] (#![rustc_dummy] 0);
2020-02-01T21:11:36.8788598Z     let _ = #[rustc_dummy] (#![rustc_dummy] 0,);
2020-02-01T21:11:36.8788770Z     let _ = #[rustc_dummy] (#![rustc_dummy] 0, 0);
2020-02-01T21:11:36.8788816Z     let _ = #[rustc_dummy] 0 + #[rustc_dummy] 0;
2020-02-01T21:11:36.8788983Z     let _ = #[rustc_dummy] !0;
2020-02-01T21:11:36.8789320Z     let _ = #[rustc_dummy] -0i32;
2020-02-01T21:11:36.8789367Z     let _ = #[rustc_dummy] false;
2020-02-01T21:11:36.8789596Z     let _ = #[rustc_dummy] 'c';
2020-02-01T21:11:36.8789851Z     let _ = #[rustc_dummy] 0;
2020-02-01T21:11:36.8789980Z     let _ = #[rustc_dummy] 0 as usize;
2020-02-01T21:11:36.8790021Z     let _ =
2020-02-01T21:11:36.8790078Z         #[rustc_dummy] while false {
2020-02-01T21:11:36.8790121Z                            #![rustc_dummy]
2020-02-01T21:11:36.8790224Z     let _ =
2020-02-01T21:11:36.8790224Z     let _ =
2020-02-01T21:11:36.8790266Z         #[rustc_dummy] while let None = Some(()) {
2020-02-01T21:11:36.8790310Z                            #![rustc_dummy]
2020-02-01T21:11:36.8790405Z     let _ =
2020-02-01T21:11:36.8790405Z     let _ =
2020-02-01T21:11:36.8790445Z         #[rustc_dummy] for _ in 0..0 {
2020-02-01T21:11:36.8790489Z                            #![rustc_dummy]
2020-02-01T21:11:36.8790548Z                        };
2020-02-01T21:11:36.8790591Z     // FIXME: pp bug, two spaces after the loop
2020-02-01T21:11:36.8790631Z     let _ =
2020-02-01T21:11:36.8790686Z         #[rustc_dummy] loop  {
2020-02-01T21:11:36.8790735Z                            #![rustc_dummy]
2020-02-01T21:11:36.8790830Z     let _ =
2020-02-01T21:11:36.8790830Z     let _ =
2020-02-01T21:11:36.8790872Z         #[rustc_dummy] match false {
2020-02-01T21:11:36.8790915Z                            #![rustc_dummy]
2020-02-01T21:11:36.8791020Z                        };
2020-02-01T21:11:36.8791020Z                        };
2020-02-01T21:11:36.8791062Z     let _ = #[rustc_dummy] || #[rustc_dummy] ();
2020-02-01T21:11:36.8791108Z     let _ = #[rustc_dummy] move || #[rustc_dummy] ();
2020-02-01T21:11:36.8791162Z     let _ =
2020-02-01T21:11:36.8791202Z         #[rustc_dummy] ||
2020-02-01T21:11:36.8791242Z                            {
2020-02-01T21:11:36.8791298Z                                #![rustc_dummy]
2020-02-01T21:11:36.8791342Z                                #[rustc_dummy]
2020-02-01T21:11:36.8791550Z                            };
2020-02-01T21:11:36.8791595Z     let _ =
2020-02-01T21:11:36.8791595Z     let _ =
2020-02-01T21:11:36.8791741Z         #[rustc_dummy] move ||
2020-02-01T21:11:36.8791794Z                            {
2020-02-01T21:11:36.8791854Z                                #![rustc_dummy]
2020-02-01T21:11:36.8791902Z                                #[rustc_dummy]
2020-02-01T21:11:36.8792016Z                            };
2020-02-01T21:11:36.8792057Z     let _ =
2020-02-01T21:11:36.8792057Z     let _ =
2020-02-01T21:11:36.8792099Z         #[rustc_dummy] {
2020-02-01T21:11:36.8792160Z                            #![rustc_dummy]
2020-02-01T21:11:36.8792245Z     let _ =
2020-02-01T21:11:36.8792245Z     let _ =
2020-02-01T21:11:36.8792286Z         #[rustc_dummy] {
2020-02-01T21:11:36.8792347Z                            #![rustc_dummy]
2020-02-01T21:11:36.8792436Z                        };
2020-02-01T21:11:36.8792492Z     let _ =
2020-02-01T21:11:36.8792492Z     let _ =
2020-02-01T21:11:36.8792532Z         #[rustc_dummy] {
2020-02-01T21:11:36.8792583Z                            #![rustc_dummy]
2020-02-01T21:11:36.8792687Z                            ()
2020-02-01T21:11:36.8792729Z                        };
2020-02-01T21:11:36.8792771Z     let mut x = 0;
2020-02-01T21:11:36.8792771Z     let mut x = 0;
2020-02-01T21:11:36.8792895Z     let _ = #[rustc_dummy] x = 15;
2020-02-01T21:11:36.8792940Z     let _ = #[rustc_dummy] x += 15;
2020-02-01T21:11:36.8792984Z     let s = Foo{data: (),};
2020-02-01T21:11:36.8793045Z     let _ = #[rustc_dummy] s.data;
2020-02-01T21:11:36.8793091Z     let _ = (#[rustc_dummy] s).data;
2020-02-01T21:11:36.8793134Z     let t = Bar(());
2020-02-01T21:11:36.8793193Z     let _ = #[rustc_dummy] t.0;
2020-02-01T21:11:36.8793237Z     let _ = (#[rustc_dummy] t).0;
2020-02-01T21:11:36.8793280Z     let v = vec!(0);
2020-02-01T21:11:36.8793324Z     let _ = #[rustc_dummy] v[0];
2020-02-01T21:11:36.8793384Z     let _ = (#[rustc_dummy] v)[0];
2020-02-01T21:11:36.8793431Z     let _ = #[rustc_dummy] 0..#[rustc_dummy] 0;
2020-02-01T21:11:36.8793484Z     let _ = #[rustc_dummy] 0..;
2020-02-01T21:11:36.8793544Z     let _ = #[rustc_dummy] (0..0);
2020-02-01T21:11:36.8793588Z     let _ = #[rustc_dummy] (0..);
2020-02-01T21:11:36.8793632Z     let _ = #[rustc_dummy] (..0);
2020-02-01T21:11:36.8793698Z     let _ = #[rustc_dummy] (..);
2020-02-01T21:11:36.8794043Z     let _: fn(&u32) -> u32 = #[rustc_dummy] std::clone::Clone::clone;
2020-02-01T21:11:36.8794097Z     let _ = #[rustc_dummy] &0;
2020-02-01T21:11:36.8794155Z     let _ = #[rustc_dummy] &mut 0;
2020-02-01T21:11:36.8794202Z     let _ = #[rustc_dummy] &#[rustc_dummy] 0;
2020-02-01T21:11:36.8794249Z     let _ = #[rustc_dummy] &mut #[rustc_dummy] 0;
2020-02-01T21:11:36.8794297Z     // FIXME: pp bug, extra space after keyword?
2020-02-01T21:11:36.8794363Z     while false { let _ = #[rustc_dummy] continue ; }
2020-02-01T21:11:36.8794411Z     while true { let _ = #[rustc_dummy] break ; }
2020-02-01T21:11:36.8794457Z     || #[rustc_dummy] return;
2020-02-01T21:11:36.8794526Z     let _ = #[rustc_dummy] expr_mac!();
2020-02-01T21:11:36.8794571Z     let _ = #[rustc_dummy] expr_mac![];
2020-02-01T21:11:36.8794616Z     let _ = #[rustc_dummy] expr_mac! { };
2020-02-01T21:11:36.8794804Z     let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};
2020-02-01T21:11:36.8794860Z     let _ = #[rustc_dummy] Foo{#![rustc_dummy] ..s};
2020-02-01T21:11:36.8795020Z     let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (), ..s};
2020-02-01T21:11:36.8795079Z     let _ = #[rustc_dummy] (#![rustc_dummy] 0);
2020-02-01T21:11:36.8795144Z 
2020-02-01T21:11:36.8795144Z 
2020-02-01T21:11:36.8795181Z fn _12() {
2020-02-01T21:11:36.8795235Z     #[rustc_dummy]
2020-02-01T21:11:36.8795273Z     let _ = 0;
2020-02-01T21:11:36.8795335Z     #[rustc_dummy]
2020-02-01T21:11:36.8795389Z     0;
2020-02-01T21:11:36.8795414Z 
2020-02-01T21:11:36.8795450Z     #[rustc_dummy]
2020-02-01T21:11:36.8795450Z     #[rustc_dummy]
2020-02-01T21:11:36.8795488Z     expr_mac!();
2020-02-01T21:11:36.8795529Z 
2020-02-01T21:11:36.8795565Z     #[rustc_dummy]
2020-02-01T21:11:36.8795686Z     {
2020-02-01T21:11:36.8795734Z         #![rustc_dummy]
2020-02-01T21:11:36.8797324Z }
2020-02-01T21:11:36.8797373Z 
2020-02-01T21:11:36.8797436Z fn foo() { }
2020-02-01T21:11:36.8797436Z fn foo() { }
2020-02-01T21:11:36.8797477Z fn foo3(_: i32, _: (), _: ()) { }
2020-02-01T21:11:36.8797529Z fn qux(_: i32) { }
2020-02-01T21:11:36.8797928Z ------------------------------------------
2020-02-01T21:11:36.8797975Z actual:
2020-02-01T21:11:36.8798194Z ------------------------------------------
2020-02-01T21:11:36.8798194Z ------------------------------------------
2020-02-01T21:11:36.8798384Z // pp-exact
2020-02-01T21:11:36.8798469Z #![feature(box_syntax)]
2020-02-01T21:11:36.8798508Z #![feature(rustc_attrs)]
2020-02-01T21:11:36.8798565Z #![feature(stmt_expr_attributes)]
2020-02-01T21:11:36.8798592Z 
2020-02-01T21:11:36.8798592Z 
2020-02-01T21:11:36.8798629Z fn main() { }
2020-02-01T21:11:36.8798654Z 
2020-02-01T21:11:36.8798691Z fn _0() {
2020-02-01T21:11:36.8798768Z     #[rustc_dummy]
2020-02-01T21:11:36.8798815Z     foo();
2020-02-01T21:11:36.8798867Z }
2020-02-01T21:11:36.8798891Z 
2020-02-01T21:11:36.8798891Z 
2020-02-01T21:11:36.8798927Z fn _1() {
2020-02-01T21:11:36.8798988Z     #[rustc_dummy]
2020-02-01T21:11:36.8799042Z     unsafe {
2020-02-01T21:11:36.8799203Z         // code
2020-02-01T21:11:36.8799240Z     }
2020-02-01T21:11:36.8799240Z     }
2020-02-01T21:11:36.8799291Z }
2020-02-01T21:11:36.8799315Z 
2020-02-01T21:11:36.8799352Z fn _2() {
2020-02-01T21:11:36.8799429Z     #[rustc_dummy]
2020-02-01T21:11:36.8799468Z     { foo(); }
2020-02-01T21:11:36.8799493Z 
2020-02-01T21:11:36.8799529Z     {
2020-02-01T21:11:36.8799529Z     {
2020-02-01T21:11:36.8799584Z         #![rustc_dummy]
2020-02-01T21:11:36.8799647Z         foo()
2020-02-01T21:11:36.8799683Z     }
2020-02-01T21:11:36.8799734Z }
2020-02-01T21:11:36.8799758Z 
2020-02-01T21:11:36.8799758Z 
2020-02-01T21:11:36.8799794Z fn _3() {
2020-02-01T21:11:36.8799870Z     #[rustc_dummy]
2020-02-01T21:11:36.8799870Z     #[rustc_dummy]
2020-02-01T21:11:36.8799910Z     match () { _ => { } }
2020-02-01T21:11:36.8799979Z 
2020-02-01T21:11:36.8799979Z 
2020-02-01T21:11:36.8800030Z fn _4() {
2020-02-01T21:11:36.8800091Z     #[rustc_dummy]
2020-02-01T21:11:36.8800129Z     match () {
2020-02-01T21:11:36.8800129Z     match () {
2020-02-01T21:11:36.8800185Z         #![rustc_dummy]
2020-02-01T21:11:36.8800267Z     }
2020-02-01T21:11:36.8800291Z 
2020-02-01T21:11:36.8800343Z     let _ =
2020-02-01T21:11:36.8800343Z     let _ =
2020-02-01T21:11:36.8800384Z         #[rustc_dummy] match () {
2020-02-01T21:11:36.8800427Z                            #![rustc_dummy]
2020-02-01T21:11:36.8800525Z                        };
2020-02-01T21:11:36.8800562Z }
2020-02-01T21:11:36.8800586Z 
2020-02-01T21:11:36.8800586Z 
2020-02-01T21:11:36.8800754Z fn _5() {
2020-02-01T21:11:36.8800819Z     #[rustc_dummy]
2020-02-01T21:11:36.8800858Z     let x = 1;
2020-02-01T21:11:36.8800897Z 
2020-02-01T21:11:36.8800897Z 
2020-02-01T21:11:36.8800937Z     let x = #[rustc_dummy] 1;
2020-02-01T21:11:36.8801009Z     let y = ();
2020-02-01T21:11:36.8801062Z     let z = ();
2020-02-01T21:11:36.8801088Z 
2020-02-01T21:11:36.8801088Z 
2020-02-01T21:11:36.8801128Z     foo3(x, #[rustc_dummy] y, z);
2020-02-01T21:11:36.8801155Z 
2020-02-01T21:11:36.8801208Z     qux(3 + #[rustc_dummy] 2);
2020-02-01T21:11:36.8801280Z 
2020-02-01T21:11:36.8801280Z 
2020-02-01T21:11:36.8801317Z fn _6() {
2020-02-01T21:11:36.8801394Z     #[rustc_dummy]
2020-02-01T21:11:36.8801394Z     #[rustc_dummy]
2020-02-01T21:11:36.8801435Z     [#![rustc_dummy] 1, 2, 3];
2020-02-01T21:11:36.8801462Z 
2020-02-01T21:11:36.8801517Z     let _ = #[rustc_dummy] [#![rustc_dummy] 1, 2, 3];
2020-02-01T21:11:36.8801584Z     #[rustc_dummy]
2020-02-01T21:11:36.8801584Z     #[rustc_dummy]
2020-02-01T21:11:36.8801625Z     [#![rustc_dummy] 1; 4];
2020-02-01T21:11:36.8801652Z 
2020-02-01T21:11:36.8801707Z     let _ = #[rustc_dummy] [#![rustc_dummy] 1; 4];
2020-02-01T21:11:36.8801772Z 
2020-02-01T21:11:36.8801824Z struct Foo {
2020-02-01T21:11:36.8801863Z     data: (),
2020-02-01T21:11:36.8801900Z }
2020-02-01T21:11:36.8801900Z }
2020-02-01T21:11:36.8801987Z 
2020-02-01T21:11:36.8802049Z struct Bar(());
2020-02-01T21:11:36.8802076Z 
2020-02-01T21:11:36.8802113Z fn _7() {
2020-02-01T21:11:36.8802177Z     #[rustc_dummy]
2020-02-01T21:11:36.8802177Z     #[rustc_dummy]
2020-02-01T21:11:36.8802235Z     Foo {#![rustc_dummy]  data: (),};
2020-02-01T21:11:36.8802271Z 
2020-02-01T21:11:36.8802316Z     let _ = #[rustc_dummy] Foo {#![rustc_dummy]  data: (),};
2020-02-01T21:11:36.8802400Z 
2020-02-01T21:11:36.8802400Z 
2020-02-01T21:11:36.8802438Z fn _8() {
2020-02-01T21:11:36.8802501Z     #[rustc_dummy]
2020-02-01T21:11:36.8802501Z     #[rustc_dummy]
2020-02-01T21:11:36.8802557Z     (#![rustc_dummy] );
2020-02-01T21:11:36.8802623Z     #[rustc_dummy]
2020-02-01T21:11:36.8802623Z     #[rustc_dummy]
2020-02-01T21:11:36.8802680Z     (#![rustc_dummy] 0);
2020-02-01T21:11:36.8802744Z     #[rustc_dummy]
2020-02-01T21:11:36.8802744Z     #[rustc_dummy]
2020-02-01T21:11:36.8802784Z     (#![rustc_dummy] 0,);
2020-02-01T21:11:36.8802978Z     #[rustc_dummy]
2020-02-01T21:11:36.8802978Z     #[rustc_dummy]
2020-02-01T21:11:36.8803028Z     (#![rustc_dummy] 0, 1);
2020-02-01T21:11:36.8803110Z 
2020-02-01T21:11:36.8803110Z 
2020-02-01T21:11:36.8803149Z fn _9() {
2020-02-01T21:11:36.8803194Z     macro_rules! stmt_mac { () => { let _ = () ; } }
2020-02-01T21:11:36.8803278Z     #[rustc_dummy]
2020-02-01T21:11:36.8803379Z     stmt_mac!();
2020-02-01T21:11:36.8803406Z 
2020-02-01T21:11:36.8803445Z     #[rustc_dummy]
2020-02-01T21:11:36.8803445Z     #[rustc_dummy]
2020-02-01T21:11:36.8803501Z     stmt_mac! { };
2020-02-01T21:11:36.8803566Z     #[rustc_dummy]
2020-02-01T21:11:36.8803607Z     stmt_mac![];
2020-02-01T21:11:36.8803650Z 
2020-02-01T21:11:36.8803689Z     #[rustc_dummy]
2020-02-01T21:11:36.8803689Z     #[rustc_dummy]
2020-02-01T21:11:36.8803729Z     stmt_mac! { }
2020-02-01T21:11:36.8803862Z     let _ = ();
2020-02-01T21:11:36.8803901Z }
2020-02-01T21:11:36.8803927Z 
2020-02-01T21:11:36.8803927Z 
2020-02-01T21:11:36.8804211Z macro_rules! expr_mac { () => { () } }
2020-02-01T21:11:36.8804258Z 
2020-02-01T21:11:36.8804297Z fn _10() {
2020-02-01T21:11:36.8804350Z     let _ = #[rustc_dummy] expr_mac!();
2020-02-01T21:11:36.8804412Z     let _ = #[rustc_dummy] expr_mac![];
2020-02-01T21:11:36.8804458Z     let _ = #[rustc_dummy] expr_mac! { };
2020-02-01T21:11:36.8804525Z 
2020-02-01T21:11:36.8804525Z 
2020-02-01T21:11:36.8804580Z fn _11() {
2020-02-01T21:11:36.8804631Z     let _ = #[rustc_dummy] box 0;
2020-02-01T21:11:36.8804679Z     let _: [(); 0] = #[rustc_dummy] [#![rustc_dummy] ];
2020-02-01T21:11:36.8804814Z     let _ = #[rustc_dummy] [#![rustc_dummy] 0, 0];
2020-02-01T21:11:36.8804880Z     let _ = #[rustc_dummy] [#![rustc_dummy] 0; 0];
2020-02-01T21:11:36.8804926Z     let _ = #[rustc_dummy] foo();
2020-02-01T21:11:36.8804971Z     let _ = #[rustc_dummy] 1i32.clone();
2020-02-01T21:11:36.8805034Z     let _ = #[rustc_dummy] (#![rustc_dummy] );
2020-02-01T21:11:36.8805081Z     let _ = #[rustc_dummy] (#![rustc_dummy] 0);
2020-02-01T21:11:36.8805128Z     let _ = #[rustc_dummy] (#![rustc_dummy] 0,);
2020-02-01T21:11:36.8805191Z     let _ = #[rustc_dummy] (#![rustc_dummy] 0, 0);
2020-02-01T21:11:36.8805247Z     let _ = #[rustc_dummy] 0 + #[rustc_dummy] 0;
2020-02-01T21:11:36.8805292Z     let _ = #[rustc_dummy] !0;
2020-02-01T21:11:36.8805643Z     let _ = #[rustc_dummy] -0i32;
2020-02-01T21:11:36.8805693Z     let _ = #[rustc_dummy] false;
2020-02-01T21:11:36.8805929Z     let _ = #[rustc_dummy] 'c';
2020-02-01T21:11:36.8805992Z     let _ = #[rustc_dummy] 0;
2020-02-01T21:11:36.8806037Z     let _ = #[rustc_dummy] 0 as usize;
2020-02-01T21:11:36.8806080Z     let _ =
2020-02-01T21:11:36.8806124Z         #[rustc_dummy] while false {
2020-02-01T21:11:36.8806185Z                            #![rustc_dummy]
2020-02-01T21:11:36.8806377Z     let _ =
2020-02-01T21:11:36.8806377Z     let _ =
2020-02-01T21:11:36.8806437Z         #[rustc_dummy] while let None = Some(()) {
2020-02-01T21:11:36.8806483Z                            #![rustc_dummy]
2020-02-01T21:11:36.8806584Z     let _ =
2020-02-01T21:11:36.8806584Z     let _ =
2020-02-01T21:11:36.8806627Z         #[rustc_dummy] for _ in 0..0 {
2020-02-01T21:11:36.8806768Z                            #![rustc_dummy]
2020-02-01T21:11:36.8806820Z                        };
2020-02-01T21:11:36.8806880Z     // FIXME: pp bug, two spaces after the loop
2020-02-01T21:11:36.8806923Z     let _ =
2020-02-01T21:11:36.8806974Z         #[rustc_dummy] loop  {
2020-02-01T21:11:36.8807035Z                            #![rustc_dummy]
2020-02-01T21:11:36.8807120Z     let _ =
2020-02-01T21:11:36.8807120Z     let _ =
2020-02-01T21:11:36.8807179Z         #[rustc_dummy] match false {
2020-02-01T21:11:36.8807225Z                            #![rustc_dummy]
2020-02-01T21:11:36.8807313Z                        };
2020-02-01T21:11:36.8807313Z                        };
2020-02-01T21:11:36.8807377Z     let _ = #[rustc_dummy] || #[rustc_dummy] ();
2020-02-01T21:11:36.8807426Z     let _ = #[rustc_dummy] move || #[rustc_dummy] ();
2020-02-01T21:11:36.8807597Z     let _ =
2020-02-01T21:11:36.8807660Z         #[rustc_dummy] ||
2020-02-01T21:11:36.8807712Z                            {
2020-02-01T21:11:36.8807758Z                                #![rustc_dummy]
2020-02-01T21:11:36.8807821Z                                #[rustc_dummy]
2020-02-01T21:11:36.8807981Z                            };
2020-02-01T21:11:36.8808037Z     let _ =
2020-02-01T21:11:36.8808037Z     let _ =
2020-02-01T21:11:36.8808079Z         #[rustc_dummy] move ||
2020-02-01T21:11:36.8808122Z                            {
2020-02-01T21:11:36.8808167Z                                #![rustc_dummy]
2020-02-01T21:11:36.8808229Z                                #[rustc_dummy]
2020-02-01T21:11:36.8808317Z                            };
2020-02-01T21:11:36.8808375Z     let _ =
2020-02-01T21:11:36.8808375Z     let _ =
2020-02-01T21:11:36.8808418Z         #[rustc_dummy] {
2020-02-01T21:11:36.8808462Z                            #![rustc_dummy]
2020-02-01T21:11:36.8808562Z     let _ =
2020-02-01T21:11:36.8808562Z     let _ =
2020-02-01T21:11:36.8808612Z         #[rustc_dummy] {
2020-02-01T21:11:36.8808657Z                            #![rustc_dummy]
2020-02-01T21:11:36.8808762Z                        };
2020-02-01T21:11:36.8808802Z     let _ =
2020-02-01T21:11:36.8808802Z     let _ =
2020-02-01T21:11:36.8808866Z         #[rustc_dummy] {
2020-02-01T21:11:36.8808911Z                            #![rustc_dummy]
2020-02-01T21:11:36.8809016Z                            ()
2020-02-01T21:11:36.8809182Z                        };
2020-02-01T21:11:36.8809223Z     let mut x = 0;
2020-02-01T21:11:36.8809223Z     let mut x = 0;
2020-02-01T21:11:36.8809264Z     let _ = #[rustc_dummy] x = 15;
2020-02-01T21:11:36.8809324Z     let _ = #[rustc_dummy] x += 15;
2020-02-01T21:11:36.8809366Z     let s = Foo { data: (),};
2020-02-01T21:11:36.8809408Z     let _ = #[rustc_dummy] s.data;
2020-02-01T21:11:36.8809470Z     let _ = (#[rustc_dummy] s).data;
2020-02-01T21:11:36.8809512Z     let t = Bar(());
2020-02-01T21:11:36.8809562Z     let _ = #[rustc_dummy] t.0;
2020-02-01T21:11:36.8809622Z     let _ = (#[rustc_dummy] t).0;
2020-02-01T21:11:36.8809663Z     let v = vec!(0);
