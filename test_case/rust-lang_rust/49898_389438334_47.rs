\n\nThis syntax specifies that we want the X type from MyTrait, as made concrete in\nMyStruct. The reason that we cannot simply use `MyStruct::X` is that MyStruct\nmight implement two different traits with identically-named associated types.\nThis syntax allows disambiguation between the two.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/associated-types-in-ambiguous-context.rs","byte_start":576,"byte_end":586,"line_start":16,"line_end":16,"column_start":36,"column_end":46,"is_primary":true,"text":[{"text":"fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}","highlight_start":36,"highlight_end":46}],"label":"ambiguous associated type","suggested_replacement":null,"expansion":null}],"children":[{"message":"specify the type using the syntax `<Type as Get>::Value`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0223]: ambiguous associated type\n  --> /checkout/src/test/ui/associated-types-in-ambiguous-context.rs:16:36: in fn get\n   |\nLL | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n   |                                    ^^^^^^^^^^ ambiguous associated type\n   |\n   = note: specify the type using the syntax `<Type as Get>::Value`\n\n"}
[00:48:30] {"message":"ambiguous associated type","code":{"code":"E0223","explanation":"\nAn attempt was made to retrieve an associated type, but the type was ambiguous.\nFor example:\n\n