\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/span/method-and-field-eager-resolution.rs","byte_start":607,"byte_end":608,"line_start":15,"line_end":15,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    x.0;","highlight_start":5,"highlight_end":6}],"label":"cannot infer type for `_`","suggested_replacement":null,"expansion":null},{"file_name":"/checkout/src/test/ui/span/method-and-field-eager-resolution.rs","byte_start":575,"byte_end":580,"line_start":14,"line_end":14,"column_start":9,"column_end":14,"is_primary":false,"text":[{"text":"    let mut x = Default::default();","highlight_start":9,"highlight_end":14}],"label":"consider giving `x` a type","suggested_replacement":null,"expansion":null}],"children":[{"message":"type must be known at this point","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0282]: type annotations needed\n  --> /checkout/src/test/ui/span/method-and-field-eager-resolution.rs:15:5: in fn main\n   |\nLL |     let mut x = Default::default();\n   |         ----- consider giving `x` a type\nLL |     x.0;\n   |     ^ cannot infer type for `_`\n   |\n   = note: type must be known at this point\n\n"}
[00:50:37] {"message":"type annotations needed","code":{"code":"E0282","explanation":"\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\n