plain
test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 200 tests
.............................F......F.....F............................................. 88/200
........................................................................................ 176/200
.F.......F.F.FFF....F...

---- spec::tests::aarch64_linux_android stdout ----
thread 'spec::tests::aarch64_linux_android' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::aarch64_linux_android' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "aarch64-linux-android", pointer_width: 64, arch: "aarch64", data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "android", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {}, pre_link_args_json: {}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic", features: "+neon,+fp-armv8", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: true, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(128), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: true, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | HWADDRESS | CFI | MEMTAG | SHADOWCALLSTACK, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "aarch64-linux-android", pointer_width: 64, arch: "aarch64", data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "android", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {}, pre_link_args_json: {}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic", features: "+neon,+fp-armv8", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: true, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(128), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: true, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | HWADDRESS | CFI | MEMTAG | SHADOWCALLSTACK, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5

---- spec::tests::aarch64_unknown_linux_musl stdout ----
thread 'spec::tests::aarch64_unknown_linux_musl' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::aarch64_unknown_linux_musl' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "aarch64-unknown-linux-musl", pointer_width: 64, arch: "aarch64", data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "musl", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {DynamicNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], DynamicPicExe: ["Scrt1.o", "crti.o", "crtbeginS.o"], StaticNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], StaticPicExe: ["rcrt1.o", "crti.o", "crtbeginS.o"], DynamicDylib: ["crti.o", "crtbeginS.o"], StaticDylib: ["crti.o", "crtbeginS.o"]}, post_link_objects_self_contained: {DynamicNoPicExe: ["crtend.o", "crtn.o"], DynamicPicExe: ["crtendS.o", "crtn.o"], StaticNoPicExe: ["crtend.o", "crtn.o"], StaticPicExe: ["crtendS.o", "crtn.o"], DynamicDylib: ["crtendS.o", "crtn.o"], StaticDylib: ["crtendS.o", "crtn.o"]}, link_self_contained: Musl, pre_link_args: {}, pre_link_args_json: {}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(128), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: true, crt_static_respected: true, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "\u{1}_mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: (empty), default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "aarch64-unknown-linux-musl", pointer_width: 64, arch: "aarch64", data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "musl", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {DynamicNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], DynamicPicExe: ["Scrt1.o", "crti.o", "crtbeginS.o"], StaticNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], StaticPicExe: ["rcrt1.o", "crti.o", "crtbeginS.o"], DynamicDylib: ["crti.o", "crtbeginS.o"], StaticDylib: ["crti.o", "crtbeginS.o"]}, post_link_objects_self_contained: {DynamicNoPicExe: ["crtend.o", "crtn.o"], DynamicPicExe: ["crtendS.o", "crtn.o"], StaticNoPicExe: ["crtend.o", "crtn.o"], StaticPicExe: ["crtendS.o", "crtn.o"], DynamicDylib: ["crtendS.o", "crtn.o"], StaticDylib: ["crtendS.o", "crtn.o"]}, link_self_contained: Musl, pre_link_args: {}, pre_link_args_json: {}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(128), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: true, crt_static_respected: true, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "\u{1}_mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: (empty), default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::aarch64_unknown_linux_gnu stdout ----
---- spec::tests::aarch64_unknown_linux_gnu stdout ----
thread 'spec::tests::aarch64_unknown_linux_gnu' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "aarch64-unknown-linux-gnu", pointer_width: 64, arch: "aarch64", data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "gnu", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {}, pre_link_args_json: {}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic", features: "+outline-atomics", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(128), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "\u{1}_mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | HWADDRESS | CFI | MEMTAG, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "aarch64-unknown-linux-gnu", pointer_width: 64, arch: "aarch64", data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "gnu", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {}, pre_link_args_json: {}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic", features: "+outline-atomics", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(128), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "\u{1}_mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | HWADDRESS | CFI | MEMTAG, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::x86_64_linux_android stdout ----
thread 'spec::tests::x86_64_linux_android' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::x86_64_linux_android' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "x86_64-linux-android", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "android", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: true, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: true, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "x86_64-linux-android", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "android", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: true, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: true, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::x86_64_unknown_linux_gnu stdout ----
---- spec::tests::x86_64_unknown_linux_gnu stdout ----
thread 'spec::tests::x86_64_unknown_linux_gnu' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "x86_64-unknown-linux-gnu", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "gnu", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: true, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "x86_64-unknown-linux-gnu", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "gnu", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: true, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: true, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::x86_64_unknown_freebsd stdout ----
thread 'spec::tests::x86_64_unknown_freebsd' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::x86_64_unknown_freebsd' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "x86_64-unknown-freebsd", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "freebsd", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: true, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: ADDRESS | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "x86_64-unknown-freebsd", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "freebsd", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: true, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: ADDRESS | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::x86_64_unknown_netbsd stdout ----
thread 'spec::tests::x86_64_unknown_netbsd' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::x86_64_unknown_netbsd' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "x86_64-unknown-netbsd", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "netbsd", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: false, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "__mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: true, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "x86_64-unknown-netbsd", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "netbsd", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: false, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "__mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: true, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::x86_64_unknown_none_linuxkernel stdout ----
thread 'spec::tests::x86_64_unknown_none_linuxkernel' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::x86_64_unknown_none_linuxkernel' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "x86_64-unknown-none-elf", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "none", env: "gnu", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float", dynamic_linking: false, only_cdylib: false, executables: true, relocation_model: Static, code_model: Some(Kernel), tls_model: GeneralDynamic, disable_redzone: true, frame_pointer: Always, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: [], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: false, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: true, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Abort, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: (empty), default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "x86_64-unknown-none-elf", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "none", env: "gnu", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float", dynamic_linking: false, only_cdylib: false, executables: true, relocation_model: Static, code_model: Some(Kernel), tls_model: GeneralDynamic, disable_redzone: true, frame_pointer: Always, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: [], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: false, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: true, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Abort, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: (empty), default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::x86_64_unknown_openbsd stdout ----
thread 'spec::tests::x86_64_unknown_openbsd' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::x86_64_unknown_openbsd' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "x86_64-unknown-openbsd", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "openbsd", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: Always, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: true, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: (empty), default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "x86_64-unknown-openbsd", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "openbsd", env: "", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {}, post_link_objects_self_contained: {}, link_self_contained: False, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: Always, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: true, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 2, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: false, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Off], supported_sanitizers: (empty), default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5
---- spec::tests::x86_64_unknown_linux_musl stdout ----
thread 'spec::tests::x86_64_unknown_linux_musl' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::x86_64_unknown_linux_musl' panicked at 'assertion failed: `(left == right)`
  left: `Ok(Target { llvm_target: "x86_64-unknown-linux-musl", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "musl", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {DynamicNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], DynamicPicExe: ["Scrt1.o", "crti.o", "crtbeginS.o"], StaticNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], StaticPicExe: ["rcrt1.o", "crti.o", "crtbeginS.o"], DynamicDylib: ["crti.o", "crtbeginS.o"], StaticDylib: ["crti.o", "crtbeginS.o"]}, post_link_objects_self_contained: {DynamicNoPicExe: ["crtend.o", "crtn.o"], DynamicPicExe: ["crtendS.o", "crtn.o"], StaticNoPicExe: ["crtend.o", "crtn.o"], StaticPicExe: ["crtendS.o", "crtn.o"], DynamicDylib: ["crtendS.o", "crtn.o"], StaticDylib: ["crtendS.o", "crtn.o"]}, link_self_contained: Musl, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: true, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: true, crt_static_respected: true, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: false } })`,
 right: `Ok(Target { llvm_target: "x86_64-unknown-linux-musl", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "linux", env: "musl", abi: "", vendor: "unknown", linker: None, linker_flavor: Gnu(Yes, No), linker_flavor_json: Gcc, lld_flavor_json: Ld, linker_is_gnu_json: true, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_self_contained: {DynamicNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], DynamicPicExe: ["Scrt1.o", "crti.o", "crtbeginS.o"], StaticNoPicExe: ["crt1.o", "crti.o", "crtbegin.o"], StaticPicExe: ["rcrt1.o", "crti.o", "crtbeginS.o"], DynamicDylib: ["crti.o", "crtbeginS.o"], StaticDylib: ["crti.o", "crtbeginS.o"]}, post_link_objects_self_contained: {DynamicNoPicExe: ["crtend.o", "crtn.o"], DynamicPicExe: ["crtendS.o", "crtn.o"], StaticNoPicExe: ["crtend.o", "crtn.o"], StaticPicExe: ["crtendS.o", "crtn.o"], DynamicDylib: ["crtendS.o", "crtn.o"], StaticDylib: ["crtendS.o", "crtn.o"]}, link_self_contained: Musl, pre_link_args: {Gnu(Yes, Yes): ["-m64"], Gnu(Yes, No): ["-m64"]}, pre_link_args_json: {Gcc: ["-m64"]}, late_link_args: {}, late_link_args_json: {}, late_link_args_dynamic: {}, late_link_args_dynamic_json: {}, late_link_args_static: {}, late_link_args_static_json: {}, post_link_args: {}, post_link_args_json: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "", dynamic_linking: true, only_cdylib: false, executables: true, relocation_model: Pic, code_model: None, tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: ["unix"], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, is_like_android: false, default_dwarf_version: 4, allows_weak_linkage: true, has_rpath: true, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: true, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: true, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Unwind, crt_static_allows_dylibs: false, crt_static_default: true, crt_static_respected: true, stack_probes: InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) }, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, debuginfo_kind: Dwarf, split_debuginfo: Off, supported_split_debuginfo: [Packed, Unpacked, Off], supported_sanitizers: ADDRESS | LEAK | MEMORY | THREAD | CFI, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true, supports_xray: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:9:5

failures:
    spec::tests::aarch64_linux_android
    spec::tests::aarch64_unknown_linux_gnu
---
    spec::tests::x86_64_unknown_none_linuxkernel
    spec::tests::x86_64_unknown_openbsd

test result: FAILED. 190 passed; 10 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s
error: test failed, to rerun pass `-p rustc_target --lib`
Build completed unsuccessfully in 0:23:22
