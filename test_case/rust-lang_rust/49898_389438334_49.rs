\n\nThis syntax specifies that we want the X type from MyTrait, as made concrete in\nMyStruct. The reason that we cannot simply use `MyStruct::X` is that MyStruct\nmight implement two different traits with identically-named associated types.\nThis syntax allows disambiguation between the two.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/associated-types-in-ambiguous-context.rs","byte_start":745,"byte_end":768,"line_start":25,"line_end":25,"column_start":10,"column_end":33,"is_primary":true,"text":[{"text":"type X = std::ops::Deref::Target;","highlight_start":10,"highlight_end":33}],"label":"ambiguous associated type","suggested_replacement":null,"expansion":null}],"children":[{"message":"specify the type using the syntax `<Type as std::ops::Deref>::Target`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0223]: ambiguous associated type\n  --> /checkout/src/test/ui/associated-types-in-ambiguous-context.rs:25:10\n   |\nLL | type X = std::ops::Deref::Target;\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n   |\n   = note: specify the type using the syntax `<Type as std::ops::Deref>::Target`\n\n"}
[00:48:30] {"message":"ambiguous associated type","code":{"code":"E0223","explanation":"\nAn attempt was made to retrieve an associated type, but the type was ambiguous.\nFor example:\n\n