plain

---- compile_test stdout ----
diff of stderr:

 error: docs for function which may panic missing `# Panics` section
    |
    |
 LL | / pub fn unwrap() {
 LL | |     let result = Err("Hi");
 LL | |     result.unwrap()
 LL | | }
    |
    |
    = note: `-D clippy::missing-panics-doc` implied by `-D warnings`
 note: first possible panic found here
    |
 LL |     result.unwrap()
    |     ^^^^^^^^^^^^^^^
 
 
 error: docs for function which may panic missing `# Panics` section
    |
    |
 LL | / pub fn panic() {
 LL | |     panic!("This function panics")
 LL | | }
    |
    |
 note: first possible panic found here
    |
 LL |     panic!("This function panics")
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)
    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)
 
 error: docs for function which may panic missing `# Panics` section
    |
    |
 LL | / pub fn todo() {
 LL | |     todo!()
 LL | | }
    |
    |
 note: first possible panic found here
    |
 LL |     todo!()
    |     ^^^^^^^
-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)
-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)
+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)
 
 error: docs for function which may panic missing `# Panics` section
    |
    |
 LL | / pub fn inner_body(opt: Option<u32>) {
 LL | |     opt.map(|x| {
 LL | |         if x == 10 {
 LL | |             panic!()
 LL | |         }
 LL | |     });
 LL | | }
    |
    |
 note: first possible panic found here
    |
 LL |             panic!()
    |             ^^^^^^^^
    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)
    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)
 
 error: docs for function which may panic missing `# Panics` section
    |
 LL | / pub fn unreachable_and_panic() {
 LL | / pub fn unreachable_and_panic() {
 LL | |     if true { unreachable!() } else { panic!() }
 LL | | }
    |
    |
 note: first possible panic found here
    |
    |
 LL |     if true { unreachable!() } else { panic!() }
    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)
 
 
 error: docs for function which may panic missing `# Panics` section
    |
    |
 LL | / pub fn assert_eq() {
 LL | |     let x = 0;
 LL | |     assert_eq!(x, 0);
 LL | | }
    |
    |
 note: first possible panic found here
    |
 LL |     assert_eq!(x, 0);
    |     ^^^^^^^^^^^^^^^^
    |     ^^^^^^^^^^^^^^^^
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)
 
 error: docs for function which may panic missing `# Panics` section
    |
    |
 LL | / pub fn assert_ne() {
 LL | |     let x = 0;
 LL | |     assert_ne!(x, 0);
 LL | | }
    |
    |
 note: first possible panic found here
    |
    |
 LL |     assert_ne!(x, 0);
    |     ^^^^^^^^^^^^^^^^
    = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)
 error: aborting due to 7 previous errors
 
 


The actual stderr differed from the expected stderr.
Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/missing_panics_doc.stage-id.stderr
To update references, rerun the tests and pass the `--bless` flag
To only update this specific test, also pass `--test-args missing_panics_doc.rs`

error: 1 errors occurred comparing output.
status: exit status: 1
command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/clippy-driver" "tests/ui/missing_panics_doc.rs" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/missing_panics_doc.stage-id" "-A" "unused" "--emit=metadata" "-Dwarnings" "-Zui-testing" "-L" "dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps" "-L" "dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps" "--extern" "regex=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libregex-8ccd5459decf8e02.rlib" "--extern" "quote=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libquote-a2cb7849bbc8a2a2.rlib" "--extern" "serde=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libserde-a8c1b2a71f554c3c.rlib" "--extern" "syn=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libsyn-c2a1ca34edf818c9.rlib" "--extern" "if_chain=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libif_chain-a436811527635382.rlib" "--extern" "derive_new=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps/libderive_new-12319133577eb155.so" "--extern" "clippy_utils=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_utils-8a400cd14c1fc33b.rlib" "--extern" "parking_lot=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libparking_lot-03199b31ca772f2d.rlib" "--extern" "serde_derive=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps/libserde_derive-f91723cecf6d8a5f.so" "--extern" "itertools=/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libitertools-041fb6ac880e1ce0.rlib" "--edition=2021" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/test/missing_panics_doc.stage-id.aux"
------------------------------------------

------------------------------------------
stderr:
stderr:
------------------------------------------
{"message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":121,"byte_end":188,"line_start":6,"line_end":9,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn unwrap() {","highlight_start":1,"highlight_end":18},{"text":"    let result = Err(\"Hi\");","highlight_start":1,"highlight_end":28},{"text":"    result.unwrap()","highlight_start":1,"highlight_end":20},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::missing-panics-doc` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":171,"byte_end":186,"line_start":8,"line_end":8,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    result.unwrap()","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"error: docs for function which may panic missing `# Panics` section\n  --> tests/ui/missing_panics_doc.rs:6:1\n   |\nLL | / pub fn unwrap() {\nLL | |     let result = Err(\"Hi\");\nLL | |     result.unwrap()\nLL | | }\n   | |_^\n   |\n   = note: `-D clippy::missing-panics-doc` implied by `-D warnings`\nnote: first possible panic found here\n  --> tests/ui/missing_panics_doc.rs:8:5\n   |\nLL |     result.unwrap()\n   |     ^^^^^^^^^^^^^^^\n\n"}
{"message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":222,"byte_end":275,"line_start":12,"line_end":14,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn panic() {","highlight_start":1,"highlight_end":17},{"text":"    panic!(\"This function panics\")","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/panic.rs","byte_start":1873,"byte_end":1937,"line_start":57,"line_end":57,"column_start":9,"column_end":73,"is_primary":true,"text":[{"text":"        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":243,"byte_end":273,"line_start":13,"line_end":13,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    panic!(\"This function panics\")","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":243,"byte_end":273,"line_start":13,"line_end":13,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    panic!(\"This function panics\")","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/checkout/library/std/src/macros.rs","byte_start":463,"byte_end":678,"line_start":13,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":1},{"text":"    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`","highlight_start":1,"highlight_end":1},{"text":"    // depending on the edition of the caller.","highlight_start":1,"highlight_end":1},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic::panic_2021!","def_site_span":{"file_name":"/checkout/library/core/src/panic.rs","byte_start":1601,"byte_end":1946,"line_start":48,"line_end":59,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro panic_2021 {","highlight_start":1,"highlight_end":1},{"text":"    () => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::panicking::panic(\"explicit panic\")","highlight_start":1,"highlight_end":1},{"text":"    ),","highlight_start":1,"highlight_end":1},{"text":"    // Special-case the single-argument case for const_panic.","highlight_start":1,"highlight_end":1},{"text":"    (\"{}\", $arg:expr $(,)?) => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::panicking::panic_display(&$arg)","highlight_start":1,"highlight_end":1},{"text":"    ),","highlight_start":1,"highlight_end":1},{"text":"    ($($t:tt)+) => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))","highlight_start":1,"highlight_end":1},{"text":"    ),","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: docs for function which may panic missing `# Panics` section\n  --> tests/ui/missing_panics_doc.rs:12:1\n   |\nLL | / pub fn panic() {\nLL | |     panic!(\"This function panics\")\nLL | | }\n   | |_^\n   |\nnote: first possible panic found here\n  --> tests/ui/missing_panics_doc.rs:13:5\n   |\nLL |     panic!(\"This function panics\")\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":309,"byte_end":338,"line_start":17,"line_end":19,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn todo() {","highlight_start":1,"highlight_end":16},{"text":"    todo!()","highlight_start":1,"highlight_end":12},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":24945,"byte_end":24992,"line_start":742,"line_end":742,"column_start":12,"column_end":59,"is_primary":true,"text":[{"text":"    () => ($crate::panicking::panic(\"not yet implemented\"));","highlight_start":12,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":329,"byte_end":336,"line_start":18,"line_end":18,"column_start":5,"column_end":12,"is_primary":false,"text":[{"text":"    todo!()","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"todo!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":24914,"byte_end":25094,"line_start":741,"line_end":744,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! todo {","highlight_start":1,"highlight_end":20},{"text":"    () => ($crate::panicking::panic(\"not yet implemented\"));","highlight_start":1,"highlight_end":61},{"text":"    ($($arg:tt)+) => ($crate::panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":98},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: docs for function which may panic missing `# Panics` section\n  --> tests/ui/missing_panics_doc.rs:17:1\n   |\nLL | / pub fn todo() {\nLL | |     todo!()\nLL | | }\n   | |_^\n   |\nnote: first possible panic found here\n  --> tests/ui/missing_panics_doc.rs:18:5\n   |\nLL |     todo!()\n   |     ^^^^^^^\n   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":372,"byte_end":489,"line_start":22,"line_end":28,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn inner_body(opt: Option<u32>) {","highlight_start":1,"highlight_end":38},{"text":"    opt.map(|x| {","highlight_start":1,"highlight_end":18},{"text":"        if x == 10 {","highlight_start":1,"highlight_end":21},{"text":"            panic!()","highlight_start":1,"highlight_end":21},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/panic.rs","byte_start":1644,"byte_end":1686,"line_start":50,"line_end":50,"column_start":9,"column_end":51,"is_primary":true,"text":[{"text":"        $crate::panicking::panic(\"explicit panic\")","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":461,"byte_end":469,"line_start":25,"line_end":25,"column_start":13,"column_end":21,"is_primary":false,"text":[{"text":"            panic!()","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":461,"byte_end":469,"line_start":25,"line_end":25,"column_start":13,"column_end":21,"is_primary":false,"text":[{"text":"            panic!()","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/checkout/library/std/src/macros.rs","byte_start":463,"byte_end":678,"line_start":13,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`","highlight_start":1,"highlight_end":84},{"text":"    // depending on the edition of the caller.","highlight_start":1,"highlight_end":47},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic::panic_2021!","def_site_span":{"file_name":"/checkout/library/core/src/panic.rs","byte_start":1601,"byte_end":1946,"line_start":48,"line_end":59,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro panic_2021 {","highlight_start":1,"highlight_end":23},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panicking::panic(\"explicit panic\")","highlight_start":1,"highlight_end":51},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Special-case the single-argument case for const_panic.","highlight_start":1,"highlight_end":62},{"text":"    (\"{}\", $arg:expr $(,)?) => (","highlight_start":1,"highlight_end":33},{"text":"        $crate::panicking::panic_display(&$arg)","highlight_start":1,"highlight_end":48},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    ($($t:tt)+) => (","highlight_start":1,"highlight_end":21},{"text":"        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))","highlight_start":1,"highlight_end":73},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: docs for function which may panic missing `# Panics` section\n  --> tests/ui/missing_panics_doc.rs:22:1\n   |\nLL | / pub fn inner_body(opt: Option<u32>) {\nLL | |     opt.map(|x| {\nLL | |         if x == 10 {\nLL | |             panic!()\nLL | |         }\nLL | |     });\nLL | | }\n   | |_^\n   |\nnote: first possible panic found here\n  --> tests/ui/missing_panics_doc.rs:25:13\n   |\nLL |             panic!()\n   |             ^^^^^^^^\n   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":523,"byte_end":606,"line_start":31,"line_end":33,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn unreachable_and_panic() {","highlight_start":1,"highlight_end":33},{"text":"    if true { unreachable!() } else { panic!() }","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/panic.rs","byte_start":1644,"byte_end":1686,"line_start":50,"line_end":50,"column_start":9,"column_end":51,"is_primary":true,"text":[{"text":"        $crate::panicking::panic(\"explicit panic\")","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":594,"byte_end":602,"line_start":32,"line_end":32,"column_start":39,"column_end":47,"is_primary":false,"text":[{"text":"    if true { unreachable!() } else { panic!() }","highlight_start":39,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":594,"byte_end":602,"line_start":32,"line_end":32,"column_start":39,"column_end":47,"is_primary":false,"text":[{"text":"    if true { unreachable!() } else { panic!() }","highlight_start":39,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/checkout/library/std/src/macros.rs","byte_start":463,"byte_end":678,"line_start":13,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`","highlight_start":1,"highlight_end":84},{"text":"    // depending on the edition of the caller.","highlight_start":1,"highlight_end":47},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic::panic_2021!","def_site_span":{"file_name":"/checkout/library/core/src/panic.rs","byte_start":1601,"byte_end":1946,"line_start":48,"line_end":59,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro panic_2021 {","highlight_start":1,"highlight_end":23},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panicking::panic(\"explicit panic\")","highlight_start":1,"highlight_end":51},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    // Special-case the single-argument case for const_panic.","highlight_start":1,"highlight_end":62},{"text":"    (\"{}\", $arg:expr $(,)?) => (","highlight_start":1,"highlight_end":33},{"text":"        $crate::panicking::panic_display(&$arg)","highlight_start":1,"highlight_end":48},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    ($($t:tt)+) => (","highlight_start":1,"highlight_end":21},{"text":"        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))","highlight_start":1,"highlight_end":73},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: docs for function which may panic missing `# Panics` section\n  --> tests/ui/missing_panics_doc.rs:31:1\n   |\nLL | / pub fn unreachable_and_panic() {\nLL | |     if true { unreachable!() } else { panic!() }\nLL | | }\n   | |_^\n   |\nnote: first possible panic found here\n  --> tests/ui/missing_panics_doc.rs:32:39\n   |\nLL |     if true { unreachable!() } else { panic!() }\n   |                                       ^^^^^^^^\n   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
error: test failed, to rerun pass '--test compile-test'
{"message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":640,"byte_end":699,"line_start":36,"line_end":39,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn assert_eq() {","highlight_start":1,"highlight_end":21},{"text":"    let x = 0;","highlight_start":1,"highlight_end":15},{"text":"    assert_eq!(x, 0);","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":1064,"byte_end":1652,"line_start":36,"line_end":48,"column_start":41,"column_end":6,"is_primary":true,"text":[{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":41,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":680,"byte_end":696,"line_start":38,"line_end":38,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    assert_eq!(x, 0);","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: docs for function which may panic missing `# Panics` section\n  --> tests/ui/missing_panics_doc.rs:36:1\n   |\nLL | / pub fn assert_eq() {\nLL | |     let x = 0;\nLL | |     assert_eq!(x, 0);\nLL | | }\n   | |_^\n   |\nnote: first possible panic found here\n  --> tests/ui/missing_panics_doc.rs:38:5\n   |\nLL |     assert_eq!(x, 0);\n   |     ^^^^^^^^^^^^^^^^\n   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"docs for function which may panic missing `# Panics` section","code":{"code":"clippy::missing_panics_doc","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":733,"byte_end":792,"line_start":42,"line_end":45,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn assert_ne() {","highlight_start":1,"highlight_end":21},{"text":"    let x = 0;","highlight_start":1,"highlight_end":15},{"text":"    assert_ne!(x, 0);","highlight_start":1,"highlight_end":22},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first possible panic found here","code":null,"level":"note","spans":[{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2962,"byte_end":3547,"line_start":85,"line_end":97,"column_start":41,"column_end":6,"is_primary":true,"text":[{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":41,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    let kind = $crate::panicking::AssertKind::Ne;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/missing_panics_doc.rs","byte_start":773,"byte_end":789,"line_start":44,"line_end":44,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    assert_ne!(x, 0);","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"/checkout/library/core/src/macros/mod.rs","byte_start":2897,"byte_end":4222,"line_start":84,"line_end":111,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_ne {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    let kind = $crate::panicking::AssertKind::Ne;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if *left_val == *right_val {","highlight_start":1,"highlight_end":45},{"text":"                    let kind = $crate::panicking::AssertKind::Ne;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: docs for function which may panic missing `# Panics` section\n  --> tests/ui/missing_panics_doc.rs:42:1\n   |\nLL | / pub fn assert_ne() {\nLL | |     let x = 0;\nLL | |     assert_ne!(x, 0);\nLL | | }\n   | |_^\n   |\nnote: first possible panic found here\n  --> tests/ui/missing_panics_doc.rs:44:5\n   |\nLL |     assert_ne!(x, 0);\n   |     ^^^^^^^^^^^^^^^^\n   = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}

------------------------------------------

thread 'compile_test' panicked at 'Some tests failed', /cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.7.1/src/lib.rs:105:22
