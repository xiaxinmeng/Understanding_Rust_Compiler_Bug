\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/error-codes/E0423.rs","byte_start":296,"byte_end":297,"line_start":15,"line_end":15,"column_start":8,"column_end":9,"is_primary":true,"text":[{"text":"    if T {} == T {} { println!(\"Ok\"); }","highlight_start":8,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"surround the struct literal with parenthesis","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/error-codes/E0423.rs","byte_start":296,"byte_end":300,"line_start":15,"line_end":15,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    if T {} == T {} { println!(\"Ok\"); }","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":"(T {})","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error[E0423]: expected value, found struct `T`\n  --> /checkout/src/test/ui/error-codes/E0423.rs:15:8\n   |\nLL |     if T {} == T {} { println!(\"Ok\"); }\n   |        ^---\n   |        |\n   |        help: surround the struct literal with parenthesis: `(T {})`\n\n"}
[01:17:14] {"message":"expected value, found struct `std::ops::Range`","code":{"code":"E0423","explanation":"\nAn identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nFor (an erroneous) example, here a `struct` variant name were used as a\nfunction:\n\n