plain
2020-02-15T16:29:10.3992396Z ========================== Starting Command Output ===========================
2020-02-15T16:29:10.3994060Z [command]/bin/bash --noprofile --norc /home/vsts/work/_temp/6d1c6762-20ce-4dc1-95c3-b7992047a7c3.sh
2020-02-15T16:29:10.3994115Z 
2020-02-15T16:29:10.3997223Z ##[section]Finishing: Disable git automatic line ending conversion
2020-02-15T16:29:10.4006993Z ##[section]Starting: Checkout rust-lang/rust@refs/pull/69189/merge to s
2020-02-15T16:29:10.4008883Z Task         : Get sources
2020-02-15T16:29:10.4008920Z Description  : Get sources from a repository. Supports Git, TfsVC, and SVN repositories.
2020-02-15T16:29:10.4009006Z Version      : 1.0.0
2020-02-15T16:29:10.4009042Z Author       : Microsoft
---
2020-02-15T16:29:11.2766277Z ##[command]git remote add origin https://github.com/rust-lang/rust
2020-02-15T16:29:11.2802682Z ##[command]git config gc.auto 0
2020-02-15T16:29:11.2865189Z ##[command]git config --get-all http.https://github.com/rust-lang/rust.extraheader
2020-02-15T16:29:11.2921075Z ##[command]git config --get-all http.proxy
2020-02-15T16:29:11.3049664Z ##[command]git -c http.extraheader="AUTHORIZATION: basic ***" fetch --force --tags --prune --progress --no-recurse-submodules --depth=2 origin +refs/heads/*:refs/remotes/origin/* +refs/pull/69189/merge:refs/remotes/pull/69189/merge
---
2020-02-15T17:28:36.2261584Z .................................................................................................... 1700/9650
2020-02-15T17:28:40.9105541Z .................................................................................................... 1800/9650
2020-02-15T17:28:52.6082204Z ..................................i................................................................. 1900/9650
2020-02-15T17:29:00.0588887Z .................................................................................................... 2000/9650
2020-02-15T17:29:14.2232652Z ........................iiiii....................................................................... 2100/9650
2020-02-15T17:29:23.7798130Z .................................................................................................... 2300/9650
2020-02-15T17:29:26.1613106Z .................................................................................................... 2400/9650
2020-02-15T17:29:30.6661063Z .................................................................................................... 2500/9650
2020-02-15T17:29:51.3101773Z .................................................................................................... 2600/9650
---
2020-02-15T17:33:10.6865539Z .................................................................................................... 5600/9650
2020-02-15T17:33:21.0513822Z .......................................................................................i............ 5700/9650
2020-02-15T17:33:28.9353210Z .................................................................................................... 5800/9650
2020-02-15T17:33:34.2287106Z .....................................................................................i.............. 5900/9650
2020-02-15T17:33:43.9352329Z ...............................................................................ii...i..ii........... 6000/9650
2020-02-15T17:33:56.3748187Z i................................................................................................... 6100/9650
2020-02-15T17:34:12.7287009Z .................................................................................................... 6300/9650
2020-02-15T17:34:20.4772325Z .................................................................................................... 6400/9650
2020-02-15T17:34:20.4772325Z .................................................................................................... 6400/9650
2020-02-15T17:34:35.7664594Z .......i..ii........................................................................................ 6500/9650
2020-02-15T17:34:55.4076429Z ...............................................................................................i.... 6700/9650
2020-02-15T17:34:57.5934906Z .................................................................................................... 6800/9650
2020-02-15T17:34:59.8221331Z .................................................................................................... 6900/9650
2020-02-15T17:35:02.2448645Z .....i.............................................................................................. 7000/9650
---
2020-02-15T17:36:38.3365361Z .................................................................................................... 7600/9650
2020-02-15T17:36:43.0216127Z .................................................................................................... 7700/9650
2020-02-15T17:36:49.0467527Z .................................................................................................... 7800/9650
2020-02-15T17:36:55.8812309Z .................................................................................................... 7900/9650
2020-02-15T17:37:05.3332580Z .......................................................................................iiiiiii.i.... 8000/9650
2020-02-15T17:37:21.5130527Z ...........................i......i................................................................. 8200/9650
2020-02-15T17:37:26.5252458Z .................................................................................................... 8300/9650
2020-02-15T17:37:37.7081681Z .................................................................................................... 8400/9650
2020-02-15T17:37:49.2428257Z .................................................................................................... 8500/9650
---
2020-02-15T17:40:12.9948561Z  finished in 7.120
2020-02-15T17:40:13.0150365Z Check compiletest suite=codegen mode=codegen (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-15T17:40:13.2166532Z 
2020-02-15T17:40:13.2167468Z running 178 tests
2020-02-15T17:40:16.1335095Z iiii......i...........ii..iiii...i....i...........i............i..i..................i....i......... 100/178
2020-02-15T17:40:18.3617366Z ...i.i.i...iii..iiiiiiiiiiiiiiii.......................iii............ii......
2020-02-15T17:40:18.3617966Z 
2020-02-15T17:40:18.3622523Z  finished in 5.347
2020-02-15T17:40:18.3802304Z Check compiletest suite=codegen-units mode=codegen-units (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-15T17:40:18.5416526Z 
---
2020-02-15T17:40:20.3799010Z  finished in 1.999
2020-02-15T17:40:20.3994284Z Check compiletest suite=assembly mode=assembly (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-15T17:40:20.5453745Z 
2020-02-15T17:40:20.5453877Z running 9 tests
2020-02-15T17:40:20.5454738Z iiiiiiiii
2020-02-15T17:40:20.5455268Z 
2020-02-15T17:40:20.5467989Z  finished in 0.146
2020-02-15T17:40:20.5634424Z Check compiletest suite=incremental mode=incremental (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-15T17:40:20.7508784Z 
---
2020-02-15T17:40:39.8834692Z  finished in 19.320
2020-02-15T17:40:39.9121920Z Check compiletest suite=debuginfo mode=debuginfo (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-15T17:40:40.7428906Z 
2020-02-15T17:40:40.7429260Z running 116 tests
2020-02-15T17:40:54.3348013Z iiiii..i.....i..i...i..i.i.i..i..i..ii....i.i....ii..........iiii..........i.....i..i.......ii.i.ii. 100/116
2020-02-15T17:40:56.1845530Z ....iiii.....ii.
2020-02-15T17:40:56.1846475Z 
2020-02-15T17:40:56.1850692Z  finished in 16.273
2020-02-15T17:40:56.1855373Z Uplifting stage1 rustc (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2020-02-15T17:40:56.1856752Z Copying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)
---
2020-02-15T17:48:15.4323317Z 
2020-02-15T17:48:15.4323632Z error: pretty-printed source does not match expected source
2020-02-15T17:48:15.4323695Z expected:
2020-02-15T17:48:15.4323994Z ------------------------------------------
2020-02-15T17:48:15.4324051Z #[prelude_import]
2020-02-15T17:48:15.4324101Z use ::std::prelude::v1::*;
2020-02-15T17:48:15.4324241Z extern crate std;
2020-02-15T17:48:15.4324482Z // pretty-compare-only
2020-02-15T17:48:15.4324482Z // pretty-compare-only
2020-02-15T17:48:15.4324709Z // pretty-mode:hir,typed
2020-02-15T17:48:15.4324958Z // pp-exact:issue-4264.pp
2020-02-15T17:48:15.4324993Z 
2020-02-15T17:48:15.4325231Z // #4264 fixed-length vector types
2020-02-15T17:48:15.4325267Z 
2020-02-15T17:48:15.4325336Z pub fn foo(_: [i32; (3 as usize)]) ({ } as ())
2020-02-15T17:48:15.4325427Z pub fn bar() ({
2020-02-15T17:48:15.4325427Z pub fn bar() ({
2020-02-15T17:48:15.4325720Z                   const FOO: usize = ((5 as usize) - (4 as usize) as usize);
2020-02-15T17:48:15.4325804Z                   let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);
2020-02-15T17:48:15.4325840Z 
2020-02-15T17:48:15.4325894Z                   let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);
2020-02-15T17:48:15.4326083Z                   let _ =
2020-02-15T17:48:15.4326083Z                   let _ =
2020-02-15T17:48:15.4326157Z                       (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])
2020-02-15T17:48:15.4326228Z                             as &[i32; 3]) as *const _ as *const [i32; 3]) as
2020-02-15T17:48:15.4326287Z                           *const [i32; (3 as usize)] as *const [i32; 3]);
2020-02-15T17:48:15.4326440Z 
2020-02-15T17:48:15.4326469Z 
2020-02-15T17:48:15.4326497Z 
2020-02-15T17:48:15.4326526Z 
2020-02-15T17:48:15.4326526Z 
2020-02-15T17:48:15.4326555Z 
2020-02-15T17:48:15.4326599Z 
2020-02-15T17:48:15.4326628Z 
2020-02-15T17:48:15.4326656Z 
2020-02-15T17:48:15.4326711Z                   ({
2020-02-15T17:48:15.4326779Z                        let res =
2020-02-15T17:48:15.4326834Z                            ((::alloc::fmt::format as
2020-02-15T17:48:15.4327229Z                                 for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1
2020-02-15T17:48:15.4327326Z                                                                                                                     as
2020-02-15T17:48:15.4328065Z                                                                                                                     fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([("test"
2020-02-15T17:48:15.4328838Z                                                                                                                                                                                                                                      &'static str)]
2020-02-15T17:48:15.4328965Z                                                                                                                                                                                                                                    as
2020-02-15T17:48:15.4329070Z                                                                                                                                                                                                                                    [&str; 1])
2020-02-15T17:48:15.4329190Z                                                                                                                                                                                                                                  as
2020-02-15T17:48:15.4329190Z                                                                                                                                                                                                                                  as
2020-02-15T17:48:15.4329294Z                                                                                                                                                                                                                                  &[&str; 1]),
2020-02-15T17:48:15.4329406Z                                                                                                                                                                                                                              (&(match (()
2020-02-15T17:48:15.4329630Z                                                                                                                                                                                                                                           ())
2020-02-15T17:48:15.4329741Z                                                                                                                                                                                                                                     {
2020-02-15T17:48:15.4329836Z                                                                                                                                                                                                                                     ()
2020-02-15T17:48:15.4329954Z                                                                                                                                                                                                                                     =>
2020-02-15T17:48:15.4329954Z                                                                                                                                                                                                                                     =>
2020-02-15T17:48:15.4330055Z                                                                                                                                                                                                                                     ([]
2020-02-15T17:48:15.4330148Z                                                                                                                                                                                                                                         as
2020-02-15T17:48:15.4330685Z                                                                                                                                                                                                                                         [std::fmt::ArgumentV1<'_>; 0]),
2020-02-15T17:48:15.4331076Z                                                                                                                                                                                                                                    as
2020-02-15T17:48:15.4331076Z                                                                                                                                                                                                                                    as
2020-02-15T17:48:15.4331648Z                                                                                                                                                                                                                                    [std::fmt::ArgumentV1<'_>; 0])
2020-02-15T17:48:15.4331950Z                                                                                                                                                                                                                                  as
2020-02-15T17:48:15.4332555Z                                                                                                                                                                                                                                  &[std::fmt::ArgumentV1<'_>; 0]))
2020-02-15T17:48:15.4333023Z                                                                                                                    std::fmt::Arguments<'_>))
2020-02-15T17:48:15.4333109Z                                as std::string::String);
2020-02-15T17:48:15.4333163Z                        (res as std::string::String)
2020-02-15T17:48:15.4333217Z                    } as std::string::String);
2020-02-15T17:48:15.4333217Z                    } as std::string::String);
2020-02-15T17:48:15.4333297Z               } as ())
2020-02-15T17:48:15.4333347Z pub type Foo = [i32; (3 as usize)];
2020-02-15T17:48:15.4333397Z pub struct Bar {
2020-02-15T17:48:15.4333514Z     pub x: [i32; (3 as usize)],
2020-02-15T17:48:15.4333562Z }
2020-02-15T17:48:15.4333612Z pub struct TupleBar([i32; (4 as usize)]);
2020-02-15T17:48:15.4333683Z pub enum Baz { BazVariant([i32; (5 as usize)]), }
2020-02-15T17:48:15.4333940Z pub fn id<T>(x: T) -> T ({ (x as T) } as T)
2020-02-15T17:48:15.4334003Z pub fn use_id() ({
2020-02-15T17:48:15.4334054Z                      let _ =
2020-02-15T17:48:15.4334129Z                          ((id::<[i32; (3 as usize)]> as
2020-02-15T17:48:15.4334428Z                               fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1
2020-02-15T17:48:15.4334573Z                                                                                i32),
2020-02-15T17:48:15.4334643Z                                                                            (2
2020-02-15T17:48:15.4334732Z                                                                                as
2020-02-15T17:48:15.4334812Z                                                                                i32),
2020-02-15T17:48:15.4334812Z                                                                                i32),
2020-02-15T17:48:15.4334873Z                                                                            (3
2020-02-15T17:48:15.4334941Z                                                                                as
2020-02-15T17:48:15.4338164Z                                                                                i32)]
2020-02-15T17:48:15.4338237Z                                                                              as
2020-02-15T17:48:15.4338298Z                                                                              [i32; 3]))
2020-02-15T17:48:15.4338377Z                              as [i32; 3]);
2020-02-15T17:48:15.4338428Z                  } as ())
2020-02-15T17:48:15.4338476Z fn main() ({ } as ())
2020-02-15T17:48:15.4339102Z ------------------------------------------
2020-02-15T17:48:15.4339160Z actual:
2020-02-15T17:48:15.4339779Z ------------------------------------------
2020-02-15T17:48:15.4339863Z #[prelude_import]
2020-02-15T17:48:15.4339863Z #[prelude_import]
2020-02-15T17:48:15.4339913Z use ::std::prelude::v1::*;
2020-02-15T17:48:15.4340027Z extern crate std;
2020-02-15T17:48:15.4340258Z // pretty-compare-only
2020-02-15T17:48:15.4340258Z // pretty-compare-only
2020-02-15T17:48:15.4340605Z // pretty-mode:hir,typed
2020-02-15T17:48:15.4340911Z // pp-exact:issue-4264.pp
2020-02-15T17:48:15.4340948Z 
2020-02-15T17:48:15.4341184Z // #4264 fixed-length vector types
2020-02-15T17:48:15.4341220Z 
2020-02-15T17:48:15.4341359Z pub fn foo(_: [i32; (3 as usize)]) ({ } as ())
2020-02-15T17:48:15.4341439Z pub fn bar() ({
2020-02-15T17:48:15.4341439Z pub fn bar() ({
2020-02-15T17:48:15.4341724Z                   const FOO: usize = ((5 as usize) - (4 as usize) as usize);
2020-02-15T17:48:15.4341807Z                   let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);
2020-02-15T17:48:15.4341855Z 
2020-02-15T17:48:15.4341908Z                   let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);
2020-02-15T17:48:15.4342008Z                   let _ =
2020-02-15T17:48:15.4342008Z                   let _ =
2020-02-15T17:48:15.4342065Z                       (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])
2020-02-15T17:48:15.4342568Z                             as &[i32; 3]) as *const _ as *const [i32; 3]) as
2020-02-15T17:48:15.4342658Z                           *const [i32; (3 as usize)] as *const [i32; 3]);
2020-02-15T17:48:15.4342724Z 
2020-02-15T17:48:15.4342753Z 
2020-02-15T17:48:15.4342781Z 
2020-02-15T17:48:15.4342826Z 
2020-02-15T17:48:15.4342826Z 
2020-02-15T17:48:15.4342854Z 
2020-02-15T17:48:15.4342883Z 
2020-02-15T17:48:15.4342911Z 
2020-02-15T17:48:15.4342939Z 
2020-02-15T17:48:15.4343002Z                   ({
2020-02-15T17:48:15.4343054Z                        let res =
2020-02-15T17:48:15.4343109Z                            ((::alloc::fmt::format as
2020-02-15T17:48:15.4343569Z                                 for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1
2020-02-15T17:48:15.4343666Z                                                                                                                     as
2020-02-15T17:48:15.4344504Z                                                                                                                     fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([("test"
2020-02-15T17:48:15.4344735Z                                                                                                                                                                                                                        &str)]
2020-02-15T17:48:15.4344901Z                                                                                                                                                                                                                      as
2020-02-15T17:48:15.4344999Z                                                                                                                                                                                                                      [&str; 1])
2020-02-15T17:48:15.4345152Z                                                                                                                                                                                                                    as
2020-02-15T17:48:15.4345152Z                                                                                                                                                                                                                    as
2020-02-15T17:48:15.4345260Z                                                                                                                                                                                                                    &[&str; 1]),
2020-02-15T17:48:15.4345498Z                                                                                                                                                                                                                (&(match (()
2020-02-15T17:48:15.4346519Z                                                                                                                                                                                                                             ())
2020-02-15T17:48:15.4346632Z                                                                                                                                                                                                                       {
2020-02-15T17:48:15.4346733Z                                                                                                                                                                                                                       ()
2020-02-15T17:48:15.4346839Z                                                                                                                                                                                                                       =>
2020-02-15T17:48:15.4346839Z                                                                                                                                                                                                                       =>
2020-02-15T17:48:15.4346937Z                                                                                                                                                                                                                       ([]
2020-02-15T17:48:15.4347026Z                                                                                                                                                                                                                           as
2020-02-15T17:48:15.4347136Z                                                                                                                                                                                                                           [std::fmt::ArgumentV1; 0]),
2020-02-15T17:48:15.4347353Z                                                                                                                                                                                                                      as
2020-02-15T17:48:15.4347353Z                                                                                                                                                                                                                      as
2020-02-15T17:48:15.4347448Z                                                                                                                                                                                                                      [std::fmt::ArgumentV1; 0])
2020-02-15T17:48:15.4347563Z                                                                                                                                                                                                                    as
2020-02-15T17:48:15.4347657Z                                                                                                                                                                                                                    &[std::fmt::ArgumentV1; 0]))
2020-02-15T17:48:15.4347835Z                                                                                                                    std::fmt::Arguments))
2020-02-15T17:48:15.4347896Z                                as std::string::String);
2020-02-15T17:48:15.4347967Z                        (res as std::string::String)
2020-02-15T17:48:15.4348022Z                    } as std::string::String);
2020-02-15T17:48:15.4348022Z                    } as std::string::String);
2020-02-15T17:48:15.4348154Z               } as ())
2020-02-15T17:48:15.4348204Z pub type Foo = [i32; (3 as usize)];
2020-02-15T17:48:15.4348274Z pub struct Bar {
2020-02-15T17:48:15.4348324Z     pub x: [i32; (3 as usize)],
2020-02-15T17:48:15.4348370Z }
2020-02-15T17:48:15.4348436Z pub struct TupleBar([i32; (4 as usize)]);
2020-02-15T17:48:15.4348490Z pub enum Baz { BazVariant([i32; (5 as usize)]), }
2020-02-15T17:48:15.4348874Z pub fn id<T>(x: T) -> T ({ (x as T) } as T)
2020-02-15T17:48:15.4349039Z pub fn use_id() ({
2020-02-15T17:48:15.4349097Z                      let _ =
2020-02-15T17:48:15.4349151Z                          ((id::<[i32; (3 as usize)]> as
2020-02-15T17:48:15.4349489Z                               fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1
2020-02-15T17:48:15.4349634Z                                                                                i32),
2020-02-15T17:48:15.4349706Z                                                                            (2
2020-02-15T17:48:15.4349781Z                                                                                as
2020-02-15T17:48:15.4349843Z                                                                                i32),
2020-02-15T17:48:15.4349843Z                                                                                i32),
2020-02-15T17:48:15.4349919Z                                                                            (3
2020-02-15T17:48:15.4349989Z                                                                                as
2020-02-15T17:48:15.4350050Z                                                                                i32)]
2020-02-15T17:48:15.4350128Z                                                                              as
2020-02-15T17:48:15.4350190Z                                                                              [i32; 3]))
2020-02-15T17:48:15.4350245Z                              as [i32; 3]);
2020-02-15T17:48:15.4350312Z                  } as ())
2020-02-15T17:48:15.4350370Z fn main() ({ } as ())
2020-02-15T17:48:15.4350734Z ------------------------------------------
2020-02-15T17:48:15.4350772Z 
2020-02-15T17:48:15.4350824Z 
2020-02-15T17:48:15.4350824Z 
2020-02-15T17:48:15.4375201Z [ERROR compiletest::runtest] fatal error, panic: "pretty-printed source does not match expected source\nexpected:\n------------------------------------------\n#[prelude_import]\nuse ::std::prelude::v1::*;\n#[macro_use]\nextern crate std;\n// pretty-compare-only\n// pretty-mode:hir,typed\n// pp-exact:issue-4264.pp\n\n// #4264 fixed-length vector types\n\npub fn foo(_: [i32; (3 as usize)]) ({ } as ())\n\npub fn bar() ({\n                  const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n                  let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _ =\n                      (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])\n                            as &[i32; 3]) as *const _ as *const [i32; 3]) as\n                          *const [i32; (3 as usize)] as *const [i32; 3]);\n\n\n\n\n\n\n\n\n\n                  ({\n                       let res =\n                           ((::alloc::fmt::format as\n                                for<\'r> fn(std::fmt::Arguments<\'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n                                                                                                                    as\n                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1<\'_>]) -> std::fmt::Arguments<\'_> {std::fmt::Arguments::<\'_>::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                                     as\n                                                                                                                                                                                                                                     &\'static str)]\n                                                                                                                                                                                                                                   as\n                                                                                                                                                                                                                                   [&str; 1])\n                                                                                                                                                                                                                                 as\n                                                                                                                                                                                                                                 &[&str; 1]),\n                                                                                                                                                                                                                             (&(match (()\n                                                                                                                                                                                                                                          as\n                                                                                                                                                                                                                                          ())\n                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                    ()\n                                                                                                                                                                                                                                    =>\n                                                                                                                                                                                                                                    ([]\n                                                                                                                                                                                                                                        as\n                                                                                                                                                                                                                                        [std::fmt::ArgumentV1<\'_>; 0]),\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                   as\n                                                                                                                                                                                                                                   [std::fmt::ArgumentV1<\'_>; 0])\n                                                                                                                                                                                                                                 as\n                                                                                                                                                                                                                                 &[std::fmt::ArgumentV1<\'_>; 0]))\n                                                                                                                   as\n                                                                                                                   std::fmt::Arguments<\'_>))\n                               as std::string::String);\n                       (res as std::string::String)\n                   } as std::string::String);\n              } as ())\npub type Foo = [i32; (3 as usize)];\npub struct Bar {\n    pub x: [i32; (3 as usize)],\n}\npub struct TupleBar([i32; (4 as usize)]);\npub enum Baz { BazVariant([i32; (5 as usize)]), }\npub fn id<T>(x: T) -> T ({ (x as T) } as T)\npub fn use_id() ({\n                     let _ =\n                         ((id::<[i32; (3 as usize)]> as\n                              fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1\n                                                                               as\n                                                                               i32),\n                                                                           (2\n                                                                               as\n                                                                               i32),\n                                                                           (3\n                                                                               as\n                                                                               i32)]\n                                                                             as\n                                                                             [i32; 3]))\n                             as [i32; 3]);\n                 } as ())\nfn main() ({ } as ())\n\n------------------------------------------\nactual:\n------------------------------------------\n#[prelude_import]\nuse ::std::prelude::v1::*;\n#[macro_use]\nextern crate std;\n// pretty-compare-only\n// pretty-mode:hir,typed\n// pp-exact:issue-4264.pp\n\n// #4264 fixed-length vector types\n\npub fn foo(_: [i32; (3 as usize)]) ({ } as ())\n\npub fn bar() ({\n                  const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n                  let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _ =\n                      (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])\n                            as &[i32; 3]) as *const _ as *const [i32; 3]) as\n                          *const [i32; (3 as usize)] as *const [i32; 3]);\n\n\n\n\n\n\n\n\n\n                  ({\n                       let res =\n                           ((::alloc::fmt::format as\n                                for<\'r> fn(std::fmt::Arguments<\'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n                                                                                                                    as\n                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                       as\n                                                                                                                                                                                                                       &str)]\n                                                                                                                                                                                                                     as\n                                                                                                                                                                                                                     [&str; 1])\n                                                                                                                                                                                                                   as\n                                                                                                                                                                                                                   &[&str; 1]),\n                                                                                                                                                                                                               (&(match (()\n                                                                                                                                                                                                                            as\n                                                                                                                                                                                                                            ())\n                                                                                                                                                                                                                      {\n                                                                                                                                                                                                                      ()\n                                                                                                                                                                                                                      =>\n                                                                                                                                                                                                                      ([]\n                                                                                                                                                                                                                          as\n                                                                                                                                                                                                                          [std::fmt::ArgumentV1; 0]),\n                                                                                                                                                                                                                  }\n                                                                                                                                                                                                                     as\n                                                                                                                                                                                                                     [std::fmt::ArgumentV1; 0])\n                                                                                                                                                                                                                   as\n                                                                                                                                                                                                                   &[std::fmt::ArgumentV1; 0]))\n                                                                                                                   as\n                                                                                                                   std::fmt::Arguments))\n                               as std::string::String);\n                       (res as std::string::String)\n                   } as std::string::String);\n              } as ())\npub type Foo = [i32; (3 as usize)];\npub struct Bar {\n    pub x: [i32; (3 as usize)],\n}\npub struct TupleBar([i32; (4 as usize)]);\npub enum Baz { BazVariant([i32; (5 as usize)]), }\npub fn id<T>(x: T) -> T ({ (x as T) } as T)\npub fn use_id() ({\n                     let _ =\n                         ((id::<[i32; (3 as usize)]> as\n                              fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1\n                                                                               as\n                                                                               i32),\n                                                                           (2\n                                                                               as\n                                                                               i32),\n                                                                           (3\n                                                                               as\n                                                                               i32)]\n                                                                             as\n                                                                             [i32; 3]))\n                             as [i32; 3]);\n                 } as ())\nfn main() ({ } as ())\n\n------------------------------------------\n\n"
2020-02-15T17:48:15.4379938Z thread '[pretty] pretty/issue-4264.rs' panicked at 'fatal error', src/tools/compiletest/src/runtest.rs:2124:9
2020-02-15T17:48:15.4380085Z 
2020-02-15T17:48:15.4388859Z 
2020-02-15T17:48:15.4389025Z failures:
2020-02-15T17:48:15.4389618Z     [pretty] pretty/issue-4264.rs
2020-02-15T17:48:15.4389618Z     [pretty] pretty/issue-4264.rs
2020-02-15T17:48:15.4390064Z 
2020-02-15T17:48:15.4390730Z test result: FAILED. 60 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out
2020-02-15T17:48:15.4390801Z 
2020-02-15T17:48:15.4391099Z thread 'main' panicked at 'Some tests failed', src/tools/compiletest/src/main.rs:348:22
2020-02-15T17:48:15.4394449Z 
2020-02-15T17:48:15.4394568Z 
2020-02-15T17:48:15.4401459Z command did not execute successfully: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest" "--compile-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib" "--run-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib" "--rustc-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "--src-base" "/checkout/src/test/pretty" "--build-base" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/pretty" "--stage-id" "stage2-x86_64-unknown-linux-gnu" "--mode" "pretty" "--target" "x86_64-unknown-linux-gnu" "--host" "x86_64-unknown-linux-gnu" "--llvm-filecheck" "/usr/lib/llvm-7/bin/FileCheck" "--host-rustcflags" "-Crpath -O -Cdebuginfo=0 -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--target-rustcflags" "-Crpath -O -Cdebuginfo=0 -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--docck-python" "/usr/bin/python2.7" "--lldb-python" "/usr/bin/python2.7" "--gdb" "/usr/bin/gdb" "--quiet" "--llvm-version" "7.0.0\n" "--system-llvm" "--cc" "" "--cxx" "" "--cflags" "" "--llvm-components" "" "--adb-path" "adb" "--adb-test-dir" "/data/tmp/work" "--android-cross-path" "" "--color" "always"
2020-02-15T17:48:15.4402211Z 
2020-02-15T17:48:15.4402363Z 
2020-02-15T17:48:15.4411965Z failed to run: /checkout/obj/build/bootstrap/debug/bootstrap test
2020-02-15T17:48:15.4412036Z Build completed unsuccessfully in 1:12:21
2020-02-15T17:48:15.4412036Z Build completed unsuccessfully in 1:12:21
2020-02-15T17:48:15.4465921Z == clock drift check ==
2020-02-15T17:48:15.4490708Z   local time: Sat Feb 15 17:48:15 UTC 2020
2020-02-15T17:48:15.6139949Z   network time: Sat, 15 Feb 2020 17:48:15 GMT
2020-02-15T17:48:15.6140702Z == end clock drift check ==
2020-02-15T17:48:16.9108355Z 
2020-02-15T17:48:16.9216228Z ##[error]Bash exited with code '1'.
2020-02-15T17:48:16.9227155Z ##[section]Finishing: Run build
2020-02-15T17:48:16.9251313Z ##[section]Starting: Checkout rust-lang/rust@refs/pull/69189/merge to s
2020-02-15T17:48:16.9252944Z Task         : Get sources
2020-02-15T17:48:16.9252987Z Description  : Get sources from a repository. Supports Git, TfsVC, and SVN repositories.
2020-02-15T17:48:16.9253026Z Version      : 1.0.0
2020-02-15T17:48:16.9253077Z Author       : Microsoft
2020-02-15T17:48:16.9253077Z Author       : Microsoft
2020-02-15T17:48:16.9253118Z Help         : [More Information](https://go.microsoft.com/fwlink/?LinkId=798199)
2020-02-15T17:48:16.9253173Z ==============================================================================
2020-02-15T17:48:17.3128038Z Cleaning any cached credential from repository: rust-lang/rust (GitHub)
2020-02-15T17:48:17.3166881Z ##[section]Finishing: Checkout rust-lang/rust@refs/pull/69189/merge to s
2020-02-15T17:48:17.3279212Z Cleaning up task key
2020-02-15T17:48:17.3279899Z Start cleaning up orphan processes.
2020-02-15T17:48:17.3596579Z Terminate orphan process: pid (5032) (python)
2020-02-15T17:48:17.3620654Z ##[section]Finishing: Finalize Job
