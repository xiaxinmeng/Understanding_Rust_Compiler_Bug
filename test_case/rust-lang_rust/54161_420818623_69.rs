\n\nIf the trait `Foo` was deriving from something like `Super<String>` or\n`Super<T>` (where `Foo` itself is `Foo<T>`), this is okay, because given a type\n`get_a()` will definitely return an object of that type.\n\nHowever, if it derives from `Super<Self>`, even though `Super` is object safe,\nthe method `get_a()` would return an object of unknown type when called on the\nfunction. `Self` type parameters let us make object safe traits no longer safe,\nso they are forbidden when specifying supertraits.\n\nThere's no easy fix for this, generally code will need to be refactored so that\nyou no longer need to derive from `Super<Self>`.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/traits/trait-item-privacy.rs","byte_start":2802,"byte_end":2806,"line_start":111,"line_end":111,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    C::A; //~ ERROR associated constant `A` is private","highlight_start":5,"highlight_end":9}],"label":"the trait `assoc_const::C` cannot be made into an object","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait cannot contain associated consts like `C`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the trait cannot contain associated consts like `B`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the trait cannot contain associated consts like `A`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0038]: the trait `assoc_const::C` cannot be made into an object\n  --> /checkout/src/test/ui/traits/trait-item-privacy.rs:111:5\n   |\nLL |     C::A; //~ ERROR associated constant `A` is private\n   |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n   |\n   = note: the trait cannot contain associated consts like `C`\n   = note: the trait cannot contain associated consts like `B`\n   = note: the trait cannot contain associated consts like `A`\n\n"}
[00:51:58] {"message":"ambiguous associated type","code":{"code":"E0223","explanation":"\nAn attempt was made to retrieve an associated type, but the type was ambiguous.\nFor example:\n\n