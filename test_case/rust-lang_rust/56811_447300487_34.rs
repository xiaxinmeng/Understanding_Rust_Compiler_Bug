\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\ntart":1469,"byte_end":1471,"line_start":62,"line_end":62,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    || x; //~ ERROR","highlight_start":5,"highlight_end":7}],"label":"value used here after partial move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0382]: use of moved value: `x`\n  --> /checkout/src/test/ui/nll/closure-access-spans.rs:62:5\n   |\nLL |     let r = x;\n   |             - value moved here\nLL |     || x; //~ ERROR\n   |     ^^ - use occurs due to use in closure\n   |     |\n   |     value used here after partial move\n   |\n   = note: move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n\n"}
[00:47:58] {"message":"aborting due to 9 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 9 previous errors\n\n"}
[00:47:58] {"message":"Some errors occurred: E0382, E0499, E0500, E0502, E0503, E0505.","code":null,"level":"","spans":[],"children":[],"rendered":"Some errors occurred: E0382, E0499, E0500, E0502, E0503, E0505.\n"}
[00:47:58] {"message":"For more information about an error, try `rustc --explain E0382`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about an error, try `rustc --explain E0382`.\n"}
[00:47:58] ------------------------------------------
[00:47:58] 
[00:47:58] 
[00:47:58] thread '[()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n