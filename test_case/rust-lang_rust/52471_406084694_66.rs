\n\n* The `#[repr(C)]` attribute can only be placed on structs and enums.\n* The `#[repr(packed)]` and `#[repr(simd)]` attributes only work on structs.\n* The `#[repr(u8)]`, `#[repr(i16)]`, etc attributes only work on enums.\n\nThese attributes do not work on typedefs, since typedefs are just aliases.\n\nRepresentations like `#[repr(u8)]`, `#[repr(i64)]` are for selecting the\ndiscriminant size for enums with no data fields on any of the variants, e.g.\n`enum Color {Red, Blue, Green}`, effectively setting the size of the enum to\nthe size of the provided type. Such an enum can be cast to a value of the same\ntype as well. In short, `#[repr(u8)]` makes the enum behave like an integer\nwith a constrained set of allowed values.\n\nOnly field-less enums can be cast to numerical primitives, so this attribute\nwill not apply to structs.\n\n`#[repr(packed)]` reduces padding to make the struct size smaller. The\nrepresentation of enums isn't strictly defined in Rust, and this attribute\nwon't work on enums.\n\n`#[repr(simd)]` will give a struct consisting of a homogeneous series of machine\ntypes (i.e. `u8`, `i32`, etc) a representation that permits vectorization via\nSIMD. This doesn't make much sense for enums since they don't consist of a\nsingle list of data.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/attr-usage-repr.rs","byte_start":1081,"byte_end":1100,"line_start":39,"line_end":39,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"enum ESimd { A, B }","highlight_start":1,"highlight_end":20}],"label":"not a struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/attr-usage-repr.rs","byte_start":1025,"byte_end":1029,"line_start":38,"line_end":38,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"#[repr(simd)] //~ ERROR: attribute should be applied to struct","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0517]: attribute should be applied to struct\n  --> /checkout/src/test/ui/attr-usage-repr.rs:38:8\n   |\nLL | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n   |        ^^^^\nLL | enum ESimd { A, B }\n   | ------------------- not a struct\n\n"}
[00:50:15] {"message":"aborting due to 5 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 5 previous errors\n\n"}
[00:50:15] {"message":"For more information about this error, try `rustc --explain E0517`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0517`.\n"}
[00:50:15] fatal runtime error: failed to initiate panic, error 5
[00:50:15] ------------------------------------------
[00:50:15] 
[00:50:15] thread '[ui] ui/attr-usage-repr.rs' panicked at 'explicit panic', tools/compiletest/src/runtest.rs:3139:9
[00:50:15] 
[00:50:15] 
[00:50:15] ---- [ui] ui/augmented-assignments.rs stdout ----
[00:50:15] 
[00:50:15] error: Error: expected failure status (Some(101)) but received status None.
[00:50:15] status: signal: 6
[00:50:15] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/ui/augmented-assignments.rs" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/augmented-assignments/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/augmented-assignments/auxiliary" "-A" "unused"
[00:50:15] ------------------------------------------
[00:50:15] 
[00:50:15] ------------------------------------------
[00:50:15] stderr:
[00:50:15] stderr:
[00:50:15] ------------------------------------------
[00:50:15] {"message":"cannot borrow immutable local variable `y` as mutable","code":{"code":"E0596","explanation":"\nThis error occurs because you tried to mutably borrow a non-mutable variable.\n\nExample of erroneous code:\n\n