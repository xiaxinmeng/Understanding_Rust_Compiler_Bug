compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T:***@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":17017,"byte_end":17061,"line_start":571,"line_end":571,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":23499,"byte_end":23541,"line_start":762,"line_end":762,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":22476,"byte_end":22518,"line_start":729,"line_end":729,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":19624,"byte_end":19703,"line_start":672,"line_end":672,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":19053,"byte_end":19359,"line_start":651,"line_end":659,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":17017,"byte_end":17061,"line_start":571,"line_end":571,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/auxiliary/proc_macro_attr.rs","byte_start":803,"byte_end":1030,"line_start":26,"line_end":31,"column_start":32,"column_end":19,"is_primary":false,"text":[{"text":"                let my_block = quote_spanned!( brace.span => {","highlight_start":32,"highlight_end":63},{"text":"                    // Should not trigger `empty_line_after_outer_attr`","highlight_start":***@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":19401,"byte_end":19723,"line_start":665,"line_end":675,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":19756,"byte_end":22527,"line_start":679,"line_end":731,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__rt::ext::*;","highlight_start":1,"highlight_end":34},{"text":"        let has_iter = $crate::__rt::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":68},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__rt::HasIterator = has_iter;","highlight_start":1,"highlight_end":53},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":***@) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_at(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_bang(&mut $tokens, $span);","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_caret(&mut $tokens, $span);","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_caret_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident :) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_colon(&mut $tokens, $span);","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ::) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_colon2(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ,) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_comma(&mut $tokens, $span);","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_div(&mut $tokens, $span);","highlight_start":1,"highlight_end":53},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_div_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident .) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_dot(&mut $tokens, $span);","highlight_start":1,"highlight_end":53},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_dot2(&mut $tokens, $span);","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ...) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__rt::push_dot3(&mut $tokens, $span);","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__rt::push_dot_dot_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ==) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_eq_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_ge(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_gt(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_le(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_lt(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_mul_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_ne(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_or_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ||) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_or_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident #) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_pound(&mut $tokens, $span);","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ?) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_question(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ->) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_rarrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <-) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_larrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_rem(&mut $tokens, $span);","highlight_start":1,"highlight_end":53},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_rem_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_fat_arrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ;) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_semi(&mut $tokens, $span);","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_shl(&mut $tokens, $span);","highlight_start":1,"highlight_end":53},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__rt::push_shl_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_shr(&mut $tokens, $span);","highlight_start":1,"highlight_end":53},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__rt::push_shr_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_star(&mut $tokens, $span);","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__rt::push_sub(&mut $tokens, $span);","highlight_start":1,"highlight_end":53},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__rt::push_sub_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $other:tt) => {","highlight_start":1,"highlight_end":47},{"text":"        $crate::__rt::parse(&mut $tokens, $span, stringify!($other));","highlight_start":1,"highlight_end":70},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":16842,"byte_end":17082,"line_start":567,"line_end":574,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__rt::TokenStream::new();","highlight_start":1,"highlight_end":55},{"text":"        let _span: $crate::__rt::Span = $span;","highlight_start":1,"highlight_end":47},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":18964,"byte_end":19368,"line_start":649,"line_end":661,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":19401,"byte_end":19723,"line_start":665,"line_end":675,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":19756,"byte_end":22527,"line_start":679,"line_end":731,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__rt::ext::*;","highlight_start":1,"highlight_end":34},{"text":"        let has_iter = $crate::__rt::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":68},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__rt::HasIterator = has_iter;","highlight_start":1,"highlight_end":53},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__rt::ext::*;","highlight_start":1,"highlight_end":34},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__rt::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":68},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__rt::HasIterator = has_iter;","highlight_start":1,"highlight_end":53},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required because of the requirements on the impl of `quote::ToTokens` for `&mut syn::Block`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `quote::ToTokens::to_tokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `syn::Block: quote::ToTokens` is not satisfied\n  --> tests/ui/auxiliary/proc_macro_attr.rs:26:32\n   |\nLL |                   let my_block = quote_spanned!( brace.span => {\n   |  ________________________________^\nLL | |                     // Should not trigger `empty_line_after_outer_attr`\nLL | |                     #[crate_type = \"lib\"]\nLL | |                     #sig #block\nLL | |                     Vec::new()\nLL | |                 });\n   | |__________________^ the trait `quote::ToTokens` is not implemented for `syn::Block`\n   |\n   = note: required because of the requirements on the impl of `quote::ToTokens` for `&mut syn::Block`\n   = note: required by `quote::ToTokens::to_tokens`\n   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"the trait bound `quote::__rt::TokenStream: syn::export::ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n