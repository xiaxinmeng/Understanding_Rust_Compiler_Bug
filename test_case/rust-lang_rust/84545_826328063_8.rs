\n\n[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html\n"},"level":"error","spans":[{"file_name":"tests/run-pass/float.rs","byte_start":15450,"byte_end":15470,"line_start":348,"line_end":348,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        assert_eq!(black_box::<$src_ty>($val) as $dest_ty, $expected,","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/run-pass/float.rs","byte_start":16157,"byte_end":16208,"line_start":369,"line_end":369,"column_start":9,"column_end":60,"is_primary":false,"text":[{"text":"        test!($fty::NEG_INFINITY, $fty -> $ity, $ity::MIN);","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/run-pass/float.rs","byte_start":16826,"byte_end":16863,"line_start":383,"line_end":383,"column_start":9,"column_end":46,"is_primary":false,"text":[{"text":"        common_fptoi_tests!(f32 -> $($ity)+);","highlight_start":9,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/run-pass/float.rs","byte_start":17503,"byte_end":17560,"line_start":406,"line_end":406,"column_start":5,"column_end":62,"is_primary":false,"text":[{"text":"    common_fptoi_tests!(f* -> i8 i16 i32 i64 u8 u16 u32 u64);","highlight_start":5,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"common_fptoi_tests!","def_site_span":{"file_name":"tests/run-pass/float.rs","byte_start":15972,"byte_end":16918,"line_start":365,"line_end":386,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! common_fptoi_tests {","highlight_start":1,"highlight_end":34},{"text":"    ($fty:ident -> $($ity:ident)+) => ({ $(","highlight_start":1,"highlight_end":44},{"text":"        test!($fty::NAN, $fty -> $ity, 0);","highlight_start":1,"highlight_end":43},{"text":"        test!($fty::INFINITY, $fty -> $ity, $ity::MAX);","highlight_start":1,"highlight_end":56},{"text":"        test!($fty::NEG_INFINITY, $fty -> $ity, $ity::MIN);","highlight_start":1,"highlight_end":60},{"text":"        // These two tests are not solely float->int tests, in particular the latter relies on","highlight_start":1,"highlight_end":95},{"text":"        // `u128::MAX as f32` not being UB. But that's okay, since this file tests int->float","highlight_start":1,"highlight_end":94},{"text":"        // as well, the test is just slightly misplaced.","highlight_start":1,"highlight_end":57},{"text":"        test!($ity::MIN as $fty, $fty -> $ity, $ity::MIN);","highlight_start":1,"highlight_end":59},{"text":"        test!($ity::MAX as $fty, $fty -> $ity, $ity::MAX);","highlight_start":1,"highlight_end":59},{"text":"        test!(0., $fty -> $ity, 0);","highlight_start":1,"highlight_end":36},{"text":"        test!($fty::MIN_POSITIVE, $fty -> $ity, 0);","highlight_start":1,"highlight_end":52},{"text":"        test!(-0.9, $fty -> $ity, 0);","highlight_start":1,"highlight_end":38},{"text":"        test!(1., $fty -> $ity, 1);","highlight_start":1,"highlight_end":36},{"text":"        test!(42., $fty -> $ity, 42);","highlight_start":1,"highlight_end":38},{"text":"    )+ });","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (f* -> $($ity:ident)+) => ({","highlight_start":1,"highlight_end":33},{"text":"        common_fptoi_tests!(f32 -> $($ity)+);","highlight_start":1,"highlight_end":46},{"text":"        common_fptoi_tests!(f64 -> $($ity)+);","highlight_start":1,"highlight_end":46},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"common_fptoi_tests!","def_site_span":{"file_name":"tests/run-pass/float.rs","byte_start":15972,"byte_end":16918,"line_start":365,"line_end":386,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! common_fptoi_tests {","highlight_start":1,"highlight_end":34},{"text":"    ($fty:ident -> $($ity:ident)+) => ({ $(","highlight_start":1,"highlight_end":44},{"text":"        test!($fty::NAN, $fty -> $ity, 0);","highlight_start":1,"highlight_end":43},{"text":"        test!($fty::INFINITY, $fty -> $ity, $ity::MAX);","highlight_start":1,"highlight_end":56},{"text":"        test!($fty::NEG_INFINITY, $fty -> $ity, $ity::MIN);","highlight_start":1,"highlight_end":60},{"text":"        // These two tests are not solely float->int tests, in particular the latter relies on","highlight_start":1,"highlight_end":95},{"text":"        // `u128::MAX as f32` not being UB. But that's okay, since this file tests int->float","highlight_start":1,"highlight_end":94},{"text":"        // as well, the test is just slightly misplaced.","highlight_start":1,"highlight_end":57},{"text":"        test!($ity::MIN as $fty, $fty -> $ity, $ity::MIN);","highlight_start":1,"highlight_end":59},{"text":"        test!($ity::MAX as $fty, $fty -> $ity, $ity::MAX);","highlight_start":1,"highlight_end":59},{"text":"        test!(0., $fty -> $ity, 0);","highlight_start":1,"highlight_end":36},{"text":"        test!($fty::MIN_POSITIVE, $fty -> $ity, 0);","highlight_start":1,"highlight_end":52},{"text":"        test!(-0.9, $fty -> $ity, 0);","highlight_start":1,"highlight_end":38},{"text":"        test!(1., $fty -> $ity, 1);","highlight_start":1,"highlight_end":36},{"text":"        test!(42., $fty -> $ity, 42);","highlight_start":1,"highlight_end":38},{"text":"    )+ });","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (f* -> $($ity:ident)+) => ({","highlight_start":1,"highlight_end":33},{"text":"        common_fptoi_tests!(f32 -> $($ity)+);","highlight_start":1,"highlight_end":46},{"text":"        common_fptoi_tests!(f64 -> $($ity)+);","highlight_start":1,"highlight_end":46},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"test!","def_site_span":{"file_name":"tests/run-pass/float.rs","byte_start":15261,"byte_end":15970,"line_start":345,"line_end":363,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! test {","highlight_start":1,"highlight_end":20},{"text":"    ($val:expr, $src_ty:ident -> $dest_ty:ident, $expected:expr) => (","highlight_start":1,"highlight_end":70},{"text":"        // black_box disables constant evaluation to test run-time conversions:","highlight_start":1,"highlight_end":80},{"text":"        assert_eq!(black_box::<$src_ty>($val) as $dest_ty, $expected,","highlight_start":1,"highlight_end":70},{"text":"                    \"run-time {} -> {}\", stringify!($src_ty), stringify!($dest_ty));","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            const X: $src_ty = $val;","highlight_start":1,"highlight_end":37},{"text":"            const Y: $dest_ty = X as $dest_ty;","highlight_start":1,"highlight_end":47},{"text":"            assert_eq!(Y, $expected,","highlight_start":1,"highlight_end":37},{"text":"                        \"const eval {} -> {}\", stringify!($src_ty), stringify!($dest_ty));","highlight_start":1,"highlight_end":91},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($fval:expr, f* -> $ity:ident, $ival:expr) => (","highlight_start":1,"highlight_end":52},{"text":"        test!($fval, f32 -> $ity, $ival);","highlight_start":1,"highlight_end":42},{"text":"        test!($fval, f64 -> $ity, $ival);","highlight_start":1,"highlight_end":42},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"see issue #64102 <https://github.com/rust-lang/rust/issues/64102> for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"add `#![feature(bench_black_box)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"error[E0658]: use of unstable library feature 'bench_black_box'\n   --> tests/run-pass/float.rs:348:20\n    |\n348 |         assert_eq!(black_box::<$src_ty>($val) as $dest_ty, $expected,\n    |                    ^^^^^^^^^^^^^^^^^^^^\n...\n406 |     common_fptoi_tests!(f* -> i8 i16 i32 i64 u8 u16 u32 u64);\n    |     --------------------------------------------------------- in this macro invocation\n    |\n    = note: see issue #64102 <https://github.com/rust-lang/rust/issues/64102> for more information\n    = help: add `#![feature(bench_black_box)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"}
{"message":"use of unstable library feature 'bench_black_box'","code":{"code":"E0658","explanation":"An unstable feature was used.\n\nErroneous code example:\n\n