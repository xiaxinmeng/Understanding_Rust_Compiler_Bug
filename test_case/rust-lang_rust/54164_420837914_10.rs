\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/nll/user-annotations/patterns.rs","byte_start":1077,"byte_end":1090,"line_start":53,"line_end":53,"column_start":41,"column_end":54,"is_primary":true,"text":[{"text":"    let _: Vec<&'static String> = vec![&String::new()];","highlight_start":41,"highlight_end":54}],"label":"creates a temporary which is freed while still in use","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/nll/user-annotations/patterns.rs","byte_start":1091,"byte_end":1092,"line_start":53,"line_end":53,"column_start":55,"column_end":56,"is_primary":false,"text":[{"text":"    let _: Vec<&'static String> = vec![&String::new()];","highlight_start":55,"highlight_end":56}],"label":"temporary value is freed at the end of this statement","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the static lifetime...","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0713]: temporary value borrowed for too long\n  --> /checkout/src/test/ui/nll/user-annotations/patterns.rs:53:41\n   |\nLL |     let _: Vec<&'static String> = vec![&String::new()];\n   |                                         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n   |                                         |\n   |                                         creates a temporary which is freed while still in use\n   |\n   = note: borrowed value must be valid for the static lifetime...\n\n"}
[00:54:02] {"message":"temporary value borrowed for too long","code":{"code":"E0713","explanation":"\nWhen you write `&expr` and `expr` is not a \"path\" rooted in some\nvariable (e.g., `&foo.bar`) but rather something that creates\na new value (e.g., `&foo()`), a temporary will be created:\n\n