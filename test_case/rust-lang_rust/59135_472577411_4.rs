\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/async-fn-multiple-lifetimes.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":3,"column_end":3,"is_primary":true,"text":[{"text":") {}","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/async-fn-multiple-lifetimes.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":3,"column_end":3,"is_primary":false,"text":[{"text":") {}","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `existential type`","def_site_span":{"file_name":"/checkout/src/test/ui/async-fn-multiple-lifetimes.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":3,"column_end":3,"is_primary":false,"text":[{"text":") {}","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"...so that the type `impl std::future::Future` will meet its required lifetime bounds","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/async-fn-multiple-lifetimes.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":3,"column_end":3,"is_primary":true,"text":[{"text":") {}","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/async-fn-multiple-lifetimes.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":3,"column_end":3,"is_primary":false,"text":[{"text":") {}","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `existential type`","def_site_span":{"file_name":"/checkout/src/test/ui/async-fn-multiple-lifetimes.rs","byte_start":396,"byte_end":396,"line_start":14,"line_end":14,"column_start":3,"column_end":3,"is_primary":false,"text":[{"text":") {}","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider adding an explicit lifetime bound  `'c` to `impl for<'b> Add<&'b u8>`...","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/async-fn-multiple-lifetimes.rs","byte_start":353,"byte_end":377,"line_start":12,"line_end":12,"column_start":8,"column_end":32,"is_primary":true,"text":[{"text":"    _: impl for<'b> Add<&'b u8>,","highlight_start":8,"highlight_end":32}],"label":null,"suggested_replacement":"impl for<'b> Add<&'b u8> + 'c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error[E0309]: the parameter type `impl for<'b> Add<&'b u8>` may not live long enough\n  --> /checkout/src/test/ui/async-fn-multiple-lifetimes.rs:14:3\n   |\nLL | ) {}\n   |   ^\n   |\nnote: ...so that the type `impl std::future::Future` will meet its required lifetime bounds\n  --> /checkout/src/test/ui/async-fn-multiple-lifetimes.rs:14:3\n   |\nLL | ) {}\n   |   ^\nhelp: consider adding an explicit lifetime bound  `'c` to `impl for<'b> Add<&'b u8>`...\n   |\nLL |     _: impl for<'b> Add<&'b u8> + 'c,\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:15:28] {"message":"the parameter type `impl for<'a> Add<&'a u8>` may not live long enough","code":{"code":"E0309","explanation":"\nThe type definition contains some field whose type\nrequires an outlives annotation. Outlives annotations\n(e.g., `T: 'a`) are used to guarantee that all the data in T is valid\nfor at least the lifetime `'a`. This scenario most commonly\narises when the type contains an associated type reference\nlike `<T as SomeTrait<'a>>::Output`, as shown in this example:\n\n