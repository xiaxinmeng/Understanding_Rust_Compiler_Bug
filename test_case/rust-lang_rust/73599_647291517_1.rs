\n\nThis error occurs when the compiler is unable to infer the concrete type of a\nvariable. It can occur in several cases, the most common being a mismatch\nbetween two types: the type the author explicitly assigned, and the type the\ncompiler inferred.\n"},"level":"error","spans":[{"file_name":"tests/ui/auxiliary/proc_macro_attr.rs","byte_start":819,"byte_end":829,"line_start":26,"line_end":26,"column_start":48,"column_end":58,"is_primary":true,"text":[{"text":"                let my_block = quote_spanned!( brace.span => {","highlight_start":48,"highlight_end":58}],"label":"expected struct `quote::__rt::Span`, found struct `syn::export::Span`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":16981,"byte_end":16999,"line_start":570,"line_end":570,"column_start":20,"column_end":38,"is_primary":false,"text":[{"text":"        let _span: $crate::__rt::Span = $span;","highlight_start":20,"highlight_end":38}],"label":"expected due to this","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/ui/auxiliary/proc_macro_attr.rs","byte_start":803,"byte_end":1030,"line_start":26,"line_end":31,"column_start":32,"column_end":19,"is_primary":false,"text":[{"text":"                let my_block = quote_spanned!( brace.span => {","highlight_start":32,"highlight_end":63},{"text":"                    // Should not trigger `empty_line_after_outer_attr`","highlight_start":1,"highlight_end":72},{"text":"                    #[crate_type = \"lib\"]","highlight_start":1,"highlight_end":42},{"text":"                    #sig #block","highlight_start":1,"highlight_end":32},{"text":"                    Vec::new()","highlight_start":1,"highlight_end":31},{"text":"                });","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote_spanned!","def_site_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.2/src/lib.rs","byte_start":16842,"byte_end":17082,"line_start":567,"line_end":574,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":1},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":1},{"text":"        let mut _s = $crate::__rt::TokenStream::new();","highlight_start":1,"highlight_end":1},{"text":"        let _span: $crate::__rt::Span = $span;","highlight_start":1,"highlight_end":1},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":1},{"text":"        _s","highlight_start":1,"highlight_end":1},{"text":"    }};","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"perhaps two different versions of crate `proc_macro2` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0308]: mismatched types\n  --> tests/ui/auxiliary/proc_macro_attr.rs:26:48\n   |\nLL |                   let my_block = quote_spanned!( brace.span => {\n   |                                  -               ^^^^^^^^^^ expected struct `quote::__rt::Span`, found struct `syn::export::Span`\n   |  ________________________________|\n   | |\nLL | |                     // Should not trigger `empty_line_after_outer_attr`\nLL | |                     #[crate_type = \"lib\"]\nLL | |                     #sig #block\nLL | |                     Vec::new()\nLL | |                 });\n   | |__________________- expected due to this\n   |\n   = note: perhaps two different versions of crate `proc_macro2` are being used?\n\n"}
{"message":"the trait bound `syn::MethodSig: quote::ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n