\n\nHere, the supertrait might have methoduggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait cannot require that `Self : Sized`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0038]: the trait `syntax::ext::base::MacResult` cannot be made into an object\n  --> /checkout/src/test/ui-fulldeps/auxiliary/macro_crate_test.rs:48:1\n   |\nLL | / fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\nLL | |                    -> Box<MacResult+'static> {\nLL | |     if !tts.is_empty() {\nLL | |         cx.span_fatal(sp, \"make_a_1 takes no arguments\");\nLL | |     }\nLL | |     MacEager::expr(quote_expr!(cx, 1))\nLL | | }\n   | |_^ the trait `syntax::ext::base::MacResult` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n\n"}
[00:57:27] {"message":"the trait `syntax::ext::base::MacResult` cannot be made into an object","code":{"code":"E0038","explanation":"\nTrait objects like `Box<Trait>` can only be constructed when certain\nrequirements are satisfied by the trait in question.\n\nTrait objects are a form of dynamic dispatch and use a dynamically sized type\nfor the inner type. So, for a given trait `Trait`, when `Trait` is treated as a\ntype, as in `Box<Trait>`, the inner type is 'unsized'. In such cases the boxed\npointer is a 'fat pointer' that contains an extra pointer to a table of methods\n(among other things) for dynamic dispatch. This design mandates some\nrestrictions on the types of traits that are allowed to be used in trait\nobjects, which are collectively termed as 'object safety' rules.\n\nAttempting toe to all other implementers, including\n`Box<Trait>` which is itself sized (assuming you `impl Trait for Box<Trait>`).\n\n