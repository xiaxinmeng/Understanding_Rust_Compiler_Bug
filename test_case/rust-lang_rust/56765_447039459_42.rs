\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`.  Implicit\ncloning is more convenient in this case. We can mark our own tsted_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/binop/binop-consume-args.rs","byte_start":1523,"byte_end":1526,"line_start":46,"line_end":46,"column_start":11,"column_end":14,"is_primary":false,"text":[{"text":"    lhs & rhs;","highlight_start":11,"highlight_end":14}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move occurs because `rhs` has type `B`, which does not implement the `Copy` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0382]: use of moved value: `rhs`\n  --> /checkout/src/test/ui/binop/binop-consume-args.rs:48:10\n   |\nLL |     lhs & rhs;\n   |           --- value moved here\nLL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\nLL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n   |          ^^^ value used here after move\n   |\n   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n\n"}
[00:47:45] {"message":"use of moved value: `lhs`","code":{"code":"E0382","explanation":"\nThis error occurs when an attempt is made to use a variable after its contents\nhave been moved elsewhere. For example:\n\n