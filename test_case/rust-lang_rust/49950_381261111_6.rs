\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/impl-trait/auto-trait-leak.rs","byte_start":845,"byte_end":849,"line_start":28,"line_end":28,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    send(after());","highlight_start":5,"highlight_end":9}],"label":"`std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely","suggested_replacement":null,"expansion":null}],"children":[{"message":"within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `[closure@/checkout/src/test/ui/impl-trait/auto-trait-leak.rs:36:5: 36:22 p:std::rc::Rc<std::cell::Cell<i32>>]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `impl std::ops::Fn<(i32,)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `send`","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/impl-trait/auto-trait-leak.rs","byte_start":678,"byte_end":700,"line_start":22,"line_end":22,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"fn send<T: Send>(_: T) {}","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n  --> /checkout/src/test/ui/impl-trait/auto-trait-leak.rs:28:5\n   |\nLL |     send(after());\n   |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n   |\n   = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n   = note: required because it appears within the type `[closure@/checkout/src/test/ui/impl-trait/auto-trait-leak.rs:36:5: 36:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n   = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\nnote: required by `send`\n  --> /checkout/src/test/ui/impl-trait/auto-trait-leak.rs:22:1\n   |\nLL | fn send<T: Send>(_: T) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[00:45:12] {"message":"cycle detected when processing `cycle1`","code":{"code":"E0391","explanation":"\nThis error indicates that some types or traits depend on each other\nand therefore cannot be constructed.\n\nThe following example contains a circular dependency between two traits:\n\n