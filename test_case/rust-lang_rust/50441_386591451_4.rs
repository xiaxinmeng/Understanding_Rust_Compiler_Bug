\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/on-unimplemented/no-debug.rs","byte_start":588,"byte_end":591,"line_start":20,"line_end":20,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"    println!(\"{:?} {:?}\", Foo, Bar);","highlight_start":27,"highlight_end":30}],"label":"`Foo` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`","suggested_replacement":null,"expansion":{"span":{"file_name":"<print macros>","byte_start":54,"byte_end":85,"line_start":2,"line_end":2,"column_start":27,"column_end":58,"is_primary":false,"text":[{"text":"$ crate :: io :: _print ( format_args ! ( $ ( $ arg ) * ) ) ) ;","highlight_start":27,"highlight_end":58}],"label":null,"suggested_replacement":null,"expansion":{"span":{"file_name":"<println macros>","byte_start":138,"byte_end":191,"line_start":3,"line_end":3,"column_start":8,"column_end":61,"is_primary":false,"text":[{"text":") => ( print ! ( concat ! ( $ fmt , \"\\n\" ) , $ ( $ arg ) * ) ) ;","highlight_start":8,"highlight_end":61}],"label":null,"suggested_replacement":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/on-unimplemented/no-debug.rs","byte_start":566,"byte_end":598,"line_start":20,"line_end":20,"column_start":5,"column_end":37,"is_primary":false,"text-debug.rs:20:27\n   |\nLL |     println!(\"{:?} {:?}\", Foo, Bar);\n   |                           ^^^ `Foo` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n   |\n   = help: the trait `std::fmt::Debug` is not implemented for `Foo`\n   = note: required by `std::fmt::Debug::fmt`\n\n"}
[00:46:17] {"message":"`no_debug::Bar` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n