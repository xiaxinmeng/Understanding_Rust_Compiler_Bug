\n\nWith this apt":644,"byte_end":658,"line_start":23,"line_end":23,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    $wrapper.inner","highlight_start":5,"highlight_end":19}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/nll/decl-macro-illegal-copy.rs","byte_start":780,"byte_end":800,"line_start":31,"line_end":31,"column_start":9,"column_end":29,"is_primary":false,"text":[{"text":"        inner_copy!(wrapper),","highlight_start":9,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"inner_copy!","def_site_span":{"file_name":"/checkout/src/test/ui/nll/decl-macro-illegal-copy.rs","byte_start":605,"byte_end":660,"line_start":22,"line_end":24,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro inner_copy($wrapper:ident) {","highlight_start":1,"highlight_end":35},{"text":"    $wrapper.inner","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/checkout/src/test/ui/nll/decl-macro-illegal-copy.rs","byte_start":810,"byte_end":823,"line_start":32,"line_end":32,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        wrapper.inner,","highlight_start":9,"highlight_end":22}],"label":"value used here after partial move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move occurs because `wrapper.inner` has type `NonCot in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n