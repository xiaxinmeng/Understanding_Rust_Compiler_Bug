\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removue-21232-partial-init-and-use.rs","byte_start":4124,"byte_end":4132,"line_start":141,"line_end":141,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    s.x = 10;","highlight_start":5,"highlight_end":13}],"label":"value partially assigned here after partial move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0382]: assign to part of moved value: `s`\n  --> /checkout/src/test/ui/nll/issue-21232-partial-init-and-use.rs:141:5\n   |\nLL |     let mut s: S<B> = S::new(); drop(s);\n   |                                      - value moved here\nLL |     s.x = 10;\n   |     ^^^^^^^^ value partially assigned here after partial move\n   |\n   = note: move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n\n"}
[00:47:58] {"message":"assign to part of moved value: `t`","code":{"code":"E0382","explanation":"\nThis error occurs when an attempt is made to use a variable after its contents\nhave been moved elsewhere. For example:\n\n