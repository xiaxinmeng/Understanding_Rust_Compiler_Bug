\n\nFor more information about the cfg attribute, read:\nhttps://doc.rust-lang.org/reference.html#conditional-compilation\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":902,"byte_end":905,"line_start":29,"line_end":29,"column_start":7,"column_end":10,"is_primary":true,"text":[{"text":"#[cfg(a())] //~ ERROR invalid predicate `a`","highlight_start":7,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0537]: invalid predicate `a`\n  --> /checkout/src/test/ui/cfg-attr-syntax-validation.rs:29:7\n   |\nLL | #[cfg(a())] //~ ERROR invalid predicate `a`\n   |       ^^^\n\n"}
[00:46:17] {"message":"literal in `cfg` predicate value must be a string","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":962,"byte_end":964,"line_start":32,"line_end":32,"column_start":11,"column_end":13,"is_primary":true,"text":[{"text":"#[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string","highlight_start":11,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: literal in `cfg` predicate value must be a string\n  --> /checkout/src/test/ui/cfg-attr-syntax-validation.rs:32:11\n   |\nLL | #[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n   |           ^^\n\n"}
[00:46:17] {"message":"`cfg` is not a well-formed meta-item","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":1097,"byte_end":1120,"line_start":37,"line_end":37,"column_start":9,"column_end":32,"is_primary":true,"text":[{"text":"        #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":1196,"byte_end":1233,"line_start":42,"line_end":42,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"generate_s9!(concat!(\"nonexistent\"));","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"generate_s9!","def_site_span":{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":1039,"byte_end":1194,"line_start":35,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! generate_s9 {","highlight_start":1,"highlight_end":27},{"text":"    ($expr: expr) => {","highlight_start":1,"highlight_end":23},{"text":"        #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item","highlight_start":1,"highlight_end":79},{"text":"        struct S9;","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected syntax is","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":1097,"byte_end":1120,"line_start":37,"line_end":37,"column_start":9,"column_end":32,"is_primary":true,"text":[{"text":"        #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":"#[cfg(/* predicate */)]","suggestion_applicability":"Unspecified","expansion":{"span":{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":1196,"byte_end":1233,"line_start":42,"line_end":42,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"generate_s9!(concat!(\"nonexistent\"));","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"generate_s9!","def_site_span":{"file_name":"/checkout/src/test/ui/cfg-attr-syntax-validation.rs","byte_start":1039,"byte_end":1194,"line_start":35,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! generate_s9 {","highlight_start":1,"highlight_end":27},{"text":"    ($expr: expr) => {","highlight_start":1,"highlight_end":23},{"text":"        #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item","highlight_start":1,"highlight_end":79},{"text":"        struct S9;","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"error: `cfg` is not a well-formed meta-item\n  --> /checkout/src/test/ui/cfg-attr-syntax-validation.rs:37:9\n   |\nLL |         #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: expected syntax is: `#[cfg(/* predicate */)]`\n...\nLL | generate_s9!(concat!(\"nonexistent\"));\n   | ------------------------------------- in this macro invocation\n\n"}
[00:46:17] {"message":"aborting due to 9 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 9 previous errors\n\n"}
[00:46:17] {"message":"For more information about this error, try `rustc --explain E0537`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0537`.\n"}
[00:46:17] ------------------------------------------
[00:46:17] 
[00:46:17] thread '[ui] ui/cfg-attr-syntax-validation.rs' panicked at 'explicit panic', tools/compiletest/src/runtest.rs:3145:9
[00:46:17] note: Run with `RUST_BACKTRACE=1` for a backtrace.
---
[00:46:17] 
[00:46:17] thread 'main' panicked at 'Some tests failed', tools/compiletest/src/main.rs:498:22
[00:46:17] 
[00:46:17] 
[00:46:17] command did not execute successfully: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest" "--compile-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib" "--run-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib" "--rustc-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "--src-base" "/checkout/src/test/ui" "--build-base" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui" "--stage-id" "stage2-x86_64-unknown-linux-gnu" "--mode" "ui" "--target" "x86_64-unknown-linux-gnu" "--host" "x86_64-unknown-linux-gnu" "--llvm-filecheck" "/usr/lib/llvm-5.0/bin/FileCheck" "--host-rustcflags" "-Crpath -O -Zunstable-options " "--target-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--docck-python" "/usr/bin/python2.7" "--lldb-python" "/usr/bin/python2.7" "--gdb" "/usr/bin/gdb" "--quiet" "--llvm-version" "5.0.0\n" "--system-llvm" "--cc" "" "--cxx" "" "--cflags" "" "--llvm-components" "" "--llvm-cxxflags" "" "--adb-path" "adb" "--adb-test-dir" "/data/tmp/work" "--android-cross-path" "" "--color" "always"
[00:46:17] 
[00:46:17] 
[00:46:17] failed to run: /checkout/obj/build/bootstrap/debug/bootstrap test
[00:46:17] Build completed unsuccessfully in 0:02:06
[00:46:17] Build completed unsuccessfully in 0:02:06
[00:46:17] Makefile:58: recipe for target 'check' failed
[00:46:17] make: *** [check] Error 1

The command "stamp sh -x -c "$RUN_SCRIPT"" exited with 2.
travis_time:start:1468f884
$ date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
---
travis_time:end:1964b71c:start=1536349686809879859,finish=1536349686817656077,duration=7776218
travis_fold:end:after_failure.3
travis_fold:start:after_failure.4
travis_time:start:095bcc86
$ ln -s . checkout && for CORE in obj/cores/core.*; do EXE=$(echo $CORE | sed 's|obj/cores/core\.[0-9]*\.!checkout!\(.*\)|\1|;y|!|/|'); if [ -f "$EXE" ]; then printf travis_fold":start:crashlog\n\033[31;1m%s\033[0m\n" "$CORE"; gdb -q -c "$CORE" "$EXE" -iex 'set auto-load off' -iex 'dir src/' -iex 'set sysroot .' -ex bt -ex q; echo travis_fold":"end:crashlog; fi; done || true
travis_fold:end:after_fa
