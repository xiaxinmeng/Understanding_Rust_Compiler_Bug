\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/feature-gate-trivial_bounds.rs","byte_start":1364,"byte_end":1478,"line_start":65,"line_end":67,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn unsized_local() where Dst<A>: Sized { //~ ERROR","highlight_start":1,"highlight_end":51},{"text":"    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);","highlight_start":1,"highlight_end":62},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `Dst<(dyn A + 'static)>`, tfunction: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n