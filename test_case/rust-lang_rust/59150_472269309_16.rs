\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/error-codes/E0423.rs","byte_start":424,"byte_end":439,"line_start":21,"line_end":21,"column_start":14,"column_end":29,"is_primary":true,"text":[{"text":"    for _ in std::ops::Range { start: 0, end: 10 } {}","highlight_start":14,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"surround the struct literal with parenthesis","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/error-codes/E0423.rs","byte_start":424,"byte_end":461,"line_start":21,"line_end":21,"column_start":14,"column_end":51,"is_primary":true,"text":[{"text":"    for _ in std::ops::Range { start: 0, end: 10 } {}","highlight_start":14,"highlight_end":51}],"label":null,"suggested_replacement":"(std::ops::Range { start: 0, end: 10 })","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error[E0423]: expected value, found struct `std::ops::Range`\n  --> /checkout/src/test/ui/error-codes/E0423.rs:21:14\n   |\nLL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n   |              ^^^^^^^^^^^^^^^----------------------\n   |              |\n   |              help: surround the struct literal with parenthesis: `(std::ops::Range { start: 0, end: 10 })`\n\n"}
[01:17:14] {"message":"For more information about this error, try `rustc --explain E0423`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0423`.\n"}
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] 
[01:17:14] thread '[ui] ui/error-codes/E0423.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3325:9
[01:17:14] note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
[01:17:14] 
[01:17:14] ---- [ui] ui/issues/issue-22644.rs stdout ----
[01:17:14] diff of stderr:
[01:17:14] 
[01:17:14] 95    |
[01:17:14] 96 LL |     println!("{}", a: &mut 4);
[01:17:14] 97    |                    ^
[01:17:14] - note: ...due to this, which is why a type is expected
[01:17:14] + note: ...due to this, which is why a type is expected after
[01:17:14] 100    |
[01:17:14] 100    |
[01:17:14] 101 LL |     println!("{}", a: &mut 4);
[01:17:14] 
[01:17:14] The actual stderr differed from the expected stderr.
[01:17:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-22644/issue-22644.stderr
[01:17:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-22644/issue-22644.stderr
[01:17:14] To update references, rerun the tests and pass the `--bless` flag
[01:17:14] To only update this specific test, also pass `--test-args issues/issue-22644.rs`
[01:17:14] error: 1 errors occurred comparing output.
[01:17:14] status: exit code: 1
[01:17:14] status: exit code: 1
[01:17:14] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/ui/issues/issue-22644.rs" "-Zthreads=1" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-22644/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-22644/auxiliary" "-A" "unused"
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] stderr:
[01:17:14] stderr:
[01:17:14] ------------------------------------------
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a comparison","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":173,"byte_end":182,"line_start":8,"line_end":8,"column_start":33,"column_end":42,"is_primary":false,"text":[{"text":"    println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as a start of generic","highlight_start":33,"highlight_end":42}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":171,"byte_end":172,"line_start":8,"line_end":8,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as a start of generic","highlight_start":31,"highlight_end":32}],"label":"not interpreted as comparison","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try comparing the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":160,"byte_end":170,"line_start":8,"line_end":8,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"    println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as a start of generic","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":"(a as usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> /checkout/src/test/ui/issues/issue-22644.rs:8:31\n   |\nLL |     println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as a start of generic\n   |                    ---------- ^ --------- interpreted as generic arguments\n   |                    |          |\n   |                    |          not interpreted as comparison\n   |                    help: try comparing the cast value: `(a as usize)`\n\n"}
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a comparison","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":270,"byte_end":290,"line_start":9,"line_end":9,"column_start":35,"column_end":55,"is_primary":false,"text":[{"text":"    println!(\"{}{}\", a as usize < long_name, long_name);","highlight_start":35,"highlight_end":55}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":268,"byte_end":269,"line_start":9,"line_end":9,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"    println!(\"{}{}\", a as usize < long_name, long_name);","highlight_start":33,"highlight_end":34}],"label":"not interpreted as comparison","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try comparing the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":257,"byte_end":267,"line_start":9,"line_end":9,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"    println!(\"{}{}\", a as usize < long_name, long_name);","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":"(a as usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> /checkout/src/test/ui/issues/issue-22644.rs:9:33\n   |\nLL |     println!(\"{}{}\", a as usize < long_name, long_name);\n   |                      ---------- ^ -------------------- interpreted as generic arguments\n   |                      |          |\n   |                      |          not interpreted as comparison\n   |                      help: try comparing the cast value: `(a as usize)`\n\n"}
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a comparison","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":381,"byte_end":382,"line_start":11,"line_end":11,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"    println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start of generic","highlight_start":33,"highlight_end":34}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":379,"byte_end":380,"line_start":11,"line_end":11,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start of generic","highlight_start":31,"highlight_end":32}],"label":"not interpreted as comparison","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try comparing the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":368,"byte_end":378,"line_start":11,"line_end":11,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"    println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start of generic","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":"(a as usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> /checkout/src/test/ui/issues/issue-22644.rs:11:31\n   |\nLL |     println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start of generic\n   |                    ---------- ^ - interpreted as generic arguments\n   |                    |          |\n   |                    |          not interpreted as comparison\n   |                    help: try comparing the cast value: `(a as usize)`\n\n"}
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a comparison","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":510,"byte_end":530,"line_start":13,"line_end":13,"column_start":33,"column_end":53,"is_primary":false,"text":[{"text":"    println!(\"{}{}\", a: usize < long_name, long_name);","highlight_start":33,"highlight_end":53}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":508,"byte_end":509,"line_start":13,"line_end":13,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    println!(\"{}{}\", a: usize < long_name, long_name);","highlight_start":31,"highlight_end":32}],"label":"not interpreted as comparison","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try comparing the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":499,"byte_end":507,"line_start":13,"line_end":13,"column_start":22,"column_end":30,"is_primary":true,"text":[{"text":"    println!(\"{}{}\", a: usize < long_name, long_name);","highlight_start":22,"highlight_end":30}],"label":null,"suggested_replacement":"(a: usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> /checkout/src/test/ui/issues/issue-22644.rs:13:31\n   |\nLL |     println!(\"{}{}\", a: usize < long_name, long_name);\n   |                      -------- ^ -------------------- interpreted as generic arguments\n   |                      |        |\n   |                      |        not interpreted as comparison\n   |                      help: try comparing the cast value: `(a: usize)`\n\n"}
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a comparison","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":619,"byte_end":620,"line_start":15,"line_end":15,"column_start":31,"column_end":32,"is_primary":false,"text":[{"text":"    println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start of generic","highlight_start":31,"highlight_end":32}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":617,"byte_end":618,"line_start":15,"line_end":15,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"    println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start of generic","highlight_start":29,"highlight_end":30}],"label":"not interpreted as comparison","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try comparing the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":608,"byte_end":616,"line_start":15,"line_end":15,"column_start":20,"column_end":28,"is_primary":true,"text":[{"text":"    println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start of generic","highlight_start":20,"highlight_end":28}],"label":null,"suggested_replacement":"(a: usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> /checkout/src/test/ui/issues/issue-22644.rs:15:29\n   |\nLL |     println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start of generic\n   |                    -------- ^ - interpreted as generic arguments\n   |                    |        |\n   |                    |        not interpreted as comparison\n   |                    help: try comparing the cast value: `(a: usize)`\n\n"}
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a comparison","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":834,"byte_end":835,"line_start":21,"line_end":21,"column_start":20,"column_end":21,"is_primary":false,"text":[{"text":"                   4);","highlight_start":20,"highlight_end":21}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":762,"byte_end":763,"line_start":20,"line_end":20,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"                   < //~ ERROR `<` is interpreted as a start of generic","highlight_start":20,"highlight_end":21}],"label":"not interpreted as comparison","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try comparing the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":694,"byte_end":742,"line_start":17,"line_end":19,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    println!(\"{}\", a","highlight_start":20,"highlight_end":21},{"text":"                   as","highlight_start":1,"highlight_end":22},{"text":"                   usize","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":"(a\n                   as\n                   usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> /checkout/src/test/ui/issues/issue-22644.rs:20:20\n   |\nLL |                    < //~ ERROR `<` is interpreted as a start of generic\n   |                    ^ not interpreted as comparison\nLL |                    4);\n   |                    - interpreted as generic arguments\nhelp: try comparing the cast value\n   |\nLL |     println!(\"{}\", (a\nLL |                    as\nLL |                    usize)\n   |\n\n"}
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a comparison","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":1001,"byte_end":1002,"line_start":30,"line_end":30,"column_start":20,"column_end":21,"is_primary":false,"text":[{"text":"                   5);","highlight_start":20,"highlight_end":21}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":929,"byte_end":930,"line_start":29,"line_end":29,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"                   < //~ ERROR `<` is interpreted as a start of generic","highlight_start":20,"highlight_end":21}],"label":"not interpreted as comparison","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try comparing the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":857,"byte_end":909,"line_start":22,"line_end":28,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    println!(\"{}\", a","highlight_start":20,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                   as","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                   usize","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":"(a\n\n\n                   as\n\n\n                   usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> /checkout/src/test/ui/issues/issue-22644.rs:29:20\n   |\nLL |                    < //~ ERROR `<` is interpreted as a start of generic\n   |                    ^ not interpreted as comparison\nLL |                    5);\n   |                    - interpreted as generic arguments\nhelp: try comparing the cast value\n   |\nLL |     println!(\"{}\", (a\nLL | \nLL | \nLL |                    as\nLL | \nLL | \n ...\n\n"}
[01:17:14] {"message":"`<` is interpreted as a start of generic arguments for `usize`, not a shift","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":1039,"byte_end":1048,"line_start":32,"line_end":32,"column_start":34,"column_end":43,"is_primary":false,"text":[{"text":"    println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted as a start of generic","highlight_start":34,"highlight_end":43}],"label":"interpreted as generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":1036,"byte_end":1038,"line_start":32,"line_end":32,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"    println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted as a start of generic","highlight_start":31,"highlight_end":33}],"label":"not interpreted as shift","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try shifting the cast value","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":1025,"byte_end":1035,"line_start":32,"line_end":32,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"    println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted as a start of generic","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":"(a as usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error: `<` is interpreted as a start of generic arguments for `usize`, not a shift\n  --> /checkout/src/test/ui/issues/issue-22644.rs:32:31\n   |\nLL |     println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted as a start of generic\n   |                    ---------- ^^ --------- interpreted as generic arguments\n   |                    |          |\n   |                    |          not interpreted as shift\n   |                    help: try shifting the cast value: `(a as usize)`\n\n"}
[01:17:14] {"message":"expected type, found `4`","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":1130,"byte_end":1131,"line_start":34,"line_end":34,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"    println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`","highlight_start":28,"highlight_end":29}],"label":"expecting a type here because of type ascription","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this expression is annotated with type ascription...","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":1122,"byte_end":1123,"line_start":34,"line_end":34,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"    println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...due to this, which is why a type is expected after","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-22644.rs","byte_start":1123,"byte_end":1124,"line_start":34,"line_end":34,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"    println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this might be indicative of a syntax error elsewhere","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"error: expected type, found `4`\n  --> /checkout/src/test/ui/issues/issue-22644.rs:34:28\n   |\nLL |     println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`\n   |                            ^ expecting a type here because of type ascription\n   |\n   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\nnote: this expression is annotated with type ascription...\n  --> /checkout/src/test/ui/issues/issue-22644.rs:34:20\n   |\nLL |     println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`\n   |                    ^\nnote: ...due to this, which is why a type is expected after\n  --> /checkout/src/test/ui/issues/issue-22644.rs:34:21\n   |\nLL |     println!(\"{}\", a: &mut 4); //~ ERROR expected type, found `4`\n   |                     ^\n   = help: this might be indicative of a syntax error elsewhere\n\n"}
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] thread '[ui] ui/issues/issue-22644.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3325:9
[01:17:14] thread '[ui] ui/issues/issue-22644.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3325:9
[01:17:14] 
[01:17:14] ---- [ui] ui/issues/issue-44406.rs stdout ----
[01:17:14] diff of stderr:
[01:17:14] 
[01:17:14] 23 ...
[01:17:14] 24 LL |     foo!(true);
[01:17:14] 25    |     ----------- in this macro invocation
[01:17:14] - note: ...due to this, which is why a type is expected
[01:17:14] + note: ...due to this, which is why a type is expected after
[01:17:14] 28    |
[01:17:14] 28    |
[01:17:14] 29 LL |         bar(baz: $rest)
[01:17:14] 
[01:17:14] The actual stderr differed from the expected stderr.
[01:17:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-44406/issue-44406.stderr
[01:17:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-44406/issue-44406.stderr
[01:17:14] To update references, rerun the tests and pass the `--bless` flag
[01:17:14] To only update this specific test, also pass `--test-args issues/issue-44406.rs`
[01:17:14] error: 1 errors occurred comparing output.
[01:17:14] status: exit code: 1
[01:17:14] status: exit code: 1
[01:17:14] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/ui/issues/issue-44406.rs" "-Zthreads=1" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-44406/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/issues/issue-44406/auxiliary" "-A" "unused"
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] stderr:
[01:17:14] stderr:
[01:17:14] ------------------------------------------
[01:17:14] {"message":"expected identifier, found keyword `true`","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":94,"byte_end":98,"line_start":8,"line_end":8,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"    foo!(true); //~ ERROR expected type, found keyword","highlight_start":10,"highlight_end":14}],"label":"expected identifier, found keyword","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can escape reserved keywords to use them as identifiers","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":94,"byte_end":98,"line_start":8,"line_end":8,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"    foo!(true); //~ ERROR expected type, found keyword","highlight_start":10,"highlight_end":14}],"label":null,"suggested_replacement":"r#true","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: expected identifier, found keyword `true`\n  --> /checkout/src/test/ui/issues/issue-44406.rs:8:10\n   |\nLL |     foo!(true); //~ ERROR expected type, found keyword\n   |          ^^^^ expected identifier, found keyword\nhelp: you can escape reserved keywords to use them as identifiers\n   |\nLL |     foo!(r#true); //~ ERROR expected type, found keyword\n   |          ^^^^^^\n\n"}
[01:17:14] {"message":"expected type, found keyword `true`","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":94,"byte_end":98,"line_start":8,"line_end":8,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"    foo!(true); //~ ERROR expected type, found keyword","highlight_start":10,"highlight_end":14}],"label":"expecting a type here because of type ascription","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this expression is annotated with type ascription...","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":52,"byte_end":55,"line_start":3,"line_end":3,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        bar(baz: $rest)","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":89,"byte_end":100,"line_start":8,"line_end":8,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    foo!(true); //~ ERROR expected type, found keyword","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"foo!","def_site_span":{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":0,"byte_end":71,"line_start":1,"line_end":5,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! foo {","highlight_start":1,"highlight_end":19},{"text":"    ($rest: tt) => {","highlight_start":1,"highlight_end":21},{"text":"        bar(baz: $rest)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"...due to this, which is why a type is expected after","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":55,"byte_end":56,"line_start":3,"line_end":3,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"        bar(baz: $rest)","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":89,"byte_end":100,"line_start":8,"line_end":8,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"    foo!(true); //~ ERROR expected type, found keyword","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"foo!","def_site_span":{"file_name":"/checkout/src/test/ui/issues/issue-44406.rs","byte_start":0,"byte_end":71,"line_start":1,"line_end":5,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! foo {","highlight_start":1,"highlight_end":19},{"text":"    ($rest: tt) => {","highlight_start":1,"highlight_end":21},{"text":"        bar(baz: $rest)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"this might be indicative of a syntax error elsewhere","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"error: expected type, found keyword `true`\n  --> /checkout/src/test/ui/issues/issue-44406.rs:8:10\n   |\nLL |     foo!(true); //~ ERROR expected type, found keyword\n   |          ^^^^ expecting a type here because of type ascription\n   |\n   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\nnote: this expression is annotated with type ascription...\n  --> /checkout/src/test/ui/issues/issue-44406.rs:3:13\n   |\nLL |         bar(baz: $rest)\n   |             ^^^\n...\nLL |     foo!(true); //~ ERROR expected type, found keyword\n   |     ----------- in this macro invocation\nnote: ...due to this, which is why a type is expected after\n  --> /checkout/src/test/ui/issues/issue-44406.rs:3:16\n   |\nLL |         bar(baz: $rest)\n   |                ^\n...\nLL |     foo!(true); //~ ERROR expected type, found keyword\n   |     ----------- in this macro invocation\n   = help: this might be indicative of a syntax error elsewhere\n\n"}
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] thread '[ui] ui/issues/issue-44406.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3325:9
[01:17:14] thread '[ui] ui/issues/issue-44406.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3325:9
[01:17:14] 
[01:17:14] ---- [ui] ui/lifetime_starts_expressions.rs stdout ----
[01:17:14] diff of stderr:
[01:17:14] 
[01:17:14] 20    |
[01:17:14] 21 LL |     loop { break 'label: loop { break 'label 42; }; }
[01:17:14] 22    |            ^^^^^^^^^^^^
[01:17:14] - note: ...due to this, which is why a type is expected
[01:17:14] + note: ...due to this, which is why a type is expected after
[01:17:14] 25    |
[01:17:14] 25    |
[01:17:14] 26 LL |     loop { break 'label: loop { break 'label 42; }; }
[01:17:14] 
[01:17:14] The actual stderr differed from the expected stderr.
[01:17:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/lifetime_starts_expressions/lifetime_starts_expressions.stderr
[01:17:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/lifetime_starts_expressions/lifetime_starts_expressions.stderr
[01:17:14] To update references, rerun the tests and pass the `--bless` flag
[01:17:14] To only update this specific test, also pass `--test-args lifetime_starts_expressions.rs`
[01:17:14] error: 1 errors occurred comparing output.
[01:17:14] status: exit code: 1
[01:17:14] status: exit code: 1
[01:17:14] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/ui/lifetime_starts_expressions.rs" "-Zthreads=1" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/lifetime_starts_expressions/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/lifetime_starts_expressions/auxiliary" "-A" "unused"
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] stderr:
[01:17:14] stderr:
[01:17:14] ------------------------------------------
[01:17:14] {"message":"expected identifier, found keyword `loop`","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/lifetime_starts_expressions.rs","byte_start":110,"byte_end":114,"line_start":6,"line_end":6,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"    loop { break 'label: loop { break 'label 42; }; }","highlight_start":26,"highlight_end":30}],"label":"expected identifier, found keyword","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can escape reserved keywords to use them as identifiers","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/lifetime_starts_expressions.rs","byte_start":110,"byte_end":114,"line_start":6,"line_end":6,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"    loop { break 'label: loop { break 'label 42; }; }","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":"r#loop","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"error: expected identifier, found keyword `loop`\n  --> /checkout/src/test/ui/lifetime_starts_expressions.rs:6:26\n   |\nLL |     loop { break 'label: loop { break 'label 42; }; }\n   |                          ^^^^ expected identifier, found keyword\nhelp: you can escape reserved keywords to use them as identifiers\n   |\nLL |     loop { break 'label: r#loop { break 'label 42; }; }\n   |                          ^^^^^^\n\n"}
[01:17:14] {"message":"expected type, found keyword `loop`","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/lifetime_starts_expressions.rs","byte_start":110,"byte_end":114,"line_start":6,"line_end":6,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"    loop { break 'label: loop { break 'label 42; }; }","highlight_start":26,"highlight_end":30}],"label":"expecting a type here because of type ascription","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this expression is annotated with type ascription...","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/lifetime_starts_expressions.rs","byte_start":96,"byte_end":108,"line_start":6,"line_end":6,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    loop { break 'label: loop { break 'label 42; }; }","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...due to this, which is why a type is expected after","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/lifetime_starts_expressions.rs","byte_start":108,"byte_end":109,"line_start":6,"line_end":6,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    loop { break 'label: loop { break 'label 42; }; }","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this might be indicative of a syntax error elsewhere","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"error: expected type, found keyword `loop`\n  --> /checkout/src/test/ui/lifetime_starts_expressions.rs:6:26\n   |\nLL |     loop { break 'label: loop { break 'label 42; }; }\n   |                          ^^^^ expecting a type here because of type ascription\n   |\n   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\nnote: this expression is annotated with type ascription...\n  --> /checkout/src/test/ui/lifetime_starts_expressions.rs:6:12\n   |\nLL |     loop { break 'label: loop { break 'label 42; }; }\n   |            ^^^^^^^^^^^^\nnote: ...due to this, which is why a type is expected after\n  --> /checkout/src/test/ui/lifetime_starts_expressions.rs:6:24\n   |\nLL |     loop { break 'label: loop { break 'label 42; }; }\n   |                        ^\n   = help: this might be indicative of a syntax error elsewhere\n\n"}
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] thread '[ui] ui/lifetime_starts_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3325:9
[01:17:14] thread '[ui] ui/lifetime_starts_expressions.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3325:9
[01:17:14] 
[01:17:14] ---- [ui] ui/parser/struct-literal-in-for.rs stdout ----
[01:17:14] diff of stderr:
[01:17:14] 
[01:17:14] 10    |
[01:17:14] 11 LL |         x: 3
[01:17:14] 12    |         ^
[01:17:14] - note: ...due to this, which is why a type is expected
[01:17:14] + note: ...due to this, which is why a type is expected after
[01:17:14] 15    |
[01:17:14] 16 LL |         x: 3
[01:17:14] 
[01:17:14] 
[01:17:14] 
[01:17:14] The actual stderr differed from the expected stderr.
[01:17:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/parser/struct-literal-in-for/struct-literal-in-for.stderr
[01:17:14] To update references, rerun the tests and pass the `--bless` flag
[01:17:14] To only update this specific test, also pass `--test-args parser/struct-literal-in-for.rs`
[01:17:14] error: 1 errors occurred comparing output.
[01:17:14] status: exit code: 1
[01:17:14] status: exit code: 1
[01:17:14] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/ui/parser/struct-literal-in-for.rs" "-Zthreads=1" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/parser/struct-literal-in-for/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/parser/struct-literal-in-for/auxiliary" "-A" "unused"
[01:17:14] ------------------------------------------
[01:17:14] 
[01:17:14] ------------------------------------------
[01:17:14] stderr:
[01:17:14] stderr:
[01:17:14] ------------------------------------------
[01:17:14] {"message":"expected type, found `3`","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/parser/struct-literal-in-for.rs","byte_start":177,"byte_end":178,"line_start":13,"line_end":13,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"        x: 3    //~ ERROR expected type, found `3`","highlight_start":12,"highlight_end":13}],"label":"expecting a type here because of type ascription","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this expression is annotated with type ascription...","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/parser/struct-literal-in-for.rs","byte_start":174,"byte_end":175,"line_start":13,"line_end":13,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        x: 3    //~ ERROR expected type, found `3`","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...due to this, which is why a type is expected after","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/parser/struct-literal-in-for.rs","byte_start":175,"byte_end":176,"line_start":13,"line_end":13,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        x: 3    //~ ERROR expected type, found `3`","highlight_start":10,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"this might be indicative of a syntax error elsewhere","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"error: expected type, found `3`\n  --> /checkout/src/test/ui/parser/struct-literal-in-for.rs:13:12\n   |\nLL |         x: 3    //~ ERROR expected type, found `3`\n   |            ^ expecting a type here because of type ascription\n   |\n   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\nnote: this expression is annotated with type ascription...\n  --> /checkout/src/test/ui/parser/struct-literal-in-for.rs:13:9\n   |\nLL |         x: 3    //~ ERROR expected type, found `3`\n   |         ^\nnote: ...due to this, which is why a type is expected after\n  --> /checkout/src/test/ui/parser/struct-literal-in-for.rs:13:10\n   |\nLL |         x: 3    //~ ERROR expected type, found `3`\n   |          ^\n   = help: this might be indicative of a syntax error elsewhere\n\n"}
[01:17:14] {"message":"expected one of `.`, `;`, `?`, `}`, or an operator, found `{`","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/parser/struct-literal-in-for.rs","byte_start":228,"byte_end":229,"line_start":14,"line_end":14,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"    }.hi() { //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `{`","highlight_start":12,"highlight_end":13}],"label":"expected one of `.`, `;`, `?`, `}`, or an operator here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n  --> /checkout/src/test/ui/parser/struct-literal-in-for.rs:14:12\n   |\nLL |     }.hi() { //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n   |            ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n\n"}
[01:17:14] {"message":"expected value, found struct `Foo`","code":{"code":"E0423","explanation":"\nAn identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nFor (an erroneous) example, here a `struct` variant name were used as a\nfunction:\n\n