\n\nThis syntax specifies that we want the X type from MyTrait, as made concrete in\nMyStruct. The reason that we cannot simply use `MyStruct::X` is that MyStruct\nmight implement two different traits with identically-named associated types.\nThis syntax allows disambiguation between the two.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/traits/trait-item-privacy.rs","byte_start":3538,"byte_end":3542,"line_start":128,"line_end":128,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    let _: S::B; //~ ERROR ambiguous associated type","highlight_start":12,"highlight_end":16}],"label":"ambiguous associated type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"specify the type using the syntax `<S as Trait>::B`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0223]: ambiguous associated type\n  --> /checkout/src/test/ui/traits/trait-item-privacy.rs:128:12\n   |\nLL |     let _: S::B; //~ ERROR ambiguous associated type\n   |            ^^^^ ambiguous associated type\n   |\n   = note: specify the type using the syntax `<S as Trait>::B`\n\n"}
[00:46:20] {"message":"ambiguous associated type","code":{"code":"E0223","explanation":"\nAn attempt was made to retrieve an associated type, but the type was ambiguous.\nFor example:\n\n