plain
..............................................FF........................................ 176/194
........F.........
failures:

---- spec::tests::aarch64_unknown_none stdout ----
thread 'spec::tests::aarch64_unknown_none' panicked at 'assertion failed: `(left == right)`
  left: `Err("unknown sanitizer kernel-address")`,
 right: `Ok(Target { llvm_target: "aarch64-unknown-none", pointer_width: 64, arch: "aarch64", data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "none", env: "", abi: "", vendor: "unknown", linker_flavor: Lld(Ld), linker: Some("rust-lld"), lld_flavor: Ld, pre_link_args: {}, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_fallback: {}, post_link_objects_fallback: {}, crt_objects_fallback: None, late_link_args: {}, late_link_args_dynamic: {}, late_link_args_static: {}, post_link_args: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic", features: "+strict-align,+neon,+fp-armv8", dynamic_linking: false, only_cdylib: false, executables: true, relocation_model: Static, code_model: None, tls_model: GeneralDynamic, disable_redzone: true, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: [], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, default_dwarf_version: 4, linker_is_gnu: true, allows_weak_linkage: true, has_rpath: false, no_default_libraries: true, position_independent_executables: false, static_position_independent_executables: false, needs_plt: false, relro_level: None, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(128), atomic_cas: true, panic_strategy: Abort, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, split_debuginfo: Off, supported_sanitizers: KERNELADDRESS, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:7:5

---- spec::tests::riscv64gc_unknown_none_elf stdout ----
---- spec::tests::riscv64gc_unknown_none_elf stdout ----
thread 'spec::tests::riscv64gc_unknown_none_elf' panicked at 'assertion failed: `(left == right)`
  left: `Err("unknown sanitizer kernel-address")`,
 right: `Ok(Target { llvm_target: "riscv64", pointer_width: 64, arch: "riscv64", data_layout: "e-m:e-p:64:64-i64:64-i128:128-n64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "none", env: "", abi: "", vendor: "unknown", linker_flavor: Lld(Ld), linker: Some("rust-lld"), lld_flavor: Ld, pre_link_args: {}, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_fallback: {}, post_link_objects_fallback: {}, crt_objects_fallback: None, late_link_args: {}, late_link_args_dynamic: {}, late_link_args_static: {}, post_link_args: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic-rv64", features: "+m,+a,+f,+d,+c", dynamic_linking: false, only_cdylib: false, executables: true, relocation_model: Static, code_model: Some(Medium), tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: [], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, default_dwarf_version: 4, linker_is_gnu: true, allows_weak_linkage: true, has_rpath: false, no_default_libraries: true, position_independent_executables: false, static_position_independent_executables: false, needs_plt: false, relro_level: None, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Abort, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: false, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "lp64d", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: false, has_thumb_interworking: false, split_debuginfo: Off, supported_sanitizers: KERNELADDRESS, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:7:5
---- spec::tests::riscv64imac_unknown_none_elf stdout ----
---- spec::tests::riscv64imac_unknown_none_elf stdout ----
thread 'spec::tests::riscv64imac_unknown_none_elf' panicked at 'assertion failed: `(left == right)`
  left: `Err("unknown sanitizer kernel-address")`,
 right: `Ok(Target { llvm_target: "riscv64", pointer_width: 64, arch: "riscv64", data_layout: "e-m:e-p:64:64-i64:64-i128:128-n64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "none", env: "", abi: "", vendor: "unknown", linker_flavor: Lld(Ld), linker: Some("rust-lld"), lld_flavor: Ld, pre_link_args: {}, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_fallback: {}, post_link_objects_fallback: {}, crt_objects_fallback: None, late_link_args: {}, late_link_args_dynamic: {}, late_link_args_static: {}, post_link_args: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "generic-rv64", features: "+m,+a,+c", dynamic_linking: false, only_cdylib: false, executables: true, relocation_model: Static, code_model: Some(Medium), tls_model: GeneralDynamic, disable_redzone: false, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: [], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, default_dwarf_version: 4, linker_is_gnu: true, allows_weak_linkage: true, has_rpath: false, no_default_libraries: true, position_independent_executables: false, static_position_independent_executables: false, needs_plt: false, relro_level: None, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Abort, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: None, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: false, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: false, has_thumb_interworking: false, split_debuginfo: Off, supported_sanitizers: KERNELADDRESS, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:7:5
---- spec::tests::x86_64_unknown_none stdout ----
thread 'spec::tests::x86_64_unknown_none' panicked at 'assertion failed: `(left == right)`
thread 'spec::tests::x86_64_unknown_none' panicked at 'assertion failed: `(left == right)`
  left: `Err("unknown sanitizer kernel-address")`,
 right: `Ok(Target { llvm_target: "x86_64-unknown-none-elf", pointer_width: 64, arch: "x86_64", data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", options: TargetOptions { is_builtin: false, endian: little, c_int_width: "32", os: "none", env: "", abi: "", vendor: "unknown", linker_flavor: Lld(Ld), linker: Some("rust-lld"), lld_flavor: Ld, pre_link_args: {}, pre_link_objects: {}, post_link_objects: {}, pre_link_objects_fallback: {}, post_link_objects_fallback: {}, crt_objects_fallback: None, late_link_args: {}, late_link_args_dynamic: {}, late_link_args_static: {}, post_link_args: {}, link_script: None, link_env: [], link_env_remove: [], asm_args: [], cpu: "x86-64", features: "-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float", dynamic_linking: false, only_cdylib: false, executables: true, relocation_model: Pic, code_model: Some(Kernel), tls_model: GeneralDynamic, disable_redzone: true, frame_pointer: MayOmit, function_sections: true, dll_prefix: "lib", dll_suffix: ".so", exe_suffix: "", staticlib_prefix: "lib", staticlib_suffix: ".a", families: [], abi_return_struct_as_int: false, is_like_osx: false, is_like_solaris: false, is_like_windows: false, is_like_msvc: false, is_like_wasm: false, default_dwarf_version: 4, linker_is_gnu: true, allows_weak_linkage: true, has_rpath: false, no_default_libraries: true, position_independent_executables: true, static_position_independent_executables: true, needs_plt: false, relro_level: Full, archive_format: "gnu", allow_asm: true, main_needs_argc_argv: true, has_thread_local: false, obj_is_bitcode: false, forces_embed_bitcode: false, bitcode_llvm_cmdline: "", min_atomic_width: None, max_atomic_width: Some(64), atomic_cas: true, panic_strategy: Abort, crt_static_allows_dylibs: false, crt_static_default: false, crt_static_respected: false, stack_probes: Call, min_global_align: None, default_codegen_units: None, trap_unreachable: true, requires_lto: false, singlethread: false, no_builtins: false, default_hidden_visibility: false, emit_debug_gdb_scripts: true, requires_uwtable: false, default_uwtable: false, simd_types_indirect: true, limit_rdylib_exports: true, override_export_symbols: None, merge_functions: Aliases, mcount: "mcount", llvm_abiname: "", relax_elf_relocations: false, llvm_args: [], use_ctors_section: false, eh_frame_header: true, has_thumb_interworking: false, split_debuginfo: Off, supported_sanitizers: KERNELADDRESS, default_adjusted_cabi: None, c_enum_min_bits: 32, generate_arange_section: true, supports_stack_protector: true } })`', compiler/rustc_target/src/spec/tests/tests_impl.rs:7:5

failures:
    spec::tests::aarch64_unknown_none
    spec::tests::riscv64gc_unknown_none_elf
    spec::tests::riscv64gc_unknown_none_elf
    spec::tests::riscv64imac_unknown_none_elf
    spec::tests::x86_64_unknown_none

test result: FAILED. 190 passed; 4 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s

error: test failed, to rerun pass '-p rustc_target --lib'
Build completed unsuccessfully in 0:17:39
