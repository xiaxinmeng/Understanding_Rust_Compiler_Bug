\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/run-pass-fulldeps/auxiliary/custom_derive_partial_eq.rs","byte_start":2939,"byte_end":2944,"line_start":80,"line_end":80,"column_start":26,"column_end":31,"is_primary":true,"text":[{"text":"    trait_def.expand(cx, mitem, item, push)","highlight_start":26,"highlight_end":31}],"label":"did you mean `item`?","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0425]: cannot find value `mitem` in this scope\n  --> /checkout/src/test/run-pass-fulldeps/auxiliary/custom_derive_partial_eq.rs:80:26\n   |\nLL |     trait_def.expand(cx, mitem, item, push)\n   |                          ^^^^^ did you mean `item`?\n\n"}
[01:00:10] {"message":"function is expected to take 5 arguments, but it takes 4 arguments","code":{"code":"E0593","explanation":"\nYou tried to supply an `Fn`-base"highlight_end":22},{"text":"                |cx, span, subexpr, self_f, other_fs| {","highlight_start":1,"highlight_end":56},{"text":"                    let other_f = (other_fs.len(), other_fs.get(0)).1.unwrap();","highlight_start":1,"highlight_end":80},{"text":"                    let eq = cx.expr_binary(span, BinOpKind::Eq, self_f, other_f.clone());","highlight_start":1,"highlight_end":91},{"text":"                    cx.expr_binary(span, BinOpKind::And, subexpr, eq)","highlight_start":1,"highlight_end":70},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                cx.expr_bool(span, true),","highlight_start":1,"highlight_end":42},{"text":"                Box::new(|cx, span, _, _| cx.expr_bool(span, false)),","highlight_start":1,"highlight_end":70},{"text":"                cx,","highlight_start":1,"highlight_end":20},{"text":"                span,","highlight_start":1,"highlight_end":22},{"text":"                substr)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let inline = cx.meta_word(span, Symbol::intern(\"inline\"));","highlight_start":1,"highlight_end":63},{"text":"    let attrs = vec![cx.attribute(span, inline)];","highlight_start":1,"highlight_end":50},{"text":"    let methods = vec![MethodDef {","highlight_start":1,"highlight_end":35},{"text":"        name: \"eq\",","highlight_start":1,"highlight_end":20},{"text":"        generics: LifetimeBounds::empty(),","highlight_start":1,"highlight_end":43},{"text":"        explicit_self: borrowed_explicit_self(),","highlight_start":1,"highlight_end":49},{"text":"        args: vec![(borrowed_self(), \"other\")],","highlight_start":1,"highlight_end":48},{"text":"        ret_ty: Literal(deriving::generic::ty::Path::new_local(\"bool\")),","highlight_start":1,"highlight_end":73},{"text":"        attributes: attrs,","highlight_start":1,"highlight_end":27},{"text":"        is_unsafe: false,","highlight_start":1,"highlight_end":26},{"text":"        unify_fieldless_variants: true,","highlight_start":1,"highlight_end":40},{"text":"        combine_substructure: combine_substructure(Box::new(cs_eq)),","highlight_start":1,"highlight_end":69},{"text":"    }];","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let trait_def = TraitDef {","highlight_start":1,"highlight_end":31},{"text":"        span: span,","highlight_start":1,"highlight_end":20},{"text":"        attributes: Vec::new(),","highlight_start":1,"highlight_end":32},{"text":"        path: deriving::generic::ty::Path::new(vec![\"cmp\", \"PartialEq\"]),","highlight_start":1,"highlight_end":74},{"text":"        additional_bounds: Vec::new(),","highlight_start":1,"highlight_end":39},{"text":"        generics: LifetimeBounds::empty(),","highlight_start":1,"highlight_end":43},{"text":"        is_unsafe: false,","highlight_start":1,"highlight_end":26},{"text":"        supports_unions: false,","highlight_start":1,"highlight_end":32},{"text":"        methods: methods,","highlight_start":1,"highlight_end":26},{"text":"        associated_types: Vec::new(),","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    trait_def.expand(cx, mitem, item, push)","highlight_start":1,"highlight_end":44},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"takes 4 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `syntax::ext::base::MultiItemDecorator` for `for<'r, 's, 't0, 't1> fn(&'r mut syntax::ext::base::ExtCtxt<'s>, syntax::source_map::Span, &'t0 syntax::ext::base::Annotatable, &'t1 mut (dyn std::ops::FnMut(syntax::ext::base::Annotatable) + 't1)) {expand_deriving_partial_eq}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for the cast to the object type `dyn syntax::ext::base::MultiItemDecorator + rustc_data_structures::sync::Sync + rustc_data_structures::sync::Send`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0593]: function is expected to take 5 arguments, but it takes 4 arguments\n  --> /checkout/src/test/run-pass-fulldeps/auxiliary/custom_derive_partial_eq.rs:34:50\n   |\nLL |                                     MultiDecorator(Box::new(expand_deriving_partial_eq)));\n   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected function that takes 5 arguments\n...\nLL | / fn expand_deriving_partial_eq(cx: &mut ExtCtxt, span: Span, item: &Annotatable,\nLL | |                               push: &mut FnMut(Annotatable)) {\nLL | |     // structures are equal if all fields are equal, and non equal, if\nLL | |     // any fields are not equal or if the enum variants are different\n...  |\d/x86_64-unknown-linux-gnu/test/run-pass-fulldeps/derive-totalsum-attr/auxiliary" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--crate-type" "dylib" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/run-pass-fulldeps/derive-totalsum-attr/auxiliary"
[01:00:10] ------------------------------------------
[01:00:10] 
[01:00:10] ------------------------------------------
[01:00:10] stderr:
[01:00:10] stderr:
[01:00:10] ------------------------------------------
[01:00:10] {"message":"this function takes 3 parameters but 4 parameters were supplied","code":{"code":"E0061","explanation":"\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n