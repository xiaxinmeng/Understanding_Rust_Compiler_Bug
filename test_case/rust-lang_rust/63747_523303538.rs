plain
2019-08-21T04:53:52.6598290Z 
2019-08-21T04:53:52.6598516Z ------------------------------------------
2019-08-21T04:53:52.6599071Z stderr:
2019-08-21T04:53:52.6599498Z ------------------------------------------
2019-08-21T04:53:52.6601042Z {"message":"the feature `async_await` has been stable since 1.38.0 and no longer requires an attribute to enable","code":{"code":"stable_features","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/issue_4266.rs","byte_start":44,"byte_end":55,"line_start":2,"line_end":2,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"#![feature(async_await)]","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D stable-features` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: the feature `async_await` has been stable since 1.38.0 and no longer requires an attribute to enable\n  --> tests/ui/issue_4266.rs:2:12\n   |\nLL | #![feature(async_await)]\n   |            ^^^^^^^^^^^\n   |\n   = note: `-D stable-features` implied by `-D warnings`\n\n"}
2019-08-21T04:53:52.6603194Z {"message":"explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)","code":{"code":"clippy::needless_lifetimes","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/issue_4266.rs","byte_start":80,"byte_end":113,"line_start":5,"line_end":5,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"async fn sink1<'a>(_: &'a str) {} // lint","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::needless-lifetimes` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n  --> tests/ui/issue_4266.rs:5:1\n   |\nLL | async fn sink1<'a>(_: &'a str) {} // lint\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n\n"}
2019-08-21T04:53:52.6605417Z {"message":"explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)","code":{"code":"clippy::needless_lifetimes","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/issue_4266.rs","byte_start":171,"byte_end":227,"line_start":9,"line_end":11,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"async fn one_to_one<'a>(s: &'a str) -> &'a str {","highlight_start":1,"highlight_end":49},{"text":"    s","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n  --> tests/ui/issue_4266.rs:9:1\n   |\nLL | / async fn one_to_one<'a>(s: &'a str) -> &'a str {\nLL | |     s\nLL | | }\n   | |_^\n\n"}
2019-08-21T04:53:52.6606889Z 
2019-08-21T04:53:52.6608021Z ------------------------------------------
2019-08-21T04:53:52.6608090Z 
2019-08-21T04:53:52.6609826Z thread '[ui] ui/issue_4266.rs' panicked at 'explicit panic', /cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.3.22/src/runtest.rs:2632:9
---
2019-08-21T04:53:52.6728282Z 
2019-08-21T04:53:52.6728494Z ------------------------------------------
2019-08-21T04:53:52.6728550Z stderr:
2019-08-21T04:53:52.6729135Z ------------------------------------------
2019-08-21T04:53:52.6730467Z {"message":"the feature `async_await` has been stable since 1.38.0 and no longer requires an attribute to enable","code":{"code":"stable_features","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":76,"byte_end":87,"line_start":4,"line_end":4,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"#![feature(async_await)]","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D stable-features` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: the feature `async_await` has been stable since 1.38.0 and no longer requires an attribute to enable\n  --> tests/ui/methods.rs:4:12\n   |\nLL | #![feature(async_await)]\n   |            ^^^^^^^^^^^\n   |\n   = note: `-D stable-features` implied by `-D warnings`\n\n"}
2019-08-21T04:53:52.6733369Z {"message":"defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name","code":{"code":"clippy::should_implement_trait","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":845,"byte_end":897,"line_start":37,"line_end":39,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn add(self, other: T) -> T {","highlight_start":5,"highlight_end":38},{"text":"        self","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::should-implement-trait` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n  --> tests/ui/methods.rs:37:5\n   |\nLL | /     pub fn add(self, other: T) -> T {\nLL | |         self\nLL | |     }\n   | |_____^\n   |\n   = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n\n"}
2019-08-21T04:53:52.6735127Z {"message":"methods called `new` usually return `Self`","code":{"code":"clippy::new_ret_no_self","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":2661,"byte_end":2694,"line_start":153,"line_end":155,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn new() -> i32 {","highlight_start":5,"highlight_end":22},{"text":"        0","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::new-ret-no-self` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: methods called `new` usually return `Self`\n  --> tests/ui/methods.rs:153:5\n   |\nLL | /     fn new() -> i32 {\nLL | |         0\nLL | |     }\n   | |_____^\n   |\n   = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n\n"}
2019-08-21T04:53:52.6738363Z {"message":"called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead","code":{"code":"clippy::option_map_unwrap_or","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":3073,"byte_end":3196,"line_start":175,"line_end":177,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| x + 1)","highlight_start":13,"highlight_end":31},{"text":"                // Should lint even though this call is on a separate line.","highlight_start":1,"highlight_end":76},{"text":"               .unwrap_or(0);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::option-map-unwrap-or` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n  --> tests/ui/methods.rs:175:13\n   |\nLL |       let _ = opt.map(|x| x + 1)\n   |  _____________^\nLL | |                 // Should lint even though this call is on a separate line.\nLL | |                .unwrap_or(0);\n   | |____________________________^\n   |\n   = note: `-D clippy::option-map-unwrap-or` implied by `-D warnings`\n   = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n\n"}
2019-08-21T04:53:52.6741012Z {"message":"called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead","code":{"code":"clippy::option_map_unwrap_or","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":3235,"byte_end":3329,"line_start":179,"line_end":182,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| {","highlight_start":13,"highlight_end":26},{"text":"                        x + 1","highlight_start":1,"highlight_end":30},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"              ).unwrap_or(0);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n  --> tests/ui/methods.rs:179:13\n   |\nLL |       let _ = opt.map(|x| {\n   |  _____________^\nLL | |                         x + 1\nLL | |                     }\nLL | |               ).unwrap_or(0);\n   | |____________________________^\n\n"}
2019-08-21T04:53:52.6743976Z {"message":"called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead","code":{"code":"clippy::option_map_unwrap_or","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":3343,"byte_end":3430,"line_start":183,"line_end":186,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| x + 1)","highlight_start":13,"highlight_end":31},{"text":"               .unwrap_or({","highlight_start":1,"highlight_end":28},{"text":"                    0","highlight_start":1,"highlight_end":22},{"text":"                });","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n  --> tests/ui/methods.rs:183:13\n   |\nLL |       let _ = opt.map(|x| x + 1)\n   |  _____________^\nLL | |                .unwrap_or({\nLL | |                     0\nLL | |                 });\n   | |__________________^\n\n"}
2019-08-21T04:53:52.6747772Z {"message":"called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead","code":{"code":"clippy::option_map_unwrap_or","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":3494,"byte_end":3534,"line_start":188,"line_end":188,"column_start":13,"column_end":53,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);","highlight_start":13,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n  --> tests/ui/methods.rs:188:13\n   |\nLL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n\n"}
2019-08-21T04:53:52.6750231Z {"message":"called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead","code":{"code":"clippy::option_map_unwrap_or","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":3598,"byte_end":3659,"line_start":190,"line_end":193,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| {","highlight_start":13,"highlight_end":26},{"text":"        Some(x + 1)","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ).unwrap_or(None);","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n  --> tests/ui/methods.rs:190:13\n   |\nLL |       let _ = opt.map(|x| {\n   |  _____________^\nLL | |         Some(x + 1)\nLL | |     }\nLL | |     ).unwrap_or(None);\n   | |_____________________^\n\n"}
2019-08-21T04:53:52.6752934Z {"message":"called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead","code":{"code":"clippy::option_map_unwrap_or","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":3673,"byte_end":3731,"line_start":194,"line_end":196,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let _ = opt","highlight_start":13,"highlight_end":16},{"text":"        .map(|x| Some(x + 1))","highlight_start":1,"highlight_end":30},{"text":"        .unwrap_or(None);","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n  --> tests/ui/methods.rs:194:13\n   |\nLL |       let _ = opt\n   |  _____________^\nLL | |         .map(|x| Some(x + 1))\nLL | |         .unwrap_or(None);\n   | |________________________^\n   |\n   = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n\n"}
2019-08-21T04:53:52.6754786Z {"message":"called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead","code":{"code":"clippy::option_map_unwrap_or","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":4117,"byte_end":4172,"line_start":205,"line_end":205,"column_start":13,"column_end":68,"is_primary":true,"text":[{"text":"    let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);","highlight_start":13,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n  --> tests/ui/methods.rs:205:13\n   |\nLL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n\n"}
2019-08-21T04:53:52.6757111Z {"message":"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead","code":{"code":"clippy::option_map_unwrap_or_else","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":4250,"byte_end":4381,"line_start":209,"line_end":211,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| x + 1)","highlight_start":13,"highlight_end":31},{"text":"                // Should lint even though this call is on a separate line.","highlight_start":1,"highlight_end":76},{"text":"               .unwrap_or_else(|| 0);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::option-map-unwrap-or-else` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n  --> tests/ui/methods.rs:209:13\n   |\nLL |       let _ = opt.map(|x| x + 1)\n   |  _____________^\nLL | |                 // Should lint even though this call is on a separate line.\nLL | |                .unwrap_or_else(|| 0);\n   | |____________________________________^\n   |\n   = note: `-D clippy::option-map-unwrap-or-else` implied by `-D warnings`\n   = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n\n"}
2019-08-21T04:53:52.6759840Z {"message":"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead","code":{"code":"clippy::option_map_unwrap_or_else","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":4420,"byte_end":4522,"line_start":213,"line_end":216,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| {","highlight_start":13,"highlight_end":26},{"text":"                        x + 1","highlight_start":1,"highlight_end":30},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"              ).unwrap_or_else(|| 0);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n  --> tests/ui/methods.rs:213:13\n   |\nLL |       let _ = opt.map(|x| {\n   |  _____________^\nLL | |                         x + 1\nLL | |                     }\nLL | |               ).unwrap_or_else(|| 0);\n   | |____________________________________^\n\n"}
2019-08-21T04:53:52.6762062Z {"message":"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead","code":{"code":"clippy::option_map_unwrap_or_else","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":4536,"byte_end":4628,"line_start":217,"line_end":220,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    let _ = opt.map(|x| x + 1)","highlight_start":13,"highlight_end":31},{"text":"               .unwrap_or_else(||","highlight_start":1,"highlight_end":34},{"text":"                    0","highlight_start":1,"highlight_end":22},{"text":"                );","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n  --> tests/ui/methods.rs:217:13\n   |\nLL |       let _ = opt.map(|x| x + 1)\n   |  _____________^\nLL | |                .unwrap_or_else(||\nLL | |                     0\nLL | |                 );\n   | |_________________^\n\n"}
2019-08-21T04:53:52.6764118Z {"message":"called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.","code":{"code":"clippy::filter_next","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":5228,"byte_end":5263,"line_start":247,"line_end":247,"column_start":13,"column_end":48,"is_primary":true,"text":[{"text":"    let _ = v.iter().filter(|&x| *x < 0).next();","highlight_start":13,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::filter-next` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n  --> tests/ui/methods.rs:247:13\n   |\nLL |     let _ = v.iter().filter(|&x| *x < 0).next();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `-D clippy::filter-next` implied by `-D warnings`\n   = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n\n"}
2019-08-21T04:53:52.6765938Z {"message":"called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.","code":{"code":"clippy::filter_next","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":5302,"byte_end":5421,"line_start":250,"line_end":253,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"    let _ = v.iter().filter(|&x| {","highlight_start":13,"highlight_end":35},{"text":"                                *x < 0","highlight_start":1,"highlight_end":39},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                   ).next();","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n  --> tests/ui/methods.rs:250:13\n   |\nLL |       let _ = v.iter().filter(|&x| {\n   |  _____________^\nLL | |                                 *x < 0\nLL | |                             }\nLL | |                    ).next();\n   | |___________________________^\n\n"}
2019-08-21T04:53:52.6767817Z {"message":"called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.","code":{"code":"clippy::search_is_some","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":5778,"byte_end":5814,"line_start":266,"line_end":266,"column_start":13,"column_end":49,"is_primary":true,"text":[{"text":"    let _ = v.iter().find(|&x| *x < 0).is_some();","highlight_start":13,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::search-is-some` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n  --> tests/ui/methods.rs:266:13\n   |\nLL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `-D clippy::search-is-some` implied by `-D warnings`\n   = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n\n"}
2019-08-21T04:53:52.6770436Z {"message":"called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.","code":{"code":"clippy::search_is_some","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":5879,"byte_end":5995,"line_start":269,"line_end":272,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"    let _ = v.iter().find(|&x| {","highlight_start":13,"highlight_end":33},{"text":"                              *x < 0","highlight_start":1,"highlight_end":37},{"text":"                          }","highlight_start":1,"highlight_end":28},{"text":"                   ).is_some();","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n  --> tests/ui/methods.rs:269:13\n   |\nLL |       let _ = v.iter().find(|&x| {\n   |  _____________^\nLL | |                               *x < 0\nLL | |                           }\nLL | |                    ).is_some();\n   | |______________________________^\n\n"}
2019-08-21T04:53:52.6772822Z {"message":"called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.","code":{"code":"clippy::search_is_some","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":6065,"byte_end":6104,"line_start":275,"line_end":275,"column_start":13,"column_end":52,"is_primary":true,"text":[{"text":"    let _ = v.iter().position(|&x| x < 0).is_some();","highlight_start":13,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n  --> tests/ui/methods.rs:275:13\n   |\nLL |     let _ = v.iter().position(|&x| x < 0).is_some();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n\n"}
2019-08-21T04:53:52.6775859Z {"message":"called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.","code":{"code":"clippy::search_is_some","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":6173,"byte_end":6300,"line_start":278,"line_end":281,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"    let _ = v.iter().position(|&x| {","highlight_start":13,"highlight_end":37},{"text":"                                  x < 0","highlight_start":1,"highlight_end":40},{"text":"                              }","highlight_start":1,"highlight_end":32},{"text":"                   ).is_some();","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n  --> tests/ui/methods.rs:278:13\n   |\nLL |       let _ = v.iter().position(|&x| {\n   |  _____________^\nLL | |                                   x < 0\nLL | |                               }\nLL | |                    ).is_some();\n   | |______________________________^\n\n"}
2019-08-21T04:53:52.6779234Z {"message":"called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.","code":{"code":"clippy::search_is_some","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":6371,"byte_end":6411,"line_start":284,"line_end":284,"column_start":13,"column_end":53,"is_primary":true,"text":[{"text":"    let _ = v.iter().rposition(|&x| x < 0).is_some();","highlight_start":13,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n  --> tests/ui/methods.rs:284:13\n   |\nLL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n\n"}
2019-08-21T04:53:52.6781382Z {"message":"called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.","code":{"code":"clippy::search_is_some","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":6481,"byte_end":6611,"line_start":287,"line_end":290,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"    let _ = v.iter().rposition(|&x| {","highlight_start":13,"highlight_end":38},{"text":"                                   x < 0","highlight_start":1,"highlight_end":41},{"text":"                               }","highlight_start":1,"highlight_end":33},{"text":"                   ).is_some();","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n  --> tests/ui/methods.rs:287:13\n   |\nLL |       let _ = v.iter().rposition(|&x| {\n   |  _____________^\nLL | |                                    x < 0\nLL | |                                }\nLL | |                    ).is_some();\n   | |______________________________^\n\n"}
2019-08-21T04:53:52.6783388Z {"message":"used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message","code":{"code":"clippy::option_unwrap_used","explanation":null},"level":"error","spans":[{"file_name":"tests/ui/methods.rs","byte_start":6924,"byte_end":6936,"line_start":302,"line_end":302,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let _ = opt.unwrap();","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-D clippy::option-unwrap-used` implied by `-D warnings`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n  --> tests/ui/methods.rs:302:13\n   |\nLL |     let _ = opt.unwrap();\n   |             ^^^^^^^^^^^^\n   |\n   = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n\n"}
2019-08-21T04:53:52.6783890Z 
2019-08-21T04:53:52.6784114Z ------------------------------------------
2019-08-21T04:53:52.6784180Z 
2019-08-21T04:53:52.6784560Z thread '[ui] ui/methods.rs' panicked at 'explicit panic', /cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.3.22/src/runtest.rs:2632:9
---
2019-08-21T05:32:02.3793520Z 
2019-08-21T05:32:02.3793556Z 
2019-08-21T05:32:02.3818889Z diff of stderr:
2019-08-21T05:32:02.3818947Z 
2019-08-21T05:32:02.3819045Z +warning: the feature `async_await` has been stable since 1.38.0 and no longer requires an attribute to enable
2019-08-21T05:32:02.3819450Z + --> $DIR/async-fn.rs:1:12
2019-08-21T05:32:02.3819535Z +  |
2019-08-21T05:32:02.3819586Z +1 | #![feature(async_await, never_type)]
2019-08-21T05:32:02.3819662Z +  |            ^^^^^^^^^^^
2019-08-21T05:32:02.3819713Z +  |
2019-08-21T05:32:02.3819784Z +  = note: `#[warn(stable_features)]` on by default
2019-08-21T05:32:02.3819901Z +
2019-08-21T05:32:02.3819929Z 
2019-08-21T05:32:02.3820000Z The actual stderr differed from the expected stderr.
2019-08-21T05:32:02.3820000Z The actual stderr differed from the expected stderr.
2019-08-21T05:32:02.3820249Z Actual stderr saved to /tmp/compiletestGBMuwG/async-fn.stderr
2019-08-21T05:32:02.3820341Z To update references, run this command from build directory:
2019-08-21T05:32:02.3820821Z tests/run-pass/update-references.sh '/tmp/compiletestGBMuwG' 'async-fn.rs'
2019-08-21T05:32:02.3820937Z error: 1 errors occurred comparing output.
2019-08-21T05:32:02.3821010Z status: exit code: 0
2019-08-21T05:32:02.3821010Z status: exit code: 0
2019-08-21T05:32:02.3822035Z command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2-tools-bin/miri" "tests/run-pass/async-fn.rs" "-L" "/tmp/compiletestGBMuwG" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-C" "prefer-dynamic" "-o" "/tmp/compiletestGBMuwG/async-fn.stage-id" "--edition" "2018" "--sysroot" "/home/user/.cache/miri/HOST" "-L" "/tmp/compiletestGBMuwG/async-fn.stage-id.aux" "-A" "unused"
2019-08-21T05:32:02.3822531Z ------------------------------------------
2019-08-21T05:32:02.3822603Z 
2019-08-21T05:32:02.3822907Z ------------------------------------------
2019-08-21T05:32:02.3822999Z stderr:
2019-08-21T05:32:02.3822999Z stderr:
2019-08-21T05:32:02.3823247Z ------------------------------------------
2019-08-21T05:32:02.3824651Z {"message":"the feature `async_await` has been stable since 1.38.0 and no longer requires an attribute to enable","code":{"code":"stable_features","explanation":null},"level":"warning","spans":[{"file_name":"tests/run-pass/async-fn.rs","byte_start":11,"byte_end":22,"line_start":1,"line_end":1,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"#![feature(async_await, never_type)]","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(stable_features)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"warning: the feature `async_await` has been stable since 1.38.0 and no longer requires an attribute to enable\n --> tests/run-pass/async-fn.rs:1:12\n  |\n1 | #![feature(async_await, never_type)]\n  |            ^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"}
2019-08-21T05:32:02.3825393Z ------------------------------------------
2019-08-21T05:32:02.3825439Z 
2019-08-21T05:32:02.3825894Z thread '[ui] run-pass/async-fn.rs' panicked at 'explicit panic', /cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.3.22/src/runtest.rs:2632:9
2019-08-21T05:32:02.3826021Z note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
---
2019-08-21T05:32:23.9927171Z Verifying status of clippy-driver...
2019-08-21T05:32:23.9935523Z Verifying status of miri...
2019-08-21T05:32:23.9946737Z This PR updated 'src/tools/miri', verifying if status is 'test-pass'...
2019-08-21T05:32:23.9957959Z 
2019-08-21T05:32:23.9959796Z ⚠️ We detected that this PR updated 'miri', but its tests failed.
2019-08-21T05:32:23.9959861Z 
2019-08-21T05:32:23.9960198Z If you do intend to update 'miri', please check the error messages above and
2019-08-21T05:32:23.9960298Z commit another update.
2019-08-21T05:32:23.9960336Z 
2019-08-21T05:32:23.9960582Z If you do NOT intend to update 'miri', please ensure you did not accidentally
2019-08-21T05:32:23.9960857Z change the submodule at 'src/tools/miri'. You may ask your reviewer for the
2019-08-21T05:32:23.9960947Z proper steps.
2019-08-21T05:32:23.9967727Z   local time: Wed Aug 21 05:32:23 UTC 2019
2019-08-21T05:32:24.0791589Z   network time: Wed, 21 Aug 2019 05:32:24 GMT
2019-08-21T05:32:24.0795356Z == end clock drift check ==
2019-08-21T05:32:24.0795356Z == end clock drift check ==
2019-08-21T05:32:24.7805052Z ##[error]Bash exited with code '3'.
2019-08-21T05:32:24.7843667Z ##[section]Starting: Upload CPU usage statistics
2019-08-21T05:32:24.7850463Z ==============================================================================
2019-08-21T05:32:24.7850559Z Task         : Bash
2019-08-21T05:32:24.7850618Z Description  : Run a Bash script on macOS, Linux, or Windows
