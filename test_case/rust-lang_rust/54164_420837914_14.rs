\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/nll/user-annotations/patterns.rs","byte_start":1209,"byte_end":1222,"line_start":56,"line_end":56,"column_start":52,"column_end":65,"is_primary":true,"text":[{"text":"    let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);","highlight_start":52,"highlight_end":65}],"label":"creates a temporary which is freed while still in use","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/nll/user-annotations/patterns.rs","byte_start":1228,"byte_end":1229,"line_start":56,"line_end":56,"column_start":71,"column_end":72,"is_primary":false,"text":[{"text":"    let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);","highlight_start":71,"highlight_end":72}],"label":"temporary value is freed at the end of this statement","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the static lifetime...","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0713]: temporary value borrowed for too long\n  --> /checkout/src/test/ui/nll/user-annotations/patterns.rs:56:52\n   |\nLL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n   |                                                    ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n   |                                                    |\n   |                                                    creates a temporary which is freed while still in use\n   |\n   = note: borrowed value must be valid for the static lifetime...\n\n"}
[00:54:02] {"message":"temporary value borrowed for too long","code":{"code":"E0713","explanation":"\nWhen you write `&expr` and `expr` is not a \"path\" rooted in some\nvariable (e.g., `&foo.bar`) but rather something that creates\na new value (e.g., `&foo()`), a temporary will be created:\n\n