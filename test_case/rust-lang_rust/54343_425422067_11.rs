\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/first-edition/ownership.html\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/nll/closures-in-loops.rs","byte_start":636,"byte_end":638,"line_start":18,"line_end":18,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        || x; //~ ERROR","highlight_start":9,"highlight_end":11}],"label":"value moved into closure here, in previous iteration of loop","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/nll/closures-in-loops.rs","byte_start":639,"byte_end":640,"line_start":18,"line_end":18,"column_start":12,"column_end":13,"is_primary":false,"text":[{"text":"        || x; //~ ERROR","highlight_start":12,"highlight_end":13}],"label":"use occurs due to use in closure","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0382]: use of moved value: `x`\n  --> /checkout/src/test/ui/nll/closures-in-loops.rs:18:9\n   |\nLL |         || x; //~ ERROR\n   |         ^^ - use occurs due to use in closure\n   |         |\n   |         value moved into closure here, in previous iteration of loop\n   |\n   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n\n"}
[00:48:45] {"message":"cannot borrow `x` as mutable more than once at a time","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n