\n\nThe machine code for `foo::<u8>()`, `foo::<bool>()`, `foo::<String>()`, or any\nother type substitution is different. Hence the compiler generates the\nimplementation on-demand. If you call `foo()` with a `bool` parameter, the\ncompiler will only generate code for `foo::<bool>()`. When we have additional\ntype parameters, the number of monomorphized implementations the compiler\ngenerates does not grow drastically, since the compiler will only generate an\nimplementation if the function is called with unparametrized substitutions\n(i.e., substitutions where none of the substituted types are themselves\nparametrized).\n\nHowever, with trait objects we have to make a table containing _every_ object\nthat implements the trait. Now, if it has type parameters, we need to add\nimplementations for every type that implean object of that type.\n\nHowever, if it derives from `Super<Self>`, even though `Super` is object safe,\nthe method `get_a()` would return an object of unknown type when called on the\nfunction. `Self` type parameters let us make object safe traits no longer safe,\nso they are forbidden when specifying supertraits.\n\nThere's no easy fix for this, generally code will need to be refactored so that\nyou no longer need to derive from `Super<Self>`.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/run-pass-fulldeps/auxiliary/plugin_args.rs","byte_start":1094,"byte_end":1477,"line_start":38,"line_end":46,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn expand<'cx>(&self,","highlight_start":5,"highlight_end":26},{"text":"                   ecx: &'cx mut ExtCtxt,","highlight_start":1,"highlight_end":42},{"text":"                   sp: Span,","highlight_start":1,"highlight_end":29},{"text":"                   _: TokenStream,","highlight_start":1,"highlight_end":35},{"text":"                   _: Option<Span>) -> Box<MacResult+'cx> {","highlight_start":1,"highlight_end":60},{"text":"        let args = self.args.iter().map(|i| pprust::meta_list_item_to_string(i))","highlight_start":1,"highlight_end":81},{"text":"            .collect::<Vec<_>>().join(\", \");","highlight_start":1,"highlight_end":45},{"text":"        MacEager::expr(ecx.expr_str(sp, Symbol::intern(&args)))","highlight_start":1,"highlight_end":64},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"the trait `syntax::ext::base::MacResult` cannot be made into an object","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait cannot require that `Self : Sized`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0038]: the trait `syntax::ext::base::MacResult` cannot be made into an object\n  --> /checkout/src/test/run-pass-fulldeps/auxiliary/plugin_args.rs:38:5\n   |\nLL | /     fn expand<'cx>(&self,\nLL | |                    ecx: &'cx mut ExtCtxt,\nLL | |                    sp: Span,\nLL | |                    _: TokenStream,\n...  |\nLL | |         MacEager::expr(ecx.expr_str(sp, Symbol::intern(&args)))\nLL | |     }\n   | |_____^ the trait `syntax::ext::base::MacResult` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n\n"}
[00:58:23] {"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to previous error\n\n"}
[00:58:23] {"message":"For more information about this error, try `rustc --explain E0038`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0038`.\n"}
[00:58:23] ------------------------------------------
[00:58:23] 
[00:58:23] thread '[run-pass] run-pass-fulldeps/plugin-args-2.rs' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3252:9
[00:58:23] 
[00:58:23] 
[00:58:23] ---- [run-pass] run-pass-fulldeps/plugin-args-3.rs stdout ----
[00:58:23] 
[00:58:23] error: auxiliary build of "/checkout/src/test/run-pass-fulldeps/auxiliary/plugin_args.rs" failed to compile: 
[00:58:23] status: exit code: 1
[00:58:23] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/run-pass-fulldeps/auxiliary/plugin_args.rs" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "--out-dir" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/run-pass-fulldeps/plugin-args-3/auxiliary" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--crate-type" "dylib" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/run-pass-fulldeps/plugin-args-3/auxiliary"
[00:58:23] ------------------------------------------
[00:58:23] 
[00:58:23] ------------------------------------------
[00:58:23] stderr:
[00:58:23] stderr:
[00:58:23] ------------------------------------------
[00:58:23] {"message":"unused import: `syntax::ptr::P`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/checkout/src/test/run-pass-fulldeps/auxiliary/plugin_args.rs","byte_start":864,"byte_end":878,"line_start":27,"line_end":27,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use syntax::ptr::P;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"#[warn(unused_imports)] on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"warning: unused import: `syntax::ptr::P`\n  --> /checkout/src/test/run-pass-fulldeps/auxiliary/plugin_args.rs:27:5\n   |\nLL | use syntax::ptr::P;\n   |     ^^^^^^^^^^^^^^\n   |\n   = note: #[warn(unused_imports)] on by default\n\n"}
[00:58:23] {"message":"the trait `syntax::ext::base::MacResult` cannot be made into an object","code":{"code":"E0038","explanation":"\nTrait objects like `Box<Trait>` can only be constructed when certain\nrequirements are satisfied by the trait in question.\n\nTrait objects are a form of dynamic dispatch and use a dynamically sized type\nfor the inner type. So, for a given trait `Trait`, when `Trait` is treated as a\ntype, as in `Box<Trait>`, the inner type is 'unsized'. In such cases the boxed\npointer is a 'fat pointer' that contains an extra pointer to a table of methods\n(among other things) for dynamic dispatch. This design mandates some\nrestrictions on the types of traits that are allowed to be used in trait\nobjects, which are collectively termed as 'object safety' rules.\n\nAttempting to create a trait object for a non object-safe trait will trigger\nthis error.\n\nThere are various rules:\n\n### The trait cannot require `Self: Sized`\n\nWhen `Trait` is treated as a type, the type does not implement the special\n`Sized` trait, because the type does not have a known size at compile time and\ncan only be accessed behind a pointer. Thus, if we have a trait like the\nfollowing:\n\n