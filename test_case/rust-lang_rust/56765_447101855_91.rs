\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/first-edition/ownership.html\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/binop/binop-consume-args.rs","byte_start":1187,"byte_end":1190,"line_start":35,"line_end":35,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    drop(lhs);  //~ ERROR use of moved value: `lhs`","highlight_start":10,"highlight_end":13}],"label":"value used here after move","suggested_replacement":nullence, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n