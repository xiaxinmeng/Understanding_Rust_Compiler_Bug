plain
travis_time:end:05b6fb20:start=1541976243711663214,finish=1541976246247023829,duration=2535360615
$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout

Encrypted environment variables have been removed for security reasons.
See https://docs.travis-ci.com/user/pull-requests/#Pull-Requests-and-Security-Restrictions
$ export SCCACHE_BUCKET=rust-lang-ci-sccache2
$ export SCCACHE_REGION=us-west-1
Setting environment variables from .travis.yml
$ export IMAGE=x86_64-gnu-llvm-5.0
---
[00:55:23] .................................................................................................... 100/5015
[00:55:26] .................................................................................................... 200/5015
[00:55:29] .............................ii............................................ii...................ii.. 300/5015
[00:55:32] ..............................................................................................iii... 400/5015
[00:55:35] .....iiiiiiii.iii............................iii...........................................i........ 500/5015
[00:55:42] .................................................................................................... 700/5015
[00:55:49] ..............................................................................i...........i......... 800/5015
[00:55:52] .................................................................................................iii 900/5015
[00:55:56] ii..................ii.iiii......................................................................... 1000/5015
---
[00:56:33] .................................................................................................... 2200/5015
[00:56:37] .................................................................................................... 2300/5015
[00:56:41] .................................................................................................... 2400/5015
[00:56:45] .................................................................................................... 2500/5015
[00:56:49] ..............................................................................iiiiiiiii............. 2600/5015
[00:56:56] ...........................................ii....................................................... 2800/5015
[00:56:59] .................................................................................................... 2900/5015
[00:57:03] .................................................................................................... 3000/5015
[00:57:06] .....................................i.............................................................. 3100/5015
---
travis_time:start:test_codegen
Check compiletest suite=codegen mode=codegen (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
[01:11:50] 
[01:11:50] running 115 tests
[01:11:53] i..ii...iii..iii.....i...i.........i..iii...........i.....i.....ii...i..i.ii..............i...ii..ii 100/115
[01:11:53] .i....iiii.....
[01:11:53] 
[01:11:53]  finished in 3.722
[01:11:53] travis_fold:end:test_codegen

---
travis_time:start:test_debuginfo
Check compiletest suite=debuginfo mode=debuginfo-both (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
[01:12:08] 
[01:12:08] running 118 tests
[01:12:33] .iiiii...i.....i..i...i..i.i..i.i..i.....i..i....i..........iiii.........i.i....i...i.......ii.i.i.i 100/118
[01:12:37] ......iii.i.....ii
[01:12:37] 
[01:12:37]  finished in 28.575
[01:12:37] travis_fold:end:test_debuginfo

---
travis_time:start:test_run-pass-fulldeps
Check compiletest suite=run-pass-fulldeps mode=run-pass (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
[01:13:18] 
[01:13:18] running 97 tests
[01:15:27] ........................................F............test [run-pass] run-pass-fulldeps/myriad-closures.rs has been running for over 60 seconds
[01:18:40] failures:
[01:18:40] 
[01:18:40] ---- [run-pass] run-pass-fulldeps/newtype_index.rs stdout ----
[01:18:40] 
[01:18:40] 
[01:18:40] error: test compilation failed although it shouldn't!
[01:18:40] status: exit code: 1
[01:18:40] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/run-pass-fulldeps/newtype_index.rs" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "-Zui-testing" "-C" "prefer-dynamic" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/run-pass-fulldeps/newtype_index/a" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/run-pass-fulldeps/newtype_index/auxiliary"
[01:18:40] ------------------------------------------
[01:18:40] 
[01:18:40] ------------------------------------------
[01:18:40] stderr:
[01:18:40] stderr:
[01:18:40] ------------------------------------------
[01:18:40] thread 'main' panicked at 'Some tests failed', tools/compiletest/src/main.rs:503:22
[01:18:40] {"message":"call to unsafe function is unsafe and unsafe operations are not allowed in const fn","code":null,"level":"error","spans":[{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":1131,"byte_end":1132,"line_start":23,"line_end":23,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"unsafe { $ type :: from_u32_unchecked ( value ) } } # [ inline ] $ v const","highlight_start":47,"highlight_end":48}],"label":"call to unsafe function","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":6601,"byte_end":6755,"line_start":120,"line_end":122,"column_start":1,"column_end":61,"is_primary":false,"text":[{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":5804,"byte_end":5963,"line_start":107,"line_end":109,"column_start":1,"column_end":66,"is_primary":false,"text":[{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ name = $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":5437,"byte_end":5605,"line_start":100,"line_end":102,"column_start":1,"column_end":77,"is_primary":false,"text":[{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ RustcDecodable , RustcEncodable , ] @ type [ $ type ] @ max [","highlight_start":1,"highlight_end":74},{"text":"$ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; )","highlight_start":1,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":219,"byte_end":335,"line_start":5,"line_end":7,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":"$ ( $ tokens ) + ) ; ) ; (","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/run-pass-fulldeps/newtype_index.rs","byte_start":179,"byte_end":230,"line_start":8,"line_end":8,"column_start":1,"column_end":52,"is_primary":false,"text":[{"text":"newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });","highlight_start":1,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"newtype_index!","def_site_span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":0,"byte_end":7643,"line_start":1,"line_end":136,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"( $ v : vis struct $ name : ident { .. } ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":") ; ) ; ( $ v : vis struct $ name : ident { $ ( $ tokens : tt ) + } ) => (","highlight_start":1,"highlight_end":75},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":"$ ( $ tokens ) + ) ; ) ; (","highlight_start":1,"highlight_end":27},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] ) =>","highlight_start":1,"highlight_end":79},{"text":"(","highlight_start":1,"highlight_end":2},{"text":"# [","highlight_start":1,"highlight_end":4},{"text":"derive (","highlight_start":1,"highlight_end":9},{"text":"Copy , Clone , PartialEq , Eq , Hash , PartialOrd , Ord , $ ( $ derives ) , *","highlight_start":1,"highlight_end":78},{"text":") ] # [ rustc_layout_scalar_valid_range_end ( $ max ) ] $ v struct $ type {","highlight_start":1,"highlight_end":76},{"text":"private : u32 } impl $ type {","highlight_start":1,"highlight_end":30},{"text":"$ v const MAX_AS_U32 : u32 = $ max ; $ v const MAX : $ type = $ type ::","highlight_start":1,"highlight_end":72},{"text":"from_u32 ( $ max ) ; # [ inline ] $ v fn from_usize ( value : usize ) -> Self","highlight_start":1,"highlight_end":78},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"assert ! ( value <= ( $ max as usize ) ) ; unsafe {","highlight_start":1,"highlight_end":52},{"text":"$ type :: from_u32_unchecked ( value as u32 ) } } # [ inline ] $ v const fn","highlight_start":1,"highlight_end":76},{"text":"from_u32 ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":35},{"text":"let _ = [ \"out of range value used\" ] [ ! ( value <= $ max ) as usize ] ;","highlight_start":1,"highlight_end":74},{"text":"unsafe { $ type :: from_u32_unchecked ( value ) } } # [ inline ] $ v const","highlight_start":1,"highlight_end":75},{"text":"unsafe fn from_u32_unchecked ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":55},{"text":"$ type { private : value } } /// Extract value of this index as an integer.","highlight_start":1,"highlight_end":76},{"text":" # [ inline ] $ v fn index ( self ) -> usize { self . as_usize (  ) }","highlight_start":1,"highlight_end":70},{"text":"/// Extract value of this index as a usize.","highlight_start":1,"highlight_end":44},{"text":" # [ inline ] $ v const fn as_u32 ( self ) -> u32 { self . private }","highlight_start":1,"highlight_end":69},{"text":"/// Extract value of this index as a u32.","highlight_start":1,"highlight_end":42},{"text":" # [ inline ] $ v fn as_usize ( self ) -> usize { self . as_u32 (  ) as usize","highlight_start":1,"highlight_end":78},{"text":"} } impl Idx for $ type {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn new ( value : usize ) -> Self { Self :: from ( value ) } # [","highlight_start":1,"highlight_end":77},{"text":"inline ] fn index ( self ) -> usize { usize :: from ( self ) } } impl :: std","highlight_start":1,"highlight_end":77},{"text":":: iter :: Step for $ type {","highlight_start":1,"highlight_end":29},{"text":"# [ inline ] fn steps_between ( start : & Self , end : & Self ) -> Option <","highlight_start":1,"highlight_end":76},{"text":"usize > {","highlight_start":1,"highlight_end":10},{"text":"< usize as :: std :: iter :: Step > :: steps_between (","highlight_start":1,"highlight_end":55},{"text":"& Idx :: index ( * start ) , & Idx :: index ( * end ) , ) } # [ inline ] fn","highlight_start":1,"highlight_end":76},{"text":"replace_one ( & mut self ) -> Self {","highlight_start":1,"highlight_end":37},{"text":":: std :: mem :: replace ( self , Self :: new ( 1 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"replace_zero ( & mut self ) -> Self {","highlight_start":1,"highlight_end":38},{"text":":: std :: mem :: replace ( self , Self :: new ( 0 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"add_one ( & self ) -> Self { Self :: new ( Idx :: index ( * self ) + 1 ) } # [","highlight_start":1,"highlight_end":79},{"text":"inline ] fn sub_one ( & self ) -> Self {","highlight_start":1,"highlight_end":41},{"text":"Self :: new ( Idx :: index ( * self ) - 1 ) } # [ inline ] fn add_usize (","highlight_start":1,"highlight_end":74},{"text":"& self , u : usize ) -> Option < Self > {","highlight_start":1,"highlight_end":42},{"text":"Idx :: index ( * self ) . checked_add ( u ) . map ( Self :: new ) } } impl","highlight_start":1,"highlight_end":75},{"text":"From < $ type > for u32 {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn from ( v : $ type ) -> u32 { v . as_u32 (  ) } } impl From < $","highlight_start":1,"highlight_end":79},{"text":"type > for usize {","highlight_start":1,"highlight_end":19},{"text":"# [ inline ] fn from ( v : $ type ) -> usize { v . as_usize (  ) } } impl From","highlight_start":1,"highlight_end":79},{"text":"< usize > for $ type {","highlight_start":1,"highlight_end":23},{"text":"# [ inline ] fn from ( value : usize ) -> Self {","highlight_start":1,"highlight_end":49},{"text":"$ type :: from_usize ( value ) } } impl From < u32 > for $ type {","highlight_start":1,"highlight_end":66},{"text":"# [ inline ] fn from ( value : u32 ) -> Self { $ type :: from_u32 ( value ) }","highlight_start":1,"highlight_end":78},{"text":"} newtype_index ! (","highlight_start":1,"highlight_end":20},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ handle_debug @ derives [ $ ( $ _derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":67},{"text":"$ type : ident ] @ debug_format [ custom ] ) => (  ) ; (","highlight_start":1,"highlight_end":57},{"text":"@ handle_debug @ derives [  ] @ type [ $ type : ident ] @ debug_format [","highlight_start":1,"highlight_end":73},{"text":"$ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":29},{"text":"impl :: std :: fmt :: Debug for $ type {","highlight_start":1,"highlight_end":41},{"text":"fn fmt ( & self , fmt : & mut :: std :: fmt :: Formatter ) -> :: std :: fmt ::","highlight_start":1,"highlight_end":79},{"text":"Result { write ! ( fmt , $ debug_format , self . as_u32 (  ) ) } } ) ; (","highlight_start":1,"highlight_end":73},{"text":"@ handle_debug @ derives [ Debug , $ ( $ derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":74},{"text":"$ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (  ) ; (","highlight_start":1,"highlight_end":70},{"text":"@ handle_debug @ derives [ $ _derive : ident , $ ( $ derives : ident , ) * ] @","highlight_start":1,"highlight_end":79},{"text":"type [ $ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":70},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident ) , * ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [","highlight_start":1,"highlight_end":65},{"text":"$ debug_format ] derive [ $ ( $ derives , ) * ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":75},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ]","highlight_start":1,"highlight_end":76},{"text":"ENCODABLE = custom $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + RustcDecodable , RustcEncodable , ] @ type [","highlight_start":1,"highlight_end":77},{"text":"$ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ (","highlight_start":1,"highlight_end":77},{"text":"$ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":23},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] ENCODABLE = custom $ ( $ tokens : tt ) *","highlight_start":1,"highlight_end":78},{"text":") => (","highlight_start":1,"highlight_end":7},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [  ] @ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format","highlight_start":1,"highlight_end":78},{"text":"[ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":46},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ RustcDecodable , RustcEncodable , ] @ type [ $ type ] @ max [","highlight_start":1,"highlight_end":74},{"text":"$ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; )","highlight_start":1,"highlight_end":79},{"text":"; (","highlight_start":1,"highlight_end":4},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $","highlight_start":1,"highlight_end":76},{"text":"name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ name = $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":72},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":79},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":77},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( # [ doc = $ doc ] ) * const $ name","highlight_start":1,"highlight_end":79},{"text":"= $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":25},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] MAX","highlight_start":1,"highlight_end":79},{"text":"= $ max : expr , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":46},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ _debug_format : tt ]","highlight_start":1,"highlight_end":75},{"text":"DEBUG_FORMAT = $ debug_format : tt , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":78},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr , $ (","highlight_start":1,"highlight_end":76},{"text":"$ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":25},{"text":"$ ( # [ doc = $ doc ] ) * pub const $ name : $ type = $ type :: from_u32 (","highlight_start":1,"highlight_end":75},{"text":"$ constant ) ; newtype_index ! (","highlight_start":1,"highlight_end":33},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"newtype_index!","def_site_span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":0,"byte_end":7643,"line_start":1,"line_end":136,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"( $ v : vis struct $ name : ident { .. } ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":") ; ) ; ( $ v : vis struct $ name : ident { $ ( $ tokens : tt ) + } ) => (","highlight_start":1,"highlight_end":75},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":"$ ( $ tokens ) + ) ; ) ; (","highlight_start":1,"highlight_end":27},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] ) =>","highlight_start":1,"highlight_end":79},{"text":"(","highlight_start":1,"highlight_end":2},{"text":"# [","highlight_start":1,"highlight_end":4},{"text":"derive (","highlight_start":1,"highlight_end":9},{"text":"Copy , Clone , PartialEq , Eq , Hash , PartialOrd , Ord , $ ( $ derives ) , *","highlight_start":1,"highlight_end":78},{"text":") ] # [ rustc_layout_scalar_valid_range_end ( $ max ) ] $ v struct $ type {","highlight_start":1,"highlight_end":76},{"text":"private : u32 } impl $ type {","highlight_start":1,"highlight_end":30},{"text":"$ v const MAX_AS_U32 : u32 = $ max ; $ v const MAX : $ type = $ type ::","highlight_start":1,"highlight_end":72},{"text":"from_u32 ( $ max ) ; # [ inline ] $ v fn from_usize ( value : usize ) -> Self","highlight_start":1,"highlight_end":78},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"assert ! ( value <= ( $ max as usize ) ) ; unsafe {","highlight_start":1,"highlight_end":52},{"text":"$ type :: from_u32_unchecked ( value as u32 ) } } # [ inline ] $ v const fn","highlight_start":1,"highlight_end":76},{"text":"from_u32 ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":35},{"text":"let _ = [ \"out of range value used\" ] [ ! ( value <= $ max ) as usize ] ;","highlight_start":1,"highlight_end":74},{"text":"unsafe { $ type :: from_u32_unchecked ( value ) } } # [ inline ] $ v const","highlight_start":1,"highlight_end":75},{"text":"unsafe fn from_u32_unchecked ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":55},{"text":"$ type { private : value } } /// Extract value of this index as an integer.","highlight_start":1,"highlight_end":76},{"text":" # [ inline ] $ v fn index ( self ) -> usize { self . as_usize (  ) }","highlight_start":1,"highlight_end":70},{"text":"/// Extract value of this index as a usize.","highlight_start":1,"highlight_end":44},{"text":" # [ inline ] $ v const fn as_u32 ( self ) -> u32 { self . private }","highlight_start":1,"highlight_end":69},{"text":"/// Extract value of this index as a u32.","highlight_start":1,"highlight_end":42},{"text":" # [ inline ] $ v fn as_usize ( self ) -> usize { self . as_u32 (  ) as usize","highlight_start":1,"highlight_end":78},{"text":"} } impl Idx for $ type {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn new ( value : usize ) -> Self { Self :: from ( value ) } # [","highlight_start":1,"highlight_end":77},{"text":"inline ] fn index ( self ) -> usize { usize :: from ( self ) } } impl :: std","highlight_start":1,"highlight_end":77},{"text":":: iter :: Step for $ type {","highlight_start":1,"highlight_end":29},{"text":"# [ inline ] fn steps_between ( start : & Self , end : & Self ) -> Option <","highlight_start":1,"highlight_end":76},{"text":"usize > {","highlight_start":1,"highlight_end":10},{"text":"< usize as :: std :: iter :: Step > :: steps_between (","highlight_start":1,"highlight_end":55},{"text":"& Idx :: index ( * start ) , & Idx :: index ( * end ) , ) } # [ inline ] fn","highlight_start":1,"highlight_end":76},{"text":"replace_one ( & mut self ) -> Self {","highlight_start":1,"highlight_end":37},{"text":":: std :: mem :: replace ( self , Self :: new ( 1 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"replace_zero ( & mut self ) -> Self {","highlight_start":1,"highlight_end":38},{"text":":: std :: mem :: replace ( self , Self :: new ( 0 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"add_one ( & self ) -> Self { Self :: new ( Idx :: index ( * self ) + 1 ) } # [","highlight_start":1,"highlight_end":79},{"text":"inline ] fn sub_one ( & self ) -> Self {","highlight_start":1,"highlight_end":41},{"text":"Self :: new ( Idx :: index ( * self ) - 1 ) } # [ inline ] fn add_usize (","highlight_start":1,"highlight_end":74},{"text":"& self , u : usize ) -> Option < Self > {","highlight_start":1,"highlight_end":42},{"text":"Idx :: index ( * self ) . checked_add ( u ) . map ( Self :: new ) } } impl","highlight_start":1,"highlight_end":75},{"text":"From < $ type > for u32 {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn from ( v : $ type ) -> u32 { v . as_u32 (  ) } } impl From < $","highlight_start":1,"highlight_end":79},{"text":"type > for usize {","highlight_start":1,"highlight_end":19},{"text":"# [ inline ] fn from ( v : $ type ) -> usize { v . as_usize (  ) } } impl From","highlight_start":1,"highlight_end":79},{"text":"< usize > for $ type {","highlight_start":1,"highlight_end":23},{"text":"# [ inline ] fn from ( value : usize ) -> Self {","highlight_start":1,"highlight_end":49},{"text":"$ type :: from_usize ( value ) } } impl From < u32 > for $ type {","highlight_start":1,"highlight_end":66},{"text":"# [ inline ] fn from ( value : u32 ) -> Self { $ type :: from_u32 ( value ) }","highlight_start":1,"highlight_end":78},{"text":"} newtype_index ! (","highlight_start":1,"highlight_end":20},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ handle_debug @ derives [ $ ( $ _derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":67},{"text":"$ type : ident ] @ debug_format [ custom ] ) => (  ) ; (","highlight_start":1,"highlight_end":57},{"text":"@ handle_debug @ derives [  ] @ type [ $ type : ident ] @ debug_format [","highlight_start":1,"highlight_end":73},{"text":"$ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":29},{"text":"impl :: std :: fmt :: Debug for $ type {","highlight_start":1,"highlight_end":41},{"text":"fn fmt ( & self , fmt : & mut :: std :: fmt :: Formatter ) -> :: std :: fmt ::","highlight_start":1,"highlight_end":79},{"text":"Result { write ! ( fmt , $ debug_format , self . as_u32 (  ) ) } } ) ; (","highlight_start":1,"highlight_end":73},{"text":"@ handle_debug @ derives [ Debug , $ ( $ derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":74},{"text":"$ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (  ) ; (","highlight_start":1,"highlight_end":70},{"text":"@ handle_debug @ derives [ $ _derive : ident , $ ( $ derives : ident , ) * ] @","highlight_start":1,"highlight_end":79},{"text":"type [ $ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":70},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident ) , * ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [","highlight_start":1,"highlight_end":65},{"text":"$ debug_format ] derive [ $ ( $ derives , ) * ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":75},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ]","highlight_start":1,"highlight_end":76},{"text":"ENCODABLE = custom $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + RustcDecodable , RustcEncodable , ] @ type [","highlight_start":1,"highlight_end":77},{"text":"$ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ (","highlight_start":1,"highlight_end":77},{"text":"$ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":23},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] ENCODABLE = custom $ ( $ tokens : tt ) *","highlight_start":1,"highlight_end":78},{"text":") => (","highlight_start":1,"highlight_end":7},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [  ] @ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format","highlight_start":1,"highlight_end":78},{"text":"[ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":46},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ RustcDecodable , RustcEncodable , ] @ type [ $ type ] @ max [","highlight_start":1,"highlight_end":74},{"text":"$ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; )","highlight_start":1,"highlight_end":79},{"text":"; (","highlight_start":1,"highlight_end":4},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $","highlight_start":1,"highlight_end":76},{"text":"name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ name = $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":72},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":79},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":77},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( # [ doc = $ doc ] ) * const $ name","highlight_start":1,"highlight_end":79},{"text":"= $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":25},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] MAX","highlight_start":1,"highlight_end":79},{"text":"= $ max : expr , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":46},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ _debug_format : tt ]","highlight_start":1,"highlight_end":75},{"text":"DEBUG_FORMAT = $ debug_format : tt , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":78},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr , $ (","highlight_start":1,"highlight_end":76},{"text":"$ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":25},{"text":"$ ( # [ doc = $ doc ] ) * pub const $ name : $ type = $ type :: from_u32 (","highlight_start":1,"highlight_end":75},{"text":"$ constant ) ; newtype_index ! (","highlight_start":1,"highlight_end":33},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"newtype_index!","def_site_span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":0,"byte_end":7643,"line_start":1,"line_end":136,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"( $ v : vis struct $ name : ident { .. } ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":") ; ) ; ( $ v : vis struct $ name : ident { $ ( $ tokens : tt ) + } ) => (","highlight_start":1,"highlight_end":75},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":"$ ( $ tokens ) + ) ; ) ; (","highlight_start":1,"highlight_end":27},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] ) =>","highlight_start":1,"highlight_end":79},{"text":"(","highlight_start":1,"highlight_end":2},{"text":"# [","highlight_start":1,"highlight_end":4},{"text":"derive (","highlight_start":1,"highlight_end":9},{"text":"Copy , Clone , PartialEq , Eq , Hash , PartialOrd , Ord , $ ( $ derives ) , *","highlight_start":1,"highlight_end":78},{"text":") ] # [ rustc_layout_scalar_valid_range_end ( $ max ) ] $ v struct $ type {","highlight_start":1,"highlight_end":76},{"text":"private : u32 } impl $ type {","highlight_start":1,"highlight_end":30},{"text":"$ v const MAX_AS_U32 : u32 = $ max ; $ v const MAX : $ type = $ type ::","highlight_start":1,"highlight_end":72},{"text":"from_u32 ( $ max ) ; # [ inline ] $ v fn from_usize ( value : usize ) -> Self","highlight_start":1,"highlight_end":78},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"assert ! ( value <= ( $ max as usize ) ) ; unsafe {","highlight_start":1,"highlight_end":52},{"text":"$ type :: from_u32_unchecked ( value as u32 ) } } # [ inline ] $ v const fn","highlight_start":1,"highlight_end":76},{"text":"from_u32 ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":35},{"text":"let _ = [ \"out of range value used\" ] [ ! ( value <= $ max ) as usize ] ;","highlight_start":1,"highlight_end":74},{"text":"unsafe { $ type :: from_u32_unchecked ( value ) } } # [ inline ] $ v const","highlight_start":1,"highlight_end":75},{"text":"unsafe fn from_u32_unchecked ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":55},{"text":"$ type { private : value } } /// Extract value of this index as an integer.","highlight_start":1,"highlight_end":76},{"text":" # [ inline ] $ v fn index ( self ) -> usize { self . as_usize (  ) }","highlight_start":1,"highlight_end":70},{"text":"/// Extract value of this index as a usize.","highlight_start":1,"highlight_end":44},{"text":" # [ inline ] $ v const fn as_u32 ( self ) -> u32 { self . private }","highlight_start":1,"highlight_end":69},{"text":"/// Extract value of this index as a u32.","highlight_start":1,"highlight_end":42},{"text":" # [ inline ] $ v fn as_usize ( self ) -> usize { self . as_u32 (  ) as usize","highlight_start":1,"highlight_end":78},{"text":"} } impl Idx for $ type {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn new ( value : usize ) -> Self { Self :: from ( value ) } # [","highlight_start":1,"highlight_end":77},{"text":"inline ] fn index ( self ) -> usize { usize :: from ( self ) } } impl :: std","highlight_start":1,"highlight_end":77},{"text":":: iter :: Step for $ type {","highlight_start":1,"highlight_end":29},{"text":"# [ inline ] fn steps_between ( start : & Self , end : & Self ) -> Option <","highlight_start":1,"highlight_end":76},{"text":"usize > {","highlight_start":1,"highlight_end":10},{"text":"< usize as :: std :: iter :: Step > :: steps_between (","highlight_start":1,"highlight_end":55},{"text":"& Idx :: index ( * start ) , & Idx :: index ( * end ) , ) } # [ inline ] fn","highlight_start":1,"highlight_end":76},{"text":"replace_one ( & mut self ) -> Self {","highlight_start":1,"highlight_end":37},{"text":":: std :: mem :: replace ( self , Self :: new ( 1 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"replace_zero ( & mut self ) -> Self {","highlight_start":1,"highlight_end":38},{"text":":: std :: mem :: replace ( self , Self :: new ( 0 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"add_one ( & self ) -> Self { Self :: new ( Idx :: index ( * self ) + 1 ) } # [","highlight_start":1,"highlight_end":79},{"text":"inline ] fn sub_one ( & self ) -> Self {","highlight_start":1,"highlight_end":41},{"text":"Self :: new ( Idx :: index ( * self ) - 1 ) } # [ inline ] fn add_usize (","highlight_start":1,"highlight_end":74},{"text":"& self , u : usize ) -> Option < Self > {","highlight_start":1,"highlight_end":42},{"text":"Idx :: index ( * self ) . checked_add ( u ) . map ( Self :: new ) } } impl","highlight_start":1,"highlight_end":75},{"text":"From < $ type > for u32 {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn from ( v : $ type ) -> u32 { v . as_u32 (  ) } } impl From < $","highlight_start":1,"highlight_end":79},{"text":"type > for usize {","highlight_start":1,"highlight_end":19},{"text":"# [ inline ] fn from ( v : $ type ) -> usize { v . as_usize (  ) } } impl From","highlight_start":1,"highlight_end":79},{"text":"< usize > for $ type {","highlight_start":1,"highlight_end":23},{"text":"# [ inline ] fn from ( value : usize ) -> Self {","highlight_start":1,"highlight_end":49},{"text":"$ type :: from_usize ( value ) } } impl From < u32 > for $ type {","highlight_start":1,"highlight_end":66},{"text":"# [ inline ] fn from ( value : u32 ) -> Self { $ type :: from_u32 ( value ) }","highlight_start":1,"highlight_end":78},{"text":"} newtype_index ! (","highlight_start":1,"highlight_end":20},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ handle_debug @ derives [ $ ( $ _derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":67},{"text":"$ type : ident ] @ debug_format [ custom ] ) => (  ) ; (","highlight_start":1,"highlight_end":57},{"text":"@ handle_debug @ derives [  ] @ type [ $ type : ident ] @ debug_format [","highlight_start":1,"highlight_end":73},{"text":"$ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":29},{"text":"impl :: std :: fmt :: Debug for $ type {","highlight_start":1,"highlight_end":41},{"text":"fn fmt ( & self , fmt : & mut :: std :: fmt :: Formatter ) -> :: std :: fmt ::","highlight_start":1,"highlight_end":79},{"text":"Result { write ! ( fmt , $ debug_format , self . as_u32 (  ) ) } } ) ; (","highlight_start":1,"highlight_end":73},{"text":"@ handle_debug @ derives [ Debug , $ ( $ derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":74},{"text":"$ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (  ) ; (","highlight_start":1,"highlight_end":70},{"text":"@ handle_debug @ derives [ $ _derive : ident , $ ( $ derives : ident , ) * ] @","highlight_start":1,"highlight_end":79},{"text":"type [ $ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":70},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident ) , * ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [","highlight_start":1,"highlight_end":65},{"text":"$ debug_format ] derive [ $ ( $ derives , ) * ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":75},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ]","highlight_start":1,"highlight_end":76},{"text":"ENCODABLE = custom $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + RustcDecodable , RustcEncodable , ] @ type [","highlight_start":1,"highlight_end":77},{"text":"$ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ (","highlight_start":1,"highlight_end":77},{"text":"$ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":23},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] ENCODABLE = custom $ ( $ tokens : tt ) *","highlight_start":1,"highlight_end":78},{"text":") => (","highlight_start":1,"highlight_end":7},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [  ] @ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format","highlight_start":1,"highlight_end":78},{"text":"[ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":46},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ RustcDecodable , RustcEncodable , ] @ type [ $ type ] @ max [","highlight_start":1,"highlight_end":74},{"text":"$ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; )","highlight_start":1,"highlight_end":79},{"text":"; (","highlight_start":1,"highlight_end":4},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $","highlight_start":1,"highlight_end":76},{"text":"name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ name = $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":72},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":79},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":77},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( # [ doc = $ doc ] ) * const $ name","highlight_start":1,"highlight_end":79},{"text":"= $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":25},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] MAX","highlight_start":1,"highlight_end":79},{"text":"= $ max : expr , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":46},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ _debug_format : tt ]","highlight_start":1,"highlight_end":75},{"text":"DEBUG_FORMAT = $ debug_format : tt , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":78},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr , $ (","highlight_start":1,"highlight_end":76},{"text":"$ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":25},{"text":"$ ( # [ doc = $ doc ] ) * pub const $ name : $ type = $ type :: from_u32 (","highlight_start":1,"highlight_end":75},{"text":"$ constant ) ; newtype_index ! (","highlight_start":1,"highlight_end":33},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"newtype_index!","def_site_span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":0,"byte_end":7643,"line_start":1,"line_end":136,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"( $ v : vis struct $ name : ident { .. } ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":") ; ) ; ( $ v : vis struct $ name : ident { $ ( $ tokens : tt ) + } ) => (","highlight_start":1,"highlight_end":75},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":"$ ( $ tokens ) + ) ; ) ; (","highlight_start":1,"highlight_end":27},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] ) =>","highlight_start":1,"highlight_end":79},{"text":"(","highlight_start":1,"highlight_end":2},{"text":"# [","highlight_start":1,"highlight_end":4},{"text":"derive (","highlight_start":1,"highlight_end":9},{"text":"Copy , Clone , PartialEq , Eq , Hash , PartialOrd , Ord , $ ( $ derives ) , *","highlight_start":1,"highlight_end":78},{"text":") ] # [ rustc_layout_scalar_valid_range_end ( $ max ) ] $ v struct $ type {","highlight_start":1,"highlight_end":76},{"text":"private : u32 } impl $ type {","highlight_start":1,"highlight_end":30},{"text":"$ v const MAX_AS_U32 : u32 = $ max ; $ v const MAX : $ type = $ type ::","highlight_start":1,"highlight_end":72},{"text":"from_u32 ( $ max ) ; # [ inline ] $ v fn from_usize ( value : usize ) -> Self","highlight_start":1,"highlight_end":78},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"assert ! ( value <= ( $ max as usize ) ) ; unsafe {","highlight_start":1,"highlight_end":52},{"text":"$ type :: from_u32_unchecked ( value as u32 ) } } # [ inline ] $ v const fn","highlight_start":1,"highlight_end":76},{"text":"from_u32 ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":35},{"text":"let _ = [ \"out of range value used\" ] [ ! ( value <= $ max ) as usize ] ;","highlight_start":1,"highlight_end":74},{"text":"unsafe { $ type :: from_u32_unchecked ( value ) } } # [ inline ] $ v const","highlight_start":1,"highlight_end":75},{"text":"unsafe fn from_u32_unchecked ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":55},{"text":"$ type { private : value } } /// Extract value of this index as an integer.","highlight_start":1,"highlight_end":76},{"text":" # [ inline ] $ v fn index ( self ) -> usize { self . as_usize (  ) }","highlight_start":1,"highlight_end":70},{"text":"/// Extract value of this index as a usize.","highlight_start":1,"highlight_end":44},{"text":" # [ inline ] $ v const fn as_u32 ( self ) -> u32 { self . private }","highlight_start":1,"highlight_end":69},{"text":"/// Extract value of this index as a u32.","highlight_start":1,"highlight_end":42},{"text":" # [ inline ] $ v fn as_usize ( self ) -> usize { self . as_u32 (  ) as usize","highlight_start":1,"highlight_end":78},{"text":"} } impl Idx for $ type {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn new ( value : usize ) -> Self { Self :: from ( value ) } # [","highlight_start":1,"highlight_end":77},{"text":"inline ] fn index ( self ) -> usize { usize :: from ( self ) } } impl :: std","highlight_start":1,"highlight_end":77},{"text":":: iter :: Step for $ type {","highlight_start":1,"highlight_end":29},{"text":"# [ inline ] fn steps_between ( start : & Self , end : & Self ) -> Option <","highlight_start":1,"highlight_end":76},{"text":"usize > {","highlight_start":1,"highlight_end":10},{"text":"< usize as :: std :: iter :: Step > :: steps_between (","highlight_start":1,"highlight_end":55},{"text":"& Idx :: index ( * start ) , & Idx :: index ( * end ) , ) } # [ inline ] fn","highlight_start":1,"highlight_end":76},{"text":"replace_one ( & mut self ) -> Self {","highlight_start":1,"highlight_end":37},{"text":":: std :: mem :: replace ( self , Self :: new ( 1 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"replace_zero ( & mut self ) -> Self {","highlight_start":1,"highlight_end":38},{"text":":: std :: mem :: replace ( self , Self :: new ( 0 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"add_one ( & self ) -> Self { Self :: new ( Idx :: index ( * self ) + 1 ) } # [","highlight_start":1,"highlight_end":79},{"text":"inline ] fn sub_one ( & self ) -> Self {","highlight_start":1,"highlight_end":41},{"text":"Self :: new ( Idx :: index ( * self ) - 1 ) } # [ inline ] fn add_usize (","highlight_start":1,"highlight_end":74},{"text":"& self , u : usize ) -> Option < Self > {","highlight_start":1,"highlight_end":42},{"text":"Idx :: index ( * self ) . checked_add ( u ) . map ( Self :: new ) } } impl","highlight_start":1,"highlight_end":75},{"text":"From < $ type > for u32 {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn from ( v : $ type ) -> u32 { v . as_u32 (  ) } } impl From < $","highlight_start":1,"highlight_end":79},{"text":"type > for usize {","highlight_start":1,"highlight_end":19},{"text":"# [ inline ] fn from ( v : $ type ) -> usize { v . as_usize (  ) } } impl From","highlight_start":1,"highlight_end":79},{"text":"< usize > for $ type {","highlight_start":1,"highlight_end":23},{"text":"# [ inline ] fn from ( value : usize ) -> Self {","highlight_start":1,"highlight_end":49},{"text":"$ type :: from_usize ( value ) } } impl From < u32 > for $ type {","highlight_start":1,"highlight_end":66},{"text":"# [ inline ] fn from ( value : u32 ) -> Self { $ type :: from_u32 ( value ) }","highlight_start":1,"highlight_end":78},{"text":"} newtype_index ! (","highlight_start":1,"highlight_end":20},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ handle_debug @ derives [ $ ( $ _derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":67},{"text":"$ type : ident ] @ debug_format [ custom ] ) => (  ) ; (","highlight_start":1,"highlight_end":57},{"text":"@ handle_debug @ derives [  ] @ type [ $ type : ident ] @ debug_format [","highlight_start":1,"highlight_end":73},{"text":"$ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":29},{"text":"impl :: std :: fmt :: Debug for $ type {","highlight_start":1,"highlight_end":41},{"text":"fn fmt ( & self , fmt : & mut :: std :: fmt :: Formatter ) -> :: std :: fmt ::","highlight_start":1,"highlight_end":79},{"text":"Result { write ! ( fmt , $ debug_format , self . as_u32 (  ) ) } } ) ; (","highlight_start":1,"highlight_end":73},{"text":"@ handle_debug @ derives [ Debug , $ ( $ derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":74},{"text":"$ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (  ) ; (","highlight_start":1,"highlight_end":70},{"text":"@ handle_debug @ derives [ $ _derive : ident , $ ( $ derives : ident , ) * ] @","highlight_start":1,"highlight_end":79},{"text":"type [ $ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":70},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident ) , * ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [","highlight_start":1,"highlight_end":65},{"text":"$ debug_format ] derive [ $ ( $ derives , ) * ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":75},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ]","highlight_start":1,"highlight_end":76},{"text":"ENCODABLE = custom $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + RustcDecodable , RustcEncodable , ] @ type [","highlight_start":1,"highlight_end":77},{"text":"$ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ (","highlight_start":1,"highlight_end":77},{"text":"$ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":23},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] ENCODABLE = custom $ ( $ tokens : tt ) *","highlight_start":1,"highlight_end":78},{"text":") => (","highlight_start":1,"highlight_end":7},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [  ] @ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format","highlight_start":1,"highlight_end":78},{"text":"[ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":46},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ RustcDecodable , RustcEncodable , ] @ type [ $ type ] @ max [","highlight_start":1,"highlight_end":74},{"text":"$ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; )","highlight_start":1,"highlight_end":79},{"text":"; (","highlight_start":1,"highlight_end":4},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $","highlight_start":1,"highlight_end":76},{"text":"name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ name = $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":72},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":79},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":77},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( # [ doc = $ doc ] ) * const $ name","highlight_start":1,"highlight_end":79},{"text":"= $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":25},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] MAX","highlight_start":1,"highlight_end":79},{"text":"= $ max : expr , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":46},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ _debug_format : tt ]","highlight_start":1,"highlight_end":75},{"text":"DEBUG_FORMAT = $ debug_format : tt , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":78},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr , $ (","highlight_start":1,"highlight_end":76},{"text":"$ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":25},{"text":"$ ( # [ doc = $ doc ] ) * pub const $ name : $ type = $ type :: from_u32 (","highlight_start":1,"highlight_end":75},{"text":"$ constant ) ; newtype_index ! (","highlight_start":1,"highlight_end":33},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"newtype_index!","def_site_span":{"file_name":"<::rustc_data_structures::indexed_vec::newtype_index macros>","byte_start":0,"byte_end":7643,"line_start":1,"line_end":136,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"( $ v : vis struct $ name : ident { .. } ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":") ; ) ; ( $ v : vis struct $ name : ident { $ ( $ tokens : tt ) + } ) => (","highlight_start":1,"highlight_end":75},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ name ] @ max [ 0xFFFF_FF00 ] @ vis [ $ v ] @ debug_format [ \"{}\" ]","highlight_start":1,"highlight_end":78},{"text":"$ ( $ tokens ) + ) ; ) ; (","highlight_start":1,"highlight_end":27},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] ) =>","highlight_start":1,"highlight_end":79},{"text":"(","highlight_start":1,"highlight_end":2},{"text":"# [","highlight_start":1,"highlight_end":4},{"text":"derive (","highlight_start":1,"highlight_end":9},{"text":"Copy , Clone , PartialEq , Eq , Hash , PartialOrd , Ord , $ ( $ derives ) , *","highlight_start":1,"highlight_end":78},{"text":") ] # [ rustc_layout_scalar_valid_range_end ( $ max ) ] $ v struct $ type {","highlight_start":1,"highlight_end":76},{"text":"private : u32 } impl $ type {","highlight_start":1,"highlight_end":30},{"text":"$ v const MAX_AS_U32 : u32 = $ max ; $ v const MAX : $ type = $ type ::","highlight_start":1,"highlight_end":72},{"text":"from_u32 ( $ max ) ; # [ inline ] $ v fn from_usize ( value : usize ) -> Self","highlight_start":1,"highlight_end":78},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"assert ! ( value <= ( $ max as usize ) ) ; unsafe {","highlight_start":1,"highlight_end":52},{"text":"$ type :: from_u32_unchecked ( value as u32 ) } } # [ inline ] $ v const fn","highlight_start":1,"highlight_end":76},{"text":"from_u32 ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":35},{"text":"let _ = [ \"out of range value used\" ] [ ! ( value <= $ max ) as usize ] ;","highlight_start":1,"highlight_end":74},{"text":"unsafe { $ type :: from_u32_unchecked ( value ) } } # [ inline ] $ v const","highlight_start":1,"highlight_end":75},{"text":"unsafe fn from_u32_unchecked ( value : u32 ) -> Self {","highlight_start":1,"highlight_end":55},{"text":"$ type { private : value } } /// Extract value of this index as an integer.","highlight_start":1,"highlight_end":76},{"text":" # [ inline ] $ v fn index ( self ) -> usize { self . as_usize (  ) }","highlight_start":1,"highlight_end":70},{"text":"/// Extract value of this index as a usize.","highlight_start":1,"highlight_end":44},{"text":" # [ inline ] $ v const fn as_u32 ( self ) -> u32 { self . private }","highlight_start":1,"highlight_end":69},{"text":"/// Extract value of this index as a u32.","highlight_start":1,"highlight_end":42},{"text":" # [ inline ] $ v fn as_usize ( self ) -> usize { self . as_u32 (  ) as usize","highlight_start":1,"highlight_end":78},{"text":"} } impl Idx for $ type {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn new ( value : usize ) -> Self { Self :: from ( value ) } # [","highlight_start":1,"highlight_end":77},{"text":"inline ] fn index ( self ) -> usize { usize :: from ( self ) } } impl :: std","highlight_start":1,"highlight_end":77},{"text":":: iter :: Step for $ type {","highlight_start":1,"highlight_end":29},{"text":"# [ inline ] fn steps_between ( start : & Self , end : & Self ) -> Option <","highlight_start":1,"highlight_end":76},{"text":"usize > {","highlight_start":1,"highlight_end":10},{"text":"< usize as :: std :: iter :: Step > :: steps_between (","highlight_start":1,"highlight_end":55},{"text":"& Idx :: index ( * start ) , & Idx :: index ( * end ) , ) } # [ inline ] fn","highlight_start":1,"highlight_end":76},{"text":"replace_one ( & mut self ) -> Self {","highlight_start":1,"highlight_end":37},{"text":":: std :: mem :: replace ( self , Self :: new ( 1 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"replace_zero ( & mut self ) -> Self {","highlight_start":1,"highlight_end":38},{"text":":: std :: mem :: replace ( self , Self :: new ( 0 ) ) } # [ inline ] fn","highlight_start":1,"highlight_end":72},{"text":"add_one ( & self ) -> Self { Self :: new ( Idx :: index ( * self ) + 1 ) } # [","highlight_start":1,"highlight_end":79},{"text":"inline ] fn sub_one ( & self ) -> Self {","highlight_start":1,"highlight_end":41},{"text":"Self :: new ( Idx :: index ( * self ) - 1 ) } # [ inline ] fn add_usize (","highlight_start":1,"highlight_end":74},{"text":"& self , u : usize ) -> Option < Self > {","highlight_start":1,"highlight_end":42},{"text":"Idx :: index ( * self ) . checked_add ( u ) . map ( Self :: new ) } } impl","highlight_start":1,"highlight_end":75},{"text":"From < $ type > for u32 {","highlight_start":1,"highlight_end":26},{"text":"# [ inline ] fn from ( v : $ type ) -> u32 { v . as_u32 (  ) } } impl From < $","highlight_start":1,"highlight_end":79},{"text":"type > for usize {","highlight_start":1,"highlight_end":19},{"text":"# [ inline ] fn from ( v : $ type ) -> usize { v . as_usize (  ) } } impl From","highlight_start":1,"highlight_end":79},{"text":"< usize > for $ type {","highlight_start":1,"highlight_end":23},{"text":"# [ inline ] fn from ( value : usize ) -> Self {","highlight_start":1,"highlight_end":49},{"text":"$ type :: from_usize ( value ) } } impl From < u32 > for $ type {","highlight_start":1,"highlight_end":66},{"text":"# [ inline ] fn from ( value : u32 ) -> Self { $ type :: from_u32 ( value ) }","highlight_start":1,"highlight_end":78},{"text":"} newtype_index ! (","highlight_start":1,"highlight_end":20},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ handle_debug @ derives [ $ ( $ _derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":67},{"text":"$ type : ident ] @ debug_format [ custom ] ) => (  ) ; (","highlight_start":1,"highlight_end":57},{"text":"@ handle_debug @ derives [  ] @ type [ $ type : ident ] @ debug_format [","highlight_start":1,"highlight_end":73},{"text":"$ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":29},{"text":"impl :: std :: fmt :: Debug for $ type {","highlight_start":1,"highlight_end":41},{"text":"fn fmt ( & self , fmt : & mut :: std :: fmt :: Formatter ) -> :: std :: fmt ::","highlight_start":1,"highlight_end":79},{"text":"Result { write ! ( fmt , $ debug_format , self . as_u32 (  ) ) } } ) ; (","highlight_start":1,"highlight_end":73},{"text":"@ handle_debug @ derives [ Debug , $ ( $ derives : ident , ) * ] @ type [","highlight_start":1,"highlight_end":74},{"text":"$ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (  ) ; (","highlight_start":1,"highlight_end":70},{"text":"@ handle_debug @ derives [ $ _derive : ident , $ ( $ derives : ident , ) * ] @","highlight_start":1,"highlight_end":79},{"text":"type [ $ type : ident ] @ debug_format [ $ debug_format : tt ] ) => (","highlight_start":1,"highlight_end":70},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ handle_debug @ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @","highlight_start":1,"highlight_end":69},{"text":"debug_format [ $ debug_format ] ) ; ) ; (","highlight_start":1,"highlight_end":42},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident ) , * ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [","highlight_start":1,"highlight_end":65},{"text":"$ debug_format ] derive [ $ ( $ derives , ) * ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":75},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ]","highlight_start":1,"highlight_end":76},{"text":"ENCODABLE = custom $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":48},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] derive [ $ ( $ derives : ident , ) + ] $","highlight_start":1,"highlight_end":78},{"text":"( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":27},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) + RustcDecodable , RustcEncodable , ] @ type [","highlight_start":1,"highlight_end":77},{"text":"$ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ (","highlight_start":1,"highlight_end":77},{"text":"$ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":23},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] ENCODABLE = custom $ ( $ tokens : tt ) *","highlight_start":1,"highlight_end":78},{"text":") => (","highlight_start":1,"highlight_end":7},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [  ] @ type [ $ type ] @ max [ $ max ] @ vis [ $ v ] @ debug_format","highlight_start":1,"highlight_end":78},{"text":"[ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":46},{"text":"@ type [ $ type : ident ] @ max [ $ max : expr ] @ vis [ $ v : vis ] @","highlight_start":1,"highlight_end":71},{"text":"debug_format [ $ debug_format : tt ] $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ RustcDecodable , RustcEncodable , ] @ type [ $ type ] @ max [","highlight_start":1,"highlight_end":74},{"text":"$ max ] @ vis [ $ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; )","highlight_start":1,"highlight_end":79},{"text":"; (","highlight_start":1,"highlight_end":4},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $","highlight_start":1,"highlight_end":76},{"text":"name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ name = $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":72},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":79},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr ) => (","highlight_start":1,"highlight_end":77},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( # [ doc = $ doc ] ) * const $ name","highlight_start":1,"highlight_end":79},{"text":"= $ constant , ) ; ) ; (","highlight_start":1,"highlight_end":25},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ _max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] MAX","highlight_start":1,"highlight_end":79},{"text":"= $ max : expr , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":46},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ _debug_format : tt ]","highlight_start":1,"highlight_end":75},{"text":"DEBUG_FORMAT = $ debug_format : tt , $ ( $ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":66},{"text":"newtype_index ! (","highlight_start":1,"highlight_end":18},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ; (","highlight_start":1,"highlight_end":67},{"text":"@ derives [ $ ( $ derives : ident , ) * ] @ type [ $ type : ident ] @ max [","highlight_start":1,"highlight_end":76},{"text":"$ max : expr ] @ vis [ $ v : vis ] @ debug_format [ $ debug_format : tt ] $ (","highlight_start":1,"highlight_end":78},{"text":"# [ doc = $ doc : expr ] ) * const $ name : ident = $ constant : expr , $ (","highlight_start":1,"highlight_end":76},{"text":"$ tokens : tt ) * ) => (","highlight_start":1,"highlight_end":25},{"text":"$ ( # [ doc = $ doc ] ) * pub const $ name : $ type = $ type :: from_u32 (","highlight_start":1,"highlight_end":75},{"text":"$ constant ) ; newtype_index ! (","highlight_start":1,"highlight_end":33},{"text":"@ derives [ $ ( $ derives , ) * ] @ type [ $ type ] @ max [ $ max ] @ vis [","highlight_start":1,"highlight_end":76},{"text":"$ v ] @ debug_format [ $ debug_format ] $ ( $ tokens ) * ) ; ) ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consult the function's documentation for information on how to avoid undefined behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n  --> /checkout/src/test/run-pass-fulldeps/newtype_index.rs:8:1\n   |\nLL | newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: consult the function's documentation for information on how to avoid undefined behavior\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n\n"}
[01:18:40] {"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to previous error\n\n"}
[01:18:40] ------------------------------------------
[01:18:40] 
[01:18:40] thread '[run-pass] run-pass-fulldeps/newtype_index.rs' panicked at 'explicit panic', tools/compiletest/src/runtest.rs:3282:9
[01:18:40] note: Run with `RUST_BACKTRACE=1` for a backtrace.
---
[01:18:40] test result: FAILED. 96 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out
[01:18:40] 
[01:18:40] 
[01:18:40] 
[01:18:40] command did not execute successfully: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest" "--compile-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib" "--run-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib" "--rustc-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "--src-base" "/checkout/src/test/run-pass-fulldeps" "--build-base" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/run-pass-fulldeps" "--stage-id" "stage2-x86_64-unknown-linux-gnu" "--mode" "run-pass" "--target" "x86_64-unknown-linux-gnu" "--host" "x86_64-unknown-linux-gnu" "--llvm-filecheck" "/usr/lib/llvm-5.0/bin/FileCheck" "--host-rustcflags" "-Crpath -O -Zunstable-options " "--target-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--docck-python" "/usr/bin/python2.7" "--lldb-python" "/usr/bin/python2.7" "--gdb" "/usr/bin/gdb" "--quiet" "--llvm-version" "5.0.0\n" "--system-llvm" "--cc" "" "--cxx" "" "--cflags" "" "--llvm-components" "" "--llvm-cxxflags" "" "--adb-path" "adb" "--adb-test-dir" "/data/tmp/work" "--android-cross-path" "" "--color" "always"
[01:18:40] 
[01:18:40] 
[01:18:40] failed to run: /checkout/obj/build/bootstrap/debug/bootstrap test
[01:18:40] Build completed unsuccessfully in 0:27:16
[01:18:40] Build completed unsuccessfully in 0:27:16
[01:18:40] make: *** [check] Error 1
[01:18:40] Makefile:58: recipe for target 'check' failed
The command "stamp sh -x -c "$RUN_SCRIPT"" exited with 2.
travis_time:start:18bf0fde
$ date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)
Mon Nov 12 00:02:56 UTC 2018
---
travis_time:end:1c475b88:start=1541980980272670216,finish=1541980980280568063,duration=7897847
travis_fold:end:after_failure.3
travis_fold:start:after_failure.4
travis_time:start:054ee110
$ ln -s . checkout && for CORE in obj/cores/core.*; do EXE=$(echo $CORE | sed 's|obj/cores/core\.[0-9]*\.!check
