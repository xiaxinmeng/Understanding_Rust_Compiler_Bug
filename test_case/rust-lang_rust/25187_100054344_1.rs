
<anon>:4:9: 4:10 warning: unused variable: `f`, #[warn(unused_variables)] on by default
<anon>:4     let f = mem::forget::<i32>;
                 ^
error: internal compiler error: can't monomorphize a NodeForeignItem(ForeignItem { ident: forget#0, attrs: [Spanned { node: Attribute_ { id: AttrId(810), style: AttrOuter, value: Spanned { node: MetaNameValue("doc", Spanned { node: LitStr("/// Moves a value out of scope without running drop glue.", CookedStr), span: Span { lo: BytePos(124395), hi: BytePos(124452), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(124456), hi: BytePos(124513), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(124456), hi: BytePos(124513), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(811), style: AttrOuter, value: Spanned { node: MetaNameValue("doc", Spanned { node: LitStr("///", CookedStr), span: Span { lo: BytePos(124457), hi: BytePos(124460), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(124518), hi: BytePos(124521), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(124518), hi: BytePos(124521), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(812), style: AttrOuter, value: Spanned { node: MetaNameValue("doc", Spanned { node: LitStr("/// `forget` is unsafe because the caller is responsible for", CookedStr), span: Span { lo: BytePos(124465), hi: BytePos(124525), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(124526), hi: BytePos(124586), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(124526), hi: BytePos(124586), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(813), style: AttrOuter, value: Spanned { node: MetaNameValue("doc", Spanned { node: LitStr("/// ensuring the argument is deallocated already.", CookedStr), span: Span { lo: BytePos(124530), hi: BytePos(124579), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(124591), hi: BytePos(124640), expn_id: ExpnId(4294967295) } }, is_sugared_doc: true }, span: Span { lo: BytePos(124591), hi: BytePos(124640), expn_id: ExpnId(4294967295) } }, Spanned { node: Attribute_ { id: AttrId(814), style: AttrOuter, value: Spanned { node: MetaList("stable", [Spanned { node: MetaNameValue("feature", Spanned { node: LitStr("rust1", CookedStr), span: Span { lo: BytePos(124603), hi: BytePos(124610), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(124654), hi: BytePos(124672), expn_id: ExpnId(4294967295) } }, Spanned { node: MetaNameValue("since", Spanned { node: LitStr("1.0.0", CookedStr), span: Span { lo: BytePos(124620), hi: BytePos(124627), expn_id: ExpnId(4294967295) } }), span: Span { lo: BytePos(124673), hi: BytePos(124689), expn_id: ExpnId(4294967295) } }]), span: Span { lo: BytePos(124647), hi: BytePos(124690), expn_id: ExpnId(4294967295) } }, is_sugared_doc: false }, span: Span { lo: BytePos(124645), hi: BytePos(124690), expn_id: ExpnId(4294967295) } }], node: ForeignItemFn(FnDecl { inputs: [Arg { ty: Ty { id: 16, node: TyPath(None, Path { span: Span { lo: BytePos(124715), hi: BytePos(124716), expn_id: ExpnId(4294967295) }, global: false, segments: [PathSegment { identifier: T#0, parameters: AngleBracketedParameters(AngleBracketedParameterData { lifetimes: [], types: [], bindings: [] }) }] }), span: Span { lo: BytePos(124715), hi: BytePos(124716), expn_id: ExpnId(4294967295) } }, pat: Pat { id: 15, node: PatWild(PatWildSingle), span: Span { lo: BytePos(124712), hi: BytePos(124713), expn_id: ExpnId(4294967295) } }, id: 14 }], output: Return(Ty { id: 17, node: TyTup([]), span: Span { lo: BytePos(124721), hi: BytePos(124723), expn_id: ExpnId(4294967295) } }), variadic: false }, Generics { lifetimes: [], ty_params: [TyParam { ident: T#0, id: 18, bounds: [], default: None, span: Span { lo: BytePos(124648), hi: BytePos(124649), expn_id: ExpnId(4294967295) } }], where_clause: WhereClause { id: 19, predicates: [] } }), id: 13, span: Span { lo: BytePos(124699), hi: BytePos(124724), expn_id: ExpnId(4294967295) }, vis: Public })
note: the compiler unexpectedly panicked. this is a bug.
note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports
note: run with `RUST_BACKTRACE=1` for a backtrace
thread 'rustc' panicked at 'Box<Any>', /home/rustbuild/src/rust-buildbot/slave/beta-dist-rustc-linux/build/src/libsyntax/diagnostic.rs:209
