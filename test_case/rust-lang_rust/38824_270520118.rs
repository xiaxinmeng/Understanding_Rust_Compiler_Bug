
$ llc test.ll --filetype=asm -o - -march=nvptx
//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_20
.address_size 32

#0 0x00007f8a504a0698 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/usr/bin/../lib/libLLVM-3.9.so+0x6d6698)
#1 0x00007f8a5049e5fe llvm::sys::RunSignalHandlers() (/usr/bin/../lib/libLLVM-3.9.so+0x6d45fe)
#2 0x00007f8a5049e73a (/usr/bin/../lib/libLLVM-3.9.so+0x6d473a)
#3 0x00007f8a4f6d70b0 __restore_rt (/usr/bin/../lib/libc.so.6+0x330b0)
#4 0x00007f8a51855d30 llvm::NVPTXTargetLowering::getArgumentAlignment(llvm::SDValue, llvm::ImmutableCallSite const*, llvm::Type*, unsigned int) const (/usr/bin/../lib/libLLVM-3.9.so+0x1a8bd30)
#5 0x00007f8a5185b76a llvm::NVPTXTargetLowering::LowerCall(llvm::TargetLowering::CallLoweringInfo&, llvm::SmallVectorImpl<llvm::SDValue>&) const (/usr/bin/../lib/libLLVM-3.9.so+0x1a9176a)
#6 0x00007f8a50963e98 llvm::TargetLowering::LowerCallTo(llvm::TargetLowering::CallLoweringInfo&) const (/usr/bin/../lib/libLLVM-3.9.so+0xb99e98)
#7 0x00007f8a509efb71 llvm::TargetLowering::makeLibCall(llvm::SelectionDAG&, llvm::RTLIB::Libcall, llvm::EVT, llvm::ArrayRef<llvm::SDValue>, bool, llvm::SDLoc const&, bool, bool) const (/usr/bin/../lib/libLLVM-3.9.so+0xc25b71)
#8 0x00007f8a508ed938 (/usr/bin/../lib/libLLVM-3.9.so+0xb23938)
#9 0x00007f8a508fe045 (/usr/bin/../lib/libLLVM-3.9.so+0xb34045)
#10 0x00007f8a50906e47 (/usr/bin/../lib/libLLVM-3.9.so+0xb3ce47)
#11 0x00007f8a509075c7 llvm::SelectionDAG::LegalizeTypes() (/usr/bin/../lib/libLLVM-3.9.so+0xb3d5c7)
#12 0x00007f8a509c44dd llvm::SelectionDAGISel::CodeGenAndEmitDAG() (/usr/bin/../lib/libLLVM-3.9.so+0xbfa4dd)
#13 0x00007f8a509cb75e llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&) (/usr/bin/../lib/libLLVM-3.9.so+0xc0175e)
#14 0x00007f8a509ce33b llvm::SelectionDAGISel::runOnMachineFunction(llvm::MachineFunction&) (/usr/bin/../lib/libLLVM-3.9.so+0xc0433b)
#15 0x00007f8a506cd1d1 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) (/usr/bin/../lib/libLLVM-3.9.so+0x9031d1)
#16 0x00007f8a505657c2 llvm::FPPassManager::runOnFunction(llvm::Function&) (/usr/bin/../lib/libLLVM-3.9.so+0x79b7c2)
#17 0x00007f8a50565b4b llvm::FPPassManager::runOnModule(llvm::Module&) (/usr/bin/../lib/libLLVM-3.9.so+0x79bb4b)
#18 0x00007f8a50565e74 llvm::legacy::PassManagerImpl::run(llvm::Module&) (/usr/bin/../lib/libLLVM-3.9.so+0x79be74)
#19 0x000000000041aacc (llc+0x41aacc)
#20 0x00000000004113e0 (llc+0x4113e0)
#21 0x00007f8a4f6c4291 __libc_start_main (/usr/bin/../lib/libc.so.6+0x20291)
#22 0x000000000041146a (llc+0x41146a)
Stack dump:
0.	Program arguments: llc test.ll --filetype=asm -o - -march=nvptx 
1.	Running pass 'Function Pass Manager' on module 'test.ll'.
2.	Running pass 'NVPTX DAG->DAG Pattern Instruction Selection' on function '@div'
fish: “llc test.ll --filetype=asm -o -…” terminated by signal SIGSEGV (Address boundary error)
