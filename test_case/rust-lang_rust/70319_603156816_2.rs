rust
[DEBUG rustc_mir::transform::inline] checking whether to inline callsite CallSite { callee: DefId(5:4065 ~ alloc[81b7]::vec[0]::{{impl}}[0]::new[0]), substs: [u32], bb: bb0, location: SourceInfo { span: /home/programming/rust/src/test/ui/__check/inline-into-box-place.rs:8:33: 8:43, scope: scope[0] } }
[DEBUG rustc_mir::transform::inline] consider_optimizing(CallSite { callee: DefId(5:4065 ~ alloc[81b7]::vec[0]::{{impl}}[0]::new[0]), substs: [u32], bb: bb0, location: SourceInfo { span: /home/programming/rust/src/test/ui/__check/inline-into-box-place.rs:8:33: 8:43, scope: scope[0] } })
[DEBUG rustc_mir::transform::inline] should_inline(CallSite { callee: DefId(5:4065 ~ alloc[81b7]::vec[0]::{{impl}}[0]::new[0]), substs: [u32], bb: bb0, location: SourceInfo { span: /home/programming/rust/src/test/ui/__check/inline-into-box-place.rs:8:33: 8:43, scope: scope[0] } })
[DEBUG rustc_mir::transform::inline]     final inline threshold = 125
[DEBUG rustc_mir::transform::inline] INLINING CallSite { callee: DefId(5:4065 ~ alloc[81b7]::vec[0]::{{impl}}[0]::new[0]), substs: [u32], bb: bb0, location: SourceInfo { span: /home/programming/rust/src/test/ui/__check/inline-into-box-place.rs:8:33: 8:43, scope: scope[0] } } [cost=15 <= threshold=125]
[DEBUG rustc_mir::transform::inline] attempting to inline callsite CallSite { callee: DefId(5:4065 ~ alloc[81b7]::vec[0]::{{impl}}[0]::new[0]), substs: [u32], bb: bb0, location: SourceInfo { span: /home/programming/rust/src/test/ui/__check/inline-into-box-place.rs:8:33: 8:43, scope: scope[0] } } - body=BodyAndCache { body: Body { basic_blocks: [BasicBlockData { statements: [(_0.0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>, (_0.1: usize) = const 0usize], terminator: Some(Terminator { source_info: SourceInfo { span: /home/programming/rust/src/liballoc/vec.rs:324:6: 324:6, scope: scope[0] }, kind: return }), is_cleanup: false }], phase: Optimized, source_scopes: [SourceScopeData { span: /home/programming/rust/src/liballoc/vec.rs:322:5: 324:6, parent_scope: None, local_data: Clear }], yield_ty: None, generator_drop: None, generator_layout: None, generator_kind: None, local_decls: [LocalDecl { mutability: Mut, local_info: Other, internal: false, is_block_tail: None, ty: std::vec::Vec<u32>, user_ty: UserTypeProjections { contents: [] }, source_info: SourceInfo { span: /home/programming/rust/src/liballoc/vec.rs:322:27: 322:33, scope: scope[0] } }], user_type_annotations: [], arg_count: 0, spread_arg: None, var_debug_info: [], control_flow_destroyed: [], span: /home/programming/rust/src/liballoc/vec.rs:322:5: 324:6, ignore_interior_mut_in_const_validation: false }, cache: Cache { predecessors: Some([[]]) } }
[DEBUG rustc_mir::transform::inline] inlined DefId(5:4065 ~ alloc[81b7]::vec[0]::{{impl}}[0]::new[0]) into MirSource { instance: Item(DefId(0:3 ~ inline_into_box_place[317d]::main[0])), promoted: None }
[DEBUG rustc_mir::transform::inline] creating temp for return destination
[DEBUG rustc_mir::transform::inline] attempting to inline callsite CallSite { callee: DefId(5:4065 ~ alloc[81b7]::vec[0]::{{impl}}[0]::new[0]), substs: [u32], bb: bb0, location: SourceInfo { span: /home/programming/rust/src/test/ui/__check/inline-into-box-place.rs:8:33: 8:43, scope: scope[0] } } - success
[DEBUG rustc_mir::transform::inline] running simplify cfg on MirSource { instance: Item(DefId(0:3 ~ inline_into_box_place[317d]::main[0])), promoted: None }
