plain
[00:58:14] ---- [ui] ui/macros/macro-comma-behavior.rs#core stdout ----
[00:58:14] diff of stderr:
[00:58:14] 
[00:58:14] 42 
[00:58:14] 43 error: `#[panic_handler]` function required, but not found
[00:58:14] 44 
[00:58:14] - error: language item required, but not found: `eh_personality`
[00:58:14] - error: aborting due to 9 previous errors
[00:58:14] + error: aborting due to 8 previous errors
[00:58:14] 48 
[00:58:14] 49 
[00:58:14] 49 
[00:58:14] 
[00:58:14] 
[00:58:14] The actual stderr differed from the expected stderr.
[00:58:14] Actual stderr saved to /checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/macros/macro-comma-behavior.core/macro-comma-behavior.core.stderr
[00:58:14] To update references, rerun the tests and pass the `--bless` flag
[00:58:14] To only update this specific test, also pass `--test-args macros/macro-comma-behavior.rs`
[00:58:14] 
[00:58:14] error in revision `core`: 1 errors occurred comparing output.
[00:58:14] status: exit code: 1
[00:58:14] command: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "/checkout/src/test/ui/macros/macro-comma-behavior.rs" "--target=wasm32-unknown-unknown" "--cfg" "core" "--error-format" "json" "-Zui-testing" "-o" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/macros/macro-comma-behavior.core/a.wasm" "-Crpath" "-O" "-Zunstable-options" "-Lnative=/checkout/obj/build/wasm32-unknown-unknown/native/rust-test-helpers" "-C" "debug_assertions=yes" "-L" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/macros/macro-comma-behavior.core/auxiliary" "-A" "unused"
[00:58:14] ------------------------------------------
[00:58:14] 
[00:58:14] ------------------------------------------
[00:58:14] stderr:
[00:58:14] stderr:
[00:58:14] ------------------------------------------
[00:58:14] {"message":"1 positional argument in format string, but no arguments were given","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":493,"byte_end":495,"line_start":19,"line_end":19,"column_start":23,"column_end":25,"is_primary":true,"text":[{"text":"    assert_eq!(1, 1, \"{}\",);","highlight_start":23,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":626,"byte_end":657,"line_start":21,"line_end":21,"column_start":24,"column_end":55,"is_primary":false,"text":[{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":24,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":475,"byte_end":499,"line_start":19,"line_end":19,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    assert_eq!(1, 1, \"{}\",);","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":0,"byte_end":671,"line_start":1,"line_end":21,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# ,","highlight_start":1,"highlight_end":19},{"text":"left_val , right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) => (","highlight_start":1,"highlight_end":77},{"text":"{ assert_eq ! ( $ left , $ right ) } ) ; (","highlight_start":1,"highlight_end":43},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"# ,","highlight_start":1,"highlight_end":23},{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":"error: 1 positional argument in format string, but no arguments were given\n  --> /checkout/src/test/ui/macros/macro-comma-behavior.rs:19:23\n   |\nLL |     assert_eq!(1, 1, \"{}\",);\n   |                       ^^\n\n"}
[00:58:14] {"message":"1 positional argument in format string, but no arguments were given","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":590,"byte_end":592,"line_start":22,"line_end":22,"column_start":23,"column_end":25,"is_primary":true,"text":[{"text":"    assert_ne!(1, 2, \"{}\",);","highlight_start":23,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_ne macros>","byte_start":610,"byte_end":641,"line_start":21,"line_end":21,"column_start":24,"column_end":55,"is_primary":false,"text":[{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":24,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":572,"byte_end":596,"line_start":22,"line_end":22,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    assert_ne!(1, 2, \"{}\",);","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"<::core::macros::assert_ne macros>","byte_start":0,"byte_end":655,"line_start":1,"line_end":21,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if * left_val == * right_val {","highlight_start":1,"highlight_end":31},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# ,","highlight_start":1,"highlight_end":19},{"text":"left_val , right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) => {","highlight_start":1,"highlight_end":77},{"text":"assert_ne ! ( $ left , $ right ) } ; (","highlight_start":1,"highlight_end":39},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if * left_val == * right_val {","highlight_start":1,"highlight_end":31},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"# ,","highlight_start":1,"highlight_end":23},{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":"error: 1 positional argument in format string, but no arguments were given\n  --> /checkout/src/test/ui/macros/macro-comma-behavior.rs:22:23\n   |\nLL |     assert_ne!(1, 2, \"{}\",);\n   |                       ^^\n\n"}
[00:58:14] {"message":"1 positional argument in format string, but no arguments were given","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":746,"byte_end":748,"line_start":28,"line_end":28,"column_start":29,"column_end":31,"is_primary":true,"text":[{"text":"    debug_assert_eq!(1, 1, \"{}\",);","highlight_start":29,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":626,"byte_end":657,"line_start":21,"line_end":21,"column_start":24,"column_end":55,"is_primary":false,"text":[{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":24,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::debug_assert_eq macros>","byte_start":60,"byte_end":91,"line_start":2,"line_end":2,"column_start":33,"column_end":64,"is_primary":false,"text":[{"text":"if cfg ! ( debug_assertions ) { assert_eq ! ( $ ( $ arg ) * ) ; } )","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":722,"byte_end":752,"line_start":28,"line_end":28,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    debug_assert_eq!(1, 1, \"{}\",);","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"debug_assert_eq!","def_site_span":{"file_name":"<::core::macros::debug_assert_eq macros>","byte_start":0,"byte_end":95,"line_start":1,"line_end":2,"column_start":1,"column_end":68,"is_primary":false,"text":[{"text":"( $ ( $ arg : tt ) * ) => (","highlight_start":1,"highlight_end":28},{"text":"if cfg ! ( debug_assertions ) { assert_eq ! ( $ ( $ arg ) * ) ; } )","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":0,"byte_end":671,"line_start":1,"line_end":21,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# ,","highlight_start":1,"highlight_end":19},{"text":"left_val , right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) => (","highlight_start":1,"highlight_end":77},{"text":"{ assert_eq ! ( $ left , $ right ) } ) ; (","highlight_start":1,"highlight_end":43},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"# ,","highlight_start":1,"highlight_end":23},{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":"error: 1 positional argument in format string, but no arguments were given\n  --> /checkout/src/test/ui/macros/macro-comma-behavior.rs:28:29\n   |\nLL |     debug_assert_eq!(1, 1, \"{}\",);\n   |                             ^^\n\n"}
[00:58:14] thread 'main' panicked at 'Some tests failed', src/tools/compiletest/src/main.rs:495:22
[00:58:14] {"message":"1 positional argument in format string, but no arguments were given","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":849,"byte_end":851,"line_start":31,"line_end":31,"column_start":29,"column_end":31,"is_primary":true,"text":[{"text":"    debug_assert_ne!(1, 2, \"{}\",);","highlight_start":29,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_ne macros>","byte_start":610,"byte_end":641,"line_start":21,"line_end":21,"column_start":24,"column_end":55,"is_primary":false,"text":[{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":24,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::debug_assert_ne macros>","byte_start":60,"byte_end":91,"line_start":2,"line_end":2,"column_start":33,"column_end":64,"is_primary":false,"text":[{"text":"if cfg ! ( debug_assertions ) { assert_ne ! ( $ ( $ arg ) * ) ; } )","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":825,"byte_end":855,"line_start":31,"line_end":31,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    debug_assert_ne!(1, 2, \"{}\",);","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"debug_assert_ne!","def_site_span":{"file_name":"<::core::macros::debug_assert_ne macros>","byte_start":0,"byte_end":95,"line_start":1,"line_end":2,"column_start":1,"column_end":68,"is_primary":false,"text":[{"text":"( $ ( $ arg : tt ) * ) => (","highlight_start":1,"highlight_end":28},{"text":"if cfg ! ( debug_assertions ) { assert_ne ! ( $ ( $ arg ) * ) ; } )","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"assert_ne!","def_site_span":{"file_name":"<::core::macros::assert_ne macros>","byte_start":0,"byte_end":655,"line_start":1,"line_end":21,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if * left_val == * right_val {","highlight_start":1,"highlight_end":31},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# ,","highlight_start":1,"highlight_end":19},{"text":"left_val , right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) => {","highlight_start":1,"highlight_end":77},{"text":"assert_ne ! ( $ left , $ right ) } ; (","highlight_start":1,"highlight_end":39},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if * left_val == * right_val {","highlight_start":1,"highlight_end":31},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left != right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"# ,","highlight_start":1,"highlight_end":23},{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":"error: 1 positional argument in format string, but no arguments were given\n  --> /checkout/src/test/ui/macros/macro-comma-behavior.rs:31:29\n   |\nLL |     debug_assert_ne!(1, 2, \"{}\",);\n   |                             ^^\n\n"}
[00:58:14] {"message":"1 positional argument in format string, but no arguments were given","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":1336,"byte_end":1338,"line_start":52,"line_end":52,"column_start":19,"column_end":21,"is_primary":true,"text":[{"text":"    format_args!(\"{}\",);","highlight_start":19,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":1322,"byte_end":1342,"line_start":52,"line_end":52,"column_start":5,"column_end":25,"is_primary":false,"text":[{"text":"    format_args!(\"{}\",);","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":"error: 1 positional argument in format string, but no arguments were given\n  --> /checkout/src/test/ui/macros/macro-comma-behavior.rs:52:19\n   |\nLL |     format_args!(\"{}\",);\n   |                   ^^\n\n"}
[00:58:14] {"message":"1 positional argument in format string, but no arguments were given","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":1792,"byte_end":1794,"line_start":70,"line_end":70,"column_start":21,"column_end":23,"is_primary":true,"text":[{"text":"    unimplemented!(\"{}\",);","highlight_start":21,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::unimplemented macros>","byte_start":114,"byte_end":145,"line_start":2,"line_end":2,"column_start":39,"column_end":70,"is_primary":false,"text":[{"text":"panic ! ( \"not yet implemented: {}\" , format_args ! ( $ ( $ arg ) * ) ) ) ;","highlight_start":39,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":1776,"byte_end":1798,"line_start":70,"line_end":70,"column_start":5,"column_end":27,"is_primary":false,"text":[{"text":"    unimplemented!(\"{}\",);","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"unimplemented!","def_site_span":{"file_name":"<::core::macros::unimplemented macros>","byte_start":0,"byte_end":151,"line_start":1,"line_end":2,"column_start":1,"column_end":76,"is_primary":false,"text":[{"text":"(  ) => ( panic ! ( \"not yet implemented\" ) ) ; ( $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":76},{"text":"panic ! ( \"not yet implemented: {}\" , format_args ! ( $ ( $ arg ) * ) ) ) ;","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":"error: 1 positional argument in format string, but no arguments were given\n  --> /checkout/src/test/ui/macros/macro-comma-behavior.rs:70:21\n   |\nLL |     unimplemented!(\"{}\",);\n   |                     ^^\n\n"}
[00:58:14] {"message":"1 positional argument in format string, but no arguments were given","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":2059,"byte_end":2061,"line_start":79,"line_end":79,"column_start":24,"column_end":26,"is_primary":true,"text":[{"text":"            write!(f, \"{}\",)?;","highlight_start":24,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::write macros>","byte_start":63,"byte_end":94,"line_start":2,"line_end":2,"column_start":21,"column_end":52,"is_primary":false,"text":[{"text":"$ dst . write_fmt ( format_args ! ( $ ( $ arg ) * ) ) )","highlight_start":21,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/ui/macros/macro-comma-behavior.rs","byte_start":2048,"byte_end":2064,"line_start":79,"line_end":79,"column_start":13,"column_end":29,"is_primary":false,"text":[{"text":"            write!(f, \"{}\",)?;","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"write!","def_site_span":{"file_name":"<::core::macros::write macros>","byte_start":0,"byte_end":98,"line_start":1,"line_end":2,"column_start":1,"column_end":56,"is_primary":false,"text":[{"text":"( $ dst : expr , $ ( $ arg : tt ) * ) => (","highlight_start":1,"highlight_end":43},{"text":"$ dst . write_fmt ( format_args ! ( $ ( $ arg ) * ) ) )","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":"error: 1 positional argument in format string, but no arguments were given\n  --> /checkout/src/test/ui/macros/macro-comma-behavior.rs:79:24\n   |\nLL |             write!(f, \"{}\",)?;\n   |                        ^^\n\n"}
[00:58:14] {"message":"`#[panic_handler]` function required, but not found","code":null,"level":"error","spans":[],"children":[],"rendered":"error: `#[panic_handler]` function required, but not found\n\n"}
[00:58:14] {"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 8 previous errors\n\n"}
[00:58:14] ------------------------------------------
[00:58:14] 
[00:58:14] thread '[ui] ui/macros/macro-comma-behavior.rs#core' panicked at 'explicit panic', src/tools/compiletest/src/runtest.rs:3245:9
[00:58:14] 
---
[00:58:14] test result: FAILED. 5140 passed; 1 failed; 57 ignored; 0 measured; 0 filtered out
[00:58:14] 
[00:58:14] 
[00:58:14] 
[00:58:14] command did not execute successfully: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest" "--compile-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib" "--run-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/wasm32-unknown-unknown/lib" "--rustc-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "--src-base" "/checkout/src/test/ui" "--build-base" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui" "--stage-id" "stage2-wasm32-unknown-unknown" "--mode" "ui" "--target" "wasm32-unknown-unknown" "--host" "x86_64-unknown-linux-gnu" "--llvm-filecheck" "/checkout/obj/build/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck" "--nodejs" "/node-v9.2.0-linux-x64/bin/node" "--host-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--target-rustcflags" "-Crpath -O -Zunstable-options  -Lnative=/checkout/obj/build/wasm32-unknown-unknown/native/rust-test-helpers" "--docck-python" "/usr/bin/python2.7" "--lldb-python" "/usr/bin/python2.7" "--gdb" "/usr/bin/gdb" "--llvm-version" "8.0.0svn\n" "--cc" "" "--cxx" "" "--cflags" "" "--llvm-components" "" "--llvm-cxxflags" "" "--adb-path" "adb" "--adb-test-dir" "/data/tmp/work" "--android-cross-path" "" "--color" "always"
[00:58:14] 
[00:58:14] 
[00:58:14] failed to run: /checkout/obj/build/bootstrap/debug/bootstrap test --target wasm32-unknown-unknown src/test/run-make src/test/ui src/test/run-pass src/test/compile-fail src/test/mir-opt src/test/codegen-units src/libcore
[00:58:14] Build completed unsuccessfully in 0:55:35
---
travis_time:end:025678dc:start=1545875889605889630,finish=1545875889621272068,duration=15382438
travis_fold:end:after_failure.3
travis_fold:start:after_failure.4
travis_time:start:12ab6b40
$ ln -s . checkout && for CORE in obj/cores/core.*; do EXE=$(echo $CORE | sed 's|obj/cores/core\.[0-9]*\.!checkout!\(.*\)|\1|;y|!|/|'); if [ -f "$EXE" ]; then printf travis_fold":start:crashlog\n\033[31;1m%s\033[0m\n" "$CORE"; gdb --batch -q -c "$CORE" "$EXE" -iex 'set auto-load off' -iex 'dir src/' -iex 'set sysroot .' -ex bt -ex q; echo travis_fold":"end:crashlog; fi; done || true
travis_fold:end:after_failure.4
travis_fold:start:after_failure.5
travis_time:start:00f5c720
travis_time:start:00f5c720
$ cat ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers || true
cat: ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers: No such file or directory
travis_fold:end:after_failure.5
travis_fold:start:after_failure.6
travis_time:start:172ac364
$ dmesg | grep -i kill
