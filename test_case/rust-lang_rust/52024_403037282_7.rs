\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/existential_type.rs","byte_start":1403,"byte_end":1456,"line_start":61,"line_end":61,"column_start":1,"column_end":54,"is_primary":true,"text":[{"text":"existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`","highlight_start":1,"highlight_end":54}],"label":"the trait `Trait` is not implemented for `T`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider adding a `where T: Trait` bound","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the return type of a function must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `T: Trait` is not satisfied\n  --> /checkout/src/test/ui/existential_type.rs:61:1\n   |\nLL | existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n   |\n   = help: consider adding a `where T: Trait` bound\n   = note: the return type of a function must have a statically known size\n\n"}
[00:46:14] {"message":"not reporting region error due to nll","code":null,"level":"warning","spans":[{"file_name":"/checkout/src/test/ui/existential_type.rs","byte_start":1826,"byte_end":1868,"line_start":78,"line_end":78,"column_start":1,"column_end":43,"is_primary":true,"text":[{"text":"existential type WrongGeneric<T>: 'static;","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"warning: not reporting region error due to nll\n  --> /checkout/src/test/ui/existential_type.rs:78:1\n   |\nLL | existential type WrongGeneric<T>: 'static;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[00:46:14] {"message":"could not find defining uses","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/existential_type.rs","byte_start":744,"byte_end":782,"line_start":28,"line_end":28,"column_start":1,"column_end":39,"is_primary":true,"text":[{"text":"existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: could not find defining uses\n  --> /checkout/src/test/ui/existential_type.rs:28:1\n   |\nLL | existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[00:46:14] {"message":"could not find defining uses","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/existential_type.rs","byte_start":892,"byte_end":936,"line_start":32,"line_end":32,"column_start":5,"column_end":49,"is_primary":true,"text":[{"text":"    pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses","highlight_start":5,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error: could not find defining uses\n  --> /checkout/src/test/ui/existential_type.rs:32:5\n   |\nLL |     pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[00:46:14] {"message":"defining existential type use differs from previous","code":null,"level":"error","spans":[{"file_name":"/checkout/src/test/ui/existential_type.rs","byte_start":1701,"byte_end":1824,"line_start":74,"line_end":76,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous","highlight_start":1,"highlight_end":98},{"text":"    Some(t).into_iter()","highlight_start":1,"highlight_end":24},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previous use here","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/existential_type.rs","byte_start":1640,"byte_end":1699,"line_start":70,"line_end":72,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn my_iter<T>(t: T) -> MyIter<T> {","highlight_start":1,"highlight_end":35},{"text":"    std::iter::once(t)","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"error: defining existential type use differs from previous\n  --> /checkout/src/test/ui/existential_type.rs:74:1\n   |\nLL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\nLL | |     Some(t).into_iter()\nLL | | }\n   | |_^\n   |\nnote: previous use here\n  --> /checkout/src/test/ui/existential_type.rs:70:1\n   |\nLL | / fn my_iter<T>(t: T) -> MyIter<T> {\nLL | |     std::iter::once(t)\nLL | | }\n   | |_^\n\n"}
[00:46:14] {"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 8 previous errors\n\n"}
[00:46:14] {"message":"Some errors occurred: E0277, E0308.","code":null,"level":"","spans":[],"children":[],"rendered":"Some errors occurred: E0277, E0308.\n"}
[00:46:14] {"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about an error, try `rustc --explain E0277`.\n"}
[00:46:14] ------------------------------------------
[00:46:14] 
[00:46:14] thread '[ui (nll)] ui/existential_type.rs' panicked at 'explicit panic', tools/compiletest/src/runtest.rs:3140:9
[00:46:14] note: Run with `RUST_BACKTRACE=1` for a backtrace.
