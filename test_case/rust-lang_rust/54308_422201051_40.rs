rust,ignore (pseudo-Rust)\nuse std::error::Error as StdError;\n\n#[non_exhaustive] pub enum Error {\n   Message(String),\n   Other,\n}\n\nimpl StdError for Error {\n   fn description(&self) -> &str {\n        / `..` required with struct marked as non-exhaustive\n  --> /checkout/src/test/ui/rfc-2008-non-exhaustive/structs.rs:36:9\n   |\nLL |     let TupleStruct { 0: first_field, 1: second_field } = ts;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[01:05:24] {"message":"`..` required with struct marked as non-exhaustive","code":{"code":"E0638","explanation":"\nThis error indicates that the struct or enum must be matched non-exhaustively\nas it has been marked as `non_exhaustive`.\n\nWhen applied within a crate, downstream users of the crate will need to use the\n`_` pattern when matching enums and use the `..` pattern when matching structs.\n\nFor example, in the below example, since the enum is marked as\n`non_exhaustive`, it is required that downstream crates match non-exhaustively\non it.\n\n