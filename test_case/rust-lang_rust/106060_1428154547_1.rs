
 % RUSTC=/media/pnkfelix/Rust/rust.git/objdir/build/x86_64-unknown-linux-gnu/stage1/bin/rustc cargo build
   Compiling rental v0.5.5
error: proc-macro derive panicked
   --> /home/pnkfelix/.cargo/registry/src/github.com-1ecc6299db9ec823/rental-0.5.5/src/lib.rs:93:12
    |
93  |         #[derive(__rental_traits)]
    |                  ^^^^^^^^^^^^^^^
...
117 |     define_rental_traits!(32);
    |     ------------------------- in this macro invocation
    |
    = help: message: expected suffix ").0," not found in "#[allow(unused)] enum ProceduralMasqueradeDummyType\n{ Input = (0, stringify! (32)).0 }"
    = note: this error originates in the macro `define_rental_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc-macro derive panicked
   --> /home/pnkfelix/.cargo/registry/src/github.com-1ecc6299db9ec823/rental-0.5.5/src/lib.rs:257:13
    |
257 |               #[derive(__rental_structs_and_impls)]
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
285 | / rental! {
286 | |     /// Example types that demonstrate the API generated by the rental macro.
287 | |     pub mod examples {
288 | |         use std::sync;
...   |
345 | |     }
346 | | }
    | |_- in this macro invocation
    |
    = help: message: expected suffix ").0," not found in "#[allow(unused)] enum ProceduralMasqueradeDummyType\n{\n    Input =\n    (0, stringify!\n    (use std :: s\
ync ;\n    #[doc =\n    r\" The simplest shared rental. The head is a boxed integer, and the suffix is a ref to that integer. This struct demonstrates the basic API\
 that all shared rental structs have. See [`SimpleMut`](struct.SimpleMut.html) for the mutable analog.\"]\n    #[rental] pub struct SimpleRef { head : Box < i32 >, \
iref : & 'head i32, }\n    #[doc =\n    r\" The simplest mutable rental. Mutable rentals have a slightly different API; compare this struct to [`SimpleRef`](struct.\
SimpleRef.html) for the clearest picture of how they differ.\"]\n    #[rental_mut] pub struct SimpleMut\n    { head : Box < i32 >, iref : & 'head mut i32, }\n    #[\
doc =\n    r\" Identical to [`SimpleRef`](struct.SimpleRef.html), but with the `debug` flag enabled. This will provide a `Debug` impl for the struct as long as all \
of the fields are `Debug`.\"]\n    #[rental(debug)] pub struct SimpleRefDebug\n    { head : Box < i32 >, iref : & 'head i32, }\n    #[doc =\n    r\" Similar to [`Si\
mpleRef`](struct.SimpleRef.html), but with the `clone` flag enabled. This will provide a `Clone` impl for the struct as long as the prefix fields are `CloneStableDe\
ref` and the suffix is `Clone` . Notice that the head is an `Arc`, since a clone of an `Arc` will deref to the same object as the original.\"]\n    #[rental(clone)]\
 pub struct SimpleRefClone\n    { head : sync :: Arc < i32 >, iref : & 'head i32, }\n    #[doc =\n    r\" Identical to [`SimpleRef`](struct.SimpleRef.html), but wit\
h the `deref_suffix` flag enabled. This will provide a `Deref` impl for the struct, which will in turn deref the suffix. Notice that this flag also removes the `sel\
f` param from all methods, replacing it with an explicit param. This prevents any rental methods from blocking deref.\"]\n    #[rental(deref_suffix)] pub struct Sim\
pleRefDeref\n    { head : Box < i32 >, iref : & 'head i32, }\n    #[doc =\n    r\" Identical to [`SimpleMut`](struct.SimpleMut.html), but with the `deref_mut_suffix\
` flag enabled. This will provide a `DerefMut` impl for the struct, which will in turn deref the suffix.Notice that this flag also removes the `self` param from all\
 methods, replacing it with an explicit param. This prevents any rental methods from blocking deref.\"]\n    #[rental_mut(deref_mut_suffix)] pub struct SimpleMutDer\
ef\n    { head : Box < i32 >, iref : & 'head mut i32, }\n    #[doc =\n    r\" Identical to [`SimpleRef`](struct.SimpleRef.html), but with the `covariant` flag enabl\
ed. For rental structs where the field types have covariant lifetimes, this will allow you to directly borrow the fields, as they can be safely reborrowed to a shor\
ter lifetime. See the [`all`](struct.SimpleRefCovariant.html#method.all) and [`suffix`](struct.SimpleRefCovariant.html#method.suffix) methods.\"]\n    #[rental(cova\
riant)] pub struct SimpleRefCovariant\n    { head : Box < i32 >, iref : & 'head i32, }\n    #[doc =\n    r\" Identical to [`SimpleRef`](struct.SimpleRef.html), but \
with the `map_suffix` flag enabled. This will allow the type of the suffix to be changed by mapping it to another instantiation of the same struct with the differen\
t type param. See the [`map`](struct.SimpleRefMap.html#method.map), [`try_map`](struct.SimpleRefMap.html#method.try_map), and [`try_map_or_drop`](struct.SimpleRefMa\
p.html#method.try_map_or_drop) methods.\"]\n    #[rental(map_suffix = \"T\")] pub struct SimpleRefMap < T : 'static >\n    { head : Box < i32 >, iref : & 'head T, }\
)).0\n}"
    = note: this error originates in the macro `rental` (in Nightly builds, run with -Z macro-backtrace for more info)

error: proc-macro derive panicked
   --> /home/pnkfelix/.cargo/registry/src/github.com-1ecc6299db9ec823/rental-0.5.5/src/lib.rs:257:13
    |
257 |               #[derive(__rental_structs_and_impls)]
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
350 | / rental! {
351 | |     /// Premade types for the most common use cases.
352 | |     pub mod common {
353 | |         use std::ops::DerefMut;
...   |
484 | |     }
485 | | }
    | |_- in this macro invocation
    |
   = help: message: expected suffix ").0," not found in "#[allow(unused)] enum ProceduralMasqueradeDummyType\n{\n    Input =\n    (0, stringify!\n    (use std :: o\
ps :: DerefMut ; use stable_deref_trait :: StableDeref ; use\n    std :: cell ; use std :: sync ;\n    #[doc = r\" Stores an owner and a shared reference in the sam\
e struct.\"]\n    #[doc = r\"\"] #[doc = r\" 