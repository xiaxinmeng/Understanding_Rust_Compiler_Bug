\n\nFor more information about casts, take a look at The Book:\nhttps://doc.rust-lang.org/book/first-edition/casting-between-types.html\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/mismatched_types/cast-rfc0401.rs","byte_start":2696,"byte_end":2712,"line_start":79,"line_end":79,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"    let _ = cf as *const Bar; //~ ERROR is invalid","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"vtable kinds may not match","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0606]: casting `*const dyn Foo` as `*const dyn Bar` is invalid\n  --> /checkout/src/test/ui/mismatched_types/cast-rfc0401.rs:79:13\n   |\nLL |     let _ = cf as *const Bar; //~ ERROR is invalid\n   |             ^^^^^^^^^^^^^^^^\n   nction: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n