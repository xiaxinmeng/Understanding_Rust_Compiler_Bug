\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/sta~ ERROR cannot borrow\n   |                         ^^^ mutable borrow starts here in previous iteration of loop\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n  --> /checkout/src/test/ui/borrowck/mut-borrow-in-loop.rs:17:6\n   |\nLL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n   |      ^^\nnote: consider extracting this into a `let`-binding\n  --> /checkout/src/test/ui/borrowck/mut-borrow-in-loop.rs:26:13\n   |\nLL |             (self.func)(arg) //~ ERROR cannot borrow\n   |             ^^^^^^^^^^^^^^^^\n\n"}
[00:51:17] {"message":"cannot borrow `*arg` as mutable more than once at a time","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n