plain
2019-09-28T03:20:26.2082027Z ##[command]git remote add origin https://github.com/rust-lang/rust
2019-09-28T03:20:26.2305002Z ##[command]git config gc.auto 0
2019-09-28T03:20:26.2375729Z ##[command]git config --get-all http.https://github.com/rust-lang/rust.extraheader
2019-09-28T03:20:26.2423567Z ##[command]git config --get-all http.proxy
2019-09-28T03:20:26.9207003Z ##[command]git -c http.extraheader="AUTHORIZATION: basic ***" fetch --force --tags --prune --progress --no-recurse-submodules --depth=2 origin +refs/heads/*:refs/remotes/origin/* +refs/pull/64856/merge:refs/remotes/pull/64856/merge
---
2019-09-28T04:26:18.3303367Z .................................................................................................... 1500/9047
2019-09-28T04:26:24.6634101Z .................................................................................................... 1600/9047
2019-09-28T04:26:37.7894625Z ..........................................................................i...............i......... 1700/9047
2019-09-28T04:26:44.8388064Z .................................................................................................... 1800/9047
2019-09-28T04:26:53.8594311Z .................................................................iiiii.............................. 1900/9047
2019-09-28T04:27:14.6821596Z .................................................................................................... 2100/9047
2019-09-28T04:27:17.4271865Z .................................................................................................... 2200/9047
2019-09-28T04:27:20.7515056Z .................................................................................................... 2300/9047
2019-09-28T04:27:29.9396978Z .................................................................................................... 2400/9047
---
2019-09-28T04:30:38.8168978Z .....................................................i...............i.............................. 4700/9047
2019-09-28T04:30:48.7628877Z .................................................................................................... 4800/9047
2019-09-28T04:30:57.7072417Z .................................................................................................... 4900/9047
2019-09-28T04:31:05.5162386Z .................................................................................................... 5000/9047
2019-09-28T04:31:15.6991096Z .........................................ii.ii...................................................... 5100/9047
2019-09-28T04:31:26.3302948Z .................................................................................................... 5300/9047
2019-09-28T04:31:37.4005443Z .................................................................................................... 5400/9047
2019-09-28T04:31:45.1091485Z ......i............................................................................................. 5500/9047
2019-09-28T04:31:50.8447353Z .................................................................................................... 5600/9047
2019-09-28T04:31:50.8447353Z .................................................................................................... 5600/9047
2019-09-28T04:32:03.3620578Z .................................................................................................... 5700/9047
2019-09-28T04:32:17.0265485Z .ii...i..ii...........i............................................................................. 5800/9047
2019-09-28T04:32:39.5640827Z .................................................................................................... 6000/9047
2019-09-28T04:32:49.1795645Z .................................................................................................... 6100/9047
2019-09-28T04:32:49.1795645Z .................................................................................................... 6100/9047
2019-09-28T04:33:08.3355599Z ....i..ii........................................................................................... 6200/9047
2019-09-28T04:33:29.2670239Z ................................................................i................................... 6400/9047
2019-09-28T04:33:31.5912496Z .................................................................................................... 6500/9047
2019-09-28T04:33:34.7824019Z ....................................i............................................................... 6600/9047
2019-09-28T04:33:38.6144286Z .................................................................................................... 6700/9047
---
2019-09-28T04:38:23.4323724Z  finished in 5.960
2019-09-28T04:38:23.4522561Z Check compiletest suite=codegen mode=codegen (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2019-09-28T04:38:23.6407633Z 
2019-09-28T04:38:23.6408958Z running 150 tests
2019-09-28T04:38:27.1883525Z i....iii......iii..iiii....i.............................i..i..................i....i.........ii.i.i 100/150
2019-09-28T04:38:29.2966628Z ..iiii..............i.........iii.i.......ii......
2019-09-28T04:38:29.2968108Z 
2019-09-28T04:38:29.2975234Z  finished in 5.845
2019-09-28T04:38:29.3193715Z Check compiletest suite=codegen-units mode=codegen-units (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2019-09-28T04:38:30.3778149Z 
---
2019-09-28T04:38:31.6596522Z  finished in 2.340
2019-09-28T04:38:31.6798337Z Check compiletest suite=assembly mode=assembly (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2019-09-28T04:38:31.8461910Z 
2019-09-28T04:38:31.8462727Z running 9 tests
2019-09-28T04:38:31.8463699Z iiiiiiiii
2019-09-28T04:38:31.8464563Z 
2019-09-28T04:38:31.8467298Z  finished in 0.166
2019-09-28T04:38:31.8668437Z Check compiletest suite=incremental mode=incremental (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2019-09-28T04:38:32.8783703Z 
---
2019-09-28T04:38:51.2034416Z  finished in 19.336
2019-09-28T04:38:51.2251182Z Check compiletest suite=debuginfo mode=debuginfo-gdb+lldb (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2019-09-28T04:38:51.3978140Z 
2019-09-28T04:38:51.3978280Z running 123 tests
2019-09-28T04:39:17.8445783Z .iiiii...i.....i..i...i..i.i.i..i.ii..i.i.....i..i....ii..........iiii..........i...ii...i.......ii. 100/123
2019-09-28T04:39:23.1159760Z i.i.i......iii.i.....ii
2019-09-28T04:39:23.1162003Z 
2019-09-28T04:39:23.1163099Z  finished in 31.891
2019-09-28T04:39:23.1175016Z Uplifting stage1 rustc (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
2019-09-28T04:39:23.1176229Z Copying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)
---
2019-09-28T04:47:40.8204415Z 
2019-09-28T04:47:40.8205259Z error: pretty-printed source does not match expected source
2019-09-28T04:47:40.8205649Z expected:
2019-09-28T04:47:40.8206430Z ------------------------------------------
2019-09-28T04:47:40.8206501Z #[prelude_import]
2019-09-28T04:47:40.8207124Z use ::std::prelude::v1::*;
2019-09-28T04:47:40.8207220Z #[macro_use]
2019-09-28T04:47:40.8207286Z extern crate std;
2019-09-28T04:47:40.8208303Z // pretty-compare-only
2019-09-28T04:47:40.8208854Z // pretty-mode:hir,typed
2019-09-28T04:47:40.8209826Z // pp-exact:issue-4264.pp
2019-09-28T04:47:40.8210598Z 
2019-09-28T04:47:40.8211650Z // #4264 fixed-length vector types
2019-09-28T04:47:40.8211858Z 
2019-09-28T04:47:40.8211914Z pub fn foo(_: [i32; (3 as usize)]) ({ } as ())
2019-09-28T04:47:40.8212020Z pub fn bar() ({
2019-09-28T04:47:40.8212020Z pub fn bar() ({
2019-09-28T04:47:40.8213708Z                   const FOO: usize = ((5 as usize) - (4 as usize) as usize);
2019-09-28T04:47:40.8213800Z                   let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);
2019-09-28T04:47:40.8213836Z 
2019-09-28T04:47:40.8213918Z                   let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);
2019-09-28T04:47:40.8213998Z                   let _ =
2019-09-28T04:47:40.8213998Z                   let _ =
2019-09-28T04:47:40.8214070Z                       (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])
2019-09-28T04:47:40.8214508Z                             as &[i32; 3]) as *const _ as *const [i32; 3]) as
2019-09-28T04:47:40.8214570Z                           *const [i32; (3 as usize)] as *const [i32; 3]);
2019-09-28T04:47:40.8214665Z 
2019-09-28T04:47:40.8214694Z 
2019-09-28T04:47:40.8214721Z 
2019-09-28T04:47:40.8214749Z 
2019-09-28T04:47:40.8214749Z 
2019-09-28T04:47:40.8214775Z 
2019-09-28T04:47:40.8214802Z 
2019-09-28T04:47:40.8214848Z 
2019-09-28T04:47:40.8214875Z 
2019-09-28T04:47:40.8214923Z                   ((::alloc::fmt::format as
2019-09-28T04:47:40.8215704Z                        for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::core::fmt::Arguments>::new_v1
2019-09-28T04:47:40.8216157Z                                                                                                            as
2019-09-28T04:47:40.8217040Z                                                                                                            fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([("test"
2019-09-28T04:47:40.8217745Z                                                                                                                                                                                                                             &'static str)]
2019-09-28T04:47:40.8217867Z                                                                                                                                                                                                                           as
2019-09-28T04:47:40.8217867Z                                                                                                                                                                                                                           as
2019-09-28T04:47:40.8218203Z                                                                                                                                                                                                                           [&str; 1])
2019-09-28T04:47:40.8218336Z                                                                                                                                                                                                                         as
2019-09-28T04:47:40.8218451Z                                                                                                                                                                                                                         &[&str; 1]),
2019-09-28T04:47:40.8218545Z                                                                                                                                                                                                                     (&(match (()
2019-09-28T04:47:40.8218756Z                                                                                                                                                                                                                                  ())
2019-09-28T04:47:40.8218946Z                                                                                                                                                                                                                            {
2019-09-28T04:47:40.8219036Z                                                                                                                                                                                                                            ()
2019-09-28T04:47:40.8219150Z                                                                                                                                                                                                                            =>
2019-09-28T04:47:40.8219150Z                                                                                                                                                                                                                            =>
2019-09-28T04:47:40.8219237Z                                                                                                                                                                                                                            ([]
2019-09-28T04:47:40.8219353Z                                                                                                                                                                                                                                as
2019-09-28T04:47:40.8219898Z                                                                                                                                                                                                                                [std::fmt::ArgumentV1<'_>; 0]),
2019-09-28T04:47:40.8220467Z                                                                                                                                                                                                                           as
2019-09-28T04:47:40.8220467Z                                                                                                                                                                                                                           as
2019-09-28T04:47:40.8221828Z                                                                                                                                                                                                                           [std::fmt::ArgumentV1<'_>; 0])
2019-09-28T04:47:40.8221949Z                                                                                                                                                                                                                         as
2019-09-28T04:47:40.8222644Z                                                                                                                                                                                                                         &[std::fmt::ArgumentV1<'_>; 0]))
2019-09-28T04:47:40.8223501Z                                                                                                           std::fmt::Arguments<'_>))
2019-09-28T04:47:40.8223578Z                       as std::string::String);
2019-09-28T04:47:40.8223578Z                       as std::string::String);
2019-09-28T04:47:40.8223629Z               } as ())
2019-09-28T04:47:40.8223679Z pub type Foo = [i32; (3 as usize)];
2019-09-28T04:47:40.8223745Z pub struct Bar {
2019-09-28T04:47:40.8223793Z     pub x: [i32; (3 as usize)],
2019-09-28T04:47:40.8223840Z }
2019-09-28T04:47:40.8223907Z pub struct TupleBar([i32; (4 as usize)]);
2019-09-28T04:47:40.8223959Z pub enum Baz { BazVariant([i32; (5 as usize)]), }
2019-09-28T04:47:40.8224214Z pub fn id<T>(x: T) -> T ({ (x as T) } as T)
2019-09-28T04:47:40.8224283Z pub fn use_id() ({
2019-09-28T04:47:40.8224344Z                      let _ =
2019-09-28T04:47:40.8224397Z                          ((id::<[i32; (3 as usize)]> as
2019-09-28T04:47:40.8224709Z                               fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1
2019-09-28T04:47:40.8224996Z                                                                                i32),
2019-09-28T04:47:40.8225072Z                                                                            (2
2019-09-28T04:47:40.8225132Z                                                                                as
2019-09-28T04:47:40.8225193Z                                                                                i32),
2019-09-28T04:47:40.8225193Z                                                                                i32),
2019-09-28T04:47:40.8225272Z                                                                            (3
2019-09-28T04:47:40.8225332Z                                                                                as
2019-09-28T04:47:40.8225401Z                                                                                i32)]
2019-09-28T04:47:40.8225479Z                                                                              as
2019-09-28T04:47:40.8225549Z                                                                              [i32; 3]))
2019-09-28T04:47:40.8225602Z                              as [i32; 3]);
2019-09-28T04:47:40.8225670Z                  } as ())
2019-09-28T04:47:40.8225718Z fn main() ({ } as ())
2019-09-28T04:47:40.8226044Z ------------------------------------------
2019-09-28T04:47:40.8226118Z actual:
2019-09-28T04:47:40.8226359Z ------------------------------------------
2019-09-28T04:47:40.8226359Z ------------------------------------------
2019-09-28T04:47:40.8226410Z #[prelude_import]
2019-09-28T04:47:40.8226477Z use ::std::prelude::v1::*;
2019-09-28T04:47:40.8226525Z #[macro_use]
2019-09-28T04:47:40.8226571Z extern crate std;
2019-09-28T04:47:40.8226790Z // pretty-compare-only
2019-09-28T04:47:40.8227029Z // pretty-mode:hir,typed
2019-09-28T04:47:40.8227260Z // pp-exact:issue-4264.pp
2019-09-28T04:47:40.8227293Z 
2019-09-28T04:47:40.8227530Z // #4264 fixed-length vector types
2019-09-28T04:47:40.8227583Z 
2019-09-28T04:47:40.8227642Z pub fn foo(_: [i32; (3 as usize)]) ({ } as ())
2019-09-28T04:47:40.8227720Z pub fn bar() ({
2019-09-28T04:47:40.8227720Z pub fn bar() ({
2019-09-28T04:47:40.8228025Z                   const FOO: usize = ((5 as usize) - (4 as usize) as usize);
2019-09-28T04:47:40.8228087Z                   let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);
2019-09-28T04:47:40.8228123Z 
2019-09-28T04:47:40.8246463Z                   let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);
2019-09-28T04:47:40.8246619Z                   let _ =
2019-09-28T04:47:40.8246619Z                   let _ =
2019-09-28T04:47:40.8246675Z                       (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])
2019-09-28T04:47:40.8246748Z                             as &[i32; 3]) as *const _ as *const [i32; 3]) as
2019-09-28T04:47:40.8246995Z                           *const [i32; (3 as usize)] as *const [i32; 3]);
2019-09-28T04:47:40.8247073Z 
2019-09-28T04:47:40.8247108Z 
2019-09-28T04:47:40.8247136Z 
2019-09-28T04:47:40.8247164Z 
2019-09-28T04:47:40.8247164Z 
2019-09-28T04:47:40.8247203Z 
2019-09-28T04:47:40.8247231Z 
2019-09-28T04:47:40.8247257Z 
2019-09-28T04:47:40.8247296Z 
2019-09-28T04:47:40.8247342Z                   ({
2019-09-28T04:47:40.8247391Z                        let res =
2019-09-28T04:47:40.8247453Z                            ((::alloc::fmt::format as
2019-09-28T04:47:40.8248045Z                                 for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::core::fmt::Arguments>::new_v1
2019-09-28T04:47:40.8248124Z                                                                                                                     as
2019-09-28T04:47:40.8248617Z                                                                                                                     fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([("test"
2019-09-28T04:47:40.8249504Z                                                                                                                                                                                                                                      &'static str)]
2019-09-28T04:47:40.8249605Z                                                                                                                                                                                                                                    as
2019-09-28T04:47:40.8249605Z                                                                                                                                                                                                                                    as
2019-09-28T04:47:40.8250046Z                                                                                                                                                                                                                                    [&str; 1])
2019-09-28T04:47:40.8250233Z                                                                                                                                                                                                                                  as
2019-09-28T04:47:40.8250335Z                                                                                                                                                                                                                                  &[&str; 1]),
2019-09-28T04:47:40.8250433Z                                                                                                                                                                                                                              (&(match (()
2019-09-28T04:47:40.8250848Z                                                                                                                                                                                                                                           ())
2019-09-28T04:47:40.8251154Z                                                                                                                                                                                                                                     {
2019-09-28T04:47:40.8251265Z                                                                                                                                                                                                                                     ()
2019-09-28T04:47:40.8251490Z                                                                                                                                                                                                                                     =>
2019-09-28T04:47:40.8251490Z                                                                                                                                                                                                                                     =>
2019-09-28T04:47:40.8251603Z                                                                                                                                                                                                                                     ([]
2019-09-28T04:47:40.8251928Z                                                                                                                                                                                                                                         as
2019-09-28T04:47:40.8252577Z                                                                                                                                                                                                                                         [std::fmt::ArgumentV1<'_>; 0]),
2019-09-28T04:47:40.8253974Z                                                                                                                                                                                                                                    as
2019-09-28T04:47:40.8253974Z                                                                                                                                                                                                                                    as
2019-09-28T04:47:40.8254633Z                                                                                                                                                                                                                                    [std::fmt::ArgumentV1<'_>; 0])
2019-09-28T04:47:40.8254745Z                                                                                                                                                                                                                                  as
2019-09-28T04:47:40.8255248Z                                                                                                                                                                                                                                  &[std::fmt::ArgumentV1<'_>; 0]))
2019-09-28T04:47:40.8255714Z                                                                                                                    std::fmt::Arguments<'_>))
2019-09-28T04:47:40.8255779Z                                as std::string::String);
2019-09-28T04:47:40.8255842Z                        (res as std::string::String)
2019-09-28T04:47:40.8255895Z                    } as std::string::String);
2019-09-28T04:47:40.8255895Z                    } as std::string::String);
2019-09-28T04:47:40.8255945Z               } as ())
2019-09-28T04:47:40.8256000Z pub type Foo = [i32; (3 as usize)];
2019-09-28T04:47:40.8256048Z pub struct Bar {
2019-09-28T04:47:40.8256096Z     pub x: [i32; (3 as usize)],
2019-09-28T04:47:40.8256152Z }
2019-09-28T04:47:40.8256208Z pub struct TupleBar([i32; (4 as usize)]);
2019-09-28T04:47:40.8256260Z pub enum Baz { BazVariant([i32; (5 as usize)]), }
2019-09-28T04:47:40.8256523Z pub fn id<T>(x: T) -> T ({ (x as T) } as T)
2019-09-28T04:47:40.8256583Z pub fn use_id() ({
2019-09-28T04:47:40.8256631Z                      let _ =
2019-09-28T04:47:40.8256685Z                          ((id::<[i32; (3 as usize)]> as
2019-09-28T04:47:40.8256979Z                               fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1
2019-09-28T04:47:40.8257101Z                                                                                i32),
2019-09-28T04:47:40.8257168Z                                                                            (2
2019-09-28T04:47:40.8257226Z                                                                                as
2019-09-28T04:47:40.8257464Z                                                                                i32),
2019-09-28T04:47:40.8257464Z                                                                                i32),
2019-09-28T04:47:40.8257543Z                                                                            (3
2019-09-28T04:47:40.8257612Z                                                                                as
2019-09-28T04:47:40.8257671Z                                                                                i32)]
2019-09-28T04:47:40.8257737Z                                                                              as
2019-09-28T04:47:40.8257797Z                                                                              [i32; 3]))
2019-09-28T04:47:40.8257851Z                              as [i32; 3]);
2019-09-28T04:47:40.8257907Z                  } as ())
2019-09-28T04:47:40.8257953Z fn main() ({ } as ())
2019-09-28T04:47:40.8258284Z ------------------------------------------
2019-09-28T04:47:40.8258328Z 
2019-09-28T04:47:40.8258356Z 
2019-09-28T04:47:40.8258356Z 
2019-09-28T04:47:40.8279706Z [ERROR compiletest::runtest] fatal error, panic: "pretty-printed source does not match expected source\nexpected:\n------------------------------------------\n#[prelude_import]\nuse ::std::prelude::v1::*;\n#[macro_use]\nextern crate std;\n// pretty-compare-only\n// pretty-mode:hir,typed\n// pp-exact:issue-4264.pp\n\n// #4264 fixed-length vector types\n\npub fn foo(_: [i32; (3 as usize)]) ({ } as ())\n\npub fn bar() ({\n                  const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n                  let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _ =\n                      (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])\n                            as &[i32; 3]) as *const _ as *const [i32; 3]) as\n                          *const [i32; (3 as usize)] as *const [i32; 3]);\n\n\n\n\n\n\n\n\n\n                  ((::alloc::fmt::format as\n                       for<\'r> fn(std::fmt::Arguments<\'r>) -> std::string::String {std::fmt::format})(((<::core::fmt::Arguments>::new_v1\n                                                                                                           as\n                                                                                                           fn(&[&str], &[std::fmt::ArgumentV1<\'_>]) -> std::fmt::Arguments<\'_> {std::fmt::Arguments::<\'_>::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                            as\n                                                                                                                                                                                                                            &\'static str)]\n                                                                                                                                                                                                                          as\n                                                                                                                                                                                                                          [&str; 1])\n                                                                                                                                                                                                                        as\n                                                                                                                                                                                                                        &[&str; 1]),\n                                                                                                                                                                                                                    (&(match (()\n                                                                                                                                                                                                                                 as\n                                                                                                                                                                                                                                 ())\n                                                                                                                                                                                                                           {\n                                                                                                                                                                                                                           ()\n                                                                                                                                                                                                                           =>\n                                                                                                                                                                                                                           ([]\n                                                                                                                                                                                                                               as\n                                                                                                                                                                                                                               [std::fmt::ArgumentV1<\'_>; 0]),\n                                                                                                                                                                                                                       }\n                                                                                                                                                                                                                          as\n                                                                                                                                                                                                                          [std::fmt::ArgumentV1<\'_>; 0])\n                                                                                                                                                                                                                        as\n                                                                                                                                                                                                                        &[std::fmt::ArgumentV1<\'_>; 0]))\n                                                                                                          as\n                                                                                                          std::fmt::Arguments<\'_>))\n                      as std::string::String);\n              } as ())\npub type Foo = [i32; (3 as usize)];\npub struct Bar {\n    pub x: [i32; (3 as usize)],\n}\npub struct TupleBar([i32; (4 as usize)]);\npub enum Baz { BazVariant([i32; (5 as usize)]), }\npub fn id<T>(x: T) -> T ({ (x as T) } as T)\npub fn use_id() ({\n                     let _ =\n                         ((id::<[i32; (3 as usize)]> as\n                              fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1\n                                                                               as\n                                                                               i32),\n                                                                           (2\n                                                                               as\n                                                                               i32),\n                                                                           (3\n                                                                               as\n                                                                               i32)]\n                                                                             as\n                                                                             [i32; 3]))\n                             as [i32; 3]);\n                 } as ())\nfn main() ({ } as ())\n\n------------------------------------------\nactual:\n------------------------------------------\n#[prelude_import]\nuse ::std::prelude::v1::*;\n#[macro_use]\nextern crate std;\n// pretty-compare-only\n// pretty-mode:hir,typed\n// pp-exact:issue-4264.pp\n\n// #4264 fixed-length vector types\n\npub fn foo(_: [i32; (3 as usize)]) ({ } as ())\n\npub fn bar() ({\n                  const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n                  let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n\n                  let _ =\n                      (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])\n                            as &[i32; 3]) as *const _ as *const [i32; 3]) as\n                          *const [i32; (3 as usize)] as *const [i32; 3]);\n\n\n\n\n\n\n\n\n\n                  ({\n                       let res =\n                           ((::alloc::fmt::format as\n                                for<\'r> fn(std::fmt::Arguments<\'r>) -> std::string::String {std::fmt::format})(((<::core::fmt::Arguments>::new_v1\n                                                                                                                    as\n                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1<\'_>]) -> std::fmt::Arguments<\'_> {std::fmt::Arguments::<\'_>::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                                     as\n                                                                                                                                                                                                                                     &\'static str)]\n                                                                                                                                                                                                                                   as\n                                                                                                                                                                                                                                   [&str; 1])\n                                                                                                                                                                                                                                 as\n                                                                                                                                                                                                                                 &[&str; 1]),\n                                                                                                                                                                                                                             (&(match (()\n                                                                                                                                                                                                                                          as\n                                                                                                                                                                                                                                          ())\n                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                    ()\n                                                                                                                                                                                                                                    =>\n                                                                                                                                                                                                                                    ([]\n                                                                                                                                                                                                                                        as\n                                                                                                                                                                                                                                        [std::fmt::ArgumentV1<\'_>; 0]),\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                   as\n                                                                                                                                                                                                                                   [std::fmt::ArgumentV1<\'_>; 0])\n                                                                                                                                                                                                                                 as\n                                                                                                                                                                                                                                 &[std::fmt::ArgumentV1<\'_>; 0]))\n                                                                                                                   as\n                                                                                                                   std::fmt::Arguments<\'_>))\n                               as std::string::String);\n                       (res as std::string::String)\n                   } as std::string::String);\n              } as ())\npub type Foo = [i32; (3 as usize)];\npub struct Bar {\n    pub x: [i32; (3 as usize)],\n}\npub struct TupleBar([i32; (4 as usize)]);\npub enum Baz { BazVariant([i32; (5 as usize)]), }\npub fn id<T>(x: T) -> T ({ (x as T) } as T)\npub fn use_id() ({\n                     let _ =\n                         ((id::<[i32; (3 as usize)]> as\n                              fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1\n                                                                               as\n                                                                               i32),\n                                                                           (2\n                                                                               as\n                                                                               i32),\n                                                                           (3\n                                                                               as\n                                                                               i32)]\n                                                                             as\n                                                                             [i32; 3]))\n                             as [i32; 3]);\n                 } as ())\nfn main() ({ } as ())\n\n------------------------------------------\n\n"
2019-09-28T04:47:40.8284417Z thread '[pretty] pretty/issue-4264.rs' panicked at 'fatal error', src/tools/compiletest/src/runtest.rs:2254:9
2019-09-28T04:47:40.8284562Z 
2019-09-28T04:47:40.8298406Z 
2019-09-28T04:47:40.8298548Z failures:
2019-09-28T04:47:40.8299018Z     [pretty] pretty/issue-4264.rs
2019-09-28T04:47:40.8299018Z     [pretty] pretty/issue-4264.rs
2019-09-28T04:47:40.8299059Z 
2019-09-28T04:47:40.8299367Z test result: FAILED. 54 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out
2019-09-28T04:47:40.8299418Z 
2019-09-28T04:47:40.8299726Z thread 'main' panicked at 'Some tests failed', src/tools/compiletest/src/main.rs:537:22
2019-09-28T04:47:40.8299768Z 
2019-09-28T04:47:40.8299796Z 
2019-09-28T04:47:40.8302059Z command did not execute successfully: "/checkout/obj/build/x86_64-unknown-linux-gnu/stage0-tools-bin/compiletest" "--compile-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib" "--run-lib-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib" "--rustc-path" "/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc" "--src-base" "/checkout/src/test/pretty" "--build-base" "/checkout/obj/build/x86_64-unknown-linux-gnu/test/pretty" "--stage-id" "stage2-x86_64-unknown-linux-gnu" "--mode" "pretty" "--target" "x86_64-unknown-linux-gnu" "--host" "x86_64-unknown-linux-gnu" "--llvm-filecheck" "/usr/lib/llvm-6.0/bin/FileCheck" "--host-rustcflags" "-Crpath -O -Cdebuginfo=0 -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--target-rustcflags" "-Crpath -O -Cdebuginfo=0 -Zunstable-options  -Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "--docck-python" "/usr/bin/python2.7" "--lldb-python" "/usr/bin/python2.7" "--gdb" "/usr/bin/gdb" "--quiet" "--llvm-version" "6.0.0\n" "--system-llvm" "--cc" "" "--cxx" "" "--cflags" "" "--llvm-components" "" "--llvm-cxxflags" "" "--adb-path" "adb" "--adb-test-dir" "/data/tmp/work" "--android-cross-path" "" "--color" "always"
2019-09-28T04:47:40.8302325Z 
2019-09-28T04:47:40.8302359Z 
2019-09-28T04:47:40.8302426Z failed to run: /checkout/obj/build/bootstrap/debug/bootstrap test
2019-09-28T04:47:40.8302483Z Build completed unsuccessfully in 1:19:32
2019-09-28T04:47:40.8302483Z Build completed unsuccessfully in 1:19:32
2019-09-28T04:47:40.8326809Z == clock drift check ==
2019-09-28T04:47:40.8341580Z   local time: Sat Sep 28 04:47:40 UTC 2019
2019-09-28T04:47:40.9842096Z   network time: Sat, 28 Sep 2019 04:47:40 GMT
2019-09-28T04:47:40.9845729Z == end clock drift check ==
2019-09-28T04:47:43.1403730Z ##[error]Bash exited with code '1'.
2019-09-28T04:47:43.1468824Z ##[section]Starting: Checkout
2019-09-28T04:47:43.1472843Z ==============================================================================
2019-09-28T04:47:43.1472900Z Task         : Get sources
2019-09-28T04:47:43.1472963Z Description  : Get sources from a repository. Supports Git, TfsVC, and SVN repositories.
