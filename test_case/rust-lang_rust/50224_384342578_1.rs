\n\nEnsure that the expressions given can be evaluated as the desired integer type.\nSee the FFI section of the Reference for more information about using a custom\ninteger type:\n\nhttps://doc.rust-lang.org/reference.html#ffi-attributes\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/const-eval/conditional_array_execution.rs","byte_start":669,"byte_end":672,"line_start":18,"line_end":18,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"    println!(\"{}\", FOO); //~ E0080","highlight_start":20,"highlight_end":23}],"label":"referenced constant has errors","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0080]: constant evaluation error\n  --> /checkout/src/test/ui/const-eval/conditional_array_execution.rs:18:20\n   |\nLL |     println!(\"{}\", FOO); //~ E0080\n   |                    ^^^ referenced constant has errors\n\n"}
[00:44:38] {"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to previous error\n\n"}
[00:44:38] {"message":"For more information about this error, try `rustc --explain E0080`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0080`.\n"}
[00:44:38] ------------------------------------------
[00:44:38] 
[00:44:38] thread '[ui] ui/const-eval/conditional_array_execution.rs' panicked at 'explicit panic', tools/compiletest/src/runtest.rs:2901:9
[00:44:38] note: Run with `RUST_BACKTRACE=1` for a backtrace.
[00:44:38] note: Run with `RUST_BACKTRACE=1` for a backtrace.
[00:44:38] 
[00:44:38] ---- [ui] ui/const-eval/issue-43197.rs stdout ----
[00:44:38]  diff of stderr:
[00:44:38] 
[00:44:38] 7    = note: #[warn(const_err)] on by default
[00:44:38] 9 warning: this constant cannot be used
[00:44:38] 9 warning: this constant cannot be used
[0ext":[{"text":"    const X: u32 = 0-1;","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"#[warn(const_err)] on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"warning: attempt to subtract with overflow\n  --> /checkout/src/test/ui/const-eval/issue-43197.rs:18:20\n   |\nLL |     const X: u32 = 0-1;\n   |                    ^^^\n   |\n   = note: #[warn(const_err)] on by default\n\n"}
[00:44:38] {"message":"this constant cannot be used","code":{"code":"const_err","explanation":null},"level":"warning","spans":[{"file_name":"/checkout/src/test/ui/const-eval/issue-43197.rs","byte_start":545,"byte_end":564,"line_start":18,"line_end":18,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    const X: u32 = 0-1;","highlight_start":5,"highlight_end":24}],"label":"attempt to subtract with overflow","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"warning: this constant cannot be used\n  --> /checkout/src/test/ui/const-eval/issue-43197.rs:18:5\n   |\nLL |     const X: u32 = 0-1;\n   |     ^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n\n"}
[00:44:38] {"message":"attempt to subtract with overflow","code":{"code":"const_err","explanation":null},"level":"warning","spans":[{"file_name":"/checkout/src/test/ui/const-eval/issue-43197.rs","byte_start":679,"byte_end":682,"line_start":21,"line_end":21,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"    const Y: u32 = foo(0-1);","highlight_start":24,"highlight_end":27}],"label":null,"suggested_replacement"est/ui/const-eval/issue-43197.rs","byte_start":798,"byte_end":799,"line_start":24,"line_end":24,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    println!(\"{} {}\", X, Y);","highlight_start":23,"highlight_end":24}],"label":"referenced constant has errors","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0080]: constant evaluation error\n  --> /checkout/src/test/ui/const-eval/issue-43197.rs:24:23\n   |\nLL |     println!(\"{} {}\", X, Y);\n   |                       ^ referenced constant has errors\n\n"}
[00:44:38] {"message":"constant evaluation error","code":{"code":"E0080","explanation":"\nThis error indicates that the compiler was unable to sensibly evaluate an\nconstant expression that had to be evaluated. Attempting to divide by 0\nor causing integer overflow are two ways to induce this error. For example:\n\n