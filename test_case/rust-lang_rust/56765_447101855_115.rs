\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/first-edition/ownership.html\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/binop/binop-consume-args.rs","byte_start":671,"byte_end":674,"line_start":17,"line_end":17,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    drop(lhs);  //~ ERROR use of moved value: `lhs`","highlight_start":10,"highlight_end":13}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/binop/binop-consume-args.rs","byte_start":651,"byte_end":654,"line_start":16,"line_end":16,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"    lhs + rhs;","highlight_start":5,"highlight_end":8}],"label":"value moved here","suggn!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n