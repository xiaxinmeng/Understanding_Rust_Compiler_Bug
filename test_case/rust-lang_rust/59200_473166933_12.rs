\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::core::macros::assert_eq macros>","byte_start":226,"byte_end":238,"line_start":9,"line_end":10,"column_start":20,"column_end":9,"is_primary":true,"text":[{"text":" right: `{:?}`\"# , & *","highlight_start":20,"highlight_end":23},{"text":"left_val , & * right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) =>","highlight_start":1,"highlight_end":9}],"label":"`T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::std::macros::panic macros>","byte_start":314,"byte_end":353,"line_start":9,"line_end":9,"column_start":3,"column_end":42,"is_primary":false,"text":[{"text":"& format_args ! ( $ fmt , $ ( $ arg ) + ) , & (","highlight_start":3,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":142,"byte_end":256,"line_start":6,"line_end":10,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# , & *","highlight_start":1,"highlight_end":23},{"text":"left_val , & * right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) =>","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/checkout/src/test/run-pass/raw-fat-ptr.rs","byte_start":549,"byte_end":572,"line_start":18,"line_end":18,"column_start":17,"column_end":40,"is_primary":false,"text":[{"text":"                assert_eq!(a[i], a[j]);","highlight_start":17,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":0,"byte_end":687,"line_start":1,"line_end":21,"column_start":1,"column_end":77,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# , & *","highlight_start":1,"highlight_end":23},{"text":"left_val , & * right_val ) } } } } ) ; ( $ left : expr , $ right : expr , ) =>","highlight_start":1,"highlight_end":79},{"text":"( { assert_eq ! ( $ left , $ right ) } ) ; (","highlight_start":1,"highlight_end":45},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"# ,","highlight_start":1,"highlight_end":23},{"text":"& * left_val , & * right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":1,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"<::std::macros::panic macros>","byte_start":0,"byte_end":427,"line_start":1,"line_end":10,"column_start":1,"column_end":68,"is_primary":false,"text":[{"text":"(  ) => ( { panic ! ( \"explicit panic\" ) } ) ; ( $ msg : expr ) => (","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"$ crate :: rt :: begin_panic (","highlight_start":1,"highlight_end":31},{"text":"$ msg , & ( file ! (  ) , line ! (  ) , __rust_unstable_column ! (  ) ) ) } )","highlight_start":1,"highlight_end":78},{"text":"; ( $ msg : expr , ) => ( { panic ! ( $ msg ) } ) ; (","highlight_start":1,"highlight_end":54},{"text":"$ fmt : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"$ crate :: rt :: begin_panic_fmt (","highlight_start":1,"highlight_end":35},{"text":"& format_args ! ( $ fmt , $ ( $ arg ) + ) , & (","highlight_start":1,"highlight_end":48},{"text":"file ! (  ) , line ! (  ) , __rust_unstable_column ! (  ) ) ) } ) ;","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `T`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider adding a `where T: std::fmt::Debug` bound","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&T`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0277]: `T` doesn't implement `std::fmt::Debug`\n  --> /checkout/src/test/run-pass/raw-fat-ptr.rs:18:17\n   |\nLL |                 assert_eq!(a[i], a[j]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n   |\n   = help: the trait `std::fmt::Debug` is not implemented for `T`\n   = help: consider adding a `where T: std::fmt::Debug` bound\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&T`\n   = note: required by `std::fmt::Debug::fmt`\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n\n"}
[01:18:31] {"message":"`T` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n