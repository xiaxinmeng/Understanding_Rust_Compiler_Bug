text
[INFO  rustc_parse] cached tokens found, but they're not "probably equal", going with stringified version
[INFO  rustc_parse] cached tokens: TokenStream([(Token(Token { kind: Ident("fn", false), span: examples/main.rs:4:1: 4:3 (#0) }), NonJoint), (Token(Token { kind: Ident("main", false), span: examples/main.rs:4:4: 4:8 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:4:9: 4:10 (#0), close: examples/main.rs:4:10: 4:11 (#0) }, Paren, TokenStream([])), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:5:1: 5:2 (#0), close: examples/main.rs:8:1: 8:2 (#0) }, Brace, TokenStream([(Token(Token { kind: Ident("match", false), span: examples/main.rs:6:5: 6:10 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:6:11: 6:12 (#0), close: examples/main.rs:6:12: 6:13 (#0) }, Paren, TokenStream([])), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:6:14: 6:15 (#0), close: examples/main.rs:6:27: 6:28 (#0) }, Brace, TokenStream([(Token(Token { kind: BinOp(Or), span: examples/main.rs:6:16: 6:17 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:6:18: 6:19 (#0), close: examples/main.rs:6:19: 6:20 (#0) }, Paren, TokenStream([])), NonJoint), (Token(Token { kind: FatArrow, span: examples/main.rs:6:21: 6:23 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:6:24: 6:25 (#0), close: examples/main.rs:6:25: 6:26 (#0) }, Paren, TokenStream([])), NonJoint)])), NonJoint), (Token(Token { kind: Ident("let", false), span: examples/main.rs:7:5: 7:8 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:7:9: 7:10 (#0), close: examples/main.rs:7:10: 7:11 (#0) }, Paren, TokenStream([])), NonJoint), (Token(Token { kind: Eq, span: examples/main.rs:7:12: 7:13 (#0) }), NonJoint), (Token(Token { kind: Literal(Lit { kind: Integer, symbol: "42", suffix: None }), span: examples/main.rs:7:14: 7:16 (#0) }), Joint), (Token(Token { kind: Semi, span: examples/main.rs:7:16: 7:17 (#0) }), NonJoint)])), NonJoint)])
[INFO  rustc_parse] reparsed tokens: TokenStream([(Token(Token { kind: Ident("fn", false), span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint), (Token(Token { kind: Ident("main", false), span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:1:1: 1:1 (#0), close: examples/main.rs:1:1: 1:1 (#0) }, Paren, TokenStream([])), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:1:1: 1:1 (#0), close: examples/main.rs:1:1: 1:1 (#0) }, Brace, TokenStream([(Token(Token { kind: Ident("match", false), span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:1:1: 1:1 (#0), close: examples/main.rs:1:1: 1:1 (#0) }, Paren, TokenStream([])), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:1:1: 1:1 (#0), close: examples/main.rs:1:1: 1:1 (#0) }, Brace, TokenStream([(Delimited(DelimSpan { open: examples/main.rs:1:1: 1:1 (#0), close: examples/main.rs:1:1: 1:1 (#0) }, Paren, TokenStream([])), NonJoint), (Token(Token { kind: FatArrow, span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:1:1: 1:1 (#0), close: examples/main.rs:1:1: 1:1 (#0) }, Paren, TokenStream([])), NonJoint), (Token(Token { kind: Comma, span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint)])), NonJoint), (Token(Token { kind: Ident("let", false), span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint), (Delimited(DelimSpan { open: examples/main.rs:1:1: 1:1 (#0), close: examples/main.rs:1:1: 1:1 (#0) }, Paren, TokenStream([])), NonJoint), (Token(Token { kind: Eq, span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint), (Token(Token { kind: Literal(Lit { kind: Integer, symbol: "42", suffix: None }), span: examples/main.rs:1:1: 1:1 (#0) }), Joint), (Token(Token { kind: Semi, span: examples/main.rs:1:1: 1:1 (#0) }), NonJoint)])), NonJoint)])
