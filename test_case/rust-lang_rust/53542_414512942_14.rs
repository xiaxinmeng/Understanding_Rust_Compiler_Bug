\n\nSee [RFC 1522] for more details.\n\n[RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n"},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/issues/issue-47715.rs","byte_start":569,"byte_end":577,"line_start":19,"line_end":19,"column_start":37,"column_end":45,"is_primary":true,"text":[{"text":"struct Container<T: Iterable<Item = impl Foo>> {","highlight_start":37,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0562]: `impl Trait` not allowed outside of function and inherent method return types or bindings\n  --> /checkout/src/test/ui/issues/issue-47715.rs:19:37\n   |\nLL | struct Container<T: Iterable<Item = impl F of function and inherent method return types or bindings\n  --> /checkout/src/test/ui/issues/issue-47715.rs:34:30\n   |\nLL | type Type<T: Iterable<Item = impl Foo>> = T;\n   |                              ^^^^^^^^\n\n"}
[00:46:34] {"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 4 previous errors\n\n"}
[00:46:34] {"message":"For more information about this error, try `rustc --explain E0562`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0562`.\n"}
[00:46:34] ------------------------------------------
[00:46:34] 
[00:46:34] thread '[ui] ui/issues/issue-47715.rs' panicked at 'explicit panic', tools/compiletest/src/runtest.rs:3189:9
[00:46:34] 
[00:46:34] 
[00:46:34] ---- [ui] ui/nested_impl_trait.rs stdout ----
[00:46:34] diff of stderr:
[00:46:34] 
[00:46:34] 34    |                                  |         nested `impl Trait` here
[00:46:34] 35    |                                  outer `impl Trait`
[00:46:34] 36 
[00:46:34] - error[E0562]: `impl Trait` not allowed outside of function and inherent method return types
[00:46:34] + error[E0562]: `impl Trait` not allowed outside of function and inherent method return types or bindings
[00:46:34] 39    |
[00:46:34] 39    |
[00:46:34] 40 LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}
[00:46:34] 41    |                                ^^^^^^^^^^^^^^^^^^^^^
[00:46:34] 42 
[00:46:34] 42 
[00:46:34] - error[E0562]: `impl Trait` not allowed outside of funct:"error","spans":[{"file_name":"/checkout/src/test/ui/nested_impl_trait.rs","byte_start":585,"byte_end":606,"line_start":14,"line_end":14,"column_start":46,"column_end":67,"is_primary":false,"text":[{"text":"fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }","highlight_start":46,"highlight_end":67}],"label":"outer `impl Trait`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/checkout/src/test/ui/nested_impl_trait.rs","byte_start":595,"byte_end":605,"line_start":14,"line_end":14,"column_start":56,"column_end":66,"is_primary":true,"text":[{"text":"fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }","highlight_start":56,"highlight_end":66}],"label":"nested `impl Trait` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"error[E0666]: nested `impl Trait` is not allowed\n  --> /checkout/src/test/ui/nested_impl_trait.rs:14:56\n   |\nLL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n   |                                              ----------^^^^^^^^^^-\n   |                                              |         |\n   |                                              |         nested `impl Trait` here\n   |                                              outer `impl Trait`\n\n"}
[00:46:34] {"message":"nested `impl Trait` is not allowed","code":{"code":"E0666","explanation":null},"level":"error","spans":[{"file_name":"/checkout/src/test/ui/nested_impl_trait.rs","byte_start":691,"byte_end":712,"line_start":17,"line_end":17,"column_start":32,"column_end":53,"is_pull,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope, perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"/checkout/src/test/ui/traits/trait-item-privacy.rs","byte_start":506,"byte_end":506,"line_start":13,"line_end":13,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"struct S;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use method::B;\n\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"error[E0599]: no method named `b` found for type `S` in the current scope\n  --> /checkout/src/test/ui/traits/trait-item-privacy.rs:78:7\n   |\nLL | struct S;\n   | --------- method `b` not found for this\n...\nLL |     S.b(); //~ ERROR no method named `b` found for type `S` in the current scope\n   |       ^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope, perhaps add a `use` for it:\n   |\nLL | use method::B;\n   |\n\n"}
[00:46:34] {"message":"method `a` is private","code":{"code":"E0624","explanation":"\nA private item was used outside of its scope.\n\nErroneous code example:\n\n