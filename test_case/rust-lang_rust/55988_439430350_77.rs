\nfn foo() -> Box<Fn(u32) -> u32> {\n    let x = 0u32;cement":"move |t: bool|","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n  --> /checkout/src/test/ui/regions/region-borrow-params-issue-29793-small.rs:157:21\n   |\nLL |             let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n   |                     ^^^^^^^^^        - `x` is borrowed here\n   |                     |\n   |                     may outlive borrowed value `x`\nhelp: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n   |\nLL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n   |                     ^^^^^^^^^^^^^^\n\n"}
[00:51:24] {"message":"closure may outlive the current function, but it borrows `y`, which is owned by the current function","code":{"code":"E0373","explanation":"\nThis error occurs when an attempt is made to use data captured by a closure,\nwhen that data may no longer exist. It's most commonly seen when attempting to\nreturn a closure:\n\n