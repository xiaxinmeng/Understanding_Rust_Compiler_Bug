\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(Withoutiated-types/associated-types-path-2.rs","byte_start":1035,"byte_end":1037,"line_start":45,"line_end":45,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    f1(2u32, 4i32);","highlight_start":5,"highlight_end":7}],"label":"the trait `Foo` is not implemented for `u32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by `f1`","code":null,"level":"note","spans":[{"file_name":"/checkout/src/test/ui/associated-types/associated-types-path-2.rs","byte_start":632,"byte_end":664,"line_start":23,"line_end":23,"column_start":1,"column_end":33,"is_primary":true,"text":[{"text":"pub fn f1<T: Foo>(a: T, x: T::A) {}","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"error[E0277]: the trait bound `u32: Foo` is not satisfied\n  --> /checkout/src/test/ui/associated-types/associated-types-path-2.rs:45:5\n   |\nLL |     f1(2u32, 4i32);\n   |     ^^ the trait `Foo` is not implemented for `u32`\n   |\nnote: required by `f1`\n  --> /checkout/src/test/ui/associated-types/associated-types-path-2.rs:23:1\n   |\nLL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"}
[00:47:45] {"message":"mismatched types","code":{"code":"E0308","explanation":"\nThis error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n