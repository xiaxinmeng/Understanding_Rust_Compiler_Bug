\n\nHere, `demo` tries to borrow the string data held within its\nargument `s` and then return that borrow. However, `S` is\ndeclared as implementing `Drop`.\n\nStructs implementing the `Drop` trait have an implicit destructor that\ngets called when they go out of scope. This destructor gets exclusive\naccess to the fields of the struct when it runs.\n\nThis means that when `s` reaches the end of `demo`, its destructor\ngets exclusive access to its `&mut`-borrowed string data.  allowing\nanother borrow of that string data (`p`), to exist across the drop of\n`s` would be a violation of the principle that `&mut`-borrows have\nexclusive, unaliased access to their referenced data.\n\nThis error can be fixed by changing `demo` so that the destructor does\nnot run while the string-data is borrowed; for example by taking `S`\nby reference:\n\n