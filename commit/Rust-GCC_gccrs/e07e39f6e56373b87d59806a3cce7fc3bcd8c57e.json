{"sha": "e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3ZTM5ZjZlNTYzNzNiODdkNTk4MDZhM2NjZTdmYzNiY2Q4YzU3ZQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-12-11T17:43:22Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-12-11T17:43:22Z"}, "message": "re PR fortran/50690 (ICE with front end optimization and OMP workshare)\n\n2011-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/50690\n\t* frontend-passes.c (in_omp_workshare):  New variable.\n\t(cfe_expr_0):  Don't eliminiate common function if it would put\n\tthe variable immediately into a WORKSHARE construct.\n\t(optimize_namespace):  Set in_omp_workshare.\n\t(gfc_code_walker):  Keep track of OMP PARALLEL and OMP WORKSHARE\n\tconstructs.\n\n2011-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/50690\n\t* gfortran.dg/gomp/workshare2.f90:  New test.\n\t* gfortran.dg/gomp/workshare3.f90:  New test.\n\nFrom-SVN: r182208", "tree": {"sha": "351adb196039634636b2c08ffb2fd4ff7f846895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/351adb196039634636b2c08ffb2fd4ff7f846895"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/comments", "author": null, "committer": null, "parents": [{"sha": "be0c93c5125a61fe670541d8677617a2168e796d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0c93c5125a61fe670541d8677617a2168e796d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0c93c5125a61fe670541d8677617a2168e796d"}], "stats": {"total": 146, "additions": 144, "deletions": 2}, "files": [{"sha": "49aacc8cfad393c0dfda120f42cb94f2154f68f0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "patch": "@@ -1,3 +1,13 @@\n+2011-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/50690\n+\t* frontend-passes.c (in_omp_workshare):  New variable.\n+\t(cfe_expr_0):  Don't eliminiate common function if it would put\n+\tthe variable immediately into a WORKSHARE construct.\n+\t(optimize_namespace):  Set in_omp_workshare.\n+\t(gfc_code_walker):  Keep track of OMP PARALLEL and OMP WORKSHARE\n+\tconstructs.\n+\n 2011-12-10  Tobias Burnus  <burnus@net-b.de>\n \n \t* trans-decl.c (add_argument_checking): Fix syntax."}, {"sha": "ab33a2f17a9bf99aa1d5cd23fcc8341099806fea", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "patch": "@@ -66,6 +66,10 @@ static gfc_namespace *current_ns;\n \n static int forall_level;\n \n+/* Keep track of whether we are within an OMP workshare.  */\n+\n+static bool in_omp_workshare;\n+\n /* Entry point - run all passes for a namespace.  So far, only an\n    optimization pass is run.  */\n \n@@ -367,6 +371,14 @@ cfe_expr_0 (gfc_expr **e, int *walk_subtrees,\n   int i,j;\n   gfc_expr *newvar;\n \n+  /* Don't do this optimization within OMP workshare. */\n+\n+  if (in_omp_workshare)\n+    {\n+      *walk_subtrees = 0;\n+      return 0;\n+    }\n+\n   expr_count = 0;\n \n   gfc_expr_walker (e, cfe_register_funcs, NULL);\n@@ -505,6 +517,7 @@ optimize_namespace (gfc_namespace *ns)\n \n   current_ns = ns;\n   forall_level = 0;\n+  in_omp_workshare = false;\n \n   gfc_code_walker (&ns->code, convert_do_while, dummy_expr_callback, NULL);\n   gfc_code_walker (&ns->code, cfe_code, cfe_expr_0, NULL);\n@@ -1150,11 +1163,13 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t  gfc_actual_arglist *a;\n \t  gfc_code *co;\n \t  gfc_association_list *alist;\n+\t  bool saved_in_omp_workshare;\n \n \t  /* There might be statement insertions before the current code,\n \t     which must not affect the expression walker.  */\n \n \t  co = *c;\n+\t  saved_in_omp_workshare = in_omp_workshare;\n \n \t  switch (co->op)\n \t    {\n@@ -1330,16 +1345,34 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t      WALK_SUBEXPR (co->ext.dt->extra_comma);\n \t      break;\n \n-\t    case EXEC_OMP_DO:\n \t    case EXEC_OMP_PARALLEL:\n \t    case EXEC_OMP_PARALLEL_DO:\n \t    case EXEC_OMP_PARALLEL_SECTIONS:\n+\n+\t      in_omp_workshare = false;\n+\n+\t      /* This goto serves as a shortcut to avoid code\n+\t\t duplication or a larger if or switch statement.  */\n+\t      goto check_omp_clauses;\n+\t      \n+\t    case EXEC_OMP_WORKSHARE:\n \t    case EXEC_OMP_PARALLEL_WORKSHARE:\n+\n+\t      in_omp_workshare = true;\n+\n+\t      /* Fall through  */\n+\t      \n+\t    case EXEC_OMP_DO:\n \t    case EXEC_OMP_SECTIONS:\n \t    case EXEC_OMP_SINGLE:\n-\t    case EXEC_OMP_WORKSHARE:\n \t    case EXEC_OMP_END_SINGLE:\n \t    case EXEC_OMP_TASK:\n+\n+\t      /* Come to this label only from the\n+\t\t EXEC_OMP_PARALLEL_* cases above.  */\n+\n+\t    check_omp_clauses:\n+\n \t      if (co->ext.omp_clauses)\n \t\t{\n \t\t  WALK_SUBEXPR (co->ext.omp_clauses->if_expr);\n@@ -1366,6 +1399,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t  if (co->op == EXEC_FORALL)\n \t    forall_level --;\n \n+\t  in_omp_workshare = saved_in_omp_workshare;\n \t}\n     }\n   return 0;"}, {"sha": "0921c1441256bc3b04963b702dc7f389176bacb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "patch": "@@ -1,3 +1,9 @@\n+2011-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/50690\n+\t* gfortran.dg/gomp/workshare2.f90:  New test.\n+\t* gfortran.dg/gomp/workshare3.f90:  New test.\n+\n 2011-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/elab3.ads: New test."}, {"sha": "26023c8da150f6e7b54fcce5f2414898136c6829", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare2.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare2.f90?ref=e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -ffrontend-optimize -fdump-tree-original\" }\n+! PR 50690 - this used to ICE because workshare could not handle\n+! BLOCKs.\n+! To test for correct execution, run this program (but don't forget\n+! to unset the stack limit).\n+program foo\n+  implicit none\n+  integer, parameter :: n = 10000000\n+  real, parameter :: eps = 3e-7\n+  integer :: i,j\n+  real :: A(n), B(5), C(n)\n+  real :: tmp\n+  B(1) = 3.344\n+  tmp = B(1)\n+  do i=1,10\n+     call random_number(a)\n+     c = a\n+     !$omp parallel default(shared)\n+     !$omp workshare\n+     A(:) = A(:)*cos(B(1))+A(:)*cos(B(1))\n+     !$omp end workshare nowait\n+     !$omp end parallel ! sync is implied here\n+  end do\n+\n+  c = c*tmp + c*tmp\n+\n+  do j=1,n\n+     if (abs(a(j)-c(j)) > eps) then\n+        print *,1,j,a(j), c(j)\n+        call abort\n+     end if\n+  end do\n+\n+  do i=1,10\n+     call random_number(a)\n+     c = a\n+     !$omp parallel workshare default(shared)\n+     A(:) = A(:)*cos(B(1))+A(:)*cos(B(1))\n+     !$omp end parallel workshare\n+  end do\n+\n+  c = c*tmp + c*tmp\n+  do j=1,n\n+     if (abs(a(j)-c(j)) > eps) then\n+        print *,2,j,a(j), c(j)\n+        call abort\n+     end if\n+  end do\n+\n+end program foo\n+! { dg-final { scan-tree-dump-times \"__var\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "579eb7173292954e3d4c07d26bb3ee7c4546e2d4", "filename": "gcc/testsuite/gfortran.dg/gomp/workshare3.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07e39f6e56373b87d59806a3cce7fc3bcd8c57e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fworkshare3.f90?ref=e07e39f6e56373b87d59806a3cce7fc3bcd8c57e", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original -fopenmp\" }\n+! Test that common function elimination is done within the OMP parallel\n+! blocks even if there is a workshare around it.\n+program foo\n+  implicit none\n+  integer, parameter :: n = 10000000\n+  real, parameter :: eps = 3e-7\n+  integer :: i,j\n+  real :: A(n), B(5), C(n)\n+  real :: tmp\n+  B(1) = 3.344\n+  tmp = B(1)\n+  do i=1,10\n+     call random_number(a)\n+     c = a\n+     !$omp parallel workshare\n+     !$omp parallel default(shared)\n+     !$omp do\n+     do j=1,n\n+       A(j) = A(j)*cos(B(1))+A(j)*cos(B(1))\n+     end do\n+     !$omp end do\n+     !$omp end parallel\n+     !$omp end parallel workshare\n+  end do\n+\n+  c = c*cos(b(1))+ c*cos(b(1))\n+\n+  do j=1,n\n+     if (abs(a(j)-c(j)) > eps) then\n+        print *,1,j,a(j), c(j)\n+        call abort\n+     end if\n+  end do\n+\n+end program foo\n+! { dg-final { scan-tree-dump-times \"__builtin_cosf\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}