{"sha": "fa9863e7d34ecd011ae75083be2ae124e5831b64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5ODYzZTdkMzRlY2QwMTFhZTc1MDgzYmUyYWUxMjRlNTgzMWI2NA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2019-06-13T03:18:54Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2019-06-13T03:18:54Z"}, "message": "re PR target/88834 ([SVE] Poor addressing mode choices for LD2 and ST2)\n\n\ngcc/ChangeLog:\n\n2019-06-13  Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\n\tPR target/88834\n\t* tree-ssa-loop-ivopts.c (get_mem_type_for_internal_fn): Handle\n\tIFN_MASK_LOAD_LANES and IFN_MASK_STORE_LANES.\n\t(get_alias_ptr_type_for_ptr_address): Likewise.\n\t(add_iv_candidate_for_use): Add scaled index candidate if useful.\n\t* tree-ssa-address.c (preferred_mem_scale_factor): New.\n\t* config/aarch64/aarch64.c (aarch64_classify_address): Relax\n\tallow_reg_index_p.\n\ngcc/testsuite/ChangeLog:\n\n2019-06-13  Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\n\tPR target/88834\n\t* gcc.target/aarch64/pr88834.c: New test.\n\t* gcc.target/aarch64/sve/struct_vect_1.c: Adjust.\n\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_15.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_16.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_17.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_7.c: Likewise.\n\nFrom-SVN: r272232", "tree": {"sha": "77781de634a5011cf2a1275a44f8d8f3521f0e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77781de634a5011cf2a1275a44f8d8f3521f0e79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa9863e7d34ecd011ae75083be2ae124e5831b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9863e7d34ecd011ae75083be2ae124e5831b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9863e7d34ecd011ae75083be2ae124e5831b64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9863e7d34ecd011ae75083be2ae124e5831b64/comments", "author": null, "committer": null, "parents": [{"sha": "dd550c996578ea7e94f3a59e57f24636186fbb95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd550c996578ea7e94f3a59e57f24636186fbb95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd550c996578ea7e94f3a59e57f24636186fbb95"}], "stats": {"total": 143, "additions": 118, "deletions": 25}, "files": [{"sha": "58fb6fcd38b056c0c11f1ba28677f52566ad0ba1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -1,3 +1,14 @@\n+2019-06-13  Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\tPR target/88834\n+\t* tree-ssa-loop-ivopts.c (get_mem_type_for_internal_fn): Handle\n+\tIFN_MASK_LOAD_LANES and IFN_MASK_STORE_LANES.\n+\t(get_alias_ptr_type_for_ptr_address): Likewise.\n+\t(add_iv_candidate_for_use): Add scaled index candidate if useful.\n+\t* tree-ssa-address.c (preferred_mem_scale_factor): New.\n+\t* config/aarch64/aarch64.c (aarch64_classify_address): Relax\n+\tallow_reg_index_p.\n+\n 2019-06-13  Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n \n \t* config/aarch64/iterators.md (ADDSUB): Fix typo in comment."}, {"sha": "f8285ac5fac61a4d94008847c1b3e0d2ac79c33b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -6629,7 +6629,7 @@ aarch64_classify_address (struct aarch64_address_info *info,\n   bool allow_reg_index_p = (!load_store_pair_p\n \t\t\t    && (known_lt (GET_MODE_SIZE (mode), 16)\n \t\t\t\t|| vec_flags == VEC_ADVSIMD\n-\t\t\t\t|| vec_flags == VEC_SVE_DATA));\n+\t\t\t\t|| vec_flags & VEC_SVE_DATA));\n \n   /* For SVE, only accept [Rn], [Rn, Rm, LSL #shift] and\n      [Rn, #offset, MUL VL].  */"}, {"sha": "2f222a9d3e6baaa00847df57441d65847c30953b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -1,3 +1,14 @@\n+2019-06-13  Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\tPR target/88834\n+\t* gcc.target/aarch64/pr88834.c: New test.\n+\t* gcc.target/aarch64/sve/struct_vect_1.c: Adjust.\n+\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_15.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_16.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_17.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_7.c: Likewise.\n+\n 2019-06-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87410"}, {"sha": "ea00967ef70f1e27d308f09669b75cbf24fa40cd", "filename": "gcc/testsuite/gcc.target/aarch64/pr88834.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr88834.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr88834.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr88834.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-S -O3 -march=armv8.2-a+sve\" } */\n+\n+void\n+f (int *restrict x, int *restrict y, int *restrict z, int n)\n+{\n+  for (int i = 0; i < n; i += 2)\n+    {\n+      x[i] = y[i] + z[i];\n+      x[i + 1] = y[i + 1] - z[i + 1];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+, x[0-9]+, lsl 2\\]\\n} 1 } } */"}, {"sha": "918a581382801606a3565c8bda924a8ea6f9e538", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -83,9 +83,9 @@ NAME(g4) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n     }\n }\n \n-/* { dg-final { scan-assembler {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} } } */\n /* { dg-final { scan-assembler {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n-/* { dg-final { scan-assembler {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n-/* { dg-final { scan-assembler {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} } } */\n /* { dg-final { scan-assembler {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n-/* { dg-final { scan-assembler {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} } } */"}, {"sha": "a16a79e51c0d7a39a602e1c4f846af50558edd80", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_14.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -43,12 +43,12 @@\n #undef NAME\n #undef TYPE\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "bc00267c8e7a1f0b530b2d562af107c1610db582", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_15.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -3,12 +3,12 @@\n \n #include \"struct_vect_14.c\"\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "9e2a549f5e8fcb8785b3f29a7759993270a8c804", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -3,12 +3,12 @@\n \n #include \"struct_vect_14.c\"\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "e791e2e12a60b934b719c062c1106c8124346033", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_17.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -3,12 +3,12 @@\n \n #include \"struct_vect_14.c\"\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "3d3070e7725f22e3ffa591dd4c4f728f8e0ce2bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_7.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -78,9 +78,9 @@ g4 (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c,\n     }\n }\n \n-/* { dg-final { scan-assembler {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} } } */\n /* { dg-final { scan-assembler {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n-/* { dg-final { scan-assembler {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} } } */\n-/* { dg-final { scan-assembler {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} } } */\n /* { dg-final { scan-assembler {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n-/* { dg-final { scan-assembler {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} } } */"}, {"sha": "cdd432a6e1a5e3e5cd26e18bb1da532c7147af4a", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -1127,6 +1127,35 @@ maybe_fold_tmr (tree ref)\n   return new_ref;\n }\n \n+/* Return the preferred index scale factor for accessing memory of mode\n+   MEM_MODE in the address space of pointer BASE.  Assume that we're\n+   optimizing for speed if SPEED is true and for size otherwise.  */\n+unsigned int\n+preferred_mem_scale_factor (tree base, machine_mode mem_mode,\n+\t\t\t    bool speed)\n+{\n+  struct mem_address parts = {};\n+  addr_space_t as = TYPE_ADDR_SPACE (TREE_TYPE (base));\n+  unsigned int fact = GET_MODE_UNIT_SIZE (mem_mode);\n+\n+  /* Addressing mode \"base + index\".  */\n+  parts.index = integer_one_node;\n+  parts.base = integer_one_node;\n+  rtx addr = addr_for_mem_ref (&parts, as, false);\n+  unsigned cost = address_cost (addr, mem_mode, as, speed);\n+\n+  /* Addressing mode \"base + index << scale\".  */\n+  parts.step = wide_int_to_tree (sizetype, fact);\n+  addr = addr_for_mem_ref (&parts, as, false);\n+  unsigned new_cost = address_cost (addr, mem_mode, as, speed);\n+\n+  /* Compare the cost of an address with an unscaled index with\n+     a scaled index and return factor if useful. */\n+  if (new_cost < cost)\n+    return GET_MODE_UNIT_SIZE (mem_mode);\n+  return 1;\n+}\n+\n /* Dump PARTS to FILE.  */\n \n extern void dump_mem_address (FILE *, struct mem_address *);"}, {"sha": "9812f36fbcbc3a4a0ff207bc96553a86abbf97cd", "filename": "gcc/tree-ssa-address.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftree-ssa-address.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftree-ssa-address.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.h?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -39,4 +39,7 @@ tree create_mem_ref (gimple_stmt_iterator *, tree,\n extern void copy_ref_info (tree, tree);\n tree maybe_fold_tmr (tree);\n \n+extern unsigned int preferred_mem_scale_factor (tree base,\n+\t\t\t\t\t\tmachine_mode mem_mode,\n+\t\t\t\t\t\tbool speed);\n #endif /* GCC_TREE_SSA_ADDRESS_H */"}, {"sha": "047d4a005dbba9029cf9ee82ec9e6defd8e3917c", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9863e7d34ecd011ae75083be2ae124e5831b64/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=fa9863e7d34ecd011ae75083be2ae124e5831b64", "patch": "@@ -2381,11 +2381,13 @@ get_mem_type_for_internal_fn (gcall *call, tree *op_p)\n   switch (gimple_call_internal_fn (call))\n     {\n     case IFN_MASK_LOAD:\n+    case IFN_MASK_LOAD_LANES:\n       if (op_p == gimple_call_arg_ptr (call, 0))\n \treturn TREE_TYPE (gimple_call_lhs (call));\n       return NULL_TREE;\n \n     case IFN_MASK_STORE:\n+    case IFN_MASK_STORE_LANES:\n       if (op_p == gimple_call_arg_ptr (call, 0))\n \treturn TREE_TYPE (gimple_call_arg (call, 3));\n       return NULL_TREE;\n@@ -3430,6 +3432,26 @@ add_iv_candidate_for_use (struct ivopts_data *data, struct iv_use *use)\n     basetype = sizetype;\n   record_common_cand (data, build_int_cst (basetype, 0), iv->step, use);\n \n+  /* Compare the cost of an address with an unscaled index with the cost of\n+    an address with a scaled index and add candidate if useful.  */\n+  poly_int64 step;\n+  if (use != NULL\n+      && poly_int_tree_p (iv->step, &step)\n+      && address_p (use->type))\n+    {\n+      poly_int64 new_step;\n+      unsigned int fact = preferred_mem_scale_factor\n+\t(use->iv->base,\n+\t TYPE_MODE (use->mem_type),\n+\t optimize_loop_for_speed_p (data->current_loop));\n+\n+      if (fact != 1\n+\t  && multiple_p (step, fact, &new_step))\n+\tadd_candidate (data, size_int (0),\n+\t\t       wide_int_to_tree (sizetype, new_step),\n+\t\t       true, NULL);\n+    }\n+\n   /* Record common candidate with constant offset stripped in base.\n      Like the use itself, we also add candidate directly for it.  */\n   base = strip_offset (iv->base, &offset);\n@@ -7042,6 +7064,8 @@ get_alias_ptr_type_for_ptr_address (iv_use *use)\n     {\n     case IFN_MASK_LOAD:\n     case IFN_MASK_STORE:\n+    case IFN_MASK_LOAD_LANES:\n+    case IFN_MASK_STORE_LANES:\n       /* The second argument contains the correct alias type.  */\n       gcc_assert (use->op_p = gimple_call_arg_ptr (call, 0));\n       return TREE_TYPE (gimple_call_arg (call, 1));"}]}