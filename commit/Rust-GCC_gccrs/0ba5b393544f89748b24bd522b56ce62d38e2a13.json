{"sha": "0ba5b393544f89748b24bd522b56ce62d38e2a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhNWIzOTM1NDRmODk3NDhiMjRiZDUyMmI1NmNlNjJkMzhlMmExMw==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2005-06-16T08:31:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:31:41Z"}, "message": "a-stzunb.adb, [...] (Realloc_For_Chunk): New implementation which is slightly more efficient.\n\n2005-06-14  Pascal Obry  <obry@adacore.com>\n\n\t* a-stzunb.adb, a-stwiun.adb, a-strunb.adb (Realloc_For_Chunk): New\n\timplementation which is slightly more efficient.\n\nFrom-SVN: r101023", "tree": {"sha": "98b90457f8da442292245fa317ed89f4c9975189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b90457f8da442292245fa317ed89f4c9975189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ba5b393544f89748b24bd522b56ce62d38e2a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba5b393544f89748b24bd522b56ce62d38e2a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba5b393544f89748b24bd522b56ce62d38e2a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba5b393544f89748b24bd522b56ce62d38e2a13/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00109226ca019e0e67fc12872afe1a2a7a68115b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00109226ca019e0e67fc12872afe1a2a7a68115b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00109226ca019e0e67fc12872afe1a2a7a68115b"}], "stats": {"total": 114, "additions": 83, "deletions": 31}, "files": [{"sha": "026cb3bd71262c1e819c69139ebef24c0a196ae0", "filename": "gcc/ada/a-strunb.adb", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba5b393544f89748b24bd522b56ce62d38e2a13/gcc%2Fada%2Fa-strunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba5b393544f89748b24bd522b56ce62d38e2a13/gcc%2Fada%2Fa-strunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb.adb?ref=0ba5b393544f89748b24bd522b56ce62d38e2a13", "patch": "@@ -1,8 +1,8 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                          GNAT RUNTIME COMPONENTS                         --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                A D A . S T R I N G S . U N B O U N D E D                 --\n+--                 A D A . S T R I N G S . U N B O U N D E D                --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n@@ -623,7 +623,6 @@ package body Ada.Strings.Unbounded is\n         (Source.Reference (1 .. Source.Last), Pattern, From, Going, Mapping);\n    end Index;\n \n-\n    function Index\n      (Source  : Unbounded_String;\n       Set     : Maps.Character_Set;\n@@ -755,17 +754,36 @@ package body Ada.Strings.Unbounded is\n      (Source     : in out Unbounded_String;\n       Chunk_Size : Natural)\n    is\n-      Growth_Factor : constant := 50;\n-      S_Length      : constant Natural := Source.Reference'Length;\n+      Growth_Factor : constant := 32;\n+      --  The growth factor controls how much extra space is allocated when\n+      --  we have to increase the size of an allocated unbounded string. By\n+      --  allocating extra space, we avoid the need to reallocate on every\n+      --  append, particularly important when a string is built up by repeated\n+      --  append operations of small pieces. This is expressed as a factor so\n+      --  32 means add 1/32 of the length of the string as growth space.\n+\n+      Min_Mul_Alloc : constant := Standard'Maximum_Alignment;\n+      --  Allocation will be done by a multiple of Min_Mul_Alloc This causes\n+      --  no memory loss as most (all?) malloc implementations are obliged to\n+      --  align the returned memory on the maximum alignment as malloc does not\n+      --  know the target alignment.\n+\n+      S_Length : constant Natural := Source.Reference'Length;\n \n    begin\n       if Chunk_Size > S_Length - Source.Last then\n          declare\n-            Alloc_Chunk_Size : constant Positive :=\n-                                 Chunk_Size + (S_Length / Growth_Factor);\n-            Tmp : String_Access;\n+            New_Size : constant Positive :=\n+                         S_Length + Chunk_Size + (S_Length / Growth_Factor);\n+\n+            New_Rounded_Up_Size : constant Positive :=\n+                                    ((New_Size - 1) / Min_Mul_Alloc + 1) *\n+                                       Min_Mul_Alloc;\n+\n+            Tmp : constant String_Access :=\n+                    new String (1 .. New_Rounded_Up_Size);\n+\n          begin\n-            Tmp := new String (1 .. S_Length + Alloc_Chunk_Size);\n             Tmp (1 .. Source.Last) := Source.Reference (1 .. Source.Last);\n             Free (Source.Reference);\n             Source.Reference := Tmp;"}, {"sha": "d0e187eca28e301dcbb29fe876173021cedd3d68", "filename": "gcc/ada/a-stwiun.adb", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba5b393544f89748b24bd522b56ce62d38e2a13/gcc%2Fada%2Fa-stwiun.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba5b393544f89748b24bd522b56ce62d38e2a13/gcc%2Fada%2Fa-stwiun.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun.adb?ref=0ba5b393544f89748b24bd522b56ce62d38e2a13", "patch": "@@ -1,6 +1,6 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT RUNTIME COMPONENTS                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n --           A D A . S T R I N G S . W I D E _ U N B O U N D E D            --\n --                                                                          --\n@@ -636,7 +636,6 @@ package body Ada.Strings.Wide_Unbounded is\n           (Source.Reference (1 .. Source.Last), Pattern, From, Going, Mapping);\n    end Index;\n \n-\n    function Index\n      (Source  : Unbounded_Wide_String;\n       Set     : Wide_Maps.Wide_Character_Set;\n@@ -772,17 +771,36 @@ package body Ada.Strings.Wide_Unbounded is\n      (Source     : in out Unbounded_Wide_String;\n       Chunk_Size : Natural)\n    is\n-      Growth_Factor : constant := 50;\n-      S_Length      : constant Natural := Source.Reference'Length;\n+      Growth_Factor : constant := 32;\n+      --  The growth factor controls how much extra space is allocated when\n+      --  we have to increase the size of an allocated unbounded string. By\n+      --  allocating extra space, we avoid the need to reallocate on every\n+      --  append, particularly important when a string is built up by repeated\n+      --  append operations of small pieces. This is expressed as a factor so\n+      --  32 means add 1/32 of the length of the string as growth space.\n+\n+      Min_Mul_Alloc : constant := Standard'Maximum_Alignment;\n+      --  Allocation will be done by a multiple of Min_Mul_Alloc This causes\n+      --  no memory loss as most (all?) malloc implementations are obliged to\n+      --  align the returned memory on the maximum alignment as malloc does not\n+      --  know the target alignment.\n+\n+      S_Length : constant Natural := Source.Reference'Length;\n \n    begin\n       if Chunk_Size > S_Length - Source.Last then\n          declare\n-            Alloc_Chunk_Size : constant Positive :=\n-                                 Chunk_Size + (S_Length / Growth_Factor);\n-            Tmp : Wide_String_Access;\n+            New_Size : constant Positive :=\n+                         S_Length + Chunk_Size + (S_Length / Growth_Factor);\n+\n+            New_Rounded_Up_Size : constant Positive :=\n+                                    ((New_Size - 1) / Min_Mul_Alloc + 1) *\n+                                       Min_Mul_Alloc;\n+\n+            Tmp : constant Wide_String_Access :=\n+                    new Wide_String (1 .. New_Rounded_Up_Size);\n+\n          begin\n-            Tmp := new Wide_String (1 .. S_Length + Alloc_Chunk_Size);\n             Tmp (1 .. Source.Last) := Source.Reference (1 .. Source.Last);\n             Free (Source.Reference);\n             Source.Reference := Tmp;\n@@ -935,7 +953,6 @@ package body Ada.Strings.Wide_Unbounded is\n       return Source.Reference (1 .. Source.Last);\n    end To_Wide_String;\n \n-\n    ---------------\n    -- Translate --\n    ---------------"}, {"sha": "390fb389e3c7f2d558694ce2a5369face659807b", "filename": "gcc/ada/a-stzunb.adb", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba5b393544f89748b24bd522b56ce62d38e2a13/gcc%2Fada%2Fa-stzunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba5b393544f89748b24bd522b56ce62d38e2a13/gcc%2Fada%2Fa-stzunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb.adb?ref=0ba5b393544f89748b24bd522b56ce62d38e2a13", "patch": "@@ -1,6 +1,6 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT RUNTIME COMPONENTS                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n --      A D A . S T R I N G S . W I D E _ W I D E _ U N B O U N D E D       --\n --                                                                          --\n@@ -647,7 +647,6 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n           (Source.Reference (1 .. Source.Last), Pattern, From, Going, Mapping);\n    end Index;\n \n-\n    function Index\n      (Source : Unbounded_Wide_Wide_String;\n       Set    : Wide_Wide_Maps.Wide_Wide_Character_Set;\n@@ -783,17 +782,36 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n      (Source     : in out Unbounded_Wide_Wide_String;\n       Chunk_Size : Natural)\n    is\n-      Growth_Factor : constant := 50;\n-      S_Length      : constant Natural := Source.Reference'Length;\n+      Growth_Factor : constant := 32;\n+      --  The growth factor controls how much extra space is allocated when\n+      --  we have to increase the size of an allocated unbounded string. By\n+      --  allocating extra space, we avoid the need to reallocate on every\n+      --  append, particularly important when a string is built up by repeated\n+      --  append operations of small pieces. This is expressed as a factor so\n+      --  32 means add 1/32 of the length of the string as growth space.\n+\n+      Min_Mul_Alloc : constant := Standard'Maximum_Alignment;\n+      --  Allocation will be done by a multiple of Min_Mul_Alloc This causes\n+      --  no memory loss as most (all?) malloc implementations are obliged to\n+      --  align the returned memory on the maximum alignment as malloc does not\n+      --  know the target alignment.\n+\n+      S_Length : constant Natural := Source.Reference'Length;\n \n    begin\n       if Chunk_Size > S_Length - Source.Last then\n          declare\n-            Alloc_Chunk_Size : constant Positive :=\n-                                 Chunk_Size + (S_Length / Growth_Factor);\n-            Tmp : Wide_Wide_String_Access;\n+            New_Size : constant Positive :=\n+                         S_Length + Chunk_Size + (S_Length / Growth_Factor);\n+\n+            New_Rounded_Up_Size : constant Positive :=\n+                                    ((New_Size - 1) / Min_Mul_Alloc + 1) *\n+                                       Min_Mul_Alloc;\n+\n+            Tmp : constant Wide_Wide_String_Access :=\n+                    new Wide_Wide_String (1 .. New_Rounded_Up_Size);\n+\n          begin\n-            Tmp := new Wide_Wide_String (1 .. S_Length + Alloc_Chunk_Size);\n             Tmp (1 .. Source.Last) := Source.Reference (1 .. Source.Last);\n             Free (Source.Reference);\n             Source.Reference := Tmp;\n@@ -911,9 +929,9 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       Free (Old);\n    end Tail;\n \n-   ------------------------------\n+   -----------------------------------\n    -- To_Unbounded_Wide_Wide_String --\n-   ------------------------------\n+   -----------------------------------\n \n    function To_Unbounded_Wide_Wide_String\n      (Source : Wide_Wide_String) return Unbounded_Wide_Wide_String\n@@ -936,9 +954,9 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       return Result;\n    end To_Unbounded_Wide_Wide_String;\n \n-   -------------------\n+   -------------------------\n    -- To_Wide_Wide_String --\n-   --------------------\n+   -------------------------\n \n    function To_Wide_Wide_String\n      (Source : Unbounded_Wide_Wide_String) return Wide_Wide_String\n@@ -947,7 +965,6 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       return Source.Reference (1 .. Source.Last);\n    end To_Wide_Wide_String;\n \n-\n    ---------------\n    -- Translate --\n    ---------------"}]}