{"sha": "c9184dd88127f610ee5cd1a3f62122a68c23665a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxODRkZDg4MTI3ZjYxMGVlNWNkMWEzZjYyMTIyYTY4YzIzNjY1YQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2009-04-17T10:38:48Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2009-04-17T10:38:48Z"}, "message": "gcc-dg.exp (gcc-dg-prune): Make linker message check less strict so it also works with auto-overlay support.\n\n\t* lib/gcc-dg.exp (gcc-dg-prune): Make linker message check\n\tless strict so it also works with auto-overlay support.\n\t* lib/gcc-defs.exp (${tool}_check_unsupported_p): Add check\n\tfor \"exceeds local store\" linker errors on the SPU.\n\n\t* lib/gfortran.exp: Include target-supports.exp.\n\t(gfortran_init): On SPU targets where automatic overlay support\n\tis available, use it to build all Fortran test cases.\n\n\t* gfortran.dg/pr20257.f90: Skip on spu-*-* targets.\n\nFrom-SVN: r146242", "tree": {"sha": "3d97ada16e4bf2fee9038838746610a8750b266f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d97ada16e4bf2fee9038838746610a8750b266f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9184dd88127f610ee5cd1a3f62122a68c23665a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9184dd88127f610ee5cd1a3f62122a68c23665a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9184dd88127f610ee5cd1a3f62122a68c23665a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9184dd88127f610ee5cd1a3f62122a68c23665a/comments", "author": null, "committer": null, "parents": [{"sha": "c049309d975209a0c127ebdd95645bece1af4ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c049309d975209a0c127ebdd95645bece1af4ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c049309d975209a0c127ebdd95645bece1af4ecb"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "e0a0afdb34f729e21c660faf8fdbd7fae0e4cbb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9184dd88127f610ee5cd1a3f62122a68c23665a", "patch": "@@ -1,3 +1,16 @@\n+2009-04-17  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* lib/gcc-dg.exp (gcc-dg-prune): Make linker message check\n+\tless strict so it also works with auto-overlay support.\n+\t* lib/gcc-defs.exp (${tool}_check_unsupported_p): Add check\n+\tfor \"exceeds local store\" linker errors on the SPU.\n+\n+\t* lib/gfortran.exp: Include target-supports.exp.\n+\t(gfortran_init): On SPU targets where automatic overlay support\n+\tis available, use it to build all Fortran test cases.\n+\n+\t* gfortran.dg/pr20257.f90: Skip on spu-*-* targets.\n+\n 2009-04-17  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat.dg/ref_type.ads, gnat.dg/ref_type.adb: Fix test after proper"}, {"sha": "77c885f48fcddc435c0d37e1f70028bb2fb1ec6a", "filename": "gcc/testsuite/gfortran.dg/pr20257.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20257.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20257.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20257.f90?ref=c9184dd88127f610ee5cd1a3f62122a68c23665a", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run { target fd_truncate } }\n+! { dg-skip-if \"Too big for local store\" { spu-*-* } { \"*\" } { \"\" } }\n   integer,parameter :: n = 10000\n   real(8) array(10000)\n "}, {"sha": "53926a69a232a0a063d174057c4a6ed7052fa2b3", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=c9184dd88127f610ee5cd1a3f62122a68c23665a", "patch": "@@ -155,6 +155,10 @@ proc ${tool}_check_unsupported_p { output } {\n     if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n \treturn \"memory full\"\n     }\n+    if {[istarget spu-*-*] && \\\n+            [string match \"*exceeds local store*\" $output]} {\n+\treturn \"memory full\"\n+    }\n     return \"\"\n }\n "}, {"sha": "7d00acf6d1a8144bd8d382ef7da12c6357fb5de8", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=c9184dd88127f610ee5cd1a3f62122a68c23665a", "patch": "@@ -186,7 +186,7 @@ proc gcc-dg-prune { system text } {\n     # Likewise, if we see \".text exceeds local store range\" or\n     # similar.\n     if {[string match \"spu-*\" $system] && \\\n-\t    [string match \"*exceeds local store range*\" $text]} {\n+\t    [string match \"*exceeds local store*\" $text]} {\n \t# The format here is important.  See dg.exp.\n \treturn \"::unsupported::memory full\"\n     }"}, {"sha": "a4d6e2b5d38aa52daa801ac22da07128e79a69ee", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9184dd88127f610ee5cd1a3f62122a68c23665a/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=c9184dd88127f610ee5cd1a3f62122a68c23665a", "patch": "@@ -27,6 +27,7 @@ load_lib prune.exp\n load_lib gcc-defs.exp\n load_lib timeout.exp\n load_lib target-libpath.exp\n+load_lib target-supports.exp\n \n #\n # GFORTRAN_UNDER_TEST is the compiler under test.\n@@ -177,6 +178,13 @@ proc gfortran_init { args } {\n \tlappend ALWAYS_GFORTRANFLAGS \"additional_flags=$TOOL_OPTIONS\"\n     }\n \n+    # On the SPU, most of the fortran test cases exceed local store size.\n+    # Use automatic overlay support to make them fit.\n+    if { [check_effective_target_spu_auto_overlay] } {\n+\tlappend ALWAYS_GFORTRANFLAGS \"ldflags=-Wl,--auto-overlay\"\n+\tlappend ALWAYS_GFORTRANFLAGS \"ldflags=-Wl,--reserved-space=131072\"\n+    }\n+\n     verbose -log \"ALWAYS_GFORTRANFLAGS set to $ALWAYS_GFORTRANFLAGS\"\n \n     verbose \"gfortran is initialized\" 3"}]}