{"sha": "fc188d37b37726535ea6fd8c546987e691fd2ae1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMxODhkMzdiMzc3MjY1MzVlYTZmZDhjNTQ2OTg3ZTY5MWZkMmFlMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-11-16T11:38:11Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-11-16T11:38:11Z"}, "message": "cse.c (struct change_cc_mode_args): New structure.\n\n2004-11-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc/cse.c (struct change_cc_mode_args): New structure.\n\t(cse_change_cc_mode_insn): New function.\n\t(cse_change_cc_mode): Use validate_change to perfom changes.\n\t(cse_change_cc_mode_insns, cse_condition_code_reg):\n\tCall cse_change_cc_mode_insn.\n\nFrom-SVN: r90728", "tree": {"sha": "ddaa587ca7451dcfa811939156a099ec3f17328a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddaa587ca7451dcfa811939156a099ec3f17328a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc188d37b37726535ea6fd8c546987e691fd2ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc188d37b37726535ea6fd8c546987e691fd2ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc188d37b37726535ea6fd8c546987e691fd2ae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc188d37b37726535ea6fd8c546987e691fd2ae1/comments", "author": null, "committer": null, "parents": [{"sha": "be06f47bc163661477f50bf46e103314f1c24498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be06f47bc163661477f50bf46e103314f1c24498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be06f47bc163661477f50bf46e103314f1c24498"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "e966816da29357e66e317b5a7bbda68b0f0361d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc188d37b37726535ea6fd8c546987e691fd2ae1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc188d37b37726535ea6fd8c546987e691fd2ae1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc188d37b37726535ea6fd8c546987e691fd2ae1", "patch": "@@ -1,3 +1,11 @@\n+2004-11-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc/cse.c (struct change_cc_mode_args): New structure.\n+\t(cse_change_cc_mode_insn): New function.\n+\t(cse_change_cc_mode): Use validate_change to perfom changes.\n+\t(cse_change_cc_mode_insns, cse_condition_code_reg): \n+\tCall cse_change_cc_mode_insn.\n+\n 2004-11-16  Steven Bosscher  <stevenb@suse.de>\n \n \t* stack.h: Remove."}, {"sha": "67bb822909f9e334ed34c55b39b1831c615c1d01", "filename": "gcc/cse.c", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc188d37b37726535ea6fd8c546987e691fd2ae1/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc188d37b37726535ea6fd8c546987e691fd2ae1/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=fc188d37b37726535ea6fd8c546987e691fd2ae1", "patch": "@@ -263,6 +263,14 @@ struct qty_table_elem\n /* The table of all qtys, indexed by qty number.  */\n static struct qty_table_elem *qty_table;\n \n+/* Structure used to pass arguments via for_each_rtx to function\n+   cse_change_cc_mode.  */\n+struct change_cc_mode_args\n+{\n+  rtx insn;\n+  rtx newreg;\n+};\n+\n #ifdef HAVE_cc0\n /* For machines that have a CC0, we do not record its value in the hash\n    table since its use is guaranteed to be the insn immediately following\n@@ -653,6 +661,7 @@ static bool insn_live_p (rtx, int *);\n static bool set_live_p (rtx, rtx, int *);\n static bool dead_libcall_p (rtx, int *);\n static int cse_change_cc_mode (rtx *, void *);\n+static void cse_change_cc_mode_insn (rtx, rtx);\n static void cse_change_cc_mode_insns (rtx, rtx, rtx);\n static enum machine_mode cse_cc_succs (basic_block, rtx, rtx, bool);\n \f\n@@ -7303,19 +7312,46 @@ delete_trivially_dead_insns (rtx insns, int nreg)\n static int\n cse_change_cc_mode (rtx *loc, void *data)\n {\n-  rtx newreg = (rtx) data;\n+  struct change_cc_mode_args* args = (struct change_cc_mode_args*)data;\n \n   if (*loc\n       && REG_P (*loc)\n-      && REGNO (*loc) == REGNO (newreg)\n-      && GET_MODE (*loc) != GET_MODE (newreg))\n+      && REGNO (*loc) == REGNO (args->newreg)\n+      && GET_MODE (*loc) != GET_MODE (args->newreg))\n     {\n-      *loc = newreg;\n+      validate_change (args->insn, loc, args->newreg, 1);\n+      \n       return -1;\n     }\n   return 0;\n }\n \n+/* Change the mode of any reference to the register REGNO (NEWREG) to\n+   GET_MODE (NEWREG) in INSN.  */\n+\n+static void\n+cse_change_cc_mode_insn (rtx insn, rtx newreg)\n+{\n+  struct change_cc_mode_args args;\n+  int success;\n+\n+  if (!INSN_P (insn))\n+    return;\n+\n+  args.insn = insn;\n+  args.newreg = newreg;\n+  \n+  for_each_rtx (&PATTERN (insn), cse_change_cc_mode, &args);\n+  for_each_rtx (&REG_NOTES (insn), cse_change_cc_mode, &args);\n+  \n+  /* If the following assertion was triggered, there is most probably\n+     something wrong with the cc_modes_compatible back end function.\n+     CC modes only can be considered compatible if the insn - with the mode\n+     replaced by any of the compatible modes - can still be recognized.  */\n+  success = apply_change_group ();\n+  gcc_assert (success);\n+}\n+\n /* Change the mode of any reference to the register REGNO (NEWREG) to\n    GET_MODE (NEWREG), starting at START.  Stop before END.  Stop at\n    any instruction which modifies NEWREG.  */\n@@ -7333,8 +7369,7 @@ cse_change_cc_mode_insns (rtx start, rtx end, rtx newreg)\n       if (reg_set_p (newreg, insn))\n \treturn;\n \n-      for_each_rtx (&PATTERN (insn), cse_change_cc_mode, newreg);\n-      for_each_rtx (&REG_NOTES (insn), cse_change_cc_mode, newreg);\n+      cse_change_cc_mode_insn (insn, newreg);\n     }\n }\n \n@@ -7443,6 +7478,8 @@ cse_cc_succs (basic_block bb, rtx cc_reg, rtx cc_src, bool can_change_mode)\n \t\t\t{\n \t\t\t  gcc_assert (can_change_mode);\n \t\t\t  mode = comp_mode;\n+\n+\t\t\t  /* The modified insn will be re-recognized later.  */\n \t\t\t  PUT_MODE (cc_src, mode);\n \t\t\t}\n \t\t    }\n@@ -7622,12 +7659,7 @@ cse_condition_code_reg (void)\n \t    {\n \t      rtx newreg = gen_rtx_REG (mode, REGNO (cc_reg));\n \n-\t      /* Change the mode of CC_REG in CC_SRC_INSN to\n-\t\t GET_MODE (NEWREG).  */\n-\t      for_each_rtx (&PATTERN (cc_src_insn), cse_change_cc_mode,\n-\t\t\t    newreg);\n-\t      for_each_rtx (&REG_NOTES (cc_src_insn), cse_change_cc_mode,\n-\t\t\t    newreg);\n+\t      cse_change_cc_mode_insn (cc_src_insn, newreg);\n \n \t      /* Do the same in the following insns that use the\n \t\t current value of CC_REG within BB.  */"}]}