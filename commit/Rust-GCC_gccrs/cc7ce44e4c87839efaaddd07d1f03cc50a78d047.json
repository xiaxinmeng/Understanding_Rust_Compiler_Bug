{"sha": "cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3Y2U0NGU0Yzg3ODM5ZWZhYWRkZDA3ZDFmMDNjYzUwYTc4ZDA0Nw==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-17T15:33:49Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-02-17T15:33:49Z"}, "message": "dr176.C: Add missing semicolon (typo).\n\n\t* g++.dg/tc1/dr176.C: Add missing semicolon (typo).\n\t* g++.dg/tc1/dr101.C, g++.dg/tc1/dr135.C, g++.dg/tc1/dr142.C,\n\tg++.dg/tc1/dr152.C, g++.dg/tc1/dr159.C,\tg++.dg/tc1/dr161.C,\n\tg++.dg/tc1/dr166.C, g++.dg/tc1/dr176.C,\tg++.dg/tc1/dr193.C,\n\tg++.dg/tc1/dr194.C, g++.dg/tc1/dr217.C,\tg++.dg/tc1/dr56.C,\n\tg++.dg/tc1/dr68.C, g++.dg/tc1/dr76.C, g++.dg/tc1/dr80.C,\n\tg++.dg/tc1/dr94.C: Fix line terminator.\n\nFrom-SVN: r77950", "tree": {"sha": "f8d28e75dc9c939bfc59a04cbcab336e34b9bac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8d28e75dc9c939bfc59a04cbcab336e34b9bac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3f573fc8c6b34fff01fb93d9dd760d7d2318d3"}], "stats": {"total": 864, "additions": 437, "deletions": 427}, "files": [{"sha": "2f5a95651a2f9c5b90a507b258fd32390c68f792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,3 +1,13 @@\n+2004-02-17  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* g++.dg/tc1/dr176.C: Add missing semicolon (typo).\n+\t* g++.dg/tc1/dr101.C, g++.dg/tc1/dr135.C, g++.dg/tc1/dr142.C,\n+\tg++.dg/tc1/dr152.C, g++.dg/tc1/dr159.C,\tg++.dg/tc1/dr161.C,\n+\tg++.dg/tc1/dr166.C, g++.dg/tc1/dr176.C,\tg++.dg/tc1/dr193.C,\n+\tg++.dg/tc1/dr194.C, g++.dg/tc1/dr217.C,\tg++.dg/tc1/dr56.C,\n+\tg++.dg/tc1/dr68.C, g++.dg/tc1/dr76.C, g++.dg/tc1/dr80.C,\n+\tg++.dg/tc1/dr94.C: Fix line terminator.\n+\n 2004-02-16  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.c-torture/compile/20040216-1.c: New."}, {"sha": "ede2215601f0341bfce37870d7bd7505293cd0b5", "filename": "gcc/testsuite/g++.dg/tc1/dr101.C", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr101.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,31 +1,31 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR101: Redeclaration of extern \"C\" names via using-declarations \r\n-\r\n-namespace Test1 {\r\n-\r\n-  typedef unsigned int X;\r\n-  extern \"C\" void f1();\r\n-  namespace N {\r\n-    typedef unsigned int X;\r\n-    extern \"C\" void f1();\r\n-  }\r\n-  using N::f1; // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\r\n-  using N::X;  // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\r\n-}\r\n-\r\n-\r\n-namespace Test2 {\r\n-\r\n-  typedef unsigned int X;\r\n-  extern \"C\" int f2();\r\n-  namespace N {\r\n-    typedef unsigned int X;\r\n-    extern \"C\" int f2();\r\n-  }\r\n-  using namespace N;\r\n-  int i = f2(); // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\r\n-  X x;          // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" { xfail *-*-* } }\r\n-\r\n-}\r\n-\r\n+// DR101: Redeclaration of extern \"C\" names via using-declarations \n+\n+namespace Test1 {\n+\n+  typedef unsigned int X;\n+  extern \"C\" void f1();\n+  namespace N {\n+    typedef unsigned int X;\n+    extern \"C\" void f1();\n+  }\n+  using N::f1; // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\n+  using N::X;  // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\n+}\n+\n+\n+namespace Test2 {\n+\n+  typedef unsigned int X;\n+  extern \"C\" int f2();\n+  namespace N {\n+    typedef unsigned int X;\n+    extern \"C\" int f2();\n+  }\n+  using namespace N;\n+  int i = f2(); // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" }\n+  X x;          // { dg-bogus \"\" \"redeclaration through 'using' should not be ambiguous\" { xfail *-*-* } }\n+\n+}\n+"}, {"sha": "beed8cdfd7fa3df0501a98123a5b8691c336b996", "filename": "gcc/testsuite/g++.dg/tc1/dr135.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr135.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr135.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr135.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR135: Class type in in-class member function definitions \r\n-\r\n-struct S {\r\n-  S f() { return S(); }  // { dg-bogus \"\" \"incomplete class type is allowed as return type\" }\r\n-  void g(S) { }          // { dg-bogus \"\" \"incomplete class type is allowed as parameter type\" }\r\n-};\r\n+// DR135: Class type in in-class member function definitions \n+\n+struct S {\n+  S f() { return S(); }  // { dg-bogus \"\" \"incomplete class type is allowed as return type\" }\n+  void g(S) { }          // { dg-bogus \"\" \"incomplete class type is allowed as parameter type\" }\n+};"}, {"sha": "c49f4dd20d34b7ba3e3eb3a2c52534977c7d68e2", "filename": "gcc/testsuite/g++.dg/tc1/dr142.C", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,32 +1,32 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR142: Injection-related errors in access example \r\n-\r\n-class B {                 // { dg-error \"inaccessible\" }\r\n-public:\r\n-  int mi;                 // { dg-error \"inaccessible\" }\r\n-  static int si;          // { dg-error \"inaccessible\" }\r\n-};\r\n-\r\n-class D: private B {\r\n-};\r\n-\r\n-class DD: public D {\r\n-  void f();\r\n-};\r\n-\r\n-void DD::f() {\r\n-  mi = 3;          // { dg-error \"within this context\" \"\" }\r\n-  si = 3;          // { dg-error \"within this context\" \"\" }\r\n-  ::B b;\r\n-  b.mi = 3;\r\n-  b.si = 3;\r\n-  ::B::si = 3;\r\n-  ::B* bp1 = this;        // { dg-error \"inaccessible base\" \"\" }\r\n-  ::B* bp2 = (::B*)this;\r\n-  bp2->mi = 3;\r\n-\r\n-\r\n-  B b2;                   // { dg-error \"within this context\" \"\" }\r\n-  B::si = 3;              // { dg-error \"within this context\" \"\" }\r\n-}\r\n+// DR142: Injection-related errors in access example \n+\n+class B {                 // { dg-error \"inaccessible\" }\n+public:\n+  int mi;                 // { dg-error \"inaccessible\" }\n+  static int si;          // { dg-error \"inaccessible\" }\n+};\n+\n+class D: private B {\n+};\n+\n+class DD: public D {\n+  void f();\n+};\n+\n+void DD::f() {\n+  mi = 3;          // { dg-error \"within this context\" \"\" }\n+  si = 3;          // { dg-error \"within this context\" \"\" }\n+  ::B b;\n+  b.mi = 3;\n+  b.si = 3;\n+  ::B::si = 3;\n+  ::B* bp1 = this;        // { dg-error \"inaccessible base\" \"\" }\n+  ::B* bp2 = (::B*)this;\n+  bp2->mi = 3;\n+\n+\n+  B b2;                   // { dg-error \"within this context\" \"\" }\n+  B::si = 3;              // { dg-error \"within this context\" \"\" }\n+}"}, {"sha": "1b6dd870d1890cd3c6e635bc148936f767041cf3", "filename": "gcc/testsuite/g++.dg/tc1/dr152.C", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,36 +1,36 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR152: explicit copy constructors \r\n+// DR152: explicit copy constructors \n \n-namespace N1 {\r\n-  struct X {\r\n-    X();\r\n-    explicit X(const X&);\r\n-  };\r\n-  void f(X);\r\n-  int foo() \r\n-  { \r\n-    X x; \r\n-    f(x);     // { dg-error \"\" \"\" }\r\n-  }\r\n+namespace N1 {\n+  struct X {\n+    X();\n+    explicit X(const X&);\n+  };\n+  void f(X);\n+  int foo() \n+  { \n+    X x; \n+    f(x);     // { dg-error \"\" \"\" }\n+  }\n }\n \n-namespace N2 {\r\n-  template <class T>\r\n-  struct X {\r\n-    X();\r\n-    explicit X(const X&);\r\n-  };\r\n-\r\n-  template <class T>\r\n-  void f(T ) {}\r\n-  \r\n-  template <class T>\r\n-  int foo() \r\n-  { \r\n-    X<T> x; \r\n-    N2::f(x);   // { dg-error \"\" \"\" }\r\n-  }\r\n-\r\n-  template int foo<float>();  // { dg-error \"instantiated from here\" }\r\n+namespace N2 {\n+  template <class T>\n+  struct X {\n+    X();\n+    explicit X(const X&);\n+  };\n+\n+  template <class T>\n+  void f(T ) {}\n+  \n+  template <class T>\n+  int foo() \n+  { \n+    X<T> x; \n+    N2::f(x);   // { dg-error \"\" \"\" }\n+  }\n+\n+  template int foo<float>();  // { dg-error \"instantiated from here\" }\n }"}, {"sha": "74d23f1cd1fa0b1d6cfb30f8ae3887879575b3ac", "filename": "gcc/testsuite/g++.dg/tc1/dr159.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr159.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr159.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr159.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,12 +1,12 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR159: Namespace qualification in declarators \r\n-\r\n-namespace N {\r\n-  namespace M {\r\n-    void f();\r\n-    void g();\r\n-  }\r\n-  void M::f(){}\r\n-  void N::M::g(){}\r\n-}\r\n+// DR159: Namespace qualification in declarators \n+\n+namespace N {\n+  namespace M {\n+    void f();\n+    void g();\n+  }\n+  void M::f(){}\n+  void N::M::g(){}\n+}"}, {"sha": "49f679a0c1d6cedf7d82c1c0b194cc34f3cd2d84", "filename": "gcc/testsuite/g++.dg/tc1/dr161.C", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr161.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr161.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr161.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,50 +1,50 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR161: Access to protected nested type \r\n-\r\n-namespace N1 {\r\n-  struct A \r\n-  {\r\n-  protected:\r\n-    typedef int type;\r\n-  };\r\n-\r\n-  struct B : public A\r\n-  {\r\n-    void test(void)\r\n-    {\r\n-      A::type t;\r\n-    }\r\n-\r\n-    friend void ftest(void)\r\n-    {\r\n-      A::type t;\r\n-    }\r\n-  };\r\n-}\r\n-\r\n-\r\n-namespace N2 {\r\n-  template <class T>\r\n-  struct A \r\n-  {\r\n-  protected:\r\n-    typedef int type;\r\n-  };\r\n-\r\n-  template <class T>\r\n-  struct B : public A<T>\r\n-  {\r\n-    void test(B b)\r\n-    {\r\n-      typename A<T>::type t;\r\n-    }\r\n-\r\n-    friend void ftest(B b)\r\n-    {\r\n-      typename A<T>::type t;\r\n-    }\r\n-  };\r\n-\r\n-  template struct B<void>;\r\n-}\r\n+// DR161: Access to protected nested type \n+\n+namespace N1 {\n+  struct A \n+  {\n+  protected:\n+    typedef int type;\n+  };\n+\n+  struct B : public A\n+  {\n+    void test(void)\n+    {\n+      A::type t;\n+    }\n+\n+    friend void ftest(void)\n+    {\n+      A::type t;\n+    }\n+  };\n+}\n+\n+\n+namespace N2 {\n+  template <class T>\n+  struct A \n+  {\n+  protected:\n+    typedef int type;\n+  };\n+\n+  template <class T>\n+  struct B : public A<T>\n+  {\n+    void test(B b)\n+    {\n+      typename A<T>::type t;\n+    }\n+\n+    friend void ftest(B b)\n+    {\n+      typename A<T>::type t;\n+    }\n+  };\n+\n+  template struct B<void>;\n+}"}, {"sha": "cc4631a5f38a349cb1f2203015f96cfb2e239c48", "filename": "gcc/testsuite/g++.dg/tc1/dr166.C", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,60 +1,60 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR166: Friend declarations of template-ids \r\n-\r\n-namespace N {\r\n-  template <class T> void f(T);\r\n-  void g();\r\n-\r\n-  namespace M {\r\n-    class A {\r\n-      friend void f<int>(int); // N::f\r\n-      static int x;   // { dg-error \"private\" }\r\n-    };\r\n-    \r\n-    class B {\r\n-      template <class T> friend void f(T);  // M::f\r\n-      static int x;   // { dg-error \"private\" }\r\n-    };\r\n-\r\n-    class C {\r\n-      friend void g(); // M::g\r\n-      static int x;   // { dg-error \"private\" }\r\n-    };\r\n-\r\n-    template <class T> void f(T)  // will be instantiated as f<long>\r\n-    {\r\n-      M::A::x = 0;    // { dg-error \"within this context\" }\r\n-      M::B::x = 0;\r\n-    }\r\n-    template <> void f<int>(int)\r\n-    { M::A::x = 0; }      // { dg-error \"within this context\" }\r\n-    template <> void f<double>(double )\r\n-    { \r\n-      M::B::x = 0; \r\n-      M::f<long>(0);   // { dg-error \"instantiated\" }\r\n-    }\r\n-\r\n-    void g(void)\r\n-    { M::C::x = 0; }\r\n-  }\r\n-\r\n-  template <class T> void f(T)  // will be instantiated as f<long>\r\n-  { \r\n-    M::A::x = 0;       // { dg-error \"within this context\" }\r\n-    M::B::x = 0;       // { dg-error \"within this context\" }\r\n-  }\r\n-\r\n-  template <> void f<int>(int )\r\n-  { \r\n-    N::f<long>(0);        // { dg-error \"instantiated\" }\r\n-    M::A::x = 0; \r\n-    M::B::x = 0;       // { dg-error \"within this context\" }\r\n-  }\r\n-\r\n-  template <> void f<char>(char )\r\n-  { M::A::x = 0; }      // { dg-error \"within this context\" }\r\n-\r\n-  void g(void)\r\n-  { M::C::x = 0; }      // { dg-error \"within this context\" }\r\n-}\r\n+// DR166: Friend declarations of template-ids \n+\n+namespace N {\n+  template <class T> void f(T);\n+  void g();\n+\n+  namespace M {\n+    class A {\n+      friend void f<int>(int); // N::f\n+      static int x;   // { dg-error \"private\" }\n+    };\n+    \n+    class B {\n+      template <class T> friend void f(T);  // M::f\n+      static int x;   // { dg-error \"private\" }\n+    };\n+\n+    class C {\n+      friend void g(); // M::g\n+      static int x;   // { dg-error \"private\" }\n+    };\n+\n+    template <class T> void f(T)  // will be instantiated as f<long>\n+    {\n+      M::A::x = 0;    // { dg-error \"within this context\" }\n+      M::B::x = 0;\n+    }\n+    template <> void f<int>(int)\n+    { M::A::x = 0; }      // { dg-error \"within this context\" }\n+    template <> void f<double>(double )\n+    { \n+      M::B::x = 0; \n+      M::f<long>(0);   // { dg-error \"instantiated\" }\n+    }\n+\n+    void g(void)\n+    { M::C::x = 0; }\n+  }\n+\n+  template <class T> void f(T)  // will be instantiated as f<long>\n+  { \n+    M::A::x = 0;       // { dg-error \"within this context\" }\n+    M::B::x = 0;       // { dg-error \"within this context\" }\n+  }\n+\n+  template <> void f<int>(int )\n+  { \n+    N::f<long>(0);        // { dg-error \"instantiated\" }\n+    M::A::x = 0; \n+    M::B::x = 0;       // { dg-error \"within this context\" }\n+  }\n+\n+  template <> void f<char>(char )\n+  { M::A::x = 0; }      // { dg-error \"within this context\" }\n+\n+  void g(void)\n+  { M::C::x = 0; }      // { dg-error \"within this context\" }\n+}"}, {"sha": "aad805bbd2eee1977528c2feb5ef432d6df09acb", "filename": "gcc/testsuite/g++.dg/tc1/dr176.C", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,29 +1,29 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR176: Name injection and templates \r\n-\r\n-namespace N1 {\r\n-  template <class T> struct Base {\r\n-    Base* p;\r\n-    Base<T*>* p2;\r\n-    ::Base* p3;    // { dg-error \"\" \"\" }\r\n-  };\r\n-\r\n-  template <class T> struct Derived: public Base<T> {\r\n-    Base* p;     // { dg-bogus \"\" \"injected class name in derived classes\" { xfail *-*-* } }\r\n-    Base<T*>* p2;\r\n-    typename Derived::Base* p3;   // { dg-bogus \"\" \"injected class name in derived classes\" { xfail *-*-* } }\r\n-  };\r\n-\r\n-  template struct Derived<void>;  // { dg-bogus \"instantiated from here\" \"everything should be looked up at parsing time (after DR224)\" { xfail *-*-* } }\r\n-}\r\n-\r\n-\r\n-namespace N2 {\r\n-  template <class T> struct Base {};\r\n-  template <class T> struct Derived: public Base<T> {\r\n-    typename Derived::template Base<double>* p1;  // { dg-bogus \"\" \"\" { xfail *-*-* } }\r\n-  }\r\n-\r\n-  template struct Derived<void>;\r\n-}\r\n+// DR176: Name injection and templates \n+\n+namespace N1 {\n+  template <class T> struct Base {\n+    Base* p;\n+    Base<T*>* p2;\n+    ::Base* p3;    // { dg-error \"\" \"\" }\n+  };\n+\n+  template <class T> struct Derived: public Base<T> {\n+    Base* p;     // { dg-bogus \"\" \"injected class name in derived classes\" { xfail *-*-* } }\n+    Base<T*>* p2;\n+    typename Derived::Base* p3;   // { dg-bogus \"\" \"injected class name in derived classes\" { xfail *-*-* } }\n+  };\n+\n+  template struct Derived<void>;  // { dg-bogus \"instantiated from here\" \"everything should be looked up at parsing time (after DR224)\" { xfail *-*-* } }\n+}\n+\n+\n+namespace N2 {\n+  template <class T> struct Base {};\n+  template <class T> struct Derived: public Base<T> {\n+    typename Derived::template Base<double>* p1;  // { dg-bogus \"\" \"\" { xfail *-*-* } }\n+  };\n+\n+  template struct Derived<void>;\n+}"}, {"sha": "5855593e5a98c3cbf9e5fa0e7e2e23007a7e49eb", "filename": "gcc/testsuite/g++.dg/tc1/dr193.C", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr193.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr193.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr193.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,72 +1,72 @@\n // { dg-do run }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR193: Order of destruction of local automatics of destructor \r\n-\r\n-extern \"C\" void abort(void);\r\n-\r\n-namespace N1 {\r\n-  bool a_done = false;\r\n-  struct A\r\n-  { \r\n-    ~A()\r\n-    {\r\n-      a_done = true;\r\n-    }\r\n-  };\r\n-\r\n-  struct B\r\n-  { \r\n-    ~B()\r\n-    {\r\n-      if (!a_done)\r\n-        abort();\r\n-    }\r\n-  };\r\n-\r\n-  struct C {\r\n-    B x;\r\n-    ~C() {\r\n-      A y;\r\n-    };\r\n-  };\r\n-}\r\n-\r\n-\r\n-namespace N2 {\r\n-  bool a_done = false;\r\n-\r\n-  template <class>\r\n-  struct A\r\n-  { \r\n-    ~A()\r\n-    {\r\n-      a_done = true;\r\n-    }\r\n-  };\r\n-\r\n-  template <class>\r\n-  struct B\r\n-  { \r\n-    ~B()\r\n-    {\r\n-      if (!a_done)\r\n-        abort();\r\n-    }\r\n-  };\r\n-\r\n-  template <class T>\r\n-  struct C {\r\n-    B<T> x;\r\n-    ~C() {\r\n-      A<T> y;\r\n-    };\r\n-  };\r\n-}\r\n-\r\n-\r\n-int main(void)\r\n-{\r\n-  N1::C c1;\r\n-  N2::C<void> c2;\r\n-  return 0;\r\n-}\r\n+// DR193: Order of destruction of local automatics of destructor \n+\n+extern \"C\" void abort(void);\n+\n+namespace N1 {\n+  bool a_done = false;\n+  struct A\n+  { \n+    ~A()\n+    {\n+      a_done = true;\n+    }\n+  };\n+\n+  struct B\n+  { \n+    ~B()\n+    {\n+      if (!a_done)\n+        abort();\n+    }\n+  };\n+\n+  struct C {\n+    B x;\n+    ~C() {\n+      A y;\n+    };\n+  };\n+}\n+\n+\n+namespace N2 {\n+  bool a_done = false;\n+\n+  template <class>\n+  struct A\n+  { \n+    ~A()\n+    {\n+      a_done = true;\n+    }\n+  };\n+\n+  template <class>\n+  struct B\n+  { \n+    ~B()\n+    {\n+      if (!a_done)\n+        abort();\n+    }\n+  };\n+\n+  template <class T>\n+  struct C {\n+    B<T> x;\n+    ~C() {\n+      A<T> y;\n+    };\n+  };\n+}\n+\n+\n+int main(void)\n+{\n+  N1::C c1;\n+  N2::C<void> c2;\n+  return 0;\n+}"}, {"sha": "3ed130071eb8902e43fc3df54f1496493d87267c", "filename": "gcc/testsuite/g++.dg/tc1/dr194.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr194.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr194.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr194.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -3,14 +3,14 @@\n // DR194: Identifying constructors \n \n struct A\n-{\r\n-  inline explicit A();\r\n+{\n+  inline explicit A();\n };\n \n template <class>\n struct B\n-{\r\n-  inline explicit B();\r\n+{\n+  inline explicit B();\n };\n \n template struct B<void>;"}, {"sha": "cfa2803974d673166e26ca1f2746faa0a9b82191", "filename": "gcc/testsuite/g++.dg/tc1/dr217.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr217.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr217.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr217.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,14 +1,14 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR217: Default arguments for non-template member functions of class \r\n-//  templates \r\n-\r\n-template <class T>\r\n-struct S\r\n-{\r\n-  void foo (int);\r\n-};\r\n-\r\n-template <class T>\r\n-void S<T>::foo (int = 0)  // { dg-error \"\" \"default arguments for parameters of member functions of class templates can be specified in the initial declaration only\" { xfail *-*-* } }\r\n-{ }\r\n+// DR217: Default arguments for non-template member functions of class \n+//  templates \n+\n+template <class T>\n+struct S\n+{\n+  void foo (int);\n+};\n+\n+template <class T>\n+void S<T>::foo (int = 0)  // { dg-error \"\" \"default arguments for parameters of member functions of class templates can be specified in the initial declaration only\" { xfail *-*-* } }\n+{ }"}, {"sha": "19c1738782235fcece512210253e6a01c8a72722", "filename": "gcc/testsuite/g++.dg/tc1/dr48.C", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr48.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,13 +1,13 @@\n // { dg-do link }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR48: Definitions of unused static members \r\n-\r\n-struct A {\r\n-  static const int size = 10;\r\n-  int array[size];\r\n-};\r\n-\r\n-int main() {\r\n-  A a;\r\n-  return 0;\r\n-}\r\n+// DR48: Definitions of unused static members \n+\n+struct A {\n+  static const int size = 10;\n+  int array[size];\n+};\n+\n+int main() {\n+  A a;\n+  return 0;\n+}"}, {"sha": "a5caea82655ec65d711a9e3a3c02a7d64214af43", "filename": "gcc/testsuite/g++.dg/tc1/dr56.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,12 +1,12 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR56: Redeclaring typedefs within classes \r\n-\r\n-class X { \r\n-  typedef int I; \r\n-  typedef int I;  // { dg-error \"\" \"Cannot redeclare a typedef in a class scope\" { xfail *-*-* } }\r\n-};\r\n-\r\n-// In non-class scope, they are allowed.\r\n-typedef int A;\r\n-typedef int A;\r\n+// DR56: Redeclaring typedefs within classes \n+\n+class X { \n+  typedef int I; \n+  typedef int I;  // { dg-error \"\" \"Cannot redeclare a typedef in a class scope\" { xfail *-*-* } }\n+};\n+\n+// In non-class scope, they are allowed.\n+typedef int A;\n+typedef int A;"}, {"sha": "253f049432d7e3c63e84fa53af13271fa2a9b0cd", "filename": "gcc/testsuite/g++.dg/tc1/dr68.C", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr68.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr68.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr68.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,20 +1,20 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR68: Grammar does not allow \"friend class A<int>;\" \r\n-\r\n-namespace A{\r\n-  class B{};\r\n-}\r\n-\r\n-namespace B{\r\n-  class A{};\r\n-  class C{\r\n-    friend class ::A::B;\r\n-  };\r\n-}\r\n-\r\n-\r\n-template <typename> class K;\r\n-class J {\r\n-  friend class K<int>;\r\n-};\r\n+// DR68: Grammar does not allow \"friend class A<int>;\" \n+\n+namespace A{\n+  class B{};\n+}\n+\n+namespace B{\n+  class A{};\n+  class C{\n+    friend class ::A::B;\n+  };\n+}\n+\n+\n+template <typename> class K;\n+class J {\n+  friend class K<int>;\n+};"}, {"sha": "6d3d1c12a048680139b776ecc5f9684c21a943a0", "filename": "gcc/testsuite/g++.dg/tc1/dr76.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr76.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR76: Are const volatile variables considered \"constant expressions\"? \r\n-\r\n-volatile const int a = 5;\r\n-\r\n-template <int> struct K;\r\n-template struct K<a>;\t// { dg-error \"non-constant\" }\r\n+// DR76: Are const volatile variables considered \"constant expressions\"? \n+\n+volatile const int a = 5;\n+\n+template <int> struct K;\n+template struct K<a>;\t// { dg-error \"non-constant\" }"}, {"sha": "2327428a0b5560adffbf39aaa5ff9f16ee33a8fe", "filename": "gcc/testsuite/g++.dg/tc1/dr80.C", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr80.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr80.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr80.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,53 +1,53 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR80: Class members with same name as class \r\n-\r\n-struct A \r\n-{\r\n-  int A;\r\n-};\r\n-\r\n-struct A2\r\n-{\r\n-  static int A2;  // { dg-error \"same name as\" }\r\n-};\r\n-\r\n-\r\n-template <class>\r\n-struct A3\r\n-{\r\n-  int A3;\r\n-};\r\n-\r\n-template <class>\r\n-struct A4\r\n-{\r\n-  static int A4;  // { dg-error \"same name as\" }\r\n-};\r\n-\r\n-\r\n-struct B\r\n-{\r\n-  B();\r\n-  int B;  // { dg-error \"same name as\" }\r\n-};\r\n-\r\n-struct B2\r\n-{\r\n-  B2();\r\n-  static int B2;  // { dg-error \"same name as\" }\r\n-};\r\n-\r\n-template <class>\r\n-struct B3\r\n-{\r\n-  B3();\r\n-  int B3;  // { dg-error \"same name as\" \"this error should appear at parsing time\" { xfail *-*-* } }\r\n-};\r\n-\r\n-template <class>\r\n-struct B4\r\n-{\r\n-  B4();\r\n-  static int B4;  // { dg-error \"same name as\" }\r\n-};\r\n+// DR80: Class members with same name as class \n+\n+struct A \n+{\n+  int A;\n+};\n+\n+struct A2\n+{\n+  static int A2;  // { dg-error \"same name as\" }\n+};\n+\n+\n+template <class>\n+struct A3\n+{\n+  int A3;\n+};\n+\n+template <class>\n+struct A4\n+{\n+  static int A4;  // { dg-error \"same name as\" }\n+};\n+\n+\n+struct B\n+{\n+  B();\n+  int B;  // { dg-error \"same name as\" }\n+};\n+\n+struct B2\n+{\n+  B2();\n+  static int B2;  // { dg-error \"same name as\" }\n+};\n+\n+template <class>\n+struct B3\n+{\n+  B3();\n+  int B3;  // { dg-error \"same name as\" \"this error should appear at parsing time\" { xfail *-*-* } }\n+};\n+\n+template <class>\n+struct B4\n+{\n+  B4();\n+  static int B4;  // { dg-error \"same name as\" }\n+};"}, {"sha": "97cf0c25649c3327333082ca4f8e3910af92a059", "filename": "gcc/testsuite/g++.dg/tc1/dr94.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr94.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7ce44e4c87839efaaddd07d1f03cc50a78d047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr94.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr94.C?ref=cc7ce44e4c87839efaaddd07d1f03cc50a78d047", "patch": "@@ -1,9 +1,9 @@\n // { dg-do compile }\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR94: Inconsistencies in the descriptions of constant expressions \r\n-\r\n-struct S {\r\n-  static const int c = 5;\r\n-};\r\n-int a[S::c];\r\n-\r\n+// DR94: Inconsistencies in the descriptions of constant expressions \n+\n+struct S {\n+  static const int c = 5;\n+};\n+int a[S::c];\n+"}]}