{"sha": "c01e44790530f2d2b7b0a4c542090e54a36dcf96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxZTQ0NzkwNTMwZjJkMmI3YjBhNGM1NDIwOTBlNTRhMzZkY2Y5Ng==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-01-26T23:08:54Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-01-26T23:08:54Z"}, "message": "re PR middle-end/34688 ([4.1/4.2] ICE: output_operand: invalid expression as operand)\n\n\tPR middle-end/34688\n\t* final.c (output_addr_const): Handle TRUNCATE.\n\n\t* gcc.c-torture/compile/pr34688: New test.\n\nFrom-SVN: r131878", "tree": {"sha": "6deab0606b8e33fef02fed4073a38773fc3f025e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6deab0606b8e33fef02fed4073a38773fc3f025e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01e44790530f2d2b7b0a4c542090e54a36dcf96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01e44790530f2d2b7b0a4c542090e54a36dcf96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01e44790530f2d2b7b0a4c542090e54a36dcf96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01e44790530f2d2b7b0a4c542090e54a36dcf96/comments", "author": null, "committer": null, "parents": [{"sha": "6e8c65f6621fb00e9008056c7e81860f2e96284c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8c65f6621fb00e9008056c7e81860f2e96284c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e8c65f6621fb00e9008056c7e81860f2e96284c"}], "stats": {"total": 160, "additions": 159, "deletions": 1}, "files": [{"sha": "67c51c421fd413ce71cfd9832ec0b5c6c900caec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c01e44790530f2d2b7b0a4c542090e54a36dcf96", "patch": "@@ -1,3 +1,8 @@\n+2008-01-26  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR middle-end/34688\n+\t* final.c (output_addr_const): Handle TRUNCATE.\n+\n 2008-01-26  Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR target/34711\n@@ -23,7 +28,7 @@\n \t(try_add_cand_for): Prefer using ivs not specific to some object.\n \t* tree-flow.h (force_expr_to_var_cost): Declaration removed.\n \n-2007-01-26  Peter Bergner  <bergner@vnet.ibm.com>\n+2008-01-26  Peter Bergner  <bergner@vnet.ibm.com>\n \t    Janis Johnson  <janis187@us.ibm.com>\n \n \tPR target/34814"}, {"sha": "12891c2d50dad9d85aba946d3d806dfaccc741b5", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c01e44790530f2d2b7b0a4c542090e54a36dcf96", "patch": "@@ -3493,6 +3493,7 @@ output_addr_const (FILE *file, rtx x)\n     case ZERO_EXTEND:\n     case SIGN_EXTEND:\n     case SUBREG:\n+    case TRUNCATE:\n       output_addr_const (file, XEXP (x, 0));\n       break;\n "}, {"sha": "6a6ba46223055a30c1bf89f05b69a541e3cac6b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c01e44790530f2d2b7b0a4c542090e54a36dcf96", "patch": "@@ -1,3 +1,8 @@\n+2008-01-26  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR middle-end/34688\n+\t* gcc.c-torture/compile/pr34688: New test.\n+\n 2008-01-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34848"}, {"sha": "9891c72d93d7d5de49b4caca32ee6c11021aff10", "filename": "gcc/testsuite/gcc.c-torture/compile/pr34688.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34688.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01e44790530f2d2b7b0a4c542090e54a36dcf96/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34688.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34688.c?ref=c01e44790530f2d2b7b0a4c542090e54a36dcf96", "patch": "@@ -0,0 +1,147 @@\n+typedef unsigned int size_t;\n+         typedef struct {\n+        }\n+         HashTable;\n+         typedef struct _zval_struct zval;\n+         typedef struct _zend_guard {\n+         HashTable *ht;\n+        }\n+         zvalue_value;\n+         struct _zval_struct {\n+         zvalue_value value;\n+        }\n+         php_output_globals;\n+         typedef struct _php_stream php_stream;\n+         typedef struct _php_stream_filter php_stream_filter;\n+         typedef struct _php_stream_bucket_brigade php_stream_bucket_brigade;\n+         typedef enum {\n+         PSFS_ERR_FATAL,  PSFS_FEED_ME,  PSFS_PASS_ON, }\n+         php_stream_filter_status_t;\n+         typedef struct _php_stream_filter_ops {\n+         php_stream_filter_status_t (*filter)(    php_stream *stream,    php_stream_filter *thisfilter,    php_stream_bucket_brigade *buckets_in,    php_stream_bucket_brigade *buckets_out,    size_t *bytes_consumed,    int flags    );\n+         void (*dtor)(php_stream_filter *thisfilter );\n+         const char *label;\n+        }\n+         php_stream_filter_ops;\n+         struct _php_stream_filter {\n+        };\n+         typedef struct _php_stream_filter_factory {\n+         php_stream_filter *(*create_filter)(const char *filtername, zval *filterparams, int persistent );\n+        }\n+         php_stream_filter_factory;\n+         typedef enum _php_conv_err_t {\n+         PHP_CONV_ERR_SUCCESS = 0,  PHP_CONV_ERR_UNKNOWN,  PHP_CONV_ERR_TOO_BIG,  PHP_CONV_ERR_INVALID_SEQ,  PHP_CONV_ERR_UNEXPECTED_EOS,  PHP_CONV_ERR_EXISTS,  PHP_CONV_ERR_MORE,  PHP_CONV_ERR_ALLOC,  PHP_CONV_ERR_NOT_FOUND }\n+         php_conv_err_t;\n+         typedef struct _php_conv php_conv;\n+         typedef php_conv_err_t (*php_conv_convert_func)(php_conv *, const char **, size_t *, char **, size_t *);\n+         struct _php_conv {\n+         php_conv_convert_func convert_op;\n+        }\n+         php_conv_base64_decode;\n+         typedef struct _php_conv_qprint_decode {\n+         php_conv _super;\n+         const char *lbchars;\n+        }\n+         php_conv_qprint_decode;\n+         static php_conv_err_t php_conv_qprint_decode_convert(php_conv_qprint_decode *inst, const char **in_pp, size_t *in_left_p, char **out_pp, size_t *out_left_p) {\n+         size_t icnt, ocnt;\n+         unsigned char *ps, *pd;\n+         unsigned int scan_stat;\n+         unsigned int lb_ptr, lb_cnt;\n+         for (;\n+       ;\n+       ) {\n+         switch (scan_stat) {\n+         case 0: {\n+         if (*ps == '=') {\n+         scan_stat = 1;\n+        }\n+     else {\n+         if (ocnt < 1) {\n+         goto out;\n+        }\n+         *(pd++) = *ps;\n+         ocnt--;\n+        }\n+        }\n+      break;\n+         case 1: {\n+         if (*ps == ' ' || *ps == '\\t') {\n+        }\n+     else if (!inst->lbchars && lb_cnt == 0 && *ps == '\\r') {\n+         lb_cnt++;\n+         scan_stat = 5;\n+         break;\n+        }\n+     else if (!inst->lbchars && lb_cnt == 0 && *ps == '\\n') {\n+         scan_stat = 0;\n+         break;\n+        }\n+        }\n+         case 2: {\n+         if (icnt <= 0) {\n+         goto out;\n+        }\n+        }\n+         case 3: {\n+        }\n+         case 4: {\n+         ps++, icnt--;\n+        }\n+        }\n+        }\n+        out:  *in_pp = (const char *)ps;\n+        }\n+         static php_conv_err_t php_conv_qprint_decode_ctor(php_conv_qprint_decode *inst, const char *lbchars, size_t lbchars_len, int lbchars_dup, int persistent) {\n+         inst->_super.convert_op = (php_conv_convert_func) php_conv_qprint_decode_convert;\n+        }\n+         typedef struct _php_convert_filter {\n+         php_conv *cd;\n+        }\n+         php_convert_filter;\n+         static php_conv *php_conv_open(int conv_mode, const HashTable *options, int persistent) {\n+         php_conv *retval = ((void *)0);\n+         switch (conv_mode) {\n+         case 4: {\n+         char *lbchars = ((void *)0);\n+         size_t lbchars_len;\n+         if (lbchars != ((void *)0)) {\n+         if (php_conv_qprint_decode_ctor((php_conv_qprint_decode *)retval, lbchars, lbchars_len, 1, persistent)) {\n+        }\n+        }\n+        }\n+        }\n+        }\n+         static int php_convert_filter_ctor(php_convert_filter *inst,  int conv_mode, HashTable *conv_opts,  const char *filtername, int persistent) {\n+         if ((inst->cd = php_conv_open(conv_mode, conv_opts, persistent)) == ((void *)0)) {\n+        }\n+        }\n+         static php_stream_filter_status_t strfilter_convert_filter(  php_stream *stream,  php_stream_filter *thisfilter,  php_stream_bucket_brigade *buckets_in,  php_stream_bucket_brigade *buckets_out,  size_t *bytes_consumed,  int flags  ) {\n+        }\n+         static void strfilter_convert_dtor(php_stream_filter *thisfilter ) {\n+        }\n+         static php_stream_filter_ops strfilter_convert_ops = {\n+         strfilter_convert_filter,  strfilter_convert_dtor,  \"convert.*\" };\n+         static php_stream_filter *strfilter_convert_create(const char *filtername, zval *filterparams, int persistent ) {\n+         php_convert_filter *inst;\n+         int conv_mode = 0;\n+         if (php_convert_filter_ctor(inst, conv_mode,   (filterparams != ((void *)0) ? (*filterparams).value.ht : ((void *)0)),   filtername, persistent) != 0) {\n+        }\n+        }\n+         static php_stream_filter_factory strfilter_convert_factory = {\n+         strfilter_convert_create };\n+         static const struct {\n+         php_stream_filter_ops *ops;\n+         php_stream_filter_factory *factory;\n+        }\n+         standard_filters[] = {\n+         {\n+       &strfilter_convert_ops, &strfilter_convert_factory }\n+        };\n+         int zm_startup_standard_filters(int type, int module_number ) {\n+         int i;\n+         for (i = 0;\n+        standard_filters[i].ops;\n+        i++) {\n+        }\n+        }"}]}