{"sha": "a11e2c22796847b37dbf9a0b164150033bc17168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExZTJjMjI3OTY4NDdiMzdkYmY5YTBiMTY0MTUwMDMzYmMxNzE2OA==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2001-09-06T22:32:54Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2001-09-06T22:32:54Z"}, "message": "jvm.h: Declare _Jv_RegisterResource.\n\n        * include/jvm.h: Declare _Jv_RegisterResource.\n        * gnu/gcj/Core.java, gnu/gcj/natCore.cc,\n        gnu/gcj/protocol/core/Connection.java,\n        gnu/gcj/protocol/core/Handler.java,\n        gnu/gcj/protocol/core/CoreInputStream.java,\n        gnu/gcj/protocol/core/natCoreInputStream.cc: New files.\n        * java/net/URL.java (setURLStreamHandler): Use\n        gnu.gcj.protocol.core.Handler for the core protocol.\n        * gnu/gcj/runtime/VMClassLoader.java (init): Add \"core:/\" to the\n        end of java.class.path.\n        * Makefile.am (ordinary_java_source_files): Add new java files.\n        (nat_source_files): Add new native code files.\n        * Makefile.in: Rebuilt.\n\nFrom-SVN: r45450", "tree": {"sha": "ce727c113b87b1cdaa86ced6af1018bb91186e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce727c113b87b1cdaa86ced6af1018bb91186e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11e2c22796847b37dbf9a0b164150033bc17168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11e2c22796847b37dbf9a0b164150033bc17168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11e2c22796847b37dbf9a0b164150033bc17168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11e2c22796847b37dbf9a0b164150033bc17168/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2767a670ee3fdefa997e76c2fcbaf67933e38f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2767a670ee3fdefa997e76c2fcbaf67933e38f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2767a670ee3fdefa997e76c2fcbaf67933e38f9"}], "stats": {"total": 533, "additions": 494, "deletions": 39}, "files": [{"sha": "469a8ec8a215a7047895b673fd29143514e559c2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -1,3 +1,19 @@\n+2001-09-06  Anthony Green  <green@redhat.com>\n+\n+\t* include/jvm.h: Declare _Jv_RegisterResource.\n+\t* gnu/gcj/Core.java, gnu/gcj/natCore.cc,\n+\tgnu/gcj/protocol/core/Connection.java,\n+\tgnu/gcj/protocol/core/Handler.java,\n+\tgnu/gcj/protocol/core/CoreInputStream.java,\n+\tgnu/gcj/protocol/core/natCoreInputStream.cc: New files.\n+\t* java/net/URL.java (setURLStreamHandler): Use\n+\tgnu.gcj.protocol.core.Handler for the core protocol.\n+\t* gnu/gcj/runtime/VMClassLoader.java (init): Add \"core:/\" to the\n+\tend of java.class.path.\n+\t* Makefile.am (ordinary_java_source_files): Add new java files.\n+\t(nat_source_files): Add new native code files.\n+\t* Makefile.in: Rebuilt.\n+\n 2001-09-05  Tom Tromey  <tromey@redhat.com>\n \n \t* java/util/Properties.java: Re-merged from Classpath."}, {"sha": "d30f5491ce2dfb0ca8066c59a490cf2d601a3fd8", "filename": "libjava/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -1109,11 +1109,15 @@ java/util/WeakHashMap.java\n ## awt_java_source_files.  If the .java file has a hand-maintained\n ## header, please list it in special_java_source_files.\n ordinary_java_source_files = $(core_java_source_files) \\\n+gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n gnu/gcj/io/DefaultMimeTypes.java \\\n gnu/gcj/io/MimeTypes.java \\\n gnu/gcj/io/SimpleSHSStream.java\t\\\n gnu/gcj/math/MPN.java \\\n+gnu/gcj/protocol/core/Connection.java \\\n+gnu/gcj/protocol/core/Handler.java \\\n+gnu/gcj/protocol/core/CoreInputStream.java \\\n gnu/gcj/protocol/file/Connection.java \\\n gnu/gcj/protocol/file/Handler.java \\\n gnu/gcj/protocol/http/Connection.java \\\n@@ -1464,6 +1468,7 @@ c_source_files = \\\n \n ## This lists all the C++ source files in subdirectories.\n nat_source_files = \\\n+gnu/gcj/natCore.cc \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n gnu/gcj/convert/Unicode_to_JIS.cc \\\n@@ -1474,6 +1479,7 @@ gnu/gcj/convert/natOutput_EUCJIS.cc \\\n gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n+gnu/gcj/protocol/core/natCoreInputStream.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\"}, {"sha": "9624503bccb1045f3e14020340e97d1e717aca42", "filename": "libjava/Makefile.in", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -123,38 +123,26 @@ libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n-@XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n+@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij rmic rmiregistry\n+@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij rmic rmiregistry\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n+@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -174,10 +162,8 @@ AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \\\n \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \\\n \t-DPREFIX=\"\\\"$(prefix)\\\"\"\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n@@ -245,8 +231,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -859,11 +844,15 @@ java/util/WeakHashMap.java\n \n \n ordinary_java_source_files = $(core_java_source_files) \\\n+gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n gnu/gcj/io/DefaultMimeTypes.java \\\n gnu/gcj/io/MimeTypes.java \\\n gnu/gcj/io/SimpleSHSStream.java\t\\\n gnu/gcj/math/MPN.java \\\n+gnu/gcj/protocol/core/Connection.java \\\n+gnu/gcj/protocol/core/Handler.java \\\n+gnu/gcj/protocol/core/CoreInputStream.java \\\n gnu/gcj/protocol/file/Connection.java \\\n gnu/gcj/protocol/file/Handler.java \\\n gnu/gcj/protocol/http/Connection.java \\\n@@ -1213,6 +1202,7 @@ c_source_files = \\\n #java/awt/natToolkit.cc\n \n nat_source_files = \\\n+gnu/gcj/natCore.cc \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n gnu/gcj/convert/Unicode_to_JIS.cc \\\n@@ -1223,6 +1213,7 @@ gnu/gcj/convert/natOutput_EUCJIS.cc \\\n gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n+gnu/gcj/protocol/core/natCoreInputStream.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n@@ -1379,13 +1370,14 @@ X_LIBS = @X_LIBS@\n X_EXTRA_LIBS = @X_EXTRA_LIBS@\n X_PRE_LIBS = @X_PRE_LIBS@\n libgcj_la_OBJECTS =  prims.lo posix.lo jni.lo exception.lo resolve.lo \\\n-defineclass.lo interpret.lo name-finder.lo \\\n+defineclass.lo interpret.lo name-finder.lo gnu/gcj/natCore.lo \\\n gnu/gcj/convert/JIS0208_to_Unicode.lo \\\n gnu/gcj/convert/JIS0212_to_Unicode.lo gnu/gcj/convert/Unicode_to_JIS.lo \\\n gnu/gcj/convert/natIconv.lo gnu/gcj/convert/natInput_EUCJIS.lo \\\n gnu/gcj/convert/natInput_SJIS.lo gnu/gcj/convert/natOutput_EUCJIS.lo \\\n gnu/gcj/convert/natOutput_SJIS.lo gnu/gcj/io/natSimpleSHSStream.lo \\\n-gnu/gcj/io/shs.lo gnu/gcj/runtime/natFirstThread.lo java/io/natFile.lo \\\n+gnu/gcj/io/shs.lo gnu/gcj/protocol/core/natCoreInputStream.lo \\\n+gnu/gcj/runtime/natFirstThread.lo java/io/natFile.lo \\\n java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n java/io/natObjectOutputStream.lo java/lang/natCharacter.lo \\\n java/lang/natClass.lo java/lang/natClassLoader.lo \\\n@@ -1443,7 +1435,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -1460,9 +1452,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/awt/xlib/XGraphics.P \\\n .deps/gnu/awt/xlib/XGraphicsConfiguration.P \\\n .deps/gnu/awt/xlib/XPanelPeer.P .deps/gnu/awt/xlib/XToolkit.P \\\n-.deps/gnu/classpath/Configuration.P .deps/gnu/gcj/RawData.P \\\n-.deps/gnu/gcj/awt/BitMaskExtent.P .deps/gnu/gcj/awt/Buffers.P \\\n-.deps/gnu/gcj/awt/ComponentDataBlitOp.P \\\n+.deps/gnu/classpath/Configuration.P .deps/gnu/gcj/Core.P \\\n+.deps/gnu/gcj/RawData.P .deps/gnu/gcj/awt/BitMaskExtent.P \\\n+.deps/gnu/gcj/awt/Buffers.P .deps/gnu/gcj/awt/ComponentDataBlitOp.P \\\n .deps/gnu/gcj/awt/GLightweightPeer.P \\\n .deps/gnu/gcj/convert/BytesToUnicode.P .deps/gnu/gcj/convert/Convert.P \\\n .deps/gnu/gcj/convert/IOConverter.P \\\n@@ -1489,7 +1481,12 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/io/DefaultMimeTypes.P .deps/gnu/gcj/io/MimeTypes.P \\\n .deps/gnu/gcj/io/SimpleSHSStream.P \\\n .deps/gnu/gcj/io/natSimpleSHSStream.P .deps/gnu/gcj/io/shs.P \\\n-.deps/gnu/gcj/math/MPN.P .deps/gnu/gcj/protocol/file/Connection.P \\\n+.deps/gnu/gcj/math/MPN.P .deps/gnu/gcj/natCore.P \\\n+.deps/gnu/gcj/protocol/core/Connection.P \\\n+.deps/gnu/gcj/protocol/core/CoreInputStream.P \\\n+.deps/gnu/gcj/protocol/core/Handler.P \\\n+.deps/gnu/gcj/protocol/core/natCoreInputStream.P \\\n+.deps/gnu/gcj/protocol/file/Connection.P \\\n .deps/gnu/gcj/protocol/file/Handler.P \\\n .deps/gnu/gcj/protocol/http/Connection.P \\\n .deps/gnu/gcj/protocol/http/Handler.P \\\n@@ -2474,7 +2471,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "15a7e5c1255343e1336085e9bd8b75227b45459e", "filename": "libjava/gnu/gcj/Core.java", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2FCore.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2FCore.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FCore.java?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -0,0 +1,18 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj;\n+\n+public class Core\n+{\n+  public native static Core create (String name) throws java.io.IOException;\n+\n+  public RawData ptr;\n+  public int length;\n+}\n+"}, {"sha": "8e7a02405279a234f0e2b98d6fa1bc066c903f77", "filename": "libjava/gnu/gcj/natCore.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FnatCore.cc?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -0,0 +1,82 @@\n+// natCore -- C++ side of Core\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* Author: Anthony Green <green@redhat.com>.  */\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#include <java/lang/NullPointerException.h>\n+#include <java/io/IOException.h>\n+#include <gnu/gcj/Core.h>\n+\n+typedef struct core_chain_struct\n+{\n+  int name_length;\n+  const char *name;\n+  int data_length;\n+  const void *data;\n+  \n+  struct core_chain_struct *next;\n+} core_chain;\n+\n+static core_chain *root;\n+\n+void _Jv_RegisterResource (void *vptr)\n+{\n+  char *rptr = (char *)vptr;\n+\n+  // These are permanent data structures for now.  This routine is\n+  // called from a static constructor, so we shouldn't depend on too\n+  // much existing infrastructure.\n+  core_chain *cc = (core_chain *) malloc (sizeof (core_chain));\n+\n+  cc->name_length = ((int *)rptr)[0];\n+  cc->data_length = ((int *)rptr)[1];\n+  cc->name = rptr + 2*sizeof(int);\n+  cc->data = cc->name + cc->name_length;\n+\n+  // Add this new item to the chain...\n+  core_chain *old_root = root;\n+  cc->next = old_root;\n+  root = cc;\n+}\n+\n+gnu::gcj::Core *\n+gnu::gcj::Core::create (jstring name)\n+{\n+  char buf[name->length() + 1];\n+  jsize total = JvGetStringUTFRegion (name, 0, name->length(), buf);\n+  buf[total] = '\\0';\n+\n+  core_chain *node = root;\n+\n+  while (node)\n+    {\n+      if (total == node->name_length\n+\t  && strncmp (buf, node->name, total) == 0)\n+\t{\n+\t  gnu::gcj::Core *core = \n+\t    (gnu::gcj::Core *) _Jv_AllocObject(&gnu::gcj::Core::class$,\n+\t\t\t\t\t       sizeof (gnu::gcj::Core));\n+\t  core->ptr = (gnu::gcj::RawData *) node->data;\n+\t  core->length = node->data_length;\n+\t  return core;\n+\t}\n+      else\n+\tnode = node->next;\n+    }\n+\n+  throw new java::io::IOException (JvNewStringLatin1 (\"can't open core\"));\n+}"}, {"sha": "6513e33621455235f0048165a0ee5b7731f8b73a", "filename": "libjava/gnu/gcj/protocol/core/Connection.java", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FConnection.java?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -0,0 +1,154 @@\n+// Connection.java - Implementation of URLConnection for core protocol.\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.protocol.core;\n+\n+import gnu.gcj.Core;\n+import java.net.*;\n+import java.io.*;\n+import java.util.Vector;\n+import java.util.Hashtable;\n+import java.util.Enumeration;\n+\n+/**\n+ * @author Anthony Green <green@redhat.com>\n+ * @date August 13, 2001\n+ */\n+\n+class Connection extends URLConnection\n+{\n+  private Hashtable hdrHash = new Hashtable();\n+  private Vector hdrVec = new Vector();\n+  private boolean gotHeaders = false;\n+\n+  private Core core;\n+\n+  public Connection(URL url)\n+  {\n+    super(url);\n+  }\n+\n+  // Implementation of abstract method.\n+  public void connect() throws IOException\n+  {\n+    // Call is ignored if already connected.\n+    if (connected)\n+      return;\n+\n+    // If not connected, then file needs to be opened.\n+    core = Core.create (url.getFile());\n+    connected = true;\n+  }\n+\n+  public InputStream getInputStream() throws IOException\n+  {\n+    if (!connected)\n+      connect();\n+\n+    if (! doInput)\n+      throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n+    return new BufferedInputStream(new CoreInputStream (core));\n+  }\n+\n+  // Override default method in URLConnection.\n+  public String getHeaderField(String name)\n+  {\n+    try\n+      {\n+\tgetHeaders();\n+      }\n+    catch (IOException x)\n+      {\n+\treturn null;\n+      }\n+    return (String) hdrHash.get(name.toLowerCase());\n+  }\n+\n+  // Override default method in URLConnection.\n+  public String getHeaderField(int n)\n+  {\n+    try\n+      {\n+\tgetHeaders();\n+      }\n+    catch (IOException x)\n+      {\n+\treturn null;\n+      }\n+    if (n < hdrVec.size())\n+      return getField((String) hdrVec.elementAt(n));\n+\n+    return null;\n+  }\n+\n+  // Override default method in URLConnection.\n+  public String getHeaderFieldKey(int n)\n+  {\n+    try\n+      {\n+\tgetHeaders();\n+      }\n+    catch (IOException x)\n+      {\n+\treturn null;\n+      }\n+    if (n < hdrVec.size())\n+      return getKey((String) hdrVec.elementAt(n));\n+\n+    return null;\n+  }\n+\n+  private String getKey(String str)\n+  {\n+    if (str == null)\n+      return null;\n+    int index = str.indexOf(':');\n+    if (index >= 0)\n+      return str.substring(0, index);\n+    else\n+      return null;\n+  }\n+\n+  private String getField(String str)\n+  {\n+    if (str == null)\n+      return null;\n+    int index = str.indexOf(':');\n+    if (index >= 0)\n+      return str.substring(index + 1).trim();\n+    else\n+      return str;\n+  }\n+\n+  private void getHeaders() throws IOException\n+  {\n+    if (gotHeaders)\n+      return;\n+    gotHeaders = true;\n+\n+    connect();\n+\n+    // Yes, it is overkill to use the hash table and vector here since\n+    // we're only putting one header in the file, but in case we need\n+    // to add others later and for consistency, we'll implement it this way.\n+\n+    // Add the only header we know about right now:  Content-length.\n+    long len = core.length;\n+    String line = \"Content-length: \" + len;\n+    hdrVec.addElement(line);\n+\n+    // The key will never be null in this scenario since we build up the\n+    // headers ourselves.  If we ever rely on getting a header from somewhere\n+    // else, then we may have to check if the result of getKey() is null.\n+    String key = getKey(line);\n+    hdrHash.put(key.toLowerCase(), Long.toString(len));\n+  }\n+}\n+"}, {"sha": "3dd0524f162626483e29336b98520db0cb2a5144", "filename": "libjava/gnu/gcj/protocol/core/CoreInputStream.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FCoreInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FCoreInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FCoreInputStream.java?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -0,0 +1,89 @@\n+// Handler.java - URLStreamHandler for core protocol.\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.protocol.core;\n+\n+import java.io.*;\n+import gnu.gcj.Core;\n+import gnu.gcj.RawData;\n+\n+public class CoreInputStream extends InputStream\n+{\n+  /* A pointer to the object in memory.  */\n+  protected RawData ptr;\n+\n+  /* Position of the next byte in core to be read. */\n+  protected int pos;\n+\n+  /* The currently marked position in the stream. */\n+  protected int mark;\n+\n+  /* The index in core one greater than the last valid character. */\n+  protected int count;\n+\n+  private native int unsafeGetByte (long offset);\n+  private native int copyIntoByteArray (byte[] dest, int offset, int numBytes);\n+\n+  public CoreInputStream (Core core)\n+  {\n+    ptr = core.ptr;\n+    count = core.length;\n+  }\n+\n+  public synchronized int available()\n+  {\n+    return count - pos;\n+  }\n+\n+  public synchronized void mark(int readAheadLimit)\n+  {\n+    // readAheadLimit is ignored per Java Class Lib. book, p.220.\n+    mark = pos;\n+  }\n+\n+  public boolean markSupported()\n+  {\n+    return true;\n+  }\n+\n+  public synchronized int read()\n+  {\n+    if (pos < count)\n+      return ((int) unsafeGetByte(pos++)) & 0xFF;\n+    return -1;\n+  }\n+\n+  public synchronized int read(byte[] b, int off, int len)\n+  {\n+    if (pos >= count)\n+      return -1;\n+\n+    int numBytes = Math.min(count - pos, len);\n+    copyIntoByteArray (b, off, numBytes);\n+    pos += numBytes;\n+    return numBytes;\n+  }\n+\n+  public synchronized void reset()\n+  {\n+    pos = mark;\n+  }\n+\n+  public synchronized long skip(long n)\n+  {\n+    // Even though the var numBytes is a long, in reality it can never\n+    // be larger than an int since the result of subtracting 2 positive\n+    // ints will always fit in an int.  Since we have to return a long\n+    // anyway, numBytes might as well just be a long.\n+    long numBytes = Math.min((long) (count - pos), n < 0 ? 0L : n);\n+    pos += numBytes;\n+    return numBytes;\n+  }\n+}"}, {"sha": "474ae6fdab0766a55368c4e87a5b10e9ddf26bb7", "filename": "libjava/gnu/gcj/protocol/core/Handler.java", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FHandler.java?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -0,0 +1,29 @@\n+// Handler.java - URLStreamHandler for core protocol.\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.protocol.core;\n+\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.io.IOException;\n+\n+/**\n+ * @author Anthony Green <green@redhat.com>\n+ * @date August 13, 2001.\n+ */\n+\n+public class Handler extends URLStreamHandler\n+{\n+  protected URLConnection openConnection(URL url) throws IOException\n+  {\n+    return new Connection(url);\n+  }\n+}"}, {"sha": "0a61ec074f47257ad8d6e686932b255bf311d876", "filename": "libjava/gnu/gcj/protocol/core/natCoreInputStream.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FnatCoreInputStream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FnatCoreInputStream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FnatCoreInputStream.cc?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -0,0 +1,49 @@\n+// natCoreInputStream.cc -- C++ side of CoreInputStream\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* Author: Anthony Green <green@redhat.com>.  */\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+#include <string.h>\n+\n+#include <java/lang/NullPointerException.h>\n+#include <java/lang/ArrayIndexOutOfBoundsException.h>\n+#include <gnu/gcj/protocol/core/CoreInputStream.h>\n+\n+jint\n+gnu::gcj::protocol::core::CoreInputStream::unsafeGetByte (jlong offset)\n+{\n+  return ((char *)ptr)[offset];\n+}\n+\n+jint\n+gnu::gcj::protocol::core::CoreInputStream::copyIntoByteArray (jbyteArray dest,\n+\t\t\t\t\t\t\t      jint offset,\n+\t\t\t\t\t\t\t      jint numBytes)\n+{\n+  if (! dest)\n+    throw new java::lang::NullPointerException; \n+  jsize destSize = JvGetArrayLength (dest);\n+  if (offset < 0 || numBytes < 0 || offset + numBytes < 0\n+      || offset + numBytes > destSize\n+      || pos + numBytes > count)\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n+\n+  void *pcore = (void *) &((char*)ptr)[pos];\n+  void *pdest = (void *) (elements (dest) + offset);\n+\n+  memcpy (pdest, pcore, numBytes);\n+\n+  return 0;\n+}\n+"}, {"sha": "77d21606621fc4b9468608bc063bc73a6c9f25a9", "filename": "libjava/gnu/gcj/runtime/VMClassLoader.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -56,6 +56,16 @@ else if (new File (e).isDirectory ())\n \t    /* Ignore this path element */\n \t  }\n       }\n+    // Add core:/ to the end of the java.class.path so any resources\n+    // compiled into this executable may be found.\n+    try\n+      {\n+\tp.addElement (new URL(\"core\", \"\", -1, \"/\"));\n+      }\n+    catch (java.net.MalformedURLException x)\n+      {\n+\t// This should never happen.\n+      }\n \n     URL[] urls = new URL[p.size()];\n     p.copyInto (urls);"}, {"sha": "3f9071c347f2ce938e2b15cc25359f5da036514d", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -224,6 +224,7 @@ extern \"C\" void *_Jv_LookupInterfaceMethodIdx (jclass klass, jclass iface,\n extern \"C\" void _Jv_CheckArrayStore (jobject array, jobject obj);\n extern \"C\" void _Jv_RegisterClass (jclass klass);\n extern \"C\" void _Jv_RegisterClasses (jclass *classes);\n+extern \"C\" void _Jv_RegisterResource (void *vptr);\n extern void _Jv_UnregisterClass (_Jv_Utf8Const*, java::lang::ClassLoader*);\n extern void _Jv_ResolveField (_Jv_Field *, java::lang::ClassLoader*);\n "}, {"sha": "25291fad892b1c430b422444d5fcf86abe60c10e", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11e2c22796847b37dbf9a0b164150033bc17168/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=a11e2c22796847b37dbf9a0b164150033bc17168", "patch": "@@ -339,6 +339,10 @@ private URLStreamHandler setURLStreamHandler(String protocol)\n     // If a non-default factory has been set, use it to find the protocol.\n     if (factory != null)\n       handler = factory.createURLStreamHandler(protocol);\n+    else if (protocol.equals (\"core\"))\n+      {\n+ \thandler = new gnu.gcj.protocol.core.Handler ();\n+      }\n     else if (protocol.equals (\"file\"))\n       {\n \t// This is an interesting case.  It's tempting to think that we"}]}