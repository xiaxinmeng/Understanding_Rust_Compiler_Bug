{"sha": "01b9977477971a04c95488e489999bc3d4b43bb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiOTk3NzQ3Nzk3MWEwNGM5NTQ4OGU0ODk5OTliYzNkNGI0M2JiMw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-29T01:32:23Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-29T01:32:23Z"}, "message": "re PR fortran/44931 (For INPUT_UNIT, INQUIRE NAME= should not return \"stdin\")\n\n2010-07-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/44931\n\t* io/inquire.c (inquire_via_unit): Use ttyname to return actual device\n\tfile name for stdin, stdout, and stderr.  If ttyname does not succeed\n\tfall back to default names for these units. Include string.h to allow\n\tusing strlen function.\n\t* unix.c: Remove typedef of unix_stream structure, move to unix.h.\n\t* unix.h: Add typedef of unix_stream structure so that it is\n\taccessible to inquire.c.\n\nFrom-SVN: r162667", "tree": {"sha": "ed3790f513f08394de93694eb89a85e8e02d5c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed3790f513f08394de93694eb89a85e8e02d5c8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01b9977477971a04c95488e489999bc3d4b43bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b9977477971a04c95488e489999bc3d4b43bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b9977477971a04c95488e489999bc3d4b43bb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b9977477971a04c95488e489999bc3d4b43bb3/comments", "author": null, "committer": null, "parents": [{"sha": "fb1341901a435aa26ef846612f9dc98c45d8403f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1341901a435aa26ef846612f9dc98c45d8403f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1341901a435aa26ef846612f9dc98c45d8403f"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "25581552e5e78079e1b196f71931fa12385da6b5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=01b9977477971a04c95488e489999bc3d4b43bb3", "patch": "@@ -1,3 +1,14 @@\n+2010-07-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/44931\n+\t* io/inquire.c (inquire_via_unit): Use ttyname to return actual device\n+\tfile name for stdin, stdout, and stderr.  If ttyname does not succeed\n+\tfall back to default names for these units. Include string.h to allow\n+\tusing strlen function.\n+\t* unix.c: Remove typedef of unix_stream structure, move to unix.h.\n+\t* unix.h: Add typedef of unix_stream structure so that it is\n+\taccessible to inquire.c.\n+\n 2010-07-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/44953"}, {"sha": "1189c544b3538aef5115886d2dbf003253d99237", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=01b9977477971a04c95488e489999bc3d4b43bb3", "patch": "@@ -26,6 +26,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Implement the non-IOLENGTH variant of the INQUIRY statement */\n \n+#include <string.h>\n #include \"io.h\"\n #include \"unix.h\"\n \n@@ -66,7 +67,25 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \n   if ((cf & IOPARM_INQUIRE_HAS_NAME) != 0\n       && u != NULL && u->flags.status != STATUS_SCRATCH)\n-    fstrcpy (iqp->name, iqp->name_len, u->file, u->file_len);\n+    {\n+#ifdef HAVE_TTYNAME\n+      if (u->unit_number == options.stdin_unit\n+\t  || u->unit_number == options.stdout_unit\n+\t  || u->unit_number == options.stderr_unit)\n+\t{\n+\t  char * tmp = ttyname (((unix_stream *) u->s)->fd);\n+\t  if (tmp != NULL)\n+\t    {\n+\t      int tmplen = strlen (tmp);\n+\t      fstrcpy (iqp->name, iqp->name_len, tmp, tmplen);\n+\t    }\n+\t  else /* If ttyname does not work, go with the default.  */\n+\t    fstrcpy (iqp->name, iqp->name_len, u->file, u->file_len);\n+\t}\n+      else\n+#endif\n+\tfstrcpy (iqp->name, iqp->name_len, u->file, u->file_len);\n+    }\n \n   if ((cf & IOPARM_INQUIRE_HAS_ACCESS) != 0)\n     {"}, {"sha": "eea03ba7f819618ff40f26c6bba5f7d15cacfb35", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=01b9977477971a04c95488e489999bc3d4b43bb3", "patch": "@@ -135,28 +135,6 @@ typedef struct stat gfstat_t;\n \n static const int BUFFER_SIZE = 8192;\n \n-typedef struct\n-{\n-  stream st;\n-\n-  gfc_offset buffer_offset;\t/* File offset of the start of the buffer */\n-  gfc_offset physical_offset;\t/* Current physical file offset */\n-  gfc_offset logical_offset;\t/* Current logical file offset */\n-  gfc_offset file_length;\t/* Length of the file, -1 if not seekable. */\n-\n-  char *buffer;                 /* Pointer to the buffer.  */\n-  int fd;                       /* The POSIX file descriptor.  */\n-\n-  int active;\t\t\t/* Length of valid bytes in the buffer */\n-\n-  int prot;\n-  int ndirty;\t\t\t/* Dirty bytes starting at buffer_offset */\n-\n-  int special_file;\t\t/* =1 if the fd refers to a special file */\n-}\n-unix_stream;\n-\n-\n /* fix_fd()-- Given a file descriptor, make sure it is not one of the\n  * standard descriptors, returning a non-standard descriptor.  If the\n  * user specifies that system errors should go to standard output,"}, {"sha": "dc433d75a8ae01ad9dc6b0528e53849e8128d8a3", "filename": "libgfortran/io/unix.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2Fio%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9977477971a04c95488e489999bc3d4b43bb3/libgfortran%2Fio%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.h?ref=01b9977477971a04c95488e489999bc3d4b43bb3", "patch": "@@ -41,6 +41,29 @@ struct stream\n   int (*close) (struct stream *);\n };\n \n+\n+typedef struct\n+{\n+  stream st;\n+\n+  gfc_offset buffer_offset;\t/* File offset of the start of the buffer */\n+  gfc_offset physical_offset;\t/* Current physical file offset */\n+  gfc_offset logical_offset;\t/* Current logical file offset */\n+  gfc_offset file_length;\t/* Length of the file, -1 if not seekable. */\n+\n+  char *buffer;                 /* Pointer to the buffer.  */\n+  int fd;                       /* The POSIX file descriptor.  */\n+\n+  int active;\t\t\t/* Length of valid bytes in the buffer */\n+\n+  int prot;\n+  int ndirty;\t\t\t/* Dirty bytes starting at buffer_offset */\n+\n+  int special_file;\t\t/* =1 if the fd refers to a special file */\n+}\n+unix_stream;\n+\n+\n /* Inline functions for doing file I/O given a stream.  */\n static inline ssize_t\n sread (stream * s, void * buf, ssize_t nbyte)"}]}