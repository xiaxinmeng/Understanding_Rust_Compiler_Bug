{"sha": "e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAxY2M2ZGM2MjE3ZTkzYzNhYzU1YzM0NmE1ZTVlNmM5MWMzY2E4ZA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-20T22:56:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-20T22:56:36Z"}, "message": "c-decl.c (store_parm_decls): Make saved_warn_shadow boolean.\n\n\t* c-decl.c (store_parm_decls): Make saved_warn_shadow boolean.\n\t* common.opt: Add remaining -W options and -g.\n\t* diagnostic.c (warnings_are_errors): Remove.\n\t* flags.h: Make most warning flags boolean.\n\t* opts.c (common_handle_option): Handle remaining -W options, and -g.\n\tMove many warning flags from toplev.c, making them boolean.\n\t* toplev.c: Remove many warning flags.\n\t(decode_W_option): Remove.\n\t(decode_g_option): Make extern.  Error on unknown switch.\n\t(lang_independent_W_options): Use warn_dummy.\n\t(independent_decode_option): Just handle -f switches now.\n\t* toplev.h (decode_g_option): New.\n\nFrom-SVN: r68287", "tree": {"sha": "0acc390403d38fbc9323dc9427575fc786cec53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0acc390403d38fbc9323dc9427575fc786cec53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb0f0f5d2c6e51de3b8df71b6b3abd5d5f928a0"}], "stats": {"total": 531, "additions": 323, "deletions": 208}, "files": [{"sha": "afb35b1bf9497305b61fb73625aaf57d4534de5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -1,3 +1,18 @@\n+2003-06-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-decl.c (store_parm_decls): Make saved_warn_shadow boolean.\n+\t* common.opt: Add remaining -W options and -g.\n+\t* diagnostic.c (warnings_are_errors): Remove.\n+\t* flags.h: Make most warning flags boolean.\n+\t* opts.c (common_handle_option): Handle remaining -W options, and -g.\n+\tMove many warning flags from toplev.c, making them boolean.\n+\t* toplev.c: Remove many warning flags.\n+\t(decode_W_option): Remove.\n+\t(decode_g_option): Make extern.  Error on unknown switch.\n+\t(lang_independent_W_options): Use warn_dummy.\n+\t(independent_decode_option): Just handle -f switches now.\n+\t* toplev.h (decode_g_option): New.\n+\n 2003-06-20  Aldy Hernandez  <aldyh@redhat.com>\n \t\n \tPR/11092"}, {"sha": "c635a9d60ecd22f8e579c84c0c31906414b04d15", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -5719,10 +5719,10 @@ store_parm_decls (void)\n   /* Nonzero if this definition is written with a prototype.  */\n   int prototype = 0;\n \n-  int saved_warn_shadow = warn_shadow;\n+  bool saved_warn_shadow = warn_shadow;\n \n   /* Don't re-emit shadow warnings.  */\n-  warn_shadow = 0;\n+  warn_shadow = false;\n \n   if (specparms != 0 && TREE_CODE (specparms) != TREE_LIST)\n     {"}, {"sha": "7ce20bb8ee5b048c2d27ade54323734e185df574", "filename": "gcc/common.opt", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -46,12 +46,81 @@ Common\n W\n Common RejectNegative\n \n+Waggregate-return\n+Common\n+\n+Wcast-align\n+Common\n+\n+Wdeprecated-declarations\n+Common\n+\n+Wdisabled-optimization\n+Common\n+\n+Werror\n+Common\n+\n Wextra\n Common\n \n+Winline\n+Common\n+\n+Wlarger-than-\n+Common RejectNegative Joined UInteger\n+\n+Wmissing-noreturn\n+Common\n+\n+Wpacked\n+Common\n+\n+Wpadded\n+Common\n+\n+Wshadow\n+Common\n+\n+Wstrict-aliasing\n+Common\n+\n+Wswitch\n+Common\n+\n+Wswitch-default\n+Common\n+\n+Wswitch-enum\n+Common\n+\n+Wsystem-headers\n+Common\n+\n+Wuninitialized\n+Common\n+\n+Wunreachable-code\n+Common\n+\n Wunused\n Common\n \n+Wunused-function\n+Common\n+\n+Wunused-label\n+Common\n+\n+Wunused-parameter\n+Common\n+\n+Wunused-value\n+Common\n+\n+Wunused-variable\n+Common\n+\n aux-info\n Common Separate\n \n@@ -70,6 +139,9 @@ Common Joined\n dumpbase\n Common Separate\n \n+g\n+Common JoinedOrMissing\n+\n m\n Common Joined\n "}, {"sha": "35fbb6f2288c5444c3485b02bee00101b2b9474c", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -85,7 +85,6 @@ static void diagnostic_action_after_output (diagnostic_context *,\n static void real_abort (void) ATTRIBUTE_NORETURN;\n \n extern int rtl_dump_and_exit;\n-extern int warnings_are_errors;\n \n /* A diagnostic_context surrogate for stderr.  */\n static diagnostic_context global_diagnostic_context;"}, {"sha": "6ef4ece90831a7ec0dd5a6694223e895a2588935", "filename": "gcc/flags.h", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -77,58 +77,62 @@ extern int mem_report;\n \n /* Don't print warning messages.  -w.  */\n \n-extern int inhibit_warnings;\n+extern bool inhibit_warnings;\n \n /* Don't suppress warnings from system headers.  -Wsystem-headers.  */\n \n-extern int warn_system_headers;\n+extern bool warn_system_headers;\n \n /* Do print extra warnings (such as for uninitialized variables).\n    -W/-Wextra.  */\n \n-extern int extra_warnings;\n+extern bool extra_warnings;\n+\n+/* If -Werror.  */\n+\n+extern bool warnings_are_errors;\n \n /* Nonzero to warn about unused variables, functions et.al.  Use\n    set_Wunused() to update the -Wunused-* flags that correspond to the\n    -Wunused option.  */\n \n extern void set_Wunused PARAMS ((int setting));\n \n-extern int warn_unused_function;\n-extern int warn_unused_label;\n-extern int warn_unused_parameter;\n-extern int warn_unused_variable;\n-extern int warn_unused_value;\n+extern bool warn_unused_function;\n+extern bool warn_unused_label;\n+extern bool warn_unused_parameter;\n+extern bool warn_unused_variable;\n+extern bool warn_unused_value;\n \n /* Nonzero to warn about code which is never reached.  */\n \n-extern int warn_notreached;\n+extern bool warn_notreached;\n \n /* Nonzero means warn if inline function is too large.  */\n \n-extern int warn_inline;\n+extern bool warn_inline;\n \n /* Nonzero to warn about variables used before they are initialized.  */\n \n extern int warn_uninitialized;\n \n /* Nonzero means warn about all declarations which shadow others.  */\n \n-extern int warn_shadow;\n+extern bool warn_shadow;\n \n /* Warn if a switch on an enum, that does not have a default case,\n    fails to have a case for every enum value.  */\n \n-extern int warn_switch;\n+extern bool warn_switch;\n \n /* Warn if a switch does not have a default case.  */\n \n-extern int warn_switch_default;\n+extern bool warn_switch_default;\n \n /* Warn if a switch on an enum fails to have a case for every enum\n    value (regardless of the presence or otherwise of a default case).  */\n \n-extern int warn_switch_enum;\n+extern bool warn_switch_enum;\n \n /* Nonzero means warn about function definitions that default the return type\n    or that use a null return and have a return-type other than void.  */\n@@ -137,47 +141,47 @@ extern int warn_return_type;\n \n /* Warn about functions which might be candidates for attribute noreturn.  */\n \n-extern int warn_missing_noreturn;\n+extern bool warn_missing_noreturn;\n \n /* Nonzero means warn about pointer casts that increase the required\n    alignment of the target type (and might therefore lead to a crash\n    due to a misaligned access).  */\n \n-extern int warn_cast_align;\n+extern bool warn_cast_align;\n \n /* Nonzero means warn about any objects definitions whose size is larger\n    than N bytes.  Also want about function definitions whose returned\n    values are larger than N bytes. The value N is in `larger_than_size'.  */\n \n-extern int warn_larger_than;\n+extern bool warn_larger_than;\n extern HOST_WIDE_INT larger_than_size;\n \n /* Warn if a function returns an aggregate,\n    since there are often incompatible calling conventions for doing this.  */\n \n-extern int warn_aggregate_return;\n+extern bool warn_aggregate_return;\n \n /* Warn if packed attribute on struct is unnecessary and inefficient.  */\n \n-extern int warn_packed;\n+extern bool warn_packed;\n \n /* Warn when gcc pads a structure to an alignment boundary.  */\n \n-extern int warn_padded;\n+extern bool warn_padded;\n \n /* Warn when an optimization pass is disabled.  */\n \n-extern int warn_disabled_optimization;\n+extern bool warn_disabled_optimization;\n \n /* Nonzero means warn about uses of __attribute__((deprecated)) \n    declarations.  */\n \n-extern int warn_deprecated_decl;\n+extern bool warn_deprecated_decl;\n \n /* Nonzero means warn about constructs which might not be strict\n    aliasing safe.  */\n \n-extern int warn_strict_aliasing;\n+extern bool warn_strict_aliasing;\n \n /* Nonzero if generating code to do profiling.  */\n "}, {"sha": "ddd116938ab141e3c23976891df9ed9b637fb21c", "filename": "gcc/opts.c", "status": "modified", "additions": 175, "deletions": 2, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -41,6 +41,83 @@ bool exit_after_options;\n /* If -version.  */\n bool version_flag;\n \n+/* Print various extra warnings.  -W/-Wextra.  */\n+bool extra_warnings;\n+\n+/* Don't print warning messages.  -w.  */\n+bool inhibit_warnings;\n+\n+/* Treat warnings as errors.  -Werror.  */\n+bool warnings_are_errors;\n+\n+/* Warn if a function returns an aggregate, since there are often\n+   incompatible calling conventions for doing this.  */\n+bool warn_aggregate_return;\n+\n+/* Nonzero means warn about pointer casts that increase the required\n+   alignment of the target type (and might therefore lead to a crash\n+   due to a misaligned access).  */\n+bool warn_cast_align;\n+\n+/* Nonzero means warn about uses of __attribute__((deprecated))\n+   declarations.  */\n+bool warn_deprecated_decl = true;\n+\n+/* Warn when an optimization pass is disabled.  */\n+bool warn_disabled_optimization;\n+\n+/* Nonzero means warn if inline function is too large.  */\n+bool warn_inline;\n+\n+/* True to warn about any objects definitions whose size is larger\n+   than N bytes.  Also want about function definitions whose returned\n+   values are larger than N bytes, where N is `larger_than_size'.  */\n+bool warn_larger_than;\n+HOST_WIDE_INT larger_than_size;\n+\n+/* Warn about functions which might be candidates for attribute noreturn.  */\n+bool warn_missing_noreturn;\n+\n+/* True to warn about code which is never reached.  */\n+bool warn_notreached;\n+\n+/* Warn if packed attribute on struct is unnecessary and inefficient.  */\n+bool warn_packed;\n+\n+/* Warn when gcc pads a structure to an alignment boundary.  */\n+bool warn_padded;\n+\n+/* True means warn about all declarations which shadow others.  */\n+bool warn_shadow;\n+\n+/* Nonzero means warn about constructs which might not be\n+   strict-aliasing safe.  */\n+bool warn_strict_aliasing;\n+\n+/* True to warn if a switch on an enum, that does not have a default\n+   case, fails to have a case for every enum value.  */\n+bool warn_switch;\n+\n+/* Warn if a switch does not have a default case.  */\n+bool warn_switch_default;\n+\n+/* Warn if a switch on an enum fails to have a case for every enum\n+   value (regardless of the presence or otherwise of a default case).  */\n+bool warn_switch_enum;\n+\n+/* Don't suppress warnings from system headers.  -Wsystem-headers.  */\n+bool warn_system_headers;\n+\n+/* True to warn about variables used before they are initialized.  */\n+int warn_uninitialized;\n+\n+/* True to warn about unused variables, functions et.al.  */\n+bool warn_unused_function;\n+bool warn_unused_label;\n+bool warn_unused_parameter;\n+bool warn_unused_variable;\n+bool warn_unused_value;\n+\n /* Hack for cooperation between set_Wunused and set_Wextra.  */\n static bool maybe_warn_unused_parameter;\n \n@@ -136,7 +213,7 @@ find_opt (const char *input, int lang_mask)\n   return result;\n }\n \n-/* If ARG is a postive integer made up solely of digits, return its\n+/* If ARG is a non-negative integer made up solely of digits, return its\n    value, otherwise return -1.  */\n static int\n integral_argument (const char *arg)\n@@ -316,14 +393,106 @@ common_handle_option (size_t scode, const char *arg,\n       set_Wextra (value);\n       break;\n \n+    case OPT_Waggregate_return:\n+      warn_aggregate_return = value;\n+      break;\n+\n+    case OPT_Wcast_align:\n+      warn_cast_align = value;\n+      break;\n+\n+    case OPT_Wdeprecated_declarations:\n+      warn_deprecated_decl = value;\n+\n+    case OPT_Wdisabled_optimization:\n+      warn_disabled_optimization = value;\n+      break;\n+\n+    case OPT_Werror:\n+      warnings_are_errors = value;\n+      break;\n+\n     case OPT_Wextra:\n       set_Wextra (value);\n       break;\n \n+    case OPT_Winline:\n+      warn_inline = value;\n+      break;\n+\n+    case OPT_Wlarger_than_:\n+      larger_than_size = value;\n+      warn_larger_than = value != -1;\n+      break;\n+\n+    case OPT_Wmissing_noreturn:\n+      warn_missing_noreturn = value;\n+      break;\n+\n+    case OPT_Wpacked:\n+      warn_packed = value;\n+      break;\n+\n+    case OPT_Wpadded:\n+      warn_padded = value;\n+      break;\n+\n+    case OPT_Wshadow:\n+      warn_shadow = value;\n+      break;\n+\n+    case OPT_Wstrict_aliasing:\n+      warn_strict_aliasing = value;\n+      break;\n+\n+    case OPT_Wswitch:\n+      warn_switch = value;\n+      break;\n+\n+    case OPT_Wswitch_default:\n+      warn_switch_default = value;\n+      break;\n+\n+    case OPT_Wswitch_enum:\n+      warn_switch_enum = value;\n+      break;\n+\n+    case OPT_Wsystem_headers:\n+      warn_system_headers = value;\n+      break;\n+\n+    case OPT_Wuninitialized:\n+      warn_uninitialized = value;\n+      break;\n+\n+    case OPT_Wunreachable_code:\n+      warn_notreached = value;\n+      break;\n+\n     case OPT_Wunused:\n       set_Wunused (value);\n       break;\n \n+    case OPT_Wunused_function:\n+      warn_unused_function = value;\n+      break;\n+\n+    case OPT_Wunused_label:\n+      warn_unused_label = value;\n+      break;\n+\n+    case OPT_Wunused_parameter:\n+      warn_unused_parameter = value;\n+      break;\n+\n+    case OPT_Wunused_value:\n+      warn_unused_value = value;\n+      break;\n+\n+    case OPT_Wunused_variable:\n+      warn_unused_variable = value;\n+      break;\n+\n     case OPT_aux_info:\n     case OPT_aux_info_:\n       aux_info_file_name = arg;\n@@ -351,6 +520,10 @@ common_handle_option (size_t scode, const char *arg,\n       dump_base_name = arg;\n       break;\n \n+    case OPT_g:\n+      decode_g_option (arg);\n+      break;\n+\n     case OPT_m:\n       set_target_switch (arg);\n       break;\n@@ -380,7 +553,7 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_w:\n-      inhibit_warnings = 1;\n+      inhibit_warnings = true;\n       break;      \n     }\n "}, {"sha": "4bee42e153ab3ae40952e55b4c0c080a537ea12d", "filename": "gcc/toplev.c", "status": "modified", "additions": 29, "deletions": 180, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -118,8 +118,6 @@ static void setup_core_dumping (void);\n static void compile_file (void);\n \n static int decode_f_option (const char *);\n-static int decode_W_option (const char *);\n-static int decode_g_option (const char *);\n static unsigned int independent_decode_option (char **);\n \n static int print_single_switch (FILE *, int, int, const char *,\n@@ -1492,156 +1490,61 @@ target_options[] = TARGET_OPTIONS;\n \n /* Options controlling warnings.  */\n \n-/* Don't print warning messages.  -w.  */\n-\n-int inhibit_warnings = 0;\n-\n-/* Don't suppress warnings from system headers.  -Wsystem-headers.  */\n-\n-int warn_system_headers = 0;\n-\n-/* Print various extra warnings.  -W/-Wextra.  */\n-\n-int extra_warnings = 0;\n-\n-/* Treat warnings as errors.  -Werror.  */\n-\n-int warnings_are_errors = 0;\n-\n-/* Nonzero to warn about unused variables, functions et.al.  */\n-\n-int warn_unused_function;\n-int warn_unused_label;\n-int warn_unused_parameter;\n-int warn_unused_variable;\n-int warn_unused_value;\n-\n-/* Nonzero to warn about code which is never reached.  */\n-\n-int warn_notreached;\n-\n-/* Nonzero to warn about variables used before they are initialized.  */\n-\n-int warn_uninitialized;\n-\n-/* Nonzero means warn about all declarations which shadow others.  */\n-\n-int warn_shadow;\n-\n-/* Warn if a switch on an enum, that does not have a default case,\n-   fails to have a case for every enum value.  */\n-\n-int warn_switch;\n-\n-/* Warn if a switch does not have a default case.  */\n-\n-int warn_switch_default;\n-\n-/* Warn if a switch on an enum fails to have a case for every enum\n-   value (regardless of the presence or otherwise of a default case).  */\n-\n-int warn_switch_enum;\n-\n /* Nonzero means warn about function definitions that default the return type\n    or that use a null return and have a return-type other than void.  */\n \n int warn_return_type;\n \n-/* Nonzero means warn about pointer casts that increase the required\n-   alignment of the target type (and might therefore lead to a crash\n-   due to a misaligned access).  */\n-\n-int warn_cast_align;\n-\n-/* Nonzero means warn about any objects definitions whose size is larger\n-   than N bytes.  Also want about function definitions whose returned\n-   values are larger than N bytes. The value N is in `larger_than_size'.  */\n-\n-int warn_larger_than;\n-HOST_WIDE_INT larger_than_size;\n-\n-/* Nonzero means warn if inline function is too large.  */\n-\n-int warn_inline;\n-\n-/* Warn if a function returns an aggregate,\n-   since there are often incompatible calling conventions for doing this.  */\n-\n-int warn_aggregate_return;\n-\n-/* Warn if packed attribute on struct is unnecessary and inefficient.  */\n-\n-int warn_packed;\n-\n-/* Warn when gcc pads a structure to an alignment boundary.  */\n-\n-int warn_padded;\n-\n-/* Warn when an optimization pass is disabled.  */\n-\n-int warn_disabled_optimization;\n-\n-/* Warn about functions which might be candidates for attribute noreturn.  */\n-\n-int warn_missing_noreturn;\n-\n-/* Nonzero means warn about uses of __attribute__((deprecated))\n-   declarations.  */\n-\n-int warn_deprecated_decl = 1;\n-\n-/* Nonzero means warn about constructs which might not be\n-   strict-aliasing safe.  */\n-\n-int warn_strict_aliasing;\n+/* Used for the -W options array temporarily.  */\n+static int warn_dummy;\n \n /* Like f_options, but for -W.  */\n \n static const lang_independent_options W_options[] =\n {\n-  {\"unused-function\", &warn_unused_function, 1,\n+  {\"unused-function\", &warn_dummy, 1,\n    N_(\"Warn when a function is unused\") },\n-  {\"unused-label\", &warn_unused_label, 1,\n+  {\"unused-label\", &warn_dummy, 1,\n    N_(\"Warn when a label is unused\") },\n-  {\"unused-parameter\", &warn_unused_parameter, 1,\n+  {\"unused-parameter\", &warn_dummy, 1,\n    N_(\"Warn when a function parameter is unused\") },\n-  {\"unused-variable\", &warn_unused_variable, 1,\n+  {\"unused-variable\", &warn_dummy, 1,\n    N_(\"Warn when a variable is unused\") },\n-  {\"unused-value\", &warn_unused_value, 1,\n+  {\"unused-value\", &warn_dummy, 1,\n    N_(\"Warn when an expression value is unused\") },\n-  {\"system-headers\", &warn_system_headers, 1,\n+  {\"system-headers\", &warn_dummy, 1,\n    N_(\"Do not suppress warnings from system headers\") },\n-  {\"error\", &warnings_are_errors, 1,\n+  {\"error\", &warn_dummy, 1,\n    N_(\"Treat all warnings as errors\") },\n-  {\"shadow\", &warn_shadow, 1,\n+  {\"shadow\", &warn_dummy, 1,\n    N_(\"Warn when one local variable shadows another\") },\n-  {\"switch\", &warn_switch, 1,\n+  {\"switch\", &warn_dummy, 1,\n    N_(\"Warn about enumerated switches, with no default, missing a case\") },\n-  {\"switch-default\", &warn_switch_default, 1,\n+  {\"switch-default\", &warn_dummy, 1,\n    N_(\"Warn about enumerated switches missing a default case\") },\n-  {\"switch-enum\", &warn_switch_enum, 1,\n+  {\"switch-enum\", &warn_dummy, 1,\n    N_(\"Warn about all enumerated switches missing a specific case\") },\n-  {\"aggregate-return\", &warn_aggregate_return, 1,\n+  {\"aggregate-return\", &warn_dummy, 1,\n    N_(\"Warn about returning structures, unions or arrays\") },\n-  {\"cast-align\", &warn_cast_align, 1,\n+  {\"cast-align\", &warn_dummy, 1,\n    N_(\"Warn about pointer casts which increase alignment\") },\n-  {\"unreachable-code\", &warn_notreached, 1,\n+  {\"unreachable-code\", &warn_dummy, 1,\n    N_(\"Warn about code that will never be executed\") },\n-  {\"uninitialized\", &warn_uninitialized, 1,\n+  {\"uninitialized\", &warn_dummy, 1,\n    N_(\"Warn about uninitialized automatic variables\") },\n-  {\"inline\", &warn_inline, 1,\n+  {\"inline\", &warn_dummy, 1,\n    N_(\"Warn when an inlined function cannot be inlined\") },\n-  {\"packed\", &warn_packed, 1,\n+  {\"packed\", &warn_dummy, 1,\n    N_(\"Warn when the packed attribute has no effect on struct layout\") },\n-  {\"padded\", &warn_padded, 1,\n+  {\"padded\", &warn_dummy, 1,\n    N_(\"Warn when padding is required to align struct members\") },\n-  {\"disabled-optimization\", &warn_disabled_optimization, 1,\n+  {\"disabled-optimization\", &warn_dummy, 1,\n    N_(\"Warn when an optimization pass is disabled\") },\n-  {\"deprecated-declarations\", &warn_deprecated_decl, 1,\n+  {\"deprecated-declarations\", &warn_dummy, 1,\n    N_(\"Warn about uses of __attribute__((deprecated)) declarations\") },\n-  {\"missing-noreturn\", &warn_missing_noreturn, 1,\n+  {\"missing-noreturn\", &warn_dummy, 1,\n    N_(\"Warn about functions which might be candidates for attribute noreturn\") },\n-  {\"strict-aliasing\", &warn_strict_aliasing, 1,\n+  {\"strict-aliasing\", &warn_dummy, 1,\n    N_ (\"Warn about code which might break the strict aliasing rules\") }\n };\n \n@@ -4397,48 +4300,6 @@ decode_f_option (const char *arg)\n   return 1;\n }\n \n-/* Parse a -W... command line switch.  ARG is the value after the -W.\n-   It is safe to access 'ARG - 2' to generate the full switch name.\n-   Return the number of strings consumed.  */\n-\n-static int\n-decode_W_option (const char *arg)\n-{\n-  const char *option_value = NULL;\n-  int j;\n-\n-  /* Search for the option in the table of binary W options.  */\n-\n-  for (j = ARRAY_SIZE (W_options); j--;)\n-    {\n-      if (!strcmp (arg, W_options[j].string))\n-\t{\n-\t  *W_options[j].variable = W_options[j].on_value;\n-\t  return 1;\n-\t}\n-\n-      if (arg[0] == 'n' && arg[1] == 'o' && arg[2] == '-'\n-\t  && ! strcmp (arg + 3, W_options[j].string))\n-\t{\n-\t  *W_options[j].variable = ! W_options[j].on_value;\n-\t  return 1;\n-\t}\n-    }\n-\n-  if ((option_value = skip_leading_substring (arg, \"id-clash-\")))\n-    warning (\"-Wid-clash-LEN is no longer supported\");\n-  else if ((option_value = skip_leading_substring (arg, \"larger-than-\")))\n-    {\n-      larger_than_size = read_integral_parameter (option_value, arg - 2, -1);\n-\n-      warn_larger_than = larger_than_size != -1;\n-    }\n-  else\n-    return 0;\n-\n-  return 1;\n-}\n-\n /* Indexed by enum debug_info_type.  */\n const char *const debug_type_names[] =\n {\n@@ -4449,7 +4310,7 @@ const char *const debug_type_names[] =\n    It is safe to access 'ARG - 2' to generate the full switch name.\n    Return the number of strings consumed.  */\n \n-static int\n+void\n decode_g_option (const char *arg)\n {\n   static unsigned level = 0;\n@@ -4560,9 +4421,7 @@ ignoring option `%s' due to invalid debug level specification\",\n     }\n \n   if (! da->arg)\n-    return 0;\n-\n-  return 1;\n+    warning (\"`-g%s': unknown or unsupported -g option\", arg);\n }\n \n /* Decode the first argument in the argv as a language-independent option.\n@@ -4578,20 +4437,10 @@ independent_decode_option (char **argv)\n \n   arg++;\n \n-  switch (*arg)\n-    {\n-    default:\n-      return 0;\n-\n-    case 'f':\n-      return decode_f_option (arg + 1);\n+  if (*arg == 'f')\n+    return decode_f_option (arg + 1);\n \n-    case 'g':\n-      return decode_g_option (arg + 1);\n-\n-    case 'W':\n-      return decode_W_option (arg + 1);\n-    }\n+  return 0;\n }\n \n /* Decode -m switches.  */"}, {"sha": "10fa181eea663fe7d755e4d8733bb16b6370512e", "filename": "gcc/toplev.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=e01cc6dc6217e93c3ac55c346a5e5e6c91c3ca8d", "patch": "@@ -120,6 +120,9 @@ extern void set_fast_math_flags         (int);\n /* Handle -d switch.  */\n extern void decode_d_option\t\t(const char *);\n \n+/* Handle -g switch.  */\n+extern void decode_g_option\t\t(const char *);\n+\n /* Return true iff flags are set as if -ffast-math.  */\n extern bool fast_math_flags_set_p\t(void);\n "}]}