{"sha": "315aadc8642b72fc2d7172312a35e18074cca85b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1YWFkYzg2NDJiNzJmYzJkNzE3MjMxMmEzNWUxODA3NGNjYTg1Yg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-07-03T15:50:12Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-07-03T15:50:12Z"}, "message": "stl_algobase.h (__niter_wrap): New.\n\n2018-07-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_algobase.h (__niter_wrap): New.\n\t(__copy_move_a2(_II, _II, _OI)): Use latter.\n\t(__copy_move_backward_a2(_BI1, _BI1, _BI2)): Likewise.\n\t(fill_n(_OI, _Size, const _Tp&)): Likewise.\n\t(equal(_II1, _II1, _II2)): Use __glibcxx_requires_can_increment.\n\t* include/debug/stl_iterator.h\n\t(std::__niter_base(const __gnu_cxx::_Safe_iterator<\n\t__gnu_cxx::__normal_iterator<>, _Sequence>&)): New declaration.\n\t* include/debug/vector (__niter_base(const __gnu_cxx::_Safe_iterator<\n\t__gnu_cxx::__normal_iterator<>, _Sequence>&)): New.\n\nFrom-SVN: r262349", "tree": {"sha": "0af852f841a69ce2a390843c5613726ce3f0ff76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0af852f841a69ce2a390843c5613726ce3f0ff76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315aadc8642b72fc2d7172312a35e18074cca85b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315aadc8642b72fc2d7172312a35e18074cca85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315aadc8642b72fc2d7172312a35e18074cca85b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315aadc8642b72fc2d7172312a35e18074cca85b/comments", "author": null, "committer": null, "parents": [{"sha": "42a98b43bbd3faf452545871daa49d155dfd03e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a98b43bbd3faf452545871daa49d155dfd03e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a98b43bbd3faf452545871daa49d155dfd03e2"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "838887c1efdd8a3e39360ff0a7d9faa80cc9b1b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=315aadc8642b72fc2d7172312a35e18074cca85b", "patch": "@@ -1,3 +1,16 @@\n+2018-07-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_algobase.h (__niter_wrap): New.\n+\t(__copy_move_a2(_II, _II, _OI)): Use latter.\n+\t(__copy_move_backward_a2(_BI1, _BI1, _BI2)): Likewise.\n+\t(fill_n(_OI, _Size, const _Tp&)): Likewise.\n+\t(equal(_II1, _II1, _II2)): Use __glibcxx_requires_can_increment.\n+\t* include/debug/stl_iterator.h\n+\t(std::__niter_base(const __gnu_cxx::_Safe_iterator<\n+\t__gnu_cxx::__normal_iterator<>, _Sequence>&)): New declaration.\n+\t* include/debug/vector (__niter_base(const __gnu_cxx::_Safe_iterator<\n+\t__gnu_cxx::__normal_iterator<>, _Sequence>&)): New.\n+\n 2018-07-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tP0758R1 Implicit conversion traits"}, {"sha": "16a3f83b610b71f6feeaf96469205d1d71819fd9", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=315aadc8642b72fc2d7172312a35e18074cca85b", "patch": "@@ -277,6 +277,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __niter_base(_Iterator __it)\n     { return __it; }\n \n+  // Reverse the __niter_base transformation to get a\n+  // __normal_iterator back again (this assumes that __normal_iterator\n+  // is only used to wrap random access iterators, like pointers).\n+  template<typename _From, typename _To>\n+    inline _From\n+    __niter_wrap(_From __from, _To __res)\n+    { return __from + (__res - std::__niter_base(__from)); }\n+\n+  // No need to wrap, iterator already has the right type.\n+  template<typename _Iterator>\n+    inline _Iterator\n+    __niter_wrap(_Iterator, _Iterator __res)\n+    { return __res; }\n+\n   // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,\n   // because the input and output ranges are permitted to overlap.)\n@@ -419,9 +433,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _OI\n     __copy_move_a2(_II __first, _II __last, _OI __result)\n     {\n-      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),\n-\t\t\t\t\t     std::__niter_base(__last),\n-\t\t\t\t\t     std::__niter_base(__result)));\n+      return std::__niter_wrap(__result,\n+\t\tstd::__copy_move_a<_IsMove>(std::__niter_base(__first),\n+\t\t\t\t\t    std::__niter_base(__last),\n+\t\t\t\t\t    std::__niter_base(__result)));\n     }\n \n   /**\n@@ -593,7 +608,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _BI2\n     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n-      return _BI2(std::__copy_move_backward_a<_IsMove>\n+      return std::__niter_wrap(__result,\n+\t\tstd::__copy_move_backward_a<_IsMove>\n \t\t  (std::__niter_base(__first), std::__niter_base(__last),\n \t\t   std::__niter_base(__result)));\n     }\n@@ -785,7 +801,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)\n       __glibcxx_requires_can_increment(__first, __n);\n \n-      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));\n+      return std::__niter_wrap(__first,\n+\t\tstd::__fill_n_a(std::__niter_base(__first), __n, __value));\n     }\n \n   template<bool _BoolType>\n@@ -1043,7 +1060,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_II1>::value_type,\n \t    typename iterator_traits<_II2>::value_type>)\n-      __glibcxx_requires_valid_range(__first1, __last1);\n+      __glibcxx_requires_can_increment_range(__first1, __last1, __first2);\n \n       return std::__equal_aux(std::__niter_base(__first1),\n \t\t\t      std::__niter_base(__last1),"}, {"sha": "f20b000e0e589e51a777a0f4e669eb3eaee38ca2", "filename": "libstdc++-v3/include/debug/stl_iterator.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h?ref=315aadc8642b72fc2d7172312a35e18074cca85b", "patch": "@@ -120,4 +120,17 @@ namespace __gnu_debug\n #endif\n }\n \n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Iterator, typename _Container, typename _Sequence>\n+    _Iterator\n+    __niter_base(const __gnu_debug::_Safe_iterator<\n+\t\t __gnu_cxx::__normal_iterator<_Iterator, _Container>,\n+\t\t _Sequence>&);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+\n #endif"}, {"sha": "ced5520ae7e58c5abcf88a4d94dbf2aaadb2c0d1", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315aadc8642b72fc2d7172312a35e18074cca85b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=315aadc8642b72fc2d7172312a35e18074cca85b", "patch": "@@ -785,6 +785,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()(__b); }\n     };\n \n+ template<typename _Iterator, typename _Container, typename _Sequence>\n+    _Iterator\n+    __niter_base(const __gnu_debug::_Safe_iterator<\n+\t\t __gnu_cxx::__normal_iterator<_Iterator, _Container>,\n+\t\t _Sequence>& __it)\n+    { return std::__niter_base(__it.base()); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n #endif\n "}]}