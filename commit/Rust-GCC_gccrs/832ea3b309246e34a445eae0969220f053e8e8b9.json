{"sha": "832ea3b309246e34a445eae0969220f053e8e8b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyZWEzYjMwOTI0NmUzNGE0NDVlYWUwOTY5MjIwZjA1M2U4ZThiOQ==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2000-10-17T22:17:34Z"}, "committer": {"name": "Franz Sirl", "email": "sirl@gcc.gnu.org", "date": "2000-10-17T22:17:34Z"}, "message": "function.c (locate_and_pad_parm): Don't align stack unconditionally.\n\n\t2000-10-17  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n\n\t* function.c (locate_and_pad_parm): Don't align stack unconditionally.\n\tFixes execute/20001017-1.c on pwerpc-linux-gnu.\n\t* expr.c (store_constructor): Apply MEM_ALIAS_SET to MEMs only.\n\t* rs6000/rs6000.c (rs6000_hash_constant): use X0INT to access a\n\tLABEL_REF.\n\t* rs6000/rs6000.h (NO_DOLLAR_IN_LABEL, DOLLARS_IN_IDENTIFIERS,\n\tENCODE_SECTION_INFO, ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Move from\n\there...\n\t* rs6000/aix.h: ...to here.\n\t* rs6000/linux.h (ASM_APP_ON, ASM_APP_OFF): Define to Linux-style.\n\nFrom-SVN: r36914", "tree": {"sha": "60202866c1e0e05a002604b6b673a6c27f06bcd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60202866c1e0e05a002604b6b673a6c27f06bcd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/832ea3b309246e34a445eae0969220f053e8e8b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/832ea3b309246e34a445eae0969220f053e8e8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/832ea3b309246e34a445eae0969220f053e8e8b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/832ea3b309246e34a445eae0969220f053e8e8b9/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34137553f95c4c36d1f601101becf90afc68d21e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34137553f95c4c36d1f601101becf90afc68d21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34137553f95c4c36d1f601101becf90afc68d21e"}], "stats": {"total": 127, "additions": 78, "deletions": 49}, "files": [{"sha": "a56ad456015dd0c9d93e41c2671f91d56bf57e40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=832ea3b309246e34a445eae0969220f053e8e8b9", "patch": "@@ -1,3 +1,18 @@\n+2000-10-17  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* function.c (locate_and_pad_parm): Don't align stack unconditionally.\n+\tFixes execute/20001017-1.c on pwerpc-linux-gnu.\n+\n+\t* expr.c (store_constructor): Apply MEM_ALIAS_SET to MEMs only.\n+\t* rs6000/rs6000.c (rs6000_hash_constant): use X0INT to access a\n+\tLABEL_REF.\n+\n+\t* rs6000/rs6000.h (NO_DOLLAR_IN_LABEL, DOLLARS_IN_IDENTIFIERS,\n+\tENCODE_SECTION_INFO, ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Move from\n+\there...\n+\t* rs6000/aix.h: ...to here.\n+\t* rs6000/linux.h (ASM_APP_ON, ASM_APP_OFF): Define to Linux-style.\n+\n 2000-10-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/alpha/alpha.h (ASM_OUTPUT_MI_THUNK): Reload gp if needed."}, {"sha": "080bfc39948c7c7da87b6178123df508133b83b3", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=832ea3b309246e34a445eae0969220f053e8e8b9", "patch": "@@ -50,6 +50,17 @@ Boston, MA 02111-1307, USA.  */\n \n #define FASCIST_ASSEMBLER\n \n+/* We define this to prevent the name mangler from putting dollar signs into\n+   function names.  */\n+\n+#define NO_DOLLAR_IN_LABEL\n+\n+/* We define this to 0 so that gcc will never accept a dollar sign in a\n+   variable name.  This is needed because the AIX assembler will not accept\n+   dollar signs.  */\n+\n+#define DOLLARS_IN_IDENTIFIERS 0\n+\n /* AIX does not have any init/fini or ctor/dtor sections, so create\n     static constructors and destructors as normal functions.  */\n /* #define ASM_OUTPUT_CONSTRUCTOR(file, name) */\n@@ -227,6 +238,30 @@ toc_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\n \n+/* Return non-zero if this entry is to be written into the constant\n+   pool in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF\n+   or a CONST containing one of them.  If -mfp-in-toc (the default),\n+   we also do this for floating-point constants.  We actually can only\n+   do this if the FP formats of the target and host machines are the\n+   same, but we can't check that since not every file that uses\n+   GO_IF_LEGITIMATE_ADDRESS_P includes real.h.  We also do this when\n+   we can write the entry into the TOC and the entry is not larger\n+   than a TOC entry.  */\n+\n+#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)\t\t\t\\\n+  (TARGET_TOC\t\t\t\t\t\t\t\t\\\n+   && (GET_CODE (X) == SYMBOL_REF\t\t\t\t\t\\\n+       || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS\t\\\n+\t   && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)\t\t\\\n+       || GET_CODE (X) == LABEL_REF\t\t\t\t\t\\\n+       || (GET_CODE (X) == CONST_INT \t\t\t\t\t\\\n+\t   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))\t\\\n+       || (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n+\t   && (TARGET_POWERPC64\t\t\t\t\t\t\\\n+\t       || TARGET_MINIMAL_TOC\t\t\t\t\t\\\n+\t       || (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\\\n+\t\t   && ! TARGET_NO_FP_IN_TOC)))))\n+\n /* Select section for constant in constant pool.\n \n    On RS/6000, all constants are in the private read-only data area.\n@@ -240,6 +275,17 @@ toc_section ()\t\t\t\t\t\t\\\n     read_only_private_data_section ();\t\t\t\\\n }\n \n+/* If we are referencing a function that is static or is known to be\n+   in this file, make the SYMBOL_REF special.  We can use this to indicate\n+   that we can branch to this function without emitting a no-op after the\n+   call.  Do not set this flag if the function is weakly defined. */\n+\n+#define ENCODE_SECTION_INFO(DECL)\t\t\t\\\n+  if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n+      && (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL)) \\\n+      && ! DECL_WEAK (DECL))\t\t\t\t\\\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n+\n /* Indicate that jump tables go in the text section.  */\n \n #define JUMP_TABLES_IN_TEXT_SECTION 1"}, {"sha": "9fe8501f494a97a74768722767ca53c96aaed73e", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=832ea3b309246e34a445eae0969220f053e8e8b9", "patch": "@@ -54,6 +54,14 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (PowerPC GNU/Linux)\");\n \n+/* Override rs6000.h definition.  */\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Override rs6000.h definition.  */\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n #undef DEFAULT_VTABLE_THUNKS\n #ifndef USE_GNULIBC_1\n #define DEFAULT_VTABLE_THUNKS 1"}, {"sha": "789a2f7f48fba430b2a8480699a41ce31f108fcd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=832ea3b309246e34a445eae0969220f053e8e8b9", "patch": "@@ -6556,7 +6556,7 @@ rs6000_hash_constant (k)\n   int fidx;\n   \n   if (GET_CODE (k) == LABEL_REF)\n-    return result * 1231 + XINT (XEXP (k, 0), 3);\n+    return result * 1231 + X0INT (XEXP (k, 0), 3);\n \n   if (GET_CODE (k) == CONST_DOUBLE)\n     fidx = 2;"}, {"sha": "3bb567b773b6d03e1fcad35d2846daa14613dcb2", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=832ea3b309246e34a445eae0969220f053e8e8b9", "patch": "@@ -2310,17 +2310,6 @@ extern int rs6000_compare_fp_p;\n    the end of the line.  */\n #define ASM_COMMENT_START \" #\"\n \n-/* We define this to prevent the name mangler from putting dollar signs into\n-   function names.  */\n-\n-#define NO_DOLLAR_IN_LABEL\n-\n-/* We define this to 0 so that gcc will never accept a dollar sign in a\n-   variable name.  This is needed because the AIX assembler will not accept\n-   dollar signs.  */\n-\n-#define DOLLARS_IN_IDENTIFIERS 0\n-\n /* Implicit library calls should use memcpy, not bcopy, etc.  */\n \n #define TARGET_MEM_FUNCTIONS\n@@ -2331,44 +2320,9 @@ extern int rs6000_compare_fp_p;\n \n #define EXCEPTION_SECTION data_section\n \n-/* If we are referencing a function that is static or is known to be\n-   in this file, make the SYMBOL_REF special.  We can use this to indicate\n-   that we can branch to this function without emitting a no-op after the\n-   call.  Do not set this flag if the function is weakly defined. */\n-\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-      && (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL)) \\\n-      && ! DECL_WEAK (DECL))\t\t\t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n-\n /* Flag to say the TOC is initialized */\n extern int toc_initialized;\n \n-/* Return non-zero if this entry is to be written into the constant\n-   pool in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF\n-   or a CONST containing one of them.  If -mfp-in-toc (the default),\n-   we also do this for floating-point constants.  We actually can only\n-   do this if the FP formats of the target and host machines are the\n-   same, but we can't check that since not every file that uses\n-   GO_IF_LEGITIMATE_ADDRESS_P includes real.h.  We also do this when\n-   we can write the entry into the TOC and the entry is not larger\n-   than a TOC entry.  */\n-\n-#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)\t\t\t\\\n-  (TARGET_TOC\t\t\t\t\t\t\t\t\\\n-   && (GET_CODE (X) == SYMBOL_REF\t\t\t\t\t\\\n-       || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS\t\\\n-\t   && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)\t\t\\\n-       || GET_CODE (X) == LABEL_REF\t\t\t\t\t\\\n-       || (GET_CODE (X) == CONST_INT \t\t\t\t\t\\\n-\t   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))\t\\\n-       || (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n-\t   && (TARGET_POWERPC64\t\t\t\t\t\t\\\n-\t       || TARGET_MINIMAL_TOC\t\t\t\t\t\\\n-\t       || (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\\\n-\t\t   && ! TARGET_NO_FP_IN_TOC)))))\n-\n /* Macro to output a special constant pool entry.  Go to WIN if we output\n    it.  Otherwise, it is written the usual way.\n "}, {"sha": "01c1fb66b6bba3acb6d4fd5d01d8dbc97c1e4057", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=832ea3b309246e34a445eae0969220f053e8e8b9", "patch": "@@ -4206,7 +4206,8 @@ store_constructor_field (target, bitsize, bitpos,\n \t\t\t    plus_constant (XEXP (target, 0),\n \t\t\t\t\t   bitpos / BITS_PER_UNIT));\n \n-      MEM_ALIAS_SET (target) = alias_set;\n+      if (GET_CODE (target) == MEM)\n+\tMEM_ALIAS_SET (target) = alias_set;\n       store_constructor (exp, target, align, cleared, bitsize / BITS_PER_UNIT);\n     }\n   else"}, {"sha": "07528ec3298e8bc2db1223386cc72f4c07fe241c", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/832ea3b309246e34a445eae0969220f053e8e8b9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=832ea3b309246e34a445eae0969220f053e8e8b9", "patch": "@@ -5149,7 +5149,12 @@ locate_and_pad_parm (passed_mode, type, in_regs, fndecl,\n \t\t\t      - offset_ptr->constant);\n \n #else /* !ARGS_GROW_DOWNWARD */\n-  pad_to_arg_alignment (initial_offset_ptr, boundary, alignment_pad);\n+  if (!in_regs\n+#ifdef REG_PARM_STACK_SPACE\n+      || REG_PARM_STACK_SPACE (fndecl) > 0\n+#endif\n+      )\n+    pad_to_arg_alignment (initial_offset_ptr, boundary, alignment_pad);\n   *offset_ptr = *initial_offset_ptr;\n \n #ifdef PUSH_ROUNDING"}]}