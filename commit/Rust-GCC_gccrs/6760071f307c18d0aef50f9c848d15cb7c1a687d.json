{"sha": "6760071f307c18d0aef50f9c848d15cb7c1a687d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2MDA3MWYzMDdjMThkMGFlZjUwZjljODQ4ZDE1Y2I3YzFhNjg3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-13T16:09:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-13T16:09:27Z"}, "message": "re PR c++/56302 (sys/sdt.h asms stopped working at -O0)\n\n\tPR c++/56302\n\t* semantics.c (finish_asm_stmt): If input constraints allow\n\tneither register nor memory, try maybe_constant_value to get\n\ta constant if possible.\n\n\t* g++.dg/torture/pr56302.C: New test.\n\t* g++.dg/cpp0x/constexpr-56302.C: New test.\n\t* c-c++-common/pr56302.c: New test.\n\nFrom-SVN: r196018", "tree": {"sha": "c87a849d123fb35e51e20d6ce9d167ff6c8400ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c87a849d123fb35e51e20d6ce9d167ff6c8400ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6760071f307c18d0aef50f9c848d15cb7c1a687d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6760071f307c18d0aef50f9c848d15cb7c1a687d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6760071f307c18d0aef50f9c848d15cb7c1a687d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6760071f307c18d0aef50f9c848d15cb7c1a687d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6422242b91c9568e93010d3d323ceb57a15aa751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6422242b91c9568e93010d3d323ceb57a15aa751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6422242b91c9568e93010d3d323ceb57a15aa751"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "442b369942d2299761ddf55024e5b8ba7ae759a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6760071f307c18d0aef50f9c848d15cb7c1a687d", "patch": "@@ -1,3 +1,10 @@\n+2013-02-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/56302\n+\t* semantics.c (finish_asm_stmt): If input constraints allow\n+\tneither register nor memory, try maybe_constant_value to get\n+\ta constant if possible.\n+\n 2013-02-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56285"}, {"sha": "34158289623215143a4d4c8c04633519805a699b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6760071f307c18d0aef50f9c848d15cb7c1a687d", "patch": "@@ -1402,6 +1402,14 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t\t  if (!cxx_mark_addressable (operand))\n \t\t    operand = error_mark_node;\n \t\t}\n+\t      else if (!allows_reg && !allows_mem)\n+\t\t{\n+\t\t  /* If constraint allows neither register nor memory,\n+\t\t     try harder to get a constant.  */\n+\t\t  tree constop = maybe_constant_value (operand);\n+\t\t  if (TREE_CONSTANT (constop))\n+\t\t    operand = constop;\n+\t\t}\n \t    }\n \t  else\n \t    operand = error_mark_node;"}, {"sha": "2bc538184d39a95a4e1b54bd57fa14763bc1bc94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6760071f307c18d0aef50f9c848d15cb7c1a687d", "patch": "@@ -1,3 +1,10 @@\n+2013-02-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/56302\n+\t* g++.dg/torture/pr56302.C: New test.\n+\t* g++.dg/cpp0x/constexpr-56302.C: New test.\n+\t* c-c++-common/pr56302.c: New test.\n+\n 2013-02-13  Tobias Burnus  <burnus@net-b.de>\n \t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "fb67d1271711e9a4c35fc3da539c01c67696d158", "filename": "gcc/testsuite/c-c++-common/pr56302.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr56302.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr56302.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr56302.c?ref=6760071f307c18d0aef50f9c848d15cb7c1a687d", "patch": "@@ -0,0 +1,9 @@\n+/* PR c++/56302 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+void\n+foo (int x)\n+{\n+  __asm__ __volatile__ (\"\" : : \"n\" (-1 * (int) sizeof (&x)));\n+}"}, {"sha": "c0adae4665ae0472983031a61289ad1889b78903", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-56302.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-56302.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-56302.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-56302.C?ref=6760071f307c18d0aef50f9c848d15cb7c1a687d", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/56302\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -O0\" }\n+\n+constexpr int foo () { return 42; }\n+constexpr int x = foo () + 2;\n+\n+void\n+bar ()\n+{\n+  __asm (\"\" : : \"n\" (x), \"n\" (foo () * 7 + x));\n+}"}, {"sha": "08d47982ac0099dd298a51f2071bbe60cc4e0243", "filename": "gcc/testsuite/g++.dg/torture/pr56302.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56302.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6760071f307c18d0aef50f9c848d15cb7c1a687d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56302.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56302.C?ref=6760071f307c18d0aef50f9c848d15cb7c1a687d", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/56302\n+// { dg-do compile }\n+\n+typedef __SIZE_TYPE__ size_t;\n+# define STAP_SDT_ARG_CONSTRAINT        nor\n+# define _SDT_STRINGIFY(x)              #x\n+# define _SDT_ARG_CONSTRAINT_STRING(x)  _SDT_STRINGIFY(x)\n+# define _SDT_ARG(n, x)\t\t\t\\\n+  [_SDT_S##n] \"n\" ((_SDT_ARGSIGNED (x) ? 1 : -1) * (int) _SDT_ARGSIZE (x)), \\\n+  [_SDT_A##n] _SDT_ARG_CONSTRAINT_STRING (STAP_SDT_ARG_CONSTRAINT) (_SDT_ARGVAL (x))\n+#define _SDT_ARGARRAY(x)\t(__builtin_classify_type (x) == 14\t\\\n+\t\t\t\t || __builtin_classify_type (x) == 5)\n+# define _SDT_ARGSIGNED(x)\t(!_SDT_ARGARRAY (x) \\\n+\t\t\t\t && __sdt_type<__typeof (x)>::__sdt_signed)\n+# define _SDT_ARGSIZE(x)\t(_SDT_ARGARRAY (x) \\\n+\t\t\t\t ? sizeof (void *) : sizeof (x))\n+# define _SDT_ARGVAL(x)\t\t(x)\n+template<typename __sdt_T>\n+struct __sdt_type\n+{\n+  static const bool __sdt_signed = false;\n+};\n+#define __SDT_ALWAYS_SIGNED(T) \\\n+template<> struct __sdt_type<T> { static const bool __sdt_signed = true; };\n+__SDT_ALWAYS_SIGNED(signed char)\n+__SDT_ALWAYS_SIGNED(short)\n+__SDT_ALWAYS_SIGNED(int)\n+__SDT_ALWAYS_SIGNED(long)\n+__SDT_ALWAYS_SIGNED(long long)\n+template<typename __sdt_E>\n+struct __sdt_type<__sdt_E[]> : public __sdt_type<__sdt_E *> {};\n+template<typename __sdt_E, size_t __sdt_N>\n+struct __sdt_type<__sdt_E[__sdt_N]> : public __sdt_type<__sdt_E *> {};\n+\n+struct S { char p[8]; };\n+\n+void\n+foo (const S &str)\n+{\n+  __asm__ __volatile__ (\"\" : : _SDT_ARG (0, &str));\n+}"}]}