{"sha": "f67850266f1c06c34c97b42d011a47a0920d5e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY3ODUwMjY2ZjFjMDZjMzRjOTdiNDJkMDExYTQ3YTA5MjBkNWUzYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-09T01:39:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-09T01:39:46Z"}, "message": "(force_to_mode...\n\n(force_to_mode, case xSHIFT): Don't narrow the mode unless we can be\nsure that the shift count is smaller than the size of the mode.\n\nFrom-SVN: r4050", "tree": {"sha": "57c4400ddf3a7f5fbe80f8afabd16e8b915689ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57c4400ddf3a7f5fbe80f8afabd16e8b915689ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f67850266f1c06c34c97b42d011a47a0920d5e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67850266f1c06c34c97b42d011a47a0920d5e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f67850266f1c06c34c97b42d011a47a0920d5e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67850266f1c06c34c97b42d011a47a0920d5e3c/comments", "author": null, "committer": null, "parents": [{"sha": "5bf6e3bd1e9e653d0857f5a480df9797d89580be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf6e3bd1e9e653d0857f5a480df9797d89580be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf6e3bd1e9e653d0857f5a480df9797d89580be"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "11dec08d7cbc0db4bb8603efd6e7ce89d9b57e7c", "filename": "gcc/combine.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67850266f1c06c34c97b42d011a47a0920d5e3c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67850266f1c06c34c97b42d011a47a0920d5e3c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f67850266f1c06c34c97b42d011a47a0920d5e3c", "patch": "@@ -5342,9 +5342,21 @@ force_to_mode (x, mode, bits, reg)\n     case ASHIFT:\n     case LSHIFT:\n       /* For left shifts, do the same, but just for the first operand.\n-\t If the shift count is a constant, we need even fewer bits of the\n-\t first operand.  */\n-\n+\t However, we cannot do anything with shifts where we cannot\n+\t guarantee that the counts are smaller than the size of the mode\n+\t because such a count will have a different meaning in a\n+\t wider mode.\n+\n+\t If we can narrow the shift and know the count, we need even fewer\n+\t bits of the first operand.  */\n+\n+      if (! (GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t     && INTVAL (XEXP (x, 1)) < GET_MODE_BITSIZE (mode))\n+\t  && ! (GET_MODE (XEXP (x, 1)) != VOIDmode\n+\t\t&& (nonzero_bits (XEXP (x, 1), GET_MODE (XEXP (x, 1)))\n+\t\t    < (unsigned) GET_MODE_BITSIZE (mode))))\n+\tbreak;\n+\t\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT && INTVAL (XEXP (x, 1)) < bits)\n \tbits -= INTVAL (XEXP (x, 1));\n \n@@ -5364,8 +5376,8 @@ force_to_mode (x, mode, bits, reg)\n \n     case LSHIFTRT:\n       /* Here we can only do something if the shift count is a constant and\n-\t the count plus BITS is no larger than the width of MODE, we can do\n-\t the shift in MODE.  */\n+\t the count plus BITS is no larger than the width of MODE.  In that\n+\t case, we can do the shift in MODE.  */\n \n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && INTVAL (XEXP (x, 1)) + bits <= GET_MODE_BITSIZE (mode))"}]}