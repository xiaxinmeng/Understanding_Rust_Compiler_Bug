{"sha": "c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1ZTg2MmFmYzViMTllMGUzZmM1MjdjYjYxYTdjOWVhNjJjMzM0YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:59:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:59:24Z"}, "message": "config/m68k: Use rtx_insn\n\ngcc/\n\t* config/m68k/m68k-protos.h (output_btst): Strengthen param 4 from\n\trtx to rtx_insn *.\n\t(strict_low_part_peephole_ok): Likewise for param 2 \"first_insn\".\n\t(m68k_final_prescan_insn): Likewise for first param.\n\n\t* config/m68k/m68k.c (m68k_emit_movem): Likewise for return type.\n\t(m68k_set_frame_related): Likewise for param \"insn\".\n\t(output_btst): Likewise for param \"insn\".\n\t(m68k_final_prescan_insn): Likewise.\n\t(m68k_move_to_reg): Likewise for local \"insn\".\n\t(m68k_call_tls_get_addr): Likewise for local \"insns\".\n\t(m68k_call_m68k_read_tp): Likewise.\n\t(strict_low_part_peephole_ok): Likewise for param \"first_insn\".\n\t(m68k_output_mi_thunk): Likewise for local \"insn\".\n\nFrom-SVN: r214447", "tree": {"sha": "d7079fb667edfdc7d6bea7f6fa00fddc383c3df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7079fb667edfdc7d6bea7f6fa00fddc383c3df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ae94a0bb787c902460c26ec8e6307939724641c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae94a0bb787c902460c26ec8e6307939724641c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae94a0bb787c902460c26ec8e6307939724641c"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "64456e52182da4a336f6a55dcb00ad8a1fdf4a42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "patch": "@@ -1,3 +1,20 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/m68k/m68k-protos.h (output_btst): Strengthen param 4 from\n+\trtx to rtx_insn *.\n+\t(strict_low_part_peephole_ok): Likewise for param 2 \"first_insn\".\n+\t(m68k_final_prescan_insn): Likewise for first param.\n+\n+\t* config/m68k/m68k.c (m68k_emit_movem): Likewise for return type.\n+\t(m68k_set_frame_related): Likewise for param \"insn\".\n+\t(output_btst): Likewise for param \"insn\".\n+\t(m68k_final_prescan_insn): Likewise.\n+\t(m68k_move_to_reg): Likewise for local \"insn\".\n+\t(m68k_call_tls_get_addr): Likewise for local \"insns\".\n+\t(m68k_call_m68k_read_tp): Likewise.\n+\t(strict_low_part_peephole_ok): Likewise for param \"first_insn\".\n+\t(m68k_output_mi_thunk): Likewise for local \"insn\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/iq2000/iq2000-protos.h (final_prescan_insn): Strengthen"}, {"sha": "26e8e45dd7719716d273ebfc5a5f7c8d321480d1", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "patch": "@@ -34,7 +34,7 @@ extern const char *output_move_strictqi (rtx *);\n extern const char *output_move_double (rtx *);\n extern const char *output_move_const_single (rtx *);\n extern const char *output_move_const_double (rtx *);\n-extern const char *output_btst (rtx *, rtx, rtx, rtx, int);\n+extern const char *output_btst (rtx *, rtx, rtx, rtx_insn *, int);\n extern const char *output_scc_di (rtx, rtx, rtx, rtx);\n extern const char *output_addsi3 (rtx *);\n extern const char *output_andsi3 (rtx *);\n@@ -44,7 +44,8 @@ extern const char *output_call (rtx);\n extern const char *output_sibcall (rtx);\n extern void output_dbcc_and_branch (rtx *);\n extern int floating_exact_log2 (rtx);\n-extern bool strict_low_part_peephole_ok (enum machine_mode mode, rtx first_insn, rtx target);\n+extern bool strict_low_part_peephole_ok (enum machine_mode mode,\n+\t\t\t\t\t rtx_insn *first_insn, rtx target);\n \n /* Functions from m68k.c used in macros.  */\n extern int standard_68881_constant_p (rtx);\n@@ -66,7 +67,7 @@ extern rtx m68k_function_value (const_tree, const_tree);\n extern int emit_move_sequence (rtx *, enum machine_mode, rtx);\n extern bool m68k_movem_pattern_p (rtx, rtx, HOST_WIDE_INT, bool);\n extern const char *m68k_output_movem (rtx *, rtx, HOST_WIDE_INT, bool);\n-extern void m68k_final_prescan_insn (rtx, rtx *, int);\n+extern void m68k_final_prescan_insn (rtx_insn *, rtx *, int);\n extern bool m68k_epilogue_uses (int);\n \n /* Functions from m68k.c used in constraints.md.  */"}, {"sha": "7d5ab080f1cedd637e3aa48fa98608712edf5c8b", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "patch": "@@ -911,7 +911,7 @@ m68k_save_reg (unsigned int regno, bool interrupt_handler)\n    whether or not this is pre-decrement (if STORE_P) or post-increment\n    (if !STORE_P) operation.  */\n \n-static rtx\n+static rtx_insn *\n m68k_emit_movem (rtx base, HOST_WIDE_INT offset,\n \t\t unsigned int count, unsigned int regno,\n \t\t unsigned int mask, bool store_p, bool adjust_stack_p)\n@@ -951,7 +951,7 @@ m68k_emit_movem (rtx base, HOST_WIDE_INT offset,\n /* Make INSN a frame-related instruction.  */\n \n static void\n-m68k_set_frame_related (rtx insn)\n+m68k_set_frame_related (rtx_insn *insn)\n {\n   rtx body;\n   int i;\n@@ -1742,7 +1742,7 @@ output_scc_di (rtx op, rtx operand1, rtx operand2, rtx dest)\n }\n \n const char *\n-output_btst (rtx *operands, rtx countop, rtx dataop, rtx insn, int signpos)\n+output_btst (rtx *operands, rtx countop, rtx dataop, rtx_insn *insn, int signpos)\n {\n   operands[0] = countop;\n   operands[1] = dataop;\n@@ -2320,7 +2320,7 @@ m68k_final_prescan_insn_1 (rtx *x_ptr, void *data ATTRIBUTE_UNUSED)\n /* Prescan insn before outputing assembler for it.  */\n \n void\n-m68k_final_prescan_insn (rtx insn ATTRIBUTE_UNUSED,\n+m68k_final_prescan_insn (rtx_insn *insn ATTRIBUTE_UNUSED,\n \t\t\t rtx *operands, int n_operands)\n {\n   int i;\n@@ -2358,7 +2358,7 @@ m68k_final_prescan_insn (rtx insn ATTRIBUTE_UNUSED,\n static rtx\n m68k_move_to_reg (rtx x, rtx orig, rtx reg)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (reg == NULL_RTX)\n     {\n@@ -2495,7 +2495,7 @@ static rtx\n m68k_call_tls_get_addr (rtx x, rtx eqv, enum m68k_reloc reloc)\n {\n   rtx a0;\n-  rtx insns;\n+  rtx_insn *insns;\n   rtx dest;\n \n   /* Emit the call sequence.  */\n@@ -2555,7 +2555,7 @@ m68k_call_m68k_read_tp (void)\n {\n   rtx a0;\n   rtx eqv;\n-  rtx insns;\n+  rtx_insn *insns;\n   rtx dest;\n \n   start_sequence ();\n@@ -4799,10 +4799,10 @@ print_operand_address (FILE *file, rtx addr)\n    clear insn.  */\n \n bool\n-strict_low_part_peephole_ok (enum machine_mode mode, rtx first_insn,\n+strict_low_part_peephole_ok (enum machine_mode mode, rtx_insn *first_insn,\n                              rtx target)\n {\n-  rtx p = first_insn;\n+  rtx_insn *p = first_insn;\n \n   while ((p = PREV_INSN (p)))\n     {\n@@ -5042,7 +5042,8 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n-  rtx this_slot, offset, addr, mem, insn, tmp;\n+  rtx this_slot, offset, addr, mem, tmp;\n+  rtx_insn *insn;\n \n   /* Avoid clobbering the struct value reg by using the\n      static chain reg as a temporary.  */"}]}