{"sha": "e8d57d424b94f6278140784561dfb6e3d4173cf3", "node_id": "C_kwDOANBUbNoAKGU4ZDU3ZDQyNGI5NGY2Mjc4MTQwNzg0NTYxZGZiNmUzZDQxNzNjZjM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-30T16:22:19Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-01T15:48:54Z"}, "message": "Add missing ID to variant ids", "tree": {"sha": "f4ea7f5750e7976701a9959cab0f278e93e439d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4ea7f5750e7976701a9959cab0f278e93e439d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8d57d424b94f6278140784561dfb6e3d4173cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d57d424b94f6278140784561dfb6e3d4173cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d57d424b94f6278140784561dfb6e3d4173cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d57d424b94f6278140784561dfb6e3d4173cf3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e4a9db1e0804150d391e5b4a5d6a03d7525c8d"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "e4dcaeb2326c1e358112316c1986beb9a06a44fe", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h?ref=e8d57d424b94f6278140784561dfb6e3d4173cf3", "patch": "@@ -49,7 +49,8 @@ class TypeCheckEnumItem : public TypeCheckBase\n       rust_error_at (item.get_locus (), \"discriminant too big\");\n \n     variant\n-      = new TyTy::VariantDef (item.get_identifier (), last_discriminant + 1);\n+      = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t      item.get_identifier (), last_discriminant + 1);\n   }\n \n   void visit (HIR::EnumItemDiscriminant &item) override\n@@ -83,7 +84,8 @@ class TypeCheckEnumItem : public TypeCheckBase\n     rust_assert (ok);\n \n     variant\n-      = new TyTy::VariantDef (item.get_identifier (), specified_discriminant);\n+      = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t      item.get_identifier (), specified_discriminant);\n   }\n \n   void visit (HIR::EnumItemTuple &item) override\n@@ -107,7 +109,8 @@ class TypeCheckEnumItem : public TypeCheckBase\n       }\n \n     variant\n-      = new TyTy::VariantDef (item.get_identifier (),\n+      = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t      item.get_identifier (),\n \t\t\t      TyTy::VariantDef::VariantType::TUPLE, fields);\n   }\n \n@@ -130,7 +133,8 @@ class TypeCheckEnumItem : public TypeCheckBase\n       }\n \n     variant\n-      = new TyTy::VariantDef (item.get_identifier (),\n+      = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t      item.get_identifier (),\n \t\t\t      TyTy::VariantDef::VariantType::STRUCT, fields);\n   }\n "}, {"sha": "8df43d9a336f574965cbac82485b03dd7c8462a7", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=e8d57d424b94f6278140784561dfb6e3d4173cf3", "patch": "@@ -172,10 +172,9 @@ class TypeCheckStmt : public TypeCheckBase\n \n     // there is only a single variant\n     std::vector<TyTy::VariantDef *> variants;\n-    variants.push_back (\n-      new TyTy::VariantDef (struct_decl.get_identifier (),\n-\t\t\t    TyTy::VariantDef::VariantType::TUPLE,\n-\t\t\t    std::move (fields)));\n+    variants.push_back (new TyTy::VariantDef (\n+      struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n+      TyTy::VariantDef::VariantType::TUPLE, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -283,10 +282,9 @@ class TypeCheckStmt : public TypeCheckBase\n \n     // there is only a single variant\n     std::vector<TyTy::VariantDef *> variants;\n-    variants.push_back (\n-      new TyTy::VariantDef (struct_decl.get_identifier (),\n-\t\t\t    TyTy::VariantDef::VariantType::STRUCT,\n-\t\t\t    std::move (fields)));\n+    variants.push_back (new TyTy::VariantDef (\n+      struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n+      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -342,10 +340,9 @@ class TypeCheckStmt : public TypeCheckBase\n \n     // there is only a single variant\n     std::vector<TyTy::VariantDef *> variants;\n-    variants.push_back (\n-      new TyTy::VariantDef (union_decl.get_identifier (),\n-\t\t\t    TyTy::VariantDef::VariantType::STRUCT,\n-\t\t\t    std::move (fields)));\n+    variants.push_back (new TyTy::VariantDef (\n+      union_decl.get_mappings ().get_hirid (), union_decl.get_identifier (),\n+      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (union_decl.get_mappings ().get_hirid (),"}, {"sha": "7b1dfc965e78bcd6348ae08eac19c5a3f1dd1d9c", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=e8d57d424b94f6278140784561dfb6e3d4173cf3", "patch": "@@ -104,10 +104,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n     // there is only a single variant\n     std::vector<TyTy::VariantDef *> variants;\n-    variants.push_back (\n-      new TyTy::VariantDef (struct_decl.get_identifier (),\n-\t\t\t    TyTy::VariantDef::VariantType::TUPLE,\n-\t\t\t    std::move (fields)));\n+    variants.push_back (new TyTy::VariantDef (\n+      struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n+      TyTy::VariantDef::VariantType::TUPLE, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -174,10 +173,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n     // there is only a single variant\n     std::vector<TyTy::VariantDef *> variants;\n-    variants.push_back (\n-      new TyTy::VariantDef (struct_decl.get_identifier (),\n-\t\t\t    TyTy::VariantDef::VariantType::STRUCT,\n-\t\t\t    std::move (fields)));\n+    variants.push_back (new TyTy::VariantDef (\n+      struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n+      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -288,10 +286,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n     // there is only a single variant\n     std::vector<TyTy::VariantDef *> variants;\n-    variants.push_back (\n-      new TyTy::VariantDef (union_decl.get_identifier (),\n-\t\t\t    TyTy::VariantDef::VariantType::STRUCT,\n-\t\t\t    std::move (fields)));\n+    variants.push_back (new TyTy::VariantDef (\n+      union_decl.get_mappings ().get_hirid (), union_decl.get_identifier (),\n+      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (union_decl.get_mappings ().get_hirid (),"}, {"sha": "473572f39e9a6cdfb5b26f17825d9929065d7094", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d57d424b94f6278140784561dfb6e3d4173cf3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=e8d57d424b94f6278140784561dfb6e3d4173cf3", "patch": "@@ -1020,31 +1020,33 @@ class VariantDef\n     STRUCT\n   };\n \n-  VariantDef (std::string identifier, int discriminant)\n-    : identifier (identifier), discriminant (discriminant)\n+  VariantDef (HirId id, std::string identifier, int discriminant)\n+    : id (id), identifier (identifier), discriminant (discriminant)\n   {\n     type = VariantType::NUM;\n     fields = {};\n   }\n \n-  VariantDef (std::string identifier, VariantType type,\n+  VariantDef (HirId id, std::string identifier, VariantType type,\n \t      std::vector<StructFieldType *> fields)\n-    : identifier (identifier), type (type), fields (fields)\n+    : id (id), identifier (identifier), type (type), fields (fields)\n   {\n     discriminant = 0;\n     rust_assert (type == VariantType::TUPLE || type == VariantType::STRUCT);\n   }\n \n-  VariantDef (std::string identifier, VariantType type, int discriminant,\n-\t      std::vector<StructFieldType *> fields)\n-    : identifier (identifier), type (type), discriminant (discriminant),\n-      fields (fields)\n+  VariantDef (HirId id, std::string identifier, VariantType type,\n+\t      int discriminant, std::vector<StructFieldType *> fields)\n+    : id (id), identifier (identifier), type (type),\n+      discriminant (discriminant), fields (fields)\n   {\n     rust_assert ((type == VariantType::NUM && fields.empty ())\n \t\t || (type == VariantType::TUPLE && discriminant == 0)\n \t\t || (type == VariantType::STRUCT && discriminant == 0));\n   }\n \n+  HirId get_id () const { return id; }\n+\n   VariantType get_variant_type () const { return type; }\n \n   std::string get_identifier () const { return identifier; }\n@@ -1132,10 +1134,11 @@ class VariantDef\n     for (auto &f : fields)\n       cloned_fields.push_back ((StructFieldType *) f->clone ());\n \n-    return new VariantDef (identifier, type, discriminant, cloned_fields);\n+    return new VariantDef (id, identifier, type, discriminant, cloned_fields);\n   }\n \n private:\n+  HirId id;\n   std::string identifier;\n   VariantType type;\n   int discriminant; /* Either discriminant or fields are valid.  */"}]}