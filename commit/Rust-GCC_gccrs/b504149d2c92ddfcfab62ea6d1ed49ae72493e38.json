{"sha": "b504149d2c92ddfcfab62ea6d1ed49ae72493e38", "node_id": "C_kwDOANBUbNoAKGI1MDQxNDlkMmM5MmRkZmNmYWI2MmVhNmQxZWQ0OWFlNzI0OTNlMzg", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-08-29T18:21:52Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-08-29T20:45:47Z"}, "message": "bpf: handle anonymous members in CO-RE reloc [PR106745]\n\nThe old method for computing a member index for a CO-RE relocation\nrelied on a name comparison, which could SEGV if the member in question\nis itself part of an anonymous inner struct or union.\n\nThis patch changes the index computation to not rely on a name, while\nmaintaining the ability to account for other sibling fields which may\nnot have a representation in BTF.\n\ngcc/ChangeLog:\n\n\tPR target/106745\n\t* config/bpf/coreout.cc (bpf_core_get_sou_member_index): Fix\n\tcomputation of index for anonymous members.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/106745\n\t* gcc.target/bpf/core-pr106745.c: New test.", "tree": {"sha": "1e3fd59944faf25342b64c82e0621dcf90df7540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e3fd59944faf25342b64c82e0621dcf90df7540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b504149d2c92ddfcfab62ea6d1ed49ae72493e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b504149d2c92ddfcfab62ea6d1ed49ae72493e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b504149d2c92ddfcfab62ea6d1ed49ae72493e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b504149d2c92ddfcfab62ea6d1ed49ae72493e38/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c68b5c078bbf167e6ab84fc230a53580dcc651db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68b5c078bbf167e6ab84fc230a53580dcc651db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c68b5c078bbf167e6ab84fc230a53580dcc651db"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "8897a045ea17d8eb42ef233651617486b6b6f9f7", "filename": "gcc/config/bpf/coreout.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504149d2c92ddfcfab62ea6d1ed49ae72493e38/gcc%2Fconfig%2Fbpf%2Fcoreout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504149d2c92ddfcfab62ea6d1ed49ae72493e38/gcc%2Fconfig%2Fbpf%2Fcoreout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fcoreout.cc?ref=b504149d2c92ddfcfab62ea6d1ed49ae72493e38", "patch": "@@ -207,7 +207,6 @@ bpf_core_get_sou_member_index (ctf_container_ref ctfc, const tree node)\n   if (TREE_CODE (node) == FIELD_DECL)\n     {\n       const tree container = DECL_CONTEXT (node);\n-      const char * name = IDENTIFIER_POINTER (DECL_NAME (node));\n \n       /* Lookup the CTF type info for the containing type.  */\n       dw_die_ref die = lookup_type_die (container);\n@@ -222,16 +221,21 @@ bpf_core_get_sou_member_index (ctf_container_ref ctfc, const tree node)\n       if (kind != CTF_K_STRUCT && kind != CTF_K_UNION)\n         return -1;\n \n+      tree field = TYPE_FIELDS (container);\n       int i = 0;\n       ctf_dmdef_t * dmd;\n       for (dmd = dtd->dtd_u.dtu_members;\n            dmd != NULL; dmd = (ctf_dmdef_t *) ctf_dmd_list_next (dmd))\n         {\n-          if (get_btf_id (dmd->dmd_type) > BTF_MAX_TYPE)\n-            continue;\n-          if (strcmp (dmd->dmd_name, name) == 0)\n-            return i;\n-          i++;\n+\t  bool field_has_btf = get_btf_id (dmd->dmd_type) <= BTF_MAX_TYPE;\n+\n+\t  if (field == node)\n+\t    return field_has_btf ? i : -1;\n+\n+\t  if (field_has_btf)\n+\t    i++;\n+\n+\t  field = DECL_CHAIN (field);\n         }\n     }\n   return -1;"}, {"sha": "9d347006a69892176cf89959360ce7878c2a4b92", "filename": "gcc/testsuite/gcc.target/bpf/core-pr106745.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504149d2c92ddfcfab62ea6d1ed49ae72493e38/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-pr106745.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504149d2c92ddfcfab62ea6d1ed49ae72493e38/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-pr106745.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fcore-pr106745.c?ref=b504149d2c92ddfcfab62ea6d1ed49ae72493e38", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA -mco-re\" } */\n+\n+struct weird\n+{\n+  struct\n+  {\n+    int b;\n+  };\n+\n+  char x;\n+\n+  union\n+  {\n+    int a;\n+    int c;\n+  };\n+};\n+\n+\n+int test (struct weird *arg) {\n+  int *x = __builtin_preserve_access_index (&arg->b);\n+  int *y = __builtin_preserve_access_index (&arg->c);\n+\n+  return *x + *y;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:0:0.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"0:2:1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_aux_string\" 1 } } */"}]}