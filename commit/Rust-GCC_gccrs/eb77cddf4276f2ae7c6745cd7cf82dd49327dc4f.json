{"sha": "eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3N2NkZGY0Mjc2ZjJhZTdjNjc0NWNkN2NmODJkZDQ5MzI3ZGM0Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-12T06:19:43Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-12T06:19:43Z"}, "message": "re PR fortran/30746 (50th Anniversary Bug - Forward reference to contained function)\n\n2007-05-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30746\n\t* resolve.c (check_host_association): New function that detects\n\tincorrect host association and corrects it.\n\t(gfc_resolve_expr): Call the new function for variables and\n\tfunctions.\n\t* match.h : Remove prototype for gfc_match_rvalue.\n\t* gfortran.h : Add prototype for gfc_match_rvalue.\n\n2007-05-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30746\n\t* gfortran.dg/host_assoc_function_1.f90: New test.\n\nFrom-SVN: r124633", "tree": {"sha": "dd588c8fbf0e9cef5549e43a87d6b2ca8e4a03a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd588c8fbf0e9cef5549e43a87d6b2ca8e4a03a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/comments", "author": null, "committer": null, "parents": [{"sha": "e39187d4f39e1ce1184316fa1e3886439dd23818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39187d4f39e1ce1184316fa1e3886439dd23818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39187d4f39e1ce1184316fa1e3886439dd23818"}], "stats": {"total": 139, "additions": 132, "deletions": 7}, "files": [{"sha": "4046c881b41c50b82974ccb5c3065d3e78ab34c4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "patch": "@@ -1,3 +1,13 @@\n+2007-05-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30746\n+\t* resolve.c (check_host_association): New function that detects\n+\tincorrect host association and corrects it.\n+\t(gfc_resolve_expr): Call the new function for variables and\n+\tfunctions.\n+\t* match.h : Remove prototype for gfc_match_rvalue.\n+\t* gfortran.h : Add prototype for gfc_match_rvalue.\n+\n 2007-05-11 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/30876"}, {"sha": "38ef1a6d31906497e32299c738fc6033619b658d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "patch": "@@ -2160,6 +2160,7 @@ bool gfc_check_access (gfc_access, gfc_access);\n /* primary.c */\n symbol_attribute gfc_variable_attr (gfc_expr *, gfc_typespec *);\n symbol_attribute gfc_expr_attr (gfc_expr *);\n+match gfc_match_rvalue (gfc_expr **);\n \n /* trans.c */\n void gfc_generate_code (gfc_namespace *);"}, {"sha": "3ed673f0679b397b75f07d6382c9de5a8b9ccefd", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "patch": "@@ -153,7 +153,6 @@ match gfc_match_volatile (void);\n \n /* primary.c */\n match gfc_match_structure_constructor (gfc_symbol *, gfc_expr **);\n-match gfc_match_rvalue (gfc_expr **);\n match gfc_match_variable (gfc_expr **, int);\n match gfc_match_equiv_variable (gfc_expr **);\n match gfc_match_actual_arglist (int, gfc_actual_arglist **);"}, {"sha": "b6d1f3b97321d02ce75041acf574dab043b6887b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "patch": "@@ -3204,6 +3204,70 @@ resolve_variable (gfc_expr *e)\n }\n \n \n+/* Checks to see that the correct symbol has been host associated.\n+   The only situation where this arises is that in which a twice\n+   contained function is parsed after the host association is made.\n+   Therefore, on detecting this, the line is rematched, having got\n+   rid of the existing references and actual_arg_list.  */\n+static bool\n+check_host_association (gfc_expr *e)\n+{\n+  gfc_symbol *sym, *old_sym;\n+  locus temp_locus;\n+  gfc_expr *expr;\n+  int n;\n+\n+  if (e->symtree == NULL || e->symtree->n.sym == NULL)\n+    return e->expr_type == EXPR_FUNCTION;\n+\n+  old_sym = e->symtree->n.sym;\n+  if (gfc_current_ns->parent\n+\t&& gfc_current_ns->parent->parent\n+\t&& old_sym->ns != gfc_current_ns)\n+    {\n+      gfc_find_symbol (old_sym->name, gfc_current_ns->parent, 1, &sym);\n+      if (sym && old_sym != sym && sym->attr.flavor == FL_PROCEDURE)\n+\t{\n+\t  temp_locus = gfc_current_locus;\n+\t  gfc_current_locus = e->where;\n+\n+\t  gfc_buffer_error (1);\n+\n+\t  gfc_free_ref_list (e->ref);\n+\t  e->ref = NULL;\n+\n+\t  if (e->expr_type == EXPR_FUNCTION)\n+\t    {\n+\t      gfc_free_actual_arglist (e->value.function.actual);\n+\t      e->value.function.actual = NULL;\n+\t    }\n+\n+\t  if (e->shape != NULL)\n+\t    {\n+\t      for (n = 0; n < e->rank; n++)\n+\t\tmpz_clear (e->shape[n]);\n+\n+\t      gfc_free (e->shape);\n+\t    }\n+\n+\t  gfc_match_rvalue (&expr);\n+\t  gfc_clear_error ();\n+\t  gfc_buffer_error (0);\n+\n+\t  gcc_assert (expr && sym == expr->symtree->n.sym);\n+\n+\t  *e = *expr;\n+\t  gfc_free (expr);\n+\t  sym->refs++;\n+\n+\t  gfc_current_locus = temp_locus;\n+\t}\n+    }\n+\n+  return e->expr_type == EXPR_FUNCTION;\n+}\n+\n+\n /* Resolve an expression.  That is, make sure that types of operands agree\n    with their operators, intrinsic operators are converted to function calls\n    for overloaded types and unresolved function references are resolved.  */\n@@ -3223,13 +3287,16 @@ gfc_resolve_expr (gfc_expr *e)\n       break;\n \n     case EXPR_FUNCTION:\n-      t = resolve_function (e);\n-      break;\n-\n     case EXPR_VARIABLE:\n-      t = resolve_variable (e);\n-      if (t == SUCCESS)\n-\texpression_rank (e);\n+\n+      if (check_host_association (e))\n+\tt = resolve_function (e);\n+      else\n+\t{\n+\t  t = resolve_variable (e);\n+\t  if (t == SUCCESS)\n+\t    expression_rank (e);\n+\t}\n       break;\n \n     case EXPR_SUBSTRING:"}, {"sha": "3109938e70241a07d7174991147887a1ec109a4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "patch": "@@ -1,3 +1,8 @@\n+2007-05-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30746\n+\t* gfortran.dg/host_assoc_function_1.f90: New test.\n+\n 2007-05-11  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR c++/31829"}, {"sha": "019fc617be14f6e21b38ae6b9c659cdf4d870b42", "filename": "gcc/testsuite/gfortran.dg/host_assoc_function_1.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_1.f90?ref=eb77cddf4276f2ae7c6745cd7cf82dd49327dc4f", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! Tests the fix for the bug PR30746, in which the reference to 'x'\n+! in 'inner' wrongly host-associated with the variable 'x' rather\n+! than the function.\n+!\n+! Testcase is due to Malcolm Cohen, NAG.\n+!\n+real function z (i)\n+  integer :: i\n+  z = real (i)**i\n+end function\n+\n+MODULE m\n+  REAL :: x(3) = (/ 1.5, 2.5, 3.5 /)\n+  interface\n+    real function z (i)\n+      integer :: i\n+    end function\n+  end interface\n+CONTAINS\n+  SUBROUTINE s\n+    if (x(2) .ne. 2.5) call abort ()\n+    if (z(3) .ne. real (3)**3) call abort ()\n+    CALL inner\n+  CONTAINS\n+    SUBROUTINE inner\n+      i = 7\n+      if (x(i, 7) .ne. real (7)**7) call abort ()\n+      if (z(i, 7) .ne. real (7)**7) call abort ()\n+    END SUBROUTINE\n+    FUNCTION x(n, m)\n+      x = REAL(n)**m\n+    END FUNCTION\n+    FUNCTION z(n, m)\n+      z = REAL(n)**m\n+    END FUNCTION\n+\n+  END SUBROUTINE\n+END MODULE\n+  use m\n+  call s()\n+end\n+! { dg-final { cleanup-modules \"m\" } }"}]}