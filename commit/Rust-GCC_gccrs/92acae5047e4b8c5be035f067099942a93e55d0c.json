{"sha": "92acae5047e4b8c5be035f067099942a93e55d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhY2FlNTA0N2U0YjhjNWJlMDM1ZjA2NzA5OTk0MmE5M2U1NWQwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-15T09:41:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-15T12:55:28Z"}, "message": "Streamline vect_gen_while\n\nThis adjusts the vect_gen_while API to match that of\nvect_gen_while_not allowing further patches to generate more\nthan one stmt for the while case.\n\n2021-07-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vect_gen_while): Match up with\n\tvect_gen_while_not.\n\t* tree-vect-stmts.c (vect_gen_while): Adjust API to that\n\tof vect_gen_while_not.\n\t(vect_gen_while_not): Adjust.\n\t* tree-vect-loop-manip.c (vect_set_loop_controls_directly): Likewise.", "tree": {"sha": "1e3b72352d3239a11fdb26534aaf149d44fd7259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e3b72352d3239a11fdb26534aaf149d44fd7259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92acae5047e4b8c5be035f067099942a93e55d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92acae5047e4b8c5be035f067099942a93e55d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92acae5047e4b8c5be035f067099942a93e55d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92acae5047e4b8c5be035f067099942a93e55d0c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f71ec6fca0e093d27cb238d7c75dccb3a55d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f71ec6fca0e093d27cb238d7c75dccb3a55d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f71ec6fca0e093d27cb238d7c75dccb3a55d65"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "1f3d6614e6cacc6ca022afbb09b3f7ce30188215", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92acae5047e4b8c5be035f067099942a93e55d0c/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92acae5047e4b8c5be035f067099942a93e55d0c/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=92acae5047e4b8c5be035f067099942a93e55d0c", "patch": "@@ -609,11 +609,8 @@ vect_set_loop_controls_directly (class loop *loop, loop_vec_info loop_vinfo,\n \t    }\n \n \t  if (use_masks_p)\n-\t    {\n-\t      init_ctrl = make_temp_ssa_name (ctrl_type, NULL, \"max_mask\");\n-\t      gimple *tmp_stmt = vect_gen_while (init_ctrl, start, end);\n-\t      gimple_seq_add_stmt (preheader_seq, tmp_stmt);\n-\t    }\n+\t    init_ctrl = vect_gen_while (preheader_seq, ctrl_type,\n+\t\t\t\t\tstart, end, \"max_mask\");\n \t  else\n \t    {\n \t      init_ctrl = make_temp_ssa_name (compare_type, NULL, \"max_len\");\n@@ -652,9 +649,10 @@ vect_set_loop_controls_directly (class loop *loop, loop_vec_info loop_vinfo,\n       /* Get the control value for the next iteration of the loop.  */\n       if (use_masks_p)\n \t{\n-\t  next_ctrl = make_temp_ssa_name (ctrl_type, NULL, \"next_mask\");\n-\t  gcall *call = vect_gen_while (next_ctrl, test_index, this_test_limit);\n-\t  gsi_insert_before (test_gsi, call, GSI_SAME_STMT);\n+\t  gimple_seq stmts = NULL;\n+\t  next_ctrl = vect_gen_while (&stmts, ctrl_type, test_index,\n+\t\t\t\t      this_test_limit, \"next_mask\");\n+\t  gsi_insert_seq_before (test_gsi, stmts, GSI_SAME_STMT);\n \t}\n       else\n \t{"}, {"sha": "ec82acb8db966ec2081aee4449f9c2b50799b838", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92acae5047e4b8c5be035f067099942a93e55d0c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92acae5047e4b8c5be035f067099942a93e55d0c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=92acae5047e4b8c5be035f067099942a93e55d0c", "patch": "@@ -11984,22 +11984,25 @@ supportable_narrowing_operation (enum tree_code code,\n   return false;\n }\n \n-/* Generate and return a statement that sets vector mask MASK such that\n-   MASK[I] is true iff J + START_INDEX < END_INDEX for all J <= I.  */\n+/* Generate and return a vector mask of MASK_TYPE such that\n+   mask[I] is true iff J + START_INDEX < END_INDEX for all J <= I.\n+   Add the statements to SEQ.  */\n \n-gcall *\n-vect_gen_while (tree mask, tree start_index, tree end_index)\n+tree\n+vect_gen_while (gimple_seq *seq, tree mask_type, tree start_index,\n+\t\ttree end_index, const char *name)\n {\n   tree cmp_type = TREE_TYPE (start_index);\n-  tree mask_type = TREE_TYPE (mask);\n   gcc_checking_assert (direct_internal_fn_supported_p (IFN_WHILE_ULT,\n \t\t\t\t\t\t       cmp_type, mask_type,\n \t\t\t\t\t\t       OPTIMIZE_FOR_SPEED));\n   gcall *call = gimple_build_call_internal (IFN_WHILE_ULT, 3,\n \t\t\t\t\t    start_index, end_index,\n \t\t\t\t\t    build_zero_cst (mask_type));\n-  gimple_call_set_lhs (call, mask);\n-  return call;\n+  tree tmp = make_temp_ssa_name (mask_type, NULL, name);\n+  gimple_call_set_lhs (call, tmp);\n+  gimple_seq_add_stmt (seq, call);\n+  return tmp;\n }\n \n /* Generate a vector mask of type MASK_TYPE for which index I is false iff\n@@ -12009,9 +12012,7 @@ tree\n vect_gen_while_not (gimple_seq *seq, tree mask_type, tree start_index,\n \t\t    tree end_index)\n {\n-  tree tmp = make_ssa_name (mask_type);\n-  gcall *call = vect_gen_while (tmp, start_index, end_index);\n-  gimple_seq_add_stmt (seq, call);\n+  tree tmp = vect_gen_while (seq, mask_type, start_index, end_index);\n   return gimple_build (seq, BIT_NOT_EXPR, mask_type, tmp);\n }\n "}, {"sha": "f7c08ca2eb60bb6e2998d7612022f04e6e450b52", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92acae5047e4b8c5be035f067099942a93e55d0c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92acae5047e4b8c5be035f067099942a93e55d0c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=92acae5047e4b8c5be035f067099942a93e55d0c", "patch": "@@ -1948,7 +1948,8 @@ extern bool vect_supportable_shift (vec_info *, enum tree_code, tree);\n extern tree vect_gen_perm_mask_any (tree, const vec_perm_indices &);\n extern tree vect_gen_perm_mask_checked (tree, const vec_perm_indices &);\n extern void optimize_mask_stores (class loop*);\n-extern gcall *vect_gen_while (tree, tree, tree);\n+extern tree vect_gen_while (gimple_seq *, tree, tree, tree,\n+\t\t\t    const char * = nullptr);\n extern tree vect_gen_while_not (gimple_seq *, tree, tree, tree);\n extern opt_result vect_get_vector_types_for_stmt (vec_info *,\n \t\t\t\t\t\t  stmt_vec_info, tree *,"}]}