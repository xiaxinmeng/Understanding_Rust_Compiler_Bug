{"sha": "d60b40b86b166fbdb68523c4164c0003c8244192", "node_id": "C_kwDOANBUbNoAKGQ2MGI0MGI4NmIxNjZmYmRiNjg1MjNjNDE2NGMwMDAzYzgyNDQxOTI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-03T17:47:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-03T17:47:02Z"}, "message": "analyzer: use std::unique_ptr for checker_event\n\ngcc/analyzer/ChangeLog:\n\t* call-info.cc: Use std::unique_ptr for checker_event.\n\t* checker-path.cc: Likewise.\n\t* checker-path.h: Likewise.\n\t* diagnostic-manager.cc: Likewise.\n\t* engine.cc: Likewise.\n\t* pending-diagnostic.cc: Likewise.\n\t* sm-signal.cc: Likewise.\n\t* varargs.cc: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "2ee914b57501d5f580b19f3e7370ee1bace99b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee914b57501d5f580b19f3e7370ee1bace99b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d60b40b86b166fbdb68523c4164c0003c8244192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60b40b86b166fbdb68523c4164c0003c8244192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60b40b86b166fbdb68523c4164c0003c8244192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60b40b86b166fbdb68523c4164c0003c8244192/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e031c5a17a33f19ccae1e0e7972c97d2b2eb8250"}], "stats": {"total": 253, "additions": 133, "deletions": 120}, "files": [{"sha": "ffdab73b1653fbbfdc74d82a52c3337f8def0d31", "filename": "gcc/analyzer/call-info.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fcall-info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fcall-info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-info.cc?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/diagnostic-manager.h\"\n #include \"analyzer/exploded-graph.h\"\n #include \"analyzer/call-info.h\"\n+#include \"make-unique.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -113,10 +114,10 @@ call_info::add_events_to_path (checker_path *emission_path,\n   tree caller_fndecl = src_point.get_fndecl ();\n   const int stack_depth = src_point.get_stack_depth ();\n \n-  emission_path->add_event (new call_event (get_call_stmt ()->location,\n-\t\t\t\t\t    caller_fndecl,\n-\t\t\t\t\t    stack_depth,\n-\t\t\t\t\t    this));\n+  emission_path->add_event (make_unique<call_event> (get_call_stmt ()->location,\n+\t\t\t\t\t\t     caller_fndecl,\n+\t\t\t\t\t\t     stack_depth,\n+\t\t\t\t\t\t     this));\n }\n \n /* Recreate a call_details instance from this call_info.  */"}, {"sha": "40f9ccfe08f117fb086fe61b96797890d7eaab84", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/diagnostic-manager.h\"\n #include \"analyzer/checker-path.h\"\n #include \"analyzer/exploded-graph.h\"\n+#include \"make-unique.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -1262,16 +1263,16 @@ checker_path::add_region_creation_events (const region *reg,\n     if (const svalue *capacity_sval = model->get_capacity (reg))\n       capacity = model->get_representative_tree (capacity_sval);\n \n-  add_event (new region_creation_event (reg, capacity, RCE_MEM_SPACE,\n-\t\t\t\t\tloc, fndecl, depth));\n+  add_event (make_unique<region_creation_event> (reg, capacity, RCE_MEM_SPACE,\n+\t\t\t\t\t\t loc, fndecl, depth));\n \n   if (capacity)\n-    add_event (new region_creation_event (reg, capacity, RCE_CAPACITY,\n-\t\t\t\t\t  loc, fndecl, depth));\n+    add_event (make_unique<region_creation_event> (reg, capacity, RCE_CAPACITY,\n+\t\t\t\t\t\t   loc, fndecl, depth));\n \n   if (debug)\n-    add_event (new region_creation_event (reg, capacity, RCE_DEBUG,\n-\t\t\t\t\t  loc, fndecl, depth));\n+    add_event (make_unique<region_creation_event> (reg, capacity, RCE_DEBUG,\n+\t\t\t\t\t\t   loc, fndecl, depth));\n }\n \n /* Add a warning_event to the end of this path.  */\n@@ -1281,12 +1282,12 @@ checker_path::add_final_event (const state_machine *sm,\n \t\t\t       const exploded_node *enode, const gimple *stmt,\n \t\t\t       tree var, state_machine::state_t state)\n {\n-  checker_event *end_of_path\n-    = new warning_event (get_stmt_location (stmt, enode->get_function ()),\n-\t\t\t enode->get_function ()->decl,\n-\t\t\t enode->get_stack_depth (),\n-\t\t\t sm, var, state);\n-  add_event (end_of_path);\n+  add_event\n+    (make_unique<warning_event> (get_stmt_location (stmt,\n+\t\t\t\t\t\t    enode->get_function ()),\n+\t\t\t\t enode->get_function ()->decl,\n+\t\t\t\t enode->get_stack_depth (),\n+\t\t\t\t sm, var, state));\n }\n \n void"}, {"sha": "c8de5c9be2c7cf8777b88d3b4c8ca7c8394771e4", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -631,9 +631,9 @@ class checker_path : public diagnostic_path\n \n   void maybe_log (logger *logger, const char *desc) const;\n \n-  void add_event (checker_event *event)\n+  void add_event (std::unique_ptr<checker_event> event)\n   {\n-    m_events.safe_push (event);\n+    m_events.safe_push (event.release ());\n   }\n \n   void delete_event (int idx)"}, {"sha": "e77547567c18ada2ba6194dce6f1fd6c7b1de428", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 76, "deletions": 70, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -1559,15 +1559,16 @@ class state_change_event_creator : public state_change_visitor\n \n     int stack_depth = src_stack_depth;\n \n-    m_emission_path->add_event (new state_change_event (supernode,\n-\t\t\t\t\t\t\tstmt,\n-\t\t\t\t\t\t\tstack_depth,\n-\t\t\t\t\t\t\tsm,\n-\t\t\t\t\t\t\tNULL,\n-\t\t\t\t\t\t\tsrc_sm_val,\n-\t\t\t\t\t\t\tdst_sm_val,\n-\t\t\t\t\t\t\tNULL,\n-\t\t\t\t\t\t\tdst_state));\n+    m_emission_path->add_event\n+      (make_unique<state_change_event> (supernode,\n+\t\t\t\t\tstmt,\n+\t\t\t\t\tstack_depth,\n+\t\t\t\t\tsm,\n+\t\t\t\t\tNULL,\n+\t\t\t\t\tsrc_sm_val,\n+\t\t\t\t\tdst_sm_val,\n+\t\t\t\t\tNULL,\n+\t\t\t\t\tdst_state));\n     return false;\n   }\n \n@@ -1602,15 +1603,16 @@ class state_change_event_creator : public state_change_visitor\n     if (!stmt)\n       return false;\n \n-    m_emission_path->add_event (new state_change_event (supernode,\n-\t\t\t\t\t\t\tstmt,\n-\t\t\t\t\t\t\tstack_depth,\n-\t\t\t\t\t\t\tsm,\n-\t\t\t\t\t\t\tsval,\n-\t\t\t\t\t\t\tsrc_sm_val,\n-\t\t\t\t\t\t\tdst_sm_val,\n-\t\t\t\t\t\t\tdst_origin_sval,\n-\t\t\t\t\t\t\tdst_state));\n+    m_emission_path->add_event\n+      (make_unique<state_change_event> (supernode,\n+\t\t\t\t\tstmt,\n+\t\t\t\t\tstack_depth,\n+\t\t\t\t\tsm,\n+\t\t\t\t\tsval,\n+\t\t\t\t\tsrc_sm_val,\n+\t\t\t\t\tdst_sm_val,\n+\t\t\t\t\tdst_origin_sval,\n+\t\t\t\t\tdst_state));\n     return false;\n   }\n \n@@ -1743,14 +1745,15 @@ struct null_assignment_sm_context : public sm_context\n     const supernode *supernode = m_point->get_supernode ();\n     int stack_depth = m_point->get_stack_depth ();\n \n-    m_emission_path->add_event (new state_change_event (supernode,\n-\t\t\t\t\t\t\tm_stmt,\n-\t\t\t\t\t\t\tstack_depth,\n-\t\t\t\t\t\t\tm_sm,\n-\t\t\t\t\t\t\tvar_new_sval,\n-\t\t\t\t\t\t\tfrom, to,\n-\t\t\t\t\t\t\tNULL,\n-\t\t\t\t\t\t\t*m_new_state));\n+    m_emission_path->add_event\n+      (make_unique<state_change_event> (supernode,\n+\t\t\t\t\tm_stmt,\n+\t\t\t\t\tstack_depth,\n+\t\t\t\t\tm_sm,\n+\t\t\t\t\tvar_new_sval,\n+\t\t\t\t\tfrom, to,\n+\t\t\t\t\tNULL,\n+\t\t\t\t\t*m_new_state));\n   }\n \n   void set_next_state (const gimple *stmt,\n@@ -1765,14 +1768,15 @@ struct null_assignment_sm_context : public sm_context\n     const supernode *supernode = m_point->get_supernode ();\n     int stack_depth = m_point->get_stack_depth ();\n \n-    m_emission_path->add_event (new state_change_event (supernode,\n-\t\t\t\t\t\t\tm_stmt,\n-\t\t\t\t\t\t\tstack_depth,\n-\t\t\t\t\t\t\tm_sm,\n-\t\t\t\t\t\t\tsval,\n-\t\t\t\t\t\t\tfrom, to,\n-\t\t\t\t\t\t\tNULL,\n-\t\t\t\t\t\t\t*m_new_state));\n+    m_emission_path->add_event\n+      (make_unique<state_change_event> (supernode,\n+\t\t\t\t\tm_stmt,\n+\t\t\t\t\tstack_depth,\n+\t\t\t\t\tm_sm,\n+\t\t\t\t\tsval,\n+\t\t\t\t\tfrom, to,\n+\t\t\t\t\tNULL,\n+\t\t\t\t\t*m_new_state));\n   }\n \n   void warn (const supernode *, const gimple *,\n@@ -1907,7 +1911,7 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n       if (dst_point.get_supernode ()->entry_p ())\n \t{\n \t  emission_path->add_event\n-\t    (new function_entry_event\n+\t    (make_unique<function_entry_event>\n \t     (dst_point.get_supernode ()->get_start_location (),\n \t      dst_point.get_fndecl (),\n \t      dst_stack_depth));\n@@ -1943,16 +1947,16 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \tconst gcall *call = dyn_cast <const gcall *> (stmt);\n \tif (call && is_setjmp_call_p (call))\n \t  emission_path->add_event\n-\t    (new setjmp_event (stmt->location,\n-\t\t\t       dst_node,\n-\t\t\t       dst_point.get_fndecl (),\n-\t\t\t       dst_stack_depth,\n-\t\t\t       call));\n+\t    (make_unique<setjmp_event> (stmt->location,\n+\t\t\t\t\tdst_node,\n+\t\t\t\t\tdst_point.get_fndecl (),\n+\t\t\t\t\tdst_stack_depth,\n+\t\t\t\t\tcall));\n \telse\n \t  emission_path->add_event\n-\t    (new statement_event (stmt,\n-\t\t\t\t  dst_point.get_fndecl (),\n-\t\t\t\t  dst_stack_depth, dst_state));\n+\t    (make_unique<statement_event> (stmt,\n+\t\t\t\t\t   dst_point.get_fndecl (),\n+\t\t\t\t\t   dst_stack_depth, dst_state));\n \n \t/* Create state change events for assignment to NULL.\n \t   Iterate through the stmts in dst_enode, adding state change\n@@ -2042,11 +2046,12 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t \"this path would have been rejected as infeasible\"\n \t\t \" at this edge: \");\n       pb.get_feasibility_problem ()->dump_to_pp (&pp);\n-      emission_path->add_event (new precanned_custom_event\n-\t\t\t\t(dst_point.get_location (),\n-\t\t\t\t dst_point.get_fndecl (),\n-\t\t\t\t dst_stack_depth,\n-\t\t\t\t pp_formatted_text (&pp)));\n+      emission_path->add_event\n+\t(make_unique<precanned_custom_event>\n+\t (dst_point.get_location (),\n+\t  dst_point.get_fndecl (),\n+\t  dst_stack_depth,\n+\t  pp_formatted_text (&pp)));\n     }\n }\n \n@@ -2157,17 +2162,18 @@ diagnostic_manager::add_events_for_superedge (const path_builder &pb,\n     case SUPEREDGE_CFG_EDGE:\n       {\n \temission_path->add_event\n-\t  (new start_cfg_edge_event (eedge,\n-\t\t\t       (last_stmt\n-\t\t\t\t? last_stmt->location\n-\t\t\t\t: UNKNOWN_LOCATION),\n-\t\t\t       src_point.get_fndecl (),\n-\t\t\t       src_stack_depth));\n+\t  (make_unique<start_cfg_edge_event> (eedge,\n+\t\t\t\t\t      (last_stmt\n+\t\t\t\t\t       ? last_stmt->location\n+\t\t\t\t\t       : UNKNOWN_LOCATION),\n+\t\t\t\t\t      src_point.get_fndecl (),\n+\t\t\t\t\t      src_stack_depth));\n \temission_path->add_event\n-\t  (new end_cfg_edge_event (eedge,\n-\t\t\t\t   dst_point.get_supernode ()->get_start_location (),\n-\t\t\t\t   dst_point.get_fndecl (),\n-\t\t\t\t   dst_stack_depth));\n+\t  (make_unique<end_cfg_edge_event>\n+\t    (eedge,\n+\t     dst_point.get_supernode ()->get_start_location (),\n+\t     dst_point.get_fndecl (),\n+\t     dst_stack_depth));\n       }\n       break;\n \n@@ -2180,12 +2186,12 @@ diagnostic_manager::add_events_for_superedge (const path_builder &pb,\n \t/* TODO: add a subclass for this, or generate events for the\n \t   summary.  */\n \temission_path->add_event\n-\t  (new debug_event ((last_stmt\n-\t\t\t     ? last_stmt->location\n-\t\t\t     : UNKNOWN_LOCATION),\n-\t\t\t    src_point.get_fndecl (),\n-\t\t\t    src_stack_depth,\n-\t\t\t    \"call summary\"));\n+\t  (make_unique<debug_event> ((last_stmt\n+\t\t\t\t      ? last_stmt->location\n+\t\t\t\t      : UNKNOWN_LOCATION),\n+\t\t\t\t     src_point.get_fndecl (),\n+\t\t\t\t     src_stack_depth,\n+\t\t\t\t     \"call summary\"));\n       }\n       break;\n \n@@ -2196,12 +2202,12 @@ diagnostic_manager::add_events_for_superedge (const path_builder &pb,\n \n \tconst gcall *call_stmt = return_edge->get_call_stmt ();\n \temission_path->add_event\n-\t  (new return_event (eedge,\n-\t\t\t     (call_stmt\n-\t\t\t      ? call_stmt->location\n-\t\t\t      : UNKNOWN_LOCATION),\n-\t\t\t     dst_point.get_fndecl (),\n-\t\t\t     dst_stack_depth));\n+\t  (make_unique<return_event> (eedge,\n+\t\t\t\t      (call_stmt\n+\t\t\t\t       ? call_stmt->location\n+\t\t\t\t       : UNKNOWN_LOCATION),\n+\t\t\t\t      dst_point.get_fndecl (),\n+\t\t\t\t      dst_stack_depth));\n       }\n       break;\n     }"}, {"sha": "59a4e6f609708eb5c2a3762d0dae44660787c0fb", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -1772,7 +1772,8 @@ class stale_jmp_buf : public pending_diagnostic_subclass<stale_jmp_buf>\n \t   src_point.get_fndecl (),\n \t   src_stack_depth,\n \t   \"stack frame is popped here, invalidating saved environment\");\n-\temission_path->add_event (m_stack_pop_event);\n+\temission_path->add_event\n+\t  (std::unique_ptr<custom_event> (m_stack_pop_event));\n \treturn false;\n       }\n     return false;\n@@ -2015,19 +2016,21 @@ dynamic_call_info_t::add_events_to_path (checker_path *emission_path,\n   const int dest_stack_depth = dest_point.get_stack_depth ();\n \n   if (m_is_returning_call)\n-    emission_path->add_event (new return_event (eedge,\n-\t\t\t\t\t\t(m_dynamic_call\n-\t\t\t\t\t\t ? m_dynamic_call->location\n-\t\t\t\t\t\t : UNKNOWN_LOCATION),\n-\t\t\t\t\t\tdest_point.get_fndecl (),\n-\t\t\t\t\t\tdest_stack_depth));\n+    emission_path->add_event\n+      (make_unique<return_event> (eedge,\n+\t\t\t\t  (m_dynamic_call\n+\t\t\t\t   ? m_dynamic_call->location\n+\t\t\t\t   : UNKNOWN_LOCATION),\n+\t\t\t\t  dest_point.get_fndecl (),\n+\t\t\t\t  dest_stack_depth));\n   else\n-    emission_path->add_event (new call_event (eedge,\n-\t\t\t\t\t      (m_dynamic_call\n-\t\t\t\t\t       ? m_dynamic_call->location\n-\t\t\t\t\t       : UNKNOWN_LOCATION),\n-\t\t\t\t\t      src_point.get_fndecl (),\n-\t\t\t\t\t      src_stack_depth));\n+    emission_path->add_event\n+      (make_unique<call_event> (eedge,\n+\t\t\t\t(m_dynamic_call\n+\t\t\t\t ? m_dynamic_call->location\n+\t\t\t\t : UNKNOWN_LOCATION),\n+\t\t\t\tsrc_point.get_fndecl (),\n+\t\t\t\tsrc_stack_depth));\n }\n \n /* class rewind_info_t : public custom_edge_info.  */\n@@ -2072,12 +2075,12 @@ rewind_info_t::add_events_to_path (checker_path *emission_path,\n   const int dst_stack_depth = dst_point.get_stack_depth ();\n \n   emission_path->add_event\n-    (new rewind_from_longjmp_event\n+    (make_unique<rewind_from_longjmp_event>\n      (&eedge, get_longjmp_call ()->location,\n       src_point.get_fndecl (),\n       src_stack_depth, this));\n   emission_path->add_event\n-    (new rewind_to_setjmp_event\n+    (make_unique<rewind_to_setjmp_event>\n      (&eedge, get_setjmp_call ()->location,\n       dst_point.get_fndecl (),\n       dst_stack_depth, this));\n@@ -2666,7 +2669,7 @@ class tainted_args_function_info : public custom_edge_info\n \t\t\t   const exploded_edge &) const final override\n   {\n     emission_path->add_event\n-      (new tainted_args_function_custom_event\n+      (make_unique<tainted_args_function_custom_event>\n        (DECL_SOURCE_LOCATION (m_fndecl), m_fndecl, 0));\n   }\n \n@@ -3111,14 +3114,15 @@ class tainted_args_call_info : public custom_edge_info\n     /* Show the field in the struct declaration, e.g.\n        \"(1) field 'store' is marked with '__attribute__((tainted_args))'\"  */\n     emission_path->add_event\n-      (new tainted_args_field_custom_event (m_field));\n+      (make_unique<tainted_args_field_custom_event> (m_field));\n \n     /* Show the callback in the initializer\n        e.g.\n        \"(2) function 'gadget_dev_desc_UDC_store' used as initializer\n        for field 'store' marked with '__attribute__((tainted_args))'\".  */\n     emission_path->add_event\n-      (new tainted_args_callback_custom_event (m_loc, m_fndecl, 0, m_field));\n+      (make_unique<tainted_args_callback_custom_event> (m_loc, m_fndecl,\n+\t\t\t\t\t\t\t0, m_field));\n   }\n \n private:"}, {"sha": "fdbe6153f2c73a7564308b34e0ddd63c99635d39", "filename": "gcc/analyzer/pending-diagnostic.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.cc?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/exploded-graph.h\"\n #include \"diagnostic-path.h\"\n #include \"analyzer/checker-path.h\"\n+#include \"make-unique.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -178,12 +179,12 @@ pending_diagnostic::add_call_event (const exploded_edge &eedge,\n   const int src_stack_depth = src_point.get_stack_depth ();\n   const gimple *last_stmt = src_point.get_supernode ()->get_last_stmt ();\n   emission_path->add_event\n-    (new call_event (eedge,\n-\t\t     (last_stmt\n-\t\t      ? last_stmt->location\n-\t\t      : UNKNOWN_LOCATION),\n-\t\t     src_point.get_fndecl (),\n-\t\t     src_stack_depth));\n+    (make_unique<call_event> (eedge,\n+\t\t\t      (last_stmt\n+\t\t\t       ? last_stmt->location\n+\t\t\t       : UNKNOWN_LOCATION),\n+\t\t\t      src_point.get_fndecl (),\n+\t\t\t      src_stack_depth));\n }\n \n } // namespace ana"}, {"sha": "87e21a417158a843837d935927299d17407d3662", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -234,7 +234,7 @@ class signal_delivery_edge_info_t : public custom_edge_info\n     const final override\n   {\n     emission_path->add_event\n-      (new precanned_custom_event\n+      (make_unique<precanned_custom_event>\n        (UNKNOWN_LOCATION, NULL_TREE, 0,\n \t\"later on,\"\n \t\" when the signal is delivered to the process\"));"}, {"sha": "f7d4838ecb1ccd93bd556130fa07ba07d8c9e8de", "filename": "gcc/analyzer/varargs.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fvarargs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60b40b86b166fbdb68523c4164c0003c8244192/gcc%2Fanalyzer%2Fvarargs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fvarargs.cc?ref=d60b40b86b166fbdb68523c4164c0003c8244192", "patch": "@@ -788,13 +788,13 @@ class va_arg_diagnostic : public pending_diagnostic\n \t  = get_num_variadic_arguments (dst_node->get_function ()->decl,\n \t\t\t\t\tcall_stmt);\n \temission_path->add_event\n-\t  (new va_arg_call_event (eedge,\n-\t\t\t\t  (last_stmt\n-\t\t\t\t   ? last_stmt->location\n-\t\t\t\t   : UNKNOWN_LOCATION),\n-\t\t\t\t  src_point.get_fndecl (),\n-\t\t\t\t  src_stack_depth,\n-\t\t\t\t  num_variadic_arguments));\n+\t  (make_unique<va_arg_call_event> (eedge,\n+\t\t\t\t\t   (last_stmt\n+\t\t\t\t\t    ? last_stmt->location\n+\t\t\t\t\t    : UNKNOWN_LOCATION),\n+\t\t\t\t\t   src_point.get_fndecl (),\n+\t\t\t\t\t   src_stack_depth,\n+\t\t\t\t\t   num_variadic_arguments));\n       }\n     else\n       pending_diagnostic::add_call_event (eedge, emission_path);"}]}