{"sha": "e93aae4a497c38b46df818a629c78149fe6af24b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzYWFlNGE0OTdjMzhiNDZkZjgxOGE2MjljNzgxNDlmZTZhZjI0Yg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-29T00:16:50Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-29T00:16:50Z"}, "message": "Daily bump.", "tree": {"sha": "8e8d6501dd320e58e041de272a6585d3c5d7f984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e8d6501dd320e58e041de272a6585d3c5d7f984"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93aae4a497c38b46df818a629c78149fe6af24b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93aae4a497c38b46df818a629c78149fe6af24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93aae4a497c38b46df818a629c78149fe6af24b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93aae4a497c38b46df818a629c78149fe6af24b/comments", "author": null, "committer": null, "parents": [{"sha": "f635f0ce87d687b177b734968f18226d50499e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f635f0ce87d687b177b734968f18226d50499e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f635f0ce87d687b177b734968f18226d50499e75"}], "stats": {"total": 638, "additions": 637, "deletions": 1}, "files": [{"sha": "58ed7b1285095016c4d9ce30ba75012a613dde53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,139 @@\n+2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/complexity.o.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* doc/invoke.texi: Document -Wdeprecated-enum-enum-conversion\n+\tand -Wdeprecated-enum-float-conversion.  -Wenum-conversion is\n+\tno longer C/ObjC only.\n+\n+2020-10-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/97457\n+\t* value-range.cc (irange::set): Don't decay POLY_INT_CST ranges\n+\tto integer ranges.\n+\n+2020-10-28  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/vsx.md(xxgenpcvm_<mode>_internal): Remove TARGET_64BIT.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_slp_analyze_node_operations_1): Dump\n+\twhen shared vectype update fails.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): For skipped\n+\targs just push NULLs and vect_uninitialized_def.\n+\t(vect_build_slp_tree_2): Allocate skip_args for all ops\n+\tand pass it down to vect_get_and_check_slp_defs.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97615\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Do not build\n+\tan external from pattern defs.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_optimize_slp): Fix iteration over\n+\tall loads.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_instance): Split the store\n+\tgroup at the failure boundary and also re-analyze a large enough\n+\tmatching rest.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_slp_analyze_node_alignment):\n+\tDump when vect_update_shared_vectype fails.\n+\n+2020-10-28  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__ST2_LANE_FUNC, __ST3_LANE_FUNC)\n+\t(__ST4_LANE_FUNC): Rename the macro generating the 'q' variants\n+\tinto __ST2Q_LANE_FUNC, __ST2Q_LANE_FUNC, __ST2Q_LANE_FUNC so they\n+\tall can be undefed at the and of the file.\n+\t(vst2_lane_bf16, vst2q_lane_bf16, vst3_lane_bf16, vst3q_lane_bf16)\n+\t(vst4_lane_bf16, vst4q_lane_bf16): Add new intrinsics.\n+\n+2020-10-28  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__LD2_LANE_FUNC, __LD3_LANE_FUNC)\n+\t(__LD4_LANE_FUNC): Rename the macro generating the 'q' variants\n+\tinto __LD2Q_LANE_FUNC, __LD2Q_LANE_FUNC, __LD2Q_LANE_FUNC so they\n+\tall can be undefed at the and of the file.\n+\t(vld2_lane_bf16, vld2q_lane_bf16, vld3_lane_bf16, vld3q_lane_bf16)\n+\t(vld4_lane_bf16, vld4q_lane_bf16): Add new intrinsics.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_ALLOCATE.\n+\t* tree.h (OMP_CLAUSE_ALLOCATE_ALLOCATOR,\n+\tOMP_CLAUSE_ALLOCATE_COMBINED): Define.\n+\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add allocate\n+\tclause.\n+\t(walk_tree_1): Handle OMP_CLAUSE_ALLOCATE.\n+\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n+\t* gimplify.c (gimplify_scan_omp_clauses, gimplify_adjust_omp_clauses,\n+\tgimplify_omp_for): Likewise.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Likewise.\n+\t* omp-low.c (scan_sharing_clauses): Likewise.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-offload.c (omp_declare_target_tgt_fn_r): Handle direct calls to\n+\tdeclare variant base functions.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/96680\n+\t* lto-streamer.h (omp_lto_output_declare_variant_alt,\n+\tomp_lto_input_declare_variant_alt): Declare variant.\n+\t* symtab.c (symtab_node::get_partitioning_class): Return\n+\tSYMBOL_DUPLICATE for declare_variant_alt nodes.\n+\t* passes.c (ipa_write_summaries): Add declare_variant_alt to\n+\tpartition.\n+\t* lto-cgraph.c (output_refs): Call omp_lto_output_declare_variant_alt\n+\ton declare_variant_alt nodes.\n+\t(input_refs): Call omp_lto_input_declare_variant_alt on\n+\tdeclare_variant_alt nodes.\n+\t* lto-streamer-out.c (output_function): Don't call\n+\tcollect_block_tree_leafs if DECL_INITIAL is error_mark_node.\n+\t(lto_output): Call output_function even for declare_variant_alt\n+\tnodes.\n+\t* omp-general.c (omp_lto_output_declare_variant_alt,\n+\tomp_lto_input_declare_variant_alt): New functions.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* wide-int.cc (wi::set_bit_large): Call canonize unless setting\n+\tmsb bit and clearing bits above it.\n+\n+2020-10-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute_cache::cache_stmt): Accumulate\n+\treturn values and only set cache when everything returned true.\n+\t* gimple-range.cc (get_tree_range): Set the return range to UNDEFINED\n+\twhen the range isn't supported.\n+\t(gimple_ranger::calc_stmt): Return varying if the type is supported,\n+\teven if the stmt processing failed.  False otherwise.\n+\t(range_of_builtin_ubsan_call): Don't use gcc_assert.\n+\t(range_of_builtin_call): Ditto.\n+\t(gimple_ranger::range_of_cond_expr): Ditto.\n+\t(gimple_ranger::range_of_expr): Ditto\n+\t(gimple_ranger::range_on_entry): Ditto.\n+\t(gimple_ranger::range_on_exit): Ditto.\n+\t(gimple_ranger::range_on_edge): DItto.\n+\t(gimple_ranger::range_of_stmt): Don't use gcc_assert, and initialize\n+\treturn value to UNDEFINED.\n+\n 2020-10-27  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \tPR rtl-optimization/97497"}, {"sha": "8559f6c8b74eda17a81e6c019a66901ea26dac71", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1 +1 @@\n-20201028\n+20201029"}, {"sha": "17fd9b75cc7cb2219b87d2f27619cb0fa472e677", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,9 @@\n+2020-10-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR ada/97504\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS> <riscv*-*-*>: Use wraplf\n+\tversion of Aux_Long_Long_Float.\n+\n 2020-10-27  Doug Rupp  <rupp@adacore.com>\n \n \t* Makefile.rtl: Add vx7r2cert spec file to ARM, PowerPC and x86"}, {"sha": "f87d2a7c357e640d69849e2737dabb29cd0b33b3", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,45 @@\n+2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-state.cc (sm_state_map::on_liveness_change): Sort the\n+\tleaking svalues before calling on_state_leak.\n+\t(program_state::detect_leaks): Likewise when calling\n+\ton_svalue_leak.\n+\t* region-model-reachability.cc\n+\t(reachable_regions::mark_escaped_clusters): Likewise when\n+\tcalling on_escaped_function.\n+\n+2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97608\n+\t* region-model-reachability.cc (reachable_regions::handle_sval):\n+\tOperands of reachable reversible operations are reachable.\n+\n+2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (class state_machine): New forward decl.\n+\t(class logger): Likewise.\n+\t(class visitor): Likewise.\n+\t* complexity.cc: New file, taken from svalue.cc.\n+\t* complexity.h: New file, taken from region-model.h.\n+\t* region-model.h: Include \"analyzer/svalue.h\" and\n+\t\"analyzer/region.h\".  Move struct complexity to complexity.h.\n+\tMove svalue, its subclasses and supporting decls to svalue.h.\n+\tMove region, its subclasses and supporting decls to region.h.\n+\t* region.cc: Include \"analyzer/region.h\".\n+\t(symbolic_region::symbolic_region): Move here from region-model.h.\n+\t* region.h: New file, based on material from region-model.h.\n+\t* svalue.cc: Include \"analyzer/svalue.h\".\n+\t(complexity::complexity): Move to complexity.cc.\n+\t(complexity::from_pair): Likewise.\n+\t* svalue.h: New file, based on material from region-model.h.\n+\n+2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-state.cc (sm_state_map::print): Guard the printing of\n+\tthe origin pointer with !flag_dump_noaddr.\n+\t* region.cc (string_region::dump_to_pp): Likewise for\n+\tm_string_cst.\n+\n 2020-10-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97568"}, {"sha": "4a1feae2b54c8dd4e34f84633332504df2558cdb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,19 @@\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* c-opts.c (c_common_post_options): In C++20, turn on\n+\t-Wdeprecated-enum-enum-conversion and\n+\t-Wdeprecated-enum-float-conversion.\n+\t* c.opt (Wdeprecated-enum-enum-conversion,\n+\tWdeprecated-enum-float-conversion): New options.\n+\t(Wenum-conversion): Allow for C++ too.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_ALLOCATE.\n+\t* c-omp.c: Include bitmap.h.\n+\t(c_omp_split_clauses): Handle OMP_CLAUSE_ALLOCATE.\n+\n 2020-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \t* c-common.c (__is_nothrow_assignable): New."}, {"sha": "89913b72a89dd672a1056ca6ea74dc682ecb5422", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,21 @@\n+2020-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (store_parm_decls_newstyle): Use pedwarn_c11 not\n+\terror_at for omitted parameter name.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Handle allocate.\n+\t(c_parser_omp_clause_allocate): New function.\n+\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_ALLOCATE.\n+\t(OMP_FOR_CLAUSE_MASK, OMP_SECTIONS_CLAUSE_MASK,\n+\tOMP_PARALLEL_CLAUSE_MASK, OMP_SINGLE_CLAUSE_MASK,\n+\tOMP_TASK_CLAUSE_MASK, OMP_TASKGROUP_CLAUSE_MASK,\n+\tOMP_DISTRIBUTE_CLAUSE_MASK, OMP_TEAMS_CLAUSE_MASK,\n+\tOMP_TARGET_CLAUSE_MASK, OMP_TASKLOOP_CLAUSE_MASK): Add\n+\tPRAGMA_OMP_CLAUSE_ALLOCATE.\n+\t* c-typeck.c (c_finish_omp_clauses): Handle OMP_CLAUSE_ALLOCATE.\n+\n 2020-10-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.c (c_parser_std_attribute_specifier): Allow duplicate"}, {"sha": "aebf247711c23af11022767a49dd467c306975d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,70 @@\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\t* decl.c (grokdeclarator): Offer a fix-it hint for the \"unnecessary\n+\tparentheses in declaration\" warning.\n+\t* parser.c (cp_parser_direct_declarator): When setting\n+\tdeclarator->parenthesized, use a location range.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* call.c (build_conditional_expr_1): Warn about the deprecated\n+\tenum/real type conversion in C++20.  Also warn about a non-enumerated\n+\tand enumerated type in ?: when -Wenum-conversion is on.\n+\t* typeck.c (do_warn_enum_conversions): New function.\n+\t(cp_build_binary_op): Call it.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96675\n+\tPR c++/96742\n+\t* pt.c (tsubst_copy_and_build): Call value_dependent_expression_p or\n+\ttype_dependent_expression_p instead of type_dependent_expression_p_push.\n+\tBut only call value_dependent_expression_p for expressions that are\n+\tpotential_constant_expression.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94799\n+\t* parser.c (cp_parser_class_name): Use parser->scope when\n+\tsetting typename_p.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/86773\n+\t* parser.c (cp_parser_fold_expression): Return error_mark_node\n+\tif a left fold is preceded by an expression.\n+\n+2020-10-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_omp_declare_reduction): Set\n+\tDECL_LOCAL_DECL_P before push_template_decl.\n+\t* pt.c (instantiate_body): Nested fns do not have template_info.\n+\n+2020-10-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95132\n+\t* decl2.c (mark_used): Move up the constraints_satisfied_p check\n+\tso that we check constraints before calling maybe_instantiate_decl.\n+\n+2020-10-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (push_template_decl): Refactor for some RAII.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Handle allocate.\n+\t(cp_parser_omp_clause_allocate): New function.\n+\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_ALLOCATE.\n+\t(OMP_FOR_CLAUSE_MASK, OMP_SECTIONS_CLAUSE_MASK,\n+\tOMP_PARALLEL_CLAUSE_MASK, OMP_SINGLE_CLAUSE_MASK,\n+\tOMP_TASK_CLAUSE_MASK, OMP_TASKGROUP_CLAUSE_MASK,\n+\tOMP_DISTRIBUTE_CLAUSE_MASK, OMP_TEAMS_CLAUSE_MASK,\n+\tOMP_TARGET_CLAUSE_MASK, OMP_TASKLOOP_CLAUSE_MASK): Add\n+\tPRAGMA_OMP_CLAUSE_ALLOCATE.\n+\t* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_ALLOCATE.\n+\t* pt.c (tsubst_omp_clauses): Likewise.\n+\n 2020-10-27  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (struct lang_type): Delete nested_udts field."}, {"sha": "25de7aed13ed0d353ed668c91b0f621297900800", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,11 @@\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/96680\n+\t* lto-common.c (lto_fixup_prevailing_decls): Don't use\n+\tLTO_NO_PREVAIL on TREE_LIST's TREE_PURPOSE.\n+\t* lto-partition.c (lto_balanced_map): Treat declare_variant_alt\n+\tnodes like definitions.\n+\n 2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-partition.c (add_symbol_to_partition_1): Update for new thunk"}, {"sha": "7f784b996bbcbbe769de93f56ae26b7f18c2b7d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,226 @@\n+2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97608\n+\t* gcc.dg/analyzer/malloc-1.c (test_42d): New.\n+\t* gcc.dg/analyzer/pr97608.c: New test.\n+\n+2020-10-28  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/vsx-load-element-extend-char.c: Put \"dg-do run\"\n+\tbefore \"dg-do compile\", and make them mutually exclusive.\n+\t* gcc.target/powerpc/vsx-load-element-extend-int.c: Likewise.\n+\t* gcc.target/powerpc/vsx-load-element-extend-longlong.c: Likewise.\n+\t* gcc.target/powerpc/vsx-load-element-extend-short.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-char.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-int.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-longlong.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-short.c: Likewise.\n+\t* gcc.target/powerpc/altivec-consts.c: Likewise, add -save-temps.\n+\t* gcc.target/powerpc/le-altivec-consts.c: Likewise.\n+\n+2020-10-28  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/float128-type-1.c: Simplify target test.\n+\t* gcc.target/powerpc/float128-type-2.c: Likewise.\n+\n+2020-10-28  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/fold-vec-extract-char.p9.c: Don't check addi\n+\tcount for ilp32.\n+\t* gcc.target/powerpc/fold-vec-extract-int.p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-extract-longlong.p7.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-extract-longlong.p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Likewise.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/warn/mvp3.C: New test.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97573\n+\t* g++.dg/cpp0x/linkage2.C: Add dg-warning.\n+\t* g++.dg/parse/attr3.C: Likewise.\n+\t* g++.dg/cpp2a/enum-conv1.C: New test.\n+\t* g++.dg/cpp2a/enum-conv2.C: New test.\n+\t* g++.dg/cpp2a/enum-conv3.C: New test.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96675\n+\tPR c++/96742\n+\t* g++.dg/warn/Wdiv-by-zero-3.C: Turn dg-warning into dg-bogus.\n+\t* g++.dg/warn/Wtautological-compare3.C: New test.\n+\t* g++.dg/warn/Wtype-limits5.C: New test.\n+\t* g++.old-deja/g++.pt/crash10.C: Remove dg-warning.\n+\n+2020-10-28  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/sad-vectorize-1.c: Remove AIX skip.\n+\t* gcc.target/powerpc/sad-vectorize-2.c: Remove AIX skip.\n+\t* gcc.target/powerpc/sad-vectorize-3.c: Remove target.\n+\tRequire p9vector_hw.\n+\t* gcc.target/powerpc/sad-vectorize-4.c: Remove target.\n+\tRequire p9vector_hw.\n+\t* gcc.target/powerpc/signbit-1.c: Remove target.\n+\tRequire ppc_float128_sw.\n+\t* gcc.target/powerpc/signbit-2.c: Remove target.\n+\tRequire ppc_float128_sw.\n+\t* gcc.target/powerpc/signbit-3.c: Remove target.\n+\tRequire ppc_float128_sw.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94799\n+\t* g++.dg/template/lookup16.C: New test.\n+\n+2020-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/86773\n+\t* g++.dg/cpp1z/fold12.C: New test.\n+\n+2020-10-28  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/97535\n+\t* gcc.target/aarch64/pr97535.c: Exclude ILP32.\n+\n+2020-10-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/97457\n+\t* gcc.dg/vect/pr97457.c: New test.\n+\n+2020-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-parm-omit-1.c, gcc.dg/c11-parm-omit-2.c,\n+\tgcc.dg/c11-parm-omit-3.c, gcc.dg/c11-parm-omit-4.c,\n+\tgcc.dg/c2x-parm-omit-1.c, gcc.dg/c2x-parm-omit-2.c,\n+\tgcc.dg/c2x-parm-omit-3.c, gcc.dg/c2x-parm-omit-4.c: New tests.\n+\t* gcc.dg/noncompile/pr79758.c: Do not expect error for omitted\n+\tparameter name.\n+\n+2020-10-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95132\n+\t* g++.dg/cpp2a/concepts-fn7.C: New test.\n+\n+2020-10-28  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/vadsdu-0.c: Remove target.\n+\t* gcc.target/powerpc/vadsdu-1.c: Remove target.\n+\t* gcc.target/powerpc/vadsdu-2.c: Remove target.\n+\t* gcc.target/powerpc/vadsdu-3.c: Remove target.\n+\t* gcc.target/powerpc/vadsdu-4.c: Remove target.\n+\t* gcc.target/powerpc/vadsdu-5.c: Remove target.\n+\t* gcc.target/powerpc/vadsdub-1.c: Remove target.\n+\t* gcc.target/powerpc/vadsdub-2.c: Remove target.\n+\t* gcc.target/powerpc/vadsduh-1.c: Remove target.\n+\t* gcc.target/powerpc/vadsduh-2.c: Remove target.\n+\t* gcc.target/powerpc/vadsduw-1.c: Remove target.\n+\t* gcc.target/powerpc/vadsduw-2.c: Remove target.\n+\t* gcc.target/powerpc/vslv-0.c: Remove target.\n+\t* gcc.target/powerpc/vslv-1.c: Remove target.\n+\t* gcc.target/powerpc/vsrv-0.c: Remove target.\n+\t* gcc.target/powerpc/vsrv-1.c: Remove target.\n+\n+2020-10-28  David Edelsohn  <dje.gcc@gmail.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/byte-in-either-range-0.c: Remove target.\n+\t* gcc.target/powerpc/byte-in-either-range-1.c: Remove target.\n+\t* gcc.target/powerpc/byte-in-range-0.c: Remove target.\n+\t* gcc.target/powerpc/byte-in-range-1.c: Remove target.\n+\t* gcc.target/powerpc/byte-in-set-0.c: Remove target.\n+\t* gcc.target/powerpc/byte-in-set-1.c: Remove target.\n+\t* gcc.target/powerpc/byte-in-set-2.c: Remove target. Expect\n+\timplicit declaration warning.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-58.c: Require vect_double.\n+\t* gcc.dg/vect/bb-slp-59.c: Likewise.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97615\n+\t* gcc.dg/vect/bb-slp-pr97615.c: New testcase.\n+\n+2020-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-68.c: New testcase.\n+\n+2020-10-28  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n+\t(hbfloat16_t): Define type.\n+\t(CHECK_FP): Make it working for bfloat types.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vstN_lane_1.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vstN_lane_2.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst2_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst3_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst4_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\n+2020-10-28  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vldN_lane_1.c: New\n+\ttestcase.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vldN_lane_2.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld2_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld3_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld4_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/allocate-1.c: New test.\n+\t* c-c++-common/gomp/allocate-2.c: New test.\n+\t* c-c++-common/gomp/clauses-1.c (omp_allocator_handle_t): New typedef.\n+\t(foo, bar, baz): Add allocate clauses where allowed.\n+\n+2020-10-28  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/vsx-load-element-extend-char.c: Add -save-temps.\n+\t* gcc.target/powerpc/vsx-load-element-extend-int.c: Likewise.\n+\t* gcc.target/powerpc/vsx-load-element-extend-longlong.c: Likewise.\n+\t* gcc.target/powerpc/vsx-load-element-extend-short.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-char.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-int.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-longlong.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-short.c: Likewise.\n+\n+2020-10-28  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/vec-blend-runnable.c: Add save-temps.\n+\t* gcc.target/powerpc/vec-insert-word-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vec-permute-ext-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vec-replace-word-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vec-splati-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vec-ternarylogic-3.c: Likewise.\n+\t* gcc.target/powerpc/vec-ternarylogic-9.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-count-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-expand-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-extract-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-move-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vec-shift-double-runnable.c: Likewise,\n+\tand correct assembly match.\n+\n 2020-10-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c2x-attr-deprecated-4.c, gcc.dg/c2x-attr-fallthrough-4.c,"}, {"sha": "49ab9beeeaadcb291ef807d47a98bed7185fc788", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,22 @@\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/target-42.c: New test.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\tPR testsuite/81690\n+\t* testsuite/libgomp.c/usleep.h: New file.\n+\t* testsuite/libgomp.c/target-32.c: Include usleep.h.\n+\t(main): Use tgt_usleep instead of usleep.\n+\t* testsuite/libgomp.c/thread-limit-2.c: Include usleep.h.\n+\t(main): Use tgt_usleep instead of usleep.\n+\n+2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/96680\n+\t* testsuite/libgomp.c/declare-variant-1.c: New test.\n+\n 2020-10-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c/target-41.c: New test."}, {"sha": "69de22f9f6c5c6e9a22f1ce04432bd6d5ade05ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93aae4a497c38b46df818a629c78149fe6af24b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93aae4a497c38b46df818a629c78149fe6af24b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e93aae4a497c38b46df818a629c78149fe6af24b", "patch": "@@ -1,3 +1,104 @@\n+2020-10-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Remove duplicate\n+\tpatterns.\n+\t(CXXABI_1.3.13): Restore missing piece.\n+\n+2020-10-28  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* acinclude.m4 (glibcxx_SUBDIRS): Add src/c++20.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): New symbols.\n+\t* configure: Regenerate.\n+\t* include/std/sstream:\n+\t(basic_stringbuf::basic_stringbuf(allocator const&)): New constructor.\n+\t(basic_stringbuf::basic_stringbuf(openmode, allocator const&)): Likewise.\n+\t(basic_stringbuf::basic_stringbuf(basic_string&&, openmode)): Likewise.\n+\t(basic_stringbuf::basic_stringbuf(basic_stringbuf&&, allocator const&)):\n+\tLikewise.\n+\t(basic_stringbuf::get_allocator()): New method.\n+\t(basic_stringbuf::view()): Likewise.\n+\t(basic_istringstream::basic_istringstream(basic_string&&, openmode)):\n+\tNew constructor.\n+\t(basic_istringstream::basic_istringstream(openmode, allocator const&)):\n+\tLikewise\n+\t(basic_istringstream::view()): New method.\n+\t(basic_ostringstream::basic_ostringstream(basic_string&&, openmode)):\n+\tNew constructor.\n+\t(basic_ostringstream::basic_ostringstream(openmode, allocator const&)):\n+\tLikewise\n+\t(basic_ostringstream::view()): New method.\n+\t(basic_stringstream::basic_stringstream(basic_string&&, openmode)):\n+\tNew constructor.\n+\t(basic_stringstream::basic_stringstream(openmode, allocator const&)):\n+\tLikewise\n+\t(basic_stringstream::view()): New method.\n+\t* src/Makefile.in: Add c++20 directory.\n+\t* src/Makefile.am: Regenerate.\n+\t* src/c++20/Makefile.am: Add makefile for new sub-directory.\n+\t* src/c++20/Makefile.in: Generate.\n+\t* src/c++20/sstream-inst.cc: New file defining explicit\n+\tinstantiations for basic_stringbuf, basic_istringstream,\n+\tbasic_ostringstream, and basic_stringstream member functions\n+\tadded in C++20.\n+\t* testsuite/27_io/basic_stringbuf/cons/char/2.cc: New test.\n+\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/view/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/view/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istringstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istringstream/cons/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istringstream/view/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istringstream/view/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/cons/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/view/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/view/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/cons/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/view/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/view/wchar_t/1.cc: Likewise.\n+\n+2020-10-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/96713\n+\t* include/std/chrono (year_month_weekday::operator sys_days):\n+\tCast the result of index() to int so that the initializer for\n+\tdays{} is sign-extended when it's converted to the underlying\n+\ttype.\n+\t* testsuite/std/time/year_month_weekday/3.cc: New test.\n+\n+2020-10-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/new_opnt.cc (new): Add comment about forced unwind\n+\texceptions.\n+\n+2020-10-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94268\n+\t* config/os/mingw32-w64/os_defines.h (_GLIBCXX_BUFSIZ):\n+\tDefine.\n+\t* config/os/mingw32/os_defines.h (_GLIBCXX_BUFSIZ):\n+\tDefine.\n+\t* include/bits/fstream.tcc: Use _GLIBCXX_BUFSIZ instead\n+\tof BUFSIZ.\n+\t* include/ext/stdio_filebuf.h: Likewise.\n+\t* include/std/fstream (_GLIBCXX_BUFSIZ): Define.\n+\n+2020-10-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95592\n+\t* include/bits/valarray_after.h (_DEFINE_EXPR_UNARY_OPERATOR)\n+\t(_DEFINE_EXPR_BINARY_OPERATOR, _DEFINE_EXPR_BINARY_FUNCTION):\n+\tUse elaborated-type-specifier and qualified-id to avoid\n+\tambiguities with QNX system headers.\n+\t* testsuite/26_numerics/valarray/95592.cc: New test.\n+\n+2020-10-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95609\n+\t* include/std/span (span): Reorder data members to match common\n+\timplementations of struct iovec.\n+\t* testsuite/23_containers/span/layout_compat.cc: New test.\n+\n 2020-10-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/functional (std::_Placeholder): Define for C++98"}]}