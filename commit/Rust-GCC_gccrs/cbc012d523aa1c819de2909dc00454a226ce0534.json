{"sha": "cbc012d523aa1c819de2909dc00454a226ce0534", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JjMDEyZDUyM2FhMWM4MTlkZTI5MDlkYzAwNDU0YTIyNmNlMDUzNA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2007-09-08T13:18:49Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-09-08T13:18:49Z"}, "message": "re PR rtl-optimization/32283 (Missed induction variable optimization)\n\n\tPR tree-optimization/32283\n\t* tree-ssa-loop-ivopts.c (may_eliminate_iv): Use\n\testimated_loop_iterations.\n\t(determine_use_iv_cost_condition): Decrease cost of expressions\n\tused in iv elimination.\n\n\t* gcc.dg/tree-ssa/loop-31.c: New test.\n\nFrom-SVN: r128272", "tree": {"sha": "53f39305ff8de4157e5710fcf6c2b2d0a0f21bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53f39305ff8de4157e5710fcf6c2b2d0a0f21bb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbc012d523aa1c819de2909dc00454a226ce0534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc012d523aa1c819de2909dc00454a226ce0534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc012d523aa1c819de2909dc00454a226ce0534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc012d523aa1c819de2909dc00454a226ce0534/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fc6f12f498676b90ee96f3488af0c59a74d4905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc6f12f498676b90ee96f3488af0c59a74d4905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc6f12f498676b90ee96f3488af0c59a74d4905"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "f09c60db992101c03305e94b728deea244aedcf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbc012d523aa1c819de2909dc00454a226ce0534", "patch": "@@ -1,3 +1,11 @@\n+2007-09-08  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/32283\n+\t* tree-ssa-loop-ivopts.c (may_eliminate_iv): Use\n+\testimated_loop_iterations.\n+\t(determine_use_iv_cost_condition): Decrease cost of expressions\n+\tused in iv elimination.\n+\n 2007-09-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_gimple_expr): Avoid building new"}, {"sha": "b29fc791803b92048c300dc1db8bfe4f08d5dc1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cbc012d523aa1c819de2909dc00454a226ce0534", "patch": "@@ -1,3 +1,8 @@\n+2007-09-08  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/32283\n+\t* gcc.dg/tree-ssa/loop-31.c: New test.\n+\n 2007-09-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/26449"}, {"sha": "cf5843ca7b85b2e9ae24327932e5e3ec9e43196e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-31.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-31.c?ref=cbc012d523aa1c819de2909dc00454a226ce0534", "patch": "@@ -0,0 +1,19 @@\n+/* PR 32283 */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+short a[(2048)];\n+short foo (int len, int v)\n+{\n+  int i;\n+  for (i = 0; i < len; i++) {\n+      a[i] = v;\n+  }\n+  return a[0];\n+}\n+\n+/* When we do not have addressing mode including multiplication,\n+   the memory access should be strength-reduced.  */\n+/* { dg-final { scan-tree-dump-times \" \\\\+ 2\" 1 \"optimized\" { target arm-*-* ia64-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c8cefd418a195f66ea7920e4b0878f0735519f73", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc012d523aa1c819de2909dc00454a226ce0534/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=cbc012d523aa1c819de2909dc00454a226ce0534", "patch": "@@ -3623,11 +3623,11 @@ may_eliminate_iv (struct ivopts_data *data,\n {\n   basic_block ex_bb;\n   edge exit;\n-  tree nit, nit_type;\n-  tree wider_type, period, per_type;\n+  tree nit, period;\n   struct loop *loop = data->current_loop;\n   aff_tree bnd;\n-  \n+  double_int period_value, max_niter;\n+\n   if (TREE_CODE (cand->iv->step) != INTEGER_CST)\n     return false;\n \n@@ -3650,25 +3650,19 @@ may_eliminate_iv (struct ivopts_data *data,\n   if (!nit)\n     return false;\n \n-  nit_type = TREE_TYPE (nit);\n-\n   /* Determine whether we may use the variable to test whether niter iterations\n      elapsed.  This is the case iff the period of the induction variable is\n      greater than the number of iterations.  */\n   period = iv_period (cand->iv);\n   if (!period)\n     return false;\n-  per_type = TREE_TYPE (period);\n-\n-  wider_type = TREE_TYPE (period);\n-  if (TYPE_PRECISION (nit_type) < TYPE_PRECISION (per_type))\n-    wider_type = per_type;\n-  else\n-    wider_type = nit_type;\n \n-  if (!integer_nonzerop (fold_build2 (GE_EXPR, boolean_type_node,\n-\t\t\t\t      fold_convert (wider_type, period),\n-\t\t\t\t      fold_convert (wider_type, nit))))\n+  /* Compare the period with the estimate on the number of iterations of the\n+     loop.  */\n+  if (!estimated_loop_iterations (loop, true, &max_niter))\n+    return false;\n+  period_value = tree_to_double_int (period);\n+  if (double_int_ucmp (period_value, max_niter) <= 0)\n     return false;\n \n   cand_value_at (loop, cand, use->stmt, nit, &bnd);\n@@ -3697,7 +3691,12 @@ determine_use_iv_cost_condition (struct ivopts_data *data,\n \n   /* Try iv elimination.  */\n   if (may_eliminate_iv (data, use, cand, &bound))\n-    elim_cost = force_var_cost (data, bound, &depends_on_elim);\n+    {\n+      elim_cost = force_var_cost (data, bound, &depends_on_elim);\n+      /* The bound is a loop invariant, so it will be only computed\n+\t once.  */\n+      elim_cost /= AVG_LOOP_NITER (data->current_loop);\n+    }\n   else\n     elim_cost = INFTY;\n "}]}