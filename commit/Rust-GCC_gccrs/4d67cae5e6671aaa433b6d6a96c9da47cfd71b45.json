{"sha": "4d67cae5e6671aaa433b6d6a96c9da47cfd71b45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2N2NhZTVlNjY3MWFhYTQzM2I2ZDZhOTZjOWRhNDdjZmQ3MWI0NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-26T19:55:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-26T19:55:41Z"}, "message": "compiler: generalize cleanup of unresolved placeholder pointer types\n    \n    This change extends the work in https://golang.org/cl/51131 to include\n    placeholder pointer types created for Go function types, which can\n    also be left dangling/unresolved in some instances. This fixes an\n    assert in Llvm_backend::materializeComposite.\n    \n    Test case can be found in https://golang.org/cl/191743.\n    \n    Updates golang/go#33020.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/191744\n\nFrom-SVN: r274935", "tree": {"sha": "28860a43c67fcc22cbd8f8e8a9aadc03d930306b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28860a43c67fcc22cbd8f8e8a9aadc03d930306b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45/comments", "author": null, "committer": null, "parents": [{"sha": "0e883151165b2039469cb2fdcf33c7f8f59782c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e883151165b2039469cb2fdcf33c7f8f59782c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e883151165b2039469cb2fdcf33c7f8f59782c0"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "4f08f2320d8a059699ad74eaacc80b443b716ac5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4d67cae5e6671aaa433b6d6a96c9da47cfd71b45", "patch": "@@ -1,4 +1,4 @@\n-c9ca1c6bf887c752cc75cf1ddaec8ddd1ec962d4\n+58c0fc64d91edc53ef9828b85cf3dc86aeb94e12\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "20f8f2747f25f771d5c51a06ddfc549dca15c0d8", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=4d67cae5e6671aaa433b6d6a96c9da47cfd71b45", "patch": "@@ -1138,15 +1138,15 @@ Type::get_backend_placeholder(Gogo* gogo)\n \t// A Go function type is a pointer to a struct type.\n \tLocation loc = this->function_type()->location();\n \tbt = gogo->backend()->placeholder_pointer_type(\"\", loc, false);\n+\tType::placeholder_pointers.push_back(this);\n       }\n       break;\n \n     case TYPE_POINTER:\n       {\n \tLocation loc = Linemap::unknown_location();\n \tbt = gogo->backend()->placeholder_pointer_type(\"\", loc, false);\n-\tPointer_type* pt = this->convert<Pointer_type, TYPE_POINTER>();\n-\tType::placeholder_pointers.push_back(pt);\n+\tType::placeholder_pointers.push_back(this);\n       }\n       break;\n \n@@ -5474,10 +5474,11 @@ Pointer_type::do_import(Import* imp)\n \n Type::Pointer_type_table Type::pointer_types;\n \n-// A list of placeholder pointer types.  We keep this so we can ensure\n-// they are finalized.\n+// A list of placeholder pointer types; items on this list will be either be\n+// Pointer_type or Function_type. We keep this so we can ensure they are\n+// finalized.\n \n-std::vector<Pointer_type*> Type::placeholder_pointers;\n+std::vector<Type*> Type::placeholder_pointers;\n \n // Make a pointer type.\n \n@@ -5513,11 +5514,11 @@ Type::finish_pointer_types(Gogo* gogo)\n   // placeholder pointer types as we finalized existing ones.\n   for (size_t i = 0; i < Type::placeholder_pointers.size(); i++)\n     {\n-      Pointer_type* pt = Type::placeholder_pointers[i];\n-      Type_btypes::iterator tbti = Type::type_btypes.find(pt);\n+      Type* typ = Type::placeholder_pointers[i];\n+      Type_btypes::iterator tbti = Type::type_btypes.find(typ);\n       if (tbti != Type::type_btypes.end() && tbti->second.is_placeholder)\n         {\n-          pt->finish_backend(gogo, tbti->second.btype);\n+          typ->finish_backend(gogo, tbti->second.btype);\n           tbti->second.is_placeholder = false;\n         }\n     }"}, {"sha": "0978701c5d657e747323e7c732f34c0bc094d96d", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d67cae5e6671aaa433b6d6a96c9da47cfd71b45/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=4d67cae5e6671aaa433b6d6a96c9da47cfd71b45", "patch": "@@ -1409,7 +1409,7 @@ class Type\n   static Pointer_type_table pointer_types;\n \n   // List of placeholder pointer types.\n-  static std::vector<Pointer_type*> placeholder_pointers;\n+  static std::vector<Type*> placeholder_pointers;\n \n   // The type classification.\n   Type_classification classification_;"}]}