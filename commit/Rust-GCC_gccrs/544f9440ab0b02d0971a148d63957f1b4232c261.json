{"sha": "544f9440ab0b02d0971a148d63957f1b4232c261", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ0Zjk0NDBhYjBiMDJkMDk3MWExNDhkNjM5NTdmMWI0MjMyYzI2MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-04-30T06:54:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-04-30T06:54:08Z"}, "message": "re PR libstdc++/21286 (filebuf::xsgetn vs pipes)\n\n2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n\t    Nathan Myers  <ncm@cantrip.org>\n\n\tPR libstdc++/21286\n\t* include/bits/fstream.tcc (basic_filebuf<>::xsgetn):\n\tLoop on short reads; remove the work-around for\n\tlibstdc++/20806, not needed anymore.\n\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\n\nFrom-SVN: r99033", "tree": {"sha": "0bf21a7dd9361d87106bd7a9152f621c96e87f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf21a7dd9361d87106bd7a9152f621c96e87f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/544f9440ab0b02d0971a148d63957f1b4232c261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544f9440ab0b02d0971a148d63957f1b4232c261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544f9440ab0b02d0971a148d63957f1b4232c261", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544f9440ab0b02d0971a148d63957f1b4232c261/comments", "author": null, "committer": null, "parents": [{"sha": "bbf9b9139b111d41be207d2925b619828b1c081b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf9b9139b111d41be207d2925b619828b1c081b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf9b9139b111d41be207d2925b619828b1c081b"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "48f8a7d3f88df56780cd904cb909ac7da305cc3d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544f9440ab0b02d0971a148d63957f1b4232c261/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544f9440ab0b02d0971a148d63957f1b4232c261/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=544f9440ab0b02d0971a148d63957f1b4232c261", "patch": "@@ -1,3 +1,11 @@\n+2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n+\t    Nathan Myers  <ncm@cantrip.org>\n+\n+\tPR libstdc++/21286\n+\t* include/bits/fstream.tcc (basic_filebuf<>::xsgetn):\n+\tLoop on short reads; remove the work-around for\n+\tlibstdc++/20806, not needed anymore.\n+\n 2005-04-29  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/21238"}, {"sha": "40bf428e2c1f726206fbdb47be9d003f077a0897", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544f9440ab0b02d0971a148d63957f1b4232c261/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544f9440ab0b02d0971a148d63957f1b4232c261/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=544f9440ab0b02d0971a148d63957f1b4232c261", "patch": "@@ -531,15 +531,8 @@ namespace std\n        const bool __testin = _M_mode & ios_base::in;\n        const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;\n \n-#if _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM\n-       // About this workaround, see libstdc++/20806.\n-       const bool __testbinary = _M_mode & ios_base::binary;\n-       if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()\n-\t   && __testin && __testbinary && !_M_writing)\n-#else\n        if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()\n \t   && __testin && !_M_writing)\n-#endif\n \t {\n \t   // First, copy the chars already present in the buffer.\n \t   const streamsize __avail = this->egptr() - this->gptr();\n@@ -555,13 +548,28 @@ namespace std\n \t       __n -= __avail;\n \t     }\n \n-\t   const streamsize __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),\n-\t\t\t\t\t\t   __n);\n-\t   if (__len == -1)\n-\t     __throw_ios_failure(__N(\"basic_filebuf::xsgetn \"\n-\t\t\t\t     \"error reading the file\"));\n-\t   __ret += __len;\n-\t   if (__len == __n)\n+\t   // Need to loop in case of short reads (relatively common\n+\t   // with pipes).\n+\t   streamsize __len;\n+\t   for (;;)\n+\t     {\n+\t       __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),\n+\t\t\t\t      __n);\n+\t       if (__len == -1)\n+\t\t __throw_ios_failure(__N(\"basic_filebuf::xsgetn \"\n+\t\t\t\t\t \"error reading the file\"));\n+\t       if (__len == 0)\n+\t\t break;\n+\n+\t       __n -= __len;\n+\t       __ret += __len;\n+\t       if (__n == 0)\n+\t\t break;\n+\n+\t       __s += __len;\n+\t     }\n+\n+\t   if (__n == 0)\n \t     {\n \t       _M_set_buffer(0);\n \t       _M_reading = true;"}]}