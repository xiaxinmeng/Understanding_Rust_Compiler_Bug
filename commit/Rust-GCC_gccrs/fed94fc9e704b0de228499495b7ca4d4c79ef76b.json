{"sha": "fed94fc9e704b0de228499495b7ca4d4c79ef76b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkOTRmYzllNzA0YjBkZTIyODQ5OTQ5NWI3Y2E0ZDRjNzllZjc2Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-06T21:54:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-06T21:57:39Z"}, "message": "Reimplement LEAF_REG_REMAP macro for the SPARC\n\nThe current implementation as an array of chars is indeed a bit awkward\nso this reimplements it as a function taking and returning an int.\n\ngcc/\n\t* config/sparc/sparc-protos.h (order_regs_for_local_alloc): Rename\n\tto...\n\t(sparc_order_regs_for_local_alloc): ...this.\n\t(sparc_leaf_reg_remap): Declare.\n\t* config/sparc/sparc.h (ADJUST_REG_ALLOC_ORDER): Adjust.\n\t(LEAF_REG_REMAP): Reimplement as call to sparc_leaf_reg_remap.\n\t* config/sparc/sparc.c (leaf_reg_remap): Delete.\n\t(order_regs_for_local_alloc): Rename to...\n\t(sparc_order_regs_for_local_alloc): ...this.\n\t(sparc_leaf_reg_remap): New function.\n\t(sparc_conditional_register_usage): Do not modify leaf_reg_remap.", "tree": {"sha": "9a8a1e51e92be2f0ac60bf897728e5c621a55140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a8a1e51e92be2f0ac60bf897728e5c621a55140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed94fc9e704b0de228499495b7ca4d4c79ef76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed94fc9e704b0de228499495b7ca4d4c79ef76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed94fc9e704b0de228499495b7ca4d4c79ef76b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed94fc9e704b0de228499495b7ca4d4c79ef76b/comments", "author": null, "committer": null, "parents": [{"sha": "03d921abe60fe9ff54a3c449eff1531e73a19215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d921abe60fe9ff54a3c449eff1531e73a19215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d921abe60fe9ff54a3c449eff1531e73a19215"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "8879ac3925d1f15aea935fa78562380997982e25", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed94fc9e704b0de228499495b7ca4d4c79ef76b/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed94fc9e704b0de228499495b7ca4d4c79ef76b/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=fed94fc9e704b0de228499495b7ca4d4c79ef76b", "patch": "@@ -30,7 +30,8 @@ extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n extern unsigned long sparc_type_code (tree);\n #endif /* TREE_CODE */\n \n-extern void order_regs_for_local_alloc (void);\n+extern void sparc_order_regs_for_local_alloc (void);\n+extern int sparc_leaf_reg_remap (int);\n extern int sparc_initial_elimination_offset (int);\n extern void sparc_expand_prologue (void);\n extern void sparc_flat_expand_prologue (void);"}, {"sha": "04fc80f0ee62a95064057f862cdb1e9dfdc2d4d4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed94fc9e704b0de228499495b7ca4d4c79ef76b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed94fc9e704b0de228499495b7ca4d4c79ef76b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=fed94fc9e704b0de228499495b7ca4d4c79ef76b", "patch": "@@ -507,25 +507,6 @@ static const struct processor_costs *sparc_costs = &cypress_costs;\n   ((TARGET_ARCH64 && !TARGET_CM_MEDLOW) || flag_pic)\n #endif\n \n-/* Vector to say how input registers are mapped to output registers.\n-   HARD_FRAME_POINTER_REGNUM cannot be remapped by this function to\n-   eliminate it.  You must use -fomit-frame-pointer to get that.  */\n-char leaf_reg_remap[] =\n-{ 0, 1, 2, 3, 4, 5, 6, 7,\n-  -1, -1, -1, -1, -1, -1, 14, -1,\n-  -1, -1, -1, -1, -1, -1, -1, -1,\n-  8, 9, 10, 11, 12, 13, -1, 15,\n-\n-  32, 33, 34, 35, 36, 37, 38, 39,\n-  40, 41, 42, 43, 44, 45, 46, 47,\n-  48, 49, 50, 51, 52, 53, 54, 55,\n-  56, 57, 58, 59, 60, 61, 62, 63,\n-  64, 65, 66, 67, 68, 69, 70, 71,\n-  72, 73, 74, 75, 76, 77, 78, 79,\n-  80, 81, 82, 83, 84, 85, 86, 87,\n-  88, 89, 90, 91, 92, 93, 94, 95,\n-  96, 97, 98, 99, 100, 101, 102};\n-\n /* Vector, indexed by hard register number, which contains 1\n    for a register that is allowable in a candidate for leaf\n    function treatment.  */\n@@ -8863,18 +8844,18 @@ epilogue_renumber (rtx *where, int test)\n \f\n /* Leaf functions and non-leaf functions have different needs.  */\n \n-static const int\n-reg_leaf_alloc_order[] = REG_LEAF_ALLOC_ORDER;\n+static const int reg_leaf_alloc_order[] = REG_LEAF_ALLOC_ORDER;\n \n-static const int\n-reg_nonleaf_alloc_order[] = REG_ALLOC_ORDER;\n+static const int reg_nonleaf_alloc_order[] = REG_ALLOC_ORDER;\n \n-static const int *const reg_alloc_orders[] = {\n+static const int *const reg_alloc_orders[] =\n+{\n   reg_leaf_alloc_order,\n-  reg_nonleaf_alloc_order};\n+  reg_nonleaf_alloc_order\n+};\n \n void\n-order_regs_for_local_alloc (void)\n+sparc_order_regs_for_local_alloc (void)\n {\n   static int last_order_nonleaf = 1;\n \n@@ -8886,7 +8867,28 @@ order_regs_for_local_alloc (void)\n \t      FIRST_PSEUDO_REGISTER * sizeof (int));\n     }\n }\n-\f\n+\n+int\n+sparc_leaf_reg_remap (int regno)\n+{\n+  gcc_checking_assert (regno >= 0);\n+\n+  /* Do not remap in flat mode.  */\n+  if (TARGET_FLAT)\n+    return regno;\n+\n+  /* Do not remap global, stack pointer or floating-point registers.  */\n+  if (regno < 8 || regno == STACK_POINTER_REGNUM || regno > SPARC_LAST_INT_REG)\n+    return regno;\n+\n+  /* Neither out nor local nor frame pointer registers must appear.  */\n+  if ((regno >= 8 && regno <= 23) || regno == HARD_FRAME_POINTER_REGNUM)\n+    return -1;\n+\n+  /* Remap in to out registers.  */\n+  return regno - 16;\n+}\n+\n /* Return 1 if REG and MEM are legitimate enough to allow the various\n    MEM<-->REG splits to be run.  */\n \n@@ -12983,14 +12985,11 @@ sparc_conditional_register_usage (void)\n     fixed_regs[4] = 1;\n   else if (fixed_regs[4] == 2)\n     fixed_regs[4] = 0;\n+\n+  /* Disable leaf function optimization in flat mode.  */\n   if (TARGET_FLAT)\n-    {\n-      int regno;\n-      /* Disable leaf functions.  */\n-      memset (sparc_leaf_regs, 0, FIRST_PSEUDO_REGISTER);\n-      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\tleaf_reg_remap [regno] = regno;\n-    }\n+    memset (sparc_leaf_regs, 0, FIRST_PSEUDO_REGISTER);\n+\n   if (TARGET_VIS)\n     global_regs[SPARC_GSR_REG] = 1;\n }"}, {"sha": "4da5a06df2fd76289f012b6ccb6d5251c415c957", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed94fc9e704b0de228499495b7ca4d4c79ef76b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed94fc9e704b0de228499495b7ca4d4c79ef76b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=fed94fc9e704b0de228499495b7ca4d4c79ef76b", "patch": "@@ -965,13 +965,12 @@ extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n   96, 97, 98, 99,\t\t\t/* %fcc0-3 */\t\\\n   100, 0, 14, 30, 31, 101, 102 }\t/* %icc, %g0, %o6, %i6, %i7, %sfp, %gsr */\n \n-#define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER sparc_order_regs_for_local_alloc ()\n \n extern char sparc_leaf_regs[];\n #define LEAF_REGISTERS sparc_leaf_regs\n \n-extern char leaf_reg_remap[];\n-#define LEAF_REG_REMAP(REGNO) (leaf_reg_remap[REGNO])\n+#define LEAF_REG_REMAP(REGNO) sparc_leaf_reg_remap (REGNO)\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS GENERAL_REGS"}]}