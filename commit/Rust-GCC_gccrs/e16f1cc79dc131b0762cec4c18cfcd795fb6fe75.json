{"sha": "e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE2ZjFjYzc5ZGMxMzFiMDc2MmNlYzRjMThjZmNkNzk1ZmI2ZmU3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-25T08:47:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-25T08:47:15Z"}, "message": "internal-fn.def (LAUNDER): New internal function.\n\n\t* internal-fn.def (LAUNDER): New internal function.\n\t* internal-fn.c (expand_LAUNDER): New function.\nc-family/\n\t* c-common.h (enum rid): Add RID_BUILTIN_LAUNDER.\n\t* c-common.c (c_common_reswords): Add __builtin_launder.\ncp/\n\t* cp-tree.h (finish_builtin_launder): Declare.\n\t* parser.c (cp_parser_postfix_expression): Handle RID_BUILTIN_LAUNDER.\n\t* semantics.c (finish_builtin_launder): New function.\n\t* pt.c (tsubst_copy_and_build): Handle instantiation of IFN_LAUNDER.\n\t* constexpr.c (cxx_eval_internal_function): Handle IFN_LAUNDER.\n\t(potential_constant_expression_1): Likewise.\ntestsuite/\n\t* g++.dg/cpp1z/launder1.C: New test.\n\t* g++.dg/cpp1z/launder2.C: New test.\n\nFrom-SVN: r241506", "tree": {"sha": "2d1523ca1b3160a1e7eafa9814f6a920b91ac43e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d1523ca1b3160a1e7eafa9814f6a920b91ac43e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/comments", "author": null, "committer": null, "parents": [{"sha": "080c5459776a70bf6dc9c3410361011591667951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080c5459776a70bf6dc9c3410361011591667951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080c5459776a70bf6dc9c3410361011591667951"}], "stats": {"total": 246, "additions": 227, "deletions": 19}, "files": [{"sha": "c8331867dc00c020e384a8e24a7bb7e877857982", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -1,4 +1,10 @@\n+2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* internal-fn.def (LAUNDER): New internal function.\n+\t* internal-fn.c (expand_LAUNDER): New function.\n+\n 2016-10-25  Georg-Johann Lay  <avr@gjlay.de>\n+\t    Pitchumani Sivanupandi  <pitchumani.sivanupandi@microchip.com>\n \n \tNew avr target pass to work around performance loss by PR fix.\n \n@@ -18,7 +24,7 @@\n \t(avr_optimize_casesi): New functions.\n \n 2016-10-25  Georg-Johann Lay  <avr@gjlay.de>\n-\t    Pitchumani Sivanupandi <pitchumani.sivanupandi@microchip.com>\n+\t    Pitchumani Sivanupandi  <pitchumani.sivanupandi@microchip.com>\n \n \tPR target/71676\n \tPR target/71678"}, {"sha": "15d7488ba041964c1b3ff6ccb34897ea45d975cf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -1,3 +1,8 @@\n+2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.h (enum rid): Add RID_BUILTIN_LAUNDER.\n+\t* c-common.c (c_common_reswords): Add __builtin_launder.\n+\n 2016-10-24  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-common.c (c_common_truthvalue_conversion): Warn for"}, {"sha": "307862b9c7c4d694acb5a42c7491ee8e3ecef80d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -375,6 +375,7 @@ const struct c_common_resword c_common_reswords[] =\n     RID_BUILTIN_CALL_WITH_STATIC_CHAIN, D_CONLY },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, D_CONLY },\n   { \"__builtin_complex\", RID_BUILTIN_COMPLEX, D_CONLY },\n+  { \"__builtin_launder\", RID_BUILTIN_LAUNDER, D_CXXONLY },\n   { \"__builtin_shuffle\", RID_BUILTIN_SHUFFLE, 0 },\n   { \"__builtin_offsetof\", RID_OFFSETOF, 0 },\n   { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, D_CONLY },"}, {"sha": "547bab2ac4e457c23aac6e0c6aaa1ec1a61819b1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -146,8 +146,8 @@ enum rid\n   RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,\n \n   /* C++ extensions */\n-  RID_ADDRESSOF,\n-  RID_BASES,                   RID_DIRECT_BASES,\n+  RID_ADDRESSOF,               RID_BASES,\n+  RID_BUILTIN_LAUNDER,         RID_DIRECT_BASES,\n   RID_HAS_NOTHROW_ASSIGN,      RID_HAS_NOTHROW_CONSTRUCTOR,\n   RID_HAS_NOTHROW_COPY,        RID_HAS_TRIVIAL_ASSIGN,\n   RID_HAS_TRIVIAL_CONSTRUCTOR, RID_HAS_TRIVIAL_COPY,"}, {"sha": "21c6408b1a0abaf1e499766b5b2c1e3c4c0cf731", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -1,3 +1,12 @@\n+2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (finish_builtin_launder): Declare.\n+\t* parser.c (cp_parser_postfix_expression): Handle RID_BUILTIN_LAUNDER.\n+\t* semantics.c (finish_builtin_launder): New function.\n+\t* pt.c (tsubst_copy_and_build): Handle instantiation of IFN_LAUNDER.\n+\t* constexpr.c (cxx_eval_internal_function): Handle IFN_LAUNDER.\n+\t(potential_constant_expression_1): Likewise.\n+\n 2016-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-objcp-common.c (cp_decl_dwarf_attribute): Handle DW_AT_reference"}, {"sha": "8f7b7f34b647376b67e1bd4d938587c4e276d29b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -1330,6 +1330,10 @@ cxx_eval_internal_function (const constexpr_ctx *ctx, tree t,\n       opcode = MULT_EXPR;\n       break;\n \n+    case IFN_LAUNDER:\n+      return cxx_eval_constant_expression (ctx, CALL_EXPR_ARG (t, 0),\n+\t\t\t\t\t   false, non_constant_p, overflow_p);\n+\n     default:\n       if (!ctx->quiet)\n \terror_at (EXPR_LOC_OR_LOC (t, input_location),\n@@ -4920,6 +4924,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t\tcase IFN_ADD_OVERFLOW:\n \t\tcase IFN_SUB_OVERFLOW:\n \t\tcase IFN_MUL_OVERFLOW:\n+\t\tcase IFN_LAUNDER:\n \t\t  bail = false;\n \n \t\tdefault:"}, {"sha": "c58996925c3ca075223deebcf09988929f1af710", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -6494,6 +6494,8 @@ extern bool generic_lambda_fn_p\t\t\t(tree);\n extern void maybe_add_lambda_conv_op            (tree);\n extern bool is_lambda_ignored_entity            (tree);\n extern bool lambda_static_thunk_p\t\t(tree);\n+extern tree finish_builtin_launder\t\t(location_t, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n \n /* in tree.c */\n extern int cp_tree_operand_length\t\t(const_tree);"}, {"sha": "f962dfb0759a589f5b41d8ea33476f2f3bb25e87", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -6604,6 +6604,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \n     case RID_ADDRESSOF:\n     case RID_BUILTIN_SHUFFLE:\n+    case RID_BUILTIN_LAUNDER:\n       {\n \tvec<tree, va_gc> *vec;\n \tunsigned int i;\n@@ -6628,6 +6629,18 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\t   \"%<__builtin_addressof%>\");\n \t    return error_mark_node;\n \n+\t  case RID_BUILTIN_LAUNDER:\n+\t    if (vec->length () == 1)\n+\t      postfix_expression = finish_builtin_launder (loc, (*vec)[0],\n+\t\t\t\t\t\t\t   tf_warning_or_error);\n+\t    else\n+\t      {\n+\t\terror_at (loc, \"wrong number of arguments to \"\n+\t\t\t       \"%<__builtin_launder%>\");\n+\t\tpostfix_expression = error_mark_node;\n+\t      }\n+\t    break;\n+\n \t  case RID_BUILTIN_SHUFFLE:\n \t    if (vec->length () == 2)\n \t      return build_x_vec_perm_expr (loc, (*vec)[0], NULL_TREE,"}, {"sha": "c916e58482fa09941ecf46a97cc0850c7728a8d2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -16599,19 +16599,19 @@ tsubst_copy_and_build (tree t,\n \ttree ret;\n \n \tfunction = CALL_EXPR_FN (t);\n-\tif (function == NULL_TREE)\n-\t  {\n-\t    /* If you hit this assert, it means that you're trying to tsubst\n-\t       an internal function with arguments.  This isn't yet supported,\n-\t       so you need to build another internal call with the tsubsted\n-\t       arguments after the arguments have been tsubsted down below.  */\n-\t    gcc_assert (call_expr_nargs (t) == 0);\n-\t    RETURN (t);\n-\t  }\n+\t/* Internal function with no arguments.  */\n+\tif (function == NULL_TREE && call_expr_nargs (t) == 0)\n+\t  RETURN (t);\n+\n \t/* When we parsed the expression, we determined whether or\n \t   not Koenig lookup should be performed.  */\n \tkoenig_p = KOENIG_LOOKUP_P (t);\n-\tif (TREE_CODE (function) == SCOPE_REF)\n+\tif (function == NULL_TREE)\n+\t  {\n+\t    koenig_p = false;\n+\t    qualified_p = false;\n+\t  }\n+\telse if (TREE_CODE (function) == SCOPE_REF)\n \t  {\n \t    qualified_p = true;\n \t    function = tsubst_qualified_id (function, args, complain, in_decl,\n@@ -16709,7 +16709,8 @@ tsubst_copy_and_build (tree t,\n \t    && !any_type_dependent_arguments_p (call_args))\n \t  function = perform_koenig_lookup (function, call_args, tf_none);\n \n-\tif (identifier_p (function)\n+\tif (function != NULL_TREE\n+\t    && identifier_p (function)\n \t    && !any_type_dependent_arguments_p (call_args))\n \t  {\n \t    if (koenig_p && (complain & tf_warning_or_error))\n@@ -16721,7 +16722,10 @@ tsubst_copy_and_build (tree t,\n \t\t\t    (function, args, complain, in_decl, true,\n \t\t\t     integral_constant_expression_p));\n \t\tif (unq == error_mark_node)\n-\t\t  RETURN (error_mark_node);\n+\t\t  {\n+\t\t    release_tree_vector (call_args);\n+\t\t    RETURN (error_mark_node);\n+\t\t  }\n \n \t\tif (unq != function)\n \t\t  {\n@@ -16774,14 +16778,40 @@ tsubst_copy_and_build (tree t,\n \t  }\n \n \t/* Remember that there was a reference to this entity.  */\n-\tif (DECL_P (function)\n+\tif (function != NULL_TREE\n+\t    && DECL_P (function)\n \t    && !mark_used (function, complain) && !(complain & tf_error))\n-\t  RETURN (error_mark_node);\n+\t  {\n+\t    release_tree_vector (call_args);\n+\t    RETURN (error_mark_node);\n+\t  }\n \n \t/* Put back tf_decltype for the actual call.  */\n \tcomplain |= decltype_flag;\n \n-\tif (TREE_CODE (function) == OFFSET_REF)\n+\tif (function == NULL_TREE)\n+\t  switch (CALL_EXPR_IFN (t))\n+\t    {\n+\t    case IFN_LAUNDER:\n+\t      gcc_assert (nargs == 1);\n+\t      if (vec_safe_length (call_args) != 1)\n+\t\t{\n+\t\t  error_at (EXPR_LOC_OR_LOC (t, input_location),\n+\t\t\t    \"wrong number of arguments to \"\n+\t\t\t    \"%<__builtin_launder%>\");\n+\t\t  ret = error_mark_node;\n+\t\t}\n+\t      else\n+\t\tret = finish_builtin_launder (EXPR_LOC_OR_LOC (t,\n+\t\t\t\t\t\t\t       input_location),\n+\t\t\t\t\t      (*call_args)[0], complain);\n+\t      break;\n+\n+\t    default:\n+\t      /* Unsupported internal function with arguments.  */\n+\t      gcc_unreachable ();\n+\t    }\n+\telse if (TREE_CODE (function) == OFFSET_REF)\n \t  ret = build_offset_ref_call_from_tree (function, &call_args,\n \t\t\t\t\t\t complain);\n \telse if (TREE_CODE (function) == COMPONENT_REF)"}, {"sha": "1a7c478d4ecd1b253237fd0a927c58ca6002b8e5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -9449,4 +9449,26 @@ finish_binary_fold_expr (tree expr1, tree expr2, int op)\n   return error_mark_node;\n }\n \n+/* Finish __builtin_launder (arg).  */\n+\n+tree\n+finish_builtin_launder (location_t loc, tree arg, tsubst_flags_t complain)\n+{\n+  tree orig_arg = arg;\n+  if (!type_dependent_expression_p (arg))\n+    arg = decay_conversion (arg, complain);\n+  if (error_operand_p (arg))\n+    return error_mark_node;\n+  if (!type_dependent_expression_p (arg)\n+      && TREE_CODE (TREE_TYPE (arg)) != POINTER_TYPE)\n+    {\n+      error_at (loc, \"non-pointer argument to %<__builtin_launder%>\");\n+      return error_mark_node;\n+    }\n+  if (processing_template_decl)\n+    arg = orig_arg;\n+  return build_call_expr_internal_loc (loc, IFN_LAUNDER,\n+\t\t\t\t       TREE_TYPE (arg), 1, arg);\n+}\n+\n #include \"gt-cp-semantics.h\""}, {"sha": "44776976d2ad3aa2b50f9570cd4873d9bf7025f0", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -2207,6 +2207,19 @@ expand_ATOMIC_COMPARE_EXCHANGE (internal_fn, gcall *call)\n   expand_ifn_atomic_compare_exchange (call);\n }\n \n+/* Expand LAUNDER to assignment, lhs = arg0.  */\n+\n+static void\n+expand_LAUNDER (internal_fn, gcall *call)\n+{\n+  tree lhs = gimple_call_lhs (call);\n+\n+  if (!lhs)\n+    return;\n+\n+  expand_assignment (lhs, gimple_call_arg (call, 0), false);\n+}\n+\n /* Expand a call to FN using the operands in STMT.  FN has a single\n    output operand and NARGS input operands.  */\n "}, {"sha": "28863dfe4b3ff854ce475dbff31aebb3b69cc542", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -198,6 +198,9 @@ DEF_INTERNAL_FN (ATOMIC_COMPARE_EXCHANGE, ECF_LEAF | ECF_NOTHROW, NULL)\n /* To implement [[fallthrough]].  */\n DEF_INTERNAL_FN (FALLTHROUGH, ECF_LEAF | ECF_NOTHROW, NULL)\n \n+/* To implement __builtin_launder.  */\n+DEF_INTERNAL_FN (LAUNDER, ECF_LEAF | ECF_NOTHROW | ECF_NOVOPS, NULL)\n+\n #undef DEF_INTERNAL_INT_FN\n #undef DEF_INTERNAL_FLT_FN\n #undef DEF_INTERNAL_OPTAB_FN"}, {"sha": "1dc07326565d46380214914e836c64d3bb10004e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -1,11 +1,17 @@\n+2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp1z/launder1.C: New test.\n+\t* g++.dg/cpp1z/launder2.C: New test.\n+\n 2016-10-25  Georg-Johann Lay  <avr@gjlay.de>\n+\t    Pitchumani Sivanupandi  <pitchumani.sivanupandi@microchip.com>\n \n \tPR target/71676\n \tPR target/71678\n \t* gcc.target/avr/pr71676-2.c: New test.\n \n 2016-10-25  Georg-Johann Lay  <avr@gjlay.de>\n-\t    Pitchumani Sivanupandi <pitchumani.sivanupandi@microchip.com>\n+\t    Pitchumani Sivanupandi  <pitchumani.sivanupandi@microchip.com>\n \n \tPR target/71676\n \tPR target/71678"}, {"sha": "8f3b022f01141ccc6d1cbb57768599bea438c8f7", "filename": "gcc/testsuite/g++.dg/cpp1z/launder1.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flaunder1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flaunder1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flaunder1.C?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do run { target c++11 } }\n+// { dg-additional-options \"-O2\" }\n+\n+void *\n+operator new (decltype (sizeof (0)), void *p)\n+{\n+  return p;\n+}\n+\n+namespace std\n+{\n+  template <typename T>\n+  T *\n+  launder (T *p)\n+  {\n+    return __builtin_launder (p);\n+  }\n+}\n+\n+struct A\n+{\n+  virtual int f ();\n+};\n+\n+struct B : A\n+{\n+  virtual int f ()\n+  {\n+    new (this) A;\n+    return 1;\n+  }\n+};\n+\n+int\n+A::f ()\n+{\n+  new (this) B;\n+  return 2;\n+}\n+\n+static_assert (sizeof (B) == sizeof (A), \"\");\n+\n+int\n+main ()\n+{\n+  A a;\n+  int n = a.f ();\n+  int m = std::launder (&a)->f ();\n+  if (n != 2 || m != 1)\n+    __builtin_abort ();\n+}"}, {"sha": "9cd1779704b3643fabed388e1fab7f444bb37b59", "filename": "gcc/testsuite/g++.dg/cpp1z/launder2.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flaunder2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flaunder2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flaunder2.C?ref=e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { target c++11 } }\n+\n+int a;\n+int *b = __builtin_launder ();\t\t// { dg-error \"wrong number of arguments to\" }\n+int *c = __builtin_launder (&a, 2);\t// { dg-error \"wrong number of arguments to\" }\n+int *d = __builtin_launder (&a);\n+int e = __builtin_launder (a);\t\t// { dg-error \"non-pointer argument to\" }\n+int &f = a;\n+int g = __builtin_launder (f);\t\t// { dg-error \"non-pointer argument to\" }\n+\n+template <typename T> T f1 (T x) { return __builtin_launder (x); }\t// { dg-error \"non-pointer argument to\" }\n+template <typename T> T f2 (T x) { return __builtin_launder (x); }\n+\n+int h = f1 (a);\n+int *i = f2 (&a);\n+struct S { long s; int foo (); } *j;\n+S *k = f2 (j);\n+int l = __builtin_launder (j)->foo ();\n+\n+template <typename T> T *f3 (T *x) { return __builtin_launder (x); }\n+\n+long *m;\n+long *n = f3 (m);\n+int *o = f3 (&a);\n+\n+template <typename T, typename... U> T *f4 (U... x) { return __builtin_launder (x...); }\n+template <typename T, typename... U> T *f5 (U... x) { return __builtin_launder (x...); }\t// { dg-error \"wrong number of arguments to\" }\n+template <typename T, typename... U> T *f6 (U... x) { return __builtin_launder (x...); }\t// { dg-error \"wrong number of arguments to\" }\n+template <typename T, typename... U> T f7 (T x, U... y) { return __builtin_launder (x, y...); }\t// { dg-error \"wrong number of arguments to\" }\n+\n+long *p = f4<long, long *> (m);\n+long *q = f5<long> ();\n+long *r = f6<long, long *, int> (m, 1);\n+S s;\n+int t = __builtin_launder (&s)->foo ();\n+\n+constexpr const int *f8 (const int *x) { return __builtin_launder (x); }\n+template <typename T> constexpr T f9 (T x) { return __builtin_launder (x); }\n+constexpr int u = 6;\n+constexpr const int *v = f8 (&u);\n+constexpr const int *w = f9 (&u);\n+static_assert (*f8 (&u) == 6 && *f9 (&u) == 6, \"\");"}]}