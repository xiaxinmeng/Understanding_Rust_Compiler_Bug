{"sha": "a09f1a766b297f1e248c86b3d2795c1501a506ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5ZjFhNzY2YjI5N2YxZTI0OGM4NmIzZDI3OTVjMTUwMWE1MDZlZg==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2013-06-19T21:01:06Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2013-06-19T21:01:06Z"}, "message": "re PR driver/57651 (gcc-ar and gcc-nm don't find the lto plugin)\n\n2013-06-19  Matthias Klose  <doko@ubuntu.com>\n\n        PR driver/57651\n        * file-find.h (find_a_file): Add a mode parameter.\n        * file-find.c (find_a_file): Likewise.\n        * gcc-ar.c (main): Call find_a_file with R_OK for the plugin,\n        with X_OK for the executables.\n        * collect2.c (main): Call find_a_file with X_OK.\n\nFrom-SVN: r200219", "tree": {"sha": "8f4628b585dfd1bbf58b2333cd36b27d3654d463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f4628b585dfd1bbf58b2333cd36b27d3654d463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09f1a766b297f1e248c86b3d2795c1501a506ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09f1a766b297f1e248c86b3d2795c1501a506ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09f1a766b297f1e248c86b3d2795c1501a506ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09f1a766b297f1e248c86b3d2795c1501a506ef/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d18b0ad768f4b8e4126cda2ce0a3f1f5a0ddd29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d18b0ad768f4b8e4126cda2ce0a3f1f5a0ddd29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d18b0ad768f4b8e4126cda2ce0a3f1f5a0ddd29"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "c754159ed1326e84df1991b7a00999598fce71cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a09f1a766b297f1e248c86b3d2795c1501a506ef", "patch": "@@ -1,3 +1,12 @@\n+2013-06-19  Matthias Klose  <doko@ubuntu.com>\n+\n+\tPR driver/57651\n+\t* file-find.h (find_a_file): Add a mode parameter.\n+\t* file-find.c (find_a_file): Likewise.\n+\t* gcc-ar.c (main): Call find_a_file with R_OK for the plugin,\n+\twith X_OK for the executables.\n+\t* collect2.c (main): Call find_a_file with X_OK.\n+\n 2013-06-19  Steve Ellcey  <sellcey@mips.com>\n \n \tPR target/56942"}, {"sha": "b1eafb84b5b1cdaa79885373ca3b22eba41648dc", "filename": "gcc/collect2.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=a09f1a766b297f1e248c86b3d2795c1501a506ef", "patch": "@@ -1110,55 +1110,55 @@ main (int argc, char **argv)\n   if (ld_file_name == 0)\n #endif\n #ifdef REAL_LD_FILE_NAME\n-  ld_file_name = find_a_file (&path, REAL_LD_FILE_NAME);\n+  ld_file_name = find_a_file (&path, REAL_LD_FILE_NAME, X_OK);\n   if (ld_file_name == 0)\n #endif\n   /* Search the (target-specific) compiler dirs for ld'.  */\n-  ld_file_name = find_a_file (&cpath, real_ld_suffix);\n+  ld_file_name = find_a_file (&cpath, real_ld_suffix, X_OK);\n   /* Likewise for `collect-ld'.  */\n   if (ld_file_name == 0)\n     {\n-      ld_file_name = find_a_file (&cpath, collect_ld_suffix);\n+      ld_file_name = find_a_file (&cpath, collect_ld_suffix, X_OK);\n       use_collect_ld = ld_file_name != 0;\n     }\n   /* Search the compiler directories for `ld'.  We have protection against\n      recursive calls in find_a_file.  */\n   if (ld_file_name == 0)\n-    ld_file_name = find_a_file (&cpath, ld_suffixes[selected_linker]);\n+    ld_file_name = find_a_file (&cpath, ld_suffixes[selected_linker], X_OK);\n   /* Search the ordinary system bin directories\n      for `ld' (if native linking) or `TARGET-ld' (if cross).  */\n   if (ld_file_name == 0)\n-    ld_file_name = find_a_file (&path, full_ld_suffixes[selected_linker]);\n+    ld_file_name = find_a_file (&path, full_ld_suffixes[selected_linker], X_OK);\n \n #ifdef REAL_NM_FILE_NAME\n-  nm_file_name = find_a_file (&path, REAL_NM_FILE_NAME);\n+  nm_file_name = find_a_file (&path, REAL_NM_FILE_NAME, X_OK);\n   if (nm_file_name == 0)\n #endif\n-  nm_file_name = find_a_file (&cpath, gnm_suffix);\n+  nm_file_name = find_a_file (&cpath, gnm_suffix, X_OK);\n   if (nm_file_name == 0)\n-    nm_file_name = find_a_file (&path, full_gnm_suffix);\n+    nm_file_name = find_a_file (&path, full_gnm_suffix, X_OK);\n   if (nm_file_name == 0)\n-    nm_file_name = find_a_file (&cpath, nm_suffix);\n+    nm_file_name = find_a_file (&cpath, nm_suffix, X_OK);\n   if (nm_file_name == 0)\n-    nm_file_name = find_a_file (&path, full_nm_suffix);\n+    nm_file_name = find_a_file (&path, full_nm_suffix, X_OK);\n \n #ifdef LDD_SUFFIX\n-  ldd_file_name = find_a_file (&cpath, ldd_suffix);\n+  ldd_file_name = find_a_file (&cpath, ldd_suffix, X_OK);\n   if (ldd_file_name == 0)\n-    ldd_file_name = find_a_file (&path, full_ldd_suffix);\n+    ldd_file_name = find_a_file (&path, full_ldd_suffix, X_OK);\n #endif\n \n #ifdef REAL_STRIP_FILE_NAME\n-  strip_file_name = find_a_file (&path, REAL_STRIP_FILE_NAME);\n+  strip_file_name = find_a_file (&path, REAL_STRIP_FILE_NAME, X_OK);\n   if (strip_file_name == 0)\n #endif\n-  strip_file_name = find_a_file (&cpath, gstrip_suffix);\n+  strip_file_name = find_a_file (&cpath, gstrip_suffix, X_OK);\n   if (strip_file_name == 0)\n-    strip_file_name = find_a_file (&path, full_gstrip_suffix);\n+    strip_file_name = find_a_file (&path, full_gstrip_suffix, X_OK);\n   if (strip_file_name == 0)\n-    strip_file_name = find_a_file (&cpath, strip_suffix);\n+    strip_file_name = find_a_file (&cpath, strip_suffix, X_OK);\n   if (strip_file_name == 0)\n-    strip_file_name = find_a_file (&path, full_strip_suffix);\n+    strip_file_name = find_a_file (&path, full_strip_suffix, X_OK);\n \n   /* Determine the full path name of the C compiler to use.  */\n   c_file_name = getenv (\"COLLECT_GCC\");\n@@ -1171,12 +1171,12 @@ main (int argc, char **argv)\n #endif\n     }\n \n-  p = find_a_file (&cpath, c_file_name);\n+  p = find_a_file (&cpath, c_file_name, X_OK);\n \n   /* Here it should be safe to use the system search path since we should have\n      already qualified the name of the compiler when it is needed.  */\n   if (p == 0)\n-    p = find_a_file (&path, c_file_name);\n+    p = find_a_file (&path, c_file_name, X_OK);\n \n   if (p)\n     c_file_name = p;"}, {"sha": "bc6b4349ef5f21085703dfc749f8fa32f3ff0d5c", "filename": "gcc/file-find.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Ffile-find.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Ffile-find.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-find.c?ref=a09f1a766b297f1e248c86b3d2795c1501a506ef", "patch": "@@ -31,7 +31,7 @@ find_file_set_debug(bool debug_state)\n }\n \n char *\n-find_a_file (struct path_prefix *pprefix, const char *name)\n+find_a_file (struct path_prefix *pprefix, const char *name, int mode)\n {\n   char *temp;\n   struct prefix_list *pl;\n@@ -50,7 +50,7 @@ find_a_file (struct path_prefix *pprefix, const char *name)\n \n   if (IS_ABSOLUTE_PATH (name))\n     {\n-      if (access (name, X_OK) == 0)\n+      if (access (name, mode) == 0)\n \t{\n \t  strcpy (temp, name);\n \n@@ -66,7 +66,7 @@ find_a_file (struct path_prefix *pprefix, const char *name)\n       strcpy (temp, name);\n \tstrcat (temp, HOST_EXECUTABLE_SUFFIX);\n \n-\tif (access (temp, X_OK) == 0)\n+\tif (access (temp, mode) == 0)\n \t  return temp;\n #endif\n \n@@ -83,7 +83,7 @@ find_a_file (struct path_prefix *pprefix, const char *name)\n \n \tif (stat (temp, &st) >= 0\n \t    && ! S_ISDIR (st.st_mode)\n-\t    && access (temp, X_OK) == 0)\n+\t    && access (temp, mode) == 0)\n \t  return temp;\n \n #ifdef HOST_EXECUTABLE_SUFFIX\n@@ -93,7 +93,7 @@ find_a_file (struct path_prefix *pprefix, const char *name)\n \n \tif (stat (temp, &st) >= 0\n \t    && ! S_ISDIR (st.st_mode)\n-\t    && access (temp, X_OK) == 0)\n+\t    && access (temp, mode) == 0)\n \t  return temp;\n #endif\n       }"}, {"sha": "43a2d3f28ecfa87d4f87ded7e27150329f9de016", "filename": "gcc/file-find.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Ffile-find.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Ffile-find.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-find.h?ref=a09f1a766b297f1e248c86b3d2795c1501a506ef", "patch": "@@ -38,7 +38,7 @@ struct path_prefix\n };\n \n extern void find_file_set_debug (bool);\n-extern char *find_a_file (struct path_prefix *, const char *);\n+extern char *find_a_file (struct path_prefix *, const char *, int);\n extern void add_prefix (struct path_prefix *, const char *);\n extern void prefix_from_env (const char *, struct path_prefix *);\n extern void prefix_from_string (const char *, struct path_prefix *);"}, {"sha": "ef425c1cb304d13bb20ad589197241ea06e50719", "filename": "gcc/gcc-ar.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Fgcc-ar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09f1a766b297f1e248c86b3d2795c1501a506ef/gcc%2Fgcc-ar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-ar.c?ref=a09f1a766b297f1e248c86b3d2795c1501a506ef", "patch": "@@ -136,22 +136,22 @@ main(int ac, char **av)\n   setup_prefixes (av[0]);\n \n   /* Find the GCC LTO plugin */\n-  plugin = find_a_file (&target_path, LTOPLUGINSONAME);\n+  plugin = find_a_file (&target_path, LTOPLUGINSONAME, R_OK);\n   if (!plugin)\n     {\n       fprintf (stderr, \"%s: Cannot find plugin '%s'\\n\", av[0], LTOPLUGINSONAME);\n       exit (1);\n     }\n \n   /* Find the wrapped binutils program.  */\n-  exe_name = find_a_file (&target_path, PERSONALITY);\n+  exe_name = find_a_file (&target_path, PERSONALITY, X_OK);\n   if (!exe_name)\n     {\n       const char *real_exe_name = PERSONALITY;\n #ifdef CROSS_DIRECTORY_STRUCTURE\n       real_exe_name = concat (target_machine, \"-\", PERSONALITY, NULL);\n #endif\n-      exe_name = find_a_file (&path, real_exe_name);\n+      exe_name = find_a_file (&path, real_exe_name, X_OK);\n       if (!exe_name)\n \t{\n \t  fprintf (stderr, \"%s: Cannot find binary '%s'\\n\", av[0],"}]}