{"sha": "5d5993dd31958ff7a1d87fb01805593764f27289", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1OTkzZGQzMTk1OGZmN2ExZDg3ZmIwMTgwNTU5Mzc2NGYyNzI4OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-02-18T20:38:48Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-02-18T20:38:48Z"}, "message": "bitmap.c (bitmap_print): Qualify a char* with the `const' keyword.\n\n        * bitmap.c (bitmap_print): Qualify a char* with the `const' keyword.\n        * bitmap.h (bitmap_print): Likewise.\n        * c-decl.c (builtin_function, grokdeclarator, grokfield): Likewise.\n        * c-lang.c (build_objc_string): Likewise.\n        * c-lex.c (yyerror, extend_token_buffer): Likewise.  Don't include\n        limits.h or ctype.h.  Remove unused variable `p'.\n        * c-lex.h (yyerror): Qualify a char* with the `const' keyword.\n        * c-pragma.c (handle_pragma_token): Likewise.\n        * c-pragma.h (handle_pragma_token): Likewise.\n        * c-tree.h (build_objc_string, builtin_function, grokfield,\n        build_indirect_ref, lvalue_or_else, readonly_warning, error_init,\n        pedwarn_init): Likewise.\n        * c-typeck.c (convert_for_assignment, warn_for_assignment,\n        push_string, warning_init, incomplete_type_error,\n        build_indirect_ref, lvalue_or_else, readonly_warning,\n        build_c_cast, spelling, push_member_name, print_spelling,\n        error_init, pedwarn_init, start_init): Likewise.\n        * objc/objc-act.c (build_objc_string): Likewise.\n        * print-tree.c (print_node_brief, print_node): Likewise.\n        * tree.h (lvalue_or_else, print_node, print_node_brief): Likewise.\n\nFrom-SVN: r25296", "tree": {"sha": "8643c4752e3baa29894eb4d8ecc9b34cc78ce585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8643c4752e3baa29894eb4d8ecc9b34cc78ce585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5993dd31958ff7a1d87fb01805593764f27289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5993dd31958ff7a1d87fb01805593764f27289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5993dd31958ff7a1d87fb01805593764f27289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5993dd31958ff7a1d87fb01805593764f27289/comments", "author": null, "committer": null, "parents": [{"sha": "94e6f78366432e9495ea7d041f43134122b23753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e6f78366432e9495ea7d041f43134122b23753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e6f78366432e9495ea7d041f43134122b23753"}], "stats": {"total": 168, "additions": 99, "deletions": 69}, "files": [{"sha": "f5f009235889ea97855bc10579c55fce791fcadb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -1,3 +1,38 @@\n+Thu Feb 18 23:28:35 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+        * bitmap.c (bitmap_print): Qualify a char* with the `const' keyword.\n+\t \n+        * bitmap.h (bitmap_print): Likewise.\n+\t \n+        * c-decl.c (builtin_function, grokdeclarator, grokfield): Likewise.\n+\t \n+        * c-lang.c (build_objc_string): Likewise.\n+\t \n+        * c-lex.c (yyerror, extend_token_buffer): Likewise.  Don't include\n+ \tlimits.h or ctype.h.  Remove unused variable `p'.\n+\t \n+        * c-lex.h (yyerror): Qualify a char* with the `const' keyword.\n+\t \n+        * c-pragma.c (handle_pragma_token): Likewise.\n+\t \n+        * c-pragma.h (handle_pragma_token): Likewise.\n+\t \n+        * c-tree.h (build_objc_string, builtin_function, grokfield,\n+ \tbuild_indirect_ref, lvalue_or_else, readonly_warning, error_init,\n+ \tpedwarn_init): Likewise.\n+\t \n+        * c-typeck.c (convert_for_assignment, warn_for_assignment,\n+ \tpush_string, warning_init, incomplete_type_error,\n+ \tbuild_indirect_ref, lvalue_or_else, readonly_warning,\n+ \tbuild_c_cast, spelling, push_member_name, print_spelling,\n+ \terror_init, pedwarn_init, start_init): Likewise.\n+\t \n+        * objc/objc-act.c (build_objc_string): Likewise.\n+\t \n+        * print-tree.c (print_node_brief, print_node): Likewise.\n+\t \n+        * tree.h (lvalue_or_else, print_node, print_node_brief): Likewise.\n+\n Thu Feb 18 20:44:21 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n \n \t* regclass.c (record_reg_classes): Correctly handle 'p' constraint."}, {"sha": "b4fc0971601df1d2c010c1acb8853c28bb8452c1", "filename": "gcc/bitmap.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -613,10 +613,10 @@ void\n bitmap_print (file, head, prefix, suffix)\n      FILE *file;\n      bitmap head;\n-     char *prefix;\n-     char *suffix;\n+     const char *prefix;\n+     const char *suffix;\n {\n-  char *comma = \"\";\n+  const char *comma = \"\";\n   int i;\n \n   fputs (prefix, file);"}, {"sha": "4ff0bf4987e073b0ee3062d752def80a6800584f", "filename": "gcc/bitmap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -89,7 +89,7 @@ extern void bitmap_debug PROTO((bitmap));\n extern void bitmap_debug_file PROTO((FILE *, bitmap));\n \n /* Print a bitmap */\n-extern void bitmap_print PROTO((FILE *, bitmap, char *, char *));\n+extern void bitmap_print PROTO((FILE *, bitmap, const char *, const char *));\n \n /* Initialize a bitmap header.  */\n extern bitmap bitmap_initialize PROTO((bitmap));"}, {"sha": "5f9d2faf29c42fcb588379b04a7fea1b5c0dffd9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -3616,10 +3616,10 @@ init_decl_processing ()\n \n tree\n builtin_function (name, type, function_code, library_name)\n-     char *name;\n+     const char *name;\n      tree type;\n      enum built_in_function function_code;\n-     char *library_name;\n+     const char *library_name;\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n@@ -4390,7 +4390,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   int explicit_char = 0;\n   int defaulted_int = 0;\n   tree typedef_decl = 0;\n-  char *name;\n+  const char *name;\n   tree typedef_type = 0;\n   int funcdef_flag = 0;\n   enum tree_code innermost_code = ERROR_MARK;\n@@ -5770,8 +5770,8 @@ start_struct (code, name)\n \n tree\n grokfield (filename, line, declarator, declspecs, width)\n-     char *filename;\n-     int line;\n+     const char *filename ATTRIBUTE_UNUSED;\n+     int line ATTRIBUTE_UNUSED;\n      tree declarator, declspecs, width;\n {\n   tree value;"}, {"sha": "4c554115b7ce36891b75ef81b70353bea4704b82", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -149,7 +149,7 @@ recognize_objc_keyword ()\n tree\n build_objc_string (len, str)\n     int len ATTRIBUTE_UNUSED;\n-    char *str ATTRIBUTE_UNUSED;\n+    const char *str ATTRIBUTE_UNUSED;\n {\n   abort ();\n   return NULL_TREE;"}, {"sha": "e0546072319bbfe63c1183d93903309cee12c2c3", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -22,10 +22,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include <setjmp.h>\n \n-#if HAVE_LIMITS_H\n-# include <limits.h>\n-#endif\n-\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"input.h\"\n@@ -38,10 +34,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"intl.h\"\n \n-#ifdef MAP_CHARACTER\n-#include <ctype.h>\n-#endif\n-\n /* MULTIBYTE_CHARS support only works for native compilers.\n    ??? Ideally what we want is to model widechar support after\n    the current floating point support.  */\n@@ -132,7 +124,7 @@ static int handle_generic_pragma\tPROTO((int));\n static int whitespace_cr\t\tPROTO((int));\n static int skip_white_space\t\tPROTO((int));\n static int skip_white_space_on_line\tPROTO((void));\n-static char *extend_token_buffer\tPROTO((char *));\n+static char *extend_token_buffer\tPROTO((const char *));\n static int readescape\t\t\tPROTO((int *));\n \f\n /* Do not insert generated code into the source, instead, include it.\n@@ -237,8 +229,6 @@ finish_parse ()\n void\n init_lex ()\n {\n-  char *p;\n-\n   /* Make identifier nodes long enough for the language-specific slots.  */\n   set_identifier_size (sizeof (struct lang_identifier));\n \n@@ -494,7 +484,7 @@ skip_white_space_on_line ()\n \n static char *\n extend_token_buffer (p)\n-     char *p;\n+     const char *p;\n {\n   int offset = p - token_buffer;\n \n@@ -1059,9 +1049,9 @@ readescape (ignore_ptr)\n \f\n void\n yyerror (msgid)\n-     char *msgid;\n+     const char *msgid;\n {\n-  char *string = _(msgid);\n+  const char *string = _(msgid);\n \n   /* We can't print string and character constants well\n      because the token_buffer contains the result of processing escapes.  */"}, {"sha": "7d73ab5d366bb79c802d0a9e7caea4e594b1e7ae", "filename": "gcc/c-lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -81,7 +81,7 @@ extern void position_after_white_space PROTO((void));\n extern int check_newline PROTO((void));\n \n extern int yylex PROTO((void));\n-extern void yyerror PROTO((char *));\n+extern void yyerror PROTO((const char *));\n \n extern void forget_protocol_qualifiers PROTO((void));\n extern void remember_protocol_qualifiers PROTO((void));"}, {"sha": "d83789d667b871861edcec090123f0e22c1a4c95", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -231,7 +231,7 @@ add_weak (name, value)\n \n int\n handle_pragma_token (string, token)\n-     char * string;\n+     const char * string;\n      tree token;\n {\n   static enum pragma_state state = ps_start;"}, {"sha": "195f175ab75655aa1d509416468d7b53f12480a4", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -94,7 +94,7 @@ enum pragma_state\n };\n \n /* Handle a C style pragma */\n-extern int handle_pragma_token PROTO((char *, tree));\n+extern int handle_pragma_token PROTO((const char *, tree));\n \n #endif /* HANDLE_GENERIC_PRAGMAS */\n #endif /* _C_PRAGMA_H */"}, {"sha": "bcf325b68fdd050b3e3d4ce5fd9bc1072d012de4", "filename": "gcc/c-tree.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -170,7 +170,7 @@ extern int maybe_objc_comptypes                 PROTO((tree, tree, int));\n extern tree maybe_building_objc_message_expr    PROTO((void));\n extern tree maybe_objc_method_name\t\tPROTO((tree));\n extern int recognize_objc_keyword\t\tPROTO((void));\n-extern tree build_objc_string\t\t\tPROTO((int, char *));\n+extern tree build_objc_string\t\t\tPROTO((int, const char *));\n \f\n /* in c-aux-info.c */\n extern void gen_aux_info_record                 PROTO((tree, int, int, int));\n@@ -282,7 +282,7 @@ extern tree boolean_false_node;\n \n extern tree build_enumerator                    PROTO((tree, tree));\n /* Declare a predefined function.  Return the declaration.  */\n-extern tree builtin_function                    PROTO((char *, tree, enum built_in_function function_, char *));\n+extern tree builtin_function                    PROTO((const char *, tree, enum built_in_function function_, const char *));\n /* Add qualifiers to a type, in the fashion for C.  */\n extern tree c_build_qualified_type              PROTO((tree, int));\n #define c_build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t  \\\n@@ -307,7 +307,7 @@ extern tree get_parm_info                       PROTO((int));\n extern tree getdecls                            PROTO((void));\n extern tree gettags                             PROTO((void));\n extern int  global_bindings_p                   PROTO((void));\n-extern tree grokfield                           PROTO((char *, int, tree, tree, tree));\n+extern tree grokfield                           PROTO((const char *, int, tree, tree, tree));\n extern tree groktypename                        PROTO((tree));\n extern tree groktypename_in_parm_context        PROTO((tree));\n extern tree implicitly_declare                  PROTO((tree));\n@@ -365,7 +365,7 @@ extern tree c_alignof\t\t\t\tPROTO((tree));\n extern tree c_alignof_expr\t\t\tPROTO((tree));\n extern tree default_conversion                  PROTO((tree));\n extern tree build_component_ref                 PROTO((tree, tree));\n-extern tree build_indirect_ref                  PROTO((tree, char *));\n+extern tree build_indirect_ref                  PROTO((tree, const char *));\n extern tree build_array_ref                     PROTO((tree, tree));\n extern tree build_function_call                 PROTO((tree, tree));\n extern tree parser_build_binary_op              PROTO((enum tree_code,\n@@ -375,8 +375,8 @@ extern tree build_binary_op                     PROTO((enum tree_code,\n extern tree build_unary_op                      PROTO((enum tree_code,\n \t\t\t\t\t\t       tree, int));\n extern int lvalue_p\t\t\t\tPROTO((tree));\n-extern int lvalue_or_else\t\t\tPROTO((tree, char *));\n-extern void readonly_warning\t\t\tPROTO((tree, char *));\n+extern int lvalue_or_else\t\t\tPROTO((tree, const char *));\n+extern void readonly_warning\t\t\tPROTO((tree, const char *));\n extern int mark_addressable\t\t\tPROTO((tree));\n extern tree build_conditional_expr              PROTO((tree, tree, tree));\n extern tree build_compound_expr                 PROTO((tree));\n@@ -385,8 +385,8 @@ extern tree build_modify_expr                   PROTO((tree, enum tree_code,\n \t\t\t\t\t\t       tree));\n extern tree initializer_constant_valid_p\tPROTO((tree, tree));\n extern void store_init_value                    PROTO((tree, tree));\n-extern void error_init\t\t\t\tPROTO((char *));\n-extern void pedwarn_init\t\t\tPROTO((char *));\n+extern void error_init\t\t\t\tPROTO((const char *));\n+extern void pedwarn_init\t\t\tPROTO((const char *));\n extern void start_init\t\t\t\tPROTO((tree, tree, int));\n extern void finish_init\t\t\t\tPROTO((void));\n extern void really_start_incremental_init\tPROTO((tree));"}, {"sha": "5133719d375e7ee1aedb6b15f656e47008b1a966", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -56,16 +56,17 @@ static tree pointer_diff\t\tPROTO((tree, tree));\n static tree unary_complex_lvalue\tPROTO((enum tree_code, tree));\n static void pedantic_lvalue_warning\tPROTO((enum tree_code));\n static tree internal_build_compound_expr PROTO((tree, int));\n-static tree convert_for_assignment\tPROTO((tree, tree, char *, tree,\n+static tree convert_for_assignment\tPROTO((tree, tree, const char *, tree,\n+\t\t\t\t\t       tree, int));\n+static void warn_for_assignment\t\tPROTO((const char *, const char *,\n \t\t\t\t\t       tree, int));\n-static void warn_for_assignment\t\tPROTO((char *, char *, tree, int));\n static tree valid_compound_expr_initializer PROTO((tree, tree));\n-static void push_string\t\t\tPROTO((char *));\n+static void push_string\t\t\tPROTO((const char *));\n static void push_member_name\t\tPROTO((tree));\n static void push_array_bounds\t\tPROTO((int));\n static int spelling_length\t\tPROTO((void));\n static char *print_spelling\t\tPROTO((char *));\n-static void warning_init\t\tPROTO((char *));\n+static void warning_init\t\tPROTO((const char *));\n static tree digest_init\t\t\tPROTO((tree, tree, int, int));\n static void check_init_type_bitfields\tPROTO((tree));\n static void output_init_element\t\tPROTO((tree, tree, tree, int));\n@@ -100,7 +101,7 @@ incomplete_type_error (value, type)\n      tree value;\n      tree type;\n {\n-  char *type_code_string;\n+  const char *type_code_string;\n \n   /* Avoid duplicate error message.  */\n   if (TREE_CODE (type) == ERROR_MARK)\n@@ -1321,7 +1322,7 @@ build_component_ref (datum, component)\n tree\n build_indirect_ref (ptr, errorstring)\n      tree ptr;\n-     char *errorstring;\n+     const char *errorstring;\n {\n   register tree pointer = default_conversion (ptr);\n   register tree type = TREE_TYPE (pointer);\n@@ -3231,7 +3232,7 @@ lvalue_p (ref)\n int\n lvalue_or_else (ref, msgid)\n      tree ref;\n-     char *msgid;\n+     const char *msgid;\n {\n   int win = lvalue_p (ref);\n   if (! win)\n@@ -3300,7 +3301,7 @@ pedantic_lvalue_warning (code)\n void\n readonly_warning (arg, msgid)\n      tree arg;\n-     char *msgid;\n+     const char *msgid;\n {\n   /* Forbid assignments to iterators.  */\n   if (TREE_CODE (arg) == VAR_DECL && ITERATOR_P (arg))\n@@ -3723,7 +3724,7 @@ build_c_cast (type, expr)\n \n       if (field)\n \t{\n-\t  char *name;\n+\t  const char *name;\n \t  tree t;\n \n \t  if (pedantic)\n@@ -4029,7 +4030,7 @@ build_modify_expr (lhs, modifycode, rhs)\n static tree\n convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n      tree type, rhs;\n-     char *errtype;\n+     const char *errtype;\n      tree fundecl, funname;\n      int parmnum;\n {\n@@ -4288,14 +4289,15 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n \n static void\n warn_for_assignment (msgid, opname, function, argnum)\n-     char *msgid;\n-     char *opname;\n+     const char *msgid;\n+     const char *opname;\n      tree function;\n      int argnum;\n {\n   if (opname == 0)\n     {\n       tree selector = maybe_building_objc_message_expr ();\n+      char * new_opname;\n       \n       if (selector && argnum > 2)\n \t{\n@@ -4305,18 +4307,21 @@ warn_for_assignment (msgid, opname, function, argnum)\n       if (function)\n \t{\n \t  /* Function name is known; supply it.  */\n-\t  char *argstring = _(\"passing arg %d of `%s'\");\n-\t  opname = (char *) alloca (IDENTIFIER_LENGTH (function)\n-\t\t\t\t    + strlen (argstring) + 1 + 25 /*%d*/ + 1);\n-\t  sprintf (opname, argstring, argnum, IDENTIFIER_POINTER (function));\n+\t  const char *argstring = _(\"passing arg %d of `%s'\");\n+\t  new_opname = (char *) alloca (IDENTIFIER_LENGTH (function)\n+\t\t\t\t\t+ strlen (argstring) + 1 + 25\n+\t\t\t\t\t/*%d*/ + 1);\n+\t  sprintf (new_opname, argstring, argnum,\n+\t\t   IDENTIFIER_POINTER (function));\n \t}\n       else\n \t{\n-\t  /* Function name unknown (call through ptr); just give arg number.  */\n-\t  char *argnofun = _(\"passing arg %d of pointer to function\");\n-\t  opname = (char *) alloca (strlen (argnofun) + 1 + 25 /*%d*/ + 1);\n-\t  sprintf (opname, argnofun, argnum);\n+\t  /* Function name unknown (call through ptr); just give arg number.*/\n+\t  const char *argnofun = _(\"passing arg %d of pointer to function\");\n+\t  new_opname = (char *) alloca (strlen (argnofun) + 1 + 25 /*%d*/ + 1);\n+\t  sprintf (new_opname, argnofun, argnum);\n \t}\n+      opname = new_opname;\n     }\n   pedwarn (msgid, opname);\n }\n@@ -4557,7 +4562,7 @@ struct spelling\n   union\n     {\n       int i;\n-      char *s;\n+      const char *s;\n     } u;\n };\n \n@@ -4613,7 +4618,7 @@ static int spelling_size;\t\t/* Size of the spelling stack.  */\n \n static void\n push_string (string)\n-     char *string;\n+     const char *string;\n {\n   PUSH_SPELLING (SPELLING_STRING, string, u.s);\n }\n@@ -4625,7 +4630,7 @@ push_member_name (decl)\n      tree decl;\n      \n {\n-  char *string\n+  const char *string\n     = DECL_NAME (decl) ? IDENTIFIER_POINTER (DECL_NAME (decl)) : \"<anonymous>\";\n   PUSH_SPELLING (SPELLING_MEMBER, string, u.s);\n }\n@@ -4665,7 +4670,6 @@ print_spelling (buffer)\n      register char *buffer;\n {\n   register char *d = buffer;\n-  register char *s;\n   register struct spelling *p;\n \n   for (p = spelling_base; p < spelling; p++)\n@@ -4676,6 +4680,7 @@ print_spelling (buffer)\n       }\n     else\n       {\n+\tregister const char *s;\n \tif (p->kind == SPELLING_MEMBER)\n \t  *d++ = '.';\n \tfor (s = p->u.s; (*d = *s++); d++)\n@@ -4691,7 +4696,7 @@ print_spelling (buffer)\n \n void\n error_init (msgid)\n-     char *msgid;\n+     const char *msgid;\n {\n   char *ofwhat;\n \n@@ -4707,7 +4712,7 @@ error_init (msgid)\n \n void\n pedwarn_init (msgid)\n-     char *msgid;\n+     const char *msgid;\n {\n   char *ofwhat;\n \n@@ -4723,7 +4728,7 @@ pedwarn_init (msgid)\n \n static void\n warning_init (msgid)\n-     char *msgid;\n+     const char *msgid;\n {\n   char *ofwhat;\n \n@@ -5103,7 +5108,7 @@ start_init (decl, asmspec_tree, top_level)\n      tree asmspec_tree;\n      int top_level;\n {\n-  char *locus;\n+  const char *locus;\n   struct initializer_stack *p\n     = (struct initializer_stack *) xmalloc (sizeof (struct initializer_stack));\n   char *asmspec = 0;"}, {"sha": "2ff65d159ba0e4bc89e3773dcdcbcce1741c7dc8", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -1320,7 +1320,7 @@ my_build_string (len, str)\n tree\n build_objc_string (len, str)\n      int len;\n-     char *str;\n+     const char *str;\n {\n   tree s = build_string (len, str);\n "}, {"sha": "18ec9295d614a7bf793f7bcfd27f8a312ea24e0d", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -64,7 +64,7 @@ debug_tree (node)\n void\n print_node_brief (file, prefix, node, indent)\n      FILE *file;\n-     char *prefix;\n+     const char *prefix;\n      tree node;\n      int indent;\n {\n@@ -176,7 +176,7 @@ indent_to (file, column)\n void\n print_node (file, prefix, node, indent)\n      FILE *file;\n-     char *prefix;\n+     const char *prefix;\n      tree node;\n      int indent;\n {"}, {"sha": "88d6cf1a255beaaf2dfda9b8802b597931e10790", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5993dd31958ff7a1d87fb01805593764f27289/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5d5993dd31958ff7a1d87fb01805593764f27289", "patch": "@@ -1672,7 +1672,7 @@ extern int staticp\t\t\tPROTO((tree));\n /* Gets an error if argument X is not an lvalue.\n    Also returns 1 if X is an lvalue, 0 if not.  */\n \n-extern int lvalue_or_else\t\tPROTO((tree, char *));\n+extern int lvalue_or_else\t\tPROTO((tree, const char *));\n \n /* save_expr (EXP) returns an expression equivalent to EXP\n    but it can be used multiple times within context CTX\n@@ -2209,8 +2209,8 @@ extern void print_rtl\t\t\tPROTO ((FILE *, struct rtx_def *));\n /* In print-tree.c */\n extern void debug_tree\t\t\tPROTO ((tree));\n #ifdef BUFSIZ\n-extern void print_node\t\t\tPROTO ((FILE *, char *, tree, int));\n-extern void print_node_brief\t\tPROTO ((FILE *, char *, tree, int));\n+extern void print_node\t\t\tPROTO ((FILE *, const char *, tree, int));\n+extern void print_node_brief\t\tPROTO ((FILE *, const char *, tree, int));\n extern void indent_to\t\t\tPROTO ((FILE *, int));\n #endif\n "}]}