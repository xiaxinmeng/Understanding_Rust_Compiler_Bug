{"sha": "5c3bbe1d9879a92f8e301382a66749c653fa075e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzYmJlMWQ5ODc5YTkyZjhlMzAxMzgyYTY2NzQ5YzY1M2ZhMDc1ZQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-04-26T13:55:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-05T13:09:10Z"}, "message": "[Ada] Cleanup checking for compatible alignment\n\ngcc/ada/\n\n\t* sem_util.adb (Has_Compatible_Alignment_Internal): Fix\n\tindentation of ELSIF comments; remove explicit calls to\n\tUI_To_Int; remove extra parens around the MOD operand.", "tree": {"sha": "1e1f9732bc207caff1add1f2d6daa105f1758d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e1f9732bc207caff1add1f2d6daa105f1758d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c3bbe1d9879a92f8e301382a66749c653fa075e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3bbe1d9879a92f8e301382a66749c653fa075e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c3bbe1d9879a92f8e301382a66749c653fa075e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3bbe1d9879a92f8e301382a66749c653fa075e/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b8880428c4da92886b069af714365019f660ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8880428c4da92886b069af714365019f660ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8880428c4da92886b069af714365019f660ade"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "b7d84afd69d50f5da8e003c0f91c1f5276859e56", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3bbe1d9879a92f8e301382a66749c653fa075e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3bbe1d9879a92f8e301382a66749c653fa075e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5c3bbe1d9879a92f8e301382a66749c653fa075e", "patch": "@@ -11820,22 +11820,22 @@ package body Sem_Util is\n                         Set_Result (Known_Incompatible);\n                      end if;\n \n-                     --  See if Expr is an object with known alignment\n+                  --  See if Expr is an object with known alignment\n \n                   elsif Is_Entity_Name (Expr)\n                     and then Known_Alignment (Entity (Expr))\n                   then\n                      ExpA := Alignment (Entity (Expr));\n \n-                     --  Otherwise, we can use the alignment of the type of\n-                     --  Expr given that we already checked for\n-                     --  discombobulating rep clauses for the cases of indexed\n-                     --  and selected components above.\n+                  --  Otherwise, we can use the alignment of the type of Expr\n+                  --  given that we already checked for discombobulating rep\n+                  --  clauses for the cases of indexed and selected components\n+                  --  above.\n \n                   elsif Known_Alignment (Etype (Expr)) then\n                      ExpA := Alignment (Etype (Expr));\n \n-                     --  Otherwise the alignment is unknown\n+                  --  Otherwise the alignment is unknown\n \n                   else\n                      Set_Result (Default);\n@@ -11854,14 +11854,14 @@ package body Sem_Util is\n                   if Offs /= No_Uint then\n                      null;\n \n-                     --  See if Expr is an object with known size\n+                  --  See if Expr is an object with known size\n \n                   elsif Is_Entity_Name (Expr)\n                     and then Known_Static_Esize (Entity (Expr))\n                   then\n                      SizA := Esize (Entity (Expr));\n \n-                     --  Otherwise, we check the object size of the Expr type\n+                  --  Otherwise, we check the object size of the Expr type\n \n                   elsif Known_Static_Esize (Etype (Expr)) then\n                      SizA := Esize (Etype (Expr));\n@@ -11906,25 +11906,24 @@ package body Sem_Util is\n                --  where we do not know the alignment of Obj.\n \n                if Known_Alignment (Entity (Expr))\n-                 and then UI_To_Int (Alignment (Entity (Expr))) <\n-                                                    Ttypes.Maximum_Alignment\n+                 and then Alignment (Entity (Expr)) < Ttypes.Maximum_Alignment\n                then\n                   Set_Result (Unknown);\n \n-                  --  Now check size of Expr object. Any size that is not an\n-                  --  even multiple of Maximum_Alignment is also worrisome\n-                  --  since it may cause the alignment of the object to be less\n-                  --  than the alignment of the type.\n+               --  Now check size of Expr object. Any size that is not an even\n+               --  multiple of Maximum_Alignment is also worrisome since it\n+               --  may cause the alignment of the object to be less than the\n+               --  alignment of the type.\n \n                elsif Known_Static_Esize (Entity (Expr))\n                  and then\n-                   (UI_To_Int (Esize (Entity (Expr))) mod\n-                     (Ttypes.Maximum_Alignment * Ttypes.System_Storage_Unit))\n+                   Esize (Entity (Expr)) mod\n+                     (Ttypes.Maximum_Alignment * Ttypes.System_Storage_Unit)\n                                                                         /= 0\n                then\n                   Set_Result (Unknown);\n \n-                  --  Otherwise same type is decisive\n+               --  Otherwise same type is decisive\n \n                else\n                   Set_Result (Known_Compatible);"}]}