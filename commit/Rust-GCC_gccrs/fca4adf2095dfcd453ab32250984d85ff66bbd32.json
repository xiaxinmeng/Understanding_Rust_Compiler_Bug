{"sha": "fca4adf2095dfcd453ab32250984d85ff66bbd32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhNGFkZjIwOTVkZmNkNDUzYWIzMjI1MDk4NGQ4NWZmNjZiYmQzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-05T21:47:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-05T21:47:51Z"}, "message": "re PR sanitizer/64265 (r217669 broke tsan)\n\n\tPR sanitizer/64265\n\t* gimplify.c (gimplify_function_tree): Add TSAN_FUNC_EXIT internal\n\tcall as cleanup of the whole body.\n\t* internal-fn.def (TSAN_FUNC_EXIT): New internal call.\n\t* tsan.c (replace_func_exit): New function.\n\t(instrument_func_exit): Moved earlier.\n\t(instrument_memory_accesses): Adjust TSAN_FUNC_EXIT internal calls.\n\tCall instrument_func_exit if no TSAN_FUNC_EXIT internal calls have\n\tbeen found.\n\t(tsan_pass): Don't call instrument_func_exit.\n\t* internal-fn.c (expand_TSAN_FUNC_EXIT): New function.\n\t* tree-inline.c (copy_bb): Drop TSAN_FUNC_EXIT internal calls during\n\tinlining.\n\nFrom-SVN: r219202", "tree": {"sha": "71684c10bc82a08750e567f3a2526c6817160a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71684c10bc82a08750e567f3a2526c6817160a6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca4adf2095dfcd453ab32250984d85ff66bbd32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca4adf2095dfcd453ab32250984d85ff66bbd32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca4adf2095dfcd453ab32250984d85ff66bbd32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca4adf2095dfcd453ab32250984d85ff66bbd32/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e534110031564716a1e495a38bf8d893b23a5993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e534110031564716a1e495a38bf8d893b23a5993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e534110031564716a1e495a38bf8d893b23a5993"}], "stats": {"total": 155, "additions": 120, "deletions": 35}, "files": [{"sha": "286ec01a4e3f039f74374276ead4634a3bc01621", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fca4adf2095dfcd453ab32250984d85ff66bbd32", "patch": "@@ -1,5 +1,19 @@\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/64265\n+\t* gimplify.c (gimplify_function_tree): Add TSAN_FUNC_EXIT internal\n+\tcall as cleanup of the whole body.\n+\t* internal-fn.def (TSAN_FUNC_EXIT): New internal call.\n+\t* tsan.c (replace_func_exit): New function.\n+\t(instrument_func_exit): Moved earlier.\n+\t(instrument_memory_accesses): Adjust TSAN_FUNC_EXIT internal calls.\n+\tCall instrument_func_exit if no TSAN_FUNC_EXIT internal calls have\n+\tbeen found.\n+\t(tsan_pass): Don't call instrument_func_exit.\n+\t* internal-fn.c (expand_TSAN_FUNC_EXIT): New function.\n+\t* tree-inline.c (copy_bb): Drop TSAN_FUNC_EXIT internal calls during\n+\tinlining.\n+\n \tPR sanitizer/64344\n \t* ubsan.h (ubsan_instrument_float_cast): Add ARG argument.\n \t* ubsan.c (ubsan_instrument_float_cast): Add ARG argument, pass"}, {"sha": "b237cbf866ae448d1fe628f1771eb3f29ed49437", "filename": "gcc/gimplify.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fca4adf2095dfcd453ab32250984d85ff66bbd32", "patch": "@@ -9049,6 +9049,22 @@ gimplify_function_tree (tree fndecl)\n       seq = NULL;\n       gimple_seq_add_stmt (&seq, new_bind);\n       gimple_set_body (fndecl, seq);\n+      bind = new_bind;\n+    }\n+\n+  if (flag_sanitize & SANITIZE_THREAD)\n+    {\n+      gcall *call = gimple_build_call_internal (IFN_TSAN_FUNC_EXIT, 0);\n+      gimple tf = gimple_build_try (seq, call, GIMPLE_TRY_FINALLY);\n+      gbind *new_bind = gimple_build_bind (NULL, tf, gimple_bind_block (bind));\n+      /* Clear the block for BIND, since it is no longer directly inside\n+\t the function, but within a try block.  */\n+      gimple_bind_set_block (bind, NULL);\n+      /* Replace the current function body with the body\n+\t wrapped in the try/finally TF.  */\n+      seq = NULL;\n+      gimple_seq_add_stmt (&seq, new_bind);\n+      gimple_set_body (fndecl, seq);\n     }\n \n   DECL_SAVED_TREE (fndecl) = NULL_TREE;"}, {"sha": "50e3c5114ded96a17a61cde817f64dbfaba5b207", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=fca4adf2095dfcd453ab32250984d85ff66bbd32", "patch": "@@ -208,6 +208,14 @@ expand_ASAN_CHECK (gcall *stmt ATTRIBUTE_UNUSED)\n   gcc_unreachable ();\n }\n \n+/* This should get expanded in the tsan pass.  */\n+\n+static void\n+expand_TSAN_FUNC_EXIT (gcall *)\n+{\n+  gcc_unreachable ();\n+}\n+\n /* Helper function for expand_addsub_overflow.  Return 1\n    if ARG interpreted as signed in its precision is known to be always\n    positive or 2 if ARG is known to be always negative, or 3 if ARG may"}, {"sha": "f7ebce34225b32296ccfecebc95c5e412219cb98", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=fca4adf2095dfcd453ab32250984d85ff66bbd32", "patch": "@@ -60,3 +60,4 @@ DEF_INTERNAL_FN (ASAN_CHECK, ECF_TM_PURE | ECF_LEAF | ECF_NOTHROW, \".W...\")\n DEF_INTERNAL_FN (ADD_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (SUB_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (MUL_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (TSAN_FUNC_EXIT, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW, NULL)"}, {"sha": "5518d404ff94f2803d07c117cc0b5ab6e5bc9ec4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=fca4adf2095dfcd453ab32250984d85ff66bbd32", "patch": "@@ -1907,7 +1907,7 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t      gsi_replace (&copy_gsi, new_call, false);\n \t      stmt = new_call;\n \t    }\n-\t  else if (is_gimple_call (stmt)\n+\t  else if (call_stmt\n \t\t   && id->call_stmt\n \t\t   && (decl = gimple_call_fndecl (stmt))\n \t\t   && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n@@ -1934,6 +1934,15 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t      gsi_replace (&copy_gsi, new_stmt, false);\n \t      stmt = new_stmt;\n \t    }\n+\t  else if (call_stmt\n+\t\t   && id->call_stmt\n+\t\t   && gimple_call_internal_p (stmt)\n+\t\t   && gimple_call_internal_fn (stmt) == IFN_TSAN_FUNC_EXIT)\n+\t    {\n+\t      /* Drop TSAN_FUNC_EXIT () internal calls during inlining.  */\n+\t      gsi_remove (&copy_gsi, false);\n+\t      continue;\n+\t    }\n \n \t  /* Statements produced by inlining can be unfolded, especially\n \t     when we constant propagated some operands.  We can't fold"}, {"sha": "567a4218bcd72674ce5e7d98251b98ec65d7609b", "filename": "gcc/tsan.c", "status": "modified", "additions": 71, "deletions": 34, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca4adf2095dfcd453ab32250984d85ff66bbd32/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=fca4adf2095dfcd453ab32250984d85ff66bbd32", "patch": "@@ -704,6 +704,47 @@ instrument_gimple (gimple_stmt_iterator *gsi)\n   return instrumented;\n }\n \n+/* Replace TSAN_FUNC_EXIT internal call with function exit tsan builtin.  */\n+\n+static void\n+replace_func_exit (gimple stmt)\n+{\n+  tree builtin_decl = builtin_decl_implicit (BUILT_IN_TSAN_FUNC_EXIT);\n+  gimple g = gimple_build_call (builtin_decl, 0);\n+  gimple_set_location (g, cfun->function_end_locus);\n+  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+  gsi_replace (&gsi, g, true);\n+}\n+\n+/* Instrument function exit.  Used when TSAN_FUNC_EXIT does not exist.  */\n+\n+static void\n+instrument_func_exit (void)\n+{\n+  location_t loc;\n+  basic_block exit_bb;\n+  gimple_stmt_iterator gsi;\n+  gimple stmt, g;\n+  tree builtin_decl;\n+  edge e;\n+  edge_iterator ei;\n+\n+  /* Find all function exits.  */\n+  exit_bb = EXIT_BLOCK_PTR_FOR_FN (cfun);\n+  FOR_EACH_EDGE (e, ei, exit_bb->preds)\n+    {\n+      gsi = gsi_last_bb (e->src);\n+      stmt = gsi_stmt (gsi);\n+      gcc_assert (gimple_code (stmt) == GIMPLE_RETURN\n+\t\t  || gimple_call_builtin_p (stmt, BUILT_IN_RETURN));\n+      loc = gimple_location (stmt);\n+      builtin_decl = builtin_decl_implicit (BUILT_IN_TSAN_FUNC_EXIT);\n+      g = gimple_build_call (builtin_decl, 0);\n+      gimple_set_location (g, loc);\n+      gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+    }\n+}\n+\n /* Instruments all interesting memory accesses in the current function.\n    Return true if func entry/exit should be instrumented.  */\n \n@@ -713,10 +754,38 @@ instrument_memory_accesses (void)\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n   bool fentry_exit_instrument = false;\n+  bool func_exit_seen = false;\n+  auto_vec<gimple> tsan_func_exits;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-      fentry_exit_instrument |= instrument_gimple (&gsi);\n+      {\n+\tgimple stmt = gsi_stmt (gsi);\n+\tif (is_gimple_call (stmt)\n+\t    && gimple_call_internal_p (stmt)\n+\t    && gimple_call_internal_fn (stmt) == IFN_TSAN_FUNC_EXIT)\n+\t  {\n+\t    if (fentry_exit_instrument)\n+\t      replace_func_exit (stmt);\n+\t    else\n+\t      tsan_func_exits.safe_push (stmt);\n+\t    func_exit_seen = true;\n+\t  }\n+\telse\n+\t  fentry_exit_instrument |= instrument_gimple (&gsi);\n+      }\n+  unsigned int i;\n+  gimple stmt;\n+  FOR_EACH_VEC_ELT (tsan_func_exits, i, stmt)\n+    if (fentry_exit_instrument)\n+      replace_func_exit (stmt);\n+    else\n+      {\n+\tgsi = gsi_for_stmt (stmt);\n+\tgsi_remove (&gsi, true);\n+      }\n+  if (fentry_exit_instrument && !func_exit_seen)\n+    instrument_func_exit ();\n   return fentry_exit_instrument;\n }\n \n@@ -745,46 +814,14 @@ instrument_func_entry (void)\n   gsi_insert_seq_on_edge_immediate (e, seq);\n }\n \n-/* Instruments function exits.  */\n-\n-static void\n-instrument_func_exit (void)\n-{\n-  location_t loc;\n-  basic_block exit_bb;\n-  gimple_stmt_iterator gsi;\n-  gimple stmt, g;\n-  tree builtin_decl;\n-  edge e;\n-  edge_iterator ei;\n-\n-  /* Find all function exits.  */\n-  exit_bb = EXIT_BLOCK_PTR_FOR_FN (cfun);\n-  FOR_EACH_EDGE (e, ei, exit_bb->preds)\n-    {\n-      gsi = gsi_last_bb (e->src);\n-      stmt = gsi_stmt (gsi);\n-      gcc_assert (gimple_code (stmt) == GIMPLE_RETURN\n-\t\t  || gimple_call_builtin_p (stmt, BUILT_IN_RETURN));\n-      loc = gimple_location (stmt);\n-      builtin_decl = builtin_decl_implicit (BUILT_IN_TSAN_FUNC_EXIT);\n-      g = gimple_build_call (builtin_decl, 0);\n-      gimple_set_location (g, loc);\n-      gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n-    }\n-}\n-\n /* ThreadSanitizer instrumentation pass.  */\n \n static unsigned\n tsan_pass (void)\n {\n   initialize_sanitizer_builtins ();\n   if (instrument_memory_accesses ())\n-    {\n-      instrument_func_entry ();\n-      instrument_func_exit ();\n-    }\n+    instrument_func_entry ();\n   return 0;\n }\n "}]}