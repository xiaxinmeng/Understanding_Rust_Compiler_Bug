{"sha": "bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJmMDQ5NWRkMmI1ODNjNTRkNWZmNTkxZjRmMTM1MWY3NGQ5OGJmOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-24T09:35:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-24T09:35:07Z"}, "message": "Define std::uniform_random_bit_generator concept for C++20\n\n\t* include/bits/random.h (uniform_random_bit_generator): Define for\n\tC++20.\n\t* testsuite/26_numerics/random/concept.cc: New test.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error line.\n\nFrom-SVN: r277369", "tree": {"sha": "16eac55ab9b08e67dcd8accabcd9157f2e548ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16eac55ab9b08e67dcd8accabcd9157f2e548ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4f98f617c117919ccf0abc324eb2e431e8e0b0"}], "stats": {"total": 245, "additions": 244, "deletions": 1}, "files": [{"sha": "15448962fcf7285057d61dd26a3a23ac42316ede", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "patch": "@@ -1,3 +1,10 @@\n+2019-10-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (uniform_random_bit_generator): Define for\n+\tC++20.\n+\t* testsuite/26_numerics/random/concept.cc: New test.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error line.\n+\n 2019-10-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/functional (invoke): Add constexpr for C++20."}, {"sha": "270097e07e6606455843f64da647f9f2cf9b1548", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "patch": "@@ -33,6 +33,9 @@\n \n #include <vector>\n #include <bits/uniform_int_dist.h>\n+#if __cplusplus > 201703L\n+# include <concepts>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -48,6 +51,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+#ifdef __cpp_lib_concepts\n+  /// Requirements for a uniform random bit generator.\n+  template<typename _Gen>\n+    concept uniform_random_bit_generator\n+      = invocable<_Gen&> && unsigned_integral<invoke_result_t<_Gen&>>\n+      && requires\n+      {\n+\t{ _Gen::min() } -> same_as<invoke_result_t<_Gen&>>;\n+\t{ _Gen::max() } -> same_as<invoke_result_t<_Gen&>>;\n+      };\n+#endif\n+\n   /**\n    * @brief A function template for converting the output of a (integral)\n    * uniform random number generator to a floatng point result in the range"}, {"sha": "1794ad054196aa75868268e2985d14ed35e2ab2b", "filename": "libstdc++-v3/testsuite/26_numerics/random/concept.cc", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fconcept.cc?ref=bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "patch": "@@ -0,0 +1,221 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-cstdint \"\" }\n+\n+#include <random>\n+\n+static_assert( std::uniform_random_bit_generator<std::default_random_engine> );\n+static_assert( std::uniform_random_bit_generator<std::minstd_rand0> );\n+static_assert( std::uniform_random_bit_generator<std::mt19937> );\n+\n+struct G1\n+{\n+  unsigned char operator()();\n+  static constexpr unsigned char min() { return 0; }\n+  static constexpr unsigned char max() { return 10; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G1> );\n+\n+struct G2\n+{\n+  unsigned operator()();\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return -1U; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G2> );\n+\n+struct G3\n+{\n+  unsigned long long operator()();\n+  static constexpr unsigned long long min() { return 0; }\n+  static constexpr unsigned long long max() { return -1ULL; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G3> );\n+\n+struct G4\n+{\n+  unsigned operator()(int = 0, int = 0); // extra params, with default args\n+  static constexpr unsigned min(long = 0) { return 0; }\n+  static constexpr unsigned max(void* = nullptr) { return -1U; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G4> );\n+\n+struct G5\n+{\n+  unsigned operator()() &; // ref-qualifier\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 10; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G5> );\n+\n+struct G6\n+{\n+  unsigned operator()() const; // cv-qualifier\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 10; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G6> );\n+\n+struct G7\n+{\n+  unsigned operator()() volatile; // cv-qualifier\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 10; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G7> );\n+\n+struct G8\n+{\n+  unsigned operator()() const volatile; // cv-qualifiers\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 10; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G8> );\n+\n+struct G9\n+{\n+  unsigned operator()() const volatile; // cv-qualifiers\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 10; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G9> );\n+\n+struct G10\n+{\n+  unsigned operator()() const volatile & noexcept; // cv/ref/noexcept\n+  static constexpr unsigned min() noexcept { return 0; }\n+  static constexpr unsigned max() noexcept { return 10; }\n+};\n+\n+static_assert( std::uniform_random_bit_generator<G10> );\n+\n+// Negative tests.\n+\n+static_assert( ! std::uniform_random_bit_generator<void> );\n+static_assert( ! std::uniform_random_bit_generator<int> );\n+static_assert( ! std::uniform_random_bit_generator<unsigned(*)()> );\n+\n+struct N1\n+{\n+  unsigned operator()();\n+  constexpr unsigned min() { return 0; } // non-static\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N1> );\n+\n+struct N2\n+{\n+  unsigned operator()();\n+  static constexpr unsigned min() { return 0; }\n+  constexpr unsigned max() { return 1; } // non-static\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N2> );\n+\n+struct N3\n+{\n+  unsigned operator()();\n+  // no N3::min()\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N3> );\n+\n+struct N4\n+{\n+  unsigned operator()();\n+  static constexpr unsigned min() { return 0; }\n+  // no N4::max()\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N4> );\n+\n+struct N5\n+{\n+  // no operator()\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N5> );\n+\n+struct N6\n+{\n+  int operator()(); // returns signed integral\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N6> );\n+\n+struct N7\n+{\n+  unsigned operator()();\n+  static constexpr unsigned long min() { return 0; } // different return type\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N7> );\n+\n+struct N8\n+{\n+  unsigned operator()();\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned long max() { return 1; } // different return type\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N8> );\n+\n+struct N9\n+{\n+  unsigned operator()();\n+  static constexpr unsigned long min() { return 0; } // different return type\n+  static constexpr unsigned long max() { return 1; } // different return type\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N9> );\n+\n+struct N10\n+{\n+  unsigned operator()() &&; // ref-qualifier\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N10> );\n+\n+struct N11\n+{\n+  unsigned operator()() const &&; // ref-qualifier\n+  static constexpr unsigned min() { return 0; }\n+  static constexpr unsigned max() { return 1; }\n+};\n+\n+static_assert( ! std::uniform_random_bit_generator<N11> );"}, {"sha": "9f7b0cec565285b24446aa7e277298138b5ebd1d", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf0495dd2b583c54d5ff591f4f1351f74d98bf9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=bbf0495dd2b583c54d5ff591f4f1351f74d98bf9", "patch": "@@ -10,6 +10,6 @@ std::__detail::_Adaptor<std::mt19937, unsigned long> aurng(urng);\n auto x = std::generate_canonical<std::size_t,\n \t\t\tstd::numeric_limits<std::size_t>::digits>(urng);\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 156 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 171 }\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3320 }"}]}