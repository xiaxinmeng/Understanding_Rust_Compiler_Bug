{"sha": "5718612fc1929a7d9a3ec02c34eb6999c3d5b738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxODYxMmZjMTkyOWE3ZDlhM2VjMDJjMzRlYjY5OTljM2Q1YjczOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-07-02T22:59:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-07-02T22:59:02Z"}, "message": "expr.c (compare): If function pointers need canonicalization before comparisons, canonicalize them.\n\n        * expr.c (compare): If function pointers need canonicalization\n        before comparisons, canonicalize them.\n        (do_store_flag): Do not use an sCC insn for a function pointer\n        comparison if function pointers need canonicalization before\n        comparing.\n\nFrom-SVN: r12381", "tree": {"sha": "706c142d025d0035e9e7bf1a0ea38934874345e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/706c142d025d0035e9e7bf1a0ea38934874345e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5718612fc1929a7d9a3ec02c34eb6999c3d5b738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5718612fc1929a7d9a3ec02c34eb6999c3d5b738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5718612fc1929a7d9a3ec02c34eb6999c3d5b738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5718612fc1929a7d9a3ec02c34eb6999c3d5b738/comments", "author": null, "committer": null, "parents": [{"sha": "f95709dbc854fe93f231fb85b90850a303c9e065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f95709dbc854fe93f231fb85b90850a303c9e065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f95709dbc854fe93f231fb85b90850a303c9e065"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "1c4c6bb61c32afe58294dafe60f51f6d3d7e73b9", "filename": "gcc/expr.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5718612fc1929a7d9a3ec02c34eb6999c3d5b738/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5718612fc1929a7d9a3ec02c34eb6999c3d5b738/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5718612fc1929a7d9a3ec02c34eb6999c3d5b738", "patch": "@@ -10582,6 +10582,32 @@ compare (exp, signed_code, unsigned_code)\n   int unsignedp = TREE_UNSIGNED (type);\n   enum rtx_code code = unsignedp ? unsigned_code : signed_code;\n \n+#ifdef HAVE_canonicalize_funcptr_for_compare\n+  /* If function pointers need to be \"canonicalized\" before they can\n+     be reliably compared, then canonicalize them.  */\n+  if (HAVE_canonicalize_funcptr_for_compare\n+      && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == POINTER_TYPE\n+      && (TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n+\t  == FUNCTION_TYPE))\n+    {\n+      rtx new_op0 = gen_reg_rtx (mode);\n+\n+      emit_insn (gen_canonicalize_funcptr_for_compare (new_op0, op0));\n+      op0 = new_op0;\n+    }\n+\n+  if (HAVE_canonicalize_funcptr_for_compare\n+      && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 1))) == POINTER_TYPE\n+      && (TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 1))))\n+\t  == FUNCTION_TYPE))\n+    {\n+      rtx new_op1 = gen_reg_rtx (mode);\n+\n+      emit_insn (gen_canonicalize_funcptr_for_compare (new_op1, op1));\n+      op1 = new_op1;\n+    }\n+#endif\n+\n   return compare_from_rtx (op0, op1, code, unsignedp, mode,\n \t\t\t   ((mode == BLKmode)\n \t\t\t    ? expr_size (TREE_OPERAND (exp, 0)) : NULL_RTX),\n@@ -10716,6 +10742,19 @@ do_store_flag (exp, target, mode, only_cheap)\n   if (operand_mode == BLKmode)\n     return 0;\n \n+  /* We won't bother with store-flag operations involving function pointers\n+     when function pointers must be canonicalized before comparisons.  */\n+#ifdef HAVE_canonicalize_funcptr_for_compare\n+  if (HAVE_canonicalize_funcptr_for_compare\n+      && ((TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == POINTER_TYPE\n+\t   && (TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n+\t       == FUNCTION_TYPE))\n+\t  || (TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 1))) == POINTER_TYPE\n+\t      && (TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 1))))\n+\t\t  == FUNCTION_TYPE))))\n+    return 0;\n+#endif\n+\n   STRIP_NOPS (arg0);\n   STRIP_NOPS (arg1);\n "}]}