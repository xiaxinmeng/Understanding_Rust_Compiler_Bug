{"sha": "50e99db39196a0567e844f35ce1cd0f36d066b8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBlOTlkYjM5MTk2YTA1NjdlODQ0ZjM1Y2UxY2QwZjM2ZDA2NmI4Zg==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2018-11-26T21:39:51Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2018-11-26T21:39:51Z"}, "message": "Fix tests for 16-bit int.\n\n2018-11-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\tFix tests for 16-bit int.\n\n\tgcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Warray-bounds-3.c (test_strcpy_bounds): Use long instead\n\tof int if __SIZEOF_INT__ == 2.\n\t* c-c++-common/Wrestrict.c: Test memcpy range with smaller length when\n\t__SIZEOF_SIZE_T < 4.\n\t* c-c++-common/rotate-8.c: Define smaller \"large\" constant when\n\t__SIZEOF_INT__ == 2.\n\t* gcc.dg/pr53037-1.c: Add dg-require-effective-target int32.\n\t* gcc.dg/pr53037-2.c: Likewise.\n\t* gcc.dg/pr53037-3.c: Likewise.\n\t* gcc.dg/pr85512.c: Likewise.\n\t* gcc.dg/pr59963-2.c: Add dg-warning for int16.\n\t* gcc.dg/sancov/cmp0.c: Explicitly use __INT32_TYPE__ instead of int.\n\t* gcc.dg/tree-ssa/addadd.c: Fix dg-final directives for int16.\n\t* gcc.dg/tree-ssa/pr79327-2.c: Likewise.\n\t* gcc.dg/tree-ssa/builtin-sprintf-2.c: Filter out invalid tests for\n\tint16.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-10.c: Update sizes in dg-warning\n\tdirectives for int16.\n\nFrom-SVN: r266489", "tree": {"sha": "aa938542cb18eed84b53757535fc514d405e1ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa938542cb18eed84b53757535fc514d405e1ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50e99db39196a0567e844f35ce1cd0f36d066b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e99db39196a0567e844f35ce1cd0f36d066b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e99db39196a0567e844f35ce1cd0f36d066b8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e99db39196a0567e844f35ce1cd0f36d066b8f/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "571bbd0d48d5872eacbd0b681fce6e1ae754520b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571bbd0d48d5872eacbd0b681fce6e1ae754520b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/571bbd0d48d5872eacbd0b681fce6e1ae754520b"}], "stats": {"total": 178, "additions": 117, "deletions": 61}, "files": [{"sha": "234885aa44fdb9b72094e05c8ea4dc979809932a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -1,3 +1,24 @@\n+2018-11-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* c-c++-common/Warray-bounds-3.c (test_strcpy_bounds): Use long instead\n+\tof int if __SIZEOF_INT__ == 2.\n+\t* c-c++-common/Wrestrict.c: Test memcpy range with smaller length when\n+\t__SIZEOF_SIZE_T < 4.\n+\t* c-c++-common/rotate-8.c: Define smaller \"large\" constant when\n+\t__SIZEOF_INT__ == 2.\n+\t* gcc.dg/pr53037-1.c: Add dg-require-effective-target int32.\n+\t* gcc.dg/pr53037-2.c: Likewise.\n+\t* gcc.dg/pr53037-3.c: Likewise.\n+\t* gcc.dg/pr85512.c: Likewise.\n+\t* gcc.dg/pr59963-2.c: Add dg-warning for int16.\n+\t* gcc.dg/sancov/cmp0.c: Explicitly use __INT32_TYPE__ instead of int.\n+\t* gcc.dg/tree-ssa/addadd.c: Fix dg-final directives for int16.\n+\t* gcc.dg/tree-ssa/pr79327-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-2.c: Filter out invalid tests for\n+\tint16.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-10.c: Update sizes in dg-warning\n+\tdirectives for int16.\n+\n 2018-11-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* lib/target-supports.exp (check_effective_target_newlib_nano_io): New. "}, {"sha": "e49d44ad41db102e835f199570e086deaad7eaff", "filename": "gcc/testsuite/c-c++-common/Warray-bounds-3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -326,7 +326,11 @@ void test_strcpy_bounds (char *d, const char *s)\n \n struct MA\n {\n+#if __SIZEOF_INT__ == 2\n+  long i;\n+#else\n   int i;\n+#endif\n   char a5[5];\n   char a11[11];\n };"}, {"sha": "efd72efd320abf5c1c96c463ef3461308b7c870a", "filename": "gcc/testsuite/c-c++-common/Wrestrict.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -262,8 +262,13 @@ void test_memcpy_range (char *d, size_t sz)\n   {\n     /* Create an offset in the range [0, -1].  */\n     size_t o = sz << 1;\n+#if __SIZEOF_SIZE_T__ < 4\n+    T (d, d + o, 1234);\n+    T (d + o, d, 2345);\n+#else\n     T (d, d + o, 12345);\n     T (d + o, d, 23456);\n+#endif\n   }\n \n   /* Exercise memcpy with both destination and source pointer offsets"}, {"sha": "f27634af348f0ac906c171a2a7b56f3c971b3081", "filename": "gcc/testsuite/c-c++-common/rotate-8.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -5,6 +5,12 @@\n /* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 23 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-not \"PHI <\" \"optimized\" } } */\n \n+#if __SIZEOF_INT__ == 2\n+#define LARGE_UNSIGNED 0x1234U\n+#else\n+#define LARGE_UNSIGNED 0x12345678U\n+#endif\n+\n unsigned int\n f1 (unsigned int x, unsigned char y)\n {\n@@ -60,25 +66,25 @@ f8 (unsigned int x, unsigned char y)\n unsigned int\n f9 (unsigned int x, int y)\n {\n-  return (0x12345678U << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+  return (LARGE_UNSIGNED << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (LARGE_UNSIGNED >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n }\n \n unsigned int\n f10 (unsigned int x, int y)\n {\n-  return (0x12345678U >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+  return (LARGE_UNSIGNED >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (LARGE_UNSIGNED << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n }\n \n unsigned int\n f11 (unsigned int x, int y)\n {\n-  return (0x12345678U >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+  return (LARGE_UNSIGNED >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (LARGE_UNSIGNED << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n }\n \n unsigned int\n f12 (unsigned int x, int y)\n {\n-  return (0x12345678U << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+  return (LARGE_UNSIGNED << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (LARGE_UNSIGNED >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n }\n \n unsigned"}, {"sha": "3ea5ae6a34e184e367a9ad933940bf4a4e169cad", "filename": "gcc/testsuite/gcc.dg/pr53037-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-1.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -1,7 +1,7 @@\n /* PR c/53037.  */\n /* { dg-do compile } */\n /* { dg-options \"-O0\" } */\n-/* { dg-skip-if \"\" { avr-*-* } } */\n+/* { dg-require-effective-target int32 } */\n \n typedef unsigned long long __u64\n   __attribute__((aligned(4),warn_if_not_aligned(8)));"}, {"sha": "848db3b3777ece1de96e4c7efaec45ade92ca495", "filename": "gcc/testsuite/gcc.dg/pr53037-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-2.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -1,7 +1,7 @@\n /* PR c/53037.  */\n /* { dg-do compile } */\n /* { dg-options \"-O0 -Wpacked-not-aligned\" } */\n-/* { dg-skip-if \"\" { avr-*-* } } */\n+/* { dg-require-effective-target int32 } */\n \n struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n struct __attribute__ ((packed)) S1 {"}, {"sha": "c9b0efd187420638ca4c1f087ae83e02aa474470", "filename": "gcc/testsuite/gcc.dg/pr53037-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-3.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -1,7 +1,7 @@\n /* PR c/53037.  */\n /* { dg-do compile } */\n /* { dg-options \"-O0 -Wall\" } */\n-/* { dg-skip-if \"\" { avr-*-* } } */\n+/* { dg-require-effective-target int32 } */\n \n struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n struct __attribute__ ((packed)) S1 {"}, {"sha": "286a5f9e1ebf59a006132b4095b49bca92e8a2e5", "filename": "gcc/testsuite/gcc.dg/pr59963-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -33,4 +33,5 @@ foo (int i)\n                -8); /* { dg-warning \"16:-Wsign-conversion\" } */\n   bazu (i, i); /* { dg-warning \"9:conversion\" } */\n   bazi (0x8, 0x80000000); /* { dg-warning \"14:-Wsign-conversion\" \"\" { xfail int16 } } */\n+\t\t\t  /* { dg-warning \"overflow in conversion from\" \"\" { target int16 } .-1 } */\n }"}, {"sha": "788ff87f50a6012d72ed2322c3cd05a71e884c8d", "filename": "gcc/testsuite/gcc.dg/pr85512.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85512.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do assemble } */\n /* { dg-options \"-O -fno-if-conversion\" } */\n+/* { dg-require-effective-target int32 } */\n \n typedef unsigned char u8;\n typedef unsigned short u16;"}, {"sha": "8bbf06e946638902c9da8699795dee624e09f9c3", "filename": "gcc/testsuite/gcc.dg/sancov/cmp0.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fcmp0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fcmp0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fcmp0.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -3,8 +3,14 @@\n /* { dg-options \"-fsanitize-coverage=trace-cmp -fdump-tree-optimized\" } */\n /* { dg-skip-if \"different type layout\" { avr-*-* } } */\n \n+#if __SIZEOF_INT__ < 4\n+typedef __INT32_TYPE__ int32;\n+#else\n+typedef int int32;\n+#endif\n+\n void\n-foo (char *a, short *b, int *c, long long *d, float *e, double *f)\n+foo (char *a, short *b, int32 *c, long long *d, float *e, double *f)\n {\n   if (*a)\n     *a += 1;\n@@ -63,16 +69,16 @@ foo (char *a, short *b, int *c, long long *d, float *e, double *f)\n }\n \n void\n-bar (int *c)\n+bar (int32 *c)\n {\n   if (*c == 27)\n     *c += 2;\n   if (*c == 37)\n     *c += 2;\n }\n \n-int\n-baz (int *c, long long d, long long e)\n+int32\n+baz (int32 *c, long long d, long long e)\n {\n   *c = (*c == 48) ? 12 : 24;\n   return d == e;"}, {"sha": "a586710630b18fbb41d832b2bcd57f3d5a63235f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/addadd.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -25,5 +25,7 @@ int i(int x){\n }\n \n /* { dg-final { scan-tree-dump-times \" \\\\+ 24;\" 2 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" { target { ! int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 1 \"optimized\" { target int16 } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned short\\\\)\" 1 \"optimized\" { target int16 } } } */\n /* { dg-final { scan-tree-dump-not \"2147483647\" \"optimized\" } } */"}, {"sha": "7dd5bfddbf189e7ccd1b8ed01d512a4b5dfa821f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-2.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -78,7 +78,10 @@ EQL (0, 0, \"%-s\", \"\");\n EQL (1, 1, \"%c\",  'x');\n EQL (1, 1, \"%-s\", \"x\");\n \n+/* Size of character constant must be larger than 2 for this to overflow.  */\n+#if __SIZEOF_INT__ > 2\n EQL (1, 2, \"%c\",  'x');\n+#endif\n \n EQL (4, 4, \"%4c\", 'x');\n \n@@ -168,7 +171,11 @@ RNG (0,  4,  6, \"%i\", i)\n RNG (0,  5,  6, \"%i\", i)\n RNG (0,  6,  6, \"%i\", i)\n \n+/* If int is 16bit then it will always fit in 7 char characters with this\n+   formatting.  */\n+#if __SIZEOF_INT__ > 2\n RNG (0,  0,  7, \"%i\", i)\n+#endif\n RNG (0,  1,  7, \"%i\", i)\n RNG (0,  2,  7, \"%i\", i)\n RNG (0,  3,  7, \"%i\", i)\n@@ -291,6 +298,6 @@ RNG (0,  6,   8, \"%s%ls\", \"1\", L\"2\");\n /*  Only conditional calls to must_not_eliminate must be made (with\n     any probability):\n     { dg-final { scan-tree-dump-times \"> \\\\\\[local count: \\[0-9INV\\]*\\\\\\]:\\n *must_not_eliminate\" 127 \"optimized\" { target { ilp32 || lp64 } } } }\n-    { dg-final { scan-tree-dump-times \"> \\\\\\[local count: \\[0-9INV\\]*\\\\\\]:\\n *must_not_eliminate\" 96 \"optimized\" { target { { ! ilp32 } && { ! lp64 } } } } }\n+    { dg-final { scan-tree-dump-times \"> \\\\\\[local count: \\[0-9INV\\]*\\\\\\]:\\n *must_not_eliminate\" 94 \"optimized\" { target { ! { ilp32 || lp64 } } } } }\n     No unconditional calls to abort should be made:\n     { dg-final { scan-tree-dump-not \";\\n *must_not_eliminate\" \"optimized\" } } */"}, {"sha": "8e0d6950fce6495f54555d7ab484e70846804785", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-10.c", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-10.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -39,17 +39,17 @@ void test_a (int w, int p, double x)\n   T1 (\"%*.a\", 6);     /* { dg-warning \"between 6 and 10 bytes\" } */\n   T1 (\"%*.a\", 7);     /* { dg-warning \"between 7 and 10 bytes\" } */\n \n-  T1 (\"%*.a\", w);     /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.0a\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.1a\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.2a\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.a\", w);     /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.0a\", w);    /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.1a\", w);    /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.2a\", w);    /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n \n-  T1 (\"%.*a\",  p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n-  T1 (\"%1.*a\", p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n-  T1 (\"%2.*a\", p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n-  T1 (\"%3.*a\", p);    /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T1 (\"%.*a\",  p);    /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n+  T1 (\"%1.*a\", p);    /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n+  T1 (\"%2.*a\", p);    /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n+  T1 (\"%3.*a\", p);    /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n \n-  T2 (\"%*.*a\", w, p); /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T2 (\"%*.*a\", w, p); /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n }\n \n /* Exercise %e.  */\n@@ -69,17 +69,17 @@ void test_e (int w, int p, double x)\n   T1 (\"%*.e\", 6);     /* { dg-warning \"between 6 and 7 bytes\" } */\n   T1 (\"%*.e\", 7);     /* { dg-warning \"writing 7 bytes\" } */\n \n-  T1 (\"%*.e\", w);     /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.0e\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.1e\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.2e\", w);    /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.e\", w);     /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.0e\", w);    /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.1e\", w);    /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.2e\", w);    /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n \n-  T1 (\"%.*e\",  p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n-  T1 (\"%1.*e\", p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n-  T1 (\"%2.*e\", p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n-  T1 (\"%3.*e\", p);    /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n+  T1 (\"%.*e\",  p);    /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n+  T1 (\"%1.*e\", p);    /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n+  T1 (\"%2.*e\", p);    /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n+  T1 (\"%3.*e\", p);    /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n \n-  T2 (\"%*.*e\", w, p); /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n+  T2 (\"%*.*e\", w, p); /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n }\n \n /* Exercise %f.  */\n@@ -101,17 +101,17 @@ void test_f (int w, int p, double x)\n   T2 (\"%*.*f\", 312, 312);   /* { dg-warning \"between 312 and 623 bytes\" } */\n   T2 (\"%*.*f\", 312, 313);   /* { dg-warning \"between 312 and 624 bytes\" } */\n \n-  T1 (\"%*.f\", w);           /* { dg-warning \"writing between 1 and 2147483648 bytes\" } */\n-  T1 (\"%*.0f\", w);          /* { dg-warning \"writing between 1 and 2147483648 bytes\" } */\n-  T1 (\"%*.1f\", w);          /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T1 (\"%*.2f\", w);          /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T1 (\"%*.f\", w);           /* { dg-warning \"writing between 1 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.0f\", w);          /* { dg-warning \"writing between 1 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.1f\", w);          /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T1 (\"%*.2f\", w);          /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n \n-  T1 (\"%.*f\",  p);          /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n-  T1 (\"%1.*f\", p);          /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n-  T1 (\"%2.*f\", p);          /* { dg-warning \"writing between 2 and 2147483958 bytes\" } */\n-  T1 (\"%3.*f\", p);          /* { dg-warning \"writing between 3 and 2147483958 bytes\" } */\n+  T1 (\"%.*f\",  p);          /* { dg-warning \"writing between 1 and (2147483958|33078) bytes\" } */\n+  T1 (\"%1.*f\", p);          /* { dg-warning \"writing between 1 and (2147483958|33078) bytes\" } */\n+  T1 (\"%2.*f\", p);          /* { dg-warning \"writing between 2 and (2147483958|33078) bytes\" } */\n+  T1 (\"%3.*f\", p);          /* { dg-warning \"writing between 3 and (2147483958|33078) bytes\" } */\n \n-  T2 (\"%*.*f\", w, p);       /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n+  T2 (\"%*.*f\", w, p);       /* { dg-warning \"writing between 1 and (2147483958|33078) bytes\" } */\n }\n \n /* Exercise %g.  The expected output is the lesser of %e and %f.  */\n@@ -152,18 +152,18 @@ void test_a_va (va_list va)\n   T (\"%6.a\");       /* { dg-warning \"between 6 and 10 bytes\" } */\n   T (\"%7.a\");       /* { dg-warning \"between 7 and 10 bytes\" } */\n \n-  T (\"%*.a\");       /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T (\"%*.0a\");      /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T (\"%*.1a\");      /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n-  T (\"%*.2a\");      /* { dg-warning \"writing between 3 and 2147483648 bytes\" } */\n+  T (\"%*.a\");       /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T (\"%*.0a\");      /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T (\"%*.1a\");      /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n+  T (\"%*.2a\");      /* { dg-warning \"writing between 3 and (2147483648|32768) bytes\" } */\n \n-  T (\"%.*a\");       /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n-  T (\"%1.*a\");      /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n-  T (\"%2.*a\");      /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n-  T (\"%6.*a\");      /* { dg-warning \"writing between 6 and 2147483658 bytes\" } */\n-  T (\"%9.*a\");      /* { dg-warning \"writing between 9 and 2147483658 bytes\" } */\n+  T (\"%.*a\");       /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n+  T (\"%1.*a\");      /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n+  T (\"%2.*a\");      /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n+  T (\"%6.*a\");      /* { dg-warning \"writing between 6 and (2147483658|32778) bytes\" } */\n+  T (\"%9.*a\");      /* { dg-warning \"writing between 9 and (2147483658|32778) bytes\" } */\n \n-  T (\"%*.*a\");      /* { dg-warning \"writing between 3 and 2147483658 bytes\" } */\n+  T (\"%*.*a\");      /* { dg-warning \"writing between 3 and (2147483658|32778) bytes\" } */\n }\n \n /* Exercise %e.  */\n@@ -191,12 +191,12 @@ void test_e_va (va_list va)\n   T (\"%6.e\");       /* { dg-warning \"between 6 and 7 bytes\" } */\n   T (\"%7.e\");       /* { dg-warning \"writing 7 bytes\" } */\n \n-  T (\"%.*e\");       /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n-  T (\"%1.*e\");      /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n-  T (\"%6.*e\");      /* { dg-warning \"writing between 6 and 2147483655 bytes\" } */\n-  T (\"%9.*e\");      /* { dg-warning \"writing between 9 and 2147483655 bytes\" } */\n+  T (\"%.*e\");       /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n+  T (\"%1.*e\");      /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n+  T (\"%6.*e\");      /* { dg-warning \"writing between 6 and (2147483655|32775) bytes\" } */\n+  T (\"%9.*e\");      /* { dg-warning \"writing between 9 and (2147483655|32775) bytes\" } */\n \n-  T (\"%*.*e\");      /* { dg-warning \"writing between 3 and 2147483655 bytes\" } */\n+  T (\"%*.*e\");      /* { dg-warning \"writing between 3 and (2147483655|32775) bytes\" } */\n }\n \n /* Exercise %f.  */\n@@ -228,11 +228,11 @@ void test_f_va (va_list va)\n   T (\"%312.312f\");  /* { dg-warning \"between 312 and 623 bytes\" } */\n   T (\"%312.313f\");  /* { dg-warning \"between 312 and 624 bytes\" } */\n \n-  T (\"%.*f\");       /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n-  T (\"%1.*f\");      /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n-  T (\"%3.*f\");      /* { dg-warning \"writing between 3 and 2147483958 bytes\" } */\n+  T (\"%.*f\");       /* { dg-warning \"writing between 1 and (2147483958|33078) bytes\" } */\n+  T (\"%1.*f\");      /* { dg-warning \"writing between 1 and (2147483958|33078) bytes\" } */\n+  T (\"%3.*f\");      /* { dg-warning \"writing between 3 and (2147483958|33078) bytes\" } */\n \n-  T (\"%*.*f\");      /* { dg-warning \"writing between 1 and 2147483958 bytes\" } */\n+  T (\"%*.*f\");      /* { dg-warning \"writing between 1 and (2147483958|33078) bytes\" } */\n }\n \n /* Exercise %g.  The expected output is the lesser of %e and %f.  */\n@@ -270,5 +270,5 @@ void test_g_va (va_list va)\n   T (\"%1.*g\");      /* { dg-warning \"writing between 1 and 310 bytes\" } */\n   T (\"%4.*g\");      /* { dg-warning \"writing between 4 and 310 bytes\" } */\n \n-  T (\"%*.*g\");      /* { dg-warning \"writing between 1 and 2147483648 bytes\" } */\n+  T (\"%*.*g\");      /* { dg-warning \"writing between 1 and (2147483648|32768) bytes\" } */\n }"}, {"sha": "9b392f3432b8df3d7710d4f7a2e19d1c48510a5a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr79327-2.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79327-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e99db39196a0567e844f35ce1cd0f36d066b8f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79327-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79327-2.c?ref=50e99db39196a0567e844f35ce1cd0f36d066b8f", "patch": "@@ -76,6 +76,7 @@ int test_o_var (int i)\n   ASSERT_MAYBE (5 == n);\n   ASSERT_MAYBE (6 == n);\n   ASSERT_MAYBE (7 == n);\n+  /* Below will be optimized out for 16-bit int.  */\n   ASSERT_MAYBE (8 == n);\n   ASSERT_MAYBE (9 == n);\n   ASSERT_MAYBE (10 == n);\n@@ -147,6 +148,7 @@ int test_x_var (int i)\n   ASSERT_MAYBE (4 == n);\n   ASSERT_MAYBE (5 == n);\n   ASSERT_MAYBE (6 == n);\n+  /* Below will be optimized out for 16-bit int.  */\n   ASSERT_MAYBE (7 == n);\n   ASSERT_MAYBE (8 == n);\n   ASSERT_MAYBE (9 == n);\n@@ -156,4 +158,5 @@ int test_x_var (int i)\n }\n \n /* { dg-final { scan-tree-dump-not \"failure_on_line\" \"optimized\"} }\n-   { dg-final { scan-tree-dump-times \"keep_call_on_line\" 43 \"optimized\"} } */\n+   { dg-final { scan-tree-dump-times \"keep_call_on_line\" 43 \"optimized\" { target { ! int16 } } } }\n+   { dg-final { scan-tree-dump-times \"keep_call_on_line\" 34 \"optimized\" { target int16 } } } */"}]}