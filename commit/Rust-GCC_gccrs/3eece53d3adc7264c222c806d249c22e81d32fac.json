{"sha": "3eece53d3adc7264c222c806d249c22e81d32fac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlY2U1M2QzYWRjNzI2NGMyMjJjODA2ZDI0OWMyMmU4MWQzMmZhYw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2015-11-10T08:35:21Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-11-10T08:35:21Z"}, "message": "Workaround PR68256 on AArch64\n\n\n> This is causing a bootstrap comparison failure in gcc/go/gogo.o.\n\nI've had a look at this and the trigger is the\naarch64_use_constant_blocks_p change which appears to be causing a\nbootstrap comparison failure because of differences to offsets when\nbuilt with debug and without debug. I don't think the problem is\nspecifically in the backend but this needs some careful\ninvestigation. For now, in the interest of go bootstraps continuing on\ntrunk - I'm proposing a patch that partially rolls back the change in\naarch64_use_constant_blocks_p and am still looking into the issue but\nit will take me some more time to get to the bottom of the issue.\n\nBootstrapped on aarch64-none-linux-gnu including (c,c++ and go) -\ntesting finished ok.\n\n2015-11-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR bootstrap/68256\n\t* config/aarch64/aarch64.c (aarch64_use_constant_blocks_p):\n\tReturn false.\n\nFrom-SVN: r230085", "tree": {"sha": "a4780550a39c5290f436088c312c2881753f9045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4780550a39c5290f436088c312c2881753f9045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eece53d3adc7264c222c806d249c22e81d32fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eece53d3adc7264c222c806d249c22e81d32fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eece53d3adc7264c222c806d249c22e81d32fac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eece53d3adc7264c222c806d249c22e81d32fac/comments", "author": null, "committer": null, "parents": [{"sha": "03310c37cc1c1de0ee78a1518bd564b366a3328f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03310c37cc1c1de0ee78a1518bd564b366a3328f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03310c37cc1c1de0ee78a1518bd564b366a3328f"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "577267a8f62023ff76f459dff34269d0c10bf687", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eece53d3adc7264c222c806d249c22e81d32fac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eece53d3adc7264c222c806d249c22e81d32fac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3eece53d3adc7264c222c806d249c22e81d32fac", "patch": "@@ -1,3 +1,9 @@\n+2015-11-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR bootstrap/68256\n+\t* config/aarch64/aarch64.c (aarch64_use_constant_blocks_p):\n+\tReturn false.\n+\n 2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/57845"}, {"sha": "7d6dfc342b85d7967292454c2512865951452f5b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eece53d3adc7264c222c806d249c22e81d32fac/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eece53d3adc7264c222c806d249c22e81d32fac/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3eece53d3adc7264c222c806d249c22e81d32fac", "patch": "@@ -5244,9 +5244,11 @@ aarch64_can_use_per_function_literal_pools_p (void)\n static bool\n aarch64_use_blocks_for_constant_p (machine_mode, const_rtx)\n {\n-  /* We can't use blocks for constants when we're using a per-function\n-     constant pool.  */\n-  return !aarch64_can_use_per_function_literal_pools_p ();\n+  /* Fixme:: In an ideal world this would work similar\n+     to the logic in aarch64_select_rtx_section but this\n+     breaks bootstrap in gcc go.  For now we workaround\n+     this by returning false here.  */\n+  return false;\n }\n \n /* Select appropriate section for constants depending"}]}