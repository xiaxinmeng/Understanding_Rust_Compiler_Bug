{"sha": "5583e33da85818e2b25b5995e6d503a7444b030a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4M2UzM2RhODU4MThlMmIyNWI1OTk1ZTZkNTAzYTc0NDRiMDMwYQ==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2003-11-30T06:32:57Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-11-30T06:32:57Z"}, "message": "Make NON_SAVING_SETJMP usable again.\n\n\t* final.c (final_start_function): Delete code for NON_SAVING_SETJMP.\n\t* reload1.c (reload): Re-add it here.\n\nFrom-SVN: r74052", "tree": {"sha": "4853bd6350a58c11315ec3c4f350bd5963479644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4853bd6350a58c11315ec3c4f350bd5963479644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5583e33da85818e2b25b5995e6d503a7444b030a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5583e33da85818e2b25b5995e6d503a7444b030a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5583e33da85818e2b25b5995e6d503a7444b030a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5583e33da85818e2b25b5995e6d503a7444b030a/comments", "author": null, "committer": null, "parents": [{"sha": "1ff8f81ab3d8242b575a2d2c533f357042c2e8d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff8f81ab3d8242b575a2d2c533f357042c2e8d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff8f81ab3d8242b575a2d2c533f357042c2e8d1"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "22908dedea9cdbaf293b5ee542819793e712dec1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5583e33da85818e2b25b5995e6d503a7444b030a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5583e33da85818e2b25b5995e6d503a7444b030a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5583e33da85818e2b25b5995e6d503a7444b030a", "patch": "@@ -1,3 +1,8 @@\n+2003-11-29  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* final.c (final_start_function): Delete code for NON_SAVING_SETJMP.\n+\t* reload1.c (reload): Re-add it here.\n+\n 2003-11-30  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): Don't"}, {"sha": "820cb680ab20addab1624e09c1b3b5ec75a438db", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5583e33da85818e2b25b5995e6d503a7444b030a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5583e33da85818e2b25b5995e6d503a7444b030a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5583e33da85818e2b25b5995e6d503a7444b030a", "patch": "@@ -1336,19 +1336,6 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n \n   this_is_asm_operands = 0;\n \n-#ifdef NON_SAVING_SETJMP\n-  /* A function that calls setjmp should save and restore all the\n-     call-saved registers on a system where longjmp clobbers them.  */\n-  if (NON_SAVING_SETJMP && current_function_calls_setjmp)\n-    {\n-      int i;\n-\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (!call_used_regs[i])\n-\t  regs_ever_live[i] = 1;\n-    }\n-#endif\n-\n   last_filename = locator_file (prologue_locator);\n   last_linenum = locator_line (prologue_locator);\n "}, {"sha": "b234a6a1707df9719d4976299844e2dded383bac", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5583e33da85818e2b25b5995e6d503a7444b030a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5583e33da85818e2b25b5995e6d503a7444b030a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=5583e33da85818e2b25b5995e6d503a7444b030a", "patch": "@@ -673,6 +673,17 @@ reload (rtx first, int global)\n       if (! call_used_regs[i] && ! fixed_regs[i] && ! LOCAL_REGNO (i))\n \tregs_ever_live[i] = 1;\n \n+#ifdef NON_SAVING_SETJMP\n+  /* A function that calls setjmp should save and restore all the\n+     call-saved registers on a system where longjmp clobbers them.  */\n+  if (NON_SAVING_SETJMP && current_function_calls_setjmp)\n+    {\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\tif (! call_used_regs[i])\n+\t  regs_ever_live[i] = 1;\n+    }\n+#endif\n+\n   /* Find all the pseudo registers that didn't get hard regs\n      but do have known equivalent constants or memory slots.\n      These include parameters (known equivalent to parameter slots)"}]}