{"sha": "f470b1e5b754215f807cdab7267a374dc0421be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3MGIxZTViNzU0MjE1ZjgwN2NkYWI3MjY3YTM3NGRjMDQyMWJlMQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2004-11-30T21:19:49Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2004-11-30T21:19:49Z"}, "message": "target-supports.exp (check_effective_target_vect_long): Fix for powerpc64-*-*.\n\n\t* lib/target-supports.exp (check_effective_target_vect_long):\n\tFix for powerpc64-*-*.\n\nFrom-SVN: r91540", "tree": {"sha": "6bce509571c951936a1cb8a8b1143f92cf0151f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bce509571c951936a1cb8a8b1143f92cf0151f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f470b1e5b754215f807cdab7267a374dc0421be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f470b1e5b754215f807cdab7267a374dc0421be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f470b1e5b754215f807cdab7267a374dc0421be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f470b1e5b754215f807cdab7267a374dc0421be1/comments", "author": null, "committer": null, "parents": [{"sha": "62f4e23f087096962eb67aef5414125453f7ad9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f4e23f087096962eb67aef5414125453f7ad9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f4e23f087096962eb67aef5414125453f7ad9a"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "f642e1ebc09d7fe845679ccb2cbc05cee348fad0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f470b1e5b754215f807cdab7267a374dc0421be1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f470b1e5b754215f807cdab7267a374dc0421be1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f470b1e5b754215f807cdab7267a374dc0421be1", "patch": "@@ -1,3 +1,8 @@\n+2004-11-30  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_long):\n+\tFix for powerpc64-*-*.\n+\n 2004-11-30  Loren James Rittle  <ljrittle@acm.org>\n \n         * g++.old-deja/g++.eh/badalloc1.C (arena_size): Bump up to 262144"}, {"sha": "ed1394cf7a4279d859a23c9600fc47e1f85bba03", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f470b1e5b754215f807cdab7267a374dc0421be1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f470b1e5b754215f807cdab7267a374dc0421be1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f470b1e5b754215f807cdab7267a374dc0421be1", "patch": "@@ -458,25 +458,20 @@ proc check_effective_target_vect_int { } {\n \n # Return 1 if the target supports hardware vectors of long, 0 otherwise.\n #\n-# This won't change for different subtargets so cache the result.\n+# This can change for different subtargets so do not cache the result.\n \n proc check_effective_target_vect_long { } {\n-    global et_vect_long_saved\n-\n-    if [info exists et_vect_long_saved] {\n-\tverbose \"check_effective_target_vect_long: using cached result\" 2\n+    if { [istarget i?86-*-*]\n+\t || ([istarget powerpc*-*-*] && [check_effective_target_ilp32])\n+\t || [istarget x86_64-*-*]\n+\t || ([istarget sparc*-*-*] && [check_effective_target_ilp32]) } {\n+\tset answer 1\n     } else {\n-\tset et_vect_long_saved 0\n-\tif { [istarget i?86-*-*]\n-\t      || [istarget powerpc*-*-*]\n-\t      || [istarget x86_64-*-*]\n-\t      || ([istarget sparc*-*-*] && [check_effective_target_ilp32]) } {\n-\t   set et_vect_long_saved 1\n-\t}\n+\tset answer 0\n     }\n \n-    verbose \"check_effective_target_vect_long: returning $et_vect_long_saved\" 2\n-    return $et_vect_long_saved\n+    verbose \"check_effective_target_vect_long: returning $answer\" 2\n+    return $answer\n }\n \n # Return 1 if the target supports hardware vectors of float, 0 otherwise."}]}