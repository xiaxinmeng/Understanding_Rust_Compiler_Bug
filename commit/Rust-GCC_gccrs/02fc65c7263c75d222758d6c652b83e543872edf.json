{"sha": "02fc65c7263c75d222758d6c652b83e543872edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmYzY1YzcyNjNjNzVkMjIyNzU4ZDZjNjUyYjgzZTU0Mzg3MmVkZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-11T18:05:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-11T19:15:30Z"}, "message": "c++: Refactor final cleanup\n\nThis is a small refactor of the end of decl processing, into which\ndropping module support will be simpler.\n\n\tgcc/cp/\n\t* decl2.c (c_parse_final_cleanups): Refactor loop.", "tree": {"sha": "f10640baf5bf85df6d188a8697a93aa28dc9f2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f10640baf5bf85df6d188a8697a93aa28dc9f2e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02fc65c7263c75d222758d6c652b83e543872edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fc65c7263c75d222758d6c652b83e543872edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02fc65c7263c75d222758d6c652b83e543872edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fc65c7263c75d222758d6c652b83e543872edf/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "755cf781f2eb3a6317af90bf3b12206b0fc54a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755cf781f2eb3a6317af90bf3b12206b0fc54a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/755cf781f2eb3a6317af90bf3b12206b0fc54a96"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "b13c9d9f73d127d1f355d84a8dcdbba6bfa5f11a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fc65c7263c75d222758d6c652b83e543872edf/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fc65c7263c75d222758d6c652b83e543872edf/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=02fc65c7263c75d222758d6c652b83e543872edf", "patch": "@@ -4887,11 +4887,7 @@ lower_var_init ()\n void\n c_parse_final_cleanups (void)\n {\n-  tree vars;\n-  bool reconsider;\n   size_t i;\n-  unsigned ssdf_count = 0;\n-  int retries = 0;\n   tree decl;\n \n   locus_at_end_of_parsing = input_location;\n@@ -4957,11 +4953,10 @@ c_parse_final_cleanups (void)\n   /* Track vtables we want to emit that refer to consteval functions.  */\n   auto_vec<tree> consteval_vtables;\n \n-  do\n+  int retries = 0;\n+  unsigned ssdf_count = 0;\n+  for (bool reconsider = true; reconsider; retries++)\n     {\n-      tree t;\n-      tree decl;\n-\n       reconsider = false;\n \n       /* If there are templates that we've put off instantiating, do\n@@ -4974,6 +4969,7 @@ c_parse_final_cleanups (void)\n \t instantiation of members of that class.  If we write out\n \t vtables then we remove the class from our list so we don't\n \t have to look at it again.  */\n+      tree t;\n       for (i = keyed_classes->length ();\n \t   keyed_classes->iterate (--i, &t);)\n \tif (maybe_emit_vtables (t, consteval_vtables))\n@@ -5003,9 +4999,7 @@ c_parse_final_cleanups (void)\n \t aggregates added during the initialization of these will be\n \t initialized in the correct order when we next come around the\n \t loop.  */\n-      vars = prune_vars_needing_no_initialization (&static_aggregates);\n-\n-      if (vars)\n+      if (tree vars = prune_vars_needing_no_initialization (&static_aggregates))\n \t{\n \t  /* We need to start a new initialization function each time\n \t     through the loop.  That's because we need to know which\n@@ -5052,7 +5046,6 @@ c_parse_final_cleanups (void)\n \t     instantiations, etc.  */\n \t  reconsider = true;\n \t  ssdf_count++;\n-\t  /* ??? was:  locus_at_end_of_parsing.line++; */\n \t}\n \n       /* Now do the same for thread_local variables.  */\n@@ -5162,14 +5155,12 @@ c_parse_final_cleanups (void)\n \t  if (DECL_NOT_REALLY_EXTERN (decl) && decl_needed_p (decl))\n \t    DECL_EXTERNAL (decl) = 0;\n \t}\n+\n       if (vec_safe_length (pending_statics) != 0\n \t  && wrapup_global_declarations (pending_statics->address (),\n \t\t\t\t\t pending_statics->length ()))\n \treconsider = true;\n-\n-      retries++;\n     }\n-  while (reconsider);\n \n   lower_var_init ();\n "}]}