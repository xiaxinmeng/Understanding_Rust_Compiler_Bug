{"sha": "ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwMWE4N2NiYzc4NzIzODNlZmYwZmFhNGMxY2M1MzI3MWZmNmU4NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-09-11T21:40:41Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-09-11T21:40:41Z"}, "message": "builtins.c (builtin_dconsts_init, [...]): Delete.\n\n\t* builtins.c (builtin_dconsts_init, dconstpi, dconste,\n\tinit_builtin_dconsts): Delete.\n\t* emit-rtl.c (dconstpi, dconste): Define.\n\t(init_emit_once): Initialize dconstpi & dconste.\n\t* real.h (dconstpi, dconste): Declare.\n\nFrom-SVN: r71320", "tree": {"sha": "dd3d90073691428ca546906c6dc1fb5d76415d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd3d90073691428ca546906c6dc1fb5d76415d20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/comments", "author": null, "committer": null, "parents": [{"sha": "b44a178ae83acaeb2e6a7ee51cfde543922f6b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44a178ae83acaeb2e6a7ee51cfde543922f6b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44a178ae83acaeb2e6a7ee51cfde543922f6b99"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "d6d762417e8a86aa5242aa99bc018d279ac8015a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "patch": "@@ -1,3 +1,11 @@\n+2003-09-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (builtin_dconsts_init, dconstpi, dconste,\n+\tinit_builtin_dconsts): Delete.\n+\t* emit-rtl.c (dconstpi, dconste): Define.\n+\t(init_emit_once): Initialize dconstpi & dconste.\n+\t* real.h (dconstpi, dconste): Declare.\n+\n 2003-09-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR fortran/11522"}, {"sha": "4df0e95b7f6afe3d612a50dd823bb63045d57e75", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "patch": "@@ -79,11 +79,6 @@ tree built_in_decls[(int) END_BUILTINS];\n    required to implement the function call in all cases.  */\n tree implicit_built_in_decls[(int) END_BUILTINS];\n \n-/* Trigonometric and mathematical constants used in builtin folding.  */\n-static bool builtin_dconsts_init = 0;\n-static REAL_VALUE_TYPE dconstpi;\n-static REAL_VALUE_TYPE dconste;\n-\n static int get_pointer_alignment (tree, unsigned int);\n static tree c_strlen (tree, int);\n static const char *c_getstr (tree);\n@@ -157,27 +152,12 @@ static tree fold_trunc_transparent_mathfn (tree);\n static bool readonly_data_expr (tree);\n static rtx expand_builtin_fabs (tree, rtx, rtx);\n static rtx expand_builtin_cabs (tree, rtx);\n-static void init_builtin_dconsts (void);\n static tree fold_builtin_cabs (tree, tree, tree);\n static tree fold_builtin_trunc (tree);\n static tree fold_builtin_floor (tree);\n static tree fold_builtin_ceil (tree);\n static tree fold_builtin_bitop (tree);\n \n-/* Initialize mathematical constants for constant folding builtins.\n-   These constants need to be given to at least 160 bits precision.  */\n-\n-static void\n-init_builtin_dconsts (void)\n-{\n-  real_from_string (&dconstpi,\n-    \"3.1415926535897932384626433832795028841971693993751058209749445923078\");\n-  real_from_string (&dconste,\n-    \"2.7182818284590452353602874713526624977572470936999595749669676277241\");\n-\n-  builtin_dconsts_init = true;\n-}\n-\n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n    The alignment returned is, by default, the alignment of the thing that\n@@ -6009,8 +5989,6 @@ fold_builtin_logarithm (tree exp, const REAL_VALUE_TYPE *value)\n \t  case BUILT_IN_EXPF:\n \t  case BUILT_IN_EXPL:\n \t    /* Prepare to do logN(exp(exponent) -> exponent*logN(e).  */\n-\t    if (! builtin_dconsts_init)\n-\t      init_builtin_dconsts ();\n \t    x = build_real (type,\n \t\t\t    real_value_truncate (TYPE_MODE (type), dconste));\n \t    exponent = TREE_VALUE (TREE_OPERAND (arg, 1));\n@@ -6283,8 +6261,6 @@ fold_builtin (tree exp)\n     case BUILT_IN_EXP:\n     case BUILT_IN_EXPF:\n     case BUILT_IN_EXPL:\n-      if (! builtin_dconsts_init)\n-\tinit_builtin_dconsts ();\n       return fold_builtin_exponent (exp, &dconste);\n     case BUILT_IN_EXP2:\n     case BUILT_IN_EXP2F:\n@@ -6300,8 +6276,6 @@ fold_builtin (tree exp)\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n-      if (! builtin_dconsts_init)\n-\tinit_builtin_dconsts ();\n       return fold_builtin_logarithm (exp, &dconste);\n       break;\n     case BUILT_IN_LOG2:\n@@ -6353,8 +6327,6 @@ fold_builtin (tree exp)\n \t    {\n \t      REAL_VALUE_TYPE cst;\n \n-\t      if (! builtin_dconsts_init)\n-\t\tinit_builtin_dconsts ();\n \t      real_convert (&cst, TYPE_MODE (type), &dconstpi);\n \t      cst.exp -= 2;\n \t      return build_real (type, cst);"}, {"sha": "d5ff690cb3fed36bdf395ff27fe7267686d9c871", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "patch": "@@ -116,6 +116,8 @@ REAL_VALUE_TYPE dconstm1;\n REAL_VALUE_TYPE dconstm2;\n REAL_VALUE_TYPE dconsthalf;\n REAL_VALUE_TYPE dconstthird;\n+REAL_VALUE_TYPE dconstpi;\n+REAL_VALUE_TYPE dconste;\n \n /* All references to the following fixed hard registers go through\n    these unique rtl objects.  On machines where the frame-pointer and\n@@ -5427,6 +5429,13 @@ init_emit_once (int line_numbers)\n \n   real_arithmetic (&dconstthird, RDIV_EXPR, &dconst1, &dconst3);\n \n+  /* Initialize mathematical constants for constant folding builtins.\n+     These constants need to be given to at least 160 bits precision.  */\n+  real_from_string (&dconstpi,\n+    \"3.1415926535897932384626433832795028841971693993751058209749445923078\");\n+  real_from_string (&dconste,\n+    \"2.7182818284590452353602874713526624977572470936999595749669676277241\");\n+\n   for (i = 0; i < (int) ARRAY_SIZE (const_tiny_rtx); i++)\n     {\n       REAL_VALUE_TYPE *r ="}, {"sha": "4799204de560adefeda285c0f4186d33116bee24", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab01a87cbc7872383eff0faa4c1cc53271ff6e85/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "patch": "@@ -333,6 +333,8 @@ extern REAL_VALUE_TYPE dconstm1;\n extern REAL_VALUE_TYPE dconstm2;\n extern REAL_VALUE_TYPE dconsthalf;\n extern REAL_VALUE_TYPE dconstthird;\n+extern REAL_VALUE_TYPE dconstpi;\n+extern REAL_VALUE_TYPE dconste;\n \n /* Function to return a real value (not a tree node)\n    from a given integer constant.  */"}]}