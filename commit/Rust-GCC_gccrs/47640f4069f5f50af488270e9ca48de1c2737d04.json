{"sha": "47640f4069f5f50af488270e9ca48de1c2737d04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2NDBmNDA2OWY1ZjUwYWY0ODgyNzBlOWNhNDhkZTFjMjczN2QwNA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-20T17:40:46Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-20T17:40:46Z"}, "message": "sparc.md (UNSPEC_ALIGNADDRL): New unspec.\n\n\t* config/sparc/sparc.md (UNSPEC_ALIGNADDRL): New unspec.\n\t(aligneddrl<P:mode>_vis): New pattern.\n\t(edge8_vis, edge8l_vis, edge16_vis, edge16l_vis, edge32_vis,\n\tedge32l_vis): Adjust to take Pmode arguments, and return SImode.\n\t* config/sparc/sparc.c (sparc_vis_init_builtins): Handle new\n\talignaddrl insn, and adjust edge operations for updated types.\n\t* config/sparc/visintrin.h: Likewise.\n\t* doc/extend.texi: Make typing in VIS documentation match reality.\n\nFrom-SVN: r179012", "tree": {"sha": "783c4751a45682c58b7a223ca624d9e386d2caa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783c4751a45682c58b7a223ca624d9e386d2caa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47640f4069f5f50af488270e9ca48de1c2737d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47640f4069f5f50af488270e9ca48de1c2737d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47640f4069f5f50af488270e9ca48de1c2737d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47640f4069f5f50af488270e9ca48de1c2737d04/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "458692b00c947e500d42d2704c3a38604ee6b451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458692b00c947e500d42d2704c3a38604ee6b451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458692b00c947e500d42d2704c3a38604ee6b451"}], "stats": {"total": 219, "additions": 138, "deletions": 81}, "files": [{"sha": "738d318ac0cacb2fd3d148171979a3bc2b8dc08c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47640f4069f5f50af488270e9ca48de1c2737d04", "patch": "@@ -1,3 +1,14 @@\n+2011-09-20  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (UNSPEC_ALIGNADDRL): New unspec.\n+\t(aligneddrl<P:mode>_vis): New pattern.\n+\t(edge8_vis, edge8l_vis, edge16_vis, edge16l_vis, edge32_vis,\n+\tedge32l_vis): Adjust to take Pmode arguments, and return SImode.\n+\t* config/sparc/sparc.c (sparc_vis_init_builtins): Handle new\n+\talignaddrl insn, and adjust edge operations for updated types.\n+\t* config/sparc/visintrin.h: Likewise.\n+\t* doc/extend.texi: Make typing in VIS documentation match reality.\n+\n 2011-09-20  Terry Guo  <terry.guo@arm.com>\n \n \t* config/arm/arm-arches.def: Add armv6s-m."}, {"sha": "68b5961bd38215bd9423d5d78d164c788bb9a054", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=47640f4069f5f50af488270e9ca48de1c2737d04", "patch": "@@ -9149,6 +9149,9 @@ sparc_vis_init_builtins (void)\n   tree ptr_ftype_ptr_di = build_function_type_list (ptr_type_node,\n \t\t        \t\t\t    ptr_type_node,\n \t\t\t\t\t            intDI_type_node, 0);\n+  tree si_ftype_ptr_ptr = build_function_type_list (intSI_type_node,\n+\t\t        \t\t\t    ptr_type_node,\n+\t\t\t\t\t            ptr_type_node, 0);\n \n   /* Packing and expanding vectors.  */\n   def_builtin (\"__builtin_vis_fpack16\", CODE_FOR_fpack16_vis, v4qi_ftype_v4hi);\n@@ -9186,29 +9189,55 @@ sparc_vis_init_builtins (void)\n   def_builtin (\"__builtin_vis_faligndatadi\", CODE_FOR_faligndatadi_vis,\n                di_ftype_di_di);\n   if (TARGET_ARCH64)\n-    def_builtin (\"__builtin_vis_alignaddr\", CODE_FOR_alignaddrdi_vis,\n-\t         ptr_ftype_ptr_di);\n+    {\n+      def_builtin (\"__builtin_vis_alignaddr\", CODE_FOR_alignaddrdi_vis,\n+\t\t   ptr_ftype_ptr_di);\n+      def_builtin (\"__builtin_vis_alignaddrl\", CODE_FOR_alignaddrldi_vis,\n+\t\t   ptr_ftype_ptr_di);\n+    }\n   else\n-    def_builtin (\"__builtin_vis_alignaddr\", CODE_FOR_alignaddrsi_vis,\n-\t         ptr_ftype_ptr_si);\n+    {\n+      def_builtin (\"__builtin_vis_alignaddr\", CODE_FOR_alignaddrsi_vis,\n+\t\t   ptr_ftype_ptr_si);\n+      def_builtin (\"__builtin_vis_alignaddrl\", CODE_FOR_alignaddrlsi_vis,\n+\t\t   ptr_ftype_ptr_si);\n+    }\n \n   /* Pixel distance.  */\n   def_builtin (\"__builtin_vis_pdist\", CODE_FOR_pdist_vis,\n \t       di_ftype_v8qi_v8qi_di);\n \n   /* Edge handling.  */\n-  def_builtin (\"__builtin_vis_edge8\", CODE_FOR_edge8_vis,\n-               di_ftype_di_di);\n-  def_builtin (\"__builtin_vis_edge8l\", CODE_FOR_edge8l_vis,\n-               di_ftype_di_di);\n-  def_builtin (\"__builtin_vis_edge16\", CODE_FOR_edge16_vis,\n-               di_ftype_di_di);\n-  def_builtin (\"__builtin_vis_edge16l\", CODE_FOR_edge16l_vis,\n-               di_ftype_di_di);\n-  def_builtin (\"__builtin_vis_edge32\", CODE_FOR_edge32_vis,\n-               di_ftype_di_di);\n-  def_builtin (\"__builtin_vis_edge32l\", CODE_FOR_edge32l_vis,\n-               di_ftype_di_di);\n+  if (TARGET_ARCH64)\n+    {\n+      def_builtin (\"__builtin_vis_edge8\", CODE_FOR_edge8di_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge8l\", CODE_FOR_edge8ldi_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge16\", CODE_FOR_edge16di_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge16l\", CODE_FOR_edge16ldi_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge32\", CODE_FOR_edge32di_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge32l\", CODE_FOR_edge32ldi_vis,\n+\t\t   si_ftype_ptr_ptr);\n+    }\n+  else\n+    {\n+      def_builtin (\"__builtin_vis_edge8\", CODE_FOR_edge8si_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge8l\", CODE_FOR_edge8lsi_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge16\", CODE_FOR_edge16si_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge16l\", CODE_FOR_edge16lsi_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge32\", CODE_FOR_edge32si_vis,\n+\t\t   si_ftype_ptr_ptr);\n+      def_builtin (\"__builtin_vis_edge32l\", CODE_FOR_edge32lsi_vis,\n+\t\t   si_ftype_ptr_ptr);\n+    }\n }\n \n /* Handle TARGET_EXPAND_BUILTIN target hook."}, {"sha": "1fb59cce22a8493fc52db7b5fc94a119e86be05e", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 51, "deletions": 42, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=47640f4069f5f50af488270e9ca48de1c2737d04", "patch": "@@ -66,6 +66,7 @@\n    (UNSPEC_EDGE16L\t\t54)\n    (UNSPEC_EDGE32\t\t55)\n    (UNSPEC_EDGE32L\t\t56)\n+   (UNSPEC_ALIGNADDRL\t\t57)\n \n    (UNSPEC_SP_SET\t\t60)\n    (UNSPEC_SP_TEST\t\t61)\n@@ -7798,6 +7799,14 @@\n   \"TARGET_VIS\"\n   \"alignaddr\\t%r1, %r2, %0\")\n \n+(define_insn \"alignaddrl<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_or_zero_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_or_zero_operand\" \"rJ\")]\n+         UNSPEC_ALIGNADDRL))]\n+  \"TARGET_VIS\"\n+  \"alignaddrl\\t%r1, %r2, %0\")\n+\n (define_insn \"pdist_vis\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n         (unspec:DI [(match_operand:V8QI 1 \"register_operand\" \"e\")\n@@ -7811,68 +7820,68 @@\n \n ;; Edge instructions produce condition codes equivalent to a 'subcc'\n ;; with the same operands.\n-(define_insn \"edge8_vis\"\n-  [(set (reg:CCX_NOOV 100)\n-        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n-\t\t\t  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8))]\n+(define_insn \"edge8<P:mode>_vis\"\n+  [(set (reg:CC_NOOV 100)\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+\t\t\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8))]\n   \"TARGET_VIS\"\n   \"edge8\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n \n-(define_insn \"edge8l_vis\"\n-  [(set (reg:CCX_NOOV 100)\n-        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n-\t\t\t  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8L))]\n+(define_insn \"edge8l<P:mode>_vis\"\n+  [(set (reg:CC_NOOV 100)\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+\t\t\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8L))]\n   \"TARGET_VIS\"\n   \"edge8l\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n \n-(define_insn \"edge16_vis\"\n-  [(set (reg:CCX_NOOV 100)\n-        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n-\t\t\t  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16))]\n+(define_insn \"edge16<P:mode>_vis\"\n+  [(set (reg:CC_NOOV 100)\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+\t\t\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16))]\n   \"TARGET_VIS\"\n   \"edge16\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n \n-(define_insn \"edge16l_vis\"\n-  [(set (reg:CCX_NOOV 100)\n-        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n-\t\t\t  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16L))]\n+(define_insn \"edge16l<P:mode>_vis\"\n+  [(set (reg:CC_NOOV 100)\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+\t\t\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16L))]\n   \"TARGET_VIS\"\n   \"edge16l\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n \n-(define_insn \"edge32_vis\"\n-  [(set (reg:CCX_NOOV 100)\n-        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n-\t\t\t  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32))]\n+(define_insn \"edge32<P:mode>_vis\"\n+  [(set (reg:CC_NOOV 100)\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+\t\t\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32))]\n   \"TARGET_VIS\"\n   \"edge32\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n \n-(define_insn \"edge32l_vis\"\n-  [(set (reg:CCX_NOOV 100)\n-        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n-\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n-\t\t\t  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32L))]\n+(define_insn \"edge32l<P:mode>_vis\"\n+  [(set (reg:CC_NOOV 100)\n+        (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n+\t\t\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32L))]\n   \"TARGET_VIS\"\n   \"edge32l\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])"}, {"sha": "1b31451f75b1623e890725a0655f43cf51eca4a9", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=47640f4069f5f50af488270e9ca48de1c2737d04", "patch": "@@ -38,6 +38,13 @@ __vis_alignaddr (void *__A, long __B)\n   return __builtin_vis_alignaddr (__A, __B);\n }\n \n+extern __inline void *\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_alignaddrl (void *__A, long __B)\n+{\n+  return __builtin_vis_alignaddrl (__A, __B);\n+}\n+\n extern __inline __i64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_faligndatadi (__i64 __A, __i64 __B)\n@@ -157,44 +164,44 @@ __vis_pdist (__v8qi __A, __v8qi __B, __i64 __C)\n   return __builtin_vis_pdist (__A, __B, __C);\n }\n \n-extern __inline __i64\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_edge8 (__i64 __A, __i64 __B)\n+__vis_edge8 (void *__A, void *__B)\n {\n   return __builtin_vis_edge8 (__A, __B);\n }\n \n-extern __inline __i64\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_edge8l (__i64 __A, __i64 __B)\n+__vis_edge8l (void *__A, void *__B)\n {\n   return __builtin_vis_edge8l (__A, __B);\n }\n \n-extern __inline __i64\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_edge16 (__i64 __A, __i64 __B)\n+__vis_edge16 (void *__A, void *__B)\n {\n   return __builtin_vis_edge16 (__A, __B);\n }\n \n-extern __inline __i64\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_edge16l (__i64 __A, __i64 __B)\n+__vis_edge16l (void *__A, void *__B)\n {\n   return __builtin_vis_edge16l (__A, __B);\n }\n \n-extern __inline __i64\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_edge32 (__i64 __A, __i64 __B)\n+__vis_edge32 (void *__A, void *__B)\n {\n   return __builtin_vis_edge32 (__A, __B);\n }\n \n-extern __inline __i64\n+extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_edge32l (__i64 __A, __i64 __B)\n+__vis_edge32l (void *__A, void *__B)\n {\n   return __builtin_vis_edge32l (__A, __B);\n }"}, {"sha": "3e6e05e5a26e9bd1f053a101ccb4a7fe01408458", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47640f4069f5f50af488270e9ca48de1c2737d04/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=47640f4069f5f50af488270e9ca48de1c2737d04", "patch": "@@ -12932,10 +12932,11 @@ switch, the VIS extension is exposed as the following built-in functions:\n typedef int v2si __attribute__ ((vector_size (8)));\n typedef short v4hi __attribute__ ((vector_size (8)));\n typedef short v2hi __attribute__ ((vector_size (4)));\n-typedef char v8qi __attribute__ ((vector_size (8)));\n-typedef char v4qi __attribute__ ((vector_size (4)));\n+typedef unsigned char v8qi __attribute__ ((vector_size (8)));\n+typedef unsigned char v4qi __attribute__ ((vector_size (4)));\n \n void * __builtin_vis_alignaddr (void *, long);\n+void * __builtin_vis_alignaddrl (void *, long);\n int64_t __builtin_vis_faligndatadi (int64_t, int64_t);\n v2si __builtin_vis_faligndatav2si (v2si, v2si);\n v4hi __builtin_vis_faligndatav4hi (v4si, v4si);\n@@ -12944,26 +12945,26 @@ v8qi __builtin_vis_faligndatav8qi (v8qi, v8qi);\n v4hi __builtin_vis_fexpand (v4qi);\n \n v4hi __builtin_vis_fmul8x16 (v4qi, v4hi);\n-v4hi __builtin_vis_fmul8x16au (v4qi, v4hi);\n-v4hi __builtin_vis_fmul8x16al (v4qi, v4hi);\n+v4hi __builtin_vis_fmul8x16au (v4qi, v2hi);\n+v4hi __builtin_vis_fmul8x16al (v4qi, v2hi);\n v4hi __builtin_vis_fmul8sux16 (v8qi, v4hi);\n v4hi __builtin_vis_fmul8ulx16 (v8qi, v4hi);\n v2si __builtin_vis_fmuld8sux16 (v4qi, v2hi);\n v2si __builtin_vis_fmuld8ulx16 (v4qi, v2hi);\n \n v4qi __builtin_vis_fpack16 (v4hi);\n-v8qi __builtin_vis_fpack32 (v2si, v2si);\n+v8qi __builtin_vis_fpack32 (v2si, v8qi);\n v2hi __builtin_vis_fpackfix (v2si);\n v8qi __builtin_vis_fpmerge (v4qi, v4qi);\n \n int64_t __builtin_vis_pdist (v8qi, v8qi, int64_t);\n \n-int64_t __builtin_vis_edge8 (int64_t, int64_t);\n-int64_t __builtin_vis_edge8l (int64_t, int64_t);\n-int64_t __builtin_vis_edge16 (int64_t, int64_t);\n-int64_t __builtin_vis_edge16l (int64_t, int64_t);\n-int64_t __builtin_vis_edge32 (int64_t, int64_t);\n-int64_t __builtin_vis_edge32l (int64_t, int64_t);\n+int __builtin_vis_edge8 (void *, void *);\n+int __builtin_vis_edge8l (void *, void *);\n+int __builtin_vis_edge16 (void *, void *);\n+int __builtin_vis_edge16l (void *, void *);\n+int __builtin_vis_edge32 (void *, void *);\n+int __builtin_vis_edge32l (void *, void *);\n @end smallexample\n \n @node SPU Built-in Functions"}]}