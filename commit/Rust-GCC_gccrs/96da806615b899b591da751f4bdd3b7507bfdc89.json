{"sha": "96da806615b899b591da751f4bdd3b7507bfdc89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkYTgwNjYxNWI4OTliNTkxZGE3NTFmNGJkZDNiNzUwN2JmZGM4OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-06-29T18:02:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-06-29T18:02:41Z"}, "message": "tree.c (process_call_operands): Propagate TREE_READONLY from the operands.\n\n\t* tree.c (process_call_operands): Propagate TREE_READONLY from the\n\toperands.\n\t(PROCESS_ARG): Do not clear TREE_READONLY if CONSTANT_CLASS_P.\n\t(build3_stat): Propagate TREE_READONLY for COND_EXPR.\n\nFrom-SVN: r149060", "tree": {"sha": "bcbc4cc6b6059dc5641db66d1491c4ef98f93345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcbc4cc6b6059dc5641db66d1491c4ef98f93345"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96da806615b899b591da751f4bdd3b7507bfdc89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96da806615b899b591da751f4bdd3b7507bfdc89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96da806615b899b591da751f4bdd3b7507bfdc89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96da806615b899b591da751f4bdd3b7507bfdc89/comments", "author": null, "committer": null, "parents": [{"sha": "3ad1aba1f8d179027d2b5532d43024edfa7e903e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad1aba1f8d179027d2b5532d43024edfa7e903e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad1aba1f8d179027d2b5532d43024edfa7e903e"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "ecc41cb034c02c271d31f072e3fad2a3acc5f0fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96da806615b899b591da751f4bdd3b7507bfdc89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96da806615b899b591da751f4bdd3b7507bfdc89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96da806615b899b591da751f4bdd3b7507bfdc89", "patch": "@@ -1,3 +1,10 @@\n+2009-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.c (process_call_operands): Propagate TREE_READONLY from the\n+\toperands.\n+\t(PROCESS_ARG): Do not clear TREE_READONLY if CONSTANT_CLASS_P.\n+\t(build3_stat): Propagate TREE_READONLY for COND_EXPR.\n+\n 2009-06-29  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/arm/arm.h (REGISTER_MOVE_COST): Increase VFP register"}, {"sha": "c4ed82bc878d49bf405ebdbdba9ef4cb8e58e5ee", "filename": "gcc/tree.c", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96da806615b899b591da751f4bdd3b7507bfdc89/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96da806615b899b591da751f4bdd3b7507bfdc89/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=96da806615b899b591da751f4bdd3b7507bfdc89", "patch": "@@ -2479,28 +2479,28 @@ static void\n process_call_operands (tree t)\n {\n   bool side_effects = TREE_SIDE_EFFECTS (t);\n-  int i;\n+  bool read_only = false;\n+  int i = call_expr_flags (t);\n+\n+  /* Calls have side-effects, except those to const or pure functions.  */\n+  if ((i & ECF_LOOPING_CONST_OR_PURE) || !(i & (ECF_CONST | ECF_PURE)))\n+    side_effects = true;\n+  /* Propagate TREE_READONLY of arguments for const functions.  */\n+  if (i & ECF_CONST)\n+    read_only = true;\n \n-  if (!side_effects)\n+  if (!side_effects || read_only)\n     for (i = 1; i < TREE_OPERAND_LENGTH (t); i++)\n       {\n \ttree op = TREE_OPERAND (t, i);\n \tif (op && TREE_SIDE_EFFECTS (op))\n-\t  {\n-\t    side_effects = true;\n-\t    break;\n-\t  }\n+\t  side_effects = true;\n+\tif (op && !TREE_READONLY (op) && !CONSTANT_CLASS_P (op))\n+\t  read_only = false;\n       }\n \n-  if (!side_effects)\n-    {\n-      /* Calls have side-effects, except those to const or pure functions.  */\n-      i = call_expr_flags (t);\n-      if ((i & ECF_LOOPING_CONST_OR_PURE) || !(i & (ECF_CONST | ECF_PURE)))\n-\tside_effects = true;\n-    }\n-\n   TREE_SIDE_EFFECTS (t) = side_effects;\n+  TREE_READONLY (t) = read_only;\n }\n \f\n /* Return 1 if EXP contains a PLACEHOLDER_EXPR; i.e., if it represents a size\n@@ -3346,18 +3346,19 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n   return t;\n }\n \n-#define PROCESS_ARG(N)\t\t\t\\\n-  do {\t\t\t\t\t\\\n-    TREE_OPERAND (t, N) = arg##N;\t\\\n-    if (arg##N &&!TYPE_P (arg##N))\t\\\n-      {\t\t\t\t\t\\\n-        if (TREE_SIDE_EFFECTS (arg##N))\t\\\n-\t  side_effects = 1;\t\t\\\n-        if (!TREE_READONLY (arg##N))\t\\\n-\t  read_only = 0;\t\t\\\n-        if (!TREE_CONSTANT (arg##N))\t\\\n-\t  constant = 0;\t\t\t\\\n-      }\t\t\t\t\t\\\n+#define PROCESS_ARG(N)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    TREE_OPERAND (t, N) = arg##N;\t\t\\\n+    if (arg##N &&!TYPE_P (arg##N))\t\t\\\n+      {\t\t\t\t\t\t\\\n+        if (TREE_SIDE_EFFECTS (arg##N))\t\t\\\n+\t  side_effects = 1;\t\t\t\\\n+        if (!TREE_READONLY (arg##N)\t\t\\\n+\t    && !CONSTANT_CLASS_P (arg##N))\t\\\n+\t  read_only = 0;\t\t\t\\\n+        if (!TREE_CONSTANT (arg##N))\t\t\\\n+\t  constant = 0;\t\t\t\t\\\n+      }\t\t\t\t\t\t\\\n   } while (0)\n \n tree\n@@ -3424,6 +3425,8 @@ build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n   t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n+  read_only = 1;\n+\n   /* As a special exception, if COND_EXPR has NULL branches, we\n      assume that it is a gimple statement and always consider\n      it to have side effects.  */\n@@ -3439,6 +3442,9 @@ build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n   PROCESS_ARG(1);\n   PROCESS_ARG(2);\n \n+  if (code == COND_EXPR)\n+    TREE_READONLY (t) = read_only;\n+\n   TREE_SIDE_EFFECTS (t) = side_effects;\n   TREE_THIS_VOLATILE (t)\n     = (TREE_CODE_CLASS (code) == tcc_reference"}]}