{"sha": "a90c02456f4655254477e00e338163ffab9bd97b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwYzAyNDU2ZjQ2NTUyNTQ0NzdlMDBlMzM4MTYzZmZhYjliZDk3Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-02-02T16:05:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-02T16:05:09Z"}, "message": "extend.texi (__builtin_mips_get_fcsr): Document.\n\ngcc/\n\t* doc/extend.texi (__builtin_mips_get_fcsr): Document.\n\t(__builtin_mips_set_fcsr): Likewise.\n\t* config/mips/mips-ftypes.def: Add MIPS_VOID_FTYPE_USI and\n\tMIPS_USI_FTYPE_VOID.\n\t* config/mips/mips-protos.h (mips16_expand_get_fcsr): Declare\n\t(mips16_expand_set_fcsr): Likewise.\n\t* config/mips/mips.c (mips16_get_fcsr_stub): New variable.\n\t(mips16_set_fcsr_stub): Likewise.\n\t(mips16_get_fcsr_one_only_stub): New class.\n\t(mips16_set_fcsr_one_only_stub): Likewise.\n\t(mips16_expand_get_fcsr, mips16_expand_set_fcsr): New functions.\n\t(mips_code_end): Output the get_fcsr and set_fcsr stubs, if needed.\n\t(BUILTIN_AVAIL_MIPS16, AVAIL_ALL): New macros.\n\t(hard_float): New availability predicate.\n\t(mips_builtins): Add get_fcsr and set_fcsr.\n\t(mips_expand_builtin): Check BUILTIN_AVAIL_MIPS16.\n\t* config/mips/mips.md (UNSPEC_GET_FCSR, UNSPEC_SET_FCSR): New unspecs.\n\t(GET_FCSR_REGNUM, SET_FCSR_REGNUM): New constants.\n\t(mips_get_fcsr, *mips_get_fcsr, mips_get_fcsr_mips16_<mode>)\n\t(mips_set_fcsr, *mips_set_fcsr, mips_set_fcsr_mips16_<mode>): New\n\tpatterns.\n\ngcc/testsuite/\n\t* gcc.target/mips/get-fcsr-1.c, gcc.target/mips/get-fcsr-2.c,\n\tgcc.target/mips/set-fcsr-1.c, gcc.target/mips/set-fcsr-2.c: New tests.\n\nFrom-SVN: r207401", "tree": {"sha": "d3981bb890af724a896cc670725869d13eb00984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3981bb890af724a896cc670725869d13eb00984"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a90c02456f4655254477e00e338163ffab9bd97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90c02456f4655254477e00e338163ffab9bd97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a90c02456f4655254477e00e338163ffab9bd97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90c02456f4655254477e00e338163ffab9bd97b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d51cc90102eddcc8b988b400a70b015e69b2274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d51cc90102eddcc8b988b400a70b015e69b2274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d51cc90102eddcc8b988b400a70b015e69b2274"}], "stats": {"total": 244, "additions": 240, "deletions": 4}, "files": [{"sha": "93433735f76915d75695eba5a3468d7106130360", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -1,3 +1,27 @@\n+2014-02-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/extend.texi (__builtin_mips_get_fcsr): Document.\n+\t(__builtin_mips_set_fcsr): Likewise.\n+\t* config/mips/mips-ftypes.def: Add MIPS_VOID_FTYPE_USI and\n+\tMIPS_USI_FTYPE_VOID.\n+\t* config/mips/mips-protos.h (mips16_expand_get_fcsr): Declare\n+\t(mips16_expand_set_fcsr): Likewise.\n+\t* config/mips/mips.c (mips16_get_fcsr_stub): New variable.\n+\t(mips16_set_fcsr_stub): Likewise.\n+\t(mips16_get_fcsr_one_only_stub): New class.\n+\t(mips16_set_fcsr_one_only_stub): Likewise.\n+\t(mips16_expand_get_fcsr, mips16_expand_set_fcsr): New functions.\n+\t(mips_code_end): Output the get_fcsr and set_fcsr stubs, if needed.\n+\t(BUILTIN_AVAIL_MIPS16, AVAIL_ALL): New macros.\n+\t(hard_float): New availability predicate.\n+\t(mips_builtins): Add get_fcsr and set_fcsr.\n+\t(mips_expand_builtin): Check BUILTIN_AVAIL_MIPS16.\n+\t* config/mips/mips.md (UNSPEC_GET_FCSR, UNSPEC_SET_FCSR): New unspecs.\n+\t(GET_FCSR_REGNUM, SET_FCSR_REGNUM): New constants.\n+\t(mips_get_fcsr, *mips_get_fcsr, mips_get_fcsr_mips16_<mode>)\n+\t(mips_set_fcsr, *mips_set_fcsr, mips_set_fcsr_mips16_<mode>): New\n+\tpatterns.\n+\n 2014-02-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_one_only_stub): New class."}, {"sha": "078a595a8b1cf157c47418bc9200a16d66bbccff", "filename": "gcc/config/mips/mips-ftypes.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -69,6 +69,8 @@ DEF_MIPS_FTYPE (1, (SF, V2SF))\n DEF_MIPS_FTYPE (2, (UDI, UDI, UDI))\n DEF_MIPS_FTYPE (2, (UDI, UV2SI, UV2SI))\n \n+DEF_MIPS_FTYPE (1, (USI, VOID))\n+\n DEF_MIPS_FTYPE (2, (UV2SI, UV2SI, UQI))\n DEF_MIPS_FTYPE (2, (UV2SI, UV2SI, UV2SI))\n \n@@ -122,5 +124,6 @@ DEF_MIPS_FTYPE (2, (V8QI, V8QI, V8QI))\n \n DEF_MIPS_FTYPE (2, (VOID, SI, CVPOINTER))\n DEF_MIPS_FTYPE (2, (VOID, SI, SI))\n+DEF_MIPS_FTYPE (1, (VOID, USI))\n DEF_MIPS_FTYPE (2, (VOID, V2HI, V2HI))\n DEF_MIPS_FTYPE (2, (VOID, V4QI, V4QI))"}, {"sha": "3d59b7b51e02f9505088f3592d649dcf1673739e", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -345,6 +345,8 @@ extern bool lwsp_swsp_address_p (rtx, enum machine_mode);\n extern bool m16_based_address_p (rtx, enum machine_mode,\n \t\t\t         int (*)(rtx_def*, machine_mode)); \n extern rtx mips_expand_thread_pointer (rtx);\n+extern void mips16_expand_get_fcsr (rtx);\n+extern void mips16_expand_set_fcsr (rtx);\n \n extern bool mips_eh_uses (unsigned int);\n extern bool mips_epilogue_uses (unsigned int);"}, {"sha": "cd1710b58b62dd4f6b542b0fd569f1983847102d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 92, "deletions": 4, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -641,8 +641,10 @@ struct target_globals *mips16_globals;\n    and returned from mips_sched_reorder2.  */\n static int cached_can_issue_more;\n \n-/* The stub for __mips16_rdhwr, if used.  */\n+/* The stubs for various MIPS16 support functions, if used.   */\n static mips_one_only_stub *mips16_rdhwr_stub;\n+static mips_one_only_stub *mips16_get_fcsr_stub;\n+static mips_one_only_stub *mips16_set_fcsr_stub;\n \n /* Index R is the smallest register class that contains register R.  */\n const enum reg_class mips_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n@@ -1660,6 +1662,48 @@ mips16_rdhwr_one_only_stub::output_body ()\n \t   \"\\t.set\\tpop\\n\"\n \t   \"\\tj\\t$31\\n\");\n }\n+\n+/* A stub for moving the FCSR into GET_FCSR_REGNUM.  */\n+class mips16_get_fcsr_one_only_stub : public mips_one_only_stub\n+{\n+  virtual const char *get_name ();\n+  virtual void output_body ();\n+};\n+\n+const char *\n+mips16_get_fcsr_one_only_stub::get_name ()\n+{\n+  return \"__mips16_get_fcsr\";\n+}\n+\n+void\n+mips16_get_fcsr_one_only_stub::output_body ()\n+{\n+  fprintf (asm_out_file,\n+\t   \"\\tcfc1\\t%s,$31\\n\"\n+\t   \"\\tj\\t$31\\n\", reg_names[GET_FCSR_REGNUM]);\n+}\n+\n+/* A stub for moving SET_FCSR_REGNUM into the FCSR.  */\n+class mips16_set_fcsr_one_only_stub : public mips_one_only_stub\n+{\n+  virtual const char *get_name ();\n+  virtual void output_body ();\n+};\n+\n+const char *\n+mips16_set_fcsr_one_only_stub::get_name ()\n+{\n+  return \"__mips16_set_fcsr\";\n+}\n+\n+void\n+mips16_set_fcsr_one_only_stub::output_body ()\n+{\n+  fprintf (asm_out_file,\n+\t   \"\\tctc1\\t%s,$31\\n\"\n+\t   \"\\tj\\t$31\\n\", reg_names[SET_FCSR_REGNUM]);\n+}\n \f\n /* Return true if symbols of type TYPE require a GOT access.  */\n \n@@ -3219,6 +3263,31 @@ mips_legitimize_tls_address (rtx loc)\n   return dest;\n }\n \f\n+/* Implement \"TARGET = __builtin_mips_get_fcsr ()\" for MIPS16,\n+   using a stub.  */\n+\n+void\n+mips16_expand_get_fcsr (rtx target)\n+{\n+  if (!mips16_get_fcsr_stub)\n+    mips16_get_fcsr_stub = new mips16_get_fcsr_one_only_stub ();\n+  rtx fn = mips16_stub_call_address (mips16_get_fcsr_stub);\n+  emit_insn (PMODE_INSN (gen_mips_get_fcsr_mips16, (fn)));\n+  emit_move_insn (target, gen_rtx_REG (SImode, GET_FCSR_REGNUM));\n+}\n+\n+/* Implement __builtin_mips_set_fcsr (TARGET) for MIPS16, using a stub.  */\n+\n+void\n+mips16_expand_set_fcsr (rtx newval)\n+{\n+  if (!mips16_set_fcsr_stub)\n+    mips16_set_fcsr_stub = new mips16_set_fcsr_one_only_stub ();\n+  rtx fn = mips16_stub_call_address (mips16_set_fcsr_stub);\n+  emit_move_insn (gen_rtx_REG (SImode, SET_FCSR_REGNUM), newval);\n+  emit_insn (PMODE_INSN (gen_mips_set_fcsr_mips16, (fn)));\n+}\n+\f\n /* If X is not a valid address for mode MODE, force it into a register.  */\n \n static rtx\n@@ -8958,6 +9027,8 @@ static void\n mips_code_end (void)\n {\n   mips_finish_stub (&mips16_rdhwr_stub);\n+  mips_finish_stub (&mips16_get_fcsr_stub);\n+  mips_finish_stub (&mips16_set_fcsr_stub);\n }\n \f\n /* Make the last instruction frame-related and note that it performs\n@@ -13649,9 +13720,12 @@ mips_prefetch_cookie (rtx write, rtx locality)\n /* Flags that indicate when a built-in function is available.\n \n    BUILTIN_AVAIL_NON_MIPS16\n-\tThe function is available on the current target, but only\n-\tin non-MIPS16 mode.  */\n+\tThe function is available on the current target if !TARGET_MIPS16.\n+\n+   BUILTIN_AVAIL_MIPS16\n+\tThe function is available on the current target if TARGET_MIPS16.  */\n #define BUILTIN_AVAIL_NON_MIPS16 1\n+#define BUILTIN_AVAIL_MIPS16 2\n \n /* Declare an availability predicate for built-in functions that\n    require non-MIPS16 mode and also require COND to be true.\n@@ -13663,6 +13737,16 @@ mips_prefetch_cookie (rtx write, rtx locality)\n    return (COND) ? BUILTIN_AVAIL_NON_MIPS16 : 0;\t\t\t\\\n  }\n \n+/* Declare an availability predicate for built-in functions that\n+   support both MIPS16 and non-MIPS16 code and also require COND\n+   to be true.  NAME is the main part of the predicate's name.  */\n+#define AVAIL_ALL(NAME, COND)\t\t\t\t\t\t\\\n+ static unsigned int\t\t\t\t\t\t\t\\\n+ mips_builtin_avail_##NAME (void)\t\t\t\t\t\\\n+ {\t\t\t\t\t\t\t\t\t\\\n+   return (COND) ? BUILTIN_AVAIL_NON_MIPS16 | BUILTIN_AVAIL_MIPS16 : 0;\t\\\n+ }\n+\n /* This structure describes a single built-in function.  */\n struct mips_builtin_description {\n   /* The code of the main .md file instruction.  See mips_builtin_type\n@@ -13685,6 +13769,7 @@ struct mips_builtin_description {\n   unsigned int (*avail) (void);\n };\n \n+AVAIL_ALL (hard_float, TARGET_HARD_FLOAT_ABI)\n AVAIL_NON_MIPS16 (paired_single, TARGET_PAIRED_SINGLE_FLOAT)\n AVAIL_NON_MIPS16 (sb1_paired_single, TARGET_SB1 && TARGET_PAIRED_SINGLE_FLOAT)\n AVAIL_NON_MIPS16 (mips3d, TARGET_MIPS3D)\n@@ -13852,6 +13937,9 @@ AVAIL_NON_MIPS16 (cache, TARGET_CACHE_BUILTIN)\n #define CODE_FOR_loongson_psubusb CODE_FOR_ussubv8qi3\n \n static const struct mips_builtin_description mips_builtins[] = {\n+  DIRECT_BUILTIN (get_fcsr, MIPS_USI_FTYPE_VOID, hard_float),\n+  DIRECT_NO_TARGET_BUILTIN (set_fcsr, MIPS_VOID_FTYPE_USI, hard_float),\n+\n   DIRECT_BUILTIN (pll_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, paired_single),\n   DIRECT_BUILTIN (pul_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, paired_single),\n   DIRECT_BUILTIN (plu_ps, MIPS_V2SF_FTYPE_V2SF_V2SF, paired_single),\n@@ -14501,7 +14589,7 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   d = &mips_builtins[fcode];\n   avail = d->avail ();\n   gcc_assert (avail != 0);\n-  if (TARGET_MIPS16)\n+  if (TARGET_MIPS16 && !(avail & BUILTIN_AVAIL_MIPS16))\n     {\n       error (\"built-in function %qE not supported for MIPS16\",\n \t     DECL_NAME (fndecl));"}, {"sha": "1e3e9e6595780c80cddbf35495e84c781aa7739c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -86,6 +86,10 @@\n   UNSPEC_MFHC1\n   UNSPEC_MTHC1\n \n+  ;; Floating-point environment.\n+  UNSPEC_GET_FCSR\n+  UNSPEC_SET_FCSR\n+\n   ;; HI/LO moves.\n   UNSPEC_MFHI\n   UNSPEC_MTHI\n@@ -147,6 +151,8 @@\n \n (define_constants\n   [(TLS_GET_TP_REGNUM\t\t3)\n+   (GET_FCSR_REGNUM\t\t2)\n+   (SET_FCSR_REGNUM\t\t4)\n    (MIPS16_T_REGNUM\t\t24)\n    (PIC_FUNCTION_ADDR_REGNUM\t25)\n    (RETURN_ADDR_REGNUM\t\t31)\n@@ -7093,6 +7099,66 @@\n   DONE;\n })\n \n+;; __builtin_mips_get_fcsr: move the FCSR into operand 0.\n+(define_expand \"mips_get_fcsr\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+  \t(unspec_volatile [(const_int 0)] UNSPEC_GET_FCSR))]\n+  \"TARGET_HARD_FLOAT_ABI\"\n+{\n+  if (TARGET_MIPS16)\n+    {\n+      mips16_expand_get_fcsr (operands[0]);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*mips_get_fcsr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+  \t(unspec_volatile [(const_int 0)] UNSPEC_GET_FCSR))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"cfc1\\t%0,$31\")\n+\n+;; See tls_get_tp_mips16_<mode> for why this form is used.\n+(define_insn \"mips_get_fcsr_mips16_<mode>\"\n+  [(set (reg:SI GET_FCSR_REGNUM)\n+\t(unspec:SI [(match_operand:P 0 \"call_insn_operand\" \"dS\")]\n+\t\t   UNSPEC_GET_FCSR))\n+   (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n+   (clobber (reg:P RETURN_ADDR_REGNUM))]\n+  \"TARGET_HARD_FLOAT_ABI && TARGET_MIPS16\"\n+  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"insn_count\" \"3\")])\n+\n+;; __builtin_mips_set_fcsr: move operand 0 into the FCSR.\n+(define_expand \"mips_set_fcsr\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\")]\n+  \t\t    UNSPEC_SET_FCSR)]\n+  \"TARGET_HARD_FLOAT_ABI\"\n+{\n+  if (TARGET_MIPS16)\n+    {\n+      mips16_expand_set_fcsr (operands[0]);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*mips_set_fcsr\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"d\")]\n+  \t\t    UNSPEC_SET_FCSR)]\n+  \"TARGET_HARD_FLOAT\"\n+  \"ctc1\\t%0,$31\")\n+\n+;; See tls_get_tp_mips16_<mode> for why this form is used.\n+(define_insn \"mips_set_fcsr_mips16_<mode>\"\n+  [(unspec_volatile:SI [(match_operand:P 0 \"call_insn_operand\" \"dS\")\n+  \t                (reg:SI SET_FCSR_REGNUM)] UNSPEC_SET_FCSR)\n+   (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n+   (clobber (reg:P RETURN_ADDR_REGNUM))]\n+  \"TARGET_HARD_FLOAT_ABI && TARGET_MIPS16\"\n+  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"insn_count\" \"3\")])\n \f\n ;; Synchronization instructions.\n "}, {"sha": "48a8e990d1adc3ff5cf889d0485c3e669ed370ce", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -12617,6 +12617,15 @@ GCC provides other MIPS-specific built-in functions:\n Insert a @samp{cache} instruction with operands @var{op} and @var{addr}.\n GCC defines the preprocessor macro @code{___GCC_HAVE_BUILTIN_MIPS_CACHE}\n when this function is available.\n+\n+@item unsigned int __builtin_mips_get_fcsr (void)\n+@itemx void __builtin_mips_set_fcsr (unsigned int @var{value})\n+Get and set the contents of the floating-point control and status register\n+(FPU control register 31).  These functions are only available in hard-float\n+code but can be called in both MIPS16 and non-MIPS16 contexts.\n+\n+@code{__builtin_mips_set_fcsr} can be used to change any bit of the\n+register except the condition codes, which GCC assumes are preserved.\n @end table\n \n @node MSP430 Built-in Functions"}, {"sha": "1f27d7ea85fb6be66ec518dfdc356696362cd7b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -1,3 +1,8 @@\n+2014-02-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/get-fcsr-1.c, gcc.target/mips/get-fcsr-2.c,\n+\tgcc.target/mips/set-fcsr-1.c, gcc.target/mips/set-fcsr-2.c: New tests.\n+\n 2014-02-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/60017"}, {"sha": "46379b2575251260702735f724e778abbfa67762", "filename": "gcc/testsuite/gcc.target/mips/get-fcsr-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fget-fcsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fget-fcsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fget-fcsr-1.c?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-mhard-float\" } */\n+\n+NOMIPS16 unsigned int\n+foo (void)\n+{\n+  return __builtin_mips_get_fcsr ();\n+}\n+\n+/* { dg-final { scan-assembler \"cfc1\\t\\\\\\$2,\\\\\\$31\" } } */"}, {"sha": "29a97d30917928d69cf39631954ff0fd927ba925", "filename": "gcc/testsuite/gcc.target/mips/get-fcsr-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fget-fcsr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fget-fcsr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fget-fcsr-2.c?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mhard-float (-mips16)\" } */\n+\n+MIPS16 unsigned int\n+foo (void)\n+{\n+  return __builtin_mips_get_fcsr ();\n+}\n+\n+/* { dg-final { scan-assembler \"__mips16_get_fcsr\" } } */\n+/* { dg-final { scan-assembler \"cfc1\\t\\\\\\$2,\\\\\\$31\" } } */"}, {"sha": "0237272cfc371116c95a7d18211c03cff48cedca", "filename": "gcc/testsuite/gcc.target/mips/set-fcsr-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fset-fcsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fset-fcsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fset-fcsr-1.c?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mhard-float\" } */\n+/* { dg-skip-if \"requiring \\$4 is a code-quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+NOMIPS16 void\n+foo (unsigned int x)\n+{\n+  __builtin_mips_set_fcsr (x);\n+}\n+\n+/* { dg-final { scan-assembler \"ctc1\\t\\\\\\$4,\\\\\\$31\" } } */"}, {"sha": "82696298f56e0726d9c698c06a3ca8ec56eda50a", "filename": "gcc/testsuite/gcc.target/mips/set-fcsr-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fset-fcsr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90c02456f4655254477e00e338163ffab9bd97b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fset-fcsr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fset-fcsr-2.c?ref=a90c02456f4655254477e00e338163ffab9bd97b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mhard-float (-mips16)\" } */\n+\n+MIPS16 void\n+foo (unsigned int x)\n+{\n+  __builtin_mips_set_fcsr (x);\n+}\n+\n+/* { dg-final { scan-assembler \"__mips16_set_fcsr\" } } */\n+/* { dg-final { scan-assembler \"ctc1\\t\\\\\\$4,\\\\\\$31\" } } */"}]}