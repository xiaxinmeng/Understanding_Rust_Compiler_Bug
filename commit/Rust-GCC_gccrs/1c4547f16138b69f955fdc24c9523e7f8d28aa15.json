{"sha": "1c4547f16138b69f955fdc24c9523e7f8d28aa15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0NTQ3ZjE2MTM4YjY5Zjk1NWZkYzI0Yzk1MjNlN2Y4ZDI4YWExNQ==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2019-07-22T14:07:10Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2019-07-22T14:07:10Z"}, "message": "[rs6000] Add _mm_blend_epi16 and _mm_blendv_epi8\n\nAdd compatibility implementations of _mm_blend_epi16 and _mm_blendv_epi8\nintrinsics.\n\nRespective test cases are copied almost verbatim (minor changes to\nthe dejagnu head lines) from i386.\n\n2019-07-22  Paul A. Clarke  <pc@us.ibm.com>\n\n[gcc]\n\n\t* config/rs6000/smmintrin.h (_mm_blend_epi16): New.\n\t(_mm_blendv_epi8): New.\n\n[gcc/testsuite]\n\n\t* gcc.target/powerpc/sse4_1-check.h: New.\n\t* gcc.target/powerpc/sse4_1-pblendvb.c: New.\n\t* gcc.target/powerpc/sse4_1-pblendw.c: New.\n\t* gcc.target/powerpc/sse4_1-pblendw-2.c: New.\n\nFrom-SVN: r273698", "tree": {"sha": "1132cd2280240154c5c5049c81d2045572488933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1132cd2280240154c5c5049c81d2045572488933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c4547f16138b69f955fdc24c9523e7f8d28aa15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4547f16138b69f955fdc24c9523e7f8d28aa15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4547f16138b69f955fdc24c9523e7f8d28aa15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4547f16138b69f955fdc24c9523e7f8d28aa15/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46ebb491f19cfdb9c8953afc0f30c6417555a2c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ebb491f19cfdb9c8953afc0f30c6417555a2c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ebb491f19cfdb9c8953afc0f30c6417555a2c1"}], "stats": {"total": 299, "additions": 299, "deletions": 0}, "files": [{"sha": "eb786a072ecfdc6ac3a298ba1b01a5ee81e312b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c4547f16138b69f955fdc24c9523e7f8d28aa15", "patch": "@@ -1,3 +1,8 @@\n+2019-07-22  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_blend_epi16): New.\n+\t(_mm_blendv_epi8): New.\n+\n 2019-07-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91221"}, {"sha": "5ef0822febcfefc91fa925c5703554185bc7309f", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=1c4547f16138b69f955fdc24c9523e7f8d28aa15", "patch": "@@ -66,4 +66,24 @@ _mm_extract_ps (__m128 __X, const int __N)\n   return ((__v4si)__X)[__N & 3];\n }\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_blend_epi16 (__m128i __A, __m128i __B, const int __imm8)\n+{\n+  __v16qi __charmask = vec_splats ((signed char) __imm8);\n+  __charmask = vec_gb (__charmask);\n+  __v8hu __shortmask = (__v8hu) vec_unpackh (__charmask);\n+  #ifdef __BIG_ENDIAN__\n+  __shortmask = vec_reve (__shortmask);\n+  #endif\n+  return (__m128i) vec_sel ((__v8hu) __A, (__v8hu) __B, __shortmask);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_blendv_epi8 (__m128i __A, __m128i __B, __m128i __mask)\n+{\n+  const __v16qu __seven = vec_splats ((unsigned char) 0x07);\n+  __v16qu __lmask = vec_sra ((__v16qu) __mask, __seven);\n+  return (__m128i) vec_sel ((__v16qu) __A, (__v16qu) __B, __lmask);\n+}\n+\n #endif"}, {"sha": "d005ca6f750860703b068ef09bf309c58b1ab92f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c4547f16138b69f955fdc24c9523e7f8d28aa15", "patch": "@@ -1,3 +1,10 @@\n+2019-07-22  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-check.h: New.\n+\t* gcc.target/powerpc/sse4_1-pblendvb.c: New.\n+\t* gcc.target/powerpc/sse4_1-pblendw.c: New.\n+\t* gcc.target/powerpc/sse4_1-pblendw-2.c: New.\n+\n 2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/fixedpnt6.adb: New testcase."}, {"sha": "5f855b9fd53ad14db3db9485044008e75b90f86b", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-check.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-check.h?ref=1c4547f16138b69f955fdc24c9523e7f8d28aa15", "patch": "@@ -0,0 +1,27 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"m128-check.h\"\n+\n+//#define DEBUG 1\n+\n+#define TEST sse4_1_test\n+\n+static void sse4_1_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse4_1_test ();\n+}\n+\n+int\n+main ()\n+{\n+  do_test ();\n+#ifdef DEBUG\n+  printf (\"PASSED\\n\");\n+#endif\n+  return 0;\n+}"}, {"sha": "6aa77fea1ae2e85339dafa0ac7d423f4dd8a10ff", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pblendvb.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendvb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendvb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendvb.c?ref=1c4547f16138b69f955fdc24c9523e7f8d28aa15", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_pblendvb (unsigned char *src1, unsigned char *src2,\n+\t       unsigned char *mask)\n+{\n+  int i, sign = 1; \n+\n+  for (i = 0; i < NUM * 16; i++)\n+    {\n+      src1[i] = i* i * sign;\n+      src2[i] = (i + 20) * sign;\n+      mask[i] = (i % 3) + ((i * (14 + sign))\n+\t\t\t   ^ (src1[i] | src2[i] | (i*3)));\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_pblendvb (__m128i *dst, unsigned char *src1,\n+\t\tunsigned char *src2, unsigned char *mask)\n+{\n+  unsigned char tmp[16];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 16; j++)\n+    if (mask [j] & 0x80)\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM];\n+      unsigned char c[NUM * 16];\n+    } dst, src1, src2, mask;\n+  int i;\n+\n+  init_pblendvb (src1.c, src2.c, mask.c);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blendv_epi8 (src1.x[i], src2.x[i], mask.x[i]);\n+      if (check_pblendvb (&dst.x[i], &src1.c[i * 16], &src2.c[i * 16],\n+\t\t\t  &mask.c[i * 16]))\n+\tabort ();\n+    }\n+}"}, {"sha": "d3f96e823c0f0fa44843004dbcde734ace4bdbd8", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pblendw-2.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendw-2.c?ref=1c4547f16138b69f955fdc24c9523e7f8d28aa15", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#undef MASK\n+#define MASK 0xfe\n+\n+static void\n+init_pblendw (short *src1, short *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 8; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_pblendw (__m128i *dst, short *src1, short *src2)\n+{\n+  short tmp[8];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 8; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  __m128i x, y;\n+  union\n+    {\n+      __m128i x[NUM];\n+      short s[NUM * 8];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128i x;\n+      short s[8];\n+    } src3;\n+  int i;\n+\n+  init_pblendw (src1.s, src2.s);\n+\n+  /* Check pblendw imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_epi16 (src1.x[i], src2.x[i], MASK); \n+      if (check_pblendw (&dst.x[i], &src1.s[i * 8], &src2.s[i * 8]))\n+\tabort ();\n+    }\n+    \n+   /* Check pblendw imm8, xmm, xmm */\n+  src3.x = _mm_setzero_si128 ();\n+\n+  x = _mm_blend_epi16 (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_epi16 (src3.x, dst.x[2], MASK);\n+\n+  if (check_pblendw (&x, &dst.s[16], &src3.s[0]))\n+    abort ();\n+\n+  if (check_pblendw (&y, &src3.s[0], &dst.s[16]))\n+    abort ();\n+}"}, {"sha": "1c48c7621bab7148d0d89d8b227a192a390b4676", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pblendw.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4547f16138b69f955fdc24c9523e7f8d28aa15/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pblendw.c?ref=1c4547f16138b69f955fdc24c9523e7f8d28aa15", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#ifndef MASK\n+#define MASK 0x0f\n+#endif\n+\n+static void\n+init_pblendw (short *src1, short *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 8; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_pblendw (__m128i *dst, short *src1, short *src2)\n+{\n+  short tmp[8];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 8; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m128i x, y;\n+  union\n+    {\n+      __m128i x[NUM];\n+      short s[NUM * 8];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128i x;\n+      short s[8];\n+    } src3;\n+  int i;\n+\n+  init_pblendw (src1.s, src2.s);\n+\n+  /* Check pblendw imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_epi16 (src1.x[i], src2.x[i], MASK); \n+      if (check_pblendw (&dst.x[i], &src1.s[i * 8], &src2.s[i * 8]))\n+\tabort ();\n+    }\n+    \n+   /* Check pblendw imm8, xmm, xmm */\n+  src3.x = _mm_setzero_si128 ();\n+\n+  x = _mm_blend_epi16 (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_epi16 (src3.x, dst.x[2], MASK);\n+\n+  if (check_pblendw (&x, &dst.s[16], &src3.s[0]))\n+    abort ();\n+\n+  if (check_pblendw (&y, &src3.s[0], &dst.s[16]))\n+    abort ();\n+}"}]}