{"sha": "fccaf220f3c01660f800b6ea055463823051904c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNjYWYyMjBmM2MwMTY2MGY4MDBiNmVhMDU1NDYzODIzMDUxOTA0Yw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2014-07-30T13:50:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T13:50:25Z"}, "message": "s-taasde.adb (Timer_Queue): Don't use a build-in-place function call to initialize the Timer_Queue.\n\n2014-07-30  Bob Duff  <duff@adacore.com>\n\n\t* s-taasde.adb (Timer_Queue): Don't use a\n\tbuild-in-place function call to initialize the Timer_Queue.\n\t* s-traent.adb, s-traent.ads, s-traent-vms.adb, s-traent-vms.ads:\n\tTurn off polling in these units, because otherwise we get\n\telaboration circularities with Ada.Exceptions when the -gnatP\n\tswitch is used.\n\t* s-tassta.adb (Create_Task): Make sure independent tasks\n\tare created with Parent = Environment_Task. This was not true,\n\tfor example, in s-interr.adb, when Interrupt_Manager does \"new\n\tServer_Task\"; the Server_Task had Parent = Interrupt_Manager,\n\twhich is wrong because the master is determined by the access\n\ttype, which is at library level.\n\t* s-tasuti.adb (Make_Independent): Avoid setting Parent; it is\n\tnow set correctly by Create_Task.\n\t(Make_Passive): Remove the workaround for the race condition in\n\tMake_Independent.\n\t* frontend.adb (Frontend): Revert to previous method of detecting\n\ttemporary configuration pragma files, recognizing such files by\n\t\".tmp\" in the name. This is more general than detecting pragmas\n\tSource_File_Name_Project, because it allows any tool to use\n\tthis naming convention, no matter the content of the file.\n\t* gnat_ugn.texi: Document this naming convention.\n\nFrom-SVN: r213269", "tree": {"sha": "daa3a77afe6501626afff4912a34ea91ed0172a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa3a77afe6501626afff4912a34ea91ed0172a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fccaf220f3c01660f800b6ea055463823051904c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccaf220f3c01660f800b6ea055463823051904c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccaf220f3c01660f800b6ea055463823051904c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccaf220f3c01660f800b6ea055463823051904c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3aac5551307840a5063d13759922cf334db2caeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aac5551307840a5063d13759922cf334db2caeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aac5551307840a5063d13759922cf334db2caeb"}], "stats": {"total": 225, "additions": 104, "deletions": 121}, "files": [{"sha": "073f8c05b76ee20ab07bf6ff6cff881b900790fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -1,3 +1,28 @@\n+2014-07-30  Bob Duff  <duff@adacore.com>\n+\n+\t* s-taasde.adb (Timer_Queue): Don't use a\n+\tbuild-in-place function call to initialize the Timer_Queue.\n+\t* s-traent.adb, s-traent.ads, s-traent-vms.adb, s-traent-vms.ads:\n+\tTurn off polling in these units, because otherwise we get\n+\telaboration circularities with Ada.Exceptions when the -gnatP\n+\tswitch is used.\n+\t* s-tassta.adb (Create_Task): Make sure independent tasks\n+\tare created with Parent = Environment_Task. This was not true,\n+\tfor example, in s-interr.adb, when Interrupt_Manager does \"new\n+\tServer_Task\"; the Server_Task had Parent = Interrupt_Manager,\n+\twhich is wrong because the master is determined by the access\n+\ttype, which is at library level.\n+\t* s-tasuti.adb (Make_Independent): Avoid setting Parent; it is\n+\tnow set correctly by Create_Task.\n+\t(Make_Passive): Remove the workaround for the race condition in\n+\tMake_Independent.\n+\t* frontend.adb (Frontend): Revert to previous method of detecting\n+\ttemporary configuration pragma files, recognizing such files by\n+\t\".tmp\" in the name. This is more general than detecting pragmas\n+\tSource_File_Name_Project, because it allows any tool to use\n+\tthis naming convention, no matter the content of the file.\n+\t* gnat_ugn.texi: Document this naming convention.\n+\n 2014-07-30  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.adb, s-tataat.adb, s-tataat.ads, s-parame-vms-alpha.ads,"}, {"sha": "688f8cce083d3eacd01d0939b28d316afd91dbfa", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 20, "deletions": 57, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -71,42 +71,6 @@ procedure Frontend is\n    Config_Pragmas : List_Id;\n    --  Gather configuration pragmas\n \n-   function Need_To_Be_In_The_Dependencies\n-     (Pragma_List : List_Id) return Boolean;\n-   --  Check if a configuration pragmas file that contains the Pragma_List\n-   --  should be a dependency for the source being compiled. Returns\n-   --  False if Pragma_List is Error_List or contains only pragmas\n-   --  Source_File_Name_Project, returns True otherwise.\n-\n-   ------------------------------------\n-   -- Need_To_Be_In_The_Dependencies --\n-   ------------------------------------\n-\n-   function Need_To_Be_In_The_Dependencies\n-     (Pragma_List : List_Id) return Boolean\n-   is\n-      Prag  : Node_Id;\n-      Pname : Name_Id;\n-\n-   begin\n-      if Pragma_List /= Error_List then\n-         Prag := First (Pragma_List);\n-         while Present (Prag) loop\n-            Pname := Pragma_Name (Prag);\n-\n-            if Pname /= Name_Source_File_Name_Project then\n-               return True;\n-            end if;\n-\n-            Next (Prag);\n-         end loop;\n-      end if;\n-\n-      return False;\n-   end Need_To_Be_In_The_Dependencies;\n-\n---  Start of processing for Frontend\n-\n begin\n    --  Carry out package initializations. These are initializations which might\n    --  logically be performed at elaboration time, were it not for the fact\n@@ -180,6 +144,8 @@ begin\n \n       Prag : Node_Id;\n \n+      Temp_File : Boolean;\n+\n    begin\n       --  We always analyze config files with style checks off, since\n       --  we don't want a miscellaneous gnat.adc that is around to\n@@ -253,6 +219,13 @@ begin\n \n             Name_Len := Config_File_Names (Index)'Length;\n             Name_Buffer (1 .. Name_Len) := Config_File_Names (Index).all;\n+            Temp_File :=\n+              Name_Len > 4\n+                and then\n+                  (Name_Buffer (Name_Len - 3 .. Name_Len) = \".TMP\"\n+                     or else\n+                   Name_Buffer (Name_Len - 3 .. Name_Len) = \".tmp\");\n+\n             --  Load the file, error if we did not find it\n \n             Source_Config_File := Load_Config_File (Name_Enter);\n@@ -262,30 +235,20 @@ begin\n                  (\"cannot find configuration pragmas file \"\n                   & Config_File_Names (Index).all);\n \n-            --  If we did find the file, and it contains pragmas other than\n-            --  Source_File_Name_Project, then we unconditionally add a\n-            --  compilation dependency for it so that if it changes, we force\n-            --  a recompilation. This is a fairly recent (2014-03-28) change.\n-\n-            else\n-\n-               --  Parse the config pragmas file, and accumulate results\n-\n-               Initialize_Scanner (No_Unit, Source_Config_File);\n-\n-               declare\n-                  Pragma_List : constant List_Id :=\n-                                  Par (Configuration_Pragmas => True);\n-\n-               begin\n-                  if Need_To_Be_In_The_Dependencies (Pragma_List) then\n-                     Prepcomp.Add_Dependency (Source_Config_File);\n-                  end if;\n+            --  If we did find the file, and it is not a temporary file, then\n+            --  we unconditionally add a compilation dependency for it so\n+            --  that if it changes, we force a recompilation. This is a\n+            --  fairly recent (2014-03-28) change.\n \n-                  Append_List_To (Config_Pragmas, Pragma_List);\n-               end;\n+            elsif not Temp_File then\n+               Prepcomp.Add_Dependency (Source_Config_File);\n             end if;\n \n+            --  Parse the config pragmas file, and accumulate results\n+\n+            Initialize_Scanner (No_Unit, Source_Config_File);\n+            Append_List_To\n+              (Config_Pragmas, Par (Configuration_Pragmas => True));\n          end loop;\n       end if;\n "}, {"sha": "3ed4f15ee2d706b801b7f60b5d093a1276288b1b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -12339,8 +12339,13 @@ It is allowable to specify several switches @option{-gnatec=}, all of which\n will be taken into account.\n \n Files containing configuration pragmas specified with switches\n-@option{-gnatec=} are added to the dependencies, unless they contain\n-only pragmas Source_File_Name_Project.\n+@option{-gnatec=} are added to the dependencies, unless they are\n+temporary files. A file is considered temporary if its name ends in\n+@file{.tmp} or @file{.TMP}. Certain tools follow this naming\n+convention because they pass information to @command{gcc} via\n+temporary files that are immediately deleted; it doesn't make sense to\n+depend on a file that no longer exists. Such tools include\n+@command{gprbuild}, @command{gnatmake}, and @command{gnatcheck}.\n \n If you are using project file, a separate mechanism is provided using\n project attributes, see @ref{Specifying Configuration Pragmas} for more"}, {"sha": "37b94305de60f33d45257011eee2401919d1985c", "filename": "gcc/ada/s-taasde.adb", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -75,19 +75,22 @@ package body System.Tasking.Async_Delays is\n    --  time, so that the ordered insertion will always stop searching when it\n    --  gets back to the queue header block.\n \n-   function Empty_Queue return Delay_Block;\n-   --  Initial value for Timer_Queue\n+   Timer_Queue : aliased Delay_Block;\n \n-   function Empty_Queue return Delay_Block is\n+   package Init_Timer_Queue is end Init_Timer_Queue;\n+   pragma Unreferenced (Init_Timer_Queue);\n+   --  Initialize the Timer_Queue. This is a package to work around the\n+   --  fact that statements are syntactically illegal here. We want this\n+   --  initialization to happen before the Timer_Server is activated. A\n+   --  build-in-place function would also work, but that's not supported\n+   --  on all platforms (e.g. cil).\n+\n+   package body Init_Timer_Queue is\n    begin\n-      return Result : aliased Delay_Block do\n-         Result.Succ := Result'Unchecked_Access;\n-         Result.Pred := Result'Unchecked_Access;\n-         Result.Resume_Time := Duration'Last;\n-      end return;\n-   end Empty_Queue;\n-\n-   Timer_Queue : aliased Delay_Block := Empty_Queue;\n+      Timer_Queue.Succ := Timer_Queue'Unchecked_Access;\n+      Timer_Queue.Pred := Timer_Queue'Unchecked_Access;\n+      Timer_Queue.Resume_Time := Duration'Last;\n+   end Init_Timer_Queue;\n \n    ------------------------\n    -- Cancel_Async_Delay --"}, {"sha": "a2ff687e63a5ee6754a8d714cc1d26e584d59706", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -557,14 +557,20 @@ package body System.Tasking.Stages is\n             else System.Multiprocessors.CPU_Range (CPU));\n       end if;\n \n-      --  Find parent P of new Task, via master level number\n+      --  Find parent P of new Task, via master level number. Independent tasks\n+      --  should have Parent = Environment_Task, and all tasks created\n+      --  by independent tasks are also independent. See, for example,\n+      --  s-interr.adb, where Interrupt_Manager does \"new Server_Task\". The\n+      --  access type is at library level, so the parent of the Server_Task\n+      --  is Environment_Task.\n \n       P := Self_ID;\n \n-      if P /= null then\n-         while P.Master_of_Task >= Master loop\n+      if P.Master_of_Task <= Independent_Task_Level then\n+         P := Environment_Task;\n+      else\n+         while P /= null and then P.Master_of_Task >= Master loop\n             P := P.Common.Parent;\n-            exit when P = null;\n          end loop;\n       end if;\n "}, {"sha": "40446fc1e655747ce55f19de0d319c813e3db807", "filename": "gcc/ada/s-tasuti.adb", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.adb?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -246,8 +246,6 @@ package body System.Tasking.Utilities is\n       Self_Id               : constant Task_Id := STPO.Self;\n       Environment_Task      : constant Task_Id := STPO.Environment_Task;\n       Parent                : constant Task_Id := Self_Id.Common.Parent;\n-      Parent_Needs_Updating : Boolean := False;\n-      Master_of_Task        : Integer;\n \n    begin\n       if Self_Id.Known_Tasks_Index /= -1 then\n@@ -263,56 +261,25 @@ package body System.Tasking.Utilities is\n       Write_Lock (Environment_Task);\n       Write_Lock (Self_Id);\n \n-      pragma Assert (Parent = Environment_Task\n-        or else Self_Id.Master_of_Task = Library_Task_Level);\n-\n-      Master_of_Task := Self_Id.Master_of_Task;\n-      Self_Id.Master_of_Task := Independent_Task_Level;\n-\n       --  The run time assumes that the parent of an independent task is the\n       --  environment task.\n \n-      if Parent /= Environment_Task then\n-\n-         --  We cannot lock three tasks at the same time, so defer the\n-         --  operations on the parent.\n+      pragma Assert (Parent = Environment_Task);\n \n-         Parent_Needs_Updating := True;\n-         Self_Id.Common.Parent := Environment_Task;\n-      end if;\n+      Self_Id.Master_of_Task := Independent_Task_Level;\n \n       --  Update Independent_Task_Count that is needed for the GLADE\n       --  termination rule. See also pending update in\n       --  System.Tasking.Stages.Check_Independent\n \n       Independent_Task_Count := Independent_Task_Count + 1;\n \n-      Unlock (Self_Id);\n+      --  This should be called before the task reaches its \"begin\" (see spec),\n+      --  which ensures that the environment task cannot race ahead and be\n+      --  already waiting for children to complete.\n \n-      --  Changing the parent after creation is not trivial. Do not forget\n-      --  to update the old parent counts, and the new parent (i.e. the\n-      --  Environment_Task) counts.\n-\n-      if Parent_Needs_Updating then\n-         Write_Lock (Parent);\n-         Parent.Awake_Count := Parent.Awake_Count - 1;\n-         Parent.Alive_Count := Parent.Alive_Count - 1;\n-         Environment_Task.Awake_Count := Environment_Task.Awake_Count + 1;\n-         Environment_Task.Alive_Count := Environment_Task.Alive_Count + 1;\n-         Unlock (Parent);\n-      end if;\n-\n-      --  In case the environment task is already waiting for children to\n-      --  complete.\n-      --  ??? There may be a race condition if the environment task was not in\n-      --  master completion sleep when this task was created, but now is\n-\n-      if Environment_Task.Common.State = Master_Completion_Sleep and then\n-        Master_of_Task = Environment_Task.Master_Within\n-      then\n-         Environment_Task.Common.Wait_Count :=\n-           Environment_Task.Common.Wait_Count - 1;\n-      end if;\n+      Unlock (Self_Id);\n+      pragma Assert (Environment_Task.Common.State /= Master_Completion_Sleep);\n \n       Unlock (Environment_Task);\n \n@@ -511,12 +478,10 @@ package body System.Tasking.Utilities is\n \n          --  If parent is in Master_Completion_Sleep, it cannot be on a\n          --  terminate alternative, hence it cannot have Wait_Count of\n-         --  zero. ???Except that the race condition in Make_Independent can\n-         --  cause Wait_Count to be zero, so we need to check for that.\n+         --  zero.\n \n-         if P.Common.Wait_Count > 0 then\n-            P.Common.Wait_Count := P.Common.Wait_Count - 1;\n-         end if;\n+         pragma Assert (P.Common.Wait_Count > 0);\n+         P.Common.Wait_Count := P.Common.Wait_Count - 1;\n \n          if P.Common.Wait_Count = 0 then\n             Wakeup (P, Master_Completion_Sleep);"}, {"sha": "51f0e682a786f1d3b529ef02d977f2d33a11bfc6", "filename": "gcc/ada/s-traent-vms.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent-vms.adb?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,6 +29,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+pragma Polling (Off);\n+--  We must turn polling off for this unit, because otherwise we get\n+--  elaboration circularities with Ada.Exceptions.\n+\n package body System.Traceback_Entries is\n \n    ------------"}, {"sha": "db327df4618e9a35369c7c68d039b4ef05a2ab6f", "filename": "gcc/ada/s-traent-vms.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent-vms.ads?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -35,6 +35,10 @@\n \n --  This is the Alpha/OpenVMS version of this package\n \n+pragma Polling (Off);\n+--  We must turn polling off for this unit, because otherwise we get\n+--  elaboration circularities with Ada.Exceptions.\n+\n package System.Traceback_Entries is\n    pragma Preelaborate;\n "}, {"sha": "48abe8a11939533b23007410eafd531eac8292a7", "filename": "gcc/ada/s-traent.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent.adb?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,6 +29,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+pragma Polling (Off);\n+--  We must turn polling off for this unit, because otherwise we get\n+--  elaboration circularities with Ada.Exceptions.\n+\n pragma Compiler_Unit_Warning;\n \n package body System.Traceback_Entries is"}, {"sha": "4d834261d8b204113c576df377af7c87d03036c9", "filename": "gcc/ada/s-traent.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fs-traent.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent.ads?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -38,6 +38,10 @@\n --  version of the package, an entry is a mere code location representing the\n --  address of a call instruction part of the call-chain.\n \n+pragma Polling (Off);\n+--  We must turn polling off for this unit, because otherwise we get\n+--  elaboration circularities with Ada.Exceptions.\n+\n pragma Compiler_Unit_Warning;\n \n package System.Traceback_Entries is"}]}