{"sha": "dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "node_id": "C_kwDOANBUbNoAKGRmZmIxYWRhYmQzODUzYThkMTEwMGU1M2Q1ZmEzNTFmOGI1ZjE4MGM", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2022-01-15T21:43:08Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2022-02-25T19:37:37Z"}, "message": "HIR Visitor refactoring\n\nThis change split the single HIR visitor in smaller abstract ones:\n- Stmt\n- VisItem\n- Pattern\n- ExternalItem\n- Impl\n- Type\n- Expression\n\nInstead of providing a Base class with empty visit() methods, they are kept\nabstract to avoid the case where a missing visit() is silently ignored:\nimplementors must explicitely override all visit.\n\nThere is also a FullVisitor that covers all HIR nodes and also provides a Base\nclass with empty behavior.\n\nfixes #825\n\nSigned-off-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "1daec8a8d99f4936805928920132a2b4be794c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1daec8a8d99f4936805928920132a2b4be794c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b695eb8f0bae01e00dfb9e9bf2554d1b48b76a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b695eb8f0bae01e00dfb9e9bf2554d1b48b76a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b695eb8f0bae01e00dfb9e9bf2554d1b48b76a9a"}], "stats": {"total": 1579, "additions": 1485, "deletions": 94}, "files": [{"sha": "b43416803fa06efe9ebaf012b664306be15a5bb6", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -1,3 +1,5 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n // This file is part of GCC.\n \n // GCC is free software; you can redistribute it and/or modify it under\n@@ -25,7 +27,7 @@\n namespace Rust {\n namespace Compile {\n \n-class HIRCompileBase : public HIR::HIRFullVisitorBase\n+class HIRCompileBase\n {\n public:\n   virtual ~HIRCompileBase () {}"}, {"sha": "4a3c6f52c3d8d600bf0a18571d155e79b9bd44d2", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 169, "deletions": 11, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -25,10 +25,8 @@\n namespace Rust {\n namespace Compile {\n \n-class CompileBlock : public HIRCompileBase\n+class CompileBlock : public HIRCompileBase, public HIR::HIRExpressionVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree compile (HIR::BlockExpr *expr, Context *ctx, Bvariable *result)\n   {\n@@ -39,6 +37,62 @@ class CompileBlock : public HIRCompileBase\n \n   void visit (HIR::BlockExpr &expr) override;\n \n+  // Empty visit for unused Expression HIR nodes.\n+  void visit (HIR::PathInExpression &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::ClosureExprInner &) override {}\n+  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::StructExprFieldIdentifier &) override {}\n+  void visit (HIR::StructExprFieldIdentifierValue &) override {}\n+  void visit (HIR::StructExprFieldIndexValue &) override {}\n+  void visit (HIR::StructExprStruct &) override {}\n+  void visit (HIR::StructExprStructFields &) override {}\n+  void visit (HIR::IdentifierExpr &) override {}\n+  void visit (HIR::LiteralExpr &) override {}\n+  void visit (HIR::BorrowExpr &) override {}\n+  void visit (HIR::DereferenceExpr &) override {}\n+  void visit (HIR::ErrorPropagationExpr &) override {}\n+  void visit (HIR::NegationExpr &) override {}\n+  void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n+  void visit (HIR::ComparisonExpr &) override {}\n+  void visit (HIR::LazyBooleanExpr &) override {}\n+  void visit (HIR::TypeCastExpr &) override {}\n+  void visit (HIR::AssignmentExpr &) override {}\n+  void visit (HIR::CompoundAssignmentExpr &) override {}\n+  void visit (HIR::GroupedExpr &) override {}\n+  void visit (HIR::ArrayExpr &) override {}\n+  void visit (HIR::ArrayIndexExpr &) override {}\n+  void visit (HIR::TupleExpr &) override {}\n+  void visit (HIR::TupleIndexExpr &) override {}\n+  void visit (HIR::CallExpr &) override {}\n+  void visit (HIR::MethodCallExpr &) override {}\n+  void visit (HIR::FieldAccessExpr &) override {}\n+  void visit (HIR::ContinueExpr &) override {}\n+  void visit (HIR::BreakExpr &) override {}\n+  void visit (HIR::RangeFromToExpr &) override {}\n+  void visit (HIR::RangeFromExpr &) override {}\n+  void visit (HIR::RangeToExpr &) override {}\n+  void visit (HIR::RangeFullExpr &) override {}\n+  void visit (HIR::RangeFromToInclExpr &) override {}\n+  void visit (HIR::RangeToInclExpr &) override {}\n+  void visit (HIR::ReturnExpr &) override {}\n+  void visit (HIR::UnsafeBlockExpr &) override {}\n+  void visit (HIR::LoopExpr &) override {}\n+  void visit (HIR::WhileLoopExpr &) override {}\n+  void visit (HIR::WhileLetLoopExpr &) override {}\n+  void visit (HIR::ForLoopExpr &) override {}\n+  void visit (HIR::IfExpr &) override {}\n+  void visit (HIR::IfExprConseqElse &) override {}\n+  void visit (HIR::IfExprConseqIf &) override {}\n+  void visit (HIR::IfExprConseqIfLet &) override {}\n+  void visit (HIR::IfLetExpr &) override {}\n+  void visit (HIR::IfLetExprConseqElse &) override {}\n+  void visit (HIR::IfLetExprConseqIf &) override {}\n+  void visit (HIR::IfLetExprConseqIfLet &) override {}\n+  void visit (HIR::MatchExpr &) override {}\n+  void visit (HIR::AwaitExpr &) override {}\n+  void visit (HIR::AsyncBlockExpr &) override {}\n+\n private:\n   CompileBlock (Context *ctx, Bvariable *result)\n     : HIRCompileBase (ctx), translated (nullptr), result (result)\n@@ -48,10 +102,9 @@ class CompileBlock : public HIRCompileBase\n   Bvariable *result;\n };\n \n-class CompileConditionalBlocks : public HIRCompileBase\n+class CompileConditionalBlocks : public HIRCompileBase,\n+\t\t\t\t public HIR::HIRExpressionVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree compile (HIR::IfExpr *expr, Context *ctx, Bvariable *result)\n   {\n@@ -61,11 +114,63 @@ class CompileConditionalBlocks : public HIRCompileBase\n   }\n \n   void visit (HIR::IfExpr &expr) override;\n-\n   void visit (HIR::IfExprConseqElse &expr) override;\n-\n   void visit (HIR::IfExprConseqIf &expr) override;\n \n+  // Empty visit for unused Expression HIR nodes.\n+  void visit (HIR::PathInExpression &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::ClosureExprInner &) override {}\n+  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::StructExprFieldIdentifier &) override {}\n+  void visit (HIR::StructExprFieldIdentifierValue &) override {}\n+  void visit (HIR::StructExprFieldIndexValue &) override {}\n+  void visit (HIR::StructExprStruct &) override {}\n+  void visit (HIR::StructExprStructFields &) override {}\n+  void visit (HIR::IdentifierExpr &) override {}\n+  void visit (HIR::LiteralExpr &) override {}\n+  void visit (HIR::BorrowExpr &) override {}\n+  void visit (HIR::DereferenceExpr &) override {}\n+  void visit (HIR::ErrorPropagationExpr &) override {}\n+  void visit (HIR::NegationExpr &) override {}\n+  void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n+  void visit (HIR::ComparisonExpr &) override {}\n+  void visit (HIR::LazyBooleanExpr &) override {}\n+  void visit (HIR::TypeCastExpr &) override {}\n+  void visit (HIR::AssignmentExpr &) override {}\n+  void visit (HIR::CompoundAssignmentExpr &) override {}\n+  void visit (HIR::GroupedExpr &) override {}\n+  void visit (HIR::ArrayExpr &) override {}\n+  void visit (HIR::ArrayIndexExpr &) override {}\n+  void visit (HIR::TupleExpr &) override {}\n+  void visit (HIR::TupleIndexExpr &) override {}\n+  void visit (HIR::CallExpr &) override {}\n+  void visit (HIR::MethodCallExpr &) override {}\n+  void visit (HIR::FieldAccessExpr &) override {}\n+  void visit (HIR::BlockExpr &) override {}\n+  void visit (HIR::ContinueExpr &) override {}\n+  void visit (HIR::BreakExpr &) override {}\n+  void visit (HIR::RangeFromToExpr &) override {}\n+  void visit (HIR::RangeFromExpr &) override {}\n+  void visit (HIR::RangeToExpr &) override {}\n+  void visit (HIR::RangeFullExpr &) override {}\n+  void visit (HIR::RangeFromToInclExpr &) override {}\n+  void visit (HIR::RangeToInclExpr &) override {}\n+  void visit (HIR::ReturnExpr &) override {}\n+  void visit (HIR::UnsafeBlockExpr &) override {}\n+  void visit (HIR::LoopExpr &) override {}\n+  void visit (HIR::WhileLoopExpr &) override {}\n+  void visit (HIR::WhileLetLoopExpr &) override {}\n+  void visit (HIR::ForLoopExpr &) override {}\n+  void visit (HIR::IfExprConseqIfLet &) override {}\n+  void visit (HIR::IfLetExpr &) override {}\n+  void visit (HIR::IfLetExprConseqElse &) override {}\n+  void visit (HIR::IfLetExprConseqIf &) override {}\n+  void visit (HIR::IfLetExprConseqIfLet &) override {}\n+  void visit (HIR::MatchExpr &) override {}\n+  void visit (HIR::AwaitExpr &) override {}\n+  void visit (HIR::AsyncBlockExpr &) override {}\n+\n private:\n   CompileConditionalBlocks (Context *ctx, Bvariable *result)\n     : HIRCompileBase (ctx), translated (nullptr), result (result)\n@@ -75,10 +180,9 @@ class CompileConditionalBlocks : public HIRCompileBase\n   Bvariable *result;\n };\n \n-class CompileExprWithBlock : public HIRCompileBase\n+class CompileExprWithBlock : public HIRCompileBase,\n+\t\t\t     public HIR::HIRExpressionVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree compile (HIR::ExprWithBlock *expr, Context *ctx,\n \t\t       Bvariable *result)\n@@ -103,6 +207,60 @@ class CompileExprWithBlock : public HIRCompileBase\n     translated = CompileConditionalBlocks::compile (&expr, ctx, result);\n   }\n \n+  // Empty visit for unused Expression HIR nodes.\n+  void visit (HIR::PathInExpression &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::ClosureExprInner &) override {}\n+  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::StructExprFieldIdentifier &) override {}\n+  void visit (HIR::StructExprFieldIdentifierValue &) override {}\n+  void visit (HIR::StructExprFieldIndexValue &) override {}\n+  void visit (HIR::StructExprStruct &) override {}\n+  void visit (HIR::StructExprStructFields &) override {}\n+  void visit (HIR::IdentifierExpr &) override {}\n+  void visit (HIR::LiteralExpr &) override {}\n+  void visit (HIR::BorrowExpr &) override {}\n+  void visit (HIR::DereferenceExpr &) override {}\n+  void visit (HIR::ErrorPropagationExpr &) override {}\n+  void visit (HIR::NegationExpr &) override {}\n+  void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n+  void visit (HIR::ComparisonExpr &) override {}\n+  void visit (HIR::LazyBooleanExpr &) override {}\n+  void visit (HIR::TypeCastExpr &) override {}\n+  void visit (HIR::AssignmentExpr &) override {}\n+  void visit (HIR::CompoundAssignmentExpr &) override {}\n+  void visit (HIR::GroupedExpr &) override {}\n+  void visit (HIR::ArrayExpr &) override {}\n+  void visit (HIR::ArrayIndexExpr &) override {}\n+  void visit (HIR::TupleExpr &) override {}\n+  void visit (HIR::TupleIndexExpr &) override {}\n+  void visit (HIR::CallExpr &) override {}\n+  void visit (HIR::MethodCallExpr &) override {}\n+  void visit (HIR::FieldAccessExpr &) override {}\n+  void visit (HIR::BlockExpr &) override {}\n+  void visit (HIR::ContinueExpr &) override {}\n+  void visit (HIR::BreakExpr &) override {}\n+  void visit (HIR::RangeFromToExpr &) override {}\n+  void visit (HIR::RangeFromExpr &) override {}\n+  void visit (HIR::RangeToExpr &) override {}\n+  void visit (HIR::RangeFullExpr &) override {}\n+  void visit (HIR::RangeFromToInclExpr &) override {}\n+  void visit (HIR::RangeToInclExpr &) override {}\n+  void visit (HIR::ReturnExpr &) override {}\n+  void visit (HIR::UnsafeBlockExpr &) override {}\n+  void visit (HIR::LoopExpr &) override {}\n+  void visit (HIR::WhileLoopExpr &) override {}\n+  void visit (HIR::WhileLetLoopExpr &) override {}\n+  void visit (HIR::ForLoopExpr &) override {}\n+  void visit (HIR::IfExprConseqIfLet &) override {}\n+  void visit (HIR::IfLetExpr &) override {}\n+  void visit (HIR::IfLetExprConseqElse &) override {}\n+  void visit (HIR::IfLetExprConseqIf &) override {}\n+  void visit (HIR::IfLetExprConseqIfLet &) override {}\n+  void visit (HIR::MatchExpr &) override {}\n+  void visit (HIR::AwaitExpr &) override {}\n+  void visit (HIR::AsyncBlockExpr &) override {}\n+\n private:\n   CompileExprWithBlock (Context *ctx, Bvariable *result)\n     : HIRCompileBase (ctx), translated (nullptr), result (result)"}, {"sha": "3cc51d465cfaefeb0953e45a72de1e0f4469c3cc", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -29,10 +29,8 @@\n namespace Rust {\n namespace Compile {\n \n-class CompileExpr : public HIRCompileBase\n+class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree Compile (HIR::Expr *expr, Context *ctx)\n   {\n@@ -769,9 +767,7 @@ class CompileExpr : public HIRCompileBase\n   }\n \n   void visit (HIR::BorrowExpr &expr) override;\n-\n   void visit (HIR::DereferenceExpr &expr) override;\n-\n   void visit (HIR::MatchExpr &expr) override;\n \n   void visit (HIR::RangeFromToExpr &expr) override;\n@@ -784,6 +780,24 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::RangeFromToInclExpr &expr) override;\n \n+  // Empty visit for unused Expression HIR nodes.\n+  void visit (HIR::ClosureExprInner &) override {}\n+  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::StructExprFieldIdentifier &) override {}\n+  void visit (HIR::StructExprFieldIdentifierValue &) override {}\n+  void visit (HIR::StructExprFieldIndexValue &) override {}\n+  void visit (HIR::ErrorPropagationExpr &) override {}\n+  void visit (HIR::RangeToInclExpr &) override {}\n+  void visit (HIR::WhileLetLoopExpr &) override {}\n+  void visit (HIR::ForLoopExpr &) override {}\n+  void visit (HIR::IfExprConseqIfLet &) override {}\n+  void visit (HIR::IfLetExpr &) override {}\n+  void visit (HIR::IfLetExprConseqElse &) override {}\n+  void visit (HIR::IfLetExprConseqIf &) override {}\n+  void visit (HIR::IfLetExprConseqIfLet &) override {}\n+  void visit (HIR::AwaitExpr &) override {}\n+  void visit (HIR::AsyncBlockExpr &) override {}\n+\n protected:\n   tree compile_dyn_dispatch_call (const TyTy::DynamicObjectType *dyn,\n \t\t\t\t  TyTy::BaseType *receiver,"}, {"sha": "1987805146df21b968ccb988d850eaef032c46db", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -25,10 +25,9 @@\n namespace Rust {\n namespace Compile {\n \n-class CompileExternItem : public HIRCompileBase\n+class CompileExternItem : public HIRCompileBase,\n+\t\t\t  public HIR::HIRExternalItemVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static void compile (HIR::ExternalItem *item, Context *ctx,\n \t\t       TyTy::BaseType *concrete = nullptr)"}, {"sha": "74df725f8d75d405dab5769ba7684c0b78263b10", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -24,10 +24,8 @@\n namespace Rust {\n namespace Compile {\n \n-class CompileFnParam : public HIRCompileBase\n+class CompileFnParam : public HIRCompileBase, public HIR::HIRPatternVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static Bvariable *compile (Context *ctx, tree fndecl,\n \t\t\t     HIR::FunctionParam *param, tree decl_type,\n@@ -57,6 +55,18 @@ class CompileFnParam : public HIRCompileBase\n       = ctx->get_backend ()->parameter_variable (fndecl, \"_\", decl_type, locus);\n   }\n \n+  // Empty visit for unused Pattern HIR nodes.\n+  void visit (HIR::GroupedPattern &) override {}\n+  void visit (HIR::LiteralPattern &) override {}\n+  void visit (HIR::PathInExpression &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::RangePattern &) override {}\n+  void visit (HIR::ReferencePattern &) override {}\n+  void visit (HIR::SlicePattern &) override {}\n+  void visit (HIR::StructPattern &) override {}\n+  void visit (HIR::TuplePattern &) override {}\n+  void visit (HIR::TupleStructPattern &) override {}\n+\n private:\n   CompileFnParam (Context *ctx, tree fndecl, tree decl_type, Location locus)\n     : HIRCompileBase (ctx), fndecl (fndecl), decl_type (decl_type),\n@@ -69,7 +79,7 @@ class CompileFnParam : public HIRCompileBase\n   Bvariable *compiled_param;\n };\n \n-class CompileSelfParam : public HIRCompileBase\n+class CompileSelfParam : public HIRCompileBase, public HIR::HIRStmtVisitor\n {\n public:\n   static Bvariable *compile (Context *ctx, tree fndecl, HIR::SelfParam &self,"}, {"sha": "ac9478af150b3aa6571ea6060e9b38c050104d23", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -29,8 +29,6 @@ namespace Compile {\n // this is a proxy for HIR::ImplItem's back to use the normel HIR::Item path\n class CompileInherentImplItem : public CompileItem\n {\n-  using Rust::Compile::CompileItem::visit;\n-\n public:\n   static tree Compile (HIR::ImplItem *item, Context *ctx,\n \t\t       TyTy::BaseType *concrete = nullptr,\n@@ -54,10 +52,8 @@ class CompileInherentImplItem : public CompileItem\n   {}\n };\n \n-class CompileTraitItem : public HIRCompileBase\n+class CompileTraitItem : public HIRCompileBase, public HIR::HIRTraitItemVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree Compile (HIR::TraitItem *item, Context *ctx,\n \t\t       TyTy::BaseType *concrete, bool is_query_mode = false,\n@@ -74,9 +70,10 @@ class CompileTraitItem : public HIRCompileBase\n   }\n \n   void visit (HIR::TraitItemConst &constant) override;\n-\n   void visit (HIR::TraitItemFunc &func) override;\n \n+  void visit (HIR::TraitItemType &typ) override {}\n+\n private:\n   CompileTraitItem (Context *ctx, TyTy::BaseType *concrete, Location ref_locus)\n     : HIRCompileBase (ctx), concrete (concrete), reference (error_mark_node),"}, {"sha": "63316b93dddbc2d88ffc917c79efa2beab7ce3fd", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -24,11 +24,9 @@\n namespace Rust {\n namespace Compile {\n \n-class CompileItem : public HIRCompileBase\n+class CompileItem : public HIRCompileBase, public HIR::HIRStmtVisitor\n {\n protected:\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree compile (HIR::Item *item, Context *ctx,\n \t\t       TyTy::BaseType *concrete = nullptr,\n@@ -46,17 +44,33 @@ class CompileItem : public HIRCompileBase\n   }\n \n   void visit (HIR::StaticItem &var) override;\n-\n   void visit (HIR::ConstantItem &constant) override;\n-\n   void visit (HIR::Function &function) override;\n-\n   void visit (HIR::ImplBlock &impl_block) override;\n-\n   void visit (HIR::ExternBlock &extern_block) override;\n-\n   void visit (HIR::Module &module) override;\n \n+  // Empty visit for unused Stmt HIR nodes.\n+  void visit (HIR::TupleStruct &) override {}\n+  void visit (HIR::EnumItem &) override {}\n+  void visit (HIR::EnumItemTuple &) override {}\n+  void visit (HIR::EnumItemStruct &) override {}\n+  void visit (HIR::EnumItemDiscriminant &) override {}\n+  void visit (HIR::TypePathSegmentFunction &) override {}\n+  void visit (HIR::TypePath &) override {}\n+  void visit (HIR::QualifiedPathInType &) override {}\n+  void visit (HIR::ExternCrate &) override {}\n+  void visit (HIR::UseDeclaration &) override {}\n+  void visit (HIR::TypeAlias &) override {}\n+  void visit (HIR::StructStruct &) override {}\n+  void visit (HIR::Enum &) override {}\n+  void visit (HIR::Union &) override {}\n+  void visit (HIR::Trait &) override {}\n+  void visit (HIR::EmptyStmt &) override {}\n+  void visit (HIR::LetStmt &) override {}\n+  void visit (HIR::ExprStmtWithoutBlock &) override {}\n+  void visit (HIR::ExprStmtWithBlock &) override {}\n+\n protected:\n   CompileItem (Context *ctx, TyTy::BaseType *concrete, Location ref_locus)\n     : HIRCompileBase (ctx), concrete (concrete), reference (error_mark_node),"}, {"sha": "36e4ef3a5ae16ed6b5be2c325767163f9d1386e0", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -21,10 +21,9 @@\n namespace Rust {\n namespace Compile {\n \n-class CompilePatternCaseLabelExpr : public HIRCompileBase\n+class CompilePatternCaseLabelExpr : public HIRCompileBase,\n+\t\t\t\t    public HIR::HIRPatternVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree Compile (HIR::Pattern *pattern, tree associated_case_label,\n \t\t       Context *ctx)\n@@ -35,14 +34,20 @@ class CompilePatternCaseLabelExpr : public HIRCompileBase\n   }\n \n   void visit (HIR::PathInExpression &pattern) override;\n-\n   void visit (HIR::StructPattern &pattern) override;\n-\n   void visit (HIR::TupleStructPattern &pattern) override;\n-\n   void visit (HIR::WildcardPattern &pattern) override;\n \n-private:\n+  // Empty visit for unused Pattern HIR nodes.\n+  void visit (HIR::GroupedPattern &) override {}\n+  void visit (HIR::IdentifierPattern &) override {}\n+  void visit (HIR::LiteralPattern &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::RangePattern &) override {}\n+  void visit (HIR::ReferencePattern &) override {}\n+  void visit (HIR::SlicePattern &) override {}\n+  void visit (HIR::TuplePattern &) override {}\n+\n   CompilePatternCaseLabelExpr (Context *ctx, tree associated_case_label)\n     : HIRCompileBase (ctx), case_label_expr (error_mark_node),\n       associated_case_label (associated_case_label)\n@@ -52,10 +57,9 @@ class CompilePatternCaseLabelExpr : public HIRCompileBase\n   tree associated_case_label;\n };\n \n-class CompilePatternBindings : public HIRCompileBase\n+class CompilePatternBindings : public HIRCompileBase,\n+\t\t\t       public HIR::HIRPatternVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static void Compile (HIR::Pattern *pattern, tree match_scrutinee_expr,\n \t\t       Context *ctx)\n@@ -65,9 +69,20 @@ class CompilePatternBindings : public HIRCompileBase\n   }\n \n   void visit (HIR::StructPattern &pattern) override;\n-\n   void visit (HIR::TupleStructPattern &pattern) override;\n \n+  // Empty visit for unused Pattern HIR nodes.\n+  void visit (HIR::GroupedPattern &) override {}\n+  void visit (HIR::IdentifierPattern &) override {}\n+  void visit (HIR::LiteralPattern &) override {}\n+  void visit (HIR::PathInExpression &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::RangePattern &) override {}\n+  void visit (HIR::ReferencePattern &) override {}\n+  void visit (HIR::SlicePattern &) override {}\n+  void visit (HIR::TuplePattern &) override {}\n+  void visit (HIR::WildcardPattern &) override {}\n+\n private:\n   CompilePatternBindings (Context *ctx, tree match_scrutinee_expr)\n     : HIRCompileBase (ctx), match_scrutinee_expr (match_scrutinee_expr)"}, {"sha": "37dec0b0e1b17461898fbeceb81dd0ba3b2955df", "filename": "gcc/rust/backend/rust-compile-resolve-path.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -25,10 +25,8 @@\n namespace Rust {\n namespace Compile {\n \n-class ResolvePathRef : public HIRCompileBase\n+class ResolvePathRef : public HIRCompileBase, public HIR::HIRPatternVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree Compile (HIR::QualifiedPathInExpression &expr, Context *ctx)\n   {\n@@ -45,10 +43,20 @@ class ResolvePathRef : public HIRCompileBase\n   }\n \n   void visit (HIR::PathInExpression &expr) override;\n-\n   void visit (HIR::QualifiedPathInExpression &expr) override;\n \n-private:\n+  // Empty visit for unused Pattern HIR nodes.\n+  void visit (HIR::GroupedPattern &) override {}\n+  void visit (HIR::IdentifierPattern &) override {}\n+  void visit (HIR::LiteralPattern &) override {}\n+  void visit (HIR::RangePattern &) override {}\n+  void visit (HIR::ReferencePattern &) override {}\n+  void visit (HIR::SlicePattern &) override {}\n+  void visit (HIR::StructPattern &) override {}\n+  void visit (HIR::TuplePattern &) override {}\n+  void visit (HIR::TupleStructPattern &) override {}\n+  void visit (HIR::WildcardPattern &) override {}\n+\n   ResolvePathRef (Context *ctx)\n     : HIRCompileBase (ctx), resolved (error_mark_node)\n   {}"}, {"sha": "2dfb520980f629e691fa8503bcca64459035fdc3", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -26,10 +26,8 @@\n namespace Rust {\n namespace Compile {\n \n-class CompileStmt : public HIRCompileBase\n+class CompileStmt : public HIRCompileBase, public HIR::HIRStmtVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree Compile (HIR::Stmt *stmt, Context *ctx)\n   {\n@@ -103,6 +101,30 @@ class CompileStmt : public HIRCompileBase\n       }\n   }\n \n+  // Empty visit for unused Stmt HIR nodes.\n+  void visit (HIR::TupleStruct &) override {}\n+  void visit (HIR::EnumItem &) override {}\n+  void visit (HIR::EnumItemTuple &) override {}\n+  void visit (HIR::EnumItemStruct &) override {}\n+  void visit (HIR::EnumItemDiscriminant &) override {}\n+  void visit (HIR::TypePathSegmentFunction &) override {}\n+  void visit (HIR::TypePath &) override {}\n+  void visit (HIR::QualifiedPathInType &) override {}\n+  void visit (HIR::Module &) override {}\n+  void visit (HIR::ExternCrate &) override {}\n+  void visit (HIR::UseDeclaration &) override {}\n+  void visit (HIR::Function &) override {}\n+  void visit (HIR::TypeAlias &) override {}\n+  void visit (HIR::StructStruct &) override {}\n+  void visit (HIR::Enum &) override {}\n+  void visit (HIR::Union &) override {}\n+  void visit (HIR::ConstantItem &) override {}\n+  void visit (HIR::StaticItem &) override {}\n+  void visit (HIR::Trait &) override {}\n+  void visit (HIR::ImplBlock &) override {}\n+  void visit (HIR::ExternBlock &) override {}\n+  void visit (HIR::EmptyStmt &) override {}\n+\n private:\n   CompileStmt (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n "}, {"sha": "c5e986e0b9b4aef53d0c818c48fc058ff624624a", "filename": "gcc/rust/backend/rust-compile-struct-field-expr.h", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -25,10 +25,9 @@\n namespace Rust {\n namespace Compile {\n \n-class CompileStructExprField : public HIRCompileBase\n+class CompileStructExprField : public HIRCompileBase,\n+\t\t\t       public HIR::HIRExpressionVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n-\n public:\n   static tree Compile (HIR::StructExprField *field, Context *ctx)\n   {\n@@ -39,11 +38,63 @@ class CompileStructExprField : public HIRCompileBase\n   }\n \n   void visit (HIR::StructExprFieldIdentifierValue &field) override;\n-\n   void visit (HIR::StructExprFieldIndexValue &field) override;\n-\n   void visit (HIR::StructExprFieldIdentifier &field) override;\n \n+  // Empty visit for unused Expression HIR nodes.\n+  void visit (HIR::PathInExpression &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::ClosureExprInner &) override {}\n+  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::StructExprStruct &) override {}\n+  void visit (HIR::StructExprStructFields &) override {}\n+  void visit (HIR::IdentifierExpr &) override {}\n+  void visit (HIR::LiteralExpr &) override {}\n+  void visit (HIR::BorrowExpr &) override {}\n+  void visit (HIR::DereferenceExpr &) override {}\n+  void visit (HIR::ErrorPropagationExpr &) override {}\n+  void visit (HIR::NegationExpr &) override {}\n+  void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n+  void visit (HIR::ComparisonExpr &) override {}\n+  void visit (HIR::LazyBooleanExpr &) override {}\n+  void visit (HIR::TypeCastExpr &) override {}\n+  void visit (HIR::AssignmentExpr &) override {}\n+  void visit (HIR::CompoundAssignmentExpr &) override {}\n+  void visit (HIR::GroupedExpr &) override {}\n+  void visit (HIR::ArrayExpr &) override {}\n+  void visit (HIR::ArrayIndexExpr &) override {}\n+  void visit (HIR::TupleExpr &) override {}\n+  void visit (HIR::TupleIndexExpr &) override {}\n+  void visit (HIR::CallExpr &) override {}\n+  void visit (HIR::MethodCallExpr &) override {}\n+  void visit (HIR::FieldAccessExpr &) override {}\n+  void visit (HIR::BlockExpr &) override {}\n+  void visit (HIR::ContinueExpr &) override {}\n+  void visit (HIR::BreakExpr &) override {}\n+  void visit (HIR::RangeFromToExpr &) override {}\n+  void visit (HIR::RangeFromExpr &) override {}\n+  void visit (HIR::RangeToExpr &) override {}\n+  void visit (HIR::RangeFullExpr &) override {}\n+  void visit (HIR::RangeFromToInclExpr &) override {}\n+  void visit (HIR::RangeToInclExpr &) override {}\n+  void visit (HIR::ReturnExpr &) override {}\n+  void visit (HIR::UnsafeBlockExpr &) override {}\n+  void visit (HIR::LoopExpr &) override {}\n+  void visit (HIR::WhileLoopExpr &) override {}\n+  void visit (HIR::WhileLetLoopExpr &) override {}\n+  void visit (HIR::ForLoopExpr &) override {}\n+  void visit (HIR::IfExpr &) override {}\n+  void visit (HIR::IfExprConseqElse &) override {}\n+  void visit (HIR::IfExprConseqIf &) override {}\n+  void visit (HIR::IfExprConseqIfLet &) override {}\n+  void visit (HIR::IfLetExpr &) override {}\n+  void visit (HIR::IfLetExprConseqElse &) override {}\n+  void visit (HIR::IfLetExprConseqIf &) override {}\n+  void visit (HIR::IfLetExprConseqIfLet &) override {}\n+  void visit (HIR::MatchExpr &) override {}\n+  void visit (HIR::AwaitExpr &) override {}\n+  void visit (HIR::AsyncBlockExpr &) override {}\n+\n private:\n   CompileStructExprField (Context *ctx)\n     : HIRCompileBase (ctx), translated (nullptr)"}, {"sha": "2dab39ee3745cbccd1eb0589e9e063e3c74b8498", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -20,13 +20,17 @@\n #define RUST_COMPILE_VAR_DECL\n \n #include \"rust-compile-base.h\"\n+#include \"rust-hir-visitor.h\"\n \n namespace Rust {\n namespace Compile {\n \n-class CompileVarDecl : public HIRCompileBase\n+class CompileVarDecl : public HIRCompileBase,\n+\t\t       public HIR::HIRPatternVisitor,\n+\t\t       public HIR::HIRStmtVisitor\n {\n-  using Rust::Compile::HIRCompileBase::visit;\n+  using HIR::HIRPatternVisitor::visit;\n+  using HIR::HIRStmtVisitor::visit;\n \n public:\n   static ::Bvariable *compile (tree fndecl, HIR::Stmt *stmt, Context *ctx)\n@@ -47,7 +51,8 @@ class CompileVarDecl : public HIRCompileBase\n     rust_assert (ok);\n \n     translated_type = TyTyResolveCompile::compile (ctx, resolved_type);\n-    stmt.get_pattern ()->accept_vis (*this);\n+    stmt.get_pattern ()->accept_vis (\n+      static_cast<HIR::HIRPatternVisitor &> (*this));\n   }\n \n   void visit (HIR::IdentifierPattern &pattern) override\n@@ -70,6 +75,44 @@ class CompileVarDecl : public HIRCompileBase\n \t\t\t\t\t     NULL /*decl_var*/, locus);\n   }\n \n+  // Empty visit for unused Pattern HIR nodes.\n+  void visit (HIR::GroupedPattern &) override {}\n+  void visit (HIR::LiteralPattern &) override {}\n+  void visit (HIR::PathInExpression &) override {}\n+  void visit (HIR::QualifiedPathInExpression &) override {}\n+  void visit (HIR::RangePattern &) override {}\n+  void visit (HIR::ReferencePattern &) override {}\n+  void visit (HIR::SlicePattern &) override {}\n+  void visit (HIR::StructPattern &) override {}\n+  void visit (HIR::TuplePattern &) override {}\n+  void visit (HIR::TupleStructPattern &) override {}\n+\n+  // Empty visit for unused Stmt HIR nodes.\n+  void visit (HIR::EnumItemTuple &) override {}\n+  void visit (HIR::EnumItemStruct &) override {}\n+  void visit (HIR::EnumItem &item) override {}\n+  void visit (HIR::TupleStruct &tuple_struct) override {}\n+  void visit (HIR::EnumItemDiscriminant &) override {}\n+  void visit (HIR::TypePathSegmentFunction &segment) override {}\n+  void visit (HIR::TypePath &path) override {}\n+  void visit (HIR::QualifiedPathInType &path) override {}\n+  void visit (HIR::Module &module) override {}\n+  void visit (HIR::ExternCrate &crate) override {}\n+  void visit (HIR::UseDeclaration &use_decl) override {}\n+  void visit (HIR::Function &function) override {}\n+  void visit (HIR::TypeAlias &type_alias) override {}\n+  void visit (HIR::StructStruct &struct_item) override {}\n+  void visit (HIR::Enum &enum_item) override {}\n+  void visit (HIR::Union &union_item) override {}\n+  void visit (HIR::ConstantItem &const_item) override {}\n+  void visit (HIR::StaticItem &static_item) override {}\n+  void visit (HIR::Trait &trait) override {}\n+  void visit (HIR::ImplBlock &impl) override {}\n+  void visit (HIR::ExternBlock &block) override {}\n+  void visit (HIR::EmptyStmt &stmt) override {}\n+  void visit (HIR::ExprStmtWithoutBlock &stmt) override {}\n+  void visit (HIR::ExprStmtWithBlock &stmt) override {}\n+\n private:\n   CompileVarDecl (Context *ctx, tree fndecl)\n     : HIRCompileBase (ctx), fndecl (fndecl), translated_type (error_mark_node),"}, {"sha": "40c9fef8ebbbb9a11749f70d1c611e308c031c45", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -97,6 +97,7 @@ class LiteralExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Literal &get_literal () { return literal; }\n   const Literal &get_literal () const { return literal; }\n@@ -198,6 +199,7 @@ class BorrowExpr : public OperatorExpr\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Mutability get_mut () const { return mut; }\n   bool is_mut () const { return mut == Mutability::Mut; }\n@@ -234,6 +236,7 @@ class DereferenceExpr : public OperatorExpr\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -266,6 +269,7 @@ class ErrorPropagationExpr : public OperatorExpr\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -310,6 +314,7 @@ class NegationExpr : public OperatorExpr\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -378,6 +383,7 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n     = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   void visit_lhs (HIRFullVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n   void visit_rhs (HIRFullVisitor &vis) { right_expr->accept_vis (vis); }\n@@ -452,6 +458,7 @@ class ComparisonExpr : public OperatorExpr\n   ComparisonExpr &operator= (ComparisonExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Expr *get_lhs () { return main_or_left_expr.get (); }\n   Expr *get_rhs () { return right_expr.get (); }\n@@ -525,6 +532,7 @@ class LazyBooleanExpr : public OperatorExpr\n   ExprType get_expr_type () const { return expr_type; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Expr *get_lhs () { return main_or_left_expr.get (); }\n \n@@ -586,6 +594,7 @@ class TypeCastExpr : public OperatorExpr\n   TypeCastExpr &operator= (TypeCastExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_casted_expr ()\n   {\n@@ -654,6 +663,7 @@ class AssignmentExpr : public OperatorExpr\n   AssignmentExpr &operator= (AssignmentExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   void visit_lhs (HIRFullVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n   void visit_rhs (HIRFullVisitor &vis) { right_expr->accept_vis (vis); }\n@@ -726,6 +736,7 @@ class CompoundAssignmentExpr : public OperatorExpr\n   CompoundAssignmentExpr &operator= (CompoundAssignmentExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_left_expr ()\n   {\n@@ -798,6 +809,7 @@ class GroupedExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_expr_in_parens ()\n   {\n@@ -1018,6 +1030,7 @@ class ArrayExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   ArrayElems *get_internal_elements () { return internal_elements.get (); };\n \n@@ -1083,6 +1096,7 @@ class ArrayIndexExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Expr *get_array_expr () { return array_expr.get (); }\n   Expr *get_index_expr () { return index_expr.get (); }\n@@ -1166,6 +1180,7 @@ class TupleExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   const std::vector<std::unique_ptr<Expr> > &get_tuple_elems () const\n   {\n@@ -1239,6 +1254,7 @@ class TupleIndexExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_tuple_expr ()\n   {\n@@ -1315,6 +1331,7 @@ class StructExprStruct : public StructExpr\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1395,6 +1412,7 @@ class StructExprField\n   virtual std::string as_string () const = 0;\n \n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n+  virtual void accept_vis (HIRExpressionVisitor &vis) = 0;\n \n   Analysis::NodeMapping &get_mappings () { return mappings; }\n \n@@ -1429,6 +1447,7 @@ class StructExprFieldIdentifier : public StructExprField\n   std::string as_string () const override { return field_name; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Identifier get_field_name () const { return field_name; }\n \n@@ -1498,6 +1517,7 @@ class StructExprFieldIdentifierValue : public StructExprFieldWithVal\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1525,10 +1545,11 @@ class StructExprFieldIndexValue : public StructExprFieldWithVal\n \n   std::string as_string () const override;\n \n-  void accept_vis (HIRFullVisitor &vis) override;\n-\n   TupleIndex get_tuple_index () const { return index; };\n \n+  void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1598,6 +1619,7 @@ class StructExprStructFields : public StructExprStruct\n   StructExprStructFields &operator= (StructExprStructFields &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::vector<std::unique_ptr<StructExprField> > &get_fields ()\n   {\n@@ -1654,6 +1676,8 @@ class StructExprStructBase : public StructExprStruct\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n+\n   StructBase *get_struct_base () { return &struct_base; }\n \n protected:\n@@ -1726,6 +1750,7 @@ class CallExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Expr *get_fnexpr () { return function.get (); }\n \n@@ -1812,6 +1837,7 @@ class MethodCallExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_receiver () { return receiver; }\n \n@@ -1893,6 +1919,7 @@ class FieldAccessExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_receiver_expr ()\n   {\n@@ -2044,6 +2071,7 @@ class ClosureExprInner : public ClosureExpr\n   ClosureExprInner &operator= (ClosureExprInner &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2144,6 +2172,7 @@ class BlockExpr : public ExprWithBlock\n   Location get_end_locus () const { return end_locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   bool is_final_stmt (Stmt *stmt) { return statements.back ().get () == stmt; }\n \n@@ -2226,6 +2255,7 @@ class ClosureExprInnerTyped : public ClosureExpr\n   ClosureExprInnerTyped &operator= (ClosureExprInnerTyped &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2265,6 +2295,7 @@ class ContinueExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Lifetime &get_label () { return label; }\n \n@@ -2348,6 +2379,7 @@ class BreakExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Lifetime &get_label () { return label; }\n \n@@ -2429,6 +2461,7 @@ class RangeFromToExpr : public RangeExpr\n   RangeFromToExpr &operator= (RangeFromToExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_from_expr () { return from; }\n   std::unique_ptr<Expr> &get_to_expr () { return to; }\n@@ -2482,6 +2515,7 @@ class RangeFromExpr : public RangeExpr\n   RangeFromExpr &operator= (RangeFromExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_from_expr () { return from; }\n \n@@ -2535,6 +2569,7 @@ class RangeToExpr : public RangeExpr\n   RangeToExpr &operator= (RangeToExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_to_expr () { return to; }\n \n@@ -2567,6 +2602,7 @@ class RangeFullExpr : public RangeExpr\n   // outer attributes not allowed\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2623,6 +2659,7 @@ class RangeFromToInclExpr : public RangeExpr\n   RangeFromToInclExpr &operator= (RangeFromToInclExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_from_expr () { return from; }\n   std::unique_ptr<Expr> &get_to_expr () { return to; }\n@@ -2677,6 +2714,7 @@ class RangeToInclExpr : public RangeExpr\n   RangeToInclExpr &operator= (RangeToInclExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2743,6 +2781,7 @@ class ReturnExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   Expr *get_expr () { return return_expr.get (); }\n \n@@ -2808,6 +2847,7 @@ class UnsafeBlockExpr : public ExprWithBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<BlockExpr> &get_block_expr () { return expr; }\n \n@@ -2932,6 +2972,7 @@ class LoopExpr : public BaseLoopExpr\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2987,6 +3028,7 @@ class WhileLoopExpr : public BaseLoopExpr\n   WhileLoopExpr &operator= (WhileLoopExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_predicate_expr () { return condition; }\n \n@@ -3062,6 +3104,7 @@ class WhileLetLoopExpr : public BaseLoopExpr\n   WhileLetLoopExpr &operator= (WhileLetLoopExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_cond () { return condition; }\n \n@@ -3127,6 +3170,7 @@ class ForLoopExpr : public BaseLoopExpr\n   ForLoopExpr &operator= (ForLoopExpr &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_iterator_expr () { return iterator_expr; }\n \n@@ -3202,6 +3246,7 @@ class IfExpr : public ExprWithBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   void vis_if_condition (HIRFullVisitor &vis) { condition->accept_vis (vis); }\n   void vis_if_block (HIRFullVisitor &vis) { if_block->accept_vis (vis); }\n@@ -3266,6 +3311,7 @@ class IfExprConseqElse : public IfExpr\n   IfExprConseqElse &operator= (IfExprConseqElse &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   void vis_else_block (HIRFullVisitor &vis) { else_block->accept_vis (vis); }\n \n@@ -3333,6 +3379,7 @@ class IfExprConseqIf : public IfExpr\n   IfExprConseqIf &operator= (IfExprConseqIf &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   void vis_conseq_if_expr (HIRFullVisitor &vis)\n   {\n@@ -3428,6 +3475,7 @@ class IfLetExpr : public ExprWithBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   ExprType get_expression_type () const final override\n   {\n@@ -3493,6 +3541,7 @@ class IfExprConseqIfLet : public IfExpr\n   IfExprConseqIfLet &operator= (IfExprConseqIfLet &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3560,6 +3609,7 @@ class IfLetExprConseqElse : public IfLetExpr\n   IfLetExprConseqElse &operator= (IfLetExprConseqElse &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3626,6 +3676,7 @@ class IfLetExprConseqIf : public IfLetExpr\n   IfLetExprConseqIf &operator= (IfLetExprConseqIf &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3692,6 +3743,7 @@ class IfLetExprConseqIfLet : public IfLetExpr\n   IfLetExprConseqIfLet &operator= (IfLetExprConseqIfLet &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3892,6 +3944,7 @@ class MatchExpr : public ExprWithBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_scrutinee_expr ()\n   {\n@@ -3959,6 +4012,7 @@ class AwaitExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   ExprType get_expression_type () const final override\n   {\n@@ -4015,6 +4069,7 @@ class AsyncBlockExpr : public ExprWithBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   ExprType get_expression_type () const final override\n   {"}, {"sha": "3f3f484543e199b8fbd596295762244a01b05ce6", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 759, "deletions": 21, "changes": 780, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -3749,12 +3749,20 @@ Module::add_crate_name (std::vector<std::string> &names) const\n     item->add_crate_name (names);\n }\n \n+/* All accept_vis method below */\n+\n void\n IdentifierExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+IdentifierExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n Lifetime::accept_vis (HIRFullVisitor &vis)\n {\n@@ -3772,6 +3780,11 @@ PathInExpression::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n+void\n+PathInExpression::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n \n void\n TypePathSegment::accept_vis (HIRFullVisitor &vis)\n@@ -3802,6 +3815,11 @@ QualifiedPathInExpression::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n+void\n+QualifiedPathInExpression::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n \n void\n QualifiedPathInType::accept_vis (HIRFullVisitor &vis)\n@@ -3815,122 +3833,182 @@ LiteralExpr::accept_vis (HIRFullVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+LiteralExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n BorrowExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+BorrowExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n DereferenceExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+DereferenceExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n ErrorPropagationExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+ErrorPropagationExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n NegationExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+NegationExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n ArithmeticOrLogicalExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+ArithmeticOrLogicalExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n ComparisonExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+ComparisonExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n LazyBooleanExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+LazyBooleanExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n TypeCastExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+TypeCastExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n AssignmentExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n+void\n+AssignmentExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n CompoundAssignmentExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-GroupedExpr::accept_vis (HIRFullVisitor &vis)\n+CompoundAssignmentExpr::accept_vis (HIRExpressionVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayElemsValues::accept_vis (HIRFullVisitor &vis)\n+GroupedExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayElemsCopied::accept_vis (HIRFullVisitor &vis)\n+GroupedExpr::accept_vis (HIRExpressionVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayExpr::accept_vis (HIRFullVisitor &vis)\n+ArrayElemsValues::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-ArrayIndexExpr::accept_vis (HIRFullVisitor &vis)\n+ArrayElemsCopied::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleExpr::accept_vis (HIRFullVisitor &vis)\n+ArrayExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TupleIndexExpr::accept_vis (HIRFullVisitor &vis)\n+ArrayIndexExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprStruct::accept_vis (HIRFullVisitor &vis)\n+TupleExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprFieldIdentifier::accept_vis (HIRFullVisitor &vis)\n+TupleIndexExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-StructExprFieldIdentifierValue::accept_vis (HIRFullVisitor &vis)\n+StructExprStruct::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -4121,56 +4199,56 @@ IfLetExprConseqIfLet::accept_vis (HIRFullVisitor &vis)\n   vis.visit (*this);\n }\n \n-/*void\n-MatchCaseBlockExpr::accept_vis (HIRFullVisitor &vis)\n+void\n+MatchExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-MatchCaseExpr::accept_vis (HIRFullVisitor &vis)\n+AwaitExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n-}*/\n+}\n \n void\n-MatchExpr::accept_vis (HIRFullVisitor &vis)\n+AsyncBlockExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-AwaitExpr::accept_vis (HIRFullVisitor &vis)\n+TypeParam::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-AsyncBlockExpr::accept_vis (HIRFullVisitor &vis)\n+LifetimeWhereClauseItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypeParam::accept_vis (HIRFullVisitor &vis)\n+TypeBoundWhereClauseItem::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-LifetimeWhereClauseItem::accept_vis (HIRFullVisitor &vis)\n+Module::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-TypeBoundWhereClauseItem::accept_vis (HIRFullVisitor &vis)\n+Module::accept_vis (HIRStmtVisitor &vis)\n {\n   vis.visit (*this);\n }\n \n void\n-Module::accept_vis (HIRFullVisitor &vis)\n+Module::accept_vis (HIRVisItemVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -4547,5 +4625,665 @@ BareFunctionType::accept_vis (HIRFullVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+NeverType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ParenthesisedType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+EmptyStmt::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+GroupedPattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+WildcardPattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TraitItemType::accept_vis (HIRTraitItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TraitItemConst::accept_vis (HIRTraitItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TraitItemFunc::accept_vis (HIRTraitItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExternalFunctionItem::accept_vis (HIRExternalItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExternalStaticItem::accept_vis (HIRExternalItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+EnumItemDiscriminant::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+EnumItemStruct::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+EnumItemTuple::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+EnumItem::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructExprStructFields::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructExprFieldIndexValue::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructExprFieldIdentifierValue::accept_vis (HIRFullVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructExprFieldIdentifierValue::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructExprFieldIdentifier::accept_vis (HIRFullVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructExprFieldIdentifier::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructExprStruct::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TupleType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+SliceType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ArrayType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ImplTraitTypeOneBound::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+BareFunctionType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TraitObjectType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RawPointerType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ReferenceType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ImplTraitType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+InferredType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+LetStmt::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TupleStructPattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IdentifierPattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ReferencePattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+LiteralPattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructPattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TuplePattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+SlicePattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RangePattern::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ForLoopExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TypePath::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+QualifiedPathInType::accept_vis (HIRTypeVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExprStmtWithoutBlock::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TupleExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+MatchExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+BreakExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+AwaitExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ArrayExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+LoopExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+WhileLetLoopExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+WhileLoopExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+CallExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RangeFromToInclExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfLetExprConseqIfLet::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfLetExprConseqIf::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfLetExprConseqElse::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfLetExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfExprConseqIfLet::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfExprConseqIf::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfExprConseqElse::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+IfExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ClosureExprInner::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+UnsafeBlockExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RangeToInclExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RangeFromToExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+FieldAccessExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TupleIndexExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+MethodCallExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+AsyncBlockExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ArrayIndexExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RangeFullExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RangeFromExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ContinueExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+RangeToExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ReturnExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+QualifiedPathInExpression::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ClosureExprInnerTyped::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExprStmtWithBlock::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+PathInExpression::accept_vis (HIRPatternVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExternBlock::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExternBlock::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TypeAlias::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TypeAlias::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TypeAlias::accept_vis (HIRImplVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+BlockExpr::accept_vis (HIRExpressionVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Function::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Function::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Function::accept_vis (HIRImplVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Union::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Union::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Trait::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Trait::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Enum::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+Enum::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+UseDeclaration::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+UseDeclaration::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructStruct::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StructStruct::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ImplBlock::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ImplBlock::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ConstantItem::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ConstantItem::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ConstantItem::accept_vis (HIRImplVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TupleStruct::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+TupleStruct::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExternCrate::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+ExternCrate::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StaticItem::accept_vis (HIRStmtVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+StaticItem::accept_vis (HIRVisItemVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "54ba7d5904275a4004ef4ccf70d97334b0f9410b", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -677,10 +677,14 @@ class VisItem : public Item\n   VisItem &operator= (VisItem &&other) = default;\n \n public:\n+  using HIR::Stmt::accept_vis;\n+\n   /* Does the item have some kind of public visibility (non-default\n    * visibility)? */\n   bool has_visibility () const { return !visibility.is_error (); }\n \n+  virtual void accept_vis (HIRVisItemVisitor &vis) = 0;\n+\n   Visibility &get_visibility () { return visibility; }\n \n   std::string as_string () const override;\n@@ -744,6 +748,8 @@ class Module : public VisItem\n   Module &operator= (Module &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<std::unique_ptr<Item>> &get_items () { return items; };\n \n@@ -804,6 +810,8 @@ class ExternCrate : public VisItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   // Override that adds extern crate name in decl to passed list of names.\n   void add_crate_name (std::vector<std::string> &names) const override\n@@ -1069,6 +1077,8 @@ class UseDeclaration : public VisItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object\n@@ -1181,6 +1191,9 @@ class Function : public VisItem, public ImplItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRImplVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   Analysis::NodeMapping get_impl_mappings () const override\n   {\n@@ -1318,6 +1331,9 @@ class TypeAlias : public VisItem, public ImplItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRImplVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -1541,6 +1557,8 @@ class StructStruct : public Struct\n   bool is_unit_struct () const { return is_unit; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<StructField> &get_fields () { return fields; }\n \n@@ -1649,6 +1667,8 @@ class TupleStruct : public Struct\n   {}\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<TupleField> &get_fields () { return fields; }\n   const std::vector<TupleField> &get_fields () const { return fields; }\n@@ -1696,7 +1716,9 @@ class EnumItem : public Item\n   virtual std::string as_string () const override;\n \n   // not pure virtual as not abstract\n-  virtual void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  // void accept_vis (HIRVisItemVisitor &vis) override;\n \n   Location get_locus () const override { return locus; }\n \n@@ -1727,6 +1749,7 @@ class EnumItemTuple : public EnumItem\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n \n   std::vector<TupleField> &get_tuple_fields () { return tuple_fields; }\n \n@@ -1759,6 +1782,7 @@ class EnumItemStruct : public EnumItem\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n \n   std::vector<StructField> &get_struct_fields () { return struct_fields; }\n \n@@ -1807,6 +1831,7 @@ class EnumItemDiscriminant : public EnumItem\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n \n   std::unique_ptr<Expr> &get_discriminant_expression () { return expression; }\n \n@@ -1901,6 +1926,8 @@ class Enum : public VisItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   Identifier get_identifier () const { return enum_name; }\n \n@@ -2003,6 +2030,8 @@ class Union : public VisItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<StructField> &get_variants () { return variants; }\n \n@@ -2062,6 +2091,9 @@ class ConstantItem : public VisItem, public ImplItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRImplVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   Type *get_type () { return type.get (); }\n \n@@ -2143,6 +2175,8 @@ class StaticItem : public VisItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   Identifier get_identifier () const { return name; }\n \n@@ -2311,6 +2345,7 @@ class TraitItemFunc : public TraitItem\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTraitItemVisitor &vis) override;\n \n   TraitFunctionDecl &get_decl () { return decl; }\n \n@@ -2396,6 +2431,7 @@ class TraitItemConst : public TraitItem\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTraitItemVisitor &vis) override;\n \n   Identifier get_name () const { return name; }\n \n@@ -2481,6 +2517,7 @@ class TraitItemType : public TraitItem\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTraitItemVisitor &vis) override;\n \n   Identifier get_name () const { return name; }\n \n@@ -2601,6 +2638,8 @@ class Trait : public VisItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -2699,6 +2738,8 @@ class ImplBlock : public VisItem\n   bool has_impl_items () const { return !impl_items.empty (); }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<std::unique_ptr<ImplItem>> &get_impl_items ()\n   {\n@@ -2774,6 +2815,7 @@ class ExternalItem\n   Location get_locus () const { return locus; }\n \n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n+  virtual void accept_vis (HIRExternalItemVisitor &vis) = 0;\n \n   Analysis::NodeMapping get_mappings () const { return mappings; }\n \n@@ -2852,6 +2894,7 @@ class ExternalStaticItem : public ExternalItem\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExternalItemVisitor &vis) override;\n \n   bool is_mut () const { return mut == Mutability::Mut; }\n \n@@ -2994,6 +3037,7 @@ class ExternalFunctionItem : public ExternalItem\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExternalItemVisitor &vis) override;\n \n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n@@ -3087,6 +3131,8 @@ class ExternBlock : public VisItem\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+  void accept_vis (HIRVisItemVisitor &vis) override;\n \n   std::vector<std::unique_ptr<ExternalItem>> &get_extern_items ()\n   {"}, {"sha": "9858ba393d8634a9f3a231234df8c312ca024650", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -323,6 +323,8 @@ class PathInExpression : public PathPattern, public PathExpr\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   bool opening_scope_resolution () { return has_opening_scope_resolution; }\n \n@@ -706,6 +708,7 @@ class TypePath : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   size_t get_num_segments () const { return segments.size (); }\n \n@@ -829,6 +832,8 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   QualifiedPathType &get_path_type () { return path_type; }\n \n@@ -927,6 +932,7 @@ class QualifiedPathInType : public TypeNoBounds\n   std::string as_string () const override;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   QualifiedPathType &get_path_type () { return path_type; }\n "}, {"sha": "de4a83e297cb43492b7dadbc0245cc14e9696c38", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -52,6 +52,7 @@ class LiteralPattern : public Pattern\n   Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -132,6 +133,7 @@ class IdentifierPattern : public Pattern\n   bool is_mut () const { return mut == Mutability::Mut; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -170,6 +172,7 @@ class WildcardPattern : public Pattern\n   Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -353,6 +356,7 @@ class RangePattern : public Pattern\n   Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -418,6 +422,7 @@ class ReferencePattern : public Pattern\n   bool is_mut () const { return mut == Mutability::Mut; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -699,6 +704,7 @@ class StructPattern : public Pattern\n   Location get_locus () const override { return path.get_locus (); }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   PathInExpression &get_path () { return path; }\n   StructPatternElements &get_struct_pattern_elems () { return elems; }\n@@ -927,6 +933,7 @@ class TupleStructPattern : public Pattern\n   Location get_locus () const override { return path.get_locus (); }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   PathInExpression &get_path () { return path; }\n \n@@ -1116,6 +1123,7 @@ class TuplePattern : public Pattern\n   Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -1178,6 +1186,7 @@ class GroupedPattern : public Pattern\n   Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {\n@@ -1242,6 +1251,7 @@ class SlicePattern : public Pattern\n   Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n \n   Analysis::NodeMapping get_pattern_mappings () const override final\n   {"}, {"sha": "54d3e218015d2064c0c925cdbbc90e3179f4ba72", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -40,6 +40,7 @@ class EmptyStmt : public Stmt\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n \n   bool is_item () const override final { return false; }\n \n@@ -114,6 +115,7 @@ class LetStmt : public Stmt\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n \n   HIR::Type *get_type () { return type.get (); }\n \n@@ -181,6 +183,7 @@ class ExprStmtWithoutBlock : public ExprStmt\n   ExprStmtWithoutBlock &operator= (ExprStmtWithoutBlock &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n \n   Expr *get_expr () { return expr.get (); }\n \n@@ -228,6 +231,7 @@ class ExprStmtWithBlock : public ExprStmt\n   ExprStmtWithBlock &operator= (ExprStmtWithBlock &&other) = default;\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n \n   ExprWithBlock *get_expr () { return expr.get (); }\n "}, {"sha": "8692dfdba2e35d2c1cda3a8b6d3f5d78cefcd511", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -139,6 +139,7 @@ class ImplTraitType : public Type\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n };\n \n // An opaque value of another type that implements a set of traits\n@@ -196,6 +197,7 @@ class TraitObjectType : public Type\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   std::vector<std::unique_ptr<TypeParamBound> > &get_type_param_bounds ()\n   {\n@@ -275,6 +277,7 @@ class ParenthesisedType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n };\n \n // Impl trait with a single bound? Poor reference material here.\n@@ -311,6 +314,7 @@ class ImplTraitTypeOneBound : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n };\n \n class TypePath; // definition moved to \"rust-path.h\"\n@@ -362,6 +366,7 @@ class TupleType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   std::vector<std::unique_ptr<Type> > &get_elems () { return elems; }\n   const std::vector<std::unique_ptr<Type> > &get_elems () const\n@@ -411,6 +416,7 @@ class NeverType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n };\n \n // A type consisting of a pointer without safety or liveness guarantees\n@@ -453,6 +459,7 @@ class RawPointerType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   std::unique_ptr<Type> &get_type () { return type; }\n \n@@ -532,6 +539,7 @@ class ReferenceType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   Lifetime &get_lifetime () { return lifetime; }\n \n@@ -598,6 +606,7 @@ class ArrayType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   Type *get_element_type () { return elem_type.get (); }\n \n@@ -657,6 +666,7 @@ class SliceType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -703,6 +713,7 @@ class InferredType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n };\n \n class QualifiedPathInType; // definition moved to \"rust-path.h\"\n@@ -845,6 +856,7 @@ class BareFunctionType : public TypeNoBounds\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRTypeVisitor &vis) override;\n \n   std::vector<MaybeNamedParam> &get_function_params () { return params; }\n   const std::vector<MaybeNamedParam> &get_function_params () const"}, {"sha": "42cc1abcdc4456f02d9b300826466bc93d69e5b3", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -315,6 +315,179 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (BareFunctionType &) override {}\n };\n \n+class HIRExternalItemVisitor\n+{\n+public:\n+  virtual void visit (ExternalStaticItem &item) = 0;\n+  virtual void visit (ExternalFunctionItem &item) = 0;\n+};\n+\n+class HIRTraitItemVisitor\n+{\n+public:\n+  virtual void visit (TraitItemFunc &item) = 0;\n+  virtual void visit (TraitItemConst &item) = 0;\n+  virtual void visit (TraitItemType &item) = 0;\n+};\n+\n+class HIRVisItemVisitor\n+{\n+public:\n+  virtual void visit (Module &module) = 0;\n+  virtual void visit (ExternCrate &crate) = 0;\n+  virtual void visit (UseDeclaration &use_decl) = 0;\n+  virtual void visit (Function &function) = 0;\n+  virtual void visit (TypeAlias &type_alias) = 0;\n+  virtual void visit (StructStruct &struct_item) = 0;\n+  virtual void visit (TupleStruct &tuple_struct) = 0;\n+  virtual void visit (Enum &enum_item) = 0;\n+  virtual void visit (Union &union_item) = 0;\n+  virtual void visit (ConstantItem &const_item) = 0;\n+  virtual void visit (StaticItem &static_item) = 0;\n+  virtual void visit (Trait &trait) = 0;\n+  virtual void visit (ImplBlock &impl) = 0;\n+  virtual void visit (ExternBlock &block) = 0;\n+};\n+\n+class HIRImplVisitor\n+{\n+public:\n+  virtual void visit (Function &function) = 0;\n+  virtual void visit (ConstantItem &const_item) = 0;\n+  virtual void visit (TypeAlias &type_alias) = 0;\n+};\n+\n+class HIRTypeVisitor\n+{\n+public:\n+  virtual void visit (TypePathSegmentFunction &segment) = 0;\n+  virtual void visit (TypePath &path) = 0;\n+  virtual void visit (QualifiedPathInType &path) = 0;\n+  virtual void visit (TraitBound &bound) = 0;\n+  virtual void visit (ImplTraitType &type) = 0;\n+  virtual void visit (TraitObjectType &type) = 0;\n+  virtual void visit (ParenthesisedType &type) = 0;\n+  virtual void visit (ImplTraitTypeOneBound &type) = 0;\n+  virtual void visit (TupleType &type) = 0;\n+  virtual void visit (NeverType &type) = 0;\n+  virtual void visit (RawPointerType &type) = 0;\n+  virtual void visit (ReferenceType &type) = 0;\n+  virtual void visit (ArrayType &type) = 0;\n+  virtual void visit (SliceType &type) = 0;\n+  virtual void visit (InferredType &type) = 0;\n+  virtual void visit (BareFunctionType &type) = 0;\n+};\n+\n+class HIRStmtVisitor\n+{\n+public:\n+  virtual void visit (EnumItemTuple &) = 0;\n+  virtual void visit (EnumItemStruct &) = 0;\n+  virtual void visit (EnumItem &item) = 0;\n+  virtual void visit (TupleStruct &tuple_struct) = 0;\n+  virtual void visit (EnumItemDiscriminant &) = 0;\n+  virtual void visit (TypePathSegmentFunction &segment) = 0;\n+  virtual void visit (TypePath &path) = 0;\n+  virtual void visit (QualifiedPathInType &path) = 0;\n+  virtual void visit (Module &module) = 0;\n+  virtual void visit (ExternCrate &crate) = 0;\n+  virtual void visit (UseDeclaration &use_decl) = 0;\n+  virtual void visit (Function &function) = 0;\n+  virtual void visit (TypeAlias &type_alias) = 0;\n+  virtual void visit (StructStruct &struct_item) = 0;\n+  virtual void visit (Enum &enum_item) = 0;\n+  virtual void visit (Union &union_item) = 0;\n+  virtual void visit (ConstantItem &const_item) = 0;\n+  virtual void visit (StaticItem &static_item) = 0;\n+  virtual void visit (Trait &trait) = 0;\n+  virtual void visit (ImplBlock &impl) = 0;\n+  virtual void visit (ExternBlock &block) = 0;\n+  virtual void visit (EmptyStmt &stmt) = 0;\n+  virtual void visit (LetStmt &stmt) = 0;\n+  virtual void visit (ExprStmtWithoutBlock &stmt) = 0;\n+  virtual void visit (ExprStmtWithBlock &stmt) = 0;\n+};\n+\n+class HIRExpressionVisitor\n+{\n+public:\n+  // These are StructExprField\n+  // Added because of CompileStructExprField\n+  virtual void visit (StructExprFieldIdentifier &field) = 0;\n+  virtual void visit (StructExprFieldIdentifierValue &field) = 0;\n+  virtual void visit (StructExprFieldIndexValue &field) = 0;\n+\n+  virtual void visit (HIR::QualifiedPathInExpression &expr) = 0;\n+  virtual void visit (HIR::PathInExpression &expr) = 0;\n+  virtual void visit (ClosureExprInnerTyped &) = 0;\n+  virtual void visit (ClosureExprInner &expr) = 0;\n+  virtual void visit (StructExprStructFields &) = 0;\n+  virtual void visit (StructExprStruct &) = 0;\n+  virtual void visit (IdentifierExpr &ident_expr) = 0;\n+  virtual void visit (LiteralExpr &expr) = 0;\n+  virtual void visit (BorrowExpr &expr) = 0;\n+  virtual void visit (DereferenceExpr &expr) = 0;\n+  virtual void visit (ErrorPropagationExpr &expr) = 0;\n+  virtual void visit (NegationExpr &expr) = 0;\n+  virtual void visit (ArithmeticOrLogicalExpr &expr) = 0;\n+  virtual void visit (ComparisonExpr &expr) = 0;\n+  virtual void visit (LazyBooleanExpr &expr) = 0;\n+  virtual void visit (TypeCastExpr &expr) = 0;\n+  virtual void visit (AssignmentExpr &expr) = 0;\n+  virtual void visit (CompoundAssignmentExpr &expr) = 0;\n+  virtual void visit (GroupedExpr &expr) = 0;\n+  virtual void visit (ArrayExpr &expr) = 0;\n+  virtual void visit (ArrayIndexExpr &expr) = 0;\n+  virtual void visit (TupleExpr &expr) = 0;\n+  virtual void visit (TupleIndexExpr &expr) = 0;\n+  virtual void visit (CallExpr &expr) = 0;\n+  virtual void visit (MethodCallExpr &expr) = 0;\n+  virtual void visit (FieldAccessExpr &expr) = 0;\n+  virtual void visit (BlockExpr &expr) = 0;\n+  virtual void visit (ContinueExpr &expr) = 0;\n+  virtual void visit (BreakExpr &expr) = 0;\n+  virtual void visit (RangeFromToExpr &expr) = 0;\n+  virtual void visit (RangeFromExpr &expr) = 0;\n+  virtual void visit (RangeToExpr &expr) = 0;\n+  virtual void visit (RangeFullExpr &expr) = 0;\n+  virtual void visit (RangeFromToInclExpr &expr) = 0;\n+  virtual void visit (RangeToInclExpr &expr) = 0;\n+  virtual void visit (ReturnExpr &expr) = 0;\n+  virtual void visit (UnsafeBlockExpr &expr) = 0;\n+  virtual void visit (LoopExpr &expr) = 0;\n+  virtual void visit (WhileLoopExpr &expr) = 0;\n+  virtual void visit (WhileLetLoopExpr &expr) = 0;\n+  virtual void visit (ForLoopExpr &expr) = 0;\n+  virtual void visit (IfExpr &expr) = 0;\n+  virtual void visit (IfExprConseqElse &expr) = 0;\n+  virtual void visit (IfExprConseqIf &expr) = 0;\n+  virtual void visit (IfExprConseqIfLet &expr) = 0;\n+  virtual void visit (IfLetExpr &expr) = 0;\n+  virtual void visit (IfLetExprConseqElse &expr) = 0;\n+  virtual void visit (IfLetExprConseqIf &expr) = 0;\n+  virtual void visit (IfLetExprConseqIfLet &expr) = 0;\n+  virtual void visit (MatchExpr &expr) = 0;\n+  virtual void visit (AwaitExpr &expr) = 0;\n+  virtual void visit (AsyncBlockExpr &expr) = 0;\n+};\n+\n+class HIRPatternVisitor\n+{\n+public:\n+  virtual void visit (GroupedPattern &) = 0;\n+  virtual void visit (IdentifierPattern &) = 0;\n+  virtual void visit (LiteralPattern &) = 0;\n+  virtual void visit (PathInExpression &) = 0;\n+  virtual void visit (QualifiedPathInExpression &) = 0;\n+  virtual void visit (RangePattern &) = 0;\n+  virtual void visit (ReferencePattern &) = 0;\n+  virtual void visit (SlicePattern &) = 0;\n+  virtual void visit (StructPattern &) = 0;\n+  virtual void visit (TuplePattern &) = 0;\n+  virtual void visit (TupleStructPattern &) = 0;\n+  virtual void visit (WildcardPattern &) = 0;\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "760904bad0cefee84b400c8186a5bd2f1a421a38", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -33,6 +33,14 @@ typedef int TupleIndex;\n namespace HIR {\n // foward decl: ast visitor\n class HIRFullVisitor;\n+class HIRStmtVisitor;\n+class HIRTraitItemVisitor;\n+class HIRExternalItemVisitor;\n+class HIRVisItemVisitor;\n+class HIRExpressionVisitor;\n+class HIRPatternVisitor;\n+class HIRImplVisitor;\n+class HIRTypeVisitor;\n \n // forward decl for use in token tree method\n class Token;\n@@ -97,6 +105,7 @@ class Stmt\n   virtual std::string as_string () const = 0;\n \n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n+  virtual void accept_vis (HIRStmtVisitor &vis) = 0;\n \n   virtual Location get_locus () const = 0;\n \n@@ -137,8 +146,6 @@ class Item : public Stmt\n   add_crate_name (std::vector<std::string> &names ATTRIBUTE_UNUSED) const\n   {}\n \n-  virtual void accept_vis (HIRFullVisitor &vis ATTRIBUTE_UNUSED) {}\n-\n   AST::AttrVec &get_outer_attrs () { return outer_attrs; }\n   const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n \n@@ -225,8 +232,6 @@ class Expr\n \n   virtual Location get_locus () const = 0;\n \n-  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n-\n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n \n   // Clone function implementation as pure virtual method\n@@ -236,6 +241,9 @@ class Expr\n \n   virtual ExprType get_expression_type () const = 0;\n \n+  virtual void accept_vis (HIRExpressionVisitor &vis) = 0;\n+  virtual void accept_vis (HIRFullVisitor &vis) = 0;\n+\n protected:\n   // Constructor\n   Expr (Analysis::NodeMapping mappings,\n@@ -318,6 +326,7 @@ class IdentifierExpr : public ExprWithoutBlock\n   Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRExpressionVisitor &vis) override;\n \n   // Clones this object.\n   std::unique_ptr<IdentifierExpr> clone_identifier_expr () const\n@@ -380,6 +389,7 @@ class Pattern\n   virtual std::string as_string () const = 0;\n \n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n+  virtual void accept_vis (HIRPatternVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_pattern_mappings () const = 0;\n \n@@ -420,6 +430,7 @@ class Type\n    * declaration. */\n \n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n+  virtual void accept_vis (HIRTypeVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_mappings () const { return mappings; }\n \n@@ -704,6 +715,7 @@ class TraitItem\n \n   virtual std::string as_string () const = 0;\n \n+  virtual void accept_vis (HIRTraitItemVisitor &vis) = 0;\n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n   virtual const std::string trait_identifier () const = 0;\n@@ -733,7 +745,9 @@ class ImplItem\n \n   virtual std::string as_string () const = 0;\n \n+  virtual void accept_vis (HIRImplVisitor &vis) = 0;\n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n+  virtual void accept_vis (HIRStmtVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_impl_mappings () const = 0;\n "}, {"sha": "7bb166adcf3cea72431c5c40cb49a681da776a76", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffb1adabd3853a8d1100e53d5fa351f8b5f180c/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=dffb1adabd3853a8d1100e53d5fa351f8b5f180c", "patch": "@@ -144,4 +144,4 @@ class ScanDeadcode : public MarkLiveBase\n } // namespace Analysis\n } // namespace Rust\n \n-#endif\n\\ No newline at end of file\n+#endif"}]}