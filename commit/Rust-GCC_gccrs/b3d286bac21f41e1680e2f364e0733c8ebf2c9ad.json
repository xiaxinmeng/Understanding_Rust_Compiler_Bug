{"sha": "b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkMjg2YmFjMjFmNDFlMTY4MGUyZjM2NGUwNzMzYzhlYmYyYzlhZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-03-08T09:35:04Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-03-08T09:35:04Z"}, "message": "re PR fortran/43256 ([OOP] TBP with missing optional arg)\n\n2010-03-08  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43256\n\t* resolve.c (resolve_compcall): Don't set 'value.function.name' here\n\tfor TBPs, otherwise they will not be resolved properly.\n\t(resolve_function): Use 'value.function.esym' instead of\n        'value.function.name' to check if we're dealing with a TBP.\n\t(check_class_members): Set correct type of passed object for all TBPs,\n\tnot only generic ones, except if the type is abstract.\n\n\n2010-03-08  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/43256\n\t* gfortran.dg/typebound_call_13.f03: New.\n\nFrom-SVN: r157272", "tree": {"sha": "eaa65acb0a14fd9bdf95330dcf09127481313e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa65acb0a14fd9bdf95330dcf09127481313e87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196c8bc8a319d0be3018c66339e00985857bd627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196c8bc8a319d0be3018c66339e00985857bd627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/196c8bc8a319d0be3018c66339e00985857bd627"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "8165bb17cf6b1de0912599af9321e681d2bbc6cf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "patch": "@@ -1,3 +1,13 @@\n+2010-03-08  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43256\n+\t* resolve.c (resolve_compcall): Don't set 'value.function.name' here\n+\tfor TBPs, otherwise they will not be resolved properly.\n+\t(resolve_function): Use 'value.function.esym' instead of\n+        'value.function.name' to check if we're dealing with a TBP.\n+\t(check_class_members): Set correct type of passed object for all TBPs,\n+\tnot only generic ones, except if the type is abstract.\n+\n 2010-03-04  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/43244"}, {"sha": "16661fdfb40fc1f56562a839e1a8742b8568f8f5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "patch": "@@ -2556,8 +2556,8 @@ resolve_function (gfc_expr *expr)\n     }\n \n   /* If this ia a deferred TBP with an abstract interface (which may\n-     of course be referenced), expr->value.function.name will be set.  */\n-  if (sym && sym->attr.abstract && !expr->value.function.name)\n+     of course be referenced), expr->value.function.esym will be set.  */\n+  if (sym && sym->attr.abstract && !expr->value.function.esym)\n     {\n       gfc_error (\"ABSTRACT INTERFACE '%s' must not be referenced at %L\",\n \t\t sym->name, &expr->where);\n@@ -5124,7 +5124,7 @@ resolve_compcall (gfc_expr* e, bool fcn)\n     return FAILURE;\n \n   e->value.function.actual = newactual;\n-  e->value.function.name = e->value.compcall.name;\n+  e->value.function.name = NULL;\n   e->value.function.esym = target->n.sym;\n   e->value.function.class_esym = NULL;\n   e->value.function.isym = NULL;\n@@ -5178,18 +5178,17 @@ check_class_members (gfc_symbol *derived)\n       return;\n     }\n \n-  if (tbp->n.tb->is_generic)\n+  /* If we have to match a passed class member, force the actual\n+      expression to have the correct type.  */\n+  if (!tbp->n.tb->nopass)\n     {\n-      /* If we have to match a passed class member, force the actual\n-\t expression to have the correct type.  */\n-      if (!tbp->n.tb->nopass)\n-\t{\n-\t  if (e->value.compcall.base_object == NULL)\n-\t    e->value.compcall.base_object =\n-\t\t\textract_compcall_passed_object (e);\n+      if (e->value.compcall.base_object == NULL)\n+\te->value.compcall.base_object = extract_compcall_passed_object (e);\n \n-          e->value.compcall.base_object->ts.type = BT_DERIVED;\n-          e->value.compcall.base_object->ts.u.derived = derived;\n+      if (!derived->attr.abstract)\n+\t{\n+\t  e->value.compcall.base_object->ts.type = BT_DERIVED;\n+\t  e->value.compcall.base_object->ts.u.derived = derived;\n \t}\n     }\n "}, {"sha": "edd3648604c72f7d72a48f19ce3c814b5542819f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "patch": "@@ -1,3 +1,8 @@\n+2010-03-08  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/43256\n+\t* gfortran.dg/typebound_call_13.f03: New.\n+\n 2010-03-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lib/plugin-support.exp (plugin-test-execute): Use PLUGINCC in lieu"}, {"sha": "0800ba50526e4623656841eb5062dc39e059537d", "filename": "gcc/testsuite/gfortran.dg/typebound_call_13.f03", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_13.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d286bac21f41e1680e2f364e0733c8ebf2c9ad/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_13.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_13.f03?ref=b3d286bac21f41e1680e2f364e0733c8ebf2c9ad", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+!\n+! PR 43256: [OOP] TBP with missing optional arg\n+!\n+! Contributed by Janus Weil\n+\n+module module_myobj\n+\n+  implicit none\n+\n+  type :: myobj\n+  contains\n+    procedure, nopass :: myfunc\n+  end type\n+\n+contains\n+\n+  integer function myfunc(status)\n+    integer, optional :: status\n+    if (present(status)) then\n+      myfunc = 1\n+    else\n+      myfunc = 2\n+    end if\n+  end function\n+\n+end module\n+\n+\n+program test_optional\n+\n+  use :: module_myobj\n+  implicit none\n+\n+  integer     :: res = 0\n+  type(myobj) :: myinstance\n+\n+  res = myinstance%myfunc()\n+  if (res /= 2) call abort()\n+\n+end program\n+\n+! { dg-final { cleanup-modules \"module_myobj\" } }"}]}