{"sha": "eb11192f9f32c53936e354837ccf4cad7e7c69b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxMTE5MmY5ZjMyYzUzOTM2ZTM1NDgzN2NjZjRjYWQ3ZTdjNjliMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-31T13:07:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-31T13:07:01Z"}, "message": "(ASM_GLOBALIZE_LABEL): Pass new args to vms_check_external.\n\n(ASM_OUTPUT_EXTERNAL): Just call vms_check_external.\n(ASM_{,FINISH_}DECLARE_OBJECT_NAME, ASM_FILE_END): Define.\n\nFrom-SVN: r8368", "tree": {"sha": "7be15364e5e5d02116d45cdc65e9d03d4fd72fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7be15364e5e5d02116d45cdc65e9d03d4fd72fd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb11192f9f32c53936e354837ccf4cad7e7c69b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb11192f9f32c53936e354837ccf4cad7e7c69b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb11192f9f32c53936e354837ccf4cad7e7c69b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb11192f9f32c53936e354837ccf4cad7e7c69b0/comments", "author": null, "committer": null, "parents": [{"sha": "a252028f29c37224e012050e81883025540b8024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a252028f29c37224e012050e81883025540b8024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a252028f29c37224e012050e81883025540b8024"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "e869b9be12adf7f5279ad3715f7b13694b4b21b7", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb11192f9f32c53936e354837ccf4cad7e7c69b0/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb11192f9f32c53936e354837ccf4cad7e7c69b0/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=eb11192f9f32c53936e354837ccf4cad7e7c69b0", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 1988 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -140,7 +140,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   do { fputs (\".globl \", FILE);\t\t\t\\\n        assemble_name (FILE, NAME);\t\t\\\n        fputs (\"\\n\", FILE);\t\t\t\\\n-       vms_check_external (NAME);\t\t\\\n+       vms_check_external (NULL_TREE, NAME, 0); \\\n      } while (0)\n \n /* Under VMS we write the actual size of the storage to be allocated even\n@@ -165,28 +165,39 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    but that causes linker errors sometimes when the variable was initialized\n    since the size of its definition was not likewise rounded up.  */\n \n+/* Note:  the original ASM_OUTPUT_EXTERNAL code has been moved into\n+   vms_check_external and vms_flush_pending_externals.  */\n+\n #define ASM_OUTPUT_EXTERNAL(FILE,DECL,NAME)\t\t\t\t\\\n-{ if (DECL_INITIAL (DECL) == 0 && TREE_CODE (DECL) != FUNCTION_DECL\t\\\n-      && ! vms_check_external (NAME))\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_READONLY (decl) && ! TREE_THIS_VOLATILE (decl))\t\t\\\n-\tconst_section ();\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n-      fputs (\".comm \", (FILE));\t\t\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      if (DECL_SIZE (DECL) == 0)\t\t\t\t\t\\\n-        fprintf ((FILE), \",0\\n\");\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  tree size_tree;\t\t\t\t\t\t\\\n-\t  size_tree = size_binop (CEIL_DIV_EXPR,\t\t\t\\\n-\t     DECL_SIZE (DECL), size_int (BITS_PER_UNIT));\t\t\\\n-\t  fprintf ((FILE), \",%d\\n\", TREE_INT_CST_LOW (size_tree));\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+{ if (DECL_INITIAL (DECL) == 0 && TREE_CODE (DECL) != FUNCTION_DECL)\t\\\n+    vms_check_external ((DECL), (NAME), 1);\t\t\t\t\\\n }\n \n+/* ASM_OUTPUT_EXTERNAL will have wait until after an initializer is\n+   completed in order to switch sections for an external object, so\n+   use the DECLARE_OBJECT hooks to manage deferred declarations.  */\n+\n+/* This is the default action for ASM_DECLARE_OBJECT_NAME, but if it\n+   is explicitly defined, then ASM_FINISH_DECLARE_OBJECT will be used.  */\n+\n+#define ASM_DECLARE_OBJECT_NAME(ASM_OUT_FILE,NAME,DECL)\t\t\\\n+{ if (output_bytecode)\t\t\t\t\t\t\\\n+    BC_OUTPUT_LABEL ((ASM_OUT_FILE), (NAME));\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_LABEL ((ASM_OUT_FILE), (NAME));\t\t\t\\\n+}\n+\n+/* We don't need to do anything special to finish the current object, but it\n+   should now be safe to output any deferred external global declarations.  */\n+\n+#define ASM_FINISH_DECLARE_OBJECT(FILE,DECL,TOPLVL,ATEND)\t\t\\\n+  vms_flush_pending_externals(FILE)\n+\n+/* Anything still pending must be flushed at the very end.  */\n+\n+#define ASM_FILE_END(STREAM)\t\t\t\t\t\t\\\n+  vms_flush_pending_externals(STREAM)\n+\n /* Here we redefine ASM_OUTPUT_COMMON to select the data_section or the\n    const_section before writing the \".const\" assembler directive.\n    If we were specifying a size of zero for external variables, we would"}]}