{"sha": "324bec558e95584e8c1997575ae9d75978af59f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0YmVjNTU4ZTk1NTg0ZThjMTk5NzU3NWFlOWQ3NTk3OGFmNTlmMQ==", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2020-10-01T08:08:24Z"}, "committer": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2020-10-01T08:08:24Z"}, "message": "PR target/97250: i386: Add support for x86-64-v2, x86-64-v3, x86-64-v4 levels for x86-64\n\nThese micro-architecture levels are defined in the x86-64 psABI:\n\nhttps://gitlab.com/x86-psABIs/x86-64-ABI/-/commit/77566eb03bc6a326811cb7e9\n\nPTA_NO_TUNE is introduced so that the new processor alias table entries\ndo not affect the CPU tuning setting in ix86_tune.\n\nThe tests depend on the macros added in commit 92e652d8c21bd7e66cbb0f900\n(\"i386: Define __LAHF_SAHF__ and __MOVBE__ macros, based on ISA flags\").\n\ngcc/:\n\tPR target/97250\n\t* config/i386/i386.h (PTA_NO_TUNE, PTA_X86_64_BASELINE)\n\t(PTA_X86_64_V2, PTA_X86_64_V3, PTA_X86_64_V4): New.\n\t* common/config/i386/i386-common.c (processor_alias_table):\n\tAdd \"x86-64-v2\", \"x86-64-v3\", \"x86-64-v4\".\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tHandle new PTA_NO_TUNE processor table entries.\n\t* doc/invoke.texi (x86 Options): Document new -march values.\n\ngcc/testsuite/:\n\tPR target/97250\n\t* gcc.target/i386/x86-64-v2.c: New test.\n\t* gcc.target/i386/x86-64-v3.c: New test.\n\t* gcc.target/i386/x86-64-v3-haswell.c: New test.\n\t* gcc.target/i386/x86-64-v3-skylake.c: New test.\n\t* gcc.target/i386/x86-64-v4.c: New test.", "tree": {"sha": "9d8b79794807d2176bb341bcc6a76cacd624ce24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d8b79794807d2176bb341bcc6a76cacd624ce24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/324bec558e95584e8c1997575ae9d75978af59f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324bec558e95584e8c1997575ae9d75978af59f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324bec558e95584e8c1997575ae9d75978af59f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324bec558e95584e8c1997575ae9d75978af59f1/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9"}], "stats": {"total": 452, "additions": 442, "deletions": 10}, "files": [{"sha": "62a620b4430cc60f441ecb8c838ea36567233e10", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -1795,9 +1795,13 @@ const pta processor_alias_table[] =\n     PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR, 0, P_NONE},\n   {\"athlon-mp\", PROCESSOR_ATHLON, CPU_ATHLON,\n     PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR, 0, P_NONE},\n-  {\"x86-64\", PROCESSOR_K8, CPU_K8,\n-    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR,\n-    0, P_NONE},\n+  {\"x86-64\", PROCESSOR_K8, CPU_K8, PTA_X86_64_BASELINE, 0, P_NONE},\n+  {\"x86-64-v2\", PROCESSOR_K8, CPU_GENERIC, PTA_X86_64_V2 | PTA_NO_TUNE,\n+   0, P_NONE},\n+  {\"x86-64-v3\", PROCESSOR_K8, CPU_GENERIC, PTA_X86_64_V3 | PTA_NO_TUNE,\n+   0, P_NONE},\n+  {\"x86-64-v4\", PROCESSOR_K8, CPU_GENERIC, PTA_X86_64_V4 | PTA_NO_TUNE,\n+   0, P_NONE},\n   {\"eden-x2\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR,\n     0, P_NONE},"}, {"sha": "a59bd703880237a90d9c8b4e37d0296a6c98c471", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -2058,10 +2058,27 @@ ix86_option_override_internal (bool main_args_p,\n \t    return false;\n \t  }\n \n+\t/* The feature-only micro-architecture levels that use\n+\t   PTA_NO_TUNE are only defined for the x86-64 psABI.  */\n+\tif ((processor_alias_table[i].flags & PTA_NO_TUNE) != 0\n+\t    && (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n+\t\t|| opts->x_ix86_abi != SYSV_ABI))\n+\t  {\n+\t    error (G_(\"%<%s%> architecture level is only defined\"\n+\t\t      \" for the x86-64 psABI\"), opts->x_ix86_arch_string);\n+\t    return false;\n+\t  }\n+\n \tix86_schedule = processor_alias_table[i].schedule;\n \tix86_arch = processor_alias_table[i].processor;\n-\t/* Default cpu tuning to the architecture.  */\n-\tix86_tune = ix86_arch;\n+\n+\t/* Default cpu tuning to the architecture, unless the table\n+\t   entry requests not to do this.  Used by the x86-64 psABI\n+\t   micro-architecture levels.  */\n+\tif ((processor_alias_table[i].flags & PTA_NO_TUNE) == 0)\n+\t  ix86_tune = ix86_arch;\n+\telse\n+\t  ix86_tune = PROCESSOR_GENERIC;\n \n \tif (((processor_alias_table[i].flags & PTA_MMX) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MMX))\n@@ -2384,7 +2401,8 @@ ix86_option_override_internal (bool main_args_p,\n     ix86_arch_features[i] = !!(initial_ix86_arch_features[i] & ix86_arch_mask);\n \n   for (i = 0; i < pta_size; i++)\n-    if (! strcmp (opts->x_ix86_tune_string, processor_alias_table[i].name))\n+    if (! strcmp (opts->x_ix86_tune_string, processor_alias_table[i].name)\n+\t&& (processor_alias_table[i].flags & PTA_NO_TUNE) == 0)\n       {\n \tix86_schedule = processor_alias_table[i].schedule;\n \tix86_tune = processor_alias_table[i].processor;\n@@ -2428,8 +2446,9 @@ ix86_option_override_internal (bool main_args_p,\n \n       auto_vec <const char *> candidates;\n       for (i = 0; i < pta_size; i++)\n-\tif (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n-\t    || ((processor_alias_table[i].flags & PTA_64BIT) != 0))\n+\tif ((!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n+\t     || ((processor_alias_table[i].flags & PTA_64BIT) != 0))\n+\t    && (processor_alias_table[i].flags & PTA_NO_TUNE) == 0)\n \t  candidates.safe_push (processor_alias_table[i].name);\n \n #ifdef HAVE_LOCAL_CPU_DETECT"}, {"sha": "9a5de6a0e9cab10ac7ae34ac9ad5edd1f082e4b3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -2433,7 +2433,7 @@ const wide_int_bitmask PTA_AVX512F (HOST_WIDE_INT_1U << 40);\n const wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n const wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n const wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n-/* Hole after PTA_MPX was removed.  */\n+const wide_int_bitmask PTA_NO_TUNE (HOST_WIDE_INT_1U << 44);\n const wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n const wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n const wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n@@ -2476,6 +2476,15 @@ const wide_int_bitmask PTA_AMX_TILE(0, HOST_WIDE_INT_1U << 19);\n const wide_int_bitmask PTA_AMX_INT8(0, HOST_WIDE_INT_1U << 20);\n const wide_int_bitmask PTA_AMX_BF16(0, HOST_WIDE_INT_1U << 21);\n \n+const wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n+  | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR;\n+const wide_int_bitmask PTA_X86_64_V2 = (PTA_X86_64_BASELINE & (~PTA_NO_SAHF))\n+  | PTA_CX16 | PTA_POPCNT | PTA_SSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_SSSE3;\n+const wide_int_bitmask PTA_X86_64_V3 = PTA_X86_64_V2\n+  | PTA_AVX | PTA_AVX2 | PTA_BMI | PTA_BMI2 | PTA_F16C | PTA_FMA | PTA_LZCNT\n+  | PTA_MOVBE | PTA_XSAVE;\n+const wide_int_bitmask PTA_X86_64_V4 = PTA_X86_64_V3\n+  | PTA_AVX512F | PTA_AVX512BW | PTA_AVX512CD | PTA_AVX512DQ | PTA_AVX512VL;\n const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n   | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2"}, {"sha": "a5ecb1b49372f8029d5bf0625b0e0c762f1951ae", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -29244,7 +29244,7 @@ Generate instructions for the machine type @var{cpu-type}.  In contrast to\n for the specified @var{cpu-type}, @option{-march=@var{cpu-type}} allows GCC\n to generate code that may not run at all on processors other than the one\n indicated.  Specifying @option{-march=@var{cpu-type}} implies \n-@option{-mtune=@var{cpu-type}}.\n+@option{-mtune=@var{cpu-type}}, except where noted otherwise.\n \n The choices for @var{cpu-type} are:\n \n@@ -29260,6 +29260,19 @@ of the selected instruction set.\n @item x86-64\n A generic CPU with 64-bit extensions.\n \n+@item x86-64-v2\n+@itemx x86-64-v3\n+@itemx x86-64-v4\n+These choices for @var{cpu-type} select the corresponding\n+micro-architecture level from the x86-64 psABI.  They are only available\n+when compiling for an x86-64 target that uses the System V psABI@.\n+\n+Since these @var{cpu-type} values do not have a corresponding\n+@option{-mtune} setting, using @option{-march} with these values enables\n+generic tuning.  Specific tuning can be enabled using the\n+@option{-mtune=@var{other-cpu-type}} option with an appropriate\n+@var{other-cpu-type} value.\n+\n @item i386\n Original Intel i386 CPU@.\n "}, {"sha": "0f3df3605b503a08cd12de7f6ff0c3d372aa7356", "filename": "gcc/testsuite/gcc.target/i386/x86-64-v2.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v2.c?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mabi=sysv -march=x86-64-v2\" } */\n+\n+/* Verify that the CPU features required by x86-64-v2 are enabled.  */\n+\n+#ifndef __MMX__\n+# error __MMX__ not defined\n+#endif\n+#ifndef __SSE__\n+# error __SSE__ not defined\n+#endif\n+#ifndef __SSE2__\n+# error __SSE2__ not defined\n+#endif\n+#ifndef __LAHF_SAHF__\n+# error __LAHF_SAHF__ not defined\n+#endif\n+#ifndef __POPCNT__\n+# error __POPCNT__ not defined\n+#endif\n+#ifndef __SSE3__\n+# error __SSE3__ not defined\n+#endif\n+#ifndef __SSE4_1__\n+# error __SSE4_1__ not defined\n+#endif\n+#ifndef __SSE4_2__\n+# error __SSE4_2__ not defined\n+#endif\n+#ifndef __SSSE3__\n+# error __SSSE3__ not defined\n+#endif\n+#ifdef __SSE4A__\n+# error __SSE4A__ defined\n+#endif\n+#ifdef __AVX__\n+# error __AVX__ defined\n+#endif\n+#ifdef __AVX2__\n+# error __AVX2__ defined\n+#endif\n+#ifdef __F16C__\n+# error __F16C__ defined\n+#endif\n+#ifdef __FMA__\n+# error __FMA__ defined\n+#endif\n+#ifdef __LZCNT__\n+# error __LZCNT__ defined\n+#endif\n+#ifdef __MOVBE__\n+# error __MOVBE__ defined\n+#endif\n+#ifdef __XSAVE__\n+# error __XSAVE__ defined\n+#endif\n+#ifdef __XSAVEC__\n+# error __XSAVEC__ defined\n+#endif\n+#ifdef __AVX512F__\n+# error __AVX512F__ defined\n+#endif\n+#ifdef __AVX512BW__\n+# error __AVX512BW__ defined\n+#endif\n+#ifdef __AVX512CD__\n+# error __AVX512CD__ defined\n+#endif\n+#ifdef __AVX512DQ__\n+# error __AVX512DQ__ defined\n+#endif\n+#ifdef __AVX512VL__\n+# error __AVX512VL__ defined\n+#endif\n+#ifdef __AVX512PF__\n+# error __AVX512PF__ defined\n+#endif\n+#ifdef __AVX512VBMI__\n+# error __AVX512VBMI__ defined\n+#endif\n+#ifdef __AVX512IFMA__\n+# error __AVX512IFMA__ defined\n+#endif\n+#ifdef __AVX512VNNIW__\n+# error __AVX512VNNIW__ defined\n+#endif\n+#ifdef __AVX512VBMI2__\n+# error __AVX512VBMI2__ defined\n+#endif\n+#ifdef __AVX5124FMAPS__\n+# error __AVX5124FMAPS__ defined\n+#endif\n+#ifdef __AVX5124BITALG__\n+# error __AVX5124BITALG__ defined\n+#endif\n+#ifdef __AVX5124VPOPCNTDQ__\n+# error __AVX5124VPOPCNTDQ__ defined\n+#endif\n+#ifdef __AVX5124BF16__\n+# error __AVX5124BF16__ defined\n+#endif\n+#ifdef __AVX512VP2INTERSECT__\n+# error __AVX512VP2INTERSECT__ defined\n+#endif\n+#ifdef __AVX512VNNI__\n+# error __AVX512VNNI__ defined\n+#endif\n+#ifdef __FMA4__\n+# error __FMA4__ defined\n+#endif\n+#ifdef __3dNOW__\n+# error __3dNOW__ defined\n+#endif\n+#ifdef __tune_k8__\n+# error __tune_k8__ defined\n+#endif"}, {"sha": "216467e1376947f9430a95d019222c21f1a8c9dd", "filename": "gcc/testsuite/gcc.target/i386/x86-64-v3-haswell.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3-haswell.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3-haswell.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3-haswell.c?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mabi=sysv -mtune=haswell -march=x86-64-v3\" } */\n+\n+/* Check that -march=x86-64-v3 preserves tuning.  */\n+\n+/* PCLMUL is not in x86-64-v3, but in -march=haswell.  Make sure that\n+   it is absent.  */\n+#ifdef __PCLMUL__\n+# error __PCLMUL__ is defined\n+#endif\n+\n+/* -mtune=haswell tuning is preserved.  */\n+#ifndef __k8__\n+# error __k8__ is not defined\n+#endif\n+#ifndef __tune_haswell__\n+# error __tune_haswell__ is not defined\n+#endif"}, {"sha": "aa34862cc59b5924630d19153457d3ec647680b8", "filename": "gcc/testsuite/gcc.target/i386/x86-64-v3-skylake.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3-skylake.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3-skylake.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3-skylake.c?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mabi=sysv -march=skylake -march=x86-64-v3\" } */\n+\n+/* Check that -march=x86-64-v3 overrides a previous -march= setting.  */\n+\n+/* PCLMUL is not in x86-64-v3, but in -march=skylake.  Make sure that\n+   it is absent.  */\n+#ifdef __PCLMUL__\n+# error __PCLMUL__ is defined\n+#endif\n+\n+/* -march=skylake tuning is deactivated.  */\n+#ifndef __k8__\n+# error __k8__ is not defined\n+#endif\n+#ifdef __skylake__\n+# error __skylake__ is defined\n+#endif\n+#ifdef __tune_skylake__\n+# error __tune_skylake__ is defined\n+#endif"}, {"sha": "16a94b1802157756978ea1449fe75d3060bab866", "filename": "gcc/testsuite/gcc.target/i386/x86-64-v3.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v3.c?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mabi=sysv -march=x86-64-v3\" } */\n+\n+/* Verify that the CPU features required by x86-64-v4 are enabled.  */\n+\n+#ifndef __MMX__\n+# error __MMX__ not defined\n+#endif\n+#ifndef __SSE__\n+# error __SSE__ not defined\n+#endif\n+#ifndef __SSE2__\n+# error __SSE2__ not defined\n+#endif\n+#ifndef __LAHF_SAHF__\n+# error __LAHF_SAHF__ not defined\n+#endif\n+#ifndef __POPCNT__\n+# error __POPCNT__ not defined\n+#endif\n+#ifndef __SSE3__\n+# error __SSE3__ not defined\n+#endif\n+#ifndef __SSE4_1__\n+# error __SSE4_1__ not defined\n+#endif\n+#ifndef __SSE4_2__\n+# error __SSE4_2__ not defined\n+#endif\n+#ifndef __SSSE3__\n+# error __SSSE3__ not defined\n+#endif\n+#ifdef __SSE4A__\n+# error __SSE4A__ defined\n+#endif\n+#ifndef __AVX__\n+# error __AVX__ not defined\n+#endif\n+#ifndef __AVX2__\n+# error __AVX2__ not defined\n+#endif\n+#ifndef __F16C__\n+# error __F16C__ not defined\n+#endif\n+#ifndef __FMA__\n+# error __FMA__ not defined\n+#endif\n+#ifndef __LZCNT__\n+# error __LZCNT__ not defined\n+#endif\n+#ifndef __MOVBE__\n+# error __MOVBE__ not defined\n+#endif\n+#ifndef __XSAVE__\n+# error __XSAVE__ not defined\n+#endif\n+#ifdef __XSAVEC__\n+# error __XSAVEC__ defined\n+#endif\n+#ifdef __AVX512F__\n+# error __AVX512F__ defined\n+#endif\n+#ifdef __AVX512BW__\n+# error __AVX512BW__ defined\n+#endif\n+#ifdef __AVX512CD__\n+# error __AVX512CD__ defined\n+#endif\n+#ifdef __AVX512DQ__\n+# error __AVX512DQ__ defined\n+#endif\n+#ifdef __AVX512VL__\n+# error __AVX512VL__ defined\n+#endif\n+#ifdef __AVX512PF__\n+# error __AVX512PF__ defined\n+#endif\n+#ifdef __AVX512VBMI__\n+# error __AVX512VBMI__ defined\n+#endif\n+#ifdef __AVX512IFMA__\n+# error __AVX512IFMA__ defined\n+#endif\n+#ifdef __AVX512VNNIW__\n+# error __AVX512VNNIW__ defined\n+#endif\n+#ifdef __AVX512VBMI2__\n+# error __AVX512VBMI2__ defined\n+#endif\n+#ifdef __AVX5124FMAPS__\n+# error __AVX5124FMAPS__ defined\n+#endif\n+#ifdef __AVX5124BITALG__\n+# error __AVX5124BITALG__ defined\n+#endif\n+#ifdef __AVX5124VPOPCNTDQ__\n+# error __AVX5124VPOPCNTDQ__ defined\n+#endif\n+#ifdef __AVX5124BF16__\n+# error __AVX5124BF16__ defined\n+#endif\n+#ifdef __AVX512VP2INTERSECT__\n+# error __AVX512VP2INTERSECT__ defined\n+#endif\n+#ifdef __AVX512VNNI__\n+# error __AVX512VNNI__ defined\n+#endif\n+#ifdef __FMA4__\n+# error __FMA4__ defined\n+#endif\n+#ifdef __3dNOW__\n+# error __3dNOW__ defined\n+#endif\n+#ifdef __tune_k8__\n+# error __tune_k8__ defined\n+#endif"}, {"sha": "48e928c2955204449d70aca5dbb66c9f201d3aa0", "filename": "gcc/testsuite/gcc.target/i386/x86-64-v4.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324bec558e95584e8c1997575ae9d75978af59f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-64-v4.c?ref=324bec558e95584e8c1997575ae9d75978af59f1", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mabi=sysv -march=x86-64-v4\" } */\n+\n+/* Verify that the CPU features required by x86-64-v4 are enabled.  */\n+\n+#ifndef __MMX__\n+# error __MMX__ not defined\n+#endif\n+#ifndef __SSE__\n+# error __SSE__ not defined\n+#endif\n+#ifndef __SSE2__\n+# error __SSE2__ not defined\n+#endif\n+#ifndef __LAHF_SAHF__\n+# error __LAHF_SAHF__ not defined\n+#endif\n+#ifndef __POPCNT__\n+# error __POPCNT__ not defined\n+#endif\n+#ifndef __SSE3__\n+# error __SSE3__ not defined\n+#endif\n+#ifndef __SSE4_1__\n+# error __SSE4_1__ not defined\n+#endif\n+#ifndef __SSE4_2__\n+# error __SSE4_2__ not defined\n+#endif\n+#ifndef __SSSE3__\n+# error __SSSE3__ not defined\n+#endif\n+#ifdef __SSE4A__\n+# error __SSE4A__ defined\n+#endif\n+#ifndef __AVX__\n+# error __AVX__ not defined\n+#endif\n+#ifndef __AVX2__\n+# error __AVX2__ not defined\n+#endif\n+#ifndef __F16C__\n+# error __F16C__ not defined\n+#endif\n+#ifndef __FMA__\n+# error __FMA__ not defined\n+#endif\n+#ifndef __LZCNT__\n+# error __LZCNT__ not defined\n+#endif\n+#ifndef __MOVBE__\n+# error __MOVBE__ not defined\n+#endif\n+#ifndef __XSAVE__\n+# error __XSAVE__ not defined\n+#endif\n+#ifdef __XSAVEC__\n+# error __XSAVEC__ defined\n+#endif\n+#ifndef __AVX512F__\n+# error __AVX512F__ not defined\n+#endif\n+#ifndef __AVX512BW__\n+# error __AVX512BW__ not defined\n+#endif\n+#ifndef __AVX512CD__\n+# error __AVX512CD__ not defined\n+#endif\n+#ifndef __AVX512DQ__\n+# error __AVX512DQ__ not defined\n+#endif\n+#ifndef __AVX512VL__\n+# error __AVX512VL__ not defined\n+#endif\n+#ifdef __AVX512PF__\n+# error __AVX512PF__ defined\n+#endif\n+#ifdef __AVX512VBMI__\n+# error __AVX512VBMI__ defined\n+#endif\n+#ifdef __AVX512IFMA__\n+# error __AVX512IFMA__ defined\n+#endif\n+#ifdef __AVX512VNNIW__\n+# error __AVX512VNNIW__ defined\n+#endif\n+#ifdef __AVX512VBMI2__\n+# error __AVX512VBMI2__ defined\n+#endif\n+#ifdef __AVX5124FMAPS__\n+# error __AVX5124FMAPS__ defined\n+#endif\n+#ifdef __AVX5124BITALG__\n+# error __AVX5124BITALG__ defined\n+#endif\n+#ifdef __AVX5124VPOPCNTDQ__\n+# error __AVX5124VPOPCNTDQ__ defined\n+#endif\n+#ifdef __AVX5124BF16__\n+# error __AVX5124BF16__ defined\n+#endif\n+#ifdef __AVX512VP2INTERSECT__\n+# error __AVX512VP2INTERSECT__ defined\n+#endif\n+#ifdef __AVX512VNNI__\n+# error __AVX512VNNI__ defined\n+#endif\n+#ifdef __FMA4__\n+# error __FMA4__ defined\n+#endif\n+#ifdef __3dNOW__\n+# error __3dNOW__ defined\n+#endif\n+#ifdef __tune_k8__\n+# error __tune_k8__ defined\n+#endif"}]}