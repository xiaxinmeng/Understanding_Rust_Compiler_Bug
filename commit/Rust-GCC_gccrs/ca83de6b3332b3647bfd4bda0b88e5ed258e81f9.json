{"sha": "ca83de6b3332b3647bfd4bda0b88e5ed258e81f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4M2RlNmIzMzMyYjM2NDdiZmQ0YmRhMGI4OGU1ZWQyNThlODFmOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-09-03T22:23:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-09-03T22:23:32Z"}, "message": "final.c (output_in_slot): New global variable.\n\n\t* final.c (output_in_slot): New global variable.\n\t(final_scan_insn): Add new state '2' to the 'nopeepholes' parameter.\n\tPass 2 as 'nopeepholes' to self for insns in a SEQUENCE.  Set\n\t'output_in_slot' before invoking output_asm_insn.\n\t(output_asm_insn): Add a space after the tab if 'output_in_slot'\n\tis set.\n\t* config/sparc/sparc.c (output_return): Pass 2 as 'nopeepholes' to\n\tfinal_scan_insn.\n\t(output_sibcall): Likewise.\n\nFrom-SVN: r87056", "tree": {"sha": "3f96cb5eb38eda11441400b36fe548ce0ee364c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f96cb5eb38eda11441400b36fe548ce0ee364c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37e6d6fe839adecbfc5ffeeeb32bd230a3701550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e6d6fe839adecbfc5ffeeeb32bd230a3701550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e6d6fe839adecbfc5ffeeeb32bd230a3701550"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "175598c53e1c19cd1f10f712558df2506ee03c31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca83de6b3332b3647bfd4bda0b88e5ed258e81f9", "patch": "@@ -1,3 +1,15 @@\n+2004-09-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* final.c (output_in_slot): New global variable.\n+\t(final_scan_insn): Add new state '2' to the 'nopeepholes' parameter.\n+\tPass 2 as 'nopeepholes' to self for insns in a SEQUENCE.  Set\n+\t'output_in_slot' before invoking output_asm_insn.\n+\t(output_asm_insn): Add a space after the tab if 'output_in_slot'\n+\tis set.\n+\t* config/sparc/sparc.c (output_return): Pass 2 as 'nopeepholes' to\n+\tfinal_scan_insn.\n+\t(output_sibcall): Likewise.\n+\n 2004-09-03  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-operands.c (fini_ssa_operands): ggc_free unused arrays."}, {"sha": "cf7ac040f3ef0790cf7f171ccdf4aa96f7b7b5f7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ca83de6b3332b3647bfd4bda0b88e5ed258e81f9", "patch": "@@ -4707,7 +4707,7 @@ output_return (rtx insn)\n \t  if (! delay)\n \t    abort ();\n \n-\t  final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n+\t  final_scan_insn (delay, asm_out_file, 1, 0, 2, NULL);\n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;\n \t}\n@@ -4756,7 +4756,7 @@ output_return (rtx insn)\n \t      epilogue_renumber (&pat, 0);\n \t      fprintf (asm_out_file, \"\\treturn\\t%%i7+%d\\n\",\n \t\t       sparc_skip_caller_unimp ? 12 : 8);\n-\t      final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n+\t      final_scan_insn (delay, asm_out_file, 1, 0, 2, NULL);\n \t    }\n \t  else\n \t    {\n@@ -4817,7 +4817,7 @@ output_sibcall (rtx insn, rtx call_operand)\n \n \t  output_asm_insn (\"sethi\\t%%hi(%a0), %%g1\", operands);\n \t  output_asm_insn (\"jmp\\t%%g1 + %%lo(%a0)\", operands);\n-\t  final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n+\t  final_scan_insn (delay, asm_out_file, 1, 0, 2, NULL);\n \n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;"}, {"sha": "e1c01483c5f875f89ae79d069d3672bd98ba0fa4", "filename": "gcc/final.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca83de6b3332b3647bfd4bda0b88e5ed258e81f9/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ca83de6b3332b3647bfd4bda0b88e5ed258e81f9", "patch": "@@ -200,6 +200,10 @@ static int app_on;\n \n rtx final_sequence;\n \n+/* True if we are outputting insns in a delay slot.  This is used\n+   to prettify the assembly.  */\n+static bool output_in_slot;\n+\n #ifdef ASSEMBLER_DIALECT\n \n /* Number of the assembler dialect to use, starting at 0.  */\n@@ -1663,8 +1667,11 @@ scan_ahead_for_unlikely_executed_note (rtx insn)\n    is the insn being scanned.\n    Value returned is the next insn to be scanned.\n \n-   NOPEEPHOLES is the flag to disallow peephole processing (currently\n-   used for within delayed branch sequence output).\n+   NOPEEPHOLES is used to disallow peephole processing:\n+    - 0: peepholes are allowed,\n+    - 1: peepholes are not allowed,\n+    - 2: peepholes are not allowed and we are in the\n+         slot of a delayed branch.\n \n    SEEN is used to track the end of the prologue, for emitting\n    debug information.  We force the emission of a line note after\n@@ -1674,8 +1681,7 @@ scan_ahead_for_unlikely_executed_note (rtx insn)\n \n rtx\n final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n-\t\t int prescan, int nopeepholes ATTRIBUTE_UNUSED,\n-\t\t int *seen)\n+\t\t int prescan, int nopeepholes, int *seen)\n {\n #ifdef HAVE_cc0\n   rtx set;\n@@ -2195,7 +2201,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t/* We loop in case any instruction in a delay slot gets\n \t\t   split.  */\n \t\tdo\n-\t\t  insn = final_scan_insn (insn, file, 0, prescan, 1, seen);\n+\t\t  insn = final_scan_insn (insn, file, 0, prescan, 2, seen);\n \t\twhile (insn != next);\n \t      }\n #ifdef DBR_OUTPUT_SEQEND\n@@ -2527,7 +2533,9 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #endif\n \n \t/* Output assembler code from the template.  */\n+\toutput_in_slot = (nopeepholes > 1);\n \toutput_asm_insn (template, recog_data.operand);\n+\toutput_in_slot = false;\n \n \t/* If necessary, report the effect that the instruction has on\n \t   the unwind info.   We've already done this for delay slots\n@@ -2988,6 +2996,8 @@ output_asm_insn (const char *template, rtx *operands)\n   memset (opoutput, 0, sizeof opoutput);\n   p = template;\n   putc ('\\t', asm_out_file);\n+  if (output_in_slot)\n+    putc (' ', asm_out_file);\n \n #ifdef ASM_OUTPUT_OPCODE\n   ASM_OUTPUT_OPCODE (asm_out_file, p);"}]}