{"sha": "a238cd8bd12400c330fc94ac4f911ad5d3848395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzOGNkOGJkMTI0MDBjMzMwZmM5NGFjNGY5MTFhZDVkMzg0ODM5NQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-07-29T19:35:05Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-07-29T19:35:05Z"}, "message": "rs6000.md (absdi2 define_split): Swap operands of MINUS.\n\n        * rs6000/rs6000.md (absdi2 define_split): Swap operands of MINUS.\n        * rs6000/rs6000.c (mask64_operand): Use HOST_BITS_PER_WIDE_INT.\n        (print_operand, case 'B'): Don't fall through.\n        (print_operand, case 'S'): Correct mask begin/end computation.\n        Use HOST_BITS_PER_WIDE_INT.\n        * rs6000/rs6000.h (CPP_PREDEFINES): Define _LONG_LONG.\n        (CONDITIONAL_REGISTER_USAGE): GPR13 fixed if TARGET_64BIT.\n        * rs6000/aix41.h (CPP_PREDEFINES): Same.\n        * rs6000/aix43.h (CPP_PREDEFINES): Same.\n\nFrom-SVN: r21474", "tree": {"sha": "b58ce5d7078c287fe8c2d45d7e576c36143d8696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b58ce5d7078c287fe8c2d45d7e576c36143d8696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a238cd8bd12400c330fc94ac4f911ad5d3848395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a238cd8bd12400c330fc94ac4f911ad5d3848395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a238cd8bd12400c330fc94ac4f911ad5d3848395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a238cd8bd12400c330fc94ac4f911ad5d3848395/comments", "author": null, "committer": null, "parents": [{"sha": "19f1bd3476fd1c2eeb36ef5943af1e6431c8c726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f1bd3476fd1c2eeb36ef5943af1e6431c8c726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f1bd3476fd1c2eeb36ef5943af1e6431c8c726"}], "stats": {"total": 100, "additions": 56, "deletions": 44}, "files": [{"sha": "5ea6d86daa4d31f72952ee99897caf0d4db1e818", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a238cd8bd12400c330fc94ac4f911ad5d3848395", "patch": "@@ -1,3 +1,15 @@\n+Wed Jul 29 22:18:14 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000/rs6000.md (absdi2 define_split): Swap operands of MINUS.\n+\t* rs6000/rs6000.c (mask64_operand): Use HOST_BITS_PER_WIDE_INT.\n+\t(print_operand, case 'B'): Don't fall through.\n+\t(print_operand, case 'S'): Correct mask begin/end computation.\n+\tUse HOST_BITS_PER_WIDE_INT.\n+\t* rs6000/rs6000.h (CPP_PREDEFINES): Define _LONG_LONG.\n+\t(CONDITIONAL_REGISTER_USAGE): GPR13 fixed if TARGET_64BIT.\n+\t* rs6000/aix41.h (CPP_PREDEFINES): Same.\n+\t* rs6000/aix43.h (CPP_PREDEFINES): Same.\n+\n Wed Jul 29 11:47:10 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/thumb.md (extendqisi2_insn): Remove earlyclobber"}, {"sha": "b35fe93de71a4cacce315a13587dbc911cd7725f", "filename": "gcc/config/rs6000/aix41.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Faix41.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Faix41.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix41.h?ref=a238cd8bd12400c330fc94ac4f911ad5d3848395", "patch": "@@ -70,7 +70,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D_IBMR2 -D_POWER -D_AIX -D_AIX32 -D_AIX41 \\\n--Asystem(unix) -Asystem(aix)\"\n+-D_LONG_LONG -Asystem(unix) -Asystem(aix)\"\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\"}, {"sha": "124fc17c0403fa3531a93fac1c2827fb6a770c53", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=a238cd8bd12400c330fc94ac4f911ad5d3848395", "patch": "@@ -92,7 +92,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D_IBMR2 -D_POWER -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 \\\n--Asystem(unix) -Asystem(aix)\"\n+-D_LONG_LONG -Asystem(unix) -Asystem(aix)\"\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\"}, {"sha": "d4cb695575b8665f28435e5a51dd6924bcf2a737", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a238cd8bd12400c330fc94ac4f911ad5d3848395", "patch": "@@ -938,7 +938,7 @@ mask64_operand (op, mode)\n \tif (((c >>= 1) & 1) != last_bit_value)\n \t  last_bit_value ^= 1, transitions++;\n \n-#if HOST_BITS_PER_INT == 32\n+#if HOST_BITS_PER_WIDE_INT == 32\n       /* Consider CONST_INT sign-extended.  */\n       transitions += (last_bit_value != 1);\n #endif\n@@ -949,20 +949,20 @@ mask64_operand (op, mode)\n \t   && (mode == VOIDmode || mode == DImode))\n     {\n       HOST_WIDE_INT low = CONST_DOUBLE_LOW (op);\n-#if HOST_BITS_PER_INT == 32\n+#if HOST_BITS_PER_WIDE_INT == 32\n       HOST_WIDE_INT high = CONST_DOUBLE_HIGH (op);\n #endif\n       int i;\n       int last_bit_value;\n       int transitions = 0;\n \n       if ((low == 0\n-#if HOST_BITS_PER_INT == 32\n+#if HOST_BITS_PER_WIDE_INT == 32\n \t  && high == 0\n #endif\n \t   )\n \t  || (low == ~0\n-#if HOST_BITS_PER_INT == 32\n+#if HOST_BITS_PER_WIDE_INT == 32\n \t      && high == ~0\n #endif\n \t      ))\n@@ -974,7 +974,7 @@ mask64_operand (op, mode)\n \tif (((low >>= 1) & 1) != last_bit_value)\n \t  last_bit_value ^= 1, transitions++;\n \n-#if HOST_BITS_PER_INT == 32\n+#if HOST_BITS_PER_WIDE_INT == 32\n       if ((high & 1) != last_bit_value)\n \tlast_bit_value ^= 1, transitions++;\n \n@@ -2544,6 +2544,7 @@ print_operand (file, x, code)\n       /* If the low-order bit is zero, write 'r'; otherwise, write 'l'\n \t for 64-bit mask direction.  */\n       putc (((INT_LOWPART(x) & 1) == 0 ? 'r' : 'l'), file);\n+      return;\n \n     case 'C':\n       /* This is an optional cror needed for LE or GE floating-point\n@@ -2824,58 +2825,54 @@ print_operand (file, x, code)\n \n       if (val & 1)      /* Clear Left */\n \t{\n-\t  if (val == 1)\n-\t    i = 0;\n-\t  else\n-\t    for (i = 1; i < HOST_BITS_PER_WIDE_INT; i++)\n-\t      if (!((val >>= 1) & 1))\n-\t\tbreak;\n+\t  for (i = 0; i < HOST_BITS_PER_WIDE_INT; i++)\n+\t    if (!((val >>= 1) & 1))\n+\t      break;\n \n-#if HOST_BITS_PER_INT == 32\n-\tif (GET_CODE (x) == CONST_DOUBLE && i == 32)\n-\t  {\n-\t    val = CONST_DOUBLE_HIGH (x);\n+#if HOST_BITS_PER_WIDE_INT == 32\n+\t  if (GET_CODE (x) == CONST_DOUBLE && i == 32)\n+\t    {\n+\t      val = CONST_DOUBLE_HIGH (x);\n \n-\t    if (val == 0)\n-\t      --i;\n-\t    else if (val == 1)\n-\t      ;\n-\t    else\n-\t      for (i = 33; i < 64; i++)\n-\t\tif (!((val >>= 1) & 1))\n-\t\t  break;\n-\t  }\n+\t      if (val == 0)\n+\t\t--i;\n+\t      else\n+\t\tfor (i = 32; i < 64; i++)\n+\t\t  if (!((val >>= 1) & 1))\n+\t\t    break;\n+\t    }\n #endif\n+\t/* i = index of last set bit from right\n+\t   mask begins at 63 - i from left */\n+\t  if (i > 63)\n+\t    output_operand_lossage (\"%%S computed all 1's mask\");\n \t  fprintf (file, \"%d\", 63 - i);\n \t  return;\n \t}\n       else\t/* Clear Right */\n \t{\n-\t  val = (GET_CODE (x) == CONST_INT ? INTVAL (x) : CONST_DOUBLE_HIGH (x));\n-\n-\t  if (val == (-1 << (HOST_BITS_PER_WIDE_INT-1)))\n-\t    i = 0;\n-\t  else\n-\t    for (i = 1; i < HOST_BITS_PER_WIDE_INT; i++)\n-\t      if ((val <<= 1) < 0)\n-\t\tbreak;\n+\t  for (i = 0; i < HOST_BITS_PER_WIDE_INT; i++)\n+\t    if ((val >>= 1) & 1)\n+\t      break;\n \n-#if HOST_BITS_PER_INT == 32\n+#if HOST_BITS_PER_WIDE_INT == 32\n \tif (GET_CODE (x) == CONST_DOUBLE && i == 32)\n \t  {\n-\t    val = CONST_DOUBLE_LOW (x);\n+\t    val = CONST_DOUBLE_HIGH (x);\n \n-\t    if (val == 0)\n+\t    if (val == (HOST_WIDE_INT) -1)\n \t      --i;\n-\t    else if (val == (-1 << (HOST_BITS_PER_WIDE_INT-1)))\n-\t      ;\n \t    else\n-\t      for (i = 33; i < 64; i++)\n-\t\tif ((val <<= 1) < 0)\n+\t      for (i = 32; i < 64; i++)\n+\t\tif ((val >>= 1) & 1)\n \t\t  break;\n \t  }\n #endif\n-\t  fprintf (file, \"%d\", i);\n+\t/* i = index of last clear bit from right\n+\t   mask ends at 62 - i from left */\n+\t  if (i > 62)\n+\t    output_operand_lossage (\"%%S computed all 0's mask\");\n+\t  fprintf (file, \"%d\", 62 - i);\n \t  return;\n \t}\n "}, {"sha": "6aa8256a0739d984fa8762ea57b941b24692b82d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a238cd8bd12400c330fc94ac4f911ad5d3848395", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Names to predefine in the preprocessor for this target machine.  */\n \n-#define CPP_PREDEFINES \"-D_IBMR2 -D_POWER -D_AIX -D_AIX32 \\\n+#define CPP_PREDEFINES \"-D_IBMR2 -D_POWER -D_AIX -D_AIX32 -D_LONG_LONG \\\n -Asystem(unix) -Asystem(aix) -Acpu(rs6000) -Amachine(rs6000)\"\n \n /* Print subsidiary information on the compiler version in use.  */\n@@ -841,12 +841,15 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n /* Define this macro to change register usage conditional on target flags.\n    Set MQ register fixed (already call_used) if not POWER architecture\n    (RIOS1, RIOS2, RSC, and PPC601) so that it will not be allocated.\n+   64-bit AIX reserves GPR13 for thread-private data.\n    Conditionally disable FPRs.  */\n \n #define CONDITIONAL_REGISTER_USAGE\t\\\n {\t\t\t\t\t\\\n   if (! TARGET_POWER)\t\t\t\\\n     fixed_regs[64] = 1;\t\t\t\\\n+  if (TARGET_64BIT)\t\t\t\\\n+    fixed_regs[13] = call_used_regs[13] = 1; \\\n   if (TARGET_SOFT_FLOAT)\t\t\\\n     for (i = 32; i < 64; i++)\t\t\\\n       fixed_regs[i] = call_used_regs[i] = 1; \\"}, {"sha": "d203e49b7509f774e25d15a98efbe1a8231ee38c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a238cd8bd12400c330fc94ac4f911ad5d3848395/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a238cd8bd12400c330fc94ac4f911ad5d3848395", "patch": "@@ -4496,7 +4496,7 @@\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 2) (ashiftrt:DI (match_dup 1) (const_int 63)))\n    (set (match_dup 0) (xor:DI (match_dup 2) (match_dup 1)))\n-   (set (match_dup 0) (minus:DI (match_dup 2) (match_dup 0)))]\n+   (set (match_dup 0) (minus:DI (match_dup 0) (match_dup 2)))]\n   \"\")\n \n (define_insn \"\""}]}