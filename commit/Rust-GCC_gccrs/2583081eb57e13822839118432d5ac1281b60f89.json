{"sha": "2583081eb57e13822839118432d5ac1281b60f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4MzA4MWViNTdlMTM4MjI4MzkxMTg0MzJkNWFjMTI4MWI2MGY4OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-29T22:11:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-29T22:11:09Z"}, "message": "sched-int.h (struct deps_reg): Add uses_length, clobbers_length.\n\n        * sched-int.h (struct deps_reg): Add uses_length, clobbers_length.\n        * sched-rgn.c (propagate_deps): Update them.\n        * sched-deps.c (sched_analyze_insn): Update them.  Flush the\n        clobbers list when either gets too long.\n\nFrom-SVN: r49328", "tree": {"sha": "f1ec78e8399786f4f666db63dd8c402e57174ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ec78e8399786f4f666db63dd8c402e57174ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2583081eb57e13822839118432d5ac1281b60f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2583081eb57e13822839118432d5ac1281b60f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2583081eb57e13822839118432d5ac1281b60f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2583081eb57e13822839118432d5ac1281b60f89/comments", "author": null, "committer": null, "parents": [{"sha": "3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "cedff732fa11c32c93fb790d196078f8f69bd18e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2583081eb57e13822839118432d5ac1281b60f89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2583081eb57e13822839118432d5ac1281b60f89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2583081eb57e13822839118432d5ac1281b60f89", "patch": "@@ -1,3 +1,10 @@\n+2002-01-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* sched-int.h (struct deps_reg): Add uses_length, clobbers_length.\n+\t* sched-rgn.c (propagate_deps): Update them.\n+\t* sched-deps.c (sched_analyze_insn): Update them.  Flush the\n+\tclobbers list when either gets too long.\n+\n 2002-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Handle LEGACY_REGS"}, {"sha": "384bab7db814971b2d365d917257d7f5b01ffbb8", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 53, "deletions": 15, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2583081eb57e13822839118432d5ac1281b60f89/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2583081eb57e13822839118432d5ac1281b60f89/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=2583081eb57e13822839118432d5ac1281b60f89", "patch": "@@ -1058,6 +1058,8 @@ sched_analyze_insn (deps, x, insn, loop_notes)\n \t\t\t\t\t    REG_DEP_ANTI);\n \t      add_dependence_list_and_free (insn, &reg_last->sets, 0);\n \t      add_dependence_list_and_free (insn, &reg_last->clobbers, 0);\n+\t      reg_last->uses_length = 0;\n+\t      reg_last->clobbers_length = 0;\n \t    });\n \t}\n \n@@ -1073,25 +1075,26 @@ sched_analyze_insn (deps, x, insn, loop_notes)\n     }\n   else\n     {\n-      EXECUTE_IF_SET_IN_REG_SET (reg_pending_uses, 0, i,\n-\t{\n-\t  struct deps_reg *reg_last = &deps->reg_last[i];\n-\t  add_dependence_list (insn, reg_last->sets, 0);\n-\t  add_dependence_list (insn, reg_last->clobbers, 0);\n-\t  reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n-\t});\n-      EXECUTE_IF_SET_IN_REG_SET (reg_pending_clobbers, 0, i,\n-\t{\n-\t  struct deps_reg *reg_last = &deps->reg_last[i];\n-\t  add_dependence_list (insn, reg_last->sets, REG_DEP_OUTPUT);\n-\t  add_dependence_list (insn, reg_last->uses, REG_DEP_ANTI);\n-\t  reg_last->clobbers = alloc_INSN_LIST (insn, reg_last->clobbers);\n-\t});\n-\n       /* If the current insn is conditional, we can't free any\n \t of the lists.  */\n       if (GET_CODE (PATTERN (insn)) == COND_EXEC)\n \t{\n+\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_uses, 0, i,\n+\t    {\n+\t      struct deps_reg *reg_last = &deps->reg_last[i];\n+\t      add_dependence_list (insn, reg_last->sets, 0);\n+\t      add_dependence_list (insn, reg_last->clobbers, 0);\n+\t      reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n+\t      reg_last->uses_length++;\n+\t    });\n+\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_clobbers, 0, i,\n+\t    {\n+\t      struct deps_reg *reg_last = &deps->reg_last[i];\n+\t      add_dependence_list (insn, reg_last->sets, REG_DEP_OUTPUT);\n+\t      add_dependence_list (insn, reg_last->uses, REG_DEP_ANTI);\n+\t      reg_last->clobbers = alloc_INSN_LIST (insn, reg_last->clobbers);\n+\t      reg_last->clobbers_length++;\n+\t    });\n \t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_sets, 0, i,\n \t    {\n \t      struct deps_reg *reg_last = &deps->reg_last[i];\n@@ -1103,6 +1106,39 @@ sched_analyze_insn (deps, x, insn, loop_notes)\n \t}\n       else\n \t{\n+\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_uses, 0, i,\n+\t    {\n+\t      struct deps_reg *reg_last = &deps->reg_last[i];\n+\t      add_dependence_list (insn, reg_last->sets, 0);\n+\t      add_dependence_list (insn, reg_last->clobbers, 0);\n+\t      reg_last->uses_length++;\n+\t      reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n+\t    });\n+\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_clobbers, 0, i,\n+\t    {\n+\t      struct deps_reg *reg_last = &deps->reg_last[i];\n+\t      add_dependence_list (insn, reg_last->sets, REG_DEP_OUTPUT);\n+\t      add_dependence_list (insn, reg_last->uses, REG_DEP_ANTI);\n+\t      if (reg_last->uses_length > MAX_PENDING_LIST_LENGTH\n+\t\t  || reg_last->clobbers_length > MAX_PENDING_LIST_LENGTH)\n+\t\t{\n+\t\t  add_dependence_list_and_free (insn, &reg_last->sets,\n+\t\t\t\t\t        REG_DEP_OUTPUT);\n+\t\t  add_dependence_list_and_free (insn, &reg_last->uses,\n+\t\t\t\t\t\tREG_DEP_ANTI);\n+\t\t  add_dependence_list_and_free (insn, &reg_last->clobbers,\n+\t\t\t\t\t\tREG_DEP_OUTPUT);\n+\t\t  reg_last->clobbers_length = 0;\n+\t\t  reg_last->uses_length = 0;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  add_dependence_list (insn, reg_last->sets, REG_DEP_OUTPUT);\n+\t\t  add_dependence_list (insn, reg_last->uses, REG_DEP_ANTI);\n+\t\t}\n+\t      reg_last->clobbers_length++;\n+\t      reg_last->clobbers = alloc_INSN_LIST (insn, reg_last->clobbers);\n+\t    });\n \t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_sets, 0, i,\n \t    {\n \t      struct deps_reg *reg_last = &deps->reg_last[i];\n@@ -1113,6 +1149,8 @@ sched_analyze_insn (deps, x, insn, loop_notes)\n \t      add_dependence_list_and_free (insn, &reg_last->uses,\n \t\t\t\t\t    REG_DEP_ANTI);\n \t      reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n+\t      reg_last->uses_length = 0;\n+\t      reg_last->clobbers_length = 0;\n \t    });\n \t}\n "}, {"sha": "47910a0c2d549db8cd4619c1b598f9ff32b0725b", "filename": "gcc/sched-int.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2583081eb57e13822839118432d5ac1281b60f89/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2583081eb57e13822839118432d5ac1281b60f89/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=2583081eb57e13822839118432d5ac1281b60f89", "patch": "@@ -96,6 +96,8 @@ struct deps\n       rtx uses;\n       rtx sets;\n       rtx clobbers;\n+      int uses_length;\n+      int clobbers_length;\n     } *reg_last;\n \n   /* Element N is set for each register that has any non-zero element"}, {"sha": "e5a241b6327cd99b25134cc865fd49b9a8535fa5", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2583081eb57e13822839118432d5ac1281b60f89/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2583081eb57e13822839118432d5ac1281b60f89/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=2583081eb57e13822839118432d5ac1281b60f89", "patch": "@@ -2427,6 +2427,8 @@ propagate_deps (bb, pred_deps)\n \t    succ_rl->sets = concat_INSN_LIST (pred_rl->sets, succ_rl->sets);\n \t    succ_rl->clobbers = concat_INSN_LIST (pred_rl->clobbers,\n \t\t\t\t\t\t  succ_rl->clobbers);\n+\t    succ_rl->uses_length += pred_rl->uses_length;\n+\t    succ_rl->clobbers_length += pred_rl->clobbers_length;\n \t  });\n \tIOR_REG_SET (&succ_deps->reg_last_in_use, &pred_deps->reg_last_in_use);\n "}]}