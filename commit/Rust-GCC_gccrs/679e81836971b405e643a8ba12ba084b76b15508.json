{"sha": "679e81836971b405e643a8ba12ba084b76b15508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc5ZTgxODM2OTcxYjQwNWU2NDNhOGJhMTJiYTA4NGI3NmIxNTUwOA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-02-15T17:28:32Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-02-15T17:28:32Z"}, "message": "make iq2000 use constraints.md\n\n\tmake iq2000 use constraints.md\n        * config/iq2000/i2000.h (REG_CLASS_FROM_LETTER): Delete.\n        (CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n        (EXTRA_CONSTRAINT): Delete.\n        * config/iq2000/constraints.md: New file.\n        * config/iq2000/iq2000.md: Include it.\n\t(define_insn \"\"): Delete.\n\t(movsi_internal2, movhi_internal2, movqi_internal2): Delete\n\tunsupported constraint letters from patterns.\n\t(call_value, call_value_internal1): Likewise.\n\t(call_value_multiple_internal1): Likewise.\n\nFrom-SVN: r170184", "tree": {"sha": "faee7d332a718b369ffddca643ac74bfcbb3a65f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faee7d332a718b369ffddca643ac74bfcbb3a65f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/679e81836971b405e643a8ba12ba084b76b15508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679e81836971b405e643a8ba12ba084b76b15508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679e81836971b405e643a8ba12ba084b76b15508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679e81836971b405e643a8ba12ba084b76b15508/comments", "author": null, "committer": null, "parents": [{"sha": "a45d420abf5125d73bfdc2d2af3753b810c349eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45d420abf5125d73bfdc2d2af3753b810c349eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45d420abf5125d73bfdc2d2af3753b810c349eb"}], "stats": {"total": 191, "additions": 111, "deletions": 80}, "files": [{"sha": "bc0d5eddf36697d9fd2ba99ae8efecc8beb2cf0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679e81836971b405e643a8ba12ba084b76b15508/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679e81836971b405e643a8ba12ba084b76b15508/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=679e81836971b405e643a8ba12ba084b76b15508", "patch": "@@ -1,3 +1,16 @@\n+2011-02-15  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+        * config/iq2000/i2000.h (REG_CLASS_FROM_LETTER): Delete.\n+        (CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+        (EXTRA_CONSTRAINT): Delete.\n+        * config/iq2000/constraints.md: New file.\n+        * config/iq2000/iq2000.md: Include it.\n+\t(define_insn \"\"): Delete.\n+\t(movsi_internal2, movhi_internal2, movqi_internal2): Delete\n+\tunsupported constraint letters from patterns.\n+\t(call_value, call_value_internal1): Likewise.\n+\t(call_value_multiple_internal1): Likewise.\n+\n 2011-02-15  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300.c: Include tm-constrs.h."}, {"sha": "8850592d70f4c6088cd2e4bcd149d2fecb0a6efd", "filename": "gcc/config/iq2000/constraints.md", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679e81836971b405e643a8ba12ba084b76b15508/gcc%2Fconfig%2Fiq2000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679e81836971b405e643a8ba12ba084b76b15508/gcc%2Fconfig%2Fiq2000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fconstraints.md?ref=679e81836971b405e643a8ba12ba084b76b15508", "patch": "@@ -0,0 +1,79 @@\n+;; Constraints for Vitesse IQ2000 processors\n+;; Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Register constraints.\n+(define_register_constraint \"b\" \"ALL_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"d\" \"GR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"y\" \"GR_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints.\n+(define_constraint \"I\"\n+  \"A 16-bit signed integer.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -32768, 32767)\")))\n+\n+(define_constraint \"J\"\n+  \"Zero.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"K\"\n+  \"A 16-bit unsigned integer\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 65535)\")))\n+\n+(define_constraint \"L\"\n+  \"A 32-bit constant whose bottom 16 bits are zero.\"\n+  (and (match_code \"const_int\")\n+      (ior (match_test \"(ival | 0x7fff0000) == 0x7fff0000\")\n+\t   (match_test \"(ival | 0x7fff0000) + 0x10000 == 0\"))))\n+\n+(define_constraint \"M\"\n+  \"Any constant not matched by 'I', 'K', or 'L'.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"!insn_const_int_ok_for_constraint (ival, CONSTRAINT_I)\")\n+       (match_test \"!insn_const_int_ok_for_constraint (ival, CONSTRAINT_K)\")\n+       (match_test \"!insn_const_int_ok_for_constraint (ival, CONSTRAINT_L)\")))\n+\n+(define_constraint \"N\"\n+  \"Any constant whose lower or upper 16 bits are 0xffff.\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"(ival & 0xffff) == 0xffff\")\n+\t    (match_test \"(ival & 0xffff0000) == 0xffff0000\"))))\n+\n+(define_constraint \"O\"\n+  \"A 5-bit signed integer.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -31, 31)\")))\n+\n+;; Floating-point constraints.\n+(define_constraint \"G\"\n+  \"Floating-point zero.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+;; Extra constraints.\n+(define_constraint \"R\"\n+  \"A memory reference which takes one word for the instruction.\"\n+  (match_test \"simple_memory_operand (op, mode)\"))"}, {"sha": "7f69d2a12b912c79ba7dc85dd6088806aa993c07", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679e81836971b405e643a8ba12ba084b76b15508/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679e81836971b405e643a8ba12ba084b76b15508/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=679e81836971b405e643a8ba12ba084b76b15508", "patch": "@@ -235,12 +235,6 @@ enum reg_class\n \n #define INDEX_REG_CLASS NO_REGS\n \n-#define REG_CLASS_FROM_LETTER(C) \\\n-  ((C) == 'd' ? GR_REGS :        \\\n-   (C) == 'b' ? ALL_REGS :       \\\n-   (C) == 'y' ? GR_REGS :        \\\n-   NO_REGS)\n-\n #define REGNO_OK_FOR_INDEX_P(regno)\t0\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\t\\\n@@ -257,53 +251,6 @@ enum reg_class\n #define CLASS_MAX_NREGS(CLASS, MODE)    \\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n-/* For IQ2000:\n-\n-   `I'\tis used for the range of constants an arithmetic insn can\n-\tactually contain (16-bits signed integers).\n-\n-   `J'\tis used for the range which is just zero (i.e., $r0).\n-\n-   `K'\tis used for the range of constants a logical insn can actually\n-\tcontain (16-bit zero-extended integers).\n-\n-   `L'\tis used for the range of constants that be loaded with lui\n-\t(i.e., the bottom 16 bits are zero).\n-\n-   `M'\tis used for the range of constants that take two words to load\n-\t(i.e., not matched by `I', `K', and `L').\n-\n-   `N'\tis used for constants 0xffffnnnn or 0xnnnnffff\n-\n-   `O'\tis a 5-bit zero-extended integer.  */\n-\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n-  ((C) == 'I' ? ((unsigned HOST_WIDE_INT) ((VALUE) + 0x8000) < 0x10000)\t\\\n-   : (C) == 'J' ? ((VALUE) == 0)\t\t\t\t\t\\\n-   : (C) == 'K' ? ((unsigned HOST_WIDE_INT) (VALUE) < 0x10000)\t\t\\\n-   : (C) == 'L' ? (((VALUE) & 0x0000ffff) == 0\t\t\t\t\\\n-\t\t   && (((VALUE) & ~2147483647) == 0\t\t\t\\\n-\t\t       || ((VALUE) & ~2147483647) == ~2147483647))\t\\\n-   : (C) == 'M' ? ((((VALUE) & ~0x0000ffff) != 0)\t\t\t\\\n-\t\t   && (((VALUE) & ~0x0000ffff) != ~0x0000ffff)\t\t\\\n-\t\t   && (((VALUE) & 0x0000ffff) != 0\t\t\t\\\n-\t\t       || (((VALUE) & ~2147483647) != 0\t\t\t\\\n-\t\t\t   && ((VALUE) & ~2147483647) != ~2147483647)))\t\\\n-   : (C) == 'N' ? ((((VALUE) & 0xffff) == 0xffff)\t\t\t\\\n-\t\t   || (((VALUE) & 0xffff0000) == 0xffff0000))\t\t\\\n-   : (C) == 'O' ? ((unsigned HOST_WIDE_INT) ((VALUE) + 0x20) < 0x40)\t\\\n-   : 0)\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\\\n-  ((C) == 'G'\t\t\t\t\t\t\t\t\\\n-   && (VALUE) == CONST0_RTX (GET_MODE (VALUE)))\n-\n-/* `R' is for memory references which take 1 word for the instruction.  */\n-\n-#define EXTRA_CONSTRAINT(OP,CODE)\t\t\t\t\t\\\n-  (((CODE) == 'R')\t  ? simple_memory_operand (OP, GET_MODE (OP))\t\\\n-   : FALSE)\n-\n \f\n /* Basic Stack Layout.  */\n "}, {"sha": "7ad113d95381e96675ead15c402f2e5c97ee643d", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679e81836971b405e643a8ba12ba084b76b15508/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679e81836971b405e643a8ba12ba084b76b15508/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=679e81836971b405e643a8ba12ba084b76b15508", "patch": "@@ -194,6 +194,7 @@\n    (nil)])\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \f\n \n ;; .........................\n@@ -731,15 +732,15 @@\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n (define_insn \"movsi_internal2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,R,m,*d,*z,*x,*d,*x,*d\")\n-\t(match_operand:SI 1 \"move_operand\" \"d,S,IKL,Mnis,R,m,dJ,dJ,*z,*d,J,*x,*d,*a\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,R,m\")\n+\t(match_operand:SI 1 \"move_operand\" \"d,IKL,Mnis,R,m,dJ,dJ\"))]\n   \"(register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode)\n        || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return iq2000_move_1word (operands, insn, FALSE);\"\n-  [(set_attr \"type\"\t\"move,load,arith,arith,load,load,store,store,xfer,xfer,move,move,move,move\")\n+  [(set_attr \"type\"\t\"move,arith,arith,load,load,store,store\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"4,8,4,8,8,8,4,8,4,4,4,4,4,4\")])\n+   (set_attr \"length\"\t\"4,4,8,8,8,4,8\")])\n \n ;; 16-bit Integer moves\n \n@@ -770,15 +771,15 @@\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n (define_insn \"movhi_internal2\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m,*d,*z,*x,*d\")\n-\t(match_operand:HI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ,*z,*d,*d,*x\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m\")\n+\t(match_operand:HI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ\"))]\n   \"(register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode)\n        || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return iq2000_move_1word (operands, insn, TRUE);\"\n-  [(set_attr \"type\"\t\"move,arith,load,load,store,store,xfer,xfer,move,move\")\n+  [(set_attr \"type\"\t\"move,arith,load,load,store,store\")\n    (set_attr \"mode\"\t\"HI\")\n-   (set_attr \"length\"\t\"4,4,4,8,4,8,4,4,4,4\")])\n+   (set_attr \"length\"\t\"4,4,4,8,4,8\")])\n \n ;; 8-bit Integer moves\n \n@@ -809,15 +810,15 @@\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n (define_insn \"movqi_internal2\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m,*d,*z,*x,*d\")\n-\t(match_operand:QI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ,*z,*d,*d,*x\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,d,R,m\")\n+\t(match_operand:QI 1 \"general_operand\"       \"d,IK,R,m,dJ,dJ\"))]\n   \"(register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode)\n        || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n   \"* return iq2000_move_1word (operands, insn, TRUE);\"\n-  [(set_attr \"type\"\t\"move,arith,load,load,store,store,xfer,xfer,move,move\")\n+  [(set_attr \"type\"\t\"move,arith,load,load,store,store\")\n    (set_attr \"mode\"\t\"QI\")\n-   (set_attr \"length\"\t\"4,4,4,8,4,8,4,4,4,4\")])\n+   (set_attr \"length\"\t\"4,4,4,8,4,8\")])\n \n ;; 32-bit floating point moves\n \n@@ -1271,15 +1272,6 @@\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n-\t(gtu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n-  \"\"\n-  \"sltu\\\\t%2,%1\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n (define_insn \"sltu_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,=d\")\n \t(ltu:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n@@ -1583,7 +1575,7 @@\n ;; calls.c now passes a fourth argument, make saber happy\n \n (define_expand \"call_value\"\n-  [(parallel [(set (match_operand 0 \"register_operand\" \"=df\")\n+  [(parallel [(set (match_operand 0 \"register_operand\" \"=d\")\n \t\t   (call (match_operand 1 \"memory_operand\" \"m\")\n \t\t\t (match_operand 2 \"\" \"i\")))\n \t      (clobber (reg:SI 31))\n@@ -1649,8 +1641,8 @@\n   \"\")\n \n (define_insn \"call_value_internal1\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n-        (call (mem (match_operand 1 \"call_insn_operand\" \"ri\"))\n+  [(set (match_operand 0 \"register_operand\" \"=d\")\n+        (call (mem (match_operand 1 \"call_insn_operand\" \"r\"))\n               (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n   \"\"\n@@ -1683,10 +1675,10 @@\n ;; return values.\n \n (define_insn \"call_value_multiple_internal1\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n-        (call (mem (match_operand 1 \"call_insn_operand\" \"ri\"))\n+  [(set (match_operand 0 \"register_operand\" \"=d\")\n+        (call (mem (match_operand 1 \"call_insn_operand\" \"r\"))\n               (match_operand 2 \"\" \"i\")))\n-   (set (match_operand 3 \"register_operand\" \"=df\")\n+   (set (match_operand 3 \"register_operand\" \"=d\")\n    \t(call (mem (match_dup 1))\n               (match_dup 2)))\n   (clobber (match_operand:SI 4 \"register_operand\" \"=d\"))]"}]}