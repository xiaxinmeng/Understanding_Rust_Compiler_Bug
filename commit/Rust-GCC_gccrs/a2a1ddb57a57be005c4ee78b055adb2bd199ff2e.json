{"sha": "a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJhMWRkYjU3YTU3YmUwMDVjNGVlNzhiMDU1YWRiMmJkMTk5ZmYyZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2014-02-03T15:18:44Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-02-03T15:18:44Z"}, "message": "Add -mlong-double-128 and make it default for 64-bit Bionic\n\ngcc/\n\n\t* config/i386/i386.c (flag_opts): Add -mlong-double-128.\n\t(ix86_option_override_internal): Default long double to 64-bit for\n\t32-bit Bionic and to 128-bit for 64-bit Bionic.\n\n\t* config/i386/i386.h (LONG_DOUBLE_TYPE_SIZE): Use 128 if\n\tTARGET_LONG_DOUBLE_128 is true.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Likewise.\n\n\t* config/i386/i386.opt (mlong-double-80): Negate -mlong-double-64.\n\t(mlong-double-64): Negate -mlong-double-128.\n\t(mlong-double-128): New option.\n\n\t* config/i386/i386-c.c (ix86_target_macros): Define\n\t__LONG_DOUBLE_128__ for TARGET_LONG_DOUBLE_128.\n\n\t* doc/invoke.texi: Document -mlong-double-128.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/long-double-64-1.c: Verify __multf3 isn't used.\n\t* gcc.target/i386/long-double-64-4.c: Likewise.\n\t* gcc.target/i386/long-double-80-1.c: Likewise.\n\t* gcc.target/i386/long-double-80-2.c: Likewise.\n\t* gcc.target/i386/long-double-80-3.c: Likewise.\n\t* gcc.target/i386/long-double-80-4.c: Likewise.\n\t* gcc.target/i386/long-double-80-5.c: Likewise.\n\t* gcc.target/i386/long-double-64-2.c: Limit to ia32.  Verify\n\t__multf3 isn't used.\n\t* gcc.target/i386/long-double-64-3.c: Likewise.\n\t* gcc.target/i386/long-double-128-1.c: New test.\n\t* gcc.target/i386/long-double-128-2.c: Likewise.\n\t* gcc.target/i386/long-double-128-3.c: Likewise.\n\t* gcc.target/i386/long-double-128-4.c: Likewise.\n\t* gcc.target/i386/long-double-128-5.c: Likewise.\n\t* gcc.target/i386/long-double-128-6.c: Likewise.\n\t* gcc.target/i386/long-double-128-7.c: Likewise.\n\t* gcc.target/i386/long-double-128-8.c: Likewise.\n\t* gcc.target/i386/long-double-128-9.c: Likewise.\n\t* gcc.target/i386/long-double-64-5.c: Likewise.\n\t* gcc.target/i386/long-double-64-6.c: Likewise.\n\t* gcc.target/i386/long-double-64-7.c: Likewise.\n\t* gcc.target/i386/long-double-64-8.c: Likewise.\n\t* gcc.target/i386/long-double-64-9.c: Likewise.\n\t* gcc.target/i386/long-double-80-10.c: Likewise.\n\t* gcc.target/i386/long-double-80-8.c: Likewise.\n\t* gcc.target/i386/long-double-80-9.c: Likewise.\n\nFrom-SVN: r207428", "tree": {"sha": "b8526b6d630f8e6d4efb2afb9dea0faba7170200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8526b6d630f8e6d4efb2afb9dea0faba7170200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f742cf901dd37dfeb116e7dc099461b1291389e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f742cf901dd37dfeb116e7dc099461b1291389e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f742cf901dd37dfeb116e7dc099461b1291389e8"}], "stats": {"total": 290, "additions": 280, "deletions": 10}, "files": [{"sha": "5938f54df1e323717c6d9dc273e4565a566b4f57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -1,3 +1,22 @@\n+2014-02-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (flag_opts): Add -mlong-double-128.\n+\t(ix86_option_override_internal): Default long double to 64-bit for\n+\t32-bit Bionic and to 128-bit for 64-bit Bionic.\n+\n+\t* config/i386/i386.h (LONG_DOUBLE_TYPE_SIZE): Use 128 if\n+\tTARGET_LONG_DOUBLE_128 is true.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Likewise.\n+\n+\t* config/i386/i386.opt (mlong-double-80): Negate -mlong-double-64.\n+\t(mlong-double-64): Negate -mlong-double-128.\n+\t(mlong-double-128): New option.\n+\n+\t* config/i386/i386-c.c (ix86_target_macros): Define\n+\t__LONG_DOUBLE_128__ for TARGET_LONG_DOUBLE_128.\n+\n+\t* doc/invoke.texi: Document -mlong-double-128.\n+\n 2014-02-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/60024"}, {"sha": "0c5072041de0dca4b4026cd2f72d5d2dd4b4f7cd", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -513,6 +513,9 @@ ix86_target_macros (void)\n   if (TARGET_LONG_DOUBLE_64)\n     cpp_define (parse_in, \"__LONG_DOUBLE_64__\");\n \n+  if (TARGET_LONG_DOUBLE_128)\n+    cpp_define (parse_in, \"__LONG_DOUBLE_128__\");\n+\n   cpp_define_formatted (parse_in, \"__ATOMIC_HLE_ACQUIRE=%d\", IX86_HLE_ACQUIRE);\n   cpp_define_formatted (parse_in, \"__ATOMIC_HLE_RELEASE=%d\", IX86_HLE_RELEASE);\n "}, {"sha": "58f36e0445a06f17d99a33b089882a2df8881146", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -2628,6 +2628,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n   static struct ix86_target_opts flag_opts[] =\n   {\n     { \"-m128bit-long-double\",\t\tMASK_128BIT_LONG_DOUBLE },\n+    { \"-mlong-double-128\",\t\tMASK_LONG_DOUBLE_128 },\n     { \"-mlong-double-64\",\t\tMASK_LONG_DOUBLE_64 },\n     { \"-m80387\",\t\t\tMASK_80387 },\n     { \"-maccumulate-outgoing-args\",\tMASK_ACCUMULATE_OUTGOING_ARGS },\n@@ -4195,10 +4196,18 @@ ix86_option_override_internal (bool main_args_p,\n   else if (opts_set->x_target_flags & MASK_RECIP)\n     opts->x_recip_mask &= ~(RECIP_MASK_ALL & ~opts->x_recip_mask_explicit);\n \n-  /* Default long double to 64-bit for Bionic.  */\n+  /* Default long double to 64-bit for 32-bit Bionic and to __float128\n+     for 64-bit Bionic.  */\n   if (TARGET_HAS_BIONIC\n-      && !(opts_set->x_target_flags & MASK_LONG_DOUBLE_64))\n-    opts->x_target_flags |= MASK_LONG_DOUBLE_64;\n+      && !(opts_set->x_target_flags\n+\t   & (MASK_LONG_DOUBLE_64 | MASK_LONG_DOUBLE_128)))\n+    opts->x_target_flags |= (TARGET_64BIT\n+\t\t\t     ? MASK_LONG_DOUBLE_128\n+\t\t\t     : MASK_LONG_DOUBLE_64);\n+\n+  /* Only one of them can be active.  */\n+  gcc_assert ((opts->x_target_flags & MASK_LONG_DOUBLE_64) == 0\n+\t      || (opts->x_target_flags & MASK_LONG_DOUBLE_128) == 0);\n \n   /* Save the initial options in case the user does function specific\n      options.  */"}, {"sha": "0e757c9c4aafb6a28b1d41de531c157d940813b3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -668,12 +668,15 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define LONG_LONG_TYPE_SIZE 64\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n-#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_64 ? 64 : 80)\n+#define LONG_DOUBLE_TYPE_SIZE \\\n+  (TARGET_LONG_DOUBLE_64 ? 64 : (TARGET_LONG_DOUBLE_128 ? 128 : 80))\n \n /* Define this to set long double type size to use in libgcc2.c, which can\n    not depend on target_flags.  */\n #ifdef __LONG_DOUBLE_64__\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#elif defined (__LONG_DOUBLE_128__)\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n #else\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n #endif"}, {"sha": "d5dd0fa3e00418aec0f9819178d6ccaf8490299e", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -186,13 +186,17 @@ Target RejectNegative Report InverseMask(128BIT_LONG_DOUBLE) Save\n sizeof(long double) is 12\n \n mlong-double-80\n-Target Report RejectNegative InverseMask(LONG_DOUBLE_64) Save\n+Target Report RejectNegative Negative(mlong-double-64) InverseMask(LONG_DOUBLE_64) Save\n Use 80-bit long double\n \n mlong-double-64\n-Target Report RejectNegative Mask(LONG_DOUBLE_64) Save\n+Target Report RejectNegative Negative(mlong-double-128) Mask(LONG_DOUBLE_64) InverseMask(LONG_DOUBLE_128) Save\n Use 64-bit long double\n \n+mlong-double-128\n+Target Report RejectNegative Negative(mlong-double-80) Mask(LONG_DOUBLE_128) InverseMask(LONG_DOUBLE_64) Save\n+Use 128-bit long double\n+\n maccumulate-outgoing-args\n Target Report Mask(ACCUMULATE_OUTGOING_ARGS) Save\n Reserve space for outgoing arguments in the function prologue"}, {"sha": "89e80ac130ab3fc57938bf87da7bbc96f36fc298", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -674,7 +674,7 @@ Objective-C and Objective-C++ Dialects}.\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy} -mmemset-strategy=@var{strategy}\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n--m96bit-long-double -mlong-double-64 -mlong-double-80 @gol\n+-m96bit-long-double -mlong-double-64 -mlong-double-80 -mlong-double-128 @gol\n -mregparm=@var{num}  -msseregparm @gol\n -mveclibabi=@var{type} -mvect8-ret-in-mem @gol\n -mpc32 -mpc64 -mpc80 -mstackrealign @gol\n@@ -15053,11 +15053,15 @@ with code compiled without that switch.\n \n @item -mlong-double-64\n @itemx -mlong-double-80\n+@itemx -mlong-double-128\n @opindex mlong-double-64\n @opindex mlong-double-80\n+@opindex mlong-double-128\n These switches control the size of @code{long double} type. A size\n of 64 bits makes the @code{long double} type equivalent to the @code{double}\n-type. This is the default for Bionic C library.\n+type. This is the default for 32-bit Bionic C library.  A size\n+of 128 bits makes the @code{long double} type equivalent to the\n+@code{__float128} type. This is the default for 64-bit Bionic C library.\n \n @strong{Warning:} if you override the default value for your target ABI, this\n changes the size of"}, {"sha": "d87b06e62d10876fa0c3b5551783f026d8e32a3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -1,3 +1,33 @@\n+2014-02-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/long-double-64-1.c: Verify __multf3 isn't used.\n+\t* gcc.target/i386/long-double-64-4.c: Likewise.\n+\t* gcc.target/i386/long-double-80-1.c: Likewise.\n+\t* gcc.target/i386/long-double-80-2.c: Likewise.\n+\t* gcc.target/i386/long-double-80-3.c: Likewise.\n+\t* gcc.target/i386/long-double-80-4.c: Likewise.\n+\t* gcc.target/i386/long-double-80-5.c: Likewise.\n+\t* gcc.target/i386/long-double-64-2.c: Limit to ia32.  Verify\n+\t__multf3 isn't used.\n+\t* gcc.target/i386/long-double-64-3.c: Likewise.\n+\t* gcc.target/i386/long-double-128-1.c: New test.\n+\t* gcc.target/i386/long-double-128-2.c: Likewise.\n+\t* gcc.target/i386/long-double-128-3.c: Likewise.\n+\t* gcc.target/i386/long-double-128-4.c: Likewise.\n+\t* gcc.target/i386/long-double-128-5.c: Likewise.\n+\t* gcc.target/i386/long-double-128-6.c: Likewise.\n+\t* gcc.target/i386/long-double-128-7.c: Likewise.\n+\t* gcc.target/i386/long-double-128-8.c: Likewise.\n+\t* gcc.target/i386/long-double-128-9.c: Likewise.\n+\t* gcc.target/i386/long-double-64-5.c: Likewise.\n+\t* gcc.target/i386/long-double-64-6.c: Likewise.\n+\t* gcc.target/i386/long-double-64-7.c: Likewise.\n+\t* gcc.target/i386/long-double-64-8.c: Likewise.\n+\t* gcc.target/i386/long-double-64-9.c: Likewise.\n+\t* gcc.target/i386/long-double-80-10.c: Likewise.\n+\t* gcc.target/i386/long-double-80-8.c: Likewise.\n+\t* gcc.target/i386/long-double-80-9.c: Likewise.\n+\n 2014-02-03  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/57662"}, {"sha": "cbd9bb5ecd1ba6ad3d4470ca39d3d059ecb6a533", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-1.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-128\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "9aef4bf0c79c11fdfaadc86376d1d14be419c052", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-2.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbionic\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "86b9b12e20e36569ab5c15ee9460d67e83e9a2c0", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-3.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mandroid\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "af7363581d7dbffa948a8749b076e2667242daee", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-4.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mlong-double-128 -mbionic\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "fb32c5b7e208ea081a3dfcef0c99274e7577c1ee", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-5.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mlong-double-128 -mandroid\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "2797516201d81ce5c929e0c846b5e34d1d400685", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-6.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-64 -mlong-double-128\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "eaa7f630208e0e076bbde9f6e871c2413368b26d", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-7.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-64\" } */\n+\n+__float128\n+foo (__float128 x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "d869efc437e2cfd4190d3506c477e4166b859f9f", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-8.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -mlong-double-64 -mfpmath=387\" } */\n+\n+int\n+main ()\n+{\n+  __float128 a = -0.23456789;\n+  if ((double) a >= 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "bc90f21771719e5aec3f48cd20bc235fc4d8b033", "filename": "gcc/testsuite/gcc.target/i386/long-double-128-9.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-128-9.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -mlong-double-64 -mfpmath=sse -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+\n+static void\n+sse2_test (void)\n+{\n+  __float128 a = -0.23456789;\n+  if ((double) a >= 0)\n+    __builtin_abort ();\n+}"}, {"sha": "f5c83a5858b64cbdb90124bdcf67c42b16318919", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-1.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "13a7be08b0481859de64f5705e4723274b22e4be", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-2.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-do compile { target { *-*-linux* && ia32 } } } */\n /* { dg-options \"-O2 -mbionic\" } */\n \n long double\n@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "99d3d5ffc793b06587c6968173296fa078baacb7", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-3.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-do compile { target { *-*-linux* && ia32 } } } */\n /* { dg-options \"-O2 -mandroid\" } */\n \n long double\n@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "471f0bf72d7254f071a9ca15e68e356bd0f1a9a7", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-4.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "f634425eb5ccc04cf1650a38330747a23d379561", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-5.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-128 -mlong-double-64\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "76b030d0c0461ba079ad4a1af95736f8d98b3789", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-6.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-80 -mlong-double-128 -mlong-double-64\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "9f66d37e0ad68e8038f47d95228d64a4a7dac058", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-7.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-128 -mlong-double-80 -mlong-double-64\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "fd2fdbc10dc584edf31e94654fce64e9bde20555", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-8.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mlong-double-64 -mbionic\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "595dba358d27876155423f3331a6e0690a6dcb35", "filename": "gcc/testsuite/gcc.target/i386/long-double-64-9.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-64-9.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mlong-double-64 -mandroid\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "887bd6c9f65f33334f90dc0248dc729724b3e31b", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-1.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "311ae4f4055ada9872a33a595387f6cbccc3b31b", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-10.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-10.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-128 -mlong-double-64 -mlong-double-80\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "7ca0643940267b862a3a87dabe1ea8dda9771a7f", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-2.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "39dc8a450dede5d7dfb6cdfce40dc63f234f723e", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-3.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "4ee21b662a30af23b1a872011e8b99e6e86d4e7b", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-4.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -8,3 +8,4 @@ foo (long double x)\n }\n \n /* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "78a16037e561ee8412c7cac643ecc371a0b60186", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-5.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -8,3 +8,4 @@ foo (__float80 x)\n }\n \n /* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "b82305ffb65524e7541c216776c4c4b5efc52076", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-8.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-128 -mlong-double-80\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}, {"sha": "91ff9d10eeade6633bbcefab73d49cb78c970f17", "filename": "gcc/testsuite/gcc.target/i386/long-double-80-9.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a1ddb57a57be005c4ee78b055adb2bd199ff2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flong-double-80-9.c?ref=a2a1ddb57a57be005c4ee78b055adb2bd199ff2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-64 -mlong-double-128 -mlong-double-80\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-assembler \"fldt\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*_?__multf3\" } } */"}]}