{"sha": "d4f680c672261642b47ecd72b6201825703bfa40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmNjgwYzY3MjI2MTY0MmI0N2VjZDcyYjYyMDE4MjU3MDNiZmE0MA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-11-08T17:48:39Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-11-08T17:48:39Z"}, "message": "arm - Add support for aliases of CPU names\n\nThis patch adds support for defining an alias for a CPU name that can\nthen be used in conjunction with the -mcpu option in the same way that\nthe primary name can be used.  Aliases do not lead to a short-cut of\nthe feature options; they are literally an alternative name for the\ncore CPU.\n\nThe new entry in arm-cpus.in allows a cpu definition to contain an\nalias statement, for example\n\nbegin cpu strongarm\n alias strongarm110 !strongarm1100 !strongarm1110\n ...\nend cpu strongarm\n\neach entry in the list represents another alias for the CPU.  If the\nalias name starts with an exclamation mark, then it will match as for\nany other alias (sans the ! itself), but it will not be listed in any\nof the CPU hinting options (the intent is to make the alias\nessentially undocumented).  In the above example, hints would be\nprovided for strongarm and strongarm110, but not for strongarm1100 or\nstrongarm1110.\n\nThe advantage of using aliases in this way is that it allows us to\nreduce the number of duplicate table entries and identifier tags used\ninside the compiler itself.\n\n\t* config/arm/parsecpu.awk (/alias/): New parsing rule.\n\t(/begin cpu/): Check that the cpu name hasn't been previously defined.\n\t(gen_comm_data): Print out CPU alias tables.\n\t(check_cpu): Match aliases when checking the CPU name.\n\t* config/arm/arm-protos.h (cpu_alias): New structure.\n\t(cpu_option): Add entry for aliases.\n\t* config/arm/arm-cpus.in (strongarm): Add aliases for strongarm110\n\tstrongarm1100 and strongarm1110.\n\t(strongarm110, strongarm1100, strongarm1110): Delete CPU entries.\n\t(config/arm/arm-generic.md): Remove redundant references to\n\tstrongarm110, strongarm1100 and strongarm1110.\n\t* common/config/arm/arm-common.c (arm_print_hint_for_cpu_option):\n\tScan aliases for additional hints.\n\t(arm_parse_cpu_option_name): Also match a cpu name against the list\n\tof aliases.\n\t* config/arm/arm-tables.opt: Regenerated.\n\t* config/arm/arm-tune.md: Regenerated.\n\nFrom-SVN: r265931", "tree": {"sha": "db810722833c964619c126774b9d89013d282049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db810722833c964619c126774b9d89013d282049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f680c672261642b47ecd72b6201825703bfa40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f680c672261642b47ecd72b6201825703bfa40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f680c672261642b47ecd72b6201825703bfa40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f680c672261642b47ecd72b6201825703bfa40/comments", "author": null, "committer": null, "parents": [{"sha": "28567c40e2c7c88e424283e8a1a6ff8cb7ba440c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28567c40e2c7c88e424283e8a1a6ff8cb7ba440c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28567c40e2c7c88e424283e8a1a6ff8cb7ba440c"}], "stats": {"total": 158, "additions": 120, "deletions": 38}, "files": [{"sha": "9728c82a07fe84cf6076de118787bc39b8dad3d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -1,3 +1,23 @@\n+2018-11-08  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/parsecpu.awk (/alias/): New parsing rule.\n+\t(/begin cpu/): Check that the cpu name hasn't been previously defined.\n+\t(gen_comm_data): Print out CPU alias tables.\n+\t(check_cpu): Match aliases when checking the CPU name.\n+\t* config/arm/arm-protos.h (cpu_alias): New structure.\n+\t(cpu_option): Add entry for aliases.\n+\t* config/arm/arm-cpus.in (strongarm): Add aliases for strongarm110\n+\tstrongarm1100 and strongarm1110.\n+\t(strongarm110, strongarm1100, strongarm1110): Delete CPU entries.\n+\t(config/arm/arm-generic.md): Remove redundant references to\n+\tstrongarm110, strongarm1100 and strongarm1110.\n+\t* common/config/arm/arm-common.c (arm_print_hint_for_cpu_option):\n+\tScan aliases for additional hints.\n+\t(arm_parse_cpu_option_name): Also match a cpu name against the list\n+\tof aliases.\n+\t* config/arm/arm-tables.opt: Regenerated.\n+\t* config/arm/arm-tune.md: Regenerated.\n+\n 2018-11-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* builtin-types.def (BT_FN_VOID_BOOL, BT_FN_VOID_SIZE_SIZE_PTR,"}, {"sha": "32cf36e94f62db7bf5df542c27be5c341a61705c", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -309,7 +309,16 @@ arm_print_hint_for_cpu_option (const char *target,\n {\n   auto_vec<const char*> candidates;\n   for (; list->common.name != NULL; list++)\n-    candidates.safe_push (list->common.name);\n+    {\n+      candidates.safe_push (list->common.name);\n+      if (list->aliases)\n+\t{\n+\t  for (const cpu_alias *alias = list->aliases; alias->name != NULL;\n+\t       alias++)\n+\t    if (alias->visible)\n+\t      candidates.safe_push (alias->name);\n+\t}\n+    }\n \n #ifdef HAVE_LOCAL_CPU_DETECT\n   /* Add also \"native\" as possible value.  */\n@@ -345,6 +354,16 @@ arm_parse_cpu_option_name (const cpu_option *list, const char *optname,\n       if (strncmp (entry->common.name, target, len) == 0\n \t  && entry->common.name[len] == '\\0')\n \treturn entry;\n+\n+      /* Match against any legal alias for this CPU candidate.  */\n+      if (entry->aliases)\n+\t{\n+\t  for (const cpu_alias *alias = entry->aliases; alias->name != NULL;\n+\t       alias++)\n+\t    if (strncmp (alias->name, target, len) == 0\n+\t\t&& alias->name[len] == '\\0')\n+\t      return entry;\n+\t}\n     }\n \n   if (complain)"}, {"sha": "1def1cace68e446c56e6e313ba9c0587d012b64f", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -617,6 +617,7 @@ end arch iwmmxt2\n # format:\n # begin cpu <name>\n #   [cname <c-compatible-name>]\n+#   [alias <name>+]\n #   [tune for <cpu-name>]\n #   [tune flags <list>]\n #   architecture <name>\n@@ -630,6 +631,9 @@ end arch iwmmxt2\n #\n # If omitted, cname is formed from transforming the cpuname to convert\n # non-valid punctuation characters to '_'.\n+# Any number of alias names may be specified for a CPU.  If the name starts\n+# with a '!' then it will be recognized as a valid name, but will not\n+# be printed in any help text listing permitted CPUs.\n # If specified, tune for specifies a CPU target to use for tuning this core.\n # isa flags are appended to those defined by the architecture.\n # Each add option must have a distinct feature set and each remove\n@@ -658,29 +662,12 @@ begin cpu arm810\n end cpu arm810\n \n begin cpu strongarm\n+ alias strongarm110 !strongarm1100 !strongarm1110\n  tune flags LDSCHED STRONG\n  architecture armv4\n  costs strongarm\n end cpu strongarm\n \n-begin cpu strongarm110\n- tune flags LDSCHED STRONG\n- architecture armv4\n- costs strongarm\n-end cpu strongarm110\n-\n-begin cpu strongarm1100\n- tune flags LDSCHED STRONG\n- architecture armv4\n- costs strongarm\n-end cpu strongarm1100\n-\n-begin cpu strongarm1110\n- tune flags LDSCHED STRONG\n- architecture armv4\n- costs strongarm\n-end cpu strongarm1110\n-\n begin cpu fa526\n  tune flags LDSCHED\n  architecture armv4"}, {"sha": "da97303c7587f4b39042b14999a30299e3ab381d", "filename": "gcc/config/arm/arm-generic.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-generic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-generic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-generic.md?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -122,17 +122,15 @@\n (define_insn_reservation \"mult_ldsched_strongarm\" 3\n   (and (eq_attr \"generic_sched\" \"yes\")\n        (and (eq_attr \"ldsched\" \"yes\") \n-\t    (and (eq_attr \"tune\"\n-\t\t  \"strongarm,strongarm110,strongarm1100,strongarm1110\")\n+\t    (and (eq_attr \"tune\" \"strongarm\")\n \t\t (ior (eq_attr \"mul32\" \"yes\")\n \t\t      (eq_attr \"mul64\" \"yes\")))))\n   \"core*2\")\n \n (define_insn_reservation \"mult_ldsched\" 4\n   (and (eq_attr \"generic_sched\" \"yes\")\n        (and (eq_attr \"ldsched\" \"yes\") \n-\t    (and (eq_attr \"tune\"\n-\t\t  \"!strongarm,strongarm110,strongarm1100,strongarm1110\")\n+\t    (and (eq_attr \"tune\" \"!strongarm\")\n \t         (ior (eq_attr \"mul32\" \"yes\")\n \t\t      (eq_attr \"mul64\" \"yes\")))))\n   \"core*4\")"}, {"sha": "8d6d2395b84c1fd9c64912db3eacc95424f71172", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -498,6 +498,16 @@ struct arm_build_target\n \n extern struct arm_build_target arm_active_target;\n \n+/* Table entry for a CPU alias.  */\n+struct cpu_alias\n+{\n+  /* The alias name.  */\n+  const char *const name;\n+  /* True if the name should be displayed in help text listing cpu names.  */\n+  bool visible;\n+};\n+\n+/* Table entry for an architectural feature extension.  */\n struct cpu_arch_extension\n {\n   /* Feature name.  */\n@@ -511,6 +521,7 @@ struct cpu_arch_extension\n   const enum isa_feature isa_bits[isa_num_bits];\n };\n \n+/* Common elements of both CPU and architectural options.  */\n struct cpu_arch_option\n {\n   /* Name for this option.  */\n@@ -521,6 +532,7 @@ struct cpu_arch_option\n   enum isa_feature isa_bits[isa_num_bits];\n };\n \n+/* Table entry for an architecture entry.  */\n struct arch_option\n {\n   /* Common option fields.  */\n@@ -535,10 +547,13 @@ struct arch_option\n   enum processor_type tune_id;\n };\n \n+/* Table entry for a CPU entry.  */\n struct cpu_option\n {\n   /* Common option fields.  */\n   cpu_arch_option common;\n+  /* List of aliases for this CPU.  */\n+  const struct cpu_alias *aliases;\n   /* Architecture upon which this CPU is based.  */\n   enum arch_type arch;\n };"}, {"sha": "cd496366cec73f6ce95346dd057c71e5523741ef", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -33,15 +33,6 @@ Enum(processor_type) String(arm810) Value( TARGET_CPU_arm810)\n EnumValue\n Enum(processor_type) String(strongarm) Value( TARGET_CPU_strongarm)\n \n-EnumValue\n-Enum(processor_type) String(strongarm110) Value( TARGET_CPU_strongarm110)\n-\n-EnumValue\n-Enum(processor_type) String(strongarm1100) Value( TARGET_CPU_strongarm1100)\n-\n-EnumValue\n-Enum(processor_type) String(strongarm1110) Value( TARGET_CPU_strongarm1110)\n-\n EnumValue\n Enum(processor_type) String(fa526) Value( TARGET_CPU_fa526)\n "}, {"sha": "bbe09cf466c53bc32d3a3c75611cb0856a62d32b", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -22,7 +22,6 @@\n \n (define_attr \"tune\"\n \t\"arm8,arm810,strongarm,\n-\tstrongarm110,strongarm1100,strongarm1110,\n \tfa526,fa626,arm7tdmi,\n \tarm7tdmis,arm710t,arm720t,\n \tarm740t,arm9,arm9tdmi,"}, {"sha": "ba2dee5fdcb40bd7f7fe1ee65f7ef4c460355b0c", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f680c672261642b47ecd72b6201825703bfa40/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=d4f680c672261642b47ecd72b6201825703bfa40", "patch": "@@ -261,6 +261,18 @@ function gen_comm_data () {\n \t    print \"  { NULL, false, false, {isa_nobit}}\"\n \t    print \"};\\n\"\n \t}\n+\n+\tif (cpus[n] in cpu_aliases) {\n+\t    print \"static const cpu_alias cpu_aliastab_\" \\\n+\t\tcpu_cnames[cpus[n]] \"[] = {\"\n+\t    naliases = split (cpu_aliases[cpus[n]], aliases)\n+\t    for (alias = 1; alias <= naliases; alias++) {\n+\t\tprint \"  { \\\"\" aliases[alias] \"\\\", \" \\\n+\t\t    cpu_alias_visible[cpus[n],aliases[alias]] \"},\"\n+\t    }\n+\t    print \"  { NULL, false}\"\n+\t    print \"};\\n\"\n+\t}\n     }\n \n     print \"const cpu_option all_cores[] =\"\n@@ -295,12 +307,16 @@ function gen_comm_data () {\n \t}\n \tprint_isa_bits_for(all_isa_bits, \"      \")\n \tprint \"\\n    },\"\n+\t# aliases\n+\tif (cpus[n] in cpu_aliases) {\n+\t    print \"    cpu_aliastab_\" cpu_cnames[cpus[n]] \",\"\n+\t} else print \"    NULL,\"\n \t# arch\n \tprint \"    TARGET_ARCH_\" arch_cnames[feats[1]]\n \tprint \"  },\"\n     }\n \n-    print \"  {{NULL, NULL, {isa_nobit}}, TARGET_ARCH_arm_none}\"\n+    print \"  {{NULL, NULL, {isa_nobit}}, NULL, TARGET_ARCH_arm_none}\"\n     print \"};\"\n \n     narchs = split (arch_list, archs)\n@@ -486,13 +502,17 @@ function gen_opt () {\n function check_cpu (name) {\n     exts = split (name, extensions, \"+\")\n \n-    if (! (extensions[1] in cpu_cnames)) {\n-\treturn \"error\"\n+    cpu_name = extensions[1]\n+    if (! (cpu_name in cpu_cnames)) {\n+\tif (! (cpu_name in cpu_all_aliases)) {\n+\t    return \"error\"\n+\t}\n+\tcpu_name = cpu_all_aliases[cpu_name]\n     }\n \n     for (n = 2; n <= exts; n++) {\n-\tif (!((extensions[1], extensions[n]) in cpu_opt_remove)\t\\\n-\t    && !((extensions[1], extensions[n]) in cpu_optaliases)) {\n+\tif (!((cpu_name, extensions[n]) in cpu_opt_remove)\t\\\n+\t    && !((cpu_name, extensions[n]) in cpu_optaliases)) {\n \t    return \"error\"\n \t}\n     }\n@@ -642,6 +662,12 @@ BEGIN {\n     toplevel()\n     cpu_name = $3\n     parse_ok = 1\n+    if (cpu_name in cpu_cnames) {\n+\tfatal(cpu_name \" is already defined\")\n+    }\n+    if (cpu_name in cpu_all_aliases) {\n+\tfatal(cpu_name \" has already been defined as an alias\")\n+    }\n }\n \n /^[ \t]*cname / {\n@@ -651,6 +677,33 @@ BEGIN {\n     parse_ok = 1\n }\n \n+/^[ \t]*alias / {\n+    if (NF < 2) fatal(\"syntax: alias <name>+\")\n+    if (cpu_name == \"\") fatal(\"\\\"alias\\\" outside of cpu block\")\n+    alias_count = NF\n+    for (n = 2; n <= alias_count; n++) {\n+\tvisible = \"true\"\n+\talias = $n\n+\tif (alias ~ /!.*/) {\n+\t    visible = \"false\"\n+\t    gsub(/^!/, \"\", alias)\n+\t}\n+\tif (alias in cpu_cnames) {\n+\t    fatal(alias \" is already defined as a cpu name\")\n+\t}\n+\tif (n == 2) {\n+\t    cpu_aliases[cpu_name] = alias\n+\t} else cpu_aliases[cpu_name] = cpu_aliases[cpu_name] \" \" alias\n+\tcpu_alias_visible[cpu_name,alias] = visible\n+\tif (alias in cpu_all_aliases) {\n+\t    fatal(alias \" is already an alias for \" cpu_all_aliases[alias])\n+\t}\n+\tcpu_all_aliases[alias] = cpu_name\n+    }\n+    cpu_has_alias[cpu_name] = 1\n+    parse_ok = 1\n+}\n+\n /^[ \t]*tune for / {\n     if (NF != 3) fatal(\"syntax: tune for <cpu-name>\")\n     if (cpu_name != \"\") {"}]}