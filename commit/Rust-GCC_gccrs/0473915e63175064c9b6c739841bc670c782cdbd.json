{"sha": "0473915e63175064c9b6c739841bc670c782cdbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3MzkxNWU2MzE3NTA2NGM5YjZjNzM5ODQxYmM2NzBjNzgyY2RiZA==", "commit": {"author": {"name": "Abderrazek Zaafrani", "email": "a.zaafrani@samsung.com", "date": "2015-11-07T01:32:27Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-11-07T01:32:27Z"}, "message": "add original schedule to scop\n\n    * graphite-optimize-isl.c (optimize_isl): Call isl_union_map_is_equal.\n    * graphite-poly.c (new_scop): Initialize original_schedule.\n    (free_scop): Free original_schedule.\n    * graphite-poly.h (struct scop): Add field original_schedule.\n    * graphite-sese-to-poly.c (build_scop_original_schedule): New.\n    (build_poly_scop): Call build_scop_original_schedule.\n\nFrom-SVN: r229910", "tree": {"sha": "32104e688dc8f9ffb5f432b9e2a565d4fdc3e700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32104e688dc8f9ffb5f432b9e2a565d4fdc3e700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0473915e63175064c9b6c739841bc670c782cdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0473915e63175064c9b6c739841bc670c782cdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0473915e63175064c9b6c739841bc670c782cdbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0473915e63175064c9b6c739841bc670c782cdbd/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "504fbc11f43fd20c33e5c44cc626f339f6fd8f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504fbc11f43fd20c33e5c44cc626f339f6fd8f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504fbc11f43fd20c33e5c44cc626f339f6fd8f8d"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "90fbe5f466408d6adc598724be4e51076bef15cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0473915e63175064c9b6c739841bc670c782cdbd", "patch": "@@ -1,3 +1,12 @@\n+2015-11-06  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n+\n+\t* graphite-optimize-isl.c (optimize_isl): Call isl_union_map_is_equal.\n+\t* graphite-poly.c (new_scop): Initialize original_schedule.\n+\t(free_scop): Free original_schedule.\n+\t* graphite-poly.h (struct scop): Add field original_schedule.\n+\t* graphite-sese-to-poly.c (build_scop_original_schedule): New.\n+\t(build_poly_scop): Call build_scop_original_schedule.\n+\n 2015-11-06  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n \n \t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Remove."}, {"sha": "c09264bf09393937733c44c27dd9b804287cef21", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=0473915e63175064c9b6c739841bc670c782cdbd", "patch": "@@ -441,11 +441,23 @@ optimize_isl (scop_p scop)\n #else\n   isl_union_map *schedule_map = get_schedule_map (schedule);\n #endif\n-  apply_schedule_map_to_scop (scop, schedule_map);\n \n-  isl_schedule_free (schedule);\n-  isl_union_map_free (schedule_map);\n-  return true;\n+  if (isl_union_map_is_equal (scop->original_schedule, schedule_map))\n+    {\n+      if (dump_file && dump_flags)\n+\tfprintf (dump_file, \"\\nISL schedule same as original schedule\\n\");\n+\n+      isl_schedule_free (schedule);\n+      isl_union_map_free (schedule_map);\n+      return false;\n+    }\n+  else\n+    {\n+      apply_schedule_map_to_scop (scop, schedule_map);\n+      isl_schedule_free (schedule);\n+      isl_union_map_free (schedule_map);\n+      return true;\n+    }\n }\n \n #endif /* HAVE_isl */"}, {"sha": "36c3061f6185a3be8d0b2b04bfa232d869fee598", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=0473915e63175064c9b6c739841bc670c782cdbd", "patch": "@@ -305,6 +305,7 @@ new_scop (edge entry, edge exit)\n   scop->must_waw_no_source = NULL;\n   scop->may_waw_no_source = NULL;\n   scop_set_region (scop, region);\n+  scop->original_schedule = NULL;\n   scop->pbbs.create (3);\n   scop->poly_scop_p = false;\n   scop->drs.create (3);\n@@ -341,6 +342,7 @@ free_scop (scop_p scop)\n   isl_union_map_free (scop->may_waw);\n   isl_union_map_free (scop->must_waw_no_source);\n   isl_union_map_free (scop->may_waw_no_source);\n+  isl_union_map_free (scop->original_schedule);\n   XDELETE (scop);\n }\n "}, {"sha": "b35431ae59dad51f37c71a29dfa2bb7710297a1a", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=0473915e63175064c9b6c739841bc670c782cdbd", "patch": "@@ -436,6 +436,9 @@ struct scop\n     *must_war, *may_war, *must_war_no_source, *may_war_no_source,\n     *must_waw, *may_waw, *must_waw_no_source, *may_waw_no_source;\n \n+  /* Original schedule of the SCoP.  */\n+  isl_union_map *original_schedule;\n+\n   /* True when the scop has been converted to its polyhedral\n      representation.  */\n   bool poly_scop_p;"}, {"sha": "ba45199a02a932fa444689fafa5b82eb96b2c9e6", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0473915e63175064c9b6c739841bc670c782cdbd/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=0473915e63175064c9b6c739841bc670c782cdbd", "patch": "@@ -426,6 +426,55 @@ build_scop_minimal_scattering (scop_p scop)\n   isl_aff_free (static_sched);\n }\n \n+/* Build the original schedule showing the orginal order of execution\n+   of statement instances.\n+\n+   The following example shows the original schedule:\n+\n+   for (i: ...)\n+     {\n+       for (j: ...)\n+         {\n+           A\n+         }\n+       B\n+     }\n+   C\n+   for (i: ...)\n+     {\n+       D\n+     }\n+\n+   Static schedules for A to D expressed in a union map:\n+\n+   { S_A[i0, i1] -> [i0, i1]; S_B[i0] -> [i0]; S_C[] -> []; S_9[i0] -> [i0] }\n+\n+*/\n+\n+static void\n+build_scop_original_schedule (scop_p scop)\n+{\n+  isl_space *space = isl_set_get_space (scop->param_context);\n+  isl_union_map *res = isl_union_map_empty (space);\n+\n+  int i;\n+  poly_bb_p pbb;\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n+    {\n+      int nb_dimensions = isl_set_dim (pbb->domain, isl_dim_set);\n+      isl_space *dc = isl_set_get_space (pbb->domain);\n+      isl_space *dm = isl_space_add_dims (isl_space_from_domain (dc),\n+\t\t\t\t\t  isl_dim_out, nb_dimensions);\n+      isl_map *mp = isl_map_universe (dm);\n+      for (int i = 0; i < nb_dimensions; i++)\n+\tmp = isl_map_equate (mp, isl_dim_in, i, isl_dim_out, i);\n+\n+      res = isl_union_map_add_map (res, mp);\n+    }\n+  scop->original_schedule = res;\n+}\n+\n+\n static isl_pw_aff *extract_affine (scop_p, tree, __isl_take isl_space *space);\n \n /* Extract an affine expression from the chain of recurrence E.  */\n@@ -1799,6 +1848,7 @@ build_poly_scop (scop_p scop)\n \n   build_scop_drs (scop);\n   build_scop_minimal_scattering (scop);\n+  build_scop_original_schedule (scop);\n \n   /* This SCoP has been translated to the polyhedral\n      representation.  */"}]}