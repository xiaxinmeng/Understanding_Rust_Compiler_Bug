{"sha": "59a3d73d50a1fd3c392e421ba4c07966ce045043", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhM2Q3M2Q1MGExZmQzYzM5MmU0MjFiYTRjMDc5NjZjZTA0NTA0Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-28T12:18:13Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-28T12:18:13Z"}, "message": "aarch64: Fix missed shrink-wrapping opportunity\n\nwb_candidate1 and wb_candidate2 exist for two overlapping cases:\nwhen we use an STR or STP with writeback to allocate the frame,\nand when we set up a frame chain record (either using writeback\nallocation or not).\n\nHowever, aarch64_layout_frame was leaving these fields with\nlegitimate register numbers even if we decided to do neither\nof those things.  This prevented those registers from being\nshrink-wrapped, even though we were otherwise treating them\nas normal saves and restores.\n\nThe case this patch handles isn't the common case, so it might\nnot be worth going out of our way to optimise it.  But I think\nthe patch actually makes the output of aarch64_layout_frame more\nconsistent.\n\n2020-05-28  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.h (aarch64_frame): Add a comment above\n\twb_candidate1 and wb_candidate2.\n\t* config/aarch64/aarch64.c (aarch64_layout_frame): Invalidate\n\twb_candidate1 and wb_candidate2 if we decided not to use them.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/shrink_wrap_1.c: New test.", "tree": {"sha": "4651c89bd2c06f3018992a76e0746efdefcab44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4651c89bd2c06f3018992a76e0746efdefcab44c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a3d73d50a1fd3c392e421ba4c07966ce045043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a3d73d50a1fd3c392e421ba4c07966ce045043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a3d73d50a1fd3c392e421ba4c07966ce045043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a3d73d50a1fd3c392e421ba4c07966ce045043/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccbfffb0fb614f09cf2b7b70f152d6e489cfd17"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "7feff77adf6b7f84b19dca7894323a116a2c0dc9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a3d73d50a1fd3c392e421ba4c07966ce045043/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a3d73d50a1fd3c392e421ba4c07966ce045043/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=59a3d73d50a1fd3c392e421ba4c07966ce045043", "patch": "@@ -6749,6 +6749,14 @@ aarch64_layout_frame (void)\n \t\t\t+ frame.sve_callee_adjust\n \t\t\t+ frame.final_adjust, frame.frame_size));\n \n+  if (!frame.emit_frame_chain && frame.callee_adjust == 0)\n+    {\n+      /* We've decided not to associate any register saves with the initial\n+\t stack allocation.  */\n+      frame.wb_candidate1 = INVALID_REGNUM;\n+      frame.wb_candidate2 = INVALID_REGNUM;\n+    }\n+\n   frame.laid_out = true;\n }\n "}, {"sha": "2be52fd4d73def0007795159298e3d3e8fc4399d", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a3d73d50a1fd3c392e421ba4c07966ce045043/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a3d73d50a1fd3c392e421ba4c07966ce045043/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=59a3d73d50a1fd3c392e421ba4c07966ce045043", "patch": "@@ -842,6 +842,23 @@ struct GTY (()) aarch64_frame\n   /* Store FP,LR and setup a frame pointer.  */\n   bool emit_frame_chain;\n \n+  /* In each frame, we can associate up to two register saves with the\n+     initial stack allocation.  This happens in one of two ways:\n+\n+     (1) Using an STR or STP with writeback to perform the initial\n+\t stack allocation.  When EMIT_FRAME_CHAIN, the registers will\n+\t be those needed to create a frame chain.\n+\n+\t Indicated by CALLEE_ADJUST != 0.\n+\n+     (2) Using a separate STP to set up the frame record, after the\n+\t initial stack allocation but before setting up the frame pointer.\n+\t This is used if the offset is too large to use writeback.\n+\n+\t Indicated by CALLEE_ADJUST == 0 && EMIT_FRAME_CHAIN.\n+\n+     These fields indicate which registers we've decided to handle using\n+     (1) or (2), or INVALID_REGNUM if none.  */\n   unsigned wb_candidate1;\n   unsigned wb_candidate2;\n "}, {"sha": "ab7cd74ec3b4488054e49f72532d40a31c027d63", "filename": "gcc/testsuite/gcc.target/aarch64/shrink_wrap_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a3d73d50a1fd3c392e421ba4c07966ce045043/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrink_wrap_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a3d73d50a1fd3c392e421ba4c07966ce045043/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrink_wrap_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrink_wrap_1.c?ref=59a3d73d50a1fd3c392e421ba4c07966ce045043", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/*\n+** foo:\n+**\t...\n+**\tstr\td8, \\[sp\\]\n+**\tldr\td8, \\[sp\\]\n+**\t...\n+*/\n+void\n+foo (int x)\n+{\n+  int tmp[0x1000];\n+  asm volatile (\"\" : \"=m\" (tmp));\n+  if (x == 1)\n+    asm volatile (\"\" ::: \"d8\");\n+}"}]}