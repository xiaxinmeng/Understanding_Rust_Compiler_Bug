{"sha": "06d72ee6e3ede175130413390d15726c09678cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZkNzJlZTZlM2VkZTE3NTEzMDQxMzM5MGQxNTcyNmMwOTY3OGNmYg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-06-18T14:05:20Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-06-18T14:05:20Z"}, "message": "tree-dfa.c (create_var_ann): tree_ann -> tree_ann_t.\n\n2004-06-18  Daniel Berlin  <dberlin@dberlin.org>\n\t\t\tDiego Novillo  <dnovillo@redhat.com>\n\n\t* tree-dfa.c (create_var_ann): tree_ann -> tree_ann_t.\n\t(create_stmt_ann): Ditto.\n\t(create_tree_ann): New function.\n\t(create_cst_ann): Remove.\n\t(create_expr_ann): Ditto.\n\n\t* tree-flow-inline.h (cst_ann): Remove.\n\t(get_cst_ann): Ditto.\n\t(get_expr_ann): Ditto.\n\t(expr_ann): Ditto.\n\t(get_tree_ann): New function.\n\t(tree_ann): Ditto.\n\t(ann_type): tree_ann -> tree_ann_t.\n\t* tree-flow.h (tree_ann_type): CST_ANN, EXPR_ANN removed.\n\t(struct cst_ann_d): Removed.\n\t(struct expr_ann_d): Ditto.\n\t(union tree_ann_d): Removed cst and expr.\n\t(tree_ann): Renamed to tree_ann_t.\n\t* tree-ssa-ccp.c (set_rhs): tree_ann -> tree_ann_t.\n\t* tree-ssa-pre.c (get_value_handle): Rewrite for single common\n\tannotation.\n\t(set_value_handle): Ditto.\n\t(phi_translate): Ditto.\n\t* tree-tailcall.c (adjust_return_value): tree_ann -> tree_ann_t.\n\nCo-Authored-By: Diego Novillo <dnovillo@redhat.com>\n\nFrom-SVN: r83349", "tree": {"sha": "4614614174c761f4e19c8775384b4781c2975702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4614614174c761f4e19c8775384b4781c2975702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06d72ee6e3ede175130413390d15726c09678cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d72ee6e3ede175130413390d15726c09678cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d72ee6e3ede175130413390d15726c09678cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d72ee6e3ede175130413390d15726c09678cfb/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd760894e689fc55e044860f3252602d86a74292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd760894e689fc55e044860f3252602d86a74292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd760894e689fc55e044860f3252602d86a74292"}], "stats": {"total": 203, "additions": 72, "deletions": 131}, "files": [{"sha": "aa0a6dd1d4e782af37aa2eae08fc1c9e61e2d0e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06d72ee6e3ede175130413390d15726c09678cfb", "patch": "@@ -1,3 +1,31 @@\n+2004-06-18  Daniel Berlin  <dberlin@dberlin.org>\n+\t\t\tDiego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-dfa.c (create_var_ann): tree_ann -> tree_ann_t.\n+\t(create_stmt_ann): Ditto.\n+\t(create_tree_ann): New function.\n+\t(create_cst_ann): Remove.\n+\t(create_expr_ann): Ditto.\n+\n+\t* tree-flow-inline.h (cst_ann): Remove.\n+\t(get_cst_ann): Ditto.\n+\t(get_expr_ann): Ditto.\n+\t(expr_ann): Ditto.\n+\t(get_tree_ann): New function.\n+\t(tree_ann): Ditto.\n+\t(ann_type): tree_ann -> tree_ann_t.\n+\t* tree-flow.h (tree_ann_type): CST_ANN, EXPR_ANN removed.\n+\t(struct cst_ann_d): Removed.\n+\t(struct expr_ann_d): Ditto.\n+\t(union tree_ann_d): Removed cst and expr.\n+\t(tree_ann): Renamed to tree_ann_t.\n+\t* tree-ssa-ccp.c (set_rhs): tree_ann -> tree_ann_t.\n+\t* tree-ssa-pre.c (get_value_handle): Rewrite for single common\n+\tannotation.\n+\t(set_value_handle): Ditto.\n+\t(phi_translate): Ditto.\n+\t* tree-tailcall.c (adjust_return_value): tree_ann -> tree_ann_t.\n+\n 2004-06-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/t-linux64: New file."}, {"sha": "e1445be48744a44f4eeb6fa62d2ad9951943e4e0", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=06d72ee6e3ede175130413390d15726c09678cfb", "patch": "@@ -429,7 +429,7 @@ create_var_ann (tree t)\n \n   ann->common.type = VAR_ANN;\n \n-  t->common.ann = (tree_ann) ann;\n+  t->common.ann = (tree_ann_t) ann;\n \n   return ann;\n }\n@@ -457,54 +457,31 @@ create_stmt_ann (tree t)\n   /* Since we just created the annotation, mark the statement modified.  */\n   ann->modified = true;\n \n-  t->common.ann = (tree_ann) ann;\n+  t->common.ann = (tree_ann_t) ann;\n \n   return ann;\n }\n \n \n-/* Create a new annotation for a constant T.  */\n+/* Create a new annotation for a tree T.  */\n \n-cst_ann_t\n-create_cst_ann (tree t)\n+tree_ann_t\n+create_tree_ann (tree t)\n {\n-  cst_ann_t ann;\n+  tree_ann_t ann;\n \n #if defined ENABLE_CHECKING\n   if (t == NULL_TREE\n       || (t->common.ann\n-\t  && t->common.ann->common.type != CST_ANN))\n+\t  && t->common.ann->common.type != TREE_ANN_COMMON))\n     abort ();\n #endif\n \n   ann = ggc_alloc (sizeof (*ann));\n   memset ((void *) ann, 0, sizeof (*ann));\n \n-  ann->common.type = CST_ANN;\n-  t->common.ann = (tree_ann) ann;\n-\n-  return ann;\n-}\n-\n-/* Create a new annotation for an expression T.  */\n-\n-expr_ann_t\n-create_expr_ann (tree t)\n-{\n-  expr_ann_t ann;\n-\n-#if defined ENABLE_CHECKING\n-  if (t == NULL_TREE\n-      || (t->common.ann\n-\t  && t->common.ann->common.type != EXPR_ANN))\n-    abort ();\n-#endif\n-\n-  ann = ggc_alloc (sizeof (*ann));\n-  memset ((void *) ann, 0, sizeof (*ann));\n-\n-  ann->common.type = EXPR_ANN;\n-  t->common.ann = (tree_ann) ann;\n+  ann->common.type = TREE_ANN_COMMON;\n+  t->common.ann = ann;\n \n   return ann;\n }"}, {"sha": "722259d3970d3a6af59d6abed56dcf8519bf590a", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 18, "deletions": 51, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=06d72ee6e3ede175130413390d15726c09678cfb", "patch": "@@ -50,56 +50,6 @@ get_var_ann (tree var)\n   return (ann) ? ann : create_var_ann (var);\n }\n \n-\n-/* Return the constant annotation for T, which must be a _CST node.\n-   Return NULL if the constant annotation doesn't already exist.  */\n-static inline cst_ann_t\n-cst_ann (tree t)\n-{\n-#if defined ENABLE_CHECKING\n-  if (TREE_CODE_CLASS (TREE_CODE (t)) != 'c'\n-      || (t->common.ann\n-\t  && t->common.ann->common.type != CST_ANN))\n-    abort ();\n-#endif\n-\n-  return (cst_ann_t) t->common.ann;\n-}\n-\n-/* Return the constant annotation for T, which must be a _CST node.\n-   Create the constant annotation if it doesn't exist.  */\n-static inline cst_ann_t\n-get_cst_ann (tree var)\n-{\n-  cst_ann_t ann = cst_ann (var);\n-  return (ann) ? ann : create_cst_ann (var);\n-}\n-\n-/* Return the expression annotation for T, which must be an expression\n-   node.  Return NULL if the expression annotation doesn't already\n-   exist.  */\n-static inline expr_ann_t\n-expr_ann (tree t)\n-{\n-#if defined ENABLE_CHECKING\n-  if (!EXPR_P (t)\n-      || (t->common.ann\n-\t  && t->common.ann->common.type != EXPR_ANN))\n-    abort ();\n-#endif\n-\n-  return (expr_ann_t) t->common.ann;\n-}\n-\n-/* Return the expression annotation for T, which must be an expression\n-   node.  Create the expression annotation if it doesn't exist.  */\n-static inline expr_ann_t\n-get_expr_ann (tree t)\n-{\n-  expr_ann_t ann = expr_ann (t);\n-  return (ann) ? ann : create_expr_ann (t);\n-}\n-\n /* Return the statement annotation for T, which must be a statement\n    node.  Return NULL if the statement annotation doesn't exist.  */\n static inline stmt_ann_t\n@@ -125,7 +75,7 @@ get_stmt_ann (tree stmt)\n \n /* Return the annotation type for annotation ANN.  */\n static inline enum tree_ann_type\n-ann_type (tree_ann ann)\n+ann_type (tree_ann_t ann)\n {\n   return ann->common.type;\n }\n@@ -798,4 +748,21 @@ mark_non_addressable (tree var)\n   TREE_ADDRESSABLE (var) = 0;\n }\n \n+/* Return the common annotation for T.  Return NULL if the annotation\n+   doesn't already exist.  */\n+static inline tree_ann_t\n+tree_ann (tree t)\n+{\n+  return t->common.ann;\n+}\n+\n+/* Return a common annotation for T.  Create the constant annotation if it\n+   doesn't exist.  */\n+static inline tree_ann_t\n+get_tree_ann (tree t)\n+{\n+  tree_ann_t ann = tree_ann (t);\n+  return (ann) ? ann : create_tree_ann (t);\n+}\n+\n #endif /* _TREE_FLOW_INLINE_H  */"}, {"sha": "d440c8bad6bcdd9e9b0df9ba3857328b61b133e9", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=06d72ee6e3ede175130413390d15726c09678cfb", "patch": "@@ -40,7 +40,7 @@ typedef struct basic_block_def *basic_block;\n /*---------------------------------------------------------------------------\n \t\t   Tree annotations stored in tree_common.ann\n ---------------------------------------------------------------------------*/\n-enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, CST_ANN, EXPR_ANN, STMT_ANN };\n+enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, STMT_ANN };\n \n struct tree_ann_common_d GTY(())\n {\n@@ -263,44 +263,24 @@ struct stmt_ann_d GTY(())\n   unsigned int uid;\n };\n \n-\n-struct cst_ann_d GTY (())\n-{\n-  struct tree_ann_common_d common;\n-  \n-};\n-\n-struct expr_ann_d GTY(())\n-{\n-  struct tree_ann_common_d common;\n-  \n-};\n-\n-\n-union tree_ann_d GTY((desc (\"ann_type ((tree_ann)&%h)\")))\n+union tree_ann_d GTY((desc (\"ann_type ((tree_ann_t)&%h)\")))\n {\n   struct tree_ann_common_d GTY((tag (\"TREE_ANN_COMMON\"))) common;\n   struct var_ann_d GTY((tag (\"VAR_ANN\"))) decl;\n-  struct expr_ann_d GTY((tag (\"EXPR_ANN\"))) expr;\n-  struct cst_ann_d GTY((tag (\"CST_ANN\"))) cst;\n   struct stmt_ann_d GTY((tag (\"STMT_ANN\"))) stmt;\n };\n \n-typedef union tree_ann_d *tree_ann;\n+typedef union tree_ann_d *tree_ann_t;\n typedef struct var_ann_d *var_ann_t;\n typedef struct stmt_ann_d *stmt_ann_t;\n-typedef struct expr_ann_d *expr_ann_t;\n-typedef struct cst_ann_d *cst_ann_t;\n \n-static inline cst_ann_t cst_ann (tree);\n-static inline cst_ann_t get_cst_ann (tree);\n-static inline expr_ann_t expr_ann (tree);\n-static inline expr_ann_t get_expr_ann (tree);\n+static inline tree_ann_t tree_ann (tree);\n+static inline tree_ann_t get_tree_ann (tree);\n static inline var_ann_t var_ann (tree);\n static inline var_ann_t get_var_ann (tree);\n static inline stmt_ann_t stmt_ann (tree);\n static inline stmt_ann_t get_stmt_ann (tree);\n-static inline enum tree_ann_type ann_type (tree_ann);\n+static inline enum tree_ann_type ann_type (tree_ann_t);\n static inline basic_block bb_for_stmt (tree);\n extern void set_bb_for_stmt (tree, basic_block);\n static inline void modify_stmt (tree);\n@@ -495,9 +475,8 @@ extern void dump_generic_bb (FILE *, basic_block, int, int);\n \n /* In tree-dfa.c  */\n extern var_ann_t create_var_ann (tree);\n-extern cst_ann_t create_cst_ann (tree);\n-extern expr_ann_t create_expr_ann (tree);\n extern stmt_ann_t create_stmt_ann (tree);\n+extern tree_ann_t create_tree_ann (tree);\n extern tree create_phi_node (tree, basic_block);\n extern void add_phi_arg (tree *, tree, edge);\n extern void remove_phi_arg (tree, basic_block);\n@@ -568,9 +547,6 @@ extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *);\n /* In tree-into-ssa.c  */\n extern void rewrite_into_ssa (void);\n \n-/* In tree-ssa-pre.c  */\n-extern void tree_perform_ssapre (tree, enum tree_dump_index);\n-\n /* In tree-ssa-ccp.c  */\n bool fold_stmt (tree *);\n tree widen_bitfield (tree, tree, tree);"}, {"sha": "fb7a8258f699af0970063f9ada6040209289d529", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=06d72ee6e3ede175130413390d15726c09678cfb", "patch": "@@ -2077,7 +2077,7 @@ set_rhs (tree *stmt_p, tree expr)\n \t effects, then replace *STMT_P with an empty statement.  */\n       stmt_ann_t ann = stmt_ann (stmt);\n       *stmt_p = TREE_SIDE_EFFECTS (expr) ? expr : build_empty_stmt ();\n-      (*stmt_p)->common.ann = (tree_ann) ann;\n+      (*stmt_p)->common.ann = (tree_ann_t) ann;\n \n       if (TREE_SIDE_EFFECTS (expr))\n \t{"}, {"sha": "7c0aeb7dca34610e27d4ea193e1fb4d4b97a524b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=06d72ee6e3ede175130413390d15726c09678cfb", "patch": "@@ -372,16 +372,10 @@ get_value_handle (tree expr)\n     {\n       return SSA_NAME_VALUE (expr);\n     }\n-  else if (TREE_CODE_CLASS (TREE_CODE (expr)) == 'c')\n+  else if (TREE_CODE_CLASS (TREE_CODE (expr)) == 'c'\n+\t   || EXPR_P (expr))\n     {\n-      cst_ann_t ann = cst_ann (expr);  \n-      if (ann)\n-\treturn ann->common.value_handle;\n-      return NULL;\n-    }\n-  else if (EXPR_P (expr))\n-    {\n-      expr_ann_t ann = expr_ann (expr);\n+      tree_ann_t ann = tree_ann (expr);  \n       if (ann)\n \treturn ann->common.value_handle;\n       return NULL;\n@@ -399,10 +393,9 @@ set_value_handle (tree e, tree v)\n     abort ();\n   else if (TREE_CODE (e) == SSA_NAME)\n     SSA_NAME_VALUE (e) = v;\n-  else if (TREE_CODE_CLASS (TREE_CODE (e)) == 'c')\n-    get_cst_ann (e)->common.value_handle = v;\n-  else if (EXPR_P (e))\n-    get_expr_ann (e)->common.value_handle = v;\n+  else if (TREE_CODE_CLASS (TREE_CODE (e)) == 'c'\n+\t   || EXPR_P (e))\n+    get_tree_ann (e)->common.value_handle = v;\n }\n \n /* A three tuple {e, pred, v} used to cache phi translations in the\n@@ -978,7 +971,7 @@ phi_translate (tree expr, value_set_t set,  basic_block pred,\n \t  {\n \t    newexpr = pool_alloc (binary_node_pool);\n \t    memcpy (newexpr, expr, tree_size (expr));\n-\t    create_expr_ann (newexpr);\n+\t    create_tree_ann (newexpr);\n \t    TREE_OPERAND (newexpr, 0) = newop1 == oldop1 ? oldop1 : get_value_handle (newop1);\n \t    TREE_OPERAND (newexpr, 1) = newop2 == oldop2 ? oldop2 : get_value_handle (newop2);\n \t    lookup_or_add (value_table, newexpr);\n@@ -1001,7 +994,7 @@ phi_translate (tree expr, value_set_t set,  basic_block pred,\n \t  {\n \t    newexpr = pool_alloc (unary_node_pool);\n \t    memcpy (newexpr, expr, tree_size (expr));\n-\t    create_expr_ann (newexpr);\t \n+\t    create_tree_ann (newexpr);\t \n \t    TREE_OPERAND (newexpr, 0) = get_value_handle (newop1);\n \t    lookup_or_add (value_table, newexpr);\n \t    expr = newexpr;"}, {"sha": "7a703d5485de4890d99186907e8f1f052b144892", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d72ee6e3ede175130413390d15726c09678cfb/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=06d72ee6e3ede175130413390d15726c09678cfb", "patch": "@@ -594,7 +594,7 @@ adjust_return_value (basic_block bb, tree m, tree a)\n \n   if (TREE_CODE (ret_var) == MODIFY_EXPR)\n     {\n-      ret_var->common.ann = (tree_ann) stmt_ann (ret_stmt);\n+      ret_var->common.ann = (tree_ann_t) stmt_ann (ret_stmt);\n       bsi_replace (&bsi, ret_var, true);\n       SSA_NAME_DEF_STMT (TREE_OPERAND (ret_var, 0)) = ret_var;\n       ret_var = TREE_OPERAND (ret_var, 0);"}]}