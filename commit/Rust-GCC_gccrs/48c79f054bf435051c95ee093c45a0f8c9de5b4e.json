{"sha": "48c79f054bf435051c95ee093c45a0f8c9de5b4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjNzlmMDU0YmY0MzUwNTFjOTVlZTA5M2M0NWEwZjhjOWRlNWI0ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-30T10:42:50Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-30T10:42:50Z"}, "message": "aarch64: Tweak post-RA handling of CONST_INT moves [PR98136]\n\nThis PR is a regression caused by r8-5967, where we replaced\na call to aarch64_internal_mov_immediate in aarch64_add_offset\nwith a call to aarch64_force_temporary, which in turn uses the\nnormal emit_move_insn{,_1} routines.\n\nThe problem is that aarch64_add_offset can be called while\noutputting a thunk, where we require all instructions to be\nvalid without splitting.  However, the move expanders were\nnot splitting CONST_INT moves themselves.\n\nI think the right fix is to make the move expanders work\neven in this scenario, rather than require callers to handle\nit as a special case.\n\ngcc/\n\tPR target/98136\n\t* config/aarch64/aarch64.md (mov<mode>): Pass multi-instruction\n\tCONST_INTs to aarch64_expand_mov_immediate when called after RA.\n\ngcc/testsuite/\n\tPR target/98136\n\t* g++.dg/pr98136.C: New test.", "tree": {"sha": "692221b7fef075bfaa38c430aab6a7eee79a35af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/692221b7fef075bfaa38c430aab6a7eee79a35af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48c79f054bf435051c95ee093c45a0f8c9de5b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c79f054bf435051c95ee093c45a0f8c9de5b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c79f054bf435051c95ee093c45a0f8c9de5b4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c79f054bf435051c95ee093c45a0f8c9de5b4e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2fda1328ee69b92724d6b3cffb741f07d86047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2fda1328ee69b92724d6b3cffb741f07d86047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2fda1328ee69b92724d6b3cffb741f07d86047"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "a398c3d31ce4d985427b325dcb72dd5b8d956886", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c79f054bf435051c95ee093c45a0f8c9de5b4e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c79f054bf435051c95ee093c45a0f8c9de5b4e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=48c79f054bf435051c95ee093c45a0f8c9de5b4e", "patch": "@@ -1241,10 +1241,19 @@\n     if (GET_CODE (operands[0]) == MEM && operands[1] != const0_rtx)\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n \n-    /* FIXME: RR we still need to fix up what we are doing with\n-       symbol_refs and other types of constants.  */\n-    if (CONSTANT_P (operands[1])\n-        && !CONST_INT_P (operands[1]))\n+    /* Lower moves of symbolic constants into individual instructions.\n+       Doing this now is sometimes necessary for correctness, since some\n+       sequences require temporary pseudo registers.  Lowering now is also\n+       often better for optimization, since more RTL passes get the\n+       chance to optimize the individual instructions.\n+\n+       When called after RA, also split multi-instruction moves into\n+       smaller pieces now, since we can't be sure that sure that there\n+       will be a following split pass.  */\n+    if (CONST_INT_P (operands[1])\n+\t? (reload_completed\n+\t   && !aarch64_mov_imm_operand (operands[1], <MODE>mode))\n+\t: CONSTANT_P (operands[1]))\n      {\n        aarch64_expand_mov_immediate (operands[0], operands[1]);\n        DONE;"}, {"sha": "f3c27f6b09f66d18a225ee521cb862942ff96e53", "filename": "gcc/testsuite/g++.dg/pr98136.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c79f054bf435051c95ee093c45a0f8c9de5b4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98136.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c79f054bf435051c95ee093c45a0f8c9de5b4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98136.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr98136.C?ref=48c79f054bf435051c95ee093c45a0f8c9de5b4e", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile { target { ilp32 || lp64 } } }\n+\n+struct AddIn\n+{\n+    virtual ~AddIn() {}\n+    virtual void AddInCall()=0;\n+};\n+\n+struct Base\n+{\n+    char b[32*1024*1024];   // Anything bigger than 16mb causes internal compiler error\n+    virtual ~Base() {}\n+};\n+\n+struct Deriv : public Base,\n+                    public AddIn\n+{\n+    void AddInCall() {}\n+};\n+\n+int main (int argc, char **argv)\n+{\n+    Deriv deriv;\n+    deriv.AddInCall();\n+    return 0;\n+}"}]}