{"sha": "b5c1c7a96bc8d7062d2c35675f48131667498182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjMWM3YTk2YmM4ZDcwNjJkMmMzNTY3NWY0ODEzMTY2NzQ5ODE4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-21T19:16:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-21T19:16:21Z"}, "message": "openmp: Fix up firstprivate+lastprivate clause handling [PR99928]\n\nThe C/C++ clause splitting happens very early during construct parsing,\nbut only the FEs later on handle possible instantiations, non-static\nmember handling and array section lowering.\nIn the OpenMP 5.0/5.1 rules, whether firstprivate is added to combined\ntarget depends on whether it isn't also mentioned in lastprivate or map\nclauses, but unfortunately I think such checks are much better done only\nwhen the FEs perform all the above mentioned changes.\nSo, this patch arranges for the firstprivate clause to be copied or moved\nto combined target construct (as before), but sets flags on that clause,\nwhich tell the FE *finish_omp_clauses and the gimplifier it has been added\nonly conditionally and let the FEs and gimplifier DTRT for these.\n\n2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99928\ngcc/\n\t* tree.h (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET): Define.\n\t* gimplify.c (enum gimplify_omp_var_data): Fix up\n\tGOVD_MAP_HAS_ATTACHMENTS value, add GOVD_FIRSTPRIVATE_IMPLICIT.\n\t(omp_lastprivate_for_combined_outer_constructs): If combined target\n\thas GOVD_FIRSTPRIVATE_IMPLICIT set for the decl, change it to\n\tGOVD_MAP | GOVD_SEEN.\n\t(gimplify_scan_omp_clauses): Set GOVD_FIRSTPRIVATE_IMPLICIT for\n\tfirstprivate clauses with OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT.\n\t(gimplify_adjust_omp_clauses): For firstprivate clauses with\n\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT either clear that bit and\n\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET too, or remove it and\n\tlet it be replaced by implicit map clause.\ngcc/c-family/\n\t* c-omp.c (c_omp_split_clauses): Set OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT\n\ton firstprivate clause copy going to target construct, and for\n\ttarget simd set also OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET bit.\ngcc/c/\n\t* c-typeck.c (c_finish_omp_clauses): Move firstprivate clauses with\n\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT to the end of the chain.  Don't error\n\tif a decl is mentioned both in map clause and in such firstprivate\n\tclause unless OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET is also set.\ngcc/cp/\n\t* semantics.c (finish_omp_clauses): Move firstprivate clauses with\n\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT to the end of the chain.  Don't error\n\tif a decl is mentioned both in map clause and in such firstprivate\n\tclause unless OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET is also set.\ngcc/testsuite/\n\t* c-c++-common/gomp/pr99928-3.c: Remove all xfails.\n\t* c-c++-common/gomp/pr99928-15.c: New test.", "tree": {"sha": "d1457a8256ab4253efaec7d76f9dca9d934378e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1457a8256ab4253efaec7d76f9dca9d934378e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5c1c7a96bc8d7062d2c35675f48131667498182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c1c7a96bc8d7062d2c35675f48131667498182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c1c7a96bc8d7062d2c35675f48131667498182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c1c7a96bc8d7062d2c35675f48131667498182/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e"}], "stats": {"total": 153, "additions": 140, "deletions": 13}, "files": [{"sha": "0945a1e5cc45372e2e61a1e539f5ac78f8d7878e", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=b5c1c7a96bc8d7062d2c35675f48131667498182", "patch": "@@ -1733,10 +1733,21 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t\t{\n \t\t  /* This must be #pragma omp target simd.  */\n \t\t  s = C_OMP_CLAUSE_SPLIT_TARGET;\n+\t\t  OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (clauses) = 1;\n+\t\t  OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET (clauses) = 1;\n \t\t  break;\n \t\t}\n \t      c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n \t\t\t\t    OMP_CLAUSE_FIRSTPRIVATE);\n+\t      /* firstprivate should not be applied to target if it is\n+\t\t also lastprivate or on the combined/composite construct,\n+\t\t or if it is mentioned in map clause.  OMP_CLAUSE_DECLs\n+\t\t may need to go through FE handling though (instantiation,\n+\t\t C++ non-static data members, array section lowering), so\n+\t\t add the clause with OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT and\n+\t\t let *finish_omp_clauses and the gimplifier handle it\n+\t\t right.  */\n+\t      OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c) = 1;\n \t      OMP_CLAUSE_DECL (c) = OMP_CLAUSE_DECL (clauses);\n \t      OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n \t      cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = c;"}, {"sha": "fc64ef96fb8c3eb7fac0cfc4880b575a086874ee", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b5c1c7a96bc8d7062d2c35675f48131667498182", "patch": "@@ -13936,6 +13936,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n      has been seen, -2 if mixed inscan/normal reduction diagnosed.  */\n   int reduction_seen = 0;\n   bool allocate_seen = false;\n+  bool firstprivate_implicit_moved = false;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -14377,6 +14378,29 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  break;\n \n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n+\t  if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c)\n+\t      && !firstprivate_implicit_moved)\n+\t    {\n+\t      firstprivate_implicit_moved = true;\n+\t      /* Move firstprivate clauses with\n+\t\t OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT set to the end of\n+\t\t clauses chain.  */\n+\t      tree cl = NULL, *pc1 = pc, *pc2 = &cl;\n+\t      while (*pc1)\n+\t\tif (OMP_CLAUSE_CODE (*pc1) == OMP_CLAUSE_FIRSTPRIVATE\n+\t\t    && OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (*pc1))\n+\t\t  {\n+\t\t    *pc2 = *pc1;\n+\t\t    pc2 = &OMP_CLAUSE_CHAIN (*pc2);\n+\t\t    *pc1 = OMP_CLAUSE_CHAIN (*pc1);\n+\t\t  }\n+\t\telse\n+\t\t  pc1 = &OMP_CLAUSE_CHAIN (*pc1);\n+\t      *pc2 = NULL;\n+\t      *pc1 = cl;\n+\t      if (pc1 != pc)\n+\t\tcontinue;\n+\t    }\n \t  t = OMP_CLAUSE_DECL (c);\n \t  need_complete = true;\n \t  need_implicitly_determined = true;\n@@ -14398,6 +14422,9 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      if (ort == C_ORT_ACC)\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t  \"%qD appears more than once in data clauses\", t);\n+\t      else if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c)\n+\t\t       && !OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET (c))\n+\t\t/* Silently drop the clause.  */;\n \t      else\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t  \"%qD appears both in data and map clauses\", t);"}, {"sha": "fffbe40613e904e970cadbff513b0c9ae05654fe", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b5c1c7a96bc8d7062d2c35675f48131667498182", "patch": "@@ -6519,6 +6519,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bool allocate_seen = false;\n   tree detach_seen = NULL_TREE;\n   bool mergeable_seen = false;\n+  bool firstprivate_implicit_moved = false;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -6843,6 +6844,29 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  break;\n \n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n+\t  if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c)\n+\t      && !firstprivate_implicit_moved)\n+\t    {\n+\t      firstprivate_implicit_moved = true;\n+\t      /* Move firstprivate clauses with\n+\t\t OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT set to the end of\n+\t\t clauses chain.  */\n+\t      tree cl = NULL, *pc1 = pc, *pc2 = &cl;\n+\t      while (*pc1)\n+\t\tif (OMP_CLAUSE_CODE (*pc1) == OMP_CLAUSE_FIRSTPRIVATE\n+\t\t    && OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (*pc1))\n+\t\t  {\n+\t\t    *pc2 = *pc1;\n+\t\t    pc2 = &OMP_CLAUSE_CHAIN (*pc2);\n+\t\t    *pc1 = OMP_CLAUSE_CHAIN (*pc1);\n+\t\t  }\n+\t\telse\n+\t\t  pc1 = &OMP_CLAUSE_CHAIN (*pc1);\n+\t      *pc2 = NULL;\n+\t      *pc1 = cl;\n+\t      if (pc1 != pc)\n+\t\tcontinue;\n+\t    }\n \t  t = omp_clause_decl_field (OMP_CLAUSE_DECL (c));\n \t  if (t)\n \t    omp_note_field_privatization (t, OMP_CLAUSE_DECL (c));\n@@ -6884,6 +6908,9 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      if (ort == C_ORT_ACC)\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t  \"%qD appears more than once in data clauses\", t);\n+\t      else if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c)\n+\t\t       && !OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET (c))\n+\t\t/* Silently drop the clause.  */;\n \t      else\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t  \"%qD appears both in data and map clauses\", t);"}, {"sha": "b62ea0efc1cb589c0d254f32deefcd197ca8eb5a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b5c1c7a96bc8d7062d2c35675f48131667498182", "patch": "@@ -126,7 +126,10 @@ enum gimplify_omp_var_data\n \n   /* Flag for GOVD_MAP: (struct) vars that have pointer attachments for\n      fields.  */\n-  GOVD_MAP_HAS_ATTACHMENTS = 8388608,\n+  GOVD_MAP_HAS_ATTACHMENTS = 0x4000000,\n+\n+  /* Flag for GOVD_FIRSTPRIVATE: OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT.  */\n+  GOVD_FIRSTPRIVATE_IMPLICIT = 0x8000000,\n \n   GOVD_DATA_SHARE_CLASS = (GOVD_SHARED | GOVD_PRIVATE | GOVD_FIRSTPRIVATE\n \t\t\t   | GOVD_LASTPRIVATE | GOVD_REDUCTION | GOVD_LINEAR\n@@ -8586,13 +8589,24 @@ omp_lastprivate_for_combined_outer_constructs (struct gimplify_omp_ctx *octx,\n \t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n \t  continue;\n \t}\n-      if (octx->region_type == ORT_COMBINED_TARGET\n-\t  && splay_tree_lookup (octx->variables,\n-\t\t\t\t(splay_tree_key) decl) == NULL)\n+      if (octx->region_type == ORT_COMBINED_TARGET)\n \t{\n-\t  omp_add_variable (octx, decl, GOVD_MAP | GOVD_SEEN);\n-\t  octx = octx->outer_context;\n-\t  break;\n+\t  splay_tree_node n = splay_tree_lookup (octx->variables,\n+\t\t\t\t\t\t (splay_tree_key) decl);\n+\t  if (n == NULL)\n+\t    {\n+\t      omp_add_variable (octx, decl, GOVD_MAP | GOVD_SEEN);\n+\t      octx = octx->outer_context;\n+\t    }\n+\t  else if (!implicit_p\n+\t\t   && (n->value & GOVD_FIRSTPRIVATE_IMPLICIT))\n+\t    {\n+\t      n->value &= ~(GOVD_FIRSTPRIVATE\n+\t\t\t    | GOVD_FIRSTPRIVATE_IMPLICIT\n+\t\t\t    | GOVD_EXPLICIT);\n+\t      omp_add_variable (octx, decl, GOVD_MAP | GOVD_SEEN);\n+\t      octx = octx->outer_context;\n+\t    }\n \t}\n       break;\n     }\n@@ -8673,6 +8687,11 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n \t  flags = GOVD_FIRSTPRIVATE | GOVD_EXPLICIT;\n \t  check_non_private = \"firstprivate\";\n+\t  if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c))\n+\t    {\n+\t      gcc_assert (code == OMP_TARGET);\n+\t      flags |= GOVD_FIRSTPRIVATE_IMPLICIT;\n+\t    }\n \t  goto do_add;\n \tcase OMP_CLAUSE_LASTPRIVATE:\n \t  if (OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n@@ -10532,6 +10551,18 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t      remove = true;\n \t      break;\n \t    }\n+\t  if (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c))\n+\t    {\n+\t      decl = OMP_CLAUSE_DECL (c);\n+\t      n = splay_tree_lookup (ctx->variables, (splay_tree_key) decl);\n+\t      if ((n->value & GOVD_MAP) != 0)\n+\t\t{\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n+\t      OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET (c) = 0;\n+\t      OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT (c) = 0;\n+\t    }\n \t  /* FALLTHRU */\n \tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_SHARED:"}, {"sha": "f0c6232d27c6fb1b4e72b4552148d1c7e268a02f", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-15.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-15.c?ref=b5c1c7a96bc8d7062d2c35675f48131667498182", "patch": "@@ -0,0 +1,26 @@\n+/* PR middle-end/99928 */\n+\n+int v;\n+\n+void\n+foo (void)\n+{\n+  #pragma omp target parallel firstprivate (v) map(tofrom: v)\t/* { dg-bogus \"'v' appears both in data and map clauses\" } */\n+  v++;\n+}\n+\n+void\n+bar (void)\n+{\n+  #pragma omp target firstprivate (v) map (tofrom: v)\t/* { dg-error \"'v' appears both in data and map clauses\" } */\n+  v++;\n+}\n+\n+void\n+baz (void)\n+{\n+  int j;\n+  #pragma omp target simd firstprivate (v) map (tofrom: v) private (j)\t/* { dg-error \"'v' appears both in data and map clauses\" } */\n+  for (int i = 0; i < 1; i++)\n+    j = v;\n+}"}, {"sha": "cf9c72d75b88f06c9df740d04e5915f75fae70ab", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-3.c?ref=b5c1c7a96bc8d7062d2c35675f48131667498182", "patch": "@@ -82,17 +82,17 @@ bar (void)\n     #pragma omp section\n     l07 = 2;\n   }\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l08\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l08\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } *//* FIXME.  */\n   #pragma omp target parallel for firstprivate (l08) lastprivate (l08)\n   for (int i = 0; i < 64; i++)\n     l08 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l09\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l09\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } *//* FIXME.  */\n@@ -102,8 +102,8 @@ bar (void)\n   #pragma omp target parallel for simd firstprivate (l09) lastprivate (l09)\n   for (int i = 0; i < 64; i++)\n     l09 = i;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l10\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l10\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } } */\n   #pragma omp target simd firstprivate (l10) lastprivate (l10)"}, {"sha": "37aca8963fe4e61a99f6276b86ef6b5beea287ca", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c1c7a96bc8d7062d2c35675f48131667498182/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b5c1c7a96bc8d7062d2c35675f48131667498182", "patch": "@@ -1538,6 +1538,11 @@ class auto_suppress_location_wrappers\n #define OMP_CLAUSE_FIRSTPRIVATE_NO_REFERENCE(NODE) \\\n   TREE_PRIVATE (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_FIRSTPRIVATE))\n \n+/* True on a FIRSTPRIVATE clause with OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT also\n+   set if target construct is the only one that accepts the clause.  */\n+#define OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET(NODE) \\\n+  TREE_PROTECTED (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_FIRSTPRIVATE))\n+\n /* True on a LASTPRIVATE clause if a FIRSTPRIVATE clause for the same\n    decl is present in the chain.  */\n #define OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE(NODE) \\"}]}