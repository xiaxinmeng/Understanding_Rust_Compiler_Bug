{"sha": "e775e6b69761811ccd6a4034275eee019f410f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3NWU2YjY5NzYxODExY2NkNmE0MDM0Mjc1ZWVlMDE5ZjQxMGY2NQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-01-17T11:58:48Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-01-17T11:58:48Z"}, "message": "re PR fortran/38657 (PUBLIC/PRIVATE Common blocks)\n\n2009-01-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38657\n\t* module.c (write_common_0): Add argument 'this_module' and\n\tcheck that non-use associated common blocks are written first.\n\t(write_common): Call write_common_0 twice, once with true and\n\tthen with false.\n\n2009-01-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38657\n\t* gfortran.dg/module_commons_3.f90: Reapply.\n\nFrom-SVN: r143463", "tree": {"sha": "0c9411f4507eb86dfeb2d2ba72500e57179dd827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c9411f4507eb86dfeb2d2ba72500e57179dd827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e775e6b69761811ccd6a4034275eee019f410f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e775e6b69761811ccd6a4034275eee019f410f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e775e6b69761811ccd6a4034275eee019f410f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e775e6b69761811ccd6a4034275eee019f410f65/comments", "author": null, "committer": null, "parents": [{"sha": "c41fea4af48ddaeeef4c043d874c8c333d669849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41fea4af48ddaeeef4c043d874c8c333d669849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41fea4af48ddaeeef4c043d874c8c333d669849"}], "stats": {"total": 82, "additions": 78, "deletions": 4}, "files": [{"sha": "a5244ab70c672eb5f857768e825afde2625fe01b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e775e6b69761811ccd6a4034275eee019f410f65", "patch": "@@ -1,3 +1,11 @@\n+2009-01-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38657\n+\t* module.c (write_common_0): Add argument 'this_module' and\n+\tcheck that non-use associated common blocks are written first.\n+\t(write_common): Call write_common_0 twice, once with true and\n+\tthen with false.\n+\n 2009-01-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34955"}, {"sha": "09c3e20e312a5f5e31131fbd06a78e87c5cc0f7d", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=e775e6b69761811ccd6a4034275eee019f410f65", "patch": "@@ -4333,7 +4333,7 @@ free_written_common (struct written_common *w)\n /* Write a common block to the module -- recursive helper function.  */\n \n static void\n-write_common_0 (gfc_symtree *st)\n+write_common_0 (gfc_symtree *st, bool this_module)\n {\n   gfc_common_head *p;\n   const char * name;\n@@ -4345,7 +4345,7 @@ write_common_0 (gfc_symtree *st)\n   if (st == NULL)\n     return;\n \n-  write_common_0 (st->left);\n+  write_common_0 (st->left, this_module);\n \n   /* We will write out the binding label, or the name if no label given.  */\n   name = st->n.common->name;\n@@ -4364,6 +4364,9 @@ write_common_0 (gfc_symtree *st)\n       w = (c < 0) ? w->left : w->right;\n     }\n \n+  if (this_module && p->use_assoc)\n+    write_me = false;\n+\n   if (write_me)\n     {\n       /* Write the common to the module.  */\n@@ -4389,7 +4392,7 @@ write_common_0 (gfc_symtree *st)\n       gfc_insert_bbt (&written_commons, w, compare_written_commons);\n     }\n \n-  write_common_0 (st->right);\n+  write_common_0 (st->right, this_module);\n }\n \n \n@@ -4400,7 +4403,8 @@ static void\n write_common (gfc_symtree *st)\n {\n   written_commons = NULL;\n-  write_common_0 (st);\n+  write_common_0 (st, true);\n+  write_common_0 (st, false);\n   free_written_common (written_commons);\n   written_commons = NULL;\n }"}, {"sha": "74d88f1128e1950c04c8d3b046ed220b37f9e1c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e775e6b69761811ccd6a4034275eee019f410f65", "patch": "@@ -1,3 +1,8 @@\n+2009-01-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38657\n+\t* gfortran.dg/module_commons_3.f90: Reapply.\n+\n 2009-01-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34955"}, {"sha": "a57863e9a3e4149e16efafdbd829e50e6b49a9ed", "filename": "gcc/testsuite/gfortran.dg/module_commons_3.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_commons_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e775e6b69761811ccd6a4034275eee019f410f65/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_commons_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_commons_3.f90?ref=e775e6b69761811ccd6a4034275eee019f410f65", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+!\n+! PR fortran/38657, in which the mixture of PRIVATE and\n+! COMMON in TEST4, would mess up the association with\n+! TESTCHAR in TEST2.\n+!\n+! Contributed by Paul Thomas <pault@gcc.gnu.org>\n+! From a report in clf by Chris Bradley.\n+!\n+MODULE TEST4\n+  PRIVATE\n+  CHARACTER(LEN=80) :: T1 = &\n+    \"Mary had a little lamb, Its fleece was white as snow;\"\n+  CHARACTER(LEN=80) :: T2 = &\n+    \"And everywhere that Mary went, The lamb was sure to go.\"\n+  CHARACTER(LEN=80) :: TESTCHAR\n+  COMMON /TESTCOMMON1/ TESTCHAR\n+  PUBLIC T1, T2, FOOBAR\n+CONTAINS\n+  subroutine FOOBAR (CHECK)\n+    CHARACTER(LEN=80) :: CHECK\n+    IF (TESTCHAR .NE. CHECK) CALL ABORT\n+  end subroutine\n+END MODULE TEST4\n+\n+MODULE TEST3\n+  CHARACTER(LEN=80) :: TESTCHAR\n+  COMMON /TESTCOMMON1/ TESTCHAR\n+END MODULE TEST3\n+\n+MODULE TEST2\n+  use TEST4\n+  USE TEST3, chr => testchar\n+  PRIVATE\n+  CHARACTER(LEN=80) :: TESTCHAR\n+  COMMON /TESTCOMMON1/ TESTCHAR\n+  PUBLIC TESTCHAR, FOO, BAR, CHR, T1, T2, FOOBAR\n+contains\n+  subroutine FOO\n+    TESTCHAR = T1\n+  end subroutine\n+  subroutine BAR (CHECK)\n+    CHARACTER(LEN=80) :: CHECK\n+    IF (TESTCHAR .NE. CHECK) CALL ABORT\n+    IF (CHR .NE. CHECK) CALL ABORT\n+  end subroutine\n+END MODULE TEST2\n+\n+PROGRAM TEST1\n+  USE TEST2\n+  call FOO\n+  call BAR (T1)\n+  TESTCHAR = T2\n+  call BAR (T2)\n+  CALL FOOBAR (T2)\n+END PROGRAM TEST1\n+! { dg-final { cleanup-modules \"TEST2 TEST3 TEST4\" } }"}]}