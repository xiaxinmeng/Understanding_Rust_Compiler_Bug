{"sha": "a092e4ebbabead18ccd04822c7c06e9dbc6cd77c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5MmU0ZWJiYWJlYWQxOGNjZDA0ODIyYzdjMDZlOWRiYzZjZDc3Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-02-07T19:27:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-02-07T19:27:38Z"}, "message": "money_get_members_char.cc: Add comment, tidy up.\n\n2002-02-07  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* testsuite/22_locale/money_get_members_char.cc:\n\tAdd comment, tidy up.\n\t(test01): more \"en_HK\" tests (without showbase).\n\t* testsuite/22_locale/money_get_members_wchar_t.cc: Ditto.\n\nFrom-SVN: r49587", "tree": {"sha": "f4338ad253a939900af5abbde6bf061bc0834e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4338ad253a939900af5abbde6bf061bc0834e3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c/comments", "author": null, "committer": null, "parents": [{"sha": "85ea93b38f6e75108b00892ed3251b482b4daeae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ea93b38f6e75108b00892ed3251b482b4daeae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ea93b38f6e75108b00892ed3251b482b4daeae"}], "stats": {"total": 103, "additions": 79, "deletions": 24}, "files": [{"sha": "f384f07fa76de4739051920c4a52f429544b4dff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a092e4ebbabead18ccd04822c7c06e9dbc6cd77c", "patch": "@@ -1,3 +1,10 @@\n+2002-02-07  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* testsuite/22_locale/money_get_members_char.cc:\n+\tAdd comment, tidy up.\n+\t(test01): more \"en_HK\" tests (without showbase).\n+\t* testsuite/22_locale/money_get_members_wchar_t.cc: Ditto.\n+\n 2002-02-06  Loren Rittle <ljrittle@acm.org>\n \n \t* config/locale/c_locale_generic.cc: Do not trust"}, {"sha": "e26189c32c3ba2cd0e8157883d29879e55c07fed", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=a092e4ebbabead18ccd04822c7c06e9dbc6cd77c", "patch": "@@ -170,6 +170,36 @@ void test01()\n   mon_get.get(is_it11, end, true, iss, err11, result11);\n   VERIFY( result11 == digits4 );\n   VERIFY( err11 == ios_base::goodbit );\n+\n+  // for the \"en_HK\" locale the parsing of the very same input streams must\n+  // be successful without showbase too, since the symbol field appears in\n+  // the first positions in the format and the symbol, when present, must be\n+  // consumed.\n+  iss.unsetf(ios_base::showbase);\n+\n+  iss.str(\"HK$7,200,000,000.00\"); \n+  iterator_type is_it12(iss);\n+  string result12;\n+  ios_base::iostate err12 = ios_base::goodbit;\n+  mon_get.get(is_it12, end, false, iss, err12, result12);\n+  VERIFY( result12 == digits1 );\n+  VERIFY( err12 == ios_base::eofbit );\n+\n+  iss.str(\"(HKD 100,000,000,000.00)\"); \n+  iterator_type is_it13(iss);\n+  string result13;\n+  ios_base::iostate err13 = ios_base::goodbit;\n+  mon_get.get(is_it13, end, true, iss, err13, result13);\n+  VERIFY( result13 == digits2 );\n+  VERIFY( err13 == ios_base::goodbit );\n+\n+  iss.str(\"(HKD .01)\"); \n+  iterator_type is_it14(iss);\n+  string result14;\n+  ios_base::iostate err14 = ios_base::goodbit;\n+  mon_get.get(is_it14, end, true, iss, err14, result14);\n+  VERIFY( result14 == digits4 );\n+  VERIFY( err14 == ios_base::goodbit );\n }\n \n // test double version\n@@ -309,12 +339,9 @@ void test04()\n #endif\n }\n \n-class My_money_io : public std::moneypunct<char,false>\n+struct My_money_io : public std::moneypunct<char,false>\n {\n-public:\n-  explicit My_money_io(size_t r = 0): std::moneypunct<char,false>(r) { }\n   char_type do_decimal_point() const { return '.'; }\n-  char_type do_thousands_sep() const { return ','; }\n   std::string do_grouping() const { return \"\\004\"; }\n   \n   std::string do_curr_symbol() const { return \"$\"; }\n@@ -383,6 +410,9 @@ void test05()\n   VERIFY( valn_ns == \"-123456\" );\n }\n \n+// We were appending to the string val passed by reference, instead\n+// of constructing a temporary candidate, eventually copied into\n+// val in case of successful parsing.\n void test06()\n {\n   using namespace std;\n@@ -419,12 +449,9 @@ void test06()\n   VERIFY( val == buffer3 );\n }\n \n-class My_money_io_a : public std::moneypunct<char,false>\n+struct My_money_io_a : public std::moneypunct<char,false>\n {\n-public:\n-  explicit My_money_io_a(size_t r = 0): std::moneypunct<char,false>(r) { }\n   char_type do_decimal_point() const { return '.'; }\n-  char_type do_thousands_sep() const { return ','; }\n   std::string do_grouping() const { return \"\\004\"; }\n   \n   std::string do_curr_symbol() const { return \"$\"; }\n@@ -439,12 +466,9 @@ class My_money_io_a : public std::moneypunct<char,false>\n   }\n };\n \n-class My_money_io_b : public std::moneypunct<char,false>\n+struct My_money_io_b : public std::moneypunct<char,false>\n {\n-public:\n-  explicit My_money_io_b(size_t r = 0): std::moneypunct<char,false>(r) { }\n   char_type do_decimal_point() const { return '.'; }\n-  char_type do_thousands_sep() const { return ','; }\n   std::string do_grouping() const { return \"\\004\"; }\n   \n   std::string do_curr_symbol() const { return \"$\"; }"}, {"sha": "9f79661a080b3107d0d321732920d3ab720ea403", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a092e4ebbabead18ccd04822c7c06e9dbc6cd77c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=a092e4ebbabead18ccd04822c7c06e9dbc6cd77c", "patch": "@@ -171,6 +171,36 @@ void test01()\n   mon_get.get(is_it11, end, true, iss, err11, result11);\n   VERIFY( result11 == digits4 );\n   VERIFY( err11 == ios_base::goodbit );\n+\n+  // for the \"en_HK\" locale the parsing of the very same input streams must\n+  // be successful without showbase too, since the symbol field appears in\n+  // the first positions in the format and the symbol, when present, must be\n+  // consumed.\n+  iss.unsetf(ios_base::showbase);\n+\n+  iss.str(L\"HK$7,200,000,000.00\"); \n+  iterator_type is_it12(iss);\n+  wstring result12;\n+  ios_base::iostate err12 = ios_base::goodbit;\n+  mon_get.get(is_it12, end, false, iss, err12, result12);\n+  VERIFY( result12 == digits1 );\n+  VERIFY( err12 == ios_base::eofbit );\n+\n+  iss.str(L\"(HKD 100,000,000,000.00)\"); \n+  iterator_type is_it13(iss);\n+  wstring result13;\n+  ios_base::iostate err13 = ios_base::goodbit;\n+  mon_get.get(is_it13, end, true, iss, err13, result13);\n+  VERIFY( result13 == digits2 );\n+  VERIFY( err13 == ios_base::goodbit );\n+\n+  iss.str(L\"(HKD .01)\"); \n+  iterator_type is_it14(iss);\n+  wstring result14;\n+  ios_base::iostate err14 = ios_base::goodbit;\n+  mon_get.get(is_it14, end, true, iss, err14, result14);\n+  VERIFY( result14 == digits4 );\n+  VERIFY( err14 == ios_base::goodbit );\n }\n \n \n@@ -311,12 +341,9 @@ void test04()\n #endif\n }\n \n-class My_money_io : public std::moneypunct<wchar_t,false>\n+struct My_money_io : public std::moneypunct<wchar_t,false>\n {\n-public:\n-  explicit My_money_io(size_t r = 0): std::moneypunct<wchar_t,false>(r) { }\n   char_type do_decimal_point() const { return L'.'; }\n-  char_type do_thousands_sep() const { return L','; }\n   std::string do_grouping() const { return \"\\004\"; }\n   \n   std::wstring do_curr_symbol() const { return L\"$\"; }\n@@ -385,6 +412,9 @@ void test05()\n   VERIFY( valn_ns == L\"-123456\" );\n }\n \n+// We were appending to the string val passed by reference, instead\n+// of constructing a temporary candidate, eventually copied into\n+// val in case of successful parsing.\n void test06()\n {\n   using namespace std;\n@@ -421,12 +451,9 @@ void test06()\n   VERIFY( val == buffer3 );\n }\n \n-class My_money_io_a : public std::moneypunct<wchar_t,false>\n+struct My_money_io_a : public std::moneypunct<wchar_t,false>\n {\n-public:\n-  explicit My_money_io_a(size_t r = 0): std::moneypunct<wchar_t,false>(r) { }\n   char_type do_decimal_point() const { return L'.'; }\n-  char_type do_thousands_sep() const { return L','; }\n   std::string do_grouping() const { return \"\\004\"; }\n   \n   std::wstring do_curr_symbol() const { return L\"$\"; }\n@@ -441,12 +468,9 @@ class My_money_io_a : public std::moneypunct<wchar_t,false>\n   }\n };\n \n-class My_money_io_b : public std::moneypunct<wchar_t,false>\n+struct My_money_io_b : public std::moneypunct<wchar_t,false>\n {\n-public:\n-  explicit My_money_io_b(size_t r = 0): std::moneypunct<wchar_t,false>(r) { }\n   char_type do_decimal_point() const { return L'.'; }\n-  char_type do_thousands_sep() const { return L','; }\n   std::string do_grouping() const { return \"\\004\"; }\n   \n   std::wstring do_curr_symbol() const { return L\"$\"; }"}]}