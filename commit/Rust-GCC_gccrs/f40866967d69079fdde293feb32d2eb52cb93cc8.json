{"sha": "f40866967d69079fdde293feb32d2eb52cb93cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwODY2OTY3ZDY5MDc5ZmRkZTI5M2ZlYjMyZDJlYjUyY2I5M2NjOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-10T12:38:29Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-10T12:45:46Z"}, "message": "c++: DECL_LOCAL_FUNCTION_P -> DECL_LOCAL_DECL_P\n\nOur handling of block-scope extern decls is insufficient for modern\nC++, in particular modules, (but also constexprs).  We mark such local\nfunction decls, and this patch extends that to marking local var decls\ntoo, so mainly a macro rename.  Also, we set this flag earlier, rather\nthan learning about it when pushing the decl.  This is a step towards\nhandling these properly.\n\n\tgcc/cp/\n\t* cp-tree.h (DECL_LOCAL_FUNCTION_P): Rename to ...\n\t(DECL_LOCAL_DECL_P): ... here.  Accept both fns and vars.\n\t* decl.c (start_decl): Set DECL_LOCAL_DECL_P for local externs.\n\t(omp_declare_variant_finalize_one): Use DECL_LOCAL_DECL_P.\n\t(local_variable_p): Simplify.\n\t* name-lookup.c (set_decl_context_in_fn): Assert DECL_LOCAL_DECL_P\n\tis as expected.  Simplify.\n\t(do_pushdecl): Don't set decl_context_in_fn for friends.\n\t(is_local_extern): Simplify.\n\t* call.c (equal_functions): Use DECL_LOCAL_DECL_P.\n\t* parser.c (cp_parser_postfix_expression): Likewise.\n\t(cp_parser_omp_declare_reduction): Likewise.\n\t* pt.c (check_default_tmpl_args): Likewise.\n\t(tsubst_expr): Assert nested reduction function is local.\n\t(type_dependent_expression_p): Use DECL_LOCAL_DECL_P.\n\t* semantics.c (finish_call_expr): Likewise.\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_build_call_expr): Use DECL_LOCAL_DECL_P.", "tree": {"sha": "606b4400706a8a4f96d751e05b3bad2356e67a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/606b4400706a8a4f96d751e05b3bad2356e67a88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f40866967d69079fdde293feb32d2eb52cb93cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40866967d69079fdde293feb32d2eb52cb93cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40866967d69079fdde293feb32d2eb52cb93cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40866967d69079fdde293feb32d2eb52cb93cc8/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d41f8429e9e1b21d862c9a934b129739a3408c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41f8429e9e1b21d862c9a934b129739a3408c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41f8429e9e1b21d862c9a934b129739a3408c79"}], "stats": {"total": 88, "additions": 36, "deletions": 52}, "files": [{"sha": "5606389f4bd7e9c9293bffccf62766a733aa7b31", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -3631,7 +3631,7 @@ equal_functions (tree fn1, tree fn2)\n     return 0;\n   if (TREE_CODE (fn1) == TEMPLATE_DECL)\n     return fn1 == fn2;\n-  if (DECL_LOCAL_FUNCTION_P (fn1) || DECL_LOCAL_FUNCTION_P (fn2)\n+  if (DECL_LOCAL_DECL_P (fn1) || DECL_LOCAL_DECL_P (fn2)\n       || DECL_EXTERN_C_FUNCTION_P (fn1))\n     return decls_match (fn1, fn2);\n   return fn1 == fn2;"}, {"sha": "b12c78739e4a2c0899c9d2ea5dc790f584b9b125", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -506,7 +506,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n \n    Usage of DECL_LANG_FLAG_?:\n    0: DECL_TEMPLATE_PARM_P (in PARM_DECL, CONST_DECL, TYPE_DECL, or TEMPLATE_DECL)\n-      DECL_LOCAL_FUNCTION_P (in FUNCTION_DECL)\n+      DECL_LOCAL_DECL_P (in FUNCTION_DECL, VAR_DECL)\n       DECL_MUTABLE_P (in FIELD_DECL)\n       DECL_DEPENDENT_P (in USING_DECL)\n       LABEL_DECL_BREAK (in LABEL_DECL)\n@@ -4009,10 +4009,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define TYPE_CONTAINS_VPTR_P(NODE)\t\t\\\n   (TYPE_POLYMORPHIC_P (NODE) || CLASSTYPE_VBASECLASSES (NODE))\n \n-/* Nonzero if NODE is a FUNCTION_DECL (for a function with global\n-   scope) declared in a local scope.  */\n-#define DECL_LOCAL_FUNCTION_P(NODE) \\\n-  DECL_LANG_FLAG_0 (FUNCTION_DECL_CHECK (NODE))\n+/* Nonzero if NODE is a FUNCTION_DECL or VARIABLE_DECL (for a decl\n+   with namespace scope) declared in a local scope.  */\n+#define DECL_LOCAL_DECL_P(NODE) \\\n+  DECL_LANG_FLAG_0 (VAR_OR_FUNCTION_DECL_CHECK (NODE))\n \n /* Nonzero if NODE is the target for genericization of 'break' stmts.  */\n #define LABEL_DECL_BREAK(NODE) \\"}, {"sha": "be2bc9db2e5d4330f154193480a0dbf8832699a1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -5199,8 +5199,8 @@ groktypename (cp_decl_specifier_seq *type_specifiers,\n   return type;\n }\n \n-/* Process a DECLARATOR for a function-scope variable declaration,\n-   namespace-scope variable declaration, or function declaration.\n+/* Process a DECLARATOR for a function-scope or namespace-scope\n+   variable or function declaration.\n    (Function definitions go through start_function; class member\n    declarations appearing in the body of the class go through\n    grokfield.)  The DECL corresponding to the DECLARATOR is returned.\n@@ -5410,6 +5410,11 @@ start_decl (const cp_declarator *declarator,\n \n   was_public = TREE_PUBLIC (decl);\n \n+  if ((DECL_EXTERNAL (decl) || TREE_CODE (decl) == FUNCTION_DECL)\n+      && current_function_decl)\n+    /* A function-scope decl of some namespace-scope decl.  */\n+    DECL_LOCAL_DECL_P (decl) = true;\n+\n   /* Enter this declaration into the symbol table.  Don't push the plain\n      VAR_DECL for a variable template.  */\n   if (!template_parm_scope_p ()\n@@ -7360,7 +7365,7 @@ omp_declare_variant_finalize_one (tree decl, tree attr)\n \t  fn = STRIP_TEMPLATE (fn);\n \t  if (!((TREE_CODE (fn) == USING_DECL && DECL_DEPENDENT_P (fn))\n \t\t || DECL_FUNCTION_MEMBER_P (fn)\n-\t\t || DECL_LOCAL_FUNCTION_P (fn)))\n+\t\t || DECL_LOCAL_DECL_P (fn)))\n \t    {\n \t      koenig_p = true;\n \t      if (!any_type_dependent_arguments_p (args))\n@@ -13877,11 +13882,9 @@ int\n local_variable_p (const_tree t)\n {\n   if ((VAR_P (t)\n-       /* A VAR_DECL with a context that is a _TYPE is a static data\n-\t  member.  */\n-       && !TYPE_P (CP_DECL_CONTEXT (t))\n-       /* Any other non-local variable must be at namespace scope.  */\n-       && !DECL_NAMESPACE_SCOPE_P (t))\n+       && (DECL_LOCAL_DECL_P (t)\n+\t   || !DECL_CONTEXT (t)\n+\t   || TREE_CODE (DECL_CONTEXT (t)) == FUNCTION_DECL))\n       || (TREE_CODE (t) == PARM_DECL))\n     return 1;\n "}, {"sha": "bbeaf64104b9b2632131e06f75279caefb28c5f4", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -2855,14 +2855,13 @@ check_local_shadow (tree decl)\n static void\n set_decl_context_in_fn (tree ctx, tree decl)\n {\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      || (VAR_P (decl) && DECL_EXTERNAL (decl)))\n+    /* Make sure local externs are marked as such.  */\n+    gcc_checking_assert (DECL_LOCAL_DECL_P (decl)\n+\t\t\t && DECL_NAMESPACE_SCOPE_P (decl));\n+\n   if (!DECL_CONTEXT (decl)\n-      /* A local declaration for a function doesn't constitute\n-\t nesting.  */\n-      && TREE_CODE (decl) != FUNCTION_DECL\n-      /* A local declaration for an `extern' variable is in the\n-\t scope of the current namespace, not the current\n-\t function.  */\n-      && !(VAR_P (decl) && DECL_EXTERNAL (decl))\n       /* When parsing the parameter list of a function declarator,\n \t don't set DECL_CONTEXT to an enclosing function.  When we\n \t push the PARM_DECLs in order to process the function body,\n@@ -2871,12 +2870,6 @@ set_decl_context_in_fn (tree ctx, tree decl)\n \t   && current_binding_level->kind == sk_function_parms\n \t   && current_binding_level->this_entity == NULL))\n     DECL_CONTEXT (decl) = ctx;\n-\n-  /* If this is the declaration for a namespace-scope function,\n-     but the declaration itself is in a local scope, mark the\n-     declaration.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_NAMESPACE_SCOPE_P (decl))\n-    DECL_LOCAL_FUNCTION_P (decl) = 1;\n }\n \n /* DECL is a local-scope decl with linkage.  SHADOWED is true if the\n@@ -2998,7 +2991,7 @@ do_pushdecl (tree decl, bool is_friend)\n   if (decl == error_mark_node)\n     return error_mark_node;\n \n-  if (!DECL_TEMPLATE_PARM_P (decl) && current_function_decl)\n+  if (!DECL_TEMPLATE_PARM_P (decl) && current_function_decl && !is_friend)\n     set_decl_context_in_fn (current_function_decl, decl);\n \n   /* The binding level we will be pushing into.  During local class\n@@ -6682,29 +6675,15 @@ lookup_type_scope (tree name, tag_scope scope)\n }\n \n /* Returns true iff DECL is a block-scope extern declaration of a function\n-   or variable.  */\n+   or variable.  We will already have determined validity of the decl\n+   when pushing it.  So we do not have to redo that lookup.  */\n \n bool\n is_local_extern (tree decl)\n {\n-  cxx_binding *binding;\n-\n-  /* For functions, this is easy.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    return DECL_LOCAL_FUNCTION_P (decl);\n-\n-  if (!VAR_P (decl))\n-    return false;\n-  if (!current_function_decl)\n-    return false;\n-\n-  /* For variables, this is not easy.  We need to look at the binding stack\n-     for the identifier to see whether the decl we have is a local.  */\n-  for (binding = IDENTIFIER_BINDING (DECL_NAME (decl));\n-       binding && binding->scope->kind != sk_namespace;\n-       binding = binding->previous)\n-    if (binding->value == decl)\n-      return LOCAL_BINDING_P (binding);\n+  if ((TREE_CODE (decl) == FUNCTION_DECL\n+       || TREE_CODE (decl) == VAR_DECL))\n+    return DECL_LOCAL_DECL_P (decl);\n \n   return false;\n }"}, {"sha": "916ea6cd910ead974c932bdb0ce1355b601743ab", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -7467,7 +7467,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\tif ((TREE_CODE (fn) == USING_DECL\n \t\t\t     && DECL_DEPENDENT_P (fn))\n \t\t\t    || DECL_FUNCTION_MEMBER_P (fn)\n-\t\t\t    || DECL_LOCAL_FUNCTION_P (fn))\n+\t\t\t    || DECL_LOCAL_DECL_P (fn))\n \t\t\t  {\n \t\t\t    do_adl_p = false;\n \t\t\t    break;\n@@ -42582,6 +42582,7 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n \t{\n \t  block_scope = true;\n \t  DECL_CONTEXT (fndecl) = global_namespace;\n+\t  DECL_LOCAL_DECL_P (fndecl) = true;\n \t  if (!processing_template_decl)\n \t    pushdecl (fndecl);\n \t}"}, {"sha": "d4ece3818a4895e4938560f5b37abfe181527143", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -5417,7 +5417,7 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n      class template.  */\n \n   if (TREE_CODE (CP_DECL_CONTEXT (decl)) == FUNCTION_DECL\n-      || (TREE_CODE (decl) == FUNCTION_DECL && DECL_LOCAL_FUNCTION_P (decl)))\n+      || (TREE_CODE (decl) == FUNCTION_DECL && DECL_LOCAL_DECL_P (decl)))\n     /* You can't have a function template declaration in a local\n        scope, nor you can you define a member of a class template in a\n        local scope.  */\n@@ -18080,6 +18080,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t    /* We pretend this is regular local extern decl of\n \t\t       a namespace-scope fn.  Then we make it really\n \t\t       local, it is a nested function.  */\n+\t\t    gcc_checking_assert (DECL_LOCAL_DECL_P (decl));\n \t\t    DECL_CONTEXT (decl) = global_namespace;\n \t\t    pushdecl (decl);\n \t\t    DECL_CONTEXT (decl) = current_function_decl;\n@@ -26978,7 +26979,7 @@ type_dependent_expression_p (tree expression)\n \t   && DECL_FRIEND_P (expression)\n \t   && (!DECL_FRIEND_CONTEXT (expression)\n \t       || dependent_type_p (DECL_FRIEND_CONTEXT (expression))))\n-      && !DECL_LOCAL_FUNCTION_P (expression))\n+      && !DECL_LOCAL_DECL_P (expression))\n     {\n       gcc_assert (!dependent_type_p (TREE_TYPE (expression))\n \t\t  || undeduced_auto_decl (expression));"}, {"sha": "dafb4032c00aa0d8cfbba10039cc6f65cca2e8cd", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -2518,7 +2518,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t{\n \t  tree ifn = get_first_fn (fn);\n \t  if (TREE_CODE (ifn) == FUNCTION_DECL\n-\t      && DECL_LOCAL_FUNCTION_P (ifn))\n+\t      && DECL_LOCAL_DECL_P (ifn))\n \t    orig_fn = DECL_NAME (ifn);\n \t}\n "}, {"sha": "c8b30113ce66a98a8ad989288e2fdfa2ac8c7b7e", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40866967d69079fdde293feb32d2eb52cb93cc8/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40866967d69079fdde293feb32d2eb52cb93cc8/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=f40866967d69079fdde293feb32d2eb52cb93cc8", "patch": "@@ -3294,7 +3294,7 @@ plugin_build_call_expr (cc1_plugin::connection *self,\n \t  fn = STRIP_TEMPLATE (fn);\n \n \t  if (!DECL_FUNCTION_MEMBER_P (fn)\n-\t      && !DECL_LOCAL_FUNCTION_P (fn))\n+\t      && !DECL_LOCAL_DECL_P (fn))\n \t    koenig_p = true;\n \t}\n     }"}]}