{"sha": "45beb02eb0ab4714349e56e854c96cf2910a1f1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDViZWIwMmViMGFiNDcxNDM0OWU1NmU4NTRjOTZjZjI5MTBhMWYxYg==", "commit": {"author": {"name": "Sebastian Pop", "email": "s.pop@samsung.com", "date": "2015-02-06T21:08:13Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-02-06T21:08:13Z"}, "message": "PR 64878: do not jump thread across more than one back-edge\n\n2015-02-04  Sebastian Pop  <s.pop@samsung.com>\n\t    Brian Rzycki  <b.rzycki@samsung.com>\n\n\tPR tree-optimization/64878\n\t* tree-ssa-threadedge.c: Include tree-ssa-loop.h.\n\t(fsm_find_control_statement_thread_paths): Add parameter seen_loop_phi.\n\tStop recursion at loop phi nodes after having visited a loop phi node.\n\n\t* testsuite/gcc.dg/tree-ssa/ssa-dom-thread-8.c: New.\n\nCo-Authored-By: Brian Rzycki <b.rzycki@samsung.com>\n\nFrom-SVN: r220491", "tree": {"sha": "08d97221c46417aa09ef53738c958a0a4940782d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08d97221c46417aa09ef53738c958a0a4940782d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45beb02eb0ab4714349e56e854c96cf2910a1f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45beb02eb0ab4714349e56e854c96cf2910a1f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45beb02eb0ab4714349e56e854c96cf2910a1f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45beb02eb0ab4714349e56e854c96cf2910a1f1b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ab4eedf1fdaa2f52c587a9e2b91255df32fcc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ab4eedf1fdaa2f52c587a9e2b91255df32fcc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ab4eedf1fdaa2f52c587a9e2b91255df32fcc1"}], "stats": {"total": 473, "additions": 470, "deletions": 3}, "files": [{"sha": "fb908510615d7c2f58e78eb8f1b8d1ffaf7f259d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45beb02eb0ab4714349e56e854c96cf2910a1f1b", "patch": "@@ -1,3 +1,11 @@\n+2015-02-06  Sebastian Pop  <s.pop@samsung.com>\n+\t    Brian Rzycki  <b.rzycki@samsung.com>\n+\n+\tPR tree-optimization/64878\n+\t* tree-ssa-threadedge.c: Include tree-ssa-loop.h.\n+\t(fsm_find_control_statement_thread_paths): Add parameter seen_loop_phi.\n+\tStop recursion at loop phi nodes after having visited a loop phi node.\n+\n 2015-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* toplev.c (process_options): Change flag_ipa_ra before creating"}, {"sha": "e10f7782b44846f04c8a76c76f42d4a837f26610", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45beb02eb0ab4714349e56e854c96cf2910a1f1b", "patch": "@@ -1,3 +1,9 @@\n+2015-02-06  Sebastian Pop  <s.pop@samsung.com>\n+\t    Brian Rzycki  <b.rzycki@samsung.com>\n+\n+\tPR tree-optimization/64878\n+\t* testsuite/gcc.dg/tree-ssa/ssa-dom-thread-8.c: New.\n+\n 2015-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/64896"}, {"sha": "9be75aaf21deeb68d37b56827abd47960a725b63", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-8.c", "status": "added", "additions": 440, "deletions": 0, "changes": 440, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-8.c?ref=45beb02eb0ab4714349e56e854c96cf2910a1f1b", "patch": "@@ -0,0 +1,440 @@\n+/* PR 64878 */\n+/* { dg-options \"-O2\" } */\n+/* { dg-do run } */\n+\n+struct A { int a1; };\n+struct B { char *b1; int b2; int b3; };\n+struct C { char *c1; int c2; struct B *c3; };\n+extern struct A *f1 (char *s);\n+static struct A *f2 (struct C *x);\n+__attribute__ ((noinline, noclone)) int f3 (struct A *x, struct A *z) { asm volatile (\"\" : : \"g\" (x), \"g\" (z) : \"memory\"); return 0; }\n+__attribute__ ((noinline, noclone)) void f4 (struct A *x, char *y, struct A *z) { asm volatile (\"\" : : \"g\" (x), \"g\" (z), \"g\" (y) : \"memory\"); }\n+__attribute__ ((noinline, noclone)) struct B *f5 (void) { static char b[32]; static struct B f3 = { b, 0, 32 }; return &f3; }\n+__attribute__ ((noinline, noclone)) int f6 (struct B *p, char *w, int z) { asm volatile (\"\" : : \"g\" (p), \"g\" (w), \"g\" (z) : \"memory\"); return 0; }\n+__attribute__ ((noinline, noclone)) void f7 (struct B *p) { asm volatile (\"\" : : \"g\" (p) : \"memory\"); }\n+__attribute__ ((noinline, noclone)) void f8 (struct B *p) { asm volatile (\"\" : : \"g\" (p) : \"memory\"); }\n+__attribute__ ((noinline, noclone)) void f9 (struct A *x) { asm volatile (\"\" : : \"g\" (x) : \"memory\"); }\n+__attribute__ ((noinline, noclone)) struct A *f10 (void) { static struct A j; asm volatile (\"\" : :  : \"memory\"); return &j; }\n+__attribute__ ((noinline, noclone)) struct A *f11 (void) { static struct A j; asm volatile (\"\" : :  : \"memory\"); return &j; }\n+__attribute__ ((noinline, noclone)) struct A *f12 (int b) { static struct A j; asm volatile (\"\" : : \"g\" (b) : \"memory\"); return &j; }\n+__attribute__ ((noinline, noclone)) struct A *f13 (int i) { static struct A j; asm volatile (\"\" : : \"g\" (i) : \"memory\"); return &j; }\n+__attribute__ ((noinline, noclone)) struct A *f14 (double d) { static struct A j; asm volatile (\"\" : : \"g\" (&d) : \"memory\"); return &j; }\n+__attribute__ ((noinline, noclone)) struct A *f15 (char *s) { static struct A j; asm volatile (\"\" : : \"g\" (s) : \"memory\"); return &j; }\n+char *t = \"0123456789abcdef\";\n+char *u = \"0123456789.+-e\";\n+\n+__attribute__ ((noinline, noclone)) struct A *\n+f1 (char *s)\n+{\n+  struct C f;\n+  struct A *o;\n+  f.c1 = s;\n+  f.c2 = 0;\n+  f.c3 = f5 ();\n+  o = f2 (&f);\n+  f8 (f.c3);\n+  return o;\n+}\n+\n+static struct A *\n+f2 (struct C *x)\n+{\n+  int a, b, e = 0;\n+  struct A *f = 0, *o;\n+  char *g = 0;\n+  char h = '\\0';\n+  int i = 0, j = 0;\n+  a = 0;\n+  b = 1;\n+  char c;\n+  do\n+    {\n+      c = x->c1[x->c2];\n+      switch (a)\n+\t{\n+\tcase 0:\n+\t  if (c == ' ')\n+\t    x->c2++;\n+\t  else if (c == '/')\n+\t    {\n+\t      a = 4;\n+\t      j = x->c2++;\n+\t    }\n+\t  else\n+\t    a = b;\n+\t  break;\n+\tcase 1:\n+\t  switch (c)\n+\t    {\n+\t    case '{':\n+\t      a = 0;\n+\t      b = 15;\n+\t      f = f10 ();\n+\t      x->c2++;\n+\t      break;\n+\t    case '[':\n+\t      a = 0;\n+\t      b = 13;\n+\t      f = f11 ();\n+\t      x->c2++;\n+\t      break;\n+\t    case 'N':\n+\t    case 'n':\n+\t      a = 3;\n+\t      j = x->c2++;\n+\t      break;\n+\t    case '\"':\n+\t    case '\\'':\n+\t      h = c;\n+\t      f7 (x->c3);\n+\t      a = 8;\n+\t      j = ++x->c2;\n+\t      break;\n+\t    case 'T':\n+\t    case 't':\n+\t    case 'F':\n+\t    case 'f':\n+\t      a = 11;\n+\t      j = x->c2++;\n+\t      break;\n+\t    case '0' ... '9':\n+\t    case '-':\n+\t      i = 0;\n+\t      a = 12;\n+\t      j = x->c2++;\n+\t      break;\n+\t    default:\n+\t      e = 1;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\tcase 2:\n+\t  goto out;\n+\tcase 3:\n+\t  if (__builtin_strncmp (\"null\", x->c1 + j, x->c2 - j))\n+\t    {\n+\t      e = 2;\n+\t      goto out;\n+\t    }\n+\t  if (x->c2 - j == 4)\n+\t    {\n+\t      f = 0;\n+\t      b = 2;\n+\t      a = 0;\n+\t    }\n+\t  else\n+\t    x->c2++;\n+\t  break;\n+\tcase 4:\n+\t  if (c == '*')\n+\t    a = 5;\n+\t  else if (c == '/')\n+\t    a = 6;\n+\t  else\n+\t    {\n+\t      e = 8;\n+\t      goto out;\n+\t    }\n+\t  x->c2++;\n+\t  break;\n+\tcase 5:\n+\t  if (c == '*')\n+\t    a = 7;\n+\t  x->c2++;\n+\t  break;\n+\tcase 6:\n+\t  if (c == '\\n')\n+\t    a = 0;\n+\t  x->c2++;\n+\t  break;\n+\tcase 7:\n+\t  if (c == '/')\n+\t    a = 0;\n+\t  else\n+\t    a = 5;\n+\t  x->c2++;\n+\t  break;\n+\tcase 8:\n+\t  if (c == h)\n+\t    {\n+\t      f6 (x->c3, x->c1 + j, x->c2 - j);\n+\t      f = f15 (x->c3->b1);\n+\t      b = 2;\n+\t      a = 0;\n+\t    }\n+\t  else if (c == '\\\\')\n+\t    {\n+\t      b = 8;\n+\t      a = 9;\n+\t    }\n+\t  x->c2++;\n+\t  break;\n+\tcase 9:\n+\t  switch (c)\n+\t    {\n+\t    case '\"':\n+\t    case '\\\\':\n+\t      f6 (x->c3, x->c1 + j, x->c2 - j - 1);\n+\t      j = x->c2++;\n+\t      a = b;\n+\t      break;\n+\t    case 'b':\n+\t    case 'n':\n+\t    case 'r':\n+\t    case 't':\n+\t      f6 (x->c3, x->c1 + j, x->c2 - j - 1);\n+\t      if (c == 'b')\n+\t\tf6 (x->c3, \"\\b\", 1);\n+\t      else if (c == 'n')\n+\t\tf6 (x->c3, \"\\n\", 1);\n+\t      else if (c == 'r')\n+\t\tf6 (x->c3, \"\\r\", 1);\n+\t      else if (c == 't')\n+\t\tf6 (x->c3, \"\\t\", 1);\n+\t      j = ++x->c2;\n+\t      a = b;\n+\t      break;\n+\t    case 'u':\n+\t      f6 (x->c3, x->c1 + j, x->c2 - j - 1);\n+\t      j = ++x->c2;\n+\t      a = 10;\n+\t      break;\n+\t    default:\n+\t      e = 7;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\tcase 10:\n+\t  if (__builtin_strchr (t, c))\n+\t    {\n+\t      x->c2++;\n+\t      if (x->c2 - j == 4)\n+\t\t{\n+\t\t  unsigned char w[3];\n+\t\t  unsigned int s =\n+\t\t    (((x->c1[j] <= '9') ? x->c1[j] - '0' : (x->c1[j] & 7) + 9) << 12)\n+\t\t    + (((x->c1[j + 1] <= '9') ? x->c1[j + 1] - '0' : (x->c1[j + 1] & 7) + 9) << 8)\n+\t\t    + (((x->c1[j + 2] <= '9') ? x->c1[j + 2] - '0' : (x->c1[j + 2] & 7) + 9) << 4)\n+\t\t    + ((x->c1[j + 3] <= '9') ? x->c1[j + 3] - '0' : (x->c1[j + 3] & 7) + 9);\n+\t\t  if (s < 0x80)\n+\t\t    {\n+\t\t      w[0] = s;\n+\t\t      f6 (x->c3, (char *) w, 1);\n+\t\t    }\n+\t\t  else if (s < 0x800)\n+\t\t    {\n+\t\t      w[0] = 0xc0 | (s >> 6);\n+\t\t      w[1] = 0x80 | (s & 0x3f);\n+\t\t      f6 (x->c3, (char *) w, 2);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      w[0] = 0x0 | (s >> 12);\n+\t\t      w[1] = 0x80 | ((s >> 6) & 0x3f);\n+\t\t      w[2] = 0x80 | (s & 0x3f);\n+\t\t      f6 (x->c3, (char *) w, 3);\n+\t\t    }\n+\t\t  j = x->c2;\n+\t\t  a = b;\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      e = 7;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\tcase 11:\n+\t  if (__builtin_strncmp (\"true\", x->c1 + j, x->c2 - j) == 0)\n+\t    {\n+\t      if (x->c2 - j == 4)\n+\t\t{\n+\t\t  f = f12 (1);\n+\t\t  b = 2;\n+\t\t  a = 0;\n+\t\t}\n+\t      else\n+\t\tx->c2++;\n+\t    }\n+\t  else if (__builtin_strncmp (\"false\", x->c1 + j, x->c2 - j) == 0)\n+\t    {\n+\t      if (x->c2 - j == 5)\n+\t\t{\n+\t\t  f = f12 (0);\n+\t\t  b = 2;\n+\t\t  a = 0;\n+\t\t}\n+\t      else\n+\t\tx->c2++;\n+\t    }\n+\t  else\n+\t    {\n+\t      e = 3;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\tcase 12:\n+\t  if (!c || !__builtin_strchr (u, c))\n+\t    {\n+\t      if (!i)\n+\t\tf = f13 (0);\n+\t      else\n+\t\tf = f14 (0.0);\n+\t      b = 2;\n+\t      a = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (c == '.' || c == 'e')\n+\t\ti = 1;\n+\t      x->c2++;\n+\t    }\n+\t  break;\n+\tcase 13:\n+\t  if (c == ']')\n+\t    {\n+\t      x->c2++;\n+\t      b = 2;\n+\t      a = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      o = f2 (x);\n+\t      if (((unsigned long) o > (unsigned long) -4000L))\n+\t\t{\n+\t\t  e = 5;\n+\t\t  goto out;\n+\t\t}\n+\t      f3 (f, o);\n+\t      b = 14;\n+\t      a = 0;\n+\t    }\n+\t  break;\n+\tcase 14:\n+\t  if (c == ']')\n+\t    {\n+\t      x->c2++;\n+\t      b = 2;\n+\t      a = 0;\n+\t    }\n+\t  else if (c == ',')\n+\t    {\n+\t      x->c2++;\n+\t      b = 13;\n+\t      a = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      f9 (f);\n+\t      e = 5;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\tcase 15:\n+\t  a = 16;\n+\t  j = x->c2;\n+\t  break;\n+\tcase 16:\n+\t  if (c == '}')\n+\t    {\n+\t      x->c2++;\n+\t      b = 2;\n+\t      a = 0;\n+\t    }\n+\t  else if (c == '\"' || c == '\\'')\n+\t    {\n+\t      h = c;\n+\t      f7 (x->c3);\n+\t      a = 17;\n+\t      j = ++x->c2;\n+\t    }\n+\t  else\n+\t    {\n+\t      e = 6;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\tcase 17:\n+\t  if (c == h)\n+\t    {\n+\t      f6 (x->c3, x->c1 + j, x->c2 - j);\n+\t      g = __builtin_strdup (x->c3->b1);\n+\t      b = 18;\n+\t      a = 0;\n+\t    }\n+\t  else if (c == '\\\\')\n+\t    {\n+\t      b = 17;\n+\t      a = 9;\n+\t    }\n+\t  x->c2++;\n+\t  break;\n+\tcase 18:\n+\t  if (c == ':')\n+\t    {\n+\t      x->c2++;\n+\t      b = 19;\n+\t      a = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      e = -6;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\tcase 19:\n+\t  o = f2 (x);\n+\t  if (((unsigned long) o > (unsigned long) -4000L))\n+\t    {\n+\t      e = 6;\n+\t      goto out;\n+\t    }\n+\t  f4 (f, g, o);\n+\t  __builtin_free (g);\n+\t  g = 0;\n+\t  b = 20;\n+\t  a = 0;\n+\t  break;\n+\tcase 20:\n+\t  if (c == '}')\n+\t    {\n+\t      x->c2++;\n+\t      b = 2;\n+\t      a = 0;\n+\t    }\n+\t  else if (c == ',')\n+\t    {\n+\t      x->c2++;\n+\t      b = 15;\n+\t      a = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      e = 6;\n+\t      goto out;\n+\t    }\n+\t  break;\n+\t}\n+    }\n+  while (c);\n+  if (a != 2 && b != 2)\n+    e = 9;\n+out:\n+  __builtin_free (g);\n+  if (e == 0)\n+    return f;\n+  f9 (f);\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  struct A *r = f1 (\"{ \\\"id\\\": null, \\\"blahah\\\": \\\"foobarbazbar\\\", \\\"barbar\\\": { \\\"barbarbarba\\\":\"\n+\t\t    \"\\\"abcdefgh\\\", \\\"ijklmnopqr\\\": \\\"stuvwxyzabcdefghijklmnopqrstuv\\\", \\\"xyzxyz\\\":\"\n+\t\t    \" [ \\\"1\\\" ] } }\");\n+  if (!r)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "4f839910a84c686644c59daf3c2b63e74250eeb1", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45beb02eb0ab4714349e56e854c96cf2910a1f1b/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=45beb02eb0ab4714349e56e854c96cf2910a1f1b", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"params.h\"\n #include \"tree-ssa-threadedge.h\"\n+#include \"tree-ssa-loop.h\"\n #include \"builtins.h\"\n #include \"cfg.h\"\n #include \"cfganal.h\"\n@@ -1006,7 +1007,8 @@ static int max_threaded_paths;\n static void\n fsm_find_control_statement_thread_paths (tree expr,\n \t\t\t\t\t hash_set<gimple> *visited_phis,\n-\t\t\t\t\t vec<basic_block, va_gc> *&path)\n+\t\t\t\t\t vec<basic_block, va_gc> *&path,\n+\t\t\t\t\t bool seen_loop_phi)\n {\n   tree var = SSA_NAME_VAR (expr);\n   gimple def_stmt = SSA_NAME_DEF_STMT (expr);\n@@ -1030,6 +1032,14 @@ fsm_find_control_statement_thread_paths (tree expr,\n   int next_path_length = 0;\n   basic_block last_bb_in_path = path->last ();\n \n+  if (loop_containing_stmt (phi)->header == gimple_bb (phi))\n+    {\n+      /* Do not walk through more than one loop PHI node.  */\n+      if (seen_loop_phi)\n+\treturn;\n+      seen_loop_phi = true;\n+    }\n+\n   /* Following the chain of SSA_NAME definitions, we jumped from a definition in\n      LAST_BB_IN_PATH to a definition in VAR_BB.  When these basic blocks are\n      different, append to PATH the blocks from LAST_BB_IN_PATH to VAR_BB.  */\n@@ -1090,7 +1100,9 @@ fsm_find_control_statement_thread_paths (tree expr,\n \t{\n \t  vec_safe_push (path, bbi);\n \t  /* Recursively follow SSA_NAMEs looking for a constant definition.  */\n-\t  fsm_find_control_statement_thread_paths (arg, visited_phis, path);\n+\t  fsm_find_control_statement_thread_paths (arg, visited_phis, path,\n+\t\t\t\t\t\t   seen_loop_phi);\n+\n \t  path->pop ();\n \t  continue;\n \t}\n@@ -1357,7 +1369,8 @@ thread_through_normal_block (edge e,\n       hash_set<gimple> *visited_phis = new hash_set<gimple>;\n \n       max_threaded_paths = PARAM_VALUE (PARAM_MAX_FSM_THREAD_PATHS);\n-      fsm_find_control_statement_thread_paths (cond, visited_phis, bb_path);\n+      fsm_find_control_statement_thread_paths (cond, visited_phis, bb_path,\n+\t\t\t\t\t       false);\n \n       delete visited_phis;\n       vec_free (bb_path);"}]}