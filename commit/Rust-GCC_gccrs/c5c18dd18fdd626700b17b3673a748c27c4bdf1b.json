{"sha": "c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVjMThkZDE4ZmRkNjI2NzAwYjE3YjM2NzNhNzQ4YzI3YzRiZGYxYg==", "commit": {"author": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2012-11-20T10:56:52Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2012-11-20T10:56:52Z"}, "message": "Fix to commit 193651. \n\ngcc/testsuite/\n\t* gcc.target/aarch64/atomic-comp-swap-release-acquire.c:\n\tActually add this file.\n\t* gcc.target/aarch64/atomic-op-acq_rel.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-acquire.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-char.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-consume.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-imm.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-int.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-long.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-relaxed.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-release.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-seq_cst.c: Likewise.\n\t* gcc.target/aarch64/atomic-op-short.c: Likewise.\n\nFrom-SVN: r193654", "tree": {"sha": "065801675f59d78662a976d7ac2d355e622d2dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/065801675f59d78662a976d7ac2d355e622d2dee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/comments", "author": null, "committer": null, "parents": [{"sha": "86c818c2298a47097c93baf16ef5500a2ee13ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c818c2298a47097c93baf16ef5500a2ee13ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c818c2298a47097c93baf16ef5500a2ee13ce5"}], "stats": {"total": 549, "additions": 549, "deletions": 0}, "files": [{"sha": "1492e2537306cd8135003866616e360f55f30d4e", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-comp-swap-release-acquire.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-comp-swap-release-acquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-comp-swap-release-acquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-comp-swap-release-acquire.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define STRONG 0\n+#define WEAK 1\n+int v = 0;\n+\n+int\n+atomic_compare_exchange_STRONG_RELEASE_ACQUIRE (int a, int b)\n+{\n+  return __atomic_compare_exchange (&v, &a, &b,\n+\t\t\t\t    STRONG, __ATOMIC_RELEASE,\n+\t\t\t\t    __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_compare_exchange_WEAK_RELEASE_ACQUIRE (int a, int b)\n+{\n+  return __atomic_compare_exchange (&v, &a, &b,\n+\t\t\t\t    WEAK, __ATOMIC_RELEASE,\n+\t\t\t\t    __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_compare_exchange_n_STRONG_RELEASE_ACQUIRE (int a, int b)\n+{\n+  return __atomic_compare_exchange_n (&v, &a, b,\n+\t\t\t\t      STRONG, __ATOMIC_RELEASE,\n+\t\t\t\t      __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_compare_exchange_n_WEAK_RELEASE_ACQUIRE (int a, int b)\n+{\n+  return __atomic_compare_exchange_n (&v, &a, b,\n+\t\t\t\t      WEAK, __ATOMIC_RELEASE,\n+\t\t\t\t      __ATOMIC_ACQUIRE);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldaxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"stlxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 4 } } */"}, {"sha": "be6682fd89437a56d7389ac011105873de3da8fb", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-acq_rel.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acq_rel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acq_rel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acq_rel.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_ACQ_REL (int a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_ACQ_REL);\n+}\n+\n+int\n+atomic_fetch_sub_ACQ_REL (int a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_ACQ_REL);\n+}\n+\n+int\n+atomic_fetch_and_ACQ_REL (int a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_ACQ_REL);\n+}\n+\n+int\n+atomic_fetch_nand_ACQ_REL (int a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_ACQ_REL);\n+}\n+\n+int\n+atomic_fetch_xor_ACQ_REL (int a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_ACQ_REL);\n+}\n+\n+int\n+atomic_fetch_or_ACQ_REL (int a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_ACQ_REL);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldaxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stlxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "023797e6f6142647549d4d49a2f80c902e4048c7", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-acquire.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-acquire.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_ACQUIRE (int a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_fetch_sub_ACQUIRE (int a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_fetch_and_ACQUIRE (int a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_fetch_nand_ACQUIRE (int a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_fetch_xor_ACQUIRE (int a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_fetch_or_ACQUIRE (int a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_ACQUIRE);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldaxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "8dcc4c8c1daaf3314a3481a047e724fcbd05435d", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-char.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-char.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char v = 0;\n+\n+char\n+atomic_fetch_add_RELAXED (char a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+char\n+atomic_fetch_sub_RELAXED (char a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+char\n+atomic_fetch_and_RELAXED (char a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+char\n+atomic_fetch_nand_RELAXED (char a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+char\n+atomic_fetch_xor_RELAXED (char a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+char\n+atomic_fetch_or_RELAXED (char a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldxrb\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxrb\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "e3afde24516919060446fd48178a2a6a3e81ef3e", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-consume.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-consume.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-consume.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-consume.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_CONSUME (int a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_CONSUME);\n+}\n+\n+int\n+atomic_fetch_sub_CONSUME (int a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_CONSUME);\n+}\n+\n+int\n+atomic_fetch_and_CONSUME (int a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_CONSUME);\n+}\n+\n+int\n+atomic_fetch_nand_CONSUME (int a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_CONSUME);\n+}\n+\n+int\n+atomic_fetch_xor_CONSUME (int a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_CONSUME);\n+}\n+\n+int\n+atomic_fetch_or_CONSUME (int a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_CONSUME);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "6c6f7e16dfefa92027cd678e4eb8df7849bd7cf8", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-imm.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_RELAXED ()\n+{\n+  return __atomic_fetch_add (&v, 4096, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_sub_ACQUIRE ()\n+{\n+  return __atomic_fetch_sub (&v, 4096, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_fetch_and_SEQ_CST ()\n+{\n+  return __atomic_fetch_and (&v, 4096, __ATOMIC_SEQ_CST);\n+}\n+\n+int\n+atomic_fetch_nand_ACQ_REL ()\n+{\n+  return __atomic_fetch_nand (&v, 4096, __ATOMIC_ACQ_REL);\n+}\n+\n+int\n+atomic_fetch_xor_CONSUME ()\n+{\n+  return __atomic_fetch_xor (&v, 4096, __ATOMIC_CONSUME);\n+}\n+\n+int\n+atomic_fetch_or_RELAXED ()\n+{\n+  return __atomic_fetch_or (&v, 4096, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_add_fetch_ACQUIRE ()\n+{\n+  return __atomic_add_fetch (&v, 4096, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_sub_fetch_RELAXED ()\n+{\n+  return __atomic_sub_fetch (&v, 4096, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_and_fetch_SEQ_CST ()\n+{\n+  return __atomic_and_fetch (&v, 4096, __ATOMIC_SEQ_CST);\n+}\n+\n+int\n+atomic_nand_fetch_ACQUIRE ()\n+{\n+  return __atomic_nand_fetch (&v, 4096, __ATOMIC_ACQUIRE);\n+}\n+\n+int\n+atomic_xor_fetch_RELEASE ()\n+{\n+  return __atomic_xor_fetch (&v, 4096, __ATOMIC_RELEASE);\n+}\n+\n+int\n+atomic_or_fetch_CONSUME ()\n+{\n+  return __atomic_or_fetch (&v, 4096, __ATOMIC_CONSUME);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tw\\[0-9\\]+, w\\[0-9\\]+, #*4096\" 12 } } */"}, {"sha": "065ccf533064306989e1fb312bc53e9030184cac", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-int.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-int.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_RELAXED (int a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_sub_RELAXED (int a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_and_RELAXED (int a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_nand_RELAXED (int a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_xor_RELAXED (int a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_or_RELAXED (int a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "9468ef445248e396b18beba4dc4a8375977e1ce9", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-long.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-long.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long v = 0;\n+\n+long\n+atomic_fetch_add_RELAXED (long a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+long\n+atomic_fetch_sub_RELAXED (long a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+long\n+atomic_fetch_and_RELAXED (long a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+long\n+atomic_fetch_nand_RELAXED (long a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+long\n+atomic_fetch_xor_RELAXED (long a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+long\n+atomic_fetch_or_RELAXED (long a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldxr\\tx\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxr\\tw\\[0-9\\]+, x\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "065ccf533064306989e1fb312bc53e9030184cac", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-relaxed.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-relaxed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-relaxed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-relaxed.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_RELAXED (int a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_sub_RELAXED (int a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_and_RELAXED (int a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_nand_RELAXED (int a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_xor_RELAXED (int a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_or_RELAXED (int a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "3d8c49ccbd005d52dad1e53f7b0fa205f2a0fe12", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-release.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-release.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-release.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-release.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_RELEASE (int a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_RELEASE);\n+}\n+\n+int\n+atomic_fetch_sub_RELEASE (int a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_RELEASE);\n+}\n+\n+int\n+atomic_fetch_and_RELEASE (int a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_RELEASE);\n+}\n+\n+int\n+atomic_fetch_nand_RELEASE (int a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_RELEASE);\n+}\n+\n+int\n+atomic_fetch_xor_RELEASE (int a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_RELEASE);\n+}\n+\n+int\n+atomic_fetch_or_RELEASE (int a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_RELEASE);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stlxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "a8ad4f807ecb107cc69d6802d718eead955de74e", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-seq_cst.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-seq_cst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-seq_cst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-seq_cst.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int v = 0;\n+\n+int\n+atomic_fetch_add_SEQ_CST (int a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_SEQ_CST);\n+}\n+\n+int\n+atomic_fetch_sub_SEQ_CST (int a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_SEQ_CST);\n+}\n+\n+int\n+atomic_fetch_and_SEQ_CST (int a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_SEQ_CST);\n+}\n+\n+int\n+atomic_fetch_nand_SEQ_CST (int a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_SEQ_CST);\n+}\n+\n+int\n+atomic_fetch_xor_SEQ_CST (int a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_SEQ_CST);\n+}\n+\n+int\n+atomic_fetch_or_SEQ_CST (int a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_SEQ_CST);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldaxr\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stlxr\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}, {"sha": "30db3405308437ae010d51731a54be9aea0fedd1", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-short.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c18dd18fdd626700b17b3673a748c27c4bdf1b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-short.c?ref=c5c18dd18fdd626700b17b3673a748c27c4bdf1b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+short v = 0;\n+\n+short\n+atomic_fetch_add_RELAXED (short a)\n+{\n+  return __atomic_fetch_add (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+short\n+atomic_fetch_sub_RELAXED (short a)\n+{\n+  return __atomic_fetch_sub (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+short\n+atomic_fetch_and_RELAXED (short a)\n+{\n+  return __atomic_fetch_and (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+short\n+atomic_fetch_nand_RELAXED (short a)\n+{\n+  return __atomic_fetch_nand (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+short\n+atomic_fetch_xor_RELAXED (short a)\n+{\n+  return __atomic_fetch_xor (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+short\n+atomic_fetch_or_RELAXED (short a)\n+{\n+  return __atomic_fetch_or (&v, a, __ATOMIC_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldxrh\\tw\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxrh\\tw\\[0-9\\]+, w\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\]\" 6 } } */"}]}