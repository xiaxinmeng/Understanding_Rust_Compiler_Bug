{"sha": "201ae393e61498aec3afc6a3d426aa2f6577aae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxYWUzOTNlNjE0OThhZWMzYWZjNmEzZDQyNmFhMmY2NTc3YWFlMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-08-22T16:21:18Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-08-22T16:21:18Z"}, "message": "re PR c/18715 (warning: \"enumeration value not handled in switch\" for '...' ranges)\n\n2005-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c/18715\n        * c-common.c (c_do_switch_warnings): Look for a node where the enum's\n        value is inbetween the range if we did not find an exact match.\n\n2005-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c/18175\n        * gcc.dg/switch-warn-3.c: New test.\n\nFrom-SVN: r103343", "tree": {"sha": "ca2f57c6cb033f2c3558de1a8123530e483e4ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca2f57c6cb033f2c3558de1a8123530e483e4ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/201ae393e61498aec3afc6a3d426aa2f6577aae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201ae393e61498aec3afc6a3d426aa2f6577aae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201ae393e61498aec3afc6a3d426aa2f6577aae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201ae393e61498aec3afc6a3d426aa2f6577aae0/comments", "author": null, "committer": null, "parents": [{"sha": "c85ba4fb34b8dc43ac29ddb7009863b2cb03565d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85ba4fb34b8dc43ac29ddb7009863b2cb03565d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85ba4fb34b8dc43ac29ddb7009863b2cb03565d"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "8a5e2f00c21ebe2dda56b8407b03fa2f34796447", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=201ae393e61498aec3afc6a3d426aa2f6577aae0", "patch": "@@ -1,3 +1,9 @@\n+2005-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c/18715\n+\t* c-common.c (c_do_switch_warnings): Look for a node where the enum's\n+\tvalue is inbetween the range if we did not find an exact match.\n+\n 2005-08-22  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* doc/invoke.texi (Option Summary): Add ms1 options."}, {"sha": "678327779bf2242377fd8828f9cd6fa1fae58ffb", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=201ae393e61498aec3afc6a3d426aa2f6577aae0", "patch": "@@ -3804,7 +3804,32 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n \t{\n \t  splay_tree_node node\n \t    = splay_tree_lookup (cases, (splay_tree_key) TREE_VALUE (chain));\n-\n+\t  if (!node)\n+\t    {\n+\t      tree low_value = TREE_VALUE (chain);\n+\t      splay_tree_node low_bound;\n+\t      splay_tree_node high_bound;\n+\t      /* Even though there wasn't an exact match, there might be a\n+\t\t case range which includes the enumator's value.  */\n+\t      low_bound = splay_tree_predecessor (cases,\n+\t\t\t\t\t\t  (splay_tree_key) low_value);\n+\t      high_bound = splay_tree_successor (cases,\n+\t\t\t\t\t\t (splay_tree_key) low_value);\n+\t      \n+\t      /* It is smaller than the LOW_VALUE, so there is no need to check\n+\t         unless the LOW_BOUND is in fact itself a case range.  */\n+\t      if (low_bound\n+\t\t  && CASE_HIGH ((tree) low_bound->value)\n+\t\t  && tree_int_cst_compare (CASE_HIGH ((tree) low_bound->value),\n+\t\t\t\t\t    low_value) >= 0)\n+\t\tnode = low_bound;\n+\t      /* The low end of that range is bigger than the current value. */\n+\t      else if (high_bound\n+\t\t       && (tree_int_cst_compare ((tree) high_bound->key,\n+\t\t\t\t\t\t low_value)\n+\t\t\t   <= 0))\n+\t\tnode = high_bound;\n+\t    }\n \t  if (node)\n \t    {\n \t      /* Mark the CASE_LOW part of the case entry as seen, so"}, {"sha": "045be39ba26f538acfc60f204eb897c8e2e08438", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=201ae393e61498aec3afc6a3d426aa2f6577aae0", "patch": "@@ -1,3 +1,8 @@\n+2005-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c/18175\n+\t* gcc.dg/switch-warn-3.c: New test.\n+\n 2005-08-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/22233"}, {"sha": "e13b4f58a7f065f3dd128b26630fc546394167a5", "filename": "gcc/testsuite/gcc.dg/switch-warn-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201ae393e61498aec3afc6a3d426aa2f6577aae0/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-3.c?ref=201ae393e61498aec3afc6a3d426aa2f6577aae0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch-enum\" } */\n+\n+enum a { a0, a1, a2, a3 };\n+\n+int error(enum a aa)\n+{\n+  switch ( aa )\n+  {\n+  case a0 ... a3:\n+    return 1;\n+  }\n+  return 0;\n+}"}]}