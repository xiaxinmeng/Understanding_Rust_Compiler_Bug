{"sha": "4204740f649f2ad8dbc50e871fc6b421338478d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwNDc0MGY2NDlmMmFkOGRiYzUwZTg3MWZjNmI0MjEzMzg0NzhkMw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-02-21T02:32:15Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:56Z"}, "message": "AVX512FP16: Add vsqrtph/vrsqrtph/vsqrtsh/vrsqrtsh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h: (_mm512_sqrt_ph):\n\tNew intrinsic.\n\t(_mm512_mask_sqrt_ph): Likewise.\n\t(_mm512_maskz_sqrt_ph): Likewise.\n\t(_mm512_sqrt_round_ph): Likewise.\n\t(_mm512_mask_sqrt_round_ph): Likewise.\n\t(_mm512_maskz_sqrt_round_ph): Likewise.\n\t(_mm512_rsqrt_ph): Likewise.\n\t(_mm512_mask_rsqrt_ph): Likewise.\n\t(_mm512_maskz_rsqrt_ph): Likewise.\n\t(_mm_rsqrt_sh): Likewise.\n\t(_mm_mask_rsqrt_sh): Likewise.\n\t(_mm_maskz_rsqrt_sh): Likewise.\n\t(_mm_sqrt_sh): Likewise.\n\t(_mm_mask_sqrt_sh): Likewise.\n\t(_mm_maskz_sqrt_sh): Likewise.\n\t(_mm_sqrt_round_sh): Likewise.\n\t(_mm_mask_sqrt_round_sh): Likewise.\n\t(_mm_maskz_sqrt_round_sh): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_sqrt_ph): New intrinsic.\n\t(_mm256_sqrt_ph): Likewise.\n\t(_mm_mask_sqrt_ph): Likewise.\n\t(_mm256_mask_sqrt_ph): Likewise.\n\t(_mm_maskz_sqrt_ph): Likewise.\n\t(_mm256_maskz_sqrt_ph): Likewise.\n\t(_mm_rsqrt_ph): Likewise.\n\t(_mm256_rsqrt_ph): Likewise.\n\t(_mm_mask_rsqrt_ph): Likewise.\n\t(_mm256_mask_rsqrt_ph): Likewise.\n\t(_mm_maskz_rsqrt_ph): Likewise.\n\t(_mm256_maskz_rsqrt_ph): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_args_builtin): Handle new builtins.\n\t(ix86_expand_round_builtin): Ditto.\n\t* config/i386/sse.md (VF_AVX512FP16VL): New.\n\t(sqrt<mode>2): Adjust for HF vector modes.\n\t(<sse>_sqrt<mode>2<mask_name><round_name>): Likewise.\n\t(<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>):\n\tLikewise.\n\t(<sse>_rsqrt<mode>2<mask_name>): New.\n\t(avx512fp16_vmrsqrtv8hf2<mask_scalar_name>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "dae5c0d0abbcb73d3e2dfaf2ef2fa0b82b739f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dae5c0d0abbcb73d3e2dfaf2ef2fa0b82b739f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4204740f649f2ad8dbc50e871fc6b421338478d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4204740f649f2ad8dbc50e871fc6b421338478d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4204740f649f2ad8dbc50e871fc6b421338478d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4204740f649f2ad8dbc50e871fc6b421338478d3/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22abfa3166c9af1a2a24fae8a2e5d45f4bc6950d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22abfa3166c9af1a2a24fae8a2e5d45f4bc6950d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22abfa3166c9af1a2a24fae8a2e5d45f4bc6950d"}], "stats": {"total": 364, "additions": 355, "deletions": 9}, "files": [{"sha": "50db5d12140d9688aa6600324ebce59145c07a94", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -1235,6 +1235,199 @@ _mm_comi_round_sh (__m128h __A, __m128h __B, const int __P, const int __R)\n \n #endif /* __OPTIMIZE__  */\n \n+/* Intrinsics vsqrtph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_sqrt_ph (__m512h __A)\n+{\n+  return __builtin_ia32_vsqrtph_v32hf_mask_round (__A,\n+\t\t\t\t\t\t  _mm512_setzero_ph(),\n+\t\t\t\t\t\t  (__mmask32) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_sqrt_ph (__m512h __A, __mmask32 __B, __m512h __C)\n+{\n+  return __builtin_ia32_vsqrtph_v32hf_mask_round (__C, __A, __B,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_sqrt_ph (__mmask32 __A, __m512h __B)\n+{\n+  return __builtin_ia32_vsqrtph_v32hf_mask_round (__B,\n+\t\t\t\t\t\t  _mm512_setzero_ph (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_sqrt_round_ph (__m512h __A, const int __B)\n+{\n+  return __builtin_ia32_vsqrtph_v32hf_mask_round (__A,\n+\t\t\t\t\t\t  _mm512_setzero_ph(),\n+\t\t\t\t\t\t  (__mmask32) -1, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_sqrt_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vsqrtph_v32hf_mask_round (__C, __A, __B, __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_sqrt_round_ph (__mmask32 __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vsqrtph_v32hf_mask_round (__B,\n+\t\t\t\t\t\t  _mm512_setzero_ph (),\n+\t\t\t\t\t\t  __A, __C);\n+}\n+\n+#else\n+#define _mm512_sqrt_round_ph(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vsqrtph_v32hf_mask_round ((A),\t\t\t\\\n+\t\t\t\t\t    _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t    (__mmask32)-1, (B)))\n+\n+#define _mm512_mask_sqrt_round_ph(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vsqrtph_v32hf_mask_round ((C), (A), (B), (D)))\n+\n+#define _mm512_maskz_sqrt_round_ph(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vsqrtph_v32hf_mask_round ((B),\t\t\t\\\n+\t\t\t\t\t    _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t    (A), (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vrsqrtph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_rsqrt_ph (__m512h __A)\n+{\n+  return __builtin_ia32_vrsqrtph_v32hf_mask (__A, _mm512_setzero_ph (),\n+\t\t\t\t\t     (__mmask32) -1);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_rsqrt_ph (__m512h __A, __mmask32 __B, __m512h __C)\n+{\n+  return __builtin_ia32_vrsqrtph_v32hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_rsqrt_ph (__mmask32 __A, __m512h __B)\n+{\n+  return __builtin_ia32_vrsqrtph_v32hf_mask (__B, _mm512_setzero_ph (),\n+\t\t\t\t\t     __A);\n+}\n+\n+/* Intrinsics vrsqrtsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rsqrt_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vrsqrtsh_v8hf_mask (__B, __A, _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rsqrt_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vrsqrtsh_v8hf_mask (__D, __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rsqrt_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vrsqrtsh_v8hf_mask (__C, __B, _mm_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n+/* Intrinsics vsqrtsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sqrt_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vsqrtsh_v8hf_mask_round (__B, __A,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sqrt_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vsqrtsh_v8hf_mask_round (__D, __C, __A, __B,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sqrt_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vsqrtsh_v8hf_mask_round (__C, __B,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sqrt_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vsqrtsh_v8hf_mask_round (__B, __A,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t (__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sqrt_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t__m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vsqrtsh_v8hf_mask_round (__D, __C, __A, __B,\n+\t\t\t\t\t\t __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sqrt_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t const int __D)\n+{\n+  return __builtin_ia32_vsqrtsh_v8hf_mask_round (__C, __B,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t __A, __D);\n+}\n+\n+#else\n+#define _mm_sqrt_round_sh(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vsqrtsh_v8hf_mask_round ((B), (A),\t\t\\\n+\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t   (__mmask8)-1, (C)))\n+\n+#define _mm_mask_sqrt_round_sh(A, B, C, D, E)\t\t\t\\\n+  (__builtin_ia32_vsqrtsh_v8hf_mask_round ((D), (C), (A), (B), (E)))\n+\n+#define _mm_maskz_sqrt_round_sh(A, B, C, D)\t\t\t\\\n+  (__builtin_ia32_vsqrtsh_v8hf_mask_round ((C), (B),\t\t\\\n+\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t   (A), (D)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "aaed85203c94cf92f704badd336074dd099335bb", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -358,6 +358,99 @@ _mm_mask_cmp_ph_mask (__mmask16 __A, __m256h __B, __m256h __C,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vsqrtph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sqrt_ph (__m128h __A)\n+{\n+  return __builtin_ia32_vsqrtph_v8hf_mask (__A, _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_sqrt_ph (__m256h __A)\n+{\n+  return __builtin_ia32_vsqrtph_v16hf_mask (__A, _mm256_setzero_ph (),\n+\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sqrt_ph (__m128h __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vsqrtph_v8hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_sqrt_ph (__m256h __A, __mmask16 __B, __m256h __C)\n+{\n+  return __builtin_ia32_vsqrtph_v16hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sqrt_ph (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vsqrtph_v8hf_mask (__B, _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_sqrt_ph (__mmask16 __A, __m256h __B)\n+{\n+  return __builtin_ia32_vsqrtph_v16hf_mask (__B, _mm256_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n+/* Intrinsics vrsqrtph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rsqrt_ph (__m128h __A)\n+{\n+  return __builtin_ia32_vrsqrtph_v8hf_mask (__A, _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_rsqrt_ph (__m256h __A)\n+{\n+  return __builtin_ia32_vrsqrtph_v16hf_mask (__A, _mm256_setzero_ph (),\n+\t\t\t\t\t     (__mmask16) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rsqrt_ph (__m128h __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vrsqrtph_v8hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_rsqrt_ph (__m256h __A, __mmask16 __B, __m256h __C)\n+{\n+  return __builtin_ia32_vrsqrtph_v16hf_mask (__C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rsqrt_ph (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vrsqrtph_v8hf_mask (__B, _mm_setzero_ph (), __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_rsqrt_ph (__mmask16 __A, __m256h __B)\n+{\n+  return __builtin_ia32_vrsqrtph_v16hf_mask (__B, _mm256_setzero_ph (),\n+\t\t\t\t\t     __A);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "59c234c36cad124bfdc179b845835dc0d6dc0de2", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -1305,16 +1305,20 @@ DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n # FP16 builtins\n DEF_FUNCTION_TYPE (V8HF, V8HI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n+DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (UHI, V16HF, V16HF, INT, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)\n DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)\n DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI, INT)"}, {"sha": "13ae093df0b770ba64f8bb05fd393e40e7b465df", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -2802,6 +2802,12 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsminv8hf3_mask, \"__\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_cmpv8hf3_mask, \"__builtin_ia32_vcmpph_v8hf_mask\", IX86_BUILTIN_VCMPPH_V8HF_MASK, UNKNOWN, (int) UQI_FTYPE_V8HF_V8HF_INT_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_cmpv16hf3_mask, \"__builtin_ia32_vcmpph_v16hf_mask\", IX86_BUILTIN_VCMPPH_V16HF_MASK, UNKNOWN, (int) UHI_FTYPE_V16HF_V16HF_INT_UHI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_cmpv32hf3_mask, \"__builtin_ia32_vcmpph_v32hf_mask\", IX86_BUILTIN_VCMPPH_V32HF_MASK, UNKNOWN, (int) USI_FTYPE_V32HF_V32HF_INT_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_sqrtv8hf2_mask, \"__builtin_ia32_vsqrtph_v8hf_mask\", IX86_BUILTIN_VSQRTPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_sqrtv16hf2_mask, \"__builtin_ia32_vsqrtph_v16hf_mask\", IX86_BUILTIN_VSQRTPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rsqrtv8hf2_mask, \"__builtin_ia32_vrsqrtph_v8hf_mask\", IX86_BUILTIN_VRSQRTPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rsqrtv16hf2_mask, \"__builtin_ia32_vrsqrtph_v16hf_mask\", IX86_BUILTIN_VRSQRTPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rsqrtv32hf2_mask, \"__builtin_ia32_vrsqrtph_v32hf_mask\", IX86_BUILTIN_VRSQRTPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_USI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmrsqrtv8hf2_mask, \"__builtin_ia32_vrsqrtsh_v8hf_mask\", IX86_BUILTIN_VRSQRTSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3017,6 +3023,8 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsmaxv8hf3_mask_roun\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsminv8hf3_mask_round, \"__builtin_ia32_vminsh_v8hf_mask_round\", IX86_BUILTIN_VMINSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_cmpv32hf3_mask_round, \"__builtin_ia32_vcmpph_v32hf_mask_round\", IX86_BUILTIN_VCMPPH_V32HF_MASK_ROUND, UNKNOWN, (int) USI_FTYPE_V32HF_V32HF_INT_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmcmpv8hf3_mask_round, \"__builtin_ia32_vcmpsh_v8hf_mask_round\", IX86_BUILTIN_VCMPSH_V8HF_MASK_ROUND, UNKNOWN, (int) UQI_FTYPE_V8HF_V8HF_INT_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_sqrtv32hf2_mask_round, \"__builtin_ia32_vsqrtph_v32hf_mask_round\", IX86_BUILTIN_VSQRTPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsqrtv8hf2_mask_round, \"__builtin_ia32_vsqrtsh_v8hf_mask_round\", IX86_BUILTIN_VSQRTSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "b627b1c2614e1aed6e09e50dd88966d21d44f983", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -9710,6 +9710,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16HI_FTYPE_V16SI_V16HI_UHI:\n     case V16QI_FTYPE_V16SI_V16QI_UHI:\n     case V16QI_FTYPE_V8DI_V16QI_UQI:\n+    case V32HF_FTYPE_V32HF_V32HF_USI:\n     case V16SF_FTYPE_V16SF_V16SF_UHI:\n     case V16SF_FTYPE_V4SF_V16SF_UHI:\n     case V16SI_FTYPE_SI_V16SI_UHI:\n@@ -9739,12 +9740,14 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16HI_FTYPE_HI_V16HI_UHI:\n     case V8HI_FTYPE_V8HI_V8HI_UQI:\n     case V8HI_FTYPE_HI_V8HI_UQI:\n+    case V16HF_FTYPE_V16HF_V16HF_UHI:\n     case V8SF_FTYPE_V8HI_V8SF_UQI:\n     case V4SF_FTYPE_V8HI_V4SF_UQI:\n     case V8SI_FTYPE_V8SF_V8SI_UQI:\n     case V4SI_FTYPE_V4SF_V4SI_UQI:\n     case V4DI_FTYPE_V4SF_V4DI_UQI:\n     case V2DI_FTYPE_V4SF_V2DI_UQI:\n+    case V8HF_FTYPE_V8HF_V8HF_UQI:\n     case V4SF_FTYPE_V4DI_V4SF_UQI:\n     case V4SF_FTYPE_V2DI_V4SF_UQI:\n     case V4DF_FTYPE_V4DI_V4DF_UQI:\n@@ -10673,6 +10676,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V8DI_FTYPE_V8DF_V8DI_QI_INT:\n     case V8SF_FTYPE_V8DI_V8SF_QI_INT:\n     case V8DF_FTYPE_V8DI_V8DF_QI_INT:\n+    case V32HF_FTYPE_V32HF_V32HF_USI_INT:\n     case V16SF_FTYPE_V16SF_V16SF_HI_INT:\n     case V8DI_FTYPE_V8SF_V8DI_QI_INT:\n     case V16SF_FTYPE_V16SI_V16SF_HI_INT:"}, {"sha": "aa266c38227a7f5927b9236675f51f00a5224bb6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -405,6 +405,9 @@\n (define_mode_iterator VF_AVX512FP16\n   [V32HF V16HF V8HF])\n \n+(define_mode_iterator VF_AVX512FP16VL\n+  [V32HF (V16HF \"TARGET_AVX512VL\") (V8HF \"TARGET_AVX512VL\")])\n+\n ;; All vector integer modes\n (define_mode_iterator VI\n   [(V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n@@ -2381,8 +2384,8 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"sqrt<mode>2\"\n-  [(set (match_operand:VF2 0 \"register_operand\")\n-\t(sqrt:VF2 (match_operand:VF2 1 \"vector_operand\")))]\n+  [(set (match_operand:VF2H 0 \"register_operand\")\n+\t(sqrt:VF2H (match_operand:VF2H 1 \"vector_operand\")))]\n   \"TARGET_SSE2\")\n \n (define_expand \"sqrt<mode>2\"\n@@ -2402,8 +2405,8 @@\n })\n \n (define_insn \"<sse>_sqrt<mode>2<mask_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(sqrt:VF (match_operand:VF 1 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n+  [(set (match_operand:VFH 0 \"register_operand\" \"=x,v\")\n+\t(sqrt:VFH (match_operand:VFH 1 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    sqrt<ssemodesuffix>\\t{%1, %0|%0, %1}\n@@ -2416,11 +2419,11 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n-\t(vec_merge:VF_128\n-\t  (sqrt:VF_128\n-\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"xm,<round_scalar_constraint>\"))\n-\t  (match_operand:VF_128 2 \"register_operand\" \"0,v\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VFH_128\n+\t  (sqrt:VFH_128\n+\t    (match_operand:VFH_128 1 \"nonimmediate_operand\" \"xm,<round_scalar_constraint>\"))\n+\t  (match_operand:VFH_128 2 \"register_operand\" \"0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n@@ -2473,6 +2476,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"<sse>_rsqrt<mode>2<mask_name>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_operand:VF_AVX512FP16VL 1 \"vector_operand\" \"vBm\")] UNSPEC_RSQRT))]\n+  \"TARGET_AVX512FP16\"\n+  \"vrsqrtph\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"<mask_codefor>rsqrt14<mode><mask_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VF_AVX512VL\n@@ -2548,6 +2561,19 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"avx512fp16_vmrsqrtv8hf2<mask_scalar_name>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (unspec:V8HF [(match_operand:V8HF 1 \"nonimmediate_operand\" \"vm\")]\n+\t\t       UNSPEC_RSQRT)\n+\t  (match_operand:V8HF 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vrsqrtsh\\t{%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %w1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_expand \"cond_<code><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(vec_merge:VF"}, {"sha": "651cb1c80fbf2889dfe445ddd4ced8cafe5785db", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -701,6 +701,8 @@\n #define __builtin_ia32_vcmpph_v32hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v32hf_mask(A, B, 1, D)\n #define __builtin_ia32_vcmpph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpph_v32hf_mask_round(A, B, 1, D, 8)\n #define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n+#define __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, D) __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, 8)\n+#define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}, {"sha": "94553dec9e7d19744007a37e139b9ce8287be41e", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -718,6 +718,8 @@\n #define __builtin_ia32_vcmpph_v32hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v32hf_mask(A, B, 1, D)\n #define __builtin_ia32_vcmpph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpph_v32hf_mask_round(A, B, 1, D, 8)\n #define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n+#define __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, D) __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, 8)\n+#define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}, {"sha": "7281bffdf2b9082f8a873a4df95c2dda5ede62a8", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -670,6 +670,7 @@ test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n \n /* avx512fp16intrin.h */\n+test_1 (_mm512_sqrt_round_ph, __m512h, __m512h, 8)\n test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n@@ -684,6 +685,8 @@ test_2 (_mm_max_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_min_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm512_cmp_ph_mask, __mmask32, __m512h, __m512h, 1)\n test_2 (_mm_comi_sh, int, __m128h, __m128h, 1)\n+test_2 (_mm512_maskz_sqrt_round_ph, __m512h, __mmask32, __m512h, 8)\n+test_2 (_mm_sqrt_round_sh, __m128h, __m128h, __m128h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -700,6 +703,8 @@ test_3 (_mm512_maskz_min_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm_maskz_max_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_mask_cmp_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1)\n+test_3 (_mm512_mask_sqrt_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n+test_3 (_mm_maskz_sqrt_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -714,6 +719,7 @@ test_4 (_mm512_mask_max_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h,\n test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_sqrt_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "04326e0e37d8d0a05a49f01cfc48e247b2558458", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -775,6 +775,7 @@ test_2 (_mm_rsqrt28_round_sd, __m128d, __m128d, __m128d, 8)\n test_2 (_mm_rsqrt28_round_ss, __m128, __m128, __m128, 8)\n \n /* avx512fp16intrin.h */\n+test_1 (_mm512_sqrt_round_ph, __m512h, __m512h, 8)\n test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n@@ -789,6 +790,8 @@ test_2 (_mm_max_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_min_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm512_cmp_ph_mask, __mmask32, __m512h, __m512h, 1)\n test_2 (_mm_comi_sh, int, __m128h, __m128h, 1)\n+test_2 (_mm512_maskz_sqrt_round_ph, __m512h, __mmask32, __m512h, 8)\n+test_2 (_mm_sqrt_round_sh, __m128h, __m128h, __m128h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -805,6 +808,8 @@ test_3 (_mm512_maskz_min_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm_maskz_max_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_mask_cmp_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1)\n+test_3 (_mm512_mask_sqrt_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n+test_3 (_mm_maskz_sqrt_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -819,6 +824,7 @@ test_4 (_mm512_mask_max_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h,\n test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_sqrt_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "7559d335dbc01ef4b5932f53ea3fd39fe1ad97fb", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4204740f649f2ad8dbc50e871fc6b421338478d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=4204740f649f2ad8dbc50e871fc6b421338478d3", "patch": "@@ -719,6 +719,8 @@\n #define __builtin_ia32_vcmpph_v32hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v32hf_mask(A, B, 1, D)\n #define __builtin_ia32_vcmpph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpph_v32hf_mask_round(A, B, 1, D, 8)\n #define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n+#define __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, D) __builtin_ia32_vsqrtph_v32hf_mask_round(C, A, B, 8)\n+#define __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, E) __builtin_ia32_vsqrtsh_v8hf_mask_round(D, C, A, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)"}]}