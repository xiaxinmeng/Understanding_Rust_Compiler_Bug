{"sha": "e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlNjAyNjY5M2E2YzA0ODFlYTllZTJkN2IyZmQzNDQzMGM3ZDQzNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2014-04-08T14:18:46Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2014-04-08T14:18:46Z"}, "message": "re PR rtl-optimization/60776 (FAIL gcc.dg/builtin-bswap-6.c and gcc.dg/builtin-bswap-7.c)\n\n2014-04-08  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\tPR rtl-optimization/60776\n\t* gcc.dg/builtin-bswap-6.c: Use -mbranch-cost=0 for s390.\n\t* gcc.dg/builtin-bswap-7.c: Likewise.\n\t* gcc.dg/builtin-bswap-6a.c: New testcase.\n\t* gcc.dg/builtin-bswap-7a.c: New testcase.\n\n\tRevert\n\t2014-04-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.dg/builtin-bswap-6.c: Adjust return value to disable GCC\n\toptimization.\n\t* gcc.dg/builtin-bswap-7.c: Likewise.\n\nFrom-SVN: r209221", "tree": {"sha": "a460efc18742a0e14f5d9a5510ef158a3fda82ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a460efc18742a0e14f5d9a5510ef158a3fda82ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/comments", "author": null, "committer": null, "parents": [{"sha": "3fa68ccbb6bb62d9e86aa7131d52e1eeb080c873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa68ccbb6bb62d9e86aa7131d52e1eeb080c873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa68ccbb6bb62d9e86aa7131d52e1eeb080c873"}], "stats": {"total": 132, "additions": 117, "deletions": 15}, "files": [{"sha": "e314c6c0f90fbad7c1f71c175e55661f323295e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "patch": "@@ -1,3 +1,18 @@\n+2014-04-08  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\tPR rtl-optimization/60776\n+\t* gcc.dg/builtin-bswap-6.c: Use -mbranch-cost=0 for s390.\n+\t* gcc.dg/builtin-bswap-7.c: Likewise.\n+\t* gcc.dg/builtin-bswap-6a.c: New testcase.\n+\t* gcc.dg/builtin-bswap-7a.c: New testcase.\n+\n+\tRevert\n+\t2014-04-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.dg/builtin-bswap-6.c: Adjust return value to disable GCC\n+\toptimization.\n+\t* gcc.dg/builtin-bswap-7.c: Likewise.\n+\n 2014-04-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60785"}, {"sha": "efda8706e6308779a0db61c48735d5e42d011476", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-6.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c?ref=e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "patch": "@@ -1,11 +1,10 @@\n /* { dg-do compile { target arm*-*-* alpha*-*-* i?86-*-* powerpc*-*-* rs6000-*-* x86_64-*-* s390*-*-* } } */\n /* { dg-require-effective-target stdint_types } */\n /* { dg-options \"-O -fdump-rtl-combine\" } */\n-/* { dg-options \"-O -fdump-rtl-combine -march=z900\" { target s390-*-* } } */\n \n-/* The test intentionally returns 1/2 instead of the obvious 0/1 to\n-   prevent GCC from calculating the return value with arithmetic\n-   instead of a comparison.  */\n+/* The branch cost setting prevents the return value from being\n+   calculated with arithmetic instead of doing a compare.  */\n+/* { dg-additional-options \"-march=z900 -mbranch-cost=0\" { target s390*-*-* } } */\n \n #include <stdint.h>\n \n@@ -15,28 +14,28 @@ int foo1 (uint32_t a)\n {\n   if (BS (a) == 0xA0000)\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n int foo2 (uint32_t a)\n {\n   if (BS (a) != 0xA0000)\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n int foo3 (uint32_t a, uint32_t b)\n {\n   if (BS (a) == BS (b))\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n int foo4 (uint32_t a, uint32_t b)\n {\n   if (BS (a) != BS (b))\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n /* { dg-final { scan-rtl-dump-not \"bswapsi\" \"combine\" } } */"}, {"sha": "f93bcde1027a8fb4864f55fed467bc0f4feb1c7e", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-6a.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6a.c?ref=e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile { target arm*-*-* alpha*-*-* i?86-*-* powerpc*-*-* rs6000-*-* x86_64-*-* s390*-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O2 -fdump-rtl-combine\" } */\n+/* { dg-additional-options \"-march=z900\" { target s390-*-* } } */\n+\n+/* The test is similiar to builtin-bswap-6.c but returns 1/2 instead\n+   of 0/1 to prevent GCC from calculating the return value with\n+   arithmetic instead of a comparison.  This requires the optimization\n+   level to be bumped up to -O2 at least for x86_64.  */\n+\n+#include <stdint.h>\n+\n+#define BS(X) __builtin_bswap32(X)\n+\n+int foo1 (uint32_t a)\n+{\n+  if (BS (a) == 0xA0000)\n+    return 1;\n+  return 2;\n+}\n+\n+int foo2 (uint32_t a)\n+{\n+  if (BS (a) != 0xA0000)\n+    return 1;\n+  return 2;\n+}\n+\n+int foo3 (uint32_t a, uint32_t b)\n+{\n+  if (BS (a) == BS (b))\n+    return 1;\n+  return 2;\n+}\n+\n+int foo4 (uint32_t a, uint32_t b)\n+{\n+  if (BS (a) != BS (b))\n+    return 1;\n+  return 2;\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"bswapsi\" \"combine\" } } */\n+/* { dg-final { cleanup-rtl-dump \"combine\" } } */"}, {"sha": "035c7368ad015e2ec925f711ad443da605e6b099", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-7.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c?ref=e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "patch": "@@ -3,9 +3,9 @@\n /* { dg-require-effective-target lp64 } */\n /* { dg-options \"-O -fdump-rtl-combine\" } */\n \n-/* The test intentionally returns 1/2 instead of the obvious 0/1 to\n-   prevent GCC from calculating the return value with arithmetic\n-   instead of a comparison.  */\n+/* The branch cost setting prevents the return value from being\n+   calculated with arithmetic instead of doing a compare.  */\n+/* { dg-additional-options \"-mbranch-cost=0\" { target s390x-*-* } } */\n \n #include <stdint.h>\n \n@@ -15,28 +15,28 @@ int foo1 (uint64_t a)\n {\n   if (BS (a) == 0xA00000000)\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n int foo2 (uint64_t a)\n {\n   if (BS (a) != 0xA00000000)\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n int foo3 (uint64_t a, uint64_t b)\n {\n   if (BS (a) == BS (b))\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n int foo4 (uint64_t a, uint64_t b)\n {\n   if (BS (a) != BS (b))\n     return 1;\n-  return 2;\n+  return 0;\n }\n \n /* { dg-final { scan-rtl-dump-not \"bswapdi\" \"combine\" } } */"}, {"sha": "d77bd4783665a05c744bb85d77e0feb80010755c", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-7a.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e6026693a6c0481ea9ee2d7b2fd34430c7d436/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7a.c?ref=e2e6026693a6c0481ea9ee2d7b2fd34430c7d436", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile { target arm*-*-* alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fdump-rtl-combine\" } */\n+\n+/* The test is similiar to builtin-bswap-7.c but returns 1/2 instead\n+   of 0/1 to prevent GCC from calculating the return value with\n+   arithmetic instead of a comparison.  This requires the optimization\n+   level to be bumped up to -O2 at least for x86_64.  */\n+\n+#include <stdint.h>\n+\n+#define BS(X) __builtin_bswap64(X)\n+\n+int foo1 (uint64_t a)\n+{\n+  if (BS (a) == 0xA00000000)\n+    return 1;\n+  return 2;\n+}\n+\n+int foo2 (uint64_t a)\n+{\n+  if (BS (a) != 0xA00000000)\n+    return 1;\n+  return 2;\n+}\n+\n+int foo3 (uint64_t a, uint64_t b)\n+{\n+  if (BS (a) == BS (b))\n+    return 1;\n+  return 2;\n+}\n+\n+int foo4 (uint64_t a, uint64_t b)\n+{\n+  if (BS (a) != BS (b))\n+    return 1;\n+  return 2;\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"bswapdi\" \"combine\" } } */\n+/* { dg-final { cleanup-rtl-dump \"combine\" } } */"}]}