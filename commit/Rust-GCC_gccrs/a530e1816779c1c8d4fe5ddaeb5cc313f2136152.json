{"sha": "a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzMGUxODE2Nzc5YzFjOGQ0ZmU1ZGRhZWI1Y2MzMTNmMjEzNjE1Mg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-02-17T19:11:06Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-02-17T19:11:06Z"}, "message": "re PR target/79261 (vec_xxpermdi appears to have endian issues)\n\n[gcc]\n\n2017-02-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/79261\n\t* config/rs6000/rs6000.c (rs6000_expand_ternop_builtin): Add\n\tsupport for CODE_FOR_vsx_xxpermdi_v2d[fi]_be.\n\t* config/rs6000/rs6000.md (reload_gpr_from_vsx<mode>): Call\n\tgenerator for vsx_xxpermdi_<mode>_be.\n\t* config/rs6000/vsx.md (vsx_xxpermdi_<mode>): Remove logic to\n\tforce big-endian semantics.\n\t(vsx_xxpermdi_<mode>_be): New define_expand with same\n\timplementation as previous version of vsx_xxpermdi_<mode>.\n\n[gcc/testsuite]\n\n2017-02-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/79261\n\t* gcc.target/powerpc/vec-xxpermdi.c: New file.\n\nFrom-SVN: r245545", "tree": {"sha": "08f29c1cda19589836dde18eb48f6f3cbc49f440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f29c1cda19589836dde18eb48f6f3cbc49f440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edf1849aa6b55871d799a0e8a574eb752f0b4c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf1849aa6b55871d799a0e8a574eb752f0b4c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf1849aa6b55871d799a0e8a574eb752f0b4c8a"}], "stats": {"total": 131, "additions": 125, "deletions": 6}, "files": [{"sha": "53cd408b6099f991d7843eb3896c3bd846e2aeff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "patch": "@@ -1,3 +1,15 @@\n+2017-02-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/79261\n+\t* config/rs6000/rs6000.c (rs6000_expand_ternop_builtin): Add\n+\tsupport for CODE_FOR_vsx_xxpermdi_v2d[fi]_be.\n+\t* config/rs6000/rs6000.md (reload_gpr_from_vsx<mode>): Call\n+\tgenerator for vsx_xxpermdi_<mode>_be.\n+\t* config/rs6000/vsx.md (vsx_xxpermdi_<mode>): Remove logic to\n+\tforce big-endian semantics.\n+\t(vsx_xxpermdi_<mode>_be): New define_expand with same\n+\timplementation as previous version of vsx_xxpermdi_<mode>.\n+\n 2017-02-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79327"}, {"sha": "41ad008e2a22a88dc2e3f4adba23a25bb375a37e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "patch": "@@ -15436,6 +15436,8 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n     }\n   else if (icode == CODE_FOR_vsx_xxpermdi_v2df\n            || icode == CODE_FOR_vsx_xxpermdi_v2di\n+           || icode == CODE_FOR_vsx_xxpermdi_v2df_be\n+           || icode == CODE_FOR_vsx_xxpermdi_v2di_be\n            || icode == CODE_FOR_vsx_xxsldwi_v16qi\n            || icode == CODE_FOR_vsx_xxsldwi_v8hi\n            || icode == CODE_FOR_vsx_xxsldwi_v4si"}, {"sha": "3626e783978b756ca4504b34a9f6beed257853c5", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "patch": "@@ -8433,7 +8433,7 @@\n   rtx gpr_lo_reg = gen_lowpart (DFmode, dest);\n \n   emit_insn (gen_p8_mfvsrd_3_<mode> (gpr_hi_reg, src));\n-  emit_insn (gen_vsx_xxpermdi_<mode> (tmp, src, src, GEN_INT (3)));\n+  emit_insn (gen_vsx_xxpermdi_<mode>_be (tmp, src, src, GEN_INT (3)));\n   emit_insn (gen_p8_mfvsrd_3_<mode> (gpr_lo_reg, tmp));\n   DONE;\n }"}, {"sha": "d1907948877c0b66f8141d39c884178bbbe5a251", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "patch": "@@ -2435,10 +2435,42 @@\n \n ;; Expand the builtin form of xxpermdi to canonical rtl.\n (define_expand \"vsx_xxpermdi_<mode>\"\n-  [(match_operand:VSX_L 0 \"vsx_register_operand\" \"\")\n-   (match_operand:VSX_L 1 \"vsx_register_operand\" \"\")\n-   (match_operand:VSX_L 2 \"vsx_register_operand\" \"\")\n-   (match_operand:QI 3 \"u5bit_cint_operand\" \"\")]\n+  [(match_operand:VSX_L 0 \"vsx_register_operand\")\n+   (match_operand:VSX_L 1 \"vsx_register_operand\")\n+   (match_operand:VSX_L 2 \"vsx_register_operand\")\n+   (match_operand:QI 3 \"u5bit_cint_operand\")]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n+{\n+  rtx target = operands[0];\n+  rtx op0 = operands[1];\n+  rtx op1 = operands[2];\n+  int mask = INTVAL (operands[3]);\n+  rtx perm0 = GEN_INT ((mask >> 1) & 1);\n+  rtx perm1 = GEN_INT ((mask & 1) + 2);\n+  rtx (*gen) (rtx, rtx, rtx, rtx, rtx);\n+\n+  if (<MODE>mode == V2DFmode)\n+    gen = gen_vsx_xxpermdi2_v2df_1;\n+  else\n+    {\n+      gen = gen_vsx_xxpermdi2_v2di_1;\n+      if (<MODE>mode != V2DImode)\n+\t{\n+\t  target = gen_lowpart (V2DImode, target);\n+\t  op0 = gen_lowpart (V2DImode, op0);\n+\t  op1 = gen_lowpart (V2DImode, op1);\n+\t}\n+    }\n+  emit_insn (gen (target, op0, op1, perm0, perm1));\n+  DONE;\n+})\n+\n+;; Special version of xxpermdi that retains big-endian semantics.\n+(define_expand \"vsx_xxpermdi_<mode>_be\"\n+  [(match_operand:VSX_L 0 \"vsx_register_operand\")\n+   (match_operand:VSX_L 1 \"vsx_register_operand\")\n+   (match_operand:VSX_L 2 \"vsx_register_operand\")\n+   (match_operand:QI 3 \"u5bit_cint_operand\")]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   rtx target = operands[0];\n@@ -3870,7 +3902,7 @@\n     {\n       rtx op1 = operands[1];\n       rtx v4si_tmp = gen_reg_rtx (V4SImode);\n-      emit_insn (gen_vsx_xxpermdi_v4si (v4si_tmp, op1, op1, const1_rtx));\n+      emit_insn (gen_vsx_xxpermdi_v4si_be (v4si_tmp, op1, op1, const1_rtx));\n       operands[1] = v4si_tmp;\n       operands[3] = GEN_INT (12 - INTVAL (operands[3]));\n     }"}, {"sha": "5511f26b11563e34cc0e1c0a786816ccb9f51ec2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "patch": "@@ -1,3 +1,8 @@\n+2017-02-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/79261\n+\t* gcc.target/powerpc/vec-xxpermdi.c: New file.\n+\n 2017-02-17  Julia Koval  <julia.koval@intel.com>\n \n \t* gcc.target/i386/rdpid.c New test."}, {"sha": "d56276a3dd95c7d99f06e5d7c6969cb8a421b2bb", "filename": "gcc/testsuite/gcc.target/powerpc/vec-xxpermdi.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-xxpermdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a530e1816779c1c8d4fe5ddaeb5cc313f2136152/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-xxpermdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-xxpermdi.c?ref=a530e1816779c1c8d4fe5ddaeb5cc313f2136152", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run { target { powerpc64*-*-* && vsx_hw } } } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+/* Added for PR79261 to test that vec_xxpermdi works correctly for\n+   both BE and LE targets.  */\n+\n+#include <altivec.h>\n+void abort (void);\n+\n+vector double vdx = { 0.0, 1.0 };\n+vector double vdy = { 2.0, 3.0 };\n+vector double vdz;\n+\n+vector signed long long vsllx = { 0, 1 };\n+vector signed long long vslly = { 2, 3 };\n+vector signed long long vsllz;\n+\n+vector float vfx = { 0.0, 1.0, 2.0, 3.0 };\n+vector float vfy = { 4.0, 5.0, 6.0, 7.0 };\n+vector float vfz;\n+\n+vector signed int vsix = { 0, 1, 2, 3 };\n+vector signed int vsiy = { 4, 5, 6, 7 };\n+vector signed int vsiz;\n+\n+vector signed short vssx = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+vector signed short vssy = { 8, 9, 10, 11, 12, 13, 14, 15 };\n+vector signed short vssz;\n+\n+vector signed char vscx = { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t    8, 9, 10, 11, 12, 13, 14, 15 };\n+vector signed char vscy = { 16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t    24, 25, 26, 27, 28, 29, 30, 31 };\n+vector signed char vscz;\n+\n+int\n+main ()\n+{\n+  vdz = vec_xxpermdi (vdx, vdy, 0b01);\n+  if (vdz[0] != 0.0 || vdz[1] != 3.0)\n+    abort ();\n+\n+  vsllz = vec_xxpermdi (vsllx, vslly, 0b10);\n+  if (vsllz[0] != 1 || vsllz[1] != 2)\n+    abort ();\n+\n+  vfz = vec_xxpermdi (vfx, vfy, 0b01);\n+  if (vfz[0] != 0.0 || vfz[1] != 1.0 || vfz[2] != 6.0 || vfz[3] != 7.0)\n+    abort ();\n+\n+  vsiz = vec_xxpermdi (vsix, vsiy, 0b10);\n+  if (vsiz[0] != 2 || vsiz[1] != 3 || vsiz[2] != 4 || vsiz[3] != 5)\n+    abort ();\n+\n+  vssz = vec_xxpermdi (vssx, vssy, 0b00);\n+  if (vssz[0] != 0 || vssz[1] != 1 || vssz[2] != 2 || vssz[3] != 3\n+      || vssz[4] != 8 || vssz[5] != 9 || vssz[6] != 10 || vssz[7] != 11)\n+    abort ();\n+\n+  vscz = vec_xxpermdi (vscx, vscy, 0b11);\n+  if (vscz[0] != 8 || vscz[1] != 9 || vscz[2] != 10 || vscz[3] != 11\n+      || vscz[4] != 12 || vscz[5] != 13 || vscz[6] != 14 || vscz[7] != 15\n+      || vscz[8] != 24 || vscz[9] != 25 || vscz[10] != 26 || vscz[11] != 27\n+      || vscz[12] != 28 || vscz[13] != 29 || vscz[14] != 30 || vscz[15] != 31)\n+    abort ();\n+\n+  return 0;\n+}"}]}