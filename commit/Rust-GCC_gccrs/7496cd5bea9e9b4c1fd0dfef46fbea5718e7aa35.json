{"sha": "7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ5NmNkNWJlYTllOWI0YzFmZDBkZmVmNDZmYmVhNTcxOGU3YWEzNQ==", "commit": {"author": {"name": "Sterling Augustine", "email": "saugustine@google.com", "date": "2012-06-04T17:52:42Z"}, "committer": {"name": "Sterling Augustine", "email": "sterling@gcc.gnu.org", "date": "2012-06-04T17:52:42Z"}, "message": "c-pretty-print.h (pp_c_flag_gnu_v3): New enumerator.\n\n2012-06-04   Sterling Augustine  <saugustine@google.com>\n\n\t* gcc/c-family/c-pretty-print.h (pp_c_flag_gnu_v3): New enumerator.\n\t* gcc/c-family/c-pretty-print.c (pp_c_specifier_qualifier_list): Check\n\tit at both the start and end of the function.\n\t* gcc/cp/error.c (dump_decl): Check pp_c_flag_gnu_v3.\n\t(decl_as_dwarf_string, lang_decl_dwarf_name): New functions.\n\t(lang_decl_name): Handle namespace decls.\n\t* gcc/cp/cp-tree.h: Declare decl_as_dwarf_string, lang_decl_dwarf_name.\n\t* gcc/cp/cp-lang.c: Call them.\n\nFrom-SVN: r188195", "tree": {"sha": "9e8eb9dc8726d5a4e921753eae23e1a20d104a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8eb9dc8726d5a4e921753eae23e1a20d104a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/comments", "author": {"login": "Sterling-Augustine", "id": 56981066, "node_id": "MDQ6VXNlcjU2OTgxMDY2", "avatar_url": "https://avatars.githubusercontent.com/u/56981066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sterling-Augustine", "html_url": "https://github.com/Sterling-Augustine", "followers_url": "https://api.github.com/users/Sterling-Augustine/followers", "following_url": "https://api.github.com/users/Sterling-Augustine/following{/other_user}", "gists_url": "https://api.github.com/users/Sterling-Augustine/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sterling-Augustine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sterling-Augustine/subscriptions", "organizations_url": "https://api.github.com/users/Sterling-Augustine/orgs", "repos_url": "https://api.github.com/users/Sterling-Augustine/repos", "events_url": "https://api.github.com/users/Sterling-Augustine/events{/privacy}", "received_events_url": "https://api.github.com/users/Sterling-Augustine/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "764ce4f20a98a9579c7c972955fd2aa1f245b455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764ce4f20a98a9579c7c972955fd2aa1f245b455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764ce4f20a98a9579c7c972955fd2aa1f245b455"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "159092a8239272995e250be369ab9ec136bf53c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "patch": "@@ -1,3 +1,14 @@\n+2012-06-04   Sterling Augustine  <saugustine@google.com>\n+\n+\t* gcc/c-family/c-pretty-print.h (pp_c_flag_gnu_v3): New enumerator.\n+\t* gcc/c-family/c-pretty-print.c (pp_c_specifier_qualifier_list): Check\n+\tit at both the start and end of the function.\n+\t* gcc/cp/error.c (dump_decl): Check pp_c_flag_gnu_v3.\n+\t(decl_as_dwarf_string, lang_decl_dwarf_name): New functions.\n+\t(lang_decl_name): Handle namespace decls.\n+\t* gcc/cp/cp-tree.h: Declare decl_as_dwarf_string, lang_decl_dwarf_name.\n+\t* gcc/cp/cp-lang.c: Call them.\n+\n 2012-06-04  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/47530"}, {"sha": "d445187907d1759da9b83de7da1cd4bd4afbe061", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "patch": "@@ -446,7 +446,7 @@ pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n {\n   const enum tree_code code = TREE_CODE (t);\n \n-  if (TREE_CODE (t) != POINTER_TYPE)\n+  if (!(pp->flags & pp_c_flag_gnu_v3) && code != POINTER_TYPE)\n     pp_c_type_qualifier_list (pp, t);\n   switch (code)\n     {\n@@ -494,6 +494,8 @@ pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n       pp_simple_type_specifier (pp, t);\n       break;\n     }\n+  if ((pp->flags & pp_c_flag_gnu_v3) && code != POINTER_TYPE)\n+    pp_c_type_qualifier_list (pp, t);\n }\n \n /* parameter-type-list:"}, {"sha": "2f9f94af18332f5dca852872e7566180e5fdebae", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "patch": "@@ -30,7 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n typedef enum\n   {\n      pp_c_flag_abstract = 1 << 1,\n-     pp_c_flag_last_bit = 2\n+     pp_c_flag_gnu_v3 = 1 << 2,\n+     pp_c_flag_last_bit = 3\n   } pp_c_pretty_print_flags;\n \n "}, {"sha": "da7f1e1f7ed384517f53cfa89c90e1fcae197ca9", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "patch": "@@ -118,11 +118,11 @@ cxx_dwarf_name (tree t, int verbosity)\n       && (ANON_AGGRNAME_P (DECL_NAME (t)) || LAMBDANAME_P (DECL_NAME (t))))\n     return NULL;\n   if (verbosity >= 2)\n-    return decl_as_string (t,\n-\t\t\t   TFF_DECL_SPECIFIERS | TFF_UNQUALIFIED_NAME\n-\t\t\t   | TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS);\n+    return decl_as_dwarf_string (t,\n+                                 TFF_DECL_SPECIFIERS | TFF_UNQUALIFIED_NAME\n+                                 | TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS);\n \n-  return cxx_printable_name (t, verbosity);\n+  return lang_decl_dwarf_name (t, verbosity, false);\n }\n \n static enum classify_record"}, {"sha": "7c901be7960285c84547724e27085144ac0abc3a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "patch": "@@ -5169,8 +5169,10 @@ extern const char *type_as_string\t\t(tree, int);\n extern const char *type_as_string_translate\t(tree, int);\n extern const char *decl_as_string\t\t(tree, int);\n extern const char *decl_as_string_translate\t(tree, int);\n+extern const char *decl_as_dwarf_string\t\t(tree, int);\n extern const char *expr_as_string\t\t(tree, int);\n extern const char *lang_decl_name\t\t(tree, int, bool);\n+extern const char *lang_decl_dwarf_name\t\t(tree, int, bool);\n extern const char *language_to_string\t\t(enum languages);\n extern const char *class_key_or_enum_as_string\t(tree);\n extern void print_instantiation_context\t\t(void);"}, {"sha": "67ff5130a61e0934acb9b8b03761355efcb9b76a", "filename": "gcc/cp/error.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7496cd5bea9e9b4c1fd0dfef46fbea5718e7aa35", "patch": "@@ -1028,7 +1028,12 @@ dump_decl (tree t, int flags)\n \t    dump_scope (CP_DECL_CONTEXT (t), flags);\n \t  flags &= ~TFF_UNQUALIFIED_NAME;\n \t  if (DECL_NAME (t) == NULL_TREE)\n-\t    pp_cxx_ws_string (cxx_pp, M_(\"{anonymous}\"));\n+            {\n+              if (!(pp_c_base (cxx_pp)->flags & pp_c_flag_gnu_v3))\n+                pp_cxx_ws_string (cxx_pp, M_(\"{anonymous}\"));\n+              else\n+                pp_cxx_ws_string (cxx_pp, M_(\"(anonymous namespace)\"));\n+            }\n \t  else\n \t    pp_cxx_tree_identifier (cxx_pp, DECL_NAME (t));\n \t}\n@@ -2556,6 +2561,21 @@ expr_as_string (tree decl, int flags)\n   return pp_formatted_text (cxx_pp);\n }\n \n+/* Wrap decl_as_string with options appropriate for dwarf.  */\n+\n+const char *\n+decl_as_dwarf_string (tree decl, int flags)\n+{\n+  const char *name;\n+  /* Curiously, reinit_cxx_pp doesn't reset the flags field, so setting the flag\n+     here will be adequate to get the desired behaviour.  */\n+  pp_c_base (cxx_pp)->flags |= pp_c_flag_gnu_v3;\n+  name = decl_as_string (decl, flags);\n+  /* Subsequent calls to the pretty printer shouldn't use this style.  */\n+  pp_c_base (cxx_pp)->flags &= ~pp_c_flag_gnu_v3;\n+  return name;\n+}\n+\n const char *\n decl_as_string (tree decl, int flags)\n {\n@@ -2573,6 +2593,21 @@ decl_as_string_translate (tree decl, int flags)\n   return pp_formatted_text (cxx_pp);\n }\n \n+/* Wrap lang_decl_name with options appropriate for dwarf.  */\n+\n+const char *\n+lang_decl_dwarf_name (tree decl, int v, bool translate)\n+{\n+  const char *name;\n+  /* Curiously, reinit_cxx_pp doesn't reset the flags field, so setting the flag\n+     here will be adequate to get the desired behaviour.  */\n+  pp_c_base (cxx_pp)->flags |= pp_c_flag_gnu_v3;\n+  name = lang_decl_name (decl, v, translate);\n+  /* Subsequent calls to the pretty printer shouldn't use this style.  */\n+  pp_c_base (cxx_pp)->flags &= ~pp_c_flag_gnu_v3;\n+  return name;\n+}\n+\n /* Generate the three forms of printable names for cxx_printable_name.  */\n \n const char *\n@@ -2596,6 +2631,9 @@ lang_decl_name (tree decl, int v, bool translate)\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     dump_function_name (decl, TFF_PLAIN_IDENTIFIER);\n+  else if ((DECL_NAME (decl) == NULL_TREE)\n+           && TREE_CODE (decl) == NAMESPACE_DECL)\n+    dump_decl (decl, TFF_PLAIN_IDENTIFIER);\n   else\n     dump_decl (DECL_NAME (decl), TFF_PLAIN_IDENTIFIER);\n "}]}