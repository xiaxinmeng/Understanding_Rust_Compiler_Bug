{"sha": "bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwOWJkZWI5ODEwMGNjNDlmNTExYWQ1MWExNjdhOWJmZGQ4MmU0Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-29T20:54:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-29T20:54:00Z"}, "message": "i386.c (ix86_output_function_epilogue): New.\n\n        * config/i386/i386.c (ix86_output_function_epilogue): New.\n        (TARGET_ASM_FUNCTION_EPILOGUE): New.\n        (pic_label_name): Remove.\n        (pic_labels_used): New.\n        (ix86_asm_file_end): Emit one pc load stub for each register used.\n        (output_set_got): Generate deep pc load to any register.\n        (ix86_select_alt_pic_regnum): New.\n        (ix86_save_reg): Don't save pic register if we can find a valid\n        call-clobbered replacement.\n        (ix86_expand_prologue): If we found a valid replacement, renumber\n        pic_offset_table_rtx.\n        * config/i386/i386.h (PIC_OFFSET_TABLE_REGNUM): Look at\n        pic_offset_table_rtx after reload.\n        (REAL_PIC_OFFSET_TABLE_REGNUM): New.\n        * config/i386/i386.md (set_got): Make insn, not expander.\n        (set_got_nopic, set_got_deep, set_got_nodeep): Remove.\n\nFrom-SVN: r54021", "tree": {"sha": "450da37aff4223167c75767795f6f731c19cce50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/450da37aff4223167c75767795f6f731c19cce50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/comments", "author": null, "committer": null, "parents": [{"sha": "002ff5bc3ea7c58a574c64e4d45d58ff60c6171b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002ff5bc3ea7c58a574c64e4d45d58ff60c6171b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002ff5bc3ea7c58a574c64e4d45d58ff60c6171b"}], "stats": {"total": 186, "additions": 109, "deletions": 77}, "files": [{"sha": "ed6849ed185757b718085b86ade4ef79545f7b5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "patch": "@@ -1,3 +1,22 @@\n+2002-05-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_output_function_epilogue): New.\n+\t(TARGET_ASM_FUNCTION_EPILOGUE): New.\n+\t(pic_label_name): Remove.\n+\t(pic_labels_used): New.\n+\t(ix86_asm_file_end): Emit one pc load stub for each register used.\n+\t(output_set_got): Generate deep pc load to any register.\n+\t(ix86_select_alt_pic_regnum): New.\n+\t(ix86_save_reg): Don't save pic register if we can find a valid\n+\tcall-clobbered replacement.\n+\t(ix86_expand_prologue): If we found a valid replacement, renumber\n+\tpic_offset_table_rtx.\n+\t* config/i386/i386.h (PIC_OFFSET_TABLE_REGNUM): Look at\n+\tpic_offset_table_rtx after reload.\n+\t(REAL_PIC_OFFSET_TABLE_REGNUM): New.\n+\t* config/i386/i386.md (set_got): Make insn, not expander.\n+\t(set_got_nopic, set_got_deep, set_got_nodeep): Remove.\n+\n 2002-05-29  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_compute_frame_layout): Do add bottom"}, {"sha": "bea81e807ed4cc96cc069da735a288ed3c90f9ce", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 77, "deletions": 48, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "patch": "@@ -687,6 +687,7 @@ static int ix86_nsaved_regs PARAMS ((void));\n static void ix86_emit_save_regs PARAMS ((void));\n static void ix86_emit_save_regs_using_mov PARAMS ((rtx, HOST_WIDE_INT));\n static void ix86_emit_restore_regs_using_mov PARAMS ((rtx, int, int));\n+static void ix86_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void ix86_set_move_mem_attrs_1 PARAMS ((rtx, rtx, rtx, rtx, rtx));\n static void ix86_sched_reorder_ppro PARAMS ((rtx *, rtx *));\n static HOST_WIDE_INT ix86_GOT_alias_set PARAMS ((void));\n@@ -737,6 +738,7 @@ static int ix86_fp_comparison_arithmetics_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_fcomi_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_sahf_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_cost PARAMS ((enum rtx_code code));\n+static unsigned int ix86_select_alt_pic_regnum PARAMS ((void));\n static int ix86_save_reg PARAMS ((unsigned int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n static int ix86_comp_type_attributes PARAMS ((tree, tree));\n@@ -806,6 +808,8 @@ static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n #  undef TARGET_ASM_FUNCTION_PROLOGUE\n #  define TARGET_ASM_FUNCTION_PROLOGUE ix86_osf_output_function_prologue\n #endif\n+#undef TARGET_ASM_FUNCTION_EPILOGUE\n+#define TARGET_ASM_FUNCTION_EPILOGUE ix86_output_function_epilogue\n \n #undef TARGET_ASM_OPEN_PAREN\n #define TARGET_ASM_OPEN_PAREN \"\"\n@@ -3894,7 +3898,7 @@ ix86_setup_frame_addresses ()\n   cfun->machine->accesses_prev_frame = 1;\n }\n \f\n-static char pic_label_name[32];\n+static int pic_labels_used;\n \n /* This function generates code for -fpic that loads %ebx with\n    the return address of the caller and then returns.  */\n@@ -3904,48 +3908,28 @@ ix86_asm_file_end (file)\n      FILE *file;\n {\n   rtx xops[2];\n+  int regno;\n \n-  if (pic_label_name[0] == 0)\n-    return;\n-\n-  /* ??? Binutils 2.10 and earlier has a linkonce elimination bug related\n-     to updating relocations to a section being discarded such that this\n-     doesn't work.  Ought to detect this at configure time.  */\n-#if 0\n-  /* The trick here is to create a linkonce section containing the\n-     pic label thunk, but to refer to it with an internal label.\n-     Because the label is internal, we don't have inter-dso name\n-     binding issues on hosts that don't support \".hidden\".\n-\n-     In order to use these macros, however, we must create a fake\n-     function decl.  */\n-  if (targetm.have_named_sections)\n-    {\n-      tree decl = build_decl (FUNCTION_DECL,\n-\t\t\t      get_identifier (\"i686.get_pc_thunk\"),\n-\t\t\t      error_mark_node);\n-      DECL_ONE_ONLY (decl) = 1;\n-      (*targetm.asm_out.unique_section) (decl, 0);\n-      named_section (decl, NULL);\n-    }\n-  else\n-#else\n-    text_section ();\n-#endif\n+  for (regno = 0; regno < 8; ++regno)\n+    {\n+      if (! ((pic_labels_used >> regno) & 1))\n+\tcontinue;\n \n-  /* This used to call ASM_DECLARE_FUNCTION_NAME() but since it's an\n-     internal (non-global) label that's being emitted, it didn't make\n-     sense to have .type information for local labels.   This caused\n-     the SCO OpenServer 5.0.4 ELF assembler grief (why are you giving\n-     me debug info for a label that you're declaring non-global?) this\n-     was changed to call ASM_OUTPUT_LABEL() instead.  */\n+      text_section ();\n \n-  ASM_OUTPUT_LABEL (file, pic_label_name);\n+      /* This used to call ASM_DECLARE_FUNCTION_NAME() but since it's an\n+\t internal (non-global) label that's being emitted, it didn't make\n+\t sense to have .type information for local labels.   This caused\n+\t the SCO OpenServer 5.0.4 ELF assembler grief (why are you giving\n+\t me debug info for a label that you're declaring non-global?) this\n+\t was changed to call ASM_OUTPUT_LABEL() instead.  */\n+      ASM_OUTPUT_INTERNAL_LABEL (file, \"LPR\", regno);\n \n-  xops[0] = pic_offset_table_rtx;\n-  xops[1] = gen_rtx_MEM (SImode, stack_pointer_rtx);\n-  output_asm_insn (\"mov{l}\\t{%1, %0|%0, %1}\", xops);\n-  output_asm_insn (\"ret\", xops);\n+      xops[0] = gen_rtx_REG (SImode, regno);\n+      xops[1] = gen_rtx_MEM (SImode, stack_pointer_rtx);\n+      output_asm_insn (\"mov{l}\\t{%1, %0|%0, %1}\", xops);\n+      output_asm_insn (\"ret\", xops);\n+    }\n }\n \n /* Emit code for the SET_GOT patterns.  */\n@@ -3976,10 +3960,11 @@ output_set_got (dest)\n     }\n   else\n     {\n-      if (! pic_label_name[0])\n-\tASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", 0);\n+      char pic_label_name[32];\n+      ASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", REGNO (dest));\n+      pic_labels_used |= 1 << REGNO (dest);\n \n-      xops[2] = gen_rtx_SYMBOL_REF (Pmode, pic_label_name);\n+      xops[2] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (pic_label_name));\n       xops[2] = gen_rtx_MEM (QImode, xops[2]);\n       output_asm_insn (\"call\\t%X2\", xops);\n     }\n@@ -4005,17 +3990,39 @@ gen_push (arg)\n \t\t      arg);\n }\n \n+/* Return >= 0 if there is an unused call-clobbered register available\n+   for the entire function.  */\n+\n+static unsigned int\n+ix86_select_alt_pic_regnum ()\n+{\n+  if (current_function_is_leaf && !current_function_profile)\n+    {\n+      int i;\n+      for (i = 2; i >= 0; --i)\n+        if (!regs_ever_live[i])\n+\t  return i;\n+    }\n+\n+  return INVALID_REGNUM;\n+}\n+  \n /* Return 1 if we need to save REGNO.  */\n static int\n ix86_save_reg (regno, maybe_eh_return)\n      unsigned int regno;\n      int maybe_eh_return;\n {\n-  if (regno == PIC_OFFSET_TABLE_REGNUM\n-      && (regs_ever_live[regno]\n+  if (pic_offset_table_rtx\n+      && regno == REAL_PIC_OFFSET_TABLE_REGNUM\n+      && (regs_ever_live[REAL_PIC_OFFSET_TABLE_REGNUM]\n \t  || current_function_profile\n \t  || current_function_calls_eh_return))\n-    return 1;\n+    {\n+      if (ix86_select_alt_pic_regnum () != INVALID_REGNUM)\n+\treturn 0;\n+      return 1;\n+    }\n \n   if (current_function_calls_eh_return && maybe_eh_return)\n     {\n@@ -4236,9 +4243,7 @@ void\n ix86_expand_prologue ()\n {\n   rtx insn;\n-  int pic_reg_used = (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n-\t\t      && (regs_ever_live[PIC_OFFSET_TABLE_REGNUM]\n-\t\t\t  || current_function_profile));\n+  bool pic_reg_used;\n   struct ix86_frame frame;\n   int use_mov = 0;\n   HOST_WIDE_INT allocate;\n@@ -4317,6 +4322,19 @@ ix86_expand_prologue ()\n   SUBTARGET_PROLOGUE;\n #endif\n \n+  pic_reg_used = false;\n+  if (pic_offset_table_rtx\n+      && (regs_ever_live[REAL_PIC_OFFSET_TABLE_REGNUM]\n+\t  || current_function_profile))\n+    {\n+      unsigned int alt_pic_reg_used = ix86_select_alt_pic_regnum ();\n+\n+      if (alt_pic_reg_used != INVALID_REGNUM)\n+\tREGNO (pic_offset_table_rtx) = alt_pic_reg_used;\n+\n+      pic_reg_used = true;\n+    }\n+\n   if (pic_reg_used)\n     {\n       insn = emit_insn (gen_set_got (pic_offset_table_rtx));\n@@ -4522,6 +4540,17 @@ ix86_expand_epilogue (style)\n   else\n     emit_jump_insn (gen_return_internal ());\n }\n+\n+/* Reset from the function's potential modifications.  */\n+\n+static void\n+ix86_output_function_epilogue (file, size)\n+     FILE *file ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT size ATTRIBUTE_UNUSED;\n+{\n+  if (pic_offset_table_rtx)\n+    REGNO (pic_offset_table_rtx) = REAL_PIC_OFFSET_TABLE_REGNUM;\n+}\n \f\n /* Extract the parts of an RTL expression that is a valid memory address\n    for an instruction.  Return 0 if the structure of the address is"}, {"sha": "dc51aefaaa70d267fa0e341619ebc1739021f74d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "patch": "@@ -1086,9 +1086,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Register to hold the addressing base for position independent\n    code access to data items.  We don't use PIC pointer for 64bit\n    mode.  Define the regnum to dummy value to prevent gcc from\n-   pessimizing code dealing with EBX.  */\n-#define PIC_OFFSET_TABLE_REGNUM \\\n-  (TARGET_64BIT || !flag_pic ? INVALID_REGNUM : 3)\n+   pessimizing code dealing with EBX. \n+\n+   To avoid clobbering a call-saved register unnecessarily, we renumber\n+   the pic register when possible.  The change is visible after the\n+   prologue has been emitted.  */\n+\n+#define REAL_PIC_OFFSET_TABLE_REGNUM  3\n+\n+#define PIC_OFFSET_TABLE_REGNUM\t\t\t\t\\\n+  (TARGET_64BIT || !flag_pic ? INVALID_REGNUM\t\t\\\n+   : reload_completed ? REGNO (pic_offset_table_rtx)\t\\\n+   : REAL_PIC_OFFSET_TABLE_REGNUM)\n \n /* Register in which address to store a structure value\n    arrives in the function.  On the 386, the prologue"}, {"sha": "f2203c40571bed33fb20c6e015b86006ed0b2aea", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd09bdeb98100cc49f511ad51a167a9bfdd82e4f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bd09bdeb98100cc49f511ad51a167a9bfdd82e4f", "patch": "@@ -13137,32 +13137,7 @@\n   \"\"\n   \"ix86_expand_prologue (); DONE;\")\n \n-(define_expand \"set_got\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n-\t      (clobber (reg:CC 17))])]\n-  \"!TARGET_64BIT\"\n-  \"\")\n-\n-(define_insn \"*set_got_nopic\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n-   (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT && !flag_pic\"\n-  { return output_set_got (operands[0]); }\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"11\")])\n-\n-(define_insn \"*set_got_deep\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=b\")\n-\t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n-   (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT && TARGET_DEEP_BRANCH_PREDICTION\"\n-  { return output_set_got (operands[0]); }\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"11\")])\n-\n-(define_insn \"*set_got_nodeep\"\n+(define_insn \"set_got\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n    (clobber (reg:CC 17))]"}]}