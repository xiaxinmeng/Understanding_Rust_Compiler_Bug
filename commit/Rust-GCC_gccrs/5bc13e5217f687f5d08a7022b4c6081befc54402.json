{"sha": "5bc13e5217f687f5d08a7022b4c6081befc54402", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjMTNlNTIxN2Y2ODdmNWQwOGE3MDIyYjRjNjA4MWJlZmM1NDQwMg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-05T21:09:23Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-05T21:14:21Z"}, "message": "d: Merge upstream dmd 740f3d1ea.\n\nBackports the conversion of the parameter fields debugids and versionids\nto Identifiers.  The idea is that Identifiers should be used instead of\nC strings where ever possible.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 740f3d1ea.\n\t* d-lang.cc (d_handle_option): Use new fields to save debug and\n\tversion levels passed over command-line.\n\t(d_post_options): Add them to front-end here.", "tree": {"sha": "52fa54f86591105fac8fef597ae9fcf0de626cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52fa54f86591105fac8fef597ae9fcf0de626cf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bc13e5217f687f5d08a7022b4c6081befc54402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc13e5217f687f5d08a7022b4c6081befc54402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bc13e5217f687f5d08a7022b4c6081befc54402", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc13e5217f687f5d08a7022b4c6081befc54402/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a73a6adb605df1462be176442851b5a37839fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a73a6adb605df1462be176442851b5a37839fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a73a6adb605df1462be176442851b5a37839fc0"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "54d5799e59ca7bfd5225b7b83becdd3fc28ab55a", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=5bc13e5217f687f5d08a7022b4c6081befc54402", "patch": "@@ -443,14 +443,16 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \t  int level = integral_argument (arg);\n \t  if (level != -1)\n \t    {\n-\t      DebugCondition::setGlobalLevel (level);\n+\t      global.params.debuglevel = level;\n \t      break;\n \t    }\n \t}\n \n       if (Identifier::isValidIdentifier (CONST_CAST (char *, arg)))\n \t{\n-\t  DebugCondition::addGlobalIdent (arg);\n+\t  if (!global.params.debugids)\n+\t    global.params.debugids = new Strings ();\n+\t  global.params.debugids->push (arg);\n \t  break;\n \t}\n \n@@ -582,14 +584,16 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \t  int level = integral_argument (arg);\n \t  if (level != -1)\n \t    {\n-\t      VersionCondition::setGlobalLevel (level);\n+\t      global.params.versionlevel = level;\n \t      break;\n \t    }\n \t}\n \n       if (Identifier::isValidIdentifier (CONST_CAST (char *, arg)))\n \t{\n-\t  VersionCondition::addGlobalIdent (arg);\n+\t  if (!global.params.versionids)\n+\t    global.params.versionids = new Strings ();\n+\t  global.params.versionids->push (arg);\n \t  break;\n \t}\n \n@@ -812,6 +816,25 @@ d_post_options (const char ** fn)\n   /* Has no effect yet.  */\n   global.params.pic = flag_pic != 0;\n \n+  /* Add in versions given on the command line.  */\n+  if (global.params.versionids)\n+    {\n+      for (size_t i = 0; i < global.params.versionids->length; i++)\n+\t{\n+\t  const char *s = (*global.params.versionids)[i];\n+\t  VersionCondition::addGlobalIdent (s);\n+\t}\n+    }\n+\n+  if (global.params.debugids)\n+    {\n+      for (size_t i = 0; i < global.params.debugids->length; i++)\n+\t{\n+\t  const char *s = (*global.params.debugids)[i];\n+\t  DebugCondition::addGlobalIdent (s);\n+\t}\n+    }\n+\n   if (warn_return_type == -1)\n     warn_return_type = 0;\n "}, {"sha": "540801d1d4437f5f6ac72ed105192d3427e3b424", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=5bc13e5217f687f5d08a7022b4c6081befc54402", "patch": "@@ -1,4 +1,4 @@\n-f5638c7b8a6912858a9b51987df6a725e6796dc9\n+740f3d1eab81d88d11451083d955d5075f60d4e0\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "53c5499f158c888b42054198a9ab3a60034f3907", "filename": "gcc/d/dmd/cond.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fcond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fcond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.c?ref=5bc13e5217f687f5d08a7022b4c6081befc54402", "patch": "@@ -29,15 +29,15 @@\n Expression *semantic(Expression *e, Scope *sc);\n bool evalStaticCondition(Scope *sc, Expression *exp, Expression *e, bool &errors);\n \n-int findCondition(Strings *ids, Identifier *ident)\n+int findCondition(Identifiers *ids, Identifier *ident)\n {\n     if (ids)\n     {\n         for (size_t i = 0; i < ids->length; i++)\n         {\n-            const char *id = (*ids)[i];\n+            Identifier *id = (*ids)[i];\n \n-            if (strcmp(id, ident->toChars()) == 0)\n+            if (id == ident)\n                 return true;\n         }\n     }\n@@ -391,16 +391,11 @@ Condition *DVCondition::syntaxCopy()\n \n /* ============================================================ */\n \n-void DebugCondition::setGlobalLevel(unsigned level)\n-{\n-    global.params.debuglevel = level;\n-}\n-\n void DebugCondition::addGlobalIdent(const char *ident)\n {\n-    if (!global.params.debugids)\n-        global.params.debugids = new Strings();\n-    global.params.debugids->push(ident);\n+    if (!global.debugids)\n+        global.debugids = new Identifiers();\n+    global.debugids->push(Identifier::idPool(ident));\n }\n \n \n@@ -444,12 +439,12 @@ int DebugCondition::include(Scope *sc)\n                 inc = 1;\n                 definedInModule = true;\n             }\n-            else if (findCondition(global.params.debugids, ident))\n+            else if (findCondition(global.debugids, ident))\n                 inc = 1;\n             else\n             {   if (!mod->debugidsNot)\n-                    mod->debugidsNot = new Strings();\n-                mod->debugidsNot->push(ident->toChars());\n+                    mod->debugidsNot = new Identifiers();\n+                mod->debugidsNot->push(ident);\n             }\n         }\n         else if (level <= global.params.debuglevel || level <= mod->debuglevel)\n@@ -462,11 +457,6 @@ int DebugCondition::include(Scope *sc)\n \n /* ============================================================ */\n \n-void VersionCondition::setGlobalLevel(unsigned level)\n-{\n-    global.params.versionlevel = level;\n-}\n-\n static bool isReserved(const char *ident)\n {\n     static const char* reserved[] =\n@@ -598,9 +588,9 @@ void VersionCondition::addGlobalIdent(const char *ident)\n \n void VersionCondition::addPredefinedGlobalIdent(const char *ident)\n {\n-    if (!global.params.versionids)\n-        global.params.versionids = new Strings();\n-    global.params.versionids->push(ident);\n+    if (!global.versionids)\n+        global.versionids = new Identifiers();\n+    global.versionids->push(Identifier::idPool(ident));\n }\n \n \n@@ -624,13 +614,13 @@ int VersionCondition::include(Scope *sc)\n                 inc = 1;\n                 definedInModule = true;\n             }\n-            else if (findCondition(global.params.versionids, ident))\n+            else if (findCondition(global.versionids, ident))\n                 inc = 1;\n             else\n             {\n                 if (!mod->versionidsNot)\n-                    mod->versionidsNot = new Strings();\n-                mod->versionidsNot->push(ident->toChars());\n+                    mod->versionidsNot = new Identifiers();\n+                mod->versionidsNot->push(ident);\n             }\n         }\n         else if (level <= global.params.versionlevel || level <= mod->versionlevel)"}, {"sha": "1963f0519a91d1aa37735cc3ed0b5bf488cd6bdc", "filename": "gcc/d/dmd/cond.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fcond.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fcond.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.h?ref=5bc13e5217f687f5d08a7022b4c6081befc54402", "patch": "@@ -23,7 +23,7 @@ class DebugCondition;\n class ForeachStatement;\n class ForeachRangeStatement;\n \n-int findCondition(Strings *ids, Identifier *ident);\n+int findCondition(Identifiers *ids, Identifier *ident);\n \n class Condition\n {\n@@ -76,7 +76,6 @@ class DVCondition : public Condition\n class DebugCondition : public DVCondition\n {\n public:\n-    static void setGlobalLevel(unsigned level);\n     static void addGlobalIdent(const char *ident);\n \n     DebugCondition(Module *mod, unsigned level, Identifier *ident);\n@@ -89,7 +88,6 @@ class DebugCondition : public DVCondition\n class VersionCondition : public DVCondition\n {\n public:\n-    static void setGlobalLevel(unsigned level);\n     static void addGlobalIdent(const char *ident);\n     static void addPredefinedGlobalIdent(const char *ident);\n "}, {"sha": "3c539a7ff83e131b0bba778000160d157cd5a58e", "filename": "gcc/d/dmd/dversion.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fdversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fdversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdversion.c?ref=5bc13e5217f687f5d08a7022b4c6081befc54402", "patch": "@@ -81,8 +81,8 @@ void DebugSymbol::addMember(Scope *, ScopeDsymbol *sds)\n                 errors = true;\n             }\n             if (!m->debugids)\n-                m->debugids = new Strings();\n-            m->debugids->push(ident->toChars());\n+                m->debugids = new Identifiers();\n+            m->debugids->push(ident);\n         }\n     }\n     else\n@@ -172,8 +172,8 @@ void VersionSymbol::addMember(Scope *, ScopeDsymbol *sds)\n                 errors = true;\n             }\n             if (!m->versionids)\n-                m->versionids = new Strings();\n-            m->versionids->push(ident->toChars());\n+                m->versionids = new Identifiers();\n+            m->versionids->push(ident);\n         }\n     }\n     else"}, {"sha": "a6449b93ab828c2cbfa2fd4fc4954f8d28ae533b", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=5bc13e5217f687f5d08a7022b4c6081befc54402", "patch": "@@ -239,6 +239,9 @@ struct Global\n \n     void* console;         // opaque pointer to console for controlling text attributes\n \n+    Array<class Identifier*>* versionids; // command line versions and predefined versions\n+    Array<class Identifier*>* debugids;   // command line debug versions and predefined versions\n+\n     /* Start gagging. Return the current number of gagged errors\n      */\n     unsigned startGagging();"}, {"sha": "17ad59045234f6cd6eab79fee61c80e24ac6b8e8", "filename": "gcc/d/dmd/module.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fmodule.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc13e5217f687f5d08a7022b4c6081befc54402/gcc%2Fd%2Fdmd%2Fmodule.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmodule.h?ref=5bc13e5217f687f5d08a7022b4c6081befc54402", "patch": "@@ -100,12 +100,12 @@ class Module : public Package\n     Modules aimports;             // all imported modules\n \n     unsigned debuglevel;        // debug level\n-    Strings *debugids;      // debug identifiers\n-    Strings *debugidsNot;       // forward referenced debug identifiers\n+    Identifiers *debugids;      // debug identifiers\n+    Identifiers *debugidsNot;       // forward referenced debug identifiers\n \n     unsigned versionlevel;      // version level\n-    Strings *versionids;    // version identifiers\n-    Strings *versionidsNot;     // forward referenced version identifiers\n+    Identifiers *versionids;    // version identifiers\n+    Identifiers *versionidsNot;     // forward referenced version identifiers\n \n     Macro *macrotable;          // document comment macros\n     Escape *escapetable;        // document comment escapes"}]}