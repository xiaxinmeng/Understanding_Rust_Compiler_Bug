{"sha": "e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0ZGJiZTE4YjQ5N2Q3NzVkMGI3ZWZhYjdmY2QwODQ4NmYxYTFmYQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-07-18T11:04:18Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-07-18T11:04:18Z"}, "message": "re PR debug/23205 ([C++/unit-at-a-time] stabs debug info omitted for global const variables)\n\n\ttoplevel:\n\t* configure: Regenerate.\n\n\tconfig:\n\t* elf.m4 (target_elf): Remove *-netware*.\n\n\tcontrib:\n\t* config-list.mk (i586-netware): Remove.\n\t(.PHONY): Remove make-script-dir dependency.\n\t(make-script-dir): Remove.\n\t($(LIST)): Remove make-script-dir dependency.\n\n\tgcc:\n\t* config.gcc (i[3456x]86-*-netware*): Remove.\n\n\t* gthr-nks.h: Remove.\n\t* configure.ac (enable_threads): Remove nks.\n\t* configure: Regenerate.\n\n\t* config/i386/i386.c (ix86_encode_section_info): Remove netware\n\treference.\n\t* config/i386/i386.h (KEEP_AGGREGATE_RETURN_POINTER): Remove\n\t<netware.h> reference.\n\n\t* config/i386/netware-libgcc.c,\n\tgcc/config/i386/netware-libgcc.def,\n\tgcc/config/i386/netware-libgcc.exp, gcc/config/i386/netware.c,\n\tgcc/config/i386/netware.h, gcc/config/i386/netware.opt,\n\tgcc/config/i386/nwld.c, gcc/config/i386/nwld.h,\n\tgcc/config/i386/t-netware, gcc/config/i386/t-nwld: Remove\n\n\t* doc/extend.texi (Function Attributes,\n\tcallee_pop_aggregate_return): Remove i?86-netware reference.\n\t* doc/install.texi (Configuration, --enable-threads): Remove nks.\n\n\tgcc/testsuite:\n\t* g++.dg/ext/bitfield2.C: Remove i?86-*-netware support.\n\t* g++.dg/ext/bitfield3.C: Likewise.\n\t* g++.dg/ext/bitfield4.C: Likewise.\n\t* g++.dg/ext/bitfield5.C: Likewise.\n\t* g++.dg/other/PR23205.C: Remove *-*-netware* support.\n\t* g++.dg/other/pr23205-2.C: Likewise.\n\t* gcc.c-torture/compile/20001109-1.c: Remove dg-xfail-if.\n\t* gcc.c-torture/compile/20001109-2.c: Likewise.\n\t* gcc.dg/20040813-1.c: Remove *-*-netware* support.\n\t* gcc.dg/bitfld-15.c: Remove i?86-*-netware support.\n\t* gcc.dg/bitfld-16.c: Likewise.\n\t* gcc.dg/bitfld-17.c: Likewise.\n\t* gcc.dg/bitfld-18.c: Likewise.\n\t* gcc.dg/builtins-config.h: Remove Netware support.\n\t* gcc.dg/cdce1.c: Remove *-*-netware* support.  Update line number.\n\t* gcc.dg/cdce2.c: Likewise.\n\t* gcc.dg/cpp/assert4.c: Remove netware support.\n\t* gcc.dg/debug/pr35154.c: Remove *-*-netware* support.\n\t* gfortran.dg/debug/pr35154-stabs.f: Remove *-*-netware* support.\n\n\t* lib/target-supports.exp (check_visibility_available): Remove\n\tNetWare support.\n\t(check_profiling_available): Likewise.\n\n\tlibgcc:\n\t* config.host (i[3456x]86-*-netware*): Remove.\n\t* config/i386/netware-crt0.c, config/i386/t-nwld,\n\tconfig/i386/t-slibgcc-nwld: Remove.\n\n\tlibstdc++-v3:\n\t* crossconfig.m4 (*-netware): Remove.\n\t* configure: Regenerate.\n\nFrom-SVN: r176391", "tree": {"sha": "8e1e15f83a5ed0a31b0530d2200e240be5794e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1e15f83a5ed0a31b0530d2200e240be5794e92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c27e3f60a67506df855e792f0703409fbd593611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27e3f60a67506df855e792f0703409fbd593611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27e3f60a67506df855e792f0703409fbd593611"}], "stats": {"total": 1652, "additions": 98, "deletions": 1554}, "files": [{"sha": "384c521ea96c1c701d4478844e08147112fdecff", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,3 +1,7 @@\n+2011-07-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure: Regenerate.\n+\n 2011-07-18  Richard Guenther  <rguenther@suse.de>\n \n \t* MAINTAINERS (Global Reviewers): Add myself."}, {"sha": "90f5238ecbee638e1b605e0f35a514879b58116f", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,3 +1,7 @@\n+2011-07-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* elf.m4 (target_elf): Remove *-netware*.\n+\n 2011-07-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* mt-alphaieee (GOCFLAGS_FOR_TARGET): Add -mieee."}, {"sha": "da051cbe61c1bf2592e6f18912122e325604708b", "filename": "config/elf.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/config%2Felf.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/config%2Felf.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Felf.m4?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,4 +1,4 @@\n-dnl Copyright (C) 2010 Free Software Foundation, Inc.\n+dnl Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n dnl This file is free software, distributed under the terms of the GNU\n dnl General Public License.  As a special exception to the GNU General\n dnl Public License, this file may be distributed as part of a program\n@@ -14,7 +14,7 @@ AC_REQUIRE([AC_CANONICAL_TARGET])\n target_elf=no\n case $target in\n   *-darwin* | *-aix* | *-cygwin* | *-mingw* | *-aout* | *-*coff* | \\\n-  *-msdosdjgpp* | *-netware* | *-vms* | *-wince* | *-*-pe* | \\\n+  *-msdosdjgpp* | *-vms* | *-wince* | *-*-pe* | \\\n   alpha*-dec-osf* | *-interix* | hppa[[12]]*-*-hpux*)\n     target_elf=no\n     ;;"}, {"sha": "0097ab1ccb4deeabb55535f63ccb1aff484e7b02", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -6009,7 +6009,7 @@ fi\n target_elf=no\n case $target in\n   *-darwin* | *-aix* | *-cygwin* | *-mingw* | *-aout* | *-*coff* | \\\n-  *-msdosdjgpp* | *-netware* | *-vms* | *-wince* | *-*-pe* | \\\n+  *-msdosdjgpp* | *-vms* | *-wince* | *-*-pe* | \\\n   alpha*-dec-osf* | *-interix* | hppa[12]*-*-hpux*)\n     target_elf=no\n     ;;"}, {"sha": "e68679dd1acf3c5a7bc37035c780e504753bd3eb", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,3 +1,10 @@\n+2011-07-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config-list.mk (i586-netware): Remove.\n+\t(.PHONY): Remove make-script-dir dependency.\n+\t(make-script-dir): Remove.\n+\t($(LIST)): Remove make-script-dir dependency.\n+\n 2011-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* gcc_update: Add C6X generated files."}, {"sha": "23b37160136e7d27ee0b0b5808c3e987e6108faa", "filename": "contrib/config-list.mk", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -27,7 +27,7 @@ LIST = alpha-linux-gnu alpha-freebsd6 alpha-netbsd alpha-openbsd \\\n   i486-freebsd4 i686-freebsd6 i686-kfreebsd-gnu \\\n   i686-netbsdelf9 i686-knetbsd-gnu i686-openbsd i686-openbsd3.0 \\\n   i686-elf i686-kopensolaris-gnu i686-symbolics-gnu i686-pc-msdosdjgpp \\\n-  i686-lynxos i586-netwareOPT-with-ld=SCRIPTSnwld i686-nto-qnx \\\n+  i686-lynxos i686-nto-qnx \\\n   i686-rtems i686-solaris2.10 i686-wrs-vxworks \\\n   i686-wrs-vxworksae \\\n   i686-cygwinOPT-enable-threads=yes i686-mingw32crt ia64-elf \\\n@@ -72,7 +72,7 @@ LOGFILES = $(patsubst %,log/%-make.out,$(LIST))\n all: $(LOGFILES)\n config: $(LIST)\n \n-.PHONY: make-log-dir make-script-dir all config\n+.PHONY: make-log-dir all config\n \n empty=\n \n@@ -81,14 +81,7 @@ empty=\n make-log-dir: ../gcc/MAINTAINERS\n \tmkdir log\n \n-# The 'ix86-netware --with-ld=nwld' configuration needs a nwld executable to\n-# configure.  See PR47104.\n-make-script-dir:\n-\tmkdir scripts\n-\techo ld $* > scripts/nwld\n-\tchmod u+x scripts/nwld\n-\n-$(LIST): make-log-dir make-script-dir\n+$(LIST): make-log-dir\n \t-mkdir $@\n \t(cd $@ && \\\n \t../../gcc/configure \\"}, {"sha": "6026f4ac364dbec9273f3cbae096e7e47e918a93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,3 +1,27 @@\n+2011-07-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.gcc (i[3456x]86-*-netware*): Remove.\n+\n+\t* gthr-nks.h: Remove.\n+\t* configure.ac (enable_threads): Remove nks.\n+\t* configure: Regenerate.\n+\n+\t* config/i386/i386.c (ix86_encode_section_info): Remove netware\n+\treference.\n+\t* config/i386/i386.h (KEEP_AGGREGATE_RETURN_POINTER): Remove\n+\t<netware.h> reference.\n+\n+\t* config/i386/netware-libgcc.c,\n+\tgcc/config/i386/netware-libgcc.def,\n+\tgcc/config/i386/netware-libgcc.exp, gcc/config/i386/netware.c,\n+\tgcc/config/i386/netware.h, gcc/config/i386/netware.opt,\n+\tgcc/config/i386/nwld.c, gcc/config/i386/nwld.h,\n+\tgcc/config/i386/t-netware, gcc/config/i386/t-nwld: Remove\n+\n+\t* doc/extend.texi (Function Attributes,\n+\tcallee_pop_aggregate_return): Remove i?86-netware reference.\n+\t* doc/install.texi (Configuration, --enable-threads): Remove nks.\n+\n 2011-07-17  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/49746"}, {"sha": "109a267bc7c37ac83c9784b36f5349fb19e741b3", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1368,25 +1368,6 @@ i[34567]86-*-lynxos*)\n \tgnu_ld=yes\n \tgas=yes\n \t;;\n-i[3456x]86-*-netware*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h tm-dwarf2.h i386/netware.h\"\n- \ttmake_file=\"${tmake_file} i386/t-netware\"\n-\textra_objs=netware.o\n-\textra_options=\"${extra_options} i386/netware.opt\"\n-\tcase /${with_ld} in\n-\t*/nwld)\n-\t\textra_objs=\"$extra_objs nwld.o\"\n-\t\ttm_file=\"${tm_file} i386/nwld.h\"\n-\t \ttmake_file=\"${tmake_file} i386/t-nwld t-slibgcc-dummy\"\n-\t\t;;\n-\tesac\n-\tcase x${enable_threads} in\n-\tx | xyes | xposix) thread_file='posix';;\n-\txnks) thread_file='nks';;\n-\txno) ;;\n-\t*) echo 'Unknown thread configuration for NetWare' >&2; exit 1;;\n-\tesac\n-\t;;\n i[34567]86-*-nto-qnx*)\n \ttm_file=\"${tm_file} i386/att.h dbxelf.h tm-dwarf2.h elfos.h i386/unix.h i386/nto.h\"\n \textra_options=\"${extra_options} i386/nto.opt\""}, {"sha": "3187f856609eeda85dd799d6f346e4ac477666b1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -31431,8 +31431,7 @@ ix86_md_asm_clobbers (tree outputs ATTRIBUTE_UNUSED,\n   return clobbers;\n }\n \n-/* Implements target vector targetm.asm.encode_section_info.  This\n-   is not used by netware.  */\n+/* Implements target vector targetm.asm.encode_section_info.  */\n \n static void ATTRIBUTE_UNUSED\n ix86_encode_section_info (tree decl, rtx rtl, int first)"}, {"sha": "4c7df9d1b1d71a4e80f6bdc94e33fd4be325ee04", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1131,7 +1131,6 @@ enum target_cpu_default\n /* This is overridden by <cygwin.h>.  */\n #define MS_AGGREGATE_RETURN 0\n \n-/* This is overridden by <netware.h>.  */\n #define KEEP_AGGREGATE_RETURN_POINTER 0\n \f\n /* Define the classes of registers for register constraints in the"}, {"sha": "0925d872aa57651e8a7f27fc9041b256335a3109", "filename": "gcc/config/i386/netware-libgcc.c", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.c?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,58 +0,0 @@\n-/* Startup code for libgcc_s.nlm, necessary because we can't allow\n-   libgcc_s to use libc's malloc & Co., which associate allocations\n-   with the NLM owning the current (application) thread.\n-   Contributed by Jan Beulich (jbeulich@novell.com)\n-   Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include <netware.h>\n-#include <stddef.h>\n-#include <stdlib.h>\n-#include <windows.h>\n-\n-static rtag_t allocRTag;\n-\n-BOOL\n-DllMain (HINSTANCE libraryId __attribute__ ((__unused__)),\n-\t DWORD reason, void *hModule)\n-{\n-  switch (reason)\n-    {\n-    case DLL_NLM_STARTUP:\n-      allocRTag = AllocateResourceTag (hModule,\n-\t\t\t\t       \"libgcc memory\", AllocSignature);\n-      return allocRTag != NULL;\n-    case DLL_NLM_SHUTDOWN:\n-      /* This does not recover resources associated with the tag...\n-         ReturnResourceTag (allocRTag, 0); */\n-      break;\n-    }\n-  return 1;\n-}\n-\n-void *\n-malloc (size_t size)\n-{\n-  return AllocSleepOK (size, allocRTag, NULL);\n-}\n-\n-void\n-free (void *ptr)\n-{\n-  Free (ptr);\n-}"}, {"sha": "a545631b111474b0e394edfba30b51be1f80d441", "filename": "gcc/config/i386/netware-libgcc.def", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.def?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,2 +0,0 @@\n-description \"gcc runtime and intrinsics support\"\n-copyright \"Copyright (C) 1989-2005  Free Software Foundation, Inc.\""}, {"sha": "309cf754943c12feab31262a43c53f0c66cff1bd", "filename": "gcc/config/i386/netware-libgcc.exp", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware-libgcc.exp?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,83 +0,0 @@\n-# libgcc_s.nlm exports\n-\t(libgcc2),\n-\t__absvdi2,\n-\t__absvsi2,\n-\t__addvdi3,\n-\t__addvsi3,\n-#\t__ashldi3,\n-#\t__ashrdi3,\n-\t__bswapdi2,\n-\t__bswapsi2,\n-\t__clzdi2,\n-\t__clzsi2,\n-\t__ctzdi2,\n-\t__ctzsi2,\n-\t__deregister_frame,\n-\t__deregister_frame_info,\n-\t__deregister_frame_info_bases,\n-\t__divdc3,\n-#\t__divdi3,\n-\t__divsc3,\n-#\t__divtc3,\n-\t__divxc3,\n-\t__emutls_get_address,\n-\t__emutls_register_common,\n-\t__ffsdi2,\n-\t__ffssi2,\n-\t__fixunsdfdi,\n-\t__fixunssfdi,\n-#\t__fixunstfdi,\n-\t__fixunsxfdi,\n-\t__floatundisf,\n-\t__floatundidf,\n-#\t__floatunditf,\n-\t__floatundixf,\n-\t__gcc_bcmp,\n-\t__gcc_personality_v0,\n-#\t__lshrdi3,\n-#\t__moddi3,\n-\t__muldc3,\n-#\t__muldi3,\n-\t__mulsc3,\n-#\t__multc3,\n-\t__mulvdi3,\n-\t__mulvsi3,\n-\t__mulxc3,\n-\t__negvdi2,\n-\t__negvsi2,\n-\t__paritydi2,\n-\t__paritysi2,\n-\t__popcountdi2,\n-\t__popcountsi2,\n-\t__powidf2\n-\t__powisf2\n-#\t__powitf2\n-\t__powixf2\n-\t__register_frame,\n-\t__register_frame_info,\n-\t__register_frame_info_bases,\n-\t__register_frame_info_table,\n-\t__register_frame_info_table_bases,\n-\t__register_frame_table,\n-\t__subvdi3,\n-\t__subvsi3,\n-#\t__umoddi3,\n-#\t__udivdi3,\n-\t_Unwind_Backtrace,\n-\t_Unwind_DeleteException,\n-\t_Unwind_FindEnclosingFunction,\n-\t_Unwind_Find_FDE,\n-\t_Unwind_ForcedUnwind,\n-\t_Unwind_GetCFA,\n-\t_Unwind_GetDataRelBase,\n-\t_Unwind_GetGR,\n-\t_Unwind_GetIP,\n-\t_Unwind_GetIPInfo,\n-\t_Unwind_GetLanguageSpecificData,\n-\t_Unwind_GetRegionStart,\n-\t_Unwind_GetTextRelBase,\n-\t_Unwind_RaiseException,\n-\t_Unwind_Resume,\n-\t_Unwind_Resume_or_Rethrow,\n-\t_Unwind_SetGR,\n-\t_Unwind_SetIP"}, {"sha": "5a0f9d5de74854c3d624a4b6b274dee7e209fea1", "filename": "gcc/config/i386/netware.c", "status": "removed", "additions": 0, "deletions": 237, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.c?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,237 +0,0 @@\n-/* Subroutines for insn-output.c for NetWare.\n-   Contributed by Jan Beulich (jbeulich@novell.com)\n-   Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"rtl.h\"\n-#include \"regs.h\"\n-#include \"hard-reg-set.h\"\n-#include \"output.h\"\n-#include \"tree.h\"\n-#include \"flags.h\"\n-#include \"tm_p.h\"\n-#include \"diagnostic-core.h\"\n-#include \"langhooks.h\"\n-#include \"ggc.h\"\n-\n-/* Return string which is the function name, identified by ID, modified\n-   with PREFIX and a suffix consisting of an atsign (@) followed by the\n-   number of bytes of arguments.  If ID is NULL use the DECL_NAME as base.\n-   Return NULL if no change required.  */\n-\n-static tree\n-gen_stdcall_or_fastcall_decoration (tree decl, tree id, char prefix)\n-{\n-  unsigned HOST_WIDE_INT total = 0;\n-  const char *old_str = IDENTIFIER_POINTER (id != NULL_TREE ? id : DECL_NAME (decl));\n-  char *new_str;\n-  tree type = TREE_TYPE (decl);\n-\n-  if (prototype_p (type))\n-    {\n-      tree arg;\n-      function_args_iterator args_iter;\n-\n-      /* This attribute is ignored for variadic functions.  */ \n-      if (stdarg_p (type))\n-\treturn NULL_TREE;\n-\n-      /* Quit if we hit an incomplete type.  Error is reported\n-\t by convert_arguments in c-typeck.c or cp/typeck.c.  */\n-      FOREACH_FUNCTION_ARGS(type, arg, args_iter)\n-\t{\n-\t  HOST_WIDE_INT parm_size;\n-\t  unsigned HOST_WIDE_INT parm_boundary_bytes;\n-\n-\t  if (! COMPLETE_TYPE_P (arg))\n-\t    break;\n-\n-\t  parm_size = int_size_in_bytes (arg);\n-\t  if (parm_size < 0)\n-\t    break;\n-\n-\t  parm_boundary_bytes = PARM_BOUNDARY / BITS_PER_UNIT;\n-\n-\t  /* Must round up to include padding.  This is done the same\n-\t     way as in store_one_arg.  */\n-\t  total += (parm_size + parm_boundary_bytes - 1)\n-\t\t   / parm_boundary_bytes * parm_boundary_bytes;\n-\t}\n-    }\n-\n-  new_str = XALLOCAVEC (char, 1 + strlen (old_str) + 1 + 10 + 1);\n-  sprintf (new_str, \"%c%s@\" HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t   prefix, old_str, total);\n-\n-  return get_identifier (new_str);\n-}\n-\n-/* Return string which is the function name, identified by ID, modified\n-   with an _n@ prefix (where n represents the number of arguments passed in\n-   registers).  If ID is NULL use the DECL_NAME as base.\n-   Return NULL if no change required.  */\n-\n-static tree\n-gen_regparm_prefix (tree decl, tree id, unsigned int nregs)\n-{\n-  unsigned HOST_WIDE_INT total = 0;\n-  const char *old_str = IDENTIFIER_POINTER (id != NULL_TREE ? id : DECL_NAME (decl));\n-  char *new_str;\n-  tree type = TREE_TYPE (decl);\n-\n-  if (prototype_p (type))\n-    {\n-      tree arg;\n-      function_args_iterator args_iter;\n-\n-      /* This attribute is ignored for variadic functions.  */ \n-      if (stdarg_p (type))\n-\treturn NULL_TREE;\n-\n-      /* Quit if we hit an incomplete type.  Error is reported\n-\t by convert_arguments in c-typeck.c or cp/typeck.c.  */\n-      FOREACH_FUNCTION_ARGS(type, arg, args_iter)\n-\t{\n-\t  HOST_WIDE_INT parm_size;\n-\t  unsigned HOST_WIDE_INT parm_boundary_bytes;\n-\n-\t  if (! COMPLETE_TYPE_P (arg))\n-\t    break;\n-\n-\t  parm_size = int_size_in_bytes (arg);\n-\t  if (parm_size < 0)\n-\t    break;\n-\n-\t  parm_boundary_bytes = PARM_BOUNDARY / BITS_PER_UNIT;\n-\n-\t  /* Must round up to include padding.  This is done the same\n-\t     way as in store_one_arg.  */\n-\t  total += (parm_size + parm_boundary_bytes - 1)\n-\t\t   / parm_boundary_bytes * parm_boundary_bytes;\n-\t}\n-    }\n-\n-  if (nregs > total / UNITS_PER_WORD)\n-    nregs = total / UNITS_PER_WORD;\n-  gcc_assert (nregs <= 9);\n-  new_str = XALLOCAVEC (char, 3 + strlen (old_str) + 1);\n-  sprintf (new_str, \"_%u@%s\", nregs, old_str);\n-\n-  return get_identifier (new_str);\n-}\n-\n-/* Maybe decorate and get a new identifier for the DECL of a stdcall or\n-   fastcall function. The original identifier is supplied in ID. */\n-\n-static tree\n-i386_nlm_maybe_mangle_decl_assembler_name (tree decl, tree id)\n-{\n-  tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-  tree new_id;\n-  unsigned int ccvt = ix86_get_callcvt (TREE_TYPE (decl));\n-\n-  if ((ccvt & IX86_CALLCVT_STDCALL) != 0)\n-    {\n-      if (TARGET_RTD)\n-\t/* If we are using -mrtd emit undecorated symbol and let linker\n-\t   do the proper resolving.  */\n-\treturn NULL_TREE;\n-      new_id = gen_stdcall_or_fastcall_decoration (decl, id, '_');\n-    }\n-  else if ((ccvt & IX86_CALLCVT_FASTCALL) != 0)\n-    new_id = gen_stdcall_or_fastcall_decoration (decl, id, FASTCALL_PREFIX);\n-  else if ((ccvt & IX86_CALLCVT_REGPARM) != 0\n-\t   && (new_id = lookup_attribute (\"regparm\", type_attributes)))\n-    new_id = gen_regparm_prefix (decl, id,\n-\t\t  TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (new_id))));\n-  else\n-    new_id = NULL_TREE;\n-\n-  return new_id;\n-}\n-\n-/* This is used as a target hook to modify the DECL_ASSEMBLER_NAME\n-   in the language-independent default hook\n-   langhooks.c:lhd_set_decl_assembler_name ()\n-   and in cp/mangle.c:mangle_decl ().  */\n-tree\n-i386_nlm_mangle_decl_assembler_name (tree decl, tree id)\n-{\n-  tree new_id = TREE_CODE (decl) == FUNCTION_DECL\n-\t\t? i386_nlm_maybe_mangle_decl_assembler_name (decl, id)\n-\t\t: NULL_TREE;\n-\n-  return (new_id ? new_id : id);\n-}\n-\n-void\n-i386_nlm_encode_section_info (tree decl, rtx rtl, int first)\n-{\n-  default_encode_section_info (decl, rtl, first);\n-\n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      /* Do not change the identifier if a verbatim asmspec\n-\t or if stdcall suffix already added.  */\n-      && *IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)) != '*'\n-      && !strchr (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), '@')\n-      /* FIXME:  Imported stdcall names are not modified by the Ada frontend.\n-\t Check and decorate the RTL name now.  */\n-      && strcmp (lang_hooks.name, \"GNU Ada\") == 0)\n-    {\n-      rtx symbol = XEXP (rtl, 0);\n-      tree new_id;\n-      tree old_id = DECL_ASSEMBLER_NAME (decl);\n-\n-      gcc_assert (GET_CODE (symbol) == SYMBOL_REF);\n-\n-      if ((new_id = i386_nlm_maybe_mangle_decl_assembler_name (decl, old_id)))\n-\tXSTR (symbol, 0) = IDENTIFIER_POINTER (new_id);\n-    }\n-}\n-\n-/* Strip the stdcall/fastcall/regparm pre-/suffix.  */\n-\n-const char *\n-i386_nlm_strip_name_encoding (const char *str)\n-{\n-  const char *name = default_strip_name_encoding (str);\n-\n-  if (*str != '*' && (*name == '_' || *name == '@'))\n-    {\n-      const char *p = strchr (name + 1, '@');\n-\n-      if (p)\n-\t{\n-\t  ++name;\n-\t  if (ISDIGIT (p[1]))\n-\t    name = ggc_alloc_string (name, p - name);\n-\t  else\n-\t    {\n-\t      gcc_assert (ISDIGIT (*name));\n-\t      name++;\n-\t      gcc_assert (name == p);\n-\t    }\n-\t}\n-    }\n-  return name;\n-}"}, {"sha": "f377fb5dc94efc22baeb9e8b01c1356b246afb29", "filename": "gcc/config/i386/netware.h", "status": "removed", "additions": 0, "deletions": 175, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.h?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,175 +0,0 @@\n-/* Core target definitions for GCC for Intel 80x86 running Netware.\n-   and using dwarf for the debugging format.\n-   Copyright (C) 1993, 1994, 2004, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n-\n-   Written by David V. Henkel-Wallace (gumby@cygnus.com)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#undef  CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-\n-#undef  ASM_SPEC\n-#define ASM_SPEC \"\"\n-\n-#undef\tLIB_SPEC\n-#define LIB_SPEC \"\"\n-\n-/* Kinda useless, but what the hell */\n-#undef\tLINK_SPEC\n-#define LINK_SPEC \"%{h*} %{v:-V}\"\n-\n-#undef\tSTARTFILE_SPEC\n-#define STARTFILE_SPEC \"\"\n-\n-#undef\tENDFILE_SPEC\n-#define ENDFILE_SPEC \"\"\n-\n-#undef\tRELATIVE_PREFIX_NOT_LINKDIR\n-#undef\tLIBGCC_SPEC\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"IAPX386\");\t\t\t\t\t\\\n-\tbuiltin_define (\"_M_IX86=300\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__netware__\");\t\t\t\t\t\\\n-\tbuiltin_assert (\"system=netware\");\t\t\t\t\\\n-\tbuiltin_define (\"__ELF__\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n-\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n-\tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n-\tif (!flag_iso)\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n-\t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n-\t    builtin_define (\"_fastcall=__attribute__((__fastcall__))\");\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef TARGET_CPU_DEFAULT\n-#define TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT_pentium4\n-\n-/* By default, target has a 80387, uses IEEE compatible arithmetic,\n-   returns float values in the 387, and uses MSVC bit field layout. */\n-#undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | \\\n-\tMASK_FLOAT_RETURNS | MASK_ALIGN_DOUBLE | MASK_MS_BITFIELD_LAYOUT)\n-\n-/* Don't allow flag_pic to propagate since invalid relocations will\n-   result otherwise.  */\n-#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      error (\"-fPIC and -fpic are not supported for this target\");\t\\\n-      flag_pic = 0;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-#undef MATH_LIBRARY\n-#define MATH_LIBRARY \"\"\n-\n-/* Align doubles and long-longs in structures on qword boundaries.  */\n-#undef BIGGEST_FIELD_ALIGNMENT\n-#define BIGGEST_FIELD_ALIGNMENT 64\n-\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-/* Implicit arguments pointing to aggregate return values are to be\n-   removed by the caller.  */\n-#undef KEEP_AGGREGATE_RETURN_POINTER\n-#define KEEP_AGGREGATE_RETURN_POINTER 1\n-\n-#undef ASM_COMMENT_START\n-#define ASM_COMMENT_START \"#\"\n-\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) (svr4_dbx_register_map[n])\n-\n-/* Default structure packing is 1-byte. */\n-#define TARGET_DEFAULT_PACK_STRUCT 1\n-\n-#undef  SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n-\n-#undef  PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\"\n-\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"short unsigned int\"\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE 16\n-\n-#undef WINT_TYPE\n-#define WINT_TYPE \"int\"\n-\n-/* A C statement (sans semicolon) to output to the stdio stream\n-   FILE the assembler definition of uninitialized global DECL named\n-   NAME whose size is SIZE bytes and alignment is ALIGN bytes.\n-   Try to use asm_output_aligned_bss to implement this macro.  */\n-\n-#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n-  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n-\n-/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n-   indirect are handled automatically.  */\n-#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        fputs (ASM_LONG, FILE);\t\t\t\\\n-        assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n-\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), FILE); \\\n-        goto DONE;\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* there is no TLS support in NLMs/on NetWare */\n-#undef HAVE_AS_TLS\n-\n-#define HAS_INIT_SECTION\n-#undef  INIT_SECTION_ASM_OP\n-\n-#define CTOR_LISTS_DEFINED_EXTERNALLY\n-\n-#undef  READONLY_DATA_SECTION_ASM_OP\n-#define READONLY_DATA_SECTION_ASM_OP    \".section\\t.rodata\"\n-\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   On i386 running NetWare, modify the assembler name with an underscore (_)\n-   or atsign (@) prefix and a suffix consisting of an atsign (@) followed by\n-   a string of digits that represents the number of bytes of arguments passed\n-   to the function, if it has the attribute STDCALL. Alternatively, if it has\n-   the REGPARM attribute, prefix it with an underscore (_), a digit\n-   representing the number of registers used, and an atsign (@). */\n-void i386_nlm_encode_section_info (tree, rtx, int);\n-extern tree i386_nlm_mangle_decl_assembler_name (tree, tree);\n-const char *i386_nlm_strip_name_encoding (const char *);\n-#define SUBTARGET_ENCODE_SECTION_INFO  i386_nlm_encode_section_info\n-#define TARGET_MANGLE_DECL_ASSEMBLER_NAME i386_nlm_mangle_decl_assembler_name\n-#undef  TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING  i386_nlm_strip_name_encoding\n-\n-#define TARGET_POSIX_IO"}, {"sha": "e1d903a2f7f92bef114345af532a4a31b027e57f", "filename": "gcc/config/i386/netware.opt", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnetware.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.opt?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,33 +0,0 @@\n-; Netware options.\n-\n-; Copyright (C) 2011\n-; Free Software Foundation, Inc.\n-;\n-; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-;\n-; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; for more details.\n-;\n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n-; <http://www.gnu.org/licenses/>.\n-\n-; See the GCC internals manual (options.texi) for a description of\n-; this file's format.\n-\n-; Please try to keep this file in ASCII collating order.\n-\n-posix\n-Driver\n-\n-pthread\n-Driver\n-\n-; This comment is to ensure we retain the blank line above."}, {"sha": "05d1a92d1d7b521f18775a924c2114ce93a8d378", "filename": "gcc/config/i386/nwld.c", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnwld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnwld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnwld.c?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,73 +0,0 @@\n-/* Subroutines for insn-output.c for NetWare.\n-   Contributed by Jan Beulich (jbeulich@novell.com)\n-   Copyright (C) 2004, 2007, 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"rtl.h\"\n-#include \"regs.h\"\n-#include \"hard-reg-set.h\"\n-#include \"output.h\"\n-#include \"tree.h\"\n-#include \"flags.h\"\n-#include \"tm_p.h\"\n-#include \"diagnostic-core.h\"\n-\n-void\n-nwld_named_section_asm_out_constructor (rtx symbol, int priority)\n-{\n-#if !SUPPORTS_INIT_PRIORITY\n-  const char section[] = \".ctors\"TARGET_SUB_SECTION_SEPARATOR;\n-#else\n-  char section[20];\n-\n-  sprintf (section,\n-\t   \".ctors\"TARGET_SUB_SECTION_SEPARATOR\"%.5u\",\n-\t   /* Invert the numbering so the linker puts us in the proper\n-\t      order; constructors are run from right to left, and the\n-\t      linker sorts in increasing order.  */\n-\t   MAX_INIT_PRIORITY - priority);\n-#endif\n-\n-  switch_to_section (get_section (section, 0, NULL));\n-  assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n-}\n-\n-void\n-nwld_named_section_asm_out_destructor (rtx symbol, int priority)\n-{\n-#if !SUPPORTS_INIT_PRIORITY\n-  const char section[] = \".dtors\"TARGET_SUB_SECTION_SEPARATOR;\n-#else\n-  char section[20];\n-\n-  sprintf (section, \".dtors\"TARGET_SUB_SECTION_SEPARATOR\"%.5u\",\n-\t   /* Invert the numbering so the linker puts us in the proper\n-\t      order; destructors are run from left to right, and the\n-\t      linker sorts in increasing order.  */\n-\t   MAX_INIT_PRIORITY - priority);\n-#endif\n-\n-  switch_to_section (get_section (section, 0, NULL));\n-  assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n-}"}, {"sha": "6d8e54ff990a5b8fd3e3409a93f42a3786b21f7a", "filename": "gcc/config/i386/nwld.h", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnwld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Fnwld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnwld.h?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,69 +0,0 @@\n-/* nwld.h -- defines to be used when targeting GCC for some generic NetWare\n-   system while using the Novell linker.\n-   Copyright (C) 2004, 2007, 2010, 2011 Free Software Foundation, Inc.\n-\n-   Written by Jan Beulich (jbeulich@novell.com)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#undef\tLIB_SPEC\n-#define LIB_SPEC \"-lc --def-file libc.def%s\"\n-\n-#undef\tLIBGCC_SPEC\n-#define LIBGCC_SPEC \"-lgcc %{!static-libgcc:--def-file libgcc.def%s}\"\n-\n-#undef  LINKER_NAME\n-#define LINKER_NAME \"nwld\"\n-\n-#undef  LINK_SPEC\n-#define LINK_SPEC \"--format:NLM --extensions:GNU\" \\\n-\t\" %{static:%{!nostdlib:%{!nodefaultlibs:%estatic linking is not supported\\n}}}\"\n-\n-#undef  LINK_GCC_C_SEQUENCE_SPEC\n-#define LINK_GCC_C_SEQUENCE_SPEC \"%L %G\"\n-\n-/* In order to permit the linker to derive the output filename from the first\n-   input file, put the common startup code as the last object. */\n-#undef\tSTARTFILE_SPEC\n-#define STARTFILE_SPEC \"\"\n-\n-#undef\tENDFILE_SPEC\n-#define ENDFILE_SPEC \"crt0%O%s ../imports/%{!posix:libc}%{posix:posix}pre.gcc%O%s\" \\\n-\t\" --def-file %{!posix:libc}%{posix:posix}pre.def%s\"\n-\n-#define DRIVER_SELF_SPECS \"%{!static-libgcc:-shared-libgcc}\"\n-\n-#define TARGET_SUB_SECTION_SEPARATOR \"$\"\n-\n-void nwld_named_section_asm_out_constructor (rtx, int);\n-void nwld_named_section_asm_out_destructor (rtx, int);\n-\n-#define TARGET_ASM_CONSTRUCTOR nwld_named_section_asm_out_constructor\n-#define TARGET_ASM_DESTRUCTOR  nwld_named_section_asm_out_destructor\n-\n-#define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  /* XXX This can be enabled once gas output meets nwld's needs. */\t\\\n-  /* if (!flag_unwind_tables && !flag_exceptions) */\t\t\t\\\n-    flag_dwarf2_cfi_asm = 0;\t\t\t\t\t\t\\\n-} while (0)\n-\n-#undef  EH_FRAME_SECTION_NAME\n-#define EH_FRAME_SECTION_NAME \".eh_frame\"TARGET_SUB_SECTION_SEPARATOR\n-\n-/* nwld does not currently support stabs debug info */\n-#undef DBX_DEBUGGING_INFO"}, {"sha": "405c98f6a8d25c75ae5d3714cdb678142ef83406", "filename": "gcc/config/i386/t-netware", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Ft-netware", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Ft-netware", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-netware?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,10 +0,0 @@\n-TARGET_LIBGCC2_CFLAGS = -mpreferred-stack-boundary=2 -fomit-frame-pointer\n-\n-netware.o: $(srcdir)/config/i386/netware.c $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_P_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/i386/netware.c\n-\n-# We don't need some of GCC's own include files.\n-USER_H = $(srcdir)/ginclude/stdarg.h \\\n-         $(srcdir)/ginclude/varargs.h \\\n-    $(EXTRA_HEADERS) $(LANG_EXTRA_HEADERS)"}, {"sha": "ecd1a3bfccc8000558ae2e755bbb8869e250b37a", "filename": "gcc/config/i386/t-nwld", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Ft-nwld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fconfig%2Fi386%2Ft-nwld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-nwld?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,22 +0,0 @@\n-# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2011\n-# Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-nwld.o: $(srcdir)/config/i386/nwld.c $(RTL_H) $(TREE_H) $(CONFIG_H) $(TM_P_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/i386/nwld.c"}, {"sha": "0295fc67dfe3fd732c4c37085c5b6753c79323e6", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -10899,7 +10899,7 @@ case ${enable_threads} in\n     # default\n     target_thread_file='single'\n     ;;\n-  aix | dce | lynx | mipssde | nks | posix | posix95 | rtems | \\\n+  aix | dce | lynx | mipssde | posix | posix95 | rtems | \\\n   single | tpf | vxworks | win32)\n     target_thread_file=${enable_threads}\n     ;;"}, {"sha": "54b6c9d88cd3a838cdf7e24bc5d221573f80eb81", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1340,7 +1340,7 @@ case ${enable_threads} in\n     # default\n     target_thread_file='single'\n     ;;\n-  aix | dce | lynx | mipssde | nks | posix | posix95 | rtems | \\\n+  aix | dce | lynx | mipssde | posix | posix95 | rtems | \\\n   single | tpf | vxworks | win32)\n     target_thread_file=${enable_threads}\n     ;;"}, {"sha": "dcbf29f7870d95f835b233ceaa1168c624cf5122", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -2836,11 +2836,8 @@ On 32-bit i?86-*-* targets, you can control by those attribute for\n aggregate return in memory, if the caller is responsible to pop the hidden\n pointer together with the rest of the arguments - @var{number} equal to\n zero -, or if the callee is responsible to pop hidden pointer - @var{number}\n-equal to one.\n-\n-For i?86-netware, the caller pops the stack for the hidden arguments pointing\n-to aggregate return value.  This differs from the default i386 ABI which assumes\n-that the callee pops the stack for hidden pointer.\n+equal to one.  The default i386 ABI assumes that the callee pops the\n+stack for hidden pointer.\n \n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute"}, {"sha": "9918c4f5b0f8cdbb25f6c816ee0df57b2501be02", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1141,8 +1141,6 @@ DCE thread support.\n LynxOS thread support.\n @item mipssde\n MIPS SDE thread support.\n-@item nks\n-Novell Kernel Services thread support.\n @item no\n This is an alias for @samp{single}.\n @item posix"}, {"sha": "311c6904b1ae8915b8108cd36348bf165db78479", "filename": "gcc/gthr-nks.h", "status": "removed", "additions": 0, "deletions": 397, "changes": 397, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fgthr-nks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/gcc%2Fgthr-nks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-nks.h?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,397 +0,0 @@\n-/* Threads compatibility routines for libgcc2 and libobjc.  */\n-/* Compile this one with gcc.  */\n-/* Copyright (C) 2002, 2003, 2004, 2008, 2009 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef GCC_GTHR_NKS_H\n-#define GCC_GTHR_NKS_H\n-\n-/* NKS threads specific definitions.\n-   Easy, since the interface is mostly one-to-one mapping.  */\n-\n-#define __GTHREADS 1\n-\n-#define NKS_NO_INLINE_FUNCS\n-#include <nksapi.h>\n-#include <string.h>\n-\n-typedef NXKey_t __gthread_key_t;\n-typedef NXMutex_t *__gthread_mutex_t;\n-typedef NXMutex_t *__gthread_recursive_mutex_t;\n-\n-#define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function\n-#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function\n-\n-static inline int\n-__gthread_active_p (void)\n-{\n-  return 1;\n-}\n-\n-#ifdef _LIBOBJC\n-\n-/* This is the config.h file in libobjc/ */\n-#include <config.h>\n-\n-#ifdef HAVE_SCHED_H\n-# include <sched.h>\n-#endif\n-\n-/* Key structure for maintaining thread specific storage */\n-static NXKey_t _objc_thread_storage;\n-\n-/* Backend initialization functions */\n-\n-/* Initialize the threads subsystem.  */\n-static inline int\n-__gthread_objc_init_thread_system (void)\n-{\n-  /* Initialize the thread storage key.  */\n-  if (NXKeyCreate (NULL, NULL, &_objc_thread_storage) == 0)\n-    return 0;\n-  return -1;\n-}\n-\n-/* Close the threads subsystem.  */\n-static inline int\n-__gthread_objc_close_thread_system (void)\n-{\n-  if (NXKeyDelete (_objc_thread_storage) == 0)\n-    return 0;\n-  return -1;\n-}\n-\n-/* Backend thread functions */\n-\n-/* Create a new thread of execution.  */\n-static inline objc_thread_t\n-__gthread_objc_thread_detach (void (*func)(void *), void *arg)\n-{\n-  objc_thread_t thread_id;\n-  NXContext_t context;\n-  NXThreadId_t new_thread_handle;\n-  int err;\n-\n-  if ((context = NXContextAlloc (func, arg, NX_PRIO_MED, 0, 0, 0, &err)) == NULL)\n-    thread_id = NULL;\n-  else if (NXThreadCreate (context, NX_THR_DETACHED, &new_thread_handle) == 0)\n-    thread_id = (objc_thread_t) new_thread_handle;\n-  else {\n-    NXContextFree (context);\n-    thread_id = NULL;\n-  }\n-\n-  return thread_id;\n-}\n-\n-/* Set the current thread's priority.  */\n-static inline int\n-__gthread_objc_thread_set_priority (int priority)\n-{\n-  if (NXThreadSetPriority (NXThreadGetId (), priority) == 0)\n-    return 0;\n-  return -1;\n-}\n-\n-/* Return the current thread's priority.  */\n-static inline int\n-__gthread_objc_thread_get_priority (void)\n-{\n-  int priority;\n-\n-  if (NXThreadGetPriority (NXThreadGetId (), &priority) == 0)\n-    return priority;\n-  return -1;\n-}\n-\n-/* Yield our process time to another thread.  */\n-static inline void\n-__gthread_objc_thread_yield (void)\n-{\n-  NXThreadYield ();\n-}\n-\n-/* Terminate the current thread.  */\n-static inline int\n-__gthread_objc_thread_exit (void)\n-{\n-  /* exit the thread */\n-  NXThreadExit (&__objc_thread_exit_status);\n-\n-  /* Failed if we reached here */\n-  return -1;\n-}\n-\n-/* Returns an integer value which uniquely describes a thread.  */\n-static inline objc_thread_t\n-__gthread_objc_thread_id (void)\n-{\n-  (objc_thread_t) NXThreadGetId ();\n-}\n-\n-/* Sets the thread's local storage pointer.  */\n-static inline int\n-__gthread_objc_thread_set_data (void *value)\n-{\n-  return NXKeySetValue (_objc_thread_storage, value);\n-}\n-\n-/* Returns the thread's local storage pointer.  */\n-static inline void *\n-__gthread_objc_thread_get_data (void)\n-{\n-  void *value;\n-\n-  if (NXKeyGetValue (_objc_thread_storage, &value) == 0)\n-    return value;\n-  return NULL;\n-}\n-\n-/* Backend mutex functions */\n-\n-/* Allocate a mutex.  */\n-static inline int\n-__gthread_objc_mutex_allocate (objc_mutex_t mutex)\n-{\n-  static const NX_LOCK_INFO_ALLOC (info, \"GNU ObjC\", 0);\n-\n-  if ((mutex->backend = NXMutexAlloc (0, 0, &info)) == NULL)\n-    return 0;\n-  return -1;\n-}\n-\n-/* Deallocate a mutex.  */\n-static inline int\n-__gthread_objc_mutex_deallocate (objc_mutex_t mutex)\n-{\n-  while (NXMutexIsOwned ((NXMutex_t *)mutex->backend))\n-    NXUnlock ((NXMutex_t *)mutex->backend);\n-  if (NXMutexFree ((NXMutex_t *)mutex->backend) != 0)\n-    return -1;\n-  mutex->backend = NULL;\n-  return 0;\n-}\n-\n-/* Grab a lock on a mutex.  */\n-static inline int\n-__gthread_objc_mutex_lock (objc_mutex_t mutex)\n-{\n-  return NXLock ((NXMutex_t *)mutex->backend);\n-}\n-\n-/* Try to grab a lock on a mutex.  */\n-static inline int\n-__gthread_objc_mutex_trylock (objc_mutex_t mutex)\n-{\n-  if (!NXTryLock ((NXMutex_t *)mutex->backend))\n-    return -1;\n-  return 0;\n-}\n-\n-/* Unlock the mutex */\n-static inline int\n-__gthread_objc_mutex_unlock (objc_mutex_t mutex)\n-{\n-  return NXUnlock ((NXMutex_t *)mutex->backend);\n-}\n-\n-/* Backend condition mutex functions */\n-\n-/* Allocate a condition.  */\n-static inline int\n-__gthread_objc_condition_allocate (objc_condition_t condition)\n-{\n-  condition->backend = NXCondAlloc (NULL);\n-  if (condition->backend == NULL)\n-    return -1;\n-\n-  return 0;\n-}\n-\n-/* Deallocate a condition.  */\n-static inline int\n-__gthread_objc_condition_deallocate (objc_condition_t condition)\n-{\n-   if (NXCondFree ((NXCond_t *)condition->backend) != 0)\n-     return -1;\n-   condition->backend = NULL;\n-   return 0;\n-}\n-\n-/* Wait on the condition */\n-static inline int\n-__gthread_objc_condition_wait (objc_condition_t condition, objc_mutex_t mutex)\n-{\n-  return NXCondWait ((NXCond_t *)condition->backend, (NXMutex_t *)mutex->backend);\n-}\n-\n-/* Wake up all threads waiting on this condition.  */\n-static inline int\n-__gthread_objc_condition_broadcast (objc_condition_t condition)\n-{\n-  return NXCondBroadcast ((NXCond_t *)condition->backend);\n-}\n-\n-/* Wake up one thread waiting on this condition.  */\n-static inline int\n-__gthread_objc_condition_signal (objc_condition_t condition)\n-{\n-  return NXCondSignal ((NXCond_t *)condition->backend);\n-}\n-\n-#else /* _LIBOBJC */\n-\n-#if defined(__cplusplus)\n-# include <bits/atomicity.h>\n-/* The remaining conditions here are temporary until there is\n-   an application accessible atomic operations API set... */\n-#elif defined(_M_IA64) || defined(__ia64__)\n-# include <../libstdc++-v3/config/cpu/ia64/bits/atomicity.h>\n-#elif defined(_M_IX86) || defined(__i486__)\n-# include <../libstdc++-v3/config/cpu/i486/bits/atomicity.h>\n-#elif defined(_M_AMD64) || defined(__x86_64__)\n-# include <../libstdc++-v3/config/cpu/x86-64/bits/atomicity.h>\n-#endif\n-\n-typedef volatile long __gthread_once_t;\n-\n-#define __GTHREAD_ONCE_INIT 0\n-\n-static inline int\n-__gthread_once (__gthread_once_t *__once, void (*__func) (void))\n-{\n-  if (__compare_and_swap (__once, 0, 1))\n-  {\n-    __func ();\n-    *__once |= 2;\n-  }\n-  else\n-  {\n-    while (!(*__once & 2))\n-      NXThreadYield ();\n-  }\n-  return 0;\n-}\n-\n-static inline int\n-__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))\n-{\n-  return NXKeyCreate (__dtor, NULL, __key);\n-}\n-\n-static inline int\n-__gthread_key_dtor (__gthread_key_t __key, void *__ptr)\n-{\n-  /* Just reset the key value to zero. */\n-  if (__ptr)\n-    return NXKeySetValue (__key, NULL);\n-  return 0;\n-}\n-\n-static inline int\n-__gthread_key_delete (__gthread_key_t __key)\n-{\n-  return NXKeyDelete (__key);\n-}\n-\n-static inline void *\n-__gthread_getspecific (__gthread_key_t __key)\n-{\n-  void *__value;\n-\n-  if (NXKeyGetValue (__key, &__value) == 0)\n-    return __value;\n-  return NULL;\n-}\n-\n-static inline int\n-__gthread_setspecific (__gthread_key_t __key, const void *__ptr)\n-{\n-  return NXKeySetValue (__key, (void *)__ptr);\n-}\n-\n-static inline void\n-__gthread_mutex_init_function (__gthread_mutex_t *__mutex)\n-{\n-  static const NX_LOCK_INFO_ALLOC (__info, \"GTHREADS\", 0);\n-\n-  *__mutex = NXMutexAlloc (0, 0, &__info);\n-}\n-\n-static inline int\n-__gthread_mutex_destroy (__gthread_mutex_t * UNUSED(__mutex))\n-{\n-  return 0;\n-}\n-\n-static inline int\n-__gthread_mutex_lock (__gthread_mutex_t *__mutex)\n-{\n-  return NXLock (*__mutex);\n-}\n-\n-static inline int\n-__gthread_mutex_trylock (__gthread_mutex_t *__mutex)\n-{\n-  if (NXTryLock (*__mutex))\n-    return 0;\n-  return -1;\n-}\n-\n-static inline int\n-__gthread_mutex_unlock (__gthread_mutex_t *__mutex)\n-{\n-  return NXUnlock (*__mutex);\n-}\n-\n-static inline void\n-__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)\n-{\n-  static const NX_LOCK_INFO_ALLOC (__info, \"GTHREADS\", 0);\n-\n-  *__mutex = NXMutexAlloc (NX_MUTEX_RECURSIVE, 0, &__info);\n-}\n-\n-static inline int\n-__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)\n-{\n-  return NXLock (*__mutex);\n-}\n-\n-static inline int\n-__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)\n-{\n-  if (NXTryLock (*__mutex))\n-    return 0;\n-  return -1;\n-}\n-\n-static inline int\n-__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)\n-{\n-  return NXUnlock (*__mutex);\n-}\n-\n-#endif /* _LIBOBJC */\n-\n-#endif /* not GCC_GTHR_NKS_H */"}, {"sha": "65125bd649410f78290ac3a7848551fa25ed9c40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,3 +1,29 @@\n+2011-07-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* g++.dg/ext/bitfield2.C: Remove i?86-*-netware support.\n+\t* g++.dg/ext/bitfield3.C: Likewise.\n+\t* g++.dg/ext/bitfield4.C: Likewise.\n+\t* g++.dg/ext/bitfield5.C: Likewise.\n+\t* g++.dg/other/PR23205.C: Remove *-*-netware* support.\n+\t* g++.dg/other/pr23205-2.C: Likewise.\n+\t* gcc.c-torture/compile/20001109-1.c: Remove dg-xfail-if.\n+\t* gcc.c-torture/compile/20001109-2.c: Likewise.\n+\t* gcc.dg/20040813-1.c: Remove *-*-netware* support.\n+\t* gcc.dg/bitfld-15.c: Remove i?86-*-netware support.\n+\t* gcc.dg/bitfld-16.c: Likewise.\n+\t* gcc.dg/bitfld-17.c: Likewise.\n+\t* gcc.dg/bitfld-18.c: Likewise.\n+\t* gcc.dg/builtins-config.h: Remove Netware support.\n+\t* gcc.dg/cdce1.c: Remove *-*-netware* support.  Update line number.\n+\t* gcc.dg/cdce2.c: Likewise.\n+\t* gcc.dg/cpp/assert4.c: Remove netware support.\n+\t* gcc.dg/debug/pr35154.c: Remove *-*-netware* support.\n+\t* gfortran.dg/debug/pr35154-stabs.f: Remove *-*-netware* support.\n+\n+\t* lib/target-supports.exp (check_visibility_available): Remove\n+\tNetWare support.\n+\t(check_profiling_available): Likewise.\n+\n 2011-07-18  Ira Rosen  <ira.rosen@linaro.org>\n \n \t* gcc.dg/vect/pr49038.c: Run only on targets that support mmap."}, {"sha": "09e0352f1d0ad99de7a368875d7177eae27e408e", "filename": "gcc/testsuite/g++.dg/ext/bitfield2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield2.C?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* Remove pedantic.  Allow the GCC extension to use char for bitfields.  */\n /* { dg-options \"\" } */\n-/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-netware i?86-*-mingw* x86_64-*-mingw* } } } */\n+/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t /* { dg-message \"note: offset of packed bit-field 't::b' has changed in GCC 4.4\" \"\" { target pcc_bitfield_type_matters } } */\n {"}, {"sha": "75d290f00e17bd52d0ff7bd0c9bf22cabd062d4b", "filename": "gcc/testsuite/g++.dg/ext/bitfield3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield3.C?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wno-packed-bitfield-compat\" } */\n-/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-netware i?86-*-mingw* x86_64-*-mingw* } } } */\n+/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t\n {"}, {"sha": "d707376e80456a76ec24afd9d81683d71090cfe5", "filename": "gcc/testsuite/g++.dg/ext/bitfield4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield4.C?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n-/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-netware i?86-*-mingw* x86_64-*-mingw* } } } */\n+/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t /* { dg-message \"note: offset of packed bit-field 't::b' has changed in GCC 4.4\" \"\" { target pcc_bitfield_type_matters } } */\n {"}, {"sha": "748669543c167ceb324fe4ff95c7541ed963ebc9", "filename": "gcc/testsuite/g++.dg/ext/bitfield5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield5.C?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wno-packed-bitfield-compat\" } */\n-/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-netware i?86-*-mingw* x86_64-*-mingw* } } } */\n+/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t\n {"}, {"sha": "338079fbd930ec89a462b6a5aaee640f5fce2e21", "filename": "gcc/testsuite/g++.dg/other/PR23205.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types\" } */\n \n const int foobar = 4;"}, {"sha": "a4333b386302d953aa1820382ca766b6a7918f6b", "filename": "gcc/testsuite/g++.dg/other/pr23205-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types -ftoplevel-reorder\" } */\n \n const int foobar = 4;"}, {"sha": "cce8047ae8a735e6c89475985f29c9dc1595402a", "filename": "gcc/testsuite/gcc.c-torture/compile/20001109-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001109-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001109-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001109-1.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,5 +1,3 @@\n-/* This does not work on NetWare, which has a default of 1-byte alignment.  */\n-/* { dg-xfail-if \"\" { \"*-*-netware*\" } { \"*\" } { \"\" } } */\n typedef struct _foo foo;\n extern foo bar;\n struct _foo {"}, {"sha": "a23e56bd34bd4505bfa6365cc8267e9d9609cb16", "filename": "gcc/testsuite/gcc.c-torture/compile/20001109-2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001109-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001109-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001109-2.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,5 +1,3 @@\n-/* This does not work on NetWare, which has a default of 1-byte alignment.  */\n-/* { dg-xfail-if \"\" { \"*-*-netware*\" } { \"*\" } { \"\" } } */\n extern struct foo bar;\n struct foo {\n   int a;"}, {"sha": "bf87f4172cf5fd218d368a8858d775987b4bee03", "filename": "gcc/testsuite/gcc.dg/20040813-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -2,7 +2,7 @@\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs\" } */\n \n int"}, {"sha": "32878d74dbc57929c7d6e32fb8937f0dac0bfe48", "filename": "gcc/testsuite/gcc.dg/bitfld-15.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-15.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* Remove pedantic.  Allow the GCC extension to use char for bitfields.  */\n /* { dg-options \"\" } */\n-/* { dg-options \"-mno-ms-bitfields\" { target i?86-*-netware } } */\n /* { dg-options \"-mno-ms-bitfields -Wno-packed-bitfield-compat\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t"}, {"sha": "75d290f00e17bd52d0ff7bd0c9bf22cabd062d4b", "filename": "gcc/testsuite/gcc.dg/bitfld-16.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-16.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wno-packed-bitfield-compat\" } */\n-/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target i?86-*-netware } } */\n /* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t"}, {"sha": "6dc6989df7b4b08197032511a0bbbe312c2cca61", "filename": "gcc/testsuite/gcc.dg/bitfld-17.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-17.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n-/* { dg-options \"-mno-ms-bitfields\" { target i?86-*-netware } } */\n /* { dg-options \"-mno-ms-bitfields -Wno-packed-bitfield-compat\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t"}, {"sha": "748669543c167ceb324fe4ff95c7541ed963ebc9", "filename": "gcc/testsuite/gcc.dg/bitfld-18.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbitfld-18.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wno-packed-bitfield-compat\" } */\n-/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target i?86-*-netware } } */\n /* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n \n struct t"}, {"sha": "fc1ade677a2b35d1fb9c49850aad2fdc696652fb", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -15,8 +15,6 @@\n /* AVR doesn't have the entire C99 runtime.  */\n #elif defined(__FreeBSD__) && (__FreeBSD__ < 9)\n /* FreeBSD up to version 8 lacks support for cexp and friends.  */\n-#elif defined(__netware__)\n-/* NetWare doesn't have the entire C99 runtime.  */\n #elif defined(__vxworks)\n /* VxWorks doesn't have a full C99 time.  (cabs is missing, for example.)  */\n #elif defined(_WIN32) && !defined(__CYGWIN__)"}, {"sha": "3bd35ecb78675bd810bddbe788181c6576e39da3", "filename": "gcc/testsuite/gcc.dg/cdce1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do  run  } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n-/* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details\" { target *-*-netware* } } */\n-/* { dg-final { scan-tree-dump  \"cdce1.c:17: note: function call is shrink-wrapped into error conditions\\.\"  \"cdce\" } } */\n+/* { dg-final { scan-tree-dump  \"cdce1.c:16: note: function call is shrink-wrapped into error conditions\\.\"  \"cdce\" } } */\n /* { dg-final { cleanup-tree-dump \"cdce\" } } */\n /* { dg-require-effective-target large_double } */\n "}, {"sha": "a461ce7ac3088e45e384f4cf6c636626ee3dff0c", "filename": "gcc/testsuite/gcc.dg/cdce2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce2.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do  run  } */\n /* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n-/* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details\" { target *-*-netware* } } */\n-/* { dg-final { scan-tree-dump  \"cdce2.c:17: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce2.c:16: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n /* { dg-final { cleanup-tree-dump \"cdce\" } } */\n  \n #include <stdlib.h>"}, {"sha": "a05ef13020653088ace9a78deae5b754bd410505", "filename": "gcc/testsuite/gcc.dg/cpp/assert4.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -128,14 +128,6 @@\n # error\n #endif\n \n-#if defined __netware__\n-# if !#system(netware)\n-#  error\n-# endif\n-#elif #system(netware)\n-# error\n-#endif\n-\n \n /* Check for #cpu and #machine assertions.  */\n "}, {"sha": "fa658be2cbecf2d3dfd11e4f8a369477f8199c95", "filename": "gcc/testsuite/gcc.dg/debug/pr35154.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr35154.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr35154.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr35154.c?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -23,7 +23,7 @@ main()\n    optb.f2 = 'D';\n    i_outer = 'e';\n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"stabs only\" { *-*-* } { \"*\" } { \"-gstabs\" } } */\n    return 0;\n }"}, {"sha": "4b518fe9e4d8054b24130f2493067137edc2ea7c", "filename": "gcc/testsuite/gfortran.dg/debug/pr35154-stabs.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-stabs.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-stabs.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-stabs.f?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,6 +1,6 @@\n C     Test program for common block debugging.  G. Helffrich 11 July 2004.\n C { dg-do compile }\n-C { dg-skip-if \"No stabs\" { mmix-*-* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } }\n+C { dg-skip-if \"No stabs\" { mmix-*-* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } }\n C { dg-skip-if \"No stabs\" {*-*-* } { \"*\" } { \"-gstabs\" } }\n       common i,j\n       common /label/l,m"}, {"sha": "2148f80d3785ac954c1422333a9d15e77a72fe00", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -290,11 +290,6 @@ proc check_weak_override_available { } {\n # The argument is the kind of visibility, default/protected/hidden/internal.\n \n proc check_visibility_available { what_kind } {\n-    # On NetWare, support makes no sense.\n-    if { [istarget *-*-netware*] } {\n-        return 0\n-    }\n-\n     if [string match \"\" $what_kind] { set what_kind \"hidden\" }\n \n     return [check_no_compiler_messages visibility_available_$what_kind object \"\n@@ -571,7 +566,6 @@ proc check_profiling_available { test_what } {\n \t     || [istarget tic6x-*-elf]\n \t     || [istarget xstormy16-*]\n \t     || [istarget xtensa*-*-elf]\n-\t     || [istarget *-*-netware*]\n \t     || [istarget *-*-rtems*]\n \t     || [istarget *-*-vxworks*] } {\n \t    set profiling_available_saved 0"}, {"sha": "8fab793254faffd57ddf5e13fcddbb5d86f40390", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,3 +1,9 @@\n+2011-07-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.host (i[3456x]86-*-netware*): Remove.\n+\t* config/i386/netware-crt0.c, config/i386/t-nwld,\n+\tconfig/i386/t-slibgcc-nwld: Remove.\n+\n 2011-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* config.host: Handle tic6x-*-*."}, {"sha": "11760d0bda429ac36403ed4a9d547b80b0c363e1", "filename": "libgcc/config.host", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -375,14 +375,6 @@ i[34567]86-pc-msdosdjgpp*)\n \t;;\n i[34567]86-*-lynxos*)\n \t;;\n-i[3456x]86-*-netware*)\n-\tcase /${with_ld} in\n-\t*/nwld)\n-\t \ttmake_file=\"${tmake_file} i386/t-nwld i386/t-slibgcc-nwld\"\n-\t\textra_parts=\"${extra_parts} crt0.o libgcc.def libc.def libcpre.def posixpre.def\"\n-\t\t;;\n-\tesac\n-\t;;\n i[34567]86-*-nto-qnx*)\n \t;;\n i[34567]86-*-rtems*)"}, {"sha": "03141ab9987980cb50fe539396d9ad299b069cdc", "filename": "libgcc/config/i386/netware-crt0.c", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/libgcc%2Fconfig%2Fi386%2Fnetware-crt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/libgcc%2Fconfig%2Fi386%2Fnetware-crt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fnetware-crt0.c?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,79 +0,0 @@\n-/* Startup routines for NetWare.\n-   Contributed by Jan Beulich (jbeulich@novell.com)\n-   Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include <stddef.h>\n-#include <stdint.h>\n-#include \"unwind-dw2-fde.h\"\n-\n-int __init_environment (void *);\n-int __deinit_environment (void *);\n-\n-\n-#define SECTION_DECL(name, decl) decl __attribute__((__section__(name)))\n-\n-SECTION_DECL(\".ctors\",   void(*const __CTOR_LIST__)(void))\n-  = (void(*)(void))(intptr_t)-1;\n-SECTION_DECL(\".ctors$_\", void(*const __CTOR_END__)(void)) = NULL;\n-\n-SECTION_DECL(\".dtors\",   void(*const __DTOR_LIST__)(void))\n-  = (void(*)(void))(intptr_t)-1;\n-SECTION_DECL(\".dtors$_\", void(*const __DTOR_END__)(void)) = NULL;\n-\n-/* No need to use the __[de]register_frame_info_bases functions since\n-   for us the bases are NULL always anyway. */\n-void __register_frame_info (const void *, struct object *)\n-  __attribute__((__weak__));\n-void *__deregister_frame_info (const void *) __attribute__((__weak__));\n-\n-SECTION_DECL(\".eh_frame\", /*const*/ uint32_t __EH_FRAME_BEGIN__[]) = { };\n-SECTION_DECL(\".eh_frame$_\", /*const*/ uint32_t __EH_FRAME_END__[]) = {0};\n-\n-int\n-__init_environment (void *unused __attribute__((__unused__)))\n-{\n-  void (* const * pctor)(void);\n-  static struct object object;\n-\n-  if (__register_frame_info)\n-    __register_frame_info (__EH_FRAME_BEGIN__, &object);\n-\n-  for (pctor = &__CTOR_END__ - 1; pctor > &__CTOR_LIST__; --pctor)\n-    if (*pctor != NULL)\n-      (*pctor)();\n-\n-  return 0;\n-}\n-\n-int\n-__deinit_environment (void *unused __attribute__((__unused__)))\n-{\n-  /* This should be static to prevent calling the same destructor\n-     twice (just in case where we get here multiple times).  */\n-  static void (* const * pdtor)(void) = &__DTOR_LIST__ + 1;\n-\n-  while (pdtor < &__DTOR_END__)\n-    if (*pdtor++ != NULL)\n-      pdtor[-1] ();\n-\n-  if (__deregister_frame_info)\n-    __deregister_frame_info(__EH_FRAME_BEGIN__);\n-\n-  return 0;\n-}"}, {"sha": "d08e2827f65aa197d6f039128ce2e84e15afcb85", "filename": "libgcc/config/i386/t-nwld", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/libgcc%2Fconfig%2Fi386%2Ft-nwld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/libgcc%2Fconfig%2Fi386%2Ft-nwld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-nwld?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,39 +0,0 @@\n-# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2011\n-# Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-crt0.o: $(srcdir)/config/i386/netware-crt0.c\n-\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $<\n-\n-CRTSTUFF_T_CFLAGS = -mpreferred-stack-boundary=2\n-\n-libgcc.def: $(srcdir)/config/i386/t-nwld\n-\techo \"module libgcc_s\" >$@\n-\n-libc.def: $(srcdir)/config/i386/t-nwld\n-\techo \"module libc\" >$@\n-\n-libcpre.def: $(srcdir)/config/i386/t-nwld\n-\techo \"start _LibCPrelude\" >$@\n-\techo \"exit _LibCPostlude\" >>$@\n-\techo \"check _LibCCheckUnload\" >>$@\n-\n-posixpre.def: $(srcdir)/config/i386/t-nwld\n-\techo \"start POSIX_Start\" >$@\n-\techo \"exit POSIX_Stop\" >>$@\n-\techo \"check POSIX_CheckUnload\" >>$@"}, {"sha": "408587273da6405956feb06eeffb5010043b0d0a", "filename": "libgcc/config/i386/t-slibgcc-nwld", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27e3f60a67506df855e792f0703409fbd593611/libgcc%2Fconfig%2Fi386%2Ft-slibgcc-nwld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27e3f60a67506df855e792f0703409fbd593611/libgcc%2Fconfig%2Fi386%2Ft-slibgcc-nwld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-slibgcc-nwld?ref=c27e3f60a67506df855e792f0703409fbd593611", "patch": "@@ -1,31 +0,0 @@\n-# Build a shared libgcc library for NetWare.\n-\n-SHLIB_EXT = .nlm\n-SHLIB_NAME = @shlib_base_name@.nlm\n-SHLIB_SLIBDIR_QUAL = @shlib_slibdir_qual@\n-SHLIB_DEF = $(gcc_srcdir)/config/i386/netware-libgcc.def\n-SHLIB_MAP = $(gcc_srcdir)/config/i386/netware-libgcc.exp\n-SHLIB_SRC = $(gcc_srcdir)/config/i386/netware-libgcc.c\n-\n-SHLIB_LINK = set -e; \\\n-\tcat $(SHLIB_DEF) >@shlib_base_name@.def; \\\n-\techo \"name $(SHLIB_NAME)\" >>@shlib_base_name@.def; \\\n-\techo \"version $(version)\" | sed \"s!\\.!,!g\" >>@shlib_base_name@.def; \\\n-\ttouch build; \\\n-\techo \"build $$(expr $$(<build) + 0)\" >>@shlib_base_name@.def; \\\n-\techo \"export @$(SHLIB_MAP)\" >>@shlib_base_name@.def; \\\n-\tif mpkxdc -n -p @shlib_base_name@.xdc; \\\n-\t\tthen echo \"xdcdata @shlib_base_name@.xdc\" >>@shlib_base_name@.def; \\\n-\t\telse echo \"WARNING: $(SHLIB_NAME) built without XDC data will not work well.\" 1>&2; \\\n-\tfi; \\\n-\t$(CC) $(LIBGCC2_CFLAGS) -o $(SHLIB_NAME) \\\n-\t\t$(SHLIB_SRC) -posix -static-libgcc -lnetware \\\n-\t\t-Wl,--Map,--map-info,full,--strip-all,--def-file,@shlib_base_name@.def; \\\n-\trm -f @shlib_base_name@.imp; $(LN_S) $(SHLIB_MAP) @shlib_base_name@.imp; \\\n-\trm -f libgcc.imp; $(LN_S) @shlib_base_name@.imp libgcc.imp; \\\n-\texpr $$(<build) + 1 >build\n-\n-SHLIB_INSTALL = \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(slibdir)$(SHLIB_SLIBDIR_QUAL); \\\n-\t$(INSTALL_DATA) $(SHLIB_NAME) $(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_NAME); \\\n-\t$(INSTALL_DATA) @shlib_base_name@.imp $(DESTDIR)$(libsubdir)/"}, {"sha": "990fce997cec18d7885b00c21f7337ab8b8e0c34", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -1,3 +1,8 @@\n+2011-07-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* crossconfig.m4 (*-netware): Remove.\n+\t* configure: Regenerate.\n+\n 2011-07-15  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/locale/newlib/ctype_members.cc: New file."}, {"sha": "0bbc485d3006d1bcf5efef85a7939162387ad482", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -57083,155 +57083,6 @@ $as_echo \"$ac_ld_relro\" >&6; }\n       $as_echo \"#define HAVE_ISNANL 1\" >>confdefs.h\n \n     fi\n-    ;;\n-  *-netware)\n-    SECTION_FLAGS='-ffunction-sections -fdata-sections'\n-\n-\n-  # If we're not using GNU ld, then there's no point in even trying these\n-  # tests.  Check for that first.  We should have already tested for gld\n-  # by now (in libtool), but require it now just to be safe...\n-  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n-  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n-\n-\n-\n-  # The name set by libtool depends on the version of libtool.  Shame on us\n-  # for depending on an impl detail, but c'est la vie.  Older versions used\n-  # ac_cv_prog_gnu_ld, but now it's lt_cv_prog_gnu_ld, and is copied back on\n-  # top of with_gnu_ld (which is also set by --with-gnu-ld, so that actually\n-  # makes sense).  We'll test with_gnu_ld everywhere else, so if that isn't\n-  # set (hence we're using an older libtool), then set it.\n-  if test x${with_gnu_ld+set} != xset; then\n-    if test x${ac_cv_prog_gnu_ld+set} != xset; then\n-      # We got through \"ac_require(ac_prog_ld)\" and still not set?  Huh?\n-      with_gnu_ld=no\n-    else\n-      with_gnu_ld=$ac_cv_prog_gnu_ld\n-    fi\n-  fi\n-\n-  # Start by getting the version number.  I think the libtool test already\n-  # does some of this, but throws away the result.\n-  glibcxx_ld_is_gold=no\n-  if test x\"$with_gnu_ld\" = x\"yes\"; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ld version\" >&5\n-$as_echo_n \"checking for ld version... \" >&6; }\n-\n-    if $LD --version 2>/dev/null | grep 'GNU gold' >/dev/null 2>&1; then\n-      glibcxx_ld_is_gold=yes\n-    fi\n-    ldver=`$LD --version 2>/dev/null |\n-\t   sed -e 's/GNU gold /GNU ld /;s/GNU ld version /GNU ld /;s/GNU ld ([^)]*) /GNU ld /;s/GNU ld \\([0-9.][0-9.]*\\).*/\\1/; q'`\n-\n-    glibcxx_gnu_ld_version=`echo $ldver | \\\n-\t   $AWK -F. '{ if (NF<3) $3=0; print ($1*100+$2)*100+$3 }'`\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_gnu_ld_version\" >&5\n-$as_echo \"$glibcxx_gnu_ld_version\" >&6; }\n-  fi\n-\n-  # Set --gc-sections.\n-  glibcxx_have_gc_sections=no\n-  if test \"$glibcxx_ld_is_gold\" = \"yes\"; then\n-    if $LD --help 2>/dev/null | grep gc-sections >/dev/null 2>&1; then\n-      glibcxx_have_gc_sections=yes\n-    fi\n-  else\n-    glibcxx_gcsections_min_ld=21602\n-    if test x\"$with_gnu_ld\" = x\"yes\" &&\n-\ttest $glibcxx_gnu_ld_version -gt $glibcxx_gcsections_min_ld ; then\n-      glibcxx_have_gc_sections=yes\n-    fi\n-  fi\n-  if test \"$glibcxx_have_gc_sections\" = \"yes\"; then\n-    # Sufficiently young GNU ld it is!  Joy and bunny rabbits!\n-    # NB: This flag only works reliably after 2.16.1. Configure tests\n-    # for this are difficult, so hard wire a value that should work.\n-\n-    ac_test_CFLAGS=\"${CFLAGS+set}\"\n-    ac_save_CFLAGS=\"$CFLAGS\"\n-    CFLAGS='-Wl,--gc-sections'\n-\n-    # Check for -Wl,--gc-sections\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ld that supports -Wl,--gc-sections\" >&5\n-$as_echo_n \"checking for ld that supports -Wl,--gc-sections... \" >&6; }\n-    if test x$gcc_no_link = xyes; then\n-  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n-fi\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n- int one(void) { return 1; }\n-     int two(void) { return 2; }\n-\n-int\n-main ()\n-{\n- two();\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-  ac_gcsections=yes\n-else\n-  ac_gcsections=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-    if test \"$ac_gcsections\" = \"yes\"; then\n-      rm -f conftest.c\n-      touch conftest.c\n-      if $CC -c conftest.c; then\n-\tif $LD --gc-sections -o conftest conftest.o 2>&1 | \\\n-\t   grep \"Warning: gc-sections option ignored\" > /dev/null; then\n-\t  ac_gcsections=no\n-\tfi\n-      fi\n-      rm -f conftest.c conftest.o conftest\n-    fi\n-    if test \"$ac_gcsections\" = \"yes\"; then\n-      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n-    fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_gcsections\" >&5\n-$as_echo \"$ac_gcsections\" >&6; }\n-\n-    if test \"$ac_test_CFLAGS\" = set; then\n-      CFLAGS=\"$ac_save_CFLAGS\"\n-    else\n-      # this is the suspicious part\n-      CFLAGS=''\n-    fi\n-  fi\n-\n-  # Set -z,relro.\n-  # Note this is only for shared objects.\n-  ac_ld_relro=no\n-  if test x\"$with_gnu_ld\" = x\"yes\"; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ld that supports -Wl,-z,relro\" >&5\n-$as_echo_n \"checking for ld that supports -Wl,-z,relro... \" >&6; }\n-    cxx_z_relo=`$LD -v --help 2>/dev/null | grep \"z relro\"`\n-    if test -n \"$cxx_z_relo\"; then\n-      OPT_LDFLAGS=\"-Wl,-z,relro\"\n-      ac_ld_relro=yes\n-    fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ld_relro\" >&5\n-$as_echo \"$ac_ld_relro\" >&6; }\n-  fi\n-\n-  # Set linker optimization flags.\n-  if test x\"$with_gnu_ld\" = x\"yes\"; then\n-    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n-  fi\n-\n-\n-\n-\n-    $as_echo \"#define HAVE_HYPOT 1\" >>confdefs.h\n-\n-    $as_echo \"#define HAVE_ISINF 1\" >>confdefs.h\n-\n-    $as_echo \"#define HAVE_ISNAN 1\" >>confdefs.h\n-\n     ;;\n   *-qnx6.1* | *-qnx6.2*)\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'"}, {"sha": "361ed0b8641706446c54ecfede6c824a08a69aa5", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44dbbe18b497d775d0b7efab7fcd08486f1a1fa/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=e44dbbe18b497d775d0b7efab7fcd08486f1a1fa", "patch": "@@ -173,14 +173,6 @@ case \"${host}\" in\n       AC_DEFINE(HAVE_ISNANL)\n     fi\n     ;;\n-  *-netware)\n-    SECTION_FLAGS='-ffunction-sections -fdata-sections'\n-    AC_SUBST(SECTION_FLAGS)\n-    GLIBCXX_CHECK_LINKER_FEATURES\n-    AC_DEFINE(HAVE_HYPOT)\n-    AC_DEFINE(HAVE_ISINF)\n-    AC_DEFINE(HAVE_ISNAN)\n-    ;;\n   *-qnx6.1* | *-qnx6.2*)\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS) "}]}