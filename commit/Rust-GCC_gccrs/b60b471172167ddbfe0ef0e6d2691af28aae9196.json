{"sha": "b60b471172167ddbfe0ef0e6d2691af28aae9196", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwYjQ3MTE3MjE2N2RkYmZlMGVmMGU2ZDI2OTFhZjI4YWFlOTE5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-05-18T05:37:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-05-18T05:37:27Z"}, "message": "re PR tree-optimization/31953 (ICE in set_value_range, at tree-vrp.c:305)\n\n./:\tPR tree-optimization/31953\n\t* tree-vrp.c (set_value_range_to_value): Add equiv parameter.\n\tChange all callers.\n\t(set_value_range_to_null): Call set_value_range_to_value.\n\t(extract_range_from_comparison): Likewise.\ntestsuite/:\n\tPR tree-optimization/31953\n\t* gcc.c-torture/compile/pr31953.c: New test.\n\nFrom-SVN: r124823", "tree": {"sha": "82b59301017fd7caf050bd86c289a5e62f6bbfed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82b59301017fd7caf050bd86c289a5e62f6bbfed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b60b471172167ddbfe0ef0e6d2691af28aae9196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60b471172167ddbfe0ef0e6d2691af28aae9196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60b471172167ddbfe0ef0e6d2691af28aae9196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60b471172167ddbfe0ef0e6d2691af28aae9196/comments", "author": null, "committer": null, "parents": [{"sha": "0968bb3d1d3090e0caba5101baa43789d41b62cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0968bb3d1d3090e0caba5101baa43789d41b62cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0968bb3d1d3090e0caba5101baa43789d41b62cb"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "cbe76f8090cc8f7150db1d6955ae640156e319e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b60b471172167ddbfe0ef0e6d2691af28aae9196", "patch": "@@ -1,3 +1,11 @@\n+2007-05-17  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR tree-optimization/31953\n+\t* tree-vrp.c (set_value_range_to_value): Add equiv parameter.\n+\tChange all callers.\n+\t(set_value_range_to_null): Call set_value_range_to_value.\n+\t(extract_range_from_comparison): Likewise.\n+\n 2007-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* toplev.c (print_version): Output GMP/MPFR version info."}, {"sha": "96b7c39d447f9082b21481a614c9c7d96ec37589", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b60b471172167ddbfe0ef0e6d2691af28aae9196", "patch": "@@ -1,3 +1,8 @@\n+2007-05-17  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR tree-optimization/31953\n+\t* gcc.c-torture/compile/pr31953.c: New test.\n+\n 2007-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/builtins-1.c: Test reentrant gamma functions."}, {"sha": "667c9ae88515a256b0018742558a0ce2b6ff9cad", "filename": "gcc/testsuite/gcc.c-torture/compile/pr31953.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr31953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr31953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr31953.c?ref=b60b471172167ddbfe0ef0e6d2691af28aae9196", "patch": "@@ -0,0 +1,14 @@\n+struct WView\n+{\n+  int hexedit_mode:1;\n+};\n+toggle_hexedit_mode (struct WView *view)\n+{\n+  if (view->hexedit_mode)\n+    {\n+    }\n+  else\n+    {\n+      view->hexedit_mode = !view->hexedit_mode;\n+    }\n+}"}, {"sha": "efb4f6890d81b568699ba0c77df9302812590fbb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60b471172167ddbfe0ef0e6d2691af28aae9196/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b60b471172167ddbfe0ef0e6d2691af28aae9196", "patch": "@@ -358,7 +358,7 @@ set_value_range_to_varying (value_range_t *vr)\n    infinity when we shouldn't.  */\n \n static inline void\n-set_value_range_to_value (value_range_t *vr, tree val)\n+set_value_range_to_value (value_range_t *vr, tree val, bitmap equiv)\n {\n   gcc_assert (is_gimple_min_invariant (val));\n   if (is_overflow_infinity (val))\n@@ -374,7 +374,7 @@ set_value_range_to_value (value_range_t *vr, tree val)\n \t  val = TYPE_MIN_VALUE (TREE_TYPE (val));\n \t}\n     }\n-  set_value_range (vr, VR_RANGE, val, val, NULL);\n+  set_value_range (vr, VR_RANGE, val, val, equiv);\n }\n \n /* Set value range VR to a non-negative range of type TYPE.\n@@ -418,8 +418,7 @@ set_value_range_to_nonnull (value_range_t *vr, tree type)\n static inline void\n set_value_range_to_null (value_range_t *vr, tree type)\n {\n-  tree zero = build_int_cst (type, 0);\n-  set_value_range (vr, VR_RANGE, zero, zero, vr->equiv);\n+  set_value_range_to_value (vr, build_int_cst (type, 0), vr->equiv);\n }\n \n \n@@ -1702,15 +1701,15 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n   if (TREE_CODE (op0) == SSA_NAME)\n     vr0 = *(get_value_range (op0));\n   else if (is_gimple_min_invariant (op0))\n-    set_value_range_to_value (&vr0, op0);\n+    set_value_range_to_value (&vr0, op0, NULL);\n   else\n     set_value_range_to_varying (&vr0);\n \n   op1 = TREE_OPERAND (expr, 1);\n   if (TREE_CODE (op1) == SSA_NAME)\n     vr1 = *(get_value_range (op1));\n   else if (is_gimple_min_invariant (op1))\n-    set_value_range_to_value (&vr1, op1);\n+    set_value_range_to_value (&vr1, op1, NULL);\n   else\n     set_value_range_to_varying (&vr1);\n \n@@ -2107,7 +2106,7 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n   if (TREE_CODE (op0) == SSA_NAME)\n     vr0 = *(get_value_range (op0));\n   else if (is_gimple_min_invariant (op0))\n-    set_value_range_to_value (&vr0, op0);\n+    set_value_range_to_value (&vr0, op0, NULL);\n   else\n     set_value_range_to_varying (&vr0);\n \n@@ -2490,15 +2489,15 @@ extract_range_from_cond_expr (value_range_t *vr, tree expr)\n   if (TREE_CODE (op0) == SSA_NAME)\n     vr0 = *(get_value_range (op0));\n   else if (is_gimple_min_invariant (op0))\n-    set_value_range_to_value (&vr0, op0);\n+    set_value_range_to_value (&vr0, op0, NULL);\n   else\n     set_value_range_to_varying (&vr0);\n \n   op1 = COND_EXPR_ELSE (expr);\n   if (TREE_CODE (op1) == SSA_NAME)\n     vr1 = *(get_value_range (op1));\n   else if (is_gimple_min_invariant (op1))\n-    set_value_range_to_value (&vr1, op1);\n+    set_value_range_to_value (&vr1, op1, NULL);\n   else\n     set_value_range_to_varying (&vr1);\n \n@@ -2528,7 +2527,10 @@ extract_range_from_comparison (value_range_t *vr, tree expr)\n \t its type may be different from _Bool.  Convert VAL to EXPR's\n \t type.  */\n       val = fold_convert (TREE_TYPE (expr), val);\n-      set_value_range (vr, VR_RANGE, val, val, vr->equiv);\n+      if (is_gimple_min_invariant (val))\n+\tset_value_range_to_value (vr, val, vr->equiv);\n+      else\n+\tset_value_range (vr, VR_RANGE, val, val, vr->equiv);\n     }\n   else\n     /* The result of a comparison is always true or false.  */\n@@ -2562,7 +2564,7 @@ extract_range_from_expr (value_range_t *vr, tree expr)\n   else if (TREE_CODE_CLASS (code) == tcc_comparison)\n     extract_range_from_comparison (vr, expr);\n   else if (is_gimple_min_invariant (expr))\n-    set_value_range_to_value (vr, expr);\n+    set_value_range_to_value (vr, expr, NULL);\n   else\n     set_value_range_to_varying (vr);\n "}]}