{"sha": "80c6dcf59bf7b192f107a2d950877a6b09fc6084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjNmRjZjU5YmY3YjE5MmYxMDdhMmQ5NTA4NzdhNmIwOWZjNjA4NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-11T22:01:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-11T22:01:04Z"}, "message": "re PR c++/48535 ([C++0x][SFINAE] Hard errors during list-value-initialization)\n\n\tPR c++/48535\n\t* decl.c (cp_complete_array_type_or_error): New.\n\t* semantics.c (finish_compound_literal): Use it.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r172287", "tree": {"sha": "3b58eebc8734149498c7501b9210b12e419ac019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b58eebc8734149498c7501b9210b12e419ac019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c6dcf59bf7b192f107a2d950877a6b09fc6084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c6dcf59bf7b192f107a2d950877a6b09fc6084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c6dcf59bf7b192f107a2d950877a6b09fc6084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c6dcf59bf7b192f107a2d950877a6b09fc6084/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76186d20ccf5c5c34f5f4fe2e721738d28890a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76186d20ccf5c5c34f5f4fe2e721738d28890a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76186d20ccf5c5c34f5f4fe2e721738d28890a4a"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "bf7113f19030028882862f16c606ed10cf281fff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80c6dcf59bf7b192f107a2d950877a6b09fc6084", "patch": "@@ -1,5 +1,10 @@\n 2011-04-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48535\n+\t* decl.c (cp_complete_array_type_or_error): New.\n+\t* semantics.c (finish_compound_literal): Use it.\n+\t* cp-tree.h: Declare it.\n+\n \tPR c++/48535\n \t* semantics.c (finish_compound_literal): Handle references.\n "}, {"sha": "4321d28d4630aaa33e3c2a9ef36236bc6e587b35", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=80c6dcf59bf7b192f107a2d950877a6b09fc6084", "patch": "@@ -4791,6 +4791,7 @@ extern void start_decl_1\t\t\t(tree, bool);\n extern bool check_array_initializer\t\t(tree, tree, tree);\n extern void cp_finish_decl\t\t\t(tree, tree, bool, tree, int);\n extern int cp_complete_array_type\t\t(tree *, tree, bool);\n+extern int cp_complete_array_type_or_error\t(tree *, tree, bool, tsubst_flags_t);\n extern tree build_ptrmemfunc_type\t\t(tree);\n extern tree build_ptrmem_type\t\t\t(tree, tree);\n /* the grokdeclarator prototype is in decl.h */"}, {"sha": "7dea9b7baa556b35105193d424aca092de8dfdf8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=80c6dcf59bf7b192f107a2d950877a6b09fc6084", "patch": "@@ -6689,6 +6689,39 @@ cp_complete_array_type (tree *ptype, tree initial_value, bool do_default)\n \n   return failure;\n }\n+\n+/* As above, but either give an error or reject zero-size arrays, depending\n+   on COMPLAIN.  */\n+\n+int\n+cp_complete_array_type_or_error (tree *ptype, tree initial_value,\n+\t\t\t\t bool do_default, tsubst_flags_t complain)\n+{\n+  int failure;\n+  bool sfinae = !(complain & tf_error);\n+  /* In SFINAE context we can't be lenient about zero-size arrays.  */\n+  if (sfinae)\n+    ++pedantic;\n+  failure = cp_complete_array_type (ptype, initial_value, do_default);\n+  if (sfinae)\n+    --pedantic;\n+  if (failure)\n+    {\n+      if (sfinae)\n+\t/* Not an error.  */;\n+      else if (failure == 1)\n+\terror (\"initializer fails to determine size of %qT\", *ptype);\n+      else if (failure == 2)\n+\t{\n+\t  if (do_default)\n+\t    error (\"array size missing in %qT\", *ptype);\n+\t}\n+      else if (failure == 3)\n+\terror (\"zero-size array %qT\", *ptype);\n+      *ptype = error_mark_node;\n+    }\n+  return failure;\n+}\n \f\n /* Return zero if something is declared to be a member of type\n    CTYPE when in the context of CUR_TYPE.  STRING is the error"}, {"sha": "61d87beedaaf5a847857659e116860b74f713470", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=80c6dcf59bf7b192f107a2d950877a6b09fc6084", "patch": "@@ -2355,8 +2355,14 @@ finish_compound_literal (tree type, tree compound_literal,\n       && check_array_initializer (NULL_TREE, type, compound_literal))\n     return error_mark_node;\n   compound_literal = reshape_init (type, compound_literal);\n-  if (TREE_CODE (type) == ARRAY_TYPE)\n-    cp_complete_array_type (&type, compound_literal, false);\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && TYPE_DOMAIN (type) == NULL_TREE)\n+    {\n+      cp_complete_array_type_or_error (&type, compound_literal,\n+\t\t\t\t       false, complain);\n+      if (type == error_mark_node)\n+\treturn error_mark_node;\n+    }\n   compound_literal = digest_init (type, compound_literal);\n   /* Put static/constant array temporaries in static variables, but always\n      represent class temporaries with TARGET_EXPR so we elide copies.  */"}, {"sha": "c5efa1b5e63fd0c152197cb27745e648a54d6656", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80c6dcf59bf7b192f107a2d950877a6b09fc6084", "patch": "@@ -1,5 +1,7 @@\n 2011-04-11  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/sfinae12.C: New.\n+\n \t* g++.dg/cpp0x/enum10.C: New.\n \n \t* g++.dg/cpp0x/lambda/lambda-this4.C: New."}, {"sha": "114f1b42da8c40334dbe497c513dc43d98b5e51f", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae12.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c6dcf59bf7b192f107a2d950877a6b09fc6084/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae12.C?ref=80c6dcf59bf7b192f107a2d950877a6b09fc6084", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/48535\n+// { dg-options -std=c++0x }\n+\n+template<class T,\n+ class = decltype(T{})\n+>\n+char f(int);\n+\n+template<class>\n+char (&f(...))[2];\n+\n+struct A { virtual ~A() = 0; };\n+\n+static_assert(sizeof(f<A>(0)) != 1, \"Error\"); // (a)\n+static_assert(sizeof(f<void()>(0)) != 1, \"Error\"); // (b)\n+static_assert(sizeof(f<int&>(0)) != 1, \"Error\"); // (d)\n+static_assert(sizeof(f<const int&>(0)) == 1, \"Error\"); // (e)\n+static_assert(sizeof(f<int[]>(0)) != 1, \"Error\"); // (f)"}]}