{"sha": "d4a180188bed0a798818ef176c89048343277665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRhMTgwMTg4YmVkMGE3OTg4MThlZjE3NmM4OTA0ODM0MzI3NzY2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-01-25T20:01:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-01-25T20:01:29Z"}, "message": "re PR c++/56095 (Crash casting function pointer as non-type template argument)\n\n\tPR c++/56095\n\t* pt.c (convert_nontype_argument_function): Handle invalid input.\n\t(convert_nontype_argument): Likewise.\n\nFrom-SVN: r195474", "tree": {"sha": "06b0af402c8c86fa6bd9e2fe9b1d3aac1ff335bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06b0af402c8c86fa6bd9e2fe9b1d3aac1ff335bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4a180188bed0a798818ef176c89048343277665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a180188bed0a798818ef176c89048343277665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a180188bed0a798818ef176c89048343277665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a180188bed0a798818ef176c89048343277665/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8fe87bd12b017e0f6be0d1103029e6d89dc7a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8fe87bd12b017e0f6be0d1103029e6d89dc7a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8fe87bd12b017e0f6be0d1103029e6d89dc7a40"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "1b640ff33097e232943f22376b9d905bae248c0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a180188bed0a798818ef176c89048343277665/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a180188bed0a798818ef176c89048343277665/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4a180188bed0a798818ef176c89048343277665", "patch": "@@ -1,5 +1,9 @@\n 2013-01-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/56095\n+\t* pt.c (convert_nontype_argument_function): Handle invalid input.\n+\t(convert_nontype_argument): Likewise.\n+\n \tPR c++/56104\n \t* typeck.c (get_member_function_from_ptrfunc): Optimize if the\n \tdynamic type has no virtual functions."}, {"sha": "743028942ed2935a162ab98dc00414c094dfe7f0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a180188bed0a798818ef176c89048343277665/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a180188bed0a798818ef176c89048343277665/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d4a180188bed0a798818ef176c89048343277665", "patch": "@@ -5113,6 +5113,17 @@ convert_nontype_argument_function (tree type, tree expr)\n      [...]\n      -- the address of an object or function with external [C++11: or\n         internal] linkage.  */\n+\n+  if (TREE_CODE (fn_no_ptr) != FUNCTION_DECL)\n+    {\n+      error (\"%qE is not a valid template argument for type %qT\", expr, type);\n+      if (TREE_CODE (type) == POINTER_TYPE)\n+\terror (\"it must be the address of a function with external linkage\");\n+      else\n+\terror (\"it must be the name of a function with external linkage\");\n+      return NULL_TREE;\n+    }\n+\n   linkage = decl_linkage (fn_no_ptr);\n   if (cxx_dialect >= cxx0x ? linkage == lk_none : linkage != lk_external)\n     {\n@@ -5511,15 +5522,16 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t     could actually change the type to something more cv-qualified,\n \t     and this is not folded by convert_from_reference.  */\n \t  tree addr = TREE_OPERAND (probe, 0);\n-\t  gcc_assert (TREE_CODE (probe_type) == REFERENCE_TYPE);\n-\t  gcc_assert (TREE_CODE (addr) == ADDR_EXPR);\n-\t  gcc_assert (TREE_CODE (TREE_TYPE (addr)) == POINTER_TYPE);\n-\t  gcc_assert (same_type_ignoring_top_level_qualifiers_p\n-\t\t      (TREE_TYPE (probe_type),\n-\t\t       TREE_TYPE (TREE_TYPE (addr))));\n-\n-\t  expr = TREE_OPERAND (addr, 0);\n-\t  expr_type = TREE_TYPE (expr);\n+\t  if (TREE_CODE (probe_type) == REFERENCE_TYPE\n+\t      && TREE_CODE (addr) == ADDR_EXPR\n+\t      && TREE_CODE (TREE_TYPE (addr)) == POINTER_TYPE\n+\t      && (same_type_ignoring_top_level_qualifiers_p\n+\t\t  (TREE_TYPE (probe_type),\n+\t\t   TREE_TYPE (TREE_TYPE (addr)))))\n+\t    {\n+\t      expr = TREE_OPERAND (addr, 0);\n+\t      expr_type = TREE_TYPE (expr);\n+\t    }\n \t}\n     }\n \n@@ -5745,13 +5757,6 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n       expr = convert_nontype_argument_function (type, expr);\n       if (!expr || expr == error_mark_node)\n \treturn expr;\n-\n-      if (TREE_CODE (expr) != ADDR_EXPR)\n-\t{\n-\t  error (\"%qE is not a valid template argument for type %qT\", expr, type);\n-\t  error (\"it must be the address of a function with external linkage\");\n-\t  return NULL_TREE;\n-\t}\n     }\n   /* [temp.arg.nontype]/5, bullet 5\n "}, {"sha": "742135a1e38099ae04afe952c274cd97d50690aa", "filename": "gcc/testsuite/g++.dg/template/fn-ptr2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a180188bed0a798818ef176c89048343277665/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffn-ptr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a180188bed0a798818ef176c89048343277665/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffn-ptr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffn-ptr2.C?ref=d4a180188bed0a798818ef176c89048343277665", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/56095\n+\n+int *a(void) { return 0; }\n+typedef void voidfn(void);\n+template <voidfn* b> void z1(void) {}\n+template <voidfn& b> void z2(void) {}\n+\n+int main()\n+{\n+  z1<(voidfn*)a>();\t\t      // { dg-error \"\" }\n+  z1<reinterpret_cast<voidfn*>(a)>(); // { dg-error \"\" }\n+  z2<(voidfn&)a>();\t\t      // { dg-error \"\" }\n+  z2<reinterpret_cast<voidfn&>(a)>(); // { dg-error \"\" }\n+}"}]}