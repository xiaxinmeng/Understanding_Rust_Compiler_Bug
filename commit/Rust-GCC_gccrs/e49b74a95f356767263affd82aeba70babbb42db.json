{"sha": "e49b74a95f356767263affd82aeba70babbb42db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5Yjc0YTk1ZjM1Njc2NzI2M2FmZmQ4MmFlYmE3MGJhYmJiNDJkYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:59:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:59:42Z"}, "message": "g-regpat.adb (Fail): raise Expression_Error including the diagnostic message, friendlier.\n\n\t* g-regpat.adb (Fail): raise Expression_Error including the diagnostic\n\tmessage, friendlier.\n\nFrom-SVN: r106984", "tree": {"sha": "d12db436be0ea44fa62d4a3cc69df254440d013c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d12db436be0ea44fa62d4a3cc69df254440d013c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49b74a95f356767263affd82aeba70babbb42db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49b74a95f356767263affd82aeba70babbb42db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49b74a95f356767263affd82aeba70babbb42db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49b74a95f356767263affd82aeba70babbb42db/comments", "author": null, "committer": null, "parents": [{"sha": "383b2b42cbdd3868ebccf2fdf107ba4e2741bf55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383b2b42cbdd3868ebccf2fdf107ba4e2741bf55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383b2b42cbdd3868ebccf2fdf107ba4e2741bf55"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "c52b5f2c894eaa0e22894fe1d187047312e51a4e", "filename": "gcc/ada/g-regpat.adb", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49b74a95f356767263affd82aeba70babbb42db/gcc%2Fada%2Fg-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49b74a95f356767263affd82aeba70babbb42db/gcc%2Fada%2Fg-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regpat.adb?ref=e49b74a95f356767263affd82aeba70babbb42db", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --               Copyright (C) 1986 by University of Toronto.               --\n---           Copyright (C) 1996-2004 Ada Core Technologies, Inc.            --\n+--                      Copyright (C) 1999-2005, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -129,7 +129,7 @@ package body GNAT.Regpat is\n       --  Complex loops\n \n       CURLYX,     -- 2num node Match this complex thing {n,m} times\n-      --                       The nums are coded on two characters each.\n+      --                       The nums are coded on two characters each\n \n       WHILEM,     -- no        Do curly processing and see if rest matches\n \n@@ -233,15 +233,15 @@ package body GNAT.Regpat is\n    procedure Set_In_Class\n      (Bitmap : in out Character_Class;\n       C      : Character);\n-   --  Set the entry to True for C in the class Bitmap.\n+   --  Set the entry to True for C in the class Bitmap\n \n    function Get_From_Class\n      (Bitmap : Character_Class;\n       C      : Character) return Boolean;\n-   --  Return True if the entry is set for C in the class Bitmap.\n+   --  Return True if the entry is set for C in the class Bitmap\n \n    procedure Reset_Class (Bitmap : out Character_Class);\n-   --  Clear all the entries in the class Bitmap.\n+   --  Clear all the entries in the class Bitmap\n \n    pragma Inline (Set_In_Class);\n    pragma Inline (Get_From_Class);\n@@ -282,7 +282,7 @@ package body GNAT.Regpat is\n    function Get_Next_Offset\n      (Program : Program_Data;\n       IP      : Pointer) return Pointer;\n-   --  Get the offset field of a node. Used by Get_Next.\n+   --  Get the offset field of a node. Used by Get_Next\n \n    function Get_Next\n      (Program : Program_Data;\n@@ -295,7 +295,7 @@ package body GNAT.Regpat is\n    function Read_Natural\n      (Program : Program_Data;\n       IP      : Pointer) return Natural;\n-   --  Return the 2-byte natural coded at position IP.\n+   --  Return the 2-byte natural coded at position IP\n \n    --  All of the subprograms above are tiny and should be inlined\n \n@@ -389,10 +389,10 @@ package body GNAT.Regpat is\n       --  Return value is the location of new opcode, ie old Emit_Ptr.\n \n       procedure Emit_Natural (IP : Pointer; N : Natural);\n-      --  Split N on two characters at position IP.\n+      --  Split N on two characters at position IP\n \n       procedure Emit_Class (Bitmap : Character_Class);\n-      --  Emits a character class.\n+      --  Emits a character class\n \n       procedure Case_Emit (C : Character);\n       --  Emit C, after converting is to lower-case if the regular\n@@ -454,7 +454,7 @@ package body GNAT.Regpat is\n       function  Next_Instruction (P : Pointer) return Pointer;\n       --  Dig the \"next\" pointer out of a node\n \n-      procedure Fail (M : in String);\n+      procedure Fail (M : String);\n       pragma No_Return (Fail);\n       --  Fail with a diagnostic message, if possible\n \n@@ -572,9 +572,9 @@ package body GNAT.Regpat is\n       -- Fail --\n       ----------\n \n-      procedure Fail (M : in String) is\n+      procedure Fail (M : String) is\n       begin\n-         raise Expression_Error;\n+         raise Expression_Error with M;\n       end Fail;\n \n       -------------------------\n@@ -845,7 +845,7 @@ package body GNAT.Regpat is\n       --  makes it hard to avoid.\n \n       procedure Parse\n-        (Parenthesized  : in Boolean;\n+        (Parenthesized  : Boolean;\n          Flags          : out Expression_Flags;\n          IP             : out Pointer)\n       is\n@@ -1206,7 +1206,7 @@ package body GNAT.Regpat is\n             Parse_Pos := Parse_Pos + 1;\n          end if;\n \n-         --  First character can be ] or -, without closing the class.\n+         --  First character can be ] or - without closing the class\n \n          if Parse_Pos <= Parse_End\n            and then (Expression (Parse_Pos) = ']'\n@@ -2389,7 +2389,7 @@ package body GNAT.Regpat is\n \n       type Natural_Array is array (Match_Count range <>) of Natural;\n       Matches_Tmp : Natural_Array (Matches_Full'Range);\n-      --  Save the opening position of parenthesis.\n+      --  Save the opening position of parenthesis\n \n       Last_Paren  : Natural := 0;\n       --  Last parenthesis seen\n@@ -2414,7 +2414,7 @@ package body GNAT.Regpat is\n       --  operators for complex expressions.\n \n       Current_Curly : Current_Curly_Access := null;\n-      --  The curly currently being processed.\n+      --  The curly currently being processed\n \n       -----------------------\n       -- Local Subprograms --\n@@ -2430,7 +2430,7 @@ package body GNAT.Regpat is\n       --  It only matches on things of length 1.\n       --  Starting from Input_Pos, it matches at most Max CURLY.\n \n-      function Try (Pos : in Positive) return Boolean;\n+      function Try (Pos : Positive) return Boolean;\n       --  Try to match at specific point\n \n       function Match (IP : Pointer) return Boolean;\n@@ -2465,7 +2465,7 @@ package body GNAT.Regpat is\n       pragma Inline (Index);\n       pragma Inline (Repeat);\n \n-      --  These are two complex functions, but used only once.\n+      --  These are two complex functions, but used only once\n \n       pragma Inline (Match_Whilem);\n       pragma Inline (Match_Simple_Operator);\n@@ -3002,10 +3002,10 @@ package body GNAT.Regpat is\n          Ln : Natural                       := 0;\n \n          Lastloc : constant Natural := Cc.Lastloc;\n-         --  Detection of 0-len.\n+         --  Detection of 0-len\n \n       begin\n-         --  If degenerate scan matches \"\", assume scan done.\n+         --  If degenerate scan matches \"\", assume scan done\n \n          if Input_Pos = Cc.Lastloc\n            and then N >= Cc.Min\n@@ -3031,7 +3031,7 @@ package body GNAT.Regpat is\n             return False;\n          end if;\n \n-         --  First, just match a string of min scans.\n+         --  First, just match a string of min scans\n \n          if N < Cc.Min then\n             Cc.Cur := N;\n@@ -3046,7 +3046,7 @@ package body GNAT.Regpat is\n             return False;\n          end if;\n \n-         --  Prefer next over scan for minimal matching.\n+         --  Prefer next over scan for minimal matching\n \n          if not Cc.Greedy then\n             Current_Curly := Cc.Old_Cc;\n@@ -3240,7 +3240,7 @@ package body GNAT.Regpat is\n       -- Try --\n       ---------\n \n-      function Try (Pos : in Positive) return Boolean is\n+      function Try (Pos : Positive) return Boolean is\n       begin\n          Input_Pos  := Pos;\n          Last_Paren := 0;"}]}