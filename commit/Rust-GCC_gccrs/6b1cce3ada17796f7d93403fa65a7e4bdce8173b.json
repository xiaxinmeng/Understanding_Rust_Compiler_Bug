{"sha": "6b1cce3ada17796f7d93403fa65a7e4bdce8173b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxY2NlM2FkYTE3Nzk2ZjdkOTM0MDNmYTY1YTdlNGJkY2U4MTczYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-29T18:17:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-29T18:17:18Z"}, "message": "trans.c (Attribute_to_gnu): Do not return the RM size for padded types.\n\n\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Object_Size>: Do not\n\treturn the RM size for padded types.\n\nFrom-SVN: r153720", "tree": {"sha": "89b6cdf039d94054537dbef9c69a24a9f80c8d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b6cdf039d94054537dbef9c69a24a9f80c8d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b1cce3ada17796f7d93403fa65a7e4bdce8173b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1cce3ada17796f7d93403fa65a7e4bdce8173b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1cce3ada17796f7d93403fa65a7e4bdce8173b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1cce3ada17796f7d93403fa65a7e4bdce8173b/comments", "author": null, "committer": null, "parents": [{"sha": "d0539838389f4febb4582217a93e90141a642745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0539838389f4febb4582217a93e90141a642745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0539838389f4febb4582217a93e90141a642745"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "b5b1e6cc8b91ae3490b16a8c4d909db8aad0cf2c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1cce3ada17796f7d93403fa65a7e4bdce8173b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1cce3ada17796f7d93403fa65a7e4bdce8173b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6b1cce3ada17796f7d93403fa65a7e4bdce8173b", "patch": "@@ -1,3 +1,8 @@\n+2009-10-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Object_Size>: Do not\n+\treturn the RM size for padded types.\n+\n 2009-10-28  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_type.adb: Minor reformatting"}, {"sha": "58afbfddac685dede4c36996300e796b7aad0b9e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1cce3ada17796f7d93403fa65a7e4bdce8173b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1cce3ada17796f7d93403fa65a7e4bdce8173b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=6b1cce3ada17796f7d93403fa65a7e4bdce8173b", "patch": "@@ -1317,28 +1317,28 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t}\n \n       /* If we're looking for the size of a field, return the field size.\n-\t Otherwise, if the prefix is an object, or if 'Object_Size or\n-\t 'Max_Size_In_Storage_Elements has been specified, the result is the\n-\t GCC size of the type.  Otherwise, the result is the RM size of the\n-\t type.  */\n+\t Otherwise, if the prefix is an object, or if we're looking for\n+\t 'Object_Size or 'Max_Size_In_Storage_Elements, the result is the\n+\t GCC size of the type.  Otherwise, it is the RM size of the type.  */\n       if (TREE_CODE (gnu_prefix) == COMPONENT_REF)\n \tgnu_result = DECL_SIZE (TREE_OPERAND (gnu_prefix, 1));\n       else if (TREE_CODE (gnu_prefix) != TYPE_DECL\n \t       || attribute == Attr_Object_Size\n \t       || attribute == Attr_Max_Size_In_Storage_Elements)\n \t{\n-\t  /* If this is a padded type, the GCC size isn't relevant to the\n-\t     programmer.  Normally, what we want is the RM size, which was set\n-\t     from the specified size, but if it was not set, we want the size\n-\t     of the relevant field.  Using the MAX of those two produces the\n-\t     right result in all case.  Don't use the size of the field if it's\n-\t     a self-referential type, since that's never what's wanted.  */\n-\t  if (TYPE_IS_PADDING_P (gnu_type)\n+\t  /* If the prefix is an object of a padded type, the GCC size isn't\n+\t     relevant to the programmer.  Normally what we want is the RM size,\n+\t     which was set from the specified size, but if it was not set, we\n+\t     want the size of the field.  Using the MAX of those two produces\n+\t     the right result in all cases.  Don't use the size of the field\n+\t     if it's self-referential, since that's never what's wanted.  */\n+\t  if (TREE_CODE (gnu_prefix) != TYPE_DECL\n+\t      && TYPE_IS_PADDING_P (gnu_type)\n \t      && TREE_CODE (gnu_expr) == COMPONENT_REF)\n \t    {\n \t      gnu_result = rm_size (gnu_type);\n-\t      if (!(CONTAINS_PLACEHOLDER_P\n-\t\t    (DECL_SIZE (TREE_OPERAND (gnu_expr, 1)))))\n+\t      if (!CONTAINS_PLACEHOLDER_P\n+\t\t   (DECL_SIZE (TREE_OPERAND (gnu_expr, 1))))\n \t\tgnu_result\n \t\t  = size_binop (MAX_EXPR, gnu_result,\n \t\t\t\tDECL_SIZE (TREE_OPERAND (gnu_expr, 1)));"}]}