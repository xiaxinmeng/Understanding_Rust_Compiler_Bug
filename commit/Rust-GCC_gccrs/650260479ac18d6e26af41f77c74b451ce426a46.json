{"sha": "650260479ac18d6e26af41f77c74b451ce426a46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwMjYwNDc5YWMxOGQ2ZTI2YWY0MWY3N2M3NGI0NTFjZTQyNmE0Ng==", "commit": {"author": {"name": "Easwaran Raman", "email": "eraman@google.com", "date": "2009-09-28T21:26:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-09-28T21:26:31Z"}, "message": "ifcvt.c (noce_try_abs): Recognize pattern and call expand_one_cmpl_abs_nojump.\n\n./:\t* ifcvt.c (noce_try_abs): Recognize pattern and call\n\texpand_one_cmpl_abs_nojump.\n\t* optabs.c (expand_one_cmpl_abs_nojump): New function.\n\t* optabs.h (expand_one_cmpl_abs_nojump): Declare.\ntestsuite/:\n\t* gcc.target/i386/ifcvt-onecmpl-abs-1.c: New file.\n\t* gcc.c-torture/execute/ifcvt-onecmpl-abs-1.c: New file.\n\nFrom-SVN: r152253", "tree": {"sha": "2b4602f59f93e1c9ebfa00346b0b70ecdd95b378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b4602f59f93e1c9ebfa00346b0b70ecdd95b378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650260479ac18d6e26af41f77c74b451ce426a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650260479ac18d6e26af41f77c74b451ce426a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650260479ac18d6e26af41f77c74b451ce426a46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650260479ac18d6e26af41f77c74b451ce426a46/comments", "author": null, "committer": null, "parents": [{"sha": "13ebf17b66c3ff8f4291f046158347191fe396c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ebf17b66c3ff8f4291f046158347191fe396c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ebf17b66c3ff8f4291f046158347191fe396c1"}], "stats": {"total": 135, "additions": 131, "deletions": 4}, "files": [{"sha": "38ac22c9a4fde407a5149f037ca39d5e9afe1cd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=650260479ac18d6e26af41f77c74b451ce426a46", "patch": "@@ -1,3 +1,10 @@\n+2009-09-28  Easwaran Raman  <eraman@google.com>\n+\n+\t* ifcvt.c (noce_try_abs): Recognize pattern and call\n+\texpand_one_cmpl_abs_nojump.\n+\t* optabs.c (expand_one_cmpl_abs_nojump): New function.\n+\t* optabs.h (expand_one_cmpl_abs_nojump): Declare.\n+\n 2009-09-28  Ian Lance Taylor  <iant@google.com>\n \n \tPR middle-end/40500"}, {"sha": "1ef2d21f903402ab4483004bdf6eae77cb26cff7", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=650260479ac18d6e26af41f77c74b451ce426a46", "patch": "@@ -1744,13 +1744,16 @@ noce_try_minmax (struct noce_if_info *if_info)\n   return TRUE;\n }\n \n-/* Convert \"if (a < 0) x = -a; else x = a;\" to \"x = abs(a);\", etc.  */\n+/* Convert \"if (a < 0) x = -a; else x = a;\" to \"x = abs(a);\",\n+   \"if (a < 0) x = ~a; else x = a;\" to \"x = one_cmpl_abs(a);\",\n+   etc.  */\n \n static int\n noce_try_abs (struct noce_if_info *if_info)\n {\n   rtx cond, earliest, target, seq, a, b, c;\n   int negate;\n+  bool one_cmpl = false;\n \n   /* Reject modes with signed zeros.  */\n   if (HONOR_SIGNED_ZEROS (GET_MODE (if_info->x)))\n@@ -1768,6 +1771,17 @@ noce_try_abs (struct noce_if_info *if_info)\n       c = a; a = b; b = c;\n       negate = 1;\n     }\n+  else if (GET_CODE (a) == NOT && rtx_equal_p (XEXP (a, 0), b))\n+    {\n+      negate = 0;\n+      one_cmpl = true;\n+    }\n+  else if (GET_CODE (b) == NOT && rtx_equal_p (XEXP (b, 0), a))\n+    {\n+      c = a; a = b; b = c;\n+      negate = 1;\n+      one_cmpl = true;\n+    }\n   else\n     return FALSE;\n \n@@ -1839,13 +1853,23 @@ noce_try_abs (struct noce_if_info *if_info)\n     }\n \n   start_sequence ();\n-\n-  target = expand_abs_nojump (GET_MODE (if_info->x), b, if_info->x, 1);\n+  if (one_cmpl)\n+    target = expand_one_cmpl_abs_nojump (GET_MODE (if_info->x), b,\n+                                         if_info->x);\n+  else\n+    target = expand_abs_nojump (GET_MODE (if_info->x), b, if_info->x, 1);\n \n   /* ??? It's a quandary whether cmove would be better here, especially\n      for integers.  Perhaps combine will clean things up.  */\n   if (target && negate)\n-    target = expand_simple_unop (GET_MODE (target), NEG, target, if_info->x, 0);\n+    {\n+      if (one_cmpl)\n+        target = expand_simple_unop (GET_MODE (target), NOT, target,\n+                                     if_info->x, 0);\n+      else\n+        target = expand_simple_unop (GET_MODE (target), NEG, target,\n+                                     if_info->x, 0);\n+    }\n \n   if (! target)\n     {"}, {"sha": "1c13623606062dff19c07b7907a584d6b7006717", "filename": "gcc/optabs.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=650260479ac18d6e26af41f77c74b451ce426a46", "patch": "@@ -3488,6 +3488,60 @@ expand_abs (enum machine_mode mode, rtx op0, rtx target,\n   return target;\n }\n \n+/* Emit code to compute the one's complement absolute value of OP0\n+   (if (OP0 < 0) OP0 = ~OP0), with result to TARGET if convenient.\n+   (TARGET may be NULL_RTX.)  The return value says where the result\n+   actually is to be found.\n+\n+   MODE is the mode of the operand; the mode of the result is\n+   different but can be deduced from MODE.  */\n+\n+rtx\n+expand_one_cmpl_abs_nojump (enum machine_mode mode, rtx op0, rtx target)\n+{\n+  rtx temp;\n+\n+  /* Not applicable for floating point modes.  */\n+  if (FLOAT_MODE_P (mode))\n+    return NULL_RTX;\n+\n+  /* If we have a MAX insn, we can do this as MAX (x, ~x).  */\n+  if (optab_handler (smax_optab, mode)->insn_code != CODE_FOR_nothing)\n+    {\n+      rtx last = get_last_insn ();\n+\n+      temp = expand_unop (mode, one_cmpl_optab, op0, NULL_RTX, 0);\n+      if (temp != 0)\n+\ttemp = expand_binop (mode, smax_optab, op0, temp, target, 0,\n+\t\t\t     OPTAB_WIDEN);\n+\n+      if (temp != 0)\n+\treturn temp;\n+\n+      delete_insns_since (last);\n+    }\n+\n+  /* If this machine has expensive jumps, we can do one's complement\n+     absolute value of X as (((signed) x >> (W-1)) ^ x).  */\n+\n+  if (GET_MODE_CLASS (mode) == MODE_INT\n+      && BRANCH_COST (optimize_insn_for_speed_p (),\n+\t             false) >= 2)\n+    {\n+      rtx extended = expand_shift (RSHIFT_EXPR, mode, op0,\n+\t\t\t\t   size_int (GET_MODE_BITSIZE (mode) - 1),\n+\t\t\t\t   NULL_RTX, 0);\n+\n+      temp = expand_binop (mode, xor_optab, extended, op0, target, 0,\n+\t\t\t   OPTAB_LIB_WIDEN);\n+\n+      if (temp != 0)\n+\treturn temp;\n+    }\n+\n+  return NULL_RTX;\n+}\n+\n /* A subroutine of expand_copysign, perform the copysign operation using the\n    abs and neg primitives advertised to exist on the target.  The assumption\n    is that we have a split register file, and leaving op0 in fp registers,"}, {"sha": "c4acb17eedd7bab09bc5eefb12be76451089caaa", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=650260479ac18d6e26af41f77c74b451ce426a46", "patch": "@@ -706,6 +706,9 @@ extern rtx expand_unop (enum machine_mode, optab, rtx, rtx, int);\n extern rtx expand_abs_nojump (enum machine_mode, rtx, rtx, int);\n extern rtx expand_abs (enum machine_mode, rtx, rtx, int, int);\n \n+/* Expand the one's complement absolute value operation.  */\n+extern rtx expand_one_cmpl_abs_nojump (enum machine_mode, rtx, rtx);\n+\n /* Expand the copysign operation.  */\n extern rtx expand_copysign (rtx, rtx, rtx);\n "}, {"sha": "c5f4438fd50585144c5151953c198e93000051c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=650260479ac18d6e26af41f77c74b451ce426a46", "patch": "@@ -1,3 +1,8 @@\n+2009-09-28  Easwaran Raman  <eraman@google.com>\n+\n+\t* gcc.target/i386/ifcvt-onecmpl-abs-1.c: New file.\n+\t* gcc.c-torture/execute/ifcvt-onecmpl-abs-1.c: New file.\n+\n 2009-09-28  Janis Johnson  <janis187@us.ibm.com>\n \n \t* g++.dg/dfp/dfp.exp: Run tests from c-c++-common/dfp."}, {"sha": "679e552f8482db43f0401c04249da619fb00cf5d", "filename": "gcc/testsuite/gcc.c-torture/execute/ifcvt-onecmpl-abs-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fifcvt-onecmpl-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fifcvt-onecmpl-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fifcvt-onecmpl-abs-1.c?ref=650260479ac18d6e26af41f77c74b451ce426a46", "patch": "@@ -0,0 +1,19 @@\n+\n+extern void abort(void);\n+\n+__attribute__ ((noinline))\n+int foo(int n)\n+{\n+  if (n < 0)\n+    n = ~n;\n+\n+  return n;\n+}\n+\n+int main(void)\n+{\n+  if (foo (-1) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "736053de25179a15e286592dcfe8bc997d3f8afa", "filename": "gcc/testsuite/gcc.target/i386/ifcvt-onecmpl-abs-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fifcvt-onecmpl-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650260479ac18d6e26af41f77c74b451ce426a46/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fifcvt-onecmpl-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fifcvt-onecmpl-abs-1.c?ref=650260479ac18d6e26af41f77c74b451ce426a46", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* This test checks for if-conversion of one's complement\n+ * abs function.  */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { scan-assembler \"sar\" } } */\n+/* { dg-final { scan-assembler \"xor\" } } */\n+\n+/* Check code generation for one's complement version of abs */\n+\n+int onecmplabs(int x)\n+{\n+  if (x < 0)\n+    x = ~x;\n+  return x;\n+}"}]}