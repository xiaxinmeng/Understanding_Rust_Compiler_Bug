{"sha": "7a412892a6b9234be08dee746a8b15b770756d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E0MTI4OTJhNmI5MjM0YmUwOGRlZTc0NmE4YjE1Yjc3MDc1NmQ5OQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T22:24:37Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T22:24:37Z"}, "message": "trans.h (struct gfc_ss, [...]): Move field gfc_ss::useflags into gfc_ss_info.\n\n\t* trans.h (struct gfc_ss, struct gfc_ss_info): Move field\n\tgfc_ss::useflags into gfc_ss_info.\n\t* trans-array.c (gfc_mark_ss_chain_used, gfc_trans_preloop_setup,\n\tgfc_trans_scalarizing_loops, gfc_trans_scalarized_boundary):\n\tUpdate reference chains.\n\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Ditto.\n\nFrom-SVN: r180875", "tree": {"sha": "202c68bdeb115b6b4d82e3cdab5e3f5f677ae71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202c68bdeb115b6b4d82e3cdab5e3f5f677ae71e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a412892a6b9234be08dee746a8b15b770756d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a412892a6b9234be08dee746a8b15b770756d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a412892a6b9234be08dee746a8b15b770756d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a412892a6b9234be08dee746a8b15b770756d99/comments", "author": null, "committer": null, "parents": [{"sha": "c3b0bfe175273179cf5dc786c571ea88867898b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b0bfe175273179cf5dc786c571ea88867898b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b0bfe175273179cf5dc786c571ea88867898b7"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "baa20a9de82f94dda67b1ba8ede0f140c2f78413", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7a412892a6b9234be08dee746a8b15b770756d99", "patch": "@@ -1,3 +1,13 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans.h (struct gfc_ss, struct gfc_ss_info): Move field\n+\tgfc_ss::useflags into gfc_ss_info.\n+\t* trans-array.c (gfc_mark_ss_chain_used, gfc_trans_preloop_setup,\n+\tgfc_trans_scalarizing_loops, gfc_trans_scalarized_boundary):\n+\tUpdate reference chains.\n+\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Ditto.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans.h (struct gfc_ss, struct gfc_ss_info): Move field"}, {"sha": "427bb7b53d1a92bb0fedf50d3ecd82a707fe3364", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7a412892a6b9234be08dee746a8b15b770756d99", "patch": "@@ -463,7 +463,7 @@ void\n gfc_mark_ss_chain_used (gfc_ss * ss, unsigned flags)\n {\n   for (; ss != gfc_ss_terminator; ss = ss->next)\n-    ss->useflags = flags;\n+    ss->info->useflags = flags;\n }\n \n static void gfc_free_ss (gfc_ss *);\n@@ -2906,7 +2906,7 @@ gfc_trans_preloop_setup (gfc_loopinfo * loop, int dim, int flag,\n     {\n       ss_info = ss->info;\n \n-      if ((ss->useflags & flag) == 0)\n+      if ((ss_info->useflags & flag) == 0)\n \tcontinue;\n \n       ss_type = ss_info->type;\n@@ -3148,7 +3148,7 @@ gfc_trans_scalarizing_loops (gfc_loopinfo * loop, stmtblock_t * body)\n \n   /* Clear all the used flags.  */\n   for (ss = loop->ss; ss != gfc_ss_terminator; ss = ss->loop_chain)\n-    ss->useflags = 0;\n+    ss->info->useflags = 0;\n }\n \n \n@@ -3185,7 +3185,7 @@ gfc_trans_scalarized_loop_boundary (gfc_loopinfo * loop, stmtblock_t * body)\n \n       ss_info = ss->info;\n \n-      if ((ss->useflags & 2) == 0)\n+      if ((ss_info->useflags & 2) == 0)\n \tcontinue;\n \n       ss_type = ss_info->type;"}, {"sha": "01d4ca3885fece6c4840c7d59861967ffe979e0c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7a412892a6b9234be08dee746a8b15b770756d99", "patch": "@@ -2898,7 +2898,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n       if (!sym->attr.elemental)\n \t{\n \t  gcc_assert (se->ss->info->type == GFC_SS_FUNCTION);\n-\t  if (se->ss->useflags)\n+\t  if (se->ss->info->useflags)\n \t    {\n \t      gcc_assert ((!comp && gfc_return_by_reference (sym)\n \t\t\t   && sym->result->attr.dimension)\n@@ -2983,7 +2983,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t  gfc_init_se (&parmse, se);\n \t  gfc_conv_derived_to_class (&parmse, e, fsym->ts);\n \t}\n-      else if (se->ss && se->ss->useflags)\n+      else if (se->ss && se->ss->info->useflags)\n \t{\n \t  /* An elemental function inside a scalarized loop.  */\n \t  gfc_init_se (&parmse, se);"}, {"sha": "fcc59d7086a684b66b9a3f19351e70c33b8c2dba", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=7a412892a6b9234be08dee746a8b15b770756d99", "patch": "@@ -6634,7 +6634,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_TRANSFER:\n-      if (se->ss && se->ss->useflags)\n+      if (se->ss && se->ss->info->useflags)\n \t/* Access the previously obtained result.  */\n \tgfc_conv_tmp_array_ref (se);\n       else"}, {"sha": "907c2713958ded37105c385fea8b95db3a1f91a1", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a412892a6b9234be08dee746a8b15b770756d99/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=7a412892a6b9234be08dee746a8b15b770756d99", "patch": "@@ -209,6 +209,11 @@ typedef struct gfc_ss_info\n     gfc_array_info array;\n   }\n   data;\n+\n+  /* This is used by assignments requiring temporaries.  The bits specify which\n+     loops the terms appear in.  This will be 1 for the RHS expressions,\n+     2 for the LHS expressions, and 3(=1|2) for the temporary.  */\n+  unsigned useflags:2;\n }\n gfc_ss_info;\n \n@@ -237,11 +242,9 @@ typedef struct gfc_ss\n   struct gfc_ss *loop_chain;\n   struct gfc_ss *next;\n \n-  /* This is used by assignments requiring temporaries. The bits specify which\n-     loops the terms appear in.  This will be 1 for the RHS expressions,\n-     2 for the LHS expressions, and 3(=1|2) for the temporary.  The bit\n-     'where' suppresses precalculation of scalars in WHERE assignments.  */\n-  unsigned useflags:2, where:1, is_alloc_lhs:1;\n+  /* The bit 'where' suppresses precalculation of scalars in WHERE assignments.\n+  */\n+  unsigned where:1, is_alloc_lhs:1;\n }\n gfc_ss;\n #define gfc_get_ss() XCNEW (gfc_ss)"}]}