{"sha": "bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyN2ZmYWUxYjYyODMxZGE3OGFjYjAzNjJlZDBkY2FiYjFmM2YxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-12T08:33:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-12T08:33:14Z"}, "message": "re PR target/71019 (AVX512BW instructions emitted even without AVX512BW)\n\n\tPR target/71019\n\t* config/i386/sse.md (<sse2_avx2>_packssdw<mask_name>,\n\t<sse4_1_avx2>_packusdw<mask_name>): Make sure EVEX encoded insn\n\tis not emitted unless TARGET_AVX512BW.\n\t(<sse2_avx2>_packuswb<mask_name>, <sse2_avx2>_packsswb<mask_name>):\n\tLikewise.  For TARGET_AVX512BW, use \"=v\" constraint instead of \"=x\"\n\tfor the result operand.\n\n\t* gcc.target/i386/avx512vl-pack-1.c: New test.\n\t* gcc.target/i386/avx512vl-pack-2.c: New test.\n\t* gcc.target/i386/avx512bw-pack-2.c: New test.\n\nFrom-SVN: r236163", "tree": {"sha": "815d489297b9866137d53839b25606a1e6d0a19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815d489297b9866137d53839b25606a1e6d0a19c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "515d7412eaa983bccaf84ed970c98978a5a1e168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515d7412eaa983bccaf84ed970c98978a5a1e168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515d7412eaa983bccaf84ed970c98978a5a1e168"}], "stats": {"total": 339, "additions": 316, "deletions": 23}, "files": [{"sha": "153c0a7d08553551263650abc0a14bd9ab72d665", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "patch": "@@ -1,5 +1,13 @@\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/71019\n+\t* config/i386/sse.md (<sse2_avx2>_packssdw<mask_name>,\n+\t<sse4_1_avx2>_packusdw<mask_name>): Make sure EVEX encoded insn\n+\tis not emitted unless TARGET_AVX512BW.\n+\t(<sse2_avx2>_packuswb<mask_name>, <sse2_avx2>_packsswb<mask_name>):\n+\tLikewise.  For TARGET_AVX512BW, use \"=v\" constraint instead of \"=x\"\n+\tfor the result operand.\n+\n \t* config/i386/sse.md (*vec_setv4sf_sse4_1, sse4_1_insertps): Use v\n \tconstraint instead of x in avx alternatives.  Use maybe_evex instead\n \tof vex prefix."}, {"sha": "6c5dd62e7b46deb33c403f17e747c5acab9b3f0f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "patch": "@@ -11500,54 +11500,57 @@\n })\n \n (define_insn \"<sse2_avx2>_packsswb<mask_name>\"\n-  [(set (match_operand:VI1_AVX512 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VI1_AVX512 0 \"register_operand\" \"=x,x,v\")\n \t(vec_concat:VI1_AVX512\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n+\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,x,v\"))\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,xm,vm\"))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packsswb\\t{%2, %0|%0, %2}\n+   vpacksswb\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\n    vpacksswb\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n    (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,maybe_evex\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix\" \"orig,<mask_prefix>,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse2_avx2>_packssdw<mask_name>\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x,v\")\n \t(vec_concat:VI2_AVX2\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n+\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,x,v\"))\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,xm,vm\"))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packssdw\\t{%2, %0|%0, %2}\n+   vpackssdw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\n    vpackssdw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n    (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix\" \"orig,<mask_prefix>,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse2_avx2>_packuswb<mask_name>\"\n-  [(set (match_operand:VI1_AVX512 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VI1_AVX512 0 \"register_operand\" \"=x,x,v\")\n \t(vec_concat:VI1_AVX512\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n+\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,x,v\"))\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"xBm,xm,vm\"))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packuswb\\t{%2, %0|%0, %2}\n+   vpackuswb\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\n    vpackuswb\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n    (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix\" \"orig,<mask_prefix>,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"avx512bw_interleave_highv64qi<mask_name>\"\n@@ -14572,21 +14575,22 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_packusdw<mask_name>\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=Yr,*x,v\")\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=Yr,*x,x,v\")\n \t(vec_concat:VI2_AVX2\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,0,v\"))\n+\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,0,x,v\"))\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"YrBm,*xBm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"vector_operand\" \"YrBm,*xBm,xm,vm\"))))]\n   \"TARGET_SSE4_1 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packusdw\\t{%2, %0|%0, %2}\n    packusdw\\t{%2, %0|%0, %2}\n+   vpackusdw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\n    vpackusdw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx512bw\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"prefix\" \"orig,orig,<mask_prefix>,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_pblendvb\""}, {"sha": "ec16edd781dad0d965c509477efa57e69481a04e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "patch": "@@ -1,5 +1,10 @@\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/71019\n+\t* gcc.target/i386/avx512vl-pack-1.c: New test.\n+\t* gcc.target/i386/avx512vl-pack-2.c: New test.\n+\t* gcc.target/i386/avx512bw-pack-2.c: New test.\n+\n \t* gcc.target/i386/avx512vl-vinsertps-1.c: New test.\n \n \t* gcc.target/i386/avx512dq-abs-copysign-1.c: New test."}, {"sha": "3b9c201b0422dbf9ba4604302802908c5573801c", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pack-2.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pack-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pack-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pack-2.c?ref=bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packs_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[^\\n\\r\\]*xmm16\" 1 } } */\n+\n+__m128i\n+f2 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packs_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[^\\n\\r\\]*xmm16\" 1 } } */\n+\n+__m128i\n+f3 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packus_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[^\\n\\r\\]*xmm16\" 1 } } */\n+\n+__m128i\n+f4 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packus_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[^\\n\\r\\]*xmm16\" 1 } } */\n+\n+__m256i\n+f5 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packs_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[^\\n\\r\\]*ymm16\" 1 } } */\n+\n+__m256i\n+f6 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packs_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[^\\n\\r\\]*ymm16\" 1 } } */\n+\n+__m256i\n+f7 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packus_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[^\\n\\r\\]*ymm16\" 1 } } */\n+\n+__m256i\n+f8 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packus_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[^\\n\\r\\]*ymm16\" 1 } } */"}, {"sha": "a589d63ed3b499bf8545df7622cf88f31879e4f1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pack-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pack-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pack-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pack-1.c?ref=bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512bw\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i a, __m128i b)\n+{\n+  return _mm_packs_epi16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+\n+__m128i\n+f2 (__m128i a, __m128i b)\n+{\n+  return _mm_packs_epi32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+\n+__m128i\n+f3 (__m128i a, __m128i b)\n+{\n+  return _mm_packus_epi16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+\n+__m128i\n+f4 (__m128i a, __m128i b)\n+{\n+  return _mm_packus_epi32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+\n+__m256i\n+f5 (__m256i a, __m256i b)\n+{\n+  return _mm256_packs_epi16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */\n+\n+__m256i\n+f6 (__m256i a, __m256i b)\n+{\n+  return _mm256_packs_epi32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */\n+\n+__m256i\n+f7 (__m256i a, __m256i b)\n+{\n+  return _mm256_packus_epi16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */\n+\n+__m256i\n+f8 (__m256i a, __m256i b)\n+{\n+  return _mm256_packus_epi32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */"}, {"sha": "05820065e9fb90c5a2ace5d662a2a11170efae80", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pack-2.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pack-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pack-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pack-2.c?ref=bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512bw\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packs_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpacksswb\\[^\\n\\r\\]*xmm16\" } } */\n+\n+__m128i\n+f2 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packs_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpackssdw\\[^\\n\\r\\]*xmm16\" } } */\n+\n+__m128i\n+f3 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packus_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpackuswb\\[^\\n\\r\\]*xmm16\" } } */\n+\n+__m128i\n+f4 (__m128i a, __m128i b)\n+{\n+  register __m128i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm_packus_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpackusdw\\[^\\n\\r\\]*xmm16\" } } */\n+\n+__m256i\n+f5 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packs_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpacksswb\\[^\\n\\r\\]*ymm16\" } } */\n+\n+__m256i\n+f6 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packs_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpackssdw\\[^\\n\\r\\]*ymm16\" } } */\n+\n+__m256i\n+f7 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packus_epi16 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpackuswb\\[^\\n\\r\\]*ymm16\" } } */\n+\n+__m256i\n+f8 (__m256i a, __m256i b)\n+{\n+  register __m256i c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm256_packus_epi32 (c, b);\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[^\\n\\r\\]*ymm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpackusdw\\[^\\n\\r\\]*ymm16\" } } */"}]}