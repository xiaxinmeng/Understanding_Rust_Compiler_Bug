{"sha": "9a0e3259f44ad2de9c65f14f756dab01b3598391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEwZTMyNTlmNDRhZDJkZTljNjVmMTRmNzU2ZGFiMDFiMzU5ODM5MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-12T01:31:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-12T01:31:45Z"}, "message": "libgo: Update to weekly.2011-12-14.\n\nFrom-SVN: r183118", "tree": {"sha": "86a3b8019380d5fad53258c4baba3dd9e1e7c736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a3b8019380d5fad53258c4baba3dd9e1e7c736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a0e3259f44ad2de9c65f14f756dab01b3598391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0e3259f44ad2de9c65f14f756dab01b3598391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0e3259f44ad2de9c65f14f756dab01b3598391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0e3259f44ad2de9c65f14f756dab01b3598391/comments", "author": null, "committer": null, "parents": [{"sha": "c6135f063335419e4b5df0b4e1caf145882c8a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6135f063335419e4b5df0b4e1caf145882c8a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6135f063335419e4b5df0b4e1caf145882c8a4b"}], "stats": {"total": 5179, "additions": 3520, "deletions": 1659}, "files": [{"sha": "5cada3af480fde3fc80c91981119b4740a5a8ec0", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -9943,7 +9943,11 @@ Call_expression::do_get_tree(Translate_context* context)\n \t      fn = build_fold_addr_expr_loc(location.gcc_location(),\n                                             excess_fndecl);\n \t      for (int i = 0; i < nargs; ++i)\n-\t\targs[i] = ::convert(excess_type, args[i]);\n+\t\t{\n+\t\t  if (SCALAR_FLOAT_TYPE_P(TREE_TYPE(args[i]))\n+\t\t      || COMPLEX_FLOAT_TYPE_P(TREE_TYPE(args[i])))\n+\t\t    args[i] = ::convert(excess_type, args[i]);\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "9e40851b384df1d6d6330ca08f0a8af64290e2c9", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -125,17 +125,108 @@ Gogo::define_builtin_function_trees()\n \t\t\t\t\t  NULL_TREE),\n \t\t false);\n \n-  // We provide sqrt for the math library.\n-  define_builtin(BUILT_IN_SQRT, \"__builtin_sqrt\", \"sqrt\",\n+  // We provide some functions for the math library.\n+  tree math_function_type = build_function_type_list(double_type_node,\n+\t\t\t\t\t\t     double_type_node,\n+\t\t\t\t\t\t     NULL_TREE);\n+  tree math_function_type_long =\n+    build_function_type_list(long_double_type_node, long_double_type_node,\n+\t\t\t     long_double_type_node, NULL_TREE);\n+  tree math_function_type_two = build_function_type_list(double_type_node,\n+\t\t\t\t\t\t\t double_type_node,\n+\t\t\t\t\t\t\t double_type_node,\n+\t\t\t\t\t\t\t NULL_TREE);\n+  tree math_function_type_long_two =\n+    build_function_type_list(long_double_type_node, long_double_type_node,\n+\t\t\t     long_double_type_node, NULL_TREE);\n+  define_builtin(BUILT_IN_ACOS, \"__builtin_acos\", \"acos\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_ACOSL, \"__builtin_acosl\", \"acosl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_ASIN, \"__builtin_asin\", \"asin\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_ASINL, \"__builtin_asinl\", \"asinl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_ATAN, \"__builtin_atan\", \"atan\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_ATANL, \"__builtin_atanl\", \"atanl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_ATAN2, \"__builtin_atan2\", \"atan2\",\n+\t\t math_function_type_two, true);\n+  define_builtin(BUILT_IN_ATAN2L, \"__builtin_atan2l\", \"atan2l\",\n+\t\t math_function_type_long_two, true);\n+  define_builtin(BUILT_IN_CEIL, \"__builtin_ceil\", \"ceil\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_CEILL, \"__builtin_ceill\", \"ceill\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_COS, \"__builtin_cos\", \"cos\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_COSL, \"__builtin_cosl\", \"cosl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_EXP, \"__builtin_exp\", \"exp\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_EXPL, \"__builtin_expl\", \"expl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_EXPM1, \"__builtin_expm1\", \"expm1\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_EXPM1L, \"__builtin_expm1l\", \"expm1l\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_FABS, \"__builtin_fabs\", \"fabs\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_FABSL, \"__builtin_fabsl\", \"fabsl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_FLOOR, \"__builtin_floor\", \"floor\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_FLOORL, \"__builtin_floorl\", \"floorl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_FMOD, \"__builtin_fmod\", \"fmod\",\n+\t\t math_function_type_two, true);\n+  define_builtin(BUILT_IN_FMODL, \"__builtin_fmodl\", \"fmodl\",\n+\t\t math_function_type_long_two, true);\n+  define_builtin(BUILT_IN_LDEXP, \"__builtin_ldexp\", \"ldexp\",\n \t\t build_function_type_list(double_type_node,\n \t\t\t\t\t  double_type_node,\n+\t\t\t\t\t  integer_type_node,\n \t\t\t\t\t  NULL_TREE),\n \t\t true);\n-  define_builtin(BUILT_IN_SQRTL, \"__builtin_sqrtl\", \"sqrtl\",\n+  define_builtin(BUILT_IN_LDEXPL, \"__builtin_ldexpl\", \"ldexpl\",\n \t\t build_function_type_list(long_double_type_node,\n \t\t\t\t\t  long_double_type_node,\n+\t\t\t\t\t  integer_type_node,\n \t\t\t\t\t  NULL_TREE),\n \t\t true);\n+  define_builtin(BUILT_IN_LOG, \"__builtin_log\", \"log\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_LOGL, \"__builtin_logl\", \"logl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_LOG1P, \"__builtin_log1p\", \"log1p\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_LOG1PL, \"__builtin_log1pl\", \"log1pl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_LOG10, \"__builtin_log10\", \"log10\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_LOG10L, \"__builtin_log10l\", \"log10l\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_LOG2, \"__builtin_log2\", \"log2\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_LOG2L, \"__builtin_log2l\", \"log2l\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_SIN, \"__builtin_sin\", \"sin\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_SINL, \"__builtin_sinl\", \"sinl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_SQRT, \"__builtin_sqrt\", \"sqrt\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_SQRTL, \"__builtin_sqrtl\", \"sqrtl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_TAN, \"__builtin_tan\", \"tan\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_TANL, \"__builtin_tanl\", \"tanl\",\n+\t\t math_function_type_long, true);\n+  define_builtin(BUILT_IN_TRUNC, \"__builtin_trunc\", \"trunc\",\n+\t\t math_function_type, true);\n+  define_builtin(BUILT_IN_TRUNCL, \"__builtin_truncl\", \"truncl\",\n+\t\t math_function_type_long, true);\n \n   // We use __builtin_return_address in the thunk we build for\n   // functions which call recover."}, {"sha": "bd71072101b68c0a93f16355e725393e811535d2", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -1,4 +1,4 @@\n-0c39eee85b0d\n+82fdc445f2ff\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "3c34c4b6bcb4cf076589f8f804d513f8943119b1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -576,6 +576,7 @@ go_html_files = \\\n \tgo/html/doctype.go \\\n \tgo/html/entity.go \\\n \tgo/html/escape.go \\\n+\tgo/html/foreign.go \\\n \tgo/html/node.go \\\n \tgo/html/parse.go \\\n \tgo/html/render.go \\\n@@ -610,14 +611,11 @@ go_math_files = \\\n \tgo/math/dim.go \\\n \tgo/math/erf.go \\\n \tgo/math/exp.go \\\n-\tgo/math/exp_port.go \\\n-\tgo/math/exp2.go \\\n \tgo/math/expm1.go \\\n \tgo/math/floor.go \\\n \tgo/math/frexp.go \\\n \tgo/math/gamma.go \\\n \tgo/math/hypot.go \\\n-\tgo/math/hypot_port.go \\\n \tgo/math/j0.go \\\n \tgo/math/j1.go \\\n \tgo/math/jn.go \\\n@@ -638,7 +636,6 @@ go_math_files = \\\n \tgo/math/sincos.go \\\n \tgo/math/sinh.go \\\n \tgo/math/sqrt.go \\\n-\tgo/math/sqrt_port.go \\\n \tgo/math/tan.go \\\n \tgo/math/tanh.go \\\n \tgo/math/unsafe.go\n@@ -888,7 +885,6 @@ go_testing_files = \\\n go_time_files = \\\n \tgo/time/format.go \\\n \tgo/time/sleep.go \\\n-\tgo/time/sys.go \\\n \tgo/time/sys_unix.go \\\n \tgo/time/tick.go \\\n \tgo/time/time.go \\"}, {"sha": "ebc63f0f950613321725c69854382067480606d8", "filename": "libgo/Makefile.in", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -962,6 +962,7 @@ go_html_files = \\\n \tgo/html/doctype.go \\\n \tgo/html/entity.go \\\n \tgo/html/escape.go \\\n+\tgo/html/foreign.go \\\n \tgo/html/node.go \\\n \tgo/html/parse.go \\\n \tgo/html/render.go \\\n@@ -996,14 +997,11 @@ go_math_files = \\\n \tgo/math/dim.go \\\n \tgo/math/erf.go \\\n \tgo/math/exp.go \\\n-\tgo/math/exp_port.go \\\n-\tgo/math/exp2.go \\\n \tgo/math/expm1.go \\\n \tgo/math/floor.go \\\n \tgo/math/frexp.go \\\n \tgo/math/gamma.go \\\n \tgo/math/hypot.go \\\n-\tgo/math/hypot_port.go \\\n \tgo/math/j0.go \\\n \tgo/math/j1.go \\\n \tgo/math/jn.go \\\n@@ -1024,7 +1022,6 @@ go_math_files = \\\n \tgo/math/sincos.go \\\n \tgo/math/sinh.go \\\n \tgo/math/sqrt.go \\\n-\tgo/math/sqrt_port.go \\\n \tgo/math/tan.go \\\n \tgo/math/tanh.go \\\n \tgo/math/unsafe.go\n@@ -1202,7 +1199,6 @@ go_testing_files = \\\n go_time_files = \\\n \tgo/time/format.go \\\n \tgo/time/sleep.go \\\n-\tgo/time/sys.go \\\n \tgo/time/sys_unix.go \\\n \tgo/time/tick.go \\\n \tgo/time/time.go \\"}, {"sha": "0a6513d0cac01a8bf6cb8d9bef16db439e47b959", "filename": "libgo/go/archive/tar/reader_test.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Freader_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -10,7 +10,6 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"os\"\n-\t\"reflect\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -127,7 +126,7 @@ testLoop:\n \t\t\t\tf.Close()\n \t\t\t\tcontinue testLoop\n \t\t\t}\n-\t\t\tif !reflect.DeepEqual(hdr, header) {\n+\t\t\tif *hdr != *header {\n \t\t\t\tt.Errorf(\"test %d, entry %d: Incorrect header:\\nhave %+v\\nwant %+v\",\n \t\t\t\t\ti, j, *hdr, *header)\n \t\t\t}\n@@ -201,7 +200,7 @@ func TestIncrementalRead(t *testing.T) {\n \t\t}\n \n \t\t// check the header\n-\t\tif !reflect.DeepEqual(hdr, headers[nread]) {\n+\t\tif *hdr != *headers[nread] {\n \t\t\tt.Errorf(\"Incorrect header:\\nhave %+v\\nwant %+v\",\n \t\t\t\t*hdr, headers[nread])\n \t\t}"}, {"sha": "9594fe8e508bc3b0e8b6382581853e2cf9f531bc", "filename": "libgo/go/archive/zip/reader_test.go", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"encoding/binary\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"os\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -25,7 +26,7 @@ type ZipTestFile struct {\n \tContent []byte // if blank, will attempt to compare against File\n \tFile    string // name of file to compare to (relative to testdata/)\n \tMtime   string // modified time in format \"mm-dd-yy hh:mm:ss\"\n-\tMode    uint32\n+\tMode    os.FileMode\n }\n \n // Caution: The Mtime values found for the test files should correspond to\n@@ -47,13 +48,13 @@ var tests = []ZipTest{\n \t\t\t\tName:    \"test.txt\",\n \t\t\t\tContent: []byte(\"This is a test text file.\\n\"),\n \t\t\t\tMtime:   \"09-05-10 12:12:02\",\n-\t\t\t\tMode:    0x81a4,\n+\t\t\t\tMode:    0644,\n \t\t\t},\n \t\t\t{\n \t\t\t\tName:  \"gophercolor16x16.png\",\n \t\t\t\tFile:  \"gophercolor16x16.png\",\n \t\t\t\tMtime: \"09-05-10 15:52:58\",\n-\t\t\t\tMode:  0x81a4,\n+\t\t\t\tMode:  0644,\n \t\t\t},\n \t\t},\n \t},\n@@ -64,6 +65,7 @@ var tests = []ZipTest{\n \t\t\t\tName:  \"r/r.zip\",\n \t\t\t\tFile:  \"r.zip\",\n \t\t\t\tMtime: \"03-04-10 00:24:16\",\n+\t\t\t\tMode:  0666,\n \t\t\t},\n \t\t},\n \t},\n@@ -76,9 +78,43 @@ var tests = []ZipTest{\n \t\t\t\tName:    \"filename\",\n \t\t\t\tContent: []byte(\"This is a test textfile.\\n\"),\n \t\t\t\tMtime:   \"02-02-11 13:06:20\",\n+\t\t\t\tMode:    0666,\n \t\t\t},\n \t\t},\n \t},\n+\t{\n+\t\t// created in windows XP file manager.\n+\t\tName: \"winxp.zip\",\n+\t\tFile: crossPlatform,\n+\t},\n+\t{\n+\t\t// created by Zip 3.0 under Linux\n+\t\tName: \"unix.zip\",\n+\t\tFile: crossPlatform,\n+\t},\n+}\n+\n+var crossPlatform = []ZipTestFile{\n+\t{\n+\t\tName:    \"hello\",\n+\t\tContent: []byte(\"world \\r\\n\"),\n+\t\tMode:    0666,\n+\t},\n+\t{\n+\t\tName:    \"dir/bar\",\n+\t\tContent: []byte(\"foo \\r\\n\"),\n+\t\tMode:    0666,\n+\t},\n+\t{\n+\t\tName:    \"dir/empty/\",\n+\t\tContent: []byte{},\n+\t\tMode:    os.ModeDir | 0777,\n+\t},\n+\t{\n+\t\tName:    \"readonly\",\n+\t\tContent: []byte(\"important \\r\\n\"),\n+\t\tMode:    0444,\n+\t},\n }\n \n func TestReader(t *testing.T) {\n@@ -159,13 +195,15 @@ func readTestFile(t *testing.T, ft ZipTestFile, f *File) {\n \t\tt.Errorf(\"name=%q, want %q\", f.Name, ft.Name)\n \t}\n \n-\tmtime, err := time.Parse(\"01-02-06 15:04:05\", ft.Mtime)\n-\tif err != nil {\n-\t\tt.Error(err)\n-\t\treturn\n-\t}\n-\tif ft := f.ModTime(); !ft.Equal(mtime) {\n-\t\tt.Errorf(\"%s: mtime=%s, want %s\", f.Name, ft, mtime)\n+\tif ft.Mtime != \"\" {\n+\t\tmtime, err := time.Parse(\"01-02-06 15:04:05\", ft.Mtime)\n+\t\tif err != nil {\n+\t\t\tt.Error(err)\n+\t\t\treturn\n+\t\t}\n+\t\tif ft := f.ModTime(); !ft.Equal(mtime) {\n+\t\t\tt.Errorf(\"%s: mtime=%s, want %s\", f.Name, ft, mtime)\n+\t\t}\n \t}\n \n \ttestFileMode(t, f, ft.Mode)\n@@ -191,7 +229,7 @@ func readTestFile(t *testing.T, ft ZipTestFile, f *File) {\n \tr.Close()\n \n \tvar c []byte\n-\tif len(ft.Content) != 0 {\n+\tif ft.Content != nil {\n \t\tc = ft.Content\n \t} else if c, err = ioutil.ReadFile(\"testdata/\" + ft.File); err != nil {\n \t\tt.Error(err)\n@@ -211,7 +249,7 @@ func readTestFile(t *testing.T, ft ZipTestFile, f *File) {\n \t}\n }\n \n-func testFileMode(t *testing.T, f *File, want uint32) {\n+func testFileMode(t *testing.T, f *File, want os.FileMode) {\n \tmode, err := f.Mode()\n \tif want == 0 {\n \t\tif err == nil {\n@@ -220,7 +258,7 @@ func testFileMode(t *testing.T, f *File, want uint32) {\n \t} else if err != nil {\n \t\tt.Errorf(\"%s mode: %s\", f.Name, err)\n \t} else if mode != want {\n-\t\tt.Errorf(\"%s mode: want 0x%x, got 0x%x\", f.Name, want, mode)\n+\t\tt.Errorf(\"%s mode: want %v, got %v\", f.Name, want, mode)\n \t}\n }\n "}, {"sha": "c53a83c4e788cd01d5799dd92cd3e24ab4643908", "filename": "libgo/go/archive/zip/struct.go", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Fstruct.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -12,7 +12,7 @@ This package does not support ZIP64 or disk spanning.\n package zip\n \n import (\n-\t\"errors\"\n+\t\"os\"\n \t\"time\"\n )\n \n@@ -32,7 +32,11 @@ const (\n \tdataDescriptorLen        = 12\n \n \t// Constants for the first byte in CreatorVersion\n-\tcreatorUnix = 3\n+\tcreatorFAT    = 0\n+\tcreatorUnix   = 3\n+\tcreatorNTFS   = 11\n+\tcreatorVFAT   = 14\n+\tcreatorMacOSX = 19\n )\n \n type FileHeader struct {\n@@ -98,17 +102,85 @@ func (h *FileHeader) ModTime() time.Time {\n \treturn msDosTimeToTime(h.ModifiedDate, h.ModifiedTime)\n }\n \n+// traditional names for Unix constants\n+const (\n+\ts_IFMT  = 0xf000\n+\ts_IFDIR = 0x4000\n+\ts_IFREG = 0x8000\n+\ts_ISUID = 0x800\n+\ts_ISGID = 0x400\n+\n+\tmsdosDir      = 0x10\n+\tmsdosReadOnly = 0x01\n+)\n+\n // Mode returns the permission and mode bits for the FileHeader.\n // An error is returned in case the information is not available.\n-func (h *FileHeader) Mode() (mode uint32, err error) {\n-\tif h.CreatorVersion>>8 == creatorUnix {\n-\t\treturn h.ExternalAttrs >> 16, nil\n+func (h *FileHeader) Mode() (mode os.FileMode, err error) {\n+\tswitch h.CreatorVersion >> 8 {\n+\tcase creatorUnix, creatorMacOSX:\n+\t\tmode = unixModeToFileMode(h.ExternalAttrs >> 16)\n+\tcase creatorNTFS, creatorVFAT, creatorFAT:\n+\t\tmode = msdosModeToFileMode(h.ExternalAttrs)\n \t}\n-\treturn 0, errors.New(\"file mode not available\")\n+\tif len(h.Name) > 0 && h.Name[len(h.Name)-1] == '/' {\n+\t\tmode |= os.ModeDir\n+\t}\n+\treturn mode, nil\n }\n \n // SetMode changes the permission and mode bits for the FileHeader.\n-func (h *FileHeader) SetMode(mode uint32) {\n+func (h *FileHeader) SetMode(mode os.FileMode) {\n \th.CreatorVersion = h.CreatorVersion&0xff | creatorUnix<<8\n-\th.ExternalAttrs = mode << 16\n+\th.ExternalAttrs = fileModeToUnixMode(mode) << 16\n+\n+\t// set MSDOS attributes too, as the original zip does.\n+\tif mode&os.ModeDir != 0 {\n+\t\th.ExternalAttrs |= msdosDir\n+\t}\n+\tif mode&0200 == 0 {\n+\t\th.ExternalAttrs |= msdosReadOnly\n+\t}\n+}\n+\n+func msdosModeToFileMode(m uint32) (mode os.FileMode) {\n+\tif m&msdosDir != 0 {\n+\t\tmode = os.ModeDir | 0777\n+\t} else {\n+\t\tmode = 0666\n+\t}\n+\tif m&msdosReadOnly != 0 {\n+\t\tmode &^= 0222\n+\t}\n+\treturn mode\n+}\n+\n+func fileModeToUnixMode(mode os.FileMode) uint32 {\n+\tvar m uint32\n+\tif mode&os.ModeDir != 0 {\n+\t\tm = s_IFDIR\n+\t} else {\n+\t\tm = s_IFREG\n+\t}\n+\tif mode&os.ModeSetuid != 0 {\n+\t\tm |= s_ISUID\n+\t}\n+\tif mode&os.ModeSetgid != 0 {\n+\t\tm |= s_ISGID\n+\t}\n+\treturn m | uint32(mode&0777)\n+}\n+\n+func unixModeToFileMode(m uint32) os.FileMode {\n+\tvar mode os.FileMode\n+\tif m&s_IFMT == s_IFDIR {\n+\t\tmode |= os.ModeDir\n+\t}\n+\tif m&s_ISGID != 0 {\n+\t\tmode |= os.ModeSetgid\n+\t}\n+\tif m&s_ISUID != 0 {\n+\t\tmode |= os.ModeSetuid\n+\t}\n+\treturn mode | os.FileMode(m&0777)\n }"}, {"sha": "ce1a981b2806d7e7a4026383622bf033aac426a4", "filename": "libgo/go/archive/zip/testdata/unix.zip", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Funix.zip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Funix.zip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Funix.zip?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391"}, {"sha": "3919322f0c5f8be8f1a214af712b6e86b4d04aef", "filename": "libgo/go/archive/zip/testdata/winxp.zip", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Fwinxp.zip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Fwinxp.zip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Ftestdata%2Fwinxp.zip?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391"}, {"sha": "5a576b1c32c3abd36cbb9569db1ee7c16d4b3d4a", "filename": "libgo/go/archive/zip/writer_test.go", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Fwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Farchive%2Fzip%2Fwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Fwriter_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -8,6 +8,7 @@ import (\n \t\"bytes\"\n \t\"io/ioutil\"\n \t\"math/rand\"\n+\t\"os\"\n \t\"testing\"\n )\n \n@@ -17,20 +18,39 @@ type WriteTest struct {\n \tName   string\n \tData   []byte\n \tMethod uint16\n-\tMode   uint32\n+\tMode   os.FileMode\n }\n \n var writeTests = []WriteTest{\n \t{\n \t\tName:   \"foo\",\n \t\tData:   []byte(\"Rabbits, guinea pigs, gophers, marsupial rats, and quolls.\"),\n \t\tMethod: Store,\n+\t\tMode:   0666,\n \t},\n \t{\n \t\tName:   \"bar\",\n \t\tData:   nil, // large data set in the test\n \t\tMethod: Deflate,\n-\t\tMode:   0x81ed,\n+\t\tMode:   0644,\n+\t},\n+\t{\n+\t\tName:   \"setuid\",\n+\t\tData:   []byte(\"setuid file\"),\n+\t\tMethod: Deflate,\n+\t\tMode:   0755 | os.ModeSetuid,\n+\t},\n+\t{\n+\t\tName:   \"setgid\",\n+\t\tData:   []byte(\"setgid file\"),\n+\t\tMethod: Deflate,\n+\t\tMode:   0755 | os.ModeSetgid,\n+\t},\n+\t{\n+\t\tName:   \"setgid\",\n+\t\tData:   []byte(\"setgid file\"),\n+\t\tMethod: Deflate,\n+\t\tMode:   0755 | os.ModeSetgid,\n \t},\n }\n "}, {"sha": "907a9dcb719aeddfa130c5fa74ec444049da7748", "filename": "libgo/go/bufio/bufio.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbufio%2Fbufio.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbufio%2Fbufio.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -52,12 +52,14 @@ type Reader struct {\n \tlastRuneSize int\n }\n \n+const minReadBufferSize = 16\n+\n // NewReaderSize creates a new Reader whose buffer has the specified size,\n-// which must be greater than one.  If the argument io.Reader is already a\n+// which must be at least 16 bytes.  If the argument io.Reader is already a\n // Reader with large enough size, it returns the underlying Reader.\n // It returns the Reader and any error.\n func NewReaderSize(rd io.Reader, size int) (*Reader, error) {\n-\tif size <= 1 {\n+\tif size < minReadBufferSize {\n \t\treturn nil, BufSizeError(size)\n \t}\n \t// Is it already a Reader?"}, {"sha": "6463bbb9cb3fde048fae35db8fffcb64bf7b31c8", "filename": "libgo/go/bufio/bufio_test.go", "status": "modified", "additions": 46, "deletions": 49, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -135,9 +135,10 @@ var bufreaders = []bufReader{\n \t{\"lines\", readLines},\n }\n \n+const minReadBufferSize = 16\n+\n var bufsizes = []int{\n-\t2, 3, 4, 5, 6, 7, 8, 9, 10,\n-\t23, 32, 46, 64, 93, 128, 1024, 4096,\n+\tminReadBufferSize, 23, 32, 46, 64, 93, 128, 1024, 4096,\n }\n \n func TestReader(t *testing.T) {\n@@ -514,27 +515,32 @@ func TestWriteString(t *testing.T) {\n }\n \n func TestBufferFull(t *testing.T) {\n-\tbuf, _ := NewReaderSize(strings.NewReader(\"hello, world\"), 5)\n-\tline, err := buf.ReadSlice(',')\n-\tif string(line) != \"hello\" || err != ErrBufferFull {\n+\tconst longString = \"And now, hello, world! It is the time for all good men to come to the aid of their party\"\n+\tbuf, err := NewReaderSize(strings.NewReader(longString), minReadBufferSize)\n+\tif err != nil {\n+\t\tt.Fatal(\"NewReaderSize:\", err)\n+\t}\n+\tline, err := buf.ReadSlice('!')\n+\tif string(line) != \"And now, hello, \" || err != ErrBufferFull {\n \t\tt.Errorf(\"first ReadSlice(,) = %q, %v\", line, err)\n \t}\n-\tline, err = buf.ReadSlice(',')\n-\tif string(line) != \",\" || err != nil {\n+\tline, err = buf.ReadSlice('!')\n+\tif string(line) != \"world!\" || err != nil {\n \t\tt.Errorf(\"second ReadSlice(,) = %q, %v\", line, err)\n \t}\n }\n \n func TestPeek(t *testing.T) {\n \tp := make([]byte, 10)\n-\tbuf, _ := NewReaderSize(strings.NewReader(\"abcdefghij\"), 4)\n+\t// string is 16 (minReadBufferSize) long.\n+\tbuf, _ := NewReaderSize(strings.NewReader(\"abcdefghijklmnop\"), minReadBufferSize)\n \tif s, err := buf.Peek(1); string(s) != \"a\" || err != nil {\n \t\tt.Fatalf(\"want %q got %q, err=%v\", \"a\", string(s), err)\n \t}\n \tif s, err := buf.Peek(4); string(s) != \"abcd\" || err != nil {\n \t\tt.Fatalf(\"want %q got %q, err=%v\", \"abcd\", string(s), err)\n \t}\n-\tif _, err := buf.Peek(5); err != ErrBufferFull {\n+\tif _, err := buf.Peek(32); err != ErrBufferFull {\n \t\tt.Fatalf(\"want ErrBufFull got %v\", err)\n \t}\n \tif _, err := buf.Read(p[0:3]); string(p[0:3]) != \"abc\" || err != nil {\n@@ -552,8 +558,8 @@ func TestPeek(t *testing.T) {\n \tif s, err := buf.Peek(4); string(s) != \"ghij\" || err != nil {\n \t\tt.Fatalf(\"want %q got %q, err=%v\", \"ghij\", string(s), err)\n \t}\n-\tif _, err := buf.Read(p[0:4]); string(p[0:4]) != \"ghij\" || err != nil {\n-\t\tt.Fatalf(\"want %q got %q, err=%v\", \"ghij\", string(p[0:3]), err)\n+\tif _, err := buf.Read(p[0:]); string(p[0:]) != \"ghijklmnop\" || err != nil {\n+\t\tt.Fatalf(\"want %q got %q, err=%v\", \"ghijklmnop\", string(p[0:minReadBufferSize]), err)\n \t}\n \tif s, err := buf.Peek(0); string(s) != \"\" || err != nil {\n \t\tt.Fatalf(\"want %q got %q, err=%v\", \"\", string(s), err)\n@@ -635,19 +641,25 @@ func TestReadLine(t *testing.T) {\n }\n \n func TestLineTooLong(t *testing.T) {\n-\tbuf := bytes.NewBuffer([]byte(\"aaabbbcc\\n\"))\n-\tl, _ := NewReaderSize(buf, 3)\n+\tdata := make([]byte, 0)\n+\tfor i := 0; i < minReadBufferSize*5/2; i++ {\n+\t\tdata = append(data, '0'+byte(i%10))\n+\t}\n+\tbuf := bytes.NewBuffer(data)\n+\tl, _ := NewReaderSize(buf, minReadBufferSize)\n \tline, isPrefix, err := l.ReadLine()\n-\tif !isPrefix || !bytes.Equal(line, []byte(\"aaa\")) || err != nil {\n-\t\tt.Errorf(\"bad result for first line: %x %s\", line, err)\n+\tif !isPrefix || !bytes.Equal(line, data[:minReadBufferSize]) || err != nil {\n+\t\tt.Errorf(\"bad result for first line: got %q want %q %v\", line, data[:minReadBufferSize], err)\n \t}\n+\tdata = data[len(line):]\n \tline, isPrefix, err = l.ReadLine()\n-\tif !isPrefix || !bytes.Equal(line, []byte(\"bbb\")) || err != nil {\n-\t\tt.Errorf(\"bad result for second line: %x\", line)\n+\tif !isPrefix || !bytes.Equal(line, data[:minReadBufferSize]) || err != nil {\n+\t\tt.Errorf(\"bad result for second line: got %q want %q %v\", line, data[:minReadBufferSize], err)\n \t}\n+\tdata = data[len(line):]\n \tline, isPrefix, err = l.ReadLine()\n-\tif isPrefix || !bytes.Equal(line, []byte(\"cc\")) || err != nil {\n-\t\tt.Errorf(\"bad result for third line: %x\", line)\n+\tif isPrefix || !bytes.Equal(line, data[:minReadBufferSize/2]) || err != nil {\n+\t\tt.Errorf(\"bad result for third line: got %q want %q %v\", line, data[:minReadBufferSize/2], err)\n \t}\n \tline, isPrefix, err = l.ReadLine()\n \tif isPrefix || err == nil {\n@@ -656,8 +668,8 @@ func TestLineTooLong(t *testing.T) {\n }\n \n func TestReadAfterLines(t *testing.T) {\n-\tline1 := \"line1\"\n-\trestData := \"line2\\nline 3\\n\"\n+\tline1 := \"this is line1\"\n+\trestData := \"this is line2\\nthis is line 3\\n\"\n \tinbuf := bytes.NewBuffer([]byte(line1 + \"\\n\" + restData))\n \toutbuf := new(bytes.Buffer)\n \tmaxLineLength := len(line1) + len(restData)/2\n@@ -676,15 +688,15 @@ func TestReadAfterLines(t *testing.T) {\n }\n \n func TestReadEmptyBuffer(t *testing.T) {\n-\tl, _ := NewReaderSize(bytes.NewBuffer(nil), 10)\n+\tl, _ := NewReaderSize(bytes.NewBuffer(nil), minReadBufferSize)\n \tline, isPrefix, err := l.ReadLine()\n \tif err != io.EOF {\n \t\tt.Errorf(\"expected EOF from ReadLine, got '%s' %t %s\", line, isPrefix, err)\n \t}\n }\n \n func TestLinesAfterRead(t *testing.T) {\n-\tl, _ := NewReaderSize(bytes.NewBuffer([]byte(\"foo\")), 10)\n+\tl, _ := NewReaderSize(bytes.NewBuffer([]byte(\"foo\")), minReadBufferSize)\n \t_, err := ioutil.ReadAll(l)\n \tif err != nil {\n \t\tt.Error(err)\n@@ -715,47 +727,32 @@ type readLineResult struct {\n }\n \n var readLineNewlinesTests = []struct {\n-\tinput   string\n-\tbufSize int\n-\texpect  []readLineResult\n+\tinput  string\n+\texpect []readLineResult\n }{\n-\t{\"h\\r\\nb\\r\\n\", 2, []readLineResult{\n-\t\t{[]byte(\"h\"), true, nil},\n-\t\t{nil, false, nil},\n-\t\t{[]byte(\"b\"), true, nil},\n-\t\t{nil, false, nil},\n-\t\t{nil, false, io.EOF},\n-\t}},\n-\t{\"hello\\r\\nworld\\r\\n\", 6, []readLineResult{\n-\t\t{[]byte(\"hello\"), true, nil},\n+\t{\"012345678901234\\r\\n012345678901234\\r\\n\", []readLineResult{\n+\t\t{[]byte(\"012345678901234\"), true, nil},\n \t\t{nil, false, nil},\n-\t\t{[]byte(\"world\"), true, nil},\n+\t\t{[]byte(\"012345678901234\"), true, nil},\n \t\t{nil, false, nil},\n \t\t{nil, false, io.EOF},\n \t}},\n-\t{\"hello\\rworld\\r\", 6, []readLineResult{\n-\t\t{[]byte(\"hello\"), true, nil},\n-\t\t{[]byte(\"\\rworld\"), true, nil},\n-\t\t{[]byte(\"\\r\"), false, nil},\n-\t\t{nil, false, io.EOF},\n-\t}},\n-\t{\"h\\ri\\r\\n\\r\", 2, []readLineResult{\n-\t\t{[]byte(\"h\"), true, nil},\n-\t\t{[]byte(\"\\ri\"), true, nil},\n-\t\t{nil, false, nil},\n+\t{\"0123456789012345\\r012345678901234\\r\", []readLineResult{\n+\t\t{[]byte(\"0123456789012345\"), true, nil},\n+\t\t{[]byte(\"\\r012345678901234\"), true, nil},\n \t\t{[]byte(\"\\r\"), false, nil},\n \t\t{nil, false, io.EOF},\n \t}},\n }\n \n func TestReadLineNewlines(t *testing.T) {\n \tfor _, e := range readLineNewlinesTests {\n-\t\ttestReadLineNewlines(t, e.input, e.bufSize, e.expect)\n+\t\ttestReadLineNewlines(t, e.input, e.expect)\n \t}\n }\n \n-func testReadLineNewlines(t *testing.T, input string, bufSize int, expect []readLineResult) {\n-\tb, err := NewReaderSize(strings.NewReader(input), bufSize)\n+func testReadLineNewlines(t *testing.T, input string, expect []readLineResult) {\n+\tb, err := NewReaderSize(strings.NewReader(input), minReadBufferSize)\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}"}, {"sha": "e94a0ec5c4f950feec36cce66e66cdc362bbbf0f", "filename": "libgo/go/bytes/bytes.go", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Fbytes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Fbytes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -37,7 +37,9 @@ func Compare(a, b []byte) int {\n }\n \n // Equal returns a boolean reporting whether a == b.\n-func Equal(a, b []byte) bool {\n+func Equal(a, b []byte) bool\n+\n+func equalPortable(a, b []byte) bool {\n \tif len(a) != len(b) {\n \t\treturn false\n \t}\n@@ -74,18 +76,33 @@ func explode(s []byte, n int) [][]byte {\n \n // Count counts the number of non-overlapping instances of sep in s.\n func Count(s, sep []byte) int {\n-\tif len(sep) == 0 {\n+\tn := len(sep)\n+\tif n == 0 {\n \t\treturn utf8.RuneCount(s) + 1\n \t}\n+\tif n > len(s) {\n+\t\treturn 0\n+\t}\n+\tcount := 0\n \tc := sep[0]\n-\tn := 0\n-\tfor i := 0; i+len(sep) <= len(s); i++ {\n-\t\tif s[i] == c && (len(sep) == 1 || Equal(s[i:i+len(sep)], sep)) {\n-\t\t\tn++\n-\t\t\ti += len(sep) - 1\n+\ti := 0\n+\tt := s[:len(s)-n+1]\n+\tfor i < len(t) {\n+\t\tif t[i] != c {\n+\t\t\to := IndexByte(t[i:], c)\n+\t\t\tif o < 0 {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\ti += o\n \t\t}\n+\t\tif n == 1 || Equal(s[i:i+n], sep) {\n+\t\t\tcount++\n+\t\t\ti += n\n+\t\t\tcontinue\n+\t\t}\n+\t\ti++\n \t}\n-\treturn n\n+\treturn count\n }\n \n // Contains returns whether subslice is within b.\n@@ -99,11 +116,27 @@ func Index(s, sep []byte) int {\n \tif n == 0 {\n \t\treturn 0\n \t}\n+\tif n > len(s) {\n+\t\treturn -1\n+\t}\n \tc := sep[0]\n-\tfor i := 0; i+n <= len(s); i++ {\n-\t\tif s[i] == c && (n == 1 || Equal(s[i:i+n], sep)) {\n+\tif n == 1 {\n+\t\treturn IndexByte(s, c)\n+\t}\n+\ti := 0\n+\tt := s[:len(s)-n+1]\n+\tfor i < len(t) {\n+\t\tif t[i] != c {\n+\t\t\to := IndexByte(t[i:], c)\n+\t\t\tif o < 0 {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\ti += o\n+\t\t}\n+\t\tif Equal(s[i:i+n], sep) {\n \t\t\treturn i\n \t\t}\n+\t\ti++\n \t}\n \treturn -1\n }\n@@ -437,7 +470,7 @@ func Title(s []byte) []byte {\n \t// Use a closure here to remember state.\n \t// Hackish but effective. Depends on Map scanning in order and calling\n \t// the closure once per rune.\n-\tprev := rune(' ')\n+\tprev := ' '\n \treturn Map(\n \t\tfunc(r rune) rune {\n \t\t\tif isSeparator(prev) {"}, {"sha": "a2a08c20db0b83cb02729f73f867e8f372dab75e", "filename": "libgo/go/bytes/bytes_test.go", "status": "modified", "additions": 131, "deletions": 16, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -64,13 +64,17 @@ func TestCompare(t *testing.T) {\n \t\ta := []byte(tt.a)\n \t\tb := []byte(tt.b)\n \t\tcmp := Compare(a, b)\n-\t\teql := Equal(a, b)\n \t\tif cmp != tt.i {\n \t\t\tt.Errorf(`Compare(%q, %q) = %v`, tt.a, tt.b, cmp)\n \t\t}\n+\t\teql := Equal(a, b)\n \t\tif eql != (tt.i == 0) {\n \t\t\tt.Errorf(`Equal(%q, %q) = %v`, tt.a, tt.b, eql)\n \t\t}\n+\t\teql = EqualPortable(a, b)\n+\t\tif eql != (tt.i == 0) {\n+\t\t\tt.Errorf(`EqualPortable(%q, %q) = %v`, tt.a, tt.b, eql)\n+\t\t}\n \t}\n }\n \n@@ -264,41 +268,152 @@ func TestIndexRune(t *testing.T) {\n \t}\n }\n \n-func BenchmarkIndexByte4K(b *testing.B) { bmIndex(b, IndexByte, 4<<10) }\n-\n-func BenchmarkIndexByte4M(b *testing.B) { bmIndex(b, IndexByte, 4<<20) }\n+var bmbuf []byte\n \n-func BenchmarkIndexByte64M(b *testing.B) { bmIndex(b, IndexByte, 64<<20) }\n+func BenchmarkIndexByte32(b *testing.B)          { bmIndexByte(b, IndexByte, 32) }\n+func BenchmarkIndexByte4K(b *testing.B)          { bmIndexByte(b, IndexByte, 4<<10) }\n+func BenchmarkIndexByte4M(b *testing.B)          { bmIndexByte(b, IndexByte, 4<<20) }\n+func BenchmarkIndexByte64M(b *testing.B)         { bmIndexByte(b, IndexByte, 64<<20) }\n+func BenchmarkIndexBytePortable32(b *testing.B)  { bmIndexByte(b, IndexBytePortable, 32) }\n+func BenchmarkIndexBytePortable4K(b *testing.B)  { bmIndexByte(b, IndexBytePortable, 4<<10) }\n+func BenchmarkIndexBytePortable4M(b *testing.B)  { bmIndexByte(b, IndexBytePortable, 4<<20) }\n+func BenchmarkIndexBytePortable64M(b *testing.B) { bmIndexByte(b, IndexBytePortable, 64<<20) }\n \n-func BenchmarkIndexBytePortable4K(b *testing.B) {\n-\tbmIndex(b, IndexBytePortable, 4<<10)\n+func bmIndexByte(b *testing.B, index func([]byte, byte) int, n int) {\n+\tif len(bmbuf) < n {\n+\t\tbmbuf = make([]byte, n)\n+\t}\n+\tb.SetBytes(int64(n))\n+\tbuf := bmbuf[0:n]\n+\tbuf[n-1] = 'x'\n+\tfor i := 0; i < b.N; i++ {\n+\t\tj := index(buf, 'x')\n+\t\tif j != n-1 {\n+\t\t\tprintln(\"bad index\", j)\n+\t\t\tpanic(\"bad index\")\n+\t\t}\n+\t}\n+\tbuf[n-1] = '\\x00'\n }\n \n-func BenchmarkIndexBytePortable4M(b *testing.B) {\n-\tbmIndex(b, IndexBytePortable, 4<<20)\n+func BenchmarkEqual32(b *testing.B)          { bmEqual(b, Equal, 32) }\n+func BenchmarkEqual4K(b *testing.B)          { bmEqual(b, Equal, 4<<10) }\n+func BenchmarkEqual4M(b *testing.B)          { bmEqual(b, Equal, 4<<20) }\n+func BenchmarkEqual64M(b *testing.B)         { bmEqual(b, Equal, 64<<20) }\n+func BenchmarkEqualPort32(b *testing.B)      { bmEqual(b, EqualPortable, 32) }\n+func BenchmarkEqualPort4K(b *testing.B)      { bmEqual(b, EqualPortable, 4<<10) }\n+func BenchmarkEqualPortable4M(b *testing.B)  { bmEqual(b, EqualPortable, 4<<20) }\n+func BenchmarkEqualPortable64M(b *testing.B) { bmEqual(b, EqualPortable, 64<<20) }\n+\n+func bmEqual(b *testing.B, equal func([]byte, []byte) bool, n int) {\n+\tif len(bmbuf) < 2*n {\n+\t\tbmbuf = make([]byte, 2*n)\n+\t}\n+\tb.SetBytes(int64(n))\n+\tbuf1 := bmbuf[0:n]\n+\tbuf2 := bmbuf[n : 2*n]\n+\tbuf1[n-1] = 'x'\n+\tbuf2[n-1] = 'x'\n+\tfor i := 0; i < b.N; i++ {\n+\t\teq := equal(buf1, buf2)\n+\t\tif !eq {\n+\t\t\tpanic(\"bad equal\")\n+\t\t}\n+\t}\n+\tbuf1[n-1] = '\\x00'\n+\tbuf2[n-1] = '\\x00'\n }\n \n-func BenchmarkIndexBytePortable64M(b *testing.B) {\n-\tbmIndex(b, IndexBytePortable, 64<<20)\n+func BenchmarkIndex32(b *testing.B)  { bmIndex(b, Index, 32) }\n+func BenchmarkIndex4K(b *testing.B)  { bmIndex(b, Index, 4<<10) }\n+func BenchmarkIndex4M(b *testing.B)  { bmIndex(b, Index, 4<<20) }\n+func BenchmarkIndex64M(b *testing.B) { bmIndex(b, Index, 64<<20) }\n+\n+func bmIndex(b *testing.B, index func([]byte, []byte) int, n int) {\n+\tif len(bmbuf) < n {\n+\t\tbmbuf = make([]byte, n)\n+\t}\n+\tb.SetBytes(int64(n))\n+\tbuf := bmbuf[0:n]\n+\tbuf[n-1] = 'x'\n+\tfor i := 0; i < b.N; i++ {\n+\t\tj := index(buf, buf[n-7:])\n+\t\tif j != n-7 {\n+\t\t\tprintln(\"bad index\", j)\n+\t\t\tpanic(\"bad index\")\n+\t\t}\n+\t}\n+\tbuf[n-1] = '\\x00'\n }\n \n-var bmbuf []byte\n+func BenchmarkIndexEasy32(b *testing.B)  { bmIndexEasy(b, Index, 32) }\n+func BenchmarkIndexEasy4K(b *testing.B)  { bmIndexEasy(b, Index, 4<<10) }\n+func BenchmarkIndexEasy4M(b *testing.B)  { bmIndexEasy(b, Index, 4<<20) }\n+func BenchmarkIndexEasy64M(b *testing.B) { bmIndexEasy(b, Index, 64<<20) }\n \n-func bmIndex(b *testing.B, index func([]byte, byte) int, n int) {\n+func bmIndexEasy(b *testing.B, index func([]byte, []byte) int, n int) {\n \tif len(bmbuf) < n {\n \t\tbmbuf = make([]byte, n)\n \t}\n \tb.SetBytes(int64(n))\n \tbuf := bmbuf[0:n]\n \tbuf[n-1] = 'x'\n+\tbuf[n-7] = 'x'\n \tfor i := 0; i < b.N; i++ {\n-\t\tj := index(buf, 'x')\n-\t\tif j != n-1 {\n+\t\tj := index(buf, buf[n-7:])\n+\t\tif j != n-7 {\n \t\t\tprintln(\"bad index\", j)\n \t\t\tpanic(\"bad index\")\n \t\t}\n \t}\n-\tbuf[n-1] = '0'\n+\tbuf[n-1] = '\\x00'\n+\tbuf[n-7] = '\\x00'\n+}\n+\n+func BenchmarkCount32(b *testing.B)  { bmCount(b, Count, 32) }\n+func BenchmarkCount4K(b *testing.B)  { bmCount(b, Count, 4<<10) }\n+func BenchmarkCount4M(b *testing.B)  { bmCount(b, Count, 4<<20) }\n+func BenchmarkCount64M(b *testing.B) { bmCount(b, Count, 64<<20) }\n+\n+func bmCount(b *testing.B, count func([]byte, []byte) int, n int) {\n+\tif len(bmbuf) < n {\n+\t\tbmbuf = make([]byte, n)\n+\t}\n+\tb.SetBytes(int64(n))\n+\tbuf := bmbuf[0:n]\n+\tbuf[n-1] = 'x'\n+\tfor i := 0; i < b.N; i++ {\n+\t\tj := count(buf, buf[n-7:])\n+\t\tif j != 1 {\n+\t\t\tprintln(\"bad count\", j)\n+\t\t\tpanic(\"bad count\")\n+\t\t}\n+\t}\n+\tbuf[n-1] = '\\x00'\n+}\n+\n+func BenchmarkCountEasy32(b *testing.B)  { bmCountEasy(b, Count, 32) }\n+func BenchmarkCountEasy4K(b *testing.B)  { bmCountEasy(b, Count, 4<<10) }\n+func BenchmarkCountEasy4M(b *testing.B)  { bmCountEasy(b, Count, 4<<20) }\n+func BenchmarkCountEasy64M(b *testing.B) { bmCountEasy(b, Count, 64<<20) }\n+\n+func bmCountEasy(b *testing.B, count func([]byte, []byte) int, n int) {\n+\tif len(bmbuf) < n {\n+\t\tbmbuf = make([]byte, n)\n+\t}\n+\tb.SetBytes(int64(n))\n+\tbuf := bmbuf[0:n]\n+\tbuf[n-1] = 'x'\n+\tbuf[n-7] = 'x'\n+\tfor i := 0; i < b.N; i++ {\n+\t\tj := count(buf, buf[n-7:])\n+\t\tif j != 1 {\n+\t\t\tprintln(\"bad count\", j)\n+\t\t\tpanic(\"bad count\")\n+\t\t}\n+\t}\n+\tbuf[n-1] = '\\x00'\n+\tbuf[n-7] = '\\x00'\n }\n \n type ExplodeTest struct {"}, {"sha": "f61523e60bbb3fd209594912ebcaa76cde9acd20", "filename": "libgo/go/bytes/export_test.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fexport_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -6,3 +6,4 @@ package bytes\n \n // Export func for testing\n var IndexBytePortable = indexBytePortable\n+var EqualPortable = equalPortable"}, {"sha": "8213b3e3442dbded87f3181d8db3234bdb5036fe", "filename": "libgo/go/bytes/indexbyte.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Findexbyte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fbytes%2Findexbyte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Findexbyte.c?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -26,3 +26,17 @@ IndexByte (struct __go_open_array s, char b)\n     return -1;\n   return p - (char *) s.__values;\n }\n+\n+/* Comparison.  */\n+\n+_Bool Equal (struct __go_open_array a, struct __go_open_array b)\n+  asm (\"libgo_bytes.bytes.Equal\")\n+  __attribute__ ((no_split_stack));\n+\n+_Bool\n+Equal (struct __go_open_array a, struct __go_open_array b)\n+{\n+  if (a.__count != b.__count)\n+    return 0;\n+  return __builtin_memcmp (a.__values, b.__values, a.__count) == 0;\n+}"}, {"sha": "4f744457dd7e0fc0ad4de36137eaedef2f4ba437", "filename": "libgo/go/compress/flate/deflate.go", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -319,7 +319,9 @@ Loop:\n \t\t\t\t// For matches this long, we don't bother inserting each individual\n \t\t\t\t// item into the table.\n \t\t\t\td.index += d.length\n-\t\t\t\td.hash = (int(d.window[d.index])<<hashShift + int(d.window[d.index+1]))\n+\t\t\t\tif d.index < d.maxInsertIndex {\n+\t\t\t\t\td.hash = (int(d.window[d.index])<<hashShift + int(d.window[d.index+1]))\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif d.ti == maxFlateBlockTokens {\n \t\t\t\t// The block includes the current character"}, {"sha": "bae5c82305ae0c25e78d74410ec6332a04341190", "filename": "libgo/go/compress/flate/deflate_test.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -318,3 +318,15 @@ func TestWriterDict(t *testing.T) {\n \t\tt.Fatalf(\"writer wrote %q want %q\", b1.Bytes(), b.Bytes())\n \t}\n }\n+\n+// See http://code.google.com/p/go/issues/detail?id=2508\n+func TestRegression2508(t *testing.T) {\n+\tw := NewWriter(ioutil.Discard, 1)\n+\tbuf := make([]byte, 1024)\n+\tfor i := 0; i < 131072; i++ {\n+\t\tif _, err := w.Write(buf); err != nil {\n+\t\t\tt.Fatalf(\"writer failed: %v\", err)\n+\t\t}\n+\t}\n+\tw.Close()\n+}"}, {"sha": "6d60fdd0ff360c7b75d28b14634fab81d4d59b5f", "filename": "libgo/go/compress/gzip/gunzip.go", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgunzip.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -96,6 +96,7 @@ func get4(p []byte) uint32 {\n \n func (z *Decompressor) readString() (string, error) {\n \tvar err error\n+\tneedconv := false\n \tfor i := 0; ; i++ {\n \t\tif i >= len(z.buf) {\n \t\t\treturn \"\", HeaderError\n@@ -104,9 +105,18 @@ func (z *Decompressor) readString() (string, error) {\n \t\tif err != nil {\n \t\t\treturn \"\", err\n \t\t}\n+\t\tif z.buf[i] > 0x7f {\n+\t\t\tneedconv = true\n+\t\t}\n \t\tif z.buf[i] == 0 {\n \t\t\t// GZIP (RFC 1952) specifies that strings are NUL-terminated ISO 8859-1 (Latin-1).\n-\t\t\t// TODO(nigeltao): Convert from ISO 8859-1 (Latin-1) to UTF-8.\n+\t\t\tif needconv {\n+\t\t\t\ts := make([]rune, 0, i)\n+\t\t\t\tfor _, v := range z.buf[0:i] {\n+\t\t\t\t\ts = append(s, rune(v))\n+\t\t\t\t}\n+\t\t\t\treturn string(s), nil\n+\t\t\t}\n \t\t\treturn string(z.buf[0:i]), nil\n \t\t}\n \t}"}, {"sha": "f2639a688c1a3d4d081f9058df518cba16d67742", "filename": "libgo/go/compress/gzip/gzip.go", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -86,13 +86,25 @@ func (z *Compressor) writeBytes(b []byte) error {\n // writeString writes a string (in ISO 8859-1 (Latin-1) format) to z.w.\n func (z *Compressor) writeString(s string) error {\n \t// GZIP (RFC 1952) specifies that strings are NUL-terminated ISO 8859-1 (Latin-1).\n-\t// TODO(nigeltao): Convert from UTF-8 to ISO 8859-1 (Latin-1).\n+\tvar err error\n+\tneedconv := false\n \tfor _, v := range s {\n-\t\tif v == 0 || v > 0x7f {\n-\t\t\treturn errors.New(\"gzip.Write: non-ASCII header string\")\n+\t\tif v == 0 || v > 0xff {\n+\t\t\treturn errors.New(\"gzip.Write: non-Latin-1 header string\")\n \t\t}\n+\t\tif v > 0x7f {\n+\t\t\tneedconv = true\n+\t\t}\n+\t}\n+\tif needconv {\n+\t\tb := make([]byte, 0, len(s))\n+\t\tfor _, v := range s {\n+\t\t\tb = append(b, byte(v))\n+\t\t}\n+\t\t_, err = z.w.Write(b)\n+\t} else {\n+\t\t_, err = io.WriteString(z.w, s)\n \t}\n-\t_, err := io.WriteString(z.w, s)\n \tif err != nil {\n \t\treturn err\n \t}"}, {"sha": "eb7a7ec0892f8480fbf2e06d2a1802944c72f7b8", "filename": "libgo/go/compress/gzip/gzip_test.go", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fgzip_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -5,6 +5,8 @@\n package gzip\n \n import (\n+\t\"bufio\"\n+\t\"bytes\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"testing\"\n@@ -52,7 +54,8 @@ func TestEmpty(t *testing.T) {\n func TestWriter(t *testing.T) {\n \tpipe(t,\n \t\tfunc(compressor *Compressor) {\n-\t\t\tcompressor.Comment = \"comment\"\n+\t\t\tcompressor.Comment = \"\u00c4u\u00dferung\"\n+\t\t\t//compressor.Comment = \"comment\"\n \t\t\tcompressor.Extra = []byte(\"extra\")\n \t\t\tcompressor.ModTime = time.Unix(1e8, 0)\n \t\t\tcompressor.Name = \"name\"\n@@ -69,8 +72,8 @@ func TestWriter(t *testing.T) {\n \t\t\tif string(b) != \"payload\" {\n \t\t\t\tt.Fatalf(\"payload is %q, want %q\", string(b), \"payload\")\n \t\t\t}\n-\t\t\tif decompressor.Comment != \"comment\" {\n-\t\t\t\tt.Fatalf(\"comment is %q, want %q\", decompressor.Comment, \"comment\")\n+\t\t\tif decompressor.Comment != \"\u00c4u\u00dferung\" {\n+\t\t\t\tt.Fatalf(\"comment is %q, want %q\", decompressor.Comment, \"\u00c4u\u00dferung\")\n \t\t\t}\n \t\t\tif string(decompressor.Extra) != \"extra\" {\n \t\t\t\tt.Fatalf(\"extra is %q, want %q\", decompressor.Extra, \"extra\")\n@@ -83,3 +86,29 @@ func TestWriter(t *testing.T) {\n \t\t\t}\n \t\t})\n }\n+\n+func TestLatin1(t *testing.T) {\n+\tlatin1 := []byte{0xc4, 'u', 0xdf, 'e', 'r', 'u', 'n', 'g', 0}\n+\tutf8 := \"\u00c4u\u00dferung\"\n+\tz := Decompressor{r: bufio.NewReader(bytes.NewBuffer(latin1))}\n+\ts, err := z.readString()\n+\tif err != nil {\n+\t\tt.Fatalf(\"%v\", err)\n+\t}\n+\tif s != utf8 {\n+\t\tt.Fatalf(\"string is %q, want %q\", s, utf8)\n+\t}\n+\n+\tbuf := bytes.NewBuffer(make([]byte, 0, len(latin1)))\n+\tc := Compressor{w: buf}\n+\tif err = c.writeString(utf8); err != nil {\n+\t\tt.Fatalf(\"%v\", err)\n+\t}\n+\ts = buf.String()\n+\tif s != string(latin1) {\n+\t\tt.Fatalf(\"string is %v, want %v\", s, latin1)\n+\t}\n+\t//if s, err = buf.ReadString(0); err != nil {\n+\t//t.Fatalf(\"%v\", err)\n+\t//}\n+}"}, {"sha": "aa1d0df8e93996c5ed249f8a4830296ec5b34dba", "filename": "libgo/go/crypto/aes/aes_test.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Faes%2Faes_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Faes%2Faes_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Faes%2Faes_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -91,6 +91,7 @@ func TestTe(t *testing.T) {\n \t\ts2 := mul(s, 2)\n \t\ts3 := mul(s, 3)\n \t\tw := s2<<24 | s<<16 | s<<8 | s3\n+\t\tte := [][256]uint32{te0, te1, te2, te3}\n \t\tfor j := 0; j < 4; j++ {\n \t\t\tif x := te[j][i]; x != w {\n \t\t\t\tt.Fatalf(\"te[%d][%d] = %#x, want %#x\", j, i, x, w)\n@@ -110,6 +111,7 @@ func TestTd(t *testing.T) {\n \t\tsd := mul(s, 0xd)\n \t\tse := mul(s, 0xe)\n \t\tw := se<<24 | s9<<16 | sd<<8 | sb\n+\t\ttd := [][256]uint32{td0, td1, td2, td3}\n \t\tfor j := 0; j < 4; j++ {\n \t\t\tif x := td[j][i]; x != w {\n \t\t\t\tt.Fatalf(\"td[%d][%d] = %#x, want %#x\", j, i, x, w)"}, {"sha": "b930787cec797ba6286f794fdfe59d496a10f38a", "filename": "libgo/go/crypto/aes/block.go", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Faes%2Fblock.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Faes%2Fblock.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Faes%2Fblock.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -56,10 +56,10 @@ func encryptBlock(xk []uint32, dst, src []byte) {\n \tnr := len(xk)/4 - 2 // - 2: one above, one more below\n \tk := 4\n \tfor r := 0; r < nr; r++ {\n-\t\tt0 = xk[k+0] ^ te[0][uint8(s0>>24)] ^ te[1][uint8(s1>>16)] ^ te[2][uint8(s2>>8)] ^ te[3][uint8(s3)]\n-\t\tt1 = xk[k+1] ^ te[0][uint8(s1>>24)] ^ te[1][uint8(s2>>16)] ^ te[2][uint8(s3>>8)] ^ te[3][uint8(s0)]\n-\t\tt2 = xk[k+2] ^ te[0][uint8(s2>>24)] ^ te[1][uint8(s3>>16)] ^ te[2][uint8(s0>>8)] ^ te[3][uint8(s1)]\n-\t\tt3 = xk[k+3] ^ te[0][uint8(s3>>24)] ^ te[1][uint8(s0>>16)] ^ te[2][uint8(s1>>8)] ^ te[3][uint8(s2)]\n+\t\tt0 = xk[k+0] ^ te0[uint8(s0>>24)] ^ te1[uint8(s1>>16)] ^ te2[uint8(s2>>8)] ^ te3[uint8(s3)]\n+\t\tt1 = xk[k+1] ^ te0[uint8(s1>>24)] ^ te1[uint8(s2>>16)] ^ te2[uint8(s3>>8)] ^ te3[uint8(s0)]\n+\t\tt2 = xk[k+2] ^ te0[uint8(s2>>24)] ^ te1[uint8(s3>>16)] ^ te2[uint8(s0>>8)] ^ te3[uint8(s1)]\n+\t\tt3 = xk[k+3] ^ te0[uint8(s3>>24)] ^ te1[uint8(s0>>16)] ^ te2[uint8(s1>>8)] ^ te3[uint8(s2)]\n \t\tk += 4\n \t\ts0, s1, s2, s3 = t0, t1, t2, t3\n \t}\n@@ -101,10 +101,10 @@ func decryptBlock(xk []uint32, dst, src []byte) {\n \tnr := len(xk)/4 - 2 // - 2: one above, one more below\n \tk := 4\n \tfor r := 0; r < nr; r++ {\n-\t\tt0 = xk[k+0] ^ td[0][uint8(s0>>24)] ^ td[1][uint8(s3>>16)] ^ td[2][uint8(s2>>8)] ^ td[3][uint8(s1)]\n-\t\tt1 = xk[k+1] ^ td[0][uint8(s1>>24)] ^ td[1][uint8(s0>>16)] ^ td[2][uint8(s3>>8)] ^ td[3][uint8(s2)]\n-\t\tt2 = xk[k+2] ^ td[0][uint8(s2>>24)] ^ td[1][uint8(s1>>16)] ^ td[2][uint8(s0>>8)] ^ td[3][uint8(s3)]\n-\t\tt3 = xk[k+3] ^ td[0][uint8(s3>>24)] ^ td[1][uint8(s2>>16)] ^ td[2][uint8(s1>>8)] ^ td[3][uint8(s0)]\n+\t\tt0 = xk[k+0] ^ td0[uint8(s0>>24)] ^ td1[uint8(s3>>16)] ^ td2[uint8(s2>>8)] ^ td3[uint8(s1)]\n+\t\tt1 = xk[k+1] ^ td0[uint8(s1>>24)] ^ td1[uint8(s0>>16)] ^ td2[uint8(s3>>8)] ^ td3[uint8(s2)]\n+\t\tt2 = xk[k+2] ^ td0[uint8(s2>>24)] ^ td1[uint8(s1>>16)] ^ td2[uint8(s0>>8)] ^ td3[uint8(s3)]\n+\t\tt3 = xk[k+3] ^ td0[uint8(s3>>24)] ^ td1[uint8(s2>>16)] ^ td2[uint8(s1>>8)] ^ td3[uint8(s0)]\n \t\tk += 4\n \t\ts0, s1, s2, s3 = t0, t1, t2, t3\n \t}\n@@ -168,7 +168,7 @@ func expandKey(key []byte, enc, dec []uint32) {\n \t\tfor j := 0; j < 4; j++ {\n \t\t\tx := enc[ei+j]\n \t\t\tif i > 0 && i+4 < n {\n-\t\t\t\tx = td[0][sbox0[x>>24]] ^ td[1][sbox0[x>>16&0xff]] ^ td[2][sbox0[x>>8&0xff]] ^ td[3][sbox0[x&0xff]]\n+\t\t\t\tx = td0[sbox0[x>>24]] ^ td1[sbox0[x>>16&0xff]] ^ td2[sbox0[x>>8&0xff]] ^ td3[sbox0[x&0xff]]\n \t\t\t}\n \t\t\tdec[i+j] = x\n \t\t}"}, {"sha": "f0b4eabf6ea0f4e4e8b69230f1307d7ef2468336", "filename": "libgo/go/crypto/aes/const.go", "status": "modified", "additions": 270, "deletions": 274, "changes": 544, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Faes%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Faes%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Faes%2Fconst.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -80,283 +80,279 @@ var sbox1 = [256]byte{\n // Lookup tables for encryption.\n // These can be recomputed by adapting the tests in aes_test.go.\n \n-var te = [4][256]uint32{\n-\t{\n-\t\t0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554,\n-\t\t0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a,\n-\t\t0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b,\n-\t\t0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b,\n-\t\t0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f,\n-\t\t0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f,\n-\t\t0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5,\n-\t\t0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f,\n-\t\t0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb,\n-\t\t0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497,\n-\t\t0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed,\n-\t\t0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a,\n-\t\t0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594,\n-\t\t0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3,\n-\t\t0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504,\n-\t\t0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d,\n-\t\t0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739,\n-\t\t0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395,\n-\t\t0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883,\n-\t\t0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76,\n-\t\t0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4,\n-\t\t0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b,\n-\t\t0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0,\n-\t\t0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818,\n-\t\t0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651,\n-\t\t0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85,\n-\t\t0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12,\n-\t\t0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9,\n-\t\t0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7,\n-\t\t0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a,\n-\t\t0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8,\n-\t\t0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a,\n-\t},\n-\t{\n-\t\t0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5,\n-\t\t0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676,\n-\t\t0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0,\n-\t\t0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0,\n-\t\t0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc,\n-\t\t0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515,\n-\t\t0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a,\n-\t\t0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575,\n-\t\t0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0,\n-\t\t0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484,\n-\t\t0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b,\n-\t\t0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf,\n-\t\t0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585,\n-\t\t0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8,\n-\t\t0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5,\n-\t\t0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2,\n-\t\t0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717,\n-\t\t0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373,\n-\t\t0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888,\n-\t\t0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb,\n-\t\t0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c,\n-\t\t0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979,\n-\t\t0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9,\n-\t\t0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808,\n-\t\t0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6,\n-\t\t0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a,\n-\t\t0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e,\n-\t\t0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e,\n-\t\t0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494,\n-\t\t0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf,\n-\t\t0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868,\n-\t\t0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616,\n-\t},\n-\t{\n-\t\t0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5,\n-\t\t0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76,\n-\t\t0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0,\n-\t\t0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0,\n-\t\t0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc,\n-\t\t0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15,\n-\t\t0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a,\n-\t\t0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75,\n-\t\t0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0,\n-\t\t0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384,\n-\t\t0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b,\n-\t\t0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf,\n-\t\t0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185,\n-\t\t0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8,\n-\t\t0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5,\n-\t\t0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2,\n-\t\t0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17,\n-\t\t0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673,\n-\t\t0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88,\n-\t\t0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb,\n-\t\t0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c,\n-\t\t0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279,\n-\t\t0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9,\n-\t\t0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008,\n-\t\t0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6,\n-\t\t0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a,\n-\t\t0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e,\n-\t\t0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e,\n-\t\t0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394,\n-\t\t0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df,\n-\t\t0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068,\n-\t\t0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16,\n-\t},\n-\t{\n-\t\t0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491,\n-\t\t0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec,\n-\t\t0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb,\n-\t\t0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b,\n-\t\t0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83,\n-\t\t0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a,\n-\t\t0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f,\n-\t\t0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea,\n-\t\t0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b,\n-\t\t0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713,\n-\t\t0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6,\n-\t\t0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85,\n-\t\t0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411,\n-\t\t0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b,\n-\t\t0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1,\n-\t\t0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf,\n-\t\t0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e,\n-\t\t0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6,\n-\t\t0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b,\n-\t\t0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad,\n-\t\t0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8,\n-\t\t0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2,\n-\t\t0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049,\n-\t\t0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810,\n-\t\t0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197,\n-\t\t0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f,\n-\t\t0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c,\n-\t\t0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927,\n-\t\t0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733,\n-\t\t0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5,\n-\t\t0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0,\n-\t\t0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c,\n-\t},\n+var te0 = [256]uint32{\n+\t0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554,\n+\t0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a,\n+\t0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b,\n+\t0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b,\n+\t0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f,\n+\t0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f,\n+\t0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5,\n+\t0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f,\n+\t0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb,\n+\t0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497,\n+\t0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed,\n+\t0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a,\n+\t0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594,\n+\t0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3,\n+\t0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504,\n+\t0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d,\n+\t0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739,\n+\t0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395,\n+\t0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883,\n+\t0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76,\n+\t0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4,\n+\t0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b,\n+\t0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0,\n+\t0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818,\n+\t0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651,\n+\t0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85,\n+\t0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12,\n+\t0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9,\n+\t0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7,\n+\t0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a,\n+\t0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8,\n+\t0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a,\n+}\n+var te1 = [256]uint32{\n+\t0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5,\n+\t0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676,\n+\t0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0,\n+\t0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0,\n+\t0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc,\n+\t0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515,\n+\t0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a,\n+\t0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575,\n+\t0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0,\n+\t0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484,\n+\t0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b,\n+\t0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf,\n+\t0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585,\n+\t0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8,\n+\t0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5,\n+\t0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2,\n+\t0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717,\n+\t0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373,\n+\t0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888,\n+\t0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb,\n+\t0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c,\n+\t0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979,\n+\t0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9,\n+\t0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808,\n+\t0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6,\n+\t0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a,\n+\t0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e,\n+\t0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e,\n+\t0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494,\n+\t0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf,\n+\t0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868,\n+\t0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616,\n+}\n+var te2 = [256]uint32{\n+\t0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5,\n+\t0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76,\n+\t0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0,\n+\t0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0,\n+\t0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc,\n+\t0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15,\n+\t0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a,\n+\t0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75,\n+\t0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0,\n+\t0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384,\n+\t0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b,\n+\t0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf,\n+\t0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185,\n+\t0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8,\n+\t0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5,\n+\t0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2,\n+\t0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17,\n+\t0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673,\n+\t0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88,\n+\t0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb,\n+\t0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c,\n+\t0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279,\n+\t0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9,\n+\t0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008,\n+\t0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6,\n+\t0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a,\n+\t0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e,\n+\t0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e,\n+\t0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394,\n+\t0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df,\n+\t0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068,\n+\t0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16,\n+}\n+var te3 = [256]uint32{\n+\t0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491,\n+\t0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec,\n+\t0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb,\n+\t0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b,\n+\t0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83,\n+\t0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a,\n+\t0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f,\n+\t0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea,\n+\t0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b,\n+\t0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713,\n+\t0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6,\n+\t0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85,\n+\t0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411,\n+\t0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b,\n+\t0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1,\n+\t0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf,\n+\t0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e,\n+\t0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6,\n+\t0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b,\n+\t0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad,\n+\t0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8,\n+\t0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2,\n+\t0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049,\n+\t0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810,\n+\t0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197,\n+\t0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f,\n+\t0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c,\n+\t0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927,\n+\t0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733,\n+\t0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5,\n+\t0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0,\n+\t0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c,\n }\n \n // Lookup tables for decryption.\n // These can be recomputed by adapting the tests in aes_test.go.\n \n-var td = [4][256]uint32{\n-\t{\n-\t\t0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393,\n-\t\t0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f,\n-\t\t0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6,\n-\t\t0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844,\n-\t\t0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4,\n-\t\t0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94,\n-\t\t0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a,\n-\t\t0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c,\n-\t\t0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a,\n-\t\t0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051,\n-\t\t0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff,\n-\t\t0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb,\n-\t\t0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e,\n-\t\t0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a,\n-\t\t0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16,\n-\t\t0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8,\n-\t\t0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34,\n-\t\t0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120,\n-\t\t0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0,\n-\t\t0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef,\n-\t\t0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4,\n-\t\t0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5,\n-\t\t0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b,\n-\t\t0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6,\n-\t\t0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0,\n-\t\t0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f,\n-\t\t0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f,\n-\t\t0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713,\n-\t\t0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c,\n-\t\t0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86,\n-\t\t0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541,\n-\t\t0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742,\n-\t},\n-\t{\n-\t\t0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303,\n-\t\t0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3,\n-\t\t0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9,\n-\t\t0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8,\n-\t\t0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a,\n-\t\t0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b,\n-\t\t0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab,\n-\t\t0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682,\n-\t\t0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe,\n-\t\t0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10,\n-\t\t0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015,\n-\t\t0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee,\n-\t\t0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72,\n-\t\t0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e,\n-\t\t0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a,\n-\t\t0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9,\n-\t\t0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e,\n-\t\t0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611,\n-\t\t0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3,\n-\t\t0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390,\n-\t\t0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf,\n-\t\t0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af,\n-\t\t0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb,\n-\t\t0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8,\n-\t\t0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266,\n-\t\t0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6,\n-\t\t0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551,\n-\t\t0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647,\n-\t\t0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1,\n-\t\t0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db,\n-\t\t0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95,\n-\t\t0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857,\n-\t},\n-\t{\n-\t\t0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3,\n-\t\t0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562,\n-\t\t0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3,\n-\t\t0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9,\n-\t\t0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce,\n-\t\t0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908,\n-\t\t0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655,\n-\t\t0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16,\n-\t\t0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6,\n-\t\t0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e,\n-\t\t0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050,\n-\t\t0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8,\n-\t\t0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a,\n-\t\t0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436,\n-\t\t0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12,\n-\t\t0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e,\n-\t\t0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb,\n-\t\t0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6,\n-\t\t0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1,\n-\t\t0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233,\n-\t\t0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad,\n-\t\t0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3,\n-\t\t0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b,\n-\t\t0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15,\n-\t\t0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2,\n-\t\t0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791,\n-\t\t0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665,\n-\t\t0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6,\n-\t\t0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47,\n-\t\t0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844,\n-\t\t0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d,\n-\t\t0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8,\n-\t},\n-\t{\n-\t\t0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b,\n-\t\t0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5,\n-\t\t0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b,\n-\t\t0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e,\n-\t\t0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d,\n-\t\t0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9,\n-\t\t0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66,\n-\t\t0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced,\n-\t\t0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4,\n-\t\t0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd,\n-\t\t0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60,\n-\t\t0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79,\n-\t\t0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c,\n-\t\t0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24,\n-\t\t0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c,\n-\t\t0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814,\n-\t\t0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b,\n-\t\t0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084,\n-\t\t0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077,\n-\t\t0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22,\n-\t\t0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f,\n-\t\t0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582,\n-\t\t0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb,\n-\t\t0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef,\n-\t\t0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035,\n-\t\t0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17,\n-\t\t0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46,\n-\t\t0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d,\n-\t\t0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a,\n-\t\t0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678,\n-\t\t0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff,\n-\t\t0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0,\n-\t},\n+var td0 = [256]uint32{\n+\t0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393,\n+\t0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f,\n+\t0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6,\n+\t0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844,\n+\t0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4,\n+\t0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94,\n+\t0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a,\n+\t0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c,\n+\t0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a,\n+\t0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051,\n+\t0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff,\n+\t0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb,\n+\t0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e,\n+\t0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a,\n+\t0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16,\n+\t0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8,\n+\t0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34,\n+\t0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120,\n+\t0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0,\n+\t0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef,\n+\t0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4,\n+\t0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5,\n+\t0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b,\n+\t0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6,\n+\t0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0,\n+\t0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f,\n+\t0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f,\n+\t0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713,\n+\t0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c,\n+\t0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86,\n+\t0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541,\n+\t0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742,\n+}\n+var td1 = [256]uint32{\n+\t0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303,\n+\t0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3,\n+\t0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9,\n+\t0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8,\n+\t0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a,\n+\t0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b,\n+\t0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab,\n+\t0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682,\n+\t0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe,\n+\t0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10,\n+\t0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015,\n+\t0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee,\n+\t0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72,\n+\t0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e,\n+\t0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a,\n+\t0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9,\n+\t0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e,\n+\t0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611,\n+\t0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3,\n+\t0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390,\n+\t0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf,\n+\t0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af,\n+\t0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb,\n+\t0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8,\n+\t0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266,\n+\t0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6,\n+\t0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551,\n+\t0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647,\n+\t0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1,\n+\t0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db,\n+\t0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95,\n+\t0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857,\n+}\n+var td2 = [256]uint32{\n+\t0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3,\n+\t0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562,\n+\t0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3,\n+\t0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9,\n+\t0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce,\n+\t0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908,\n+\t0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655,\n+\t0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16,\n+\t0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6,\n+\t0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e,\n+\t0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050,\n+\t0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8,\n+\t0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a,\n+\t0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436,\n+\t0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12,\n+\t0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e,\n+\t0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb,\n+\t0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6,\n+\t0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1,\n+\t0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233,\n+\t0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad,\n+\t0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3,\n+\t0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b,\n+\t0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15,\n+\t0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2,\n+\t0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791,\n+\t0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665,\n+\t0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6,\n+\t0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47,\n+\t0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844,\n+\t0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d,\n+\t0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8,\n+}\n+var td3 = [256]uint32{\n+\t0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b,\n+\t0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5,\n+\t0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b,\n+\t0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e,\n+\t0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d,\n+\t0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9,\n+\t0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66,\n+\t0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced,\n+\t0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4,\n+\t0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd,\n+\t0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60,\n+\t0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79,\n+\t0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c,\n+\t0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24,\n+\t0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c,\n+\t0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814,\n+\t0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b,\n+\t0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084,\n+\t0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077,\n+\t0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22,\n+\t0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f,\n+\t0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582,\n+\t0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb,\n+\t0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef,\n+\t0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035,\n+\t0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17,\n+\t0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46,\n+\t0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d,\n+\t0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a,\n+\t0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678,\n+\t0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff,\n+\t0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0,\n }"}, {"sha": "be478468455b1178b195fbf2a8186cd79c8291e5", "filename": "libgo/go/crypto/dsa/dsa.go", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -185,6 +185,10 @@ func GenerateKey(priv *PrivateKey, rand io.Reader) error {\n // larger message) using the private key, priv. It returns the signature as a\n // pair of integers. The security of the private key depends on the entropy of\n // rand.\n+//\n+// Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated\n+// to the byte-length of the subgroup. This function does not perform that\n+// truncation itself.\n func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error) {\n \t// FIPS 186-3, section 4.6\n \n@@ -218,10 +222,7 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n \t\t\tcontinue\n \t\t}\n \n-\t\tif n > len(hash) {\n-\t\t\tn = len(hash)\n-\t\t}\n-\t\tz := k.SetBytes(hash[:n])\n+\t\tz := k.SetBytes(hash)\n \n \t\ts = new(big.Int).Mul(priv.X, r)\n \t\ts.Add(s, z)\n@@ -238,7 +239,11 @@ func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err err\n }\n \n // Verify verifies the signature in r, s of hash using the public key, pub. It\n-// returns true iff the signature is valid.\n+// reports whether the signature is valid.\n+//\n+// Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated\n+// to the byte-length of the subgroup. This function does not perform that\n+// truncation itself.\n func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool {\n \t// FIPS 186-3, section 4.7\n \n@@ -255,12 +260,7 @@ func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool {\n \tif n&7 != 0 {\n \t\treturn false\n \t}\n-\tn >>= 3\n-\n-\tif n > len(hash) {\n-\t\tn = len(hash)\n-\t}\n-\tz := new(big.Int).SetBytes(hash[:n])\n+\tz := new(big.Int).SetBytes(hash)\n \n \tu1 := new(big.Int).Mul(z, w)\n \tu1.Mod(u1, pub.Q)"}, {"sha": "49d8ea29b936288893970f6a7233ffa5bb5c6e7b", "filename": "libgo/go/crypto/ocsp/ocsp_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Focsp%2Focsp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Focsp%2Focsp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Focsp%2Focsp_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -23,11 +23,11 @@ func TestOCSPDecode(t *testing.T) {\n \t\tNextUpdate:       time.Date(2010, 7, 7, 18, 35, 17, 0, time.UTC),\n \t}\n \n-\tif !reflect.DeepEqual(resp.ThisUpdate, resp.ThisUpdate) {\n+\tif !reflect.DeepEqual(resp.ThisUpdate, expected.ThisUpdate) {\n \t\tt.Errorf(\"resp.ThisUpdate: got %d, want %d\", resp.ThisUpdate, expected.ThisUpdate)\n \t}\n \n-\tif !reflect.DeepEqual(resp.NextUpdate, resp.NextUpdate) {\n+\tif !reflect.DeepEqual(resp.NextUpdate, expected.NextUpdate) {\n \t\tt.Errorf(\"resp.NextUpdate: got %d, want %d\", resp.NextUpdate, expected.NextUpdate)\n \t}\n "}, {"sha": "18dcb02043a6c8cbebb34ea35c14580c7a6758f8", "filename": "libgo/go/crypto/tls/root_stub.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Ftls%2Froot_stub.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Ftls%2Froot_stub.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Froot_stub.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build plan9\n+\n package tls\n \n func initDefaultRoots() {"}, {"sha": "5bbd9825dca4bbe388f3807e7d227a9229157625", "filename": "libgo/go/crypto/tls/root_unix.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Ftls%2Froot_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fcrypto%2Ftls%2Froot_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Froot_unix.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build freebsd linux openbsd netbsd\n+\n package tls\n \n import ("}, {"sha": "ba1f2eb813078b823926d82a17d01e37dda492e9", "filename": "libgo/go/encoding/gob/decode.go", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -1068,7 +1068,12 @@ func (dec *Decoder) compileSingle(remoteId typeId, ut *userTypeInfo) (engine *de\n \tengine.instr = make([]decInstr, 1) // one item\n \tname := rt.String()                // best we can do\n \tif !dec.compatibleType(rt, remoteId, make(map[reflect.Type]typeId)) {\n-\t\treturn nil, errors.New(\"gob: wrong type received for local value \" + name + \": \" + dec.typeString(remoteId))\n+\t\tremoteType := dec.typeString(remoteId)\n+\t\t// Common confusing case: local interface type, remote concrete type.\n+\t\tif ut.base.Kind() == reflect.Interface && remoteId != tInterface {\n+\t\t\treturn nil, errors.New(\"gob: local interface type \" + name + \" can only be decoded from remote interface type; received concrete type \" + remoteType)\n+\t\t}\n+\t\treturn nil, errors.New(\"gob: decoding into local type \" + name + \", received remote type \" + remoteType)\n \t}\n \top, indir := dec.decOpFor(remoteId, rt, name, make(map[reflect.Type]*decOp))\n \tovfl := errors.New(`value for \"` + name + `\" out of range`)"}, {"sha": "cd1500d0772546afdad8427c3bb9b3cf5807a0b3", "filename": "libgo/go/encoding/gob/encoder_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -309,7 +309,7 @@ var singleTests = []SingleTest{\n \t{[7]int{4, 55, 1, 44, 22, 66, 1234}, &testArray, \"\"},\n \n \t// Decode errors\n-\t{172, &testFloat32, \"wrong type\"},\n+\t{172, &testFloat32, \"type\"},\n }\n \n func TestSingletons(t *testing.T) {"}, {"sha": "ff8e80c091ed0876e24a99b179417ac71eea558c", "filename": "libgo/go/encoding/json/encode.go", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -339,13 +339,10 @@ func (e *encodeState) reflectValueQuoted(v reflect.Value, quoted bool) {\n \t\t\te.WriteString(\"null\")\n \t\t\tbreak\n \t\t}\n-\t\t// Slices can be marshalled as nil, but otherwise are handled\n-\t\t// as arrays.\n-\t\tfallthrough\n-\tcase reflect.Array:\n-\t\tif v.Type() == byteSliceType {\n+\t\tif v.Type().Elem().Kind() == reflect.Uint8 {\n+\t\t\t// Byte slices get special treatment; arrays don't.\n+\t\t\ts := v.Bytes()\n \t\t\te.WriteByte('\"')\n-\t\t\ts := v.Interface().([]byte)\n \t\t\tif len(s) < 1024 {\n \t\t\t\t// for small buffers, using Encode directly is much faster.\n \t\t\t\tdst := make([]byte, base64.StdEncoding.EncodedLen(len(s)))\n@@ -361,6 +358,10 @@ func (e *encodeState) reflectValueQuoted(v reflect.Value, quoted bool) {\n \t\t\te.WriteByte('\"')\n \t\t\tbreak\n \t\t}\n+\t\t// Slices can be marshalled as nil, but otherwise are handled\n+\t\t// as arrays.\n+\t\tfallthrough\n+\tcase reflect.Array:\n \t\te.WriteByte('[')\n \t\tn := v.Len()\n \t\tfor i := 0; i < n; i++ {"}, {"sha": "9366589f252e71b710cd5a4e2bab7cca8a2c733c", "filename": "libgo/go/encoding/json/encode_test.go", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -82,3 +82,28 @@ func TestStringTag(t *testing.T) {\n \t\tt.Fatalf(\"decode didn't match.\\nsource: %#v\\nEncoded as:\\n%s\\ndecode: %#v\", s, string(got), s2)\n \t}\n }\n+\n+// byte slices are special even if they're renamed types.\n+type renamedByte byte\n+type renamedByteSlice []byte\n+type renamedRenamedByteSlice []renamedByte\n+\n+func TestEncodeRenamedByteSlice(t *testing.T) {\n+\ts := renamedByteSlice(\"abc\")\n+\tresult, err := Marshal(s)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\texpect := `\"YWJj\"`\n+\tif string(result) != expect {\n+\t\tt.Errorf(\" got %s want %s\", result, expect)\n+\t}\n+\tr := renamedRenamedByteSlice(\"abc\")\n+\tresult, err = Marshal(r)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif string(result) != expect {\n+\t\tt.Errorf(\" got %s want %s\", result, expect)\n+\t}\n+}"}, {"sha": "0e2895b53acb27b9486131d64420dc2ac422897b", "filename": "libgo/go/encoding/json/testdata/code.json.gz", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fjson%2Ftestdata%2Fcode.json.gz", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fencoding%2Fjson%2Ftestdata%2Fcode.json.gz", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Ftestdata%2Fcode.json.gz?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391"}, {"sha": "92384b693761ac025f97f33f720e838be4690da2", "filename": "libgo/go/exp/inotify/inotify_linux_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Finotify%2Finotify_linux_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -57,7 +57,7 @@ func TestInotifyEvents(t *testing.T) {\n \t}\n \n \t// We expect this event to be received almost immediately, but let's wait 1 s to be sure\n-\ttime.Sleep(1000e6) // 1000 ms\n+\ttime.Sleep(1 * time.Second)\n \tif eventsReceived == 0 {\n \t\tt.Fatal(\"inotify event hasn't been received after 1 second\")\n \t}\n@@ -69,7 +69,7 @@ func TestInotifyEvents(t *testing.T) {\n \tselect {\n \tcase <-done:\n \t\tt.Log(\"event channel closed\")\n-\tcase <-time.After(1e9):\n+\tcase <-time.After(1 * time.Second):\n \t\tt.Fatal(\"event stream was not closed after 1 second\")\n \t}\n }\n@@ -84,7 +84,7 @@ func TestInotifyClose(t *testing.T) {\n \t\tdone = true\n \t}()\n \n-\ttime.Sleep(50e6) // 50 ms\n+\ttime.Sleep(50 * time.Millisecond)\n \tif !done {\n \t\tt.Fatal(\"double Close() test failed: second Close() call didn't return\")\n \t}"}, {"sha": "57ba7032981803e41b184fee922bb4adeeb263be", "filename": "libgo/go/exp/norm/normregtest.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -177,7 +177,7 @@ func loadTestData() {\n \t\t\t\t}\n \t\t\t\tif test.r == 0 {\n \t\t\t\t\t// save for CharacterByCharacterTests\n-\t\t\t\t\ttest.r = int(r)\n+\t\t\t\t\ttest.r = rune(r)\n \t\t\t\t}\n \t\t\t\tvar buf [utf8.UTFMax]byte\n \t\t\t\tsz := utf8.EncodeRune(buf[:], rune(r))\n@@ -242,9 +242,9 @@ func doConformanceTests(t *Test, partn int) {\n \n func CharacterByCharacterTests() {\n \ttests := part[1].tests\n-\tlast := 0\n+\tvar last rune = 0\n \tfor i := 0; i <= len(tests); i++ { // last one is special case\n-\t\tvar r int\n+\t\tvar r rune\n \t\tif i == len(tests) {\n \t\t\tr = 0x2FA1E // Don't have to go to 0x10FFFF\n \t\t} else {\n@@ -285,7 +285,7 @@ func PerformanceTest() {\n \t\tnorm.NFC.Append(nil, buf...)\n \t\tsuccess <- true\n \t}()\n-\ttimeout := time.After(1e9)\n+\ttimeout := time.After(1 * time.Second)\n \tselect {\n \tcase <-success:\n \t\t// test completed before the timeout"}, {"sha": "feb79aeafe0b001f216bda09d8398e514d9b6e6f", "filename": "libgo/go/exp/sql/convert.go", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fconvert.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fconvert.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fconvert.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -95,35 +95,26 @@ func convertAssign(dest, src interface{}) error {\n \tswitch dv.Kind() {\n \tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n \t\ts := asString(src)\n-\t\ti64, err := strconv.ParseInt(s, 10, 64)\n+\t\ti64, err := strconv.ParseInt(s, 10, dv.Type().Bits())\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n \t\t}\n-\t\tif dv.OverflowInt(i64) {\n-\t\t\treturn fmt.Errorf(\"string %q overflows %s\", s, dv.Kind())\n-\t\t}\n \t\tdv.SetInt(i64)\n \t\treturn nil\n \tcase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n \t\ts := asString(src)\n-\t\tu64, err := strconv.ParseUint(s, 10, 64)\n+\t\tu64, err := strconv.ParseUint(s, 10, dv.Type().Bits())\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n \t\t}\n-\t\tif dv.OverflowUint(u64) {\n-\t\t\treturn fmt.Errorf(\"string %q overflows %s\", s, dv.Kind())\n-\t\t}\n \t\tdv.SetUint(u64)\n \t\treturn nil\n \tcase reflect.Float32, reflect.Float64:\n \t\ts := asString(src)\n-\t\tf64, err := strconv.ParseFloat(s, 64)\n+\t\tf64, err := strconv.ParseFloat(s, dv.Type().Bits())\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n \t\t}\n-\t\tif dv.OverflowFloat(f64) {\n-\t\t\treturn fmt.Errorf(\"value %q overflows %s\", s, dv.Kind())\n-\t\t}\n \t\tdv.SetFloat(f64)\n \t\treturn nil\n \t}"}, {"sha": "bed09ffb29de944b34f2ba02568aff068f51c935", "filename": "libgo/go/exp/sql/convert_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fconvert_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fconvert_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fconvert_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -55,10 +55,10 @@ var conversionTests = []conversionTest{\n \n \t// Strings to integers\n \t{s: \"255\", d: &scanuint8, wantuint: 255},\n-\t{s: \"256\", d: &scanuint8, wanterr: `string \"256\" overflows uint8`},\n+\t{s: \"256\", d: &scanuint8, wanterr: `converting string \"256\" to a uint8: strconv.ParseUint: parsing \"256\": value out of range`},\n \t{s: \"256\", d: &scanuint16, wantuint: 256},\n \t{s: \"-1\", d: &scanint, wantint: -1},\n-\t{s: \"foo\", d: &scanint, wanterr: `converting string \"foo\" to a int: parsing \"foo\": invalid syntax`},\n+\t{s: \"foo\", d: &scanint, wanterr: `converting string \"foo\" to a int: strconv.ParseInt: parsing \"foo\": invalid syntax`},\n \n \t// True bools\n \t{s: true, d: &scanbool, wantbool: true},"}, {"sha": "948b911f2e0a0ef554eff75a823afcc8cabececf", "filename": "libgo/go/exp/sql/sql.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fsql.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fsql.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fsql.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -134,6 +134,7 @@ func (db *DB) maxIdleConns() int {\n func (db *DB) conn() (driver.Conn, error) {\n \tdb.mu.Lock()\n \tif db.closed {\n+\t\tdb.mu.Unlock()\n \t\treturn nil, errors.New(\"sql: database is closed\")\n \t}\n \tif n := len(db.freeConn); n > 0 {"}, {"sha": "f8ccf764e73ada4f56fe86acab7866e693788974", "filename": "libgo/go/exp/sql/sql_test.go", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fsql_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fsql%2Fsql_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fsql_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -228,3 +228,16 @@ func TestTxStmt(t *testing.T) {\n \t\tt.Fatalf(\"Commit = %v\", err)\n \t}\n }\n+\n+// Tests fix for issue 2542, that we release a lock when querying on\n+// a closed connection.\n+func TestIssue2542Deadlock(t *testing.T) {\n+\tdb := newTestDB(t, \"people\")\n+\tcloseDB(t, db)\n+\tfor i := 0; i < 2; i++ {\n+\t\t_, err := db.Query(\"SELECT|people|age,name|\")\n+\t\tif err == nil {\n+\t\t\tt.Fatalf(\"expected error\")\n+\t\t}\n+\t}\n+}"}, {"sha": "7c862078b7e95a46cdfd19149a6063b31c0c5663", "filename": "libgo/go/exp/ssh/client.go", "status": "modified", "additions": 70, "deletions": 22, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fclient.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -187,10 +187,10 @@ func (c *ClientConn) mainLoop() {\n \t\tif err != nil {\n \t\t\tbreak\n \t\t}\n-\t\t// TODO(dfc) A note on blocking channel use. \n-\t\t// The msg, win, data and dataExt channels of a clientChan can \n-\t\t// cause this loop to block indefinately if the consumer does \n-\t\t// not service them. \n+\t\t// TODO(dfc) A note on blocking channel use.\n+\t\t// The msg, win, data and dataExt channels of a clientChan can\n+\t\t// cause this loop to block indefinately if the consumer does\n+\t\t// not service them.\n \t\tswitch packet[0] {\n \t\tcase msgChannelData:\n \t\t\tif len(packet) < 9 {\n@@ -200,7 +200,7 @@ func (c *ClientConn) mainLoop() {\n \t\t\tpeersId := uint32(packet[1])<<24 | uint32(packet[2])<<16 | uint32(packet[3])<<8 | uint32(packet[4])\n \t\t\tif length := int(packet[5])<<24 | int(packet[6])<<16 | int(packet[7])<<8 | int(packet[8]); length > 0 {\n \t\t\t\tpacket = packet[9:]\n-\t\t\t\tc.getChan(peersId).stdout.data <- packet[:length]\n+\t\t\t\tc.getChan(peersId).stdout.handleData(packet[:length])\n \t\t\t}\n \t\tcase msgChannelExtendedData:\n \t\t\tif len(packet) < 13 {\n@@ -211,11 +211,11 @@ func (c *ClientConn) mainLoop() {\n \t\t\tdatatype := uint32(packet[5])<<24 | uint32(packet[6])<<16 | uint32(packet[7])<<8 | uint32(packet[8])\n \t\t\tif length := int(packet[9])<<24 | int(packet[10])<<16 | int(packet[11])<<8 | int(packet[12]); length > 0 {\n \t\t\t\tpacket = packet[13:]\n-\t\t\t\t// RFC 4254 5.2 defines data_type_code 1 to be data destined \n+\t\t\t\t// RFC 4254 5.2 defines data_type_code 1 to be data destined\n \t\t\t\t// for stderr on interactive sessions. Other data types are\n \t\t\t\t// silently discarded.\n \t\t\t\tif datatype == 1 {\n-\t\t\t\t\tc.getChan(peersId).stderr.data <- packet[:length]\n+\t\t\t\t\tc.getChan(peersId).stderr.handleData(packet[:length])\n \t\t\t\t}\n \t\t\t}\n \t\tdefault:\n@@ -228,12 +228,22 @@ func (c *ClientConn) mainLoop() {\n \t\t\t\tc.getChan(msg.PeersId).msg <- msg\n \t\t\tcase *channelCloseMsg:\n \t\t\t\tch := c.getChan(msg.PeersId)\n+\t\t\t\tch.theyClosed = true\n \t\t\t\tclose(ch.stdin.win)\n-\t\t\t\tclose(ch.stdout.data)\n-\t\t\t\tclose(ch.stderr.data)\n+\t\t\t\tch.stdout.eof()\n+\t\t\t\tch.stderr.eof()\n+\t\t\t\tclose(ch.msg)\n+\t\t\t\tif !ch.weClosed {\n+\t\t\t\t\tch.weClosed = true\n+\t\t\t\t\tch.sendClose()\n+\t\t\t\t}\n \t\t\t\tc.chanlist.remove(msg.PeersId)\n \t\t\tcase *channelEOFMsg:\n-\t\t\t\tc.getChan(msg.PeersId).msg <- msg\n+\t\t\t\tch := c.getChan(msg.PeersId)\n+\t\t\t\tch.stdout.eof()\n+\t\t\t\t// RFC 4254 is mute on how EOF affects dataExt messages but\n+\t\t\t\t// it is logical to signal EOF at the same time.\n+\t\t\t\tch.stderr.eof()\n \t\t\tcase *channelRequestSuccessMsg:\n \t\t\t\tc.getChan(msg.PeersId).msg <- msg\n \t\t\tcase *channelRequestFailureMsg:\n@@ -242,14 +252,16 @@ func (c *ClientConn) mainLoop() {\n \t\t\t\tc.getChan(msg.PeersId).msg <- msg\n \t\t\tcase *windowAdjustMsg:\n \t\t\t\tc.getChan(msg.PeersId).stdin.win <- int(msg.AdditionalBytes)\n+\t\t\tcase *disconnectMsg:\n+\t\t\t\tbreak\n \t\t\tdefault:\n \t\t\t\tfmt.Printf(\"mainLoop: unhandled message %T: %v\\n\", msg, msg)\n \t\t\t}\n \t\t}\n \t}\n }\n \n-// Dial connects to the given network address using net.Dial and \n+// Dial connects to the given network address using net.Dial and\n // then initiates a SSH handshake, returning the resulting client connection.\n func Dial(network, addr string, config *ClientConfig) (*ClientConn, error) {\n \tconn, err := net.Dial(network, addr)\n@@ -259,18 +271,18 @@ func Dial(network, addr string, config *ClientConfig) (*ClientConn, error) {\n \treturn Client(conn, config)\n }\n \n-// A ClientConfig structure is used to configure a ClientConn. After one has \n+// A ClientConfig structure is used to configure a ClientConn. After one has\n // been passed to an SSH function it must not be modified.\n type ClientConfig struct {\n-\t// Rand provides the source of entropy for key exchange. If Rand is \n-\t// nil, the cryptographic random reader in package crypto/rand will \n+\t// Rand provides the source of entropy for key exchange. If Rand is\n+\t// nil, the cryptographic random reader in package crypto/rand will\n \t// be used.\n \tRand io.Reader\n \n \t// The username to authenticate.\n \tUser string\n \n-\t// A slice of ClientAuth methods. Only the first instance \n+\t// A slice of ClientAuth methods. Only the first instance\n \t// of a particular RFC 4252 method will be used during authentication.\n \tAuth []ClientAuth\n \n@@ -285,7 +297,7 @@ func (c *ClientConfig) rand() io.Reader {\n \treturn c.Rand\n }\n \n-// A clientChan represents a single RFC 4254 channel that is multiplexed \n+// A clientChan represents a single RFC 4254 channel that is multiplexed\n // over a single SSH connection.\n type clientChan struct {\n \tpacketWriter\n@@ -294,10 +306,13 @@ type clientChan struct {\n \tstdout      *chanReader      // receives the payload of channelData messages\n \tstderr      *chanReader      // receives the payload of channelExtendedData messages\n \tmsg         chan interface{} // incoming messages\n+\n+\ttheyClosed bool // indicates the close msg has been received from the remote side\n+\tweClosed   bool // incidates the close msg has been sent from our side\n }\n \n // newClientChan returns a partially constructed *clientChan\n-// using the local id provided. To be usable clientChan.peersId \n+// using the local id provided. To be usable clientChan.peersId\n // needs to be assigned once known.\n func newClientChan(t *transport, id uint32) *clientChan {\n \tc := &clientChan{\n@@ -320,8 +335,8 @@ func newClientChan(t *transport, id uint32) *clientChan {\n \treturn c\n }\n \n-// waitForChannelOpenResponse, if successful, fills out \n-// the peerId and records any initial window advertisement. \n+// waitForChannelOpenResponse, if successful, fills out\n+// the peerId and records any initial window advertisement.\n func (c *clientChan) waitForChannelOpenResponse() error {\n \tswitch msg := (<-c.msg).(type) {\n \tcase *channelOpenConfirmMsg:\n@@ -335,13 +350,29 @@ func (c *clientChan) waitForChannelOpenResponse() error {\n \treturn errors.New(\"unexpected packet\")\n }\n \n-// Close closes the channel. This does not close the underlying connection.\n-func (c *clientChan) Close() error {\n+// sendEOF sends EOF to the server. RFC 4254 Section 5.3\n+func (c *clientChan) sendEOF() error {\n+\treturn c.writePacket(marshal(msgChannelEOF, channelEOFMsg{\n+\t\tPeersId: c.peersId,\n+\t}))\n+}\n+\n+// sendClose signals the intent to close the channel.\n+func (c *clientChan) sendClose() error {\n \treturn c.writePacket(marshal(msgChannelClose, channelCloseMsg{\n \t\tPeersId: c.peersId,\n \t}))\n }\n \n+// Close closes the channel. This does not close the underlying connection.\n+func (c *clientChan) Close() error {\n+\tif !c.weClosed {\n+\t\tc.weClosed = true\n+\t\treturn c.sendClose()\n+\t}\n+\treturn nil\n+}\n+\n // Thread safe channel list.\n type chanlist struct {\n \t// protects concurrent access to chans\n@@ -413,7 +444,7 @@ func (w *chanWriter) Write(data []byte) (n int, err error) {\n }\n \n func (w *chanWriter) Close() error {\n-\treturn w.clientChan.writePacket(marshal(msgChannelEOF, channelEOFMsg{w.clientChan.peersId}))\n+\treturn w.clientChan.sendEOF()\n }\n \n // A chanReader represents stdout or stderr of a remote process.\n@@ -422,10 +453,27 @@ type chanReader struct {\n \t// If writes to this channel block, they will block mainLoop, making\n \t// it unable to receive new messages from the remote side.\n \tdata       chan []byte // receives data from remote\n+\tdataClosed bool        // protects data from being closed twice\n \tclientChan *clientChan // the channel backing this reader\n \tbuf        []byte\n }\n \n+// eof signals to the consumer that there is no more data to be received.\n+func (r *chanReader) eof() {\n+\tif !r.dataClosed {\n+\t\tr.dataClosed = true\n+\t\tclose(r.data)\n+\t}\n+}\n+\n+// handleData sends buf to the reader's consumer. If r.data is closed\n+// the data will be silently discarded\n+func (r *chanReader) handleData(buf []byte) {\n+\tif !r.dataClosed {\n+\t\tr.data <- buf\n+\t}\n+}\n+\n // Read reads data from the remote process's stdout or stderr.\n func (r *chanReader) Read(data []byte) (int, error) {\n \tvar ok bool"}, {"sha": "24e3a6334e50ef3e735594cc54b85c1b20d8ce24", "filename": "libgo/go/exp/ssh/client_func_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fclient_func_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fclient_func_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fclient_func_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -6,7 +6,7 @@ package ssh\n \n // ClientConn functional tests.\n // These tests require a running ssh server listening on port 22\n-// on the local host. Functional tests will be skipped unless \n+// on the local host. Functional tests will be skipped unless\n // -ssh.user and -ssh.pass must be passed to gotest.\n \n import ("}, {"sha": "bf9a88e97efc39ad7fd46fbd39754b3ac470fae1", "filename": "libgo/go/exp/ssh/session.go", "status": "modified", "additions": 119, "deletions": 15, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fsession.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fsession.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fsession.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -34,6 +34,20 @@ const (\n \tSIGUSR2 Signal = \"USR2\"\n )\n \n+var signals = map[Signal]int{\n+\tSIGABRT: 6,\n+\tSIGALRM: 14,\n+\tSIGFPE:  8,\n+\tSIGHUP:  1,\n+\tSIGILL:  4,\n+\tSIGINT:  2,\n+\tSIGKILL: 9,\n+\tSIGPIPE: 13,\n+\tSIGQUIT: 3,\n+\tSIGSEGV: 11,\n+\tSIGTERM: 15,\n+}\n+\n // A Session represents a connection to a remote command or shell.\n type Session struct {\n \t// Stdin specifies the remote process's standard input.\n@@ -170,10 +184,17 @@ func (s *Session) Start(cmd string) error {\n \treturn s.start()\n }\n \n-// Run runs cmd on the remote host and waits for it to terminate.\n-// Typically, the remote server passes cmd to the shell for\n-// interpretation. A Session only accepts one call to Run,\n-// Start or Shell.\n+// Run runs cmd on the remote host. Typically, the remote\n+// server passes cmd to the shell for interpretation.\n+// A Session only accepts one call to Run, Start or Shell.\n+//\n+// The returned error is nil if the command runs, has no problems\n+// copying stdin, stdout, and stderr, and exits with a zero exit\n+// status.\n+//\n+// If the command fails to run or doesn't complete successfully, the\n+// error is of type *ExitError. Other error types may be\n+// returned for I/O problems.\n func (s *Session) Run(cmd string) error {\n \terr := s.Start(cmd)\n \tif err != nil {\n@@ -233,6 +254,14 @@ func (s *Session) start() error {\n }\n \n // Wait waits for the remote command to exit.\n+//\n+// The returned error is nil if the command runs, has no problems\n+// copying stdin, stdout, and stderr, and exits with a zero exit\n+// status.\n+//\n+// If the command fails to run or doesn't complete successfully, the\n+// error is of type *ExitError. Other error types may be\n+// returned for I/O problems.\n func (s *Session) Wait() error {\n \tif !s.started {\n \t\treturn errors.New(\"ssh: session not started\")\n@@ -255,29 +284,61 @@ func (s *Session) Wait() error {\n }\n \n func (s *Session) wait() error {\n-\tfor {\n-\t\tswitch msg := (<-s.msg).(type) {\n+\twm := Waitmsg{status: -1}\n+\n+\t// Wait for msg channel to be closed before returning.\n+\tfor msg := range s.msg {\n+\t\tswitch msg := msg.(type) {\n \t\tcase *channelRequestMsg:\n-\t\t\t// TODO(dfc) improve this behavior to match os.Waitmsg\n \t\t\tswitch msg.Request {\n \t\t\tcase \"exit-status\":\n \t\t\t\td := msg.RequestSpecificData\n-\t\t\t\tstatus := int(d[0])<<24 | int(d[1])<<16 | int(d[2])<<8 | int(d[3])\n-\t\t\t\tif status > 0 {\n-\t\t\t\t\treturn fmt.Errorf(\"remote process exited with %d\", status)\n-\t\t\t\t}\n-\t\t\t\treturn nil\n+\t\t\t\twm.status = int(d[0])<<24 | int(d[1])<<16 | int(d[2])<<8 | int(d[3])\n \t\t\tcase \"exit-signal\":\n-\t\t\t\t// TODO(dfc) make a more readable error message\n-\t\t\t\treturn fmt.Errorf(\"%v\", msg.RequestSpecificData)\n+\t\t\t\tsignal, rest, ok := parseString(msg.RequestSpecificData)\n+\t\t\t\tif !ok {\n+\t\t\t\t\treturn fmt.Errorf(\"wait: could not parse request data: %v\", msg.RequestSpecificData)\n+\t\t\t\t}\n+\t\t\t\twm.signal = safeString(string(signal))\n+\n+\t\t\t\t// skip coreDumped bool\n+\t\t\t\tif len(rest) == 0 {\n+\t\t\t\t\treturn fmt.Errorf(\"wait: could not parse request data: %v\", msg.RequestSpecificData)\n+\t\t\t\t}\n+\t\t\t\trest = rest[1:]\n+\n+\t\t\t\terrmsg, rest, ok := parseString(rest)\n+\t\t\t\tif !ok {\n+\t\t\t\t\treturn fmt.Errorf(\"wait: could not parse request data: %v\", msg.RequestSpecificData)\n+\t\t\t\t}\n+\t\t\t\twm.msg = safeString(string(errmsg))\n+\n+\t\t\t\tlang, _, ok := parseString(rest)\n+\t\t\t\tif !ok {\n+\t\t\t\t\treturn fmt.Errorf(\"wait: could not parse request data: %v\", msg.RequestSpecificData)\n+\t\t\t\t}\n+\t\t\t\twm.lang = safeString(string(lang))\n \t\t\tdefault:\n \t\t\t\treturn fmt.Errorf(\"wait: unexpected channel request: %v\", msg)\n \t\t\t}\n \t\tdefault:\n \t\t\treturn fmt.Errorf(\"wait: unexpected packet %T received: %v\", msg, msg)\n \t\t}\n \t}\n-\tpanic(\"unreachable\")\n+\tif wm.status == 0 {\n+\t\treturn nil\n+\t}\n+\tif wm.status == -1 {\n+\t\t// exit-status was never sent from server\n+\t\tif wm.signal == \"\" {\n+\t\t\treturn errors.New(\"wait: remote command exited without exit status or exit signal\")\n+\t\t}\n+\t\twm.status = 128\n+\t\tif _, ok := signals[Signal(wm.signal)]; ok {\n+\t\t\twm.status += signals[Signal(wm.signal)]\n+\t\t}\n+\t}\n+\treturn &ExitError{wm}\n }\n \n func (s *Session) stdin() error {\n@@ -391,3 +452,46 @@ func (c *ClientConn) NewSession() (*Session, error) {\n \t\tclientChan: ch,\n \t}, nil\n }\n+\n+// An ExitError reports unsuccessful completion of a remote command.\n+type ExitError struct {\n+\tWaitmsg\n+}\n+\n+func (e *ExitError) Error() string {\n+\treturn e.Waitmsg.String()\n+}\n+\n+// Waitmsg stores the information about an exited remote command\n+// as reported by Wait.\n+type Waitmsg struct {\n+\tstatus int\n+\tsignal string\n+\tmsg    string\n+\tlang   string\n+}\n+\n+// ExitStatus returns the exit status of the remote command.\n+func (w Waitmsg) ExitStatus() int {\n+\treturn w.status\n+}\n+\n+// Signal returns the exit signal of the remote command if\n+// it was terminated violently.\n+func (w Waitmsg) Signal() string {\n+\treturn w.signal\n+}\n+\n+// Msg returns the exit message given by the remote command\n+func (w Waitmsg) Msg() string {\n+\treturn w.msg\n+}\n+\n+// Lang returns the language tag. See RFC 3066\n+func (w Waitmsg) Lang() string {\n+\treturn w.lang\n+}\n+\n+func (w Waitmsg) String() string {\n+\treturn fmt.Sprintf(\"Process exited with: %v. Reason was: %v (%v)\", w.status, w.msg, w.signal)\n+}"}, {"sha": "a28ead087369dfa7007b7d65d660753b1f7d79ef", "filename": "libgo/go/exp/ssh/session_test.go", "status": "modified", "additions": 240, "deletions": 24, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fsession_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fssh%2Fsession_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fsession_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -12,8 +12,10 @@ import (\n \t\"testing\"\n )\n \n+type serverType func(*channel)\n+\n // dial constructs a new test server and returns a *ClientConn.\n-func dial(t *testing.T) *ClientConn {\n+func dial(handler serverType, t *testing.T) *ClientConn {\n \tpw := password(\"tiger\")\n \tserverConfig.PasswordCallback = func(user, pass string) bool {\n \t\treturn user == \"testuser\" && pass == string(pw)\n@@ -50,27 +52,7 @@ func dial(t *testing.T) *ClientConn {\n \t\t\t\tcontinue\n \t\t\t}\n \t\t\tch.Accept()\n-\t\t\tgo func() {\n-\t\t\t\tdefer ch.Close()\n-\t\t\t\t// this string is returned to stdout\n-\t\t\t\tshell := NewServerShell(ch, \"golang\")\n-\t\t\t\tshell.ReadLine()\n-\t\t\t\ttype exitMsg struct {\n-\t\t\t\t\tPeersId   uint32\n-\t\t\t\t\tRequest   string\n-\t\t\t\t\tWantReply bool\n-\t\t\t\t\tStatus    uint32\n-\t\t\t\t}\n-\t\t\t\t// TODO(dfc) converting to the concrete type should not be\n-\t\t\t\t// necessary to send a packet.\n-\t\t\t\tmsg := exitMsg{\n-\t\t\t\t\tPeersId:   ch.(*channel).theirId,\n-\t\t\t\t\tRequest:   \"exit-status\",\n-\t\t\t\t\tWantReply: false,\n-\t\t\t\t\tStatus:    0,\n-\t\t\t\t}\n-\t\t\t\tch.(*channel).serverConn.writePacket(marshal(msgChannelRequest, msg))\n-\t\t\t}()\n+\t\t\tgo handler(ch.(*channel))\n \t\t}\n \t\tt.Log(\"done\")\n \t}()\n@@ -91,7 +73,7 @@ func dial(t *testing.T) *ClientConn {\n \n // Test a simple string is returned to session.Stdout.\n func TestSessionShell(t *testing.T) {\n-\tconn := dial(t)\n+\tconn := dial(shellHandler, t)\n \tdefer conn.Close()\n \tsession, err := conn.NewSession()\n \tif err != nil {\n@@ -116,7 +98,7 @@ func TestSessionShell(t *testing.T) {\n \n // Test a simple string is returned via StdoutPipe.\n func TestSessionStdoutPipe(t *testing.T) {\n-\tconn := dial(t)\n+\tconn := dial(shellHandler, t)\n \tdefer conn.Close()\n \tsession, err := conn.NewSession()\n \tif err != nil {\n@@ -147,3 +129,237 @@ func TestSessionStdoutPipe(t *testing.T) {\n \t\tt.Fatalf(\"Remote shell did not return expected string: expected=golang, actual=%s\", actual)\n \t}\n }\n+\n+// Test non-0 exit status is returned correctly.\n+func TestExitStatusNonZero(t *testing.T) {\n+\tconn := dial(exitStatusNonZeroHandler, t)\n+\tdefer conn.Close()\n+\tsession, err := conn.NewSession()\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unable to request new session: %s\", err)\n+\t}\n+\tdefer session.Close()\n+\tif err := session.Shell(); err != nil {\n+\t\tt.Fatalf(\"Unable to execute command: %s\", err)\n+\t}\n+\terr = session.Wait()\n+\tif err == nil {\n+\t\tt.Fatalf(\"expected command to fail but it didn't\")\n+\t}\n+\te, ok := err.(*ExitError)\n+\tif !ok {\n+\t\tt.Fatalf(\"expected *ExitError but got %T\", err)\n+\t}\n+\tif e.ExitStatus() != 15 {\n+\t\tt.Fatalf(\"expected command to exit with 15 but got %s\", e.ExitStatus())\n+\t}\n+}\n+\n+// Test 0 exit status is returned correctly.\n+func TestExitStatusZero(t *testing.T) {\n+\tconn := dial(exitStatusZeroHandler, t)\n+\tdefer conn.Close()\n+\tsession, err := conn.NewSession()\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unable to request new session: %s\", err)\n+\t}\n+\tdefer session.Close()\n+\n+\tif err := session.Shell(); err != nil {\n+\t\tt.Fatalf(\"Unable to execute command: %s\", err)\n+\t}\n+\terr = session.Wait()\n+\tif err != nil {\n+\t\tt.Fatalf(\"expected nil but got %s\", err)\n+\t}\n+}\n+\n+// Test exit signal and status are both returned correctly.\n+func TestExitSignalAndStatus(t *testing.T) {\n+\tconn := dial(exitSignalAndStatusHandler, t)\n+\tdefer conn.Close()\n+\tsession, err := conn.NewSession()\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unable to request new session: %s\", err)\n+\t}\n+\tdefer session.Close()\n+\tif err := session.Shell(); err != nil {\n+\t\tt.Fatalf(\"Unable to execute command: %s\", err)\n+\t}\n+\terr = session.Wait()\n+\tif err == nil {\n+\t\tt.Fatalf(\"expected command to fail but it didn't\")\n+\t}\n+\te, ok := err.(*ExitError)\n+\tif !ok {\n+\t\tt.Fatalf(\"expected *ExitError but got %T\", err)\n+\t}\n+\tif e.Signal() != \"TERM\" || e.ExitStatus() != 15 {\n+\t\tt.Fatalf(\"expected command to exit with signal TERM and status 15 but got signal %s and status %v\", e.Signal(), e.ExitStatus())\n+\t}\n+}\n+\n+// Test exit signal and status are both returned correctly.\n+func TestKnownExitSignalOnly(t *testing.T) {\n+\tconn := dial(exitSignalHandler, t)\n+\tdefer conn.Close()\n+\tsession, err := conn.NewSession()\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unable to request new session: %s\", err)\n+\t}\n+\tdefer session.Close()\n+\tif err := session.Shell(); err != nil {\n+\t\tt.Fatalf(\"Unable to execute command: %s\", err)\n+\t}\n+\terr = session.Wait()\n+\tif err == nil {\n+\t\tt.Fatalf(\"expected command to fail but it didn't\")\n+\t}\n+\te, ok := err.(*ExitError)\n+\tif !ok {\n+\t\tt.Fatalf(\"expected *ExitError but got %T\", err)\n+\t}\n+\tif e.Signal() != \"TERM\" || e.ExitStatus() != 143 {\n+\t\tt.Fatalf(\"expected command to exit with signal TERM and status 143 but got signal %s and status %v\", e.Signal(), e.ExitStatus())\n+\t}\n+}\n+\n+// Test exit signal and status are both returned correctly.\n+func TestUnknownExitSignal(t *testing.T) {\n+\tconn := dial(exitSignalUnknownHandler, t)\n+\tdefer conn.Close()\n+\tsession, err := conn.NewSession()\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unable to request new session: %s\", err)\n+\t}\n+\tdefer session.Close()\n+\tif err := session.Shell(); err != nil {\n+\t\tt.Fatalf(\"Unable to execute command: %s\", err)\n+\t}\n+\terr = session.Wait()\n+\tif err == nil {\n+\t\tt.Fatalf(\"expected command to fail but it didn't\")\n+\t}\n+\te, ok := err.(*ExitError)\n+\tif !ok {\n+\t\tt.Fatalf(\"expected *ExitError but got %T\", err)\n+\t}\n+\tif e.Signal() != \"SYS\" || e.ExitStatus() != 128 {\n+\t\tt.Fatalf(\"expected command to exit with signal SYS and status 128 but got signal %s and status %v\", e.Signal(), e.ExitStatus())\n+\t}\n+}\n+\n+// Test WaitMsg is not returned if the channel closes abruptly.\n+func TestExitWithoutStatusOrSignal(t *testing.T) {\n+\tconn := dial(exitWithoutSignalOrStatus, t)\n+\tdefer conn.Close()\n+\tsession, err := conn.NewSession()\n+\tif err != nil {\n+\t\tt.Fatalf(\"Unable to request new session: %s\", err)\n+\t}\n+\tdefer session.Close()\n+\tif err := session.Shell(); err != nil {\n+\t\tt.Fatalf(\"Unable to execute command: %s\", err)\n+\t}\n+\terr = session.Wait()\n+\tif err == nil {\n+\t\tt.Fatalf(\"expected command to fail but it didn't\")\n+\t}\n+\t_, ok := err.(*ExitError)\n+\tif ok {\n+\t\t// you can't actually test for errors.errorString\n+\t\t// because it's not exported.\n+\t\tt.Fatalf(\"expected *errorString but got %T\", err)\n+\t}\n+}\n+\n+type exitStatusMsg struct {\n+\tPeersId   uint32\n+\tRequest   string\n+\tWantReply bool\n+\tStatus    uint32\n+}\n+\n+type exitSignalMsg struct {\n+\tPeersId    uint32\n+\tRequest    string\n+\tWantReply  bool\n+\tSignal     string\n+\tCoreDumped bool\n+\tErrmsg     string\n+\tLang       string\n+}\n+\n+func exitStatusZeroHandler(ch *channel) {\n+\tdefer ch.Close()\n+\t// this string is returned to stdout\n+\tshell := NewServerShell(ch, \"> \")\n+\tshell.ReadLine()\n+\tsendStatus(0, ch)\n+}\n+\n+func exitStatusNonZeroHandler(ch *channel) {\n+\tdefer ch.Close()\n+\tshell := NewServerShell(ch, \"> \")\n+\tshell.ReadLine()\n+\tsendStatus(15, ch)\n+}\n+\n+func exitSignalAndStatusHandler(ch *channel) {\n+\tdefer ch.Close()\n+\tshell := NewServerShell(ch, \"> \")\n+\tshell.ReadLine()\n+\tsendStatus(15, ch)\n+\tsendSignal(\"TERM\", ch)\n+}\n+\n+func exitSignalHandler(ch *channel) {\n+\tdefer ch.Close()\n+\tshell := NewServerShell(ch, \"> \")\n+\tshell.ReadLine()\n+\tsendSignal(\"TERM\", ch)\n+}\n+\n+func exitSignalUnknownHandler(ch *channel) {\n+\tdefer ch.Close()\n+\tshell := NewServerShell(ch, \"> \")\n+\tshell.ReadLine()\n+\tsendSignal(\"SYS\", ch)\n+}\n+\n+func exitWithoutSignalOrStatus(ch *channel) {\n+\tdefer ch.Close()\n+\tshell := NewServerShell(ch, \"> \")\n+\tshell.ReadLine()\n+}\n+\n+func shellHandler(ch *channel) {\n+\tdefer ch.Close()\n+\t// this string is returned to stdout\n+\tshell := NewServerShell(ch, \"golang\")\n+\tshell.ReadLine()\n+\tsendStatus(0, ch)\n+}\n+\n+func sendStatus(status uint32, ch *channel) {\n+\tmsg := exitStatusMsg{\n+\t\tPeersId:   ch.theirId,\n+\t\tRequest:   \"exit-status\",\n+\t\tWantReply: false,\n+\t\tStatus:    status,\n+\t}\n+\tch.serverConn.writePacket(marshal(msgChannelRequest, msg))\n+}\n+\n+func sendSignal(signal string, ch *channel) {\n+\tsig := exitSignalMsg{\n+\t\tPeersId:    ch.theirId,\n+\t\tRequest:    \"exit-signal\",\n+\t\tWantReply:  false,\n+\t\tSignal:     signal,\n+\t\tCoreDumped: false,\n+\t\tErrmsg:     \"Process terminated\",\n+\t\tLang:       \"en-GB-oed\",\n+\t}\n+\tch.serverConn.writePacket(marshal(msgChannelRequest, sig))\n+}"}, {"sha": "10c56db21ff0d78fe2e1a0d850d6a72e5be51a32", "filename": "libgo/go/exp/types/gcimporter.go", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -81,7 +81,7 @@ type gcParser struct {\n func (p *gcParser) init(filename, id string, src io.Reader, imports map[string]*ast.Object) {\n \tp.scanner.Init(src)\n \tp.scanner.Error = func(_ *scanner.Scanner, msg string) { p.error(msg) }\n-\tp.scanner.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanStrings | scanner.ScanComments | scanner.SkipComments\n+\tp.scanner.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanChars | scanner.ScanStrings | scanner.ScanComments | scanner.SkipComments\n \tp.scanner.Whitespace = 1<<'\\t' | 1<<' '\n \tp.scanner.Filename = filename // for good error messages\n \tp.next()\n@@ -145,18 +145,14 @@ func GcImporter(imports map[string]*ast.Object, path string) (pkg *ast.Object, e\n \n // Declare inserts a named object of the given kind in scope.\n func (p *gcParser) declare(scope *ast.Scope, kind ast.ObjKind, name string) *ast.Object {\n-\t// a type may have been declared before - if it exists\n-\t// already in the respective package scope, return that\n-\t// type\n-\tif kind == ast.Typ {\n-\t\tif obj := scope.Lookup(name); obj != nil {\n-\t\t\tassert(obj.Kind == ast.Typ)\n-\t\t\treturn obj\n-\t\t}\n+\t// the object may have been imported before - if it exists\n+\t// already in the respective package scope, return that object\n+\tif obj := scope.Lookup(name); obj != nil {\n+\t\tassert(obj.Kind == kind)\n+\t\treturn obj\n \t}\n \n-\t// any other object must be a newly declared object -\n-\t// create it and insert it into the package scope\n+\t// otherwise create a new object and insert it into the package scope\n \tobj := ast.NewObj(kind, name)\n \tif scope.Insert(obj) != nil {\n \t\tp.errorf(\"already declared: %v %s\", kind, obj.Name)\n@@ -199,14 +195,15 @@ func (p *gcParser) errorf(format string, args ...interface{}) {\n func (p *gcParser) expect(tok rune) string {\n \tlit := p.lit\n \tif p.tok != tok {\n-\t\tp.errorf(\"expected %q, got %q (%q)\", scanner.TokenString(tok), scanner.TokenString(p.tok), lit)\n+\t\tpanic(1)\n+\t\tp.errorf(\"expected %s, got %s (%s)\", scanner.TokenString(tok), scanner.TokenString(p.tok), lit)\n \t}\n \tp.next()\n \treturn lit\n }\n \n func (p *gcParser) expectSpecial(tok string) {\n-\tsep := rune('x') // not white space\n+\tsep := 'x' // not white space\n \ti := 0\n \tfor i < len(tok) && p.tok == rune(tok[i]) && sep > ' ' {\n \t\tsep = p.scanner.Peek() // if sep <= ' ', there is white space before the next token\n@@ -261,7 +258,7 @@ func (p *gcParser) parsePkgId() *ast.Object {\n func (p *gcParser) parseDotIdent() string {\n \tident := \"\"\n \tif p.tok != scanner.Int {\n-\t\tsep := rune('x') // not white space\n+\t\tsep := 'x' // not white space\n \t\tfor (p.tok == scanner.Ident || p.tok == scanner.Int || p.tok == '\u00b7') && sep > ' ' {\n \t\t\tident += p.lit\n \t\t\tsep = p.scanner.Peek() // if sep <= ' ', there is white space before the next token\n@@ -645,6 +642,7 @@ func (p *gcParser) parseNumber() Const {\n // Literal     = bool_lit | int_lit | float_lit | complex_lit | string_lit .\n // bool_lit    = \"true\" | \"false\" .\n // complex_lit = \"(\" float_lit \"+\" float_lit \")\" .\n+// rune_lit = \"(\" int_lit \"+\" int_lit \")\" .\n // string_lit  = `\"` { unicode_char } `\"` .\n //\n func (p *gcParser) parseConstDecl() {\n@@ -674,21 +672,33 @@ func (p *gcParser) parseConstDecl() {\n \t\t\ttyp = Float64.Underlying\n \t\t}\n \tcase '(':\n-\t\t// complex_lit\n+\t\t// complex_lit or rune_lit\n \t\tp.next()\n+\t\tif p.tok == scanner.Char {\n+\t\t\tp.next()\n+\t\t\tp.expect('+')\n+\t\t\tp.parseNumber()\n+\t\t\tp.expect(')')\n+\t\t\t// TODO: x = ...\n+\t\t\tbreak\n+\t\t}\n \t\tre := p.parseNumber()\n \t\tp.expect('+')\n \t\tim := p.parseNumber()\n \t\tp.expect(')')\n \t\tx = Const{cmplx{re.val.(*big.Rat), im.val.(*big.Rat)}}\n \t\ttyp = Complex128.Underlying\n+\tcase scanner.Char:\n+\t\t// TODO: x = ...\n+\t\tp.next()\n \tcase scanner.String:\n \t\t// string_lit\n \t\tx = MakeConst(token.STRING, p.lit)\n \t\tp.next()\n \t\ttyp = String.Underlying\n \tdefault:\n-\t\tp.error(\"expected literal\")\n+\t\tprintln(p.tok)\n+\t\tp.errorf(\"expected literal got %s\", scanner.TokenString(p.tok))\n \t}\n \tif obj.Type == nil {\n \t\tobj.Type = typ"}, {"sha": "d47ffd139216bc09abbbe5273b5768f4bac65f77", "filename": "libgo/go/exp/winfsnotify/winfsnotify.go", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -75,7 +75,7 @@ type Watcher struct {\n // NewWatcher creates and returns a Watcher.\n func NewWatcher() (*Watcher, error) {\n \tport, e := syscall.CreateIoCompletionPort(syscall.InvalidHandle, 0, 0, 0)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn nil, os.NewSyscallError(\"CreateIoCompletionPort\", e)\n \t}\n \tw := &Watcher{\n@@ -147,15 +147,15 @@ func (w *Watcher) RemoveWatch(path string) error {\n \n func (w *Watcher) wakeupReader() error {\n \te := syscall.PostQueuedCompletionStatus(w.port, 0, 0, nil)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn os.NewSyscallError(\"PostQueuedCompletionStatus\", e)\n \t}\n \treturn nil\n }\n \n func getDir(pathname string) (dir string, err error) {\n \tattr, e := syscall.GetFileAttributes(syscall.StringToUTF16Ptr(pathname))\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn \"\", os.NewSyscallError(\"GetFileAttributes\", e)\n \t}\n \tif attr&syscall.FILE_ATTRIBUTE_DIRECTORY != 0 {\n@@ -173,11 +173,11 @@ func getIno(path string) (ino *inode, err error) {\n \t\tsyscall.FILE_SHARE_READ|syscall.FILE_SHARE_WRITE|syscall.FILE_SHARE_DELETE,\n \t\tnil, syscall.OPEN_EXISTING,\n \t\tsyscall.FILE_FLAG_BACKUP_SEMANTICS|syscall.FILE_FLAG_OVERLAPPED, 0)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn nil, os.NewSyscallError(\"CreateFile\", e)\n \t}\n \tvar fi syscall.ByHandleFileInformation\n-\tif e = syscall.GetFileInformationByHandle(h, &fi); e != 0 {\n+\tif e = syscall.GetFileInformationByHandle(h, &fi); e != nil {\n \t\tsyscall.CloseHandle(h)\n \t\treturn nil, os.NewSyscallError(\"GetFileInformationByHandle\", e)\n \t}\n@@ -222,7 +222,7 @@ func (w *Watcher) addWatch(pathname string, flags uint64) error {\n \t}\n \twatchEntry := w.watches.get(ino)\n \tif watchEntry == nil {\n-\t\tif _, e := syscall.CreateIoCompletionPort(ino.handle, w.port, 0, 0); e != 0 {\n+\t\tif _, e := syscall.CreateIoCompletionPort(ino.handle, w.port, 0, 0); e != nil {\n \t\t\tsyscall.CloseHandle(ino.handle)\n \t\t\treturn os.NewSyscallError(\"CreateIoCompletionPort\", e)\n \t\t}\n@@ -295,7 +295,7 @@ func (w *Watcher) deleteWatch(watch *watch) {\n \n // Must run within the I/O thread.\n func (w *Watcher) startRead(watch *watch) error {\n-\tif e := syscall.CancelIo(watch.ino.handle); e != 0 {\n+\tif e := syscall.CancelIo(watch.ino.handle); e != nil {\n \t\tw.Error <- os.NewSyscallError(\"CancelIo\", e)\n \t\tw.deleteWatch(watch)\n \t}\n@@ -304,15 +304,15 @@ func (w *Watcher) startRead(watch *watch) error {\n \t\tmask |= toWindowsFlags(m)\n \t}\n \tif mask == 0 {\n-\t\tif e := syscall.CloseHandle(watch.ino.handle); e != 0 {\n+\t\tif e := syscall.CloseHandle(watch.ino.handle); e != nil {\n \t\t\tw.Error <- os.NewSyscallError(\"CloseHandle\", e)\n \t\t}\n \t\tdelete(w.watches[watch.ino.volume], watch.ino.index)\n \t\treturn nil\n \t}\n \te := syscall.ReadDirectoryChanges(watch.ino.handle, &watch.buf[0],\n \t\tuint32(unsafe.Sizeof(watch.buf)), false, mask, nil, &watch.ov, 0)\n-\tif e != 0 {\n+\tif e != nil {\n \t\terr := os.NewSyscallError(\"ReadDirectoryChanges\", e)\n \t\tif e == syscall.ERROR_ACCESS_DENIED && watch.mask&provisional == 0 {\n \t\t\t// Watched directory was probably removed\n@@ -354,7 +354,7 @@ func (w *Watcher) readEvents() {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tvar err error\n-\t\t\t\tif e := syscall.CloseHandle(w.port); e != 0 {\n+\t\t\t\tif e := syscall.CloseHandle(w.port); e != nil {\n \t\t\t\t\terr = os.NewSyscallError(\"CloseHandle\", e)\n \t\t\t\t}\n \t\t\t\tclose(w.Event)\n@@ -386,7 +386,7 @@ func (w *Watcher) readEvents() {\n \t\tdefault:\n \t\t\tw.Error <- os.NewSyscallError(\"GetQueuedCompletionPort\", e)\n \t\t\tcontinue\n-\t\tcase 0:\n+\t\tcase nil:\n \t\t}\n \n \t\tvar offset uint32"}, {"sha": "b9c43d9c006705bb7a1efc1cd80973cdae455ff1", "filename": "libgo/go/exp/winfsnotify/winfsnotify_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwinfsnotify%2Fwinfsnotify_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -21,7 +21,7 @@ func expect(t *testing.T, eventstream <-chan *Event, name string, mask uint32) {\n \t\tif event.Name != name || event.Mask != mask {\n \t\t\tt.Fatal(\"did not receive expected event\")\n \t\t}\n-\tcase <-time.After(1e9):\n+\tcase <-time.After(1 * time.Second):\n \t\tt.Fatal(\"timed out waiting for event\")\n \t}\n }\n@@ -108,7 +108,7 @@ func TestNotifyClose(t *testing.T) {\n \t\tdone = true\n \t}()\n \n-\ttime.Sleep(50e6) // 50 ms\n+\ttime.Sleep(50 * time.Millisecond)\n \tif !done {\n \t\tt.Fatal(\"double Close() test failed: second Close() call didn't return\")\n \t}"}, {"sha": "d58421bcfa740665255de8113261bfdf310d331f", "filename": "libgo/go/exp/wingui/gui.go", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwingui%2Fgui.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwingui%2Fgui.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwingui%2Fgui.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -18,8 +18,9 @@ func abortf(format string, a ...interface{}) {\n \tos.Exit(1)\n }\n \n-func abortErrNo(funcname string, err int) {\n-\tabortf(\"%s failed: %d %s\\n\", funcname, err, syscall.Errstr(err))\n+func abortErrNo(funcname string, err error) {\n+\terrno, _ := err.(syscall.Errno)\n+\tabortf(\"%s failed: %d %s\\n\", funcname, uint32(errno), err)\n }\n \n // global vars\n@@ -33,7 +34,7 @@ var (\n func WndProc(hwnd syscall.Handle, msg uint32, wparam, lparam uintptr) (rc uintptr) {\n \tswitch msg {\n \tcase WM_CREATE:\n-\t\tvar e int\n+\t\tvar e error\n \t\t// CreateWindowEx\n \t\tbh, e = CreateWindowEx(\n \t\t\t0,\n@@ -42,7 +43,7 @@ func WndProc(hwnd syscall.Handle, msg uint32, wparam, lparam uintptr) (rc uintpt\n \t\t\tWS_CHILD|WS_VISIBLE|BS_DEFPUSHBUTTON,\n \t\t\t75, 70, 140, 25,\n \t\t\thwnd, 1, mh, 0)\n-\t\tif e != 0 {\n+\t\tif e != nil {\n \t\t\tabortErrNo(\"CreateWindowEx\", e)\n \t\t}\n \t\tfmt.Printf(\"button handle is %x\\n\", bh)\n@@ -51,7 +52,7 @@ func WndProc(hwnd syscall.Handle, msg uint32, wparam, lparam uintptr) (rc uintpt\n \t\tswitch syscall.Handle(lparam) {\n \t\tcase bh:\n \t\t\te := PostMessage(hwnd, WM_CLOSE, 0, 0)\n-\t\t\tif e != 0 {\n+\t\t\tif e != nil {\n \t\t\t\tabortErrNo(\"PostMessage\", e)\n \t\t\t}\n \t\tdefault:\n@@ -69,23 +70,23 @@ func WndProc(hwnd syscall.Handle, msg uint32, wparam, lparam uintptr) (rc uintpt\n }\n \n func rungui() int {\n-\tvar e int\n+\tvar e error\n \n \t// GetModuleHandle\n \tmh, e = GetModuleHandle(nil)\n-\tif e != 0 {\n+\tif e != nil {\n \t\tabortErrNo(\"GetModuleHandle\", e)\n \t}\n \n \t// Get icon we're going to use.\n \tmyicon, e := LoadIcon(0, IDI_APPLICATION)\n-\tif e != 0 {\n+\tif e != nil {\n \t\tabortErrNo(\"LoadIcon\", e)\n \t}\n \n \t// Get cursor we're going to use.\n \tmycursor, e := LoadCursor(0, IDC_ARROW)\n-\tif e != 0 {\n+\tif e != nil {\n \t\tabortErrNo(\"LoadCursor\", e)\n \t}\n \n@@ -104,7 +105,7 @@ func rungui() int {\n \twc.MenuName = nil\n \twc.ClassName = wcname\n \twc.IconSm = myicon\n-\tif _, e := RegisterClassEx(&wc); e != 0 {\n+\tif _, e := RegisterClassEx(&wc); e != nil {\n \t\tabortErrNo(\"RegisterClassEx\", e)\n \t}\n \n@@ -116,7 +117,7 @@ func rungui() int {\n \t\tWS_OVERLAPPEDWINDOW,\n \t\tCW_USEDEFAULT, CW_USEDEFAULT, 300, 200,\n \t\t0, 0, mh, 0)\n-\tif e != 0 {\n+\tif e != nil {\n \t\tabortErrNo(\"CreateWindowEx\", e)\n \t}\n \tfmt.Printf(\"main window handle is %x\\n\", wh)\n@@ -125,15 +126,15 @@ func rungui() int {\n \tShowWindow(wh, SW_SHOWDEFAULT)\n \n \t// UpdateWindow\n-\tif e := UpdateWindow(wh); e != 0 {\n+\tif e := UpdateWindow(wh); e != nil {\n \t\tabortErrNo(\"UpdateWindow\", e)\n \t}\n \n \t// Process all windows messages until WM_QUIT.\n \tvar m Msg\n \tfor {\n \t\tr, e := GetMessage(&m, 0, 0, 0)\n-\t\tif e != 0 {\n+\t\tif e != nil {\n \t\t\tabortErrNo(\"GetMessage\", e)\n \t\t}\n \t\tif r == 0 {"}, {"sha": "24f3dd4d723e783d58d13fffd67d8c916b825d6c", "filename": "libgo/go/exp/wingui/winapi.go", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwingui%2Fwinapi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwingui%2Fwinapi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwingui%2Fwinapi.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -110,22 +110,22 @@ var (\n \tIDI_INFORMATION = IDI_ASTERISK\n )\n \n-//sys\tGetModuleHandle(modname *uint16) (handle syscall.Handle, errno int) = GetModuleHandleW\n-//sys\tRegisterClassEx(wndclass *Wndclassex) (atom uint16, errno int) = user32.RegisterClassExW\n-//sys\tCreateWindowEx(exstyle uint32, classname *uint16, windowname *uint16, style uint32, x int32, y int32, width int32, height int32, wndparent syscall.Handle, menu syscall.Handle, instance syscall.Handle, param uintptr) (hwnd syscall.Handle, errno int) = user32.CreateWindowExW\n+//sys\tGetModuleHandle(modname *uint16) (handle syscall.Handle, err error) = GetModuleHandleW\n+//sys\tRegisterClassEx(wndclass *Wndclassex) (atom uint16, err error) = user32.RegisterClassExW\n+//sys\tCreateWindowEx(exstyle uint32, classname *uint16, windowname *uint16, style uint32, x int32, y int32, width int32, height int32, wndparent syscall.Handle, menu syscall.Handle, instance syscall.Handle, param uintptr) (hwnd syscall.Handle, err error) = user32.CreateWindowExW\n //sys\tDefWindowProc(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (lresult uintptr) = user32.DefWindowProcW\n-//sys\tDestroyWindow(hwnd syscall.Handle) (errno int) = user32.DestroyWindow\n+//sys\tDestroyWindow(hwnd syscall.Handle) (err error) = user32.DestroyWindow\n //sys\tPostQuitMessage(exitcode int32) = user32.PostQuitMessage\n //sys\tShowWindow(hwnd syscall.Handle, cmdshow int32) (wasvisible bool) = user32.ShowWindow\n-//sys\tUpdateWindow(hwnd syscall.Handle) (errno int) = user32.UpdateWindow\n-//sys\tGetMessage(msg *Msg, hwnd syscall.Handle, MsgFilterMin uint32, MsgFilterMax uint32) (ret int32, errno int) [failretval==-1] = user32.GetMessageW\n+//sys\tUpdateWindow(hwnd syscall.Handle) (err error) = user32.UpdateWindow\n+//sys\tGetMessage(msg *Msg, hwnd syscall.Handle, MsgFilterMin uint32, MsgFilterMax uint32) (ret int32, err error) [failretval==-1] = user32.GetMessageW\n //sys\tTranslateMessage(msg *Msg) (done bool) = user32.TranslateMessage\n //sys\tDispatchMessage(msg *Msg) (ret int32) = user32.DispatchMessageW\n-//sys\tLoadIcon(instance syscall.Handle, iconname *uint16) (icon syscall.Handle, errno int) = user32.LoadIconW\n-//sys\tLoadCursor(instance syscall.Handle, cursorname *uint16) (cursor syscall.Handle, errno int) = user32.LoadCursorW\n-//sys\tSetCursor(cursor syscall.Handle) (precursor syscall.Handle, errno int) = user32.SetCursor\n+//sys\tLoadIcon(instance syscall.Handle, iconname *uint16) (icon syscall.Handle, err error) = user32.LoadIconW\n+//sys\tLoadCursor(instance syscall.Handle, cursorname *uint16) (cursor syscall.Handle, err error) = user32.LoadCursorW\n+//sys\tSetCursor(cursor syscall.Handle) (precursor syscall.Handle, err error) = user32.SetCursor\n //sys\tSendMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (lresult uintptr) = user32.SendMessageW\n-//sys\tPostMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (errno int) = user32.PostMessageW\n+//sys\tPostMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (err error) = user32.PostMessageW\n \n func MakeIntResource(id uint16) *uint16 {\n \treturn (*uint16)(unsafe.Pointer(uintptr(id)))"}, {"sha": "b062ca3372e1bdca2dd19bcd8c3d918970c757fb", "filename": "libgo/go/exp/wingui/zwinapi.go", "status": "modified", "additions": 30, "deletions": 50, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwingui%2Fzwinapi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexp%2Fwingui%2Fzwinapi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwingui%2Fzwinapi.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -28,47 +28,41 @@ var (\n \tprocPostMessageW     = moduser32.NewProc(\"PostMessageW\")\n )\n \n-func GetModuleHandle(modname *uint16) (handle syscall.Handle, errno int) {\n+func GetModuleHandle(modname *uint16) (handle syscall.Handle, err error) {\n \tr0, _, e1 := syscall.Syscall(procGetModuleHandleW.Addr(), 1, uintptr(unsafe.Pointer(modname)), 0, 0)\n \thandle = syscall.Handle(r0)\n \tif handle == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n \n-func RegisterClassEx(wndclass *Wndclassex) (atom uint16, errno int) {\n+func RegisterClassEx(wndclass *Wndclassex) (atom uint16, err error) {\n \tr0, _, e1 := syscall.Syscall(procRegisterClassExW.Addr(), 1, uintptr(unsafe.Pointer(wndclass)), 0, 0)\n \tatom = uint16(r0)\n \tif atom == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n \n-func CreateWindowEx(exstyle uint32, classname *uint16, windowname *uint16, style uint32, x int32, y int32, width int32, height int32, wndparent syscall.Handle, menu syscall.Handle, instance syscall.Handle, param uintptr) (hwnd syscall.Handle, errno int) {\n+func CreateWindowEx(exstyle uint32, classname *uint16, windowname *uint16, style uint32, x int32, y int32, width int32, height int32, wndparent syscall.Handle, menu syscall.Handle, instance syscall.Handle, param uintptr) (hwnd syscall.Handle, err error) {\n \tr0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(exstyle), uintptr(unsafe.Pointer(classname)), uintptr(unsafe.Pointer(windowname)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(wndparent), uintptr(menu), uintptr(instance), uintptr(param))\n \thwnd = syscall.Handle(r0)\n \tif hwnd == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n@@ -79,16 +73,14 @@ func DefWindowProc(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintp\n \treturn\n }\n \n-func DestroyWindow(hwnd syscall.Handle) (errno int) {\n+func DestroyWindow(hwnd syscall.Handle) (err error) {\n \tr1, _, e1 := syscall.Syscall(procDestroyWindow.Addr(), 1, uintptr(hwnd), 0, 0)\n \tif int(r1) == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n@@ -104,31 +96,27 @@ func ShowWindow(hwnd syscall.Handle, cmdshow int32) (wasvisible bool) {\n \treturn\n }\n \n-func UpdateWindow(hwnd syscall.Handle) (errno int) {\n+func UpdateWindow(hwnd syscall.Handle) (err error) {\n \tr1, _, e1 := syscall.Syscall(procUpdateWindow.Addr(), 1, uintptr(hwnd), 0, 0)\n \tif int(r1) == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n \n-func GetMessage(msg *Msg, hwnd syscall.Handle, MsgFilterMin uint32, MsgFilterMax uint32) (ret int32, errno int) {\n+func GetMessage(msg *Msg, hwnd syscall.Handle, MsgFilterMin uint32, MsgFilterMax uint32) (ret int32, err error) {\n \tr0, _, e1 := syscall.Syscall6(procGetMessageW.Addr(), 4, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(MsgFilterMin), uintptr(MsgFilterMax), 0, 0)\n \tret = int32(r0)\n \tif ret == -1 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n@@ -145,47 +133,41 @@ func DispatchMessage(msg *Msg) (ret int32) {\n \treturn\n }\n \n-func LoadIcon(instance syscall.Handle, iconname *uint16) (icon syscall.Handle, errno int) {\n+func LoadIcon(instance syscall.Handle, iconname *uint16) (icon syscall.Handle, err error) {\n \tr0, _, e1 := syscall.Syscall(procLoadIconW.Addr(), 2, uintptr(instance), uintptr(unsafe.Pointer(iconname)), 0)\n \ticon = syscall.Handle(r0)\n \tif icon == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n \n-func LoadCursor(instance syscall.Handle, cursorname *uint16) (cursor syscall.Handle, errno int) {\n+func LoadCursor(instance syscall.Handle, cursorname *uint16) (cursor syscall.Handle, err error) {\n \tr0, _, e1 := syscall.Syscall(procLoadCursorW.Addr(), 2, uintptr(instance), uintptr(unsafe.Pointer(cursorname)), 0)\n \tcursor = syscall.Handle(r0)\n \tif cursor == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n \n-func SetCursor(cursor syscall.Handle) (precursor syscall.Handle, errno int) {\n+func SetCursor(cursor syscall.Handle) (precursor syscall.Handle, err error) {\n \tr0, _, e1 := syscall.Syscall(procSetCursor.Addr(), 1, uintptr(cursor), 0, 0)\n \tprecursor = syscall.Handle(r0)\n \tif precursor == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }\n@@ -196,16 +178,14 @@ func SendMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr\n \treturn\n }\n \n-func PostMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (errno int) {\n+func PostMessage(hwnd syscall.Handle, msg uint32, wparam uintptr, lparam uintptr) (err error) {\n \tr1, _, e1 := syscall.Syscall6(procPostMessageW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wparam), uintptr(lparam), 0, 0)\n \tif int(r1) == 0 {\n \t\tif e1 != 0 {\n-\t\t\terrno = int(e1)\n+\t\t\terr = error(e1)\n \t\t} else {\n-\t\t\terrno = syscall.EINVAL\n+\t\t\terr = syscall.EINVAL\n \t\t}\n-\t} else {\n-\t\terrno = 0\n \t}\n \treturn\n }"}, {"sha": "5ced285804c1c16496ff05f3d0fc495fd7c9eaff", "filename": "libgo/go/expvar/expvar.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexpvar%2Fexpvar.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fexpvar%2Fexpvar.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexpvar%2Fexpvar.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -193,7 +193,7 @@ func (f Func) String() string {\n var vars map[string]Var = make(map[string]Var)\n var mutex sync.Mutex\n \n-// Publish declares an named exported variable. This should be called from a\n+// Publish declares a named exported variable. This should be called from a\n // package's init function when it creates its Vars. If the name is already\n // registered then this will log.Panic.\n func Publish(name string, v Var) {"}, {"sha": "d7fe296f09575ef384b826c82ce1cfacade2f377", "filename": "libgo/go/fmt/fmt_test.go", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Ffmt_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Ffmt_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -813,3 +813,37 @@ func TestPanics(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+// Test that erroneous String routine doesn't cause fatal recursion.\n+var recurCount = 0\n+\n+type Recur struct {\n+\ti      int\n+\tfailed *bool\n+}\n+\n+func (r Recur) String() string {\n+\tif recurCount++; recurCount > 10 {\n+\t\t*r.failed = true\n+\t\treturn \"FAIL\"\n+\t}\n+\t// This will call badVerb. Before the fix, that would cause us to recur into\n+\t// this routine to print %!p(value). Now we don't call the user's method\n+\t// during an error.\n+\treturn Sprintf(\"recur@%p value: %d\", r, r.i)\n+}\n+\n+func TestBadVerbRecursion(t *testing.T) {\n+\tfailed := false\n+\tr := Recur{3, &failed}\n+\tSprintf(\"recur@%p value: %d\\n\", &r, r.i)\n+\tif failed {\n+\t\tt.Error(\"fail with pointer\")\n+\t}\n+\tfailed = false\n+\tr = Recur{4, &failed}\n+\tSprintf(\"recur@%p, value: %d\\n\", r, r.i)\n+\tif failed {\n+\t\tt.Error(\"fail with value\")\n+\t}\n+}"}, {"sha": "5f62c067f06a716bd075bf0f39464fb0ecd2c361", "filename": "libgo/go/fmt/format.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Fformat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Fformat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fformat.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -331,9 +331,9 @@ func (f *fmt) fmt_q(s string) {\n func (f *fmt) fmt_qc(c int64) {\n \tvar quoted string\n \tif f.plus {\n-\t\tquoted = strconv.QuoteRuneToASCII(int(c))\n+\t\tquoted = strconv.QuoteRuneToASCII(rune(c))\n \t} else {\n-\t\tquoted = strconv.QuoteRune(int(c))\n+\t\tquoted = strconv.QuoteRune(rune(c))\n \t}\n \tf.padString(quoted)\n }"}, {"sha": "9f157daaee01d043890900818df3056f4d9d1534", "filename": "libgo/go/fmt/print.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fprint.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -74,6 +74,7 @@ type GoStringer interface {\n type pp struct {\n \tn         int\n \tpanicking bool\n+\terroring  bool // printing an error condition\n \tbuf       bytes.Buffer\n \t// field holds the current item, as an interface{}.\n \tfield interface{}\n@@ -124,6 +125,7 @@ var ppFree = newCache(func() interface{} { return new(pp) })\n func newPrinter() *pp {\n \tp := ppFree.get().(*pp)\n \tp.panicking = false\n+\tp.erroring = false\n \tp.fmt.init(&p.buf)\n \treturn p\n }\n@@ -299,6 +301,7 @@ func (p *pp) unknownType(v interface{}) {\n }\n \n func (p *pp) badVerb(verb rune) {\n+\tp.erroring = true\n \tp.add('%')\n \tp.add('!')\n \tp.add(verb)\n@@ -316,6 +319,7 @@ func (p *pp) badVerb(verb rune) {\n \t\tp.buf.Write(nilAngleBytes)\n \t}\n \tp.add(')')\n+\tp.erroring = false\n }\n \n func (p *pp) fmtBool(v bool, verb rune) {\n@@ -606,6 +610,9 @@ func (p *pp) catchPanic(field interface{}, verb rune) {\n }\n \n func (p *pp) handleMethods(verb rune, plus, goSyntax bool, depth int) (wasString, handled bool) {\n+\tif p.erroring {\n+\t\treturn\n+\t}\n \t// Is it a Formatter?\n \tif formatter, ok := p.field.(Formatter); ok {\n \t\thandled = true"}, {"sha": "b26c828cbfc12989c774f5112f94ad40bfb6fb5f", "filename": "libgo/go/fmt/scan_test.go", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Fscan_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ffmt%2Fscan_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fscan_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -56,6 +56,7 @@ var (\n \tstringVal            string\n \tstringVal1           string\n \tbytesVal             []byte\n+\truneVal              rune\n \tcomplex64Val         complex64\n \tcomplex128Val        complex128\n \trenamedBoolVal       renamedBool\n@@ -225,9 +226,9 @@ var scanfTests = []ScanfTest{\n \t{\"%v\", \"0377\\n\", &intVal, 0377},\n \t{\"%v\", \"0x44\\n\", &intVal, 0x44},\n \t{\"%d\", \"72\\n\", &intVal, 72},\n-\t{\"%c\", \"a\\n\", &intVal, 'a'},\n-\t{\"%c\", \"\\u5072\\n\", &intVal, 0x5072},\n-\t{\"%c\", \"\\u1234\\n\", &intVal, '\\u1234'},\n+\t{\"%c\", \"a\\n\", &runeVal, 'a'},\n+\t{\"%c\", \"\\u5072\\n\", &runeVal, '\\u5072'},\n+\t{\"%c\", \"\\u1234\\n\", &runeVal, '\\u1234'},\n \t{\"%d\", \"73\\n\", &int8Val, int8(73)},\n \t{\"%d\", \"+74\\n\", &int16Val, int16(74)},\n \t{\"%d\", \"75\\n\", &int32Val, int32(75)},\n@@ -322,6 +323,7 @@ var s, t string\n var c complex128\n var x, y Xs\n var z IntString\n+var r1, r2, r3 rune\n \n var multiTests = []ScanfMultiTest{\n \t{\"\", \"\", []interface{}{}, []interface{}{}, \"\"},\n@@ -333,7 +335,7 @@ var multiTests = []ScanfMultiTest{\n \t{\"%3d22%3d\", \"33322333\", args(&i, &j), args(333, 333), \"\"},\n \t{\"%6vX=%3fY\", \"3+2iX=2.5Y\", args(&c, &f), args((3 + 2i), 2.5), \"\"},\n \t{\"%d%s\", \"123abc\", args(&i, &s), args(123, \"abc\"), \"\"},\n-\t{\"%c%c%c\", \"2\\u50c2X\", args(&i, &j, &k), args('2', '\\u50c2', 'X'), \"\"},\n+\t{\"%c%c%c\", \"2\\u50c2X\", args(&r1, &r2, &r3), args('2', '\\u50c2', 'X'), \"\"},\n \n \t// Custom scanners.\n \t{\"%e%f\", \"eefffff\", args(&x, &y), args(Xs(\"ee\"), Xs(\"fffff\")), \"\"},\n@@ -347,7 +349,7 @@ var multiTests = []ScanfMultiTest{\n \t{\"X%d\", \"10X\", args(&intVal), nil, \"input does not match format\"},\n \n \t// Bad UTF-8: should see every byte.\n-\t{\"%c%c%c\", \"\\xc2X\\xc2\", args(&i, &j, &k), args(utf8.RuneError, 'X', utf8.RuneError), \"\"},\n+\t{\"%c%c%c\", \"\\xc2X\\xc2\", args(&r1, &r2, &r3), args(utf8.RuneError, 'X', utf8.RuneError), \"\"},\n }\n \n func testScan(name string, t *testing.T, scan func(r io.Reader, a ...interface{}) (int, error)) {"}, {"sha": "2c89224fd4bb0056a557c0bdf176bea6622d3ea4", "filename": "libgo/go/go/build/dir.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fbuild%2Fdir.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fbuild%2Fdir.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fdir.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -466,7 +466,7 @@ func splitQuoted(s string) (r []string, err error) {\n \targ := make([]rune, len(s))\n \tescaped := false\n \tquoted := false\n-\tquote := rune(0)\n+\tquote := '\\x00'\n \ti := 0\n \tfor _, rune := range s {\n \t\tswitch {\n@@ -475,9 +475,9 @@ func splitQuoted(s string) (r []string, err error) {\n \t\tcase rune == '\\\\':\n \t\t\tescaped = true\n \t\t\tcontinue\n-\t\tcase quote != 0:\n+\t\tcase quote != '\\x00':\n \t\t\tif rune == quote {\n-\t\t\t\tquote = 0\n+\t\t\t\tquote = '\\x00'\n \t\t\t\tcontinue\n \t\t\t}\n \t\tcase rune == '\"' || rune == '\\'':"}, {"sha": "39f34afa10c6cc5b5531e062f2f7ad24240c2e90", "filename": "libgo/go/go/doc/comment.go", "status": "modified", "additions": 138, "deletions": 24, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -281,7 +281,20 @@ func heading(line string) string {\n \treturn line\n }\n \n-// Convert comment text to formatted HTML.\n+type op int\n+\n+const (\n+\topPara op = iota\n+\topHead\n+\topPre\n+)\n+\n+type block struct {\n+\top    op\n+\tlines []string\n+}\n+\n+// ToHTML converts comment text to formatted HTML.\n // The comment was prepared by DocReader,\n // so it is known not to have leading, trailing blank lines\n // nor to have trailing spaces at the end of lines.\n@@ -299,20 +312,43 @@ func heading(line string) string {\n // map value is not the empty string, it is considered a URL and the word is converted\n // into a link.\n func ToHTML(w io.Writer, text string, words map[string]string) {\n-\tinpara := false\n-\tlastWasBlank := false\n-\tlastWasHeading := false\n-\n-\tclose := func() {\n-\t\tif inpara {\n+\tfor _, b := range blocks(text) {\n+\t\tswitch b.op {\n+\t\tcase opPara:\n+\t\t\tw.Write(html_p)\n+\t\t\tfor _, line := range b.lines {\n+\t\t\t\temphasize(w, line, words, true)\n+\t\t\t}\n \t\t\tw.Write(html_endp)\n-\t\t\tinpara = false\n+\t\tcase opHead:\n+\t\t\tw.Write(html_h)\n+\t\t\tfor _, line := range b.lines {\n+\t\t\t\tcommentEscape(w, line, true)\n+\t\t\t}\n+\t\t\tw.Write(html_endh)\n+\t\tcase opPre:\n+\t\t\tw.Write(html_pre)\n+\t\t\tfor _, line := range b.lines {\n+\t\t\t\temphasize(w, line, nil, false)\n+\t\t\t}\n+\t\t\tw.Write(html_endpre)\n \t\t}\n \t}\n-\topen := func() {\n-\t\tif !inpara {\n-\t\t\tw.Write(html_p)\n-\t\t\tinpara = true\n+}\n+\n+func blocks(text string) []block {\n+\tvar (\n+\t\tout  []block\n+\t\tpara []string\n+\n+\t\tlastWasBlank   = false\n+\t\tlastWasHeading = false\n+\t)\n+\n+\tclose := func() {\n+\t\tif para != nil {\n+\t\t\tout = append(out, block{opPara, para})\n+\t\t\tpara = nil\n \t\t}\n \t}\n \n@@ -340,17 +376,13 @@ func ToHTML(w io.Writer, text string, words map[string]string) {\n \t\t\tfor j > i && isBlank(lines[j-1]) {\n \t\t\t\tj--\n \t\t\t}\n-\t\t\tblock := lines[i:j]\n+\t\t\tpre := lines[i:j]\n \t\t\ti = j\n \n-\t\t\tunindent(block)\n+\t\t\tunindent(pre)\n \n \t\t\t// put those lines in a pre block\n-\t\t\tw.Write(html_pre)\n-\t\t\tfor _, line := range block {\n-\t\t\t\temphasize(w, line, nil, false) // no nice text formatting\n-\t\t\t}\n-\t\t\tw.Write(html_endpre)\n+\t\t\tout = append(out, block{opPre, pre})\n \t\t\tlastWasHeading = false\n \t\t\tcontinue\n \t\t}\n@@ -362,21 +394,103 @@ func ToHTML(w io.Writer, text string, words map[string]string) {\n \t\t\t// might be a heading.\n \t\t\tif head := heading(line); head != \"\" {\n \t\t\t\tclose()\n-\t\t\t\tw.Write(html_h)\n-\t\t\t\tcommentEscape(w, head, true) // nice text formatting\n-\t\t\t\tw.Write(html_endh)\n+\t\t\t\tout = append(out, block{opHead, []string{head}})\n \t\t\t\ti += 2\n \t\t\t\tlastWasHeading = true\n \t\t\t\tcontinue\n \t\t\t}\n \t\t}\n \n \t\t// open paragraph\n-\t\topen()\n \t\tlastWasBlank = false\n \t\tlastWasHeading = false\n-\t\temphasize(w, lines[i], words, true) // nice text formatting\n+\t\tpara = append(para, lines[i])\n \t\ti++\n \t}\n \tclose()\n+\n+\treturn out\n+}\n+\n+// ToText prepares comment text for presentation in textual output.\n+// It wraps paragraphs of text to width or fewer Unicode code points\n+// and then prefixes each line with the indent.  In preformatted sections\n+// (such as program text), it prefixes each non-blank line with preIndent.\n+func ToText(w io.Writer, text string, indent, preIndent string, width int) {\n+\tl := lineWrapper{\n+\t\tout:    w,\n+\t\twidth:  width,\n+\t\tindent: indent,\n+\t}\n+\tfor i, b := range blocks(text) {\n+\t\tswitch b.op {\n+\t\tcase opPara:\n+\t\t\tif i > 0 {\n+\t\t\t\tw.Write(nl)\n+\t\t\t}\n+\t\t\tfor _, line := range b.lines {\n+\t\t\t\tl.write(line)\n+\t\t\t}\n+\t\t\tl.flush()\n+\t\tcase opHead:\n+\t\t\tw.Write(nl)\n+\t\t\tfor _, line := range b.lines {\n+\t\t\t\tl.write(line + \"\\n\")\n+\t\t\t}\n+\t\t\tl.flush()\n+\t\tcase opPre:\n+\t\t\tw.Write(nl)\n+\t\t\tfor _, line := range b.lines {\n+\t\t\t\tif !isBlank(line) {\n+\t\t\t\t\tw.Write([]byte(preIndent))\n+\t\t\t\t\tw.Write([]byte(line))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+type lineWrapper struct {\n+\tout       io.Writer\n+\tprinted   bool\n+\twidth     int\n+\tindent    string\n+\tn         int\n+\tpendSpace int\n+}\n+\n+var nl = []byte(\"\\n\")\n+var space = []byte(\" \")\n+\n+func (l *lineWrapper) write(text string) {\n+\tif l.n == 0 && l.printed {\n+\t\tl.out.Write(nl) // blank line before new paragraph\n+\t}\n+\tl.printed = true\n+\n+\tfor _, f := range strings.Fields(text) {\n+\t\tw := utf8.RuneCountInString(f)\n+\t\t// wrap if line is too long\n+\t\tif l.n > 0 && l.n+l.pendSpace+w > l.width {\n+\t\t\tl.out.Write(nl)\n+\t\t\tl.n = 0\n+\t\t\tl.pendSpace = 0\n+\t\t}\n+\t\tif l.n == 0 {\n+\t\t\tl.out.Write([]byte(l.indent))\n+\t\t}\n+\t\tl.out.Write(space[:l.pendSpace])\n+\t\tl.out.Write([]byte(f))\n+\t\tl.n += l.pendSpace + w\n+\t\tl.pendSpace = 1\n+\t}\n+}\n+\n+func (l *lineWrapper) flush() {\n+\tif l.n == 0 {\n+\t\treturn\n+\t}\n+\tl.out.Write(nl)\n+\tl.pendSpace = 0\n+\tl.n = 0\n }"}, {"sha": "e8d7f2e4b0f4d95107c478cd392609cf3b4a5ba4", "filename": "libgo/go/go/doc/comment_test.go", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -5,6 +5,7 @@\n package doc\n \n import (\n+\t\"reflect\"\n \t\"testing\"\n )\n \n@@ -38,3 +39,45 @@ func TestIsHeading(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+var blocksTests = []struct {\n+\tin  string\n+\tout []block\n+}{\n+\t{\n+\t\tin: `Para 1.\n+Para 1 line 2.\n+\n+Para 2.\n+\n+Section\n+\n+Para 3.\n+\n+\tpre\n+\tpre1\n+\n+Para 4.\n+\tpre\n+\tpre2\n+`,\n+\t\tout: []block{\n+\t\t\t{opPara, []string{\"Para 1.\\n\", \"Para 1 line 2.\\n\"}},\n+\t\t\t{opPara, []string{\"Para 2.\\n\"}},\n+\t\t\t{opHead, []string{\"Section\"}},\n+\t\t\t{opPara, []string{\"Para 3.\\n\"}},\n+\t\t\t{opPre, []string{\"pre\\n\", \"pre1\\n\"}},\n+\t\t\t{opPara, []string{\"Para 4.\\n\"}},\n+\t\t\t{opPre, []string{\"pre\\n\", \"pre2\\n\"}},\n+\t\t},\n+\t},\n+}\n+\n+func TestBlocks(t *testing.T) {\n+\tfor i, tt := range blocksTests {\n+\t\tb := blocks(tt.in)\n+\t\tif !reflect.DeepEqual(b, tt.out) {\n+\t\t\tt.Errorf(\"#%d: mismatch\\nhave: %v\\nwant: %v\", i, b, tt.out)\n+\t\t}\n+\t}\n+}"}, {"sha": "1bdf4e27e177109977190c68c13847b9a022ee1f", "filename": "libgo/go/go/doc/example.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -8,15 +8,16 @@ package doc\n \n import (\n \t\"go/ast\"\n+\t\"go/printer\"\n \t\"strings\"\n \t\"unicode\"\n \t\"unicode/utf8\"\n )\n \n type Example struct {\n-\tName   string         // name of the item being demonstrated\n-\tBody   *ast.BlockStmt // code\n-\tOutput string         // expected output\n+\tName   string                 // name of the item being demonstrated\n+\tBody   *printer.CommentedNode // code\n+\tOutput string                 // expected output\n }\n \n func Examples(pkg *ast.Package) []*Example {\n@@ -33,7 +34,7 @@ func Examples(pkg *ast.Package) []*Example {\n \t\t\t}\n \t\t\texamples = append(examples, &Example{\n \t\t\t\tName:   name[len(\"Example\"):],\n-\t\t\t\tBody:   f.Body,\n+\t\t\t\tBody:   &printer.CommentedNode{f.Body, src.Comments},\n \t\t\t\tOutput: CommentText(f.Doc),\n \t\t\t})\n \t\t}"}, {"sha": "8538236c2c953f75d60c58156d603b78c82bc424", "filename": "libgo/go/go/printer/printer.go", "status": "modified", "additions": 79, "deletions": 9, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -807,33 +807,95 @@ func (p *printer) flush(next token.Position, tok token.Token) (droppedFF bool) {\n \treturn\n }\n \n+// getNode returns the ast.CommentGroup associated with n, if any.\n+func getDoc(n ast.Node) *ast.CommentGroup {\n+\tswitch n := n.(type) {\n+\t// *ast.Fields cannot be printed separately - ignore for now\n+\tcase *ast.ImportSpec:\n+\t\treturn n.Doc\n+\tcase *ast.ValueSpec:\n+\t\treturn n.Doc\n+\tcase *ast.TypeSpec:\n+\t\treturn n.Doc\n+\tcase *ast.GenDecl:\n+\t\treturn n.Doc\n+\tcase *ast.FuncDecl:\n+\t\treturn n.Doc\n+\tcase *ast.File:\n+\t\treturn n.Doc\n+\t}\n+\treturn nil\n+}\n+\n func (p *printer) printNode(node interface{}) error {\n+\t// unpack *CommentedNode, if any\n+\tvar comments []*ast.CommentGroup\n+\tif cnode, ok := node.(*CommentedNode); ok {\n+\t\tnode = cnode.Node\n+\t\tcomments = cnode.Comments\n+\t}\n+\n+\tif comments != nil {\n+\t\t// commented node - restrict comment list to relevant range\n+\t\tn, ok := node.(ast.Node)\n+\t\tif !ok {\n+\t\t\tgoto unsupported\n+\t\t}\n+\t\tbeg := n.Pos()\n+\t\tend := n.End()\n+\t\t// if the node has associated documentation,\n+\t\t// include that commentgroup in the range\n+\t\t// (the comment list is sorted in the order\n+\t\t// of the comment appearance in the source code)\n+\t\tif doc := getDoc(n); doc != nil {\n+\t\t\tbeg = doc.Pos()\n+\t\t}\n+\t\t// token.Pos values are global offsets, we can\n+\t\t// compare them directly\n+\t\ti := 0\n+\t\tfor i < len(comments) && comments[i].End() < beg {\n+\t\t\ti++\n+\t\t}\n+\t\tj := i\n+\t\tfor j < len(comments) && comments[j].Pos() < end {\n+\t\t\tj++\n+\t\t}\n+\t\tif i < j {\n+\t\t\tp.comments = comments[i:j]\n+\t\t}\n+\t} else if n, ok := node.(*ast.File); ok {\n+\t\t// use ast.File comments, if any\n+\t\tp.comments = n.Comments\n+\t}\n+\n+\t// if there are no comments, use node comments\n+\tp.useNodeComments = p.comments == nil\n+\n+\t// format node\n \tswitch n := node.(type) {\n \tcase ast.Expr:\n-\t\tp.useNodeComments = true\n \t\tp.expr(n, ignoreMultiLine)\n \tcase ast.Stmt:\n-\t\tp.useNodeComments = true\n \t\t// A labeled statement will un-indent to position the\n \t\t// label. Set indent to 1 so we don't get indent \"underflow\".\n \t\tif _, labeledStmt := n.(*ast.LabeledStmt); labeledStmt {\n \t\t\tp.indent = 1\n \t\t}\n \t\tp.stmt(n, false, ignoreMultiLine)\n \tcase ast.Decl:\n-\t\tp.useNodeComments = true\n \t\tp.decl(n, ignoreMultiLine)\n \tcase ast.Spec:\n-\t\tp.useNodeComments = true\n \t\tp.spec(n, 1, false, ignoreMultiLine)\n \tcase *ast.File:\n-\t\tp.comments = n.Comments\n-\t\tp.useNodeComments = n.Comments == nil\n \t\tp.file(n)\n \tdefault:\n-\t\treturn fmt.Errorf(\"go/printer: unsupported node type %T\", n)\n+\t\tgoto unsupported\n \t}\n+\n \treturn nil\n+\n+unsupported:\n+\treturn fmt.Errorf(\"go/printer: unsupported node type %T\", node)\n }\n \n // ----------------------------------------------------------------------------\n@@ -1001,10 +1063,18 @@ func (cfg *Config) fprint(output io.Writer, fset *token.FileSet, node interface{\n \treturn\n }\n \n+// A CommentedNode bundles an AST node and corresponding comments.\n+// It may be provided as argument to any of the FPrint functions.\n+//\n+type CommentedNode struct {\n+\tNode     interface{} // *ast.File, or ast.Expr, ast.Decl, ast.Spec, or ast.Stmt\n+\tComments []*ast.CommentGroup\n+}\n+\n // Fprint \"pretty-prints\" an AST node to output for a given configuration cfg.\n // Position information is interpreted relative to the file set fset.\n-// The node type must be *ast.File, or assignment-compatible to ast.Expr,\n-// ast.Decl, ast.Spec, or ast.Stmt.\n+// The node type must be *ast.File, *CommentedNode, or assignment-compatible\n+// to ast.Expr, ast.Decl, ast.Spec, or ast.Stmt.\n //\n func (cfg *Config) Fprint(output io.Writer, fset *token.FileSet, node interface{}) error {\n \treturn cfg.fprint(output, fset, node, make(map[ast.Node]int))"}, {"sha": "45477d40f6e99ced3300a880c3c4e72754ceed34", "filename": "libgo/go/go/printer/printer_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -107,7 +107,7 @@ func check(t *testing.T, source, golden string, mode checkMode) {\n \t// start a timer to produce a time-out signal\n \ttc := make(chan int)\n \tgo func() {\n-\t\ttime.Sleep(10e9) // plenty of a safety margin, even for very slow machines\n+\t\ttime.Sleep(10 * time.Second) // plenty of a safety margin, even for very slow machines\n \t\ttc <- 0\n \t}()\n "}, {"sha": "c3fdcd685c5c74f50bda58032cd19438ff5d134c", "filename": "libgo/go/hash/crc32/crc32_generic.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhash%2Fcrc32%2Fcrc32_generic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhash%2Fcrc32%2Fcrc32_generic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhash%2Fcrc32%2Fcrc32_generic.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build 386 arm\n+\n package crc32\n \n // The file contains the generic version of updateCastagnoli which just calls"}, {"sha": "832e9dbc096677bf0e40b2562fcfbe1c41920dde", "filename": "libgo/go/html/const.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fconst.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -4,7 +4,7 @@\n \n package html\n \n-// Section 11.2.3.2 of the HTML5 specification says \"The following elements\n+// Section 12.2.3.2 of the HTML5 specification says \"The following elements\n // have varying levels of special parsing rules\".\n // http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#the-stack-of-open-elements\n var isSpecialElement = map[string]bool{"}, {"sha": "42be865ef080ad0b7c2a843da63dac852f40f25c", "filename": "libgo/go/html/escape.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fescape.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fescape.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fescape.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -78,7 +78,7 @@ func unescapeEntity(b []byte, dst, src int, attribute bool) (dst1, src1 int) {\n \t\t\ti++\n \t\t}\n \n-\t\tx := rune(0)\n+\t\tx := '\\x00'\n \t\tfor i < len(s) {\n \t\t\tc = s[i]\n \t\t\ti++"}, {"sha": "0f9b4ad560d3268ab60e1d2f76d834580329daff", "filename": "libgo/go/html/foreign.go", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fforeign.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fforeign.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fforeign.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package html\n+\n+// Section 12.2.5.5.\n+var breakout = map[string]bool{\n+\t\"b\":          true,\n+\t\"big\":        true,\n+\t\"blockquote\": true,\n+\t\"body\":       true,\n+\t\"br\":         true,\n+\t\"center\":     true,\n+\t\"code\":       true,\n+\t\"dd\":         true,\n+\t\"div\":        true,\n+\t\"dl\":         true,\n+\t\"dt\":         true,\n+\t\"em\":         true,\n+\t\"embed\":      true,\n+\t\"font\":       true,\n+\t\"h1\":         true,\n+\t\"h2\":         true,\n+\t\"h3\":         true,\n+\t\"h4\":         true,\n+\t\"h5\":         true,\n+\t\"h6\":         true,\n+\t\"head\":       true,\n+\t\"hr\":         true,\n+\t\"i\":          true,\n+\t\"img\":        true,\n+\t\"li\":         true,\n+\t\"listing\":    true,\n+\t\"menu\":       true,\n+\t\"meta\":       true,\n+\t\"nobr\":       true,\n+\t\"ol\":         true,\n+\t\"p\":          true,\n+\t\"pre\":        true,\n+\t\"ruby\":       true,\n+\t\"s\":          true,\n+\t\"small\":      true,\n+\t\"span\":       true,\n+\t\"strong\":     true,\n+\t\"strike\":     true,\n+\t\"sub\":        true,\n+\t\"sup\":        true,\n+\t\"table\":      true,\n+\t\"tt\":         true,\n+\t\"u\":          true,\n+\t\"ul\":         true,\n+\t\"var\":        true,\n+}\n+\n+// TODO: add look-up tables for MathML and SVG adjustments."}, {"sha": "4ba3f5fb627117893f1ace65646d172db34d7819", "filename": "libgo/go/html/node.go", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fnode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fnode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fnode.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -17,21 +17,22 @@ const (\n \tscopeMarkerNode\n )\n \n-// Section 11.2.3.3 says \"scope markers are inserted when entering applet\n+// Section 12.2.3.3 says \"scope markers are inserted when entering applet\n // elements, buttons, object elements, marquees, table cells, and table\n // captions, and are used to prevent formatting from 'leaking'\".\n var scopeMarker = Node{Type: scopeMarkerNode}\n \n // A Node consists of a NodeType and some Data (tag name for element nodes,\n // content for text) and are part of a tree of Nodes. Element nodes may also\n-// contain a slice of Attributes. Data is unescaped, so that it looks like\n-// \"a<b\" rather than \"a&lt;b\".\n+// have a Namespace and contain a slice of Attributes. Data is unescaped, so\n+// that it looks like \"a<b\" rather than \"a&lt;b\".\n type Node struct {\n-\tParent *Node\n-\tChild  []*Node\n-\tType   NodeType\n-\tData   string\n-\tAttr   []Attribute\n+\tParent    *Node\n+\tChild     []*Node\n+\tType      NodeType\n+\tData      string\n+\tNamespace string\n+\tAttr      []Attribute\n }\n \n // Add adds a node as a child of n."}, {"sha": "4cb246969e54ca1c3b860b167d718bfd0376c4be", "filename": "libgo/go/html/parse.go", "status": "modified", "additions": 121, "deletions": 41, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fparse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fparse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fparse.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -22,25 +22,25 @@ type parser struct {\n \thasSelfClosingToken bool\n \t// doc is the document root element.\n \tdoc *Node\n-\t// The stack of open elements (section 11.2.3.2) and active formatting\n-\t// elements (section 11.2.3.3).\n+\t// The stack of open elements (section 12.2.3.2) and active formatting\n+\t// elements (section 12.2.3.3).\n \toe, afe nodeStack\n-\t// Element pointers (section 11.2.3.4).\n+\t// Element pointers (section 12.2.3.4).\n \thead, form *Node\n-\t// Other parsing state flags (section 11.2.3.5).\n+\t// Other parsing state flags (section 12.2.3.5).\n \tscripting, framesetOK bool\n \t// im is the current insertion mode.\n \tim insertionMode\n \t// originalIM is the insertion mode to go back to after completing a text\n \t// or inTableText insertion mode.\n \toriginalIM insertionMode\n \t// fosterParenting is whether new elements should be inserted according to\n-\t// the foster parenting rules (section 11.2.5.3).\n+\t// the foster parenting rules (section 12.2.5.3).\n \tfosterParenting bool\n \t// quirks is whether the parser is operating in \"quirks mode.\"\n \tquirks bool\n \t// context is the context element when parsing an HTML fragment\n-\t// (section 11.4).\n+\t// (section 12.4).\n \tcontext *Node\n }\n \n@@ -51,7 +51,7 @@ func (p *parser) top() *Node {\n \treturn p.doc\n }\n \n-// stopTags for use in popUntil. These come from section 11.2.3.2.\n+// stopTags for use in popUntil. These come from section 12.2.3.2.\n var (\n \tdefaultScopeStopTags  = []string{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}\n \tlistItemScopeStopTags = []string{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\", \"ol\", \"ul\"}\n@@ -130,7 +130,7 @@ func (p *parser) addChild(n *Node) {\n }\n \n // fosterParent adds a child node according to the foster parenting rules.\n-// Section 11.2.5.3, \"foster parenting\".\n+// Section 12.2.5.3, \"foster parenting\".\n func (p *parser) fosterParent(n *Node) {\n \tp.fosterParenting = false\n \tvar table, parent *Node\n@@ -192,20 +192,21 @@ func (p *parser) addText(text string) {\n // addElement calls addChild with an element node.\n func (p *parser) addElement(tag string, attr []Attribute) {\n \tp.addChild(&Node{\n-\t\tType: ElementNode,\n-\t\tData: tag,\n-\t\tAttr: attr,\n+\t\tType:      ElementNode,\n+\t\tData:      tag,\n+\t\tNamespace: p.top().Namespace,\n+\t\tAttr:      attr,\n \t})\n }\n \n-// Section 11.2.3.3.\n+// Section 12.2.3.3.\n func (p *parser) addFormattingElement(tag string, attr []Attribute) {\n \tp.addElement(tag, attr)\n \tp.afe = append(p.afe, p.top())\n \t// TODO.\n }\n \n-// Section 11.2.3.3.\n+// Section 12.2.3.3.\n func (p *parser) clearActiveFormattingElements() {\n \tfor {\n \t\tn := p.afe.pop()\n@@ -215,7 +216,7 @@ func (p *parser) clearActiveFormattingElements() {\n \t}\n }\n \n-// Section 11.2.3.3.\n+// Section 12.2.3.3.\n func (p *parser) reconstructActiveFormattingElements() {\n \tn := p.afe.top()\n \tif n == nil {\n@@ -265,28 +266,28 @@ func (p *parser) read() error {\n \treturn nil\n }\n \n-// Section 11.2.4.\n+// Section 12.2.4.\n func (p *parser) acknowledgeSelfClosingTag() {\n \tp.hasSelfClosingToken = false\n }\n \n-// An insertion mode (section 11.2.3.1) is the state transition function from\n+// An insertion mode (section 12.2.3.1) is the state transition function from\n // a particular state in the HTML5 parser's state machine. It updates the\n // parser's fields depending on parser.tok (where ErrorToken means EOF).\n // It returns whether the token was consumed.\n type insertionMode func(*parser) bool\n \n // setOriginalIM sets the insertion mode to return to after completing a text or\n // inTableText insertion mode.\n-// Section 11.2.3.1, \"using the rules for\".\n+// Section 12.2.3.1, \"using the rules for\".\n func (p *parser) setOriginalIM() {\n \tif p.originalIM != nil {\n \t\tpanic(\"html: bad parser state: originalIM was set twice\")\n \t}\n \tp.originalIM = p.im\n }\n \n-// Section 11.2.3.1, \"reset the insertion mode\".\n+// Section 12.2.3.1, \"reset the insertion mode\".\n func (p *parser) resetInsertionMode() {\n \tfor i := len(p.oe) - 1; i >= 0; i-- {\n \t\tn := p.oe[i]\n@@ -318,7 +319,10 @@ func (p *parser) resetInsertionMode() {\n \t\tcase \"html\":\n \t\t\tp.im = beforeHeadIM\n \t\tdefault:\n-\t\t\tcontinue\n+\t\t\tif p.top().Namespace == \"\" {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tp.im = inForeignContentIM\n \t\t}\n \t\treturn\n \t}\n@@ -327,7 +331,7 @@ func (p *parser) resetInsertionMode() {\n \n const whitespace = \" \\t\\r\\n\\f\"\n \n-// Section 11.2.5.4.1.\n+// Section 12.2.5.4.1.\n func initialIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase TextToken:\n@@ -354,7 +358,7 @@ func initialIM(p *parser) bool {\n \treturn false\n }\n \n-// Section 11.2.5.4.2.\n+// Section 12.2.5.4.2.\n func beforeHTMLIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase TextToken:\n@@ -390,7 +394,7 @@ func beforeHTMLIM(p *parser) bool {\n \treturn false\n }\n \n-// Section 11.2.5.4.3.\n+// Section 12.2.5.4.3.\n func beforeHeadIM(p *parser) bool {\n \tvar (\n \t\tadd     bool\n@@ -439,7 +443,7 @@ func beforeHeadIM(p *parser) bool {\n \treturn !implied\n }\n \n-// Section 11.2.5.4.4.\n+// Section 12.2.5.4.4.\n func inHeadIM(p *parser) bool {\n \tvar (\n \t\tpop     bool\n@@ -506,7 +510,7 @@ func inHeadIM(p *parser) bool {\n \treturn true\n }\n \n-// Section 11.2.5.4.6.\n+// Section 12.2.5.4.6.\n func afterHeadIM(p *parser) bool {\n \tvar (\n \t\tadd        bool\n@@ -594,7 +598,7 @@ func copyAttributes(dst *Node, src Token) {\n \t}\n }\n \n-// Section 11.2.5.4.7.\n+// Section 12.2.5.4.7.\n func inBodyIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase TextToken:\n@@ -730,6 +734,11 @@ func inBodyIM(p *parser) bool {\n \t\tcase \"plaintext\":\n \t\t\tp.popUntil(buttonScopeStopTags, \"p\")\n \t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n+\t\tcase \"button\":\n+\t\t\tp.popUntil(defaultScopeStopTags, \"button\")\n+\t\t\tp.reconstructActiveFormattingElements()\n+\t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n+\t\t\tp.framesetOK = false\n \t\tcase \"optgroup\", \"option\":\n \t\t\tif p.top().Data == \"option\" {\n \t\t\t\tp.oe.pop()\n@@ -792,6 +801,21 @@ func inBodyIM(p *parser) bool {\n \t\t\tp.reconstructActiveFormattingElements()\n \t\t\tp.framesetOK = false\n \t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n+\t\tcase \"math\", \"svg\":\n+\t\t\tp.reconstructActiveFormattingElements()\n+\t\t\tnamespace := \"\"\n+\t\t\tif p.tok.Data == \"math\" {\n+\t\t\t\t// TODO: adjust MathML attributes.\n+\t\t\t\tnamespace = \"mathml\"\n+\t\t\t} else {\n+\t\t\t\t// TODO: adjust SVG attributes.\n+\t\t\t\tnamespace = \"svg\"\n+\t\t\t}\n+\t\t\t// TODO: adjust foreign attributes.\n+\t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n+\t\t\tp.top().Namespace = namespace\n+\t\t\tp.im = inForeignContentIM\n+\t\t\treturn true\n \t\tcase \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\":\n \t\t\t// Ignore the token.\n \t\tdefault:\n@@ -970,7 +994,7 @@ func (p *parser) inBodyEndTagOther(tag string) {\n \t}\n }\n \n-// Section 11.2.5.4.8.\n+// Section 12.2.5.4.8.\n func textIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase ErrorToken:\n@@ -986,7 +1010,7 @@ func textIM(p *parser) bool {\n \treturn p.tok.Type == EndTagToken\n }\n \n-// Section 11.2.5.4.9.\n+// Section 12.2.5.4.9.\n func inTableIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase ErrorToken:\n@@ -1075,7 +1099,7 @@ func (p *parser) clearStackToContext(stopTags []string) {\n \t}\n }\n \n-// Section 11.2.5.4.11.\n+// Section 12.2.5.4.11.\n func inCaptionIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase StartTagToken:\n@@ -1115,7 +1139,7 @@ func inCaptionIM(p *parser) bool {\n \treturn inBodyIM(p)\n }\n \n-// Section 11.2.5.4.12.\n+// Section 12.2.5.4.12.\n func inColumnGroupIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase CommentToken:\n@@ -1142,8 +1166,8 @@ func inColumnGroupIM(p *parser) bool {\n \t\tcase \"colgroup\":\n \t\t\tif p.oe.top().Data != \"html\" {\n \t\t\t\tp.oe.pop()\n+\t\t\t\tp.im = inTableIM\n \t\t\t}\n-\t\t\tp.im = inTableIM\n \t\t\treturn true\n \t\tcase \"col\":\n \t\t\t// Ignore the token.\n@@ -1152,12 +1176,13 @@ func inColumnGroupIM(p *parser) bool {\n \t}\n \tif p.oe.top().Data != \"html\" {\n \t\tp.oe.pop()\n+\t\tp.im = inTableIM\n+\t\treturn false\n \t}\n-\tp.im = inTableIM\n-\treturn false\n+\treturn true\n }\n \n-// Section 11.2.5.4.13.\n+// Section 12.2.5.4.13.\n func inTableBodyIM(p *parser) bool {\n \tvar (\n \t\tadd      bool\n@@ -1213,7 +1238,7 @@ func inTableBodyIM(p *parser) bool {\n \treturn inTableIM(p)\n }\n \n-// Section 11.2.5.4.14.\n+// Section 12.2.5.4.14.\n func inRowIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase ErrorToken:\n@@ -1272,7 +1297,7 @@ func inRowIM(p *parser) bool {\n \treturn inTableIM(p)\n }\n \n-// Section 11.2.5.4.15.\n+// Section 12.2.5.4.15.\n func inCellIM(p *parser) bool {\n \tvar (\n \t\tcloseTheCellAndReprocess bool\n@@ -1317,7 +1342,7 @@ func inCellIM(p *parser) bool {\n \treturn inBodyIM(p)\n }\n \n-// Section 11.2.5.4.16.\n+// Section 12.2.5.4.16.\n func inSelectIM(p *parser) bool {\n \tendSelect := false\n \tswitch p.tok.Type {\n@@ -1394,7 +1419,7 @@ func inSelectIM(p *parser) bool {\n \treturn true\n }\n \n-// Section 11.2.5.4.18.\n+// Section 12.2.5.4.18.\n func afterBodyIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase ErrorToken:\n@@ -1424,14 +1449,26 @@ func afterBodyIM(p *parser) bool {\n \treturn false\n }\n \n-// Section 11.2.5.4.19.\n+// Section 12.2.5.4.19.\n func inFramesetIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase CommentToken:\n \t\tp.addChild(&Node{\n \t\t\tType: CommentNode,\n \t\t\tData: p.tok.Data,\n \t\t})\n+\tcase TextToken:\n+\t\t// Ignore all text but whitespace.\n+\t\ts := strings.Map(func(c rune) rune {\n+\t\t\tswitch c {\n+\t\t\tcase ' ', '\\t', '\\n', '\\f', '\\r':\n+\t\t\t\treturn c\n+\t\t\t}\n+\t\t\treturn -1\n+\t\t}, p.tok.Data)\n+\t\tif s != \"\" {\n+\t\t\tp.addText(s)\n+\t\t}\n \tcase StartTagToken:\n \t\tswitch p.tok.Data {\n \t\tcase \"html\":\n@@ -1462,14 +1499,26 @@ func inFramesetIM(p *parser) bool {\n \treturn true\n }\n \n-// Section 11.2.5.4.20.\n+// Section 12.2.5.4.20.\n func afterFramesetIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase CommentToken:\n \t\tp.addChild(&Node{\n \t\t\tType: CommentNode,\n \t\t\tData: p.tok.Data,\n \t\t})\n+\tcase TextToken:\n+\t\t// Ignore all text but whitespace.\n+\t\ts := strings.Map(func(c rune) rune {\n+\t\t\tswitch c {\n+\t\t\tcase ' ', '\\t', '\\n', '\\f', '\\r':\n+\t\t\t\treturn c\n+\t\t\t}\n+\t\t\treturn -1\n+\t\t}, p.tok.Data)\n+\t\tif s != \"\" {\n+\t\t\tp.addText(s)\n+\t\t}\n \tcase StartTagToken:\n \t\tswitch p.tok.Data {\n \t\tcase \"html\":\n@@ -1489,7 +1538,7 @@ func afterFramesetIM(p *parser) bool {\n \treturn true\n }\n \n-// Section 11.2.5.4.21.\n+// Section 12.2.5.4.21.\n func afterAfterBodyIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase ErrorToken:\n@@ -1512,7 +1561,7 @@ func afterAfterBodyIM(p *parser) bool {\n \treturn false\n }\n \n-// Section 11.2.5.4.22.\n+// Section 12.2.5.4.22.\n func afterAfterFramesetIM(p *parser) bool {\n \tswitch p.tok.Type {\n \tcase CommentToken:\n@@ -1533,6 +1582,37 @@ func afterAfterFramesetIM(p *parser) bool {\n \treturn true\n }\n \n+// Section 12.2.5.5.\n+func inForeignContentIM(p *parser) bool {\n+\tswitch p.tok.Type {\n+\tcase CommentToken:\n+\t\tp.addChild(&Node{\n+\t\t\tType: CommentNode,\n+\t\t\tData: p.tok.Data,\n+\t\t})\n+\tcase StartTagToken:\n+\t\tif breakout[p.tok.Data] {\n+\t\t\t// TODO.\n+\t\t}\n+\t\tswitch p.top().Namespace {\n+\t\tcase \"mathml\":\n+\t\t\t// TODO: adjust MathML attributes.\n+\t\tcase \"svg\":\n+\t\t\t// TODO: adjust SVG tag names.\n+\t\t\t// TODO: adjust SVG attributes.\n+\t\tdefault:\n+\t\t\tpanic(\"html: bad parser state: unexpected namespace\")\n+\t\t}\n+\t\t// TODO: adjust foreign attributes.\n+\t\tp.addElement(p.tok.Data, p.tok.Attr)\n+\tcase EndTagToken:\n+\t\t// TODO.\n+\tdefault:\n+\t\t// Ignore the token.\n+\t}\n+\treturn true\n+}\n+\n func (p *parser) parse() error {\n \t// Iterate until EOF. Any other error will cause an early return.\n \tconsumed := true"}, {"sha": "e887631c63d70d5ff00749f8b8cb82d3f21c7a4e", "filename": "libgo/go/html/parse_test.go", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fparse_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Fparse_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fparse_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -98,7 +98,11 @@ func dumpLevel(w io.Writer, n *Node, level int) error {\n \tcase DocumentNode:\n \t\treturn errors.New(\"unexpected DocumentNode\")\n \tcase ElementNode:\n-\t\tfmt.Fprintf(w, \"<%s>\", n.Data)\n+\t\tif n.Namespace != \"\" {\n+\t\t\tfmt.Fprintf(w, \"<%s %s>\", n.Namespace, n.Data)\n+\t\t} else {\n+\t\t\tfmt.Fprintf(w, \"<%s>\", n.Data)\n+\t\t}\n \t\tfor _, a := range n.Attr {\n \t\t\tio.WriteString(w, \"\\n\")\n \t\t\tdumpIndent(w, level+1)\n@@ -161,13 +165,14 @@ func TestParser(t *testing.T) {\n \t\tn int\n \t}{\n \t\t// TODO(nigeltao): Process all the test cases from all the .dat files.\n+\t\t{\"adoption01.dat\", -1},\n \t\t{\"doctype01.dat\", -1},\n \t\t{\"tests1.dat\", -1},\n \t\t{\"tests2.dat\", -1},\n \t\t{\"tests3.dat\", -1},\n \t\t{\"tests4.dat\", -1},\n \t\t{\"tests5.dat\", -1},\n-\t\t{\"tests6.dat\", 7},\n+\t\t{\"tests6.dat\", 36},\n \t}\n \tfor _, tf := range testFiles {\n \t\tf, err := os.Open(\"testdata/webkit/\" + tf.filename)"}, {"sha": "20751938d9d4922039af1964251c255845509c7b", "filename": "libgo/go/html/render.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Frender.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Frender.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Frender.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -247,7 +247,7 @@ func writeQuoted(w writer, s string) error {\n \treturn nil\n }\n \n-// Section 13.1.2, \"Elements\", gives this list of void elements. Void elements\n+// Section 12.1.2, \"Elements\", gives this list of void elements. Void elements\n // are those that can't have any contents.\n var voidElements = map[string]bool{\n \t\"area\":    true,"}, {"sha": "3bcd984983109fade7ce5a72920f30eeb7418aec", "filename": "libgo/go/html/template/css.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -106,7 +106,7 @@ func isHex(c byte) bool {\n \n // hexDecode decodes a short hex digit sequence: \"10\" -> 16.\n func hexDecode(s []byte) rune {\n-\tn := rune(0)\n+\tn := '\\x00'\n \tfor _, c := range s {\n \t\tn <<= 4\n \t\tswitch {"}, {"sha": "2d15c71844846f03837a00fabd660b36bea2aa1a", "filename": "libgo/go/html/template/escape_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -654,7 +654,7 @@ func TestEscape(t *testing.T) {\n \tfor _, test := range tests {\n \t\ttmpl := New(test.name)\n \t\t// TODO: Move noescape into template/func.go\n-\t\ttmpl.Funcs(template.FuncMap{\n+\t\ttmpl.Funcs(FuncMap{\n \t\t\t\"noescape\": func(a ...interface{}) string {\n \t\t\t\treturn fmt.Sprint(a...)\n \t\t\t},\n@@ -792,7 +792,7 @@ func TestEscapeSet(t *testing.T) {\n \n \t// pred is a template function that returns the predecessor of a\n \t// natural number for testing recursive templates.\n-\tfns := template.FuncMap{\"pred\": func(a ...interface{}) (interface{}, error) {\n+\tfns := FuncMap{\"pred\": func(a ...interface{}) (interface{}, error) {\n \t\tif len(a) == 1 {\n \t\t\tif i, _ := a[0].(int); i > 0 {\n \t\t\t\treturn i - 1, nil"}, {"sha": "9ffe41413a8ecab61a9b2eeba26c48b57fa7b72b", "filename": "libgo/go/html/template/template.go", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -49,20 +49,28 @@ func (t *Template) Execute(wr io.Writer, data interface{}) (err error) {\n \n // ExecuteTemplate applies the template associated with t that has the given\n // name to the specified data object and writes the output to wr.\n-func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) (err error) {\n+func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error {\n+\ttmpl, err := t.lookupAndEscapeTemplate(wr, name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn tmpl.text.Execute(wr, data)\n+}\n+\n+// lookupAndEscapeTemplate guarantees that the template with the given name\n+// is escaped, or returns an error if it cannot be. It returns the named\n+// template.\n+func (t *Template) lookupAndEscapeTemplate(wr io.Writer, name string) (tmpl *Template, err error) {\n \tt.nameSpace.mu.Lock()\n-\ttmpl := t.set[name]\n+\tdefer t.nameSpace.mu.Unlock()\n+\ttmpl = t.set[name]\n \tif (tmpl == nil) != (t.text.Lookup(name) == nil) {\n \t\tpanic(\"html/template internal error: template escaping out of sync\")\n \t}\n \tif tmpl != nil && !tmpl.escaped {\n \t\terr = escapeTemplates(tmpl, name)\n \t}\n-\tt.nameSpace.mu.Unlock()\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\treturn t.text.ExecuteTemplate(wr, name, data)\n+\treturn tmpl, err\n }\n \n // Parse parses a string into a template. Nested template definitions\n@@ -146,12 +154,20 @@ func (t *Template) Name() string {\n \treturn t.text.Name()\n }\n \n+// FuncMap is the type of the map defining the mapping from names to\n+// functions. Each function must have either a single return value, or two\n+// return values of which the second has type error. In that case, if the\n+// second (error) argument evaluates to non-nil during execution, execution\n+// terminates and Execute returns that error. FuncMap has the same base type\n+// as template.FuncMap, copied here so clients need not import \"text/template\".\n+type FuncMap map[string]interface{}\n+\n // Funcs adds the elements of the argument map to the template's function map.\n // It panics if a value in the map is not a function with appropriate return\n // type. However, it is legal to overwrite elements of the map. The return\n // value is the template, so calls can be chained.\n-func (t *Template) Funcs(funcMap template.FuncMap) *Template {\n-\tt.text.Funcs(funcMap)\n+func (t *Template) Funcs(funcMap FuncMap) *Template {\n+\tt.text.Funcs(template.FuncMap(funcMap))\n \treturn t\n }\n \n@@ -175,7 +191,9 @@ func (t *Template) Lookup(name string) *Template {\n \n // Must panics if err is non-nil in the same way as template.Must.\n func Must(t *Template, err error) *Template {\n-\tt.text = template.Must(t.text, err)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n \treturn t\n }\n "}, {"sha": "7718151b0e5a5b3ff845c0d57c557c3d1bf4f459", "filename": "libgo/go/io/pipe_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fio%2Fpipe_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fio%2Fpipe_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Fpipe_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -165,7 +165,7 @@ var pipeTests = []pipeTest{\n }\n \n func delayClose(t *testing.T, cl closer, ch chan int, tt pipeTest) {\n-\ttime.Sleep(1e6) // 1 ms\n+\ttime.Sleep(1 * time.Millisecond)\n \tvar err error\n \tif tt.closeWithError {\n \t\terr = cl.CloseWithError(tt.err)"}, {"sha": "6818998ee912f793b8d99ec697758a228346be80", "filename": "libgo/go/math/abs.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fabs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fabs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fabs.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -9,7 +9,12 @@ package math\n // Special cases are:\n //\tAbs(\u00b1Inf) = +Inf\n //\tAbs(NaN) = NaN\n+func libc_fabs(float64) float64 __asm__(\"fabs\")\n func Abs(x float64) float64 {\n+\treturn libc_fabs(x)\n+}\n+\n+func abs(x float64) float64 {\n \tswitch {\n \tcase x < 0:\n \t\treturn -x"}, {"sha": "6be9305ac509222980004165f6c1928ca1e8cc7e", "filename": "libgo/go/math/abs_decl.go", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fabs_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fabs_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fabs_decl.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,7 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-func Abs(x float64) float64"}, {"sha": "8d556377f59a4011668e6860248e2d4b35cb4eea", "filename": "libgo/go/math/acosh.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Facosh.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Facosh.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Facosh.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -36,6 +36,7 @@ package math\n // Acosh(x) calculates the inverse hyperbolic cosine of x.\n //\n // Special cases are:\n+//\tAcosh(+Inf) = +Inf\n //\tAcosh(x) = NaN if x < 1\n //\tAcosh(NaN) = NaN\n func Acosh(x float64) float64 {"}, {"sha": "0a3cb0315d24d521a359d3e7c98aa3d52ea4a901", "filename": "libgo/go/math/all_test.go", "status": "modified", "additions": 113, "deletions": 1, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fall_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -958,6 +958,75 @@ var fabsSC = []float64{\n \tNaN(),\n }\n \n+var vffdimSC = [][2]float64{\n+\t{Inf(-1), Inf(-1)},\n+\t{Inf(-1), Inf(1)},\n+\t{Inf(-1), NaN()},\n+\t{Copysign(0, -1), Copysign(0, -1)},\n+\t{Copysign(0, -1), 0},\n+\t{0, Copysign(0, -1)},\n+\t{0, 0},\n+\t{Inf(1), Inf(-1)},\n+\t{Inf(1), Inf(1)},\n+\t{Inf(1), NaN()},\n+\t{NaN(), Inf(-1)},\n+\t{NaN(), Copysign(0, -1)},\n+\t{NaN(), 0},\n+\t{NaN(), Inf(1)},\n+\t{NaN(), NaN()},\n+}\n+var fdimSC = []float64{\n+\tNaN(),\n+\t0,\n+\tNaN(),\n+\t0,\n+\t0,\n+\t0,\n+\t0,\n+\tInf(1),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+}\n+var fmaxSC = []float64{\n+\tInf(-1),\n+\tInf(1),\n+\tNaN(),\n+\tCopysign(0, -1),\n+\t0,\n+\t0,\n+\t0,\n+\tInf(1),\n+\tInf(1),\n+\tInf(1),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+\tInf(1),\n+\tNaN(),\n+}\n+var fminSC = []float64{\n+\tInf(-1),\n+\tInf(-1),\n+\tInf(-1),\n+\tCopysign(0, -1),\n+\tCopysign(0, -1),\n+\tCopysign(0, -1),\n+\t0,\n+\tInf(-1),\n+\tInf(1),\n+\tNaN(),\n+\tInf(-1),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+\tNaN(),\n+}\n+\n var vffmodSC = [][2]float64{\n \t{Inf(-1), Inf(-1)},\n \t{Inf(-1), -Pi},\n@@ -1259,12 +1328,26 @@ var modfSC = [][2]float64{\n }\n \n var vfnextafterSC = [][2]float64{\n+\t{0, 0},\n+\t{0, Copysign(0, -1)},\n+\t{0, -1},\n \t{0, NaN()},\n+\t{Copysign(0, -1), 1},\n+\t{Copysign(0, -1), 0},\n+\t{Copysign(0, -1), Copysign(0, -1)},\n+\t{Copysign(0, -1), -1},\n \t{NaN(), 0},\n \t{NaN(), NaN()},\n }\n var nextafterSC = []float64{\n+\t0,\n+\t0,\n+\t-4.9406564584124654418e-324, // Float64frombits(0x8000000000000001)\n \tNaN(),\n+\t4.9406564584124654418e-324, // Float64frombits(0x0000000000000001)\n+\tCopysign(0, -1),\n+\tCopysign(0, -1),\n+\t-4.9406564584124654418e-324, // Float64frombits(0x8000000000000001)\n \tNaN(),\n \tNaN(),\n }\n@@ -1875,6 +1958,11 @@ func TestDim(t *testing.T) {\n \t\t\tt.Errorf(\"Dim(%g, %g) = %g, want %g\", vf[i], 0.0, f, fdim[i])\n \t\t}\n \t}\n+\tfor i := 0; i < len(vffdimSC); i++ {\n+\t\tif f := Dim(vffdimSC[i][0], vffdimSC[i][1]); !alike(fdimSC[i], f) {\n+\t\t\tt.Errorf(\"Dim(%g, %g) = %g, want %g\", vffdimSC[i][0], vffdimSC[i][1], f, fdimSC[i])\n+\t\t}\n+\t}\n }\n \n func TestFloor(t *testing.T) {\n@@ -1896,6 +1984,11 @@ func TestMax(t *testing.T) {\n \t\t\tt.Errorf(\"Max(%g, %g) = %g, want %g\", vf[i], ceil[i], f, ceil[i])\n \t\t}\n \t}\n+\tfor i := 0; i < len(vffdimSC); i++ {\n+\t\tif f := Max(vffdimSC[i][0], vffdimSC[i][1]); !alike(fmaxSC[i], f) {\n+\t\t\tt.Errorf(\"Max(%g, %g) = %g, want %g\", vffdimSC[i][0], vffdimSC[i][1], f, fmaxSC[i])\n+\t\t}\n+\t}\n }\n \n func TestMin(t *testing.T) {\n@@ -1904,6 +1997,11 @@ func TestMin(t *testing.T) {\n \t\t\tt.Errorf(\"Min(%g, %g) = %g, want %g\", vf[i], floor[i], f, floor[i])\n \t\t}\n \t}\n+\tfor i := 0; i < len(vffdimSC); i++ {\n+\t\tif f := Min(vffdimSC[i][0], vffdimSC[i][1]); !alike(fminSC[i], f) {\n+\t\t\tt.Errorf(\"Min(%g, %g) = %g, want %g\", vffdimSC[i][0], vffdimSC[i][1], f, fminSC[i])\n+\t\t}\n+\t}\n }\n \n func TestMod(t *testing.T) {\n@@ -1964,6 +2062,20 @@ func TestHypot(t *testing.T) {\n \t}\n }\n \n+func TestHypotGo(t *testing.T) {\n+\tfor i := 0; i < len(vf); i++ {\n+\t\ta := Abs(1e200 * tanh[i] * Sqrt(2))\n+\t\tif f := HypotGo(1e200*tanh[i], 1e200*tanh[i]); !veryclose(a, f) {\n+\t\t\tt.Errorf(\"HypotGo(%g, %g) = %g, want %g\", 1e200*tanh[i], 1e200*tanh[i], f, a)\n+\t\t}\n+\t}\n+\tfor i := 0; i < len(vfhypotSC); i++ {\n+\t\tif f := HypotGo(vfhypotSC[i][0], vfhypotSC[i][1]); !alike(hypotSC[i], f) {\n+\t\t\tt.Errorf(\"HypotGo(%g, %g) = %g, want %g\", vfhypotSC[i][0], vfhypotSC[i][1], f, hypotSC[i])\n+\t\t}\n+\t}\n+}\n+\n func TestIlogb(t *testing.T) {\n \tfor i := 0; i < len(vf); i++ {\n \t\ta := frexp[i].i - 1 // adjust because fr in the interval [\u00bd, 1)\n@@ -2175,7 +2287,7 @@ func TestNextafter(t *testing.T) {\n \t\t\tt.Errorf(\"Nextafter(%g, %g) = %g want %g\", vf[i], 10.0, f, nextafter[i])\n \t\t}\n \t}\n-\tfor i := 0; i < len(vfmodfSC); i++ {\n+\tfor i := 0; i < len(vfnextafterSC); i++ {\n \t\tif f := Nextafter(vfnextafterSC[i][0], vfnextafterSC[i][1]); !alike(nextafterSC[i], f) {\n \t\t\tt.Errorf(\"Nextafter(%g, %g) = %g want %g\", vfnextafterSC[i][0], vfnextafterSC[i][1], f, nextafterSC[i])\n \t\t}"}, {"sha": "d67f32a50973c7a8c37e7cb65de50a7e574f70b6", "filename": "libgo/go/math/asin.go", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fasin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fasin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fasin.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -16,7 +16,12 @@ package math\n // Special cases are:\n //\tAsin(\u00b10) = \u00b10\n //\tAsin(x) = NaN if x < -1 or x > 1\n+func libc_asin(float64) float64 __asm__(\"asin\")\n func Asin(x float64) float64 {\n+\treturn libc_asin(x)\n+}\n+\n+func asin(x float64) float64 {\n \tif x == 0 {\n \t\treturn x // special case\n \t}\n@@ -46,4 +51,11 @@ func Asin(x float64) float64 {\n //\n // Special case is:\n //\tAcos(x) = NaN if x < -1 or x > 1\n-func Acos(x float64) float64 { return Pi/2 - Asin(x) }\n+func libc_acos(float64) float64 __asm__(\"acos\")\n+func Acos(x float64) float64 {\n+\treturn libc_acos(x)\n+}\n+\n+func acos(x float64) float64 {\n+\treturn Pi/2 - Asin(x)\n+}"}, {"sha": "f786dd9f8f0996dd4f7339310471f8bab68132d7", "filename": "libgo/go/math/asinh.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fasinh.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fasinh.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fasinh.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -33,6 +33,7 @@ package math\n // Asinh(x) calculates the inverse hyperbolic sine of x.\n //\n // Special cases are:\n+//\tAsinh(\u00b10) = \u00b10\n //\tAsinh(\u00b1Inf) = \u00b1Inf\n //\tAsinh(NaN) = NaN\n func Asinh(x float64) float64 {"}, {"sha": "ff52cf3d367f8cb692c8c8cb4f0a57062c13e071", "filename": "libgo/go/math/atan.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fatan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fatan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fatan.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -51,7 +51,12 @@ func satan(arg float64) float64 {\n // Special cases are:\n //\tAtan(\u00b10) = \u00b10\n //\tAtan(\u00b1Inf) = \u00b1Pi/2\n+func libc_atan(float64) float64 __asm__(\"atan\")\n func Atan(x float64) float64 {\n+\treturn libc_atan(x)\n+}\n+\n+func atan(x float64) float64 {\n \tif x == 0 {\n \t\treturn x\n \t}"}, {"sha": "7260f986fadd6c8b3b0c3bf69e535752f145371e", "filename": "libgo/go/math/atan2.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fatan2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fatan2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fatan2.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -26,7 +26,12 @@ package math\n //\tAtan2(y<0, -Inf) = -Pi\n //\tAtan2(+Inf, x) = +Pi/2\n //\tAtan2(-Inf, x) = -Pi/2\n+func libc_atan2(float64, float64) float64 __asm__(\"atan2\")\n func Atan2(y, x float64) float64 {\n+\treturn libc_atan2(y, x)\n+}\n+\n+func atan2(y, x float64) float64 {\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us\n \t// special cases"}, {"sha": "e150673c7001d0945ccc97d11012575166fbc096", "filename": "libgo/go/math/atanh.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fatanh.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fatanh.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fatanh.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -39,9 +39,10 @@ package math\n // Atanh(x) calculates the inverse hyperbolic tangent of x.\n //\n // Special cases are:\n-//\tAtanh(x) = NaN if x < -1 or x > 1\n //\tAtanh(1) = +Inf\n+//\tAtanh(\u00b10) = \u00b10\n //\tAtanh(-1) = -Inf\n+//\tAtanh(x) = NaN if x < -1 or x > 1\n //\tAtanh(NaN) = NaN\n func Atanh(x float64) float64 {\n \tconst NearZero = 1.0 / (1 << 28) // 2**-28"}, {"sha": "ead1a881a6a957d000d764062875b72d2923492a", "filename": "libgo/go/math/big/nat.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -592,7 +592,7 @@ func (x nat) bitLen() int {\n const MaxBase = 'z' - 'a' + 10 + 1 // = hexValue('z') + 1\n \n func hexValue(ch rune) Word {\n-\td := MaxBase + 1 // illegal base\n+\td := int(MaxBase + 1) // illegal base\n \tswitch {\n \tcase '0' <= ch && ch <= '9':\n \t\td = int(ch - '0')"}, {"sha": "282561f98bbfb178767577b052b5c24bc06eadde", "filename": "libgo/go/math/const.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fconst.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -49,5 +49,3 @@ const (\n \tMaxUint32 = 1<<32 - 1\n \tMaxUint64 = 1<<64 - 1\n )\n-\n-// BUG(rsc): The manual should define the special cases for all of these functions."}, {"sha": "24a84e6d03b54c64b72ee045756a2616cefe679b", "filename": "libgo/go/math/dim.go", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fdim.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fdim.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fdim.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -5,23 +5,76 @@\n package math\n \n // Dim returns the maximum of x-y or 0.\n+//\n+// Special cases are:\n+//\tDim(+Inf, +Inf) = NaN\n+//\tDim(-Inf, -Inf) = NaN\n+//\tDim(x, NaN) = Dim(NaN, x) = NaN\n func Dim(x, y float64) float64 {\n-\tif x > y {\n-\t\treturn x - y\n-\t}\n-\treturn 0\n+\treturn dim(x, y)\n+}\n+\n+func dim(x, y float64) float64 {\n+\treturn max(x-y, 0)\n }\n \n // Max returns the larger of x or y.\n+//\n+// Special cases are:\n+//\tMax(x, +Inf) = Max(+Inf, x) = +Inf\n+//\tMax(x, NaN) = Max(NaN, x) = NaN\n+//\tMax(+0, \u00b10) = Max(\u00b10, +0) = +0\n+//\tMax(-0, -0) = -0\n func Max(x, y float64) float64 {\n+\treturn max(x, y)\n+}\n+\n+func max(x, y float64) float64 {\n+\t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n+\t// when compiler does it for us\n+\t// special cases\n+\tswitch {\n+\tcase x > MaxFloat64 || y > MaxFloat64: // IsInf(x, 1) || IsInf(y, 1):\n+\t\treturn Inf(1)\n+\tcase x != x || y != y: // IsNaN(x) || IsNaN(y):\n+\t\treturn NaN()\n+\tcase x == 0 && x == y:\n+\t\tif Signbit(x) {\n+\t\t\treturn y\n+\t\t}\n+\t\treturn x\n+\t}\n \tif x > y {\n \t\treturn x\n \t}\n \treturn y\n }\n \n // Min returns the smaller of x or y.\n+//\n+// Special cases are:\n+//\tMin(x, -Inf) = Min(-Inf, x) = -Inf\n+//\tMin(x, NaN) = Min(NaN, x) = NaN\n+//\tMin(-0, \u00b10) = Min(\u00b10, -0) = -0\n func Min(x, y float64) float64 {\n+\treturn min(x, y)\n+}\n+\n+func min(x, y float64) float64 {\n+\t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n+\t// when compiler does it for us\n+\t// special cases\n+\tswitch {\n+\tcase x < -MaxFloat64 || y < -MaxFloat64: // IsInf(x, -1) || IsInf(y, -1):\n+\t\treturn Inf(-1)\n+\tcase x != x || y != y: // IsNaN(x) || IsNaN(y):\n+\t\treturn NaN()\n+\tcase x == 0 && x == y:\n+\t\tif Signbit(x) {\n+\t\t\treturn x\n+\t\t}\n+\t\treturn y\n+\t}\n \tif x < y {\n \t\treturn x\n \t}"}, {"sha": "196f84fd7938ee10e392ff8ec4b30965c74978ad", "filename": "libgo/go/math/dim_decl.go", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fdim_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fdim_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fdim_decl.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,9 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-func Dim(x, y float64) float64\n-func Max(x, y float64) float64\n-func Min(x, y float64) float64"}, {"sha": "2db691f38f11d6be6d27157540e437244a927730", "filename": "libgo/go/math/exp.go", "status": "modified", "additions": 187, "deletions": 1, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexp.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -11,4 +11,190 @@ package math\n //\tExp(NaN) = NaN\n // Very large values overflow to 0 or +Inf.\n // Very small values underflow to 1.\n-func Exp(x float64) float64 { return expGo(x) }\n+func libc_exp(float64) float64 __asm__(\"exp\")\n+func Exp(x float64) float64 {\n+\treturn libc_exp(x)\n+}\n+\n+// The original C code, the long comment, and the constants\n+// below are from FreeBSD's /usr/src/lib/msun/src/e_exp.c\n+// and came with this notice.  The go code is a simplified\n+// version of the original C.\n+//\n+// ====================================================\n+// Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n+//\n+// Permission to use, copy, modify, and distribute this\n+// software is freely granted, provided that this notice\n+// is preserved.\n+// ====================================================\n+//\n+//\n+// exp(x)\n+// Returns the exponential of x.\n+//\n+// Method\n+//   1. Argument reduction:\n+//      Reduce x to an r so that |r| <= 0.5*ln2 ~ 0.34658.\n+//      Given x, find r and integer k such that\n+//\n+//               x = k*ln2 + r,  |r| <= 0.5*ln2.\n+//\n+//      Here r will be represented as r = hi-lo for better\n+//      accuracy.\n+//\n+//   2. Approximation of exp(r) by a special rational function on\n+//      the interval [0,0.34658]:\n+//      Write\n+//          R(r**2) = r*(exp(r)+1)/(exp(r)-1) = 2 + r*r/6 - r**4/360 + ...\n+//      We use a special Remes algorithm on [0,0.34658] to generate\n+//      a polynomial of degree 5 to approximate R. The maximum error\n+//      of this polynomial approximation is bounded by 2**-59. In\n+//      other words,\n+//          R(z) ~ 2.0 + P1*z + P2*z**2 + P3*z**3 + P4*z**4 + P5*z**5\n+//      (where z=r*r, and the values of P1 to P5 are listed below)\n+//      and\n+//          |                  5          |     -59\n+//          | 2.0+P1*z+...+P5*z   -  R(z) | <= 2\n+//          |                             |\n+//      The computation of exp(r) thus becomes\n+//                             2*r\n+//              exp(r) = 1 + -------\n+//                            R - r\n+//                                 r*R1(r)\n+//                     = 1 + r + ----------- (for better accuracy)\n+//                                2 - R1(r)\n+//      where\n+//                               2       4             10\n+//              R1(r) = r - (P1*r  + P2*r  + ... + P5*r   ).\n+//\n+//   3. Scale back to obtain exp(x):\n+//      From step 1, we have\n+//         exp(x) = 2**k * exp(r)\n+//\n+// Special cases:\n+//      exp(INF) is INF, exp(NaN) is NaN;\n+//      exp(-INF) is 0, and\n+//      for finite argument, only exp(0)=1 is exact.\n+//\n+// Accuracy:\n+//      according to an error analysis, the error is always less than\n+//      1 ulp (unit in the last place).\n+//\n+// Misc. info.\n+//      For IEEE double\n+//          if x >  7.09782712893383973096e+02 then exp(x) overflow\n+//          if x < -7.45133219101941108420e+02 then exp(x) underflow\n+//\n+// Constants:\n+// The hexadecimal values are the intended ones for the following\n+// constants. The decimal values may be used, provided that the\n+// compiler will convert from decimal to binary accurately enough\n+// to produce the hexadecimal values shown.\n+\n+func exp(x float64) float64 {\n+\tconst (\n+\t\tLn2Hi = 6.93147180369123816490e-01\n+\t\tLn2Lo = 1.90821492927058770002e-10\n+\t\tLog2e = 1.44269504088896338700e+00\n+\n+\t\tOverflow  = 7.09782712893383973096e+02\n+\t\tUnderflow = -7.45133219101941108420e+02\n+\t\tNearZero  = 1.0 / (1 << 28) // 2**-28\n+\t)\n+\n+\t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n+\t// when compiler does it for us\n+\t// special cases\n+\tswitch {\n+\tcase x != x || x > MaxFloat64: // IsNaN(x) || IsInf(x, 1):\n+\t\treturn x\n+\tcase x < -MaxFloat64: // IsInf(x, -1):\n+\t\treturn 0\n+\tcase x > Overflow:\n+\t\treturn Inf(1)\n+\tcase x < Underflow:\n+\t\treturn 0\n+\tcase -NearZero < x && x < NearZero:\n+\t\treturn 1 + x\n+\t}\n+\n+\t// reduce; computed as r = hi - lo for extra precision.\n+\tvar k int\n+\tswitch {\n+\tcase x < 0:\n+\t\tk = int(Log2e*x - 0.5)\n+\tcase x > 0:\n+\t\tk = int(Log2e*x + 0.5)\n+\t}\n+\thi := x - float64(k)*Ln2Hi\n+\tlo := float64(k) * Ln2Lo\n+\n+\t// compute\n+\treturn expmulti(hi, lo, k)\n+}\n+\n+// Exp2 returns 2**x, the base-2 exponential of x.\n+//\n+// Special cases are the same as Exp.\n+func Exp2(x float64) float64 {\n+\treturn exp2(x)\n+}\n+\n+func exp2(x float64) float64 {\n+\tconst (\n+\t\tLn2Hi = 6.93147180369123816490e-01\n+\t\tLn2Lo = 1.90821492927058770002e-10\n+\n+\t\tOverflow  = 1.0239999999999999e+03\n+\t\tUnderflow = -1.0740e+03\n+\t)\n+\n+\t// TODO: remove manual inlining of IsNaN and IsInf\n+\t// when compiler does it for us\n+\t// special cases\n+\tswitch {\n+\tcase x != x || x > MaxFloat64: // IsNaN(x) || IsInf(x, 1):\n+\t\treturn x\n+\tcase x < -MaxFloat64: // IsInf(x, -1):\n+\t\treturn 0\n+\tcase x > Overflow:\n+\t\treturn Inf(1)\n+\tcase x < Underflow:\n+\t\treturn 0\n+\t}\n+\n+\t// argument reduction; x = r\u00d7lg(e) + k with |r| \u2264 ln(2)/2.\n+\t// computed as r = hi - lo for extra precision.\n+\tvar k int\n+\tswitch {\n+\tcase x > 0:\n+\t\tk = int(x + 0.5)\n+\tcase x < 0:\n+\t\tk = int(x - 0.5)\n+\t}\n+\tt := x - float64(k)\n+\thi := t * Ln2Hi\n+\tlo := -t * Ln2Lo\n+\n+\t// compute\n+\treturn expmulti(hi, lo, k)\n+}\n+\n+// exp1 returns e**r \u00d7 2**k where r = hi - lo and |r| \u2264 ln(2)/2.\n+func expmulti(hi, lo float64, k int) float64 {\n+\tconst (\n+\t\tP1 = 1.66666666666666019037e-01  /* 0x3FC55555; 0x5555553E */\n+\t\tP2 = -2.77777777770155933842e-03 /* 0xBF66C16C; 0x16BEBD93 */\n+\t\tP3 = 6.61375632143793436117e-05  /* 0x3F11566A; 0xAF25DE2C */\n+\t\tP4 = -1.65339022054652515390e-06 /* 0xBEBBBD41; 0xC5D26BF1 */\n+\t\tP5 = 4.13813679705723846039e-08  /* 0x3E663769; 0x72BEA4D0 */\n+\t)\n+\n+\tr := hi - lo\n+\tt := r * r\n+\tc := r - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))))\n+\ty := 1 - ((lo - (r*c)/(2-c)) - hi)\n+\t// TODO(rsc): make sure Ldexp can handle boundary k\n+\treturn Ldexp(y, k)\n+}"}, {"sha": "1cface9d360ad93730e5c7e825eea15534ffd356", "filename": "libgo/go/math/exp2.go", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fexp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fexp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexp2.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,10 +0,0 @@\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-// Exp2 returns 2**x, the base-2 exponential of x.\n-//\n-// Special cases are the same as Exp.\n-func Exp2(x float64) float64 { return exp2Go(x) }"}, {"sha": "618c31a5d1167b459e9ca7fa4248d6d9a11343a7", "filename": "libgo/go/math/exp_port.go", "status": "removed", "additions": 0, "deletions": 191, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fexp_port.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fexp_port.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexp_port.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,191 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-// The original C code, the long comment, and the constants\n-// below are from FreeBSD's /usr/src/lib/msun/src/e_exp.c\n-// and came with this notice.  The go code is a simplified\n-// version of the original C.\n-//\n-// ====================================================\n-// Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n-//\n-// Permission to use, copy, modify, and distribute this\n-// software is freely granted, provided that this notice\n-// is preserved.\n-// ====================================================\n-//\n-//\n-// exp(x)\n-// Returns the exponential of x.\n-//\n-// Method\n-//   1. Argument reduction:\n-//      Reduce x to an r so that |r| <= 0.5*ln2 ~ 0.34658.\n-//      Given x, find r and integer k such that\n-//\n-//               x = k*ln2 + r,  |r| <= 0.5*ln2.\n-//\n-//      Here r will be represented as r = hi-lo for better\n-//      accuracy.\n-//\n-//   2. Approximation of exp(r) by a special rational function on\n-//      the interval [0,0.34658]:\n-//      Write\n-//          R(r**2) = r*(exp(r)+1)/(exp(r)-1) = 2 + r*r/6 - r**4/360 + ...\n-//      We use a special Remes algorithm on [0,0.34658] to generate\n-//      a polynomial of degree 5 to approximate R. The maximum error\n-//      of this polynomial approximation is bounded by 2**-59. In\n-//      other words,\n-//          R(z) ~ 2.0 + P1*z + P2*z**2 + P3*z**3 + P4*z**4 + P5*z**5\n-//      (where z=r*r, and the values of P1 to P5 are listed below)\n-//      and\n-//          |                  5          |     -59\n-//          | 2.0+P1*z+...+P5*z   -  R(z) | <= 2\n-//          |                             |\n-//      The computation of exp(r) thus becomes\n-//                             2*r\n-//              exp(r) = 1 + -------\n-//                            R - r\n-//                                 r*R1(r)\n-//                     = 1 + r + ----------- (for better accuracy)\n-//                                2 - R1(r)\n-//      where\n-//                               2       4             10\n-//              R1(r) = r - (P1*r  + P2*r  + ... + P5*r   ).\n-//\n-//   3. Scale back to obtain exp(x):\n-//      From step 1, we have\n-//         exp(x) = 2**k * exp(r)\n-//\n-// Special cases:\n-//      exp(INF) is INF, exp(NaN) is NaN;\n-//      exp(-INF) is 0, and\n-//      for finite argument, only exp(0)=1 is exact.\n-//\n-// Accuracy:\n-//      according to an error analysis, the error is always less than\n-//      1 ulp (unit in the last place).\n-//\n-// Misc. info.\n-//      For IEEE double\n-//          if x >  7.09782712893383973096e+02 then exp(x) overflow\n-//          if x < -7.45133219101941108420e+02 then exp(x) underflow\n-//\n-// Constants:\n-// The hexadecimal values are the intended ones for the following\n-// constants. The decimal values may be used, provided that the\n-// compiler will convert from decimal to binary accurately enough\n-// to produce the hexadecimal values shown.\n-\n-// Exp returns e**x, the base-e exponential of x.\n-//\n-// Special cases are:\n-//\tExp(+Inf) = +Inf\n-//\tExp(NaN) = NaN\n-// Very large values overflow to 0 or +Inf.\n-// Very small values underflow to 1.\n-func expGo(x float64) float64 {\n-\tconst (\n-\t\tLn2Hi = 6.93147180369123816490e-01\n-\t\tLn2Lo = 1.90821492927058770002e-10\n-\t\tLog2e = 1.44269504088896338700e+00\n-\n-\t\tOverflow  = 7.09782712893383973096e+02\n-\t\tUnderflow = -7.45133219101941108420e+02\n-\t\tNearZero  = 1.0 / (1 << 28) // 2**-28\n-\t)\n-\n-\t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n-\t// when compiler does it for us\n-\t// special cases\n-\tswitch {\n-\tcase x != x || x > MaxFloat64: // IsNaN(x) || IsInf(x, 1):\n-\t\treturn x\n-\tcase x < -MaxFloat64: // IsInf(x, -1):\n-\t\treturn 0\n-\tcase x > Overflow:\n-\t\treturn Inf(1)\n-\tcase x < Underflow:\n-\t\treturn 0\n-\tcase -NearZero < x && x < NearZero:\n-\t\treturn 1 + x\n-\t}\n-\n-\t// reduce; computed as r = hi - lo for extra precision.\n-\tvar k int\n-\tswitch {\n-\tcase x < 0:\n-\t\tk = int(Log2e*x - 0.5)\n-\tcase x > 0:\n-\t\tk = int(Log2e*x + 0.5)\n-\t}\n-\thi := x - float64(k)*Ln2Hi\n-\tlo := float64(k) * Ln2Lo\n-\n-\t// compute\n-\treturn exp(hi, lo, k)\n-}\n-\n-// Exp2 returns 2**x, the base-2 exponential of x.\n-//\n-// Special cases are the same as Exp.\n-func exp2Go(x float64) float64 {\n-\tconst (\n-\t\tLn2Hi = 6.93147180369123816490e-01\n-\t\tLn2Lo = 1.90821492927058770002e-10\n-\n-\t\tOverflow  = 1.0239999999999999e+03\n-\t\tUnderflow = -1.0740e+03\n-\t)\n-\n-\t// TODO: remove manual inlining of IsNaN and IsInf\n-\t// when compiler does it for us\n-\t// special cases\n-\tswitch {\n-\tcase x != x || x > MaxFloat64: // IsNaN(x) || IsInf(x, 1):\n-\t\treturn x\n-\tcase x < -MaxFloat64: // IsInf(x, -1):\n-\t\treturn 0\n-\tcase x > Overflow:\n-\t\treturn Inf(1)\n-\tcase x < Underflow:\n-\t\treturn 0\n-\t}\n-\n-\t// argument reduction; x = r\u00d7lg(e) + k with |r| \u2264 ln(2)/2.\n-\t// computed as r = hi - lo for extra precision.\n-\tvar k int\n-\tswitch {\n-\tcase x > 0:\n-\t\tk = int(x + 0.5)\n-\tcase x < 0:\n-\t\tk = int(x - 0.5)\n-\t}\n-\tt := x - float64(k)\n-\thi := t * Ln2Hi\n-\tlo := -t * Ln2Lo\n-\n-\t// compute\n-\treturn exp(hi, lo, k)\n-}\n-\n-// exp returns e**r \u00d7 2**k where r = hi - lo and |r| \u2264 ln(2)/2.\n-func exp(hi, lo float64, k int) float64 {\n-\tconst (\n-\t\tP1 = 1.66666666666666019037e-01  /* 0x3FC55555; 0x5555553E */\n-\t\tP2 = -2.77777777770155933842e-03 /* 0xBF66C16C; 0x16BEBD93 */\n-\t\tP3 = 6.61375632143793436117e-05  /* 0x3F11566A; 0xAF25DE2C */\n-\t\tP4 = -1.65339022054652515390e-06 /* 0xBEBBBD41; 0xC5D26BF1 */\n-\t\tP5 = 4.13813679705723846039e-08  /* 0x3E663769; 0x72BEA4D0 */\n-\t)\n-\n-\tr := hi - lo\n-\tt := r * r\n-\tc := r - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))))\n-\ty := 1 - ((lo - (r*c)/(2-c)) - hi)\n-\t// TODO(rsc): make sure Ldexp can handle boundary k\n-\treturn Ldexp(y, k)\n-}"}, {"sha": "7381fd5ad34a265291566c02cac32dcd843bd0cc", "filename": "libgo/go/math/exp_test.go", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fexp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fexp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexp_test.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,10 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-// Make expGo and exp2Go available for testing.\n-\n-func ExpGo(x float64) float64  { return expGo(x) }\n-func Exp2Go(x float64) float64 { return exp2Go(x) }"}, {"sha": "5bffdb323a42431043e34554e32c161ceb11ad88", "filename": "libgo/go/math/expm1.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fexpm1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fexpm1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexpm1.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -121,7 +121,12 @@ package math\n //\tExpm1(-Inf) = -1\n //\tExpm1(NaN) = NaN\n // Very large values overflow to -1 or +Inf.\n+func libc_expm1(float64) float64 __asm__(\"expm1\")\n func Expm1(x float64) float64 {\n+\treturn libc_expm1(x)\n+}\n+\n+func expm1(x float64) float64 {\n \tconst (\n \t\tOthreshold = 7.09782712893383973096e+02 // 0x40862E42FEFA39EF\n \t\tLn2X56     = 3.88162421113569373274e+01 // 0x4043687a9f1af2b1"}, {"sha": "02992d70e8421771ab24b1b30f38d34ccfb49919", "filename": "libgo/go/math/export_test.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fexport_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package math\n+\n+// Export internal functions for testing.\n+var ExpGo = exp\n+var Exp2Go = exp2\n+var HypotGo = hypot\n+var SqrtGo = sqrt"}, {"sha": "4d5f4a42707696031ec3a92350b6e5cd9f02c7b8", "filename": "libgo/go/math/floor.go", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Ffloor.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Ffloor.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Ffloor.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -7,9 +7,15 @@ package math\n // Floor returns the greatest integer value less than or equal to x.\n //\n // Special cases are:\n+//\tFloor(\u00b10) = \u00b10\n //\tFloor(\u00b1Inf) = \u00b1Inf\n //\tFloor(NaN) = NaN\n+func libc_floor(float64) float64 __asm__(\"floor\")\n func Floor(x float64) float64 {\n+\treturn libc_floor(x)\n+}\n+\n+func floor(x float64) float64 {\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us\n \tif x == 0 || x != x || x > MaxFloat64 || x < -MaxFloat64 { // x == 0 || IsNaN(x) || IsInf(x, 0)\n@@ -29,16 +35,30 @@ func Floor(x float64) float64 {\n // Ceil returns the least integer value greater than or equal to x.\n //\n // Special cases are:\n+//\tCeil(\u00b10) = \u00b10\n //\tCeil(\u00b1Inf) = \u00b1Inf\n //\tCeil(NaN) = NaN\n-func Ceil(x float64) float64 { return -Floor(-x) }\n+func libc_ceil(float64) float64 __asm__(\"ceil\")\n+func Ceil(x float64) float64 {\n+\treturn libc_ceil(x)\n+}\n+\n+func ceil(x float64) float64 {\n+\treturn -Floor(-x)\n+}\n \n // Trunc returns the integer value of x.\n //\n // Special cases are:\n+//\tTrunc(\u00b10) = \u00b10\n //\tTrunc(\u00b1Inf) = \u00b1Inf\n //\tTrunc(NaN) = NaN\n+func libc_trunc(float64) float64 __asm__(\"trunc\")\n func Trunc(x float64) float64 {\n+\treturn libc_trunc(x)\n+}\n+\n+func trunc(x float64) float64 {\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us\n \tif x == 0 || x != x || x > MaxFloat64 || x < -MaxFloat64 { // x == 0 || IsNaN(x) || IsInf(x, 0)"}, {"sha": "6b928e714c59e3a6dac1c0bf6b6bedbed6c72ae1", "filename": "libgo/go/math/frexp.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Ffrexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Ffrexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Ffrexp.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -14,6 +14,10 @@ package math\n //\tFrexp(\u00b1Inf) = \u00b1Inf, 0\n //\tFrexp(NaN) = NaN, 0\n func Frexp(f float64) (frac float64, exp int) {\n+\treturn frexp(f)\n+}\n+\n+func frexp(f float64) (frac float64, exp int) {\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us\n \t// special cases"}, {"sha": "5c7c3a832b3ced84ae75769047ce49846859fc18", "filename": "libgo/go/math/hypot.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fhypot.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fhypot.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fhypot.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -15,6 +15,10 @@ package math\n //\tHypot(p, q) = +Inf if p or q is infinite\n //\tHypot(p, q) = NaN if p or q is NaN\n func Hypot(p, q float64) float64 {\n+\treturn hypot(p, q)\n+}\n+\n+func hypot(p, q float64) float64 {\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us\n \t// special cases"}, {"sha": "27f335ba2de9c304b4ac503f47de59f072f0810c", "filename": "libgo/go/math/hypot_port.go", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fhypot_port.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fhypot_port.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fhypot_port.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2009-2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-/*\n-\tHypot -- sqrt(p*p + q*q), but overflows only if the result does.\n-\tSee:\n-\t\tCleve Moler and Donald Morrison,\n-\t\tReplacing Square Roots by Pythagorean Sums\n-\t\tIBM Journal of Research and Development,\n-\t\tVol. 27, Number 6, pp. 577-581, Nov. 1983\n-*/\n-\n-// Hypot computes Sqrt(p*p + q*q), taking care to avoid\n-// unnecessary overflow and underflow.\n-//\n-// Special cases are:\n-//\tHypot(p, q) = +Inf if p or q is infinite\n-//\tHypot(p, q) = NaN if p or q is NaN\n-func hypotGo(p, q float64) float64 {\n-\t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n-\t// when compiler does it for us\n-\t// special cases\n-\tswitch {\n-\tcase p < -MaxFloat64 || p > MaxFloat64 || q < -MaxFloat64 || q > MaxFloat64: // IsInf(p, 0) || IsInf(q, 0):\n-\t\treturn Inf(1)\n-\tcase p != p || q != q: // IsNaN(p) || IsNaN(q):\n-\t\treturn NaN()\n-\t}\n-\tif p < 0 {\n-\t\tp = -p\n-\t}\n-\tif q < 0 {\n-\t\tq = -q\n-\t}\n-\n-\tif p < q {\n-\t\tp, q = q, p\n-\t}\n-\n-\tif p == 0 {\n-\t\treturn 0\n-\t}\n-\n-\tpfac := p\n-\tq = q / p\n-\tr := q\n-\tp = 1\n-\tfor {\n-\t\tr = r * r\n-\t\ts := r + 4\n-\t\tif s == 4 {\n-\t\t\treturn p * pfac\n-\t\t}\n-\t\tr = r / s\n-\t\tp = p + 2*r*p\n-\t\tq = q * r\n-\t\tr = q / p\n-\t}\n-\tpanic(\"unreachable\")\n-}"}, {"sha": "85ce1d404d6f6dc1acb9286ea019930d2eb41ede", "filename": "libgo/go/math/hypot_test.go", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fhypot_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fhypot_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fhypot_test.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,9 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-// Make hypotGo available for testing.\n-\n-func HypotGo(x, y float64) float64 { return hypotGo(x, y) }"}, {"sha": "4601cd58cbb9dc939ac95b34700d5e510e74baae", "filename": "libgo/go/math/ldexp.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fldexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fldexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fldexp.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -11,7 +11,12 @@ package math\n //\tLdexp(\u00b10, exp) = \u00b10\n //\tLdexp(\u00b1Inf, exp) = \u00b1Inf\n //\tLdexp(NaN, exp) = NaN\n+func libc_ldexp(float64, int) float64 __asm__(\"ldexp\")\n func Ldexp(frac float64, exp int) float64 {\n+\treturn libc_ldexp(frac, exp)\n+}\n+\n+func ldexp(frac float64, exp int) float64 {\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us\n \t// special cases"}, {"sha": "f06611dfdd2381904c0ae3d7be95d341507e6eef", "filename": "libgo/go/math/log.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Flog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Flog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Flog.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -77,7 +77,12 @@ package math\n //\tLog(0) = -Inf\n //\tLog(x < 0) = NaN\n //\tLog(NaN) = NaN\n+func libc_log(float64) float64 __asm__(\"log\")\n func Log(x float64) float64 {\n+\treturn libc_log(x)\n+}\n+\n+func log(x float64) float64 {\n \tconst (\n \t\tLn2Hi = 6.93147180369123816490e-01 /* 3fe62e42 fee00000 */\n \t\tLn2Lo = 1.90821492927058770002e-10 /* 3dea39ef 35793c76 */"}, {"sha": "5204492b3c4fafccfed60e46ed5985e81558b0ba", "filename": "libgo/go/math/log10.go", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Flog10.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Flog10.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Flog10.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -6,8 +6,22 @@ package math\n \n // Log10 returns the decimal logarithm of x.\n // The special cases are the same as for Log.\n-func Log10(x float64) float64 { return Log(x) * (1 / Ln10) }\n+func libc_log10(float64) float64 __asm__(\"log10\")\n+func Log10(x float64) float64 {\n+\treturn libc_log10(x)\n+}\n+\n+func log10(x float64) float64 {\n+\treturn Log(x) * (1 / Ln10)\n+}\n \n // Log2 returns the binary logarithm of x.\n // The special cases are the same as for Log.\n-func Log2(x float64) float64 { return Log(x) * (1 / Ln2) }\n+func libc_log2(float64) float64 __asm__(\"log2\")\n+func Log2(x float64) float64 {\n+\treturn libc_log2(x)\n+}\n+\n+func log2(x float64) float64 {\n+\treturn Log(x) * (1 / Ln2)\n+}"}, {"sha": "5aec94e1c4fbd7725fb07d2cf9be08fe3ccf9da4", "filename": "libgo/go/math/log10_decl.go", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Flog10_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Flog10_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Flog10_decl.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,8 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-func Log10(x float64) float64\n-func Log2(x float64) float64"}, {"sha": "39c1b40e802a999a5b55c38ebba4b00b1da487c5", "filename": "libgo/go/math/log1p.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Flog1p.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Flog1p.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Flog1p.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -92,7 +92,12 @@ package math\n //\tLog1p(-1) = -Inf\n //\tLog1p(x < -1) = NaN\n //\tLog1p(NaN) = NaN\n+func libc_log1p(float64) float64 __asm__(\"log1p\")\n func Log1p(x float64) float64 {\n+\treturn libc_log1p(x)\n+}\n+\n+func log1p(x float64) float64 {\n \tconst (\n \t\tSqrt2M1     = 4.142135623730950488017e-01  // Sqrt(2)-1 = 0x3fda827999fcef34\n \t\tSqrt2HalfM1 = -2.928932188134524755992e-01 // Sqrt(2)/2-1 = 0xbfd2bec333018866"}, {"sha": "347da70f83222bf4c445cc9e62e09067ab49035a", "filename": "libgo/go/math/mod.go", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fmod.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fmod.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fmod.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -13,9 +13,17 @@ package math\n // sign agrees with that of x.\n //\n // Special cases are:\n-//\tif x is not finite, Mod returns NaN\n-//\tif y is 0 or NaN, Mod returns NaN\n+//\tMod(\u00b1Inf, y) = NaN\n+//\tMod(NaN, y) = NaN\n+//\tMod(x, 0) = NaN\n+//\tMod(x, \u00b1Inf) = x\n+//\tMod(x, NaN) = NaN\n+func libc_fmod(float64, float64) float64 __asm__(\"fmod\")\n func Mod(x, y float64) float64 {\n+\treturn libc_fmod(x, y)\n+}\n+\n+func mod(x, y float64) float64 {\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us.\n \tif y == 0 || x > MaxFloat64 || x < -MaxFloat64 || x != x || y != y { // y == 0 || IsInf(x, 0) || IsNaN(x) || IsNan(y)"}, {"sha": "d5047a754a8e726b22e532c7bc39c96ee0fbe33d", "filename": "libgo/go/math/mod_decl.go", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fmod_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fmod_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fmod_decl.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,7 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-func Mod(x, y float64) float64"}, {"sha": "ecec4b756c746f147c13aaced223f3f8c76f7311", "filename": "libgo/go/math/modf.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fmodf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fmodf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fmodf.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -11,6 +11,10 @@ package math\n //\tModf(\u00b1Inf) = \u00b1Inf, NaN\n //\tModf(NaN) = NaN, NaN\n func Modf(f float64) (int float64, frac float64) {\n+\treturn modf(f)\n+}\n+\n+func modf(f float64) (int float64, frac float64) {\n \tif f < 1 {\n \t\tif f < 0 {\n \t\t\tint, frac = Modf(-f)"}, {"sha": "e7723baacfb7e108e00df99de6b5726402a6c820", "filename": "libgo/go/math/nextafter.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fnextafter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fnextafter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fnextafter.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -8,8 +8,8 @@ package math\n // If x == y, then x is returned.\n //\n // Special cases are:\n-//\tNextafter(NaN, y) = NaN\n-//\tNextafter(x, NaN) = NaN\n+//      Nextafter(NaN, y) = NaN\n+//      Nextafter(x, NaN) = NaN\n func Nextafter(x, y float64) (r float64) {\n \t// TODO(rsc): Remove manual inlining of IsNaN\n \t// when compiler does it for us\n@@ -25,5 +25,5 @@ func Nextafter(x, y float64) (r float64) {\n \tdefault:\n \t\tr = Float64frombits(Float64bits(x) - 1)\n \t}\n-\treturn r\n+\treturn\n }"}, {"sha": "f5ad28bb4b0305bfc58f5961087e58488582d035", "filename": "libgo/go/math/pow10.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fpow10.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fpow10.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fpow10.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -9,6 +9,10 @@ package math\n var pow10tab [70]float64\n \n // Pow10 returns 10**e, the base-10 exponential of e.\n+//\n+// Special cases are:\n+//\tPow10(e) = +Inf for e > 309\n+//\tPow10(e) = 0 for e < -324\n func Pow10(e int) float64 {\n \tif e <= -325 {\n \t\treturn 0"}, {"sha": "77811b183f52c7fd0a5b11c2b96b8a6d7f6222a4", "filename": "libgo/go/math/remainder.go", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fremainder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fremainder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fremainder.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -29,12 +29,16 @@ package math\n // Remainder returns the IEEE 754 floating-point remainder of x/y.\n //\n // Special cases are:\n-//\tRemainder(x, NaN) = NaN\n+//\tRemainder(\u00b1Inf, y) = NaN\n //\tRemainder(NaN, y) = NaN\n-//\tRemainder(Inf, y) = NaN\n //\tRemainder(x, 0) = NaN\n-//\tRemainder(x, Inf) = x\n+//\tRemainder(x, \u00b1Inf) = x\n+//\tRemainder(x, NaN) = NaN\n func Remainder(x, y float64) float64 {\n+\treturn remainder(x, y)\n+}\n+\n+func remainder(x, y float64) float64 {\n \tconst (\n \t\tTiny    = 4.45014771701440276618e-308 // 0x0020000000000000\n \t\tHalfMax = MaxFloat64 / 2"}, {"sha": "2fbe3e7ec5be840cfacd10d4c7ce2ef9ace3254c", "filename": "libgo/go/math/sin.go", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fsin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fsin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsin.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -113,7 +113,12 @@ var _cos = [...]float64{\n // Special cases are:\n //\tCos(\u00b1Inf) = NaN\n //\tCos(NaN) = NaN\n+func libc_cos(float64) float64  __asm__(\"cos\")\n func Cos(x float64) float64 {\n+\treturn libc_cos(x)\n+}\n+\n+func cos(x float64) float64 {\n \tconst (\n \t\tPI4A = 7.85398125648498535156E-1                             // 0x3fe921fb40000000, Pi/4 split into three parts\n \t\tPI4B = 3.77489470793079817668E-8                             // 0x3e64442d00000000,\n@@ -166,11 +171,16 @@ func Cos(x float64) float64 {\n \n // Sin returns the sine of x.\n //\n-// Special conditions are:\n+// Special cases are:\n //\tSin(\u00b10) = \u00b10\n //\tSin(\u00b1Inf) = NaN\n //\tSin(NaN) = NaN\n+func libc_sin(float64) float64 __asm__(\"sin\")\n func Sin(x float64) float64 {\n+\treturn libc_sin(x)\n+}\n+\n+func sin(x float64) float64 {\n \tconst (\n \t\tPI4A = 7.85398125648498535156E-1                             // 0x3fe921fb40000000, Pi/4 split into three parts\n \t\tPI4B = 3.77489470793079817668E-8                             // 0x3e64442d00000000,"}, {"sha": "f0de0893e19ffad25f14e2e0943639e7d657c9bc", "filename": "libgo/go/math/sincos.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fsincos.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fsincos.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsincos.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -13,6 +13,10 @@ package math\n //\tSincos(\u00b1Inf) = NaN, NaN\n //\tSincos(NaN) = NaN, NaN\n func Sincos(x float64) (sin, cos float64) {\n+\treturn sincos(x)\n+}\n+\n+func sincos(x float64) (sin, cos float64) {\n \tconst (\n \t\tPI4A = 7.85398125648498535156E-1                             // 0x3fe921fb40000000, Pi/4 split into three parts\n \t\tPI4B = 3.77489470793079817668E-8                             // 0x3e64442d00000000,"}, {"sha": "fb3aff8e4fc010a327d9f294066da39673f4b1ad", "filename": "libgo/go/math/sqrt.go", "status": "modified", "additions": 129, "deletions": 2, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fsqrt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Fsqrt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsqrt.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -4,7 +4,95 @@\n \n package math\n \n+// Sqrt returns the square root of x.\n+//\n+// Special cases are:\n+//\tSqrt(+Inf) = +Inf\n+//\tSqrt(\u00b10) = \u00b10\n+//\tSqrt(x < 0) = NaN\n+//\tSqrt(NaN) = NaN\n func libc_sqrt(float64) float64 __asm__(\"sqrt\")\n+func Sqrt(x float64) float64 {\n+\treturn libc_sqrt(x)\n+}\n+\n+// The original C code and the long comment below are\n+// from FreeBSD's /usr/src/lib/msun/src/e_sqrt.c and\n+// came with this notice.  The go code is a simplified\n+// version of the original C.\n+//\n+// ====================================================\n+// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+//\n+// Developed at SunPro, a Sun Microsystems, Inc. business.\n+// Permission to use, copy, modify, and distribute this\n+// software is freely granted, provided that this notice\n+// is preserved.\n+// ====================================================\n+//\n+// __ieee754_sqrt(x)\n+// Return correctly rounded sqrt.\n+//           -----------------------------------------\n+//           | Use the hardware sqrt if you have one |\n+//           -----------------------------------------\n+// Method:\n+//   Bit by bit method using integer arithmetic. (Slow, but portable)\n+//   1. Normalization\n+//      Scale x to y in [1,4) with even powers of 2:\n+//      find an integer k such that  1 <= (y=x*2**(2k)) < 4, then\n+//              sqrt(x) = 2**k * sqrt(y)\n+//   2. Bit by bit computation\n+//      Let q  = sqrt(y) truncated to i bit after binary point (q = 1),\n+//           i                                                   0\n+//                                     i+1         2\n+//          s  = 2*q , and      y  =  2   * ( y - q  ).          (1)\n+//           i      i            i                 i\n+//\n+//      To compute q    from q , one checks whether\n+//                  i+1       i\n+//\n+//                            -(i+1) 2\n+//                      (q + 2      )  <= y.                     (2)\n+//                        i\n+//                                                            -(i+1)\n+//      If (2) is false, then q   = q ; otherwise q   = q  + 2      .\n+//                             i+1   i             i+1   i\n+//\n+//      With some algebraic manipulation, it is not difficult to see\n+//      that (2) is equivalent to\n+//                             -(i+1)\n+//                      s  +  2       <= y                       (3)\n+//                       i                i\n+//\n+//      The advantage of (3) is that s  and y  can be computed by\n+//                                    i      i\n+//      the following recurrence formula:\n+//          if (3) is false\n+//\n+//          s     =  s  ,       y    = y   ;                     (4)\n+//           i+1      i          i+1    i\n+//\n+//      otherwise,\n+//                         -i                      -(i+1)\n+//          s     =  s  + 2  ,  y    = y  -  s  - 2              (5)\n+//           i+1      i          i+1    i     i\n+//\n+//      One may easily use induction to prove (4) and (5).\n+//      Note. Since the left hand side of (3) contain only i+2 bits,\n+//            it does not necessary to do a full (53-bit) comparison\n+//            in (3).\n+//   3. Final rounding\n+//      After generating the 53 bits result, we compute one more bit.\n+//      Together with the remainder, we can decide whether the\n+//      result is exact, bigger than 1/2ulp, or less than 1/2ulp\n+//      (it will never equal to 1/2ulp).\n+//      The rounding mode can be detected by checking whether\n+//      huge + tiny is equal to huge, and whether huge - tiny is\n+//      equal to huge for some floating point number \"huge\" and \"tiny\".\n+//\n+//\n+// Notes:  Rounding mode detection omitted.  The constants \"mask\", \"shift\",\n+// and \"bias\" are found in src/pkg/math/bits.go\n \n // Sqrt returns the square root of x.\n //\n@@ -13,7 +101,7 @@ func libc_sqrt(float64) float64 __asm__(\"sqrt\")\n //\tSqrt(\u00b10) = \u00b10\n //\tSqrt(x < 0) = NaN\n //\tSqrt(NaN) = NaN\n-func Sqrt(x float64) float64 {\n+func sqrt(x float64) float64 {\n \t// special cases\n \t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n \t// when compiler does it for us\n@@ -23,6 +111,45 @@ func Sqrt(x float64) float64 {\n \tcase x < 0:\n \t\treturn NaN()\n \t}\n+\tix := Float64bits(x)\n+\t// normalize x\n+\texp := int((ix >> shift) & mask)\n+\tif exp == 0 { // subnormal x\n+\t\tfor ix&1<<shift == 0 {\n+\t\t\tix <<= 1\n+\t\t\texp--\n+\t\t}\n+\t\texp++\n+\t}\n+\texp -= bias // unbias exponent\n+\tix &^= mask << shift\n+\tix |= 1 << shift\n+\tif exp&1 == 1 { // odd exp, double x to make it even\n+\t\tix <<= 1\n+\t}\n+\texp >>= 1 // exp = exp/2, exponent of square root\n+\t// generate sqrt(x) bit by bit\n+\tix <<= 1\n+\tvar q, s uint64               // q = sqrt(x)\n+\tr := uint64(1 << (shift + 1)) // r = moving bit from MSB to LSB\n+\tfor r != 0 {\n+\t\tt := s + r\n+\t\tif t <= ix {\n+\t\t\ts = t + r\n+\t\t\tix -= t\n+\t\t\tq += r\n+\t\t}\n+\t\tix <<= 1\n+\t\tr >>= 1\n+\t}\n+\t// final rounding\n+\tif ix != 0 { // remainder, result not exact\n+\t\tq += q & 1 // round according to extra bit\n+\t}\n+\tix = q>>1 + uint64(exp-1+bias)<<shift // significand + biased exponent\n+\treturn Float64frombits(ix)\n+}\n \n-\treturn libc_sqrt(x)\n+func sqrtC(f float64, r *float64) {\n+\t*r = sqrt(f)\n }"}, {"sha": "e507746458b8b6ef6a3fd9fe1c360ec23736ec42", "filename": "libgo/go/math/sqrt_decl.go", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fsqrt_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fsqrt_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsqrt_decl.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,7 +0,0 @@\n-// Copyright 2009 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-func Sqrt(x float64) float64"}, {"sha": "148239bcff660c5bc6f546bee1170db53b3a7a73", "filename": "libgo/go/math/sqrt_port.go", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fsqrt_port.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fsqrt_port.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsqrt_port.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,147 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-/*\n-\tFloating-point square root.\n-*/\n-\n-// The original C code and the long comment below are\n-// from FreeBSD's /usr/src/lib/msun/src/e_sqrt.c and\n-// came with this notice.  The go code is a simplified\n-// version of the original C.\n-//\n-// ====================================================\n-// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n-//\n-// Developed at SunPro, a Sun Microsystems, Inc. business.\n-// Permission to use, copy, modify, and distribute this\n-// software is freely granted, provided that this notice\n-// is preserved.\n-// ====================================================\n-//\n-// __ieee754_sqrt(x)\n-// Return correctly rounded sqrt.\n-//           -----------------------------------------\n-//           | Use the hardware sqrt if you have one |\n-//           -----------------------------------------\n-// Method:\n-//   Bit by bit method using integer arithmetic. (Slow, but portable)\n-//   1. Normalization\n-//      Scale x to y in [1,4) with even powers of 2:\n-//      find an integer k such that  1 <= (y=x*2**(2k)) < 4, then\n-//              sqrt(x) = 2**k * sqrt(y)\n-//   2. Bit by bit computation\n-//      Let q  = sqrt(y) truncated to i bit after binary point (q = 1),\n-//           i                                                   0\n-//                                     i+1         2\n-//          s  = 2*q , and      y  =  2   * ( y - q  ).          (1)\n-//           i      i            i                 i\n-//\n-//      To compute q    from q , one checks whether\n-//                  i+1       i\n-//\n-//                            -(i+1) 2\n-//                      (q + 2      )  <= y.                     (2)\n-//                        i\n-//                                                            -(i+1)\n-//      If (2) is false, then q   = q ; otherwise q   = q  + 2      .\n-//                             i+1   i             i+1   i\n-//\n-//      With some algebraic manipulation, it is not difficult to see\n-//      that (2) is equivalent to\n-//                             -(i+1)\n-//                      s  +  2       <= y                       (3)\n-//                       i                i\n-//\n-//      The advantage of (3) is that s  and y  can be computed by\n-//                                    i      i\n-//      the following recurrence formula:\n-//          if (3) is false\n-//\n-//          s     =  s  ,       y    = y   ;                     (4)\n-//           i+1      i          i+1    i\n-//\n-//      otherwise,\n-//                         -i                      -(i+1)\n-//          s     =  s  + 2  ,  y    = y  -  s  - 2              (5)\n-//           i+1      i          i+1    i     i\n-//\n-//      One may easily use induction to prove (4) and (5).\n-//      Note. Since the left hand side of (3) contain only i+2 bits,\n-//            it does not necessary to do a full (53-bit) comparison\n-//            in (3).\n-//   3. Final rounding\n-//      After generating the 53 bits result, we compute one more bit.\n-//      Together with the remainder, we can decide whether the\n-//      result is exact, bigger than 1/2ulp, or less than 1/2ulp\n-//      (it will never equal to 1/2ulp).\n-//      The rounding mode can be detected by checking whether\n-//      huge + tiny is equal to huge, and whether huge - tiny is\n-//      equal to huge for some floating point number \"huge\" and \"tiny\".\n-//\n-//\n-// Notes:  Rounding mode detection omitted.  The constants \"mask\", \"shift\",\n-// and \"bias\" are found in src/pkg/math/bits.go\n-\n-// Sqrt returns the square root of x.\n-//\n-// Special cases are:\n-//\tSqrt(+Inf) = +Inf\n-//\tSqrt(\u00b10) = \u00b10\n-//\tSqrt(x < 0) = NaN\n-//\tSqrt(NaN) = NaN\n-func sqrtGo(x float64) float64 {\n-\t// special cases\n-\t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n-\t// when compiler does it for us\n-\tswitch {\n-\tcase x == 0 || x != x || x > MaxFloat64: // x == 0 || IsNaN(x) || IsInf(x, 1):\n-\t\treturn x\n-\tcase x < 0:\n-\t\treturn NaN()\n-\t}\n-\tix := Float64bits(x)\n-\t// normalize x\n-\texp := int((ix >> shift) & mask)\n-\tif exp == 0 { // subnormal x\n-\t\tfor ix&1<<shift == 0 {\n-\t\t\tix <<= 1\n-\t\t\texp--\n-\t\t}\n-\t\texp++\n-\t}\n-\texp -= bias // unbias exponent\n-\tix &^= mask << shift\n-\tix |= 1 << shift\n-\tif exp&1 == 1 { // odd exp, double x to make it even\n-\t\tix <<= 1\n-\t}\n-\texp >>= 1 // exp = exp/2, exponent of square root\n-\t// generate sqrt(x) bit by bit\n-\tix <<= 1\n-\tvar q, s uint64               // q = sqrt(x)\n-\tr := uint64(1 << (shift + 1)) // r = moving bit from MSB to LSB\n-\tfor r != 0 {\n-\t\tt := s + r\n-\t\tif t <= ix {\n-\t\t\ts = t + r\n-\t\t\tix -= t\n-\t\t\tq += r\n-\t\t}\n-\t\tix <<= 1\n-\t\tr >>= 1\n-\t}\n-\t// final rounding\n-\tif ix != 0 { // remainder, result not exact\n-\t\tq += q & 1 // round according to extra bit\n-\t}\n-\tix = q>>1 + uint64(exp-1+bias)<<shift // significand + biased exponent\n-\treturn Float64frombits(ix)\n-}\n-\n-func sqrtGoC(f float64, r *float64) {\n-\t*r = sqrtGo(f)\n-}"}, {"sha": "84cbc169e81a8257497e40c617fee022f2961c97", "filename": "libgo/go/math/sqrt_test.go", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fsqrt_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Fmath%2Fsqrt_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fsqrt_test.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,9 +0,0 @@\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package math\n-\n-// Make sqrtGo available for testing.\n-\n-func SqrtGo(x float64) float64 { return sqrtGo(x) }"}, {"sha": "926bb4b227e7e2fcaee67d74626aff0eb3bd7a72", "filename": "libgo/go/math/tan.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Ftan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmath%2Ftan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Ftan.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -79,7 +79,12 @@ var _tanQ = [...]float64{\n //\tTan(\u00b10) = \u00b10\n //\tTan(\u00b1Inf) = NaN\n //\tTan(NaN) = NaN\n+func libc_tan(float64) float64 __asm__(\"tan\")\n func Tan(x float64) float64 {\n+\treturn libc_tan(x)\n+}\n+\n+func tan(x float64) float64 {\n \tconst (\n \t\tPI4A = 7.85398125648498535156E-1                             // 0x3fe921fb40000000, Pi/4 split into three parts\n \t\tPI4B = 3.77489470793079817668E-8                             // 0x3e64442d00000000,"}, {"sha": "bc388893b48ab799583d988fb4dc365f817d2d0c", "filename": "libgo/go/mime/type_windows.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmime%2Ftype_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fmime%2Ftype_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Ftype_windows.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -12,18 +12,18 @@ import (\n func initMime() {\n \tvar root syscall.Handle\n \tif syscall.RegOpenKeyEx(syscall.HKEY_CLASSES_ROOT, syscall.StringToUTF16Ptr(`\\`),\n-\t\t0, syscall.KEY_READ, &root) != 0 {\n+\t\t0, syscall.KEY_READ, &root) != nil {\n \t\treturn\n \t}\n \tdefer syscall.RegCloseKey(root)\n \tvar count uint32\n-\tif syscall.RegQueryInfoKey(root, nil, nil, nil, &count, nil, nil, nil, nil, nil, nil, nil) != 0 {\n+\tif syscall.RegQueryInfoKey(root, nil, nil, nil, &count, nil, nil, nil, nil, nil, nil, nil) != nil {\n \t\treturn\n \t}\n \tvar buf [1 << 10]uint16\n \tfor i := uint32(0); i < count; i++ {\n \t\tn := uint32(len(buf))\n-\t\tif syscall.RegEnumKeyEx(root, i, &buf[0], &n, nil, nil, nil, nil) != 0 {\n+\t\tif syscall.RegEnumKeyEx(root, i, &buf[0], &n, nil, nil, nil, nil) != nil {\n \t\t\tcontinue\n \t\t}\n \t\text := syscall.UTF16ToString(buf[:])\n@@ -33,14 +33,14 @@ func initMime() {\n \t\tvar h syscall.Handle\n \t\tif syscall.RegOpenKeyEx(\n \t\t\tsyscall.HKEY_CLASSES_ROOT, syscall.StringToUTF16Ptr(`\\`+ext),\n-\t\t\t0, syscall.KEY_READ, &h) != 0 {\n+\t\t\t0, syscall.KEY_READ, &h) != nil {\n \t\t\tcontinue\n \t\t}\n \t\tvar typ uint32\n \t\tn = uint32(len(buf) * 2) // api expects array of bytes, not uint16\n \t\tif syscall.RegQueryValueEx(\n \t\t\th, syscall.StringToUTF16Ptr(\"Content Type\"),\n-\t\t\tnil, &typ, (*byte)(unsafe.Pointer(&buf[0])), &n) != 0 {\n+\t\t\tnil, &typ, (*byte)(unsafe.Pointer(&buf[0])), &n) != nil {\n \t\t\tsyscall.RegCloseKey(h)\n \t\t\tcontinue\n \t\t}"}, {"sha": "7bffd1ca2fb9751061d54c81cc15fce38362ecc3", "filename": "libgo/go/net/fd_windows.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Ffd_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Ffd_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_windows.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -25,8 +25,8 @@ var initErr error\n func init() {\n \tvar d syscall.WSAData\n \te := syscall.WSAStartup(uint32(0x202), &d)\n-\tif e != 0 {\n-\t\tinitErr = os.NewSyscallError(\"WSAStartup\", syscall.Errno(e))\n+\tif e != nil {\n+\t\tinitErr = os.NewSyscallError(\"WSAStartup\", e)\n \t}\n }\n "}, {"sha": "2dbcf8dc97c8e0ef3b69e438a35eddd81ee680e2", "filename": "libgo/go/net/http/doc.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fdoc.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -70,8 +70,8 @@ custom Server:\n \ts := &http.Server{\n \t\tAddr:           \":8080\",\n \t\tHandler:        myHandler,\n-\t\tReadTimeout:    10e9,\n-\t\tWriteTimeout:   10e9,\n+\t\tReadTimeout:    10 * time.Second,\n+\t\tWriteTimeout:   10 * time.Second,\n \t\tMaxHeaderBytes: 1 << 20,\n \t}\n \tlog.Fatal(s.ListenAndServe())"}, {"sha": "c68e6614b19079f6c5d27f9e275bbd765eff1063", "filename": "libgo/go/net/http/serve_test.go", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -361,7 +361,7 @@ func TestIdentityResponse(t *testing.T) {\n \n \t// The ReadAll will hang for a failing test, so use a Timer to\n \t// fail explicitly.\n-\tgoTimeout(t, 2e9, func() {\n+\tgoTimeout(t, 2*time.Second, func() {\n \t\tgot, _ := ioutil.ReadAll(conn)\n \t\texpectedSuffix := \"\\r\\n\\r\\ntoo short\"\n \t\tif !strings.HasSuffix(string(got), expectedSuffix) {\n@@ -395,7 +395,7 @@ func testTcpConnectionCloses(t *testing.T, req string, h Handler) {\n \tsuccess := make(chan bool)\n \tgo func() {\n \t\tselect {\n-\t\tcase <-time.After(5e9):\n+\t\tcase <-time.After(5 * time.Second):\n \t\t\tt.Fatal(\"body not closed after 5s\")\n \t\tcase <-success:\n \t\t}\n@@ -538,15 +538,15 @@ func TestHeadResponses(t *testing.T) {\n \n func TestTLSHandshakeTimeout(t *testing.T) {\n \tts := httptest.NewUnstartedServer(HandlerFunc(func(w ResponseWriter, r *Request) {}))\n-\tts.Config.ReadTimeout = 250e6\n+\tts.Config.ReadTimeout = 250 * time.Millisecond\n \tts.StartTLS()\n \tdefer ts.Close()\n \tconn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())\n \tif err != nil {\n \t\tt.Fatalf(\"Dial: %v\", err)\n \t}\n \tdefer conn.Close()\n-\tgoTimeout(t, 10e9, func() {\n+\tgoTimeout(t, 10*time.Second, func() {\n \t\tvar buf [1]byte\n \t\tn, err := conn.Read(buf[:])\n \t\tif err == nil || n != 0 {\n@@ -576,7 +576,7 @@ func TestTLSServer(t *testing.T) {\n \t\tt.Fatalf(\"Dial: %v\", err)\n \t}\n \tdefer idleConn.Close()\n-\tgoTimeout(t, 10e9, func() {\n+\tgoTimeout(t, 10*time.Second, func() {\n \t\tif !strings.HasPrefix(ts.URL, \"https://\") {\n \t\t\tt.Errorf(\"expected test TLS server to start with https://, got %q\", ts.URL)\n \t\t\treturn\n@@ -925,7 +925,7 @@ func testHandlerPanic(t *testing.T, withHijack bool) {\n \tselect {\n \tcase <-done:\n \t\treturn\n-\tcase <-time.After(5e9):\n+\tcase <-time.After(5 * time.Second):\n \t\tt.Fatal(\"expected server handler to log an error\")\n \t}\n }\n@@ -1072,7 +1072,7 @@ func TestClientWriteShutdown(t *testing.T) {\n \t}()\n \tselect {\n \tcase <-donec:\n-\tcase <-time.After(10e9):\n+\tcase <-time.After(10 * time.Second):\n \t\tt.Fatalf(\"timeout\")\n \t}\n }\n@@ -1103,10 +1103,10 @@ func TestServerBufferedChunking(t *testing.T) {\n }\n \n // goTimeout runs f, failing t if f takes more than ns to complete.\n-func goTimeout(t *testing.T, ns int64, f func()) {\n+func goTimeout(t *testing.T, d time.Duration, f func()) {\n \tch := make(chan bool, 2)\n-\ttimer := time.AfterFunc(ns, func() {\n-\t\tt.Errorf(\"Timeout expired after %d ns\", ns)\n+\ttimer := time.AfterFunc(d, func() {\n+\t\tt.Errorf(\"Timeout expired after %v\", d)\n \t\tch <- true\n \t})\n \tdefer timer.Stop()"}, {"sha": "fa9009517dbabe5659b737c906a031e35a090a30", "filename": "libgo/go/net/http/server.go", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -261,7 +261,7 @@ func (w *response) Header() Header {\n }\n \n // maxPostHandlerReadBytes is the max number of Request.Body bytes not\n-// consumed by a handler that the server will read from the a client\n+// consumed by a handler that the server will read from the client\n // in order to keep a connection alive.  If there are more bytes than\n // this then the server to be paranoid instead sends a \"Connection:\n // close\" response.\n@@ -952,11 +952,11 @@ func Serve(l net.Listener, handler Handler) error {\n \n // A Server defines parameters for running an HTTP server.\n type Server struct {\n-\tAddr           string  // TCP address to listen on, \":http\" if empty\n-\tHandler        Handler // handler to invoke, http.DefaultServeMux if nil\n-\tReadTimeout    int64   // the net.Conn.SetReadTimeout value for new connections\n-\tWriteTimeout   int64   // the net.Conn.SetWriteTimeout value for new connections\n-\tMaxHeaderBytes int     // maximum size of request headers, DefaultMaxHeaderBytes if 0\n+\tAddr           string        // TCP address to listen on, \":http\" if empty\n+\tHandler        Handler       // handler to invoke, http.DefaultServeMux if nil\n+\tReadTimeout    time.Duration // the net.Conn.SetReadTimeout value for new connections\n+\tWriteTimeout   time.Duration // the net.Conn.SetWriteTimeout value for new connections\n+\tMaxHeaderBytes int           // maximum size of request headers, DefaultMaxHeaderBytes if 0\n }\n \n // ListenAndServe listens on the TCP network address srv.Addr and then\n@@ -989,10 +989,10 @@ func (srv *Server) Serve(l net.Listener) error {\n \t\t\treturn e\n \t\t}\n \t\tif srv.ReadTimeout != 0 {\n-\t\t\trw.SetReadTimeout(srv.ReadTimeout)\n+\t\t\trw.SetReadTimeout(srv.ReadTimeout.Nanoseconds())\n \t\t}\n \t\tif srv.WriteTimeout != 0 {\n-\t\t\trw.SetWriteTimeout(srv.WriteTimeout)\n+\t\t\trw.SetWriteTimeout(srv.WriteTimeout.Nanoseconds())\n \t\t}\n \t\tc, err := srv.newConn(rw)\n \t\tif err != nil {\n@@ -1027,7 +1027,7 @@ func (srv *Server) Serve(l net.Listener) error {\n //\t\thttp.HandleFunc(\"/hello\", HelloServer)\n //\t\terr := http.ListenAndServe(\":12345\", nil)\n //\t\tif err != nil {\n-//\t\t\tlog.Fatal(\"ListenAndServe: \", err.String())\n+//\t\t\tlog.Fatal(\"ListenAndServe: \", err)\n //\t\t}\n //\t}\n func ListenAndServe(addr string, handler Handler) error {"}, {"sha": "33ad32861b5b3fc382cf9980f4b13dd47e708f17", "filename": "libgo/go/net/http/transport.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -539,12 +539,13 @@ func (pc *persistConn) readLoop() {\n \t\tresp, err := ReadResponse(pc.br, rc.req)\n \n \t\tif err == nil {\n-\t\t\tif rc.addedGzip && resp.Header.Get(\"Content-Encoding\") == \"gzip\" {\n+\t\t\thasBody := rc.req.Method != \"HEAD\" && resp.ContentLength != 0\n+\t\t\tif rc.addedGzip && hasBody && resp.Header.Get(\"Content-Encoding\") == \"gzip\" {\n \t\t\t\tresp.Header.Del(\"Content-Encoding\")\n \t\t\t\tresp.Header.Del(\"Content-Length\")\n \t\t\t\tresp.ContentLength = -1\n \t\t\t\tgzReader, zerr := gzip.NewReader(resp.Body)\n-\t\t\t\tif err != nil {\n+\t\t\t\tif zerr != nil {\n \t\t\t\t\tpc.close()\n \t\t\t\t\terr = zerr\n \t\t\t\t} else {"}, {"sha": "ff12fa2d01490962f3f9834217611eeebcaaa793", "filename": "libgo/go/net/http/transport_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -292,7 +292,7 @@ func TestTransportServerClosingUnexpectedly(t *testing.T) {\n \t// it on most fast machines, causing the next fetch() call to\n \t// succeed quickly.  But if we do get errors, fetch() will retry 5\n \t// times with some delays between.\n-\ttime.Sleep(25e6)\n+\ttime.Sleep(25 * time.Millisecond)\n \n \tbody3 := fetch(3, 5)\n "}, {"sha": "add3dd3b9d9216fa510456cd1dff607219856f1f", "filename": "libgo/go/net/interface_windows.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Finterface_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Finterface_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Finterface_windows.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -31,7 +31,7 @@ func getAdapterList() (*syscall.IpAdapterInfo, error) {\n \t\ta = (*syscall.IpAdapterInfo)(unsafe.Pointer(&b[0]))\n \t\te = syscall.GetAdaptersInfo(a, &l)\n \t}\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn nil, os.NewSyscallError(\"GetAdaptersInfo\", e)\n \t}\n \treturn a, nil\n@@ -77,7 +77,7 @@ func interfaceTable(ifindex int) ([]Interface, error) {\n \n \t\t\trow := syscall.MibIfRow{Index: index}\n \t\t\te := syscall.GetIfEntry(&row)\n-\t\t\tif e != 0 {\n+\t\t\tif e != nil {\n \t\t\t\treturn nil, os.NewSyscallError(\"GetIfEntry\", e)\n \t\t\t}\n "}, {"sha": "51afbd4bb85a2dba27423f351c455f20d288b67f", "filename": "libgo/go/net/lookup_windows.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Flookup_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Flookup_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Flookup_windows.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -80,7 +80,7 @@ func LookupPort(network, service string) (port int, err error) {\n func LookupCNAME(name string) (cname string, err error) {\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(name, syscall.DNS_TYPE_CNAME, 0, nil, &r, nil)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn \"\", os.NewSyscallError(\"LookupCNAME\", e)\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)\n@@ -109,7 +109,7 @@ func LookupSRV(service, proto, name string) (cname string, addrs []*SRV, err err\n \t}\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(target, syscall.DNS_TYPE_SRV, 0, nil, &r, nil)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn \"\", nil, os.NewSyscallError(\"LookupSRV\", e)\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)\n@@ -125,7 +125,7 @@ func LookupSRV(service, proto, name string) (cname string, addrs []*SRV, err err\n func LookupMX(name string) (mx []*MX, err error) {\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(name, syscall.DNS_TYPE_MX, 0, nil, &r, nil)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn nil, os.NewSyscallError(\"LookupMX\", e)\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)\n@@ -141,7 +141,7 @@ func LookupMX(name string) (mx []*MX, err error) {\n func LookupTXT(name string) (txt []string, err error) {\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(name, syscall.DNS_TYPE_TEXT, 0, nil, &r, nil)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn nil, os.NewSyscallError(\"LookupTXT\", e)\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)\n@@ -163,7 +163,7 @@ func LookupAddr(addr string) (name []string, err error) {\n \t}\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(arpa, syscall.DNS_TYPE_PTR, 0, nil, &r, nil)\n-\tif e != 0 {\n+\tif e != nil {\n \t\treturn nil, os.NewSyscallError(\"LookupAddr\", e)\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)"}, {"sha": "a52a86e414ea02ebaf0fb95c90e495146e17f358", "filename": "libgo/go/net/rpc/server_test.go", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Frpc%2Fserver_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Frpc%2Fserver_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fserver_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -27,7 +27,6 @@ var (\n )\n \n const (\n-\tsecond      = 1e9\n \tnewHttpPath = \"/foo\"\n )\n \n@@ -388,12 +387,12 @@ func (WriteFailCodec) WriteRequest(*Request, interface{}) error {\n }\n \n func (WriteFailCodec) ReadResponseHeader(*Response) error {\n-\ttime.Sleep(120e9)\n+\ttime.Sleep(120 * time.Second)\n \tpanic(\"unreachable\")\n }\n \n func (WriteFailCodec) ReadResponseBody(interface{}) error {\n-\ttime.Sleep(120e9)\n+\ttime.Sleep(120 * time.Second)\n \tpanic(\"unreachable\")\n }\n \n@@ -413,7 +412,7 @@ func TestSendDeadlock(t *testing.T) {\n \tselect {\n \tcase <-done:\n \t\treturn\n-\tcase <-time.After(5e9):\n+\tcase <-time.After(5 * time.Second):\n \t\tt.Fatal(\"deadlock\")\n \t}\n }"}, {"sha": "6f0cde0d2833d43a0ebf963b608923d05371e444", "filename": "libgo/go/net/smtp/auth.go", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fsmtp%2Fauth.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fsmtp%2Fauth.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsmtp%2Fauth.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -4,7 +4,11 @@\n \n package smtp\n \n-import \"errors\"\n+import (\n+\t\"crypto/hmac\"\n+\t\"errors\"\n+\t\"fmt\"\n+)\n \n // Auth is implemented by an SMTP authentication mechanism.\n type Auth interface {\n@@ -65,3 +69,29 @@ func (a *plainAuth) Next(fromServer []byte, more bool) ([]byte, error) {\n \t}\n \treturn nil, nil\n }\n+\n+type cramMD5Auth struct {\n+\tusername, secret string\n+}\n+\n+// CRAMMD5Auth returns an Auth that implements the CRAM-MD5 authentication\n+// mechanism as defined in RFC 2195.\n+// The returned Auth uses the given username and secret to authenticate\n+// to the server using the challenge-response mechanism.\n+func CRAMMD5Auth(username, secret string) Auth {\n+\treturn &cramMD5Auth{username, secret}\n+}\n+\n+func (a *cramMD5Auth) Start(server *ServerInfo) (string, []byte, error) {\n+\treturn \"CRAM-MD5\", nil, nil\n+}\n+\n+func (a *cramMD5Auth) Next(fromServer []byte, more bool) ([]byte, error) {\n+\tif more {\n+\t\td := hmac.NewMD5([]byte(a.secret))\n+\t\td.Write(fromServer)\n+\t\ts := make([]byte, 0, d.Size())\n+\t\treturn []byte(fmt.Sprintf(\"%s %x\", a.username, d.Sum(s))), nil\n+\t}\n+\treturn nil, nil\n+}"}, {"sha": "ce88782053172cae38fdb5a7b9843f4a74e08a85", "filename": "libgo/go/net/smtp/smtp_test.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsmtp%2Fsmtp_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -23,6 +23,7 @@ type authTest struct {\n var authTests = []authTest{\n \t{PlainAuth(\"\", \"user\", \"pass\", \"testserver\"), []string{}, \"PLAIN\", []string{\"\\x00user\\x00pass\"}},\n \t{PlainAuth(\"foo\", \"bar\", \"baz\", \"testserver\"), []string{}, \"PLAIN\", []string{\"foo\\x00bar\\x00baz\"}},\n+\t{CRAMMD5Auth(\"user\", \"pass\"), []string{\"<123456.1322876914@testserver>\"}, \"CRAM-MD5\", []string{\"\", \"user 287eb355114cf5c471c26a875f1ca4ae\"}},\n }\n \n func TestAuth(t *testing.T) {"}, {"sha": "710b63ac50dbd256adf831a5bd9f5dce62ad53a0", "filename": "libgo/go/old/netchan/common.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fold%2Fnetchan%2Fcommon.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fold%2Fnetchan%2Fcommon.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fold%2Fnetchan%2Fcommon.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -155,7 +155,7 @@ func (cs *clientSet) drain(timeout time.Duration) error {\n \t\tif timeout > 0 && time.Now().After(deadline) {\n \t\t\treturn errors.New(\"timeout\")\n \t\t}\n-\t\ttime.Sleep(100 * 1e6) // 100 milliseconds\n+\t\ttime.Sleep(100 * time.Millisecond)\n \t}\n \treturn nil\n }\n@@ -188,7 +188,7 @@ func (cs *clientSet) sync(timeout time.Duration) error {\n \t\tif timeout > 0 && time.Now().After(deadline) {\n \t\t\treturn errors.New(\"timeout\")\n \t\t}\n-\t\ttime.Sleep(100 * 1e6) // 100 milliseconds\n+\t\ttime.Sleep(100 * time.Millisecond)\n \t}\n \treturn nil\n }"}, {"sha": "50abaa9fa5a577bee9e1e21f1aa5345ba21a2d1b", "filename": "libgo/go/old/netchan/import.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fold%2Fnetchan%2Fimport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fold%2Fnetchan%2Fimport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fold%2Fnetchan%2Fimport.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -281,7 +281,7 @@ func (imp *Importer) Drain(timeout int64) error {\n \t\tif timeout > 0 && time.Now().After(deadline) {\n \t\t\treturn errors.New(\"timeout\")\n \t\t}\n-\t\ttime.Sleep(100 * 1e6)\n+\t\ttime.Sleep(100 * time.Millisecond)\n \t}\n \treturn nil\n }"}, {"sha": "53f0f78776566958c71ab3994cf5124603cf8e6b", "filename": "libgo/go/old/netchan/netchan_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fold%2Fnetchan%2Fnetchan_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fold%2Fnetchan%2Fnetchan_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fold%2Fnetchan%2Fnetchan_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -151,7 +151,7 @@ func TestErrorForIllegalChannel(t *testing.T) {\n \t// Expect an error now.  Start a timeout.\n \ttimeout := make(chan bool, 1) // buffered so closure will not hang around.\n \tgo func() {\n-\t\ttime.Sleep(10e9) // very long, to give even really slow machines a chance.\n+\t\ttime.Sleep(10 * time.Second) // very long, to give even really slow machines a chance.\n \t\ttimeout <- true\n \t}()\n \tselect {\n@@ -300,7 +300,7 @@ func TestIndependentSends(t *testing.T) {\n \tgo importReceive(imp, t, done)\n \n \t// wait for export side to try to deliver some values.\n-\ttime.Sleep(0.25e9)\n+\ttime.Sleep(250 * time.Millisecond)\n \n \tctlch := make(chan int)\n \tif err := imp.ImportNValues(\"exportedCtl\", ctlch, Send, 1, 1); err != nil {\n@@ -409,7 +409,7 @@ func TestImportFlowControl(t *testing.T) {\n \n func testFlow(sendDone chan bool, ch <-chan int, N int, t *testing.T) {\n \tgo func() {\n-\t\ttime.Sleep(0.5e9)\n+\t\ttime.Sleep(500 * time.Millisecond)\n \t\tsendDone <- false\n \t}()\n "}, {"sha": "78228205f47871c596ba7ec5e014441ba46421c4", "filename": "libgo/go/os/dir_plan9.go", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Fdir_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Fdir_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_plan9.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -64,9 +64,7 @@ func (file *File) Readdir(n int) (fi []FileInfo, err error) {\n \t\tif e != nil {\n \t\t\treturn result, &PathError{\"readdir\", file.name, e}\n \t\t}\n-\t\tvar f FileInfo\n-\t\tfileInfoFromStat(&f, dir)\n-\t\tresult = append(result, f)\n+\t\tresult = append(result, fileInfoFromStat(dir))\n \n \t\td.bufp += int(m)\n \t\tn--\n@@ -94,7 +92,7 @@ func (file *File) Readdirnames(n int) (names []string, err error) {\n \tfi, err := file.Readdir(n)\n \tnames = make([]string, len(fi))\n \tfor i := range fi {\n-\t\tnames[i] = fi[i].Name\n+\t\tnames[i] = fi[i].Name()\n \t}\n \treturn\n }"}, {"sha": "d88cd0df959a0b2a024053c52aef231c4d3bab1e", "filename": "libgo/go/os/exec/lp_plan9.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Fexec%2Flp_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Fexec%2Flp_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fexec%2Flp_plan9.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -18,7 +18,7 @@ func findExecutable(file string) error {\n \tif err != nil {\n \t\treturn err\n \t}\n-\tif d.IsRegular() && d.Permission()&0111 != 0 {\n+\tif m := d.Mode(); !m.IsDir() && m&0111 != 0 {\n \t\treturn nil\n \t}\n \treturn os.EPERM"}, {"sha": "aa8f3934577406aaf6a55b58efbabd07d492bc94", "filename": "libgo/go/os/file_plan9.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Ffile_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Ffile_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Ffile_plan9.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -140,12 +140,12 @@ func (file *file) close() error {\n \n // Stat returns the FileInfo structure describing file.\n // It returns the FileInfo and an error, if any.\n-func (f *File) Stat() (fi *FileInfo, err error) {\n+func (f *File) Stat() (FileInfo, error) {\n \td, err := dirstat(f)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\treturn fileInfoFromStat(new(FileInfo), d), err\n+\treturn fileInfoFromStat(d), nil\n }\n \n // Truncate changes the size of the file."}, {"sha": "8d3b8a84d5c5b80557785d755b63f13c6de45dc9", "filename": "libgo/go/os/stat_plan9.go", "status": "modified", "additions": 57, "deletions": 48, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Fstat_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fos%2Fstat_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fstat_plan9.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -4,87 +4,96 @@\n \n package os\n \n-import \"syscall\"\n-\n-func fileInfoFromStat(fi *FileInfo, d *Dir) *FileInfo {\n-\tfi.Dev = uint64(d.Qid.Vers) | uint64(d.Qid.Type<<32)\n-\tfi.Ino = d.Qid.Path\n+import (\n+\t\"syscall\"\n+\t\"time\"\n+)\n+\n+func sameFile(fs1, fs2 *FileStat) bool {\n+\ta := fs1.Sys.(*Dir)\n+\tb := fs2.Sys.(*Dir)\n+\treturn a.Qid.Path == b.Qid.Path && a.Type == b.Type && a.Dev == b.Dev\n+}\n \n-\tfi.Mode = uint32(d.Mode) & 0777\n-\tif (d.Mode & syscall.DMDIR) == syscall.DMDIR {\n-\t\tfi.Mode |= syscall.S_IFDIR\n-\t} else {\n-\t\tfi.Mode |= syscall.S_IFREG\n+func fileInfoFromStat(d *Dir) FileInfo {\n+\tfs := &FileStat{\n+\t\tname:    d.Name,\n+\t\tsize:    int64(d.Length),\n+\t\tmodTime: time.Unix(int64(d.Mtime), 0),\n+\t\tSys:     d,\n \t}\n-\n-\tfi.Size = int64(d.Length)\n-\tfi.Atime_ns = 1e9 * int64(d.Atime)\n-\tfi.Mtime_ns = 1e9 * int64(d.Mtime)\n-\tfi.Name = d.Name\n-\tfi.FollowedSymlink = false\n-\treturn fi\n+\tfs.mode = FileMode(d.Mode & 0777)\n+\tif d.Mode&syscall.DMDIR != 0 {\n+\t\tfs.mode |= ModeDir\n+\t}\n+\tif d.Mode&syscall.DMAPPEND != 0 {\n+\t\tfs.mode |= ModeAppend\n+\t}\n+\tif d.Mode&syscall.DMEXCL != 0 {\n+\t\tfs.mode |= ModeExclusive\n+\t}\n+\tif d.Mode&syscall.DMTMP != 0 {\n+\t\tfs.mode |= ModeTemporary\n+\t}\n+\treturn fs\n }\n \n // arg is an open *File or a path string. \n func dirstat(arg interface{}) (d *Dir, err error) {\n \tvar name string\n-\tnd := syscall.STATFIXLEN + 16*4\n \n-\tfor i := 0; i < 2; i++ { /* should work by the second try */\n-\t\tbuf := make([]byte, nd)\n+\t// This is big enough for most stat messages\n+\t// and rounded to a multiple of 128 bytes.\n+\tsize := (syscall.STATFIXLEN + 16*4 + 128) &^ 128\n \n-\t\tvar n int\n-\t\tvar e error\n+\tfor i := 0; i < 2; i++ {\n+\t\tbuf := make([]byte, size)\n \n-\t\tswitch syscallArg := arg.(type) {\n+\t\tvar n int\n+\t\tswitch a := arg.(type) {\n \t\tcase *File:\n-\t\t\tname = syscallArg.name\n-\t\t\tn, e = syscall.Fstat(syscallArg.fd, buf)\n+\t\t\tname = a.name\n+\t\t\tn, err = syscall.Fstat(a.fd, buf)\n \t\tcase string:\n-\t\t\tname = syscallArg\n-\t\t\tn, e = syscall.Stat(name, buf)\n+\t\t\tname = a\n+\t\t\tn, err = syscall.Stat(name, buf)\n \t\t}\n-\n-\t\tif e != nil {\n-\t\t\treturn nil, &PathError{\"stat\", name, e}\n+\t\tif err != nil {\n+\t\t\treturn nil, &PathError{\"stat\", name, err}\n \t\t}\n-\n \t\tif n < syscall.STATFIXLEN {\n \t\t\treturn nil, &PathError{\"stat\", name, Eshortstat}\n \t\t}\n \n-\t\tntmp, _ := gbit16(buf)\n-\t\tnd = int(ntmp)\n+\t\t// Pull the real size out of the stat message.\n+\t\ts, _ := gbit16(buf)\n+\t\tsize = int(s)\n \n-\t\tif nd <= n {\n-\t\t\td, e := UnmarshalDir(buf[:n])\n-\n-\t\t\tif e != nil {\n-\t\t\t\treturn nil, &PathError{\"stat\", name, e}\n+\t\t// If the stat message is larger than our buffer we will\n+\t\t// go around the loop and allocate one that is big enough.\n+\t\tif size <= n {\n+\t\t\td, err = UnmarshalDir(buf[:n])\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, &PathError{\"stat\", name, err}\n \t\t\t}\n-\t\t\treturn d, e\n+\t\t\treturn\n \t\t}\n \t}\n-\n \treturn nil, &PathError{\"stat\", name, Ebadstat}\n }\n \n // Stat returns a FileInfo structure describing the named file and an error, if any.\n-func Stat(name string) (fi *FileInfo, err error) {\n+func Stat(name string) (FileInfo, error) {\n \td, err := dirstat(name)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\treturn fileInfoFromStat(new(FileInfo), d), err\n+\treturn fileInfoFromStat(d), nil\n }\n \n // Lstat returns the FileInfo structure describing the named file and an\n // error, if any.  If the file is a symbolic link (though Plan 9 does not have symbolic links), \n // the returned FileInfo describes the symbolic link.  Lstat makes no attempt to follow the link.\n-func Lstat(name string) (fi *FileInfo, err error) {\n-\td, err := dirstat(name)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\treturn fileInfoFromStat(new(FileInfo), d), err\n+func Lstat(name string) (FileInfo, error) {\n+\treturn Stat(name)\n }"}, {"sha": "8e28a53f269c26c9f8544cd7abf6d9597b236791", "filename": "libgo/go/reflect/all_test.go", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Freflect%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Freflect%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fall_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -1561,14 +1561,26 @@ func TestSmallNegativeInt(t *testing.T) {\n func TestSlice(t *testing.T) {\n \txs := []int{1, 2, 3, 4, 5, 6, 7, 8}\n \tv := ValueOf(xs).Slice(3, 5).Interface().([]int)\n-\tif len(v) != 2 || v[0] != 4 || v[1] != 5 {\n-\t\tt.Errorf(\"xs.Slice(3, 5) = %v\", v)\n+\tif len(v) != 2 {\n+\t\tt.Errorf(\"len(xs.Slice(3, 5)) = %d\", len(v))\n+\t}\n+\tif cap(v) != 5 {\n+\t\tt.Errorf(\"cap(xs.Slice(3, 5)) = %d\", cap(v))\n+\t}\n+\tif !DeepEqual(v[0:5], xs[3:]) {\n+\t\tt.Errorf(\"xs.Slice(3, 5)[0:5] = %v\", v[0:5])\n \t}\n \n-\txa := [7]int{10, 20, 30, 40, 50, 60, 70}\n+\txa := [8]int{10, 20, 30, 40, 50, 60, 70, 80}\n \tv = ValueOf(&xa).Elem().Slice(2, 5).Interface().([]int)\n-\tif len(v) != 3 || v[0] != 30 || v[1] != 40 || v[2] != 50 {\n-\t\tt.Errorf(\"xa.Slice(2, 5) = %v\", v)\n+\tif len(v) != 3 {\n+\t\tt.Errorf(\"len(xa.Slice(2, 5)) = %d\", len(v))\n+\t}\n+\tif cap(v) != 6 {\n+\t\tt.Errorf(\"cap(xa.Slice(2, 5)) = %d\", cap(v))\n+\t}\n+\tif !DeepEqual(v[0:6], xa[2:]) {\n+\t\tt.Errorf(\"xs.Slice(2, 5)[0:6] = %v\", v[0:6])\n \t}\n }\n "}, {"sha": "f9a3c8a23c5cc71dee35880b2ad3d5b335542e75", "filename": "libgo/go/reflect/value.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Freflect%2Fvalue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Freflect%2Fvalue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fvalue.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -1349,7 +1349,7 @@ func (v Value) Slice(beg, end int) Value {\n \ts := (*SliceHeader)(unsafe.Pointer(&x))\n \ts.Data = uintptr(base) + uintptr(beg)*toCommonType(typ.elem).Size()\n \ts.Len = end - beg\n-\ts.Cap = end - beg\n+\ts.Cap = cap - beg\n \n \tfl := v.flag&flagRO | flagIndir | flag(Slice)<<flagKindShift\n \treturn Value{typ.common(), unsafe.Pointer(&x), fl}"}, {"sha": "e16a1b5b9e2f366bad264146ca2cc0ab9e3aae05", "filename": "libgo/go/regexp/exec.go", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Fexec.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -1,6 +1,9 @@\n package regexp\n \n-import \"regexp/syntax\"\n+import (\n+\t\"io\"\n+\t\"regexp/syntax\"\n+)\n \n // A queue is a 'sparse array' holding pending threads of execution.\n // See http://research.swtch.com/2008/03/using-uninitialized-memory-for-fun-and.html\n@@ -34,6 +37,28 @@ type machine struct {\n \tpool     []*thread    // pool of available threads\n \tmatched  bool         // whether a match was found\n \tmatchcap []int        // capture information for the match\n+\n+\t// cached inputs, to avoid allocation\n+\tinputBytes  inputBytes\n+\tinputString inputString\n+\tinputReader inputReader\n+}\n+\n+func (m *machine) newInputBytes(b []byte) input {\n+\tm.inputBytes.str = b\n+\treturn &m.inputBytes\n+}\n+\n+func (m *machine) newInputString(s string) input {\n+\tm.inputString.str = s\n+\treturn &m.inputString\n+}\n+\n+func (m *machine) newInputReader(r io.RuneReader) input {\n+\tm.inputReader.r = r\n+\tm.inputReader.atEOT = false\n+\tm.inputReader.pos = 0\n+\treturn &m.inputReader\n }\n \n // progMachine returns a new machine running the prog p.\n@@ -74,6 +99,9 @@ func (m *machine) alloc(i *syntax.Inst) *thread {\n \n // free returns t to the free pool.\n func (m *machine) free(t *thread) {\n+\tm.inputBytes.str = nil\n+\tm.inputString.str = \"\"\n+\tm.inputReader.r = nil\n \tm.pool = append(m.pool, t)\n }\n \n@@ -287,8 +315,16 @@ var empty = make([]int, 0)\n \n // doExecute finds the leftmost match in the input and returns\n // the position of its subexpressions.\n-func (re *Regexp) doExecute(i input, pos int, ncap int) []int {\n+func (re *Regexp) doExecute(r io.RuneReader, b []byte, s string, pos int, ncap int) []int {\n \tm := re.get()\n+\tvar i input\n+\tif r != nil {\n+\t\ti = m.newInputReader(r)\n+\t} else if b != nil {\n+\t\ti = m.newInputBytes(b)\n+\t} else {\n+\t\ti = m.newInputString(s)\n+\t}\n \tm.init(ncap)\n \tif !m.match(i, pos) {\n \t\tre.put(m)"}, {"sha": "312bf0275fd49de4940b01f6eb2399bf4c3d43d8", "filename": "libgo/go/regexp/exec_test.go", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fexec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fexec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Fexec_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -10,7 +10,6 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"math/rand\"\n-\told \"old/regexp\"\n \t\"os\"\n \t\"path/filepath\"\n \t\"regexp/syntax\"\n@@ -679,18 +678,6 @@ func benchmark(b *testing.B, re string, n int) {\n \t}\n }\n \n-func benchold(b *testing.B, re string, n int) {\n-\tr := old.MustCompile(re)\n-\tt := makeText(n)\n-\tb.ResetTimer()\n-\tb.SetBytes(int64(n))\n-\tfor i := 0; i < b.N; i++ {\n-\t\tif r.Match(t) {\n-\t\t\tpanic(\"match!\")\n-\t\t}\n-\t}\n-}\n-\n const (\n \teasy0  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ$\"\n \teasy1  = \"A[AB]B[BC]C[CD]D[DE]E[EF]F[FG]G[GH]H[HI]I[IJ]J$\"\n@@ -700,35 +687,23 @@ const (\n \t\t\"(N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)$\"\n )\n \n-func BenchmarkMatchEasy0_1K(b *testing.B)       { benchmark(b, easy0, 1<<10) }\n-func BenchmarkMatchEasy0_1K_Old(b *testing.B)   { benchold(b, easy0, 1<<10) }\n-func BenchmarkMatchEasy0_1M(b *testing.B)       { benchmark(b, easy0, 1<<20) }\n-func BenchmarkMatchEasy0_1M_Old(b *testing.B)   { benchold(b, easy0, 1<<20) }\n-func BenchmarkMatchEasy0_32K(b *testing.B)      { benchmark(b, easy0, 32<<10) }\n-func BenchmarkMatchEasy0_32K_Old(b *testing.B)  { benchold(b, easy0, 32<<10) }\n-func BenchmarkMatchEasy0_32M(b *testing.B)      { benchmark(b, easy0, 32<<20) }\n-func BenchmarkMatchEasy0_32M_Old(b *testing.B)  { benchold(b, easy0, 32<<20) }\n-func BenchmarkMatchEasy1_1K(b *testing.B)       { benchmark(b, easy1, 1<<10) }\n-func BenchmarkMatchEasy1_1K_Old(b *testing.B)   { benchold(b, easy1, 1<<10) }\n-func BenchmarkMatchEasy1_1M(b *testing.B)       { benchmark(b, easy1, 1<<20) }\n-func BenchmarkMatchEasy1_1M_Old(b *testing.B)   { benchold(b, easy1, 1<<20) }\n-func BenchmarkMatchEasy1_32K(b *testing.B)      { benchmark(b, easy1, 32<<10) }\n-func BenchmarkMatchEasy1_32K_Old(b *testing.B)  { benchold(b, easy1, 32<<10) }\n-func BenchmarkMatchEasy1_32M(b *testing.B)      { benchmark(b, easy1, 32<<20) }\n-func BenchmarkMatchEasy1_32M_Old(b *testing.B)  { benchold(b, easy1, 32<<20) }\n-func BenchmarkMatchMedium_1K(b *testing.B)      { benchmark(b, medium, 1<<10) }\n-func BenchmarkMatchMedium_1K_Old(b *testing.B)  { benchold(b, medium, 1<<10) }\n-func BenchmarkMatchMedium_1M(b *testing.B)      { benchmark(b, medium, 1<<20) }\n-func BenchmarkMatchMedium_1M_Old(b *testing.B)  { benchold(b, medium, 1<<20) }\n-func BenchmarkMatchMedium_32K(b *testing.B)     { benchmark(b, medium, 32<<10) }\n-func BenchmarkMatchMedium_32K_Old(b *testing.B) { benchold(b, medium, 32<<10) }\n-func BenchmarkMatchMedium_32M(b *testing.B)     { benchmark(b, medium, 32<<20) }\n-func BenchmarkMatchMedium_32M_Old(b *testing.B) { benchold(b, medium, 32<<20) }\n-func BenchmarkMatchHard_1K(b *testing.B)        { benchmark(b, hard, 1<<10) }\n-func BenchmarkMatchHard_1K_Old(b *testing.B)    { benchold(b, hard, 1<<10) }\n-func BenchmarkMatchHard_1M(b *testing.B)        { benchmark(b, hard, 1<<20) }\n-func BenchmarkMatchHard_1M_Old(b *testing.B)    { benchold(b, hard, 1<<20) }\n-func BenchmarkMatchHard_32K(b *testing.B)       { benchmark(b, hard, 32<<10) }\n-func BenchmarkMatchHard_32K_Old(b *testing.B)   { benchold(b, hard, 32<<10) }\n-func BenchmarkMatchHard_32M(b *testing.B)       { benchmark(b, hard, 32<<20) }\n-func BenchmarkMatchHard_32M_Old(b *testing.B)   { benchold(b, hard, 32<<20) }\n+func BenchmarkMatchEasy0_32(b *testing.B)   { benchmark(b, easy0, 32<<0) }\n+func BenchmarkMatchEasy0_1K(b *testing.B)   { benchmark(b, easy0, 1<<10) }\n+func BenchmarkMatchEasy0_32K(b *testing.B)  { benchmark(b, easy0, 32<<10) }\n+func BenchmarkMatchEasy0_1M(b *testing.B)   { benchmark(b, easy0, 1<<20) }\n+func BenchmarkMatchEasy0_32M(b *testing.B)  { benchmark(b, easy0, 32<<20) }\n+func BenchmarkMatchEasy1_32(b *testing.B)   { benchmark(b, easy1, 32<<0) }\n+func BenchmarkMatchEasy1_1K(b *testing.B)   { benchmark(b, easy1, 1<<10) }\n+func BenchmarkMatchEasy1_32K(b *testing.B)  { benchmark(b, easy1, 32<<10) }\n+func BenchmarkMatchEasy1_1M(b *testing.B)   { benchmark(b, easy1, 1<<20) }\n+func BenchmarkMatchEasy1_32M(b *testing.B)  { benchmark(b, easy1, 32<<20) }\n+func BenchmarkMatchMedium_32(b *testing.B)  { benchmark(b, medium, 1<<0) }\n+func BenchmarkMatchMedium_1K(b *testing.B)  { benchmark(b, medium, 1<<10) }\n+func BenchmarkMatchMedium_32K(b *testing.B) { benchmark(b, medium, 32<<10) }\n+func BenchmarkMatchMedium_1M(b *testing.B)  { benchmark(b, medium, 1<<20) }\n+func BenchmarkMatchMedium_32M(b *testing.B) { benchmark(b, medium, 32<<20) }\n+func BenchmarkMatchHard_32(b *testing.B)    { benchmark(b, hard, 32<<0) }\n+func BenchmarkMatchHard_1K(b *testing.B)    { benchmark(b, hard, 1<<10) }\n+func BenchmarkMatchHard_32K(b *testing.B)   { benchmark(b, hard, 32<<10) }\n+func BenchmarkMatchHard_1M(b *testing.B)    { benchmark(b, hard, 1<<20) }\n+func BenchmarkMatchHard_32M(b *testing.B)   { benchmark(b, hard, 32<<20) }"}, {"sha": "b0c6a0b1a144db27a689e3dc1ab60e9562ccecea", "filename": "libgo/go/regexp/regexp.go", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fregexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fregexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Fregexp.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -240,10 +240,6 @@ type inputString struct {\n \tstr string\n }\n \n-func newInputString(str string) *inputString {\n-\treturn &inputString{str: str}\n-}\n-\n func (i *inputString) step(pos int) (rune, int) {\n \tif pos < len(i.str) {\n \t\tc := i.str[pos]\n@@ -283,10 +279,6 @@ type inputBytes struct {\n \tstr []byte\n }\n \n-func newInputBytes(str []byte) *inputBytes {\n-\treturn &inputBytes{str: str}\n-}\n-\n func (i *inputBytes) step(pos int) (rune, int) {\n \tif pos < len(i.str) {\n \t\tc := i.str[pos]\n@@ -328,10 +320,6 @@ type inputReader struct {\n \tpos   int\n }\n \n-func newInputReader(r io.RuneReader) *inputReader {\n-\treturn &inputReader{r: r}\n-}\n-\n func (i *inputReader) step(pos int) (rune, int) {\n \tif !i.atEOT && pos != i.pos {\n \t\treturn endOfText, 0\n@@ -373,19 +361,19 @@ func (re *Regexp) LiteralPrefix() (prefix string, complete bool) {\n // RuneReader.  The return value is a boolean: true for match, false for no\n // match.\n func (re *Regexp) MatchReader(r io.RuneReader) bool {\n-\treturn re.doExecute(newInputReader(r), 0, 0) != nil\n+\treturn re.doExecute(r, nil, \"\", 0, 0) != nil\n }\n \n // MatchString returns whether the Regexp matches the string s.\n // The return value is a boolean: true for match, false for no match.\n func (re *Regexp) MatchString(s string) bool {\n-\treturn re.doExecute(newInputString(s), 0, 0) != nil\n+\treturn re.doExecute(nil, nil, s, 0, 0) != nil\n }\n \n // Match returns whether the Regexp matches the byte slice b.\n // The return value is a boolean: true for match, false for no match.\n func (re *Regexp) Match(b []byte) bool {\n-\treturn re.doExecute(newInputBytes(b), 0, 0) != nil\n+\treturn re.doExecute(nil, b, \"\", 0, 0) != nil\n }\n \n // MatchReader checks whether a textual regular expression matches the text\n@@ -437,7 +425,7 @@ func (re *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) str\n \tsearchPos := 0    // position where we next look for a match\n \tbuf := new(bytes.Buffer)\n \tfor searchPos <= len(src) {\n-\t\ta := re.doExecute(newInputString(src), searchPos, 2)\n+\t\ta := re.doExecute(nil, nil, src, searchPos, 2)\n \t\tif len(a) == 0 {\n \t\t\tbreak // no more matches\n \t\t}\n@@ -489,7 +477,7 @@ func (re *Regexp) ReplaceAllFunc(src []byte, repl func([]byte) []byte) []byte {\n \tsearchPos := 0    // position where we next look for a match\n \tbuf := new(bytes.Buffer)\n \tfor searchPos <= len(src) {\n-\t\ta := re.doExecute(newInputBytes(src), searchPos, 2)\n+\t\ta := re.doExecute(nil, src, \"\", searchPos, 2)\n \t\tif len(a) == 0 {\n \t\t\tbreak // no more matches\n \t\t}\n@@ -577,13 +565,7 @@ func (re *Regexp) allMatches(s string, b []byte, n int, deliver func([]int)) {\n \t}\n \n \tfor pos, i, prevMatchEnd := 0, 0, -1; i < n && pos <= end; {\n-\t\tvar in input\n-\t\tif b == nil {\n-\t\t\tin = newInputString(s)\n-\t\t} else {\n-\t\t\tin = newInputBytes(b)\n-\t\t}\n-\t\tmatches := re.doExecute(in, pos, re.prog.NumCap)\n+\t\tmatches := re.doExecute(nil, b, s, pos, re.prog.NumCap)\n \t\tif len(matches) == 0 {\n \t\t\tbreak\n \t\t}\n@@ -623,7 +605,7 @@ func (re *Regexp) allMatches(s string, b []byte, n int, deliver func([]int)) {\n // Find returns a slice holding the text of the leftmost match in b of the regular expression.\n // A return value of nil indicates no match.\n func (re *Regexp) Find(b []byte) []byte {\n-\ta := re.doExecute(newInputBytes(b), 0, 2)\n+\ta := re.doExecute(nil, b, \"\", 0, 2)\n \tif a == nil {\n \t\treturn nil\n \t}\n@@ -635,7 +617,7 @@ func (re *Regexp) Find(b []byte) []byte {\n // b[loc[0]:loc[1]].\n // A return value of nil indicates no match.\n func (re *Regexp) FindIndex(b []byte) (loc []int) {\n-\ta := re.doExecute(newInputBytes(b), 0, 2)\n+\ta := re.doExecute(nil, b, \"\", 0, 2)\n \tif a == nil {\n \t\treturn nil\n \t}\n@@ -648,7 +630,7 @@ func (re *Regexp) FindIndex(b []byte) (loc []int) {\n // an empty string.  Use FindStringIndex or FindStringSubmatch if it is\n // necessary to distinguish these cases.\n func (re *Regexp) FindString(s string) string {\n-\ta := re.doExecute(newInputString(s), 0, 2)\n+\ta := re.doExecute(nil, nil, s, 0, 2)\n \tif a == nil {\n \t\treturn \"\"\n \t}\n@@ -660,7 +642,7 @@ func (re *Regexp) FindString(s string) string {\n // itself is at s[loc[0]:loc[1]].\n // A return value of nil indicates no match.\n func (re *Regexp) FindStringIndex(s string) []int {\n-\ta := re.doExecute(newInputString(s), 0, 2)\n+\ta := re.doExecute(nil, nil, s, 0, 2)\n \tif a == nil {\n \t\treturn nil\n \t}\n@@ -672,7 +654,7 @@ func (re *Regexp) FindStringIndex(s string) []int {\n // the RuneReader.  The match itself is at s[loc[0]:loc[1]].  A return\n // value of nil indicates no match.\n func (re *Regexp) FindReaderIndex(r io.RuneReader) []int {\n-\ta := re.doExecute(newInputReader(r), 0, 2)\n+\ta := re.doExecute(r, nil, \"\", 0, 2)\n \tif a == nil {\n \t\treturn nil\n \t}\n@@ -685,7 +667,7 @@ func (re *Regexp) FindReaderIndex(r io.RuneReader) []int {\n // comment.\n // A return value of nil indicates no match.\n func (re *Regexp) FindSubmatch(b []byte) [][]byte {\n-\ta := re.doExecute(newInputBytes(b), 0, re.prog.NumCap)\n+\ta := re.doExecute(nil, b, \"\", 0, re.prog.NumCap)\n \tif a == nil {\n \t\treturn nil\n \t}\n@@ -704,7 +686,7 @@ func (re *Regexp) FindSubmatch(b []byte) [][]byte {\n // in the package comment.\n // A return value of nil indicates no match.\n func (re *Regexp) FindSubmatchIndex(b []byte) []int {\n-\treturn re.pad(re.doExecute(newInputBytes(b), 0, re.prog.NumCap))\n+\treturn re.pad(re.doExecute(nil, b, \"\", 0, re.prog.NumCap))\n }\n \n // FindStringSubmatch returns a slice of strings holding the text of the\n@@ -713,7 +695,7 @@ func (re *Regexp) FindSubmatchIndex(b []byte) []int {\n // package comment.\n // A return value of nil indicates no match.\n func (re *Regexp) FindStringSubmatch(s string) []string {\n-\ta := re.doExecute(newInputString(s), 0, re.prog.NumCap)\n+\ta := re.doExecute(nil, nil, s, 0, re.prog.NumCap)\n \tif a == nil {\n \t\treturn nil\n \t}\n@@ -732,7 +714,7 @@ func (re *Regexp) FindStringSubmatch(s string) []string {\n // 'Index' descriptions in the package comment.\n // A return value of nil indicates no match.\n func (re *Regexp) FindStringSubmatchIndex(s string) []int {\n-\treturn re.pad(re.doExecute(newInputString(s), 0, re.prog.NumCap))\n+\treturn re.pad(re.doExecute(nil, nil, s, 0, re.prog.NumCap))\n }\n \n // FindReaderSubmatchIndex returns a slice holding the index pairs\n@@ -741,7 +723,7 @@ func (re *Regexp) FindStringSubmatchIndex(s string) []int {\n // by the 'Submatch' and 'Index' descriptions in the package comment.  A\n // return value of nil indicates no match.\n func (re *Regexp) FindReaderSubmatchIndex(r io.RuneReader) []int {\n-\treturn re.pad(re.doExecute(newInputReader(r), 0, re.prog.NumCap))\n+\treturn re.pad(re.doExecute(r, nil, \"\", 0, re.prog.NumCap))\n }\n \n const startSize = 10 // The size at which to start a slice in the 'All' routines."}, {"sha": "ba641c1e6fd1100998bff98b04432ae67056118d", "filename": "libgo/go/regexp/syntax/parse.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fsyntax%2Fparse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fregexp%2Fsyntax%2Fparse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Fsyntax%2Fparse.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -1694,7 +1694,7 @@ func appendFoldedClass(r []rune, x []rune) []rune {\n // appendNegatedClass returns the result of appending the negation of the class x to the class r.\n // It assumes x is clean.\n func appendNegatedClass(r []rune, x []rune) []rune {\n-\tnextLo := rune('\\u0000')\n+\tnextLo := '\\u0000'\n \tfor i := 0; i < len(x); i += 2 {\n \t\tlo, hi := x[i], x[i+1]\n \t\tif nextLo <= lo-1 {\n@@ -1735,7 +1735,7 @@ func appendTable(r []rune, x *unicode.RangeTable) []rune {\n \n // appendNegatedTable returns the result of appending the negation of x to the class r.\n func appendNegatedTable(r []rune, x *unicode.RangeTable) []rune {\n-\tnextLo := rune('\\u0000') // lo end of next class to add\n+\tnextLo := '\\u0000' // lo end of next class to add\n \tfor _, xr := range x.R16 {\n \t\tlo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)\n \t\tif stride == 1 {\n@@ -1777,8 +1777,8 @@ func appendNegatedTable(r []rune, x *unicode.RangeTable) []rune {\n // negateClass overwrites r and returns r's negation.\n // It assumes the class r is already clean.\n func negateClass(r []rune) []rune {\n-\tnextLo := rune('\\u0000') // lo end of next class to add\n-\tw := 0                   // write index\n+\tnextLo := '\\u0000' // lo end of next class to add\n+\tw := 0             // write index\n \tfor i := 0; i < len(r); i += 2 {\n \t\tlo, hi := r[i], r[i+1]\n \t\tif nextLo <= lo-1 {"}, {"sha": "2224db7e13c2d5bd8d894d6212b7ee1ee383bf8d", "filename": "libgo/go/sort/example_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fsort%2Fexample_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fsort%2Fexample_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsort%2Fexample_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -11,7 +11,7 @@ import (\n \n // [1 2 3 4 5 6]\n func ExampleInts() {\n-\ts := []int{5, 2, 6, 3, 1, 4}\n+\ts := []int{5, 2, 6, 3, 1, 4} // unsorted\n \tsort.Ints(s)\n \tfmt.Println(s)\n }"}, {"sha": "d0cb097213fb838ea4b8db72c31e651f502188b9", "filename": "libgo/go/strconv/atob.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatob.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatob.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fatob.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -14,7 +14,7 @@ func ParseBool(str string) (value bool, err error) {\n \tcase \"0\", \"f\", \"F\", \"false\", \"FALSE\", \"False\":\n \t\treturn false, nil\n \t}\n-\treturn false, &NumError{str, ErrSyntax}\n+\treturn false, syntaxError(\"ParseBool\", str)\n }\n \n // FormatBool returns \"true\" or \"false\" according to the value of b"}, {"sha": "8bda89088bfed43079d1b0cba980596b907e56c1", "filename": "libgo/go/strconv/atof.go", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatof.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatof.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fatof.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -338,14 +338,16 @@ func (d *decimal) atof32() (f float32, ok bool) {\n \treturn\n }\n \n+const fnParseFloat = \"ParseFloat\"\n+\n func atof32(s string) (f float32, err error) {\n \tif val, ok := special(s); ok {\n \t\treturn float32(val), nil\n \t}\n \n \tvar d decimal\n \tif !d.set(s) {\n-\t\treturn 0, &NumError{s, ErrSyntax}\n+\t\treturn 0, syntaxError(fnParseFloat, s)\n \t}\n \tif optimize {\n \t\tif f, ok := d.atof32(); ok {\n@@ -355,7 +357,7 @@ func atof32(s string) (f float32, err error) {\n \tb, ovf := d.floatBits(&float32info)\n \tf = math.Float32frombits(uint32(b))\n \tif ovf {\n-\t\terr = &NumError{s, ErrRange}\n+\t\terr = rangeError(fnParseFloat, s)\n \t}\n \treturn f, err\n }\n@@ -367,7 +369,7 @@ func atof64(s string) (f float64, err error) {\n \n \tvar d decimal\n \tif !d.set(s) {\n-\t\treturn 0, &NumError{s, ErrSyntax}\n+\t\treturn 0, syntaxError(fnParseFloat, s)\n \t}\n \tif optimize {\n \t\tif f, ok := d.atof64(); ok {\n@@ -377,7 +379,7 @@ func atof64(s string) (f float64, err error) {\n \tb, ovf := d.floatBits(&float64info)\n \tf = math.Float64frombits(b)\n \tif ovf {\n-\t\terr = &NumError{s, ErrRange}\n+\t\terr = rangeError(fnParseFloat, s)\n \t}\n \treturn f, err\n }"}, {"sha": "4d5ce1714f4f7c7d3b11250106bee866b9cb8528", "filename": "libgo/go/strconv/atof_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatof_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatof_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fatof_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -119,7 +119,7 @@ func init() {\n \tfor i := range atoftests {\n \t\ttest := &atoftests[i]\n \t\tif test.err != nil {\n-\t\t\ttest.err = &NumError{test.in, test.err}\n+\t\t\ttest.err = &NumError{\"ParseFloat\", test.in, test.err}\n \t\t}\n \t}\n }"}, {"sha": "59ef264d17c0da3889f887e9c66904c5da43fdf5", "filename": "libgo/go/strconv/atoi.go", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatoi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatoi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fatoi.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -14,11 +14,22 @@ var ErrSyntax = errors.New(\"invalid syntax\")\n \n // A NumError records a failed conversion.\n type NumError struct {\n-\tNum string // the input\n-\tErr error  // the reason the conversion failed (ErrRange, ErrSyntax)\n+\tFunc string // the failing function (ParseBool, ParseInt, ParseUint, ParseFloat)\n+\tNum  string // the input\n+\tErr  error  // the reason the conversion failed (ErrRange, ErrSyntax)\n }\n \n-func (e *NumError) Error() string { return `parsing \"` + e.Num + `\": ` + e.Err.Error() }\n+func (e *NumError) Error() string {\n+\treturn \"strconv.\" + e.Func + \": \" + `parsing \"` + e.Num + `\": ` + e.Err.Error()\n+}\n+\n+func syntaxError(fn, str string) *NumError {\n+\treturn &NumError{fn, str, ErrSyntax}\n+}\n+\n+func rangeError(fn, str string) *NumError {\n+\treturn &NumError{fn, str, ErrRange}\n+}\n \n const intSize = 32 << uint(^uint(0)>>63)\n \n@@ -116,13 +127,13 @@ func ParseUint(s string, b int, bitSize int) (n uint64, err error) {\n \treturn n, nil\n \n Error:\n-\treturn n, &NumError{s0, err}\n+\treturn n, &NumError{\"ParseUint\", s0, err}\n }\n \n-// ParseInt interprets a string s in an arbitrary base b (2 to 36)\n-// and returns the corresponding value n.  If b == 0, the base\n-// is taken from the string prefix: base 16 for \"0x\", base 8 for \"0\",\n-// and base 10 otherwise.\n+// ParseInt interprets a string s in the given base (2 to 36) and\n+// returns the corresponding value i.  If base == 0, the base is\n+// implied by the string's prefix: base 16 for \"0x\", base 8 for\n+// \"0\", and base 10 otherwise.\n //\n // The bitSize argument specifies the integer type\n // that the result must fit into.  Bit sizes 0, 8, 16, 32, and 64\n@@ -134,13 +145,15 @@ Error:\n // to s cannot be represented by a signed integer of the\n // given size, err.Error = ErrRange.\n func ParseInt(s string, base int, bitSize int) (i int64, err error) {\n+\tconst fnParseInt = \"ParseInt\"\n+\n \tif bitSize == 0 {\n \t\tbitSize = int(IntSize)\n \t}\n \n \t// Empty string bad.\n \tif len(s) == 0 {\n-\t\treturn 0, &NumError{s, ErrSyntax}\n+\t\treturn 0, syntaxError(fnParseInt, s)\n \t}\n \n \t// Pick off leading sign.\n@@ -157,15 +170,16 @@ func ParseInt(s string, base int, bitSize int) (i int64, err error) {\n \tvar un uint64\n \tun, err = ParseUint(s, base, bitSize)\n \tif err != nil && err.(*NumError).Err != ErrRange {\n+\t\terr.(*NumError).Func = fnParseInt\n \t\terr.(*NumError).Num = s0\n \t\treturn 0, err\n \t}\n \tcutoff := uint64(1 << uint(bitSize-1))\n \tif !neg && un >= cutoff {\n-\t\treturn int64(cutoff - 1), &NumError{s0, ErrRange}\n+\t\treturn int64(cutoff - 1), rangeError(fnParseInt, s0)\n \t}\n \tif neg && un > cutoff {\n-\t\treturn -int64(cutoff), &NumError{s0, ErrRange}\n+\t\treturn -int64(cutoff), rangeError(fnParseInt, s0)\n \t}\n \tn := int64(un)\n \tif neg {"}, {"sha": "d0e7b61dba8c1cba5bc6bd6d592353ef4bc844f0", "filename": "libgo/go/strconv/atoi_test.go", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatoi_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fatoi_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fatoi_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -152,37 +152,37 @@ func init() {\n \tfor i := range atoui64tests {\n \t\ttest := &atoui64tests[i]\n \t\tif test.err != nil {\n-\t\t\ttest.err = &NumError{test.in, test.err}\n+\t\t\ttest.err = &NumError{\"ParseUint\", test.in, test.err}\n \t\t}\n \t}\n \tfor i := range btoui64tests {\n \t\ttest := &btoui64tests[i]\n \t\tif test.err != nil {\n-\t\t\ttest.err = &NumError{test.in, test.err}\n+\t\t\ttest.err = &NumError{\"ParseUint\", test.in, test.err}\n \t\t}\n \t}\n \tfor i := range atoi64tests {\n \t\ttest := &atoi64tests[i]\n \t\tif test.err != nil {\n-\t\t\ttest.err = &NumError{test.in, test.err}\n+\t\t\ttest.err = &NumError{\"ParseInt\", test.in, test.err}\n \t\t}\n \t}\n \tfor i := range btoi64tests {\n \t\ttest := &btoi64tests[i]\n \t\tif test.err != nil {\n-\t\t\ttest.err = &NumError{test.in, test.err}\n+\t\t\ttest.err = &NumError{\"ParseInt\", test.in, test.err}\n \t\t}\n \t}\n \tfor i := range atoui32tests {\n \t\ttest := &atoui32tests[i]\n \t\tif test.err != nil {\n-\t\t\ttest.err = &NumError{test.in, test.err}\n+\t\t\ttest.err = &NumError{\"ParseUint\", test.in, test.err}\n \t\t}\n \t}\n \tfor i := range atoi32tests {\n \t\ttest := &atoi32tests[i]\n \t\tif test.err != nil {\n-\t\t\ttest.err = &NumError{test.in, test.err}\n+\t\t\ttest.err = &NumError{\"ParseInt\", test.in, test.err}\n \t\t}\n \t}\n }"}, {"sha": "692e3e4087520ff28c8ac79b796b515a4abef4b0", "filename": "libgo/go/strconv/ftoa.go", "status": "modified", "additions": 78, "deletions": 82, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fftoa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fftoa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fftoa.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -45,34 +45,47 @@ var float64info = floatInfo{52, 11, -1023}\n // Ftoa32(f) is not the same as Ftoa64(float32(f)),\n // because correct rounding and the number of digits\n // needed to identify f depend on the precision of the representation.\n-func FormatFloat(f float64, fmt byte, prec int, n int) string {\n-\tif n == 32 {\n-\t\treturn genericFtoa(uint64(math.Float32bits(float32(f))), fmt, prec, &float32info)\n-\t}\n-\treturn genericFtoa(math.Float64bits(f), fmt, prec, &float64info)\n+func FormatFloat(f float64, fmt byte, prec, bitSize int) string {\n+\treturn string(genericFtoa(make([]byte, 0, max(prec+4, 24)), f, fmt, prec, bitSize))\n }\n \n // AppendFloat appends the string form of the floating-point number f,\n // as generated by FormatFloat, to dst and returns the extended buffer.\n-func AppendFloat(dst []byte, f float64, fmt byte, prec int, n int) []byte {\n-\treturn append(dst, FormatFloat(f, fmt, prec, n)...)\n+func AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte {\n+\treturn genericFtoa(dst, f, fmt, prec, bitSize)\n }\n \n-func genericFtoa(bits uint64, fmt byte, prec int, flt *floatInfo) string {\n+func genericFtoa(dst []byte, val float64, fmt byte, prec, bitSize int) []byte {\n+\tvar bits uint64\n+\tvar flt *floatInfo\n+\tswitch bitSize {\n+\tcase 32:\n+\t\tbits = uint64(math.Float32bits(float32(val)))\n+\t\tflt = &float32info\n+\tcase 64:\n+\t\tbits = math.Float64bits(val)\n+\t\tflt = &float64info\n+\tdefault:\n+\t\tpanic(\"strconv: illegal AppendFloat/FormatFloat bitSize\")\n+\t}\n+\n \tneg := bits>>(flt.expbits+flt.mantbits) != 0\n \texp := int(bits>>flt.mantbits) & (1<<flt.expbits - 1)\n \tmant := bits & (uint64(1)<<flt.mantbits - 1)\n \n \tswitch exp {\n \tcase 1<<flt.expbits - 1:\n \t\t// Inf, NaN\n-\t\tif mant != 0 {\n-\t\t\treturn \"NaN\"\n-\t\t}\n-\t\tif neg {\n-\t\t\treturn \"-Inf\"\n+\t\tvar s string\n+\t\tswitch {\n+\t\tcase mant != 0:\n+\t\t\ts = \"NaN\"\n+\t\tcase neg:\n+\t\t\ts = \"-Inf\"\n+\t\tdefault:\n+\t\t\ts = \"+Inf\"\n \t\t}\n-\t\treturn \"+Inf\"\n+\t\treturn append(dst, s...)\n \n \tcase 0:\n \t\t// denormalized\n@@ -86,7 +99,7 @@ func genericFtoa(bits uint64, fmt byte, prec int, flt *floatInfo) string {\n \n \t// Pick off easy binary format.\n \tif fmt == 'b' {\n-\t\treturn fmtB(neg, mant, exp, flt)\n+\t\treturn fmtB(dst, neg, mant, exp, flt)\n \t}\n \n \t// Create exact decimal representation.\n@@ -127,9 +140,9 @@ func genericFtoa(bits uint64, fmt byte, prec int, flt *floatInfo) string {\n \n \tswitch fmt {\n \tcase 'e', 'E':\n-\t\treturn fmtE(neg, d, prec, fmt)\n+\t\treturn fmtE(dst, neg, d, prec, fmt)\n \tcase 'f':\n-\t\treturn fmtF(neg, d, prec)\n+\t\treturn fmtF(dst, neg, d, prec)\n \tcase 'g', 'G':\n \t\t// trailing fractional zeros in 'e' form will be trimmed.\n \t\teprec := prec\n@@ -147,15 +160,16 @@ func genericFtoa(bits uint64, fmt byte, prec int, flt *floatInfo) string {\n \t\t\tif prec > d.nd {\n \t\t\t\tprec = d.nd\n \t\t\t}\n-\t\t\treturn fmtE(neg, d, prec-1, fmt+'e'-'g')\n+\t\t\treturn fmtE(dst, neg, d, prec-1, fmt+'e'-'g')\n \t\t}\n \t\tif prec > d.dp {\n \t\t\tprec = d.nd\n \t\t}\n-\t\treturn fmtF(neg, d, max(prec-d.dp, 0))\n+\t\treturn fmtF(dst, neg, d, max(prec-d.dp, 0))\n \t}\n \n-\treturn \"%\" + string(fmt)\n+\t// unknown format\n+\treturn append(dst, '%', fmt)\n }\n \n // Round d (= mant * 2^exp) to the shortest number of digits\n@@ -250,121 +264,103 @@ func roundShortest(d *decimal, mant uint64, exp int, flt *floatInfo) {\n }\n \n // %e: -d.ddddde\u00b1dd\n-func fmtE(neg bool, d *decimal, prec int, fmt byte) string {\n-\tbuf := make([]byte, 3+max(prec, 0)+30) // \"-0.\" + prec digits + exp\n-\tw := 0                                 // write index\n-\n+func fmtE(dst []byte, neg bool, d *decimal, prec int, fmt byte) []byte {\n \t// sign\n \tif neg {\n-\t\tbuf[w] = '-'\n-\t\tw++\n+\t\tdst = append(dst, '-')\n \t}\n \n \t// first digit\n-\tif d.nd == 0 {\n-\t\tbuf[w] = '0'\n-\t} else {\n-\t\tbuf[w] = d.d[0]\n+\tch := byte('0')\n+\tif d.nd != 0 {\n+\t\tch = d.d[0]\n \t}\n-\tw++\n+\tdst = append(dst, ch)\n \n \t// .moredigits\n \tif prec > 0 {\n-\t\tbuf[w] = '.'\n-\t\tw++\n-\t\tfor i := 0; i < prec; i++ {\n-\t\t\tif 1+i < d.nd {\n-\t\t\t\tbuf[w] = d.d[1+i]\n-\t\t\t} else {\n-\t\t\t\tbuf[w] = '0'\n+\t\tdst = append(dst, '.')\n+\t\tfor i := 1; i <= prec; i++ {\n+\t\t\tch = '0'\n+\t\t\tif i < d.nd {\n+\t\t\t\tch = d.d[i]\n \t\t\t}\n-\t\t\tw++\n+\t\t\tdst = append(dst, ch)\n \t\t}\n \t}\n \n \t// e\u00b1\n-\tbuf[w] = fmt\n-\tw++\n+\tdst = append(dst, fmt)\n \texp := d.dp - 1\n \tif d.nd == 0 { // special case: 0 has exponent 0\n \t\texp = 0\n \t}\n \tif exp < 0 {\n-\t\tbuf[w] = '-'\n+\t\tch = '-'\n \t\texp = -exp\n \t} else {\n-\t\tbuf[w] = '+'\n+\t\tch = '+'\n \t}\n-\tw++\n+\tdst = append(dst, ch)\n \n \t// dddd\n-\t// count digits\n-\tn := 0\n-\tfor e := exp; e > 0; e /= 10 {\n-\t\tn++\n+\tvar buf [3]byte\n+\ti := len(buf)\n+\tfor exp >= 10 {\n+\t\ti--\n+\t\tbuf[i] = byte(exp%10 + '0')\n+\t\texp /= 10\n \t}\n-\t// leading zeros\n-\tfor i := n; i < 2; i++ {\n-\t\tbuf[w] = '0'\n-\t\tw++\n-\t}\n-\t// digits\n-\tw += n\n-\tn = 0\n-\tfor e := exp; e > 0; e /= 10 {\n-\t\tn++\n-\t\tbuf[w-n] = byte(e%10 + '0')\n+\t// exp < 10\n+\ti--\n+\tbuf[i] = byte(exp + '0')\n+\n+\t// leading zeroes\n+\tif i > len(buf)-2 {\n+\t\ti--\n+\t\tbuf[i] = '0'\n \t}\n \n-\treturn string(buf[0:w])\n+\treturn append(dst, buf[i:]...)\n }\n \n // %f: -ddddddd.ddddd\n-func fmtF(neg bool, d *decimal, prec int) string {\n-\tbuf := make([]byte, 1+max(d.dp, 1)+1+max(prec, 0))\n-\tw := 0\n-\n+func fmtF(dst []byte, neg bool, d *decimal, prec int) []byte {\n \t// sign\n \tif neg {\n-\t\tbuf[w] = '-'\n-\t\tw++\n+\t\tdst = append(dst, '-')\n \t}\n \n \t// integer, padded with zeros as needed.\n \tif d.dp > 0 {\n \t\tvar i int\n \t\tfor i = 0; i < d.dp && i < d.nd; i++ {\n-\t\t\tbuf[w] = d.d[i]\n-\t\t\tw++\n+\t\t\tdst = append(dst, d.d[i])\n \t\t}\n \t\tfor ; i < d.dp; i++ {\n-\t\t\tbuf[w] = '0'\n-\t\t\tw++\n+\t\t\tdst = append(dst, '0')\n \t\t}\n \t} else {\n-\t\tbuf[w] = '0'\n-\t\tw++\n+\t\tdst = append(dst, '0')\n \t}\n \n \t// fraction\n \tif prec > 0 {\n-\t\tbuf[w] = '.'\n-\t\tw++\n+\t\tdst = append(dst, '.')\n \t\tfor i := 0; i < prec; i++ {\n-\t\t\tif d.dp+i < 0 || d.dp+i >= d.nd {\n-\t\t\t\tbuf[w] = '0'\n-\t\t\t} else {\n-\t\t\t\tbuf[w] = d.d[d.dp+i]\n+\t\t\tch := byte('0')\n+\t\t\tif j := d.dp + i; 0 <= j && j < d.nd {\n+\t\t\t\tch = d.d[j]\n \t\t\t}\n-\t\t\tw++\n+\t\t\tdst = append(dst, ch)\n \t\t}\n \t}\n \n-\treturn string(buf[0:w])\n+\treturn dst\n }\n \n // %b: -ddddddddp+ddd\n-func fmtB(neg bool, mant uint64, exp int, flt *floatInfo) string {\n+func fmtB(dst []byte, neg bool, mant uint64, exp int, flt *floatInfo) []byte {\n \tvar buf [50]byte\n \tw := len(buf)\n \texp -= int(flt.mantbits)\n@@ -395,7 +391,7 @@ func fmtB(neg bool, mant uint64, exp int, flt *floatInfo) string {\n \t\tw--\n \t\tbuf[w] = '-'\n \t}\n-\treturn string(buf[w:])\n+\treturn append(dst, buf[w:]...)\n }\n \n func max(a, b int) int {"}, {"sha": "c69f8c2466d0e915446520cd7584188bd9eedfb5", "filename": "libgo/go/strconv/ftoa_test.go", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fftoa_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fftoa_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fftoa_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -149,26 +149,75 @@ func TestFtoa(t *testing.T) {\n \t}\n }\n \n-func BenchmarkFtoa64Decimal(b *testing.B) {\n+/* This test relies on escape analysis which gccgo does not yet do.\n+\n+func TestAppendFloatDoesntAllocate(t *testing.T) {\n+\tn := numAllocations(func() {\n+\t\tvar buf [64]byte\n+\t\tAppendFloat(buf[:0], 1.23, 'g', 5, 64)\n+\t})\n+\twant := 1 // TODO(bradfitz): this might be 0, once escape analysis is better\n+\tif n != want {\n+\t\tt.Errorf(\"with local buffer, did %d allocations, want %d\", n, want)\n+\t}\n+\tn = numAllocations(func() {\n+\t\tAppendFloat(globalBuf[:0], 1.23, 'g', 5, 64)\n+\t})\n+\tif n != 0 {\n+\t\tt.Errorf(\"with reused buffer, did %d allocations, want 0\", n)\n+\t}\n+}\n+\n+*/\n+\n+func BenchmarkFormatFloatDecimal(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n \t\tFormatFloat(33909, 'g', -1, 64)\n \t}\n }\n \n-func BenchmarkFtoa64Float(b *testing.B) {\n+func BenchmarkFormatFloat(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n \t\tFormatFloat(339.7784, 'g', -1, 64)\n \t}\n }\n \n-func BenchmarkFtoa64FloatExp(b *testing.B) {\n+func BenchmarkFormatFloatExp(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n \t\tFormatFloat(-5.09e75, 'g', -1, 64)\n \t}\n }\n \n-func BenchmarkFtoa64Big(b *testing.B) {\n+func BenchmarkFormatFloatBig(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n \t\tFormatFloat(123456789123456789123456789, 'g', -1, 64)\n \t}\n }\n+\n+func BenchmarkAppendFloatDecimal(b *testing.B) {\n+\tdst := make([]byte, 0, 30)\n+\tfor i := 0; i < b.N; i++ {\n+\t\tAppendFloat(dst, 33909, 'g', -1, 64)\n+\t}\n+}\n+\n+func BenchmarkAppendFloat(b *testing.B) {\n+\tdst := make([]byte, 0, 30)\n+\tfor i := 0; i < b.N; i++ {\n+\t\tAppendFloat(dst, 339.7784, 'g', -1, 64)\n+\t}\n+}\n+\n+func BenchmarkAppendFloatExp(b *testing.B) {\n+\tdst := make([]byte, 0, 30)\n+\tfor i := 0; i < b.N; i++ {\n+\t\tAppendFloat(dst, -5.09e75, 'g', -1, 64)\n+\t}\n+}\n+\n+func BenchmarkAppendFloatBig(b *testing.B) {\n+\tdst := make([]byte, 0, 30)\n+\tfor i := 0; i < b.N; i++ {\n+\t\tAppendFloat(dst, 123456789123456789123456789, 'g', -1, 64)\n+\t}\n+}"}, {"sha": "ca40dd7ef626d86f925f769248b3bd61492b221b", "filename": "libgo/go/strconv/itoa.go", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fitoa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fitoa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fitoa.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -35,7 +35,11 @@ func AppendUint(dst []byte, i uint64, base int) []byte {\n \treturn dst\n }\n \n-const digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n+const (\n+\tdigits   = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n+\tdigits01 = \"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\"\n+\tdigits10 = \"0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999\"\n+)\n \n var shifts = [len(digits) + 1]uint{\n \t1 << 1: 1,\n@@ -46,32 +50,42 @@ var shifts = [len(digits) + 1]uint{\n }\n \n // formatBits computes the string representation of u in the given base.\n-// If negative is set, u is treated as negative int64 value. If append_\n-// is set, the string is appended to dst and the resulting byte slice is\n+// If neg is set, u is treated as negative int64 value. If append_ is\n+// set, the string is appended to dst and the resulting byte slice is\n // returned as the first result value; otherwise the string is returned\n // as the second result value.\n //\n-func formatBits(dst []byte, u uint64, base int, negative, append_ bool) (d []byte, s string) {\n+func formatBits(dst []byte, u uint64, base int, neg, append_ bool) (d []byte, s string) {\n \tif base < 2 || base > len(digits) {\n-\t\tpanic(\"invalid base\")\n+\t\tpanic(\"strconv: illegal AppendInt/FormatInt base\")\n \t}\n \t// 2 <= base && base <= len(digits)\n \n \tvar a [64 + 1]byte // +1 for sign of 64bit value in base 2\n \ti := len(a)\n \n-\tif negative {\n+\tif neg {\n \t\tu = -u\n \t}\n \n \t// convert bits\n \tif base == 10 {\n-\t\t// common case: use constant 10 for / and % because\n-\t\t// the compiler can optimize it into a multiply+shift\n-\t\tfor u >= 10 {\n+\t\t// common case: use constants for / and % because\n+\t\t// the compiler can optimize it into a multiply+shift,\n+\t\t// and unroll loop\n+\t\tfor u >= 100 {\n+\t\t\ti -= 2\n+\t\t\tq := u / 100\n+\t\t\tj := uintptr(u - q*100)\n+\t\t\ta[i+1] = digits01[j]\n+\t\t\ta[i+0] = digits10[j]\n+\t\t\tu = q\n+\t\t}\n+\t\tif u >= 10 {\n \t\t\ti--\n-\t\t\ta[i] = digits[u%10]\n-\t\t\tu /= 10\n+\t\t\tq := u / 10\n+\t\t\ta[i] = digits[uintptr(u-q*10)]\n+\t\t\tu = q\n \t\t}\n \n \t} else if s := shifts[base]; s > 0 {\n@@ -89,7 +103,7 @@ func formatBits(dst []byte, u uint64, base int, negative, append_ bool) (d []byt\n \t\tb := uint64(base)\n \t\tfor u >= b {\n \t\t\ti--\n-\t\t\ta[i] = digits[u%b]\n+\t\t\ta[i] = digits[uintptr(u%b)]\n \t\t\tu /= b\n \t\t}\n \t}\n@@ -99,7 +113,7 @@ func formatBits(dst []byte, u uint64, base int, negative, append_ bool) (d []byt\n \ta[i] = digits[uintptr(u)]\n \n \t// add sign, if any\n-\tif negative {\n+\tif neg {\n \t\ti--\n \t\ta[i] = '-'\n \t}"}, {"sha": "186f16c27db2ec123e0d999ac0852202fd96bed3", "filename": "libgo/go/strconv/itoa_test.go", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fitoa_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fitoa_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fitoa_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -5,6 +5,7 @@\n package strconv_test\n \n import (\n+\t\"runtime\"\n \t. \"strconv\"\n \t\"testing\"\n )\n@@ -125,6 +126,37 @@ func TestUitoa(t *testing.T) {\n \t}\n }\n \n+func numAllocations(f func()) int {\n+\truntime.UpdateMemStats()\n+\tn0 := runtime.MemStats.Mallocs\n+\tf()\n+\truntime.UpdateMemStats()\n+\treturn int(runtime.MemStats.Mallocs - n0)\n+}\n+\n+/* This test relies on escape analysis which gccgo does not yet do.\n+\n+var globalBuf [64]byte\n+\n+func TestAppendUintDoesntAllocate(t *testing.T) {\n+\tn := numAllocations(func() {\n+\t\tvar buf [64]byte\n+\t\tAppendInt(buf[:0], 123, 10)\n+\t})\n+\twant := 1 // TODO(bradfitz): this might be 0, once escape analysis is better\n+\tif n != want {\n+\t\tt.Errorf(\"with local buffer, did %d allocations, want %d\", n, want)\n+\t}\n+\tn = numAllocations(func() {\n+\t\tAppendInt(globalBuf[:0], 123, 10)\n+\t})\n+\tif n != 0 {\n+\t\tt.Errorf(\"with reused buffer, did %d allocations, want 0\", n)\n+\t}\n+}\n+\n+*/\n+\n func BenchmarkFormatInt(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n \t\tfor _, test := range itob64tests {"}, {"sha": "edba62954be4e03bc6e2a41f3e69b89d07529608", "filename": "libgo/go/strconv/quote.go", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fquote.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fquote.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fquote.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -116,30 +116,30 @@ func AppendQuoteToASCII(dst []byte, s string) []byte {\n // rune.  The returned string uses Go escape sequences (\\t, \\n, \\xFF, \\u0100)\n // for control characters and non-printable characters as defined by\n // unicode.IsPrint.\n-func QuoteRune(rune int) string {\n+func QuoteRune(r rune) string {\n \t// TODO: avoid the allocation here.\n-\treturn quoteWith(string(rune), '\\'', false)\n+\treturn quoteWith(string(r), '\\'', false)\n }\n \n // AppendQuoteRune appends a single-quoted Go character literal representing the rune,\n // as generated by QuoteRune, to dst and returns the extended buffer.\n-func AppendQuoteRune(dst []byte, rune int) []byte {\n-\treturn append(dst, QuoteRune(rune)...)\n+func AppendQuoteRune(dst []byte, r rune) []byte {\n+\treturn append(dst, QuoteRune(r)...)\n }\n \n // QuoteRuneToASCII returns a single-quoted Go character literal representing\n // the rune.  The returned string uses Go escape sequences (\\t, \\n, \\xFF,\n // \\u0100) for non-ASCII characters and non-printable characters as defined\n // by unicode.IsPrint.\n-func QuoteRuneToASCII(rune int) string {\n+func QuoteRuneToASCII(r rune) string {\n \t// TODO: avoid the allocation here.\n-\treturn quoteWith(string(rune), '\\'', true)\n+\treturn quoteWith(string(r), '\\'', true)\n }\n \n // AppendQuoteRune appends a single-quoted Go character literal representing the rune,\n // as generated by QuoteRuneToASCII, to dst and returns the extended buffer.\n-func AppendQuoteRuneToASCII(dst []byte, rune int) []byte {\n-\treturn append(dst, QuoteRuneToASCII(rune)...)\n+func AppendQuoteRuneToASCII(dst []byte, r rune) []byte {\n+\treturn append(dst, QuoteRuneToASCII(r)...)\n }\n \n // CanBackquote returns whether the string s would be"}, {"sha": "419943d83c751133b9d577227398605530c7f5ee", "filename": "libgo/go/strconv/quote_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fquote_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrconv%2Fquote_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrconv%2Fquote_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -47,7 +47,7 @@ func TestQuoteToASCII(t *testing.T) {\n }\n \n type quoteRuneTest struct {\n-\tin    int\n+\tin    rune\n \tout   string\n \tascii string\n }"}, {"sha": "b411ba5d8b3b43d4b0e4b84585568aae253dde0d", "filename": "libgo/go/strings/strings.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrings%2Fstrings.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrings%2Fstrings.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrings%2Fstrings.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -434,7 +434,7 @@ func Title(s string) string {\n \t// Use a closure here to remember state.\n \t// Hackish but effective. Depends on Map scanning in order and calling\n \t// the closure once per rune.\n-\tprev := rune(' ')\n+\tprev := ' '\n \treturn Map(\n \t\tfunc(r rune) rune {\n \t\t\tif isSeparator(prev) {"}, {"sha": "8866d220c00d92b8362e314a8b37f2a7ba0d0646", "filename": "libgo/go/strings/strings_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrings%2Fstrings_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Fstrings%2Fstrings_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fstrings%2Fstrings_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -642,7 +642,7 @@ func equal(m string, s1, s2 string, t *testing.T) bool {\n \n func TestCaseConsistency(t *testing.T) {\n \t// Make a string of all the runes.\n-\tnumRunes := unicode.MaxRune + 1\n+\tnumRunes := int(unicode.MaxRune + 1)\n \tif testing.Short() {\n \t\tnumRunes = 1000\n \t}"}, {"sha": "ca2fced3fb9c168903f9678b9f9f220f0972e87f", "filename": "libgo/go/testing/testing.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftesting%2Ftesting.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftesting%2Ftesting.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Ftesting.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -75,7 +75,7 @@ func Short() bool {\n \treturn *short\n }\n \n-// decorate inserts the a final newline if needed and indentation tabs for formatting.\n+// decorate inserts the final newline if needed and indentation tabs for formatting.\n // If addFileLine is true, it also prefixes the string with the file and line of the call site.\n func decorate(s string, addFileLine bool) string {\n \tif addFileLine {\n@@ -322,7 +322,7 @@ var timer *time.Timer\n // startAlarm starts an alarm if requested.\n func startAlarm() {\n \tif *timeout > 0 {\n-\t\ttimer = time.AfterFunc(*timeout*1e9, alarm)\n+\t\ttimer = time.AfterFunc(time.Duration(*timeout)*time.Second, alarm)\n \t}\n }\n "}, {"sha": "b753896d775e132093f3ba474084c120b47236b4", "filename": "libgo/go/time/internal_test.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Finternal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Finternal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Finternal_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -10,3 +10,4 @@ func init() {\n }\n \n var Interrupt = interrupt\n+var DaysIn = daysIn"}, {"sha": "b4680db2387e9dd008326949e15ad5aa4511d3eb", "filename": "libgo/go/time/sleep.go", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsleep.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsleep.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fsleep.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -4,6 +4,9 @@\n \n package time\n \n+// Sleep pauses the current goroutine for the duration d.\n+func Sleep(d Duration)\n+\n func nano() int64 {\n \tsec, nsec := now()\n \treturn sec*1e9 + int64(nsec)\n@@ -72,13 +75,13 @@ func After(d Duration) <-chan Time {\n \treturn NewTimer(d).C\n }\n \n-// AfterFunc waits at least ns nanoseconds before calling f\n+// AfterFunc waits for the duration to elapse and then calls f\n // in its own goroutine. It returns a Timer that can\n // be used to cancel the call using its Stop method.\n-func AfterFunc(ns int64, f func()) *Timer {\n+func AfterFunc(d Duration, f func()) *Timer {\n \tt := &Timer{\n \t\tr: runtimeTimer{\n-\t\t\twhen: nano() + ns,\n+\t\t\twhen: nano() + int64(d),\n \t\t\tf:    goFunc,\n \t\t\targ:  f,\n \t\t},"}, {"sha": "3cb088c319f95be064120142c17b21ffdb3455eb", "filename": "libgo/go/time/sleep_test.go", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsleep_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsleep_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fsleep_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -39,7 +39,7 @@ func TestAfterFunc(t *testing.T) {\n \t\ti--\n \t\tif i >= 0 {\n \t\t\tAfterFunc(0, f)\n-\t\t\tSleep(1e9)\n+\t\t\tSleep(1 * Second)\n \t\t} else {\n \t\t\tc <- true\n \t\t}\n@@ -91,7 +91,7 @@ func BenchmarkAfter(b *testing.B) {\n \n func BenchmarkStop(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n-\t\tNewTimer(1e9).Stop()\n+\t\tNewTimer(1 * Second).Stop()\n \t}\n }\n \n@@ -119,19 +119,17 @@ func TestAfterTick(t *testing.T) {\n \tt1 := Now()\n \td := t1.Sub(t0)\n \ttarget := Delta * Count\n-\tslop := target * 2 / 10\n-\tif d < target-slop || d > target+slop {\n+\tif d < target*9/10 || d > target*30/10 {\n \t\tt.Fatalf(\"%d ticks of %s took %s, expected %s\", Count, Delta, d, target)\n \t}\n }\n \n func TestAfterStop(t *testing.T) {\n-\tconst msec = 1e6\n-\tAfterFunc(100*msec, func() {})\n-\tt0 := NewTimer(50 * msec)\n+\tAfterFunc(100*Millisecond, func() {})\n+\tt0 := NewTimer(50 * Millisecond)\n \tc1 := make(chan bool, 1)\n-\tt1 := AfterFunc(150*msec, func() { c1 <- true })\n-\tc2 := After(200 * msec)\n+\tt1 := AfterFunc(150*Millisecond, func() { c1 <- true })\n+\tc2 := After(200 * Millisecond)\n \tif !t0.Stop() {\n \t\tt.Fatalf(\"failed to stop event 0\")\n \t}\n@@ -199,9 +197,8 @@ func testAfterQueuing(t *testing.T) error {\n \t\t}\n \t\tdt := r.t.Sub(t0)\n \t\ttarget := Duration(slot) * Delta\n-\t\tslop := Delta / 4\n-\t\tif dt < target-slop || dt > target+slop {\n-\t\t\treturn fmt.Errorf(\"After(%s) arrived at %s, expected [%s,%s]\", target, dt, target-slop, target+slop)\n+\t\tif dt < target-Delta/2 || dt > target+Delta*10 {\n+\t\t\treturn fmt.Errorf(\"After(%s) arrived at %s, expected [%s,%s]\", target, dt, target-Delta/2, target+Delta*10)\n \t\t}\n \t}\n \treturn nil\n@@ -213,12 +210,12 @@ func TestTimerStopStress(t *testing.T) {\n \t}\n \tfor i := 0; i < 100; i++ {\n \t\tgo func(i int) {\n-\t\t\ttimer := AfterFunc(2e9, func() {\n+\t\t\ttimer := AfterFunc(2*Second, func() {\n \t\t\t\tt.Fatalf(\"timer %d was not stopped\", i)\n \t\t\t})\n-\t\t\tSleep(1e9)\n+\t\t\tSleep(1 * Second)\n \t\t\ttimer.Stop()\n \t\t}(i)\n \t}\n-\tSleep(3e9)\n+\tSleep(3 * Second)\n }"}, {"sha": "fe6bc27d301f113e9ee460010f00eb105c3c5750", "filename": "libgo/go/time/sys.go", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Ftime%2Fsys.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6135f063335419e4b5df0b4e1caf145882c8a4b/libgo%2Fgo%2Ftime%2Fsys.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fsys.go?ref=c6135f063335419e4b5df0b4e1caf145882c8a4b", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package time\n-\n-import \"syscall\"\n-\n-// Sleep pauses the current goroutine for the duration d.\n-func Sleep(d Duration)\n-\n-// readFile reads and returns the content of the named file.\n-// It is a trivial implementation of ioutil.ReadFile, reimplemented\n-// here to avoid depending on io/ioutil or os.\n-func readFile(name string) ([]byte, error) {\n-\tf, err := syscall.Open(name, syscall.O_RDONLY, 0)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\tdefer syscall.Close(f)\n-\tvar (\n-\t\tbuf [4096]byte\n-\t\tret []byte\n-\t\tn   int\n-\t)\n-\tfor {\n-\t\tn, err = syscall.Read(f, buf[:])\n-\t\tif n > 0 {\n-\t\t\tret = append(ret, buf[:n]...)\n-\t\t}\n-\t\tif n == 0 || err != nil {\n-\t\t\tbreak\n-\t\t}\n-\t}\n-\treturn ret, err\n-}"}, {"sha": "c7cfa792a29f3c717b8dc159e31980ddc27b846d", "filename": "libgo/go/time/sys_plan9.go", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsys_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsys_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fsys_plan9.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -2,9 +2,39 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build plan9\n+\n package time\n \n+import \"syscall\"\n+\n // for testing: whatever interrupts a sleep\n func interrupt() {\n \t// cannot predict pid, don't want to kill group\n }\n+\n+// readFile reads and returns the content of the named file.\n+// It is a trivial implementation of ioutil.ReadFile, reimplemented\n+// here to avoid depending on io/ioutil or os.\n+func readFile(name string) ([]byte, error) {\n+\tf, err := syscall.Open(name, syscall.O_RDONLY)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer syscall.Close(f)\n+\tvar (\n+\t\tbuf [4096]byte\n+\t\tret []byte\n+\t\tn   int\n+\t)\n+\tfor {\n+\t\tn, err = syscall.Read(f, buf[:])\n+\t\tif n > 0 {\n+\t\t\tret = append(ret, buf[:n]...)\n+\t\t}\n+\t\tif n == 0 || err != nil {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn ret, err\n+}"}, {"sha": "55ae5f7da289b5854f639847de2c0612324c1842", "filename": "libgo/go/time/sys_unix.go", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsys_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fsys_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fsys_unix.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -12,3 +12,29 @@ import \"syscall\"\n func interrupt() {\n \tsyscall.Kill(syscall.Getpid(), syscall.SIGCHLD)\n }\n+\n+// readFile reads and returns the content of the named file.\n+// It is a trivial implementation of ioutil.ReadFile, reimplemented\n+// here to avoid depending on io/ioutil or os.\n+func readFile(name string) ([]byte, error) {\n+\tf, err := syscall.Open(name, syscall.O_RDONLY, 0)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer syscall.Close(f)\n+\tvar (\n+\t\tbuf [4096]byte\n+\t\tret []byte\n+\t\tn   int\n+\t)\n+\tfor {\n+\t\tn, err = syscall.Read(f, buf[:])\n+\t\tif n > 0 {\n+\t\t\tret = append(ret, buf[:n]...)\n+\t\t}\n+\t\tif n == 0 || err != nil {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn ret, err\n+}"}, {"sha": "e58099676f07b02f500a729f3ce094b821fdefd5", "filename": "libgo/go/time/time.go", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Ftime.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Ftime.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Ftime.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -548,7 +548,7 @@ func (d Duration) Hours() float64 {\n func (t Time) Add(d Duration) Time {\n \tt.sec += int64(d / 1e9)\n \tt.nsec += int32(d % 1e9)\n-\tif t.nsec > 1e9 {\n+\tif t.nsec >= 1e9 {\n \t\tt.sec++\n \t\tt.nsec -= 1e9\n \t} else if t.nsec < 0 {\n@@ -673,7 +673,7 @@ func daysIn(m Month, year int) int {\n \tif m == February && isLeap(year) {\n \t\treturn 29\n \t}\n-\treturn int(daysBefore[m+1] - daysBefore[m])\n+\treturn int(daysBefore[m] - daysBefore[m-1])\n }\n \n // Provided by package runtime.\n@@ -736,6 +736,86 @@ func (t Time) UnixNano() int64 {\n \treturn (t.sec+internalToUnix)*1e9 + int64(t.nsec)\n }\n \n+type gobError string\n+\n+func (g gobError) Error() string { return string(g) }\n+\n+const timeGobVersion byte = 1\n+\n+// GobEncode implements the gob.GobEncoder interface.\n+func (t Time) GobEncode() ([]byte, error) {\n+\tvar offsetMin int16 // minutes east of UTC. -1 is UTC.\n+\n+\tif t.Location() == &utcLoc {\n+\t\toffsetMin = -1\n+\t} else {\n+\t\t_, offset := t.Zone()\n+\t\tif offset%60 != 0 {\n+\t\t\treturn nil, gobError(\"Time.GobEncode: zone offset has fractional minute\")\n+\t\t}\n+\t\toffset /= 60\n+\t\tif offset < -32768 || offset == -1 || offset > 32767 {\n+\t\t\treturn nil, gobError(\"Time.GobEncode: unexpected zone offset\")\n+\t\t}\n+\t\toffsetMin = int16(offset)\n+\t}\n+\n+\tenc := []byte{\n+\t\ttimeGobVersion,    // byte 0 : version\n+\t\tbyte(t.sec >> 56), // bytes 1-8: seconds\n+\t\tbyte(t.sec >> 48),\n+\t\tbyte(t.sec >> 40),\n+\t\tbyte(t.sec >> 32),\n+\t\tbyte(t.sec >> 24),\n+\t\tbyte(t.sec >> 16),\n+\t\tbyte(t.sec >> 8),\n+\t\tbyte(t.sec),\n+\t\tbyte(t.nsec >> 24), // bytes 9-12: nanoseconds\n+\t\tbyte(t.nsec >> 16),\n+\t\tbyte(t.nsec >> 8),\n+\t\tbyte(t.nsec),\n+\t\tbyte(offsetMin >> 8), // bytes 13-14: zone offset in minutes\n+\t\tbyte(offsetMin),\n+\t}\n+\n+\treturn enc, nil\n+}\n+\n+// GobDecode implements the gob.GobDecoder interface.\n+func (t *Time) GobDecode(buf []byte) error {\n+\tif len(buf) == 0 {\n+\t\treturn gobError(\"Time.GobDecode: no data\")\n+\t}\n+\n+\tif buf[0] != timeGobVersion {\n+\t\treturn gobError(\"Time.GobDecode: unsupported version\")\n+\t}\n+\n+\tif len(buf) != /*version*/ 1+ /*sec*/ 8+ /*nsec*/ 4+ /*zone offset*/ 2 {\n+\t\treturn gobError(\"Time.GobDecode: invalid length\")\n+\t}\n+\n+\tbuf = buf[1:]\n+\tt.sec = int64(buf[7]) | int64(buf[6])<<8 | int64(buf[5])<<16 | int64(buf[4])<<24 |\n+\t\tint64(buf[3])<<32 | int64(buf[2])<<40 | int64(buf[1])<<48 | int64(buf[0])<<56\n+\n+\tbuf = buf[8:]\n+\tt.nsec = int32(buf[3]) | int32(buf[2])<<8 | int32(buf[1])<<16 | int32(buf[0])<<24\n+\n+\tbuf = buf[4:]\n+\toffset := int(int16(buf[1])|int16(buf[0])<<8) * 60\n+\n+\tif offset == -1*60 {\n+\t\tt.loc = &utcLoc\n+\t} else if _, localoff, _, _, _ := Local.lookup(t.sec + internalToUnix); offset == localoff {\n+\t\tt.loc = Local\n+\t} else {\n+\t\tt.loc = FixedZone(\"\", offset)\n+\t}\n+\n+\treturn nil\n+}\n+\n // Unix returns the local Time corresponding to the given Unix time,\n // sec seconds and nsec nanoseconds since January 1, 1970 UTC.\n // It is valid to pass nsec outside the range [0, 999999999]."}, {"sha": "2a22e7b2746350ae861ca4152a30665d488a6cd4", "filename": "libgo/go/time/time_test.go", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Ftime_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Ftime_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Ftime_test.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -5,6 +5,8 @@\n package time_test\n \n import (\n+\t\"bytes\"\n+\t\"encoding/gob\"\n \t\"strconv\"\n \t\"strings\"\n \t\"testing\"\n@@ -632,6 +634,108 @@ func TestDate(t *testing.T) {\n \t}\n }\n \n+var daysInTests = []struct {\n+\tyear, month, di int\n+}{\n+\t{2011, 1, 31},  // January, first month, 31 days\n+\t{2011, 2, 28},  // February, non-leap year, 28 days\n+\t{2012, 2, 29},  // February, leap year, 29 days\n+\t{2011, 6, 30},  // June, 30 days\n+\t{2011, 12, 31}, // December, last month, 31 days\n+}\n+\n+func TestDaysIn(t *testing.T) {\n+\t// The daysIn function is not exported.\n+\t// Test the daysIn function via the `var DaysIn = daysIn`\n+\t// statement in the internal_test.go file.\n+\tfor _, tt := range daysInTests {\n+\t\tdi := DaysIn(Month(tt.month), tt.year)\n+\t\tif di != tt.di {\n+\t\t\tt.Errorf(\"got %d; expected %d for %d-%02d\",\n+\t\t\t\tdi, tt.di, tt.year, tt.month)\n+\t\t}\n+\t}\n+}\n+\n+func TestAddToExactSecond(t *testing.T) {\n+\t// Add an amount to the current time to round it up to the next exact second.\n+\t// This test checks that the nsec field still lies within the range [0, 999999999].\n+\tt1 := Now()\n+\tt2 := t1.Add(Second - Duration(t1.Nanosecond()))\n+\tsec := (t1.Second() + 1) % 60\n+\tif t2.Second() != sec || t2.Nanosecond() != 0 {\n+\t\tt.Errorf(\"sec = %d, nsec = %d, want sec = %d, nsec = 0\", t2.Second(), t2.Nanosecond(), sec)\n+\t}\n+}\n+\n+var gobTests = []Time{\n+\tDate(0, 1, 2, 3, 4, 5, 6, UTC),\n+\tDate(7, 8, 9, 10, 11, 12, 13, FixedZone(\"\", 0)),\n+\tUnix(81985467080890095, 0x76543210), // Time.sec: 0x0123456789ABCDEF\n+\tTime{},                              // nil location\n+\tDate(1, 2, 3, 4, 5, 6, 7, FixedZone(\"\", 32767*60)),\n+\tDate(1, 2, 3, 4, 5, 6, 7, FixedZone(\"\", -32768*60)),\n+}\n+\n+func TestTimeGob(t *testing.T) {\n+\tvar b bytes.Buffer\n+\tenc := gob.NewEncoder(&b)\n+\tdec := gob.NewDecoder(&b)\n+\tfor _, tt := range gobTests {\n+\t\tvar gobtt Time\n+\t\tif err := enc.Encode(&tt); err != nil {\n+\t\t\tt.Errorf(\"%v gob Encode error = %q, want nil\", tt, err)\n+\t\t} else if err := dec.Decode(&gobtt); err != nil {\n+\t\t\tt.Errorf(\"%v gob Decode error = %q, want nil\", tt, err)\n+\t\t} else {\n+\t\t\tgobname, goboffset := gobtt.Zone()\n+\t\t\tname, offset := tt.Zone()\n+\t\t\tif !gobtt.Equal(tt) || goboffset != offset || gobname != name {\n+\t\t\t\tt.Errorf(\"Decoded time = %v, want %v\", gobtt, tt)\n+\t\t\t}\n+\t\t}\n+\t\tb.Reset()\n+\t}\n+}\n+\n+var invalidEncodingTests = []struct {\n+\tbytes []byte\n+\twant  string\n+}{\n+\t{[]byte{}, \"Time.GobDecode: no data\"},\n+\t{[]byte{0, 2, 3}, \"Time.GobDecode: unsupported version\"},\n+\t{[]byte{1, 2, 3}, \"Time.GobDecode: invalid length\"},\n+}\n+\n+func TestInvalidTimeGob(t *testing.T) {\n+\tfor _, tt := range invalidEncodingTests {\n+\t\tvar ignored Time\n+\t\terr := ignored.GobDecode(tt.bytes)\n+\t\tif err == nil || err.Error() != tt.want {\n+\t\t\tt.Errorf(\"time.GobDecode(%#v) error = %v, want %v\", tt.bytes, err, tt.want)\n+\t\t}\n+\t}\n+}\n+\n+var notEncodableTimes = []struct {\n+\ttime Time\n+\twant string\n+}{\n+\t{Date(0, 1, 2, 3, 4, 5, 6, FixedZone(\"\", 1)), \"Time.GobEncode: zone offset has fractional minute\"},\n+\t{Date(0, 1, 2, 3, 4, 5, 6, FixedZone(\"\", -1*60)), \"Time.GobEncode: unexpected zone offset\"},\n+\t{Date(0, 1, 2, 3, 4, 5, 6, FixedZone(\"\", -32769*60)), \"Time.GobEncode: unexpected zone offset\"},\n+\t{Date(0, 1, 2, 3, 4, 5, 6, FixedZone(\"\", 32768*60)), \"Time.GobEncode: unexpected zone offset\"},\n+}\n+\n+func TestNotGobEncodableTime(t *testing.T) {\n+\tfor _, tt := range notEncodableTimes {\n+\t\t_, err := tt.time.GobEncode()\n+\t\tif err == nil || err.Error() != tt.want {\n+\t\t\tt.Errorf(\"%v GobEncode error = %v, want %v\", tt.time, err, tt.want)\n+\t\t}\n+\t}\n+}\n+\n func BenchmarkNow(b *testing.B) {\n \tfor i := 0; i < b.N; i++ {\n \t\tNow()"}, {"sha": "9c052d42cd32376b2aa4dfdb58adbbb2e360558e", "filename": "libgo/go/time/zoneinfo_plan9.go", "status": "modified", "additions": 119, "deletions": 28, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fzoneinfo_plan9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Ftime%2Fzoneinfo_plan9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftime%2Fzoneinfo_plan9.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -6,61 +6,152 @@\n \n package time\n \n-//import (\n-//\t\"strconv\"\n-//\t\"strings\"\n-//)\n+import (\n+\t\"errors\"\n+\t\"syscall\"\n+)\n \n-func parseZones(s string) (zt []zonetime) {\n-\tf := strings.Fields(s)\n+var badData = errors.New(\"malformed time zone information\")\n+\n+func isSpace(r rune) bool {\n+\treturn r == ' ' || r == '\\t' || r == '\\n'\n+}\n+\n+// Copied from strings to avoid a dependency.\n+func fields(s string) []string {\n+\t// First count the fields.\n+\tn := 0\n+\tinField := false\n+\tfor _, rune := range s {\n+\t\twasInField := inField\n+\t\tinField = !isSpace(rune)\n+\t\tif inField && !wasInField {\n+\t\t\tn++\n+\t\t}\n+\t}\n+\n+\t// Now create them.\n+\ta := make([]string, n)\n+\tna := 0\n+\tfieldStart := -1 // Set to -1 when looking for start of field.\n+\tfor i, rune := range s {\n+\t\tif isSpace(rune) {\n+\t\t\tif fieldStart >= 0 {\n+\t\t\t\ta[na] = s[fieldStart:i]\n+\t\t\t\tna++\n+\t\t\t\tfieldStart = -1\n+\t\t\t}\n+\t\t} else if fieldStart == -1 {\n+\t\t\tfieldStart = i\n+\t\t}\n+\t}\n+\tif fieldStart >= 0 { // Last field might end at EOF.\n+\t\ta[na] = s[fieldStart:]\n+\t}\n+\treturn a\n+}\n+\n+func loadZoneData(s string) (l *Location, err error) {\n+\tf := fields(s)\n \tif len(f) < 4 {\n-\t\treturn\n+\t\tif len(f) == 2 && f[0] == \"GMT\" {\n+\t\t\treturn UTC, nil\n+\t\t}\n+\t\treturn nil, badData\n \t}\n \n+\tvar zones [2]zone\n+\n \t// standard timezone offset\n-\to, err := strconv.Atoi(f[1])\n+\to, err := atoi(f[1])\n \tif err != nil {\n-\t\treturn\n+\t\treturn nil, badData\n \t}\n-\tstd := &zone{name: f[0], utcoff: o, isdst: false}\n+\tzones[0] = zone{name: f[0], offset: o, isDST: false}\n \n \t// alternate timezone offset\n-\to, err = strconv.Atoi(f[3])\n+\to, err = atoi(f[3])\n \tif err != nil {\n-\t\treturn\n+\t\treturn nil, badData\n \t}\n-\tdst := &zone{name: f[2], utcoff: o, isdst: true}\n+\tzones[1] = zone{name: f[2], offset: o, isDST: true}\n \n \t// transition time pairs\n+\tvar tx []zoneTrans\n \tf = f[4:]\n \tfor i := 0; i < len(f); i++ {\n-\t\tz := std\n+\t\tzi := 0\n \t\tif i%2 == 0 {\n-\t\t\tz = dst\n+\t\t\tzi = 1\n \t\t}\n-\t\tt, err := strconv.Atoi(f[i])\n+\t\tt, err := atoi(f[i])\n \t\tif err != nil {\n-\t\t\treturn nil\n+\t\t\treturn nil, badData\n \t\t}\n-\t\tt -= std.utcoff\n-\t\tzt = append(zt, zonetime{time: int32(t), zone: z})\n+\t\tt -= zones[0].offset\n+\t\ttx = append(tx, zoneTrans{when: int64(t), index: uint8(zi)})\n \t}\n-\treturn\n+\n+\t// Committed to succeed.\n+\tl = &Location{zone: zones[:], tx: tx}\n+\n+\t// Fill in the cache with information about right now,\n+\t// since that will be the most common lookup.\n+\tsec, _ := now()\n+\tfor i := range tx {\n+\t\tif tx[i].when <= sec && (i+1 == len(tx) || sec < tx[i+1].when) {\n+\t\t\tl.cacheStart = tx[i].when\n+\t\t\tl.cacheEnd = 1<<63 - 1\n+\t\t\tif i+1 < len(tx) {\n+\t\t\t\tl.cacheEnd = tx[i+1].when\n+\t\t\t}\n+\t\t\tl.cacheZone = &l.zone[tx[i].index]\n+\t\t}\n+\t}\n+\n+\treturn l, nil\n }\n \n-func initLocal() {\n-\tt, err := os.Getenverror(\"timezone\")\n+func loadZoneFile(name string) (*Location, error) {\n+\tb, err := readFile(name)\n \tif err != nil {\n-\t\t// do nothing: use UTC\n-\t\treturn\n+\t\treturn nil, err\n \t}\n-\tzones = parseZones(t)\n+\treturn loadZoneData(string(b))\n }\n \n func initTestingZone() {\n-\tbuf, err := readFile(\"/adm/timezone/US_Pacific\")\n-\tif err != nil {\n+\tif z, err := loadZoneFile(\"/adm/timezone/US_Pacific\"); err == nil {\n+\t\tlocalLoc = *z\n \t\treturn\n \t}\n-\tzones = parseZones(string(buf))\n+\n+\t// Fall back to UTC.\n+\tlocalLoc.name = \"UTC\"\n+}\n+\n+func initLocal() {\n+\tt, ok := syscall.Getenv(\"timezone\")\n+\tif ok {\n+\t\tif z, err := loadZoneData(t); err == nil {\n+\t\t\tlocalLoc = *z\n+\t\t\treturn\n+\t\t}\n+\t} else {\n+\t\tif z, err := loadZoneFile(\"/adm/timezone/local\"); err == nil {\n+\t\t\tlocalLoc = *z\n+\t\t\tlocalLoc.name = \"Local\"\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\t// Fall back to UTC.\n+\tlocalLoc.name = \"UTC\"\n+}\n+\n+func loadLocation(name string) (*Location, error) {\n+\tif z, err := loadZoneFile(\"/adm/timezone/\" + name); err == nil {\n+\t\treturn z, nil\n+\t}\n+\treturn nil, errors.New(\"unknown time zone \" + name)\n }"}, {"sha": "dcc160a5b7d1ab67e45d9cc0364cfe32ee4cdca8", "filename": "libgo/go/unicode/letter.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Funicode%2Fletter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fgo%2Funicode%2Fletter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Funicode%2Fletter.go?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -7,10 +7,10 @@\n package unicode\n \n const (\n-\tMaxRune         = 0x10FFFF // Maximum valid Unicode code point.\n-\tReplacementChar = 0xFFFD   // Represents invalid code points.\n-\tMaxASCII        = 0x7F     // maximum ASCII value.\n-\tMaxLatin1       = 0xFF     // maximum Latin-1 value.\n+\tMaxRune         = '\\U0010FFFF' // Maximum valid Unicode code point.\n+\tReplacementChar = '\\uFFFD'     // Represents invalid code points.\n+\tMaxASCII        = '\\u007F'     // maximum ASCII value.\n+\tMaxLatin1       = '\\u00FF'     // maximum Latin-1 value.\n )\n \n // RangeTable defines a set of Unicode code points by listing the ranges of"}, {"sha": "04fca2c65b1a680d8dae10f3530cf3328c696f32", "filename": "libgo/runtime/mem.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fruntime%2Fmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fruntime%2Fmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmem.c?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -69,9 +69,9 @@ runtime_SysAlloc(uintptr n)\n void\n runtime_SysUnused(void *v, uintptr n)\n {\n-\tUSED(v);\n-\tUSED(n);\n-\t// TODO(rsc): call madvise MADV_DONTNEED\n+#ifdef MADV_DONTNEED\n+\truntime_madvise(v, n, MADV_DONTNEED);\n+#endif\n }\n \n void"}, {"sha": "040a1b617c874d16580d22861c166207d95ecee0", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e3259f44ad2de9c65f14f756dab01b3598391/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=9a0e3259f44ad2de9c65f14f756dab01b3598391", "patch": "@@ -353,7 +353,8 @@ void\tfree(void *v);\n struct __go_func_type;\n bool\truntime_addfinalizer(void*, void(*fn)(void*), const struct __go_func_type *);\n #define runtime_mmap mmap\n-#define runtime_munmap(p, s) munmap((p), (s))\n+#define runtime_munmap munmap\n+#define runtime_madvise madvise\n #define runtime_cas(pval, old, new) __sync_bool_compare_and_swap (pval, old, new)\n #define runtime_casp(pval, old, new) __sync_bool_compare_and_swap (pval, old, new)\n #define runtime_xadd(p, v) __sync_add_and_fetch (p, v)"}]}