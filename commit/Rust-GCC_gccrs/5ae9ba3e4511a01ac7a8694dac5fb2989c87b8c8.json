{"sha": "5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlOWJhM2U0NTExYTAxYWM3YTg2OTRkYWM1ZmIyOTg5Yzg3YjhjOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-25T17:11:37Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-11-25T17:11:37Z"}, "message": "re PR c++/18001 (Badly formatted error message (quotation problem))\n\n\tPR c++/18001\n\t* c-common.h (lvalue_use): Move here from c-ctypeck.c.\n\t(lvalue_or_else): Declare.\n\t* c-common.c (lvalue_or_else): Move here from c-typeck.c.\n\t* c-typeck.c (lvalue_use): Remove.\n\t(lvalue_or_else): Remove.\n\n\tPR c++/18556\n\t* toplev.c (check_global_declarations): Set DECL_IGNORED_P on\n\tunemitted variables with static storage duration.\n\n\tPR c++/18445\n\t* class.c (instantiate_type): Treat NON_DEPENDENT_EXPRs with\n\tunknown_type as non matching.  Tidy up.\n\t* pt.c (build_non_dependent_expr): Do not build a\n\tNON_DEPENDENT_EXPR for a VAR_DECL.\n\n\tPR c++/18001\n\t* cp-tree.h (lvalue_or_else): Remove declaration.\n\t* tree.c (lvalue_or_else): Remove.\n\t* typeck.c (build_unary_op): Adjust call to lvalue_or_else.\n\t(build_modify_expr): Likewise.\n\n\tPR c++/18625\n\t* decl.c (duplicate_decls): Return error_mark_node on error, as\n\tspecified.\n\n\tPR c++/18466\n\t* decl.c (grokvardecl): Keep track of whether or not a there was\n\texplicit qualification.\n\t* name-lookup.c (set_decl_namespace): Complain about explicit\n\tqualification of a name within its own namespace.\n\n\tPR c++/18545\n\t* typeck.c (check_return_expr): Robustify.\n\n\tPR c++/18445\n\t* g++.dg/template/crash28.C: Likewise.\n\n\tPR c++/18001\n\t* g++.dg/expr/unary2.C: Adjust lvalue messages.\n\t* g++.dg/ext/lvaddr.C: Likewise.\n\t* g++.dg/opt/pr7503-3.C: Likewise.\n\n\tPR c++/18466\n\t* g++.dg/parse/qualified3.C: New test.\n\t* g++.old-deja/g++.other/friend7.C: Remove bogus qualification.\n\n\tPR c++/18545\n\t* g++.dg/expr/return1.C: New test.\n\nFrom-SVN: r91301", "tree": {"sha": "1f43cc1480d6fed656039fd8b9ad792166e521e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f43cc1480d6fed656039fd8b9ad792166e521e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/comments", "author": null, "committer": null, "parents": [{"sha": "87c465f52c1f582a61283932963305aab86e2aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c465f52c1f582a61283932963305aab86e2aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c465f52c1f582a61283932963305aab86e2aa6"}], "stats": {"total": 362, "additions": 232, "deletions": 130}, "files": [{"sha": "0f8ebea5cc52785050bef055bb249c3c08594892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -1,3 +1,16 @@\n+2004-11-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18001\n+\t* c-common.h (lvalue_use): Move here from c-ctypeck.c.\n+\t(lvalue_or_else): Declare.\n+\t* c-common.c (lvalue_or_else): Move here from c-typeck.c.\n+\t* c-typeck.c (lvalue_use): Remove.\n+\t(lvalue_or_else): Remove.\n+\n+\tPR c++/18556\n+\t* toplev.c (check_global_declarations): Set DECL_IGNORED_P on\n+\tunemitted variables with static storage duration.\n+\n 2004-11-25  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* tree-cfg.c (tree_verify_flow_info): Do not terminate error()"}, {"sha": "bfefeb231dcb24fd6f7df9122d4e6ef27d81fd25", "filename": "gcc/c-common.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -5617,4 +5617,40 @@ fold_offsetof (tree expr)\n   return convert (size_type_node, fold_offsetof_1 (expr));\n }\n \n+/* Return nonzero if REF is an lvalue valid for this language;\n+   otherwise, print an error message and return zero.  USE says\n+   how the lvalue is being used and so selects the error message.  */\n+\n+int\n+lvalue_or_else (tree ref, enum lvalue_use use)\n+{\n+  int win = lvalue_p (ref);\n+\n+  if (!win)\n+    {\n+      switch (use)\n+\t{\n+\tcase lv_assign:\n+\t  error (\"invalid lvalue in assignment\");\n+\t  break;\n+\tcase lv_increment:\n+\t  error (\"invalid lvalue in increment\");\n+\t  break;\n+\tcase lv_decrement:\n+\t  error (\"invalid lvalue in decrement\");\n+\t  break;\n+\tcase lv_addressof:\n+\t  error (\"invalid lvalue in unary %<&%>\");\n+\t  break;\n+\tcase lv_asm:\n+\t  error (\"invalid lvalue in asm statement\");\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n+  return win;\n+}\n+\n #include \"gt-c-common.h\""}, {"sha": "d0fbaa837dfdedbb2d3c3ee73a6772e4877eb4a9", "filename": "gcc/c-common.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -873,6 +873,19 @@ extern void verify_sequence_points (tree);\n \n extern tree fold_offsetof (tree);\n \n+/* Places where an lvalue, or modifiable lvalue, may be required.\n+   Used to select diagnostic messages in lvalue_or_else and\n+   readonly_error.  */\n+enum lvalue_use {\n+  lv_assign,\n+  lv_increment,\n+  lv_decrement,\n+  lv_addressof,\n+  lv_asm\n+};\n+\n+extern int lvalue_or_else (tree, enum lvalue_use);\n+\n /* In c-gimplify.c  */\n extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, tree *, tree *);"}, {"sha": "23ff80e10de279baee352c428be0d3e9301c7a31", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -44,17 +44,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-iterator.h\"\n #include \"tree-gimple.h\"\n \n-/* Places where an lvalue, or modifiable lvalue, may be required.\n-   Used to select diagnostic messages in lvalue_or_else and\n-   readonly_error.  */\n-enum lvalue_use {\n-  lv_assign,\n-  lv_increment,\n-  lv_decrement,\n-  lv_addressof,\n-  lv_asm\n-};\n-\n /* Possible cases of implicit bad conversions.  Used to select\n    diagnostic messages in convert_for_assignment.  */\n enum impl_conv {\n@@ -109,7 +98,6 @@ static void add_pending_init (tree, tree);\n static void set_nonincremental_init (void);\n static void set_nonincremental_init_from_string (tree);\n static tree find_init_member (tree);\n-static int lvalue_or_else (tree, enum lvalue_use);\n static void readonly_error (tree, enum lvalue_use);\n static void record_maybe_used_decl (tree);\n \f\n@@ -2714,43 +2702,6 @@ lvalue_p (tree ref)\n       return 0;\n     }\n }\n-\n-/* Return nonzero if REF is an lvalue valid for this language;\n-   otherwise, print an error message and return zero.  USE says\n-   how the lvalue is being used and so selects the error message.  */\n-\n-static int\n-lvalue_or_else (tree ref, enum lvalue_use use)\n-{\n-  int win = lvalue_p (ref);\n-\n-  if (!win)\n-    {\n-      switch (use)\n-\t{\n-\tcase lv_assign:\n-\t  error (\"invalid lvalue in assignment\");\n-\t  break;\n-\tcase lv_increment:\n-\t  error (\"invalid lvalue in increment\");\n-\t  break;\n-\tcase lv_decrement:\n-\t  error (\"invalid lvalue in decrement\");\n-\t  break;\n-\tcase lv_addressof:\n-\t  error (\"invalid lvalue in unary %<&%>\");\n-\t  break;\n-\tcase lv_asm:\n-\t  error (\"invalid lvalue in asm statement\");\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-    }\n-\n-  return win;\n-}\n-\n \f\n /* Give an error for storing in something that is 'const'.  */\n "}, {"sha": "6a8aea8e4e184cb190bd57cc13818b4b6bb000b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -1,3 +1,30 @@\n+2004-11-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18445\n+\t* class.c (instantiate_type): Treat NON_DEPENDENT_EXPRs with\n+\tunknown_type as non matching.  Tidy up.\n+\t* pt.c (build_non_dependent_expr): Do not build a\n+\tNON_DEPENDENT_EXPR for a VAR_DECL.\n+\n+\tPR c++/18001\n+\t* cp-tree.h (lvalue_or_else): Remove declaration.\n+\t* tree.c (lvalue_or_else): Remove.\n+\t* typeck.c (build_unary_op): Adjust call to lvalue_or_else.\n+\t(build_modify_expr): Likewise.\n+\n+\tPR c++/18625\n+\t* decl.c (duplicate_decls): Return error_mark_node on error, as\n+\tspecified.\n+\n+\tPR c++/18466\n+\t* decl.c (grokvardecl): Keep track of whether or not a there was\n+\texplicit qualification.\n+\t* name-lookup.c (set_decl_namespace): Complain about explicit\n+\tqualification of a name within its own namespace.\n+\n+\tPR c++/18545\n+\t* typeck.c (check_return_expr): Robustify.\n+\n 2004-11-25  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tFriend class name lookup 3/n, PR c++/3332"}, {"sha": "3db223a8717cb533c03fcf0741e1caa291798ae2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -5864,6 +5864,15 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n   if (TREE_CODE (rhs) == BASELINK)\n     rhs = BASELINK_FUNCTIONS (rhs);\n \n+  /* If we are in a template, and have a NON_DEPENDENT_EXPR, we cannot\n+     deduce any type information.  */\n+  if (TREE_CODE (rhs) == NON_DEPENDENT_EXPR)\n+    {\n+      if (flags & tf_error)\n+\terror (\"not enough type information\");\n+      return error_mark_node;\n+    }\n+\n   /* We don't overwrite rhs if it is an overloaded function.\n      Copying it would destroy the tree link.  */\n   if (TREE_CODE (rhs) != OVERLOAD)\n@@ -5904,14 +5913,15 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n \n     case COMPONENT_REF:\n       {\n-\ttree addr = instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n+\ttree member = TREE_OPERAND (rhs, 1);\n \n-\tif (addr != error_mark_node\n+\tmember = instantiate_type (lhstype, member, flags);\n+\tif (member != error_mark_node\n \t    && TREE_SIDE_EFFECTS (TREE_OPERAND (rhs, 0)))\n \t  /* Do not lose object's side effects.  */\n-\t  addr = build2 (COMPOUND_EXPR, TREE_TYPE (addr),\n-\t\t\t TREE_OPERAND (rhs, 0), addr);\n-\treturn addr;\n+\t  return build2 (COMPOUND_EXPR, TREE_TYPE (member),\n+\t\t\t TREE_OPERAND (rhs, 0), member);\n+\treturn member;\n       }\n \n     case OFFSET_REF:\n@@ -5943,12 +5953,6 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n \t\t\t\t\t\t/*template_only=*/false,\n \t\t\t\t\t\t/*explicit_targs=*/NULL_TREE);\n \n-    case TREE_LIST:\n-      /* Now we should have a baselink.  */\n-      gcc_assert (BASELINK_P (rhs));\n-\n-      return instantiate_type (lhstype, BASELINK_FUNCTIONS (rhs), flags);\n-\n     case CALL_EXPR:\n       /* This is too hard for now.  */\n       gcc_unreachable ();"}, {"sha": "f6da43c82870915374ce104454ab9721c2daba3c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -4186,7 +4186,6 @@ extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t tree *, int);\n extern int member_p\t\t\t\t(tree);\n extern cp_lvalue_kind real_lvalue_p             (tree);\n-extern int lvalue_or_else\t\t\t(tree, const char *);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);"}, {"sha": "2085a57fff29308ec93e14dc7eddab548f24fcd4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -1417,7 +1417,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  error (\"conflicting declaration %q#D\", newdecl);\n \t  cp_error_at (\"%qD has a previous declaration as %q#D\",\n                        olddecl, olddecl);\n-          return NULL_TREE;\n+          return error_mark_node;\n \t}\n     }\n   else if (TREE_CODE (newdecl) == FUNCTION_DECL\n@@ -5921,10 +5921,13 @@ grokvardecl (tree type,\n              tree scope)\n {\n   tree decl;\n+  tree explicit_scope;\n \n   gcc_assert (!name || TREE_CODE (name) == IDENTIFIER_NODE);\n \n-  /* Compute the scope in which to place the variable.  */\n+  /* Compute the scope in which to place the variable, but remember\n+     whether or not that scope was explicitly specified by the user.   */\n+  explicit_scope = scope;\n   if (!scope)\n     {\n       /* An explicit \"extern\" specifier indicates a namespace-scope\n@@ -5949,8 +5952,8 @@ grokvardecl (tree type,\n   else\n     decl = build_decl (VAR_DECL, name, type);\n \n-  if (scope && TREE_CODE (scope) == NAMESPACE_DECL)\n-    set_decl_namespace (decl, scope, 0);\n+  if (explicit_scope && TREE_CODE (explicit_scope) == NAMESPACE_DECL)\n+    set_decl_namespace (decl, explicit_scope, 0);\n   else\n     DECL_CONTEXT (decl) = scope;\n "}, {"sha": "14c94a890449e5f3d115f3d42b15d1ec3785c538", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -3114,42 +3114,46 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n     error (\"declaration of %qD not in a namespace surrounding %qD\",\n            decl, scope);\n   DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n-  if (scope != current_namespace)\n-    {\n-      /* See whether this has been declared in the namespace.  */\n-      old = namespace_binding (DECL_NAME (decl), scope);\n-      if (!old)\n-\t/* No old declaration at all.  */\n-\tgoto complain;\n-      /* A template can be explicitly specialized in any namespace.  */\n-      if (processing_explicit_instantiation)\n-\treturn;\n-      if (!is_overloaded_fn (decl))\n-\t/* Don't compare non-function decls with decls_match here,\n-\t   since it can't check for the correct constness at this\n-\t   point. pushdecl will find those errors later.  */\n-\treturn;\n-      /* Since decl is a function, old should contain a function decl.  */\n-      if (!is_overloaded_fn (old))\n-\tgoto complain;\n-      if (processing_template_decl || processing_specialization)\n-\t/* We have not yet called push_template_decl to turn a\n-\t   FUNCTION_DECL into a TEMPLATE_DECL, so the declarations\n-\t   won't match.  But, we'll check later, when we construct the\n-\t   template.  */\n-\treturn;\n-      if (is_overloaded_fn (old))\n-\t{\n-\t  for (; old; old = OVL_NEXT (old))\n-\t    if (decls_match (decl, OVL_CURRENT (old)))\n-\t      return;\n-\t}\n-      else\n-\tif (decls_match (decl, old))\n-\t  return;\n+\n+  /* Writing \"int N::i\" to declare a variable within \"N\" is invalid.  */ \n+  if (scope == current_namespace) \n+    {\n+      if (at_namespace_scope_p ())\n+\terror (\"explicit qualification in declaration of `%D'\",\n+\t       decl);\n+      return;\n     }\n-  else\n+\n+  /* See whether this has been declared in the namespace.  */\n+  old = namespace_binding (DECL_NAME (decl), scope);\n+  if (!old)\n+    /* No old declaration at all.  */\n+    goto complain;\n+  /* A template can be explicitly specialized in any namespace.  */\n+  if (processing_explicit_instantiation)\n+    return;\n+  if (!is_overloaded_fn (decl))\n+    /* Don't compare non-function decls with decls_match here, since\n+       it can't check for the correct constness at this\n+       point. pushdecl will find those errors later.  */\n+    return;\n+  /* Since decl is a function, old should contain a function decl.  */\n+  if (!is_overloaded_fn (old))\n+    goto complain;\n+  if (processing_template_decl || processing_specialization)\n+    /* We have not yet called push_template_decl to turn a\n+       FUNCTION_DECL into a TEMPLATE_DECL, so the declarations won't\n+       match.  But, we'll check later, when we construct the\n+       template.  */\n     return;\n+  if (is_overloaded_fn (old))\n+    {\n+      for (; old; old = OVL_NEXT (old))\n+\tif (decls_match (decl, OVL_CURRENT (old)))\n+\t  return;\n+    }\n+  else if (decls_match (decl, old))\n+      return;\n  complain:\n   error (\"%qD should have been declared inside %qD\", decl, scope);\n } "}, {"sha": "cc11f364d306766bb7744be8c1f0d1442b9ddf7a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -12296,6 +12296,9 @@ build_non_dependent_expr (tree expr)\n       || TREE_CODE (inner_expr) == TEMPLATE_DECL\n       || TREE_CODE (inner_expr) == TEMPLATE_ID_EXPR)\n     return expr;\n+  /* There is no need to return a proxy for a variable.  */\n+  if (TREE_CODE (expr) == VAR_DECL)\n+    return expr;\n   /* Preserve string constants; conversions from string constants to\n      \"char *\" are allowed, even though normally a \"const char *\"\n      cannot be used to initialize a \"char *\".  */"}, {"sha": "a4b470ecda249eea74315c21a0f757adcaa49ff2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -215,20 +215,6 @@ lvalue_p (tree ref)\n     (lvalue_p_1 (ref, /*class rvalue ok*/ 1) != clk_none);\n }\n \n-/* Return nonzero if REF is an lvalue valid for this language;\n-   otherwise, print an error message and return zero.  */\n-\n-int\n-lvalue_or_else (tree ref, const char* string)\n-{\n-  if (!lvalue_p (ref))\n-    {\n-      error (\"non-lvalue in %s\", string);\n-      return 0;\n-    }\n-  return 1;\n-}\n-\n /* Build a TARGET_EXPR, initializing the DECL with the VALUE.  */\n \n static tree"}, {"sha": "149a38896c7258c2225e20da8d422df5209d795f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -3956,7 +3956,7 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t/* Complain about anything else that is not a true lvalue.  */\n \tif (!lvalue_or_else (arg, ((code == PREINCREMENT_EXPR\n \t\t\t\t    || code == POSTINCREMENT_EXPR)\n-\t\t\t\t   ? \"increment\" : \"decrement\")))\n+\t\t\t\t   ? lv_increment : lv_decrement)))\n \t  return error_mark_node;\n \n \t/* Forbid using -- on `bool'.  */\n@@ -4100,7 +4100,7 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t is an error.  */\n       else if (TREE_CODE (argtype) != FUNCTION_TYPE\n \t       && TREE_CODE (argtype) != METHOD_TYPE\n-\t       && !lvalue_or_else (arg, \"unary %<&$>\"))\n+\t       && !lvalue_or_else (arg, lv_addressof))\n \treturn error_mark_node;\n \n       if (argtype != error_mark_node)\n@@ -5294,7 +5294,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n     case MAX_EXPR:\n       /* MIN_EXPR and MAX_EXPR are currently only permitted as lvalues,\n \t when neither operand has side-effects.  */\n-      if (!lvalue_or_else (lhs, \"assignment\"))\n+      if (!lvalue_or_else (lhs, lv_assign))\n \treturn error_mark_node;\n \n       gcc_assert (!TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0))\n@@ -5322,7 +5322,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n \t\n \t/* Check this here to avoid odd errors when trying to convert\n \t   a throw to the type of the COND_EXPR.  */\n-\tif (!lvalue_or_else (lhs, \"assignment\"))\n+\tif (!lvalue_or_else (lhs, lv_assign))\n \t  return error_mark_node;\n \n \tcond = build_conditional_expr\n@@ -5421,7 +5421,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n     }\n \n   /* The left-hand side must be an lvalue.  */\n-  if (!lvalue_or_else (lhs, \"assignment\"))\n+  if (!lvalue_or_else (lhs, lv_assign))\n     return error_mark_node;\n \n   /* Warn about modifying something that is `const'.  Don't warn if\n@@ -6230,6 +6230,15 @@ check_return_expr (tree retval)\n     /* Remember that this function did return a value.  */\n     current_function_returns_value = 1;\n \n+  /* Check for errnoneous operands -- but after giving ourselves a\n+     chance to provide an error about returning a value from a void\n+     function.  */\n+  if (error_operand_p (retval))\n+    {\n+      current_function_return_value = error_mark_node;\n+      return error_mark_node;\n+    }\n+\n   /* Only operator new(...) throw(), can return NULL [expr.new/13].  */\n   if ((DECL_OVERLOADED_OPERATOR_P (current_function_decl) == NEW_EXPR\n        || DECL_OVERLOADED_OPERATOR_P (current_function_decl) == VEC_NEW_EXPR)\n@@ -6305,8 +6314,8 @@ check_return_expr (tree retval)\n \n   /* We don't need to do any conversions when there's nothing being\n      returned.  */\n-  if (!retval || retval == error_mark_node)\n-    return retval;\n+  if (!retval)\n+    return NULL_TREE;\n \n   /* Do any required conversions.  */\n   if (retval == result || DECL_CONSTRUCTOR_P (current_function_decl))"}, {"sha": "dc9628f6d61268cfc46a29c0eb5563e3b502f30a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -1,3 +1,20 @@\n+2004-11-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18445\n+\t* g++.dg/template/crash28.C: Likewise.\n+\n+\tPR c++/18001\n+\t* g++.dg/expr/unary2.C: Adjust lvalue messages.\n+\t* g++.dg/ext/lvaddr.C: Likewise.\n+\t* g++.dg/opt/pr7503-3.C: Likewise.\n+\n+\tPR c++/18466\n+\t* g++.dg/parse/qualified3.C: New test.\n+\t* g++.old-deja/g++.other/friend7.C: Remove bogus qualification.\n+\t\n+\tPR c++/18545\n+\t* g++.dg/expr/return1.C: New test. \n+\n 2004-11-25  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tFriend class name lookup 3/n, PR c++/3332"}, {"sha": "7a64988e4b32426252ccd9767807c75c62f7688c", "filename": "gcc/testsuite/g++.dg/expr/return1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Freturn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Freturn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Freturn1.C?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/18545\n+\n+struct A;\n+\n+A foo()  // { dg-error \"\" }\n+{\n+  A a; // { dg-error \"\" }\n+  return a;\n+}"}, {"sha": "8418815918fb71cf09584f3c9a7a5e48a6bc5e2f", "filename": "gcc/testsuite/g++.dg/expr/unary2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -8,13 +8,13 @@ int n;\n \n void f(void)\n {\n-  -n = 0;        // { dg-error \"non-lvalue\" }\n-  +n = 0;        // { dg-error \"non-lvalue\" }\n+  -n = 0;        // { dg-error \"lvalue\" }\n+  +n = 0;        // { dg-error \"lvalue\" }\n }\n \n template <int>\n void g(void)\n {\n-  -n = 0;        // { dg-error \"non-lvalue\" \"\" { xfail *-*-* } }\n-  +n = 0;        // { dg-error \"non-lvalue\" \"\" { xfail *-*-* } }\n+  -n = 0;        // { dg-error \"lvalue\" \"\" { xfail *-*-* } }\n+  +n = 0;        // { dg-error \"lvalue\" \"\" { xfail *-*-* } }\n }"}, {"sha": "5b217d165949b77f3136652726bcefd57c29b303", "filename": "gcc/testsuite/g++.dg/ext/lvaddr.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvaddr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvaddr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flvaddr.C?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -6,5 +6,5 @@\n void f()\n {\n   int n;\n-  char* p = &(char) n;\t\t// { dg-error \"non-lvalue\" }\n+  char* p = &(char) n;\t\t// { dg-error \"lvalue\" }\n }"}, {"sha": "34d91ddb6c0d5aba98397185d98011aa7992bbec", "filename": "gcc/testsuite/g++.dg/opt/pr7503-3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -6,21 +6,21 @@ extern int A, B;\n \n void test1()\n {\n-  (A++ <? B) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+  (A++ <? B) = 0;  // { dg-error \"lvalue in assignment\" }\n }\n \n void test2()\n {\n-  (A <? B++) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+  (A <? B++) = 0;  // { dg-error \"lvalue in assignment\" }\n }\n \n void test3()\n {\n-  (A++ >? B) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+  (A++ >? B) = 0;  // { dg-error \"lvalue in assignment\" }\n }\n \n void test4()\n {\n-  (A >? B++) = 0;  // { dg-error \"non-lvalue in assignment\" }\n+  (A >? B++) = 0;  // { dg-error \"lvalue in assignment\" }\n }\n "}, {"sha": "ab160ab8db246aaf99777c167727fcef8e8426f3", "filename": "gcc/testsuite/g++.dg/parse/qualified3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fqualified3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fqualified3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fqualified3.C?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/18466\n+\n+int ::i; // { dg-error \"\" }\n+void ::f(); // { dg-error \"\" }\n+namespace N {\n+  int N::j; // { dg-error \"\" }\n+  void N::g(); // { dg-error \"\" }\n+}"}, {"sha": "e8b2bbb298530a2b0bd8273bdd44944282bf0033", "filename": "gcc/testsuite/g++.dg/template/crash28.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash28.C?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/18445\n+\n+struct a\n+{\n+  int what();\n+};\n+void g(void*);\n+template<class T>\n+void f()\n+{\n+  a ex;\n+  g(ex.what); // { dg-error \"\" }\n+}"}, {"sha": "aed56a187ddf4b503176573de3efd4830db61a2b", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend7.C?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -15,7 +15,7 @@ class S {\n };\n } \n \n-void (::foo)(M::S *ptr) {\n+void (foo)(M::S *ptr) {\n   M::S::s.Fn();\n   ptr->Fn();\n } "}, {"sha": "e2efecd563ca41fcb0c5e726656afc6ca8a3865c", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5ae9ba3e4511a01ac7a8694dac5fb2989c87b8c8", "patch": "@@ -819,6 +819,13 @@ check_global_declarations (tree *vec, int len)\n     {\n       decl = vec[i];\n \n+      /* Do not emit debug information about variables that are in\n+\t static storage, but not defined.  */\n+      if (TREE_CODE (decl) == VAR_DECL\n+\t  && TREE_STATIC (decl)\n+\t  && !TREE_ASM_WRITTEN (decl))\n+\tDECL_IGNORED_P (decl) = 1;\n+ \n       /* Warn about any function\n \t declared static but not defined.\n \t We don't warn about variables,"}]}