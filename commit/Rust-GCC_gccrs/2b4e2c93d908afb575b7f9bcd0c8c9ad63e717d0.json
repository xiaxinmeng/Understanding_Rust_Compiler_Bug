{"sha": "2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0ZTJjOTNkOTA4YWZiNTc1YjdmOWJjZDBjOGM5YWQ2M2U3MTdkMA==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-11-29T17:43:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-29T17:43:42Z"}, "message": "libstdc++: P1423R3 char8_t remediation (2/4)\n\nUpdate feature test macro, add deleted operators, update u8path\n\nThis patch increments the __cpp_lib_char8_t feature test macro, adds deleted\noperator<< overloads for basic_ostream, and modifies u8path to accept\nsequences of char8_t for both the C++17 implementation of std::filesystem, and\nthe filesystem TS implementation.\n\nThe implementation mechanism used for u8path differs between the C++17 and\nfilesystem TS implementations.  The changes to the former take advantage of\nC++17 'if constexpr'.  The changes to the latter retain C++11 compatibility\nand rely on tag dispatching.\n\n2019-11-29  Tom Honermann  <tom@honermann.net>\n\n\tUpdate feature test macro, add deleted operators, update u8path\n\t* include/bits/c++config: Bumped the value of the __cpp_lib_char8_t\n\tfeature test macro.\n\t* include/bits/fs_path.h (u8path): Modified u8path to accept sequences\n\tof char8_t.\n\t* include/experimental/bits/fs_path.h (u8path): Modified u8path to\n\taccept sequences of char8_t.\n\t* include/std/ostream: Added deleted overloads of wchar_t, char8_t,\n\tchar16_t, and char32_t for ordinary and wide formatted character and\n\tstring inserters.\n\nFrom-SVN: r278856", "tree": {"sha": "696633db265f9ecfc6fb989121ad0b8f725ffd9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/696633db265f9ecfc6fb989121ad0b8f725ffd9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e7d33bb9458f76a2d49209a3825940ca7fbe0b"}], "stats": {"total": 250, "additions": 216, "deletions": 34}, "files": [{"sha": "8233ecdce3c65ac300513ffc1f9ee06440cd892e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "patch": "@@ -1,5 +1,16 @@\n 2019-11-29  Tom Honermann  <tom@honermann.net>\n \n+\tUpdate feature test macro, add deleted operators, update u8path\n+\t* include/bits/c++config: Bumped the value of the __cpp_lib_char8_t\n+\tfeature test macro.\n+\t* include/bits/fs_path.h (u8path): Modified u8path to accept sequences\n+\tof char8_t.\n+\t* include/experimental/bits/fs_path.h (u8path): Modified u8path to\n+\taccept sequences of char8_t.\n+\t* include/std/ostream: Added deleted overloads of wchar_t, char8_t,\n+\tchar16_t, and char32_t for ordinary and wide formatted character and\n+\tstring inserters.\n+\n \tDecouple constraints for u8path from path constructors\n \t* include/bits/fs_path.h: Moved helper utilities out of\n \tstd::filesystem::path into a detail namespace to make them"}, {"sha": "7ccfc5f199df8826b57c69365a678148376eff5b", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "patch": "@@ -620,7 +620,7 @@ namespace std\n # endif\n #endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n-# define __cpp_lib_char8_t 201811L\n+# define __cpp_lib_char8_t 201907L\n #endif\n \n /* Define if __float128 is supported on this host. */"}, {"sha": "643478292cdcbab6a66024cb03d67de006204af2", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 60, "deletions": 22, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "patch": "@@ -154,9 +154,24 @@ namespace __detail\n \n   template<typename _Tp,\n \t   typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n-\t   typename _Val = typename std::iterator_traits<_Iter>::value_type>\n+\t   typename _Val = typename std::iterator_traits<_Iter>::value_type,\n+\t   typename _UnqualVal = std::remove_const_t<_Val>>\n     using __value_type_is_char\n-      = std::enable_if_t<std::is_same_v<std::remove_const_t<_Val>, char>>;\n+      = std::enable_if_t<std::is_same_v<_UnqualVal, char>,\n+\t\t\t _UnqualVal>;\n+\n+  template<typename _Tp,\n+\t   typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n+\t   typename _Val = typename std::iterator_traits<_Iter>::value_type,\n+\t   typename _UnqualVal = std::remove_const_t<_Val>>\n+    using __value_type_is_char_or_char8_t\n+      = std::enable_if_t<__or_v<\n+\t\t\t   std::is_same<_UnqualVal, char>\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t\t\t   , std::is_same<_UnqualVal, char8_t>\n+#endif\n+\t\t\t   >,\n+\t\t\t _UnqualVal>;\n \n } // namespace __detail\n   /// @endcond\n@@ -670,29 +685,41 @@ namespace __detail\n    */\n   template<typename _InputIterator,\n \t   typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n-\t   typename _Require2 = __detail::__value_type_is_char<_InputIterator>>\n+\t   typename _CharT\n+\t     = __detail::__value_type_is_char_or_char8_t<_InputIterator>>\n     inline path\n     u8path(_InputIterator __first, _InputIterator __last)\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      // XXX This assumes native wide encoding is UTF-16.\n-      std::codecvt_utf8_utf16<path::value_type> __cvt;\n-      path::string_type __tmp;\n-      if constexpr (is_pointer_v<_InputIterator>)\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+      if constexpr (is_same_v<_CharT, char8_t>)\n \t{\n-\t  if (__str_codecvt_in_all(__first, __last, __tmp, __cvt))\n-\t    return path{ __tmp };\n+\t  return path{ __first, __last };\n \t}\n       else\n \t{\n-\t  const std::string __u8str{__first, __last};\n-\t  const char* const __ptr = __u8str.data();\n-\t  if (__str_codecvt_in_all(__ptr, __ptr + __u8str.size(), __tmp, __cvt))\n-\t    return path{ __tmp };\n+#endif\n+\t  // XXX This assumes native wide encoding is UTF-16.\n+\t  std::codecvt_utf8_utf16<path::value_type> __cvt;\n+\t  path::string_type __tmp;\n+\t  if constexpr (is_pointer_v<_InputIterator>)\n+\t    {\n+\t      if (__str_codecvt_in_all(__first, __last, __tmp, __cvt))\n+\t\treturn path{ __tmp };\n+\t    }\n+\t  else\n+\t    {\n+\t      const std::string __u8str{__first, __last};\n+\t      const char* const __ptr = __u8str.data();\n+\t      if (__str_codecvt_in_all(__ptr, __ptr + __u8str.size(), __tmp, __cvt))\n+\t\treturn path{ __tmp };\n+\t    }\n+\t  _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n+\t      \"Cannot convert character sequence\",\n+\t      std::make_error_code(errc::illegal_byte_sequence)));\n+#ifdef _GLIBCXX_USE_CHAR8_T\n \t}\n-      _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t    \"Cannot convert character sequence\",\n-\t    std::make_error_code(errc::illegal_byte_sequence)));\n+#endif\n #else\n       // This assumes native normal encoding is UTF-8.\n       return path{ __first, __last };\n@@ -705,21 +732,32 @@ namespace __detail\n    */\n   template<typename _Source,\n \t   typename _Require = __detail::_Path<_Source>,\n-\t   typename _Require2 = __detail::__value_type_is_char<_Source>>\n+\t   typename _CharT = __detail::__value_type_is_char_or_char8_t<_Source>>\n     inline path\n     u8path(const _Source& __source)\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      if constexpr (is_convertible_v<const _Source&, std::string_view>)\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+      if constexpr (is_same_v<_CharT, char8_t>)\n \t{\n-\t  const std::string_view __s = __source;\n-\t  return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+\t  return path{ __source };\n \t}\n       else\n \t{\n-\t  std::string __s = path::_S_string_from_iter(__source);\n-\t  return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+#endif\n+\t  if constexpr (is_convertible_v<const _Source&, std::string_view>)\n+\t    {\n+\t      const std::string_view __s = __source;\n+\t      return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+\t    }\n+\t  else\n+\t    {\n+\t      std::string __s = path::_S_string_from_iter(__source);\n+\t      return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+\t    }\n+#ifdef _GLIBCXX_USE_CHAR8_T\n \t}\n+#endif\n #else\n       return path{ __source };\n #endif"}, {"sha": "b924fbfd5f6e8191ce15df9508325a4af1782b74", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "patch": "@@ -170,10 +170,23 @@ namespace __detail\n \n   template<typename _Tp,\n \t   typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n-\t   typename _Val = typename std::iterator_traits<_Iter>::value_type>\n+\t   typename _Val = typename std::iterator_traits<_Iter>::value_type,\n+\t   typename _UnqualVal = typename std::remove_const<_Val>::type>\n     using __value_type_is_char = typename std::enable_if<\n-      std::is_same<typename std::remove_const<_Val>::type, char>::value\n-      >::type;\n+      std::is_same<_UnqualVal, char>::value,\n+      _UnqualVal>::type;\n+\n+  template<typename _Tp,\n+\t   typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n+\t   typename _Val = typename std::iterator_traits<_Iter>::value_type,\n+\t   typename _UnqualVal = typename std::remove_const<_Val>::type>\n+    using __value_type_is_char_or_char8_t = typename std::enable_if<\n+      __or_<\n+\tstd::is_same<_UnqualVal, char>\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t,std::is_same<_UnqualVal, char8_t>\n+#endif\n+      >::value, _UnqualVal>::type;\n \n } // namespace __detail\n   /// @endcond\n@@ -588,13 +601,11 @@ namespace __detail\n     }\n \n   /// Create a path from a UTF-8-encoded sequence of char\n-  template<typename _InputIterator,\n-\t   typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n-\t   typename _Require2 = __detail::__value_type_is_char<_InputIterator>>\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  template<typename _InputIterator>\n     inline path\n-    u8path(_InputIterator __first, _InputIterator __last)\n+    __u8path(_InputIterator __first, _InputIterator __last, char)\n     {\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       // XXX This assumes native wide encoding is UTF-16.\n       std::codecvt_utf8_utf16<path::value_type> __cvt;\n       path::string_type __tmp;\n@@ -605,21 +616,61 @@ namespace __detail\n       _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n \t    \"Cannot convert character sequence\",\n \t    std::make_error_code(errc::illegal_byte_sequence)));\n+    }\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<typename _InputIterator>\n+    inline path\n+    __u8path(_InputIterator __first, _InputIterator __last, char8_t)\n+    {\n+      return path{ __first, __last };\n+    }\n+#endif // _GLIBCXX_USE_CHAR8_T\n+#endif // _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+\n+  template<typename _InputIterator,\n+\t   typename _Require = __detail::_Path<_InputIterator, _InputIterator>,\n+\t   typename _CharT =\n+\t     __detail::__value_type_is_char_or_char8_t<_InputIterator>>\n+    inline path\n+    u8path(_InputIterator __first, _InputIterator __last)\n+    {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+      return __u8path(__first, __last, _CharT{});\n #else\n       return path{ __first, __last };\n #endif\n     }\n \n   /// Create a path from a UTF-8-encoded sequence of char\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  template<typename _Source>\n+    inline path\n+    __u8path(const _Source& __source, char)\n+    {\n+      std::string __s = path::_S_string_from_iter(__source);\n+      return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+    }\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<typename _Source>\n+    inline path\n+    __u8path(const _Source& __source, char8_t)\n+    {\n+      return path{ __source };\n+    }\n+#endif // _GLIBCXX_USE_CHAR8_T\n+#endif // _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+\n   template<typename _Source,\n \t   typename _Require = __detail::_Path<_Source>,\n-\t   typename _Require2 = __detail::__value_type_is_char<_Source>>\n+\t   typename _CharT =\n+\t     __detail::__value_type_is_char_or_char8_t<_Source>>\n     inline path\n     u8path(const _Source& __source)\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      std::string __s = path::_S_string_from_iter(__source);\n-      return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+      return __u8path(__source, _CharT{});\n #else\n       return path{ __source };\n #endif"}, {"sha": "771c28db7b73262cdee8e9f014deff8ef814d56f", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=2b4e2c93d908afb575b7f9bcd0c8c9ad63e717d0", "patch": "@@ -527,6 +527,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)\n     { return (__out << static_cast<char>(__c)); }\n+\n+#if __cplusplus > 201703L\n+  // The following deleted overloads prevent formatting character values as\n+  // numeric values.\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, wchar_t) = delete;\n+#endif // _GLIBCXX_USE_WCHAR_T\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, char8_t) = delete;\n+#endif\n+\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, char16_t) = delete;\n+\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, char32_t) = delete;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<class _Traits>\n+    basic_ostream<wchar_t, _Traits>&\n+    operator<<(basic_ostream<wchar_t, _Traits>&, char8_t) = delete;\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n+  template<class _Traits>\n+    basic_ostream<wchar_t, _Traits>&\n+    operator<<(basic_ostream<wchar_t, _Traits>&, char16_t) = delete;\n+\n+  template<class _Traits>\n+    basic_ostream<wchar_t, _Traits>&\n+    operator<<(basic_ostream<wchar_t, _Traits>&, char32_t) = delete;\n+#endif // _GLIBCXX_USE_WCHAR_T\n+#endif // C++20\n   //@}\n \n   //@{\n@@ -582,6 +623,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_ostream<char, _Traits> &\n     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)\n     { return (__out << reinterpret_cast<const char*>(__s)); }\n+\n+#if __cplusplus > 201703L\n+   // The following deleted overloads prevent formatting strings as\n+   // pointer values.\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, const wchar_t*) = delete;\n+#endif // _GLIBCXX_USE_WCHAR_T\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, const char8_t*) = delete;\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, const char16_t*) = delete;\n+\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>&, const char32_t*) = delete;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<class _Traits>\n+    basic_ostream<wchar_t, _Traits>&\n+    operator<<(basic_ostream<wchar_t, _Traits>&, const char8_t*) = delete;\n+#endif\n+\n+  template<class _Traits>\n+    basic_ostream<wchar_t, _Traits>&\n+    operator<<(basic_ostream<wchar_t, _Traits>&, const char16_t*) = delete;\n+\n+  template<class _Traits>\n+    basic_ostream<wchar_t, _Traits>&\n+    operator<<(basic_ostream<wchar_t, _Traits>&, const char32_t*) = delete;\n+#endif // _GLIBCXX_USE_WCHAR_T\n+#endif // C++20\n   //@}\n \n   // Standard basic_ostream manipulators"}]}