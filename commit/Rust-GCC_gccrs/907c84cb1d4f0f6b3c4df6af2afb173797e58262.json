{"sha": "907c84cb1d4f0f6b3c4df6af2afb173797e58262", "node_id": "C_kwDOANBUbNoAKDkwN2M4NGNiMWQ0ZjBmNmIzYzRkZjZhZjJhZmIxNzM3OTdlNTgyNjI", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-12-21T20:00:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-12-22T22:26:14Z"}, "message": "compiler: remove unused fields\n\nThis avoids clang warnings:\n\ngcc/go/gofrontend/escape.cc:1290:17: warning: private field 'fn_' is not used [-Wunused-private-field]\ngcc/go/gofrontend/escape.cc:3478:19: warning: private field 'context_' is not used [-Wunused-private-field]\ngcc/go/gofrontend/lex.h:564:15: warning: private field 'input_file_name_' is not used [-Wunused-private-field]\ngcc/go/gofrontend/types.cc:5788:20: warning: private field 'call_' is not used [-Wunused-private-field]\ngcc/go/gofrontend/wb.cc:206:9: warning: private field 'gogo_' is not used [-Wunused-private-field]\n\nPath by Martin Li\u0161ka.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/458975", "tree": {"sha": "b65e12ef95d73cb5ca444b8a76c9197063bc620b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b65e12ef95d73cb5ca444b8a76c9197063bc620b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907c84cb1d4f0f6b3c4df6af2afb173797e58262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907c84cb1d4f0f6b3c4df6af2afb173797e58262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907c84cb1d4f0f6b3c4df6af2afb173797e58262", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907c84cb1d4f0f6b3c4df6af2afb173797e58262/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794af0d00b7086c9f0493f3a1aaac644e1fd50f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794af0d00b7086c9f0493f3a1aaac644e1fd50f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794af0d00b7086c9f0493f3a1aaac644e1fd50f6"}], "stats": {"total": 53, "additions": 19, "deletions": 34}, "files": [{"sha": "4a1a4c8c021b550a7e47ac0cc92cb5a81cb5e0a5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -1,4 +1,4 @@\n-ecc2a2e70e44fa76a75b12d0893bc1702b72a1b4\n+8c786f716c58d7973623c2b9293e2ad360877817\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "89e644278fc73dcfebf02ff65cb08ec8673c9a42", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -990,7 +990,7 @@ Gogo::analyze_escape()\n       for (std::vector<Named_object*>::iterator fn = stack.begin();\n            fn != stack.end();\n            ++fn)\n-        this->tag_function(context, *fn);\n+       this->tag_function(*fn);\n \n       if (this->debug_escape_level() != 0)\n \t{\n@@ -1246,10 +1246,10 @@ Escape_analysis_loop::statement(Block*, size_t*, Statement* s)\n class Escape_analysis_assign : public Traverse\n {\n public:\n-  Escape_analysis_assign(Escape_context* context, Named_object* fn)\n+  Escape_analysis_assign(Escape_context* context)\n     : Traverse(traverse_statements\n \t       | traverse_expressions),\n-      context_(context), fn_(fn)\n+      context_(context)\n   { }\n \n   // Model statements within a function as assignments and flows between nodes.\n@@ -1286,8 +1286,6 @@ class Escape_analysis_assign : public Traverse\n private:\n   // The escape context for this set of functions.\n   Escape_context* context_;\n-  // The current function being analyzed.\n-  Named_object* fn_;\n };\n \n // Helper function to detect self assignment like the following.\n@@ -2899,7 +2897,7 @@ Gogo::assign_connectivity(Escape_context* context, Named_object* fn)\n   int save_depth = context->loop_depth();\n   context->set_loop_depth(1);\n \n-  Escape_analysis_assign ea(context, fn);\n+  Escape_analysis_assign ea(context);\n   Function::Results* res = fn->func_value()->result_variables();\n   if (res != NULL)\n     {\n@@ -3465,17 +3463,13 @@ Gogo::propagate_escape(Escape_context* context, Node* dst)\n class Escape_analysis_tag\n {\n  public:\n-  Escape_analysis_tag(Escape_context* context)\n-    : context_(context)\n+  Escape_analysis_tag()\n   { }\n \n   // Add notes to the function's type about the escape information of its\n   // input parameters.\n   void\n   tag(Named_object* fn);\n-\n- private:\n-  Escape_context* context_;\n };\n \n void\n@@ -3580,9 +3574,9 @@ Escape_analysis_tag::tag(Named_object* fn)\n // retain analysis results across imports.\n \n void\n-Gogo::tag_function(Escape_context* context, Named_object* fn)\n+Gogo::tag_function(Named_object* fn)\n {\n-  Escape_analysis_tag eat(context);\n+  Escape_analysis_tag eat;\n   eat.tag(fn);\n }\n "}, {"sha": "53901306ef7d315e25a7467baf13be7a156b5365", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -12500,7 +12500,7 @@ Call_expression::do_type()\n   else if (results->size() == 1)\n     ret = results->begin()->type();\n   else\n-    ret = Type::make_call_multiple_result_type(this);\n+    ret = Type::make_call_multiple_result_type();\n \n   this->type_ = ret;\n "}, {"sha": "c08a16b74c279cd9dd543aa5a47b43f0ece101d9", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -879,7 +879,7 @@ class Gogo\n   // Add notes about the escape level of a function's input and output\n   // parameters for exporting and importing top level functions.\n   void\n-  tag_function(Escape_context*, Named_object*);\n+  tag_function(Named_object*);\n \n   // Reclaim memory of escape analysis Nodes.\n   void"}, {"sha": "701e5d4b353ba310f847b9d4afb4f5f0a86638ac", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -561,7 +561,7 @@ class Lex\n   gather_embed(const char*, const char*);\n \n   // The input file name.\n-  const char* input_file_name_;\n+  const char* input_file_name_ ATTRIBUTE_UNUSED;\n   // The input file.\n   FILE* input_file_;\n   // The object used to keep track of file names and line numbers."}, {"sha": "7f471eab428116cd21f7593469e0805f73b37770", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -5747,9 +5747,8 @@ Type::make_nil_type()\n class Call_multiple_result_type : public Type\n {\n  public:\n-  Call_multiple_result_type(Call_expression* call)\n-    : Type(TYPE_CALL_MULTIPLE_RESULT),\n-      call_(call)\n+  Call_multiple_result_type()\n+    : Type(TYPE_CALL_MULTIPLE_RESULT)\n   { }\n \n  protected:\n@@ -5782,18 +5781,14 @@ class Call_multiple_result_type : public Type\n   void\n   do_mangled_name(Gogo*, std::string*, bool*) const\n   { go_assert(saw_errors()); }\n-\n- private:\n-  // The expression being called.\n-  Call_expression* call_;\n };\n \n // Make a call result type.\n \n Type*\n-Type::make_call_multiple_result_type(Call_expression* call)\n+Type::make_call_multiple_result_type()\n {\n-  return new Call_multiple_result_type(call);\n+  return new Call_multiple_result_type;\n }\n \n // Class Struct_field."}, {"sha": "057fa014cee5d578fd3c56af829be29a03a34017", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -535,7 +535,7 @@ class Type\n   make_nil_type();\n \n   static Type*\n-  make_call_multiple_result_type(Call_expression*);\n+  make_call_multiple_result_type();\n \n   static Struct_type*\n   make_struct_type(Struct_field_list* fields, Location);"}, {"sha": "e039c668847a0a357552fcebb26f8e6f6c27d1fd", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907c84cb1d4f0f6b3c4df6af2afb173797e58262/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=907c84cb1d4f0f6b3c4df6af2afb173797e58262", "patch": "@@ -191,19 +191,15 @@ Mark_address_taken::expression(Expression** pexpr)\n class Check_escape : public Traverse\n {\n  public:\n-  Check_escape(Gogo* gogo)\n-    : Traverse(traverse_expressions | traverse_variables),\n-      gogo_(gogo)\n+  Check_escape()\n+    : Traverse(traverse_expressions | traverse_variables)\n   { }\n \n   int\n   expression(Expression**);\n \n   int\n   variable(Named_object*);\n-\n- private:\n-  Gogo* gogo_;\n };\n \n int\n@@ -664,7 +660,7 @@ Gogo::add_write_barriers()\n     {\n       this->propagate_writebarrierrec();\n \n-      Check_escape chk(this);\n+      Check_escape chk;\n       this->traverse(&chk);\n     }\n "}]}