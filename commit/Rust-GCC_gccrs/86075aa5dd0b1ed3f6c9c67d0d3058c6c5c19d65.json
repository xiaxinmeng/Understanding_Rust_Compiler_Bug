{"sha": "86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwNzVhYTVkZDBiMWVkM2Y2YzljNjdkMGQzMDU4YzZjNWMxOWQ2NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-01-27T09:13:27Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-01-27T09:13:27Z"}, "message": "fortran] Fix PR 85781, ICE on valid\n\n        PR fortran/85781\n        * trans-expr.c (gfc_conv_substring): Handle non-ARRAY_TYPE strings\n        of Bind(C) procedures.\n\n        PR fortran/85781\n        * gfortran.dg/bind_c_char_2.f90: New.\n        * gfortran.dg/bind_c_char_3.f90: New.\n        * gfortran.dg/bind_c_char_4.f90: New.\n        * gfortran.dg/bind_c_char_5.f90: New.", "tree": {"sha": "3a4df3f42a59eb04ea8504112bfe74248e68c562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4df3f42a59eb04ea8504112bfe74248e68c562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40bf3f1fd058028988b2625f89efe6bb811a4185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf3f1fd058028988b2625f89efe6bb811a4185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bf3f1fd058028988b2625f89efe6bb811a4185"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "bfc3b224ecb2c06829dfba7425ebabd4b6a5d718", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "patch": "@@ -1,3 +1,9 @@\n+2020-01-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/85781\n+\t* trans-expr.c (gfc_conv_substring): Handle non-ARRAY_TYPE strings\n+\tof Bind(C) procedures.\n+\n 2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parse.c (parse_omp_structured_block): Handle ST_OMP_TARGET_PARALLEL."}, {"sha": "5825a4b8ce3ca2eb3c8e63561be9af518f5d0411", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "patch": "@@ -2334,8 +2334,12 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n       else\n \ttmp = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t       se->expr);\n-      tmp = gfc_build_array_ref (tmp, start.expr, NULL);\n-      se->expr = gfc_build_addr_expr (type, tmp);\n+      /* For BIND(C), a BT_CHARACTER is not an ARRAY_TYPE.  */\n+      if (TREE_CODE (TREE_TYPE (tmp)) == ARRAY_TYPE)\n+\t{\n+\t  tmp = gfc_build_array_ref (tmp, start.expr, NULL);\n+\t  se->expr = gfc_build_addr_expr (type, tmp);\n+\t}\n     }\n \n   /* Length = end + 1 - start.  */"}, {"sha": "bcaca253aafe8a9b6121de30da07425a45b749bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "patch": "@@ -1,3 +1,11 @@\n+2020-01-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/85781\n+\t* gfortran.dg/bind_c_char_2.f90: New.\n+\t* gfortran.dg/bind_c_char_3.f90: New.\n+\t* gfortran.dg/bind_c_char_4.f90: New.\n+\t* gfortran.dg/bind_c_char_5.f90: New.\n+\n 2020-01-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/pr91298-1.c: xfail on Solaris/x86 with native"}, {"sha": "23a0cac2b4f151f50fad4511f9fcffc3799fd8dc", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_2.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_2.f90?ref=86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do run }\n+!\n+! PR fortran/85781\n+!\n+! Co-contributed by G. Steinmetz \n+\n+  use iso_c_binding, only: c_char\n+  call s(c_char_'x', 1, 1)\n+  call s(c_char_'x', 1, 0)\n+  call s(c_char_'x', 0, -2)\n+contains\n+  subroutine s(x,m,n) bind(c)\n+    use iso_c_binding, only: c_char\n+    character(kind=c_char), value :: x\n+    call foo(x(m:n), m, n)\n+    if (n < m) then\n+      if (len(x(m:n)) /= 0) stop 1\n+      if (x(m:n) /= \"\") stop 2\n+    else if (n == 1) then\n+      if (len(x(m:n)) /= 1) stop 1\n+      if (x(m:n) /= \"x\") stop 2\n+    else\n+      stop 14\n+    end if\n+    call foo(x(1:1), 1, 1)\n+    call foo(x(1:0), 1, 0)\n+    call foo(x(2:1), 2, 1)\n+    call foo(x(0:-4), 0, -4)\n+\n+    call foo(x(1:), 1, 1)\n+    call foo(x(2:), 2, 1)\n+    call foo(x(:1), 1, 1)\n+    call foo(x(:0), 1, 0)\n+\n+    if (n == 1) call foo(x(m:), m, n)\n+    if (m == 1) call foo(x(:n), m, n)\n+  end\n+  subroutine foo(str, m, n)\n+    character(len=*) :: str\n+    if (n < m) then\n+      if (len(str) /= 0) stop 11\n+      if (str /= \"\") stop 12\n+    else if (n == 1) then\n+      if (len(str) /= 1) stop 13\n+      if (str /= \"x\") stop 14\n+    else\n+      stop 14\n+    end if\n+  end\n+end"}, {"sha": "01113aad0c5cbbdd71900a76fd0768df2a818906", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_3.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_3.f90?ref=86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fcheck=all\" }\n+!\n+! PR fortran/85781\n+!\n+! Co-contributed by G. Steinmetz \n+\n+  use iso_c_binding, only: c_char\n+  call s(c_char_'x', 1, 1)\n+  call s(c_char_'x', 1, 0)\n+  call s(c_char_'x', 0, -2)\n+contains\n+  subroutine s(x,m,n) bind(c)\n+    use iso_c_binding, only: c_char\n+    character(kind=c_char), value :: x\n+    call foo(x(m:n), m, n)\n+    if (n < m) then\n+      if (len(x(m:n)) /= 0) stop 1\n+      if (x(m:n) /= \"\") stop 2\n+    else if (n == 1) then\n+      if (len(x(m:n)) /= 1) stop 1\n+      if (x(m:n) /= \"x\") stop 2\n+    else\n+      stop 14\n+    end if\n+    call foo(x(1:1), 1, 1)\n+    call foo(x(1:0), 1, 0)\n+    call foo(x(2:1), 2, 1)\n+    call foo(x(0:-4), 0, -4)\n+\n+    call foo(x(1:), 1, 1)\n+    call foo(x(2:), 2, 1)\n+    call foo(x(:1), 1, 1)\n+    call foo(x(:0), 1, 0)\n+\n+    if (n == 1) call foo(x(m:), m, n)\n+    if (m == 1) call foo(x(:n), m, n)\n+  end\n+  subroutine foo(str, m, n)\n+    character(len=*) :: str\n+    if (n < m) then\n+      if (len(str) /= 0) stop 11\n+      if (str /= \"\") stop 12\n+    else if (n == 1) then\n+      if (len(str) /= 1) stop 13\n+      if (str /= \"x\") stop 14\n+    else\n+      stop 14\n+    end if\n+  end\n+end"}, {"sha": "cce9270f1b6cc467b7e973db634b1b9e75de493c", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_4.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_4.f90?ref=86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fcheck=all\" }\n+! { dg-shouldfail \"Substring out of bounds\" }\n+!\n+! PR fortran/85781\n+!\n+! Co-contributed by G. Steinmetz \n+\n+  use iso_c_binding, only: c_char\n+  call s(c_char_'x', 1, 2)\n+contains\n+  subroutine s(x,m,n) bind(c)\n+    use iso_c_binding, only: c_char\n+    character(kind=c_char), value :: x\n+    call foo(x(m:n), m, n)\n+  end\n+  subroutine foo(str, m, n)\n+    character(len=*) :: str\n+  end\n+end\n+! { dg-output \"Fortran runtime error: Substring out of bounds: upper bound .2. of 'x' exceeds string length .1.\" }"}, {"sha": "9092dd58396a1e8c5abb8d5a80037612d5b1e7a9", "filename": "gcc/testsuite/gfortran.dg/bind_c_char_5.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_char_5.f90?ref=86075aa5dd0b1ed3f6c9c67d0d3058c6c5c19d65", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fcheck=all\" }\n+! { dg-shouldfail \"Substring out of bounds\" }\n+!\n+! PR fortran/85781\n+!\n+! Co-contributed by G. Steinmetz \n+\n+  use iso_c_binding, only: c_char\n+  call s(c_char_'x', -2, -2)\n+contains\n+  subroutine s(x,m,n) bind(c)\n+    use iso_c_binding, only: c_char\n+    character(kind=c_char), value :: x\n+    call foo(x(m:), m, n)\n+  end\n+  subroutine foo(str, m, n)\n+    character(len=*) :: str\n+  end\n+end\n+! { dg-output \"Fortran runtime error: Substring out of bounds: lower bound .-2. of 'x' is less than one\" }"}]}