{"sha": "289c5b4547dc83ab77f73917835b750fc87dae43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5YzViNDU0N2RjODNhYjc3ZjczOTE3ODM1Yjc1MGZjODdkYWU0Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-06-01T01:12:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-06-01T01:12:19Z"}, "message": "Makefile.in (c-decl.o): Depend on rtl.h and expr.h.\n\n\t* Makefile.in (c-decl.o): Depend on rtl.h and expr.h.\n\t* alias.c (struct alias_entry): alias_set is HOST_WIDE_INT.\n\t(REG_BASE_VALUE): Remove unneeded cast to unsigned.\n\t(get_alias_set_entry): ALIAS_SET arg is HOST_WIDE_INT.\n\t(find_base_decl): New function, from c_find_base_decl in c-common.c.\n\t(new_alias_set): Moved from tree.c; return is HOST_WIDE_INT.\n\t(get_alias_set): Likewise.\n\tMajor rework to do more things and allow language-specific code\n\tto just handle special-cases.\n\t(record_alias_subset): Args are HOST_WIDE_INT.\n\t(record_component_alias): Local vars are HOST_WIDE_INT.\n\tDon't handle COMPLEX_EXPR.\n\t(get_varargs_alias_set): Moved from builtins.c.\n\t(get_frame_alias_set): New function.\n\t* builtins.c (expand_builtin_return_address): Use frame alias set.\n\t(expand_builtin_setjmp, expand_builtin_longjmp): Use alias set\n\tfor setjmp buffer.\n\t(get_memory_rtx): Rework to use set_mem_attributes.\n\t(get_varargs_alias_set): Deleted from here.\n\t* c-common.c (c_apply_type_quals_to_decl): Alias sets now HOST_WIDE_INT.\n\t(c_find_base_decl): Deleted from here.\n\t(c_get_alias_set): Remove many cases and rework to just handle\n\tC-specific cases.\n\t* c-common.h (c_get_alias_set): Returns HOST_WIDE_INT.\n\t* c-decl.c (rtl.h, expr.h): Now included.\n\t(init_decl_processing): Call record_component_aliases on array types.\n\t(grokdeclarator): Likewise.\n\tSet TREE_ADDRESSABLE for all fields that are not bitfields.\n\t* c-typeck.c (common_type): Call record_component_aliases for array.\n\t* caller-save.c (setup_save_areas): Rework register loop for unsigned.\n\tSet all save areas to the frame alias set.\n\t* calls.c (initialie_argument_information): Call set_mem_attributes.\n\t(compute_argument_addresses, expand_call): Likewise.\n\t* explow.c (set_mem_attributes): New function.\n\t(stabilize): Use MEM_COPY_ATTRIBUTES and force_reg.\n\t* expr.c (struct move_by_pieces): Remove {to,from}_{struct,readonly}.\n\tLEN and OFFSET now HOST_WIDE_INT.\n\t(clear_by_pieces): Similar changes.\n\t(move_by_pieces): LEN now HOST_WIDE_INT; don't set deleted fields.\n\t(move_by_pieces_ninsns): Now returns unsigned HOST_WIDE_INT.\n\t(move_by_pieces_1): Don't use deleted fields, use MEM_COPY_ATTRIBUTES.\n\t(clear_by_pieces_1): Likewise.\n\t(emit_push_insn): Call set_mem_attributes.\n\t(expand_expr, case INDIRECT_REF): Likewise.\n\t(expand_expr, case VAR_DECL): Call change_address.\n\t* expr.h (ADD_PARM_SIZE, SUB_PARM_SIZE): Use host_integerp and\n\ttree_low_cst.\n\t(get_varargs_alias_set, get_frame_alias_set): New decls.\n\t(record_base_value, record_alias_subset, lang_get_alias_set): Likewise.\n\t(new_alias_set, set_mem_attributes): Likewse.\n\t* function.c (struct temp_slot): ALIAS_SET is HOST_WIDE_INT.\n\t(assign_stack_temp_for_type): Likewise.\n\tCan split slot even if alias set since can copy.\n\tSet MEM_ALIAS_SET and MEM_SET_IN_STRUCT_P.\n\t(assign_temp): Use host_integerp and tree_low_cst.\n\t(put_var_into_stack): Properly handle SAVE_EXPR.\n\t(put_addressof_into_stack): Likewise.\n\t(assign_parms): Call set_mem_attributes.\n\tDelete #if 0 code.\n\t(fix_lexical_address): Put reference to chain into frame alias set.\n\t(expand_function_start): Call set_mem_attributes.\n\t* integrate.c (expand_inline_function): Likewise.\n\t* recog.c (adj_offsettable_operand): Use MEM_COPY_ATTRIBUTES.\n\t* regmove.c (try_apply_stack_adjustment): Likewise.\n\t* reload.c (push_reload, make_memloc): Likewise.\n\t* reload1.c (alter_reg): Make alias sets for spilled pseudos.\n\t* rtl.def (MEM): Update comment.\n\t* rtl.h (MEM_ALIAS_SET): Now uses XCWINT.\n\t(move_by_pieces): Change length to HOST_WIDE_INT.\n\t(record_base_value, record_alias_subset): Delete from here.\n\t* stmt.c (expand_decl): Call set_mem_attributes.\n\t* stor-layout.c (finish_record_layout): Call record_component_aliases.i\n\t* toplev.c (compile_file): Call init_alias_once earlier.\n\t* tree.c (lang_get_alias_set, get_alias_set, new_alias_set): Deleted\n\tfrom here: now in alias.c.\n\t* tree.h (struct tree_type): alias_set is HOST_WIDE_INT.\n\t(struct tree_decl): Likewise.\n\t(get_alias_set, new_alias_set, lang_get_alias_set): Deleted from here.\n\t* varasm.c (make_function_rtl, make_decl_rtl): Call set_mem_attributes.\n\t(output_constant_def, force_const_mem): Likewise.\n\t* cp/Makefile.in (decl.o): Include ../expr.h.\n\t* cp/decl.c (expr.h): Include.\n\t(init_decl_processing): Call record_component_aliases for arrays.\n\t(grokdeclarator): Likewise.\n\tSet TREE_ADDRESSABLE for fields that aren't bitfields.\n\t* cp/tree.c (build_cplus_array_type_1): Call record_component_aliases.\n\nFrom-SVN: r34325", "tree": {"sha": "882c95af02309efc14a4be07fc718ad46ebc0fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/882c95af02309efc14a4be07fc718ad46ebc0fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/289c5b4547dc83ab77f73917835b750fc87dae43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289c5b4547dc83ab77f73917835b750fc87dae43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289c5b4547dc83ab77f73917835b750fc87dae43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289c5b4547dc83ab77f73917835b750fc87dae43/comments", "author": null, "committer": null, "parents": [{"sha": "149a0abf245de081243396fbbaf0ad2c8bbc5d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149a0abf245de081243396fbbaf0ad2c8bbc5d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149a0abf245de081243396fbbaf0ad2c8bbc5d54"}], "stats": {"total": 47, "additions": 18, "deletions": 29}, "files": [{"sha": "ee473f6e3f7e409f59421b08fc7dcd6e0ae25fc4", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289c5b4547dc83ab77f73917835b750fc87dae43/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289c5b4547dc83ab77f73917835b750fc87dae43/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=289c5b4547dc83ab77f73917835b750fc87dae43", "patch": "@@ -1186,7 +1186,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n       target = gen_rtx_MEM (TYPE_MODE (type),\n \t\t\t    memory_address (TYPE_MODE (type),\n \t\t\t\t\t    structure_value_addr));\n-      MEM_SET_IN_STRUCT_P (target, 1);\n+      set_mem_attributes (target, type, 1);\n     }\n \n   /* Make sure we free the things we explicitly allocated with xmalloc.  */"}, {"sha": "04937370c909aade7d91cfe2d80d1f1a4f61c392", "filename": "gcc/varasm.c", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289c5b4547dc83ab77f73917835b750fc87dae43/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289c5b4547dc83ab77f73917835b750fc87dae43/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=289c5b4547dc83ab77f73917835b750fc87dae43", "patch": "@@ -559,10 +559,12 @@ make_function_rtl (decl)\n       DECL_RTL (decl)\n \t= gen_rtx_MEM (DECL_MODE (decl),\n \t\t       gen_rtx_SYMBOL_REF (Pmode, name));\n+      set_mem_attributes (DECL_RTL (decl), decl, 1);\n \n-      /* Optionally set flags or add text to the name to record information\n-\t such as that it is a function name.  If the name is changed, the macro\n-\t ASM_OUTPUT_LABELREF will have to know how to strip this information.  */\n+      /* Optionally set flags or add text to the name to record\n+\t information such as that it is a function name.  If the name\n+\t is changed, the macro ASM_OUTPUT_LABELREF will have to know\n+\t how to strip this information.  */\n #ifdef ENCODE_SECTION_INFO\n       ENCODE_SECTION_INFO (decl);\n #endif\n@@ -798,30 +800,19 @@ make_decl_rtl (decl, asmspec, top_level)\n \t      name = new_name;\n \t    }\n \n+\t  /* If this variable is to be treated as volatile, show its\n+\t     tree node has side effects.   */\n+\t  if ((flag_volatile_global && TREE_CODE (decl) == VAR_DECL\n+\t       && TREE_PUBLIC (decl))\n+\t      || ((flag_volatile_static && TREE_CODE (decl) == VAR_DECL\n+\t\t   && (TREE_PUBLIC (decl) || TREE_STATIC (decl)))))\n+\t    TREE_SIDE_EFFECTS (decl) = 1;\n+\n \t  DECL_ASSEMBLER_NAME (decl)\n \t    = get_identifier (name[0] == '*' ? name + 1 : name);\n \t  DECL_RTL (decl) = gen_rtx_MEM (DECL_MODE (decl),\n \t\t\t\t\t gen_rtx_SYMBOL_REF (Pmode, name));\n-\t  MEM_ALIAS_SET (DECL_RTL (decl)) = get_alias_set (decl);\n-\n-\t  /* If this variable is to be treated as volatile, show its\n-\t     tree node has side effects.  If it has side effects, either\n-\t     because of this test or from TREE_THIS_VOLATILE also\n-\t     being set, show the MEM is volatile.  */\n-\t  if (flag_volatile_global && TREE_CODE (decl) == VAR_DECL\n-\t      && TREE_PUBLIC (decl))\n-\t    TREE_SIDE_EFFECTS (decl) = 1;\n-\t  else if (flag_volatile_static && TREE_CODE (decl) == VAR_DECL\n-\t       && (TREE_PUBLIC (decl) || TREE_STATIC (decl)))\n-\t    TREE_SIDE_EFFECTS (decl) = 1;\n-\n-\t  if (TREE_SIDE_EFFECTS (decl))\n-\t    MEM_VOLATILE_P (DECL_RTL (decl)) = 1;\n-\n-\t  if (TREE_READONLY (decl))\n-\t    RTX_UNCHANGING_P (DECL_RTL (decl)) = 1;\n-\t  MEM_SET_IN_STRUCT_P (DECL_RTL (decl),\n-\t\t\t       AGGREGATE_TYPE_P (TREE_TYPE (decl)));\n+\t  set_mem_attributes (DECL_RTL (decl), decl, 1);\n \n \t  /* Optionally set flags or add text to the name to record information\n \t     such as that it is a function name.\n@@ -3109,10 +3100,7 @@ output_constant_def (exp)\n \t= gen_rtx_MEM (TYPE_MODE (TREE_TYPE (exp)),\n \t\t       gen_rtx_SYMBOL_REF (Pmode, desc->label));\n \n-      RTX_UNCHANGING_P (desc->rtl) = 1;\n-      if (AGGREGATE_TYPE_P (TREE_TYPE (exp)))\n-\tMEM_SET_IN_STRUCT_P (desc->rtl, 1);\n-\n+      set_mem_attributes (desc->rtl, exp, 1);\n       pop_obstacks ();\n \n       found = 0;\n@@ -3668,8 +3656,9 @@ force_const_mem (mode, x)\n   /* We have a symbol name; construct the SYMBOL_REF and the MEM.  */\n \n   def = gen_rtx_MEM (mode, gen_rtx_SYMBOL_REF (Pmode, found));\n-\n+  set_mem_attributes (def, type_for_mode (mode, 0), 1);\n   RTX_UNCHANGING_P (def) = 1;\n+\n   /* Mark the symbol_ref as belonging to this constants pool.  */\n   CONSTANT_POOL_ADDRESS_P (XEXP (def, 0)) = 1;\n   current_function_uses_const_pool = 1;"}]}