{"sha": "d0f11b16532d9c96c3a32ec284bd4470c67ba4b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBmMTFiMTY1MzJkOWM5NmMzYTMyZWMyODRiZDQ0NzBjNjdiYTRiNA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-05-17T15:12:27Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-05-17T15:12:27Z"}, "message": "* config/arm/lib1funcs.asm (cfi_pop, cfi_push, cfi_start)\n\t(cfi_end): New macros.\n\t(RETLDM): Use cfi_pop.  Expect an eight byte stack frame.\n\t(ARM_LDIV0, THUMB_LDIV0, DIV_FUNC_END): Use CFI macros.  Create\n\tan eight byte stack frame.\n\t(__NR_tkill): Define.\n\t(__div0): Use gettid tkill on GNU/Linux.\n\t(_arm_return): Add CFI.\n\t(Lchange_\\register, .Lchange_lr): Create an eight byte stack frame.\n\nFrom-SVN: r99834", "tree": {"sha": "870785ab3ecc7693b3a7746d7f3ccb374e6dcc0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/870785ab3ecc7693b3a7746d7f3ccb374e6dcc0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4/comments", "author": null, "committer": null, "parents": [{"sha": "7032df40d1b5cfbd1a7f1ea52f2614d69c5d1145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7032df40d1b5cfbd1a7f1ea52f2614d69c5d1145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7032df40d1b5cfbd1a7f1ea52f2614d69c5d1145"}], "stats": {"total": 131, "additions": 111, "deletions": 20}, "files": [{"sha": "9d14ac2b2371edf1ce054d1caa47bad155b308f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0f11b16532d9c96c3a32ec284bd4470c67ba4b4", "patch": "@@ -1,3 +1,15 @@\n+2005-05-17  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/arm/lib1funcs.asm (cfi_pop, cfi_push, cfi_start)\n+\t(cfi_end): New macros.\n+\t(RETLDM): Use cfi_pop.  Expect an eight byte stack frame.\n+\t(ARM_LDIV0, THUMB_LDIV0, DIV_FUNC_END): Use CFI macros.  Create\n+\tan eight byte stack frame.\n+\t(__NR_tkill): Define.\n+\t(__div0): Use gettid tkill on GNU/Linux.\n+\t(_arm_return): Add CFI.\n+\t(Lchange_\\register, .Lchange_lr): Create an eight byte stack frame.\n+\n 2005-05-17  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* configure.ac: Remove spaces around assignment to"}, {"sha": "fb28ad5d5d427303d9f9de79c5b88ace88c00eaf", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 99, "deletions": 20, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f11b16532d9c96c3a32ec284bd4470c67ba4b4/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=d0f11b16532d9c96c3a32ec284bd4470c67ba4b4", "patch": "@@ -116,45 +116,108 @@ Boston, MA 02111-1307, USA.  */\n \n #endif\n \n+.macro\tcfi_pop\t\tadvance, reg, cfa_offset\n+#ifdef __ELF__\n+\t.pushsection\t.debug_frame\n+\t.byte\t0x4\t\t/* DW_CFA_advance_loc4 */\n+\t.4byte\t\\advance\n+\t.byte\t(0xc0 | \\reg)\t/* DW_CFA_restore */\n+\t.byte\t0xe\t\t/* DW_CFA_def_cfa_offset */\n+\t.uleb128 \\cfa_offset\n+\t.popsection\n+#endif\n+.endm\n+.macro\tcfi_push\tadvance, reg, offset, cfa_offset\n+#ifdef __ELF__\n+\t.pushsection\t.debug_frame\n+\t.byte\t0x4\t\t/* DW_CFA_advance_loc4 */\n+\t.4byte\t\\advance\n+\t.byte\t(0x80 | \\reg)\t/* DW_CFA_offset */\n+\t.uleb128 (\\offset / -4)\n+\t.byte\t0xe\t\t/* DW_CFA_def_cfa_offset */\n+\t.uleb128 \\cfa_offset\n+\t.popsection\n+#endif\n+.endm\n+.macro cfi_start\tstart_label, end_label\n+#ifdef __ELF__\n+\t.pushsection\t.debug_frame\n+LSYM(Lstart_frame):\n+\t.4byte\tLSYM(Lend_cie) - LSYM(Lstart_cie) @ Length of CIE\n+LSYM(Lstart_cie):\n+        .4byte\t0xffffffff\t@ CIE Identifier Tag\n+        .byte\t0x1\t@ CIE Version\n+        .ascii\t\"\\0\"\t@ CIE Augmentation\n+        .uleb128 0x1\t@ CIE Code Alignment Factor\n+        .sleb128 -4\t@ CIE Data Alignment Factor\n+        .byte\t0xe\t@ CIE RA Column\n+        .byte\t0xc\t@ DW_CFA_def_cfa\n+        .uleb128 0xd\n+        .uleb128 0x0\n+\n+\t.align 2\n+LSYM(Lend_cie):\n+\t.4byte\tLSYM(Lend_fde)-LSYM(Lstart_fde)\t@ FDE Length\n+LSYM(Lstart_fde):\n+\t.4byte\tLSYM(Lstart_frame)\t@ FDE CIE offset\n+\t.4byte\t\\start_label\t@ FDE initial location\n+\t.4byte\t\\end_label-\\start_label\t@ FDE address range\n+\t.popsection\n+#endif\n+.endm\n+.macro cfi_end\tend_label\n+#ifdef __ELF__\n+\t.pushsection\t.debug_frame\n+\t.align\t2\n+LSYM(Lend_fde):\n+\t.popsection\n+\\end_label:\n+#endif\n+.endm\n+\n /* Don't pass dirn, it's there just to get token pasting right.  */\n \n-.macro\tRETLDM\tregs=, cond=, dirn=ia\n+.macro\tRETLDM\tregs=, cond=, unwind=, dirn=ia\n #if defined (__INTERWORKING__)\n \t.ifc \"\\regs\",\"\"\n-\tldr\\cond\tlr, [sp], #4\n+\tldr\\cond\tlr, [sp], #8\n \t.else\n \tldm\\cond\\dirn\tsp!, {\\regs, lr}\n+\t.endif\n+\t.ifnc \"\\unwind\", \"\"\n+\t/* Mark LR as restored.  */\n+97:\tcfi_pop 97b - \\unwind, 0xe, 0x0\n \t.endif\n \tbx\\cond\tlr\n #else\n \t.ifc \"\\regs\",\"\"\n-\tldr\\cond\tpc, [sp], #4\n+\tldr\\cond\tpc, [sp], #8\n \t.else\n \tldm\\cond\\dirn\tsp!, {\\regs, pc}\n \t.endif\n #endif\n .endm\n \n \n-.macro ARM_LDIV0\n-LSYM(Ldiv0):\n-\tstr\tlr, [sp, #-4]!\n+.macro ARM_LDIV0 name\n+\tstr\tlr, [sp, #-8]!\n+98:\tcfi_push 98b - __\\name, 0xe, -0x8, 0x8\n \tbl\tSYM (__div0) __PLT__\n \tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n-\tRETLDM\n+\tRETLDM\tunwind=98b\n .endm\n \n \n-.macro THUMB_LDIV0\n-LSYM(Ldiv0):\n-\tpush\t{ lr }\n+.macro THUMB_LDIV0 name\n+\tpush\t{ r1, lr }\n+98:\tcfi_push 98b - __\\name, 0xe, -0x4, 0x8\n \tbl\tSYM (__div0)\n \tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n #if defined (__INTERWORKING__)\n-\tpop\t{ r1 }\n-\tbx\tr1\n+\tpop\t{ r1, r2 }\n+\tbx\tr2\n #else\n-\tpop\t{ pc }\n+\tpop\t{ r1, pc }\n #endif\n .endm\n \n@@ -163,12 +226,14 @@ LSYM(Ldiv0):\n .endm\n \n .macro DIV_FUNC_END name\n+\tcfi_start\t__\\name, LSYM(Lend_div0)\n LSYM(Ldiv0):\n #ifdef __thumb__\n-\tTHUMB_LDIV0\n+\tTHUMB_LDIV0 \\name\n #else\n-\tARM_LDIV0\n+\tARM_LDIV0 \\name\n #endif\n+\tcfi_end\tLSYM(Lend_div0)\n \tFUNC_END \\name\n .endm\n \n@@ -923,16 +988,24 @@ LSYM(Lover12):\n #define __NR_SYSCALL_BASE\t0x900000\n #define __NR_getpid\t\t\t(__NR_SYSCALL_BASE+ 20)\n #define __NR_kill\t\t\t(__NR_SYSCALL_BASE+ 37)\n+#define __NR_gettid\t\t\t(__NR_SYSCALL_BASE+ 224)\n+#define __NR_tkill\t\t\t(__NR_SYSCALL_BASE+ 238)\n \n \t.code\t32\n \tFUNC_START div0\n \n \tstmfd\tsp!, {r1, lr}\n-\tswi\t__NR_getpid\n+\tswi\t__NR_gettid\n \tcmn\tr0, #1000\n+\tswihs\t__NR_getpid\n+\tcmnhs\tr0, #1000\n \tRETLDM\tr1 hs\n+\tmov\tip, r0\n \tmov\tr1, #SIGFPE\n-\tswi\t__NR_kill\n+\tswi\t__NR_tkill\n+\tmovs\tr0, r0\n+\tmovne\tr0, ip\n+\tswine\t__NR_kill\n \tRETLDM\tr1\n \n \tFUNC_END div0\n@@ -1137,8 +1210,14 @@ LSYM(Lover12):\n \n \t.code   32\n \t.globl _arm_return\n+LSYM(Lstart_arm_return):\n+\tcfi_start\tLSYM(Lstart_arm_return) LSYM(Lend_arm_return)\n+\tcfi_push\t0, 0xe, -0x8, 0x8\n+\tnop\t@ This nop is for the benefit of debuggers, so that\n+\t\t@ backtraces will use the correct unwind information.\n _arm_return:\n-\tRETLDM\n+\tRETLDM\tunwind=LSYM(Lstart_arm_return)\n+\tcfi_end\tLSYM(Lend_arm_return)\n \n \t.globl _arm_return_r7\n _arm_return_r7:\n@@ -1179,7 +1258,7 @@ _arm_return_r11:\n \t.globl LSYM(Lchange_\\register)\n LSYM(Lchange_\\register):\n \ttst\t\\register, #1\n-\tstreq\tlr, [sp, #-4]!\n+\tstreq\tlr, [sp, #-8]!\n \tadreq\tlr, _arm_return\n \tbx\t\\register\n \n@@ -1216,7 +1295,7 @@ LSYM(Lchange_\\register):\n \t.globl .Lchange_lr\n .Lchange_lr:\n \ttst\tlr, #1\n-\tstmeqdb\tr13!, {lr}\n+\tstmeqdb\tr13!, {lr, pc}\n \tmov\tip, lr\n \tadreq\tlr, _arm_return\n \tbx\tip"}]}