{"sha": "e1008cd1d8504775e6a5e39325e396e61b39b84c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwMDhjZDFkODUwNDc3NWU2YTVlMzkzMjVlMzk2ZTYxYjM5Yjg0Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-04T12:52:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-04T13:21:34Z"}, "message": "libstdc++: Make std::copy_n work with negative and non-integral sizes\n\nSince it was added in C++11, std::copy_n and std::ranges::copy_n should\ndo nothing given a negative size, but for random access iterators we add\nthe size to the iterator, possibly resulting in undefined behaviour.\n\nAlso, C++20 clarified that std::copy_n requires the Size type to be\nconvertible to an integral type. We previously assumed that it could be\ndirectly used in arithmetic expressions, without conversion to an\nintegral type.\n\nThis also fixes a bug in the random_access_iterator_wrapper helper adds\nsome convenience aliases for using the iterator wrappers.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algobase.h (__copy_n_fn): Only call\n\tranges::copy for positive values.\n\t* include/bits/stl_algo.h (copy_n): Convert Size argument to an\n\tintegral type and only call __copy_n for positive values.\n\t* testsuite/util/testsuite_iterators.h\n\t(random_access_iterator_wrapper::operator+=): Fix range check for\n\tnegative values.\n\t(output_container, input_container, forward_container)\n\t(bidirectional_container, random_access_container): New alias\n\ttemplates.\n\t* testsuite/25_algorithms/copy_n/5.cc: New test.", "tree": {"sha": "3df865cdfe150813345a81e41e68517808edce10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3df865cdfe150813345a81e41e68517808edce10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1008cd1d8504775e6a5e39325e396e61b39b84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1008cd1d8504775e6a5e39325e396e61b39b84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1008cd1d8504775e6a5e39325e396e61b39b84c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1008cd1d8504775e6a5e39325e396e61b39b84c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a70bf6690e310fb1d4afa4b3dd1b19ddd0e2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a70bf6690e310fb1d4afa4b3dd1b19ddd0e2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a70bf6690e310fb1d4afa4b3dd1b19ddd0e2f4"}], "stats": {"total": 143, "additions": 137, "deletions": 6}, "files": [{"sha": "49ca5ed4155c09c893a3a106896e81b279da937c", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=e1008cd1d8504775e6a5e39325e396e61b39b84c", "patch": "@@ -492,13 +492,16 @@ namespace ranges\n \t\t _Out __result) const\n       {\n \tif constexpr (random_access_iterator<_Iter>)\n-\t  return ranges::copy(__first, __first + __n, std::move(__result));\n+\t  {\n+\t    if (__n > 0)\n+\t      return ranges::copy(__first, __first + __n, std::move(__result));\n+\t  }\n \telse\n \t  {\n \t    for (; __n > 0; --__n, (void)++__result, (void)++__first)\n \t      *__result = *__first;\n-\t    return {std::move(__first), std::move(__result)};\n \t  }\n+\treturn {std::move(__first), std::move(__result)};\n       }\n   };\n "}, {"sha": "b743c87cb80a325e33361242ce22cf4748d545e4", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=e1008cd1d8504775e6a5e39325e396e61b39b84c", "patch": "@@ -771,10 +771,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n \t    typename iterator_traits<_InputIterator>::value_type>)\n-      __glibcxx_requires_can_increment(__first, __n);\n-      __glibcxx_requires_can_increment(__result, __n);\n \n-      return std::__copy_n(__first, __n, __result,\n+      const auto __n2 = std::__size_to_integer(__n);\n+      if (__n2 <= 0)\n+\treturn __result;\n+\n+      __glibcxx_requires_can_increment(__first, __n2);\n+      __glibcxx_requires_can_increment(__result, __n2);\n+\n+      return std::__copy_n(__first, __n2, __result,\n \t\t\t   std::__iterator_category(__first));\n     }\n "}, {"sha": "2ea8c9da0dd759b5295779ac524638cd5a60e106", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/5.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F5.cc?ref=e1008cd1d8504775e6a5e39325e396e61b39b84c", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+void\n+test01()\n+{\n+  // Negative sizes should be a no-op\n+\n+  const int from[2] = { 1, 2 };\n+  __gnu_test::input_container<const int> f(from);\n+  int* to = nullptr;\n+  std::copy_n(f.begin(), -1, to);\n+\n+  std::copy_n(from, -20000, to); // random access\n+\n+  __gnu_test::random_access_container<const int> f2(from);\n+  std::copy_n(f2.end(), -1, to);\n+  std::copy_n(f2.begin(), -1, to);\n+}\n+\n+struct Size\n+{\n+  operator long() const { return 2L; }\n+\n+  void operator++() = delete;\n+  void operator--() = delete;\n+  void operator++(int) = delete;\n+  void operator--(int) = delete;\n+\n+  template<typename T> friend void operator+(Size, T) = delete;\n+  template<typename T> friend void operator+(T, Size) = delete;\n+  template<typename T> friend void operator-(Size, T) = delete;\n+  template<typename T> friend void operator-(T, Size) = delete;\n+  template<typename T> friend void operator==(Size, T) = delete;\n+  template<typename T> friend void operator==(T, Size) = delete;\n+  template<typename T> friend void operator!=(Size, T) = delete;\n+  template<typename T> friend void operator!=(T, Size) = delete;\n+  template<typename T> friend void operator<(Size, T) = delete;\n+  template<typename T> friend void operator<(T, Size) = delete;\n+  template<typename T> friend void operator<=(Size, T) = delete;\n+  template<typename T> friend void operator<=(T, Size) = delete;\n+  template<typename T> friend void operator>(Size, T) = delete;\n+  template<typename T> friend void operator>(T, Size) = delete;\n+  template<typename T> friend void operator>=(Size, T) = delete;\n+  template<typename T> friend void operator>=(T, Size) = delete;\n+};\n+\n+void\n+test02()\n+{\n+  // C++20 only requires that Size is convertible to an integral type,\n+  // it doesn't need to support any arithmetic or relational expressions.\n+\n+  const int from[3] = { 1, 2, 3 };\n+  __gnu_test::input_container<const int> f(from);\n+  int to[3] = { };\n+  __gnu_test::output_container<int> t(to);\n+  Size s;\n+  std::copy_n(f.begin(), s, t.begin());\n+  VERIFY( to[0] == 1 );\n+  VERIFY( to[1] == 2 );\n+  VERIFY( to[2] == 0 );\n+\n+  const int from2[3] = { 11, 22, 33 };\n+  __gnu_test::random_access_container<const int> f2(from2);\n+  __gnu_test::output_container<int> t2(to);\n+  std::copy_n(f2.begin(), s, t2.begin());\n+  VERIFY( to[0] == 11 );\n+  VERIFY( to[1] == 22 );\n+  VERIFY( to[2] == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "2eaafa16bee1b18dd1564609678d4370e61ba92a", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1008cd1d8504775e6a5e39325e396e61b39b84c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=e1008cd1d8504775e6a5e39325e396e61b39b84c", "patch": "@@ -509,7 +509,7 @@ namespace __gnu_test\n \t}\n       else\n \t{\n-\t  ITERATOR_VERIFY(n <= this->ptr - this->SharedInfo->first);\n+\t  ITERATOR_VERIFY(-n <= this->ptr - this->SharedInfo->first);\n \t  this->ptr += n;\n \t}\n       return *this;\n@@ -627,6 +627,28 @@ namespace __gnu_test\n     { return bounds.size(); }\n   };\n \n+#if __cplusplus >= 201103L\n+  template<typename T>\n+    using output_container\n+      = test_container<T, output_iterator_wrapper>;\n+\n+  template<typename T>\n+    using input_container\n+      = test_container<T, input_iterator_wrapper>;\n+\n+  template<typename T>\n+    using forward_container\n+      = test_container<T, forward_iterator_wrapper>;\n+\n+  template<typename T>\n+    using bidirectional_container\n+      = test_container<T, bidirectional_iterator_wrapper>;\n+\n+  template<typename T>\n+    using random_access_container\n+      = test_container<T, random_access_iterator_wrapper>;\n+#endif\n+\n #if __cplusplus > 201703L\n   template<typename T>\n     struct contiguous_iterator_wrapper\n@@ -690,6 +712,10 @@ namespace __gnu_test\n       { return iter -= n; }\n     };\n \n+  template<typename T>\n+    using contiguous_container\n+      = test_container<T, contiguous_iterator_wrapper>;\n+\n   // A move-only input iterator type.\n   template<typename T>\n     struct input_iterator_wrapper_nocopy : input_iterator_wrapper<T>"}]}