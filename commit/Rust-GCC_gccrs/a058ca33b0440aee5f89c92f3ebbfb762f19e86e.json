{"sha": "a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1OGNhMzNiMDQ0MGFlZTVmODljOTJmM2ViYmZiNzYyZjE5ZTg2ZQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-20T14:25:49Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:19Z"}, "message": "Added target hook for Renesas SH (or provisional one at least)", "tree": {"sha": "b6481b8253dd8e9cdace26d5d7f46dc648369e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6481b8253dd8e9cdace26d5d7f46dc648369e2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "7b788a9b7c77941838ad17fd871e8a2b6d7bfc01", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "patch": "@@ -582,6 +582,7 @@ s390*-*-*)\n # Note the 'l'; we need to be able to match e.g. \"shle\" or \"shl\".\n sh[123456789lbe]*-*-* | sh-*-*)\n \tcpu_type=sh\n+\trust_target_objs=\"sh-rust.o\"\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_objs=\"${extra_objs} sh_treg_combine.o sh-mem.o sh_optimize_sett_clrt.o\"\n \t;;"}, {"sha": "85260f1535137ed06d9dd564dec0484442575c04", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "patch": "@@ -313,6 +313,9 @@ sh_cbranch_distance (rtx_insn* cbranch_insn,\n \n extern void sh_cpu_cpp_builtins (cpp_reader* pfile);\n \n+/* Routines implemented in sh-rust.c  */\n+extern void sh_rust_target_cpu_info (void);\n+\n extern const char *output_jump_label_table (void);\n extern rtx get_t_reg_rtx (void);\n extern void sh_expand_prologue (void);"}, {"sha": "39230cc429aa880866750e9a3f407370dad0c5e9", "filename": "gcc/config/sh/sh-rust.c", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Fsh-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Fsh-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-rust.c?ref=a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "patch": "@@ -0,0 +1,163 @@\n+/* Subroutines for the Rust front end for the Renesas / SuperH SH architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for Renesas / SuperH SH targets.  */\n+\n+void sh_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"sh\");\n+\n+    // llvm appears to have no (current or historical) support, so names made up by me\n+    // TODO: should arch be cumulative or exclusive? if cumulative, what is dependency of stuff like \"e\"?\n+    // TODO: maybe distinguish between just \"sh4\" and stuff like \"sh4-200\" and \"sh4-300\"?\n+    switch ((int)sh_cpu) {\n+        case PROCESSOR_SH1:\n+            rust_add_target_info(\"target_feature\", \"sh1\");\n+            break;\n+        case PROCESSOR_SH2:\n+            rust_add_target_info(\"target_feature\", \"sh2\");\n+            break;\n+        case PROCESSOR_SH2E:\n+            rust_add_target_info(\"target_feature\", \"sh2e\");\n+            break;\n+        case PROCESSOR_SH2A:\n+            rust_add_target_info(\"target_feature\", \"sh2a\");\n+            if (TARGET_SH2A_DOUBLE) {\n+                if (TARGET_FPU_SINGLE)\n+                    rust_add_target_info(\"target_feature\", \"single\");\n+            } else {\n+                if (TARGET_FPU_ANY)\n+                    rust_add_target_info(\"target_feature\", \"single-only\");\n+                else\n+                    rust_add_target_info(\"target_feature\", \"nofpu\");\n+            }\n+            break;\n+        case PROCESSOR_SH3:      \n+            if (TARGET_HARD_SH4) {\n+                rust_add_target_info(\"target_feature\", \"sh4\");\n+                rust_add_target_info(\"target_feature\", \"nofpu\");\n+            } else {\n+                rust_add_target_info(\"target_feature\", \"sh3\");\n+            }\n+            break;\n+        case PROCESSOR_SH3E:\n+            if (TARGET_HARD_SH4) {\n+                rust_add_target_info(\"target_feature\", \"sh4\");\n+                rust_add_target_info(\"target_feature\", \"single-only\");\n+            } else {\n+                rust_add_target_info(\"target_feature\", \"sh3e\");\n+            }\n+            break;\n+        case PROCESSOR_SH4:\n+            rust_add_target_info(\"target_feature\", \"sh4\");\n+            if (TARGET_FPU_SINGLE)\n+                rust_add_target_info(\"target_feature\", \"single\");\n+            break;\n+        case PROCESSOR_SH4A:\n+            rust_add_target_info(\"target_feature\", \"sh4a\");\n+            if (TARGET_SH4) {\n+                if (TARGET_FPU_SINGLE)\n+                    rust_add_target_info(\"target_feature\", \"single\");\n+            } else {\n+                if (TARGET_FPU_ANY)\n+                    rust_add_target_info(\"target_feature\", \"single-only\");\n+                else\n+                    rust_add_target_info(\"target_feature\", \"nofpu\");\n+            }\n+            break;\n+        default: // should this be an error?\n+            break;\n+    }\n+\n+    if (TARGET_ACCUMULATE_OUTGOING_ARGS)\n+        rust_add_target_info(\"target_feature\", \"accumulate-outgoing-args\");\n+    if (TARGET_LITTLE_ENDIAN)\n+        rust_add_target_info(\"target_feature\", \"l\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"b\");\n+    if (TARGET_BIGTABLE)\n+        rust_add_target_info(\"target_feature\", \"bigtable\");\n+    if (TARGET_BITOPS)\n+        rust_add_target_info(\"target_feature\", \"bitops\");\n+    // TODO: determine way of having branch-cost, fixed-range, multcost, divsi3_libfunc as defines\n+    if (TARGET_ZDCBRANCH)\n+        rust_add_target_info(\"target_feature\", \"zdcbranch\");\n+    if (TARGET_CBRANCH_FORCE_DELAY_SLOT)\n+        rust_add_target_info(\"target_feature\", \"cbranch-force-delay-slot\");\n+    if (TARGET_ALIGN_DOUBLE)\n+        rust_add_target_info(\"target_feature\", \"dalign\");\n+    if (TARGET_DIVIDE_CALL_DIV1)\n+        rust_add_target_info(\"target_feature\", \"div-call-div1\");\n+    else if (TARGET_DIVIDE_CALL_FP)\n+        rust_add_target_info(\"target_feature\", \"div-call-fp\");\n+    else if (TARGET_DIVIDE_CALL_TABLE)\n+        rust_add_target_info(\"target_feature\", \"div-call-table\");\n+    if (TARGET_FDPIC)\n+        rust_add_target_info(\"target_feature\", \"fdpic\");\n+    if (TARGET_FMOVD)\n+        rust_add_target_info(\"target_feature\", \"fmovd\");\n+    if (TARGET_HITACHI) {\n+        rust_add_target_info(\"target_feature\", \"hitachi\");\n+        rust_add_target_info(\"target_feature\", \"renesas\");\n+    }\n+    if (TARGET_IEEE)\n+        rust_add_target_info(\"target_feature\", \"ieee\");\n+    if (TARGET_INLINE_IC_INVALIDATE)\n+        rust_add_target_info(\"target_feature\", \"inline-ic_invalidate\");\n+    if (TARGET_DUMPISIZE)\n+        rust_add_target_info(\"target_feature\", \"isize\");\n+    if (TARGET_NOMACSAVE)\n+        rust_add_target_info(\"target_feature\", \"nomacsave\");\n+    // ignoring padstruct as set to be removed\n+    if (TARGET_PREFERGOT)\n+        rust_add_target_info(\"target_feature\", \"prefergot\");\n+    if (TARGET_RELAX)\n+        rust_add_target_info(\"target_feature\", \"relax\");\n+    if (TARGET_ENABLE_TAS)\n+        rust_add_target_info(\"target_feature\", \"tas\");\n+    if (TARGET_USERMODE)\n+        rust_add_target_info(\"target_feature\", \"usermode\");\n+    if (TARGET_PRETEND_CMOVE)\n+        rust_add_target_info(\"target_feature\", \"pretend-cmove\");\n+    if (TARGET_FSCA)\n+        rust_add_target_info(\"target_feature\", \"fsca\");\n+    if (TARGET_FSRRA)\n+        rust_add_target_info(\"target_feature\", \"fsrra\");\n+    if (sh_lra_flag)\n+        rust_add_target_info(\"target_feature\", \"lra\");\n+\n+    if (selected_atomic_model().type == sh_atomic_model::none)\n+        rust_add_target_info(\"target_feature\", \"atomic-model-none\");\n+    if (TARGET_ATOMIC_SOFT_GUSA)\n+        rust_add_target_info(\"target_feature\", \"atomic-model-soft-gusa\");\n+    if (TARGET_ATOMIC_SOFT_TCB)\n+        rust_add_target_info(\"target_feature\", \"atomic-model-soft-tcb\");\n+    if (TARGET_ATOMIC_SOFT_IMASK)\n+        rust_add_target_info(\"target_feature\", \"atomic-model-soft-imask\");\n+    if (TARGET_ATOMIC_HARD_LLCS)\n+        rust_add_target_info(\"target_feature\", \"atomic-model-hard-llcs\");\n+    if (TARGET_ATOMIC_STRICT)\n+        rust_add_target_info(\"target_feature\", \"atomic-model-strict\");\n+    // TODO: maybe have gbr-offset (from atomic-model) as define?\n+}"}, {"sha": "06274120a0cc3413ef1043d3d2c8694c9fa84d1c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "patch": "@@ -31,6 +31,8 @@ extern int code_for_indirect_jump_scratch;\n \n #define TARGET_CPU_CPP_BUILTINS() sh_cpu_cpp_builtins (pfile)\n \n+#define TARGET_RUST_CPU_INFO sh_rust_target_cpu_info\n+\n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms may be accessed\n    via the stack pointer) in functions that seem suitable.  */"}, {"sha": "9d083b7fcd5dca89e0eadfbf477ae953c0c2dcef", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a058ca33b0440aee5f89c92f3ebbfb762f19e86e/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=a058ca33b0440aee5f89c92f3ebbfb762f19e86e", "patch": "@@ -25,6 +25,10 @@ sh-c.o: $(srcdir)/config/sh/sh-c.c \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/sh/sh-c.c\n \n+sh-rust.o: $(srcdir)/config/sh/sh-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n sh_treg_combine.o: $(srcdir)/config/sh/sh_treg_combine.cc \\\n   $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_H) $(TM_P_H) coretypes.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}