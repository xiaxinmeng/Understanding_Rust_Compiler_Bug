{"sha": "b4d5e41f1dd32de1f23a1897440f6fb149820430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkNWU0MWYxZGQzMmRlMWYyM2ExODk3NDQwZjZmYjE0OTgyMDQzMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-04-01T21:27:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-04-01T21:27:55Z"}, "message": "re PR c++/56100 (spurious -Wshadow warning with local variable in template class)\n\n/cp\n2015-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56100\n\t* pt.c (instantiating_current_function_p): New.\n\t* name-lookup.c (pushdecl_maybe_friend_1): Use it.\n\t* cp-tree.h (instantiating_current_function_p): Declare.\n\n/testsuite\n2015-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56100\n\t* g++.dg/warn/Wshadow-8.C: New.\n\t* g++.dg/warn/Wshadow-9.C: Likewise.\n\t* g++.dg/warn/Wshadow-10.C: Likewise.\n\t* g++.dg/warn/Wshadow-11.C: Likewise.\n\nFrom-SVN: r221814", "tree": {"sha": "ece0d14f21795f7fc4442e0481ab0d874c5064fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece0d14f21795f7fc4442e0481ab0d874c5064fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d5e41f1dd32de1f23a1897440f6fb149820430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d5e41f1dd32de1f23a1897440f6fb149820430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d5e41f1dd32de1f23a1897440f6fb149820430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d5e41f1dd32de1f23a1897440f6fb149820430/comments", "author": null, "committer": null, "parents": [{"sha": "35238bb505daa6a00cfaec9acdee2d1867788d53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35238bb505daa6a00cfaec9acdee2d1867788d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35238bb505daa6a00cfaec9acdee2d1867788d53"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "2a904a5f4f4d66e7647edfaacb3539b0987018c2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -5732,6 +5732,7 @@ extern tree get_mostly_instantiated_function_type (tree);\n extern bool problematic_instantiation_changed\t(void);\n extern void record_last_problematic_instantiation (void);\n extern struct tinst_level *current_instantiation(void);\n+extern bool instantiating_current_function_p    (void);\n extern tree maybe_get_template_decl_from_type_decl (tree);\n extern int processing_template_parmlist;\n extern bool dependent_type_p\t\t\t(tree);"}, {"sha": "e3f7cca4436bf017b49a9f8371c4837ccf214f29", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -973,9 +973,8 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t  /* If this is a locally defined typedef in a function that\n \t     is not a template instantation, record it to implement\n \t     -Wunused-local-typedefs.  */\n-\t  if (current_instantiation () == NULL\n-\t      || (current_instantiation ()->decl != current_function_decl))\n-\t  record_locally_defined_typedef (x);\n+\t  if (!instantiating_current_function_p ())\n+\t    record_locally_defined_typedef (x);\n \t}\n \n       /* Multiple external decls of the same identifier ought to match.\n@@ -1277,7 +1276,8 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n                               old and new decls are type decls.  */\n                            || (TREE_CODE (oldglobal) == TYPE_DECL\n                                && (!DECL_ARTIFICIAL (oldglobal)\n-                                   || TREE_CODE (x) == TYPE_DECL))))\n+                                   || TREE_CODE (x) == TYPE_DECL)))\n+\t\t       && !instantiating_current_function_p ())\n \t\t/* XXX shadow warnings in outer-more namespaces */\n \t\t{\n \t\t  if (warning_at (input_location, OPT_Wshadow,"}, {"sha": "28a85ebeeb7efb1e245d23b0bcb663b265c8dd4a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -20773,6 +20773,16 @@ current_instantiation (void)\n   return current_tinst_level;\n }\n \n+/* Return TRUE if current_function_decl is being instantiated, false\n+   otherwise.  */\n+\n+bool\n+instantiating_current_function_p (void)\n+{\n+  return (current_instantiation ()\n+\t  && current_instantiation ()->decl == current_function_decl);\n+}\n+\n /* [temp.param] Check that template non-type parm TYPE is of an allowable\n    type. Return zero for ok, nonzero for disallowed. Issue error and\n    warning messages under control of COMPLAIN.  */"}, {"sha": "d024bc938e423b07eb46267558a318625bbd4eda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -1,3 +1,11 @@\n+2015-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/56100\n+\t* g++.dg/warn/Wshadow-8.C: New.\n+\t* g++.dg/warn/Wshadow-9.C: Likewise.\n+\t* g++.dg/warn/Wshadow-10.C: Likewise.\n+\t* g++.dg/warn/Wshadow-11.C: Likewise.\n+\n 2015-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.dg/pr23623.c: Added aligned attribute."}, {"sha": "21d50020059062f22cbfe57e37cd86991a1cc188", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-10.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-10.C?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/56100\n+// { dg-options \"-Wshadow\" }\n+\n+struct bar\n+{\n+  template <typename T>\n+  void baz () { int foo; }\n+};\n+\n+int foo;\n+\n+int main ()\n+{\n+  bar ().baz <int> ();\n+}"}, {"sha": "d3b70c39acec1f2c24740a51e17efdfdc15c64a9", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-11.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-11.C?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/56100\n+// { dg-options \"-Wshadow\" }\n+\n+int foo;  // { dg-message \"shadowed declaration\" }\n+\n+struct bar\n+{\n+  template <typename T>\n+  void baz () { int foo; }  // { dg-warning \"shadows a global\" }\n+};\n+\n+int main ()\n+{\n+  bar ().baz <int> ();\n+}"}, {"sha": "4f1ed02f31a1ad1d60a00949af3bdf55f7b8ace7", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-8.C?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/56100\n+// { dg-options \"-Wshadow\" }\n+\n+template <typename T>\n+struct bar\n+{\n+  void baz () { int foo; }\n+};\n+\n+int foo;\n+\n+int main ()\n+{\n+  bar <int> ().baz ();\n+}"}, {"sha": "836bce62cf0c183c1808c5071dc457875127fd8d", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-9.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d5e41f1dd32de1f23a1897440f6fb149820430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-9.C?ref=b4d5e41f1dd32de1f23a1897440f6fb149820430", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/56100\n+// { dg-options \"-Wshadow\" }\n+\n+int foo;  // { dg-message \"shadowed declaration\" }\n+\n+template <typename T>\n+struct bar\n+{\n+  void baz () { int foo; }  // { dg-warning \"shadows a global\" }\n+};\n+\n+int main ()\n+{\n+  bar <int> ().baz ();\n+}"}]}