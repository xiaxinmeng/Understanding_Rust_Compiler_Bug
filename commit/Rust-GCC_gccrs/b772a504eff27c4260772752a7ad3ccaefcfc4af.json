{"sha": "b772a504eff27c4260772752a7ad3ccaefcfc4af", "node_id": "C_kwDOANBUbNoAKGI3NzJhNTA0ZWZmMjdjNDI2MDc3Mjc1MmE3YWQzY2NhZWZjZmM0YWY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T14:49:47Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:02Z"}, "message": "gccrs: Add necessary hooks for a Rust front-end testsuite\n\nThis copies over code from other front-end testsuites to enable testing\nfor the rust front-end specifically.\n\n\tgcc/testsuite/\n\t* lib/rust-dg.exp: New.\n\t* lib/rust.exp: New.\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "fdd28988f324a22cb29d5adf72db667422ac46d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdd28988f324a22cb29d5adf72db667422ac46d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b772a504eff27c4260772752a7ad3ccaefcfc4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b772a504eff27c4260772752a7ad3ccaefcfc4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b772a504eff27c4260772752a7ad3ccaefcfc4af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b772a504eff27c4260772752a7ad3ccaefcfc4af/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd950cbbb97ff5ebc203cba6c2112edd322b6f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd950cbbb97ff5ebc203cba6c2112edd322b6f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd950cbbb97ff5ebc203cba6c2112edd322b6f35"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "a8a2ac0c8eb88564262cd52fa963203a6b651c1e", "filename": "gcc/testsuite/lib/rust-dg.exp", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b772a504eff27c4260772752a7ad3ccaefcfc4af/gcc%2Ftestsuite%2Flib%2Frust-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b772a504eff27c4260772752a7ad3ccaefcfc4af/gcc%2Ftestsuite%2Flib%2Frust-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Frust-dg.exp?ref=b772a504eff27c4260772752a7ad3ccaefcfc4af", "patch": "@@ -0,0 +1,49 @@\n+# Copyright (C) 1997-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib gcc-dg.exp\n+\n+# Define rust callbacks for dg.exp.\n+\n+proc rust-dg-test { prog do_what extra_tool_flags } {\n+    return [gcc-dg-test-1 rust_target_compile $prog $do_what $extra_tool_flags]\n+}\n+\n+proc rust-dg-prune { system text } {\n+    return [gcc-dg-prune $system $text]\n+}\n+\n+# Utility routines.\n+\n+#\n+# rust_load -- wrapper around default rust_load to handle tests that\n+# require program arguments passed to them.\n+#\n+\n+if { [info procs rust_load] != [list] \\\n+      && [info procs prev_rust_load] == [list] } {\n+    rename rust_load prev_rust_load\n+\n+    proc rust_load { program args } {\n+\tglobal RUST_EXECUTE_ARGS\n+\tif [info exists RUST_EXECUTE_ARGS] then {\n+\t    set args [concat \"{$RUST_EXECUTE_ARGS}\"]\n+\t}\n+\tset result [eval [list prev_rust_load $program] $args ]\n+\treturn $result\n+    }\n+}\n+"}, {"sha": "6993c9763048292cc343c8c7a119bf653fac4d84", "filename": "gcc/testsuite/lib/rust.exp", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b772a504eff27c4260772752a7ad3ccaefcfc4af/gcc%2Ftestsuite%2Flib%2Frust.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b772a504eff27c4260772752a7ad3ccaefcfc4af/gcc%2Ftestsuite%2Flib%2Frust.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Frust.exp?ref=b772a504eff27c4260772752a7ad3ccaefcfc4af", "patch": "@@ -0,0 +1,186 @@\n+# Copyright (C) 2012-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+#\n+# rust support library routines\n+#\n+\n+load_lib prune.exp\n+load_lib gcc-defs.exp\n+load_lib timeout.exp\n+load_lib target-libpath.exp\n+\n+#\n+# RUST_UNDER_TEST is the compiler under test.\n+#\n+\n+set rust_compile_options \"\"\n+\n+\n+#\n+# rust_include_flags -- include flags for the gcc tree structure\n+#\n+\n+proc rust_include_flags { paths } {\n+    global srcdir\n+    global TESTING_IN_BUILD_TREE\n+\n+    set flags \"\"\n+\n+    if { [is_remote host] || ![info exists TESTING_IN_BUILD_TREE] } {\n+\treturn \"${flags}\"\n+    }\n+\n+    set gccpath ${paths}\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# rust_link_flags -- linker flags for the gcc tree structure\n+#\n+\n+proc rust_link_flags { paths } {\n+    global srcdir\n+    global ld_library_path\n+    global RUST_UNDER_TEST\n+    global shlib_ext\n+    global SHARED_OPTION\n+\n+    set gccpath ${paths}\n+    set libio_dir \"\"\n+    set flags \"\"\n+    set ld_library_path \".\"\n+    set shlib_ext [get_shlib_extension]\n+    set SHARED_OPTION \"\"\n+    verbose \"shared lib extension: $shlib_ext\"\n+\n+    set_ld_library_path_env_vars\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# rust_init -- called at the start of each subdir of tests\n+#\n+\n+proc rust_init { args } {\n+    global subdir\n+    global rust_initialized\n+    global base_dir\n+    global tmpdir\n+    global libdir\n+    global gluefile wrap_flags\n+    global objdir srcdir\n+    global ALWAYS_RUSTFLAGS\n+    global TOOL_EXECUTABLE TOOL_OPTIONS\n+    global RUST_UNDER_TEST\n+    global TESTING_IN_BUILD_TREE\n+    global TEST_ALWAYS_FLAGS\n+    global gcc_warning_prefix\n+    global gcc_error_prefix\n+\n+    # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n+    setenv LC_ALL C\n+    setenv LANG C\n+\n+    if ![info exists RUST_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set RUST_UNDER_TEST $TOOL_EXECUTABLE\n+\t} else {\n+\t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n+\t\tset RUST_UNDER_TEST [transform gccrs]\n+\t    } else {\n+\t\tset RUST_UNDER_TEST [findfile $base_dir/../../gccrs \"$base_dir/../../gccrs -B$base_dir/../../\" [findfile $base_dir/gccrs \"$base_dir/gccrs -B$base_dir/\" [transform gccrs]]]\n+\t    }\n+\t}\n+    }\n+\n+    if ![is_remote host] {\n+\tif { [which $RUST_UNDER_TEST] == 0 } then {\n+\t    perror \"RUST_UNDER_TEST ($RUST_UNDER_TEST) does not exist\"\n+\t    exit 1\n+\t}\n+    }\n+\n+    if ![info exists tmpdir] {\n+\tset tmpdir \"/tmp\"\n+    }\n+\n+    if [info exists gluefile] {\n+\tunset gluefile\n+    }\n+\n+    rust_maybe_build_wrapper \"${tmpdir}/rust-testglue.o\"\n+\n+    set ALWAYS_RUSTFLAGS \"\"\n+\n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tlappend ALWAYS_RUSTFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+    }\n+\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    lappend ALWAYS_RUSTFLAGS \"additional_flags=[rust_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t    lappend ALWAYS_RUSTFLAGS \"ldflags=[rust_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t} else {\n+\t    lappend ALWAYS_RUSTFLAGS \"additional_flags=[rust_include_flags [get_multilibs] ]\"\n+\t    lappend ALWAYS_RUSTFLAGS \"ldflags=[rust_link_flags [get_multilibs] ]\"\n+\t}\n+    }\n+\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend ALWAYS_RUSTFLAGS \"additional_flags=$TOOL_OPTIONS\"\n+    }\n+\n+    verbose -log \"ALWAYS_RUSTFLAGS set to $ALWAYS_RUSTFLAGS\"\n+\n+    set gcc_warning_prefix \"warning:\"\n+    set gcc_error_prefix \"(fatal )?error:\"\n+\n+    verbose \"rust is initialized\" 3\n+}\n+\n+#\n+# rust_target_compile -- compile a source file\n+#\n+\n+proc rust_target_compile { source dest type options } {\n+    global tmpdir\n+    global gluefile wrap_flags\n+    global ALWAYS_RUSTFLAGS\n+    global RUST_UNDER_TEST\n+    global individual_timeout\n+\n+    # HACK: guard against infinite loops in the compiler\n+    set individual_timeout 10\n+\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n+    }\n+\n+    lappend options \"timeout=[timeout_value]\"\n+    lappend options \"compiler=$RUST_UNDER_TEST\"\n+\n+    set options [concat \"$ALWAYS_RUSTFLAGS\" $options]\n+    set options [dg-additional-files-options $options $source]\n+\n+    return [target_compile $source $dest $type $options]\n+}"}]}