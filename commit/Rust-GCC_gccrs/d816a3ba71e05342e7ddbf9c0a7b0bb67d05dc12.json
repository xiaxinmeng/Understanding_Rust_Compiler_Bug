{"sha": "d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxNmEzYmE3MWUwNTM0MmU3ZGRiZjljMGE3YjBiYjY3ZDA1ZGMxMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-01T20:24:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-01T20:24:25Z"}, "message": "re PR c++/48593 (Wrong return type when applying address operator to inherited, template dependend member, using a typedef)\n\n\tPR c++/48593\n\t* pt.c (tsubst_qualified_id): Check PTRMEM_OK_P.\n\t* tree.c (build_qualified_name): Set PTRMEM_OK_P.\n\t* semantics.c (finish_parenthesized_expr): Clear PTRMEM_OK_P on\n\tSCOPE_REF, too.\n\t* cp-tree.h (PTRMEM_OK_P): Apply to SCOPE_REF, too.\n\t(QUALIFIED_NAME_IS_TEMPLATE): Switch to lang flag 1.\n\nFrom-SVN: r175765", "tree": {"sha": "d1ea8adbb7a89330a40f22b4d90fd74b7d2be45b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1ea8adbb7a89330a40f22b4d90fd74b7d2be45b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a771bf1cf6a6d6f785f5b6f714e9d732ccfcc757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a771bf1cf6a6d6f785f5b6f714e9d732ccfcc757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a771bf1cf6a6d6f785f5b6f714e9d732ccfcc757"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "5cfdfbf9b0eb999d49f542af6be69f6d397e6723", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "patch": "@@ -1,5 +1,13 @@\n 2011-07-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48593\n+\t* pt.c (tsubst_qualified_id): Check PTRMEM_OK_P.\n+\t* tree.c (build_qualified_name): Set PTRMEM_OK_P.\n+\t* semantics.c (finish_parenthesized_expr): Clear PTRMEM_OK_P on\n+\tSCOPE_REF, too.\n+\t* cp-tree.h (PTRMEM_OK_P): Apply to SCOPE_REF, too.\n+\t(QUALIFIED_NAME_IS_TEMPLATE): Switch to lang flag 1.\n+\n \tPR c++/48883\n \tPR c++/49609\n \t* pt.c (resolve_nondeduced_context): Call mark_used."}, {"sha": "357295c84019bc2e2d51f7e762a8f6bbcbfe487f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "patch": "@@ -53,7 +53,7 @@ c-common.h, not after.\n       TREE_INDIRECT_USING (in NAMESPACE_DECL).\n       CLEANUP_P (in TRY_BLOCK)\n       AGGR_INIT_VIA_CTOR_P (in AGGR_INIT_EXPR)\n-      PTRMEM_OK_P (in ADDR_EXPR, OFFSET_REF)\n+      PTRMEM_OK_P (in ADDR_EXPR, OFFSET_REF, SCOPE_REF)\n       PAREN_STRING_LITERAL (in STRING_CST)\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n       KOENIG_LOOKUP_P (in CALL_EXPR)\n@@ -62,7 +62,6 @@ c-common.h, not after.\n       STMT_EXPR_NO_SCOPE (in STMT_EXPR)\n       BIND_EXPR_TRY_BLOCK (in BIND_EXPR)\n       TYPENAME_IS_ENUM_P (in TYPENAME_TYPE)\n-      QUALIFIED_NAME_IS_TEMPLATE (in SCOPE_REF)\n       OMP_FOR_GIMPLIFYING_P (in OMP_FOR)\n       BASELINK_QUALIFIED_P (in BASELINK)\n       TARGET_EXPR_IMPLICIT_P (in TARGET_EXPR)\n@@ -86,6 +85,7 @@ c-common.h, not after.\n       LAMBDA_EXPR_MUTABLE_P (in LAMBDA_EXPR)\n       DECLTYPE_FOR_LAMBDA_RETURN (in DECLTYPE_TYPE)\n       DECL_FINAL_P (in FUNCTION_DECL)\n+      QUALIFIED_NAME_IS_TEMPLATE (in SCOPE_REF)\n    2: IDENTIFIER_OPNAME_P (in IDENTIFIER_NODE)\n       ICS_THIS_FLAG (in _CONV)\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (in VAR_DECL)\n@@ -3354,7 +3354,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n /* Indicates when overload resolution may resolve to a pointer to\n    member function. [expr.unary.op]/3 */\n #define PTRMEM_OK_P(NODE) \\\n-  TREE_LANG_FLAG_0 (TREE_CHECK2 ((NODE), ADDR_EXPR, OFFSET_REF))\n+  TREE_LANG_FLAG_0 (TREE_CHECK3 ((NODE), ADDR_EXPR, OFFSET_REF, SCOPE_REF))\n \n /* Get the POINTER_TYPE to the METHOD_TYPE associated with this\n    pointer to member function.  TYPE_PTRMEMFUNC_P _must_ be true,\n@@ -3801,7 +3801,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n /* True for a SCOPE_REF iff the \"template\" keyword was used to\n    indicate that the qualified name denotes a template.  */\n #define QUALIFIED_NAME_IS_TEMPLATE(NODE) \\\n-  (TREE_LANG_FLAG_0 (SCOPE_REF_CHECK (NODE)))\n+  (TREE_LANG_FLAG_1 (SCOPE_REF_CHECK (NODE)))\n \n /* True for an OMP_ATOMIC that has dependent parameters.  These are stored\n    as an expr in operand 1, and integer_zero_node in operand 0.  */"}, {"sha": "5743159814831ee3234c011379b654ab263e5e20", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "patch": "@@ -11344,7 +11344,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n       expr = (adjust_result_of_qualified_name_lookup\n \t      (expr, scope, current_class_type));\n       expr = (finish_qualified_id_expr\n-\t      (scope, expr, done, address_p,\n+\t      (scope, expr, done, address_p && PTRMEM_OK_P (qualified_id),\n \t       QUALIFIED_NAME_IS_TEMPLATE (qualified_id),\n \t       /*template_arg_p=*/false));\n     }"}, {"sha": "e29705c5782d778030b5a3a0d57f2892c845eef9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "patch": "@@ -1504,7 +1504,8 @@ finish_parenthesized_expr (tree expr)\n     /* This inhibits warnings in c_common_truthvalue_conversion.  */\n     TREE_NO_WARNING (expr) = 1;\n \n-  if (TREE_CODE (expr) == OFFSET_REF)\n+  if (TREE_CODE (expr) == OFFSET_REF\n+      || TREE_CODE (expr) == SCOPE_REF)\n     /* [expr.unary.op]/3 The qualified id of a pointer-to-member must not be\n        enclosed in parentheses.  */\n     PTRMEM_OK_P (expr) = 0;"}, {"sha": "dcd85e40c98618b6472fc7eff716923b2d0dcd81", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "patch": "@@ -1411,6 +1411,7 @@ build_qualified_name (tree type, tree scope, tree name, bool template_p)\n     return error_mark_node;\n   t = build2 (SCOPE_REF, type, scope, name);\n   QUALIFIED_NAME_IS_TEMPLATE (t) = template_p;\n+  PTRMEM_OK_P (t) = true;\n   if (type)\n     t = convert_from_reference (t);\n   return t;"}, {"sha": "a201db2df806736e4fb98e0860e0a766ec6d2cd8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "patch": "@@ -1,5 +1,8 @@\n 2011-07-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48593\n+\t* g++.dg/template/qualified-id4.C: New.\n+\n \tPR c++/48883\n \t* g++.dg/template/explicit-args4.C: New.\n "}, {"sha": "0d97cb868cbf4c07734ce89723cd6874cbbd08bf", "filename": "gcc/testsuite/g++.dg/template/qualified-id4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id4.C?ref=d816a3ba71e05342e7ddbf9c0a7b0bb67d05dc12", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/48593\n+\n+template <typename T> struct foo\n+{\n+  T data;\n+};\n+\n+template<typename T> struct bar: public foo<T>\n+{\n+  void some_func()\n+  {\n+    T* ptr = &(foo<T>::data);\n+  }\n+};\n+\n+int main()\n+{\n+  bar<int>().some_func();\n+}\n+"}]}