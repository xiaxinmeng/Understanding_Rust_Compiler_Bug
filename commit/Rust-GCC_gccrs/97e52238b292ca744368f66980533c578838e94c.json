{"sha": "97e52238b292ca744368f66980533c578838e94c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlNTIyMzhiMjkyY2E3NDQzNjhmNjY5ODA1MzNjNTc4ODM4ZTk0Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-23T10:42:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-23T10:42:10Z"}, "message": "Disable some patterns for fold-left reductions (PR 83965)\n\nIn this PR we recognised a PLUS_EXPR as a fold-left reduction,\nthen applied pattern matching to convert it to a WIDEN_SUM_EXPR.\nWe need to keep the original code in this case since we implement\nthe reduction using scalar rather than vector operations.\n\n2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/83965\n\t* tree-vect-patterns.c (vect_reassociating_reduction_p): New function.\n\t(vect_recog_dot_prod_pattern, vect_recog_sad_pattern): Use it\n\tinstead of checking only for a reduction.\n\t(vect_recog_widen_sum_pattern): Likewise.\n\ngcc/testsuite/\n\tPR tree-optimization/83965\n\t* gcc.dg/vect/pr83965.c: New test.\n\nFrom-SVN: r256976", "tree": {"sha": "5fceb56c5088a09714affe78100c8e617f08cd51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fceb56c5088a09714affe78100c8e617f08cd51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97e52238b292ca744368f66980533c578838e94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e52238b292ca744368f66980533c578838e94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e52238b292ca744368f66980533c578838e94c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e52238b292ca744368f66980533c578838e94c/comments", "author": null, "committer": null, "parents": [{"sha": "9f4b0885e77f836169c290e93faa87b58ab34276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4b0885e77f836169c290e93faa87b58ab34276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4b0885e77f836169c290e93faa87b58ab34276"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "bf5743b4dc47bd0fdda53d1985457a2b39b18247", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e52238b292ca744368f66980533c578838e94c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e52238b292ca744368f66980533c578838e94c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97e52238b292ca744368f66980533c578838e94c", "patch": "@@ -1,3 +1,11 @@\n+2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/83965\n+\t* tree-vect-patterns.c (vect_reassociating_reduction_p): New function.\n+\t(vect_recog_dot_prod_pattern, vect_recog_sad_pattern): Use it\n+\tinstead of checking only for a reduction.\n+\t(vect_recog_widen_sum_pattern): Likewise.\n+\n 2018-01-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* predict.c (probably_never_executed): Only use precise profile info."}, {"sha": "b42031bbd65101c8ffeba41a39249911b7d3ad45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e52238b292ca744368f66980533c578838e94c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e52238b292ca744368f66980533c578838e94c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97e52238b292ca744368f66980533c578838e94c", "patch": "@@ -1,3 +1,8 @@\n+2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/83965\n+\t* gcc.dg/vect/pr83965.c: New test.\n+\n 2018-01-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83963"}, {"sha": "5bf0f9020d0a83f48cc5ec6564d78755654b86d1", "filename": "gcc/testsuite/gcc.dg/vect/pr83965.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e52238b292ca744368f66980533c578838e94c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83965.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e52238b292ca744368f66980533c578838e94c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83965.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83965.c?ref=97e52238b292ca744368f66980533c578838e94c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftrapv\" } */\n+\n+int\n+mac (const short *a, const short *b, int sqr, int *sum)\n+{\n+  int i;\n+  int dotp = *sum;\n+\n+  for (i = 0; i < 150; i++)\n+    {\n+      dotp += b[i] * a[i];\n+      sqr += b[i] * b[i];\n+    }\n+\n+  *sum = dotp;\n+  return sqr;\n+}"}, {"sha": "1279352125df827c0c4bdb2cbff495e92e2b7f54", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e52238b292ca744368f66980533c578838e94c/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e52238b292ca744368f66980533c578838e94c/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=97e52238b292ca744368f66980533c578838e94c", "patch": "@@ -217,6 +217,16 @@ vect_recog_temp_ssa_var (tree type, gimple *stmt)\n   return make_temp_ssa_name (type, stmt, \"patt\");\n }\n \n+/* Return true if STMT_VINFO describes a reduction for which reassociation\n+   is allowed.  */\n+\n+static bool\n+vect_reassociating_reduction_p (stmt_vec_info stmt_vinfo)\n+{\n+  return (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_reduction_def\n+\t  && STMT_VINFO_REDUC_TYPE (stmt_vinfo) != FOLD_LEFT_REDUCTION);\n+}\n+\n /* Function vect_recog_dot_prod_pattern\n \n    Try to find the following pattern:\n@@ -336,7 +346,7 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n     {\n       gimple *def_stmt;\n \n-      if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def\n+      if (!vect_reassociating_reduction_p (stmt_vinfo)\n \t  && ! STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_vinfo))\n \treturn NULL;\n       oprnd0 = gimple_assign_rhs1 (last_stmt);\n@@ -557,7 +567,7 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n     {\n       gimple *def_stmt;\n \n-      if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def\n+      if (!vect_reassociating_reduction_p (stmt_vinfo)\n \t  && ! STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_vinfo))\n \treturn NULL;\n       plus_oprnd0 = gimple_assign_rhs1 (last_stmt);\n@@ -1181,7 +1191,7 @@ vect_recog_widen_sum_pattern (vec<gimple *> *stmts, tree *type_in,\n   if (gimple_assign_rhs_code (last_stmt) != PLUS_EXPR)\n     return NULL;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def\n+  if (!vect_reassociating_reduction_p (stmt_vinfo)\n       && ! STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_vinfo))\n     return NULL;\n "}]}