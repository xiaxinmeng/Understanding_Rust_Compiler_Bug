{"sha": "6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzMjQ0NWJmNTlkMTQ4NGE1YjZhM2FhMGQ5OTkxNmVkZTcwYjRiMQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-04T13:44:48Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-04T13:44:48Z"}, "message": "tree.h (build_function_type_array): Declare.\n\ngcc/\n\t* tree.h (build_function_type_array): Declare.\n\t(build_varargs_function_type_array): Declare.\n\t(build_function_type_vec, build_varargs_function_type_vec): Define.\n\t* tree.c (build_function_type_array_1): New function.\n\t(build_function_type_array): New function.\n\t(build_varargs_function_type_array): New function.\n\ngcc/fortran/\n\t* trans-decl.c (build_library_function_decl_1): Call\n\tbuild_function_type_vec.  Adjust argument list building accordingly.\n\t* trans-intrinsic.c (gfc_get_intrinsic_lib_fndecl): Likewise.\n\t* trans-types.c (gfc_get_function_type): Likewise.\n\nFrom-SVN: r173375", "tree": {"sha": "59050dadf44d73f3b2ea442fc54f6fb6a9c2fdf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59050dadf44d73f3b2ea442fc54f6fb6a9c2fdf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/comments", "author": null, "committer": null, "parents": [{"sha": "df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df09d1d51c9d0a5e8df630870b51dd96bcdc2325"}], "stats": {"total": 127, "additions": 93, "deletions": 34}, "files": [{"sha": "1ea87106223d8946dd590bfc2a16b25dc8a4b97c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "patch": "@@ -1,3 +1,12 @@\n+2011-05-04  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.h (build_function_type_array): Declare.\n+\t(build_varargs_function_type_array): Declare.\n+\t(build_function_type_vec, build_varargs_function_type_vec): Define.\n+\t* tree.c (build_function_type_array_1): New function.\n+\t(build_function_type_array): New function.\n+\t(build_varargs_function_type_array): New function.\n+\n 2011-05-04  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vect-loop.c (vectorizable_reduction): Check reduction cost"}, {"sha": "9544af2ed0f2eaf01be4982e4c1544877d13903a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "patch": "@@ -1,3 +1,10 @@\n+2011-05-04  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* trans-decl.c (build_library_function_decl_1): Call\n+\tbuild_function_type_vec.  Adjust argument list building accordingly.\n+\t* trans-intrinsic.c (gfc_get_intrinsic_lib_fndecl): Likewise.\n+\t* trans-types.c (gfc_get_function_type): Likewise.\n+\n 2011-05-04  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-array.c (gfc_trans_array_constructor_value): Use"}, {"sha": "e597eb3179cf38cb772675ec0a9962e6fa91e67f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "patch": "@@ -2478,8 +2478,7 @@ static tree\n build_library_function_decl_1 (tree name, const char *spec,\n \t\t\t       tree rettype, int nargs, va_list p)\n {\n-  tree arglist;\n-  tree argtype;\n+  VEC(tree,gc) *arglist;\n   tree fntype;\n   tree fndecl;\n   int n;\n@@ -2488,20 +2487,18 @@ build_library_function_decl_1 (tree name, const char *spec,\n   gcc_assert (current_function_decl == NULL_TREE);\n \n   /* Create a list of the argument types.  */\n-  for (arglist = NULL_TREE, n = abs (nargs); n > 0; n--)\n+  arglist = VEC_alloc (tree, gc, abs (nargs));\n+  for (n = abs (nargs); n > 0; n--)\n     {\n-      argtype = va_arg (p, tree);\n-      arglist = gfc_chainon_list (arglist, argtype);\n-    }\n-\n-  if (nargs >= 0)\n-    {\n-      /* Terminate the list.  */\n-      arglist = chainon (arglist, void_list_node);\n+      tree argtype = va_arg (p, tree);\n+      VEC_quick_push (tree, arglist, argtype);\n     }\n \n   /* Build the function type and decl.  */\n-  fntype = build_function_type (rettype, arglist);\n+  if (nargs >= 0)\n+    fntype = build_function_type_vec (rettype, arglist);\n+  else\n+    fntype = build_varargs_function_type_vec (rettype, arglist);\n   if (spec)\n     {\n       tree attr_args = build_tree_list (NULL_TREE,"}, {"sha": "6554df076d7e66f0b2e5eb5964ca1701e6e24017", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "patch": "@@ -722,7 +722,7 @@ static tree\n gfc_get_intrinsic_lib_fndecl (gfc_intrinsic_map_t * m, gfc_expr * expr)\n {\n   tree type;\n-  tree argtypes;\n+  VEC(tree,gc) *argtypes;\n   tree fndecl;\n   gfc_actual_arglist *actual;\n   tree *pdecl;\n@@ -803,14 +803,13 @@ gfc_get_intrinsic_lib_fndecl (gfc_intrinsic_map_t * m, gfc_expr * expr)\n \t\tts->kind);\n     }\n \n-  argtypes = NULL_TREE;\n+  argtypes = NULL;\n   for (actual = expr->value.function.actual; actual; actual = actual->next)\n     {\n       type = gfc_typenode_for_spec (&actual->expr->ts);\n-      argtypes = gfc_chainon_list (argtypes, type);\n+      VEC_safe_push (tree, gc, argtypes, type);\n     }\n-  argtypes = chainon (argtypes, void_list_node);\n-  type = build_function_type (gfc_typenode_for_spec (ts), argtypes);\n+  type = build_function_type_vec (gfc_typenode_for_spec (ts), argtypes);\n   fndecl = build_decl (input_location,\n \t\t       FUNCTION_DECL, get_identifier (name), type);\n "}, {"sha": "cc82037f8b187c0c4f509498d94f3a4af02f1631", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "patch": "@@ -2534,10 +2534,11 @@ tree\n gfc_get_function_type (gfc_symbol * sym)\n {\n   tree type;\n-  tree typelist;\n+  VEC(tree,gc) *typelist;\n   gfc_formal_arglist *f;\n   gfc_symbol *arg;\n   int alternate_return;\n+  bool is_varargs = true;\n \n   /* Make sure this symbol is a function, a subroutine or the main\n      program.  */\n@@ -2548,13 +2549,11 @@ gfc_get_function_type (gfc_symbol * sym)\n     return TREE_TYPE (sym->backend_decl);\n \n   alternate_return = 0;\n-  typelist = NULL_TREE;\n+  typelist = NULL;\n \n   if (sym->attr.entry_master)\n-    {\n-      /* Additional parameter for selecting an entry point.  */\n-      typelist = gfc_chainon_list (typelist, gfc_array_index_type);\n-    }\n+    /* Additional parameter for selecting an entry point.  */\n+    VEC_safe_push (tree, gc, typelist, gfc_array_index_type);\n \n   if (sym->result)\n     arg = sym->result;\n@@ -2573,17 +2572,17 @@ gfc_get_function_type (gfc_symbol * sym)\n \t  || arg->ts.type == BT_CHARACTER)\n \ttype = build_reference_type (type);\n \n-      typelist = gfc_chainon_list (typelist, type);\n+      VEC_safe_push (tree, gc, typelist, type);\n       if (arg->ts.type == BT_CHARACTER)\n \t{\n \t  if (!arg->ts.deferred)\n \t    /* Transfer by value.  */\n-\t    typelist = gfc_chainon_list (typelist, gfc_charlen_type_node);\n+\t    VEC_safe_push (tree, gc, typelist, gfc_charlen_type_node);\n \t  else\n \t    /* Deferred character lengths are transferred by reference\n \t       so that the value can be returned.  */\n-\t    typelist = gfc_chainon_list (typelist,\n-\t\t\t\tbuild_pointer_type (gfc_charlen_type_node));\n+\t    VEC_safe_push (tree, gc, typelist,\n+\t\t\t   build_pointer_type (gfc_charlen_type_node));\n \t}\n     }\n \n@@ -2621,7 +2620,7 @@ gfc_get_function_type (gfc_symbol * sym)\n \t     used without an explicit interface, and cannot be passed as\n \t     actual parameters for a dummy procedure.  */\n \n-\t  typelist = gfc_chainon_list (typelist, type);\n+\t  VEC_safe_push (tree, gc, typelist, type);\n \t}\n       else\n         {\n@@ -2644,14 +2643,14 @@ gfc_get_function_type (gfc_symbol * sym)\n \t       so that the value can be returned.  */\n \t    type = build_pointer_type (gfc_charlen_type_node);\n \n-\t  typelist = gfc_chainon_list (typelist, type);\n+\t  VEC_safe_push (tree, gc, typelist, type);\n \t}\n     }\n \n-  if (typelist)\n-    typelist = chainon (typelist, void_list_node);\n-  else if (sym->attr.is_main_program || sym->attr.if_source != IFSRC_UNKNOWN)\n-    typelist = void_list_node;\n+  if (!VEC_empty (tree, typelist)\n+      || sym->attr.is_main_program\n+      || sym->attr.if_source != IFSRC_UNKNOWN)\n+    is_varargs = false;\n \n   if (alternate_return)\n     type = integer_type_node;\n@@ -2690,7 +2689,10 @@ gfc_get_function_type (gfc_symbol * sym)\n   else\n     type = gfc_sym_type (sym);\n \n-  type = build_function_type (type, typelist);\n+  if (is_varargs)\n+    type = build_varargs_function_type_vec (type, typelist);\n+  else\n+    type = build_function_type_vec (type, typelist);\n   type = create_fn_spec (sym, type);\n \n   return type;"}, {"sha": "baf6f2b7ac8547a5f449a2ba3d1c6d7ac034d3ef", "filename": "gcc/tree.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "patch": "@@ -7640,6 +7640,44 @@ build_varargs_function_type_list (tree return_type, ...)\n   return args;\n }\n \n+/* Build a function type.  RETURN_TYPE is the type returned by the\n+   function; VAARGS indicates whether the function takes varargs.  The\n+   function takes N named arguments, the types of which are provided in\n+   ARG_TYPES.  */\n+\n+static tree\n+build_function_type_array_1 (bool vaargs, tree return_type, int n,\n+\t\t\t     tree *arg_types)\n+{\n+  int i;\n+  tree t = vaargs ? NULL_TREE : void_list_node;\n+\n+  for (i = n - 1; i >= 0; i--)\n+    t = tree_cons (NULL_TREE, arg_types[i], t);\n+\n+  return build_function_type (return_type, t);\n+}\n+\n+/* Build a function type.  RETURN_TYPE is the type returned by the\n+   function.  The function takes N named arguments, the types of which\n+   are provided in ARG_TYPES.  */\n+\n+tree\n+build_function_type_array (tree return_type, int n, tree *arg_types)\n+{\n+  return build_function_type_array_1 (false, return_type, n, arg_types);\n+}\n+\n+/* Build a variable argument function type.  RETURN_TYPE is the type\n+   returned by the function.  The function takes N named arguments, the\n+   types of which are provided in ARG_TYPES.  */\n+\n+tree\n+build_varargs_function_type_array (tree return_type, int n, tree *arg_types)\n+{\n+  return build_function_type_array_1 (true, return_type, n, arg_types);\n+}\n+\n /* Build a METHOD_TYPE for a member of BASETYPE.  The RETTYPE (a TYPE)\n    and ARGTYPES (a TREE_LIST) are the return type and arguments types\n    for the method.  An implicit additional parameter (of type"}, {"sha": "5034b58545aaabfb06b1e9128fb3c65e27b0dc10", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c32445bf59d1484a5b6a3aa0d99916ede70b4b1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6c32445bf59d1484a5b6a3aa0d99916ede70b4b1", "patch": "@@ -4256,6 +4256,13 @@ extern tree build_function_type_list (tree, ...);\n extern tree build_function_type_skip_args (tree, bitmap);\n extern tree build_function_decl_skip_args (tree, bitmap);\n extern tree build_varargs_function_type_list (tree, ...);\n+extern tree build_function_type_array (tree, int, tree *);\n+extern tree build_varargs_function_type_array (tree, int, tree *);\n+#define build_function_type_vec(RET, V) \\\n+  build_function_type_array (RET, VEC_length (tree, V), VEC_address (tree, V))\n+#define build_varargs_function_type_vec(RET, V) \\\n+  build_varargs_function_type_array (RET, VEC_length (tree, V), \\\n+\t\t\t\t     VEC_address (tree, V))\n extern tree build_method_type_directly (tree, tree, tree);\n extern tree build_method_type (tree, tree);\n extern tree build_offset_type (tree, tree);"}]}