{"sha": "2cf63121e9640348fa3d917dfb247da545255c61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmNjMxMjFlOTY0MDM0OGZhM2Q5MTdkZmIyNDdkYTU0NTI1NWM2MQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@imgtec.com", "date": "2016-11-15T15:04:10Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2016-11-15T15:04:10Z"}, "message": "MIPS/GCC: Mark trailing labels with `.insn'\n\n\tgcc/\n\t* config/mips/mips.c (mips16_emit_constants): Emit `consttable'\n\tinsn at the beginning of the constant pool.\n\t(mips_insert_insn_pseudos): New function.\n\t(mips_machine_reorg2): Call it.\n\t* config/mips/mips.md (unspec): Add UNSPEC_CONSTTABLE and\n\tUNSPEC_INSN_PSEUDO enum values.\n\t(insn_pseudo, consttable): New insns.\n\n\tgcc/testsuite/\n\t* gcc.target/mips/insn-casesi.c: New test case.\n\t* gcc.target/mips/insn-pseudo-1.c: New test case.\n\t* gcc.target/mips/insn-pseudo-2.c: New test case.\n\t* gcc.target/mips/insn-pseudo-3.c: New test case.\n\t* gcc.target/mips/insn-pseudo-4.c: New test case.\n\t* gcc.target/mips/insn-tablejump.c: New test case.\n\nFrom-SVN: r242424", "tree": {"sha": "2f35928d460c861c13f39e0a75ac296e83cc718c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f35928d460c861c13f39e0a75ac296e83cc718c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cf63121e9640348fa3d917dfb247da545255c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf63121e9640348fa3d917dfb247da545255c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf63121e9640348fa3d917dfb247da545255c61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf63121e9640348fa3d917dfb247da545255c61/comments", "author": null, "committer": null, "parents": [{"sha": "2cbfb2091148947e85bbe2e3a4093541a1e99110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cbfb2091148947e85bbe2e3a4093541a1e99110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cbfb2091148947e85bbe2e3a4093541a1e99110"}], "stats": {"total": 387, "additions": 387, "deletions": 0}, "files": [{"sha": "b91bf89652c2a5637574c4b9beab5b95bd2ea897", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -1,3 +1,13 @@\n+2016-11-15  Maciej W. Rozycki  <macro@imgtec.com>\n+\n+\t* config/mips/mips.c (mips16_emit_constants): Emit `consttable'\n+\tinsn at the beginning of the constant pool.\n+\t(mips_insert_insn_pseudos): New function.\n+\t(mips_machine_reorg2): Call it.\n+\t* config/mips/mips.md (unspec): Add UNSPEC_CONSTTABLE and\n+\tUNSPEC_INSN_PSEUDO enum values.\n+\t(insn_pseudo, consttable): New insns.\n+\n 2016-11-15  Michael Matz  <matz@suse.de>\n \n \tPR missed-optimization/77881"}, {"sha": "44cdeb72c1d41823091e4032983ae472cdfa53c3", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -17140,6 +17140,8 @@ mips16_emit_constants (struct mips16_constant *constants, rtx_insn *insn)\n   int align;\n \n   align = 0;\n+  if (constants)\n+    insn = emit_insn_after (gen_consttable (), insn);\n   for (c = constants; c != NULL; c = next)\n     {\n       /* If necessary, increase the alignment of PC.  */\n@@ -19015,6 +19017,46 @@ mips16_split_long_branches (void)\n   while (something_changed);\n }\n \n+/* Insert a `.insn' assembly pseudo-op after any labels followed by\n+   a MIPS16 constant pool or no insn at all.  This is needed so that\n+   targets that have been optimized away are still marked as code\n+   and therefore branches that remained and point to them are known\n+   to retain the ISA mode and as such can be successfully assembled.  */\n+\n+static void\n+mips_insert_insn_pseudos (void)\n+{\n+  bool insn_pseudo_needed = TRUE;\n+  rtx_insn *insn;\n+\n+  for (insn = get_last_insn (); insn != NULL_RTX; insn = PREV_INSN (insn))\n+    switch (GET_CODE (insn))\n+      {\n+      case INSN:\n+\tif (GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+\t    && XINT (PATTERN (insn), 1) == UNSPEC_CONSTTABLE)\n+\t  {\n+\t    insn_pseudo_needed = TRUE;\n+\t    break;\n+\t  }\n+\t/* Fall through.  */\n+      case JUMP_INSN:\n+      case CALL_INSN:\n+      case JUMP_TABLE_DATA:\n+\tinsn_pseudo_needed = FALSE;\n+\tbreak;\n+      case CODE_LABEL:\n+\tif (insn_pseudo_needed)\n+\t  {\n+\t    emit_insn_after (gen_insn_pseudo (), insn);\n+\t    insn_pseudo_needed = FALSE;\n+\t  }\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+}\n+\n /* Implement TARGET_MACHINE_DEPENDENT_REORG.  */\n \n static void\n@@ -19050,6 +19092,7 @@ mips_machine_reorg2 (void)\n        optimizations, but this should be an extremely rare case anyhow.  */\n     mips_reorg_process_insns ();\n   mips16_split_long_branches ();\n+  mips_insert_insn_pseudos ();\n   return 0;\n }\n "}, {"sha": "b7e8e96820d77aa98a0f5c2e650bd6366c135967", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -120,6 +120,7 @@\n \n   ;; MIPS16 constant pools.\n   UNSPEC_ALIGN\n+  UNSPEC_CONSTTABLE\n   UNSPEC_CONSTTABLE_INT\n   UNSPEC_CONSTTABLE_FLOAT\n \n@@ -151,6 +152,9 @@\n \n   ;; Stack checking.\n   UNSPEC_PROBE_STACK_RANGE\n+\n+  ;; The `.insn' pseudo-op.\n+  UNSPEC_INSN_PSEUDO\n ])\n \n (define_constants\n@@ -7174,6 +7178,14 @@\n       return \"#nop\";\n   }\n   [(set_attr \"type\"\t\"nop\")])\n+\n+;; The `.insn' pseudo-op.\n+(define_insn \"insn_pseudo\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_INSN_PSEUDO)]\n+  \"\"\n+  \".insn\"\n+  [(set_attr \"mode\" \"none\")\n+   (set_attr \"insn_count\" \"0\")])\n \f\n ;; MIPS4 Conditional move instructions.\n \n@@ -7308,6 +7320,13 @@\n ;;  ....................\n ;;\n \n+(define_insn \"consttable\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_CONSTTABLE)]\n+  \"\"\n+  \"\"\n+  [(set_attr \"mode\" \"none\")\n+   (set_attr \"insn_count\" \"0\")])\n+\n (define_insn \"consttable_tls_reloc\"\n   [(unspec_volatile [(match_operand 0 \"tls_reloc_operand\" \"\")\n \t\t     (match_operand 1 \"const_int_operand\" \"\")]"}, {"sha": "e0c99bf50a2d37749334f3bde8305bdf7da42e01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -1,3 +1,12 @@\n+2016-11-15  Maciej W. Rozycki  <macro@imgtec.com>\n+\n+\t* gcc.target/mips/insn-casesi.c: New test case.\n+\t* gcc.target/mips/insn-pseudo-1.c: New test case.\n+\t* gcc.target/mips/insn-pseudo-2.c: New test case.\n+\t* gcc.target/mips/insn-pseudo-3.c: New test case.\n+\t* gcc.target/mips/insn-pseudo-4.c: New test case.\n+\t* gcc.target/mips/insn-tablejump.c: New test case.\n+\n 2016-11-15  Maciej W. Rozycki  <macro@imgtec.com>\n \n \t* gcc.target/mips/mips.exp (mips_option_tests): Add"}, {"sha": "2b4c9f21986fab07ae9524b5e51c8a4ccbc1d092", "filename": "gcc/testsuite/gcc.target/mips/insn-casesi.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-casesi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-casesi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-casesi.c?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -0,0 +1,112 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+\n+int __attribute__ ((noinline))\n+frob (int i)\n+{\n+  switch (i)\n+    {\n+    case -5:\n+      return -2;\n+    case -3:\n+      return -1;\n+    case 0:\n+      return 0;\n+    case 3:\n+      return 1;\n+    case 5:\n+      break;\n+    default:\n+      __builtin_unreachable ();\n+    }\n+  return i;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  asm (\"\" : \"+r\" (argc));\n+  argc = frob ((argc & 10) - 5);\n+  asm (\"\" : \"+r\" (argc));\n+  return !argc;\n+}\n+\n+/* This will result in assembly like:\n+\n+\t.text\n+\t.align\t2\n+\t.globl\tfrob\n+\t.set\tmips16\n+\t.set\tnomicromips\n+\t.ent\tfrob\n+\t.type\tfrob, @function\n+frob:\n+\t.frame\t$sp,0,$31\t\t# vars= 0, regs= 0/0, args= 0, gp= 0\n+\t.mask\t0x00000000,0\n+\t.fmask\t0x00000000,0\n+\taddiu\t$2,$4,5\n+\tsltu\t$2,11\n+\tbteqz\t$L2\n+\tsll\t$3,$2,1\n+\tla\t$2,$L4\n+\taddu\t$3,$2,$3\n+\tlh\t$3,0($3)\n+\taddu\t$2,$2,$3\n+\tj\t$2\n+\t.align\t1\n+\t.align\t2\n+$L4:\n+\t.half\t$L3-$L4\n+\t.half\t$L2-$L4\n+\t.half\t$L9-$L4\n+\t.half\t$L2-$L4\n+\t.half\t$L2-$L4\n+\t.half\t$L8-$L4\n+\t.half\t$L2-$L4\n+\t.half\t$L2-$L4\n+\t.half\t$L7-$L4\n+\t.half\t$L2-$L4\n+\t.half\t$L8-$L4\n+$L8:\n+\t.set\tnoreorder\n+\t.set\tnomacro\n+\tjr\t$31\n+\tmove\t$2,$4\n+\t.set\tmacro\n+\t.set\treorder\n+\n+$L9:\n+\tli\t$2,1\n+\t.set\tnoreorder\n+\t.set\tnomacro\n+\tjr\t$31\n+\tneg\t$2,$2\n+\t.set\tmacro\n+\t.set\treorder\n+\n+$L3:\n+\tli\t$2,2\n+\t.set\tnoreorder\n+\t.set\tnomacro\n+\tjr\t$31\n+\tneg\t$2,$2\n+\t.set\tmacro\n+\t.set\treorder\n+\n+$L7:\n+\t.set\tnoreorder\n+\t.set\tnomacro\n+\tjr\t$31\n+\tli\t$2,1\n+\t.set\tmacro\n+\t.set\treorder\n+\n+$L2:\n+\t.insn\n+\t.end\tfrob\n+\t.size\tfrob, .-frob\n+\n+  for `frob' and we want to make sure it links correctly owing to the\n+  `.insn' pseudo-op which needs to be there at `$L2' as there's no\n+  code following and the label is a MIPS16 branch target (even though\n+  the branch is never taken.  See also insn-tablejump.c.  */"}, {"sha": "42501952f9cee93216dc0af57d5a92cd5b1c9b73", "filename": "gcc/testsuite/gcc.target/mips/insn-pseudo-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-1.c?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-micromips -mno-mips16\" } */\n+\n+void\n+unreachable (int i)\n+{\n+  asm volatile goto (\"b\\t.\\n\\tbeqz\\t%0,%l1\" : : \"r\" (i) : : punt);\n+punt:\n+  __builtin_unreachable ();\n+}\n+\n+/* Expect assembly like:\n+\n+\tbeqz\t$4,$L2\n+\t\t\t\t# Anything goes here.\n+$L2:\t\t\t\t# The label must match.\n+\t.insn\n+$L3 = .\t\t\t\t# It's there, but we don't care.\n+\t.end\tunreachable\n+\n+   that is .insn to be inserted if a code label is at function's end.  */\n+\n+/* { dg-final { scan-assembler \"\\tbeqz\\t\\\\\\$\\[0-9\\]+,(.L\\[0-9\\]+)\\n.*\\n\\\\1:\\n\\t\\\\.insn\\n(?:.L\\[0-9\\]+ = \\\\.\\n)?\\t\\\\.end\\tunreachable\\n\" } } */"}, {"sha": "81fb259623087e53a276cf7aec7354d02ea9aa4e", "filename": "gcc/testsuite/gcc.target/mips/insn-pseudo-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-2.c?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mmicromips\" } */\n+\n+void\n+unreachable (int i)\n+{\n+  asm volatile goto (\"b\\t.\\n\\tbeqz\\t%0,%l1\" : : \"r\" (i) : : punt);\n+punt:\n+  __builtin_unreachable ();\n+}\n+\n+/* Expect assembly like:\n+\n+\tbeqz\t$4,$L2\n+\t\t\t\t# Anything goes here.\n+$L2:\t\t\t\t# The label must match.\n+\t.insn\n+$L3 = .\t\t\t\t# It's there, but we don't care.\n+\t.end\tunreachable\n+\n+   that is .insn to be inserted if a code label is at function's end.  */\n+\n+/* { dg-final { scan-assembler \"\\tbeqz\\t\\\\\\$\\[0-9\\]+,(.L\\[0-9\\]+)\\n.*\\n\\\\1:\\n\\t\\\\.insn\\n(?:.L\\[0-9\\]+ = \\\\.\\n)?\\t\\\\.end\\tunreachable\\n\" } } */"}, {"sha": "49b7622ba788bd233655577b086904009585539a", "filename": "gcc/testsuite/gcc.target/mips/insn-pseudo-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-3.c?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mips16\" } */\n+\n+void\n+unreachable (int i)\n+{\n+  asm volatile goto (\"b\\t.\\n\\tbeqz\\t%0,%l1\" : : \"r\" (i) : : punt);\n+punt:\n+  __builtin_unreachable ();\n+}\n+\n+/* Expect assembly like:\n+\n+\tbeqz\t$4,$L2\n+\t\t\t\t# Anything goes here.\n+$L2:\t\t\t\t# The label must match.\n+\t.insn\n+$L3 = .\t\t\t\t# It's there, but we don't care.\n+\t.end\tunreachable\n+\n+   that is .insn to be inserted if a code label is at function's end.  */\n+\n+/* { dg-final { scan-assembler \"\\tbeqz\\t\\\\\\$\\[0-9\\]+,(.L\\[0-9\\]+)\\n.*\\n\\\\1:\\n\\t\\\\.insn\\n(?:.L\\[0-9\\]+ = \\\\.\\n)?\\t\\\\.end\\tunreachable\\n\" } } */"}, {"sha": "49a4851916166a27320bd9cccf984b7cfc1c1e61", "filename": "gcc/testsuite/gcc.target/mips/insn-pseudo-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-4.c?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+\n+void\n+unreachable (void)\n+{\n+  asm volatile goto (\"b\\t.\\n\\tbeqz\\t%0,%l1\" : : \"r\" (0x12345678) : : punt);\n+punt:\n+  __builtin_unreachable ();\n+}\n+\n+/* Expect assembly like:\n+\n+\tlw\t$2,$L5\n+\t\t\t\t# Anything goes here.\n+\tbeqz\t$2,$L2\t\t# The register must match.\n+\t\t\t\t# Anything goes here.\n+$L2:\t\t\t\t# The label must match.\n+\t.insn\n+$L3 = .\t\t\t\t# It's there, but we don't care.\n+\t.align\t2\n+$L5:\t\t\t\t# The label must match.\n+\t.word\t305419896\n+\n+   that is .insn to be inserted if a code label is at a constant pool.  */\n+\n+/* { dg-final { scan-assembler \"\\tlw\\t(\\\\\\$\\[0-9\\]+),(.L\\[0-9\\]+)\\n.*\\tbeqz\\t\\\\1,(.L\\[0-9\\]+)\\n.*\\n\\\\3:\\n\\t\\\\.insn\\n(?:.L\\[0-9\\]+ = \\\\.\\n)?\\t\\\\.align\\t2\\n\\\\2:\\n\\t\\\\.word\\t305419896\\n\" } } */"}, {"sha": "ecba154b9e0441ad59875c2096c860e1d099af0f", "filename": "gcc/testsuite/gcc.target/mips/insn-tablejump.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-tablejump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-tablejump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-tablejump.c?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mmicromips\" } */\n+\n+int __attribute__ ((noinline))\n+frob (int i)\n+{\n+  switch (i)\n+    {\n+    case -5:\n+      return -2;\n+    case -3:\n+      return -1;\n+    case 0:\n+      return 0;\n+    case 3:\n+      return 1;\n+    case 5:\n+      break;\n+    default:\n+      __builtin_unreachable ();\n+    }\n+  return i;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  asm (\"\" : \"+r\" (argc));\n+  argc = frob ((argc & 10) - 5);\n+  asm (\"\" : \"+r\" (argc));\n+  return !argc;\n+}\n+\n+/* This will result in assembly like:\n+\n+\t.text\n+\t.align\t2\n+\t.globl\tfrob\n+\t.set\tnomips16\n+\t.set\tmicromips\n+\t.ent\tfrob\n+\t.type\tfrob, @function\n+frob:\n+\t.frame\t$sp,0,$31\t\t# vars= 0, regs= 0/0, args= 0, gp= 0\n+\t.mask\t0x00000000,0\n+\t.fmask\t0x00000000,0\n+\t.set\tnoreorder\n+\t.set\tnomacro\n+\taddiu\t$3,$4,5\n+\tsltu\t$2,$3,11\n+\tbeqzc\t$2,$L2\n+\tlui\t$2,%hi($L4)\n+\taddiu\t$2,$2,%lo($L4)\n+\tlwxs\t$3,$3($2)\n+\tjrc\t$3\n+\t.rdata\n+\t.align\t2\n+\t.align\t2\n+$L4:\n+\t.word\t$L3\n+\t.word\t$L2\n+\t.word\t$L9\n+\t.word\t$L2\n+\t.word\t$L2\n+\t.word\t$L8\n+\t.word\t$L2\n+\t.word\t$L2\n+\t.word\t$L7\n+\t.word\t$L2\n+\t.word\t$L8\n+\t.text\n+$L8:\n+\tjr\t$31\n+\tmove\t$2,$4\n+\n+$L9:\n+\tjr\t$31\n+\tli\t$2,-1\t\t\t# 0xffffffffffffffff\n+\n+$L3:\n+\tjr\t$31\n+\tli\t$2,-2\t\t\t# 0xfffffffffffffffe\n+\n+$L7:\n+\tjr\t$31\n+\tli\t$2,1\t\t\t# 0x1\n+\n+$L2:\n+\t.insn\n+\t.set\tmacro\n+\t.set\treorder\n+\t.end\tfrob\n+\t.size\tfrob, .-frob\n+\n+  for `frob' and we want to make sure it links correctly owing to the\n+  `.insn' pseudo-op which needs to be there at `$L2' as there's no\n+  code following and the label is a microMIPS branch target (even though\n+  the branch is never taken.  See also insn-casesi.c.  */"}]}