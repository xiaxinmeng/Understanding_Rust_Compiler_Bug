{"sha": "9428db632815386ea6e6c994e92c9aabf00abb35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQyOGRiNjMyODE1Mzg2ZWE2ZTZjOTk0ZTkyYzlhYWJmMDBhYmIzNQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-07T15:39:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-07T15:52:06Z"}, "message": "We need to monomorphize tuples as well as ADT's\n\nWhen we have generic data types or types that can contain type parameters\nwe need to make sure to avoid duplicating record types and abusing\nstructural equality rules in GCC. We do this by looking for already\ncompiled types that the item is equal to so they refer to the canoncial\nrecord type.\n\nFixes #415", "tree": {"sha": "78a6dc418daacdf1323eeeba70319018dab42540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78a6dc418daacdf1323eeeba70319018dab42540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9428db632815386ea6e6c994e92c9aabf00abb35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9428db632815386ea6e6c994e92c9aabf00abb35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9428db632815386ea6e6c994e92c9aabf00abb35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9428db632815386ea6e6c994e92c9aabf00abb35/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdb4b6aff586a1dece32f03f53aa6ea2837e7e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdb4b6aff586a1dece32f03f53aa6ea2837e7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdb4b6aff586a1dece32f03f53aa6ea2837e7e4"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "bdc9eca4038c7e5fc836c6fa30bcb983fb9867ef", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9428db632815386ea6e6c994e92c9aabf00abb35/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9428db632815386ea6e6c994e92c9aabf00abb35/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=9428db632815386ea6e6c994e92c9aabf00abb35", "patch": "@@ -66,7 +66,7 @@ class Context\n   bool lookup_compiled_types (HirId id, ::Btype **type,\n \t\t\t      const TyTy::BaseType *ref = nullptr)\n   {\n-    if (ref != nullptr && ref->has_subsititions_defined ())\n+    if (ref != nullptr)\n       {\n \tfor (auto it = mono.begin (); it != mono.end (); it++)\n \t  {\n@@ -393,7 +393,8 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \treturn;\n       }\n \n-    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &translated);\n+    bool ok\n+      = ctx->lookup_compiled_types (type.get_ty_ref (), &translated, &type);\n     if (ok)\n       return;\n \n@@ -402,8 +403,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     for (size_t i = 0; i < type.num_fields (); i++)\n       {\n \tTyTy::BaseType *field = type.get_field (i);\n-\tBtype *compiled_field_ty\n-\t  = TyTyCompile::compile (ctx->get_backend (), field);\n+\tBtype *compiled_field_ty = TyTyResolveCompile::compile (ctx, field);\n \n \tBackend::Btyped_identifier f (std::to_string (i), compiled_field_ty,\n \t\t\t\t      ctx->get_mappings ()->lookup_location (\n@@ -418,7 +418,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \t\t\t\t\t   type.get_ty_ref ()));\n \n     ctx->push_type (named_struct);\n-    ctx->insert_compiled_type (type.get_ty_ref (), named_struct);\n+    ctx->insert_compiled_type (type.get_ty_ref (), named_struct, &type);\n     translated = named_struct;\n   }\n "}, {"sha": "522e16f32f7ee0007b8ce0991e81876f0a4c832a", "filename": "gcc/testsuite/rust.test/compile/generics26.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9428db632815386ea6e6c994e92c9aabf00abb35/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics26.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9428db632815386ea6e6c994e92c9aabf00abb35/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics26.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics26.rs?ref=9428db632815386ea6e6c994e92c9aabf00abb35", "patch": "@@ -0,0 +1,21 @@\n+// github issue #415\n+fn test<A, B>(a: A, b: B) -> (A, B) {\n+    (a, b)\n+}\n+\n+fn main() {\n+    let a = test::<i32, i32>(123, 456);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let b = test::<f32, f32>(123f32, 456f32);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let c = test::<_, _>(123, 456f32);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let d = test(true, 1234);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let e = test((123, false), 123f32);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "9871638dd9fe678e98d167face69c3dd12e87401", "filename": "gcc/testsuite/rust.test/compile/generics27.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9428db632815386ea6e6c994e92c9aabf00abb35/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics27.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9428db632815386ea6e6c994e92c9aabf00abb35/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics27.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics27.rs?ref=9428db632815386ea6e6c994e92c9aabf00abb35", "patch": "@@ -0,0 +1,16 @@\n+// github issue #415\n+fn test<A>(a: &A) -> &A {\n+    a\n+}\n+\n+fn main() {\n+    let a = 123;\n+    let b = &a;\n+    let c = test(b);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let a = 123f32;\n+    let b = &a;\n+    let c = test(b);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}]}