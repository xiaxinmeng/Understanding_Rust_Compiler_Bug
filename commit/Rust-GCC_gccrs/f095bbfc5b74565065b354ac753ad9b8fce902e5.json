{"sha": "f095bbfc5b74565065b354ac753ad9b8fce902e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5NWJiZmM1Yjc0NTY1MDY1YjM1NGFjNzUzYWQ5YjhmY2U5MDJlNQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-03-06T08:11:06Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-03-06T08:11:06Z"}, "message": "MediaTracker.java: Implemented.\n\n        * java/awt/MediaTracker.java: Implemented.\n        * Makefile.am: Add MediaTracker.\n        * Makefile.in: Rebuilt.\n\nFrom-SVN: r50349", "tree": {"sha": "e85472ac7192bf53f60e4997db949c6b9f8dd736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e85472ac7192bf53f60e4997db949c6b9f8dd736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f095bbfc5b74565065b354ac753ad9b8fce902e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f095bbfc5b74565065b354ac753ad9b8fce902e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f095bbfc5b74565065b354ac753ad9b8fce902e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f095bbfc5b74565065b354ac753ad9b8fce902e5/comments", "author": null, "committer": null, "parents": [{"sha": "c7544dd8fda9589137ffe91d90ca59eb86eabf14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7544dd8fda9589137ffe91d90ca59eb86eabf14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7544dd8fda9589137ffe91d90ca59eb86eabf14"}], "stats": {"total": 364, "additions": 357, "deletions": 7}, "files": [{"sha": "72605436112f41d2f80d9858edb284b245f5f935", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f095bbfc5b74565065b354ac753ad9b8fce902e5", "patch": "@@ -1,3 +1,9 @@\n+2002-03-06  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* java/awt/MediaTracker.java: Implemented.\n+\t* Makefile.am: Add MediaTracker.\n+\t* Makefile.in: Rebuilt.\n+\n 2002-03-05  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natPosixProcess.cc (fail): Removed."}, {"sha": "332f64f3844aec0aca5acaa095b56bc51d09e11d", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f095bbfc5b74565065b354ac753ad9b8fce902e5", "patch": "@@ -654,6 +654,7 @@ java/awt/Label.java \\\n java/awt/LayoutManager.java \\\n java/awt/LayoutManager2.java \\\n java/awt/List.java \\\n+java/awt/MediaTracker.java \\\n java/awt/Menu.java \\\n java/awt/MenuBar.java \\\n java/awt/MenuComponent.java \\"}, {"sha": "ea1b798d40ec8138731c5f1dab12806e9caf79c7", "filename": "libjava/Makefile.in", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f095bbfc5b74565065b354ac753ad9b8fce902e5", "patch": "@@ -387,6 +387,7 @@ java/awt/Label.java \\\n java/awt/LayoutManager.java \\\n java/awt/LayoutManager2.java \\\n java/awt/List.java \\\n+java/awt/MediaTracker.java \\\n java/awt/Menu.java \\\n java/awt/MenuBar.java \\\n java/awt/MenuComponent.java \\\n@@ -2021,11 +2022,12 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/Insets.P .deps/java/awt/ItemSelectable.P \\\n .deps/java/awt/Label.P .deps/java/awt/LayoutManager.P \\\n .deps/java/awt/LayoutManager2.P .deps/java/awt/List.P \\\n-.deps/java/awt/Menu.P .deps/java/awt/MenuBar.P \\\n-.deps/java/awt/MenuComponent.P .deps/java/awt/MenuContainer.P \\\n-.deps/java/awt/MenuItem.P .deps/java/awt/MenuShortcut.P \\\n-.deps/java/awt/Paint.P .deps/java/awt/PaintContext.P \\\n-.deps/java/awt/Panel.P .deps/java/awt/Point.P .deps/java/awt/Polygon.P \\\n+.deps/java/awt/MediaTracker.P .deps/java/awt/Menu.P \\\n+.deps/java/awt/MenuBar.P .deps/java/awt/MenuComponent.P \\\n+.deps/java/awt/MenuContainer.P .deps/java/awt/MenuItem.P \\\n+.deps/java/awt/MenuShortcut.P .deps/java/awt/Paint.P \\\n+.deps/java/awt/PaintContext.P .deps/java/awt/Panel.P \\\n+.deps/java/awt/Point.P .deps/java/awt/Polygon.P \\\n .deps/java/awt/PopupMenu.P .deps/java/awt/PrintGraphics.P \\\n .deps/java/awt/PrintJob.P .deps/java/awt/Rectangle.P \\\n .deps/java/awt/RenderingHints.P .deps/java/awt/ScrollPane.P \\"}, {"sha": "a94d6507114caaae9719f39464c9f4108f9234ce", "filename": "libjava/java/awt/MediaTracker.java", "status": "modified", "additions": 343, "deletions": 2, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2Fjava%2Fawt%2FMediaTracker.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f095bbfc5b74565065b354ac753ad9b8fce902e5/libjava%2Fjava%2Fawt%2FMediaTracker.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMediaTracker.java?ref=f095bbfc5b74565065b354ac753ad9b8fce902e5", "patch": "@@ -1,5 +1,5 @@\n /* MediaTracker.java -- Class used for keeping track of images\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,14 +38,355 @@\n \n package java.awt;\n \n+import java.util.ArrayList;\n+import java.awt.image.ImageObserver;\n+\n /**\n   * This class is used for keeping track of the status of various media\n   * objects.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Bryce McKinlay\n   */\n public class MediaTracker implements java.io.Serializable\n {\n+  public static final int LOADING = 1 << 0;\n+  public static final int ABORTED = 1 << 1;\n+  public static final int ERRORED = 1 << 2;\n+  public static final int COMPLETE = 1 << 3;\n+  \n+  Component target;\n+  MediaEntry head;\n+\n+  static final long serialVersionUID = -483174189758638095L;\n+\n+  // FIXME: The serialized form documentation says MediaEntry is a \n+  // serializable field, but the serialized form of MediaEntry itself\n+  // doesn't appear to be documented.\n+  class MediaEntry implements ImageObserver\n+  {\n+    int id;\n+    Image image;\n+    MediaEntry next;\n+    int status;\n+    int width;\n+    int height;\n+    \n+    public boolean imageUpdate(Image img, int flags, int x, int y, \n+\t\t\t       int width, int height)\n+    {\n+      if ((flags & ABORT) != 0)\n+        status = ABORTED & COMPLETE;\n+      else if ((flags & ERROR) != 0)\n+        status = ERRORED & COMPLETE;\n+      else if ((flags & ALLBITS) != 0)\n+        status = COMPLETE;\n+      else\n+        status = LOADING;\n+      \n+      synchronized (MediaTracker.this)\n+      {\n+\tMediaTracker.this.notifyAll();\n+      }\n+      \n+      return ((status & COMPLETE) != 0);\n+    }\n+  }\n+\n+  public MediaTracker(Component c)\n+  {\n+    target = c;\n+  }\n+\n+  public void addImage(Image image, int id)\n+  {\n+    MediaEntry e = new MediaEntry();\n+    e.id = id;\n+    e.image = image;\n+    e.next = head;\n+    head = e;\n+    // Start tracking image status.\n+    target.checkImage(image, e);\n+  }\n+\n+  public void addImage(Image image, int id, int width, int height)\n+  {\n+    MediaEntry e = new MediaEntry();\n+    e.id = id;\n+    e.image = image;\n+    e.next = head;\n+    e.width = width;\n+    e.height = height;\n+    head = e;\n+    // Start tracking image status.\n+    target.checkImage(image, width, height, e);\n+  }\n+\n+  public boolean checkAll()\n+  {\n+    return checkAll(false);\n+  }\n+\n+  public boolean checkAll(boolean load)\n+  {\n+    MediaEntry e = head;\n+    boolean result = true;\n+    \n+    while (e != null)\n+      {\n+\tif ((e.status & COMPLETE) == 0)\n+\t  {\n+\t    if (load)\n+\t      {\n+\t\tresult = false;\n+\t        if (e.status == 0)\n+\t\t  {\n+\t\t    target.prepareImage(e.image, e);\n+\t\t    e.status = LOADING;\n+\t\t  }\n+\t      }\n+\t    else\n+\t      return false;\n+\t  }\n+\te = e.next;\n+      }\n+    return result;\n+  }\n+\n+  public boolean isErrorAny()\n+  {\n+    MediaEntry e = head;    \n+    while (e != null)\n+      {\n+        if ((e.status & ERRORED) != 0)\n+\t  return true;\n+        e = e.next;\n+      }\n+    return false;\n+  }\n+\n+  public Object[] getErrorsAny()\n+  {\n+    MediaEntry e = head;\n+    ArrayList result = null;\n+    while (e != null)\n+      {\n+        if ((e.status & ERRORED) != 0)\n+\t  {\n+\t    if (result == null)\n+\t      result = new ArrayList();\n+\t    result.add(e.image);\n+\t  }\n+        e = e.next;\n+      }\n+    if (result == null)\n+      return null;\n+    else\n+      return result.toArray();\n+  }\n+\n+  public void waitForAll() throws InterruptedException\n+  {\n+    synchronized (this)\n+    {\n+      while (checkAll(true) == false)\n+        wait();\n+    }\n+  }\n+\n+  public boolean waitForAll(long ms) throws InterruptedException\n+  {\n+    long start = System.currentTimeMillis();\n+    synchronized (this)\n+    {\n+      while (!checkAll(true))\n+        wait(ms);\n+    }\n+    if ((System.currentTimeMillis() - start) < ms)\n+      return true;\n+    else\n+      return false;\n+  }\n+\n+  public int statusAll(boolean load)\n+  {\n+    int result = 0;\n+    MediaEntry e = head;\n+    while (e != null)\n+      {\n+        if (load && e.status == 0)\n+\t  {\n+\t    target.prepareImage(e.image, e);\n+\t    e.status = LOADING;\n+\t  }\n+        result |= e.status;\n+\te = e.next;\n+      }\n+    return result;\n+  }\n+\n+  public boolean checkID(int id)\n+  {\n+    return checkID(id, false);\n+  }\n+\n+  public boolean checkID(int id, boolean load)\n+  {\n+    MediaEntry e = head;\n+    boolean result = true;\n+    \n+    while (e != null)\n+      {\n+\tif (e.id == id && ((e.status & COMPLETE) == 0))\n+\t  {\n+\t    if (load)\n+\t      {\n+\t\tresult = false;\n+\t        if (e.status == 0)\n+\t\t  {\n+\t\t    target.prepareImage(e.image, e);\n+\t\t    e.status = LOADING;\n+\t\t  }\n+\t      }\n+\t    else\n+\t      return false;\n+\t  }\n+\te = e.next;\n+      }\n+    return result;\n+  }\n+\n+  public boolean isErrorID(int id)\n+  {\n+    MediaEntry e = head;    \n+    while (e != null)\n+      {\n+        if (e.id == id && ((e.status & ERRORED) != 0))\n+\t  return true;\n+        e = e.next;\n+      }\n+    return false;\n+  }\n+\n+  public Object[] getErrorsID(int id)\n+  {\n+    MediaEntry e = head;\n+    ArrayList result = null;\n+    while (e != null)\n+      {\n+        if (e.id == id && ((e.status & ERRORED) != 0))\n+\t  {\n+\t    if (result == null)\n+\t      result = new ArrayList();\n+\t    result.add(e.image);\n+\t  }\n+        e = e.next;\n+      }\n+    if (result == null)\n+      return null;\n+    else\n+      return result.toArray();\n+  }\n+\n+  public void waitForID(int id) throws InterruptedException\n+  {\n+    MediaEntry e = head;\n+    synchronized (this)\n+    {\n+      while (checkID (id, true) == false)\n+        wait();\n+    }\n+  }\n+\n+  public boolean waitForID(int id, long ms) throws InterruptedException\n+  {\n+    MediaEntry e = head;\n+    long start = System.currentTimeMillis();\n+    synchronized (this)\n+    {\n+      while (checkID (id, true) == false)\n+        wait(ms);\n+    }  \n+    if ((System.currentTimeMillis() - start) < ms)\n+      return true;\n+    else\n+      return false;\n+  }\n+\n+  public int statusID(int id, boolean load)\n+  {\n+    int result = 0;\n+    MediaEntry e = head;\n+    while (e != null)\n+      {\n+        if (e.id == id)\n+\t  {\n+            if (load && e.status == 0)\n+\t      {\n+\t\ttarget.prepareImage(e.image, e);\n+\t\te.status = LOADING;\n+\t      }\n+            result |= e.status;\n+\t  }\n+\te = e.next;\n+      }\n+    return result;\n+  }\n+\n+  public void removeImage(Image image)\n+  {\n+    MediaEntry e = head;\n+    MediaEntry prev = null;\n+    while (e != null)\n+      {\n+        if (e.image == image)\n+\t  {\n+\t    if (prev == null)\n+\t      head = e.next;\n+\t    else\n+\t      prev.next = e.next;\n+\t  }\n+\tprev = e;\n+\te = e.next;\n+      }\n+  }\n \n-} // class MediaTracker \n+  public void removeImage(Image image, int id)\n+  {\n+    MediaEntry e = head;\n+    MediaEntry prev = null;\n+    while (e != null)\n+      {\n+        if (e.id == id && e.image == image)\n+\t  {\n+\t    if (prev == null)\n+\t      head = e.next;\n+\t    else\n+\t      prev.next = e.next;\n+\t  }\n+\telse\n+\t  prev = e;\n+\te = e.next;\n+      }  \n+  }\n \n+  public void removeImage(Image image, int id, int width, int height)\n+  {\n+    MediaEntry e = head;\n+    MediaEntry prev = null;\n+    while (e != null)\n+      {\n+        if (e.id == id && e.image == image\n+\t    && e.width == width && e.height == height)\n+\t  {\n+\t    if (prev == null)\n+\t      head = e.next;\n+\t    else\n+\t      prev.next = e.next;\n+\t  }\n+\telse\n+\t  prev = e;\n+\te = e.next;\n+      }\n+  }\n+}"}]}