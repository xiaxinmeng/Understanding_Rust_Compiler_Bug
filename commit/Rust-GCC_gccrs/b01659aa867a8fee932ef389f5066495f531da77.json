{"sha": "b01659aa867a8fee932ef389f5066495f531da77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxNjU5YWE4NjdhOGZlZTkzMmVmMzg5ZjUwNjY0OTVmNTMxZGE3Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-07-18T13:08:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-07-18T13:08:34Z"}, "message": "lto-common.c (gimple_register_canonical_type_1): Do not look for non-ODR conflicts of types in anonymous namespaces.\n\n\t* lto-common.c (gimple_register_canonical_type_1): Do not look for\n\tnon-ODR conflicts of types in anonymous namespaces.\n\t(unify_scc): Do not merge anonymous namespace types.\n\t* g++.dg/lto/alias-5_0.C: New testcase.\n\t* g++.dg/lto/alias-5_1.C: New.\n\t* g++.dg/lto/alias-5_2.c: New.\n\nFrom-SVN: r273571", "tree": {"sha": "c3b88991d6d9777e8b430b6e22e4e6b621e177af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3b88991d6d9777e8b430b6e22e4e6b621e177af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b01659aa867a8fee932ef389f5066495f531da77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01659aa867a8fee932ef389f5066495f531da77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01659aa867a8fee932ef389f5066495f531da77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01659aa867a8fee932ef389f5066495f531da77/comments", "author": null, "committer": null, "parents": [{"sha": "3796e3b399875dac8e6d100c7fe662a91a39ba42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3796e3b399875dac8e6d100c7fe662a91a39ba42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3796e3b399875dac8e6d100c7fe662a91a39ba42"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "22e7739d3d7479823450167ef7e67ef2f67c056a", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=b01659aa867a8fee932ef389f5066495f531da77", "patch": "@@ -1,3 +1,9 @@\n+2019-07-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-common.c (gimple_register_canonical_type_1): Do not look for\n+\tnon-ODR conflicts of types in anonymous namespaces.\n+\t(unify_scc): Do not merge anonymous namespace types.\n+\n 2019-07-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/61339"}, {"sha": "ef2d02a3f8e49541b9a21fa73785a4d6cd5ef7bb", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=b01659aa867a8fee932ef389f5066495f531da77", "patch": "@@ -418,13 +418,19 @@ gimple_register_canonical_type_1 (tree t, hashval_t hash)\n   if (RECORD_OR_UNION_TYPE_P (t)\n       && odr_type_p (t) && !odr_type_violation_reported_p (t))\n     {\n-      /* Here we rely on fact that all non-ODR types was inserted into\n-\t canonical type hash and thus we can safely detect conflicts between\n-\t ODR types and interoperable non-ODR types.  */\n-      gcc_checking_assert (type_streaming_finished\n-\t\t\t   && TYPE_MAIN_VARIANT (t) == t);\n-      slot = htab_find_slot_with_hash (gimple_canonical_types, t, hash,\n-\t\t\t\t       NO_INSERT);\n+      /* Anonymous namespace types never conflict with non-C++ types.  */\n+      if (type_with_linkage_p (t) && type_in_anonymous_namespace_p (t))\n+\tslot = NULL;\n+      else\n+\t{\n+\t  /* Here we rely on fact that all non-ODR types was inserted into\n+\t     canonical type hash and thus we can safely detect conflicts between\n+\t     ODR types and interoperable non-ODR types.  */\n+\t  gcc_checking_assert (type_streaming_finished\n+\t\t\t       && TYPE_MAIN_VARIANT (t) == t);\n+\t  slot = htab_find_slot_with_hash (gimple_canonical_types, t, hash,\n+\t\t\t\t\t   NO_INSERT);\n+\t}\n       if (slot && !TYPE_CXX_ODR_P (*(tree *)slot))\n \t{\n \t  tree nonodr = *(tree *)slot;\n@@ -1640,11 +1646,14 @@ unify_scc (class data_in *data_in, unsigned from,\n       tree t = streamer_tree_cache_get_tree (cache, from + i);\n       scc->entries[i] = t;\n       /* Do not merge SCCs with local entities inside them.  Also do\n-\t not merge TRANSLATION_UNIT_DECLs.  */\n+\t not merge TRANSLATION_UNIT_DECLs and anonymous namespace types.  */\n       if (TREE_CODE (t) == TRANSLATION_UNIT_DECL\n \t  || (VAR_OR_FUNCTION_DECL_P (t)\n \t      && !(TREE_PUBLIC (t) || DECL_EXTERNAL (t)))\n-\t  || TREE_CODE (t) == LABEL_DECL)\n+\t  || TREE_CODE (t) == LABEL_DECL\n+\t  || (TYPE_P (t)\n+\t      && type_with_linkage_p (TYPE_MAIN_VARIANT (t))\n+\t      && type_in_anonymous_namespace_p (TYPE_MAIN_VARIANT (t))))\n \t{\n \t  /* Avoid doing any work for these cases and do not worry to\n \t     record the SCCs for further merging.  */"}, {"sha": "0f47604da85abd76c7e7559eb4d0f8b526ccaf4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b01659aa867a8fee932ef389f5066495f531da77", "patch": "@@ -1,3 +1,9 @@\n+2019-07-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/lto/alias-5_0.C: New testcase.\n+\t* g++.dg/lto/alias-5_1.C: New.\n+\t* g++.dg/lto/alias-5_2.c: New.\n+\n 2019-07-18  Bin Cheng  <bin.linux@linux.alibaba.com>\n \n \tPR tree-optimization/91137"}, {"sha": "779cc3950acb011fa5819519141eb7641344a176", "filename": "gcc/testsuite/g++.dg/lto/alias-5_0.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_0.C?ref=b01659aa867a8fee932ef389f5066495f531da77", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-lto-do run } */\n+/* { dg-lto-options { { -O3 -flto } } } */\n+/* This testcase tests that anonymous namespaces in different TUs are treated\n+   as different types by LTO TBAA and that they never alias with structurally\n+   same C types.  */\n+namespace {\n+  __attribute__((used))\n+  struct a {int a;} *p,**ptr=&p;\n+};\n+void\n+set1()\n+{\n+  *ptr=0;\n+}\n+void\n+get1()\n+{\n+  if (!__builtin_constant_p (*ptr==0))\n+    __builtin_abort ();\n+}\n+extern void set2();\n+extern \"C\" void set3();\n+int n = 1;\n+int\n+main()\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      set1();\n+      set2();\n+      set3();\n+      get1();\n+    }\n+  return 0;\n+}"}, {"sha": "f12bd561bfb39c26662a5638eb57450b8a47266d", "filename": "gcc/testsuite/g++.dg/lto/alias-5_1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_1.C?ref=b01659aa867a8fee932ef389f5066495f531da77", "patch": "@@ -0,0 +1,9 @@\n+namespace {\n+  __attribute__((used))\n+  struct a {int a;} *p,**ptr=&p,q;\n+};\n+void\n+set2()\n+{\n+  *ptr=&q;\n+}"}, {"sha": "d126833bf929ea713b528389bb5bd81a3cfdfbcd", "filename": "gcc/testsuite/g++.dg/lto/alias-5_2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01659aa867a8fee932ef389f5066495f531da77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Falias-5_2.c?ref=b01659aa867a8fee932ef389f5066495f531da77", "patch": "@@ -0,0 +1,7 @@\n+  __attribute__((used))\n+  struct a {int a;} *p,**ptr=&p,q;\n+void\n+set3()\n+{\n+  *ptr=&q;\n+}"}]}