{"sha": "517237119124e0a16546a3bf0584d9422ca5dfb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE3MjM3MTE5MTI0ZTBhMTY1NDZhM2JmMDU4NGQ5NDIyY2E1ZGZiMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-02-28T07:06:53Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-02-28T07:06:53Z"}, "message": "Fix warious warnings:\n\n\t* c-aux-info.c: Include string.h/strings.h.\n\t* pa.c: Include stdlib.h.\n\t(pa_combine_instructions): Prototype the function.\n\t(pa_can_combine_p, forward_branch_p, shadd_constant_p): Likewise.\n\t(reloc_needed): Add default case for enumeration switch.\n\t(remove_useless_addtr_insns): Remove unused variable `all'.\n\t(hppa_expand_prologue): Add explicit braces to avoid\n\tambiguous `else'.\n\t(output_function_epilogue): Remove unused variable `i'.\n\t(output_millicode_call): Remove unused variable `link'.\n\t(shadd_constant_p, forward_branch_p): Make the function static.\n\t(following_call): Explicitly declare to return int.\n\t(pa_reorg): Declare as void.\n\t(pa_combine_instructions): Declare as static void.  Add\n\tparentheses around && within ||.\n\t* pa.h: Add prototypes for pa_reorg, symbolic_operand,\n\tfollowing_call, function_label_operand, lhs_lshift_cint_operand\n\tand zdepi_cint_p.\n\t* pa.md: Add parentheses around && within ||.\n\t* cppalloc.c: Include stdlib.h.\n\t* cpperror.c (cpp_print_containing_files): Remove unused variable\n\t`i'.  Fix format specifier in fprintf.\n\t* cse.c (cse_around_loop): Add explicit braces to avoid\n\tambiguous `else'.\n\t(delete_dead_from_cse): Wrap variable `tem' in macro HAVE_cc0.\n\t* expr.c (expand_expr): Add parentheses around && within ||.\n\t* final.c (app_enable): Replace fprintf with fputs where there are\n\tno format specifiers and no trailing argument after the string.\n\tEg, when printing ASM_APP_ON/ASM_APP_OFF.\n\t(app_disable): Likewise.\n\t(final_end_function): Likewise.\n\t(final_scan_insn): Likewise.  Remove unused variable `set'.\n\t(profile_function): Wrap empty if-statement body in {} brackets.\n\t* function.c: Include stdlib.h.\n\t(pad_below): Wrap prototype and definition in ARGS_GROW_DOWNWARD.\n\t(reposition_prologue_and_epilogue_notes): Add parentheses\n\taround assignment used as truth value.\n\t* integrate.c (expand_inline_function): Wrap variable\n\t`cc0_insn' in macro HAVE_cc0.\n\t* jump.c (jump_optimize): Wrap variable `q' in macro\n\tHAVE_cc0.  Remove unused variable `prev1'.\n\t* libgcc2.c (__bb_exit_trace_func): Add parentheses around &&\n\twithin ||.  Fix format specifier in fprintf.\n\t(__bb_init_prg): Add parentheses around assignment used as\n\ttruth value.\n\t* local-alloc.c: Include stdlib.h.\n\t(requires_inout): Add parentheses around assignment used\n\tas truth value.\n\t* loop.c (analyze_loop_iterations): Wrap prototype and definition\n\tin macro HAVE_decrement_and_branch_on_count.\n\t(insert_bct, instrument_loop_bct): Likewise.\n\t(move_movables): Add parentheses around assignment used as\n\ttruth value.\n\t(consec_sets_invariant_p): Likewise.\n\t(maybe_eliminate_biv_1): Wrap variable `new' in macro HAVE_cc0.\n\t* objc/objc-act.c: Include stdlib.h.\n\t(lookup_method_in_protocol_list): Wrap empty else-statement body\n\tin braces.\n\t(lookup_protocol_in_reflist): Likewise.\n\t(objc_add_static_instance): Remove unused variables `decl_expr'\n\tand `decl_spec'.\n\t(get_objc_string_decl): Remove unused variable `decl'.\n\t(generate_static_references): Remove unused variables `idecl' and\n\t`instance'.\n\t(check_protocols): Wrap empty else-statement body in braces.\n\t* protoize.c: Include stdlib.h.\n\t(substr): Add parentheses around assignment used as truth value.\n\t(abspath): Likewise.\n\t(shortpath): Likewise.\n\t* regmove.c (fixup_match_1): Add parentheses around assignment\n\tused as truth value.\n\t* reload.c (push_secondary_reload): Remove unused variable `i'.\n\t(find_reloads): Add parentheses around assignment used as truth\n\tvalue.\n\t* reload1.c: Include stdlib.h.\n\t* rtl.h: Correct typo in prototype of offsettable_memref_p.\n\t* stmt.c (add_case_node): Add parentheses around assignment used\n\tas truth value.\n\t(case_tree2list): Likewise.\n\t* tree.c (valid_machine_attribute): Wrap variable `decl_attr_list'\n\tin macro VALID_MACHINE_DECL_ATTRIBUTE.  Wrap variable\n\t`type_attr_list' in macro VALID_MACHINE_TYPE_ATTRIBUTE.\n\t(merge_attributes): Add explicit braces to avoid ambiguous\n\t`else'.\n\t* unroll.c (copy_loop_body): Wrap variable `cc0_insn' in\n\tmacro HAVE_cc0.\n\t* varasm.c: Include stdlib.h.\n\nFrom-SVN: r18290", "tree": {"sha": "6685fdcda742726b5edb9dbde23a6e7176b93726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6685fdcda742726b5edb9dbde23a6e7176b93726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/517237119124e0a16546a3bf0584d9422ca5dfb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517237119124e0a16546a3bf0584d9422ca5dfb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517237119124e0a16546a3bf0584d9422ca5dfb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517237119124e0a16546a3bf0584d9422ca5dfb0/comments", "author": null, "committer": null, "parents": [{"sha": "c580105315d6e393e042182ced090b8ec6ce0b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c580105315d6e393e042182ced090b8ec6ce0b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c580105315d6e393e042182ced090b8ec6ce0b51"}], "stats": {"total": 391, "additions": 299, "deletions": 92}, "files": [{"sha": "afd589e7756effabbb050a2d39cbaaf41d4450da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,118 @@\n Sat Feb 28 07:54:03 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* c-aux-info.c: Include string.h/strings.h.\n+\n+\t* pa.c: Include stdlib.h.\n+\t(pa_combine_instructions): Prototype the function.\n+\t(pa_can_combine_p, forward_branch_p, shadd_constant_p): Likewise.\n+\t(reloc_needed): Add default case for enumeration switch.\n+\t(remove_useless_addtr_insns): Remove unused variable `all'.\n+\t(hppa_expand_prologue): Add explicit braces to avoid\n+\tambiguous `else'.\n+\t(output_function_epilogue): Remove unused variable `i'.\n+\t(output_millicode_call): Remove unused variable `link'.\n+\t(shadd_constant_p, forward_branch_p): Make the function static.\n+\t(following_call): Explicitly declare to return int.\n+\t(pa_reorg): Declare as void.\n+\t(pa_combine_instructions): Declare as static void.  Add\n+\tparentheses around && within ||.\n+\t\n+\t* pa.h: Add prototypes for pa_reorg, symbolic_operand,\n+\tfollowing_call, function_label_operand, lhs_lshift_cint_operand\n+\tand zdepi_cint_p.\n+\n+\t* pa.md: Add parentheses around && within ||.\n+\n+\t* cppalloc.c: Include stdlib.h.\n+\n+\t* cpperror.c (cpp_print_containing_files): Remove unused variable\n+\t`i'.  Fix format specifier in fprintf.\n+\n+\t* cse.c (cse_around_loop): Add explicit braces to avoid\n+\tambiguous `else'.\n+\t(delete_dead_from_cse): Wrap variable `tem' in macro HAVE_cc0.\n+\n+\t* expr.c (expand_expr): Add parentheses around && within ||.\n+\n+\t* final.c (app_enable): Replace fprintf with fputs where there are\n+\tno format specifiers and no trailing argument after the string.\n+\tEg, when printing ASM_APP_ON/ASM_APP_OFF.\n+\t(app_disable): Likewise.\n+\t(final_end_function): Likewise.\n+\t(final_scan_insn): Likewise.  Remove unused variable `set'.\n+\t(profile_function): Wrap empty if-statement body in {} brackets.\n+\n+\t* function.c: Include stdlib.h.\n+\t(pad_below): Wrap prototype and definition in ARGS_GROW_DOWNWARD.\n+\t(reposition_prologue_and_epilogue_notes): Add parentheses\n+\taround assignment used as truth value.\n+\n+\t* integrate.c (expand_inline_function): Wrap variable\n+\t`cc0_insn' in macro HAVE_cc0.\n+\n+\t* jump.c (jump_optimize): Wrap variable `q' in macro\n+\tHAVE_cc0.  Remove unused variable `prev1'.\n+\n+\t* libgcc2.c (__bb_exit_trace_func): Add parentheses around &&\n+\twithin ||.  Fix format specifier in fprintf.\n+\t(__bb_init_prg): Add parentheses around assignment used as\n+\ttruth value.\n+\n+\t* local-alloc.c: Include stdlib.h.\n+\t(requires_inout): Add parentheses around assignment used\n+\tas truth value.\n+\n+\t* loop.c (analyze_loop_iterations): Wrap prototype and definition\n+\tin macro HAVE_decrement_and_branch_on_count.\n+\t(insert_bct, instrument_loop_bct): Likewise.\n+\t(move_movables): Add parentheses around assignment used as\n+\ttruth value.\n+\t(consec_sets_invariant_p): Likewise.\n+\t(maybe_eliminate_biv_1): Wrap variable `new' in macro HAVE_cc0.\n+\n+\t* objc/objc-act.c: Include stdlib.h.\n+\t(lookup_method_in_protocol_list): Wrap empty else-statement body\n+\tin braces.\n+\t(lookup_protocol_in_reflist): Likewise.\n+\t(objc_add_static_instance): Remove unused variables `decl_expr'\n+\tand `decl_spec'.\n+\t(get_objc_string_decl): Remove unused variable `decl'.\n+\t(generate_static_references): Remove unused variables `idecl' and\n+\t`instance'.\n+\t(check_protocols): Wrap empty else-statement body in braces.\n+\t\n+\t* protoize.c: Include stdlib.h.\n+\t(substr): Add parentheses around assignment used as truth value.\n+\t(abspath): Likewise.\n+\t(shortpath): Likewise.\n+\n+\t* regmove.c (fixup_match_1): Add parentheses around assignment\n+\tused as truth value.\n+\n+\t* reload.c (push_secondary_reload): Remove unused variable `i'.\n+\t(find_reloads): Add parentheses around assignment used as truth\n+\tvalue.\n+\n+\t* reload1.c: Include stdlib.h.\n+\n+\t* rtl.h: Correct typo in prototype of offsettable_memref_p.\n+\n+\t* stmt.c (add_case_node): Add parentheses around assignment used\n+\tas truth value.\n+\t(case_tree2list): Likewise.\n+\n+\t* tree.c (valid_machine_attribute): Wrap variable `decl_attr_list'\n+\tin macro VALID_MACHINE_DECL_ATTRIBUTE.  Wrap variable\n+\t`type_attr_list' in macro VALID_MACHINE_TYPE_ATTRIBUTE.\n+\t(merge_attributes): Add explicit braces to avoid ambiguous\n+\t`else'.\n+\n+\t* unroll.c (copy_loop_body): Wrap variable `cc0_insn' in\n+\tmacro HAVE_cc0.\n+\t\n+\t* varasm.c: Include stdlib.h.\n+\t\n+\n \t* system.h: Remove sys/stat.h.\n \t* gcc.c: Add sys/stat.h.\n "}, {"sha": "a252153e6f8d0866c2701e884d773f0e32d5a661", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,7 +1,7 @@\n /* Generate information regarding function declarations and definitions based\n    on information stored in GCC's tree structure.  This code implements the\n    -aux-info option.\n-   Copyright (C) 1989, 1991, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 91, 94, 95, 97, 1998 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@segfault.us.com).\n \n This file is part of GNU CC.\n@@ -21,8 +21,15 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n+#ifdef HAVE_STRING_H\n+# include <string.h>\n+#else\n+# ifdef HAVE_STRINGS_H\n+#  include <strings.h>\n+#endif\n+#endif\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"c-tree.h\"\n@@ -39,14 +46,14 @@ typedef enum formals_style_enum formals_style;\n \n static char *data_type;\n \n-static char *concat ();\n-static char *concat3 ();\n-static char *gen_formal_list_for_type ();\n-static int   deserves_ellipsis ();\n-static char *gen_formal_list_for_func_def ();\n-static char *gen_type ();\n-static char *gen_decl ();\n-void   gen_aux_info_record ();\n+static char *concat\t\t\tPROTO((char *, char *));\n+static char *concat3\t\t\tPROTO((char *, char *, char *));\n+static char *affix_data_type\t\tPROTO((char *));\n+static char *gen_formal_list_for_type\tPROTO((tree, formals_style));\n+static int   deserves_ellipsis\t\tPROTO((tree));\n+static char *gen_formal_list_for_func_def PROTO((tree, formals_style));\n+static char *gen_type\t\t\tPROTO((char *, tree, formals_style));\n+static char *gen_decl\t\t\tPROTO((tree, int, formals_style));\n \f\n /*  Take two strings and mash them together into a newly allocated area.  */\n "}, {"sha": "7174d8a570e7507442e0b07d560f74e7cd315e34", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for HPPA.\n-   Copyright (C) 1992, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.\n    Contributed by Tim Moore (moore@cs.utah.edu), based on sparc.c\n \n This file is part of GNU CC.\n@@ -21,6 +21,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -39,6 +42,10 @@ Boston, MA 02111-1307, USA.  */\n \n static void restore_unscaled_index_insn_codes\t\tPROTO((rtx));\n static void record_unscaled_index_insn_codes\t\tPROTO((rtx));\n+static void pa_combine_instructions\t\t\tPROTO((rtx));\n+static int pa_can_combine_p\tPROTO((rtx, rtx, rtx, int, rtx, rtx, rtx));\n+static int forward_branch_p\t\t\t\tPROTO((rtx));\n+static int shadd_constant_p\t\t\t\tPROTO((int));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -1445,6 +1452,9 @@ reloc_needed (exp)\n \n     case ERROR_MARK:\n       break;\n+\n+    default:\n+      break;\n     }\n   return reloc;\n }\n@@ -2195,7 +2205,6 @@ remove_useless_addtr_insns (insns, check_notes)\n      int check_notes;\n {\n   rtx insn;\n-  int all;\n   static int pass = 0;\n \n   /* This is fairly cheap, so always run it when optimizing.  */\n@@ -2712,6 +2721,7 @@ hppa_expand_prologue()\n \n   /* Allocate the local frame and set up the frame pointer if needed.  */\n   if (actual_fsize)\n+  {\n     if (frame_pointer_needed)\n       {\n \t/* Copy the old frame pointer temporarily into %r1.  Set up the\n@@ -2756,6 +2766,8 @@ hppa_expand_prologue()\n \t\t\t  STACK_POINTER_REGNUM,\n \t\t\t  actual_fsize);\n       }\n+  }\n+\n   /* The hppa calling conventions say that that %r19, the pic offset\n      register, is saved at sp - 32 (in this function's frame)  when\n      generating PIC code.  FIXME:  What is the correct thing to do\n@@ -2923,7 +2935,6 @@ output_function_epilogue (file, size)\n      int size;\n {\n   rtx insn = get_last_insn ();\n-  int i;\n \n   /* hppa_expand_epilogue does the dirty work now.  We just need\n      to output the assembler directives which denote the end\n@@ -5067,7 +5078,6 @@ output_millicode_call (insn, call_dest)\n     {\n       int delay_insn_deleted = 0;\n       rtx xoperands[2];\n-      rtx link;\n \n       /* We need to emit an inline long-call branch.  */\n       if (dbr_sequence_length () != 0\n@@ -5618,7 +5628,7 @@ plus_xor_ior_operator (op, mode)\n \n /* Return 1 if the given constant is 2, 4, or 8.  These are the valid\n    constants for shadd instructions.  */\n-int\n+static int\n shadd_constant_p (val)\n      int val;\n {\n@@ -5694,7 +5704,7 @@ non_hard_reg_operand (op, mode)\n \n /* Return 1 if INSN branches forward.  Should be using insn_addresses\n    to avoid walking through all the insns... */\n-int\n+static int\n forward_branch_p (insn)\n      rtx insn;\n {\n@@ -5823,6 +5833,7 @@ output_parallel_addb (operands, length)\n    immediately follows a call since the jump can usually be eliminated\n    completely by modifying RP in the delay slot of the call.  */\n    \n+int\n following_call (insn)\n      rtx insn;\n {\n@@ -5969,6 +5980,7 @@ record_unscaled_index_insn_codes (insns)\n    insns mark where we should emit .begin_brtab and .end_brtab directives\n    when using GAS (allows for better link time optimizations).  */\n \n+void\n pa_reorg (insns)\n      rtx insns;\n {\n@@ -6110,6 +6122,7 @@ pa_reorg (insns)\n       is an insns away).  These are difficult to use due to the\n       branch length restrictions.  */\n \n+static void\n pa_combine_instructions (insns)\n      rtx insns;\n {\n@@ -6135,9 +6148,9 @@ pa_combine_instructions (insns)\n \n       /* We only care about INSNs, JUMP_INSNs, and CALL_INSNs.\n \t Also ignore any special USE insns.  */\n-      if (GET_CODE (anchor) != INSN\n+      if ((GET_CODE (anchor) != INSN\n \t  && GET_CODE (anchor) != JUMP_INSN\n-\t  && GET_CODE (anchor) != CALL_INSN\n+\t  && GET_CODE (anchor) != CALL_INSN)\n \t  || GET_CODE (PATTERN (anchor)) == USE\n \t  || GET_CODE (PATTERN (anchor)) == CLOBBER\n \t  || GET_CODE (PATTERN (anchor)) == ADDR_VEC"}, {"sha": "cfbbb468f4eb5ccf83cfa520b913295cd50df24d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -273,6 +273,17 @@ extern int target_flags;\n /* Machine dependent reorg pass.  */\n #define MACHINE_DEPENDENT_REORG(X) pa_reorg(X)\n \n+/* Prototype function used in MACHINE_DEPENDENT_REORG macro. */\n+void pa_reorg ();\n+\n+/* Prototype function used in various macros. */\n+int symbolic_operand ();\n+\n+/* Used in insn-*.c. */\n+int following_call ();\n+int function_label_operand ();\n+int lhs_lshift_cint_operand ();\n+\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Asystem(unix) -Asystem(bsd) -Acpu(hppa) -Amachine(hppa)\"\n@@ -755,6 +766,9 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n    : (C) == 'P' ? and_mask_p (VALUE)\t\t\t\t\\\n    : 0)\n \n+/* Prototype function used in macro CONST_OK_FOR_LETTER_P. */\n+int zdepi_cint_p ();\n+\n /* Similar, but for floating or large integer constants, and defining letters\n    G and H.   Here VALUE is the CONST_DOUBLE rtx itself.\n "}, {"sha": "053d008167825b669ff51496bebeff41505501d4", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for HP PA-RISC architecture for GNU C compiler\n-;;   Copyright (C) 1992, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n+;;   Copyright (C) 1992, 93 - 97, 1998 Free Software Foundation, Inc.\n ;;   Contributed by the Center for Software Science at the University\n ;;   of Utah.\n \n@@ -4495,7 +4495,7 @@\n \t\t\t (match_operand:SI 2 \"uint5_operand\" \"\"))\n \t(match_operand:SI 3 \"const_int_operand\" \"\"))]\n   \"(INTVAL (operands[3]) & 0x10) != 0 &&\n-   (~INTVAL (operands[3]) & (1L << INTVAL (operands[1])) - 1 & ~0xf) == 0\"\n+   (~INTVAL (operands[3]) & ((1L << INTVAL (operands[1])) - 1) & ~0xf) == 0\"\n   \"*\n {\n   operands[3] = GEN_INT ((INTVAL (operands[3]) & 0xf) - 0x10);\n@@ -4665,7 +4665,7 @@\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t (match_operand:SI 2 \"ireg_or_int5_operand\" \"rL\")))]\n-  \"reload_completed && operands[0] == operands[1] || operands[0] == operands[2]\"\n+  \"(reload_completed && operands[0] == operands[1]) || operands[0] == operands[2]\"\n   \"*\n {\n   return output_parallel_addb (operands, get_attr_length (insn));"}, {"sha": "4568c453958f7e6450bf346189d1b46e3811c16c", "filename": "gcc/cppalloc.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fcppalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fcppalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppalloc.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n /* Part of CPP library.  (memory allocation - xmalloc etc)\n-   Copyright (C) 1986, 87, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92 - 95, 1998 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -24,6 +24,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"cpplib.h\"\n \n static void"}, {"sha": "e03deb4fce34469d11ef7ae7709757875b58b52a", "filename": "gcc/cpperror.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n /* Default error handlers for CPP Library.\n-   Copyright (C) 1986, 87, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92 - 95, 1998 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -37,7 +37,6 @@ cpp_print_containing_files (pfile)\n      cpp_reader *pfile;\n {\n   cpp_buffer *ip;\n-  int i;\n   int first = 1;\n \n   /* If stack of files hasn't changed since we last printed\n@@ -67,7 +66,7 @@ cpp_print_containing_files (pfile)\n \t    fprintf (stderr, \",\\n                \");\n \t}\n \n-      fprintf (stderr, \" from %s:%d\", ip->nominal_fname, line);\n+      fprintf (stderr, \" from %s:%ld\", ip->nominal_fname, line);\n     }\n   if (! first)\n     fprintf (stderr, \":\\n\");"}, {"sha": "cf532404a702890466c3f9fea2298a5eb18dfde0", "filename": "gcc/cse.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -7803,13 +7803,15 @@ cse_around_loop (loop_start)\n   if (last_jump_equiv_class)\n     for (p = last_jump_equiv_class->first_same_value; p;\n \t p = p->next_same_value)\n-      if (GET_CODE (p->exp) == MEM || GET_CODE (p->exp) == REG\n-\t  || (GET_CODE (p->exp) == SUBREG\n-\t      && GET_CODE (SUBREG_REG (p->exp)) == REG))\n-\tinvalidate (p->exp, VOIDmode);\n-      else if (GET_CODE (p->exp) == STRICT_LOW_PART\n-\t       || GET_CODE (p->exp) == ZERO_EXTRACT)\n-\tinvalidate (XEXP (p->exp, 0), GET_MODE (p->exp));\n+      {\n+        if (GET_CODE (p->exp) == MEM || GET_CODE (p->exp) == REG\n+\t    || (GET_CODE (p->exp) == SUBREG\n+\t        && GET_CODE (SUBREG_REG (p->exp)) == REG))\n+\t  invalidate (p->exp, VOIDmode);\n+        else if (GET_CODE (p->exp) == STRICT_LOW_PART\n+\t         || GET_CODE (p->exp) == ZERO_EXTRACT)\n+\t  invalidate (XEXP (p->exp, 0), GET_MODE (p->exp));\n+      }\n \n   /* Process insns starting after LOOP_START until we hit a CALL_INSN or\n      a CODE_LABEL (we could handle a CALL_INSN, but it isn't worth it).\n@@ -8752,7 +8754,9 @@ delete_dead_from_cse (insns, nreg)\n {\n   int *counts = (int *) alloca (nreg * sizeof (int));\n   rtx insn, prev;\n+#ifdef HAVE_cc0\n   rtx tem;\n+#endif\n   int i;\n   int in_libcall = 0, dead_libcall = 0;\n "}, {"sha": "8ae483491507644b9296bd570e1d49b839dd8c0d", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -5887,9 +5887,9 @@ expand_expr (exp, target, tmode, modifier)\n \n \t/* If domain is empty, answer is no.  Likewise if index is constant\n \t   and out of bounds.  */\n-\tif ((TREE_CODE (set_high_bound) == INTEGER_CST\n+\tif (((TREE_CODE (set_high_bound) == INTEGER_CST\n \t     && TREE_CODE (set_low_bound) == INTEGER_CST\n-\t     && tree_int_cst_lt (set_high_bound, set_low_bound)\n+\t     && tree_int_cst_lt (set_high_bound, set_low_bound))\n \t     || (TREE_CODE (index) == INTEGER_CST\n \t\t && TREE_CODE (set_low_bound) == INTEGER_CST\n \t\t && tree_int_cst_lt (index, set_low_bound))"}, {"sha": "f6bd7b2d789b64fe727238e5099b89557d978e56", "filename": "gcc/final.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92-6, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-7, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -583,7 +583,7 @@ app_enable ()\n {\n   if (! app_on)\n     {\n-      fprintf (asm_out_file, ASM_APP_ON);\n+      fputs (ASM_APP_ON, asm_out_file);\n       app_on = 1;\n     }\n }\n@@ -596,7 +596,7 @@ app_disable ()\n {\n   if (app_on)\n     {\n-      fprintf (asm_out_file, ASM_APP_OFF);\n+      fputs (ASM_APP_OFF, asm_out_file);\n       app_on = 0;\n     }\n }\n@@ -1099,7 +1099,9 @@ profile_function (file)\n #else\n #if defined(STRUCT_VALUE_REGNUM) && defined(ASM_OUTPUT_REG_PUSH)\n   if (sval)\n-    ASM_OUTPUT_REG_PUSH (file, STRUCT_VALUE_REGNUM);\n+    {\n+      ASM_OUTPUT_REG_PUSH (file, STRUCT_VALUE_REGNUM);\n+    }\n #endif\n #endif\n \n@@ -1109,7 +1111,9 @@ profile_function (file)\n #else\n #if defined(STATIC_CHAIN_REGNUM) && defined(ASM_OUTPUT_REG_PUSH)\n   if (cxt)\n-    ASM_OUTPUT_REG_PUSH (file, STATIC_CHAIN_REGNUM);\n+    {\n+      ASM_OUTPUT_REG_PUSH (file, STATIC_CHAIN_REGNUM);\n+    }\n #endif\n #endif\n \n@@ -1121,7 +1125,9 @@ profile_function (file)\n #else\n #if defined(STATIC_CHAIN_REGNUM) && defined(ASM_OUTPUT_REG_PUSH)\n   if (cxt)\n-    ASM_OUTPUT_REG_POP (file, STATIC_CHAIN_REGNUM);\n+    {\n+      ASM_OUTPUT_REG_POP (file, STATIC_CHAIN_REGNUM);\n+    }\n #endif\n #endif\n \n@@ -1131,7 +1137,9 @@ profile_function (file)\n #else\n #if defined(STRUCT_VALUE_REGNUM) && defined(ASM_OUTPUT_REG_PUSH)\n   if (sval)\n-    ASM_OUTPUT_REG_POP (file, STRUCT_VALUE_REGNUM);\n+    {\n+      ASM_OUTPUT_REG_POP (file, STRUCT_VALUE_REGNUM);\n+    }\n #endif\n #endif\n }\n@@ -1148,7 +1156,7 @@ final_end_function (first, file, optimize)\n {\n   if (app_on)\n     {\n-      fprintf (file, ASM_APP_OFF);\n+      fputs (ASM_APP_OFF, file);\n       app_on = 0;\n     }\n \n@@ -1476,7 +1484,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \tbreak;\t\t\t/* An insn that was \"deleted\" */\n       if (app_on)\n \t{\n-\t  fprintf (file, ASM_APP_OFF);\n+\t  fputs (ASM_APP_OFF, file);\n \t  app_on = 0;\n \t}\n       if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG\n@@ -1660,7 +1668,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #endif\n       if (app_on)\n \t{\n-\t  fprintf (file, ASM_APP_OFF);\n+\t  fputs (ASM_APP_OFF, file);\n \t  app_on = 0;\n \t}\n       if (NEXT_INSN (insn) != 0\n@@ -1700,7 +1708,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n     default:\n       {\n-\tregister rtx body = PATTERN (insn), set;\n+\tregister rtx body = PATTERN (insn);\n \tint insn_code_number;\n \tchar *template;\n #ifdef HAVE_cc0\n@@ -1740,7 +1748,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n \t    if (app_on)\n \t      {\n-\t\tfprintf (file, ASM_APP_OFF);\n+\t\tfputs (ASM_APP_OFF, file);\n \t\tapp_on = 0;\n \t      }\n \n@@ -1792,7 +1800,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      break;\n \t    if (! app_on)\n \t      {\n-\t\tfprintf (file, ASM_APP_ON);\n+\t\tfputs (ASM_APP_ON, file);\n \t\tapp_on = 1;\n \t      }\n \t    fprintf (asm_out_file, \"\\t%s\\n\", XSTR (body, 0));\n@@ -1813,7 +1821,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n \t    if (! app_on)\n \t      {\n-\t\tfprintf (file, ASM_APP_ON);\n+\t\tfputs (ASM_APP_ON, file);\n \t\tapp_on = 1;\n \t      }\n \n@@ -1832,7 +1840,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n \tif (prescan <= 0 && app_on)\n \t  {\n-\t    fprintf (file, ASM_APP_OFF);\n+\t    fputs (ASM_APP_OFF, file);\n \t    app_on = 0;\n \t  }\n "}, {"sha": "5c3198fa2620ce913a74a4d56cb41b079e232e21", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -40,6 +40,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -415,8 +418,10 @@ static void instantiate_decl\tPROTO((rtx, int, int));\n static int instantiate_virtual_regs_1 PROTO((rtx *, rtx, int));\n static void delete_handlers\tPROTO((void));\n static void pad_to_arg_alignment PROTO((struct args_size *, int));\n+#ifndef ARGS_GROW_DOWNWARD\n static void pad_below\t\tPROTO((struct args_size *, enum  machine_mode,\n \t\t\t\t       tree));\n+#endif\n static tree round_down\t\tPROTO((tree, int));\n static rtx round_trampoline_addr PROTO((rtx));\n static tree blocks_nreverse\tPROTO((tree));\n@@ -4607,6 +4612,7 @@ pad_to_arg_alignment (offset_ptr, boundary)\n     }\n }\n \n+#ifndef ARGS_GROW_DOWNWARD\n static void\n pad_below (offset_ptr, passed_mode, sizetree)\n      struct args_size *offset_ptr;\n@@ -4634,6 +4640,7 @@ pad_below (offset_ptr, passed_mode, sizetree)\n \t}\n     }\n }\n+#endif\n \n static tree\n round_down (value, divisor)\n@@ -6021,7 +6028,7 @@ reposition_prologue_and_epilogue_notes (f)\n \t\t     move it to just after the last prologue insn.  */\n \t\t  if (note == 0)\n \t\t    {\n-\t\t      for (note = insn; note = NEXT_INSN (note);)\n+\t\t      for (note = insn; (note = NEXT_INSN (note));)\n \t\t\tif (GET_CODE (note) == NOTE\n \t\t\t    && NOTE_LINE_NUMBER (note) == NOTE_INSN_PROLOGUE_END)\n \t\t\t  break;\n@@ -6059,7 +6066,7 @@ reposition_prologue_and_epilogue_notes (f)\n \t\t     move it to just before the first epilogue insn.  */\n \t\t  if (note == 0)\n \t\t    {\n-\t\t      for (note = insn; note = PREV_INSN (note);)\n+\t\t      for (note = insn; (note = PREV_INSN (note));)\n \t\t\tif (GET_CODE (note) == NOTE\n \t\t\t    && NOTE_LINE_NUMBER (note) == NOTE_INSN_EPILOGUE_BEG)\n \t\t\t  break;"}, {"sha": "d31b3b3ed6e1b5b87dbf0f946961a977fb17be2d", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n /* Procedure integration for GNU CC.\n-   Copyright (C) 1988, 91, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 91, 93-97, 1998 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1295,7 +1295,9 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   rtx stack_save = 0;\n   rtx temp;\n   struct inline_remap *map;\n+#ifdef HAVE_cc0\n   rtx cc0_insn = 0;\n+#endif\n   rtvec arg_vector = ORIGINAL_ARG_VECTOR (header);\n   rtx static_chain_value = 0;\n "}, {"sha": "c5710f2ec3fb78ef511cb8f4031db34b459587dd", "filename": "gcc/jump.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -800,7 +800,10 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t or a jump to somewhere else.  */\n \t      rtx target = JUMP_LABEL (temp);\n \t      int nuses = LABEL_NUSES (target);\n-\t      rtx p, q;\n+\t      rtx p;\n+#ifdef HAVE_cc0\n+\t      rtx q;\n+#endif\n \n \t      /* Set P to the first jump insn that goes around \"x = a;\".  */\n \t      for (p = temp; nuses && p; p = prev_nonnote_insn (p))\n@@ -2542,7 +2545,6 @@ find_cross_jump (e1, e2, minimum, f1, f2)\n \n   rtx last1 = 0, last2 = 0;\n   rtx afterlast1 = 0, afterlast2 = 0;\n-  rtx prev1;\n \n   *f1 = 0;\n   *f2 = 0;"}, {"sha": "e5ad42089e46ee6b6caea91521760040e3cd40b9", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1910,7 +1910,7 @@ __bb_exit_trace_func ()\n         {\n           for (ptr = bb_head; ptr != (struct bb *) 0; ptr = ptr->next)\n             {\n-              if (!ptr->filename || p->filename != (char *) 0 && strcmp (p->filename, ptr->filename))\n+              if (!ptr->filename || (p->filename != (char *) 0 && strcmp (p->filename, ptr->filename)))\n                 continue;\n               for (blk = 0; blk < ptr->ncounts; blk++)\n                 {\n@@ -2011,7 +2011,7 @@ found:        ;\n                for ( ; bucket; bucket = bucket->next )\n                  {\n                    fprintf (file, \"Jump from block 0x%.*lx to \"\n-                                  \"block 0x%.*lx executed %*d time(s)\\n\", \n+                                  \"block 0x%.*lx executed %*lu time(s)\\n\", \n                             addr_len, bucket->src_addr, \n                             addr_len, bucket->dst_addr, \n                             cnt_len, bucket->count);\n@@ -2111,7 +2111,7 @@ __bb_init_prg ()\n             {\n               unsigned long l;\n               f->next = bb_func_head;\n-              if (pos = strchr (p, ':'))\n+              if ((pos = strchr (p, ':')))\n                 {\n                   if (!(f->funcname = (char *) malloc (strlen (pos+1)+1)))\n                     continue;"}, {"sha": "cb126a4f7db7ab961c357fc6b1a1e4c773fa9890", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -61,6 +61,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"basic-block.h\"\n@@ -2181,7 +2184,7 @@ requires_inout (p)\n   int reg_allowed = 0;\n   int num_matching_alts = 0;\n \n-  while (c = *p++)\n+  while ((c = *p++))\n     switch (c)\n       {\n       case '=':  case '+':  case '?':"}, {"sha": "89402a547c1a0d2a4d7f6b3ad03c65aa23001502", "filename": "gcc/loop.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -324,11 +324,13 @@ void iteration_info ();\n \n /* Two main functions for implementing bct:\n    first - to be called before loop unrolling, and the second - after */\n+#ifdef HAVE_decrement_and_branch_on_count\n static void analyze_loop_iterations ();\n static void insert_bct ();\n \n /* Auxiliary function that inserts the bct pattern into the loop */\n static void instrument_loop_bct ();\n+#endif /* HAVE_decrement_and_branch_on_count */\n #endif  /* HAIFA */\n \n /* Indirect_jump_in_function is computed once per function.  */\n@@ -1980,7 +1982,7 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t\t      /* If library call, now fix the REG_NOTES that contain\n \t\t\t insn pointers, namely REG_LIBCALL on FIRST\n \t\t\t and REG_RETVAL on I1.  */\n-\t\t      if (temp = find_reg_note (i1, REG_RETVAL, NULL_RTX))\n+\t\t      if ((temp = find_reg_note (i1, REG_RETVAL, NULL_RTX)))\n \t\t\t{\n \t\t\t  XEXP (temp, 0) = first;\n \t\t\t  temp = find_reg_note (first, REG_LIBCALL, NULL_RTX);\n@@ -2046,8 +2048,8 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \n \t\t      /* if library call, delete all insn except last, which\n \t\t\t is deleted below */\n-\t\t      if (temp = find_reg_note (m1->insn, REG_RETVAL,\n-\t\t\t\t\t\tNULL_RTX))\n+\t\t      if ((temp = find_reg_note (m1->insn, REG_RETVAL,\n+\t\t\t\t\t\t NULL_RTX)))\n \t\t\t{\n \t\t\t  for (temp = XEXP (temp, 0); temp != m1->insn;\n \t\t\t       temp = NEXT_INSN (temp))\n@@ -3018,7 +3020,7 @@ consec_sets_invariant_p (reg, n_sets, insn)\n \t  this = invariant_p (SET_SRC (set));\n \t  if (this != 0)\n \t    value |= this;\n-\t  else if (temp = find_reg_note (p, REG_EQUAL, NULL_RTX))\n+\t  else if ((temp = find_reg_note (p, REG_EQUAL, NULL_RTX)))\n \t    {\n \t      /* If this is a libcall, then any invariant REG_EQUAL note is OK.\n \t\t If this is an ordinary insn, then only CONSTANT_P REG_EQUAL\n@@ -6440,7 +6442,10 @@ maybe_eliminate_biv_1 (x, insn, bl, eliminate_p, where)\n   rtx reg = bl->biv->dest_reg;\n   enum machine_mode mode = GET_MODE (reg);\n   struct induction *v;\n-  rtx arg, new, tem;\n+  rtx arg, tem;\n+#ifdef HAVE_cc0\n+  rtx new;\n+#endif\n   int arg_operand;\n   char *fmt;\n   int i, j;\n@@ -7164,6 +7169,7 @@ get_condition_for_loop (x)\n     loop_increment[loop_num]\n     loop_comparison_code[loop_num] */\n \n+#ifdef HAVE_decrement_and_branch_on_count\n static\n void analyze_loop_iterations (loop_start, loop_end)\n   rtx loop_start, loop_end;\n@@ -7641,7 +7647,6 @@ instrument_loop_bct (loop_start, loop_end, loop_num_iterations)\n   rtx sequence;\n   enum machine_mode loop_var_mode = SImode;\n \n-#ifdef HAVE_decrement_and_branch_on_count\n   if (HAVE_decrement_and_branch_on_count)\n     {\n       if (loop_dump_stream)\n@@ -7679,8 +7684,9 @@ instrument_loop_bct (loop_start, loop_end, loop_num_iterations)\n       LABEL_NUSES (start_label)++;\n     }\n \n-#endif /* HAVE_decrement_and_branch_on_count */\n }\n+#endif /* HAVE_decrement_and_branch_on_count */\n+\n #endif\t/* HAIFA */\n \n /* Scan the function and determine whether it has indirect (computed) jumps."}, {"sha": "f997ecbb19cafbe1a6627ba272e1799917020e82", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n /* Implement classes and message passing for Objective C.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-95, 97, 1998 Free Software Foundation, Inc.\n    Contributed by Steve Naroff.\n \n This file is part of GNU CC.\n@@ -40,6 +40,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"tree.h\"\n #include \"c-tree.h\"\n #include \"c-lex.h\"\n@@ -748,7 +751,9 @@ lookup_method_in_protocol_list (rproto_list, sel_name, class_meth)\n \t\t\t\t\t\t    sel_name, class_meth);\n \t  }\n \telse\n-\t  ; /* An identifier...if we could not find a protocol.  */\n+          {\n+\t    ; /* An identifier...if we could not find a protocol.  */\n+          }\n \n \tif (fnd)\n \t  return fnd;\n@@ -786,7 +791,9 @@ lookup_protocol_in_reflist (rproto_list, lproto)\n \t }\n      }\n    else\n-     ; /* An identifier...if we could not find a protocol.  */\n+     {\n+       ; /* An identifier...if we could not find a protocol.  */\n+     }\n \n    return 0;\n }\n@@ -1349,7 +1356,7 @@ objc_add_static_instance (constructor, class_decl)\n      tree constructor, class_decl;\n {\n   static int num_static_inst;\n-  tree *chain, decl, decl_spec, decl_expr;\n+  tree *chain, decl;\n   char buf[256];\n \n   push_obstacks_nochange ();\n@@ -1805,7 +1812,7 @@ get_objc_string_decl (ident, section)\n      tree ident;\n      enum string_section section;\n {\n-  tree chain, decl;\n+  tree chain;\n \n   if (section == class_names)\n     chain = class_names_chain;\n@@ -1829,7 +1836,7 @@ static void\n generate_static_references ()\n {\n   tree decls = NULL_TREE, ident, decl_spec, expr_decl, expr = NULL_TREE;\n-  tree class_name, class, decl, instance, idecl, initlist;\n+  tree class_name, class, decl, initlist;\n   tree cl_chain, in_chain, type;\n   int num_inst, num_class;\n   char buf[256];\n@@ -6028,7 +6035,9 @@ check_protocols (proto_list, type, name)\n \n \t}\n       else\n-\t; /* An identifier if we could not find a protocol.  */\n+        {\n+\t  ; /* An identifier if we could not find a protocol.  */\n+        }\n \n       /* Check protocols recursively.  */\n       if (PROTOCOL_LIST (p))"}, {"sha": "4324ae506d037e5aa1462d8a6df17956e68542c1", "filename": "gcc/protoize.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1,5 +1,5 @@\n /* Protoize program - Original version by Ron Guilmette (rfg@segfault.us.com).\n-   Copyright (C) 1989, 92-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 92-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -85,6 +85,10 @@ Boston, MA 02111-1307, USA.  */\n #include <stdlib.h>\n #endif\n \n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n #ifdef HAVE_STRING_H\n #include <string.h>\n #else\n@@ -786,7 +790,7 @@ substr (s1, s2)\n       const char *p2;\n       int c;\n \n-      for (p1 = s1, p2 = s2; c = *p2; p1++, p2++)\n+      for (p1 = s1, p2 = s2; (c = *p2); p1++, p2++)\n         if (*p1 != c)\n           goto outer;\n       return s1;\n@@ -1336,12 +1340,12 @@ abspath (cwd, rel_filename)\n     if (rel_filename[0] != '/')\n       {\n         src_p = cwd2;\n-        while (*endp++ = *src_p++)\n+        while ((*endp++ = *src_p++))\n           continue;\n         *(endp-1) = '/';        \t\t/* overwrite null */\n       }\n     src_p = rel_filename;\n-    while (*endp++ = *src_p++)\n+    while ((*endp++ = *src_p++))\n       continue;\n   }\n \n@@ -1493,7 +1497,7 @@ shortpath (cwd, filename)\n \t  if (rel_buffer + filename_len <= rel_buf_p)\n \t    return filename;\n \t}\n-      while (*rel_buf_p++ = *path_p++);\n+      while ((*rel_buf_p++ = *path_p++));\n \n       --rel_buf_p;\n       if (*(rel_buf_p-1) == '/')"}, {"sha": "b3029e06d0a39b185072dc134c60f3cd09752b45", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1589,7 +1589,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n       rtx q, inc_dest;\n \n       inc_dest = post_inc_set ? SET_DEST (post_inc_set) : src;\n-      for (q = post_inc; q = NEXT_INSN (q); )\n+      for (q = post_inc; (q = NEXT_INSN (q)); )\n \t{\n \t  if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN\n \t      || (GET_CODE (q) == NOTE"}, {"sha": "bd22bbeddb8e57de34496b033526eb2eacfd68c7", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -366,7 +366,6 @@ push_secondary_reload (in_p, x, opnum, optional, reload_class, reload_mode,\n   enum machine_mode t_mode = VOIDmode;\n   enum insn_code t_icode = CODE_FOR_nothing;\n   enum reload_type secondary_type;\n-  int i;\n   int s_reload, t_reload = -1;\n \n   if (type == RELOAD_FOR_INPUT_ADDRESS\n@@ -2460,7 +2459,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n       /* Scan this operand's constraint to see if it is an output operand, \n \t an in-out operand, is commutative, or should match another.  */\n \n-      while (c = *p++)\n+      while ((c = *p++))\n \t{\n \t  if (c == '=')\n \t    modified[i] = RELOAD_WRITE;"}, {"sha": "f416a8704df96c97d3bc1c129202d4a08c9948a8", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -21,6 +21,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"insn-config.h\""}, {"sha": "7f7b40f2b2f86dc4dafd945cc290c5ee2c1a6a33", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1206,7 +1206,7 @@ extern int memory_address_p\t\tPROTO ((enum machine_mode, rtx));\n extern int constrain_operands\t\tPROTO ((int, int));\n extern int mode_dependent_address_p\tPROTO ((rtx));\n extern void init_recog_no_volatile\tPROTO ((void));\n-extern int offsettable_memref_pq\tPROTO ((rtx));\n+extern int offsettable_memref_p\t\tPROTO ((rtx));\n extern int offsettable_nonstrict_memref_p PROTO ((rtx));\n extern int reg_fits_class_p\t\tPROTO ((rtx, register enum reg_class,\n \t\t\t\t\t\tint, enum machine_mode));"}, {"sha": "20140b3e57bb197056d630fd0c9a83b06be4dac0", "filename": "gcc/stmt.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -4073,7 +4073,7 @@ add_case_node (low, high, label, duplicate)\n \t      if (r->balance < 0)\n \t\t{\n \t\t  /* R-Rotation */\n-\t\t  if (p->left = s = r->right)\n+\t\t  if ((p->left = s = r->right))\n \t\t    s->parent = p;\n \n \t\t  r->right = p;\n@@ -4082,7 +4082,7 @@ add_case_node (low, high, label, duplicate)\n \t\t  s = p->parent;\n \t\t  p->parent = r;\n \n-\t\t  if (r->parent = s)\n+\t\t  if ((r->parent = s))\n \t\t    {\n \t\t      if (s->left == p)\n \t\t\ts->left = r;\n@@ -4100,11 +4100,11 @@ add_case_node (low, high, label, duplicate)\n \t\t  int b2;\n \t\t  struct case_node *t = r->right;\n \n-\t\t  if (p->left = s = t->right)\n+\t\t  if ((p->left = s = t->right))\n \t\t    s->parent = p;\n \n \t\t  t->right = p;\n-\t\t  if (r->right = s = t->left)\n+\t\t  if ((r->right = s = t->left))\n \t\t    s->parent = r;\n \n \t\t  t->left = r;\n@@ -4118,7 +4118,7 @@ add_case_node (low, high, label, duplicate)\n \t\t  p->parent = t;\n \t\t  r->parent = t;\n \n-\t\t  if (t->parent = s)\n+\t\t  if ((t->parent = s))\n \t\t    {\n \t\t      if (s->left == p)\n \t\t\ts->left = t;\n@@ -4152,15 +4152,15 @@ add_case_node (low, high, label, duplicate)\n \t\t{\n \t\t  /* L-Rotation */\n \n-\t\t  if (p->right = s = r->left)\n+\t\t  if ((p->right = s = r->left))\n \t\t    s->parent = p;\n \n \t\t  r->left = p;\n \t\t  p->balance = 0;\n \t\t  r->balance = 0;\n \t\t  s = p->parent;\n \t\t  p->parent = r;\n-\t\t  if (r->parent = s)\n+\t\t  if ((r->parent = s))\n \t\t    {\n \t\t      if (s->left == p)\n \t\t\ts->left = r;\n@@ -4179,12 +4179,12 @@ add_case_node (low, high, label, duplicate)\n \t\t  int b2;\n \t\t  struct case_node *t = r->left;\n \n-\t\t  if (p->right = s = t->left)\n+\t\t  if ((p->right = s = t->left))\n \t\t    s->parent = p;\n \n \t\t  t->left = p;\n \n-\t\t  if (r->left = s = t->right)\n+\t\t  if ((r->left = s = t->right))\n \t\t    s->parent = r;\n \n \t\t  t->right = r;\n@@ -4198,7 +4198,7 @@ add_case_node (low, high, label, duplicate)\n \t\t  p->parent = t;\n \t\t  r->parent = t;\n \n-\t\t  if (t->parent = s)\n+\t\t  if ((t->parent = s))\n \t\t    {\n \t\t      if (s->left == p)\n \t\t\ts->left = t;\n@@ -4981,7 +4981,7 @@ case_tree2list (node, right)\n     right = case_tree2list (node->right, right);\n \n   node->right = right;\n-  if (left = node->left)\n+  if ((left = node->left))\n     {\n       node->left = 0;\n       return case_tree2list (left, node);"}, {"sha": "bf16d4c9f20c5bbe806d41709c5e4855e24a8b41", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -3310,8 +3310,12 @@ valid_machine_attribute (attr_name, attr_args, decl, type)\n      tree type;\n {\n   int valid = 0;\n+#ifdef VALID_MACHINE_DECL_ATTRIBUTE\n   tree decl_attr_list = decl != 0 ? DECL_MACHINE_ATTRIBUTES (decl) : 0;\n+#endif\n+#ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n   tree type_attr_list = TYPE_ATTRIBUTES (type);\n+#endif\n \n   if (TREE_CODE (attr_name) != IDENTIFIER_NODE)\n     abort ();\n@@ -3481,6 +3485,7 @@ merge_attributes (a1, a2)\n   /* One that completely contains the other?  Take it.  */\n \n   else if (a2 && ! attribute_list_contained (a1, a2))\n+  {\n     if (attribute_list_contained (a2, a1))\n       attributes = a2;\n     else\n@@ -3500,6 +3505,7 @@ merge_attributes (a1, a2)\n \t      attributes = a1;\n \t    }\n       }\n+  }\n   return attributes;\n }\n "}, {"sha": "c9f3772f1568240915c560087a429300f1c5df0c", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -1631,7 +1631,9 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n   rtx insn, pattern;\n   rtx tem, copy;\n   int dest_reg_was_split, i;\n+#ifdef HAVE_cc0\n   rtx cc0_insn = 0;\n+#endif\n   rtx final_label = 0;\n   rtx giv_inc, giv_dest_reg, giv_src_reg;\n "}, {"sha": "e81eff3547d459b8de733abe200d46e7b37b6b0c", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517237119124e0a16546a3bf0584d9422ca5dfb0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=517237119124e0a16546a3bf0584d9422ca5dfb0", "patch": "@@ -28,6 +28,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include <setjmp.h>\n /* #include <stab.h> */\n #include \"rtl.h\""}]}