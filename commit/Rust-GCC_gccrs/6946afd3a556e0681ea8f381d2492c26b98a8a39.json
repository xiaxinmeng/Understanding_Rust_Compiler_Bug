{"sha": "6946afd3a556e0681ea8f381d2492c26b98a8a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0NmFmZDNhNTU2ZTA2ODFlYThmMzgxZDI0OTJjMjZiOThhOGEzOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-09T21:49:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-09T21:49:14Z"}, "message": "(pointer_int_sum): Multiplication should be done signed.\n\n(pointer_diff): Likewise the division.\n\nFrom-SVN: r6733", "tree": {"sha": "53ad3150d873ee7e8bebfa9dfb3bf4ef948daa24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ad3150d873ee7e8bebfa9dfb3bf4ef948daa24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6946afd3a556e0681ea8f381d2492c26b98a8a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6946afd3a556e0681ea8f381d2492c26b98a8a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6946afd3a556e0681ea8f381d2492c26b98a8a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6946afd3a556e0681ea8f381d2492c26b98a8a39/comments", "author": null, "committer": null, "parents": [{"sha": "7a3b13d103dded207b67281ead59e3cf8fe01aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3b13d103dded207b67281ead59e3cf8fe01aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3b13d103dded207b67281ead59e3cf8fe01aaa"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "412f3c3de814363849979ec926c4fa7601827091", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6946afd3a556e0681ea8f381d2492c26b98a8a39/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6946afd3a556e0681ea8f381d2492c26b98a8a39/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6946afd3a556e0681ea8f381d2492c26b98a8a39", "patch": "@@ -2520,10 +2520,13 @@ pointer_int_sum (resultcode, ptrop, intop)\n   if (TYPE_PRECISION (TREE_TYPE (intop)) != POINTER_SIZE)\n     intop = convert (type_for_size (POINTER_SIZE, 0), intop);\n \n-  /* Replace the integer argument\n-     with a suitable product by the object size.  */\n+  /* Replace the integer argument with a suitable product by the object size.\n+     Do this multiplication as signed, then convert to the appropriate\n+     pointer type (actually unsigned integral).  */\n \n-  intop = build_binary_op (MULT_EXPR, intop, size_exp, 1);\n+  intop = convert (result_type,\n+\t\t   build_binary_op (MULT_EXPR, intop,\n+\t\t\t\t    convert (TREE_TYPE (intop), size_exp), 1));\n \n   /* Create the sum or difference.  */\n \n@@ -2563,12 +2566,13 @@ pointer_diff (op0, op1)\n   /* This generates an error if op1 is pointer to incomplete type.  */\n   if (TYPE_SIZE (TREE_TYPE (TREE_TYPE (op1))) == 0)\n     error (\"arithmetic on pointer to an incomplete type\");\n+\n   /* This generates an error if op0 is pointer to incomplete type.  */\n   op1 = c_size_in_bytes (target_type);\n \n   /* Divide by the size, in easiest possible way.  */\n \n-  result = build (EXACT_DIV_EXPR, restype, op0, op1);\n+  result = build (EXACT_DIV_EXPR, restype, op0, convert (restype, op1));\n \n   folded = fold (result);\n   if (folded == result)"}]}