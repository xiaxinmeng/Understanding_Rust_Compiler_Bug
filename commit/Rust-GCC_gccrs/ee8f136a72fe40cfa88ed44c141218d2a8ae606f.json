{"sha": "ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU4ZjEzNmE3MmZlNDBjZmE4OGVkNDRjMTQxMjE4ZDJhOGFlNjA2Zg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-03-10T09:39:59Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-03-10T09:39:59Z"}, "message": "mpx-dg.exp (mpx_link_flags): New.\n\ngcc/testsuites/\n\n\t* gcc/testsuite/lib/mpx-dg.exp (mpx_link_flags): New.\n\t(mpx_init): New.\n\t(mpx_finish): New.\n\t* gcc.target/i386/mpx/alloca-1-lbv.c: New.\n\t* gcc.target/i386/mpx/alloca-1-nov.c: New.\n\t* gcc.target/i386/mpx/alloca-1-ubv.c: New.\n\t* gcc.target/i386/mpx/arg-addr-1-lbv.c: New.\n\t* gcc.target/i386/mpx/arg-addr-1-nov.c: New.\n\t* gcc.target/i386/mpx/arg-addr-1-ubv.c: New.\n\t* gcc.target/i386/mpx/bitfields-1-lbv.c: New.\n\t* gcc.target/i386/mpx/bitfields-1-nov.c: New.\n\t* gcc.target/i386/mpx/bitfields-1-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-lbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-2.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-lbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-2.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-2.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-1.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-lbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-3.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-1.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-2.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-1.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-2.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-1.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-2-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-3.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-1.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-lbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-lbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-4.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-null-ptr-bounds-1-bbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-1.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-lbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-3.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-lbv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-nov.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-ubv.c: New.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-2.c: New.\n\t* gcc.target/i386/mpx/fastcall-1-lbv.c: New.\n\t* gcc.target/i386/mpx/fastcall-1-nov.c: New.\n\t* gcc.target/i386/mpx/fastcall-1-ubv.c: New.\n\t* gcc.target/i386/mpx/fastcall-2-lbv.c: New.\n\t* gcc.target/i386/mpx/fastcall-2-nov.c: New.\n\t* gcc.target/i386/mpx/fastcall-2-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-1-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-1-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-1-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-10-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-10-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-10-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-2-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-2-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-2-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-3-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-3-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-3-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-4-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-4-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-4-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-5-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-5-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-5-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-6-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-6-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-6-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-7-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-7-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-7-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-8-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-8-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-8-ubv.c: New.\n\t* gcc.target/i386/mpx/field-addr-9-lbv.c: New.\n\t* gcc.target/i386/mpx/field-addr-9-nov.c: New.\n\t* gcc.target/i386/mpx/field-addr-9-ubv.c: New.\n\t* gcc.target/i386/mpx/frame-address-1-nov.c: New.\n\t* gcc.target/i386/mpx/hard-reg-1-nov.c: New.\n\t* gcc.target/i386/mpx/if-stmt-1-lbv.c: New.\n\t* gcc.target/i386/mpx/if-stmt-1-nov.c: New.\n\t* gcc.target/i386/mpx/if-stmt-1-ubv.c: New.\n\t* gcc.target/i386/mpx/if-stmt-2-lbv.c: New.\n\t* gcc.target/i386/mpx/if-stmt-2-nov.c: New.\n\t* gcc.target/i386/mpx/if-stmt-2-ubv.c: New.\n\t* gcc.target/i386/mpx/label-address-1.c: New.\n\t* gcc.target/i386/mpx/legacy-1-nov.c: New.\n\t* gcc.target/i386/mpx/macro.c: New.\n\t* gcc.target/i386/mpx/mpx-check.h: New.\n\t* gcc.target/i386/mpx/mpx.exp: New.\n\t* gcc.target/i386/mpx/nested-function-1-lbv.c: New.\n\t* gcc.target/i386/mpx/nested-function-1-nov.c: New.\n\t* gcc.target/i386/mpx/nested-function-1-ubv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-1-lbv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-1-nov.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-1-ubv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-2-lbv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-2-nov.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-2-ubv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-3-lbv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-3-nov.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-3-ubv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-4-lbv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-4-nov.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-4-ubv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-5-lbv.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-5-nov.c: New.\n\t* gcc.target/i386/mpx/pointer-arg-5-ubv.c: New.\n\t* gcc.target/i386/mpx/pointer-store-1-lbv.c: New.\n\t* gcc.target/i386/mpx/pointer-store-1-nov.c: New.\n\t* gcc.target/i386/mpx/pointer-store-1-ubv.c: New.\n\t* gcc.target/i386/mpx/reference-1-lbv.c: New.\n\t* gcc.target/i386/mpx/reference-1-nov.c: New.\n\t* gcc.target/i386/mpx/reference-1-ubv.c: New.\n\t* gcc.target/i386/mpx/reference-2-lbv.c: New.\n\t* gcc.target/i386/mpx/reference-2-nov.c: New.\n\t* gcc.target/i386/mpx/reference-2-ubv.c: New.\n\t* gcc.target/i386/mpx/reference-3-lbv.c: New.\n\t* gcc.target/i386/mpx/reference-3-nov.c: New.\n\t* gcc.target/i386/mpx/reference-3-ubv.c: New.\n\t* gcc.target/i386/mpx/reference-4-lbv.c: New.\n\t* gcc.target/i386/mpx/reference-4-nov.c: New.\n\t* gcc.target/i386/mpx/reference-4-ubv.c: New.\n\t* gcc.target/i386/mpx/return-pointer-1-lbv.c: New.\n\t* gcc.target/i386/mpx/return-pointer-1-nov.c: New.\n\t* gcc.target/i386/mpx/return-pointer-1-ubv.c: New.\n\t* gcc.target/i386/mpx/return-struct-1-lbv.c: New.\n\t* gcc.target/i386/mpx/return-struct-1-nov.c: New.\n\t* gcc.target/i386/mpx/return-struct-1-ubv.c: New.\n\t* gcc.target/i386/mpx/return-struct-2-lbv.c: New.\n\t* gcc.target/i386/mpx/return-struct-2-nov.c: New.\n\t* gcc.target/i386/mpx/return-struct-2-ubv.c: New.\n\t* gcc.target/i386/mpx/return-struct-3-lbv.c: New.\n\t* gcc.target/i386/mpx/return-struct-3-nov.c: New.\n\t* gcc.target/i386/mpx/return-struct-3-ubv.c: New.\n\t* gcc.target/i386/mpx/return-struct-4-lbv.c: New.\n\t* gcc.target/i386/mpx/return-struct-4-nov.c: New.\n\t* gcc.target/i386/mpx/return-struct-4-ubv.c: New.\n\t* gcc.target/i386/mpx/return-struct-5-lbv.c: New.\n\t* gcc.target/i386/mpx/return-struct-5-nov.c: New.\n\t* gcc.target/i386/mpx/return-struct-5-ubv.c: New.\n\t* gcc.target/i386/mpx/return-struct-6-lbv.c: New.\n\t* gcc.target/i386/mpx/return-struct-6-nov.c: New.\n\t* gcc.target/i386/mpx/return-struct-6-ubv.c: New.\n\t* gcc.target/i386/mpx/sincos-1-nov.c: New.\n\t* gcc.target/i386/mpx/static-array-1-lbv.c: New.\n\t* gcc.target/i386/mpx/static-array-1-nov.c: New.\n\t* gcc.target/i386/mpx/static-array-1-ubv.c: New.\n\t* gcc.target/i386/mpx/static-init-1-lbv.c: New.\n\t* gcc.target/i386/mpx/static-init-1-nov.c: New.\n\t* gcc.target/i386/mpx/static-init-1-ubv.c: New.\n\t* gcc.target/i386/mpx/static-init-2-lbv.c: New.\n\t* gcc.target/i386/mpx/static-init-2-nov.c: New.\n\t* gcc.target/i386/mpx/static-init-2-ubv.c: New.\n\t* gcc.target/i386/mpx/static-init-3-lbv.c: New.\n\t* gcc.target/i386/mpx/static-init-3-nov.c: New.\n\t* gcc.target/i386/mpx/static-init-3-ubv.c: New.\n\t* gcc.target/i386/mpx/static-init-4-lbv.c: New.\n\t* gcc.target/i386/mpx/static-init-4-nov.c: New.\n\t* gcc.target/i386/mpx/static-init-4-ubv.c: New.\n\t* gcc.target/i386/mpx/static-init-5-lbv.c: New.\n\t* gcc.target/i386/mpx/static-init-5-nov.c: New.\n\t* gcc.target/i386/mpx/static-init-5-ubv.c: New.\n\t* gcc.target/i386/mpx/static-init-6-lbv.c: New.\n\t* gcc.target/i386/mpx/static-init-6-nov.c: New.\n\t* gcc.target/i386/mpx/static-init-6-ubv.c: New.\n\t* gcc.target/i386/mpx/static-string-1-lbv.c: New.\n\t* gcc.target/i386/mpx/static-string-1-nov.c: New.\n\t* gcc.target/i386/mpx/static-string-1-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-1-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-1-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-1-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-10-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-10-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-10-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-2-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-2-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-2-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-3-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-3-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-3-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-4-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-4-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-4-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-5-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-5-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-5-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-6-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-6-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-6-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-7-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-7-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-7-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-8-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-8-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-8-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-9-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-arg-9-nov.c: New.\n\t* gcc.target/i386/mpx/struct-arg-9-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-copy-1-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-copy-1-nov.c: New.\n\t* gcc.target/i386/mpx/struct-copy-1-ubv.c: New.\n\t* gcc.target/i386/mpx/struct-copy-2-lbv.c: New.\n\t* gcc.target/i386/mpx/struct-copy-2-nov.c: New.\n\t* gcc.target/i386/mpx/struct-copy-2-ubv.c: New.\n\t* gcc.target/i386/mpx/thread-local-var-1-lbv.c: New.\n\t* gcc.target/i386/mpx/thread-local-var-1-nov.c: New.\n\t* gcc.target/i386/mpx/thread-local-var-1-ubv.c: New.\n\t* gcc.target/i386/mpx/union-arg-1-lbv.c: New.\n\t* gcc.target/i386/mpx/union-arg-1-nov.c: New.\n\t* gcc.target/i386/mpx/union-arg-1-ubv.c: New.\n\t* gcc.target/i386/mpx/va-arg-pack-1-lbv.c: New.\n\t* gcc.target/i386/mpx/va-arg-pack-1-nov.c: New.\n\t* gcc.target/i386/mpx/va-arg-pack-1-ubv.c: New.\n\t* gcc.target/i386/mpx/va-arg-pack-2-lbv.c: New.\n\t* gcc.target/i386/mpx/va-arg-pack-2-nov.c: New.\n\t* gcc.target/i386/mpx/va-arg-pack-2-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-1-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-1-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-1-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-2-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-2-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-2-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-3-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-3-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-3-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-4-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-4-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-4-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-5-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-5-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-5-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-6-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-6-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-6-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-7-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-7-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-7-ubv.c: New.\n\t* gcc.target/i386/mpx/vararg-8-lbv.c: New.\n\t* gcc.target/i386/mpx/vararg-8-nov.c: New.\n\t* gcc.target/i386/mpx/vararg-8-ubv.c: New.\n\t* gcc.target/i386/mpx/vla-1-lbv.c: New.\n\t* gcc.target/i386/mpx/vla-1-nov.c: New.\n\t* gcc.target/i386/mpx/vla-1-ubv.c: New.\n\t* gcc.target/i386/mpx/vla-2-lbv.c: New.\n\t* gcc.target/i386/mpx/vla-2-nov.c: New.\n\t* gcc.target/i386/mpx/vla-2-ubv.c: New.\n\nFrom-SVN: r221312", "tree": {"sha": "f636d74dc7cdf2cc07761293255cd2bec6f81f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f636d74dc7cdf2cc07761293255cd2bec6f81f44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5373cd33a8cdb54a31bc7bf2ae4c9903efa4911c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5373cd33a8cdb54a31bc7bf2ae4c9903efa4911c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5373cd33a8cdb54a31bc7bf2ae4c9903efa4911c"}], "stats": {"total": 7872, "additions": 7872, "deletions": 0}, "files": [{"sha": "9a48aed4728e2bd10615bce8d4667f8fb9bd2485", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -1,3 +1,264 @@\n+2015-03-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc/testsuite/lib/mpx-dg.exp (mpx_link_flags): New.\n+\t(mpx_init): New.\n+\t(mpx_finish): New.\n+\t* gcc.target/i386/mpx/alloca-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/alloca-1-nov.c: New.\n+\t* gcc.target/i386/mpx/alloca-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/arg-addr-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/arg-addr-1-nov.c: New.\n+\t* gcc.target/i386/mpx/arg-addr-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/bitfields-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/bitfields-1-nov.c: New.\n+\t* gcc.target/i386/mpx/bitfields-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-2.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-2.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-2.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-1.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-3.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-1.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-2.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-1.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-2.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-1.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-2-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-3.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-1.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-4.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-null-ptr-bounds-1-bbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-1.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-3.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-nov.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-2.c: New.\n+\t* gcc.target/i386/mpx/fastcall-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/fastcall-1-nov.c: New.\n+\t* gcc.target/i386/mpx/fastcall-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/fastcall-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/fastcall-2-nov.c: New.\n+\t* gcc.target/i386/mpx/fastcall-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-1-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-10-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-10-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-10-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-2-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-3-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-4-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-4-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-4-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-5-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-5-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-5-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-6-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-6-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-6-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-7-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-7-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-7-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-8-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-8-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-8-ubv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-9-lbv.c: New.\n+\t* gcc.target/i386/mpx/field-addr-9-nov.c: New.\n+\t* gcc.target/i386/mpx/field-addr-9-ubv.c: New.\n+\t* gcc.target/i386/mpx/frame-address-1-nov.c: New.\n+\t* gcc.target/i386/mpx/hard-reg-1-nov.c: New.\n+\t* gcc.target/i386/mpx/if-stmt-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/if-stmt-1-nov.c: New.\n+\t* gcc.target/i386/mpx/if-stmt-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/if-stmt-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/if-stmt-2-nov.c: New.\n+\t* gcc.target/i386/mpx/if-stmt-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/label-address-1.c: New.\n+\t* gcc.target/i386/mpx/legacy-1-nov.c: New.\n+\t* gcc.target/i386/mpx/macro.c: New.\n+\t* gcc.target/i386/mpx/mpx-check.h: New.\n+\t* gcc.target/i386/mpx/mpx.exp: New.\n+\t* gcc.target/i386/mpx/nested-function-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/nested-function-1-nov.c: New.\n+\t* gcc.target/i386/mpx/nested-function-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-1-nov.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-2-nov.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-3-nov.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-4-lbv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-4-nov.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-4-ubv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-5-lbv.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-5-nov.c: New.\n+\t* gcc.target/i386/mpx/pointer-arg-5-ubv.c: New.\n+\t* gcc.target/i386/mpx/pointer-store-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/pointer-store-1-nov.c: New.\n+\t* gcc.target/i386/mpx/pointer-store-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/reference-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/reference-1-nov.c: New.\n+\t* gcc.target/i386/mpx/reference-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/reference-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/reference-2-nov.c: New.\n+\t* gcc.target/i386/mpx/reference-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/reference-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/reference-3-nov.c: New.\n+\t* gcc.target/i386/mpx/reference-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/reference-4-lbv.c: New.\n+\t* gcc.target/i386/mpx/reference-4-nov.c: New.\n+\t* gcc.target/i386/mpx/reference-4-ubv.c: New.\n+\t* gcc.target/i386/mpx/return-pointer-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/return-pointer-1-nov.c: New.\n+\t* gcc.target/i386/mpx/return-pointer-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-1-nov.c: New.\n+\t* gcc.target/i386/mpx/return-struct-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-2-nov.c: New.\n+\t* gcc.target/i386/mpx/return-struct-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-3-nov.c: New.\n+\t* gcc.target/i386/mpx/return-struct-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-4-lbv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-4-nov.c: New.\n+\t* gcc.target/i386/mpx/return-struct-4-ubv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-5-lbv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-5-nov.c: New.\n+\t* gcc.target/i386/mpx/return-struct-5-ubv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-6-lbv.c: New.\n+\t* gcc.target/i386/mpx/return-struct-6-nov.c: New.\n+\t* gcc.target/i386/mpx/return-struct-6-ubv.c: New.\n+\t* gcc.target/i386/mpx/sincos-1-nov.c: New.\n+\t* gcc.target/i386/mpx/static-array-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-array-1-nov.c: New.\n+\t* gcc.target/i386/mpx/static-array-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/static-init-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-init-1-nov.c: New.\n+\t* gcc.target/i386/mpx/static-init-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/static-init-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-init-2-nov.c: New.\n+\t* gcc.target/i386/mpx/static-init-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/static-init-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-init-3-nov.c: New.\n+\t* gcc.target/i386/mpx/static-init-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/static-init-4-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-init-4-nov.c: New.\n+\t* gcc.target/i386/mpx/static-init-4-ubv.c: New.\n+\t* gcc.target/i386/mpx/static-init-5-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-init-5-nov.c: New.\n+\t* gcc.target/i386/mpx/static-init-5-ubv.c: New.\n+\t* gcc.target/i386/mpx/static-init-6-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-init-6-nov.c: New.\n+\t* gcc.target/i386/mpx/static-init-6-ubv.c: New.\n+\t* gcc.target/i386/mpx/static-string-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/static-string-1-nov.c: New.\n+\t* gcc.target/i386/mpx/static-string-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-1-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-10-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-10-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-10-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-2-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-3-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-4-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-4-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-4-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-5-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-5-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-5-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-6-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-6-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-6-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-7-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-7-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-7-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-8-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-8-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-8-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-9-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-9-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-arg-9-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-copy-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-copy-1-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-copy-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/struct-copy-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/struct-copy-2-nov.c: New.\n+\t* gcc.target/i386/mpx/struct-copy-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/thread-local-var-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/thread-local-var-1-nov.c: New.\n+\t* gcc.target/i386/mpx/thread-local-var-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/union-arg-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/union-arg-1-nov.c: New.\n+\t* gcc.target/i386/mpx/union-arg-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/va-arg-pack-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/va-arg-pack-1-nov.c: New.\n+\t* gcc.target/i386/mpx/va-arg-pack-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/va-arg-pack-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/va-arg-pack-2-nov.c: New.\n+\t* gcc.target/i386/mpx/va-arg-pack-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-1-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-2-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-2-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-3-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-3-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-3-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-4-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-4-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-4-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-5-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-5-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-5-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-6-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-6-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-6-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-7-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-7-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-7-ubv.c: New.\n+\t* gcc.target/i386/mpx/vararg-8-lbv.c: New.\n+\t* gcc.target/i386/mpx/vararg-8-nov.c: New.\n+\t* gcc.target/i386/mpx/vararg-8-ubv.c: New.\n+\t* gcc.target/i386/mpx/vla-1-lbv.c: New.\n+\t* gcc.target/i386/mpx/vla-1-nov.c: New.\n+\t* gcc.target/i386/mpx/vla-1-ubv.c: New.\n+\t* gcc.target/i386/mpx/vla-2-lbv.c: New.\n+\t* gcc.target/i386/mpx/vla-2-nov.c: New.\n+\t* gcc.target/i386/mpx/vla-2-ubv.c: New.\n+\n 2015-03-10  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.dg/vect/pr65310.c (c): Reduce alignment to 4-bytes."}, {"sha": "f81a5e25f32b941bcdfbdd92b76b7e210ef74460", "filename": "gcc/testsuite/gcc.target/i386/mpx/alloca-1-lbv.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *buf = (int *)alloca (100 * sizeof(int));\n+\n+  rd (buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "162b4d572703f7448e14ee8555c62256eb7346a2", "filename": "gcc/testsuite/gcc.target/i386/mpx/alloca-1-nov.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *buf = (int *)alloca (100 * sizeof(int));\n+\n+  rd (buf, 0);\n+  rd (buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "9af3f11ac49e572494729ee0302425c6f7e51c57", "filename": "gcc/testsuite/gcc.target/i386/mpx/alloca-1-ubv.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *buf = (int *)alloca (100 * sizeof(int));\n+\n+  rd (buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "1fd2036cf06bcaf3566721a1f21a577d0b264bdd", "filename": "gcc/testsuite/gcc.target/i386/mpx/arg-addr-1-lbv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int foo (int i, int j)\n+{\n+  return rd(&i, j);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (1, -1);\n+\n+  return 0;\n+}"}, {"sha": "4e338c76f7c273cce7714601262b0ca6ff179b85", "filename": "gcc/testsuite/gcc.target/i386/mpx/arg-addr-1-nov.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int foo (int i, int j)\n+{\n+  return rd(&i, j);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (1, 0);\n+\n+  return 0;\n+}"}, {"sha": "65cb46bcd3f68b6df9ecff08ebe86598c4bf4085", "filename": "gcc/testsuite/gcc.target/i386/mpx/arg-addr-1-ubv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int foo (int i, int j)\n+{\n+  return rd(&i, j);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (1, 1);\n+\n+  return 0;\n+}"}, {"sha": "deca6fd6a97bc81f6b3368d3bc22b85a5597e35a", "filename": "gcc/testsuite/gcc.target/i386/mpx/bitfields-1-lbv.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s {\n+  int a;\n+  int b : 10;\n+  int c : 1;\n+  int e : 10;\n+} s;\n+\n+#define HH (unsigned char)1\n+\n+int foo (struct s *p)\n+{\n+  int val = p->b;\n+  printf (\"%d\\n\", val);\n+  return val == HH;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s buf[100];\n+\n+  foo (buf - 1);\n+\n+  return 0;\n+}"}, {"sha": "0a7913a256d16a78cae486ca1280483eeb5c8523", "filename": "gcc/testsuite/gcc.target/i386/mpx/bitfields-1-nov.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s {\n+  int a;\n+  int b : 10;\n+  int c : 1;\n+  int e : 10;\n+} s;\n+\n+#define HH (unsigned char)1\n+\n+int foo (struct s *p)\n+{\n+  int val = p->b;\n+  printf (\"%d\\n\", val);\n+  return val == HH;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s buf[100];\n+\n+  foo (buf);\n+  foo (buf + 99);\n+\n+  return 0;\n+}"}, {"sha": "a20a7897fce2b33e0f57b3be7da5543f1791c037", "filename": "gcc/testsuite/gcc.target/i386/mpx/bitfields-1-ubv.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s {\n+  int a;\n+  int b : 10;\n+  int c : 1;\n+  int e : 10;\n+} s;\n+\n+#define HH (unsigned char)1\n+\n+int foo (struct s *p)\n+{\n+  int val = p->b;\n+  printf (\"%d\\n\", val);\n+  return val == HH;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s buf[100];\n+\n+  foo (buf + 100);\n+\n+  return 0;\n+}"}, {"sha": "140848e015845138682909c3cee9abbfbea6277a", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-lbv.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_bounds (buf - 1, sizeof (int));\n+  return 0;\n+}"}, {"sha": "055b61d649c4fc74f3ec6141aa42f22c1180ed67", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-nov.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_bounds (buf, sizeof (int) * 100);\n+  return 0;\n+}"}, {"sha": "f811694b9ee676d4d163979ab43c01387fa3f9c1", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-ubv.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_bounds (buf + 100, sizeof (int));\n+  return 0;\n+}"}, {"sha": "47e62e7834ddccb9f3a57afa0effccc122f9ae4d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-2.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_bounds (buf - 1, sizeof (int));\n+  __bnd_chk_ptr_bounds (buf + 100, sizeof (int));\n+  return 0;\n+}"}, {"sha": "085166fc142c0166cce03cb4af6cb2ca197f6bfd", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-lbv.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_lbounds (buf - 1);\n+  return 0;\n+}"}, {"sha": "3a666d8e300623a14580d81264d3224d488f401d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-nov.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_lbounds (buf);\n+  return 0;\n+}"}, {"sha": "87b80e0b62c69240c196d8c769b442c995d26b02", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-2.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_lbounds (buf - 1);\n+  return 0;\n+}"}, {"sha": "8a73fe367d13022c40f51b48af88997c92f7619b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-nov.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_ubounds (buf + 99);\n+  return 0;\n+}"}, {"sha": "eb22dd1936aeb08fa8ca532f8ab02d9217f85b54", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-ubv.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_ubounds (buf + 100);\n+  return 0;\n+}"}, {"sha": "503bd53a60bcbd20fdc4fa5f36feb7d9fd8ed837", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-2.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  __bnd_chk_ptr_ubounds (buf + 100);\n+  return 0;\n+}"}, {"sha": "0949f6acd87429ccc9650cad30b2c55fdbfadd1e", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-1.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 10 == __bnd_copy_ptr_bounds (buf + 10, buf));\n+  return 0;\n+}"}, {"sha": "a7317e71785cceba27fc939e25a20a62ceb5ecad", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-lbv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  int *p1 = __bnd_copy_ptr_bounds (buf, p);\n+  p1[9] = argc;\n+  return 0;\n+}"}, {"sha": "6b6423e3c6d3159a0be97f960fbf043f63613d30", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-nov.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  int *p1 = __bnd_copy_ptr_bounds (buf, p);\n+  p1[10] = argc;\n+  p1[19] = argc;\n+  return 0;\n+}"}, {"sha": "2893d9be1f924a1ea4c28338b4d04e01302b0dfd", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-ubv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  int *p1 = __bnd_copy_ptr_bounds (buf, p);\n+  p1[20] = argc;\n+  return 0;\n+}"}, {"sha": "4d0137579ebefd2748cd5e7bdf36d4da10c623e3", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-3.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 10 == __bnd_copy_ptr_bounds (buf + 10, buf));\n+  return 0;\n+}"}, {"sha": "2a7f46ff2d67bb915f3dfe38ecf5a448002a518d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-1.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+char buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf == __bnd_get_ptr_lbound (buf));\n+  return 0;\n+}"}, {"sha": "70b49e312b6aae3fad8fc800de7e3ecc3f0c3ad4", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-2.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+char buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert ((void *)0 == __bnd_get_ptr_lbound (buf));\n+  return 0;\n+}"}, {"sha": "a9111f35d7d4edcb33cfd3e40c9a4f1392008e38", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-1.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+char buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 99 == __bnd_get_ptr_ubound (buf));\n+  return 0;\n+}"}, {"sha": "cf0aca14a6b61f702c191a0b333c395ce62a262b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-2.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+char buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert ((void *)-1 == __bnd_get_ptr_ubound (buf));\n+  return 0;\n+}"}, {"sha": "ee259cc9fb68c35a58c47351c58a8f2a81a24ab7", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-1.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 10 == __bnd_init_ptr_bounds (buf + 10));\n+  return 0;\n+}"}, {"sha": "da44e7a96421b5919e21b853cee61a938ce84259", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-2-nov.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p = __bnd_init_ptr_bounds (p);\n+  p[-1] = argc;\n+  p[10] = argc;\n+  return 0;\n+}"}, {"sha": "8c1527025f622a1b127a90ff6aaff2389a42ce31", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-3.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 10 == __bnd_init_ptr_bounds (buf + 10));\n+  return 0;\n+}"}, {"sha": "4ac49abd70a4ba72cbdf340d15eb2870a4f7bb6b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-1.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 10 == __bnd_narrow_ptr_bounds (buf + 10, buf, 4));\n+  return 0;\n+}"}, {"sha": "21a8f927f4751202ffddb6e21cd3f3f330dd128f", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-lbv.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_narrow_ptr_bounds (buf - 10, buf, sizeof (int) * 20);\n+  p[9] = argc;\n+  return 0;\n+}"}, {"sha": "8182d029e07c1753a70a28c6bfc27f6d84a5851c", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-nov.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_narrow_ptr_bounds (buf - 10, buf, sizeof (int) * 20);\n+  p[10] = argc;\n+  p[19] = argc;\n+  return 0;\n+}"}, {"sha": "6ff90cee593ec2e7bde6a6c150bdaa3cca1e457d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-ubv.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_narrow_ptr_bounds (buf - 10, buf, sizeof (int) * 20);\n+  p[20] = argc;\n+  return 0;\n+}"}, {"sha": "69b4a51b490bbc66cba3d41f060b20420f2c7809", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-lbv.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_narrow_ptr_bounds (buf + 10, buf, sizeof (int) * 100);\n+  p[-1] = argc;\n+  return 0;\n+}"}, {"sha": "0c13b123d8ff2ecb58b9672a7f595b054830a2bc", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-nov.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_narrow_ptr_bounds (buf + 10, buf, sizeof (int) * 100);\n+  p[0] = argc;\n+  p[89] = argc;\n+  return 0;\n+}"}, {"sha": "445e337583467bbdb9d8c914b5827747b9e64277", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-ubv.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_narrow_ptr_bounds (buf + 10, buf, sizeof (int) * 100);\n+  p[90] = argc;\n+  return 0;\n+}"}, {"sha": "144855cfabdfe225b3bab165dcade6f653a5f3ef", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-4.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf - 10 == __bnd_narrow_ptr_bounds (buf - 10, buf, 4));\n+  return 0;\n+}"}, {"sha": "5497ef1d2daab2af79b2c1608f4b84093843dd6b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-null-ptr-bounds-1-bbv.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-null-ptr-bounds-1-bbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-null-ptr-bounds-1-bbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-null-ptr-bounds-1-bbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_null_ptr_bounds (buf + 10);\n+  p[0] = argc;\n+  return 0;\n+}"}, {"sha": "8abb2576654604cab24e77e2f4d67aae1dc93e2b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-1.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 10 == __bnd_set_ptr_bounds (buf + 10, 4));\n+  return 0;\n+}"}, {"sha": "bbc578abd2c711b24b65d657160f0e7fe9dc296e", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-lbv.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p[-1] = argc;\n+  return 0;\n+}"}, {"sha": "39df101ad5033ae4a346905be82e76eb73b1dd9f", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-nov.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p[0] = argc;\n+  p[9] = argc;\n+  return 0;\n+}"}, {"sha": "c2d27e7106552619a99068de9307277921474a84", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-ubv.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p[10] = argc;\n+  return 0;\n+}"}, {"sha": "811cdb4e11621f123f9cc1cab911fbd47ea1e509", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-3.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  assert (buf + 10 == __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10));\n+  return 0;\n+}"}, {"sha": "af6c8dbe59c8dbd8fa065507d9d385266de038cb", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-lbv.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p = buf;\n+  __bnd_store_ptr_bounds ((void **)&p, p1 - 10);\n+  p[9] = argc;\n+  return 0;\n+}"}, {"sha": "9e9ea305ae85354ed73268d53cb3df7ef6625e93", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-nov.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p = buf;\n+  __bnd_store_ptr_bounds ((void **)&p, p1 - 10);\n+  p[10] = argc;\n+  p[19] = argc;\n+  return 0;\n+}"}, {"sha": "62aca8c131bc500742603f5e5908212462cdf4d2", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-ubv.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p = buf;\n+  __bnd_store_ptr_bounds ((void **)&p, p1 - 10);\n+  p[20] = argc;\n+  return 0;\n+}"}, {"sha": "a2ca7900915c11348ffabfed66698affcc2d976b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-2.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-check-pointer-bounds\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n+  p = buf;\n+  __bnd_store_ptr_bounds ((void **)&p, p1);\n+  return 0;\n+}"}, {"sha": "6f9ba88fed5d277c02c9366a8e97b000e026eb86", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-1-lbv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n+{\n+  int res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "6a2896e0125081a82387dac1bd20bee65d073837", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-1-nov.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n+{\n+  int res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, buf, 0);\n+  rd (buf1, buf, 9);\n+\n+  return 0;\n+}"}, {"sha": "b5edc438f27e9871cfecc8f48bef7ee1fca033c4", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-1-ubv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n+{\n+  int res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, buf, 10);\n+\n+  return 0;\n+}"}, {"sha": "cbe7343e018d8f494fd31c9eee899fc9b10f6243", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-2-lbv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n+{\n+  int res = p2[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf, buf1, -1);\n+\n+  return 0;\n+}"}, {"sha": "83773d0d90c3b59ff58f43e663f2137001c736a7", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-2-nov.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n+{\n+  int res = p2[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf, buf1, 0);\n+  rd (buf, buf1, 9);\n+\n+  return 0;\n+}"}, {"sha": "1a614fa3610510f76d04b1758baa9a3f335dee2a", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-2-ubv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n+{\n+  int res = p2[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf, buf1, 10);\n+\n+  return 0;\n+}"}, {"sha": "46a58123bf4930a01d2d03577c13d6b948681059", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-1-lbv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *i, int k)\n+{\n+  printf (\"%d\\n\", i[k]);\n+  return i[k];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo(&s.a, -1);\n+\n+  return 0;\n+}"}, {"sha": "b8500ff333d37b72760cb50344301d381edd276e", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-1-nov.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *i, int k)\n+{\n+  printf (\"%d\\n\", i[k]);\n+  return i[k];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo(&s.a, 0);\n+  foo(&s.a, 101);\n+\n+  return 0;\n+}"}, {"sha": "990adee3bb2223abea3cd4155f613928b753f0ab", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-1-ubv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *i, int k)\n+{\n+  printf (\"%d\\n\", i[k]);\n+  return i[k];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo(&s.a, 102);\n+\n+  return 0;\n+}"}, {"sha": "cd8d59afd22fbed0e051792f27ef8898fac08c9c", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-10-lbv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int arr[100];\n+} S;\n+\n+struct S sa[10];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (&sa[argc].arr[0], -1);\n+\n+  return 0;\n+}"}, {"sha": "90f79a0eaed0e7708ef004636d2d76606805eddf", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-10-nov.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int arr[100];\n+} S;\n+\n+struct S sa[10];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (&sa[argc].arr[0], 0);\n+  rd (&sa[argc].arr[0], 99);\n+\n+  return 0;\n+}"}, {"sha": "b6a9ad07071bd3360d93fdf17e3e676825c70884", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-10-ubv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int arr[100];\n+} S;\n+\n+struct S sa[10];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (&sa[argc].arr[0], 100);\n+\n+  return 0;\n+}"}, {"sha": "fdf39672315afc6233daa86f65d08fdf9c8b09e5", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-2-lbv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-first-field-has-own-bounds\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *i, int k)\n+{\n+  printf (\"%d\\n\", i[k]);\n+  return i[k];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo(&s.a, -1);\n+\n+  return 0;\n+}"}, {"sha": "2a685036ca0a5ca483f3505f3d2a3020ef09feb8", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-2-nov.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-first-field-has-own-bounds\" } */\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *i, int k)\n+{\n+  printf (\"%d\\n\", i[k]);\n+  return i[k];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo(&s.a, 0);\n+\n+  return 0;\n+}"}, {"sha": "b07b09ff808aab5f843e3762e6ece2c644d1b391", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-2-ubv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-first-field-has-own-bounds\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *i, int k)\n+{\n+  printf (\"%d\\n\", i[k]);\n+  return i[k];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo(&s.a, 1);\n+\n+  return 0;\n+}"}, {"sha": "ea919d80fbc9517c18c90f74693a535fe6a06a5e", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-3-lbv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S s;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s.b[0], -1);\n+\n+  return 0;\n+}"}, {"sha": "12f42c4d2897dbe2992df7bd4457e311edfb80b9", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-3-nov.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S s;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s.b[0], 0);\n+  foo (&s.b[0], 99);\n+\n+  return 0;\n+}"}, {"sha": "55a8af3a0ce97822d82ffd6bb757dae5ef9a255f", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-3-ubv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S s;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s.b[0], 100);\n+\n+  return 0;\n+}"}, {"sha": "23cf71ed6dfaecac5608af3d384d75a37170bfea", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-4-lbv.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s1.a[0].a, -1);\n+\n+  return 0;\n+}"}, {"sha": "791753244f3bf3f582a4a88d1acef650c3c151ef", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-4-nov.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s1.a[9].c, 0);\n+  foo (&s1.a[0].a, 0);\n+\n+  return 0;\n+}"}, {"sha": "0d4ac020cf3733e2055e5c76692bb7c490c39022", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-4-ubv.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s1.a[9].c, 1);\n+\n+  return 0;\n+}"}, {"sha": "c00d42f3213ffee6fd4754cbc7e73f6a279151ea", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-5-lbv.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s1.b.b[0], -1);\n+\n+  return 0;\n+}"}, {"sha": "b69895e1d2060a23c39b607510dff905112cff21", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-5-nov.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s1.b.b[0], 0);\n+  foo (&s1.b.b[0], 99);\n+\n+  return 0;\n+}"}, {"sha": "d00f41eb86e7cdcbe6ebc276adb0a04cad3f3489", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-5-ubv.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&s1.b.b[0], 100);\n+\n+  return 0;\n+}"}, {"sha": "91b64bf462d6203e47e697f74490f97143ef3b38", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-6-lbv.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+struct S1 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[0].a), -1);\n+\n+  return 0;\n+}"}, {"sha": "f837f57a4218d293aecca8d6aa9d40bad2d030fc", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-6-nov.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+struct S1 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[0].a), 0);\n+  foo (&(s2->a[9].a), 101);\n+\n+  return 0;\n+}"}, {"sha": "97ef911406eeb26bf1ef5fe6fbbb3d137a6831c9", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-6-ubv.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+struct S1 {\n+  int x;\n+  struct S a[10];\n+  struct S b;\n+} S1;\n+\n+int foo (int *p, int i)\n+{\n+  printf (\"%d\\n\", p[i]);\n+  return p[i];\n+}\n+\n+struct S1 s1;\n+struct S1 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[9].a), 102);\n+\n+  return 0;\n+}"}, {"sha": "176971168e51b10fa5cce80575bc9383dffaecc6", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-7-lbv.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[-1].a), 0);\n+\n+  return 0;\n+}"}, {"sha": "19c09b8271ea53f25384bee5ea3e0b72eba60424", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-7-nov.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[0].a), 0);\n+  foo (&(s2->a[9].c), 0);\n+\n+  return 0;\n+}"}, {"sha": "c9e8ae2442c47a8cb9f625a84760e4f6d8fc9846", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-7-ubv.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[10].a), 0);\n+\n+  return 0;\n+}"}, {"sha": "cac6784175b5e292e520b56e9e259dec561da8a3", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-8-lbv.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s1.a[argc].b[-1].a[0]), 9);\n+\n+  return 0;\n+}"}, {"sha": "e7243a989f9ed49b844559556bd300de5b1a2e30", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-8-nov.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s1.a[argc].b[0].a[0]), 0);\n+  foo (&(s1.a[argc].b[0].a[0]), 9);\n+  foo (&(s1.a[argc].b[9].a[0]), 0);\n+  foo (&(s1.a[argc].b[9].a[0]), 9);\n+\n+  return 0;\n+}"}, {"sha": "d2792e1bba4d8d6905c99964feb84d9f46749c60", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-8-ubv.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s1.a[argc].b[10].a[0]), 9);\n+\n+  return 0;\n+}"}, {"sha": "127d0966330524a37495d7514ae62b9d71b9b8ed", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-9-lbv.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int first;\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[argc].b[5].a[0]), -1);\n+\n+  return 0;\n+}"}, {"sha": "7f98b0188a3c8551baee2bf0c3f12fb461a3191a", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-9-nov.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int first;\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[argc].b[5].a[0]), 0);\n+  foo (&(s2->a[argc].b[5].a[0]), 9);\n+\n+  return 0;\n+}"}, {"sha": "a65b8f0d17fbdf4da859fc858b7719c8996ddc12", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-9-ubv.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int first;\n+  int a[10];\n+  int b;\n+} S;\n+\n+struct S1 {\n+  int a;\n+  struct S b[10];\n+  int c;\n+} S1;\n+\n+struct S2 {\n+  int x;\n+  struct S1 a[10];\n+  struct S1 b;\n+} S2;\n+\n+int foo (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+struct S2 s1;\n+struct S2 *s2 = &s1;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (&(s2->a[argc].b[5].a[0]), 10);\n+\n+  return 0;\n+}"}, {"sha": "87cc2dd1cfcb244562d4e3518c2920f7df2882f4", "filename": "gcc/testsuite/gcc.target/i386/mpx/frame-address-1-nov.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fframe-address-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fframe-address-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fframe-address-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  void **fa = (void **)__builtin_frame_address (0);\n+  printf (\"%p\\n\", *fa);\n+  return 0;\n+}"}, {"sha": "86276791e0670b98ad6bb8bc5cf05006f50b7227", "filename": "gcc/testsuite/gcc.target/i386/mpx/hard-reg-1-nov.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  register int *frame __asm__(\"rsp\");\n+  rd (frame, 1);\n+\n+  return 0;\n+}"}, {"sha": "29fa443697f74bc0e56c02886ab82ef73a92f604", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-1-lbv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p1, int *p2, int i)\n+{\n+  int res;\n+\n+  if (p1 < p2)\n+    p1 = p2;\n+\n+  res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n+  rd (buf, p, -1);\n+\n+  return 0;\n+}"}, {"sha": "576ea8487e3daa6cbb5132257406f79034518816", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-1-nov.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p1, int *p2, int i)\n+{\n+  int res;\n+\n+  if (p1 < p2)\n+    p1 = p2;\n+\n+  res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n+  rd (buf, p, 0);\n+  rd (buf, p, 9);\n+\n+  return 0;\n+}"}, {"sha": "021a3aed2678683cfab3a9518385e10ffa3c1b93", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-1-ubv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p1, int *p2, int i)\n+{\n+  int res;\n+\n+  if (p1 < p2)\n+    p1 = p2;\n+\n+  res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n+  rd (buf, p, 10);\n+\n+  return 0;\n+}"}, {"sha": "5d7fe6299a5332be30fb9799533370dad53dae08", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-2-lbv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p1, int *p2, int i)\n+{\n+  int res;\n+\n+  if (p1 > p2)\n+    p1 = p2;\n+\n+  res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n+  rd (buf, p, -1);\n+\n+  return 0;\n+}"}, {"sha": "327c108f7890008cdf8f7b0a56a5b2d48dda7ec8", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-2-nov.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p1, int *p2, int i)\n+{\n+  int res;\n+\n+  if (p1 > p2)\n+    p1 = p2;\n+\n+  res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n+  rd (buf, p, 0);\n+  rd (buf, p, 99);\n+\n+  return 0;\n+}"}, {"sha": "3047f7b51041124a3532f40e9fc9e5c8988d08c7", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-2-ubv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int rd (int *p1, int *p2, int i)\n+{\n+  int res;\n+\n+  if (p1 > p2)\n+    p1 = p2;\n+\n+  res = p1[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n+  rd (buf, p, 100);\n+\n+  return 0;\n+}"}, {"sha": "f4cd360b1d4cd4667ae581b575355b079e5d82e7", "filename": "gcc/testsuite/gcc.target/i386/mpx/label-address-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flabel-address-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flabel-address-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flabel-address-1.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+void *p;\n+int mpx_test (int argc, const char **argv)\n+{\n+  p = &&label;\n+\n+ label:\n+  return 0;\n+}"}, {"sha": "b51ac7f0271e7253c332f9aeee9e9091d6f0f5e6", "filename": "gcc/testsuite/gcc.target/i386/mpx/legacy-1-nov.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flegacy-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flegacy-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flegacy-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+__attribute__((bnd_legacy))\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p = __bnd_set_ptr_bounds (buf + 1, 10);\n+\n+  rd (p, -1);\n+  rd (p, 10);\n+\n+  return 0;\n+}"}, {"sha": "00d467bd19d09b98e2d1d1a0b16a6e7a16a3462d", "filename": "gcc/testsuite/gcc.target/i386/mpx/macro.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmacro.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+#ifndef __MPX__\n+#error -mmpx is required\n+#endif\n+\n+#ifndef __CHKP__\n+#error -fcheck-pointer-bounds is required\n+#endif\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  return 0;\n+}"}, {"sha": "3afa46093d1e538cfee03a5e1206070a74b662de", "filename": "gcc/testsuite/gcc.target/i386/mpx/mpx-check.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,41 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+#include \"cpuid.h\"\n+\n+static int\n+__attribute__ ((noinline))\n+mpx_test (int, const char **);\n+\n+#ifdef SHOULDFAIL\n+#define NORUNRES 1\n+#else\n+#define NORUNRES 0\n+#endif\n+\n+#define DEBUG\n+\n+int\n+main (int argc, const char **argv)\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (__get_cpuid_max (0, NULL) < 7)\n+    return 0;\n+\n+  __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+  /* Run MPX test only if host has MPX support.  */\n+  if (ebx & bit_MPX)\n+    mpx_test (argc, argv);\n+  else\n+    {\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+      return NORUNRES;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "757c8e9f20d968db12db0df3fc7b1251775172a6", "filename": "gcc/testsuite/gcc.target/i386/mpx/mpx.exp", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx.exp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Exit immediately if this isn't a x86 target.\n+if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+load_lib mpx-dg.exp\n+\n+# Initialize.\n+dg-init\n+mpx_init\n+\n+if [check_effective_target_mpx] {\n+    # Run all tests.\n+    gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c*]] \"\" \"\"\n+}\n+\n+# All done.\n+mpx_finish\n+dg-finish"}, {"sha": "0e9d657fcbd300fc27ff890ba475f85525ef6a8c", "filename": "gcc/testsuite/gcc.target/i386/mpx/nested-function-1-lbv.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int a[100];\n+\n+  void rd (int i)\n+  {\n+    printf (\"%d\\n\", a[i]);\n+  }\n+\n+  rd (-1);\n+\n+  return 0;\n+}"}, {"sha": "dd985466328a7b148f59b19c6d7fed6973fcf58f", "filename": "gcc/testsuite/gcc.target/i386/mpx/nested-function-1-nov.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int a[100];\n+\n+  void rd (int i)\n+  {\n+    printf (\"%d\\n\", a[i]);\n+  }\n+\n+  rd (0);\n+  rd (99);\n+\n+  return 0;\n+}"}, {"sha": "b5cf6cc29b3d6f0659339ee14376ea21dba15b73", "filename": "gcc/testsuite/gcc.target/i386/mpx/nested-function-1-ubv.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int a[100];\n+\n+  void rd (int i)\n+  {\n+    printf (\"%d\\n\", a[i]);\n+  }\n+\n+  rd (100);\n+\n+  return 0;\n+}"}, {"sha": "58692efb0e3fccfd78280f2840999c39d6bc710a", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-1-lbv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "01279be8d3b81e13e0a7ece74ea4ef07aa82256c", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-1-nov.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf, 0);\n+  rd (buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "c377c57eb6bf4eea65ccc73ceb89e2d9f6acc5c2", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-1-ubv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "ebe76cb8263a6d20e35e5ceeb60dd6fb9684d14b", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-2-lbv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int t1, int t2, int t3, int t4, int t5, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (0, 0, 0, 0, 0, buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "8b9fce2e29745906be4e02cf3838be7221377d51", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-2-nov.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int t1, int t2, int t3, int t4, int t5, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (0, 0, 0, 0, 0, buf, 0);\n+  rd (0, 0, 0, 0, 0, buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "525140e2d7913fc6716d5ef147f1144e525a3f0d", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-2-ubv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int t1, int t2, int t3, int t4, int t5, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (0, 0, 0, 0, 0, buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "d6571be44b518abaf13a1728f08d9fc46b517da3", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-3-lbv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int t1, int t2, int t3, int t4, int t5, int t6, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (0, 0, 0, 0, 0, 0, buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "e42ecba4e2a51e97d84b1fda64201134ebd2a181", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-3-nov.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int t1, int t2, int t3, int t4, int t5, int t6, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (0, 0, 0, 0, 0, 0, buf, 0);\n+  rd (0, 0, 0, 0, 0, 0, buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "8da6252a03a63455ddc26fcb576cb95f063eff6d", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-3-ubv.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int t1, int t2, int t3, int t4, int t5, int t6, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (0, 0, 0, 0, 0, 0, buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "5a6842512db537797c6e1c1b5283038c24fa9d86", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-4-lbv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *t1, int *t2, int *t3, int *t4, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf1, buf1, buf1, buf1, buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "bb2bc46a6f3251a2c76a976d7abd4fe9e9aee10c", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-4-nov.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *t1, int *t2, int *t3, int *t4, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf1, buf1, buf1, buf1, buf, 0);\n+  rd (buf1, buf1, buf1, buf1, buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "cf3a5c48f1b7d2d6d1e59c650ea5ffedb9afbb41", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-4-ubv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *t1, int *t2, int *t3, int *t4, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf1, buf1, buf1, buf1, buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "7c3bd867204811ff062145bca375365cc1da13f3", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-5-lbv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *t1, int *t2, int *t3, int *t4, int *t5, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "27e4a7130b09b627306bb5d3786fa525cfcfad49", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-5-nov.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *t1, int *t2, int *t3, int *t4, int *t5, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, 0);\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "68e2654b91abe11aa4baa1e54de986f7efd6949b", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-5-ubv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *t1, int *t2, int *t3, int *t4, int *t5, int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "bde8c76e4b7282cda3e2fa321ec3a9269960264e", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-store-1-lbv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int *buf1[100];\n+int buf2[100];\n+\n+void wr (int i)\n+{\n+  buf1[i] = buf2;\n+}\n+\n+int rd(int i, int j)\n+{\n+  int res = buf1[i][j];\n+  printf(\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  wr(10);\n+  rd(10, -1);\n+\n+  return 0;\n+}"}, {"sha": "269e3af17f04f147dfaf9cb6dd996de34f014ad1", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-store-1-nov.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int *buf1[100];\n+int buf2[100];\n+\n+void wr (int i)\n+{\n+  buf1[i] = buf2;\n+}\n+\n+int rd(int i, int j)\n+{\n+  int res = buf1[i][j];\n+  printf(\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  wr(10);\n+  rd(10, 0);\n+  rd(10, 99);\n+\n+  return 0;\n+}"}, {"sha": "4c8d45e003f242d8babff5fc125f2d8dbaf033d7", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-store-1-ubv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int *buf1[100];\n+int buf2[100];\n+\n+void wr (int i)\n+{\n+  buf1[i] = buf2;\n+}\n+\n+int rd(int i, int j)\n+{\n+  int res = buf1[i][j];\n+  printf(\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  wr(10);\n+  rd(10, 100);\n+\n+  return 0;\n+}"}, {"sha": "ec5f546c081eadfbe377f30b718647a86b41dd07", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-1-lbv.cpp", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-lbv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-lbv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-lbv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int __attribute((nothrow))\n+rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+void set_p (int *&ref)\n+{\n+  ref = buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  set_p (p);\n+  rd (p, -1);\n+\n+  return 0;\n+}"}, {"sha": "98f1622349af17bf15669c97acb8f906b60fb2d1", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-1-nov.cpp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-nov.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-nov.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-nov.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int __attribute((nothrow))\n+rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+void set_p (int *&ref)\n+{\n+  ref = buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  set_p (p);\n+  rd (p, 0);\n+  rd (p, 99);\n+\n+  return 0;\n+}"}, {"sha": "d2135e7270f87247b14f75a7689c9845914ec854", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-1-ubv.cpp", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-ubv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-ubv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-1-ubv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int __attribute((nothrow))\n+rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+void set_p (int *&ref)\n+{\n+  ref = buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  set_p (p);\n+  rd (p, 100);\n+\n+  return 0;\n+}"}, {"sha": "907cb06616cd7f10c2aab6867eccf4516dbb8392", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-2-lbv.cpp", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-lbv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-lbv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-lbv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int __attribute((nothrow))\n+rd (int *&p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+void set_p (int *&ref)\n+{\n+  ref = buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  set_p (p);\n+  rd (p, -1);\n+\n+  return 0;\n+}"}, {"sha": "cdd927c891ef90e51be4d8f00b9179d79ff535d2", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-2-nov.cpp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-nov.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-nov.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-nov.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int __attribute((nothrow))\n+rd (int *&p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+void set_p (int *&ref)\n+{\n+  ref = buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  set_p (p);\n+  rd (p, 0);\n+  rd (p, 99);\n+\n+  return 0;\n+}"}, {"sha": "2f75375d2511514b7daa073a0bfe13da0dd40bee", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-2-ubv.cpp", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-ubv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-ubv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-2-ubv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int __attribute((nothrow))\n+rd (int *&p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+void set_p (int *&ref)\n+{\n+  ref = buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  set_p (p);\n+  rd (p, 100);\n+\n+  return 0;\n+}"}, {"sha": "1330359797d1fbe6a65038ebc671ff7aaf61aec6", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-3-lbv.cpp", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-lbv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-lbv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-lbv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int (&p)[100], int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "9a5519318a4ac1676d18f4158142cd67ee7f5fa4", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-3-nov.cpp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-nov.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-nov.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-nov.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int (&p)[100], int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf, 0);\n+  rd (buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "0a874fabb0951a428924bcf26473506f2db575f6", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-3-ubv.cpp", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-ubv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-ubv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-3-ubv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int (&p)[100], int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "2442c6a4a9a094f66a18ec6c94d637bfa6e12540", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-4-lbv.cpp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-lbv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-lbv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-lbv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int (&p)[100], int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int (&get_buf ()) [100]\n+{\n+  return buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (get_buf (), -1);\n+\n+  return 0;\n+}"}, {"sha": "9646cc0645d42c7f95ba1e32c156c6db2a576ad9", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-4-nov.cpp", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-nov.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-nov.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-nov.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int (&p)[100], int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int (&get_buf ()) [100]\n+{\n+  return buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (get_buf (), 0);\n+  rd (get_buf (), 99);\n+\n+  return 0;\n+}"}, {"sha": "da3382357ab03796cc2434c5ce5663ce68c26874", "filename": "gcc/testsuite/gcc.target/i386/mpx/reference-4-ubv.cpp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-ubv.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-ubv.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freference-4-ubv.cpp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int rd (int (&p)[100], int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int (&get_buf ()) [100]\n+{\n+  return buf;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int *p;\n+\n+  rd (get_buf (), 100);\n+\n+  return 0;\n+}"}, {"sha": "9a209b8d3044c96f7ba6ab0a87e8ddfc72d01a8c", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-pointer-1-lbv.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int *_buf1[100];\n+int _buf2[100];\n+\n+int **get_buf1 ()\n+{\n+  return _buf1;\n+}\n+\n+int *get_buf2 ()\n+{\n+  return _buf2;\n+}\n+\n+void wr (int i, int **buf1, int *buf2)\n+{\n+  buf1[i] = buf2;\n+}\n+\n+int rd (int i, int j, int **buf)\n+{\n+  int res = buf[i][j];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int **buf1 = get_buf1 ();\n+  int *buf2 = get_buf2 ();\n+  wr(10, buf1, buf2);\n+  rd(10, -1, buf1);\n+\n+  return 0;\n+}"}, {"sha": "62d05013909a823c256fcb866841e6b11d394f48", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-pointer-1-nov.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int *_buf1[100];\n+int _buf2[100];\n+\n+int **get_buf1 ()\n+{\n+  return _buf1;\n+}\n+\n+int *get_buf2 ()\n+{\n+  return _buf2;\n+}\n+\n+void wr (int i, int **buf1, int *buf2)\n+{\n+  buf1[i] = buf2;\n+}\n+\n+int rd (int i, int j, int **buf)\n+{\n+  int res = buf[i][j];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int **buf1 = get_buf1 ();\n+  int *buf2 = get_buf2 ();\n+  wr(10, buf1, buf2);\n+  rd(10, 0, buf1);\n+  rd(10, 99, buf1);\n+\n+  return 0;\n+}"}, {"sha": "4658aef1714a6ddc5f06e7a467b8b4682930f2dc", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-pointer-1-ubv.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-pointer-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int *_buf1[100];\n+int _buf2[100];\n+\n+int **get_buf1 ()\n+{\n+  return _buf1;\n+}\n+\n+int *get_buf2 ()\n+{\n+  return _buf2;\n+}\n+\n+void wr (int i, int **buf1, int *buf2)\n+{\n+  buf1[i] = buf2;\n+}\n+\n+int rd (int i, int j, int **buf)\n+{\n+  int res = buf[i][j];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  int **buf1 = get_buf1 ();\n+  int *buf2 = get_buf2 ();\n+  wr(10, buf1, buf2);\n+  rd(10, 100, buf1);\n+\n+  return 0;\n+}"}, {"sha": "ef29427fff35e0c98ed708192dfb24517ad89409", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-1-lbv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "12e1edd6c4cd0b0a4927ddc3cb9cac2e4d3f02d3", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-1-nov.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "dda908b2203f7dfd5efb87d5dee8bbd15ac60893", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-1-ubv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "bf370669d1c5498fcce59861d498b4b350dd0d7a", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-2-lbv.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int *p1;\n+} s1;\n+\n+int buf[100];\n+int buf1[10];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.p1 = buf1;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "577e3ab5dc1cca40f7b205d25410d818bf39ab67", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-2-nov.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int *p1;\n+} s1;\n+\n+int buf[100];\n+int buf1[10];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.p1 = buf1;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "c5a7ad002af6a038248239f0f13ca756ab1cf2ae", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-2-ubv.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int *p1;\n+} s1;\n+\n+int buf[100];\n+int buf1[10];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.p1 = buf1;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "1802ca837cf8f2fdff85c4d0b38d262bf118bb33", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-3-lbv.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p1;\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+int buf1[10];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.p1 = buf1;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "2e5214a82785195d808604a92922befdaf0f880a", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-3-nov.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p1;\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+int buf1[10];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.p1 = buf1;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "83b81da83905cdd983340a0236563211d1953276", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-3-ubv.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-3-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p1;\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+int buf1[10];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.p1 = buf1;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "7937514d67c3ffd51d20f3e6e98cf792af09f67d", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-4-lbv.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "352b5723266fc1f39847d097232453070e7ea194", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-4-nov.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "14ba0bddb264e9cca219dacd05d5e1ba047b5e8d", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-4-ubv.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-4-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "2bd871a8562a64786f1347d146720faf634a2be7", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-5-lbv.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "978b4930675987cb0003e3b53760fb1161d3eeaf", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-5-nov.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "633e15dbe6710078c161ba2db436c10ef895a844", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-5-ubv.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-5-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "9e2cf2cc26ab944587f2ca2997ff869f83415b96", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-6-lbv.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+  int i3;\n+  int i4;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "f2d60f470f3057ef1abac869290d780193541407", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-6-nov.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+  int i3;\n+  int i4;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "637051238b6850933d0f6a3004db4608ccd07732", "filename": "gcc/testsuite/gcc.target/i386/mpx/return-struct-6-ubv.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Freturn-struct-6-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+  int i3;\n+  int i4;\n+} s1;\n+\n+int buf[100];\n+\n+struct s1 __attribute__((noinline)) get ()\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  return s;\n+}\n+\n+int __attribute__((noinline)) rd (struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = get ();\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "da5f301a19a0f09745e5079d294b9e4974cf4b92", "filename": "gcc/testsuite/gcc.target/i386/mpx/sincos-1-nov.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fsincos-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fsincos-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fsincos-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+/* { dg-additional-options \"-lm\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"math.h\"\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  double d1, d2;\n+  d1 = sin(argc);\n+  d2 = cos(argc);\n+\n+  printf (\"%f %f\\n\", d1, d2);\n+\n+  return 0;\n+}"}, {"sha": "cc1cf8ddd83cc696e8e5ad316a7a0c7c445f91dd", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-array-1-lbv.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf(\"%d\\n\", buf[-1]);\n+  return 0;\n+}"}, {"sha": "13d30c55ae550875d5c2314c8cda8ccb2d725343", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-array-1-nov.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf(\"%d\\n\", buf[0]);\n+  printf(\"%d\\n\", buf[99]);\n+  return 0;\n+}"}, {"sha": "e3cac3cfa5dc5fb4efcce1953ed4f165ccf3e92e", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-array-1-ubv.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-array-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf(\"%d\\n\", buf[100]);\n+  return 0;\n+}"}, {"sha": "7c0367e01e79e81da07ca876d09cfcef69314364", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-1-lbv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p = buf;\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", p[-1]);\n+\n+  return 0;\n+}"}, {"sha": "0c91615239a26ea7c58f0c6db718f2bbb04f2ed0", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-1-nov.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p = buf;\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", p[0]);\n+  printf (\"%d\\n\", p[99]);\n+\n+  return 0;\n+}"}, {"sha": "a19d92708d6914d725dc311d1287334e424a903e", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-1-ubv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p = buf;\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", p[100]);\n+\n+  return 0;\n+}"}, {"sha": "1ad3be8ff631d85cbc1d03a6c68c04932351beb4", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-2-lbv.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s {\n+  int a;\n+  int *p;\n+} s;\n+\n+int buf[100];\n+\n+struct s s1 = {0, buf};\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", s1.p[-1]);\n+\n+  return 0;\n+}"}, {"sha": "6ef755f8971094967c617e3331c717b7240100fe", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-2-nov.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s {\n+  int a;\n+  int *p;\n+} s;\n+\n+int buf[100];\n+\n+struct s s1 = {0, buf};\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", s1.p[0]);\n+  printf (\"%d\\n\", s1.p[99]);\n+\n+  return 0;\n+}"}, {"sha": "3681ebe03ea627607ffbd2efa935ecbed378f731", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-2-ubv.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s {\n+  int a;\n+  int *p;\n+} s;\n+\n+int buf[100];\n+\n+struct s s1 = {0, buf};\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", s1.p[100]);\n+\n+  return 0;\n+}"}, {"sha": "3aa21ca3619e0e254aaaa303c1c10da6f9ae68e6", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-3-lbv.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p = buf;\n+\n+int foo (int i)\n+{\n+  static int **pp = &p;\n+\n+  return (*pp)[i];\n+}\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", foo (-1));\n+\n+  return 0;\n+}"}, {"sha": "7bdc5af0911ec6e8c698c40d9e8668df154fb608", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-3-nov.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p = buf;\n+\n+int foo (int i)\n+{\n+  static int **pp = &p;\n+\n+  return (*pp)[i];\n+}\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", foo (0));\n+  printf (\"%d\\n\", foo (99));\n+\n+  return 0;\n+}"}, {"sha": "fb8411aa4cb8847dc1c99fb79cc576d104f2cffc", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-3-ubv.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-3-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p = buf;\n+\n+int foo (int i)\n+{\n+  static int **pp = &p;\n+\n+  return (*pp)[i];\n+}\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", foo (100));\n+\n+  return 0;\n+}"}, {"sha": "896838ec0ab9b488e6b39aae9e22f510e25ec0a8", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-4-lbv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p[1] = { buf };\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", p[0][-1]);\n+\n+  return 0;\n+}"}, {"sha": "3bdb5ec51626ba4be9c2deab1049b98f0ece6290", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-4-nov.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p[1] = { buf };\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", p[0][0]);\n+  printf (\"%d\\n\", p[0][99]);\n+\n+  return 0;\n+}"}, {"sha": "47bca2fc07fb31f540f4a1b8b347d849768c0ee8", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-4-ubv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-4-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf[100];\n+int *p[1] = { buf };\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  printf (\"%d\\n\", p[0][100]);\n+\n+  return 0;\n+}"}, {"sha": "bd47a4a73aac8db167f556259ab3e99e499f6d26", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-5-lbv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf (\"%d\\n\", s.b[0].p[0][-1]);\n+\n+  return 0;\n+}"}, {"sha": "87fe35d474268a1afe78766efb78d72e0fc0ff02", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-5-nov.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf (\"%d\\n\", s.b[0].p[0][0]);\n+  printf (\"%d\\n\", s.b[0].p[0][99]);\n+  printf (\"%d\\n\", s.b[0].p[1][0]);\n+  printf (\"%d\\n\", s.b[0].p[1][199]);\n+  printf (\"%d\\n\", s.b[1].p[0][0]);\n+  printf (\"%d\\n\", s.b[1].p[0][199]);\n+  printf (\"%d\\n\", s.b[1].p[1][0]);\n+  printf (\"%d\\n\", s.b[1].p[1][99]);\n+\n+  return 0;\n+}"}, {"sha": "7f136253b0ea0264f1babcbe924d54104e618908", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-5-ubv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-5-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf (\"%d\\n\", s.b[0].p[0][100]);\n+\n+  return 0;\n+}"}, {"sha": "9b90cee6a14aae06b83da9185c53caef7356de85", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-6-lbv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+  printf (\"%d\\n\", s.b[0].p[0][-1]);\n+\n+  return 0;\n+}"}, {"sha": "a125024ecc344e33fead0692cc954d88eeb36c5d", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-6-nov.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+  printf (\"%d\\n\", s.b[0].p[0][0]);\n+  printf (\"%d\\n\", s.b[0].p[0][99]);\n+\n+  return 0;\n+}"}, {"sha": "a60c4e0befc2754d0dc925aa5c08c0f8934bc600", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-init-6-ubv.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-init-6-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+  printf (\"%d\\n\", s.b[0].p[0][100]);\n+\n+  return 0;\n+}"}, {"sha": "e2443804f7438c20686d5acff6040773cf7c88be", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-string-1-lbv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+char *str=\"dddd\";\n+\n+int foo1 (char** ptr)\n+{\n+  *ptr=str;\n+}\n+\n+int foo (char *ptr)\n+{\n+  char *tmp = 0;\n+  foo1 (&ptr);\n+  tmp = ptr;\n+  return tmp[-1];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf (\"%d\\n\", foo (\"ddddd\"));\n+  return 0;\n+}"}, {"sha": "d513638688f330461534081ba92ba0fe16722da0", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-string-1-nov.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+char *str=\"dddd\";\n+\n+int foo1 (char** ptr)\n+{\n+  *ptr=str;\n+}\n+\n+int foo (char *ptr)\n+{\n+  char *tmp = 0;\n+  foo1 (&ptr);\n+  tmp = ptr;\n+  return tmp[0] + tmp[4];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf (\"%d\\n\", foo (\"ddddd\"));\n+  return 0;\n+}"}, {"sha": "e0f3634c324ac12285949a4d2f3083c36e692bee", "filename": "gcc/testsuite/gcc.target/i386/mpx/static-string-1-ubv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstatic-string-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+char *str=\"dddd\";\n+\n+int foo1 (char** ptr)\n+{\n+  *ptr=str;\n+}\n+\n+int foo (char *ptr)\n+{\n+  char *tmp = 0;\n+  foo1 (&ptr);\n+  tmp = ptr;\n+  return tmp[5];\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  printf (\"%d\\n\", foo (\"ddddd\"));\n+  return 0;\n+}"}, {"sha": "a9e1890b18ed387379d5fac72b7a301fd29e0de3", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-1-lbv.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "b1cfeacafbb0723215082212131110f8818c96f9", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-1-nov.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (s);\n+\n+  s.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "c4ca68d682a3f6948d1ec069db9c3ff59a497262", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-1-ubv.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = 51;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "8375aa1b820e0e640583ed9d5284d01f8e852f8b", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-10-lbv.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, int *p5, int *p6, struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, buf1, s, -1);\n+\n+  return 0;\n+}"}, {"sha": "b246448346d033a5af44057d4bad5fe5a0e46d89", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-10-nov.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, int *p5, int *p6, struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, buf1, s, 0);\n+  rd (buf1, buf1, buf1, buf1, buf1, buf1, s, 99);\n+\n+  return 0;\n+}"}, {"sha": "b3b13f86672a7ea821d89d3a7956d95c426af003", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-10-ubv.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-10-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, int *p5, int *p6, struct s1 s, int i)\n+{\n+  int res = s.p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, buf1, s, 100);\n+\n+  return 0;\n+}"}, {"sha": "d796ced340dae83928d6abd649437a4abedafe39", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-2-lbv.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "6a1a087b23fc6dfad5ba16d7c432f7774d9900ec", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-2-nov.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (s);\n+\n+  s.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "b285cbc83204d8dbfae0343acdbc0b7e13c39184", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-2-ubv.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int i1;\n+  int i2;\n+  int *p;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = 51;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "34d4ab18581af34bb9df2c6814a4ec97f5cc9f55", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-3-lbv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "8e238ef657eab98354c93145bccef21407adaaec", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-3-nov.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (buf1, s);\n+\n+  s.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "bd947e5859d67f51f6370f02f2328357f36302c7", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-3-ubv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-3-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = 50;\n+\n+  rd (buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "c0666d389a1570d19d32f81c44cef168aa192bef", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-4-lbv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "17366c55ca7443ce70bf8856a271e46a86c77b16", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-4-nov.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (buf1, buf1, s);\n+\n+  s.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "f2f8281dc361c3528276caf821f2f648a7dea86e", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-4-ubv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-4-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = 50;\n+\n+  rd (buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "357bb6ac7461883395295b19be9513d406972bc1", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-5-lbv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "a4acd38939efc8b6ec40aa534f6b31a6805a6250", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-5-nov.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (buf1, buf1, buf1, s);\n+\n+  s.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "c94ae1c24aaf50c85f1a9077866582fab44e48c8", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-5-ubv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-5-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = 50;\n+\n+  rd (buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "ceee8d0c69d121f53c5ec1db172435e883cfd021", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-6-lbv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (buf1, buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "913f5a28dc240dcb684f7043bc3e6b8cc333e451", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-6-nov.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (buf1, buf1, buf1, buf1, s);\n+\n+  s.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (buf1, buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "f92476a7854045de197cd9ce60210754372d4562", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-6-ubv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-6-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = 50;\n+\n+  rd (buf1, buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "b0ecc176cd5ca5644529ae8cf90fabeff9f2de9d", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-7-lbv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, int *p5, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "ec63dc7ef4744a4c6242cb6414c9c074c002bc81", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-7-nov.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, int *p5, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, s);\n+\n+  s.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "c9e682252c14fd1daa8f30e5be7d5add72a0048d", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-7-ubv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-7-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  int *p;\n+  int i1;\n+  int i2;\n+} s1;\n+\n+int rd (int *p1, int *p2, int *p3, int *p4, int *p5, struct s1 s)\n+{\n+  int res = s.p[s.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.p = buf;\n+  s.i1 = 50;\n+  s.i2 = 50;\n+\n+  rd (buf1, buf1, buf1, buf1, buf1, s);\n+\n+  return 0;\n+}"}, {"sha": "58d03e783d8439acd2b095193fb289da55dccbe8", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-8-lbv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1 {\n+  int *p[2];\n+} s1;\n+\n+int rd (struct s1 s, int i)\n+{\n+  int res = s.p[0][i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = { {buf, buf1} };\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "d9072ec49c9e71feeacd7430d51ebecae537a04f", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-8-nov.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1 {\n+  int *p[2];\n+} s1;\n+\n+int rd (struct s1 s, int i)\n+{\n+  int res = s.p[0][i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = { {buf, buf1} };\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "fdcfc9ffb392f7d1b02272fef26abd28f8117bf0", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-8-ubv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-8-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1 {\n+  int *p[2];\n+} s1;\n+\n+int rd (struct s1 s, int i)\n+{\n+  int res = s.p[0][i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = { {buf, buf1} };\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "acce18334adf635beaf935b6c5cd141a1f7ab93f", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-9-lbv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1 {\n+  int *p[2];\n+} s1;\n+\n+int rd (struct s1 s, int i)\n+{\n+  int res = s.p[1][i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = { {buf, buf1} };\n+\n+  rd (s, -1);\n+\n+  return 0;\n+}"}, {"sha": "03ce6687f622a6c24fd04f1b502a91828ddcc3bc", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-9-nov.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1 {\n+  int *p[2];\n+} s1;\n+\n+int rd (struct s1 s, int i)\n+{\n+  int res = s.p[1][i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = { {buf, buf1} };\n+\n+  rd (s, 0);\n+  rd (s, 99);\n+\n+  return 0;\n+}"}, {"sha": "449b2c5dd58ff8c1291dd6bd564f97214c968727", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-arg-9-ubv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-arg-9-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1 {\n+  int *p[2];\n+} s1;\n+\n+int rd (struct s1 s, int i)\n+{\n+  int res = s.p[1][i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s = { {buf, buf1} };\n+\n+  rd (s, 100);\n+\n+  return 0;\n+}"}, {"sha": "3f1ac74d9a7174038d5d79fdef6b929acd7fdc5e", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-copy-1-lbv.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  struct s2 ss = s;\n+\n+  printf (\"%d\\n\", ss.b[0].p[0][-1]);\n+\n+  return 0;\n+}"}, {"sha": "5a709bc85468932ec0d3462807b3b9e5b13c6c9f", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-copy-1-nov.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  struct s2 ss = s;\n+\n+  printf(\"%d\\n\", ss.b[0].p[0][0]);\n+  printf(\"%d\\n\", ss.b[0].p[0][99]);\n+  printf(\"%d\\n\", ss.b[0].p[1][0]);\n+  printf(\"%d\\n\", ss.b[0].p[1][199]);\n+  printf(\"%d\\n\", ss.b[1].p[0][0]);\n+  printf(\"%d\\n\", ss.b[1].p[0][199]);\n+  printf(\"%d\\n\", ss.b[1].p[1][0]);\n+  printf(\"%d\\n\", ss.b[1].p[1][99]);\n+\n+  return 0;\n+}"}, {"sha": "b0fe8f46143a4707f496622ff1dd589b91bfe4b1", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-copy-1-ubv.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+int buf1[100];\n+int buf2[200];\n+\n+struct s1 {\n+  int a;\n+  int *p[2];\n+} s1;\n+\n+struct s2 {\n+  int a;\n+  struct s1 b[2];\n+} s2;\n+\n+struct s2 s = { 1, { {1, { buf1, buf2 }}, {2, { buf2, buf1} } } };\n+\n+int mpx_test (int argc, const char *argv[])\n+{\n+  struct s2 ss = s;\n+\n+  printf (\"%d\\n\", ss.b[0].p[0][100]);\n+\n+  return 0;\n+}"}, {"sha": "0cb6440a1d64d839a7cd7c7e5a723a1d9e05119c", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-copy-2-lbv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (void *p, int k)\n+{\n+  struct S *s = (struct S*)p;\n+  int res = s->b[k];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo (&s.a, -1);\n+\n+  return 0;\n+}"}, {"sha": "01f5b679faf1ab01ddb1e4afd7324684324b1f35", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-copy-2-nov.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (void *p, int k)\n+{\n+  struct S *s = (struct S*)p;\n+  int res = s->b[k];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo (&s.a, 0);\n+  foo (&s.a, 99);\n+\n+  return 0;\n+}"}, {"sha": "c500bb4b77b9842355afbdbf583051f303d921ad", "filename": "gcc/testsuite/gcc.target/i386/mpx/struct-copy-2-ubv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fstruct-copy-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S {\n+  int a;\n+  int b[100];\n+  int c;\n+} S;\n+\n+int foo (void *p, int k)\n+{\n+  struct S *s = (struct S*)p;\n+  int res = s->b[k];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S s;\n+\n+  foo (&s.a, 100);\n+\n+  return 0;\n+}"}, {"sha": "3275fe03db883bfca2236d191801882b1f5566c3", "filename": "gcc/testsuite/gcc.target/i386/mpx/thread-local-var-1-lbv.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-lpthread\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"pthread.h\"\n+\n+__thread int prebuf[100];\n+__thread int buf[100];\n+__thread int postbuf[100];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf(\"%d\\n\", res);\n+  return res;\n+}\n+\n+void *thred_func (void *ptr)\n+{\n+  rd (buf, -1);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  pthread_t thread;\n+  pthread_create (&thread, NULL, thred_func, 0);\n+  pthread_join (thread, NULL);\n+  return 0;\n+}"}, {"sha": "2e0483b1c29d27ea2386f179d00102eaf2ec62a6", "filename": "gcc/testsuite/gcc.target/i386/mpx/thread-local-var-1-nov.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-lpthread\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"pthread.h\"\n+\n+__thread int prebuf[100];\n+__thread int buf[100];\n+__thread int postbuf[100];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf(\"%d\\n\", res);\n+  return res;\n+}\n+\n+void *thred_func (void *ptr)\n+{\n+  rd (buf, 0);\n+  rd (buf, 99);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  pthread_t thread;\n+  pthread_create (&thread, NULL, thred_func, 0);\n+  pthread_join (thread, NULL);\n+  return 0;\n+}"}, {"sha": "86116e87e4de998229acc178770e3cb6bfc0a09b", "filename": "gcc/testsuite/gcc.target/i386/mpx/thread-local-var-1-ubv.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fthread-local-var-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-lpthread\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"pthread.h\"\n+\n+__thread int prebuf[100];\n+__thread int buf[100];\n+__thread int postbuf[100];\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf(\"%d\\n\", res);\n+  return res;\n+}\n+\n+void *thred_func (void *ptr)\n+{\n+  rd (buf, 100);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  pthread_t thread;\n+  pthread_create (&thread, NULL, thred_func, 0);\n+  pthread_join (thread, NULL);\n+  return 0;\n+}"}, {"sha": "c2559829bfde1c00bf3fb4ae02641f8580db8122", "filename": "gcc/testsuite/gcc.target/i386/mpx/union-arg-1-lbv.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  union {\n+    int i1;\n+    int i3;\n+  } v;\n+  int i2;\n+  union {\n+    int *p;\n+    int p2;\n+  } u;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.u.p[s.v.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.u.p = buf;\n+  s.v.i1 = 50;\n+  s.i2 = -51;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "f96689f479a2bc837ab0d11a05d37274aa050f85", "filename": "gcc/testsuite/gcc.target/i386/mpx/union-arg-1-nov.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  union {\n+    int i1;\n+    int i3;\n+  } v;\n+  int i2;\n+  union {\n+    int *p;\n+    int p2;\n+  } u;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.u.p[s.v.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.u.p = buf;\n+  s.v.i1 = 50;\n+  s.i2 = -50;\n+\n+  rd (s);\n+\n+  s.v.i1 = 50;\n+  s.i2 = 49;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "6d65e5a73fe28b367ac543dfe2c626f060a8e578", "filename": "gcc/testsuite/gcc.target/i386/mpx/union-arg-1-ubv.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Funion-arg-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct s1\n+{\n+  union {\n+    int i1;\n+    int i3;\n+  } v;\n+  int i2;\n+  union {\n+    int *p;\n+    int p2;\n+  } u;\n+} s1;\n+\n+int rd (struct s1 s)\n+{\n+  int res = s.u.p[s.v.i1 + s.i2];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int buf[100];\n+int buf1[10];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct s1 s;\n+  s.u.p = buf;\n+  s.v.i1 = 50;\n+  s.i2 = 50;\n+\n+  rd (s);\n+\n+  return 0;\n+}"}, {"sha": "5aa60072df339445be2d16495a95b730d326f60b", "filename": "gcc/testsuite/gcc.target/i386/mpx/va-arg-pack-1-lbv.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-Wno-attributes\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int\n+foo2 (int i1, int *p1, ...)\n+{\n+  va_list argp;\n+  int i;\n+  int res;\n+\n+  va_start(argp, p1);\n+  i = va_arg(argp, int);\n+\n+  res = p1[i + i1];\n+  printf(\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+static __attribute__((always_inline)) int\n+foo1 (int *p1, ...)\n+{\n+  return foo2 (10, p1, __va_arg_pack ());\n+}\n+\n+int prebuf[100];\n+int buf[100];\n+int postbuf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo1 (buf, -11);\n+  return 0;\n+}"}, {"sha": "55c65d92bd969084643c0176d9bec4e87dbc00a8", "filename": "gcc/testsuite/gcc.target/i386/mpx/va-arg-pack-1-nov.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-Wno-attributes\" } */\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int\n+foo2 (int i1, int *p1, ...)\n+{\n+  va_list argp;\n+  int i;\n+  int res;\n+\n+  va_start(argp, p1);\n+  i = va_arg(argp, int);\n+\n+  res = p1[i + i1];\n+  printf(\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+static __attribute__((always_inline)) int\n+foo1 (int *p1, ...)\n+{\n+  return foo2 (10, p1, __va_arg_pack ());\n+}\n+\n+int prebuf[100];\n+int buf[100];\n+int postbuf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo1 (buf, 89);\n+  foo1 (buf, -9);\n+  return 0;\n+}"}, {"sha": "11b498eba479f55f0a9bd536a1c2026314a4d945", "filename": "gcc/testsuite/gcc.target/i386/mpx/va-arg-pack-1-ubv.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-Wno-attributes\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int\n+foo2 (int i1, int *p1, ...)\n+{\n+  va_list argp;\n+  int i;\n+  int res;\n+\n+  va_start(argp, p1);\n+  i = va_arg(argp, int);\n+\n+  res = p1[i + i1];\n+  printf(\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+static __attribute__((always_inline)) int\n+foo1 (int *p1, ...)\n+{\n+  return foo2 (10, p1, __va_arg_pack ());\n+}\n+\n+int prebuf[100];\n+int buf[100];\n+int postbuf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo1 (buf, 90);\n+  return 0;\n+}"}, {"sha": "9f1941d69f14b8f83a4a2c3bee5f06bd89205644", "filename": "gcc/testsuite/gcc.target/i386/mpx/va-arg-pack-2-lbv.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-Wno-attributes\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int\n+foo2 (int i1, int *p1, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start(argp, p1);\n+  p = va_arg(argp, int *);\n+  i = va_arg(argp, int);\n+\n+  res = p[i + i1];\n+  printf(\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+static __attribute__((always_inline)) int\n+foo1 (int *p1, ...)\n+{\n+  return foo2 (10, p1, __va_arg_pack ());\n+}\n+\n+int prebuf[100];\n+int buf[100];\n+int buf1[100];\n+int postbuf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo1 (buf, buf1, -11);\n+  return 0;\n+}"}, {"sha": "903afbce29290fca0c9051f9f10464876a756f29", "filename": "gcc/testsuite/gcc.target/i386/mpx/va-arg-pack-2-nov.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-Wno-attributes\" } */\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int\n+foo2 (int i1, int *p1, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start(argp, p1);\n+  p = va_arg(argp, int *);\n+  i = va_arg(argp, int);\n+\n+  res = p[i + i1];\n+  printf(\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+static __attribute__((always_inline)) int\n+foo1 (int *p1, ...)\n+{\n+  return foo2 (10, p1, __va_arg_pack ());\n+}\n+\n+int prebuf[100];\n+int buf[100];\n+int buf1[100];\n+int postbuf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo1 (buf, buf1, 89);\n+  foo1 (buf, buf1, -9);\n+  return 0;\n+}"}, {"sha": "f5d842abf0d43ab46593ac8c441da18036c50fdf", "filename": "gcc/testsuite/gcc.target/i386/mpx/va-arg-pack-2-ubv.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fva-arg-pack-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* { dg-additional-options \"-Wno-attributes\" } */\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int\n+foo2 (int i1, int *p1, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start(argp, p1);\n+  p = va_arg(argp, int *);\n+  i = va_arg(argp, int);\n+\n+  res = p[i + i1];\n+  printf(\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+static __attribute__((always_inline)) int\n+foo1 (int *p1, ...)\n+{\n+  return foo2 (10, p1, __va_arg_pack ());\n+}\n+\n+int prebuf[100];\n+int buf[100];\n+int buf1[100];\n+int postbuf[100];\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo1 (buf, buf1, 90);\n+  return 0;\n+}"}, {"sha": "89faa9281e8f16471a69d7196192064925b97f80", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-1-lbv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 0, buf, -1);\n+  return 0;\n+}"}, {"sha": "e1e12a6d70bd27680c9f8c78736d3e42ff86a859", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-1-nov.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 0, buf, 0);\n+  rd (buf1, 0, buf, 99);\n+  return 0;\n+}"}, {"sha": "14206a0f5a92d988393f0d9ca894749662e9ace2", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-1-ubv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 0, buf, 100);\n+  return 0;\n+}"}, {"sha": "8af925f45a34131eb5489b7f52b38b9f188fe3fa", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-2-lbv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 1, buf1, buf, -1, buf1);\n+  return 0;\n+}"}, {"sha": "5c2f422dc3fff0011e98bb594f4bf906c2962cf5", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-2-nov.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 1, buf1, buf, 0, buf1);\n+  rd (buf1, 1, buf1, buf, 99, buf1);\n+  return 0;\n+}"}, {"sha": "b4463712e2bf05d9b57a15f8f74e411230533856", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-2-ubv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 1, buf1, buf, 100, buf1);\n+  return 0;\n+}"}, {"sha": "b1f9f240622582761fb706314e3b4e8dc43fa045", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-3-lbv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 2, buf1, buf1, buf, -1, buf1);\n+  return 0;\n+}"}, {"sha": "93f9eb810b49ac765913f0f33722266b195644d2", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-3-nov.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 2, buf1, buf1, buf, 0, buf1);\n+  rd (buf1, 2, buf1, buf1, buf, 99, buf1);\n+  return 0;\n+}"}, {"sha": "dddf356359992ec7575b467bb327b4cb4bd7bb62", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-3-ubv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-3-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 2, buf1, buf1, buf, 100, buf1);\n+  return 0;\n+}"}, {"sha": "274ccc2469e63c89ee9543d4a95b6c04ac243fe1", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-4-lbv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 3, buf1, buf1, buf1, buf, -1, buf1);\n+  return 0;\n+}"}, {"sha": "5412d1132236c3f50aa93c01c2659110383db1fd", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-4-nov.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 3, buf1, buf1, buf1, buf, 0, buf1);\n+  rd (buf1, 3, buf1, buf1, buf1, buf, 99, buf1);\n+  return 0;\n+}"}, {"sha": "e8f06e36a3a16bbdabd2949f554aa651df205490", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-4-ubv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-4-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 3, buf1, buf1, buf1, buf, 100, buf1);\n+  return 0;\n+}"}, {"sha": "1dae013f0ecefd4b38c10316ce01bd5670d6a9bc", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-5-lbv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 4, buf1, buf1, buf1, buf1, buf, -1, buf1);\n+  return 0;\n+}"}, {"sha": "bd15e0fde6fa1d50e3d63238dff08c987b25001e", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-5-nov.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 4, buf1, buf1, buf1, buf1, buf, 0, buf1);\n+  rd (buf1, 4, buf1, buf1, buf1, buf1, buf, 99, buf1);\n+  return 0;\n+}"}, {"sha": "de3721dfdd5fd9f529bc1e7d91b391b39d4a753b", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-5-ubv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-5-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int\n+rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 4, buf1, buf1, buf1, buf1, buf, 100, buf1);\n+  return 0;\n+}"}, {"sha": "822d32a7b7b5b556934362a01f2388aea144b741", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-6-lbv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pp, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+  int n = 4;\n+\n+  va_start (argp, pp);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, -1, buf1);\n+  return 0;\n+}"}, {"sha": "c5c4b1257256a49d0186a49bb4411c34e3dee63f", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-6-nov.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pp, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+  int n = 4;\n+\n+  va_start (argp, pp);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, 0, buf1);\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, 99, buf1);\n+  return 0;\n+}"}, {"sha": "635a48fc16d2e747b4c2097cdd3499026729311b", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-6-ubv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-6-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pp, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+  int n = 4;\n+\n+  va_start (argp, pp);\n+  for (; n > 0; n--)\n+    va_arg (argp, int *);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, buf1, buf1, buf1, buf1, buf, 100, buf1);\n+  return 0;\n+}"}, {"sha": "1121577f9123cecc670aa1a623413a7310ff092f", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-7-lbv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, double);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 2, 10.0d, 10.0d, buf, -1, buf1);\n+  return 0;\n+}"}, {"sha": "525a93d9d8758e92df66617b90fa05594dfd02f0", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-7-nov.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, double);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 2, 10.0d, 10.0d, buf, 0, buf1);\n+  rd (buf1, 2, 10.0d, 10.0d, buf, 99, buf1);\n+  return 0;\n+}"}, {"sha": "0e8d21e9940b08c95087c18a9aca01da2a538885", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-7-ubv.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-7-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, double);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 2, 10.0d, 10.0d, buf, 100, buf1);\n+  return 0;\n+}"}, {"sha": "bb58ac594b941c17d97b5bcc710b9bd9db252757", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-8-lbv.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int buf[100];\n+int buf1[10];\n+\n+void vararg (int *p, va_list al)\n+{\n+  int i;\n+  int res;\n+\n+  p = va_arg (al, int *);\n+  i = va_arg (al, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+}\n+\n+void foo (int *p, ...)\n+{\n+  va_list args;\n+\n+  va_start (args, p);\n+  vararg (p, args);\n+  va_end (args);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (buf1, buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "59596f2716633d591403b3f1912956a5e7dfec53", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-8-nov.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int buf[100];\n+int buf1[10];\n+\n+void vararg (int *p, va_list al)\n+{\n+  int i;\n+  int res;\n+\n+  p = va_arg (al, int *);\n+  i = va_arg (al, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+}\n+\n+void foo (int *p, ...)\n+{\n+  va_list args;\n+\n+  va_start (args, p);\n+  vararg (p, args);\n+  va_end (args);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (buf1, buf, 0);\n+  foo (buf1, buf, 99);\n+\n+  return 0;\n+}"}, {"sha": "c03bcef08ec5ad160f21dd96e36cb610acf3073e", "filename": "gcc/testsuite/gcc.target/i386/mpx/vararg-8-ubv.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvararg-8-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+#include <stdarg.h>\n+\n+int buf[100];\n+int buf1[10];\n+\n+void vararg (int *p, va_list al)\n+{\n+  int i;\n+  int res;\n+\n+  p = va_arg (al, int *);\n+  i = va_arg (al, int);\n+\n+  res = p[i];\n+  printf (\"%d\\n\", res);\n+}\n+\n+void foo (int *p, ...)\n+{\n+  va_list args;\n+\n+  va_start (args, p);\n+  vararg (p, args);\n+  va_end (args);\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  foo (buf1, buf, 100);\n+\n+  return 0;\n+}"}, {"sha": "1994df9d0a112c6a527e7c4dad5eebac4ae4468e", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-1-lbv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S\n+{\n+  int a;\n+  int p[0];\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S *s = (struct S *)alloca (sizeof(struct S) + sizeof (int)*100);\n+  rd (s->p, -2);\n+\n+  return 0;\n+}"}, {"sha": "1a8284958339087bdd45ef6ac8acf2919db140cb", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-1-nov.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct S\n+{\n+  int a;\n+  int p[0];\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S *s = (struct S *)alloca (sizeof(struct S) + sizeof (int)*100);\n+  rd (s->p, 0);\n+  rd (s->p, 99);\n+\n+  return 0;\n+}"}, {"sha": "b0f6d456e358296ad7d84ae8bae98f2a017d2667", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-1-ubv.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-1-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct S\n+{\n+  int a;\n+  int p[0];\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  struct S *s = (struct S *)alloca (sizeof(struct S) + sizeof (int)*100);\n+  rd (s->p, 100);\n+\n+  return 0;\n+}"}, {"sha": "128f13980afc507e2a585049ab867e17bcd4f579", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-2-lbv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-lbv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct Foo {\n+  int buf[10] __attribute__((bnd_variable_size));\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv) {\n+  struct Foo *foo = (struct Foo *) alloca (20 * sizeof(int));\n+\n+  rd (foo->buf, -1);\n+\n+  return 0;\n+}"}, {"sha": "2469b7da2b1ddc02d83676057584c46604236f7a", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-2-nov.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-nov.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#include \"mpx-check.h\"\n+\n+struct Foo {\n+  int buf[10] __attribute__((bnd_variable_size));\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv) {\n+  struct Foo *foo = (struct Foo *) alloca (20 * sizeof(int));\n+\n+  rd (foo->buf, 0);\n+  rd (foo->buf, 19);\n+\n+  return 0;\n+}"}, {"sha": "63a6b2792158ca6c2cf913931c95863dc4a2ca2b", "filename": "gcc/testsuite/gcc.target/i386/mpx/vla-2-ubv.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fvla-2-ubv.c?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+\n+#define SHOULDFAIL\n+\n+#include \"mpx-check.h\"\n+\n+struct Foo {\n+  int buf[10] __attribute__((bnd_variable_size));\n+};\n+\n+int rd (int *p, int i)\n+{\n+  int res = p[i];\n+  printf (\"%d\\n\", res);\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv) {\n+  struct Foo *foo = (struct Foo *) alloca (20 * sizeof(int));\n+\n+  rd (foo->buf, 20);\n+\n+  return 0;\n+}"}, {"sha": "e1b5f2fe96de982e092b91044d61a82ae2aae9a9", "filename": "gcc/testsuite/lib/mpx-dg.exp", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Flib%2Fmpx-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8f136a72fe40cfa88ed44c141218d2a8ae606f/gcc%2Ftestsuite%2Flib%2Fmpx-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmpx-dg.exp?ref=ee8f136a72fe40cfa88ed44c141218d2a8ae606f", "patch": "@@ -23,3 +23,103 @@ proc check_effective_target_mpx {} {\n \tint main (void) { return foo ((void *)0) == 0; }\n     } \"-fcheck-pointer-bounds -mmpx\"]\n }\n+\n+#\n+# mpx_link_flags -- compute library path and flags to find libmpx.\n+#\n+\n+proc mpx_link_flags { paths } {\n+    global srcdir\n+    global ld_library_path\n+    global shlib_ext\n+    global mpx_saved_library_path\n+\n+    set gccpath ${paths}\n+    set flags \"\"\n+\n+    set shlib_ext [get_shlib_extension]\n+    set mpx_saved_library_path $ld_library_path\n+\n+    if { $gccpath != \"\" } {\n+      if { [file exists \"${gccpath}/libmpx/mpxrt/.libs/libmpx.a\"]\n+\t   || [file exists \"${gccpath}/libmpx/mpxrt/.libs/libmpx.${shlib_ext}\"] } {\n+\t  append flags \" -B${gccpath}/libmpx/ \"\n+\t  append flags \" -B${gccpath}/libmpx/mpxrt \"\n+\t  append flags \" -L${gccpath}/libmpx/mpxrt/.libs \"\n+\t  append ld_library_path \":${gccpath}/libmpx/mpxrt/.libs\"\n+      }\n+    } else {\n+      global tool_root_dir\n+\n+      set libmpx [lookfor_file ${tool_root_dir} libmpx]\n+      if { $libmpx != \"\" } {\n+\t  append flags \"-L${libmpx} \"\n+\t  append ld_library_path \":${libmpx}\"\n+      }\n+    }\n+\n+    set_ld_library_path_env_vars\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# mpx_init -- called at the start of each subdir of tests\n+#\n+\n+proc mpx_init { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global ALWAYS_CXXFLAGS\n+    global TOOL_OPTIONS\n+    global mpx_saved_TEST_ALWAYS_FLAGS\n+    global mpx_saved_ALWAYS_CXXFLAGS\n+\n+    setenv CHKP_RT_MODE \"stop\"\n+\n+    set link_flags \"\"\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    set link_flags \"[mpx_link_flags [get_multilibs ${TOOL_OPTIONS}]]\"\n+\t} else {\n+\t    set link_flags \"[mpx_link_flags [get_multilibs]]\"\n+\t}\n+    }\n+\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset mpx_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n+    }\n+    if [info exists ALWAYS_CXXFLAGS] {\n+\tset mpx_saved_ALWAYS_CXXFLAGS $ALWAYS_CXXFLAGS\n+\tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n+    } else {\n+\tif [info exists TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags $TEST_ALWAYS_FLAGS\"\n+\t} else {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags\"\n+\t}\n+    }\n+}\n+\n+#\n+# mpx_finish -- called at the end of each subdir of tests\n+#\n+\n+proc mpx_finish { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global mpx_saved_TEST_ALWAYS_FLAGS\n+    global mpx_saved_ALWAYS_CXXFLAGS\n+    global mpx_saved_library_path\n+    global ld_library_path\n+\n+    if [info exists mpx_saved_ALWAYS_CXXFLAGS ] {\n+\tset ALWAYS_CXXFLAGS $mpx_saved_ALWAYS_CXXFLAGS\n+    } else {\n+\tif [info exists mpx_saved_TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS $mpx_saved_TEST_ALWAYS_FLAGS\n+\t} else {\n+\t    unset TEST_ALWAYS_FLAGS\n+\t}\n+    }\n+    set ld_library_path $mpx_saved_library_path\n+    set_ld_library_path_env_vars\n+}"}]}