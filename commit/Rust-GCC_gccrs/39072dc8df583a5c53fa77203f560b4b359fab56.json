{"sha": "39072dc8df583a5c53fa77203f560b4b359fab56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwNzJkYzhkZjU4M2E1YzUzZmE3NzIwM2Y1NjBiNGIzNTlmYWI1Ng==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2003-06-07T18:38:09Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2003-06-07T18:38:09Z"}, "message": "Security.java (secprops): Initialize.\n\n       * java/security/Security.java (secprops): Initialize.\n       (loadProviders): Return boolean.\n       (static): Check result of loadProvider calls. If necessary\n       display WARNING and fallback to Gnu provider.\n\nFrom-SVN: r67597", "tree": {"sha": "60d65600b34dd9363ea5415428632baf37aac957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60d65600b34dd9363ea5415428632baf37aac957"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39072dc8df583a5c53fa77203f560b4b359fab56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39072dc8df583a5c53fa77203f560b4b359fab56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39072dc8df583a5c53fa77203f560b4b359fab56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39072dc8df583a5c53fa77203f560b4b359fab56/comments", "author": null, "committer": null, "parents": [{"sha": "20c1dc5e9b8a82f41a041dab3d7d19604a25f2a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c1dc5e9b8a82f41a041dab3d7d19604a25f2a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c1dc5e9b8a82f41a041dab3d7d19604a25f2a4"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "d4c8e4099a0d9e40d6199a965418a34e85ac371f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39072dc8df583a5c53fa77203f560b4b359fab56/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39072dc8df583a5c53fa77203f560b4b359fab56/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=39072dc8df583a5c53fa77203f560b4b359fab56", "patch": "@@ -1,3 +1,10 @@\n+2003-06-06  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/security/Security.java (secprops): Initialize.\n+\t(loadProviders): Return boolean.\n+\t(static): Check result of loadProvider calls. If necessary\n+\tdisplay WARNING and fallback to Gnu provider.\n+\n 2002-06-06  James Clark  <jjc@jclark.com>\n \n \tFix for PR libgcj/8738:"}, {"sha": "56335bf85c378d3408b5a9eaf3ad7de7d40478ec", "filename": "libjava/java/security/Security.java", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39072dc8df583a5c53fa77203f560b4b359fab56/libjava%2Fjava%2Fsecurity%2FSecurity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39072dc8df583a5c53fa77203f560b4b359fab56/libjava%2Fjava%2Fsecurity%2FSecurity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurity.java?ref=39072dc8df583a5c53fa77203f560b4b359fab56", "patch": "@@ -64,29 +64,51 @@ public final class Security extends Object\n   private static final String ALG_ALIAS = \"Alg.Alias.\";\n \n   private static Vector providers = new Vector();\n-  private static Properties secprops;\n+  private static Properties secprops = new Properties();\n   static\n   {\n     String base = System.getProperty(\"gnu.classpath.home.url\");\n-    loadProviders(base, System.getProperty(\"gnu.classpath.vm.shortname\"));\n-    loadProviders(base, \"classpath\");\n+    String vendor = System.getProperty(\"gnu.classpath.vm.shortname\");\n+    \n+    // Try VM specific security file\n+    boolean loaded = loadProviders(base, vendor);\n+    \n+    // Append classpath standard provider if possible\n+    if (!loadProviders(base, \"classpath\") && !loaded && providers.size() == 0)\n+      {\n+\t// No providers found and both security files failed to load properly.\n+\tSystem.err.println\n+\t  (\"WARNING: could not properly read security provider files:\");\n+\tSystem.err.println\n+\t  (\"         \" + base + \"/security/\" + vendor + \".security\");\n+\tSystem.err.println\n+\t  (\"         \" + base + \"/security/\" + \"classpath\" + \".security\");\n+\tSystem.err.println\n+\t  (\"         Falling back to standard GNU security provider\");\n+\tproviders.addElement(new gnu.java.security.provider.Gnu());\n+      }\n   }\n \n   // This class can't be instantiated.\n   private Security ()\n   {\n   }\n \n-  private static void loadProviders(String baseUrl, String vendor)\n+  /**\n+   * Tries to load the vender specific security providers from the given\n+   * base URL. Returns true if the resource could be read and completely\n+   * parsed successfully, false otherwise.\n+   */\n+  private static boolean loadProviders(String baseUrl, String vendor)\n   {\n     if (baseUrl == null || vendor == null)\n-      return;\n+      return false;\n \n+    boolean result = true;\n     String secfilestr = baseUrl + \"/security/\" + vendor + \".security\";\n     try\n       {\n \tInputStream fin = new URL(secfilestr).openStream();\n-\tsecprops = new Properties();\n \tsecprops.load(fin);\n \n \tint i = 1;\n@@ -112,19 +134,20 @@ private static void loadProviders(String baseUrl, String vendor)\n \t      }\n \n \t    if (exception != null)\n-\t      System.err.println (\n-\t          \"Error loading security provider \" + name + \": \" + exception);\n+\t      {\n+\t\tSystem.err.println (\"WARNING: Error loading security provider \"\n+\t\t\t\t    + name + \": \" + exception);\n+\t\tresult = false;\n+\t      }\n \t    i++;\n \t  }\n       }\n-    catch (FileNotFoundException ignored)\n-      {\n-        // Actually we probably shouldn't ignore these, once the security\n-\t// properties file is actually installed somewhere.\n-      }\n     catch (IOException ignored)\n       {\n+\tresult = false;\n       }\n+\n+    return false;\n   }\n \n   /**"}]}