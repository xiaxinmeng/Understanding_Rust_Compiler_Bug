{"sha": "a9b3c451be58f0fe660154323ace7ba72a4211ec", "node_id": "C_kwDOANBUbNoAKGE5YjNjNDUxYmU1OGYwZmU2NjAxNTQzMjNhY2U3YmE3MmE0MjExZWM", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-09-22T07:32:21Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-09-22T07:42:26Z"}, "message": "IBM Z: Fix PR102222\n\nAvoid emitting a strict low part move if the insv target actually\naffects the whole target reg.\n\ngcc/ChangeLog:\n\n\tPR target/102222\n\t* config/s390/s390.c (s390_expand_insv): Emit a normal move if it\n\tis actually a full copy of the source operand into the target.\n\tDon't emit a strict low part move if source and target mode match.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/pr102222.c: New test.", "tree": {"sha": "888969d30f85ca6c3f942026aa16093aa2116f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/888969d30f85ca6c3f942026aa16093aa2116f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9b3c451be58f0fe660154323ace7ba72a4211ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b3c451be58f0fe660154323ace7ba72a4211ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b3c451be58f0fe660154323ace7ba72a4211ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b3c451be58f0fe660154323ace7ba72a4211ec/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4432b2776aeeffee9125bf87ff937e4a8907bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4432b2776aeeffee9125bf87ff937e4a8907bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4432b2776aeeffee9125bf87ff937e4a8907bbd"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "e04385451cf45c968be6d8800875421804488f43", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b3c451be58f0fe660154323ace7ba72a4211ec/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b3c451be58f0fe660154323ace7ba72a4211ec/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a9b3c451be58f0fe660154323ace7ba72a4211ec", "patch": "@@ -6414,6 +6414,15 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n   if (bitsize + bitpos > GET_MODE_BITSIZE (mode))\n     return false;\n \n+  /* Just a move.  */\n+  if (bitpos == 0\n+      && bitsize == GET_MODE_BITSIZE (GET_MODE (src))\n+      && mode == GET_MODE (src))\n+    {\n+      emit_move_insn (dest, src);\n+      return true;\n+    }\n+\n   /* Generate INSERT IMMEDIATE (IILL et al).  */\n   /* (set (ze (reg)) (const_int)).  */\n   if (TARGET_ZARCH\n@@ -6510,6 +6519,7 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n       && (bitpos & 32) == ((bitpos + bitsize - 1) & 32)\n       && MEM_P (src)\n       && (mode == DImode || mode == SImode)\n+      && mode != smode\n       && register_operand (dest, mode))\n     {\n       /* Emit a strict_low_part pattern if possible.  */"}, {"sha": "47d075e47fcc7a79e861a6f4d0f2783ca2342e28", "filename": "gcc/testsuite/gcc.target/s390/pr102222.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b3c451be58f0fe660154323ace7ba72a4211ec/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr102222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b3c451be58f0fe660154323ace7ba72a4211ec/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr102222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr102222.c?ref=a9b3c451be58f0fe660154323ace7ba72a4211ec", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m31 -mesa\" } */\n+\n+struct squashfs_reg_inode_header_1 read_inode_inode;\n+\n+int read_inode_val;\n+\n+struct squashfs_reg_inode_header_1\n+{\n+  int file_size:32;\n+} __attribute__((packed)) read_inode ();\n+\n+void foo (void)\n+{\n+  read_inode_inode.file_size = read_inode_val;\n+}"}]}