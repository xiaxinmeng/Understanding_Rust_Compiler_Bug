{"sha": "5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyZWQyOGMyNzE2NmJjMTA1ZWM5ZmUzYTlhMThhZjVjMTQwOTAxMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-04-19T22:49:48Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-19T22:49:48Z"}, "message": "cp-tree.h (DECL_LANGUAGE): Don't assume DECL_LANG_SPECIFIC is set.\n\n\t* cp-tree.h (DECL_LANGUAGE): Don't assume DECL_LANG_SPECIFIC is\n\tset.\n\t(SET_DECL_LANGUAGE): New macro.\n\t* decl.c (duplicate_decls): Use SET_DECL_LANGUAGE.\n\t(pushdecl): Likewise.\n\t(build_library_fn_1): Likewise.\n\t(build_cp_library_fn): Likewise.\n\t(grokfndecl): Likewise.\n\t(grokvardecl): Mark `extern \"C\"' variables as having C linkage.\n\t* decl2.c (grokclassfn): Use SET_DECL_LANGUAGE.\n\t* lex.c (retrofit_lang_decl): Likewise.\n\t* mangle.c (mangle_decl_string): Don't mangle the names of\n\tvariables declared with C language linkage.\n\t* semantics.c (finish_member_declaration): Use SET_DECL_LANGUAGE.\n\nFrom-SVN: r41430", "tree": {"sha": "be41a31f61cfc5955ed9ac031129b966e6b6e950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be41a31f61cfc5955ed9ac031129b966e6b6e950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/comments", "author": null, "committer": null, "parents": [{"sha": "45936a85bc20fdfa776dbd17069c941806b45420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45936a85bc20fdfa776dbd17069c941806b45420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45936a85bc20fdfa776dbd17069c941806b45420"}], "stats": {"total": 102, "additions": 75, "deletions": 27}, "files": [{"sha": "8d84a8bfe81eee037eee628c225ea8b3e900bde9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -1,3 +1,20 @@\n+2001-04-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (DECL_LANGUAGE): Don't assume DECL_LANG_SPECIFIC is\n+\tset.\n+\t(SET_DECL_LANGUAGE): New macro.\n+\t* decl.c (duplicate_decls): Use SET_DECL_LANGUAGE.\n+\t(pushdecl): Likewise.\n+\t(build_library_fn_1): Likewise.\n+\t(build_cp_library_fn): Likewise.\n+\t(grokfndecl): Likewise.\n+\t(grokvardecl): Mark `extern \"C\"' variables as having C linkage.\n+\t* decl2.c (grokclassfn): Use SET_DECL_LANGUAGE.\n+\t* lex.c (retrofit_lang_decl): Likewise.\n+\t* mangle.c (mangle_decl_string): Don't mangle the names of\n+\tvariables declared with C language linkage.\n+\t* semantics.c (finish_member_declaration): Use SET_DECL_LANGUAGE.\n+\t\n 2001-04-18  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* semantics.c (simplify_aggr_init_exprs_r): Don't restore"}, {"sha": "b1359a102cbd7013d9636393d2a1908595494a71", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -1919,9 +1919,24 @@ struct lang_decl\n #define DECL_IN_MEMORY_P(NODE) \\\n   (DECL_RTL_SET_P (NODE) && GET_CODE (DECL_RTL (NODE)) == MEM)\n \n-/* For FUNCTION_DECLs: return the language in which this decl\n-   was declared.  */\n-#define DECL_LANGUAGE(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.language)\n+/* For a FUNCTION_DECL or a VAR_DECL, the language linkage for the\n+   declaration.  Some entities (like a member function in a local\n+   class, or a local variable) do not have linkage at all, and this\n+   macro should not be used in those cases.\n+   \n+   Implementation note: A FUNCTION_DECL without DECL_LANG_SPECIFIC was\n+   created by language-independent code, and has C linkage.  Most\n+   VAR_DECLs have C++ linkage, and do not have DECL_LANG_SPECIFIC, but\n+   we do create DECL_LANG_SPECIFIC for variables with non-C++ linkage.  */\n+#define DECL_LANGUAGE(NODE) \t\t\t\t\\\n+  (DECL_LANG_SPECIFIC (NODE) \t\t\t\t\\\n+   ? DECL_LANG_SPECIFIC(NODE)->decl_flags.language\t\\\n+   : (TREE_CODE (NODE) == FUNCTION_DECL\t\t\t\\\n+      ? lang_c : lang_cplusplus))\n+\n+/* Set the language linkage for NODE to LANGUAGE.  */\n+#define SET_DECL_LANGUAGE(NODE, LANGUAGE) \\\n+  (DECL_LANG_SPECIFIC (NODE)->decl_flags.language = LANGUAGE)\n \n /* For FUNCTION_DECLs: nonzero means that this function is a constructor.  */\n #define DECL_CONSTRUCTOR_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.constructor_attr)"}, {"sha": "b72cf4fa4b67fe74e8399e12d04b872e434bd054", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -3203,7 +3203,7 @@ duplicate_decls (newdecl, olddecl)\n \t  /* Make the old declaration consistent with the new one so\n \t     that all remnants of the builtin-ness of this function\n \t     will be banished.  */\n-\t  DECL_LANGUAGE (olddecl) = DECL_LANGUAGE (newdecl);\n+\t  SET_DECL_LANGUAGE (olddecl, DECL_LANGUAGE (newdecl));\n \t  SET_DECL_RTL (olddecl, DECL_RTL (newdecl));\n \t  COPY_DECL_ASSEMBLER_NAME (olddecl, newdecl);\n \t  SET_IDENTIFIER_GLOBAL_VALUE (DECL_ASSEMBLER_NAME (newdecl),\n@@ -3362,7 +3362,7 @@ duplicate_decls (newdecl, olddecl)\n \t     int foo () { bar (); }\n \t     is OK.  */\n \t  if (current_lang_depth () == 0)\n-\t    DECL_LANGUAGE (newdecl) = DECL_LANGUAGE (olddecl);\n+\t    SET_DECL_LANGUAGE (newdecl, DECL_LANGUAGE (olddecl));\n \t  else\n \t    {\n \t      cp_error_at (\"previous declaration of `%#D' with %L linkage\",\n@@ -3676,7 +3676,7 @@ duplicate_decls (newdecl, olddecl)\n \n       if (! types_match)\n \t{\n-\t  DECL_LANGUAGE (olddecl) = DECL_LANGUAGE (newdecl);\n+\t  SET_DECL_LANGUAGE (olddecl, DECL_LANGUAGE (newdecl));\n \t  COPY_DECL_ASSEMBLER_NAME (newdecl, olddecl);\n \t  SET_DECL_RTL (olddecl, DECL_RTL (newdecl));\n \t}\n@@ -3691,7 +3691,7 @@ duplicate_decls (newdecl, olddecl)\n       if (new_defines_function)\n \t/* If defining a function declared with other language\n \t   linkage, use the previously declared language linkage.  */\n-\tDECL_LANGUAGE (newdecl) = DECL_LANGUAGE (olddecl);\n+\tSET_DECL_LANGUAGE (newdecl, DECL_LANGUAGE (olddecl));\n       else if (types_match)\n \t{\n \t  /* If redeclaring a builtin function, and not a definition,\n@@ -3980,7 +3980,7 @@ pushdecl (x)\n       if (DECL_NON_THUNK_FUNCTION_P (x) && ! DECL_LANG_SPECIFIC (x))\n \t{\n \t  retrofit_lang_decl (x);\n-\t  DECL_LANGUAGE (x) = lang_c;\n+\t  SET_DECL_LANGUAGE (x, lang_c);\n \t}\n \n       if (DECL_NON_THUNK_FUNCTION_P (x) && ! DECL_FUNCTION_MEMBER_P (x))\n@@ -6727,7 +6727,7 @@ build_library_fn_1 (name, operator_code, type)\n   DECL_ARTIFICIAL (fn) = 1;\n   TREE_NOTHROW (fn) = 1;\n   SET_OVERLOADED_OPERATOR_CODE (fn, operator_code);\n-  DECL_LANGUAGE (fn) = lang_c;\n+  SET_DECL_LANGUAGE (fn, lang_c);\n   return fn;\n }\n \n@@ -6754,7 +6754,7 @@ build_cp_library_fn (name, operator_code, type)\n   tree fn = build_library_fn_1 (name, operator_code, type);\n   TREE_NOTHROW (fn) = TYPE_NOTHROW_P (type);\n   DECL_CONTEXT (fn) = FROB_CONTEXT (current_namespace);\n-  DECL_LANGUAGE (fn) = lang_cplusplus;\n+  SET_DECL_LANGUAGE (fn, lang_cplusplus);\n   set_mangled_name_for_decl (fn);\n   return fn;\n }\n@@ -8759,7 +8759,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n       && ctype == NULL_TREE\n       /* NULL_TREE means global namespace.  */\n       && DECL_CONTEXT (decl) == NULL_TREE)\n-    DECL_LANGUAGE (decl) = lang_c;\n+    SET_DECL_LANGUAGE (decl, lang_c);\n \n   /* Should probably propagate const out from type to decl I bet (mrs).  */\n   if (staticp)\n@@ -9031,9 +9031,13 @@ grokvardecl (type, declarator, specbits_in, initialized, constp, in_namespace)\n       else\n \tcontext = NULL_TREE;\n \n-      if (processing_template_decl && context)\n-\t/* For global variables, declared in a template, we need the\n-\t   full lang_decl.  */\n+      /* For namespace-scope variables, declared in a template, we\n+\t need the full lang_decl.  The same is true for\n+\t namespace-scope variables that do not have C++ language\n+\t linkage.  */\n+      if (context \n+\t  && (processing_template_decl \n+\t      || current_lang_name != lang_name_cplusplus))\n \tdecl = build_lang_decl (VAR_DECL, declarator, type);\n       else\n \tdecl = build_decl (VAR_DECL, declarator, type);"}, {"sha": "42df4e7136605b75538e8016d1ab5a54298b9be3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -1008,7 +1008,7 @@ grokclassfn (ctype, function, flags, quals)\n \n   /* Even within an `extern \"C\"' block, members get C++ linkage.  See\n      [dcl.link] for details.  */\n-  DECL_LANGUAGE (function) = lang_cplusplus;\n+  SET_DECL_LANGUAGE (function, lang_cplusplus);\n \n   if (fn_name == NULL_TREE)\n     {"}, {"sha": "cb6a4d92461ae8910fe188cd8447fb0fb7a774da", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -1509,11 +1509,11 @@ retrofit_lang_decl (t)\n \n   DECL_LANG_SPECIFIC (t) = ld;\n   if (current_lang_name == lang_name_cplusplus)\n-    DECL_LANGUAGE (t) = lang_cplusplus;\n+    SET_DECL_LANGUAGE (t, lang_cplusplus);\n   else if (current_lang_name == lang_name_c)\n-    DECL_LANGUAGE (t) = lang_c;\n+    SET_DECL_LANGUAGE (t, lang_c);\n   else if (current_lang_name == lang_name_java)\n-    DECL_LANGUAGE (t) = lang_java;\n+    SET_DECL_LANGUAGE (t, lang_java);\n   else my_friendly_abort (64);\n \n #ifdef GATHER_STATISTICS"}, {"sha": "7b6857d6793dac33bb7212c4259df190d80573c3", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -2085,17 +2085,15 @@ mangle_decl_string (decl)\n   if (TREE_CODE (decl) == TYPE_DECL)\n     write_type (TREE_TYPE (decl));\n   else if (/* The names of `extern \"C\"' functions are not mangled.  */\n-\t   (TREE_CODE (decl) == FUNCTION_DECL \n+\t   (DECL_EXTERN_C_FUNCTION_P (decl)\n \t    /* But overloaded operator names *are* mangled.  */\n-\t    && !DECL_OVERLOADED_OPERATOR_P (decl)\n-\t    /* If there's no DECL_LANG_SPECIFIC, it's a function built\n-\t       by language-independent code, which never builds\n-\t       functions with C++ linkage.  */\n-\t    && (!DECL_LANG_SPECIFIC (decl) \n-\t\t|| DECL_EXTERN_C_FUNCTION_P (decl)))\n+\t    && !DECL_OVERLOADED_OPERATOR_P (decl))\n \t   /* The names of global variables aren't mangled either.  */\n \t   || (TREE_CODE (decl) == VAR_DECL\n-\t       && CP_DECL_CONTEXT (decl) == global_namespace))\n+\t       && CP_DECL_CONTEXT (decl) == global_namespace)\n+\t   /* And neither are `extern \"C\"' variables.  */\n+\t   || (TREE_CODE (decl) == VAR_DECL\n+\t       && DECL_EXTERN_C_P (decl)))\n     write_string (IDENTIFIER_POINTER (DECL_NAME (decl)));\n   else\n     {"}, {"sha": "2141e5ca209481c5f7c52f378164796c4aeab4dc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -1910,7 +1910,7 @@ finish_member_declaration (decl)\n      A C language linkage is ignored for the names of class members\n      and the member function type of class member functions.  */\n   if (DECL_LANG_SPECIFIC (decl) && DECL_LANGUAGE (decl) == lang_c)\n-    DECL_LANGUAGE (decl) = lang_cplusplus;\n+    SET_DECL_LANGUAGE (decl, lang_cplusplus);\n \n   /* Put functions on the TYPE_METHODS list and everything else on the\n      TYPE_FIELDS list.  Note that these are built up in reverse order."}, {"sha": "207a63278f91ce04985ecb19273b0b9be222e72f", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage7.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2ed28c27166bc105ec9fe3a9a18af5c1409010/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage7.C?ref=5d2ed28c27166bc105ec9fe3a9a18af5c1409010", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+namespace N {\n+  extern \"C\" int i;\n+\n+  void f () {\n+    i = 3;\n+  }\n+};\n+\n+int i;\n+\n+int main () { N::f (); }"}]}