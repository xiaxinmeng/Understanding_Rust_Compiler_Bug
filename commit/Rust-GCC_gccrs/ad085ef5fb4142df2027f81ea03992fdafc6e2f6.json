{"sha": "ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwODVlZjVmYjQxNDJkZjIwMjdmODFlYTAzOTkyZmRhZmM2ZTJmNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-03T10:39:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-03T10:41:20Z"}, "message": "Tame fix for PR ipa/99122\n\nThe return part has a major performance impact in Ada where variable-sized\ntypes are first-class citizens, but it turns out that it is not exercized\nin the testsuite yet, so back it out for now.\n\ngcc/\n\tPR ipa/99122\n\t* tree-inline.c (inline_forbidden_p): Remove test on return type.\ngcc/testsuite/\n\t* gnat.dg/inline22.adb: New test.", "tree": {"sha": "e3336dfa6e2789dde2b9838cc9a61b0888114192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3336dfa6e2789dde2b9838cc9a61b0888114192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad085ef5fb4142df2027f81ea03992fdafc6e2f6/comments", "author": null, "committer": null, "parents": [{"sha": "602463fb98740efa3570198a323eed92e2e09319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602463fb98740efa3570198a323eed92e2e09319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602463fb98740efa3570198a323eed92e2e09319"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "5812c2f04dfd60841aefb09befada0e3c2e84aff", "filename": "gcc/testsuite/gnat.dg/inline22.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad085ef5fb4142df2027f81ea03992fdafc6e2f6/gcc%2Ftestsuite%2Fgnat.dg%2Finline22.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad085ef5fb4142df2027f81ea03992fdafc6e2f6/gcc%2Ftestsuite%2Fgnat.dg%2Finline22.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline22.adb?ref=ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-compile }\n+\n+procedure Inline22 (L, U : Integer) is\n+\n+  type Arr is array (Integer range L .. U) of Boolean;\n+\n+  function Get_Zero return Arr;\n+  pragma Inline_Always (Get_Zero);\n+\n+  function Get_Zero return Arr is\n+  begin\n+    return (others => False);\n+  end;\n+\n+  A : Arr;\n+\n+begin\n+  A := Get_Zero;\n+end;"}, {"sha": "05d1a253d5ba48a4d5a1c0585479f04beb810a48", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad085ef5fb4142df2027f81ea03992fdafc6e2f6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad085ef5fb4142df2027f81ea03992fdafc6e2f6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ad085ef5fb4142df2027f81ea03992fdafc6e2f6", "patch": "@@ -4025,17 +4025,10 @@ inline_forbidden_p (tree fndecl)\n   wi.info = (void *) fndecl;\n   wi.pset = &visited_nodes;\n \n-  /* We cannot inline a function with a VLA typed argument or result since\n-     we have no implementation materializing a variable of such type in\n-     the caller.  */\n-  if (COMPLETE_TYPE_P (TREE_TYPE (TREE_TYPE (fndecl)))\n-      && !poly_int_tree_p (TYPE_SIZE (TREE_TYPE (TREE_TYPE (fndecl)))))\n-    {\n-      inline_forbidden_reason\n-\t= G_(\"function %q+F can never be inlined because \"\n-\t     \"it has a VLA return argument\");\n-      return true;\n-    }\n+  /* We cannot inline a function with a variable-sized parameter because we\n+     cannot materialize a temporary of such a type in the caller if need be.\n+     Note that the return case is not symmetrical because we can guarantee\n+     that a temporary is not needed by means of CALL_EXPR_RETURN_SLOT_OPT.  */\n   for (tree parm = DECL_ARGUMENTS (fndecl); parm; parm = DECL_CHAIN (parm))\n     if (!poly_int_tree_p (DECL_SIZE (parm)))\n       {"}]}