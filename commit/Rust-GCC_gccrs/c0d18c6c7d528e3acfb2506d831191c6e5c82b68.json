{"sha": "c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkMThjNmM3ZDUyOGUzYWNmYjI1MDZkODMxMTkxYzZlNWM4MmI2OA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T18:04:43Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T18:04:43Z"}, "message": "Fix typos.\n\nFrom-SVN: r201108", "tree": {"sha": "6a2d72a28b2d77570e8276d17559d1cc80f7b977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a2d72a28b2d77570e8276d17559d1cc80f7b977"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/comments", "author": null, "committer": null, "parents": [{"sha": "9b110be230335f0b0bc3cf676b42f0280225a784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b110be230335f0b0bc3cf676b42f0280225a784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b110be230335f0b0bc3cf676b42f0280225a784"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "0850bd53cf114aa86ed87e1c96847b427c0bd627", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "patch": "@@ -4383,7 +4383,7 @@ cleanup_all_empty_eh (void)\n     2) MUST_NOT_THROW regions that became dead because of 1) are optimized out\n     3) Info about regions that are containing instructions, and regions\n        reachable via local EH edges is collected\n-    4) Eh tree is pruned for regions no longer neccesary.\n+    4) Eh tree is pruned for regions no longer necessary.\n \n    TODO: Push MUST_NOT_THROW regions to the root of the EH tree.\n \t Unify those that have the same failure decl and locus."}, {"sha": "fd1bc69be56b0afec655372a550dc16d80a5bfad", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "patch": "@@ -1110,7 +1110,7 @@ forward_edge_to_pdom (edge e, basic_block post_dom_bb)\n   e2 = redirect_edge_and_branch (e, post_dom_bb);\n   cfg_altered = true;\n \n-  /* If edge was already around, no updating is neccesary.  */\n+  /* If edge was already around, no updating is necessary.  */\n   if (e2 != e)\n     return e2;\n "}, {"sha": "735403a0284149b268d5657db24708c7074320b2", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "patch": "@@ -376,7 +376,7 @@ tree_estimate_loop_size (struct loop *loop, edge exit, edge edge_to_cancel, stru\n    is dead and that some instructions will be eliminated after\n    peeling.\n \n-   Loop body is likely going to simplify futher, this is difficult\n+   Loop body is likely going to simplify further, this is difficult\n    to guess, we just decrease the result by 1/3.  */\n \n static unsigned HOST_WIDE_INT\n@@ -782,7 +782,7 @@ try_unroll_loop_completely (struct loop *loop,\n \t storing or cumulating the return value.  */\n       else if (size.num_pure_calls_on_hot_path\n \t       /* One IV increment, one test, one ivtmp store\n-\t\t  and one usefull stmt.  That is about minimal loop\n+\t\t  and one useful stmt.  That is about minimal loop\n \t\t  doing pure call.  */\n \t       && (size.non_call_stmts_on_hot_path\n \t\t   <= 3 + size.num_pure_calls_on_hot_path))"}, {"sha": "1a2619d607ce360980198642c3685b6f8fcbff3c", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "patch": "@@ -1386,7 +1386,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t}\n     }\n \n-  /* Process the (operand, code) pairs in order of most occurence.  */\n+  /* Process the (operand, code) pairs in order of most occurrence.  */\n   candidates2 = sbitmap_alloc (length);\n   while (!cvec.is_empty ())\n     {"}, {"sha": "d46cbb34b88085d46e23f1b05a8d5428fb872ac2", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "patch": "@@ -4457,7 +4457,7 @@ find_func_aliases_for_builtin_call (gimple t)\n \t}\n       /* printf-style functions may have hooks to set pointers to\n \t point to somewhere into the generated string.  Leave them\n-\t for a later excercise...  */\n+\t for a later exercise...  */\n       default:\n \t/* Fallthru to general call handling.  */;\n       }\n@@ -5015,7 +5015,7 @@ find_func_clobbers (gimple origt)\n \t    return;\n \t  /* printf-style functions may have hooks to set pointers to\n \t     point to somewhere into the generated string.  Leave them\n-\t     for a later excercise...  */\n+\t     for a later exercise...  */\n \t  default:\n \t    /* Fallthru to general call handling.  */;\n \t  }"}, {"sha": "fa6de9c3531ba425daf408492f5451cdb5bbf6c7", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "patch": "@@ -1615,7 +1615,7 @@ tail_merge_optimize (unsigned int todo)\n       || max_iterations == 0\n       /* We try to be conservative with respect to loop structure, since:\n \t - the cases where tail-merging could both affect loop structure and be\n-\t   benificial are rare,\n+\t   beneficial are rare,\n \t - it prevents us from having to fixup the loops using\n \t   loops_state_set (LOOPS_NEED_FIXUP), and\n \t - keeping loop structure may allow us to simplify the pass."}, {"sha": "357b6712a7588745848449ba2cda83eb95b26e84", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d18c6c7d528e3acfb2506d831191c6e5c82b68/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=c0d18c6c7d528e3acfb2506d831191c6e5c82b68", "patch": "@@ -585,7 +585,7 @@ cond_arg_set_in_bb (edge e, basic_block bb)\n   gimple last = last_stmt (e->dest);\n \n   /* E->dest does not have to end with a control transferring\n-     instruction.  This can occurr when we try to extend a jump\n+     instruction.  This can occur when we try to extend a jump\n      threading opportunity deeper into the CFG.  In that case\n      it is safe for this check to return false.  */\n   if (!last)"}]}