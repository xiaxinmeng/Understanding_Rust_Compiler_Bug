{"sha": "1066e2b58d90fb2bde0af778dd67136b41f067fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2NmUyYjU4ZDkwZmIyYmRlMGFmNzc4ZGQ2NzEzNmI0MWYwNjdmYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-22T16:57:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-22T16:57:40Z"}, "message": "crtstuff.c (__register_frame_info_bases): Declare.\n\n        * crtstuff.c (__register_frame_info_bases): Declare.\n        (frame_dummy): Use it, if CRT_GET_RFIB_TEXT or CRT_GET_RFIB_DATA.\n        (__do_global_dtors_aux, __do_global_dtors): Streamline.\n\n        * config/i386/linux.h (ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): New.\n        (CRT_GET_RFIB_DATA): New.\n        * config/i386/sysv4.h: Likewise.\n        * config/i386/sco5.h: Likewise.\n        (ASM_PREFERRED_EH_DATA_FORMAT): New.\n\nFrom-SVN: r42453", "tree": {"sha": "f3a57d110a686d95d437a43f194144c18a10751a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3a57d110a686d95d437a43f194144c18a10751a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1066e2b58d90fb2bde0af778dd67136b41f067fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1066e2b58d90fb2bde0af778dd67136b41f067fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1066e2b58d90fb2bde0af778dd67136b41f067fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1066e2b58d90fb2bde0af778dd67136b41f067fc/comments", "author": null, "committer": null, "parents": [{"sha": "eac8c4b0410083e16d48633b84aa1d61d44712c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac8c4b0410083e16d48633b84aa1d61d44712c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac8c4b0410083e16d48633b84aa1d61d44712c7"}], "stats": {"total": 154, "additions": 146, "deletions": 8}, "files": [{"sha": "148f682ea4221ca5d5e1f9b8de5ee6aeec7fb9a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1066e2b58d90fb2bde0af778dd67136b41f067fc", "patch": "@@ -1,3 +1,15 @@\n+2001-05-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* crtstuff.c (__register_frame_info_bases): Declare.\n+\t(frame_dummy): Use it, if CRT_GET_RFIB_TEXT or CRT_GET_RFIB_DATA.\n+\t(__do_global_dtors_aux, __do_global_dtors): Streamline.\n+\n+\t* config/i386/linux.h (ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): New.\n+\t(CRT_GET_RFIB_DATA): New.\n+\t* config/i386/sysv4.h: Likewise.\n+\t* config/i386/sco5.h: Likewise.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): New.\n+\n 2001-05-22  Richard Henderson  <rth@redhat.com>\n \n \t* rtl.c (read_string): Break out from ..."}, {"sha": "c80a3feb5a06dc5d45b34f827e8b6bb465bbfadf", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=1066e2b58d90fb2bde0af778dd67136b41f067fc", "patch": "@@ -194,6 +194,39 @@ Boston, MA 02111-1307, USA.  */\n   while (0)\n #endif\n \n+/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n+   indirect are handled automatically.  */\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        fputs (UNALIGNED_INT_ASM_OP, FILE);\t\t\t\t\\\n+        assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n+\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), FILE); \\\n+        goto DONE;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Used by crtstuff.c to initialize the base of data-relative relocations.\n+   These are GOT relative on x86, so return the pic register.  */\n+#ifdef __PIC__\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    register void *ebx_ __asm__(\"ebx\");\t\t\\\n+    BASE = ebx_;\t\t\t\t\\\n+  }\n+#else\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\t\t\t\\\n+  __asm__ (\"call\\t.LPR%=\\n\"\t\t\t\t\t\t\\\n+\t   \".LPR%=:\\n\\t\"\t\t\t\t\t\t\\\n+\t   \"popl\\t%0\\n\\t\"\t\t\t\t\t\t\\\n+\t   /* Due to a GAS bug, this cannot use EAX.  That encodes\t\\\n+\t      smaller than the traditional EBX, which results in the\t\\\n+\t      offset being off by one.  */\t\t\t\t\\\n+\t   \"addl\\t$_GLOBAL_OFFSET_TABLE_+[.-.LPR%=],%0\"\t\t\t\\\n+\t   : \"=d\"(BASE))\n+#endif\n+\n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */\n "}, {"sha": "19cbcf12066d002e356a1a1f2e0e54c60b4b1a52", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=1066e2b58d90fb2bde0af778dd67136b41f067fc", "patch": "@@ -951,3 +951,44 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n # endif /* ! _SCO_ELF */\n #endif /* CRT_BEGIN !! CRT_END */\n+\n+/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n+   indirect are handled automatically.  */\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        fputs (UNALIGNED_INT_ASM_OP, FILE);\t\t\t\t\\\n+        assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n+\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), FILE); \\\n+        goto DONE;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Used by crtstuff.c to initialize the base of data-relative relocations.\n+   These are GOT relative on x86, so return the pic register.  */\n+#ifdef __PIC__\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    register void *ebx_ __asm__(\"ebx\");\t\t\\\n+    BASE = ebx_;\t\t\t\t\\\n+  }\n+#else\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\t\t\t\\\n+  __asm__ (\"call\\t.LPR%=\\n\"\t\t\t\t\t\t\\\n+\t   \".LPR%=:\\n\\t\"\t\t\t\t\t\t\\\n+\t   \"popl\\t%0\\n\\t\"\t\t\t\t\t\t\\\n+\t   /* Due to a GAS bug, this cannot use EAX.  That encodes\t\\\n+\t      smaller than the traditional EBX, which results in the\t\\\n+\t      offset being off by one.  */\t\t\t\t\\\n+\t   \"addl\\t$_GLOBAL_OFFSET_TABLE_+[.-.LPR%=],%0\"\t\t\t\\\n+\t   : \"=d\"(BASE))\n+#endif\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#undef ASM_PREFERRED_EH_DATA_FORMAT\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t\\\n+  (flag_pic ? (GLOBAL ? DW_EH_PE_indirect : 0) | DW_EH_PE_datarel\t\\\n+   : DW_EH_PE_absptr)"}, {"sha": "f56d58326c0f12747ab4dbe9f702713be6937aa0", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=1066e2b58d90fb2bde0af778dd67136b41f067fc", "patch": "@@ -179,3 +179,36 @@ do { long value[3];\t\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+\n+/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n+   indirect are handled automatically.  */\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        fputs (UNALIGNED_INT_ASM_OP, FILE);\t\t\t\t\\\n+        assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n+\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), FILE); \\\n+        goto DONE;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Used by crtstuff.c to initialize the base of data-relative relocations.\n+   These are GOT relative on x86, so return the pic register.  */\n+#ifdef __PIC__\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    register void *ebx_ __asm__(\"ebx\");\t\t\\\n+    BASE = ebx_;\t\t\t\t\\\n+  }\n+#else\n+#define CRT_GET_RFIB_DATA(BASE)\t\t\t\t\t\t\\\n+  __asm__ (\"call\\t.LPR%=\\n\"\t\t\t\t\t\t\\\n+\t   \".LPR%=:\\n\\t\"\t\t\t\t\t\t\\\n+\t   \"popl\\t%0\\n\\t\"\t\t\t\t\t\t\\\n+\t   /* Due to a GAS bug, this cannot use EAX.  That encodes\t\\\n+\t      smaller than the traditional EBX, which results in the\t\\\n+\t      offset being off by one.  */\t\t\t\t\\\n+\t   \"addl\\t$_GLOBAL_OFFSET_TABLE_+[.-.LPR%=],%0\"\t\t\t\\\n+\t   : \"=d\"(BASE))\n+#endif"}, {"sha": "1897185f3d1a3bfbfbf1f032686cdbf351053a27", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1066e2b58d90fb2bde0af778dd67136b41f067fc/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=1066e2b58d90fb2bde0af778dd67136b41f067fc", "patch": "@@ -90,7 +90,9 @@ Boston, MA 02111-1307, USA.  */\n    be weak in this file if at all possible.  */\n extern void __register_frame_info (void *, struct object *)\n \t\t\t\t  TARGET_ATTRIBUTE_WEAK;\n-\n+extern void __register_frame_info_bases (void *, struct object *,\n+\t\t\t\t\t void *, void *)\n+\t\t\t\t  TARGET_ATTRIBUTE_WEAK;\n extern void *__deregister_frame_info (void *)\n \t\t\t\t     TARGET_ATTRIBUTE_WEAK;\n \n@@ -190,20 +192,21 @@ static void\n __do_global_dtors_aux (void)\n {\n   static func_ptr *p = __DTOR_LIST__ + 1;\n-  static int completed = 0;\n+  static int completed;\n+  func_ptr f;\n \n-  if (completed)\n+  if (__builtin_expect (completed, 0))\n     return;\n \n #ifdef CRTSTUFFS_O\n   if (__cxa_finalize)\n     __cxa_finalize (__dso_handle);\n #endif\n \n-  while (*p)\n+  while ((f = *p))\n     {\n       p++;\n-      (*(p-1)) ();\n+      f ();\n     }\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n@@ -236,8 +239,24 @@ static void\n frame_dummy (void)\n {\n   static struct object object;\n+#if defined(CRT_GET_RFIB_TEXT) || defined(CRT_GET_RFIB_DATA)\n+  void *tbase, *dbase;\n+#ifdef CRT_GET_RFIB_TEXT\n+  CRT_GET_RFIB_TEXT (tbase);\n+#else\n+  tbase = 0;\n+#endif\n+#ifdef CRT_GET_RFIB_DATA\n+  CRT_GET_RFIB_DATA (dbase);\n+#else\n+  dbase = 0;\n+#endif\n+  if (__register_frame_info_bases)\n+    __register_frame_info_bases (__EH_FRAME_BEGIN__, &object, tbase, dbase);\n+#else\n   if (__register_frame_info)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n+#endif\n }\n \n static void __attribute__ ((__unused__))\n@@ -317,9 +336,9 @@ static func_ptr __DTOR_LIST__[];\n void\n __do_global_dtors (void)\n {\n-  func_ptr *p;\n-  for (p = __DTOR_LIST__ + 1; *p; p++)\n-    (*p) ();\n+  func_ptr *p, f;\n+  for (p = __DTOR_LIST__ + 1; (f = *p); p++)\n+    f ();\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n   if (__deregister_frame_info)"}]}