{"sha": "790a8e8942b3f5a896ab5897cd209de1d9c382ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkwYThlODk0MmIzZjVhODk2YWI1ODk3Y2QyMDlkZTFkOWMzODJhZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-09T20:54:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-09T20:54:14Z"}, "message": "analyzer: support \"_IO_\"-prefixed variants of FILE * fns [PR98575]\n\nPR analyzer/98575 describes an unexpected -Wanalyzer-malloc-leak false\npositive from gcc.dg/analyzer/pr94851-1.c on glibc < 2.28.\n\nThe issue is that a getchar call gets inlined into a call to _IO_getc,\nand \"_IO_getc\" is not in the set of FILE * functions the analyzer\n\"knows about\".  This exposes a bug in memory leak detection on code\npaths in which an unknown function has been called.\n\nThe memory leak bug is fixed in the prior commit, but for good\nmeasure this patch special-cases the \"_IO_\"-prefixed names in glibc\nso that the analyzer can reuse its knowledge about the unprefixed\nvariants.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/98575\n\t* sm-file.cc (is_file_using_fn_p): Support \"_IO_\"-prefixed\n\tvariants.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/98575\n\t* gcc.dg/analyzer/file-1.c (test_5): New.\n\t* gcc.dg/analyzer/file-3.c: New test.", "tree": {"sha": "457be320498768901e49e847bc14a3f21fe37d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457be320498768901e49e847bc14a3f21fe37d3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/790a8e8942b3f5a896ab5897cd209de1d9c382ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790a8e8942b3f5a896ab5897cd209de1d9c382ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790a8e8942b3f5a896ab5897cd209de1d9c382ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790a8e8942b3f5a896ab5897cd209de1d9c382ae/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "48ef4aa23345838b570a248ae86a0aacbaac40f5", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790a8e8942b3f5a896ab5897cd209de1d9c382ae/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790a8e8942b3f5a896ab5897cd209de1d9c382ae/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=790a8e8942b3f5a896ab5897cd209de1d9c382ae", "patch": "@@ -307,7 +307,16 @@ static bool\n is_file_using_fn_p (tree fndecl)\n {\n   function_set fs = get_file_using_fns ();\n-  return fs.contains_decl_p (fndecl);\n+  if (fs.contains_decl_p (fndecl))\n+    return true;\n+\n+  /* Also support variants of these names prefixed with \"_IO_\".  */\n+  const char *name = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n+  if (strncmp (name, \"_IO_\", 4) == 0)\n+    if (fs.contains_name_p (name + 4))\n+      return true;\n+\n+  return false;\n }\n \n /* Implementation of state_machine::on_stmt vfunc for fileptr_state_machine.  */"}, {"sha": "f9afa88f1e8c83d38aa441751d3684b420ab4e40", "filename": "gcc/testsuite/gcc.dg/analyzer/file-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790a8e8942b3f5a896ab5897cd209de1d9c382ae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790a8e8942b3f5a896ab5897cd209de1d9c382ae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c?ref=790a8e8942b3f5a896ab5897cd209de1d9c382ae", "patch": "@@ -47,3 +47,10 @@ test_4 (const char *path)\n \n   return; /* { dg-warning \"leak of FILE 'f'\" } */ \n }\n+\n+void\n+test_5 (const char *path)\n+{\n+  FILE *f = fopen (path, \"r\"); /* { dg-message \"opened here\" } */\n+  return; /* { dg-warning \"leak of FILE 'f'\" } */ \n+}"}, {"sha": "8f93a986deb5bca91deb06e61a83b631c80e47dc", "filename": "gcc/testsuite/gcc.dg/analyzer/file-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790a8e8942b3f5a896ab5897cd209de1d9c382ae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790a8e8942b3f5a896ab5897cd209de1d9c382ae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-3.c?ref=790a8e8942b3f5a896ab5897cd209de1d9c382ae", "patch": "@@ -0,0 +1,18 @@\n+typedef struct _IO_FILE FILE;\n+extern struct _IO_FILE *stderr;\n+\n+extern FILE *fopen (const char *__restrict __filename,\n+\t\t    const char *__restrict __modes);\n+extern int _IO_getc (FILE *stream);\n+\n+void\n+test_1 (const char *path)\n+{\n+  FILE *f = fopen (path, \"r\"); /* { dg-message \"opened here\" } */\n+\n+  /* Implementation of getc in glibc < 2.28.\n+     Verify that we know that this doesn't close the file.  */\n+  _IO_getc (f);\n+\n+  return; /* { dg-warning \"leak of FILE 'f'\" } */ \n+}"}]}