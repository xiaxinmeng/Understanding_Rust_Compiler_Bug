{"sha": "605d1297b91c2c7c23ccfe669e66dda5791d1f55", "node_id": "C_kwDOANBUbNoAKDYwNWQxMjk3YjkxYzJjN2MyM2NjZmU2NjllNjZkZGE1NzkxZDFmNTU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-02T10:09:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-02T12:13:26Z"}, "message": "middle-end/108625 - wrong folding due to misinterpreted !\n\nThe following fixes a problem with ! handling in genmatch which isn't\nconservative enough when intermediate simplifications push to the\nsequence but the final operation appears to just pick an existing\n(but in this case newly defined in the sequence) operand.  The easiest\nfix is to disallow adding to the sequence when processing !.\n\n\tPR middle-end/108625\n\t* genmatch.cc (expr::gen_transform): Also disallow resimplification\n\tfrom pushing to lseq with force_leaf.\n\t(dt_simplify::gen_1): Likewise.\n\n\t* gcc.dg/pr108625.c: New testcase.", "tree": {"sha": "e8b9b903d6e8c9e757e594e7d439499b81c44023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8b9b903d6e8c9e757e594e7d439499b81c44023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605d1297b91c2c7c23ccfe669e66dda5791d1f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605d1297b91c2c7c23ccfe669e66dda5791d1f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605d1297b91c2c7c23ccfe669e66dda5791d1f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605d1297b91c2c7c23ccfe669e66dda5791d1f55/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fff8a6fcd8375aa1056671fcd8de76304e8973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fff8a6fcd8375aa1056671fcd8de76304e8973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fff8a6fcd8375aa1056671fcd8de76304e8973"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "43bd0212d0e205a8b73ba95fe44d83a193ae922e", "filename": "gcc/genmatch.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d1297b91c2c7c23ccfe669e66dda5791d1f55/gcc%2Fgenmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d1297b91c2c7c23ccfe669e66dda5791d1f55/gcc%2Fgenmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.cc?ref=605d1297b91c2c7c23ccfe669e66dda5791d1f55", "patch": "@@ -2541,7 +2541,8 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n       for (unsigned i = 0; i < ops.length (); ++i)\n \tfprintf (f, \", _o%d[%u]\", depth, i);\n       fprintf (f, \");\\n\");\n-      fprintf_indent (f, indent, \"tem_op.resimplify (lseq, valueize);\\n\");\n+      fprintf_indent (f, indent, \"tem_op.resimplify (%s, valueize);\\n\",\n+\t\t      !force_leaf ? \"lseq\" : \"NULL\");\n       fprintf_indent (f, indent,\n \t\t      \"_r%d = maybe_push_res_to_seq (&tem_op, %s);\\n\", depth,\n \t\t      !force_leaf ? \"lseq\" : \"NULL\");\n@@ -3451,7 +3452,8 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t  if (!is_predicate)\n \t    {\n \t      fprintf_indent (f, indent,\n-\t\t\t      \"res_op->resimplify (lseq, valueize);\\n\");\n+\t\t\t      \"res_op->resimplify (%s, valueize);\\n\",\n+\t\t\t      !e->force_leaf ? \"lseq\" : \"NULL\");\n \t      if (e->force_leaf)\n \t\tfprintf_indent (f, indent,\n \t\t\t\t\"if (!maybe_push_res_to_seq (res_op, NULL)) \""}, {"sha": "03fc2889c4f78d65b0accd69bee552dc86f5392f", "filename": "gcc/testsuite/gcc.dg/pr108625.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d1297b91c2c7c23ccfe669e66dda5791d1f55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108625.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d1297b91c2c7c23ccfe669e66dda5791d1f55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108625.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108625.c?ref=605d1297b91c2c7c23ccfe669e66dda5791d1f55", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1 -fdump-tree-optimized\" } */\n+\n+unsigned char foo(int x)\n+{\n+  int t = -x;\n+  unsigned char t1 = t;\n+  unsigned char t2 = t;\n+  /* We may not rewrite this as (unsigned char)(t - x).  */\n+  return t1 + t2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"x_\" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"x_\" 1 \"optimized\" } } */"}]}