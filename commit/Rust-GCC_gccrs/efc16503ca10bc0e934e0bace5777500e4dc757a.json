{"sha": "efc16503ca10bc0e934e0bace5777500e4dc757a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjMTY1MDNjYTEwYmMwZTkzNGUwYmFjZTU3Nzc1MDBlNGRjNzU3YQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-06-23T09:31:18Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-06-23T09:31:18Z"}, "message": "handle dumpbase in offloading, adjust testsuite\n\nPass dumpbase on to mkoffloads and their offload-target compiler runs,\nusing different suffixes for different offloading targets.\nObey -save-temps in naming temporary files while at that.\n\nAdjust the testsuite offload dump scanning machinery to look for dump\nfiles named under the new conventions, iterating internally over all\nconfigured offload targets, or recognizing libgomp's testsuite's own\niteration.\n\n\nfor  gcc/ChangeLog\n\n\t* collect-utils.h (dumppfx): New.\n\t* collect-utils.c (dumppfx): Likewise.\n\t* lto-wrapper.c (run_gcc): Set global dumppfx.\n\t(compile_offload_image): Pass a -dumpbase on to mkoffload.\n\t* config/nvptx/mkoffload.c (ptx_dumpbase): New.\n\t(main): Handle incoming -dumpbase.  Set ptx_dumpbase.  Obey\n\tsave_temps.\n\t(compile_native): Pass -dumpbase et al to compiler.\n\t* config/gcn/mkoffload.c (gcn_dumpbase): New.\n\t(main): Handle incoming -dumpbase.  Set gcn_dumpbase.  Obey\n\tsave_temps.  Pass -dumpbase et al to offload target compiler.\n\t(compile_native): Pass -dumpbase et al to compiler.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* lib/scanoffload.exp: New.\n\t* lib/scanoffloadrtl.exp: Load it.  Replace \".o\" with \"\"\n\tglobally, and use scanoffload's scoff wrapper to fill it in.\n\t* lib/scanoffloadtree.exp: Likewise.\n\nfor libgomp/ChangeLog\n\n\t* testsuite/lib/libgomp.exp: Load gcc lib scanoffload.exp.\n\t* testsuite/lib/libgomp-dg.exp: Drop now-obsolete -save-temps.", "tree": {"sha": "b4309bd1f6e06861ead3a3301c2f52c38a7bd8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4309bd1f6e06861ead3a3301c2f52c38a7bd8b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc16503ca10bc0e934e0bace5777500e4dc757a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc16503ca10bc0e934e0bace5777500e4dc757a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc16503ca10bc0e934e0bace5777500e4dc757a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc16503ca10bc0e934e0bace5777500e4dc757a/comments", "author": null, "committer": null, "parents": [{"sha": "c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65"}], "stats": {"total": 251, "additions": 185, "deletions": 66}, "files": [{"sha": "d4fa2c3d345c905a67b93f21d50349e566fd6426", "filename": "gcc/collect-utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fcollect-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fcollect-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.c?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -34,6 +34,7 @@ static char *response_file;\n bool debug;\n bool verbose;\n bool save_temps;\n+const char *dumppfx;\n \n \n /* Notify user of a non-error.  */"}, {"sha": "6ff7d9d96df715eb3b050e7a5aaf186bb5f477d8", "filename": "gcc/collect-utils.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fcollect-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fcollect-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.h?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -37,6 +37,7 @@ extern void utils_cleanup (bool);\n extern bool debug;\n extern bool verbose;\n extern bool save_temps;\n+extern const char *dumppfx;\n \n /* Provided by the tool itself.  */\n "}, {"sha": "14f422e5c6d60b38a1ac76d36b12b4beaac44fc5", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -41,6 +41,7 @@ static const char *gcn_s1_name;\n static const char *gcn_s2_name;\n static const char *gcn_o_name;\n static const char *gcn_cfile_name;\n+static const char *gcn_dumpbase;\n \n enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n \n@@ -496,6 +497,12 @@ compile_native (const char *infile, const char *outfile, const char *compiler)\n     obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n+  obstack_ptr_grow (&argv_obstack, \"-dumpdir\");\n+  obstack_ptr_grow (&argv_obstack, \"\");\n+  obstack_ptr_grow (&argv_obstack, \"-dumpbase\");\n+  obstack_ptr_grow (&argv_obstack, gcn_dumpbase);\n+  obstack_ptr_grow (&argv_obstack, \"-dumpbase-ext\");\n+  obstack_ptr_grow (&argv_obstack, \".c\");\n   switch (offload_abi)\n     {\n     case OFFLOAD_ABI_LP64:\n@@ -611,6 +618,9 @@ main (int argc, char **argv)\n \tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n \tverbose = true;\n+      else if (strcmp (argv[i], \"-dumpbase\") == 0\n+\t       && i + 1 < argc)\n+\tdumppfx = argv[++i];\n     }\n   if (!(fopenacc ^ fopenmp))\n     fatal_error (input_location, \"either -fopenacc or -fopenmp must be set\");\n@@ -628,11 +638,6 @@ main (int argc, char **argv)\n       gcc_unreachable ();\n     }\n \n-  gcn_s1_name = make_temp_file (\".mkoffload.1.s\");\n-  gcn_s2_name = make_temp_file (\".mkoffload.2.s\");\n-  gcn_o_name = make_temp_file (\".mkoffload.hsaco\");\n-  gcn_cfile_name = make_temp_file (\".c\");\n-\n   /* Build arguments for compiler pass.  */\n   struct obstack cc_argv_obstack;\n   obstack_init (&cc_argv_obstack);\n@@ -656,6 +661,35 @@ main (int argc, char **argv)\n \tobstack_ptr_grow (&cc_argv_obstack, argv[ix]);\n     }\n \n+  if (!dumppfx)\n+    dumppfx = outname;\n+\n+  const char *mko_dumpbase = concat (dumppfx, \".mkoffload\", NULL);\n+  const char *hsaco_dumpbase = concat (dumppfx, \".mkoffload.hsaco\", NULL);\n+  gcn_dumpbase = concat (dumppfx, \".c\", NULL);\n+\n+  if (save_temps)\n+    {\n+      gcn_s1_name = concat (mko_dumpbase, \".1.s\", NULL);\n+      gcn_s2_name = concat (mko_dumpbase, \".2.s\", NULL);\n+      gcn_o_name = hsaco_dumpbase;\n+      gcn_cfile_name = gcn_dumpbase;\n+    }\n+  else\n+    {\n+      gcn_s1_name = make_temp_file (\".mkoffload.1.s\");\n+      gcn_s2_name = make_temp_file (\".mkoffload.2.s\");\n+      gcn_o_name = make_temp_file (\".mkoffload.hsaco\");\n+      gcn_cfile_name = make_temp_file (\".c\");\n+    }\n+\n+  obstack_ptr_grow (&cc_argv_obstack, \"-dumpdir\");\n+  obstack_ptr_grow (&cc_argv_obstack, \"\");\n+  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase\");\n+  obstack_ptr_grow (&cc_argv_obstack, mko_dumpbase);\n+  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase-ext\");\n+  obstack_ptr_grow (&cc_argv_obstack, \"\");\n+\n   obstack_ptr_grow (&cc_argv_obstack, \"-o\");\n   obstack_ptr_grow (&cc_argv_obstack, gcn_s1_name);\n   obstack_ptr_grow (&cc_argv_obstack, NULL);\n@@ -674,6 +708,13 @@ main (int argc, char **argv)\n \t|| strncmp (argv[i], \"-march\", 6) == 0)\n       obstack_ptr_grow (&ld_argv_obstack, argv[i]);\n \n+  obstack_ptr_grow (&cc_argv_obstack, \"-dumpdir\");\n+  obstack_ptr_grow (&cc_argv_obstack, \"\");\n+  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase\");\n+  obstack_ptr_grow (&cc_argv_obstack, hsaco_dumpbase);\n+  obstack_ptr_grow (&cc_argv_obstack, \"-dumpbase-ext\");\n+  obstack_ptr_grow (&cc_argv_obstack, \"\");\n+\n   obstack_ptr_grow (&ld_argv_obstack, \"-o\");\n   obstack_ptr_grow (&ld_argv_obstack, gcn_o_name);\n   obstack_ptr_grow (&ld_argv_obstack, NULL);"}, {"sha": "efdf9b9980dbd0aaeaa64104d11a1aa0c7bfbe74", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -55,6 +55,7 @@ static id_map *var_ids, **vars_tail = &var_ids;\n /* Files to unlink.  */\n static const char *ptx_name;\n static const char *ptx_cfile_name;\n+static const char *ptx_dumpbase;\n \n enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n \n@@ -369,6 +370,12 @@ compile_native (const char *infile, const char *outfile, const char *compiler)\n     obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n+  obstack_ptr_grow (&argv_obstack, \"-dumpdir\");\n+  obstack_ptr_grow (&argv_obstack, \"\");\n+  obstack_ptr_grow (&argv_obstack, \"-dumpbase\");\n+  obstack_ptr_grow (&argv_obstack, ptx_dumpbase);\n+  obstack_ptr_grow (&argv_obstack, \"-dumpbase-ext\");\n+  obstack_ptr_grow (&argv_obstack, \".c\");\n   switch (offload_abi)\n     {\n     case OFFLOAD_ABI_LP64:\n@@ -486,6 +493,9 @@ main (int argc, char **argv)\n \tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n \tverbose = true;\n+      else if (strcmp (argv[i], \"-dumpbase\") == 0\n+\t       && i + 1 < argc)\n+\tdumppfx = argv[++i];\n     }\n   if (!(fopenacc ^ fopenmp))\n     fatal_error (input_location, \"either %<-fopenacc%> or %<-fopenmp%> \"\n@@ -521,7 +531,14 @@ main (int argc, char **argv)\n \tobstack_ptr_grow (&argv_obstack, argv[ix]);\n     }\n \n-  ptx_cfile_name = make_temp_file (\".c\");\n+  if (!dumppfx)\n+    dumppfx = outname;\n+\n+  ptx_dumpbase = concat (dumppfx, \".c\", NULL);\n+  if (save_temps)\n+    ptx_cfile_name = ptx_dumpbase;\n+  else\n+    ptx_cfile_name = make_temp_file (\".c\");\n \n   out = fopen (ptx_cfile_name, \"w\");\n   if (!out)\n@@ -531,7 +548,17 @@ main (int argc, char **argv)\n      configurations.  */\n   if (offload_abi == OFFLOAD_ABI_LP64)\n     {\n-      ptx_name = make_temp_file (\".mkoffload\");\n+      char *mko_dumpbase = concat (dumppfx, \".mkoffload\", NULL);\n+      if (save_temps)\n+\tptx_name = mko_dumpbase;\n+      else\n+\tptx_name = make_temp_file (\".mkoffload\");\n+      obstack_ptr_grow (&argv_obstack, \"-dumpdir\");\n+      obstack_ptr_grow (&argv_obstack, \"\");\n+      obstack_ptr_grow (&argv_obstack, \"-dumpbase\");\n+      obstack_ptr_grow (&argv_obstack, mko_dumpbase);\n+      obstack_ptr_grow (&argv_obstack, \"-dumpbase-ext\");\n+      obstack_ptr_grow (&argv_obstack, \"\");\n       obstack_ptr_grow (&argv_obstack, \"-o\");\n       obstack_ptr_grow (&argv_obstack, ptx_name);\n       obstack_ptr_grow (&argv_obstack, NULL);"}, {"sha": "939a83ac73a4e8238395b60f0bcdca88c78a8aeb", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -830,6 +830,7 @@ compile_offload_image (const char *target, const char *compiler_path,\n \t\t       unsigned int linker_opt_count)\n {\n   char *filename = NULL;\n+  char *dumpbase;\n   char **argv;\n   char *suffix\n     = XALLOCAVEC (char, sizeof (\"/accel//mkoffload\") + strlen (target));\n@@ -853,8 +854,13 @@ compile_offload_image (const char *target, const char *compiler_path,\n \t\t \"could not find %s in %s (consider using %<-B%>)\",\n \t\t suffix + 1, compiler_path);\n \n+  dumpbase = concat (dumppfx, \"x\", target, NULL);\n+\n   /* Generate temporary output file name.  */\n-  filename = make_temp_file (\".target.o\");\n+  if (save_temps)\n+    filename = concat (dumpbase, \".o\", NULL);\n+  else\n+    filename = make_temp_file (\".target.o\");\n \n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n@@ -875,6 +881,9 @@ compile_offload_image (const char *target, const char *compiler_path,\n \t\t\t   compiler_opt_count);\n   append_diag_options (&argv_obstack, linker_opts, linker_opt_count);\n \n+  obstack_ptr_grow (&argv_obstack, \"-dumpbase\");\n+  obstack_ptr_grow (&argv_obstack, dumpbase);\n+\n   /* Append options specified by -foffload last.  In case of conflicting\n      options we expect offload compiler to choose the latest.  */\n   append_offload_options (&argv_obstack, target, compiler_opts,\n@@ -1298,7 +1307,7 @@ run_gcc (unsigned argc, char *argv[])\n   bool linker_output_rel = false;\n   bool skip_debug = false;\n   unsigned n_debugobj;\n-  const char *dumppfx = NULL, *incoming_dumppfx = NULL;\n+  const char *incoming_dumppfx = dumppfx = NULL;\n   static char current_dir[] = { '.', DIR_SEPARATOR, '\\0' };\n \n   /* Get the driver and options.  */"}, {"sha": "ec0d7a605eb3cb9ac31b7a99cffeb8ce24cc2343", "filename": "gcc/testsuite/lib/scanoffload.exp", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Ftestsuite%2Flib%2Fscanoffload.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Ftestsuite%2Flib%2Fscanoffload.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanoffload.exp?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -0,0 +1,45 @@\n+#   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Utility for scanning offloading dump output, used by libgomp.exp.\n+\n+# Format an offload dump suffix given the offload target name in\n+# OFFTGT and any suffix, probably empty, in SUFFIX.\n+proc scoff-format { offtgt suffix } {\n+    return \".x$offtgt.mkoffload$suffix\"\n+}\n+\n+# Wrapper for scan procs.\n+# Argument 0 is the index of the argument to replace when calling\n+# argument 1 with the remaining arguments.  Use end-1 or end or so.\n+proc scoff { args } {\n+    set idx [lindex $args 0]\n+    set prc [lindex $args 1]\n+    set args [lreplace $args 0 1]\n+\n+    global offload_target\n+    if [info exists offload_target] {\n+\tset target $offload_target\n+\tif { \"$target\" != \"disable\" } {\n+\t    eval $prc [lreplace $args $idx $idx \"[scoff-format $target [lindex $args $idx]]\"]\n+\t}\n+    } else {\n+\tglobal offload_targets\n+\tforeach target [split $offload_targets \",\"] {\n+\t    eval $prc [lreplace $args $idx $idx \"[scoff-format $target [lindex $args $idx]]\"]\n+\t}\n+    }\n+}"}, {"sha": "be457f7b09f98c01eceaae38f0516533cf6a4dc1", "filename": "gcc/testsuite/lib/scanoffloadrtl.exp", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Ftestsuite%2Flib%2Fscanoffloadrtl.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Ftestsuite%2Flib%2Fscanoffloadrtl.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanoffloadrtl.exp?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -18,6 +18,7 @@\n # libgomp.exp.\n \n load_lib scandump.exp\n+load_lib scanoffload.exp\n \n # Utility for scanning compiler result, invoked via dg-final.\n # Call pass if pattern is present, otherwise fail.\n@@ -36,12 +37,12 @@ proc scan-offload-rtl-dump { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump \"offload-rtl\" [lindex $args 0] \\\n-\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\" \\\n-\t\t  [lindex $args 2]\n+\tscoff end-1 scan-dump \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump \"offload-rtl\" [lindex $args 0] \\\n-\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\"\n     }\n }\n \n@@ -61,12 +62,12 @@ proc scan-offload-rtl-dump-times { args } {\n \treturn\n     }\n     if { [llength $args] >= 4 } {\n-\tscan-dump-times \"offload-rtl\" [lindex $args 0] [lindex $args 1] \\\n-\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 2]\" \".o\" \\\n+\tscoff end-1 scan-dump-times \"offload-rtl\" [lindex $args 0] \\\n+\t    [lindex $args 1] \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 2]\" \"\" \\\n \t\t\t[lindex $args 3]\n     } else {\n-\tscan-dump-times \"offload-rtl\" [lindex $args 0] [lindex $args 1] \\\n-\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 2]\" \".o\"\n+\tscoff end scan-dump-times \"offload-rtl\" [lindex $args 0] \\\n+\t    [lindex $args 1] \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 2]\" \"\"\n     }\n }\n \n@@ -86,12 +87,12 @@ proc scan-offload-rtl-dump-not { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump-not \"offload-rtl\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\" \\\n-\t\t      [lindex $args 2]\n+\tscoff end-1 scan-dump-not \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump-not \"offload-rtl\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump-not \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\"\n     }\n }\n \n@@ -112,12 +113,12 @@ proc scan-offload-rtl-dump-dem { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump-dem \"offload-rtl\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\" \\\n-\t\t      [lindex $args 2]\n+\tscoff end-1 scan-dump-dem \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump-dem \"offload-rtl\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump-dem \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\"\n     }\n }\n \n@@ -137,11 +138,11 @@ proc scan-offload-rtl-dump-dem-not { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump-dem-not \"offload-rtl\" [lindex $args 0] \\\n-\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\" \\\n-\t\t\t  [lindex $args 2]\n+\tscoff end-1 scan-dump-dem-not \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump-dem-not \"offload-rtl\" [lindex $args 0] \\\n-\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump-dem-not \"offload-rtl\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]r.[lindex $args 1]\" \"\"\n     }\n }"}, {"sha": "e51085cb47e82622b818dd81acbeedae6db97616", "filename": "gcc/testsuite/lib/scanoffloadtree.exp", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Ftestsuite%2Flib%2Fscanoffloadtree.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/gcc%2Ftestsuite%2Flib%2Fscanoffloadtree.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanoffloadtree.exp?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -18,6 +18,7 @@\n # libgomp.exp.\n \n load_lib scandump.exp\n+load_lib scanoffload.exp\n \n # Utility for scanning compiler result, invoked via dg-final.\n # Call pass if pattern is present, otherwise fail.\n@@ -36,12 +37,12 @@ proc scan-offload-tree-dump { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump \"offload-tree\" [lindex $args 0] \\\n-\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n-\t\t  [lindex $args 2]\n+\tscoff end-1 scan-dump \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump \"offload-tree\" [lindex $args 0] \\\n-\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\"\n     }\n }\n \n@@ -61,12 +62,12 @@ proc scan-offload-tree-dump-times { args } {\n \treturn\n     }\n     if { [llength $args] >= 4 } {\n-\tscan-dump-times \"offload-tree\" [lindex $args 0] [lindex $args 1] \\\n-\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 2]\" \".o\" \\\n-\t\t\t[lindex $args 3]\n+\tscoff end-1 scan-dump-times \"offload-tree\" [lindex $args 0] \\\n+\t    [lindex $args 1] \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 2]\" \"\" \\\n+\t    [lindex $args 3]\n     } else {\n-\tscan-dump-times \"offload-tree\" [lindex $args 0] [lindex $args 1] \\\n-\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 2]\" \".o\"\n+\tscoff end scan-dump-times \"offload-tree\" [lindex $args 0] \\\n+\t    [lindex $args 1] \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 2]\" \"\"\n     }\n }\n \n@@ -86,12 +87,12 @@ proc scan-offload-tree-dump-not { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump-not \"offload-tree\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n-\t\t      [lindex $args 2]\n+\tscoff end-1 scan-dump-not \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump-not \"offload-tree\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump-not \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\"\n     }\n }\n \n@@ -112,12 +113,12 @@ proc scan-offload-tree-dump-dem { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump-dem \"offload-tree\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n-\t\t      [lindex $args 2]\n+\tscoff end-1 scan-dump-dem \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump-dem \"offload-tree\" [lindex $args 0] \\\n-\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump-dem \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\"\n     }\n }\n \n@@ -137,11 +138,11 @@ proc scan-offload-tree-dump-dem-not { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump-dem-not \"offload-tree\" [lindex $args 0] \\\n-\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\" \\\n-\t\t\t  [lindex $args 2]\n+\tscoff end-1 scan-dump-dem-not \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\" \\\n+\t    [lindex $args 2]\n     } else {\n-\tscan-dump-dem-not \"offload-tree\" [lindex $args 0] \\\n-\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \".o\"\n+\tscoff end scan-dump-dem-not \"offload-tree\" [lindex $args 0] \\\n+\t    \"\\[0-9\\]\\[0-9\\]\\[0-9]t.[lindex $args 1]\" \"\"\n     }\n }"}, {"sha": "ebf78e17e6d8db2ca4c1697dcf468c209b2aaeee", "filename": "libgomp/testsuite/lib/libgomp-dg.exp", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -1,12 +1,4 @@\n proc libgomp-dg-test { prog do_what extra_tool_flags } {\n-    # Force the dumpbase for test.c to test.o, such that scan-offload-*-dump\n-    # will work.\n-    foreach opt $extra_tool_flags {\n-\tif { [regexp ^-foffload=-fdump- $opt] } {\n-\t    lappend extra_tool_flags \"-save-temps\"\n-\t}\n-    }\n-\n     return [gcc-dg-test-1 libgomp_target_compile $prog $do_what $extra_tool_flags]\n }\n "}, {"sha": "8ccb78f42c1d1cc68d1fff4cb6606b2c8b649834", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc16503ca10bc0e934e0bace5777500e4dc757a/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc16503ca10bc0e934e0bace5777500e4dc757a/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=efc16503ca10bc0e934e0bace5777500e4dc757a", "patch": "@@ -30,6 +30,7 @@ load_gcc_lib scanlang.exp\n load_gcc_lib scanrtl.exp\n load_gcc_lib scantree.exp\n load_gcc_lib scanltranstree.exp\n+load_gcc_lib scanoffload.exp\n load_gcc_lib scanoffloadtree.exp\n load_gcc_lib scanoffloadrtl.exp\n load_gcc_lib scanipa.exp"}]}