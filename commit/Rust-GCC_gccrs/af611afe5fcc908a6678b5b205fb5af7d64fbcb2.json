{"sha": "af611afe5fcc908a6678b5b205fb5af7d64fbcb2", "node_id": "C_kwDOANBUbNoAKGFmNjExYWZlNWZjYzkwOGE2Njc4YjViMjA1ZmI1YWY3ZDY0ZmJjYjI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-23T12:28:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-23T13:10:54Z"}, "message": "tree-optimization/106922 - extend same-val clobber FRE\n\nThe following extends the skipping of same valued stores to\nhandle an arbitrary number of them as long as they are from the\nsame value (which we now record).  That's an obvious extension\nwhich allows to optimize the m_engaged member of std::optional\nmore reliably.\n\n\tPR tree-optimization/106922\n\t* tree-ssa-sccvn.cc (vn_reference_lookup_3): Allow\n\tan arbitrary number of same valued skipped stores.\n\n\t* g++.dg/torture/pr106922.C: New testcase.", "tree": {"sha": "4afb9a869b3cc42f350119e75d04d47909d3770c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4afb9a869b3cc42f350119e75d04d47909d3770c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af611afe5fcc908a6678b5b205fb5af7d64fbcb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af611afe5fcc908a6678b5b205fb5af7d64fbcb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af611afe5fcc908a6678b5b205fb5af7d64fbcb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af611afe5fcc908a6678b5b205fb5af7d64fbcb2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab0f70a63011ff06eea64960e3b8ca66575bfdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0f70a63011ff06eea64960e3b8ca66575bfdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0f70a63011ff06eea64960e3b8ca66575bfdaf"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "046fc6cce76a42ae1e72f7096fa4007eb24cd997", "filename": "gcc/testsuite/g++.dg/torture/pr106922.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af611afe5fcc908a6678b5b205fb5af7d64fbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr106922.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af611afe5fcc908a6678b5b205fb5af7d64fbcb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr106922.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr106922.C?ref=af611afe5fcc908a6678b5b205fb5af7d64fbcb2", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++17 }\n+// { dg-additional-options \"-Wall\" }\n+// -O1 doesn't iterate VN and thus has bogus uninit diagnostics\n+// { dg-skip-if \"\" { *-*-* } { \"-O1\" } { \"\" } }\n+\n+#include <vector>\n+\n+#include <optional>\n+template <class T>\n+using Optional = std::optional<T>;\n+\n+#include <sstream>\n+\n+struct MyOptionalStructWithInt {\n+    int myint; /* works without this */\n+    Optional<std::vector<std::string>> myoptional;\n+};\n+\n+struct MyOptionalsStruct {\n+    MyOptionalStructWithInt external1;\n+    MyOptionalStructWithInt external2;\n+};\n+\n+struct MyStruct { };\n+std::ostream &operator << (std::ostream &os, const MyStruct &myStruct);\n+\n+std::vector<MyStruct> getMyStructs();\n+\n+void test()\n+{\n+    MyOptionalsStruct externals;\n+    MyOptionalStructWithInt internal1;\n+    MyOptionalStructWithInt internal2;\n+\n+    std::vector<MyStruct> myStructs;\n+    myStructs = getMyStructs();\n+\n+    for (const auto& myStruct : myStructs)\n+    {\n+        std::stringstream address_stream;\n+        address_stream << myStruct;\n+        internal1.myint = internal2.myint = 0;\n+        externals.external1 = internal1;\n+        externals.external2 = internal2;\n+        externals.external2 = internal2;\n+    }\n+}"}, {"sha": "2cc2c0e1e340d6000d1aa8d88cef6a8f711624da", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af611afe5fcc908a6678b5b205fb5af7d64fbcb2/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af611afe5fcc908a6678b5b205fb5af7d64fbcb2/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=af611afe5fcc908a6678b5b205fb5af7d64fbcb2", "patch": "@@ -2680,7 +2680,6 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       if (is_gimple_reg_type (TREE_TYPE (lhs))\n \t  && types_compatible_p (TREE_TYPE (lhs), vr->type)\n \t  && (ref->ref || data->orig_ref.ref)\n-\t  && !data->same_val\n \t  && !data->mask\n \t  && data->partial_defs.is_empty ()\n \t  && multiple_p (get_object_alignment\n@@ -2693,8 +2692,13 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t     a different loop iteration but only to loop invariants.  Use\n \t     CONSTANT_CLASS_P (unvalueized!) as conservative approximation.\n \t     The one-hop lookup below doesn't have this issue since there's\n-\t     a virtual PHI before we ever reach a backedge to cross.  */\n-\t  if (CONSTANT_CLASS_P (rhs))\n+\t     a virtual PHI before we ever reach a backedge to cross.\n+\t     We can skip multiple defs as long as they are from the same\n+\t     value though.  */\n+\t  if (data->same_val\n+\t      && !operand_equal_p (data->same_val, rhs))\n+\t    ;\n+\t  else if (CONSTANT_CLASS_P (rhs))\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{"}]}