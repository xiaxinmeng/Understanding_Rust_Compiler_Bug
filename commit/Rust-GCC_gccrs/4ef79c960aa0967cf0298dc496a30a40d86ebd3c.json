{"sha": "4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVmNzljOTYwYWEwOTY3Y2YwMjk4ZGM0OTZhMzBhNDBkODZlYmQzYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-03T10:03:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-03T10:03:17Z"}, "message": "[15/n] PR85694: Try to split existing casts in widened patterns\n\nThe main over-widening patch can introduce quite a few extra casts,\nand in many cases those casts simply \"tap into\" an intermediate\npoint in an existing extension.  E.g. if we have:\n\n    unsigned char a;\n    int ax = (int) a;\n\nand a later operation using ax is shortened to \"unsigned short\",\nwe would need:\n\n    unsigned short ax' = (unsigned short) a;\n\nThe a->ax extension requires one set of unpacks to get to unsigned\nshort and another set of unpacks to get to int.  The first set are\nthen duplicated for ax'.  If both ax and ax' are needed, the a->ax'\nextension would end up counting twice during cost calculations.\n\nThis patch rewrites the original:\n\n    int ax = (int) a;\n\ninto a pattern:\n\n    unsigned short ax' = (unsigned short) a;\n    int ax = (int) ax';\n\nso that each extension only counts once.\n\n2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-patterns.c (vect_split_statement): New function.\n\t(vect_convert_input): Use it to try to split an existing cast.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-over-widen-5.c: Test that the extensions\n\tget split into two for use by the over-widening pattern.\n\t* gcc.dg/vect/vect-over-widen-6.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-7.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-8.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-9.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-10.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-11.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-12.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-13.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-14.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-15.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-16.c: Likewise.\n\t* gcc.dg/vect/vect-over-widen-22.c: New test.\n\nFrom-SVN: r262334", "tree": {"sha": "0ae63c6c6dc83b6cd7647a38c2a0757969ef2439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ae63c6c6dc83b6cd7647a38c2a0757969ef2439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "370c2ebe8fa20e0812cd2d533d4ed38ee2d37c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370c2ebe8fa20e0812cd2d533d4ed38ee2d37c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370c2ebe8fa20e0812cd2d533d4ed38ee2d37c85"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "fd928b0a1fd06c0f83dd15cbcf5f812b3960383b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -1,3 +1,8 @@\n+2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-patterns.c (vect_split_statement): New function.\n+\t(vect_convert_input): Use it to try to split an existing cast.\n+\n 2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* poly-int.h (print_hex): New function."}, {"sha": "90aa4d7e22a327ce59bbab3d1ccf748af8266841", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -1,3 +1,20 @@\n+2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-over-widen-5.c: Test that the extensions\n+\tget split into two for use by the over-widening pattern.\n+\t* gcc.dg/vect/vect-over-widen-6.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-7.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-8.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-9.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-10.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-11.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-12.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-13.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-14.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-15.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-16.c: Likewise.\n+\t* gcc.dg/vect/vect-over-widen-22.c: New test.\n+\n 2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/vect-widen-mult-u8-u32.c: Check specifically for a"}, {"sha": "f0140e4ef6d70cd61aa7dbb3ba39b1da142a79b2", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-10.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -11,6 +11,7 @@\n \n #include \"vect-over-widen-9.c\"\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 2} \"vect\" } } */"}, {"sha": "222d854b2d6e3b606e83131862c2d23a56f11829", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-11.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-11.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -55,6 +55,7 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 2} \"vect\" } } */"}, {"sha": "ddb3bd8c0d378f0138c8cc7f9c6ea3300744b8a8", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-12.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-12.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -11,6 +11,7 @@\n \n #include \"vect-over-widen-11.c\"\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 2} \"vect\" } } */"}, {"sha": "b25db881afbc668bb163915a893bfb8b83243f32", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-13.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-13.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -43,6 +43,7 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* / 2} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_cast_forwprop_pattern: detected:[^\\n]* = \\(signed char\\)} \"vect\" } } */"}, {"sha": "dfa09f5d2cafe329e6d57b5cc681786cc2c7d215", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-14.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-14.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -11,6 +11,7 @@\n \n #include \"vect-over-widen-13.c\"\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_cast_forwprop_pattern: detected:[^\\n]* = \\(unsigned char\\)} \"vect\" } } */"}, {"sha": "d31050ee926ac7e12c8bce99bf3edc26a1b11fbe", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-15.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-15.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -45,6 +45,7 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* / 2} \"vect\" } } */\n /* { dg-final { scan-tree-dump-not {vect_recog_cast_forwprop_pattern: detected} \"vect\" } } */"}, {"sha": "4584c586da1e6f13e8c8de4c1291cea0141ebab5", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-16.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -11,6 +11,7 @@\n \n #include \"vect-over-widen-15.c\"\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump-not {vect_recog_cast_forwprop_pattern: detected} \"vect\" } } */"}, {"sha": "187bdf159feaa770b8497c020bd3bc82becdea15", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-22.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-22.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_shift } */\n+/* { dg-require-effective-target vect_pack_trunc } */\n+/* { dg-require-effective-target vect_unpack } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 111\n+\n+/* The addition should be narrowed to short.  */\n+\n+void __attribute__ ((noipa))\n+f (unsigned int *restrict a, unsigned int *restrict b,\n+   unsigned short *restrict c, unsigned char *restrict d, unsigned int e)\n+{\n+  e &= 0xff;\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      unsigned int xor = d[i] ^ e;\n+      a[i] = c[i] | xor;\n+      b[i] = xor;\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  unsigned int a[N], b[N];\n+  unsigned short c[N];\n+  unsigned char d[N];\n+  for (int i = 0; i < N; ++i)\n+    {\n+      c[i] = i * 11;\n+      d[i] = i * 2 + 3;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  f (a, b, c, d, 0x73);\n+  for (int i = 0; i < N; ++i)\n+    if (b[i] != ((i * 2 + 3) ^ 0x73)\n+\t|| a[i] != ((i * 11) | b[i]))\n+      __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump {Splitting pattern statement} \"vect\" } } */\n+/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\^} \"vect\" } } */\n+/* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\|} \"vect\" } } */\n+/* { dg-final { scan-tree-dump {demoting [^\\n]* to [^\\n]*char} \"vect\" } } */\n+/* { dg-final { scan-tree-dump {demoting [^\\n]* to [^\\n]*short} \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" } } */"}, {"sha": "269df5387d20c859806da03aed91d77955fa651a", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-5.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -44,6 +44,7 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_cast_forwprop_pattern: detected:[^\\n]* \\(signed char\\)} \"vect\" } } */"}, {"sha": "bda92c965e080dd3f48ec42b6bea16e79d9416cd", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-6.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -9,6 +9,7 @@\n \n #include \"vect-over-widen-5.c\"\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_cast_forwprop_pattern: detected:[^\\n]* \\(unsigned char\\)} \"vect\" } } */"}, {"sha": "314a6828c53c161d2e63b88bdecf0cee9070a794", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-7.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -46,6 +46,7 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 2} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_cast_forwprop_pattern: detected:[^\\n]* \\(signed char\\)} \"vect\" } } */"}, {"sha": "553c0712a79a1d19195dbdab7cbd6fa330685bea", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-8.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -12,6 +12,7 @@\n \n #include \"vect-over-widen-7.c\"\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 2} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_cast_forwprop_pattern: detected:[^\\n]* \\(unsigned char\\)} \"vect\" } } */"}, {"sha": "5baba09a575f0f316aac1a967e145dbbbdade5b4", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-9.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-9.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -50,6 +50,7 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-tree-dump {Splitting statement} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* \\+ } \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 1} \"vect\" } } */\n /* { dg-final { scan-tree-dump {vect_recog_over_widening_pattern: detected:[^\\n]* >> 2} \"vect\" } } */"}, {"sha": "a1649d8b0fec5b5486522de83dfd546b2e6ce7c6", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef79c960aa0967cf0298dc496a30a40d86ebd3c/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=4ef79c960aa0967cf0298dc496a30a40d86ebd3c", "patch": "@@ -634,6 +634,97 @@ vect_recog_temp_ssa_var (tree type, gimple *stmt)\n   return make_temp_ssa_name (type, stmt, \"patt\");\n }\n \n+/* STMT2_INFO describes a type conversion that could be split into STMT1\n+   followed by a version of STMT2_INFO that takes NEW_RHS as its first\n+   input.  Try to do this using pattern statements, returning true on\n+   success.  */\n+\n+static bool\n+vect_split_statement (stmt_vec_info stmt2_info, tree new_rhs,\n+\t\t      gimple *stmt1, tree vectype)\n+{\n+  if (is_pattern_stmt_p (stmt2_info))\n+    {\n+      /* STMT2_INFO is part of a pattern.  Get the statement to which\n+\t the pattern is attached.  */\n+      stmt_vec_info orig_stmt2_info\n+\t= vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt2_info));\n+      vect_init_pattern_stmt (stmt1, orig_stmt2_info, vectype);\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"Splitting pattern statement: \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt2_info->stmt, 0);\n+\t}\n+\n+      /* Since STMT2_INFO is a pattern statement, we can change it\n+\t in-situ without worrying about changing the code for the\n+\t containing block.  */\n+      gimple_assign_set_rhs1 (stmt2_info->stmt, new_rhs);\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location, \"into: \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt1, 0);\n+\t  dump_printf_loc (MSG_NOTE, vect_location, \"and: \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt2_info->stmt, 0);\n+\t}\n+\n+      gimple_seq *def_seq = &STMT_VINFO_PATTERN_DEF_SEQ (orig_stmt2_info);\n+      if (STMT_VINFO_RELATED_STMT (orig_stmt2_info) == stmt2_info->stmt)\n+\t/* STMT2_INFO is the actual pattern statement.  Add STMT1\n+\t   to the end of the definition sequence.  */\n+\tgimple_seq_add_stmt_without_update (def_seq, stmt1);\n+      else\n+\t{\n+\t  /* STMT2_INFO belongs to the definition sequence.  Insert STMT1\n+\t     before it.  */\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt2_info->stmt, def_seq);\n+\t  gsi_insert_before_without_update (&gsi, stmt1, GSI_SAME_STMT);\n+\t}\n+      return true;\n+    }\n+  else\n+    {\n+      /* STMT2_INFO doesn't yet have a pattern.  Try to create a\n+\t two-statement pattern now.  */\n+      gcc_assert (!STMT_VINFO_RELATED_STMT (stmt2_info));\n+      tree lhs_type = TREE_TYPE (gimple_get_lhs (stmt2_info->stmt));\n+      tree lhs_vectype = get_vectype_for_scalar_type (lhs_type);\n+      if (!lhs_vectype)\n+\treturn false;\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"Splitting statement: \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt2_info->stmt, 0);\n+\t}\n+\n+      /* Add STMT1 as a singleton pattern definition sequence.  */\n+      gimple_seq *def_seq = &STMT_VINFO_PATTERN_DEF_SEQ (stmt2_info);\n+      vect_init_pattern_stmt (stmt1, stmt2_info, vectype);\n+      gimple_seq_add_stmt_without_update (def_seq, stmt1);\n+\n+      /* Build the second of the two pattern statements.  */\n+      tree new_lhs = vect_recog_temp_ssa_var (lhs_type, NULL);\n+      gassign *new_stmt2 = gimple_build_assign (new_lhs, NOP_EXPR, new_rhs);\n+      vect_set_pattern_stmt (new_stmt2, stmt2_info, lhs_vectype);\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"into pattern statements: \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt1, 0);\n+\t  dump_printf_loc (MSG_NOTE, vect_location, \"and: \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, new_stmt2, 0);\n+\t}\n+\n+      return true;\n+    }\n+}\n+\n /* Convert UNPROM to TYPE and return the result, adding new statements\n    to STMT_INFO's pattern definition statements if no better way is\n    available.  VECTYPE is the vector form of TYPE.  */\n@@ -662,6 +753,18 @@ vect_convert_input (stmt_vec_info stmt_info, tree type,\n   tree new_op = vect_recog_temp_ssa_var (type, NULL);\n   gassign *new_stmt = gimple_build_assign (new_op, NOP_EXPR, unprom->op);\n \n+  /* If the operation is the input to a vectorizable cast, try splitting\n+     that cast into two, taking the required result as a mid-way point.  */\n+  if (unprom->caster)\n+    {\n+      tree lhs = gimple_get_lhs (unprom->caster->stmt);\n+      if (TYPE_PRECISION (TREE_TYPE (lhs)) > TYPE_PRECISION (type)\n+\t  && TYPE_PRECISION (type) > TYPE_PRECISION (unprom->type)\n+\t  && (TYPE_UNSIGNED (unprom->type) || !TYPE_UNSIGNED (type))\n+\t  && vect_split_statement (unprom->caster, new_op, new_stmt, vectype))\n+\treturn new_op;\n+    }\n+\n   /* If OP is an external value, see if we can insert the new statement\n      on an incoming edge.  */\n   if (unprom->dt == vect_external_def)"}]}