{"sha": "5af1876c657286423edbf631be14a36ce2dcaeaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmMTg3NmM2NTcyODY0MjNlZGJmNjMxYmUxNGEzNmNlMmRjYWVhYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-03-11T17:34:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-03-11T17:34:32Z"}, "message": "re PR c++/60389 ([c++11] ICE with inheriting constructors and wrong usage of constexpr)\n\n/cp\n2014-03-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60389\n\t* method.c (get_inherited_ctor): New.\n\t* cp-tree.h (get_inherited_ctor): Declare it.\n\t* semantics.c (is_valid_constexpr_fn): Use it.\n\n/testsuite\n2014-03-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60389\n\t* g++.dg/cpp0x/inh-ctor19.C: New.\n\nFrom-SVN: r208491", "tree": {"sha": "815b5a91ba62eb93aca7edda95961ff3478f1fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815b5a91ba62eb93aca7edda95961ff3478f1fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5af1876c657286423edbf631be14a36ce2dcaeaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af1876c657286423edbf631be14a36ce2dcaeaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af1876c657286423edbf631be14a36ce2dcaeaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af1876c657286423edbf631be14a36ce2dcaeaa/comments", "author": null, "committer": null, "parents": [{"sha": "06dce00742a8f1c917c3b9113eafca0883b3e7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06dce00742a8f1c917c3b9113eafca0883b3e7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06dce00742a8f1c917c3b9113eafca0883b3e7a4"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "4848b54223ff5f1dfb740e41dda891f28c928e05", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5af1876c657286423edbf631be14a36ce2dcaeaa", "patch": "@@ -1,3 +1,10 @@\n+2014-03-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60389\n+\t* method.c (get_inherited_ctor): New.\n+\t* cp-tree.h (get_inherited_ctor): Declare it.\n+\t* semantics.c (is_valid_constexpr_fn): Use it.\n+\n 2014-03-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/60367"}, {"sha": "e9fe86ee4cd18ef71415d4f910e0f998370038e0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5af1876c657286423edbf631be14a36ce2dcaeaa", "patch": "@@ -5476,6 +5476,7 @@ extern tree get_copy_ctor\t\t\t(tree, tsubst_flags_t);\n extern tree get_copy_assign\t\t\t(tree);\n extern tree get_default_ctor\t\t\t(tree);\n extern tree get_dtor\t\t\t\t(tree, tsubst_flags_t);\n+extern tree get_inherited_ctor\t\t\t(tree);\n extern tree locate_ctor\t\t\t\t(tree);\n extern tree implicitly_declare_fn               (special_function_kind, tree,\n \t\t\t\t\t\t bool, tree, tree);"}, {"sha": "d72b564a464010671f9c76a81f7acb095104ee0c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=5af1876c657286423edbf631be14a36ce2dcaeaa", "patch": "@@ -971,6 +971,25 @@ get_copy_assign (tree type)\n   return fn;\n }\n \n+/* Locate the inherited constructor of constructor CTOR.  */\n+\n+tree\n+get_inherited_ctor (tree ctor)\n+{\n+  gcc_assert (DECL_INHERITED_CTOR_BASE (ctor));\n+\n+  push_deferring_access_checks (dk_no_check);\n+  tree fn = locate_fn_flags (DECL_INHERITED_CTOR_BASE (ctor),\n+\t\t\t     complete_ctor_identifier,\n+\t\t\t     FUNCTION_FIRST_USER_PARMTYPE (ctor),\n+\t\t\t     LOOKUP_NORMAL|LOOKUP_SPECULATIVE,\n+\t\t\t     tf_none);\n+  pop_deferring_access_checks ();\n+  if (fn == error_mark_node)\n+    return NULL_TREE;\n+  return fn;\n+}\n+\n /* Subroutine of synthesized_method_walk.  Update SPEC_P, TRIVIAL_P and\n    DELETED_P or give an error message MSG with argument ARG.  */\n "}, {"sha": "1c9e153e3e32b7818fa097fcc054c51b27f24efe", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5af1876c657286423edbf631be14a36ce2dcaeaa", "patch": "@@ -7438,19 +7438,31 @@ retrieve_constexpr_fundef (tree fun)\n static bool\n is_valid_constexpr_fn (tree fun, bool complain)\n {\n-  tree parm = FUNCTION_FIRST_USER_PARM (fun);\n   bool ret = true;\n-  for (; parm != NULL; parm = TREE_CHAIN (parm))\n-    if (!literal_type_p (TREE_TYPE (parm)))\n-      {\n-\tret = false;\n-\tif (complain)\n+\n+  if (DECL_INHERITED_CTOR_BASE (fun)\n+      && TREE_CODE (fun) == TEMPLATE_DECL)\n+    {\n+      ret = false;\n+      if (complain)\n+\terror (\"inherited constructor %qD is not constexpr\",\n+\t       get_inherited_ctor (fun));\n+    }\n+  else\n+    {\n+      for (tree parm = FUNCTION_FIRST_USER_PARM (fun);\n+\t   parm != NULL_TREE; parm = TREE_CHAIN (parm))\n+\tif (!literal_type_p (TREE_TYPE (parm)))\n \t  {\n-\t    error (\"invalid type for parameter %d of constexpr \"\n-\t\t   \"function %q+#D\", DECL_PARM_INDEX (parm), fun);\n-\t    explain_non_literal_class (TREE_TYPE (parm));\n+\t    ret = false;\n+\t    if (complain)\n+\t      {\n+\t\terror (\"invalid type for parameter %d of constexpr \"\n+\t\t       \"function %q+#D\", DECL_PARM_INDEX (parm), fun);\n+\t\texplain_non_literal_class (TREE_TYPE (parm));\n+\t      }\n \t  }\n-      }\n+    }\n \n   if (!DECL_CONSTRUCTOR_P (fun))\n     {"}, {"sha": "a3503424ee53f1af9502818452e712deca2dd646", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5af1876c657286423edbf631be14a36ce2dcaeaa", "patch": "@@ -1,3 +1,8 @@\n+2014-03-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60389\n+\t* g++.dg/cpp0x/inh-ctor19.C: New.\n+\n 2014-03-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60429"}, {"sha": "7a22f8830ecdf46f0b9ba6eaf2ed0a2e83f0b152", "filename": "gcc/testsuite/g++.dg/cpp0x/inh-ctor19.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af1876c657286423edbf631be14a36ce2dcaeaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor19.C?ref=5af1876c657286423edbf631be14a36ce2dcaeaa", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/60389\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  template<typename...T> A(T...) {}\n+};\n+\n+struct B : A\n+{\n+  using A::A;   // { dg-error \"inherited\" }\n+};\n+\n+constexpr B b;  // { dg-error \"literal\" }"}]}