{"sha": "a84454dc451034e76d05f0b23ad2bffceb8cac05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0NDU0ZGM0NTEwMzRlNzZkMDVmMGIyM2FkMmJmZmNlYjhjYWMwNQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-04-26T12:57:50Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-04-26T12:57:50Z"}, "message": "i386: Add a variant peephole for lea rather than ops that clobber CC.\n\n\t* config/i386/i386.md (operation on memory peephole): Duplicate an\n\texisting peephole and adapt it to match lea rather than an operation\n\tthat clobbers CC.\n\nFrom-SVN: r235443", "tree": {"sha": "5d44aa1e17872c627a63a5f97048ef2f74ef4e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d44aa1e17872c627a63a5f97048ef2f74ef4e35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a84454dc451034e76d05f0b23ad2bffceb8cac05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84454dc451034e76d05f0b23ad2bffceb8cac05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84454dc451034e76d05f0b23ad2bffceb8cac05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84454dc451034e76d05f0b23ad2bffceb8cac05/comments", "author": null, "committer": null, "parents": [{"sha": "1d776c5f1b922f1416a87ef9f1210a279e44c3d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d776c5f1b922f1416a87ef9f1210a279e44c3d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d776c5f1b922f1416a87ef9f1210a279e44c3d1"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "5dc4c748b4799fb9fc8b8c5346e952ee1b45bef4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84454dc451034e76d05f0b23ad2bffceb8cac05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84454dc451034e76d05f0b23ad2bffceb8cac05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a84454dc451034e76d05f0b23ad2bffceb8cac05", "patch": "@@ -1,5 +1,9 @@\n 2016-04-26  Bernd Schmidt  <bschmidt@redhat.com>\n \n+\t* config/i386/i386.md (operation on memory peephole): Duplicate an\n+\texisting peephole and adapt it to match lea rather than an operation\n+\tthat clobbers CC.\n+\n \tPR rtl-optimization/57193\n \t* opts.c (default_options_table): Add OPT_frename_registers at -O2\n \tand above."}, {"sha": "30764c9da79eb0e83a0e0426915a5c34c34d38ff", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84454dc451034e76d05f0b23ad2bffceb8cac05/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84454dc451034e76d05f0b23ad2bffceb8cac05/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a84454dc451034e76d05f0b23ad2bffceb8cac05", "patch": "@@ -18018,6 +18018,38 @@\n \t\t\t\t operands[5], const0_rtx);\n })\n \n+;; Likewise for instances where we have a lea pattern.\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(match_operand:SWI 1 \"memory_operand\"))\n+   (set (match_operand:SWI 3 \"register_operand\")\n+\t(plus (match_dup 0)\n+\t      (match_operand:SWI 2 \"<nonmemory_operand>\")))\n+   (set (match_dup 1) (match_dup 3))\n+   (set (reg FLAGS_REG) (compare (match_dup 3) (const_int 0)))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && peep2_reg_dead_p (4, operands[3])\n+   && (rtx_equal_p (operands[0], operands[3])\n+       || peep2_reg_dead_p (2, operands[0]))\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !reg_overlap_mentioned_p (operands[3], operands[1])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && (<MODE>mode != QImode\n+       || immediate_operand (operands[2], QImode)\n+       || any_QIreg_operand (operands[2], QImode))\n+   && ix86_match_ccmode (peep2_next_insn (3), CCGOCmode)\"\n+  [(parallel [(set (match_dup 4) (match_dup 5))\n+\t      (set (match_dup 1) (plus:SWI (match_dup 1)\n+\t\t\t\t\t   (match_dup 2)))])]\n+{\n+  operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n+  operands[5] = gen_rtx_PLUS (<MODE>mode,\n+\t\t\t      copy_rtx (operands[1]),\n+\t\t\t      copy_rtx (operands[2]));\n+  operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t\t\t operands[5], const0_rtx);\n+})\n+\n (define_peephole2\n   [(parallel [(set (match_operand:SWI 0 \"register_operand\")\n \t\t   (match_operator:SWI 2 \"plusminuslogic_operator\""}]}