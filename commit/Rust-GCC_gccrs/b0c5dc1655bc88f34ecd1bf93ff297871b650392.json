{"sha": "b0c5dc1655bc88f34ecd1bf93ff297871b650392", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjNWRjMTY1NWJjODhmMzRlY2QxYmY5M2ZmMjk3ODcxYjY1MDM5Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-24T22:30:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-24T22:30:25Z"}, "message": "runtime: Handle allocating memory in cgo/SWIG function.\n\nA function that returns an interface type and returns a value\nthat requires memory allocation will try to allocate while\nappearing to be in a syscall.  This patch lets that work.\n\nFrom-SVN: r201226", "tree": {"sha": "6c5565907afcb57540cfa85b6b3702a3d51074b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c5565907afcb57540cfa85b6b3702a3d51074b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c5dc1655bc88f34ecd1bf93ff297871b650392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c5dc1655bc88f34ecd1bf93ff297871b650392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c5dc1655bc88f34ecd1bf93ff297871b650392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c5dc1655bc88f34ecd1bf93ff297871b650392/comments", "author": null, "committer": null, "parents": [{"sha": "ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "8ccaa6b888cdd6935102181888cf4763921f5239", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c5dc1655bc88f34ecd1bf93ff297871b650392/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c5dc1655bc88f34ecd1bf93ff297871b650392/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=b0c5dc1655bc88f34ecd1bf93ff297871b650392", "patch": "@@ -41,11 +41,24 @@ runtime_mallocgc(uintptr size, uint32 flag, int32 dogc, int32 zeroed)\n \tuintptr npages;\n \tMSpan *s;\n \tvoid *v;\n+\tbool incallback;\n \n \tm = runtime_m();\n \tg = runtime_g();\n-\tif(g->status == Gsyscall)\n-\t\tdogc = 0;\n+\n+\tincallback = false;\n+\tif(m->mcache == nil && g->ncgo > 0) {\n+\t\t// For gccgo this case can occur when a cgo or SWIG function\n+\t\t// has an interface return type and the function\n+\t\t// returns a non-pointer, so memory allocation occurs\n+\t\t// after syscall.Cgocall but before syscall.CgocallDone.\n+\t\t// We treat it as a callback.\n+\t\truntime_exitsyscall();\n+\t\tm = runtime_m();\n+\t\tincallback = true;\n+\t\tdogc = false;\n+\t}\n+\n \tif(runtime_gcwaiting && g != m->g0 && m->locks == 0 && dogc) {\n \t\truntime_gosched();\n \t\tm = runtime_m();\n@@ -129,6 +142,10 @@ runtime_mallocgc(uintptr size, uint32 flag, int32 dogc, int32 zeroed)\n \t\truntime_racemalloc(v, size, m->racepc);\n \t\tm->racepc = nil;\n \t}\n+\n+\tif(incallback)\n+\t\truntime_entersyscall();\n+\n \treturn v;\n }\n "}]}