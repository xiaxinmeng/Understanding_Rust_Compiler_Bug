{"sha": "acc20d256c51f394904b904e8a8ceea3a44855fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjMjBkMjU2YzUxZjM5NDkwNGI5MDRlOGE4Y2VlYTNhNDQ4NTVmYw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-31T22:59:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-15T08:04:38Z"}, "message": "[Ada] T'Image calls T'Put_Image\n\n2020-06-15  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_put_image.ads, exp_put_image.adb\n\t(Image_Should_Call_Put_Image): New function to determine whether\n\tthe call to Put_Image should be generated.\n\t(Build_Image_Call): New procedure to generate the call to\n\tPut_Image.\n\t* exp_imgv.adb (Expand_Image_Attribute): Use underlying types to\n\tbypass privacy (only in Ada 2020). If\n\tImage_Should_Call_Put_Image is True (which happens only in Ada\n\t2020), then call Build_Image_Call.\n\t* rtsfind.ads, rtsfind.adb: Add the necessary declarations in\n\tAda.Strings.Text_Output.Buffers.\n\t* sem_attr.adb (Check_Image_Type): Enable the Ada 2020 case.\n\t* libgnat/a-stoufo.ads, libgnat/a-stoufo.adb: Use the less\n\trestrictive type that allows newline characters.", "tree": {"sha": "b11a3f53620fa45fafdb068a26d75ac2412a3f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b11a3f53620fa45fafdb068a26d75ac2412a3f66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc20d256c51f394904b904e8a8ceea3a44855fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc20d256c51f394904b904e8a8ceea3a44855fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc20d256c51f394904b904e8a8ceea3a44855fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc20d256c51f394904b904e8a8ceea3a44855fc/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b20de3abdb894c847d2741f35910d584c8f699a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b20de3abdb894c847d2741f35910d584c8f699a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b20de3abdb894c847d2741f35910d584c8f699a"}], "stats": {"total": 179, "additions": 151, "deletions": 28}, "files": [{"sha": "8cad1020a4fe5c6ecea7565718b24404f8e96e2d", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Casing;   use Casing;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n+with Exp_Put_Image;\n with Exp_Util; use Exp_Util;\n with Lib;      use Lib;\n with Namet;    use Namet;\n@@ -477,7 +478,15 @@ package body Exp_Imgv is\n       end if;\n \n       Ptyp := Entity (Pref);\n-      Rtyp := Root_Type (Ptyp);\n+\n+      --  Ada 2020 allows 'Image on private types, so we need to fetch the\n+      --  underlying type.\n+\n+      if Ada_Version >= Ada_2020 then\n+         Rtyp := Underlying_Type (Ptyp);\n+      else\n+         Rtyp := Root_Type (Ptyp);\n+      end if;\n \n       --  Enable speed-optimized expansion of user-defined enumeration types\n       --  if we are compiling with optimizations enabled and enumeration type\n@@ -524,7 +533,15 @@ package body Exp_Imgv is\n \n       Enum_Case := False;\n \n-      if Rtyp = Standard_Boolean then\n+      --  If this is a case where Image should be transformed using Put_Image,\n+      --  then do so. See Exp_Put_Image for details.\n+\n+      if Exp_Put_Image.Image_Should_Call_Put_Image (N) then\n+         Rewrite (N, Exp_Put_Image.Build_Image_Call (N));\n+         Analyze_And_Resolve (N, Standard_String, Suppress => All_Checks);\n+         return;\n+\n+      elsif Rtyp = Standard_Boolean then\n          Imid := RE_Image_Boolean;\n          Tent := Rtyp;\n \n@@ -587,8 +604,10 @@ package body Exp_Imgv is\n       --  Only other possibility is user-defined enumeration type\n \n       else\n+         pragma Assert (Is_Enumeration_Type (Rtyp));\n+\n          if Discard_Names (First_Subtype (Ptyp))\n-           or else No (Lit_Strings (Root_Type (Ptyp)))\n+           or else No (Lit_Strings (Rtyp))\n          then\n             --  When pragma Discard_Names applies to the first subtype, build\n             --  (Pref'Pos (Expr))'Img.\n@@ -634,11 +653,24 @@ package body Exp_Imgv is\n       --  Build first argument for call\n \n       if Enum_Case then\n-         Arg_List := New_List (\n-           Make_Attribute_Reference (Loc,\n-             Attribute_Name => Name_Pos,\n-             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n-             Expressions    => New_List (Expr)));\n+         declare\n+            T : Entity_Id;\n+         begin\n+            --  In Ada 2020 we need the underlying type here, because 'Image is\n+            --  allowed on private types.\n+\n+            if Ada_Version >= Ada_2020 then\n+               T := Rtyp;\n+            else\n+               T := Ptyp;\n+            end if;\n+\n+            Arg_List := New_List (\n+              Make_Attribute_Reference (Loc,\n+                Attribute_Name => Name_Pos,\n+                Prefix         => New_Occurrence_Of (T, Loc),\n+                Expressions    => New_List (Expr)));\n+         end;\n \n       --  AI12-0020: Ada 2020 allows 'Image for all types, including private\n       --  types. If the full type is not a fixed-point type, then it is enough"}, {"sha": "d550a1d2ccedf2bdbfd94df2d04219acfba9c1cb", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -915,6 +915,79 @@ package body Exp_Put_Image is\n       return Make_Defining_Identifier (Loc, Sname);\n    end Make_Put_Image_Name;\n \n+   function Image_Should_Call_Put_Image (N : Node_Id) return Boolean is\n+   begin\n+      if Ada_Version < Ada_2020 then\n+         return False;\n+      end if;\n+\n+      --  In Ada 2020, T'Image calls T'Put_Image if there is an explicit\n+      --  aspect_specification for Put_Image, or if U_Type'Image is illegal\n+      --  in pre-2020 versions of Ada.\n+\n+      declare\n+         U_Type : constant Entity_Id := Underlying_Type (Entity (Prefix (N)));\n+      begin\n+         if Present (TSS (U_Type, TSS_Put_Image)) then\n+            return True;\n+         end if;\n+\n+         return not Is_Scalar_Type (U_Type);\n+      end;\n+   end Image_Should_Call_Put_Image;\n+\n+   function Build_Image_Call (N : Node_Id) return Node_Id is\n+      --  For T'Image (X) Generate an Expression_With_Actions node:\n+      --\n+      --     do\n+      --        S : Buffer := New_Buffer;\n+      --        U_Type'Put_Image (S, X);\n+      --        Result : constant String := Get (S);\n+      --        Destroy (S);\n+      --     in Result end\n+      --\n+      --  where U_Type is the underlying type, as needed to bypass privacy.\n+\n+      Loc : constant Source_Ptr := Sloc (N);\n+      U_Type : constant Entity_Id := Underlying_Type (Entity (Prefix (N)));\n+      Sink_Entity : constant Entity_Id :=\n+        Make_Defining_Identifier (Loc, Chars => New_Internal_Name ('S'));\n+      Sink_Decl : constant Node_Id :=\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Sink_Entity,\n+          Object_Definition =>\n+            New_Occurrence_Of (RTE (RE_Buffer), Loc),\n+          Expression =>\n+            Make_Function_Call (Loc,\n+              Name => New_Occurrence_Of (RTE (RE_New_Buffer), Loc),\n+              Parameter_Associations => Empty_List));\n+      Put_Im : constant Node_Id :=\n+        Make_Attribute_Reference (Loc,\n+          Prefix         => New_Occurrence_Of (U_Type, Loc),\n+          Attribute_Name => Name_Put_Image,\n+          Expressions    => New_List (\n+            New_Occurrence_Of (Sink_Entity, Loc),\n+            New_Copy_Tree (First (Expressions (N)))));\n+      Result_Entity : constant Entity_Id :=\n+        Make_Defining_Identifier (Loc, Chars => New_Internal_Name ('R'));\n+      Result_Decl : constant Node_Id :=\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Result_Entity,\n+          Object_Definition =>\n+            New_Occurrence_Of (Stand.Standard_String, Loc),\n+          Expression =>\n+            Make_Function_Call (Loc,\n+              Name => New_Occurrence_Of (RTE (RE_Get), Loc),\n+              Parameter_Associations => New_List (\n+                New_Occurrence_Of (Sink_Entity, Loc))));\n+      Image : constant Node_Id :=\n+        Make_Expression_With_Actions (Loc,\n+          Actions => New_List (Sink_Decl, Put_Im, Result_Decl),\n+          Expression => New_Occurrence_Of (Result_Entity, Loc));\n+   begin\n+      return Image;\n+   end Build_Image_Call;\n+\n    ------------------\n    -- Preload_Sink --\n    ------------------"}, {"sha": "00b3371474b8ad12e6e93e69df80804a9bfec495", "filename": "gcc/ada/exp_put_image.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fexp_put_image.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fexp_put_image.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.ads?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -85,6 +85,15 @@ package Exp_Put_Image is\n    function Build_Unknown_Put_Image_Call (N : Node_Id) return Node_Id;\n    --  Build a call to Put_Image_Unknown\n \n+   function Image_Should_Call_Put_Image (N : Node_Id) return Boolean;\n+   --  True if T'Image should call T'Put_Image. N is the attribute_reference\n+   --  T'Image.\n+\n+   function Build_Image_Call (N : Node_Id) return Node_Id;\n+   --  N is a call to T'Image, and this translates it into the appropriate code\n+   --  to call T'Put_Image into a buffer and then extract the string from the\n+   --  buffer.\n+\n    procedure Preload_Sink (Compilation_Unit : Node_Id);\n    --  Call RTE (RE_Sink) if necessary, to load the packages involved in\n    --  Put_Image. We need to do this explicitly, fairly early during"}, {"sha": "3b99cf7d03bead5f860d614751f84edaab874956", "filename": "gcc/ada/libgnat/a-stoufo.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -38,7 +38,7 @@ package body Ada.Strings.Text_Output.Formatting is\n \n    procedure Put\n      (S : in out Sink'Class; T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\")\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\")\n    is\n       J : Positive := T'First;\n       Used : array (1 .. 6) of Boolean := (others => False);\n@@ -62,22 +62,22 @@ package body Ada.Strings.Text_Output.Formatting is\n \n                when '1' =>\n                   Used (1) := True;\n-                  Put_UTF_8 (S, X1);\n+                  Put_UTF_8_Lines (S, X1);\n                when '2' =>\n                   Used (2) := True;\n-                  Put_UTF_8 (S, X2);\n+                  Put_UTF_8_Lines (S, X2);\n                when '3' =>\n                   Used (3) := True;\n-                  Put_UTF_8 (S, X3);\n+                  Put_UTF_8_Lines (S, X3);\n                when '4' =>\n                   Used (4) := True;\n-                  Put_UTF_8 (S, X4);\n+                  Put_UTF_8_Lines (S, X4);\n                when '5' =>\n                   Used (5) := True;\n-                  Put_UTF_8 (S, X5);\n+                  Put_UTF_8_Lines (S, X5);\n                when '6' =>\n                   Used (6) := True;\n-                  Put_UTF_8 (S, X6);\n+                  Put_UTF_8_Lines (S, X6);\n \n                when others =>\n                   raise Program_Error;\n@@ -113,21 +113,21 @@ package body Ada.Strings.Text_Output.Formatting is\n \n    procedure Put\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\") is\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\") is\n    begin\n       Put (Files.Standard_Output.all, T, X1, X2, X3, X4, X5, X6);\n    end Put;\n \n    procedure Err\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\") is\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\") is\n    begin\n       Put (Files.Standard_Error.all, T, X1, X2, X3, X4, X5, X6);\n    end Err;\n \n    function Format\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\")\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\")\n      return UTF_8_Lines\n    is\n       Buf : Buffer := New_Buffer;"}, {"sha": "dd80dff316065c0b813f6087b2abc8f7b9d5b3c3", "filename": "gcc/ada/libgnat/a-stoufo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -43,31 +43,31 @@ package Ada.Strings.Text_Output.Formatting is\n    type Template is new UTF_8;\n    procedure Put\n      (S : in out Sink'Class; T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\");\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\");\n    --  Prints the template as is, except for the following escape sequences:\n    --    \"\\n\" is end of line.\n    --    \"\\i\" indents by the default amount, and \"\\o\" outdents.\n    --    \"\\I\" indents by one space, and \"\\O\" outdents.\n    --    \"\\1\" is replaced with X1, and similarly for 2, 3, ....\n    --    \"\\\\\" is \"\\\".\n \n-   --  Note that the template is not type UTF_8, to avoid this sort of thing:\n+   --  Note that the template is not type String, to avoid this sort of thing:\n    --\n    --      https://xkcd.com/327/\n \n    procedure Put\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\");\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\");\n    --  Sends to standard output\n \n    procedure Err\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\");\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\");\n    --  Sends to standard error\n \n    function Format\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8 := \"\")\n+      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\")\n      return UTF_8_Lines;\n    --  Returns a UTF-8-encoded String\n "}, {"sha": "7e617b6a705240f36369190e1133551feb4bc775", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -570,10 +570,10 @@ package body Rtsfind is\n      range Ada_Streams_Stream_IO .. Ada_Streams_Stream_IO;\n \n    subtype Ada_Strings_Descendant is Ada_Descendant\n-     range Ada_Strings_Superbounded .. Ada_Strings_Text_Output_Utils;\n+     range Ada_Strings_Superbounded .. Ada_Strings_Text_Output_Buffers;\n \n    subtype Ada_Strings_Text_Output_Descendant is Ada_Strings_Descendant\n-     range Ada_Strings_Text_Output_Utils .. Ada_Strings_Text_Output_Utils;\n+     range Ada_Strings_Text_Output_Utils .. Ada_Strings_Text_Output_Buffers;\n \n    subtype Ada_Text_IO_Descendant is Ada_Descendant\n      range Ada_Text_IO_Decimal_IO .. Ada_Text_IO_Modular_IO;"}, {"sha": "f440147f66922f284bffc217676e11e7658de81e", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -130,6 +130,7 @@ package Rtsfind is\n       --  Children of Ada.Strings.Text_Output\n \n       Ada_Strings_Text_Output_Utils,\n+      Ada_Strings_Text_Output_Buffers,\n \n       --  Children of Ada.Text_IO (for Check_Text_IO_Special_Unit)\n \n@@ -492,6 +493,11 @@ package Rtsfind is\n      RE_Put_UTF_8,                       -- Ada.Strings.Text_Output.Utils\n      RE_Put_Wide_Wide_String,            -- Ada.Strings.Text_Output.Utils\n \n+     RE_Buffer,                          -- Ada.Strings.Text_Output.Buffers\n+     RE_New_Buffer,                      -- Ada.Strings.Text_Output.Buffers\n+     RE_Destroy,                         -- Ada.Strings.Text_Output.Buffers\n+     RE_Get,                             -- Ada.Strings.Text_Output.Buffers\n+\n      RE_Wait_For_Release,                -- Ada.Synchronous_Barriers\n \n      RE_Suspend_Until_True,              -- Ada.Synchronous_Task_Control\n@@ -1771,6 +1777,11 @@ package Rtsfind is\n      RE_Put_UTF_8                        => Ada_Strings_Text_Output_Utils,\n      RE_Put_Wide_Wide_String             => Ada_Strings_Text_Output_Utils,\n \n+     RE_Buffer                           => Ada_Strings_Text_Output_Buffers,\n+     RE_New_Buffer                       => Ada_Strings_Text_Output_Buffers,\n+     RE_Destroy                          => Ada_Strings_Text_Output_Buffers,\n+     RE_Get                              => Ada_Strings_Text_Output_Buffers,\n+\n      RE_Wait_For_Release                 => Ada_Synchronous_Barriers,\n \n      RE_Suspend_Until_True               => Ada_Synchronous_Task_Control,"}, {"sha": "a7d078414589f5d84093696f334901697e62c8e4", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc20d256c51f394904b904e8a8ceea3a44855fc/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=acc20d256c51f394904b904e8a8ceea3a44855fc", "patch": "@@ -1429,9 +1429,7 @@ package body Sem_Attr is\n \n          procedure Check_Image_Type (Image_Type : Entity_Id) is\n          begin\n-            if False -- ???Disable 2020 feature until expander work is done\n-              and then Ada_Version >= Ada_2020\n-            then\n+            if Ada_Version >= Ada_2020 then\n                null; -- all types are OK\n             elsif not Is_Scalar_Type (Image_Type) then\n                if Ada_Version >= Ada_2012 then"}]}