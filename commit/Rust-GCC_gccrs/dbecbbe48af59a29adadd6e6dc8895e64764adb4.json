{"sha": "dbecbbe48af59a29adadd6e6dc8895e64764adb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlY2JiZTQ4YWY1OWEyOWFkYWRkNmU2ZGM4ODk1ZTY0NzY0YWRiNA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-06-17T11:44:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-17T11:44:02Z"}, "message": "expr.c (check_max_integer_computation_mode): New function.\n\n        * expr.c (check_max_integer_computation_mode): New function.\n        (expand_expr): Avoid integer computations in modes wider than\n        MAX_INTEGER_COMPUTATION_MODE.\n        * fold-const.c (fold): Likewise.\n        * tree.h (check_max_integer_computation_mode): Declare.\n        * tm.texi (MAX_INTEGER_COMPUTATION_MODE): Document it.\n\nFrom-SVN: r20538", "tree": {"sha": "5f8204f11538f0d3f56395877d68c0bbfd75f9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8204f11538f0d3f56395877d68c0bbfd75f9b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbecbbe48af59a29adadd6e6dc8895e64764adb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbecbbe48af59a29adadd6e6dc8895e64764adb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbecbbe48af59a29adadd6e6dc8895e64764adb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbecbbe48af59a29adadd6e6dc8895e64764adb4/comments", "author": null, "committer": null, "parents": [{"sha": "a5b8127eb13cce7fa4ddf8e4337f6e9fe67d1dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b8127eb13cce7fa4ddf8e4337f6e9fe67d1dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b8127eb13cce7fa4ddf8e4337f6e9fe67d1dc4"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "aa8d4dda5911b64efa92ffb6f73ca64940314e77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbecbbe48af59a29adadd6e6dc8895e64764adb4", "patch": "@@ -6,6 +6,13 @@\n \n Wed Jun 17 08:38:13 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* expr.c (check_max_integer_computation_mode): New function.\n+\t(expand_expr): Avoid integer computations in modes wider than\n+\tMAX_INTEGER_COMPUTATION_MODE.\n+\t* fold-const.c (fold): Likewise.\n+\t* tree.h (check_max_integer_computation_mode): Declare.\n+\t* tm.texi (MAX_INTEGER_COMPUTATION_MODE): Document it.\n+\n \t* configure.in (nm): Make a link to \"nm\" in the build tree too.\n \n \t* mn10300.md (andsi3): Fix typo."}, {"sha": "aad427d1fa14a956462c871ec55617345bf934ec", "filename": "gcc/expr.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=dbecbbe48af59a29adadd6e6dc8895e64764adb4", "patch": "@@ -4919,6 +4919,52 @@ var_rtx (exp)\n       return 0;\n     }\n }\n+\n+#ifdef MAX_INTEGER_COMPUTATION_MODE\n+void\n+check_max_integer_computation_mode (exp)\n+    tree exp;\n+{\n+  enum tree_code code = TREE_CODE (exp);\n+  enum machine_mode mode;\n+\n+  /* First check the type of the overall operation.   We need only look at\n+     unary, binary and relational operations.  */\n+  if (TREE_CODE_CLASS (code) == '1'\n+      || TREE_CODE_CLASS (code) == '2'\n+      || TREE_CODE_CLASS (code) == '<')\n+    {\n+      mode = TYPE_MODE (TREE_TYPE (exp));\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n+\tfatal (\"unsupported wide integer operation\");\n+    }\n+\n+  /* Check operand of a unary op.  */\n+  if (TREE_CODE_CLASS (code) == '1')\n+    {\n+      mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n+\tfatal (\"unsupported wide integer operation\");\n+    }\n+\t\n+  /* Check operands of a binary/comparison op.  */\n+  if (TREE_CODE_CLASS (code) == '2' || TREE_CODE_CLASS (code) == '<')\n+    {\n+      mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n+\tfatal (\"unsupported wide integer operation\");\n+\n+      mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 1)));\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n+\tfatal (\"unsupported wide integer operation\");\n+    }\n+}\n+#endif\n+\n \f\n /* expand_expr: generate code for computing expression EXP.\n    An rtx for the computed value is returned.  The value is never null.\n@@ -5041,6 +5087,23 @@ expand_expr (exp, target, tmode, modifier)\n       target = 0;\n     }\n \n+#ifdef MAX_INTEGER_COMPUTATION_MODE\n+  if (target)\n+    {\n+      enum machine_mode mode = GET_MODE (target);\n+\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n+\tfatal (\"unsupported wide integer operation\");\n+    }\n+\n+  if (GET_MODE_CLASS (tmode) == MODE_INT\n+      && tmode > MAX_INTEGER_COMPUTATION_MODE)\n+    fatal (\"unsupported wide integer operation\");\n+\n+  check_max_integer_computation_mode (exp);\n+#endif\n+\n   /* If will do cse, generate all results into pseudo registers\n      since 1) that allows cse to find more things\n      and 2) otherwise cse could produce an insn the machine\n@@ -9816,6 +9879,10 @@ do_jump (exp, if_false_label, if_true_label)\n   tree type;\n   enum machine_mode mode;\n \n+#ifdef MAX_INTEGER_COMPUTATION_MODE\n+  check_max_integer_computation_mode (exp);\n+#endif\n+\n   emit_queue ();\n \n   switch (code)"}, {"sha": "b75da2e77fd10e6d4f78e9d4c5db40e9b02e0def", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dbecbbe48af59a29adadd6e6dc8895e64764adb4", "patch": "@@ -3797,6 +3797,10 @@ fold (expr)\n       return t;\n     }\n   \n+#ifdef MAX_INTEGER_COMPUTATION_MODE\n+  check_max_integer_computation_mode (expr);\n+#endif\n+\n   kind = TREE_CODE_CLASS (code);\n   if (code == NOP_EXPR || code == FLOAT_EXPR || code == CONVERT_EXPR)\n     {"}, {"sha": "a4fb481e8fc3217255cd9f33bf29b7a312096f0b", "filename": "gcc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=dbecbbe48af59a29adadd6e6dc8895e64764adb4", "patch": "@@ -7417,4 +7417,12 @@ A C expression that returns how many instructions can be issued at the\n same time if the machine is a superscalar machine.  This is only used by\n the @samp{Haifa} scheduler, and not the traditional scheduler.\n \n+@findex MAX_INTEGER_COMPUTATION_MODE\n+@item MAX_INTEGER_COMPUTATION_MODE\n+Define this to the largest integer machine mode which can be used for\n+operations other than load, store and copy operations.\n+\n+You need only define this macro if the target holds values larger than\n+@code{word_mode} in general purpose registers.  Most targets should not define\n+this macro.\n @end table"}, {"sha": "0407db28bcb11e1e52fb8bbb3f1053b8e0bdc3c5", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbecbbe48af59a29adadd6e6dc8895e64764adb4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dbecbbe48af59a29adadd6e6dc8895e64764adb4", "patch": "@@ -2123,6 +2123,7 @@ extern void do_pending_stack_adjust\t\tPROTO ((void));\n extern struct rtx_def *expand_assignment\tPROTO ((tree, tree, int, int));\n extern struct rtx_def *store_expr\t\tPROTO ((tree, struct rtx_def *,\n \t\t\t\t\t\t\tint));\n+extern void check_max_integer_computation_mode\tPROTO ((tree));\n \n /* In emit-rtl.c */\n extern void start_sequence_for_rtl_expr\t\tPROTO ((tree));"}]}