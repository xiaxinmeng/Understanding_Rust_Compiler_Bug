{"sha": "25081892c432b0234fd29bdbf970c89f2083eed5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUwODE4OTJjNDMyYjAyMzRmZDI5YmRiZjk3MGM4OWYyMDgzZWVkNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:24:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:24:17Z"}, "message": "[multiple changes]\n\n2012-01-30  Robert Dewar  <dewar@adacore.com>\n\n\t* a-cdlili.adb, a-cidlli.adb, a-cbdlli.adb: Minor reformatting.\n\n2012-01-30  Olivier Hainque  <hainque@adacore.com>\n\n\t* sigtramp-ppcvxw.c (CFI_COMMON_REGS): Add rule for r1 back +\n\tcomments.\n\n2012-01-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat_rm.texi, sem_dist.adb, sem_dist.ads, einfo.ads, sem_prag.adb,\n\tsem_ch12.adb, sem_attr.adb, aspects.adb, aspects.ads, par-prag.adb,\n\tsem_cat.adb, snames.ads-tmpl (Sem_Dist.Is_Valid_Remote_Object_Type):\n\tNew subprogram (extracted from\n\tSem_Cat.Validate_Remote_Access_Object_Type_Declaration).\n\t(Einfo.Is_Remote_Types): Now applies to generic types. Update\n\tdocumentation accordingly.\n\t(Sem_Ch12.Analyze_Associations): A RACW type is acceptable as\n\tactual for a formal type to which a pragma Remote_Access_Type\n\tapplies.\n\t(Aspects, Par.Prag, Sem_Prag): Support for new pramga/aspect\n\tRemote_Access_Type.\n\t(Sem_Attr.Analyze_Attribute, case Stub_Type): Attribute can\n\tbe applied to a generic type if pragma Remote_Access_Type\n\tapplies, in which case the type of the attribute is\n\tSystem.Partition_Interface.RACW_Stub_Type.\n\nFrom-SVN: r183698", "tree": {"sha": "9d6cf6a29c0a1bdac65791a5798295c1f978b73b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d6cf6a29c0a1bdac65791a5798295c1f978b73b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25081892c432b0234fd29bdbf970c89f2083eed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25081892c432b0234fd29bdbf970c89f2083eed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25081892c432b0234fd29bdbf970c89f2083eed5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25081892c432b0234fd29bdbf970c89f2083eed5/comments", "author": null, "committer": null, "parents": [{"sha": "4f0534570bc8bb662747136a348991a964cb022b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0534570bc8bb662747136a348991a964cb022b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0534570bc8bb662747136a348991a964cb022b"}], "stats": {"total": 371, "additions": 258, "deletions": 113}, "files": [{"sha": "f0b84caabc99ba9f2d42893ab90e56a84920c9b4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -1,3 +1,31 @@\n+2012-01-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-cdlili.adb, a-cidlli.adb, a-cbdlli.adb: Minor reformatting.\n+\n+2012-01-30  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* sigtramp-ppcvxw.c (CFI_COMMON_REGS): Add rule for r1 back +\n+\tcomments.\n+\n+2012-01-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat_rm.texi, sem_dist.adb, sem_dist.ads, einfo.ads, sem_prag.adb,\n+\tsem_ch12.adb, sem_attr.adb, aspects.adb, aspects.ads, par-prag.adb,\n+\tsem_cat.adb, snames.ads-tmpl (Sem_Dist.Is_Valid_Remote_Object_Type):\n+\tNew subprogram (extracted from\n+\tSem_Cat.Validate_Remote_Access_Object_Type_Declaration).\n+\t(Einfo.Is_Remote_Types): Now applies to generic types. Update\n+\tdocumentation accordingly.\n+\t(Sem_Ch12.Analyze_Associations): A RACW type is acceptable as\n+\tactual for a formal type to which a pragma Remote_Access_Type\n+\tapplies.\n+\t(Aspects, Par.Prag, Sem_Prag): Support for new pramga/aspect\n+\tRemote_Access_Type.\n+\t(Sem_Attr.Analyze_Attribute, case Stub_Type): Attribute can\n+\tbe applied to a generic type if pragma Remote_Access_Type\n+\tapplies, in which case the type of the attribute is\n+\tSystem.Partition_Interface.RACW_Stub_Type.\n+\n 2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Procedure>: Do not set"}, {"sha": "df9bf2242fb282cc8b10909676b5f569fc72b5d5", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -2275,13 +2275,17 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n             return False;\n          end if;\n \n-         if Position.Node = L.First then  -- eliminates earlier disjunct\n+         --  Eliminate earlier possibility\n+\n+         if Position.Node = L.First then\n             return True;\n          end if;\n \n          pragma Assert (N (Position.Node).Prev /= 0);\n \n-         if Position.Node = L.Last then  -- eliminates earlier disjunct\n+         --  ELiminate another possibility\n+\n+         if Position.Node = L.Last then\n             return True;\n          end if;\n "}, {"sha": "cfbcc36bc798a33a75968c2e720b7456af5ab16a", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -2009,6 +2009,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n \n       declare\n          L : List renames Position.Container.all;\n+\n       begin\n          if L.Length = 0 then\n             return False;\n@@ -2030,23 +2031,21 @@ package body Ada.Containers.Doubly_Linked_Lists is\n             return False;\n          end if;\n \n-         if Position.Node.Prev = null\n-           and then Position.Node /= L.First\n-         then\n+         if Position.Node.Prev = null and then Position.Node /= L.First then\n             return False;\n          end if;\n \n-         pragma Assert (Position.Node.Prev /= null\n-                          or else Position.Node = L.First);\n+         pragma Assert\n+           (Position.Node.Prev /= null\n+             or else Position.Node = L.First);\n \n-         if Position.Node.Next = null\n-           and then Position.Node /= L.Last\n-         then\n+         if Position.Node.Next = null and then Position.Node /= L.Last then\n             return False;\n          end if;\n \n-         pragma Assert (Position.Node.Next /= null\n-                          or else Position.Node = L.Last);\n+         pragma Assert\n+           (Position.Node.Next /= null\n+             or else Position.Node = L.Last);\n \n          if L.Length = 1 then\n             return L.First = L.Last;\n@@ -2075,13 +2074,11 @@ package body Ada.Containers.Doubly_Linked_Lists is\n          if L.Length = 2 then\n             if L.First.Next /= L.Last then\n                return False;\n-            end if;\n-\n-            if L.Last.Prev /= L.First then\n+            elsif L.Last.Prev /= L.First then\n                return False;\n+            else\n+               return True;\n             end if;\n-\n-            return True;\n          end if;\n \n          if L.First.Next = L.Last then\n@@ -2092,13 +2089,17 @@ package body Ada.Containers.Doubly_Linked_Lists is\n             return False;\n          end if;\n \n-         if Position.Node = L.First then  -- eliminates earlier disjunct\n+         --  Eliminate earlier possibility\n+\n+         if Position.Node = L.First then\n             return True;\n          end if;\n \n          pragma Assert (Position.Node.Prev /= null);\n \n-         if Position.Node = L.Last then  -- eliminates earlier disjunct\n+         --  Eliminate earlier possibility\n+\n+         if Position.Node = L.Last then\n             return True;\n          end if;\n \n@@ -2115,9 +2116,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n          if L.Length = 3 then\n             if L.First.Next /= Position.Node then\n                return False;\n-            end if;\n-\n-            if L.Last.Prev /= Position.Node then\n+            elsif L.Last.Prev /= Position.Node then\n                return False;\n             end if;\n          end if;\n@@ -2134,11 +2133,12 @@ package body Ada.Containers.Doubly_Linked_Lists is\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : List)\n    is\n-      Node : Node_Access := Item.First;\n+      Node : Node_Access;\n \n    begin\n       Count_Type'Base'Write (Stream, Item.Length);\n \n+      Node := Item.First;\n       while Node /= null loop\n          Element_Type'Write (Stream, Node.Element);\n          Node := Node.Next;"}, {"sha": "cac6e9cafa6dd00bff159951c36568fae1ac8ba9", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -2098,6 +2098,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n       declare\n          L : List renames Position.Container.all;\n+\n       begin\n          if L.Length = 0 then\n             return False;\n@@ -2119,15 +2120,11 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n             return False;\n          end if;\n \n-         if Position.Node.Prev = null\n-           and then Position.Node /= L.First\n-         then\n+         if Position.Node.Prev = null and then Position.Node /= L.First then\n             return False;\n          end if;\n \n-         if Position.Node.Next = null\n-           and then Position.Node /= L.Last\n-         then\n+         if Position.Node.Next = null and then Position.Node /= L.Last then\n             return False;\n          end if;\n "}, {"sha": "a0105d9433b92eded9d87a503687fb67b3b43da6", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -295,6 +295,7 @@ package body Aspects is\n     Aspect_Preelaborable_Initialization => Aspect_Preelaborable_Initialization,\n     Aspect_Priority                     => Aspect_Priority,\n     Aspect_Pure_Function                => Aspect_Pure_Function,\n+    Aspect_Remote_Access_Type           => Aspect_Remote_Access_Type,\n     Aspect_Read                         => Aspect_Read,\n     Aspect_Shared                       => Aspect_Atomic,\n     Aspect_Size                         => Aspect_Size,"}, {"sha": "74eee35df7e521817d82290d9ccc10b44a0b7fb8", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---         Copyright (C) 2010-2012, Free Software Foundation, Inc.          --\n+--          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -129,6 +129,7 @@ package Aspects is\n       Aspect_Persistent_BSS,                -- GNAT\n       Aspect_Preelaborable_Initialization,\n       Aspect_Pure_Function,                 -- GNAT\n+      Aspect_Remote_Access_Type,            -- GNAT\n       Aspect_Shared,                        -- GNAT (equivalent to Atomic)\n       Aspect_Suppress_Debug_Info,           -- GNAT\n       Aspect_Unchecked_Union,\n@@ -183,6 +184,7 @@ package Aspects is\n                              Aspect_Pure_05              => True,\n                              Aspect_Pure_12              => True,\n                              Aspect_Pure_Function        => True,\n+                             Aspect_Remote_Access_Type   => True,\n                              Aspect_Shared               => True,\n                              Aspect_Suppress_Debug_Info  => True,\n                              Aspect_Test_Case            => True,\n@@ -299,6 +301,7 @@ package Aspects is\n    -----------------------------------------\n \n    --  Table linking aspect names and id's\n+   --  Shouldn't this be automatically generated in Snames???\n \n    Aspect_Names : constant array (Aspect_Id) of Name_Id := (\n      No_Aspect                           => No_Name,\n@@ -357,6 +360,7 @@ package Aspects is\n      Aspect_Pure_12                      => Name_Pure_12,\n      Aspect_Pure_Function                => Name_Pure_Function,\n      Aspect_Read                         => Name_Read,\n+     Aspect_Remote_Access_Type           => Name_Remote_Access_Type,\n      Aspect_Remote_Call_Interface        => Name_Remote_Call_Interface,\n      Aspect_Remote_Types                 => Name_Remote_Types,\n      Aspect_Shared                       => Name_Shared,"}, {"sha": "6151fc0c9b8f9a9b582816b93ec8f158da38b7b9", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2721,6 +2721,8 @@ package Einfo is\n --       Present in all entities. Set in E_Package and E_Generic_Package\n --       entities to which a pragma Remote_Types is applied, and also on\n --       entities declared in the visible part of the spec of such a package.\n+--       Also set for generic formal types to which pragma Remote_Access_Type\n+--       applies.\n \n --    Is_Renaming_Of_Object (Flag112)\n --       Present in all entities, set only for a variable or constant for"}, {"sha": "72feb258c0883b800cbce46719c94a24e56b9f80", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -186,6 +186,7 @@ Implementation Defined Pragmas\n * Pragma Profile (Restricted)::\n * Pragma Psect_Object::\n * Pragma Pure_Function::\n+* Pragma Remote_Access_Type::\n * Pragma Restriction_Warnings::\n * Pragma Shared::\n * Pragma Short_Circuit_And_Or::\n@@ -824,6 +825,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Profile (Restricted)::\n * Pragma Psect_Object::\n * Pragma Pure_Function::\n+* Pragma Remote_Access_Type::\n * Pragma Restriction_Warnings::\n * Pragma Shared::\n * Pragma Short_Circuit_And_Or::\n@@ -4479,6 +4481,32 @@ function is also considered pure from an optimization point of view, but the\n unit is not a Pure unit in the categorization sense. So for example, a function\n thus marked is free to @code{with} non-pure units.\n \n+@node Pragma Remote_Access_Type\n+@unnumberedsec Pragma Remote_Access_Type\n+@findex Remote_Access_Type\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Remote_Access_Type ([Entity =>] formal_access_type_LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma appears in the formal part of a generic declaration.\n+It specifies an exception to the RM rule from E.2.2(17/2), which forbids\n+the use of a remote access to class-wide type as actual for a formal\n+access type.\n+\n+When this pragma applies to a formal access type @code{Entity}, that\n+type is treated as a remote access to class-wide type in the generic.\n+It must be a formal general access type, and its designated type must\n+be the class-wide type of a formal tagged limited private type from the\n+same generic declaration.\n+\n+In the generic unit, the formal type is subject to all restrictions\n+pertaining to remote access to class-wide types. At instantiation, the\n+actual type must be a remote access to class-wide type.\n+\n @node Pragma Restriction_Warnings\n @unnumberedsec Pragma Restriction_Warnings\n @findex Restriction_Warnings\n@@ -16803,6 +16831,7 @@ A complete description of the AIs may be found in\n @item @code{Predicate} @tab\n @item @code{Preelaborable_Initialization} @tab\n @item @code{Pure_Function} @tab                 -- GNAT\n+@item @code{Remote_Access_Type} @tab            -- GNAT\n @item @code{Shared} @tab                        -- GNAT\n @item @code{Size} @tab\n @item @code{Storage_Pool} @tab"}, {"sha": "328ddb63f16c72d73ffe492dcb3001beefabfcc0", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1219,6 +1219,7 @@ begin\n            Pragma_Pure_Function                  |\n            Pragma_Queuing_Policy                 |\n            Pragma_Relative_Deadline              |\n+           Pragma_Remote_Access_Type             |\n            Pragma_Remote_Call_Interface          |\n            Pragma_Remote_Types                   |\n            Pragma_Restricted_Run_Time            |"}, {"sha": "d40f133f051b7e095e6d1d4bdcbff0176b815254", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4636,9 +4636,29 @@ package body Sem_Attr is\n          Check_Type;\n          Check_E0;\n \n-         if Is_Remote_Access_To_Class_Wide_Type (P_Type) then\n-            Rewrite (N,\n-              New_Occurrence_Of (Corresponding_Stub_Type (P_Type), Loc));\n+         if Is_Remote_Access_To_Class_Wide_Type (Base_Type (P_Type)) then\n+\n+            if not Is_Generic_Type (P_Type) then\n+               --  For a real RACW [sub]type, use corresponding stub type\n+\n+               Rewrite (N,\n+                 New_Occurrence_Of\n+                   (Corresponding_Stub_Type (Base_Type (P_Type)), Loc));\n+\n+            else\n+               --  For a generic type (that has been marked as an RACW using\n+               --  the Remote_Access_Type aspect or pragma), use a generic RACW\n+               --  stub type. Note that if the actual is not a remote access\n+               --  type, the instantiation will fail.\n+\n+               --  Note: we go to the underlying type here because the view\n+               --  returned by RTE (RE_RACW_Stub_Type) might be incomplete.\n+\n+               Rewrite (N,\n+                 New_Occurrence_Of\n+                   (Underlying_Type (RTE (RE_RACW_Stub_Type)), Loc));\n+            end if;\n+\n          else\n             Error_Attr_P\n               (\"prefix of% attribute must be remote access to classwide\");"}, {"sha": "d73314df2af1030dca733b32fdd5ffd14d53fa26", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 5, "deletions": 68, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,7 @@ with Opt;      use Opt;\n with Sem;      use Sem;\n with Sem_Attr; use Sem_Attr;\n with Sem_Aux;  use Sem_Aux;\n+with Sem_Dist; use Sem_Dist;\n with Sem_Eval; use Sem_Eval;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n@@ -1661,63 +1662,9 @@ package body Sem_Cat is\n    ----------------------------------------------------\n \n    procedure Validate_Remote_Access_Object_Type_Declaration (T : Entity_Id) is\n-\n-      function Is_Valid_Remote_Object_Type (E : Entity_Id) return Boolean;\n-      --  True if tagged type E is a valid candidate as the root type of the\n-      --  designated type for a RACW, i.e. a tagged limited private type, or a\n-      --  limited interface type, or a private extension of such a type.\n-\n-      ---------------------------------\n-      -- Is_Valid_Remote_Object_Type --\n-      ---------------------------------\n-\n-      function Is_Valid_Remote_Object_Type (E : Entity_Id) return Boolean is\n-         P : constant Node_Id := Parent (E);\n-\n-      begin\n-         pragma Assert (Is_Tagged_Type (E));\n-\n-         --  Simple case: a limited private type\n-\n-         if Nkind (P) = N_Private_Type_Declaration\n-           and then Is_Limited_Record (E)\n-         then\n-            return True;\n-\n-         --  AI05-0060 (Binding Interpretation): A limited interface is a legal\n-         --  ancestor for the designated type of an RACW type.\n-\n-         elsif Is_Limited_Record (E) and then Is_Limited_Interface (E) then\n-            return True;\n-\n-         --  A generic tagged limited type is a valid candidate. Limitedness\n-         --  will be checked again on the actual at instantiation point.\n-\n-         elsif Nkind (P) = N_Formal_Type_Declaration\n-           and then Ekind (E) = E_Record_Type_With_Private\n-           and then Is_Generic_Type (E)\n-           and then Is_Limited_Record (E)\n-         then\n-            return True;\n-\n-         --  A private extension declaration is a valid candidate if its parent\n-         --  type is.\n-\n-         elsif Nkind (P) = N_Private_Extension_Declaration then\n-            return Is_Valid_Remote_Object_Type (Etype (E));\n-\n-         else\n-            return False;\n-         end if;\n-      end Is_Valid_Remote_Object_Type;\n-\n-      --  Local variables\n-\n       Direct_Designated_Type : Entity_Id;\n       Desig_Type             : Entity_Id;\n \n-   --  Start of processing for Validate_Remote_Access_Object_Type_Declaration\n-\n    begin\n       --  We are called from Analyze_Full_Type_Declaration, and the Nkind of\n       --  the given node is N_Access_To_Object_Definition.\n@@ -1793,18 +1740,16 @@ package body Sem_Cat is\n       --    The actual parameter of generic instantiation must not be such a\n       --    type if the formal parameter is of an access type.\n \n-      --  On entry, there are five cases\n+      --  On entry, there are several cases:\n \n       --    1. called from sem_attr Analyze_Attribute where attribute name is\n       --       either Storage_Pool or Storage_Size.\n \n       --    2. called from exp_ch4 Expand_N_Allocator\n \n-      --    3. called from sem_ch12 Analyze_Associations\n+      --    3. called from sem_ch4 Analyze_Explicit_Dereference\n \n-      --    4. called from sem_ch4 Analyze_Explicit_Dereference\n-\n-      --    5. called from sem_res Resolve_Actuals\n+      --    4. called from sem_res Resolve_Actuals\n \n       if K = N_Attribute_Reference then\n          E := Etype (Prefix (N));\n@@ -1822,14 +1767,6 @@ package body Sem_Cat is\n             return;\n          end if;\n \n-      elsif K in N_Has_Entity then\n-         E := Entity (N);\n-\n-         if Is_Remote_Access_To_Class_Wide_Type (E) then\n-            Error_Msg_N (\"incorrect remote type generic actual\", N);\n-            return;\n-         end if;\n-\n       --  This subprogram also enforces the checks in E.2.2(13). A value of\n       --  such type must not be dereferenced unless as controlling operand of\n       --  a dispatching call. Explicit dereferences not coming from source are"}, {"sha": "ed7357ab0869992aa650c4e000af65688ca86730", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -1442,14 +1442,43 @@ package body Sem_Ch12 is\n                   end if;\n \n                   --  A remote access-to-class-wide type is not a legal actual\n-                  --  for a generic formal of an access type (E.2.2(17)).\n+                  --  for a generic formal of an access type (E.2.2(17/2)).\n+                  --  In GNAT an exception to this rule is introduced when\n+                  --  the formal is marked as remote using implementation\n+                  --  defined aspect/pragma Remote_Access_Type. In that case\n+                  --  the actual must be remote as well.\n \n                   if Nkind (Analyzed_Formal) = N_Formal_Type_Declaration\n                     and then\n                       Nkind (Formal_Type_Definition (Analyzed_Formal)) =\n                                             N_Access_To_Object_Definition\n                   then\n-                     Validate_Remote_Access_To_Class_Wide_Type (Match);\n+                     declare\n+                        Formal_Ent : constant Entity_Id :=\n+                                        Defining_Identifier (Analyzed_Formal);\n+                     begin\n+                        if Is_Remote_Access_To_Class_Wide_Type (Entity (Match))\n+                             = Is_Remote_Types (Formal_Ent)\n+                        then\n+                           --  Remoteness of formal and actual match\n+\n+                           null;\n+\n+                        elsif Is_Remote_Types (Formal_Ent) then\n+\n+                           --  Remote formal, non-remote actual\n+\n+                           Error_Msg_NE\n+                             (\"actual for& must be remote\", Match, Formal_Ent);\n+\n+                        else\n+                           --  Non-remote formal, remote actual\n+\n+                           Error_Msg_NE\n+                             (\"actual for& may not be remote\",\n+                              Match, Formal_Ent);\n+                        end if;\n+                     end;\n                   end if;\n \n                when N_Formal_Subprogram_Declaration =>"}, {"sha": "072efa28ace97a25d6a4a71a156a31229aa349b1", "filename": "gcc/ada/sem_dist.adb", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -287,6 +287,50 @@ package body Sem_Dist is\n       end case;\n    end Is_RACW_Stub_Type_Operation;\n \n+   ---------------------------------\n+   -- Is_Valid_Remote_Object_Type --\n+   ---------------------------------\n+\n+   function Is_Valid_Remote_Object_Type (E : Entity_Id) return Boolean is\n+      P : constant Node_Id := Parent (E);\n+\n+   begin\n+      pragma Assert (Is_Tagged_Type (E));\n+\n+      --  Simple case: a limited private type\n+\n+      if Nkind (P) = N_Private_Type_Declaration\n+        and then Is_Limited_Record (E)\n+      then\n+         return True;\n+\n+      --  AI05-0060 (Binding Interpretation): A limited interface is a legal\n+      --  ancestor for the designated type of an RACW type.\n+\n+      elsif Is_Limited_Record (E) and then Is_Limited_Interface (E) then\n+         return True;\n+\n+      --  A generic tagged limited type is a valid candidate. Limitedness will\n+      --  be checked again on the actual at instantiation point.\n+\n+      elsif Nkind (P) = N_Formal_Type_Declaration\n+        and then Ekind (E) = E_Record_Type_With_Private\n+        and then Is_Generic_Type (E)\n+        and then Is_Limited_Record (E)\n+      then\n+         return True;\n+\n+      --  A private extension declaration is a valid candidate if its parent\n+      --  type is.\n+\n+      elsif Nkind (P) = N_Private_Extension_Declaration then\n+         return Is_Valid_Remote_Object_Type (Etype (E));\n+\n+      else\n+         return False;\n+      end if;\n+   end Is_Valid_Remote_Object_Type;\n+\n    ------------------------------------\n    -- Package_Specification_Of_Scope --\n    ------------------------------------"}, {"sha": "0381bedeccea9800b8b93517f4b5d87546b0b991", "filename": "gcc/ada/sem_dist.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_dist.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_dist.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.ads?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,6 +40,11 @@ package Sem_Dist is\n    --  (Exp_Dist.PCS_Version_Number) in Rtsfind.RTE.Check_RPC.\n    --  If no PCS version information is available, 0 is returned.\n \n+   function Is_Valid_Remote_Object_Type (E : Entity_Id) return Boolean;\n+   --  True if tagged type E is a valid candidate as the root type of the\n+   --  designated type for a RACW, i.e. a tagged limited private type, or a\n+   --  limited interface type, or a private extension of such a type.\n+\n    procedure Add_Stub_Constructs (N : Node_Id);\n    --  Create the stubs constructs for a remote call interface package\n    --  specification or body or for a shared passive specification. For caller"}, {"sha": "b4df53f56956ec3c0b4963293a772f2d35ba7dee", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -710,7 +710,7 @@ package body Sem_Prag is\n \n       procedure Fix_Error (Msg : in out String);\n       --  This is called prior to issuing an error message. Msg is a string\n-      --  which typically contains the substring pragma. If the current pragma\n+      --  that typically contains the substring \"pragma\". If the current pragma\n       --  comes from an aspect, each such \"pragma\" substring is replaced with\n       --  the characters \"aspect\", and if Error_Msg_Name_1 is Name_Precondition\n       --  (resp Name_Postcondition) it is changed to Name_Pre (resp Name_Post).\n@@ -12890,6 +12890,39 @@ package body Sem_Prag is\n             end if;\n          end Relative_Deadline;\n \n+         ------------------------\n+         -- Remote_Access_Type --\n+         ------------------------\n+\n+         --  pragma Remote_Access_Type ([Entity =>] formal_type_LOCAL_NAME);\n+\n+         when Pragma_Remote_Access_Type => Remote_Access_Type : declare\n+            E : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+            Check_Optional_Identifier (Arg1, Name_Entity);\n+            Check_Arg_Is_Local_Name (Arg1);\n+            E := Entity (Get_Pragma_Arg (Arg1));\n+\n+            if Nkind (Parent (E)) = N_Formal_Type_Declaration\n+              and then Ekind (E) = E_General_Access_Type\n+              and then Is_Class_Wide_Type (Directly_Designated_Type (E))\n+              and then Scope (Root_Type (Directly_Designated_Type (E)))\n+                         = Scope (E)\n+              and then Is_Valid_Remote_Object_Type\n+                         (Root_Type (Directly_Designated_Type (E)))\n+            then\n+               Set_Is_Remote_Types (E);\n+\n+            else\n+               Error_Pragma_Arg\n+                 (\"pragma% applies only to formal access to classwide types\",\n+                  Arg1);\n+            end if;\n+         end Remote_Access_Type;\n+\n          ---------------------------\n          -- Remote_Call_Interface --\n          ---------------------------\n@@ -15071,6 +15104,7 @@ package body Sem_Prag is\n       Pragma_Queuing_Policy                 => -1,\n       Pragma_Ravenscar                      => -1,\n       Pragma_Relative_Deadline              => -1,\n+      Pragma_Remote_Access_Type             => -1,\n       Pragma_Remote_Call_Interface          => -1,\n       Pragma_Remote_Types                   => -1,\n       Pragma_Restricted_Run_Time            => -1,"}, {"sha": "bb6945b36054bf1e4a720393ed0e6083db5a65a2", "filename": "gcc/ada/sigtramp-ppcvxw.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsigtramp-ppcvxw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsigtramp-ppcvxw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-ppcvxw.c?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                         Asm Implementation File                          *\n  *                                                                          *\n- *            Copyright (C) 2011, Free Software Foundation, Inc.            *\n+ *         Copyright (C) 2011-2012, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -169,15 +169,23 @@ CR(\".cfi_def_cfa \" S(CFA_REG) \", 0\")\n \n /* Register location blocks\n    ------------------------\n-   Rules to find registers of interest from the CFA. This should\n-   comprise all the non-volatile registers relevant to the interrupted\n-   context.  */\n+   Rules to find registers of interest from the CFA. This should comprise\n+   all the non-volatile registers relevant to the interrupted context.\n+\n+   Note that we include r1 in this set, unlike the libgcc unwinding\n+   fallbacks.  This is useful for fallbacks to allow the use of r1 in CFI\n+   expressions and the absence of rule for r1 gets compensated by using the\n+   target CFA instead.  We don't need the expression facility here and\n+   setup a fake CFA to allow very simple offset expressions, so having a\n+   rule for r1 is the proper thing to do.  We for sure have observed\n+   crashes in some cases without it.  */\n \n #define COMMON_CFI(REG) \\\n   \".cfi_offset \" S(REGNO_##REG) \",\" S(REG_SET_##REG)\n \n #define CFI_COMMON_REGS \\\n CR(\"# CFI for common registers\\n\") \\\n+TCR(COMMON_CFI(GR(1)))  \\\n TCR(COMMON_CFI(GR(2)))  \\\n TCR(COMMON_CFI(GR(3)))  \\\n TCR(COMMON_CFI(GR(4)))  \\"}, {"sha": "aecebcd5353badcd3f0885368e1bc61c0ae7f5e0", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25081892c432b0234fd29bdbf970c89f2083eed5/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=25081892c432b0234fd29bdbf970c89f2083eed5", "patch": "@@ -535,6 +535,7 @@ package Snames is\n    Name_Pure_12                        : constant Name_Id := N + $; -- GNAT\n    Name_Pure_Function                  : constant Name_Id := N + $; -- GNAT\n    Name_Relative_Deadline              : constant Name_Id := N + $; -- Ada 05\n+   Name_Remote_Access_Type             : constant Name_Id := N + $; -- GNAT\n    Name_Remote_Call_Interface          : constant Name_Id := N + $;\n    Name_Remote_Types                   : constant Name_Id := N + $;\n    Name_Share_Generic                  : constant Name_Id := N + $; -- GNAT\n@@ -1687,6 +1688,7 @@ package Snames is\n       Pragma_Pure_12,\n       Pragma_Pure_Function,\n       Pragma_Relative_Deadline,\n+      Pragma_Remote_Access_Type,\n       Pragma_Remote_Call_Interface,\n       Pragma_Remote_Types,\n       Pragma_Share_Generic,"}]}