{"sha": "6e529985d8956f74492e3176026fc02dc8f01b6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1Mjk5ODVkODk1NmY3NDQ5MmUzMTc2MDI2ZmMwMmRjOGYwMWI2Yw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-19T00:16:42Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-19T00:16:42Z"}, "message": "Daily bump.", "tree": {"sha": "95db7f231ee771aff0405cc85162c11486611ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95db7f231ee771aff0405cc85162c11486611ec2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e529985d8956f74492e3176026fc02dc8f01b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e529985d8956f74492e3176026fc02dc8f01b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e529985d8956f74492e3176026fc02dc8f01b6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e529985d8956f74492e3176026fc02dc8f01b6c/comments", "author": null, "committer": null, "parents": [{"sha": "f0fca213bc52644ba896da622b35842a6157bd98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fca213bc52644ba896da622b35842a6157bd98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0fca213bc52644ba896da622b35842a6157bd98"}], "stats": {"total": 382, "additions": 381, "deletions": 1}, "files": [{"sha": "4fe1423ee7beb08b140dec49d921be7ec49a6689", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,9 @@\n+2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* Makefile.in: Regenerate.\n+\t* Makefile.tpl: Make the state of the configured host\n+\tshared flag available to makefile fragements.\n+\n 2021-08-09  Hongyu Wang  <hongyu.wang@intel.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "6c3add89176cd754f61c8a46ee1ebf43634453ae", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,8 @@\n+2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* mh-darwin: Require a non-shared host configuration to\n+\tenable  mdynamic-no-pic where that is supported.\n+\n 2021-07-09  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* mh-darwin: Make this specific to handling the"}, {"sha": "d4aa96f1670bf0eb2ed83914ba6940c1a22c9d9e", "filename": "contrib/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,9 @@\n+2021-08-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-git-customization.sh: Wrap $@ in quotes.\n+\t* git-commit-mklog.py: Add new argument --co.\n+\t* mklog.py: Skip the Co-Authored-By lines.\n+\n 2021-08-10  Martin Liska  <mliska@suse.cz>\n \n \t* mklog.py: Support additional PRs without PR prefix."}, {"sha": "4fd8ff76520bc42b8658129ea262d291ba55e023", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,54 @@\n+2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config.gcc: Include rpath.opt for Darwin.\n+\t* config/darwin.h (DRIVER_SELF_SPECS): Handle -rpath.\n+\n+2021-08-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR bootstrap/101959\n+\t* hash-map-tests.c (test_map_of_type_with_ctor_and_dtor_expand):\n+\tUse an 'int_hash'.\n+\n+2021-08-18  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vld3_lane_f64): Use float RTL\n+\tpattern and type cast.\n+\t(vld4_lane_f32): Use float RTL pattern.\n+\t(vld4q_lane_f64): Use float type cast.\n+\n+2021-08-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Check also\n+\tEAF_NOREAD.\n+\n+2021-08-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* hash-map-tests.c (test_map_of_type_with_ctor_and_dtor): Extend.\n+\t(test_map_of_type_with_ctor_and_dtor_expand): Add function.\n+\t(hash_map_tests_c_tests): Call it.\n+\n+2021-08-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* ggc.h (enum ggc_collect): New.\n+\t(ggc_collect): Use it.\n+\t* ggc-page.c: Adjust.\n+\t* ggc-common.c: Likewise.\n+\t* ggc-tests.c: Likewise.\n+\t* read-rtl-function.c: Likewise.\n+\t* selftest-run-tests.c: Likewise.\n+\t* doc/gty.texi (Invoking the garbage collector): Likewise.\n+\n+2021-08-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97147\n+\t* config/i386/i386.h (TARGET_V2DF_REDUCTION_PREFER_HADDPD):\n+\tNew macro.\n+\t* config/i386/sse.md (*sse3_haddv2df3_low): Add\n+\tTARGET_V2DF_REDUCTION_PREFER_HADDPD.\n+\t(*sse3_hsubv2df3_low): Ditto.\n+\t* config/i386/x86-tune.def\n+\t(X86_TUNE_V2DF_REDUCTION_PREFER_HADDPD): New tune.\n+\n 2021-08-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-gori.cc (gori_compute::gori_compute): Enable tracing."}, {"sha": "30a51b98f77956c0289397f6fa40a3f5ef5c1e6d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1 +1 @@\n-20210818\n+20210819"}, {"sha": "63a04b1c51fd88643d0e89d5fd634a48b7984a40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,8 @@\n+2021-08-18  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <discrete_type>: Fix\n+\tthinko in latest change.\n+\n 2021-08-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR debug/101598"}, {"sha": "0b483ccf9ea9cb4f2440b20a029f9307105d8a7a", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,54 @@\n+2021-08-18  Ankur Saini  <arsenic@sourceware.org>\n+\n+\tPR analyzer/97114\n+\t* region-model.cc (region_model::get_rvalue_1): Add case for\n+\tOBJ_TYPE_REF.\n+\n+2021-08-18  Ankur Saini  <arsenic@sourceware.org>\n+\n+\tPR analyzer/100546\n+\t* analysis-plan.cc (analysis_plan::use_summary_p): Don't use call\n+\tsummaries if there is no callgraph edge\n+\t* checker-path.cc (call_event::call_event): Handle calls events that\n+\tare not represented by a supergraph call edge\n+\t(return_event::return_event): Likewise.\n+\t(call_event::get_desc): Work with new call_event structure.\n+\t(return_event::get_desc): Likeise.\n+\t* checker-path.h (call_event::m_src_snode): New field.\n+\t(call_event::m_dest_snode): New field.\n+\t(return_event::m_src_snode): New field.\n+\t(return_event::m_dest_snode): New field.\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::prune_for_sm_diagnostic)<case EK_CALL_EDGE>:\n+\tRefactor to work with edges without callgraph edge.\n+\t(diagnostic_manager::prune_for_sm_diagnostic)<case EK_RETURN_EDGE>:\n+\tLikewise.\n+\t* engine.cc (dynamic_call_info_t::update_model): New function.\n+\t(dynamic_call_info_t::add_events_to_path): New function.\n+\t(exploded_graph::create_dynamic_call): New function.\n+\t(exploded_graph::process_node): Work with dynamically discovered calls.\n+\t* exploded-graph.h (class dynamic_call_info_t): New class.\n+\t(exploded_graph::create_dynamic_call): New decl.\n+\t* program-point.cc (program_point::push_to_call_stack): New function.\n+\t(program_point::pop_from_call_stack): New function.\n+\t* program-point.h (program_point::push_to_call_stack): New decl.\n+\t(program_point::pop_from_call_stack): New decl.\n+\t* program-state.cc (program_state::push_call): New function.\n+\t(program_state::returning_call): New function.\n+\t* program-state.h (program_state::push_call): New decl.\n+\t(program_state::returning_call): New decl.\n+\t* region-model.cc (region_model::update_for_gcall) New function.\n+\t(region_model::update_for_return_gcall): New function.\n+\t(egion_model::update_for_call_superedge): Get the underlying gcall and\n+\tupdate for gcall.\n+\t(region_model::update_for_return_superedge): Likewise.\n+\t* region-model.h (region_model::update_for_gcall): New decl.\n+\t(region_model::update_for_return_gcall): New decl.\n+\t* state-purge.cc (state_purge_per_ssa_name::process_point): Update to\n+\twork with calls without underlying cgraph edge.\n+\t* supergraph.cc (supergraph::supergraph) Split snodes at every callsite.\n+\t* supergraph.h (supernode::get_returning_call) New accessor.\n+\n 2021-08-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101570"}, {"sha": "ab566ba10efc02182a4a86793014185a2db260ac", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,9 @@\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_NOTHING.\n+\t* c-pragma.c (omp_pragmas): Add nothing directive.\n+\t* c-omp.c (omp_directives): Uncomment nothing directive entry.\n+\n 2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101539"}, {"sha": "53abd1a01db8ca09fdf457d72428a61c75118647", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,32 @@\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_nothing): New function.\n+\t(c_parser_pragma): Handle PRAGMA_OMP_NOTHING.\n+\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_statement_after_labels): Add restart label\n+\tnear the start of the function.  If c_parser_pragma returns false,\n+\tgoto restart.\n+\t(c_parser_pragma): For PRAGMA_OMP_CANCELLATION_POINT return what\n+\tc_parser_omp_cancellation_point returned.  For PRAGMA_OMP_DECLARE\n+\treturn what c_parser_omp_declare returned.  Return true instead of\n+\tfalse after emitting errors that the directive is not allowed in\n+\tpragma_stmt context.\n+\t(c_parser_omp_ordered): Return true instead of\n+\tfalse after emitting errors that the directive is not allowed in\n+\tpragma_stmt context.\n+\t(c_parser_omp_target_update): Likewise.\n+\t(c_parser_omp_target_enter_data, c_parser_omp_target_exit_data):\n+\tChange return type from tree to bool, return false if the\n+\tdirective should be ignored in pragma_stmt contexts.\n+\t(c_parser_omp_target): Adjust callers of c_parser_omp_target_*_data,\n+\treturn their result directly.\n+\t(c_parser_omp_cancellation_point): Change return type from void to\n+\tbool, return false if the directive should be ignored in pragma_stmt\n+\tcontexts.\n+\t(c_parser_omp_declare): Likewise.\n+\n 2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (OMP_SCOPE_CLAUSE_MASK): Define."}, {"sha": "a06a49613c8729fbadc3a12e44ea13dd4d7532b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,42 @@\n+2021-08-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101344\n+\tPR c++/101820\n+\t* cp-tree.h (CONSTRUCTOR_BRACES_ELIDED_P): Define.\n+\t* decl.c (reshape_init_r): Set it.\n+\t* pt.c (collect_ctor_idx_types): Recurse into a sub-CONSTRUCTOR\n+\tiff CONSTRUCTOR_BRACES_ELIDED_P.\n+\n+2021-08-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101883\n+\t* pt.c (convert_template_argument): Pass LOOKUP_IMPLICIT to\n+\tdo_auto_deduction.\n+\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_nothing): New function.\n+\t(cp_parser_pragma): Handle PRAGMA_OMP_NOTHING.\n+\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_ordered): Return true instead of\n+\tfalse after emitting errors that the directive is not allowed in\n+\tpragma_stmt context.\n+\t(cp_parser_omp_target_update): Likewise.\n+\t(cp_parser_omp_cancellation_point): Change return type from void to\n+\tbool, return false if the directive should be ignored in pragma_stmt\n+\tcontexts.\n+\t(cp_parser_omp_target_enter_data, cp_parser_omp_target_exit_data):\n+\tChange return type from tree to bool, return false if the\n+\tdirective should be ignored in pragma_stmt contexts.\n+\t(cp_parser_omp_target): Adjust callers of cp_parser_omp_target_*_data,\n+\treturn their result directly.\n+\t(cp_parser_pragma): For PRAGMA_OMP_CANCELLATION_POINT return what\n+\tcp_parser_omp_cancellation_point returned.  Return true instead of\n+\tfalse after emitting errors that the directive is not allowed in\n+\tpragma_stmt context.\n+\n 2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101539"}, {"sha": "90a3e53a841900f070cc344dea10f4a8e680bc65", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,9 @@\n+2021-08-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* match.h (gfc_match_omp_nothing): New.\n+\t* openmp.c (gfc_match_omp_nothing): New.\n+\t* parse.c (decode_omp_directive): Match 'nothing' directive.\n+\n 2021-08-17  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.c (show_omp_node, show_code_node): Handle"}, {"sha": "7557e1766001d8ffa451dc4f6f0f19cfcb38f0d9", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,8 @@\n+2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR jit/100613\n+\t* Make-lang.in: Provide clauses for Darwin hosts.\n+\n 2021-07-18  Antoni Boucher  <bouanto@zoho.com>\n \n \tPR target/95498"}, {"sha": "ea8c88b07b6dbbc4c3c40500b9552fdc71c2fc05", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,13 @@\n+2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\t    Matt Jacobson   <mhjacobson@me.com>\n+\n+\tPR objc/101666\n+\t* objc-act.c (objc_build_constructor): Handle empty constructor\n+\tlists.\n+\t* objc-next-runtime-abi-02.c (build_v2_objc_method_fixup_call):\n+\tHandle nil receivers.\n+\t(build_v2_build_objc_method_call): Likewise.\n+\n 2021-08-17  Matt Jacobson  <mhjacobson@me.com>\n \n \t* objc-next-runtime-abi-02.c"}, {"sha": "57b714a93acc8e8f9de48583bac5ab0c285f563b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,77 @@\n+2021-08-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR testsuite/101963\n+\t* gfortran.dg/nothing-1.f90: Moved to ...\n+\t* gfortran.dg/gomp/nothing-1.f90: ... here.\n+\t* gfortran.dg/nothing-2.f90: Moved to ...\n+\t* gfortran.dg/gomp/nothing-2.f90: ... here;\n+\tavoid $ issue in $OMP in dg-error.\n+\n+2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\t    Matt Jacobson   <mhjacobson@me.com>\n+\n+\tPR objc/101666\n+\t* obj-c++.dg/pr101666-0.mm: New test.\n+\t* obj-c++.dg/pr101666-1.mm: New test.\n+\t* obj-c++.dg/pr101666.inc: New.\n+\t* objc.dg/pr101666-0.m: New test.\n+\t* objc.dg/pr101666-1.m: New test.\n+\t* objc.dg/pr101666.inc: New.\n+\n+2021-08-18  Ankur Saini  <arsenic@sourceware.org>\n+\n+\tPR analyzer/97114\n+\t* g++.dg/analyzer/vfunc-2.C: New test.\n+\t* g++.dg/analyzer/vfunc-3.C: New test.\n+\t* g++.dg/analyzer/vfunc-4.C: New test.\n+\t* g++.dg/analyzer/vfunc-5.C: New test.\n+\n+2021-08-18  Ankur Saini  <arsenic@sourceware.org>\n+\n+\tPR analyzer/100546\n+\t* gcc.dg/analyzer/function-ptr-4.c: New test.\n+\t* gcc.dg/analyzer/pr100546.c: New test.\n+\n+2021-08-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/nothing-1.f90: New test.\n+\t* gfortran.dg/nothing-2.f90: New test.\n+\n+2021-08-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101344\n+\tPR c++/101820\n+\t* g++.dg/cpp2a/class-deduction-aggr11.C: New test.\n+\t* g++.dg/cpp2a/class-deduction-aggr12.C: New test.\n+\n+2021-08-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101883\n+\t* g++.dg/cpp2a/nontype-class49.C: New test.\n+\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/nothing-1.c: New test.\n+\t* g++.dg/gomp/attrs-1.C (bar): Add nothing directive test.\n+\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\n+\t* g++.dg/gomp/attrs-9.C: Likewise.\n+\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/pr63326.c: Don't expect extra \"before\" errors\n+\tin C++.\n+\t* g++.dg/gomp/attrs-7.C: Don't expect one extra error.\n+\t* g++.dg/gomp/barrier-2.C: Likewise.\n+\t* gcc.dg/gomp/declare-simd-5.c: Likewise.\n+\t* gcc.dg/gomp/barrier-2.c: Likewise.\n+\t* gcc.dg/gomp/declare-variant-2.c: Likewise.\n+\n+2021-08-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97147\n+\t* gcc.target/i386/pr54400.c: Adjust testcase.\n+\t* gcc.target/i386/pr94147.c: New test.\n+\n 2021-08-17  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/101854"}, {"sha": "b45776ebfd3ef3f22cc803be8386bc79a2a13133", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,23 @@\n+2021-08-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp_lib.f90.in (omp_alloc, omp_free, omp_target_alloc,\n+\tomp_target_free. omp_target_is_present, omp_target_memcpy,\n+\tomp_target_memcpy_rect, omp_target_associate_ptr,\n+\tomp_target_disassociate_ptr): Add interface.\n+\t* omp_lib.h.in (omp_alloc, omp_free, omp_target_alloc,\n+\tomp_target_free. omp_target_is_present, omp_target_memcpy,\n+\tomp_target_memcpy_rect, omp_target_associate_ptr,\n+\tomp_target_disassociate_ptr): Add interface.\n+\t* testsuite/libgomp.fortran/alloc-1.F90: Remove local\n+\tinterface block for omp_alloc + omp_free.\n+\t* testsuite/libgomp.fortran/alloc-4.f90: Likewise.\n+\t* testsuite/libgomp.fortran/refcount-1.f90: New test.\n+\t* testsuite/libgomp.fortran/target-12.f90: New test.\n+\n+2021-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/nothing-1.c: New test.\n+\n 2021-08-17  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/scope-1.f90: New test."}, {"sha": "f6ffd1649d346275f339e8d58a25336092bfa2b4", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,8 @@\n+2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* simple-object-mach-o.c (simple_object_mach_o_write_segment):\n+\tArrange to swap the LTO index tables where needed.\n+\n 2021-06-30  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* make-temp-file.c (usrtmp): Remove."}, {"sha": "e64efaff22045fd502c987b1feb2c9311a97d385", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e529985d8956f74492e3176026fc02dc8f01b6c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e529985d8956f74492e3176026fc02dc8f01b6c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e529985d8956f74492e3176026fc02dc8f01b6c", "patch": "@@ -1,3 +1,65 @@\n+2021-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (default_delete): Add @since tag.\n+\t(unique_ptr, unique_ptr<T[]>): Likewise. Improve @brief.\n+\t(make_unique, make_unique_for_overwrite): Likewise. Add @tparam,\n+\t@param, and @returns.\n+\t(_MakeUniq): Move to __detail namespace. Add alias template\n+\thelpers.\n+\n+2021-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_function.h: Improve doxygen comments.\n+\n+2021-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Enable doxygen\n+\tprocessing for C++20 components and components that depend on\n+\tcompiler features.\n+\t* include/bits/stl_algo.h (random_shuffle): Use @deprecated.\n+\t* include/std/type_traits: Improve doxygen comments for C++20\n+\ttraits.\n+\n+2021-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/type_traits.h (__promote_2, __promote_3)\n+\t(__promote_4): Redfine as alias templates using __promoted_t.\n+\t* include/std/complex (__promote_2): Remove partial\n+\tspecializations for std::complex.\n+\n+2021-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_algo.h (min(initializer_list<T>))\n+\t(min(initializer_list<T>, Compare)): Call __min_element directly to\n+\tavoid redundant debug checks for valid ranges.\n+\t(max(initializer_list<T>), max(initializer_list<T>, Compare)):\n+\tLikewise, for __max_element.\n+\t(minmax(initializer_list<T>), minmax(initializer_list<T>, Compare)):\n+\tLikewise, for __minmax_element.\n+\n+2021-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/debug/deque (deque(size_type, const T&, const A&)):\n+\tPrevent class template argument deduction and replace with a\n+\tdeduction guide.\n+\t* include/debug/forward_list (forward_list(size_type, const T&, const A&)):\n+\tLikewise.\n+\t* include/debug/list (list(size_type, const T&, const A&)):\n+\tLikewise.\n+\t* include/debug/vector (vector(size_type, const T&, const A&)):\n+\tLikewise.\n+\n+2021-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdBitReferencePrinter): Use\n+\t'std::vector<bool>::reference' as type name, not _Bit_reference.\n+\t(build_libstdcxx_dictionary): Register printers for vector<bool>\n+\ttypes in debug mode too.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Adjust expected\n+\toutput for invalid _Bit_reference. Use vector<bool>::reference\n+\tinstead of _Bit_reference.\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n+\n 2021-08-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/lib/libstdc++.exp: Avoid illegal argument to verbose,"}]}