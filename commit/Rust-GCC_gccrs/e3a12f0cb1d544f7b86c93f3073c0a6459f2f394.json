{"sha": "e3a12f0cb1d544f7b86c93f3073c0a6459f2f394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhMTJmMGNiMWQ1NDRmN2I4NmM5M2YzMDczYzBhNjQ1OWYyZjM5NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-07T21:46:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-07T21:46:24Z"}, "message": "(digest_init): Fix error message text.\n\nFrom-SVN: r5277", "tree": {"sha": "793a398128d1f4519a7de6ea98d523fa8e09c3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/793a398128d1f4519a7de6ea98d523fa8e09c3db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a12f0cb1d544f7b86c93f3073c0a6459f2f394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a12f0cb1d544f7b86c93f3073c0a6459f2f394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a12f0cb1d544f7b86c93f3073c0a6459f2f394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a12f0cb1d544f7b86c93f3073c0a6459f2f394/comments", "author": null, "committer": null, "parents": [{"sha": "943cc2426149ff3f490440e2cbae76a736613a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943cc2426149ff3f490440e2cbae76a736613a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943cc2426149ff3f490440e2cbae76a736613a48"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "e215b22d82f3a2981f9dab679ecdbb587077fb82", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a12f0cb1d544f7b86c93f3073c0a6459f2f394/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a12f0cb1d544f7b86c93f3073c0a6459f2f394/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e3a12f0cb1d544f7b86c93f3073c0a6459f2f394", "patch": "@@ -5002,16 +5002,12 @@ digest_init (type, init, require_constant, constructor_constant)\n   if (code == INTEGER_TYPE || code == REAL_TYPE || code == POINTER_TYPE\n       || code == ENUMERAL_TYPE || code == COMPLEX_TYPE)\n     {\n-      SAVE_SPELLING_DEPTH\n-\t({\n-\t  /* Note that convert_for_assignment calls default_conversion\n-\t     for arrays and functions.  We must not call it in the\n-\t     case where inside_init is a null pointer constant.  */\n-\t  inside_init\n-\t    = convert_for_assignment (type, init, \n-\t\t\t\t      &initialization_message,\n-\t\t\t\t      NULL_TREE, NULL_TREE, 0);\n-\t});\n+      /* Note that convert_for_assignment calls default_conversion\n+\t for arrays and functions.  We must not call it in the\n+\t case where inside_init is a null pointer constant.  */\n+      inside_init\n+\t= convert_for_assignment (type, init, \"initialization\",\n+\t\t\t\t  NULL_TREE, NULL_TREE, 0);\n \n       if (require_constant && ! TREE_CONSTANT (inside_init))\n \t{"}]}