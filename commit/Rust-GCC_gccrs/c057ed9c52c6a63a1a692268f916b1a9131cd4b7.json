{"sha": "c057ed9c52c6a63a1a692268f916b1a9131cd4b7", "node_id": "C_kwDOANBUbNoAKGMwNTdlZDljNTJjNmE2M2ExYTY5MjI2OGY5MTZiMWE5MTMxY2Q0Yjc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-15T14:28:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-15T14:28:34Z"}, "message": "openmp: Fix up strtoul and strtoull uses in libgomp\n\nYesterday when working on numa_domains, I've noticed because of a bug\nin my patch a hang on a large NUMA machine.  I've fixed the bug, but\nalso discovered that the hang was a result of making wrong assumptions\nabout strtoul/strtoull.  All the uses were for portability setting\nerrno = 0 before the calls and treating non-zero errno after the call\nas invalid input, but for the case where there are no valid digits at\nall strtoul may set errno to EINVAL, but doesn't have to and with\nglibc doesn't do that.  So, this patch goes through all the strtoul calls\nand next to errno != 0 checks adds also endptr == startptr check.\nHaven't done it in places where we immediately reject strtoul returning 0\nthe same as we reject errno != 0, because strtoul must return 0 in the\ncase where it sets endptr to the start pointer.  In some spots the code\nwas using errno = 0; x = strtoul (p, &p, 10); if (errno) { /*invalid*/ }\nand those spots had to be changed to\nerrno = 0; x = strtoul (p, &end, 10); if (errno || end == p) { /*invalid*/ }\np = end;\n\n2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n\n\t* env.c (parse_schedule): For strtoul or strtoull calls which don't\n\tclearly reject return value 0 as invalid handle the case where end\n\tpointer is the same as first argument as invalid.\n\t(parse_unsigned_long_1): Likewise.\n\t(parse_one_place): Likewise.\n\t(parse_places_var): Likewise.\n\t(parse_stacksize): Likewise.\n\t(parse_spincount): Likewise.\n\t(parse_affinity): Likewise.\n\t(parse_gomp_openacc_dim): Likewise.  Avoid strict aliasing violation.\n\tMake code valid C89.\n\t* config/linux/affinity.c (gomp_affinity_find_last_cache_level):\n\tFor strtoul calls which don't clearly reject return value 0 as\n\tinvalid handle the case where end pointer is the same as first\n\targument as invalid.\n\t(gomp_affinity_init_level_1): Likewise.\n\t(gomp_affinity_init_numa_domains): Likewise.\n\t* config/rtems/proc.c (parse_thread_pools): Likewise.", "tree": {"sha": "7d70e6b76f0e504852b11f11c09682b49960f358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d70e6b76f0e504852b11f11c09682b49960f358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c057ed9c52c6a63a1a692268f916b1a9131cd4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c057ed9c52c6a63a1a692268f916b1a9131cd4b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c057ed9c52c6a63a1a692268f916b1a9131cd4b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c057ed9c52c6a63a1a692268f916b1a9131cd4b7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4764049dd620affcd3e2658dc7f03a6616370a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4764049dd620affcd3e2658dc7f03a6616370a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4764049dd620affcd3e2658dc7f03a6616370a29"}], "stats": {"total": 92, "additions": 55, "deletions": 37}, "files": [{"sha": "e11906abec4a7f561fe57b90d6169e7bce6b1b76", "filename": "libgomp/config/linux/affinity.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c057ed9c52c6a63a1a692268f916b1a9131cd4b7/libgomp%2Fconfig%2Flinux%2Faffinity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c057ed9c52c6a63a1a692268f916b1a9131cd4b7/libgomp%2Fconfig%2Flinux%2Faffinity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Faffinity.c?ref=c057ed9c52c6a63a1a692268f916b1a9131cd4b7", "patch": "@@ -251,7 +251,7 @@ gomp_affinity_find_last_cache_level (char *name, size_t prefix_len,\n \t  char *p;\n \t  errno = 0;\n \t  val = strtoul (line, &p, 10);\n-\t  if (!errno && val >= maxval)\n+\t  if (!errno && p > line && val >= maxval)\n \t    {\n \t      ret = l;\n \t      maxval = val;\n@@ -303,24 +303,26 @@ gomp_affinity_init_level_1 (int level, int this_level, unsigned long count,\n \t  }\n \tif (getline (&line, &linelen, f) > 0)\n \t  {\n-\t    char *p = line;\n+\t    char *p = line, *end;\n \t    void *pl = gomp_places_list[gomp_places_list_len];\n \t    if (level == this_level)\n \t      gomp_affinity_init_place (pl);\n \t    while (*p && *p != '\\n')\n \t      {\n \t\tunsigned long first, last;\n \t\terrno = 0;\n-\t\tfirst = strtoul (p, &p, 10);\n-\t\tif (errno)\n+\t\tfirst = strtoul (p, &end, 10);\n+\t\tif (errno || end == p)\n \t\t  break;\n+\t\tp = end;\n \t\tlast = first;\n \t\tif (*p == '-')\n \t\t  {\n \t\t    errno = 0;\n-\t\t    last = strtoul (p + 1, &p, 10);\n-\t\t    if (errno || last < first)\n+\t\t    last = strtoul (p + 1, &end, 10);\n+\t\t    if (errno || end == p + 1 || last < first)\n \t\t      break;\n+\t\t    p = end;\n \t\t  }\n \t\tfor (; first <= last; first++)\n \t\t  if (!CPU_ISSET_S (first, gomp_cpuset_size, copy))\n@@ -383,18 +385,21 @@ gomp_affinity_init_numa_domains (unsigned long count, cpu_set_t *copy,\n   while (*q && *q != '\\n' && gomp_places_list_len < count)\n     {\n       unsigned long nfirst, nlast;\n+      char *end;\n \n       errno = 0;\n-      nfirst = strtoul (q, &q, 10);\n-      if (errno)\n+      nfirst = strtoul (q, &end, 10);\n+      if (errno || end == q)\n \tbreak;\n+      q = end;\n       nlast = nfirst;\n       if (*q == '-')\n \t{\n \t  errno = 0;\n-\t  nlast = strtoul (q + 1, &q, 10);\n-\t  if (errno || nlast < nfirst)\n+\t  nlast = strtoul (q + 1, &end, 10);\n+\t  if (errno || end == q + 1 || nlast < nfirst)\n \t    break;\n+\t  q = end;\n \t}\n       for (; nfirst <= nlast; nfirst++)\n \t{\n@@ -413,16 +418,18 @@ gomp_affinity_init_numa_domains (unsigned long count, cpu_set_t *copy,\n \t\t  bool seen = false;\n \n \t\t  errno = 0;\n-\t\t  first = strtoul (p, &p, 10);\n-\t\t  if (errno)\n+\t\t  first = strtoul (p, &end, 10);\n+\t\t  if (errno || end == p)\n \t\t    break;\n+\t\t  p = end;\n \t\t  last = first;\n \t\t  if (*p == '-')\n \t\t    {\n \t\t      errno = 0;\n-\t\t      last = strtoul (p + 1, &p, 10);\n-\t\t      if (errno || last < first)\n+\t\t      last = strtoul (p + 1, &end, 10);\n+\t\t      if (errno || end == p + 1 || last < first)\n \t\t\tbreak;\n+\t\t      p = end;\n \t\t    }\n \t\t  for (; first <= last; first++)\n \t\t    {"}, {"sha": "ad40de4c3811e1bb149a226e8039f5811ffc4b56", "filename": "libgomp/config/rtems/proc.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c057ed9c52c6a63a1a692268f916b1a9131cd4b7/libgomp%2Fconfig%2Frtems%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c057ed9c52c6a63a1a692268f916b1a9131cd4b7/libgomp%2Fconfig%2Frtems%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Frtems%2Fproc.c?ref=c057ed9c52c6a63a1a692268f916b1a9131cd4b7", "patch": "@@ -78,22 +78,25 @@ parse_thread_pools (char *env, unsigned long *count, unsigned long *priority,\n {\n   size_t len;\n   int i;\n+  char *end;\n \n   if (*env == ':')\n     ++env;\n \n   errno = 0;\n-  *count = strtoul (env, &env, 10);\n-  if (errno != 0)\n+  *count = strtoul (env, &end, 10);\n+  if (errno != 0 || end == env)\n     gomp_fatal (\"Invalid thread pool count\");\n+  env = end;\n \n   if (*env == '$')\n     {\n       ++env;\n       errno = 0;\n-      *priority = strtoul (env, &env, 10);\n-      if (errno != 0)\n+      *priority = strtoul (env, &end, 10);\n+      if (errno != 0 || end == env)\n \tgomp_fatal (\"Invalid thread pool priority\");\n+      env = end;\n     }\n   else\n     *priority = -1;"}, {"sha": "b0acacb57838e3efaa4a897a6a710faad3334433", "filename": "libgomp/env.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c057ed9c52c6a63a1a692268f916b1a9131cd4b7/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c057ed9c52c6a63a1a692268f916b1a9131cd4b7/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=c057ed9c52c6a63a1a692268f916b1a9131cd4b7", "patch": "@@ -183,7 +183,7 @@ parse_schedule (void)\n \n   errno = 0;\n   value = strtoul (env, &end, 10);\n-  if (errno)\n+  if (errno || end == env)\n     goto invalid;\n \n   while (isspace ((unsigned char) *end))\n@@ -232,7 +232,7 @@ parse_unsigned_long_1 (const char *name, unsigned long *pvalue, bool allow_zero,\n \n   errno = 0;\n   value = strtoul (env, &end, 10);\n-  if (errno || (long) value <= 0 - allow_zero)\n+  if (errno || end == env || (long) value <= 0 - allow_zero)\n     goto invalid;\n \n   while (isspace ((unsigned char) *end))\n@@ -570,6 +570,7 @@ parse_one_place (char **envp, bool *negatep, unsigned long *lenp,\n \t  unsigned long this_num, this_len = 1;\n \t  long this_stride = 1;\n \t  bool this_negate = (*env == '!');\n+\t  char *end;\n \t  if (this_negate)\n \t    {\n \t      if (gomp_places_list)\n@@ -580,9 +581,10 @@ parse_one_place (char **envp, bool *negatep, unsigned long *lenp,\n \t    }\n \n \t  errno = 0;\n-\t  this_num = strtoul (env, &env, 10);\n-\t  if (errno)\n+\t  this_num = strtoul (env, &end, 10);\n+\t  if (errno || end == env)\n \t    return false;\n+\t  env = end;\n \t  while (isspace ((unsigned char) *env))\n \t    ++env;\n \t  if (*env == ':')\n@@ -602,9 +604,10 @@ parse_one_place (char **envp, bool *negatep, unsigned long *lenp,\n \t\t  while (isspace ((unsigned char) *env))\n \t\t    ++env;\n \t\t  errno = 0;\n-\t\t  this_stride = strtol (env, &env, 10);\n-\t\t  if (errno)\n+\t\t  this_stride = strtol (env, &end, 10);\n+\t\t  if (errno || end == env)\n \t\t    return false;\n+\t\t  env = end;\n \t\t  while (isspace ((unsigned char) *env))\n \t\t    ++env;\n \t\t}\n@@ -636,6 +639,7 @@ parse_one_place (char **envp, bool *negatep, unsigned long *lenp,\n     ++env;\n   if (*env == ':')\n     {\n+      char *end;\n       ++env;\n       while (isspace ((unsigned char) *env))\n \t++env;\n@@ -651,9 +655,10 @@ parse_one_place (char **envp, bool *negatep, unsigned long *lenp,\n \t  while (isspace ((unsigned char) *env))\n \t    ++env;\n \t  errno = 0;\n-\t  stride = strtol (env, &env, 10);\n-\t  if (errno)\n+\t  stride = strtol (env, &end, 10);\n+\t  if (errno || end == env)\n \t    return false;\n+\t  env = end;\n \t  while (isspace ((unsigned char) *env))\n \t    ++env;\n \t}\n@@ -720,7 +725,7 @@ parse_places_var (const char *name, bool ignore)\n \n \t  errno = 0;\n \t  count = strtoul (env, &end, 10);\n-\t  if (errno)\n+\t  if (errno || end == env)\n \t    goto invalid;\n \t  env = end;\n \t  while (isspace ((unsigned char) *env))\n@@ -859,7 +864,7 @@ parse_stacksize (const char *name, unsigned long *pvalue)\n \n   errno = 0;\n   value = strtoul (env, &end, 10);\n-  if (errno)\n+  if (errno || end == env)\n     goto invalid;\n \n   while (isspace ((unsigned char) *end))\n@@ -928,7 +933,7 @@ parse_spincount (const char *name, unsigned long long *pvalue)\n \n   errno = 0;\n   value = strtoull (env, &end, 10);\n-  if (errno)\n+  if (errno || end == env)\n     goto invalid;\n \n   while (isspace ((unsigned char) *end))\n@@ -1080,7 +1085,7 @@ parse_affinity (bool ignore)\n \n \t  errno = 0;\n \t  cpu_beg = strtoul (env, &end, 0);\n-\t  if (errno || cpu_beg >= 65536)\n+\t  if (errno || end == env || cpu_beg >= 65536)\n \t    goto invalid;\n \t  cpu_end = cpu_beg;\n \t  cpu_stride = 1;\n@@ -1090,7 +1095,7 @@ parse_affinity (bool ignore)\n \t    {\n \t      errno = 0;\n \t      cpu_end = strtoul (++env, &end, 0);\n-\t      if (errno || cpu_end >= 65536 || cpu_end < cpu_beg)\n+\t      if (errno || end == env || cpu_end >= 65536 || cpu_end < cpu_beg)\n \t\tgoto invalid;\n \n \t      env = end;\n@@ -1202,27 +1207,30 @@ parse_gomp_openacc_dim (void)\n   /* The syntax is the same as for the -fopenacc-dim compilation option.  */\n   const char *var_name = \"GOMP_OPENACC_DIM\";\n   const char *env_var = getenv (var_name);\n+  const char *pos = env_var;\n+  int i;\n+\n   if (!env_var)\n     return;\n \n-  const char *pos = env_var;\n-  int i;\n   for (i = 0; *pos && i != GOMP_DIM_MAX; i++)\n     {\n+      char *eptr;\n+      long val;\n+\n       if (i && *pos++ != ':')\n \tbreak;\n \n       if (*pos == ':')\n \tcontinue;\n \n-      const char *eptr;\n       errno = 0;\n-      long val = strtol (pos, (char **)&eptr, 10);\n-      if (errno || val < 0 || (unsigned)val != val)\n+      val = strtol (pos, &eptr, 10);\n+      if (errno || eptr != pos || val < 0 || (unsigned)val != val)\n \tbreak;\n \n       goacc_default_dims[i] = (int)val;\n-      pos = eptr;\n+      pos = (const char *) eptr;\n     }\n }\n "}]}