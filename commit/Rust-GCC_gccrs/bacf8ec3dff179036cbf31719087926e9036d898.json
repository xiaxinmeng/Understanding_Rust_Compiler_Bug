{"sha": "bacf8ec3dff179036cbf31719087926e9036d898", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFjZjhlYzNkZmYxNzkwMzZjYmYzMTcxOTA4NzkyNmU5MDM2ZDg5OA==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2015-07-24T11:25:01Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-07-24T11:25:01Z"}, "message": "[PATCH 4/4] S390 -march=native related fixes\n\ngcc/ChangeLog\n\n\t* config/s390/s390.c (s390_reorg): Clean up handling of processors with\n\t-mtune=\n\t(s390_issue_rate): Likewise.\n\t(s390_sched_reorder): Likewise.\n\t(s390_sched_variable_issue): Likewise.\n\t(s390_loop_unroll_adjust): Likewise.\n\t(s390_option_override):  Likewise.\n\nFrom-SVN: r226147", "tree": {"sha": "29d62bc26cb27e2ffc095dfedbefd00cff8a1d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29d62bc26cb27e2ffc095dfedbefd00cff8a1d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bacf8ec3dff179036cbf31719087926e9036d898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bacf8ec3dff179036cbf31719087926e9036d898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bacf8ec3dff179036cbf31719087926e9036d898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bacf8ec3dff179036cbf31719087926e9036d898/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1b5aa2f2c8d1434d0b784609d229d23b13da9d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b5aa2f2c8d1434d0b784609d229d23b13da9d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b5aa2f2c8d1434d0b784609d229d23b13da9d8"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "00eab97855594af2d69321eecbc00d5caeb68461", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bacf8ec3dff179036cbf31719087926e9036d898/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bacf8ec3dff179036cbf31719087926e9036d898/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bacf8ec3dff179036cbf31719087926e9036d898", "patch": "@@ -1,3 +1,14 @@\n+2015-07-24  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_reorg): Clean up handling of processors\n+\twith\n+\t-mtune=\n+\t(s390_issue_rate): Likewise.\n+\t(s390_sched_reorder): Likewise.\n+\t(s390_sched_variable_issue): Likewise.\n+\t(s390_loop_unroll_adjust): Likewise.\n+\t(s390_option_override):  Likewise.\n+\n 2015-07-24  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/driver-native.c (s390_host_detect_local_cpu): Handle"}, {"sha": "17642435cbc8393b47efa00eb6e773b4edc9a5bb", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bacf8ec3dff179036cbf31719087926e9036d898/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bacf8ec3dff179036cbf31719087926e9036d898/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=bacf8ec3dff179036cbf31719087926e9036d898", "patch": "@@ -7304,11 +7304,15 @@ s390_issue_rate (void)\n       return 3;\n     case PROCESSOR_2097_Z10:\n       return 2;\n+    case PROCESSOR_9672_G5:\n+    case PROCESSOR_9672_G6:\n+    case PROCESSOR_2064_Z900:\n       /* Starting with EC12 we use the sched_reorder hook to take care\n \t of instruction dispatch constraints.  The algorithm only\n \t picks the best instruction and assumes only a single\n \t instruction gets issued per cycle.  */\n     case PROCESSOR_2827_ZEC12:\n+    case PROCESSOR_2964_Z13:\n     default:\n       return 1;\n     }\n@@ -12914,10 +12918,7 @@ s390_reorg (void)\n   s390_optimize_prologue ();\n \n   /* Walk over the insns and do some >=z10 specific changes.  */\n-  if (s390_tune == PROCESSOR_2097_Z10\n-      || s390_tune == PROCESSOR_2817_Z196\n-      || s390_tune == PROCESSOR_2827_ZEC12\n-      || s390_tune == PROCESSOR_2964_Z13)\n+  if (s390_tune >= PROCESSOR_2097_Z10)\n     {\n       rtx_insn *insn;\n       bool insn_added_p = false;\n@@ -13168,12 +13169,12 @@ static int\n s390_sched_reorder (FILE *file, int verbose,\n \t\t    rtx_insn **ready, int *nreadyp, int clock ATTRIBUTE_UNUSED)\n {\n-  if (s390_tune == PROCESSOR_2097_Z10)\n-    if (reload_completed && *nreadyp > 1)\n-      s390_z10_prevent_earlyload_conflicts (ready, nreadyp);\n+  if (s390_tune == PROCESSOR_2097_Z10\n+      && reload_completed\n+      && *nreadyp > 1)\n+    s390_z10_prevent_earlyload_conflicts (ready, nreadyp);\n \n-  if ((s390_tune == PROCESSOR_2827_ZEC12\n-       || s390_tune == PROCESSOR_2964_Z13)\n+  if (s390_tune >= PROCESSOR_2827_ZEC12\n       && reload_completed\n       && *nreadyp > 1)\n     {\n@@ -13256,8 +13257,7 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n {\n   last_scheduled_insn = insn;\n \n-  if ((s390_tune == PROCESSOR_2827_ZEC12\n-       || s390_tune == PROCESSOR_2964_Z13)\n+  if (s390_tune >= PROCESSOR_2827_ZEC12\n       && reload_completed\n       && recog_memoized (insn) >= 0)\n     {\n@@ -13335,10 +13335,7 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n   unsigned i;\n   unsigned mem_count = 0;\n \n-  if (s390_tune != PROCESSOR_2097_Z10\n-      && s390_tune != PROCESSOR_2817_Z196\n-      && s390_tune != PROCESSOR_2827_ZEC12\n-      && s390_tune != PROCESSOR_2964_Z13)\n+  if (s390_tune < PROCESSOR_2097_Z10)\n     return nunroll;\n \n   /* Count the number of memory references within the loop body.  */\n@@ -13553,10 +13550,7 @@ s390_option_override (void)\n     target_flags |= MASK_LONG_DOUBLE_128;\n #endif\n \n-  if (s390_tune == PROCESSOR_2097_Z10\n-      || s390_tune == PROCESSOR_2817_Z196\n-      || s390_tune == PROCESSOR_2827_ZEC12\n-      || s390_tune == PROCESSOR_2964_Z13)\n+  if (s390_tune >= PROCESSOR_2097_Z10)\n     {\n       maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 100,\n \t\t\t     global_options.x_param_values,"}]}