{"sha": "45d898e429e6537766aac1afea7dff39a7f136cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkODk4ZTQyOWU2NTM3NzY2YWFjMWFmZWE3ZGZmMzlhN2YxMzZjZA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2014-11-06T17:57:15Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-11-06T17:57:15Z"}, "message": "cond.md (movqicc_<code>_<mode>): Remove mode of conditional.\n\n* config/m32c/cond.md (movqicc_<code>_<mode>): Remove mode of\nconditional.\n(movhicc_<code>_<mode>): Likewise.\n* config/m32c/m32c.c (encode_pattern_1): Specialise PSImode\nsubregs.\n(m32c_eh_return_data_regno): Change to using memregs to avoid\ntying up all the compute regs.\n(m32c_legitimate_address_p) Subregs are not valid addresses.\n\nFrom-SVN: r217200", "tree": {"sha": "4108cc8ae8bf7cb695afcfa9288ee9f126c6df7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4108cc8ae8bf7cb695afcfa9288ee9f126c6df7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45d898e429e6537766aac1afea7dff39a7f136cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d898e429e6537766aac1afea7dff39a7f136cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d898e429e6537766aac1afea7dff39a7f136cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d898e429e6537766aac1afea7dff39a7f136cd/comments", "author": null, "committer": null, "parents": [{"sha": "2f21e1ba46762bceac682c433028627f6953ed50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f21e1ba46762bceac682c433028627f6953ed50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f21e1ba46762bceac682c433028627f6953ed50"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "d59a36043920c563fbab9d3bcfb47c9f98764084", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d898e429e6537766aac1afea7dff39a7f136cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d898e429e6537766aac1afea7dff39a7f136cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45d898e429e6537766aac1afea7dff39a7f136cd", "patch": "@@ -1,3 +1,14 @@\n+2014-11-06  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/cond.md (movqicc_<code>_<mode>): Remove mode of\n+\tconditional.\n+\t(movhicc_<code>_<mode>): Likewise.\n+\t* config/m32c/m32c.c (encode_pattern_1): Specialise PSImode\n+\tsubregs.\n+\t(m32c_eh_return_data_regno): Change to using memregs to avoid\n+\ttying up all the compute regs.\n+\t(m32c_legitimate_address_p) Subregs are not valid addresses.\n+\n 2014-11-06  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* target.def (call_args, end_call_args): New hooks."}, {"sha": "aebdcaf6bcbb40067f87f188ab4eeab51233107d", "filename": "gcc/config/m32c/cond.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d898e429e6537766aac1afea7dff39a7f136cd/gcc%2Fconfig%2Fm32c%2Fcond.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d898e429e6537766aac1afea7dff39a7f136cd/gcc%2Fconfig%2Fm32c%2Fcond.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fcond.md?ref=45d898e429e6537766aac1afea7dff39a7f136cd", "patch": "@@ -204,8 +204,8 @@\n \n (define_insn_and_split \"movqicc_<code>_<mode>\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=R0w\")\n-        (if_then_else:QI (eqne_cond:QI (match_operand:QHPSI 1 \"mra_operand\" \"RraSd\")\n-\t\t\t\t       (match_operand:QHPSI 2 \"mrai_operand\" \"RraSdi\"))\n+        (if_then_else:QI (eqne_cond (match_operand:QHPSI 1 \"mra_operand\" \"RraSd\")\n+\t\t\t\t    (match_operand:QHPSI 2 \"mrai_operand\" \"RraSdi\"))\n \t\t\t  (match_operand:QI 3 \"const_int_operand\" \"\")\n \t\t\t  (match_operand:QI 4 \"const_int_operand\" \"\")))]\n   \"\"\n@@ -215,7 +215,7 @@\n \t(compare (match_dup 1)\n \t\t (match_dup 2)))\n    (set (match_dup 0)\n-        (if_then_else:QI (eqne_cond:QI (reg:CC FLG_REGNO) (const_int 0))\n+        (if_then_else:QI (eqne_cond (reg:CC FLG_REGNO) (const_int 0))\n \t\t\t (match_dup 3)\n \t\t\t (match_dup 4)))]\n   \"\"\n@@ -224,18 +224,18 @@\n \n (define_insn_and_split \"movhicc_<code>_<mode>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=R0w\")\n-        (if_then_else:HI (eqne_cond:HI (match_operand:QHPSI 1 \"mra_operand\" \"RraSd\")\n-\t\t\t\t       (match_operand:QHPSI 2 \"mrai_operand\" \"RraSdi\"))\n-\t\t\t  (match_operand:QI 3 \"const_int_operand\" \"\")\n-\t\t\t  (match_operand:QI 4 \"const_int_operand\" \"\")))]\n+        (if_then_else:HI (eqne_cond (match_operand:QHPSI 1 \"mra_operand\" \"RraSd\")\n+\t\t\t\t    (match_operand:QHPSI 2 \"mrai_operand\" \"RraSdi\"))\n+\t\t\t  (match_operand:HI 3 \"const_int_operand\" \"\")\n+\t\t\t  (match_operand:HI 4 \"const_int_operand\" \"\")))]\n   \"TARGET_A24\"\n   \"#\"\n   \"reload_completed\"\n   [(set (reg:CC FLG_REGNO)\n \t(compare (match_dup 1)\n \t\t (match_dup 2)))\n    (set (match_dup 0)\n-        (if_then_else:HI (eqne_cond:HI (reg:CC FLG_REGNO) (const_int 0))\n+        (if_then_else:HI (eqne_cond (reg:CC FLG_REGNO) (const_int 0))\n \t\t\t (match_dup 3)\n \t\t\t (match_dup 4)))]\n   \"\""}, {"sha": "fa0e883c37db97a7258c892da1a0e4de9b649963", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d898e429e6537766aac1afea7dff39a7f136cd/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d898e429e6537766aac1afea7dff39a7f136cd/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=45d898e429e6537766aac1afea7dff39a7f136cd", "patch": "@@ -195,6 +195,9 @@ encode_pattern_1 (rtx x)\n       if (GET_MODE_SIZE (GET_MODE (x)) !=\n \t  GET_MODE_SIZE (GET_MODE (XEXP (x, 0))))\n \t*patternp++ = 'S';\n+      if (GET_MODE (x) == PSImode\n+\t  && GET_CODE (XEXP (x, 0)) == REG)\n+\t*patternp++ = 'S';\n       encode_pattern_1 (XEXP (x, 0));\n       break;\n     case MEM:\n@@ -1008,12 +1011,9 @@ m32c_eh_return_data_regno (int n)\n   switch (n)\n     {\n     case 0:\n-      return A0_REGNO;\n+      return MEM0_REGNO;\n     case 1:\n-      if (TARGET_A16)\n-\treturn R3_REGNO;\n-      else\n-\treturn R1_REGNO;\n+      return MEM0_REGNO+4;\n     default:\n       return INVALID_REGNUM;\n     }\n@@ -1790,6 +1790,8 @@ m32c_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n \t  /*    case SB_REGNO: */\n \t  return 1;\n \tdefault:\n+\t  if (GET_CODE (reg) == SUBREG)\n+\t    return 0;\n \t  if (IS_PSEUDO (reg, strict))\n \t    return 1;\n \t  return 0;"}]}