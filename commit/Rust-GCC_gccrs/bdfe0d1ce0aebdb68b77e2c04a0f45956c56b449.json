{"sha": "bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "node_id": "C_kwDOANBUbNoAKGJkZmUwZDFjZTBhZWJkYjY4Yjc3ZTJjMDRhMGY0NTk1NmM1NmI0NDk", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-31T12:31:12Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-01T07:08:29Z"}, "message": "Make frange selftests work on !HONOR_NANS systems.\n\nI'm just shuffling the FP self tests here, with no change to existing\nfunctionality.\n\nIf we agree that explicit NANs in the source code with !HONOR_NANS\nshould behave any differently, I'm happy to address whatever needs\nfixing, but for now I'd like to unblock the !HONOR_NANS build systems.\n\nI have added an adaptation of a test Jakub suggested we handle in the PR:\n\nvoid funk(int cond)\n{\n  float x;\n\n  if (cond)\n    x = __builtin_nan (\"\");\n  else\n    x = 1.24;\n\n  bar(x);\n}\n\nFor !HONOR_NANS, the range for the PHI of x_1 is the union of 1.24 and\nNAN which is really 1.24 with a maybe NAN.  This reflects the IL-- the\npresence of the actual NAN.  However, VRP will propagate this because\nit sees the 1.24 and ignores the possibility of a NAN, per\n!HONOR_NANS.  IMO, this is correct.  OTOH, for HONOR_NANS the unknown\nNAN property keeps us from propagating the value.\n\nIs there a reason we don't warn for calls to __builtin_nan when\n!HONOR_NANS?  That makes no sense to me.\n\n\tPR tree-optimization/106785\n\ngcc/ChangeLog:\n\n\t* value-range.cc (range_tests_nan): Adjust tests for !HONOR_NANS.\n\t(range_tests_floats): Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp-float-nan-1.c: New test.", "tree": {"sha": "1b4697330f2a36936588cd59cf9f2d188044795a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b4697330f2a36936588cd59cf9f2d188044795a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8f4e8af148694ae2fd444a0cdcf713910d23fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8f4e8af148694ae2fd444a0cdcf713910d23fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8f4e8af148694ae2fd444a0cdcf713910d23fd"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "126949b2b4cdf738b75c3aacb2dace5de27beb71", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp-float-nan-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-nan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-nan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-nan-1.c?ref=bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -ffinite-math-only -fdump-tree-evrp\" }\n+\n+void bar(float);\n+\n+void funk(int cond)\n+{\n+  float x;\n+\n+  if (cond)\n+    x = __builtin_nan (\"\");\n+  else\n+    x = 1.24;\n+\n+  bar(x);\n+}\n+\n+// { dg-final { scan-tree-dump-times \"bar \\\\(1.24\" 1 \"evrp\" } }"}, {"sha": "3c7d4cb84b931e32bab274785f80a3466276b4ce", "filename": "gcc/value-range.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=bdfe0d1ce0aebdb68b77e2c04a0f45956c56b449", "patch": "@@ -3535,13 +3535,16 @@ range_tests_nan ()\n   REAL_VALUE_TYPE q, r;\n \n   // Equal ranges but with differing NAN bits are not equal.\n-  r1 = frange_float (\"10\", \"12\");\n-  r0 = r1;\n-  ASSERT_EQ (r0, r1);\n-  r0.set_nan (fp_prop::NO);\n-  ASSERT_NE (r0, r1);\n-  r0.set_nan (fp_prop::YES);\n-  ASSERT_NE (r0, r1);\n+  if (HONOR_NANS (float_type_node))\n+    {\n+      r1 = frange_float (\"10\", \"12\");\n+      r0 = r1;\n+      ASSERT_EQ (r0, r1);\n+      r0.set_nan (fp_prop::NO);\n+      ASSERT_NE (r0, r1);\n+      r0.set_nan (fp_prop::YES);\n+      ASSERT_NE (r0, r1);\n+    }\n \n   // NAN ranges are not equal to each other.\n   r0 = frange_nan (float_type_node);\n@@ -3624,9 +3627,11 @@ range_tests_floats ()\n   if (HONOR_SIGNED_ZEROS (float_type_node))\n     range_tests_signed_zeros ();\n \n-  // A range of [-INF,+INF] is actually VARYING...\n+  // A range of [-INF,+INF] is actually VARYING if no other properties\n+  // are set.\n   r0 = frange_float (\"-Inf\", \"+Inf\");\n-  ASSERT_TRUE (r0.varying_p ());\n+  if (r0.get_nan ().varying_p ())\n+    ASSERT_TRUE (r0.varying_p ());\n   // ...unless it has some special property...\n   r0.set_nan (fp_prop::NO);\n   ASSERT_FALSE (r0.varying_p ());"}]}