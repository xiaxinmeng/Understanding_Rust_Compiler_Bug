{"sha": "618bccf9847235899b2b35452c8947d838007a3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4YmNjZjk4NDcyMzU4OTliMmIzNTQ1MmM4OTQ3ZDgzODAwN2EzYg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-02T21:06:43Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-02T21:06:43Z"}, "message": "type reg_equiv_init as rtx_insn_list\n\ngcc/ChangeLog:\n\n2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* reload.h (struct reg_equivs_t): Change type of init to\n\trtx_insn *.\n\t* ira.c (fix_reg_equiv_init): Adjust.\n\t* reload1.c (eliminate_regs_1): Likewise.\n\t(init_eliminable_invariants): Likewise.\n\nFrom-SVN: r222740", "tree": {"sha": "b5d0c2006a445e28d8a8b42d5fed54180c2f1bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d0c2006a445e28d8a8b42d5fed54180c2f1bf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/618bccf9847235899b2b35452c8947d838007a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618bccf9847235899b2b35452c8947d838007a3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618bccf9847235899b2b35452c8947d838007a3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618bccf9847235899b2b35452c8947d838007a3b/comments", "author": null, "committer": null, "parents": [{"sha": "8df68a82190bc0bf6c3bf3a7a3576e296fc5d3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df68a82190bc0bf6c3bf3a7a3576e296fc5d3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df68a82190bc0bf6c3bf3a7a3576e296fc5d3ef"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "59fa7f77c8d73570d60831e1061374a4a6aab926", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bccf9847235899b2b35452c8947d838007a3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bccf9847235899b2b35452c8947d838007a3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=618bccf9847235899b2b35452c8947d838007a3b", "patch": "@@ -1,3 +1,11 @@\n+2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* reload.h (struct reg_equivs_t): Change type of init to\n+\trtx_insn *.\n+\t* ira.c (fix_reg_equiv_init): Adjust.\n+\t* reload1.c (eliminate_regs_1): Likewise.\n+\t(init_eliminable_invariants): Likewise.\n+\n 2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* cselib.c (fp_setter_insn): Take a rtx_insn *."}, {"sha": "ab8e9cee86caadcd65484133c12828888ac73f1f", "filename": "gcc/ira.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bccf9847235899b2b35452c8947d838007a3b/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bccf9847235899b2b35452c8947d838007a3b/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=618bccf9847235899b2b35452c8947d838007a3b", "patch": "@@ -2709,20 +2709,22 @@ fix_reg_equiv_init (void)\n {\n   int max_regno = max_reg_num ();\n   int i, new_regno, max;\n-  rtx x, prev, next, insn, set;\n+  rtx set;\n+  rtx_insn_list *x, *next, *prev;\n+  rtx_insn *insn;\n \n   if (max_regno_before_ira < max_regno)\n     {\n       max = vec_safe_length (reg_equivs);\n       grow_reg_equivs ();\n       for (i = FIRST_PSEUDO_REGISTER; i < max; i++)\n-\tfor (prev = NULL_RTX, x = reg_equiv_init (i);\n+\tfor (prev = NULL, x = reg_equiv_init (i);\n \t     x != NULL_RTX;\n \t     x = next)\n \t  {\n-\t    next = XEXP (x, 1);\n-\t    insn = XEXP (x, 0);\n-\t    set = single_set (as_a <rtx_insn *> (insn));\n+\t    next = x->next ();\n+\t    insn = x->insn ();\n+\t    set = single_set (insn);\n \t    ira_assert (set != NULL_RTX\n \t\t\t&& (REG_P (SET_DEST (set)) || REG_P (SET_SRC (set))));\n \t    if (REG_P (SET_DEST (set))"}, {"sha": "a58b9025bf55b11c6a87dc77ec64ee335ee9d9ef", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bccf9847235899b2b35452c8947d838007a3b/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bccf9847235899b2b35452c8947d838007a3b/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=618bccf9847235899b2b35452c8947d838007a3b", "patch": "@@ -239,7 +239,7 @@ struct reg_equivs_t\n \n   /* The list of insns that initialized reg N from its equivalent\n      constant or memory slot.  */\n-  rtx init;\n+  rtx_insn_list *init;\n };\n \n #define reg_equiv_constant(ELT) \\"}, {"sha": "4c4790692568d503c9080b104a90c30b7e1e4209", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bccf9847235899b2b35452c8947d838007a3b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bccf9847235899b2b35452c8947d838007a3b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=618bccf9847235899b2b35452c8947d838007a3b", "patch": "@@ -2619,7 +2619,7 @@ eliminate_regs_1 (rtx x, machine_mode mem_mode, rtx insn,\n \t\t\t             mem_mode, insn, true, for_costs);\n \t  /* There exists at least one use of REGNO that cannot be\n \t     eliminated.  Prevent the defining insn from being deleted.  */\n-\t  reg_equiv_init (regno) = NULL_RTX;\n+\t  reg_equiv_init (regno) = NULL;\n \t  if (!for_costs)\n \t    alter_reg (regno, -1, true);\n \t}\n@@ -4252,17 +4252,17 @@ init_eliminable_invariants (rtx_insn *first, bool do_subregs)\n \t\t    {\n \t\t      reg_equiv_memory_loc (i) = force_const_mem (mode, x);\n \t\t      if (! reg_equiv_memory_loc (i))\n-\t\t\treg_equiv_init (i) = NULL_RTX;\n+\t\t\treg_equiv_init (i) = NULL;\n \t\t    }\n \t\t}\n \t      else\n \t\t{\n-\t\t  reg_equiv_init (i) = NULL_RTX;\n+\t\t  reg_equiv_init (i) = NULL;\n \t\t  continue;\n \t\t}\n \t    }\n \t  else\n-\t    reg_equiv_init (i) = NULL_RTX;\n+\t    reg_equiv_init (i) = NULL;\n \t}\n     }\n "}]}