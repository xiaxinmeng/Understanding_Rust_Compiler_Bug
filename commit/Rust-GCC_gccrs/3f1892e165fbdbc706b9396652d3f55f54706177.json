{"sha": "3f1892e165fbdbc706b9396652d3f55f54706177", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxODkyZTE2NWZiZGJjNzA2YjkzOTY2NTJkM2Y1NWY1NDcwNjE3Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-06-15T16:42:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-06-15T16:42:46Z"}, "message": "cp-tree.h (class_cache_firstobj): Declare.\n\n\t* cp-tree.h (class_cache_firstobj): Declare.\n\t(maybe_push_cache_obstack): Rename to push_cache_obstack.\n\t* class.c (permanent_obstack): Remove declaration.\n\t(class_cache_firstobj): Make it global.\n\t(add_method): Don't use permanent_obstack directly.\n\t(pushclass): Only free the class_cache_obstack if we know how far\n\tback to free it.\n\t(maybe_push_cache_obstack): Rename to push_cache_obstack.\n\t* decl.c: Remove dead comment.\n\t(saved_scope): Add class_cache_firstobj.\n\t(push_to_top_level): Save it.\n\t(pop_from_top_level): Restore it.\n\t(push_class_level_binding): Use push_cache_obstack, not\n\tmaybe_push_cache_obstack.\n\t* search.c (push_class_decls): Likewise.\n\nFrom-SVN: r27534", "tree": {"sha": "65e6067fe38f2ccc0452eeb9a3e276c323d4f05a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65e6067fe38f2ccc0452eeb9a3e276c323d4f05a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f1892e165fbdbc706b9396652d3f55f54706177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1892e165fbdbc706b9396652d3f55f54706177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1892e165fbdbc706b9396652d3f55f54706177", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1892e165fbdbc706b9396652d3f55f54706177/comments", "author": null, "committer": null, "parents": [{"sha": "c4e992aee91276c3f62c4194fdd7881d51c6f17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e992aee91276c3f62c4194fdd7881d51c6f17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e992aee91276c3f62c4194fdd7881d51c6f17c"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "0f87c30c2db230003b621e665a4534ecb200da7b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f1892e165fbdbc706b9396652d3f55f54706177", "patch": "@@ -1,3 +1,21 @@\n+1999-06-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (class_cache_firstobj): Declare.\n+\t(maybe_push_cache_obstack): Rename to push_cache_obstack.\n+\t* class.c (permanent_obstack): Remove declaration.\n+\t(class_cache_firstobj): Make it global.\n+\t(add_method): Don't use permanent_obstack directly.\n+\t(pushclass): Only free the class_cache_obstack if we know how far\n+\tback to free it.\n+\t(maybe_push_cache_obstack): Rename to push_cache_obstack.\n+\t* decl.c: Remove dead comment.\n+\t(saved_scope): Add class_cache_firstobj.\n+\t(push_to_top_level): Save it.\n+\t(pop_from_top_level): Restore it.\n+\t(push_class_level_binding): Use push_cache_obstack, not\n+\tmaybe_push_cache_obstack.\n+\t* search.c (push_class_decls): Likewise.\n+\t\n 1999-06-14  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* pt.c (tsubst_friend_function): Push into namespace of friend"}, {"sha": "a04d2a05e016d9e84eec36b99aec15efe49336d7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3f1892e165fbdbc706b9396652d3f55f54706177", "patch": "@@ -36,8 +36,6 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern struct obstack permanent_obstack;\n-\n /* This is how we tell when two virtual member functions are really the\n    same.  */\n #define SAME_FN(FN1DECL, FN2DECL) (DECL_ASSEMBLER_NAME (FN1DECL) == DECL_ASSEMBLER_NAME (FN2DECL))\n@@ -90,7 +88,7 @@ tree previous_class_values;\t/* TREE_LIST: copy of the class_shadowed list\n static struct obstack class_cache_obstack;\n /* The first object allocated on that obstack.  We can use\n    obstack_free with tis value to free the entire obstack.  */\n-static char *class_cache_firstobj;\n+char *class_cache_firstobj;\n \n struct base_info;\n \n@@ -1136,7 +1134,8 @@ void\n add_method (type, fields, method)\n      tree type, *fields, method;\n {\n-  push_obstacks (&permanent_obstack, &permanent_obstack);\n+  push_obstacks_nochange ();\n+  end_temporary_allocation ();\n \n   /* Setting the DECL_CONTEXT and DECL_CLASS_CONTEXT here is probably\n      redundant.  */\n@@ -4440,7 +4439,8 @@ pushclass (type, modify)\n       invalidate_class_lookup_cache ();\n \n       /* Now, free the obstack on which we cached all the values.  */\n-      obstack_free (&class_cache_obstack, class_cache_firstobj);\n+      if (class_cache_firstobj)\n+\tobstack_free (&class_cache_obstack, class_cache_firstobj);\n       class_cache_firstobj \n \t= (char*) obstack_finish (&class_cache_obstack);\n     }\n@@ -5197,7 +5197,7 @@ print_class_statistics ()\n    effect is undone by pop_obstacks.  */\n \n void\n-maybe_push_cache_obstack ()\n+push_cache_obstack ()\n {\n   static int cache_obstack_initialized;\n "}, {"sha": "4d243b4a53b374f6b0d95a337c9830b56a5d0c45", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3f1892e165fbdbc706b9396652d3f55f54706177", "patch": "@@ -2253,6 +2253,9 @@ extern int current_class_depth;\n extern tree current_lang_name;\n extern tree lang_name_cplusplus, lang_name_c, lang_name_java;\n \n+/* The low-water mark on the class-cache obstack.  */\n+extern char *class_cache_firstobj;\n+\n /* Points to the name of that function. May not be the DECL_NAME\n    of CURRENT_FUNCTION_DECL due to overloading */\n extern tree original_function_name;\n@@ -2744,7 +2747,7 @@ extern void push_lang_context\t\t\tPROTO((tree));\n extern void pop_lang_context\t\t\tPROTO((void));\n extern tree instantiate_type\t\t\tPROTO((tree, tree, int));\n extern void print_class_statistics\t\tPROTO((void));\n-extern void maybe_push_cache_obstack\t\tPROTO((void));\n+extern void push_cache_obstack\t\t        PROTO((void));\n extern unsigned HOST_WIDE_INT skip_rtti_stuff\tPROTO((tree *, tree));\n extern void build_self_reference\t\tPROTO((void));\n extern void warn_hidden\t\t\t\tPROTO((tree));"}, {"sha": "1fc452551dce4e2287b761f1203931bce8e789c3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3f1892e165fbdbc706b9396652d3f55f54706177", "patch": "@@ -63,8 +63,6 @@ extern tree global_namespace;\n extern void (*print_error_function) PROTO((char *));\n extern int (*valid_lang_attribute) PROTO ((tree, tree, tree, tree));\n \n-/* Stack of places to restore the search obstack back to.  */\n-   \n /* Obstack used for remembering local class declarations (like\n    enums and static (const) members.  */\n #include \"stack.h\"\n@@ -2466,6 +2464,7 @@ struct saved_scope {\n   tree previous_class_type, previous_class_values;\n   int processing_specialization;\n   int processing_explicit_instantiation;\n+  char *class_cache_firstobj;\n };\n static struct saved_scope *current_saved_scope;\n \n@@ -2583,6 +2582,7 @@ maybe_push_to_top_level (pseudo)\n   s->processing_template_decl = processing_template_decl;\n   s->previous_class_type = previous_class_type;\n   s->previous_class_values = previous_class_values;\n+  s->class_cache_firstobj = class_cache_firstobj;\n   s->processing_specialization = processing_specialization;\n   s->processing_explicit_instantiation = processing_explicit_instantiation;\n \n@@ -2598,6 +2598,7 @@ maybe_push_to_top_level (pseudo)\n   shadowed_labels = NULL_TREE;\n   minimal_parse_mode = 0;\n   previous_class_type = previous_class_values = NULL_TREE;\n+  class_cache_firstobj = 0;\n   processing_specialization = 0;\n   processing_explicit_instantiation = 0;\n   current_template_parms = NULL_TREE;\n@@ -2669,6 +2670,7 @@ pop_from_top_level ()\n   previous_class_values = s->previous_class_values;\n   processing_specialization = s->processing_specialization;\n   processing_explicit_instantiation = s->processing_explicit_instantiation;\n+  class_cache_firstobj = s->class_cache_firstobj;\n \n   free (s);\n \n@@ -4471,7 +4473,7 @@ push_class_level_binding (name, x)\n      IDENTIFIER_CLASS_VALUE.  */\n   if (push_class_binding (name, x))\n     {\n-      maybe_push_cache_obstack ();\n+      push_cache_obstack ();\n       class_binding_level->class_shadowed\n \t= tree_cons (name, IDENTIFIER_CLASS_VALUE (name),\n \t\t     class_binding_level->class_shadowed);"}, {"sha": "75a1ac2c8c5337e19a40642e28d45646ce04e930", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1892e165fbdbc706b9396652d3f55f54706177/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=3f1892e165fbdbc706b9396652d3f55f54706177", "patch": "@@ -2982,15 +2982,15 @@ push_class_decls (type)\n   /* Build up all the relevant bindings and such on the cache\n      obstack.  That way no memory is wasted when we throw away the\n      cache later.  */\n-  maybe_push_cache_obstack ();\n+  push_cache_obstack ();\n \n   /* Enter type declarations and mark.  */\n   dfs_walk (TYPE_BINFO (type), dfs_push_type_decls, unmarked_pushdecls_p, 0);\n \n   /* Enter non-type declarations and unmark.  */\n   dfs_walk (TYPE_BINFO (type), dfs_push_decls, marked_pushdecls_p, 0);\n \n-  /* Undo the call to maybe_push_cache_obstack above.  */\n+  /* Undo the call to push_cache_obstack above.  */\n   pop_obstacks ();\n \n   current_obstack = ambient_obstack;"}]}