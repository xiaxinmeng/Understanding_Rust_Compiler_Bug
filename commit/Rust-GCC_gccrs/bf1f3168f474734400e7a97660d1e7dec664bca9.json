{"sha": "bf1f3168f474734400e7a97660d1e7dec664bca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxZjMxNjhmNDc0NzM0NDAwZTdhOTc2NjBkMWU3ZGVjNjY0YmNhOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-24T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-24T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "220fd7ed5f2e818008469a64b6e9834806bcfff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220fd7ed5f2e818008469a64b6e9834806bcfff9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1f3168f474734400e7a97660d1e7dec664bca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1f3168f474734400e7a97660d1e7dec664bca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1f3168f474734400e7a97660d1e7dec664bca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1f3168f474734400e7a97660d1e7dec664bca9/comments", "author": null, "committer": null, "parents": [{"sha": "be70bb5e4babdf9d3d33e8f4658452038407fa8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be70bb5e4babdf9d3d33e8f4658452038407fa8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be70bb5e4babdf9d3d33e8f4658452038407fa8e"}], "stats": {"total": 320, "additions": 319, "deletions": 1}, "files": [{"sha": "ba411e22ce52d1b4cc1a0cc2396cc88af76750c8", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,7 @@\n+2021-03-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* MAINTAINERS: Add myself as static analyzer maintainer.\n+\n 2021-03-18  Jeff Law  <jlaw@tachyum.com>\n \n \t* MAINTAINERS: Update primary entry."}, {"sha": "ee7b5b57556871b6f5ae0369708abae56354bd14", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,7 @@\n+2021-03-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Fix broken tests.\n+\n 2021-03-22  Martin Liska  <mliska@suse.cz>\n \n \t* mklog.py: Add --directory argument."}, {"sha": "ef6f626335c3c5e3308be1884f265f73cfe1582d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,118 @@\n+2021-03-23  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99581\n+\t* config/aarch64/constraints.md (Utq, UOb, UOh, UOw, UOd, UOty):\n+\tUse define_relaxed_memory_constraint for them.\n+\n+2021-03-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/99733\n+\t* config/host-darwin.c (darwin_gt_pch_use_address): Add a\n+\tcolon to the diagnostic message.\n+\n+2021-03-23  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* fwprop.c (fwprop_propagation::fwprop_propagation): Look at\n+\tset_info's uses.\n+\t(try_fwprop_subst_note): Use set_info instead of insn_info.\n+\t(try_fwprop_subst_pattern): Likewise.\n+\t(try_fwprop_subst_notes): Likewise.\n+\t(try_fwprop_subst): Likewise.\n+\t(forward_propagate_subreg): Likewise.\n+\t(forward_propagate_and_simplify): Likewise.\n+\t(forward_propagate_into): Likewise.\n+\t* rtl-ssa/accesses.h (set_info::single_nondebug_use) New\n+\tmethod.\n+\t(set_info::single_nondebug_insn_use): Likewise.\n+\t(set_info::single_phi_use): Likewise.\n+\t* rtl-ssa/member-fns.inl (set_info::single_nondebug_use) New\n+\tmethod.\n+\t(set_info::single_nondebug_insn_use): Likewise.\n+\t(set_info::single_phi_use): Likewise.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* doc/sourcebuild.texi (arm_dsp_ok, arm_dsp): Document.\n+\n+2021-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99540\n+\t* config/aarch64/aarch64.c (aarch64_add_offset): Tell\n+\texpand_mult to perform an unsigned rather than a signed\n+\tmultiplication.\n+\n+2021-03-23  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99704\n+\t* config/i386/cpuid.h (__cpuid): Add __volatile__.\n+\t(__cpuid_count): Likewise.\n+\n+2021-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99721\n+\t* tree-vect-slp.c (vect_slp_analyze_node_operations):\n+\tMake sure we can schedule the node.\n+\n+2021-03-23  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* config/riscv/riscv.c (riscv_subword): Take endianness into\n+\taccount when calculating the byte offset.\n+\n+2021-03-23  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* config/riscv/predicates.md (subreg_lowpart_operator): New predicate\n+\t* config/riscv/riscv.md (*addsi3_extended2, *subsi3_extended2)\n+\t(*negsi2_extended2, *mulsi3_extended2, *<optab>si3_mask)\n+\t(*<optab>si3_mask_1, *<optab>di3_mask, *<optab>di3_mask_1)\n+\t(*<optab>si3_extend_mask, *<optab>si3_extend_mask_1): Use\n+\tnew predicate \"subreg_lowpart_operator\"\n+\n+2021-03-23  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* config/riscv/riscv.c (riscv_swap_instruction): New function\n+\tto byteswap an SImode rtx containing an instruction.\n+\t(riscv_trampoline_init): Byteswap the generated instructions\n+\twhen needed.\n+\n+2021-03-23  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* common/config/riscv/riscv-common.c\n+\t(TARGET_DEFAULT_TARGET_FLAGS): Set default endianness.\n+\t* config.gcc (riscv32be-*, riscv64be-*): Set\n+\tTARGET_BIG_ENDIAN_DEFAULT to 1.\n+\t* config/riscv/elf.h (LINK_SPEC): Change -melf* value\n+\tdepending on default endianness.\n+\t* config/riscv/freebsd.h (LINK_SPEC): Likewise.\n+\t* config/riscv/linux.h (LINK_SPEC): Likewise.\n+\t* config/riscv/riscv.c (TARGET_DEFAULT_TARGET_FLAGS): Set\n+\tdefault endianness.\n+\t* config/riscv/riscv.h (DEFAULT_ENDIAN_SPEC): New macro.\n+\n+2021-03-23  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* config/riscv/elf.h (LINK_SPEC): Pass linker endianness flag.\n+\t* config/riscv/freebsd.h (LINK_SPEC): Likewise.\n+\t* config/riscv/linux.h (LINK_SPEC): Likewise.\n+\t* config/riscv/riscv.h (ASM_SPEC): Pass -mbig-endian and\n+\t-mlittle-endian.\n+\t(BYTES_BIG_ENDIAN): Handle big endian.\n+\t(WORDS_BIG_ENDIAN): Define to BYTES_BIG_ENDIAN.\n+\t* config/riscv/riscv.opt (-mbig-endian, -mlittle-endian): New\n+\toptions.\n+\t* doc/invoke.texi (-mbig-endian, -mlittle-endian): Document.\n+\n+2021-03-23  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* regcprop.c (find_oldest_value_reg): Ask target whether\n+\t  different mode is fine for replacement register.\n+\n+2021-03-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/99296\n+\t* value-range.cc (irange::irange_set_1bit_anti_range): New.\n+\t(irange::irange_set_anti_range): Call irange_set_1bit_anti_range\n+\t* value-range.h (irange::irange_set_1bit_anti_range): New.\n+\n 2021-03-22  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR target/99581"}, {"sha": "991050a66d62820a3efca091570eba9575a1dc7c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1 +1 @@\n-20210323\n+20210324"}, {"sha": "8133098b3873f22cb678514b95ea7de541e765c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,27 @@\n+2021-03-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* name-lookup.c (check_module_override): Set global or partition\n+\tDUP on the binding vector.\n+\n+2021-03-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99318\n+\t* decl2.c (cp_warn_deprecated_use_scopes): Only call\n+\tcp_warn_deprecated_use when decl is a namespace, class, or enum.\n+\n+2021-03-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99239\n+\t* decl.c (duplicate_decls): Remove assert about maybe-imported\n+\tartificial decls.\n+\n+2021-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99650\n+\t* decl.c (cp_finish_decomp): Diagnose void initializers when\n+\tusing tuple_element and get.\n+\n 2021-03-22  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99480"}, {"sha": "94faac5de9054a585acc73b671aae2e940ba93ec", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,11 @@\n+2021-03-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/93660\n+\t* trans-decl.c (build_function_decl): Add comment;\n+\tincrement hidden_typelist for caf_token/caf_offset.\n+\t* trans-types.c (gfc_get_function_type): Add comment;\n+\tadd missing caf_token/caf_offset args.\n+\n 2021-03-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/99688"}, {"sha": "53a5447e30e93152c4527cfb9db301eb06777016", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,13 @@\n+2021-03-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,\n+\tzh_TW.po: Update.\n+\n+2021-03-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* sv.po: Update.\n+\n 2021-03-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "8ee6b10cc0272d1412afac28e21e2781183f10cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,133 @@\n+2021-03-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* g++.dg/modules/pr99283-1_a.H: New.\n+\t* g++.dg/modules/pr99283-1_b.H: New.\n+\n+2021-03-23  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/long-double-asm-abi.c: New test.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_dsp_ok_nocache)\n+\t(check_effective_target_arm_dsp_ok, add_options_for_arm_dsp): New.\n+\t* gcc.target/arm/acle/dsp_arith.c: Use arm_dsp_ok effective target\n+\tand add arm_dsp options.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_v8_1m_mve_fp_ok_nocache): Fix\n+\t-mfloat-abi= options order.\n+\t(check_effective_target_arm_v8_1m_mve_ok_nocache): Likewise\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_float2.c: Add\n+\tarm_hard_ok effective target and -mfloat-abi=hard additional\n+\toption.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_int.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_uint.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_uint1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_uint2.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c: Likewise.\n+\t* gcc.target/arm/armv8_1m-fp16-move-1.c: Add -mfloat-abi=hard\n+\tadditional option.\n+\t* gcc.target/arm/armv8_1m-fp32-move-1.c: Likewise.\n+\t* gcc.target/arm/armv8_1m-fp64-move-1.c: Likewise.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_v8_2a_i8mm_ok_nocache): Fix\n+\t-mfloat-abi= options order.\n+\t(check_effective_target_arm_v8_2a_bf16_neon_ok_nocache): Likewise.\n+\t* gcc.target/arm/bfloat16_scalar_1_1.c: Add arm_hard_ok effective\n+\ttarget and -mfloat-abi=hard additional option.\n+\t* gcc.target/arm/bfloat16_simd_1_1.c: Likewise.\n+\t* gcc.target/arm/simd/bf16_ma_1.c: Likewise.\n+\t* gcc.target/arm/simd/bf16_mmla_1.c: Likewise.\n+\t* gcc.target/arm/simd/vdot-2-1.c: Likewise.\n+\t* gcc.target/arm/simd/vdot-2-2.c: Likewise.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/armv8_2-fp16-scalar-2.c: Add arm_hard_ok.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/bfloat16_simd_1_2.c: Add arm_softfp_ok.\n+\t* gcc.target/arm/bfloat16_simd_2_2.c: Likewise.\n+\t* gcc.target/arm/bfloat16_simd_3_2.c: Likewise.\n+\t* gcc.target/arm/pr51968.c: Likewise.\n+\t* gcc.target/arm/bfloat16_simd_2_1.c: arm_hard_ok.\n+\t* gcc.target/arm/bfloat16_simd_3_1.c: Likewise.\n+\t* gcc.target/arm/simd/bf16_vldn_1.c: Likewise.\n+\t* gcc.target/arm/simd/bf16_vstn_1.c: Likewise.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/armv8_1m-shift-imm-1.c: Remove -mfloat=abi option.\n+\t* gcc.target/arm/armv8_1m-shift-reg-1.c: Likewise.\n+\t* gcc.target/arm/bf16_dup.c: Likewise.\n+\t* gcc.target/arm/bf16_reinterpret.c: Likewise.\n+\t* gcc.target/arm/pr51534.c: Remove -mfloat=abi option.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/vmmla_1.c: Add arm_v8_2a_i8mm options.\n+\n+2021-03-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/bfloat16_scalar_typecheck.c: Add\n+\tarm_v8_2a_fp16_neon and arm_v8_2a_bf16_neon.\n+\t* gcc.target/arm/bfloat16_vector_typecheck_1.c: Likewise.\n+\t* gcc.target/arm/bfloat16_vector_typecheck_2.c: Likewise.\n+\n+2021-03-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99318\n+\t* g++.dg/cpp0x/attributes-namespace6.C: New test.\n+\t* g++.dg/cpp0x/gen-attrs-73.C: New test.\n+\n+2021-03-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/93660\n+\t* gfortran.dg/gomp/declare-simd-coarray-lib.f90: New test.\n+\n+2021-03-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/99540\n+\t* gcc.dg/vect/pr99540.c: New test.\n+\n+2021-03-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99239\n+\t* g++.dg/modules/pr99239_a.H: New.\n+\t* g++.dg/modules/pr99239_b.H: New.\n+\n+2021-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99721\n+\t* gfortran.dg/vect/pr99721.f90: New testcase.\n+\n+2021-03-23  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* gcc.target/riscv/shift-shift-5.c (sub): Change\n+\torder of struct fields depending on byteorder.\n+\n+2021-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99650\n+\t* g++.dg/cpp1z/decomp55.C: New test.\n+\n+2021-03-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/99296\n+\t* gcc.dg/pr99296.c: New file.\n+\n 2021-03-22  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99480"}, {"sha": "3f49017429eac450969c01b4e70726460f19fc84", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,8 @@\n+2021-03-23  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* config/riscv/sfp-machine.h (__BYTE_ORDER): Set according\n+\tto __BYTE_ORDER__.\n+\n 2021-03-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR gcov-profile/99406"}, {"sha": "44271d34d04cad379dd8e104e8c4dea0c9317496", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1f3168f474734400e7a97660d1e7dec664bca9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1f3168f474734400e7a97660d1e7dec664bca9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf1f3168f474734400e7a97660d1e7dec664bca9", "patch": "@@ -1,3 +1,21 @@\n+2021-03-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/std/ranges/adaptors/reverse.cc: Replace duplicated\n+\tline with a check that uses the const being/end overloads.\n+\n+2021-03-23  Moritz Sichert  <sichert@in.tum.de>\n+\n+\t* include/std/ranges (reverse_view::begin, reverse_view::end):\n+\tQualify make_reverse_iterator calls to avoid ADL.\n+\t* testsuite/std/ranges/adaptors/reverse.cc: Test that\n+\tviews::reverse works when make_reverse_iterator is defined\n+\tin an associated namespace.\n+\n+2021-03-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT):\n+\tDo not define when compiling with Clang.\n+\n 2021-03-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/string_view (basic_string_view(Range&&)): Define new"}]}