{"sha": "dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ1MmVjYjBmNmMyMzVkYzlhNGU0MWFmMGRhYzc0ZjAwZDM3MmI2Mw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-07-27T22:32:20Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-07-27T22:32:20Z"}, "message": "re PR fortran/32909 (Replace gfc_c_int_type_node with integer_type_node)\n\n2007-07-28  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/32909\n\t* trans-stmt.c (gfc_trans_character_select): Replace occurrences\n\tof gfc_c_int_type_node with integer_type_node.\n\t* trans-decl.c (gfc_build_intrinsic_function_decls): Likewise.\n\t(gfc_build_builtin_function_decls): Likewise.\n\t(gfc_generate_function_code): Likewise.\n\t* trans-io.c (gfc_build_io_library_fndecls): Likewise.\n\nFrom-SVN: r127003", "tree": {"sha": "4c8cb62c6377bb33840006ebb6fd01f21ad8dde5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c8cb62c6377bb33840006ebb6fd01f21ad8dde5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/comments", "author": null, "committer": null, "parents": [{"sha": "8dcb83bb8b51594ad0f46fc5a04fa05fef4c1842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dcb83bb8b51594ad0f46fc5a04fa05fef4c1842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dcb83bb8b51594ad0f46fc5a04fa05fef4c1842"}], "stats": {"total": 91, "additions": 44, "deletions": 47}, "files": [{"sha": "29c134d8c06d5125327ea3cf9a5899fe3c7b742e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "patch": "@@ -1,3 +1,13 @@\n+2007-07-28  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/32909\n+\t* trans-stmt.c (gfc_trans_character_select): Replace occurrences\n+\tof gfc_c_int_type_node with integer_type_node.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Likewise.\n+\t(gfc_build_builtin_function_decls): Likewise.\n+\t(gfc_generate_function_code): Likewise.\n+\t* trans-io.c (gfc_build_io_library_fndecls): Likewise.\n+\n 2007-07-27  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* trans-decl.c (gfc_build_builtin_function_decls): Use existing"}, {"sha": "2e144735cf1ac7ba054bb81776e284141776f865", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "patch": "@@ -1995,7 +1995,6 @@ gfc_build_intrinsic_function_decls (void)\n   tree gfc_complex8_type_node = gfc_get_complex_type (8);\n   tree gfc_complex10_type_node = gfc_get_complex_type (10);\n   tree gfc_complex16_type_node = gfc_get_complex_type (16);\n-  tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n \n   /* String functions.  */\n   gfor_fndecl_compare_string =\n@@ -2055,7 +2054,7 @@ gfc_build_intrinsic_function_decls (void)\n                                      3,\n                                      pchar_type_node,\n                                      gfc_charlen_type_node,\n-                                     gfc_c_int_type_node);\n+                                     integer_type_node);\n \n   gfor_fndecl_fdate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"fdate\")),\n@@ -2215,7 +2214,7 @@ gfc_build_intrinsic_function_decls (void)\n \n   /* BLAS functions.  */\n   {\n-    tree pint = build_pointer_type (gfc_c_int_type_node);\n+    tree pint = build_pointer_type (integer_type_node);\n     tree ps = build_pointer_type (gfc_get_real_type (gfc_default_real_kind));\n     tree pd = build_pointer_type (gfc_get_real_type (gfc_default_double_kind));\n     tree pc = build_pointer_type (gfc_get_complex_type (gfc_default_real_kind));\n@@ -2228,32 +2227,32 @@ gfc_build_intrinsic_function_decls (void)\n \t\t\t\t\t\t\t   : \"sgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, ps, ps, pint,\n-\t\t\t   ps, pint, ps, ps, pint, gfc_c_int_type_node,\n-\t\t\t   gfc_c_int_type_node);\n+\t\t\t   ps, pint, ps, ps, pint, integer_type_node,\n+\t\t\t   integer_type_node);\n     gfor_fndecl_dgemm = gfc_build_library_function_decl\n \t\t\t  (get_identifier\n \t\t\t     (gfc_option.flag_underscoring ? \"dgemm_\"\n \t\t\t\t\t\t\t   : \"dgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, pd, pd, pint,\n-\t\t\t   pd, pint, pd, pd, pint, gfc_c_int_type_node,\n-\t\t\t   gfc_c_int_type_node);\n+\t\t\t   pd, pint, pd, pd, pint, integer_type_node,\n+\t\t\t   integer_type_node);\n     gfor_fndecl_cgemm = gfc_build_library_function_decl\n \t\t\t  (get_identifier\n \t\t\t     (gfc_option.flag_underscoring ? \"cgemm_\"\n \t\t\t\t\t\t\t   : \"cgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, pc, pc, pint,\n-\t\t\t   pc, pint, pc, pc, pint, gfc_c_int_type_node,\n-\t\t\t   gfc_c_int_type_node);\n+\t\t\t   pc, pint, pc, pc, pint, integer_type_node,\n+\t\t\t   integer_type_node);\n     gfor_fndecl_zgemm = gfc_build_library_function_decl\n \t\t\t  (get_identifier\n \t\t\t     (gfc_option.flag_underscoring ? \"zgemm_\"\n \t\t\t\t\t\t\t   : \"zgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, pz, pz, pint,\n-\t\t\t   pz, pint, pz, pz, pint, gfc_c_int_type_node,\n-\t\t\t   gfc_c_int_type_node);\n+\t\t\t   pz, pint, pz, pz, pint, integer_type_node,\n+\t\t\t   integer_type_node);\n   }\n \n   /* Other functions.  */\n@@ -2279,7 +2278,6 @@ gfc_build_intrinsic_function_decls (void)\n void\n gfc_build_builtin_function_decls (void)\n {\n-  tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n   tree gfc_int4_type_node = gfc_get_int_type (4);\n   tree gfc_logical4_type_node = gfc_get_logical_type (4);\n   tree gfc_pint4_type_node = build_pointer_type (gfc_int4_type_node);\n@@ -2332,7 +2330,7 @@ gfc_build_builtin_function_decls (void)\n \n   gfor_fndecl_select_string =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"select_string\")),\n-                                     gfc_c_int_type_node, 0);\n+                                     integer_type_node, 0);\n \n   gfor_fndecl_runtime_error =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"runtime_error\")),\n@@ -2350,7 +2348,7 @@ gfc_build_builtin_function_decls (void)\n   gfor_fndecl_generate_error =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"generate_error\")),\n \t\t\t\t     void_type_node, 3, pvoid_type_node,\n-                                     gfc_c_int_type_node, pchar_type_node);\n+                                     integer_type_node, pchar_type_node);\n \n   gfor_fndecl_os_error =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"os_error\")),\n@@ -2360,25 +2358,25 @@ gfc_build_builtin_function_decls (void)\n \n   gfor_fndecl_set_fpe =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_fpe\")),\n-\t\t\t\t    void_type_node, 1, gfc_c_int_type_node);\n+\t\t\t\t    void_type_node, 1, integer_type_node);\n \n   /* Keep the array dimension in sync with the call, later in this file.  */\n   gfor_fndecl_set_options =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_options\")),\n-\t\t\t\t    void_type_node, 2, gfc_c_int_type_node,\n+\t\t\t\t    void_type_node, 2, integer_type_node,\n \t\t\t\t    pvoid_type_node);\n \n   gfor_fndecl_set_convert =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_convert\")),\n-\t\t\t\t     void_type_node, 1, gfc_c_int_type_node);\n+\t\t\t\t     void_type_node, 1, integer_type_node);\n \n   gfor_fndecl_set_record_marker =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_record_marker\")),\n-\t\t\t\t     void_type_node, 1, gfc_c_int_type_node);\n+\t\t\t\t     void_type_node, 1, integer_type_node);\n \n   gfor_fndecl_set_max_subrecord_length =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_max_subrecord_length\")),\n-\t\t\t\t     void_type_node, 1, gfc_c_int_type_node);\n+\t\t\t\t     void_type_node, 1, integer_type_node);\n \n   gfor_fndecl_in_pack = gfc_build_library_function_decl (\n         get_identifier (PREFIX(\"internal_pack\")),\n@@ -3186,7 +3184,6 @@ gfc_generate_function_code (gfc_namespace * ns)\n      runtime library Fortran language standard parameters.  */\n   if (sym->attr.is_main_program)\n     {\n-      tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n       tree array_type, array, var;\n \n       /* Passing a new option to the library requires four modifications:\n@@ -3196,28 +3193,28 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t     gfor_fndecl_set_options\n \t   + modify the library (runtime/compile_options.c)!  */\n       array = tree_cons (NULL_TREE,\n-\t\t\t build_int_cst (gfc_c_int_type_node,\n+\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\tgfc_option.warn_std), NULL_TREE);\n       array = tree_cons (NULL_TREE,\n-\t\t\t build_int_cst (gfc_c_int_type_node,\n+\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\tgfc_option.allow_std), array);\n       array = tree_cons (NULL_TREE,\n-\t\t\t build_int_cst (gfc_c_int_type_node, pedantic), array);\n+\t\t\t build_int_cst (integer_type_node, pedantic), array);\n       array = tree_cons (NULL_TREE,\n-\t\t\t build_int_cst (gfc_c_int_type_node,\n+\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\tgfc_option.flag_dump_core), array);\n       array = tree_cons (NULL_TREE,\n-\t\t\t build_int_cst (gfc_c_int_type_node,\n+\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\tgfc_option.flag_backtrace), array);\n       array = tree_cons (NULL_TREE,\n-\t\t\t build_int_cst (gfc_c_int_type_node,\n+\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\tgfc_option.flag_sign_zero), array);\n \n       array = tree_cons (NULL_TREE,\n-\t\t\t build_int_cst (gfc_c_int_type_node,\n+\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\tflag_bounds_check), array);\n \n-      array_type = build_array_type (gfc_c_int_type_node,\n+      array_type = build_array_type (integer_type_node,\n \t\t\t\t     build_index_type (build_int_cst (NULL_TREE,\n \t\t\t\t\t\t\t\t      6)));\n       array = build_constructor_from_list (array_type, nreverse (array));\n@@ -3235,7 +3232,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n       var = gfc_build_addr_expr (pvoid_type_node, var);\n \n       tmp = build_call_expr (gfor_fndecl_set_options, 2,\n-\t\t\t     build_int_cst (gfc_c_int_type_node, 7), var);\n+\t\t\t     build_int_cst (integer_type_node, 7), var);\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n@@ -3244,9 +3241,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n      needed.  */\n   if (sym->attr.is_main_program && gfc_option.fpe != 0)\n     {\n-      tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n       tmp = build_call_expr (gfor_fndecl_set_fpe, 1,\n-\t\t\t     build_int_cst (gfc_c_int_type_node,\n+\t\t\t     build_int_cst (integer_type_node,\n \t\t\t\t\t    gfc_option.fpe));\n       gfc_add_expr_to_block (&body, tmp);\n     }\n@@ -3256,9 +3252,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n   if (sym->attr.is_main_program && gfc_option.convert != CONVERT_NATIVE)\n     {\n-      tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n       tmp = build_call_expr (gfor_fndecl_set_convert, 1,\n-\t\t\t     build_int_cst (gfc_c_int_type_node,\n+\t\t\t     build_int_cst (integer_type_node,\n \t\t\t\t\t    gfc_option.convert));\n       gfc_add_expr_to_block (&body, tmp);\n     }\n@@ -3268,21 +3263,17 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n   if (sym->attr.is_main_program && gfc_option.record_marker != 0)\n     {\n-      tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n       tmp = build_call_expr (gfor_fndecl_set_record_marker, 1,\n-\t\t\t     build_int_cst (gfc_c_int_type_node,\n+\t\t\t     build_int_cst (integer_type_node,\n \t\t\t\t\t    gfc_option.record_marker));\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n   if (sym->attr.is_main_program && gfc_option.max_subrecord_length != 0)\n     {\n-      tree gfc_c_int_type_node;\n-\n-      gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n       tmp = build_call_expr (gfor_fndecl_set_max_subrecord_length,\n \t\t\t     1,\n-\t\t\t     build_int_cst (gfc_c_int_type_node,\n+\t\t\t     build_int_cst (integer_type_node,\n \t\t\t\t\t    gfc_option.max_subrecord_length));\n       gfc_add_expr_to_block (&body, tmp);\n     }"}, {"sha": "f1ea931aacdf89fffe74eff13f9c5418a40a11c6", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "patch": "@@ -276,7 +276,6 @@ gfc_build_io_library_fndecls (void)\n   tree types[IOPARM_type_num], pad_idx, gfc_int4_type_node;\n   tree gfc_intio_type_node;\n   tree parm_type, dt_parm_type;\n-  tree gfc_c_int_type_node;\n   HOST_WIDE_INT pad_size;\n   enum ioparam_type ptype;\n \n@@ -300,8 +299,6 @@ gfc_build_io_library_fndecls (void)\n   TYPE_ALIGN (types[IOPARM_type_pad]) = MAX (TYPE_ALIGN (pchar_type_node),\n \t\t     TYPE_ALIGN (gfc_get_int_type (gfc_max_integer_kind)));\n \n-  gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n-\n   for (ptype = IOPARM_ptype_common; ptype < IOPARM_ptype_num; ptype++)\n     gfc_build_st_parameter (ptype, types);\n \n@@ -342,7 +339,7 @@ gfc_build_io_library_fndecls (void)\n     gfc_build_library_function_decl (get_identifier\n \t\t\t\t     (PREFIX(\"transfer_array\")),\n \t\t\t\t     void_type_node, 4, dt_parm_type,\n-\t\t\t\t     pvoid_type_node, gfc_c_int_type_node,\n+\t\t\t\t     pvoid_type_node, integer_type_node,\n \t\t\t\t     gfc_charlen_type_node);\n \n   /* Library entry points */"}, {"sha": "0ec1435dad410d4c0a06866449be388d79ece642", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd52ecb0f6c235dc9a4e41af0dac74f00d372b63/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=dd52ecb0f6c235dc9a4e41af0dac74f00d372b63", "patch": "@@ -1320,7 +1320,6 @@ static tree\n gfc_trans_character_select (gfc_code *code)\n {\n   tree init, node, end_label, tmp, type, case_num, label;\n-  tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n   stmtblock_t block, body;\n   gfc_case *cp, *d;\n   gfc_code *c;\n@@ -1351,7 +1350,7 @@ gfc_trans_character_select (gfc_code *code)\n       ADD_FIELD (string2, pchar_type_node);\n       ADD_FIELD (string2_len, gfc_int4_type_node);\n \n-      ADD_FIELD (target, gfc_c_int_type_node);\n+      ADD_FIELD (target, integer_type_node);\n #undef ADD_FIELD\n \n       gfc_finish_type (select_struct);\n@@ -1425,7 +1424,7 @@ gfc_trans_character_select (gfc_code *code)\n           node = tree_cons (ss_string2_len, se.string_length, node);\n         }\n \n-      node = tree_cons (ss_target, build_int_cst (gfc_c_int_type_node, d->n),\n+      node = tree_cons (ss_target, build_int_cst (integer_type_node, d->n),\n \t\t\tnode);\n \n       tmp = build_constructor_from_list (select_struct, nreverse (node));\n@@ -1459,7 +1458,7 @@ gfc_trans_character_select (gfc_code *code)\n   tmp = build_call_expr (gfor_fndecl_select_string, 4, init,\n \t\t\t build_int_cst (NULL_TREE, n), se.expr,\n \t\t\t se.string_length);\n-  case_num = gfc_create_var (gfc_c_int_type_node, \"case_num\");\n+  case_num = gfc_create_var (integer_type_node, \"case_num\");\n   gfc_add_modify_expr (&block, case_num, tmp);\n \n   gfc_add_block_to_block (&block, &se.post);"}]}