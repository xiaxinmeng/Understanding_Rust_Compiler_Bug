{"sha": "235acd35186b64c7552439eec898b02a4dcec9ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1YWNkMzUxODZiNjRjNzU1MjQzOWVlYzg5OGIwMmE0ZGNlYzllZA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-03-22T19:57:37Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-03-22T19:57:37Z"}, "message": "Makefile.in: (JAVA_OBJS) Added entry xref.o.\n\n1999-03-22  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\t* Makefile.in: (JAVA_OBJS) Added entry xref.o.\n\t(xref.o): New rule.\n\t* java-tree.h (flag_emit_xref): Declared extern.\n\t* lang.c: (xref.h): Included.\n\t(flag_emit_xref): New global variable.\n\t(lang_decode_option): Added support for -fxref.\n\t* xref.c: Created.\n\t* xref.h: Likewise.\n\nFrom-SVN: r25907", "tree": {"sha": "89ab59a2a0422857efa034b3749897399c9c59c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89ab59a2a0422857efa034b3749897399c9c59c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/235acd35186b64c7552439eec898b02a4dcec9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235acd35186b64c7552439eec898b02a4dcec9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235acd35186b64c7552439eec898b02a4dcec9ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235acd35186b64c7552439eec898b02a4dcec9ed/comments", "author": null, "committer": null, "parents": [{"sha": "a127db7565df9c75cdb7a302c63d2139b73d61d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a127db7565df9c75cdb7a302c63d2139b73d61d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a127db7565df9c75cdb7a302c63d2139b73d61d6"}], "stats": {"total": 150, "additions": 149, "deletions": 1}, "files": [{"sha": "5d6b34550247e6a3b10d9c52b5fe301da9d1e3ae", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=235acd35186b64c7552439eec898b02a4dcec9ed", "patch": "@@ -1,3 +1,14 @@\n+1999-03-22  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* Makefile.in: (JAVA_OBJS) Added entry xref.o.\n+\t(xref.o): New rule.\n+\t* java-tree.h (flag_emit_xref): Declared extern.\n+\t* lang.c: (xref.h): Included.\n+\t(flag_emit_xref): New global variable.\n+\t(lang_decode_option): Added support for -fxref.\n+\t* xref.c: Created.\n+\t* xref.h: Likewise.\n+\n 1999-03-21  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* Make-lang.in ($(GCJ)$(exeext)): Add intl.o to list of files to be"}, {"sha": "f7373d6c8d7b536e3bab32566b4270c897a9c87b", "filename": "gcc/java/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMakefile.in?ref=235acd35186b64c7552439eec898b02a4dcec9ed", "patch": "@@ -175,7 +175,7 @@ INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../config -I$(srcdir)\n #\n JAVA_OBJS = parse.o class.o decl.o expr.o constants.o lang.o typeck.o \\\n   except.o verify.o zextract.o jcf-io.o jcf-parse.o mangle.o jcf-write.o \\\n-  buffer.o check-init.o jcf-depend.o jcf-path.o\n+  buffer.o check-init.o jcf-depend.o jcf-path.o xref.o\n \n JAVA_OBJS_LITE = parse-scan.o jv-scan.o\n \n@@ -315,5 +315,7 @@ typeck.o : typeck.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h convert.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../system.h\n verify.o : verify.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h javaop.h java-opcodes.h \\\n   java-except.h $(srcdir)/../toplev.h $(srcdir)/../system.h\n+xref.o : xref.h $(CONFIG_H) $(JAVA_TREE_H) $(srcdir)/../toplev.h \\\n+  $(srcdir)/../system.h\n zextract.o : zextract.c $(CONFIG_H) $(srcdir)/../system.h zipfile.h\n "}, {"sha": "068eff277c846297385c625778d67597e5847a78", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=235acd35186b64c7552439eec898b02a4dcec9ed", "patch": "@@ -127,6 +127,11 @@ extern int flag_assume_compiled;\n \n extern int flag_emit_class_files;\n \n+/* When non zero, we emit xref strings. Values of the flag for xref\n+   backends are defined in xref.h.  */\n+\n+extern int flag_emit_xref;\n+\n /* Turned to 1 if -Wall was encountered. See lang.c for their meanings.  */\n extern int flag_wall;\n extern int flag_redundant;"}, {"sha": "85b2bfe11dd426691ee6bf57e746659ba779b222", "filename": "gcc/java/lang.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=235acd35186b64c7552439eec898b02a4dcec9ed", "patch": "@@ -32,6 +32,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"jcf.h\"\n #include \"toplev.h\"\n #include \"flags.h\"\n+#include \"xref.h\"\n \n #ifndef OBJECT_SUFFIX\n # define OBJECT_SUFFIX \".o\"\n@@ -87,6 +88,11 @@ int flag_assume_compiled = 1;\n \n int flag_emit_class_files = 0;\n \n+/* When non zero, we emit xref strings. Values of the flag for xref\n+   backends are defined in xref_flag_table, xref.c.  */\n+\n+int flag_emit_xref = 0;\n+\n /* When non zero, -Wall was turned on.  */\n int flag_wall = 0;\n \n@@ -168,6 +174,16 @@ lang_decode_option (argc, argv)\n     }\n #undef ARG\n \n+#define XARG \"-fxref=\"\n+  if (strncmp (p, XARG, sizeof (XARG) - 1) == 0)\n+    {\n+      if (!(flag_emit_xref = xref_flag_value (p + sizeof (XARG) - 1)))\n+\t{\n+\t  error (\"Unkown xref back end `%s'\", p + sizeof (XARG) - 1);\n+\t}\n+    }\n+#undef XARG\n+\n   if (p[0] == '-' && p[1] == 'f')\n     {\n       /* Some kind of -f option."}, {"sha": "12768066d7ae365610faeff5dea069688ae82d8e", "filename": "gcc/java/xref.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.c?ref=235acd35186b64c7552439eec898b02a4dcec9ed", "patch": "@@ -0,0 +1,72 @@\n+/* Write cross reference information extracted from Java(TM)\n+   source and bytecode files, in one of formats documented below.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.\n+\n+Java and all Java-based marks are trademarks or registered trademarks\n+of Sun Microsystems, Inc. in the United States and other countries.\n+The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n+\n+#include <stdio.h>\n+#include \"config.h\"\n+#include \"tree.h\"\n+#include \"java-tree.h\"\n+#include \"xref.h\"\n+\n+\n+static xref_flag_table xref_table [] = {\n+  {NULL, NULL, NULL},\n+};\n+\n+/* Decode an xref flag value. Return 0 if the flag wasn't found. */\n+\n+int xref_flag_value (flag)\n+     char *flag;\n+{\n+  int i;\n+  for (i = 0; xref_table [i].key; i++)\n+    if (!strcmp (flag, xref_table [i].key))\n+      return i+1;\n+  return 0;\n+}\n+\n+/* Branch to the right xref \"back-end\".  */\n+\n+void\n+expand_xref (node)\n+     tree node;\n+{\n+  /* Maintain these two cached. */\n+  static FILE *fp = NULL;\n+  static void (*current_expand) PROTO ((FILE *, tree)) = NULL;\n+\n+  if ( !flag_emit_xref )\n+    return;\n+\n+  if (!fp)\n+    fp = xref_table [flag_emit_xref-1].fp;\n+  if (!current_expand)\n+    current_expand = xref_table [flag_emit_xref-1].expand;\n+\n+  (*current_expand) (fp, node);\n+}\n+\n+/* Implementation of the xref back-ends. */\n+"}, {"sha": "6d851a2a7a4b15063c1eb8fba7e371bf900c5e06", "filename": "gcc/java/xref.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Fxref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235acd35186b64c7552439eec898b02a4dcec9ed/gcc%2Fjava%2Fxref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.h?ref=235acd35186b64c7552439eec898b02a4dcec9ed", "patch": "@@ -0,0 +1,42 @@\n+/* Definitions for the cross reference backend xref.c\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.\n+\n+Java and all Java-based marks are trademarks or registered trademarks\n+of Sun Microsystems, Inc. in the United States and other countries.\n+The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n+\n+/* Exported functions. */\n+int xref_flag_value PROTO ((char *));\n+void xref_generate PROTO ((tree));\n+\n+/* flag_emit_xref range of possible values. */\n+\n+enum {\n+  XREF_NONE = 0,\n+};\n+\n+/* Lookup table to be used with the value of flag_emit_xref */\n+\n+typedef struct {\n+  char *key;\t\t\t         /* Activator in -fxref=<key>  */\n+  void (*expand) PROTO ((FILE *, tree)); /* Function to write xrefs out */\n+  FILE *fp;\t\t\t         /* fp to use during the call.  */\n+} xref_flag_table;"}]}