{"sha": "2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzN2QzMWQwZTUyZjBlYTY3ZWYxYzdhMjc2MWY2YmZmODg3MGM4Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-10-13T19:37:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-10-13T19:37:45Z"}, "message": "container_access.cc: Remove 'test' variables.\n\n2016-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/24_iterators/container_access.cc: Remove 'test' variables.\n\t* testsuite/24_iterators/istream_iterator/2.cc: Likewise.\n\t* testsuite/24_iterators/istreambuf_iterator/2.cc: Likewise.\n\t* testsuite/24_iterators/istreambuf_iterator/2627.cc: Likewise.\n\t* testsuite/24_iterators/operations/next.cc: Likewise.\n\t* testsuite/24_iterators/operations/prev.cc: Likewise.\n\t* testsuite/24_iterators/ostreambuf_iterator/2.cc: Likewise.\n\t* testsuite/24_iterators/random_access_iterator/26020.cc: Likewise.\n\t* testsuite/24_iterators/range_access_cpp14.cc: Likewise.\n\t* testsuite/24_iterators/reverse_iterator/11729.cc: Likewise.\n\t* testsuite/24_iterators/reverse_iterator/3.cc: Likewise.\n\t* testsuite/25_algorithms/adjacent_find/vectorbool.cc: Likewise.\n\t* testsuite/25_algorithms/all_of/1.cc: Likewise.\n\t* testsuite/25_algorithms/any_of/1.cc: Likewise.\n\t* testsuite/25_algorithms/binary_search/2.cc: Likewise.\n\t* testsuite/25_algorithms/binary_search/partitioned.cc: Likewise.\n\t* testsuite/25_algorithms/clamp/1.cc: Likewise.\n\t* testsuite/25_algorithms/clamp/2.cc: Likewise.\n\t* testsuite/25_algorithms/copy/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy/2.cc: Likewise.\n\t* testsuite/25_algorithms/copy/3.cc: Likewise.\n\t* testsuite/25_algorithms/copy/34595.cc: Likewise.\n\t* testsuite/25_algorithms/copy/4.cc: Likewise.\n\t* testsuite/25_algorithms/copy/deque_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy/move_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/2.cc: Likewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/3.cc: Likewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc: Likewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/3.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/copy_backward/deque_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy_backward/move_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/2.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/3.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/4.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/50119.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/move_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/equal_range/2.cc: Likewise.\n\t* testsuite/25_algorithms/equal_range/partitioned.cc: Likewise.\n\t* testsuite/25_algorithms/fill/1.cc: Likewise.\n\t* testsuite/25_algorithms/fill/2.cc: Likewise.\n\t* testsuite/25_algorithms/fill/3.cc: Likewise.\n\t* testsuite/25_algorithms/fill/4.cc: Likewise.\n\t* testsuite/25_algorithms/fill_n/1.cc: Likewise.\n\t* testsuite/25_algorithms/find/39546.cc: Likewise.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/char/1.cc: Likewise.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc: Likewise.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_if/1.cc: Likewise.\n\t* testsuite/25_algorithms/find_if_not/1.cc: Likewise.\n\t* testsuite/25_algorithms/for_each/1.cc: Likewise.\n\t* testsuite/25_algorithms/heap/1.cc: Likewise.\n\t* testsuite/25_algorithms/heap/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/heap/moveable2.cc: Likewise.\n\t* testsuite/25_algorithms/heap/vectorbool.cc: Likewise.\n\t* testsuite/25_algorithms/includes/1.cc: Likewise.\n\t* testsuite/25_algorithms/inplace_merge/1.cc: Likewise.\n\t* testsuite/25_algorithms/inplace_merge/49559.cc: Likewise.\n\t* testsuite/25_algorithms/inplace_merge/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/inplace_merge/moveable2.cc: Likewise.\n\t* testsuite/25_algorithms/is_heap/1.cc: Likewise.\n\t* testsuite/25_algorithms/is_heap_until/1.cc: Likewise.\n\t* testsuite/25_algorithms/is_partitioned/1.cc: Likewise.\n\t* testsuite/25_algorithms/is_permutation/1.cc: Likewise.\n\t* testsuite/25_algorithms/is_permutation/2.cc: Likewise.\n\t* testsuite/25_algorithms/is_permutation/vectorbool.cc: Likewise.\n\t* testsuite/25_algorithms/is_sorted/1.cc: Likewise.\n\t* testsuite/25_algorithms/is_sorted_until/1.cc: Likewise.\n\t* testsuite/25_algorithms/iter_swap/20577.cc: Likewise.\n\t* testsuite/25_algorithms/lower_bound/2.cc: Likewise.\n\t* testsuite/25_algorithms/lower_bound/partitioned.cc: Likewise.\n\t* testsuite/25_algorithms/make_heap/complexity.cc: Likewise.\n\t* testsuite/25_algorithms/max/1.cc: Likewise.\n\t* testsuite/25_algorithms/max/2.cc: Likewise.\n\t* testsuite/25_algorithms/max/3.cc: Likewise.\n\t* testsuite/25_algorithms/max/37547.cc: Likewise.\n\t* testsuite/25_algorithms/max/4.cc: Likewise.\n\t* testsuite/25_algorithms/min/1.cc: Likewise.\n\t* testsuite/25_algorithms/min/2.cc: Likewise.\n\t* testsuite/25_algorithms/min/3.cc: Likewise.\n\t* testsuite/25_algorithms/min/37547.cc: Likewise.\n\t* testsuite/25_algorithms/min/4.cc: Likewise.\n\t* testsuite/25_algorithms/minmax/1.cc: Likewise.\n\t* testsuite/25_algorithms/minmax/2.cc: Likewise.\n\t* testsuite/25_algorithms/minmax/3.cc: Likewise.\n\t* testsuite/25_algorithms/minmax/37547.cc: Likewise.\n\t* testsuite/25_algorithms/minmax_element/1.cc: Likewise.\n\t* testsuite/25_algorithms/move/1.cc: Likewise.\n\t* testsuite/25_algorithms/move/deque_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/move_backward/1.cc: Likewise.\n\t* testsuite/25_algorithms/move_backward/deque_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/next_permutation/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/none_of/1.cc: Likewise.\n\t* testsuite/25_algorithms/nth_element/1.cc: Likewise.\n\t* testsuite/25_algorithms/nth_element/2.cc: Likewise.\n\t* testsuite/25_algorithms/nth_element/3.cc: Likewise.\n\t* testsuite/25_algorithms/nth_element/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/nth_element/random_test.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort/2.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort/check_compare_by_value.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/partial_sort/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort/random_test.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort_copy/2.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort_copy/random_test.cc: Likewise.\n\t* testsuite/25_algorithms/partition/1.cc: Likewise.\n\t* testsuite/25_algorithms/partition/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/partition_copy/1.cc: Likewise.\n\t* testsuite/25_algorithms/partition_point/1.cc: Likewise.\n\t* testsuite/25_algorithms/pop_heap/complexity.cc: Likewise.\n\t* testsuite/25_algorithms/prev_permutation/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/push_heap/complexity.cc: Likewise.\n\t* testsuite/25_algorithms/random_shuffle/1.cc: Likewise.\n\t* testsuite/25_algorithms/random_shuffle/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/rotate/1.cc: Likewise.\n\t* testsuite/25_algorithms/rotate/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/rotate/moveable2.cc: Likewise.\n\t* testsuite/25_algorithms/rotate/rotate.cc: Likewise.\n\t* testsuite/25_algorithms/search/1.cc: Likewise.\n\t* testsuite/25_algorithms/search_n/58358.cc: Likewise.\n\t* testsuite/25_algorithms/shuffle/1.cc: Likewise.\n\t* testsuite/25_algorithms/sort/1.cc: Likewise.\n\t* testsuite/25_algorithms/sort/check_compare_by_value.cc: Likewise.\n\t* testsuite/25_algorithms/sort/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/sort/random_test.cc: Likewise.\n\t* testsuite/25_algorithms/sort/vectorbool.cc: Likewise.\n\t* testsuite/25_algorithms/sort_heap/check_compare_by_value.cc: Likewise.\n\t* testsuite/25_algorithms/sort_heap/complexity.cc: Likewise.\n\t* testsuite/25_algorithms/stable_partition/1.cc: Likewise.\n\t* testsuite/25_algorithms/stable_partition/mem_check.cc: Likewise.\n\t* testsuite/25_algorithms/stable_partition/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/2.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/3.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/49559.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/check_compare_by_value.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/stable_sort/mem_check.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/moveable2.cc: Likewise.\n\t* testsuite/25_algorithms/swap_ranges/1.cc: Likewise.\n\t* testsuite/25_algorithms/unique/11480.cc: Likewise.\n\t* testsuite/25_algorithms/unique/2.cc: Likewise.\n\t* testsuite/25_algorithms/unique/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/unique_copy/1.cc: Likewise.\n\t* testsuite/25_algorithms/unique_copy/2.cc: Likewise.\n\t* testsuite/25_algorithms/unique_copy/26133.cc: Likewise.\n\t* testsuite/25_algorithms/upper_bound/2.cc: Likewise.\n\t* testsuite/25_algorithms/upper_bound/partitioned.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/awk/cstring_01.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/basic/empty_range.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/basic/string_01.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/basic/\n\tstring_range_00_03.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/basic/\n\tstring_range_01_03.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/basic/\n\tstring_range_02_03.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/53622.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/57173.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/58576.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/68863.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/quoted_char.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/char/ungreedy.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/63199.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/\n\tanymatcher.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/cjk_match.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/cstring_plus.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tcstring_questionmark.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tcstring_range.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/string_any.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_range_00_03.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_range_01_03.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\tstring_range_02_03.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/\n\twstring_locale.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_replace/char/basic_replace.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_replace/char/dr2213.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_search/61720.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/assertion.cc:\n\tLikewise.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/flags.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/greedy.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_search/ecma/string_01.cc:\n\tLikewise.\n\t* testsuite/28_regex/basic_regex/assign/char/cstring.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/char/cstring_op.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/char/moveable.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/char/pstring.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/char/range.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/char/string.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/char/string_op.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/wchar_t/cstring.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/wchar_t/cstring_op.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/wchar_t/pstring.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/wchar_t/range.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/wchar_t/string.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/assign/wchar_t/string_op.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/basic/pstring_wchar_t.cc:\n\tLikewise.\n\t* testsuite/28_regex/basic_regex/ctors/basic/string_range_01_02_03.cc:\n\tLikewise.\n\t* testsuite/28_regex/basic_regex/ctors/extended/cstring.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/extended/\n\tstring_range_01_02_03.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/move_char.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/string_wchar_t.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/wchar_t/cstring.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/wchar_t/default.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/wchar_t/range.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/imbue/string.cc: Likewise.\n\t* testsuite/28_regex/constants/error_type.cc: Likewise.\n\t* testsuite/28_regex/constants/match_flag_type.cc: Likewise.\n\t* testsuite/28_regex/init-list.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_iterator/char/64140.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_iterator/char/string_01.cc:\n\tLikewise.\n\t* testsuite/28_regex/iterators/regex_iterator/char/\n\tstring_position_01.cc\n\t* testsuite/28_regex/iterators/regex_iterator/ctors/char/default.cc:\n\tLikewise.\n\t* testsuite/28_regex/iterators/regex_iterator/ctors/wchar_t/\n\tdefault.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_iterator/typedefs.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_iterator/wchar_t/string_01.cc:\n\tLikewise.\n\t* testsuite/28_regex/iterators/regex_iterator/wchar_t/string_02.cc:\n\tLikewise.\n\t* testsuite/28_regex/iterators/regex_token_iterator/64303.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_token_iterator/char/string_01.cc:\n\tLikewise.\n\t* testsuite/28_regex/iterators/regex_token_iterator/ctors/char/\n\tdefault.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_token_iterator/ctors/wchar_t/\n\tdefault.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_token_iterator/typedefs.cc:\n\tLikewise.\n\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n\tstring_01.cc: Likewise.\n\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n\twstring_02.cc: Likewise.\n\t* testsuite/28_regex/match_results/ctors/char/default.cc: Likewise.\n\t* testsuite/28_regex/match_results/ctors/wchar_t/default.cc: Likewise.\n\t* testsuite/28_regex/match_results/format.cc: Likewise.\n\t* testsuite/28_regex/match_results/out_of_range_submatches.cc: Likewise.\n\t* testsuite/28_regex/match_results/swap.cc: Likewise.\n\t* testsuite/28_regex/match_results/typedefs.cc: Likewise.\n\t* testsuite/28_regex/regex_error/regex_error.cc: Likewise.\n\t* testsuite/28_regex/regression.cc: Likewise.\n\t* testsuite/28_regex/sub_match/cast_char.cc: Likewise.\n\t* testsuite/28_regex/sub_match/cast_wchar_t.cc: Likewise.\n\t* testsuite/28_regex/sub_match/embedded_zeros_cmp.cc: Likewise.\n\t* testsuite/28_regex/sub_match/length.cc: Likewise.\n\t* testsuite/28_regex/traits/char/ctor.cc: Likewise.\n\t* testsuite/28_regex/traits/char/isctype.cc: Likewise.\n\t* testsuite/28_regex/traits/char/length.cc: Likewise.\n\t* testsuite/28_regex/traits/char/lookup_classname.cc: Likewise.\n\t* testsuite/28_regex/traits/char/lookup_collatename.cc: Likewise.\n\t* testsuite/28_regex/traits/char/transform.cc: Likewise.\n\t* testsuite/28_regex/traits/char/transform_primary.cc: Likewise.\n\t* testsuite/28_regex/traits/char/translate.cc: Likewise.\n\t* testsuite/28_regex/traits/char/translate_nocase.cc: Likewise.\n\t* testsuite/28_regex/traits/char/user_defined.cc: Likewise.\n\t* testsuite/28_regex/traits/char/value.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/ctor.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/isctype.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/length.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/lookup_classname.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/lookup_collatename.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/transform.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/transform_primary.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/translate.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/translate_nocase.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/user_defined.cc: Likewise.\n\t* testsuite/28_regex/traits/wchar_t/value.cc: Likewise.\n\t* testsuite/29_atomics/atomic/60658.cc: Likewise.\n\t* testsuite/29_atomics/atomic/operators/51811.cc: Likewise.\n\t* testsuite/29_atomics/atomic_flag/clear/1.cc: Likewise.\n\t* testsuite/backward/11460.cc: Likewise.\n\t* testsuite/backward/hash_map/1.cc: Likewise.\n\t* testsuite/backward/hash_map/25896.cc: Likewise.\n\t* testsuite/backward/hash_set/1.cc: Likewise.\n\t* testsuite/backward/hash_set/25896.cc: Likewise.\n\t* testsuite/decimal/binary-arith.cc: Likewise.\n\t* testsuite/decimal/comparison.cc: Likewise.\n\t* testsuite/decimal/compound-assignment-memfunc.cc: Likewise.\n\t* testsuite/decimal/compound-assignment.cc: Likewise.\n\t* testsuite/decimal/conversion-from-float.cc: Likewise.\n\t* testsuite/decimal/conversion-from-integral.cc: Likewise.\n\t* testsuite/decimal/conversion-to-generic-float.cc: Likewise.\n\t* testsuite/decimal/conversion-to-integral.cc: Likewise.\n\t* testsuite/decimal/ctor.cc: Likewise.\n\t* testsuite/decimal/incdec-memfunc.cc: Likewise.\n\t* testsuite/decimal/incdec.cc: Likewise.\n\t* testsuite/decimal/make-decimal.cc: Likewise.\n\t* testsuite/decimal/pr54036-1.cc: Likewise.\n\t* testsuite/decimal/pr54036-2.cc: Likewise.\n\t* testsuite/decimal/pr54036-3.cc: Likewise.\n\t* testsuite/decimal/unary-arith.cc: Likewise.\n\t* testsuite/special_functions/01_assoc_laguerre/check_nan.cc: Likewise.\n\t* testsuite/special_functions/01_assoc_laguerre/check_value.cc:\n\tLikewise.\n\t* testsuite/special_functions/02_assoc_legendre/check_nan.cc: Likewise.\n\t* testsuite/special_functions/02_assoc_legendre/check_value.cc:\n\tLikewise.\n\t* testsuite/special_functions/03_beta/check_nan.cc: Likewise.\n\t* testsuite/special_functions/03_beta/check_value.cc: Likewise.\n\t* testsuite/special_functions/04_comp_ellint_1/check_nan.cc: Likewise.\n\t* testsuite/special_functions/04_comp_ellint_1/check_value.cc: Likewise.\n\t* testsuite/special_functions/05_comp_ellint_2/check_nan.cc: Likewise.\n\t* testsuite/special_functions/05_comp_ellint_2/check_value.cc: Likewise.\n\t* testsuite/special_functions/06_comp_ellint_3/check_nan.cc: Likewise.\n\t* testsuite/special_functions/06_comp_ellint_3/check_value.cc: Likewise.\n\t* testsuite/special_functions/07_cyl_bessel_i/check_nan.cc: Likewise.\n\t* testsuite/special_functions/07_cyl_bessel_i/check_value.cc: Likewise.\n\t* testsuite/special_functions/07_cyl_bessel_i/pr56216.cc: Likewise.\n\t* testsuite/special_functions/08_cyl_bessel_j/check_nan.cc: Likewise.\n\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: Likewise.\n\t* testsuite/special_functions/09_cyl_bessel_k/check_nan.cc: Likewise.\n\t* testsuite/special_functions/09_cyl_bessel_k/check_value.cc: Likewise.\n\t* testsuite/special_functions/10_cyl_neumann/check_nan.cc: Likewise.\n\t* testsuite/special_functions/10_cyl_neumann/check_value.cc: Likewise.\n\t* testsuite/special_functions/11_ellint_1/check_nan.cc: Likewise.\n\t* testsuite/special_functions/11_ellint_1/check_value.cc: Likewise.\n\t* testsuite/special_functions/12_ellint_2/check_nan.cc: Likewise.\n\t* testsuite/special_functions/12_ellint_2/check_value.cc: Likewise.\n\t* testsuite/special_functions/13_ellint_3/check_nan.cc: Likewise.\n\t* testsuite/special_functions/13_ellint_3/check_value.cc: Likewise.\n\t* testsuite/special_functions/14_expint/check_nan.cc: Likewise.\n\t* testsuite/special_functions/14_expint/check_value.cc: Likewise.\n\t* testsuite/special_functions/15_hermite/check_nan.cc: Likewise.\n\t* testsuite/special_functions/15_hermite/check_value.cc: Likewise.\n\t* testsuite/special_functions/16_laguerre/check_nan.cc: Likewise.\n\t* testsuite/special_functions/16_laguerre/check_value.cc: Likewise.\n\t* testsuite/special_functions/17_legendre/check_nan.cc: Likewise.\n\t* testsuite/special_functions/17_legendre/check_value.cc: Likewise.\n\t* testsuite/special_functions/18_riemann_zeta/check_nan.cc: Likewise.\n\t* testsuite/special_functions/18_riemann_zeta/check_value.cc: Likewise.\n\t* testsuite/special_functions/19_sph_bessel/check_nan.cc: Likewise.\n\t* testsuite/special_functions/19_sph_bessel/check_value.cc: Likewise.\n\t* testsuite/special_functions/20_sph_legendre/check_nan.cc: Likewise.\n\t* testsuite/special_functions/20_sph_legendre/check_value.cc: Likewise.\n\t* testsuite/special_functions/21_sph_neumann/check_nan.cc: Likewise.\n\t* testsuite/special_functions/21_sph_neumann/check_value.cc: Likewise.\n\t* testsuite/tr2/bases/value.cc: Likewise.\n\t* testsuite/tr2/direct_bases/value.cc: Likewise.\n\t* testsuite/util/debug/checks.h: Likewise.\n\t* testsuite/util/debug/unordered_checks.h: Likewise.\n\t* testsuite/util/testsuite_allocator.h: Likewise.\n\t* testsuite/util/testsuite_api.h: Likewise.\n\t* testsuite/util/testsuite_common_types.h: Likewise.\n\t* testsuite/util/testsuite_random.h: Likewise.\n\t* testsuite/util/testsuite_rvalref.h: Likewise.\n\nFrom-SVN: r241138", "tree": {"sha": "b94a2922c9f3fe612eb090908c98d63622042fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b94a2922c9f3fe612eb090908c98d63622042fce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/comments", "author": null, "committer": null, "parents": [{"sha": "14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a2c9aac04f013245e332b9e7ecb8c3a9f42a0a"}], "stats": {"total": 1751, "additions": 651, "deletions": 1100}, "files": [{"sha": "32b59a3cf58a94b8572586f30c2b1bcc6541d1d5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 400, "deletions": 0, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -1,3 +1,403 @@\n+2016-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/24_iterators/container_access.cc: Remove 'test' variables.\n+\t* testsuite/24_iterators/istream_iterator/2.cc: Likewise.\n+\t* testsuite/24_iterators/istreambuf_iterator/2.cc: Likewise.\n+\t* testsuite/24_iterators/istreambuf_iterator/2627.cc: Likewise.\n+\t* testsuite/24_iterators/operations/next.cc: Likewise.\n+\t* testsuite/24_iterators/operations/prev.cc: Likewise.\n+\t* testsuite/24_iterators/ostreambuf_iterator/2.cc: Likewise.\n+\t* testsuite/24_iterators/random_access_iterator/26020.cc: Likewise.\n+\t* testsuite/24_iterators/range_access_cpp14.cc: Likewise.\n+\t* testsuite/24_iterators/reverse_iterator/11729.cc: Likewise.\n+\t* testsuite/24_iterators/reverse_iterator/3.cc: Likewise.\n+\t* testsuite/25_algorithms/adjacent_find/vectorbool.cc: Likewise.\n+\t* testsuite/25_algorithms/all_of/1.cc: Likewise.\n+\t* testsuite/25_algorithms/any_of/1.cc: Likewise.\n+\t* testsuite/25_algorithms/binary_search/2.cc: Likewise.\n+\t* testsuite/25_algorithms/binary_search/partitioned.cc: Likewise.\n+\t* testsuite/25_algorithms/clamp/1.cc: Likewise.\n+\t* testsuite/25_algorithms/clamp/2.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/2.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/3.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/34595.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/4.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/deque_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/move_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/2.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/3.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/copy_backward/deque_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_backward/move_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/2.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/3.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/4.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/50119.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/move_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/equal_range/2.cc: Likewise.\n+\t* testsuite/25_algorithms/equal_range/partitioned.cc: Likewise.\n+\t* testsuite/25_algorithms/fill/1.cc: Likewise.\n+\t* testsuite/25_algorithms/fill/2.cc: Likewise.\n+\t* testsuite/25_algorithms/fill/3.cc: Likewise.\n+\t* testsuite/25_algorithms/fill/4.cc: Likewise.\n+\t* testsuite/25_algorithms/fill_n/1.cc: Likewise.\n+\t* testsuite/25_algorithms/find/39546.cc: Likewise.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/char/1.cc: Likewise.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc: Likewise.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/find_if/1.cc: Likewise.\n+\t* testsuite/25_algorithms/find_if_not/1.cc: Likewise.\n+\t* testsuite/25_algorithms/for_each/1.cc: Likewise.\n+\t* testsuite/25_algorithms/heap/1.cc: Likewise.\n+\t* testsuite/25_algorithms/heap/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/heap/moveable2.cc: Likewise.\n+\t* testsuite/25_algorithms/heap/vectorbool.cc: Likewise.\n+\t* testsuite/25_algorithms/includes/1.cc: Likewise.\n+\t* testsuite/25_algorithms/inplace_merge/1.cc: Likewise.\n+\t* testsuite/25_algorithms/inplace_merge/49559.cc: Likewise.\n+\t* testsuite/25_algorithms/inplace_merge/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/inplace_merge/moveable2.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap/1.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap_until/1.cc: Likewise.\n+\t* testsuite/25_algorithms/is_partitioned/1.cc: Likewise.\n+\t* testsuite/25_algorithms/is_permutation/1.cc: Likewise.\n+\t* testsuite/25_algorithms/is_permutation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/is_permutation/vectorbool.cc: Likewise.\n+\t* testsuite/25_algorithms/is_sorted/1.cc: Likewise.\n+\t* testsuite/25_algorithms/is_sorted_until/1.cc: Likewise.\n+\t* testsuite/25_algorithms/iter_swap/20577.cc: Likewise.\n+\t* testsuite/25_algorithms/lower_bound/2.cc: Likewise.\n+\t* testsuite/25_algorithms/lower_bound/partitioned.cc: Likewise.\n+\t* testsuite/25_algorithms/make_heap/complexity.cc: Likewise.\n+\t* testsuite/25_algorithms/max/1.cc: Likewise.\n+\t* testsuite/25_algorithms/max/2.cc: Likewise.\n+\t* testsuite/25_algorithms/max/3.cc: Likewise.\n+\t* testsuite/25_algorithms/max/37547.cc: Likewise.\n+\t* testsuite/25_algorithms/max/4.cc: Likewise.\n+\t* testsuite/25_algorithms/min/1.cc: Likewise.\n+\t* testsuite/25_algorithms/min/2.cc: Likewise.\n+\t* testsuite/25_algorithms/min/3.cc: Likewise.\n+\t* testsuite/25_algorithms/min/37547.cc: Likewise.\n+\t* testsuite/25_algorithms/min/4.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/1.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/2.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/3.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/37547.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax_element/1.cc: Likewise.\n+\t* testsuite/25_algorithms/move/1.cc: Likewise.\n+\t* testsuite/25_algorithms/move/deque_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/1.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/deque_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/next_permutation/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/none_of/1.cc: Likewise.\n+\t* testsuite/25_algorithms/nth_element/1.cc: Likewise.\n+\t* testsuite/25_algorithms/nth_element/2.cc: Likewise.\n+\t* testsuite/25_algorithms/nth_element/3.cc: Likewise.\n+\t* testsuite/25_algorithms/nth_element/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/nth_element/random_test.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort/2.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort/check_compare_by_value.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/partial_sort/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort/random_test.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort_copy/2.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort_copy/random_test.cc: Likewise.\n+\t* testsuite/25_algorithms/partition/1.cc: Likewise.\n+\t* testsuite/25_algorithms/partition/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_copy/1.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_point/1.cc: Likewise.\n+\t* testsuite/25_algorithms/pop_heap/complexity.cc: Likewise.\n+\t* testsuite/25_algorithms/prev_permutation/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/push_heap/complexity.cc: Likewise.\n+\t* testsuite/25_algorithms/random_shuffle/1.cc: Likewise.\n+\t* testsuite/25_algorithms/random_shuffle/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/rotate/1.cc: Likewise.\n+\t* testsuite/25_algorithms/rotate/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/rotate/moveable2.cc: Likewise.\n+\t* testsuite/25_algorithms/rotate/rotate.cc: Likewise.\n+\t* testsuite/25_algorithms/search/1.cc: Likewise.\n+\t* testsuite/25_algorithms/search_n/58358.cc: Likewise.\n+\t* testsuite/25_algorithms/shuffle/1.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/1.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/check_compare_by_value.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/random_test.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/vectorbool.cc: Likewise.\n+\t* testsuite/25_algorithms/sort_heap/check_compare_by_value.cc: Likewise.\n+\t* testsuite/25_algorithms/sort_heap/complexity.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_partition/1.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_partition/mem_check.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_partition/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/2.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/3.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/49559.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/check_compare_by_value.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/stable_sort/mem_check.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/moveable2.cc: Likewise.\n+\t* testsuite/25_algorithms/swap_ranges/1.cc: Likewise.\n+\t* testsuite/25_algorithms/unique/11480.cc: Likewise.\n+\t* testsuite/25_algorithms/unique/2.cc: Likewise.\n+\t* testsuite/25_algorithms/unique/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/unique_copy/1.cc: Likewise.\n+\t* testsuite/25_algorithms/unique_copy/2.cc: Likewise.\n+\t* testsuite/25_algorithms/unique_copy/26133.cc: Likewise.\n+\t* testsuite/25_algorithms/upper_bound/2.cc: Likewise.\n+\t* testsuite/25_algorithms/upper_bound/partitioned.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/awk/cstring_01.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/empty_range.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/string_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/\n+\tstring_range_00_03.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/\n+\tstring_range_01_03.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/basic/\n+\tstring_range_02_03.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/53622.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/57173.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/58576.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/68863.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/quoted_char.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/ungreedy.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/63199.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/\n+\tanymatcher.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/cjk_match.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/cstring_plus.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tcstring_questionmark.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tcstring_range.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/string_any.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_range_00_03.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_range_01_03.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\tstring_range_02_03.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/\n+\twstring_locale.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_replace/char/basic_replace.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_replace/char/dr2213.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_search/61720.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/assertion.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/flags.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/greedy.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/string_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/basic_regex/assign/char/cstring.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/char/cstring_op.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/char/moveable.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/char/pstring.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/char/range.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/char/string.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/char/string_op.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/wchar_t/cstring.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/wchar_t/cstring_op.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/wchar_t/pstring.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/wchar_t/range.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/wchar_t/string.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/assign/wchar_t/string_op.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/basic/pstring_wchar_t.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/basic_regex/ctors/basic/string_range_01_02_03.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/basic_regex/ctors/extended/cstring.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/extended/\n+\tstring_range_01_02_03.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/move_char.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/string_wchar_t.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/wchar_t/cstring.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/wchar_t/default.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/wchar_t/range.cc: Likewise.\n+\t* testsuite/28_regex/basic_regex/imbue/string.cc: Likewise.\n+\t* testsuite/28_regex/constants/error_type.cc: Likewise.\n+\t* testsuite/28_regex/constants/match_flag_type.cc: Likewise.\n+\t* testsuite/28_regex/init-list.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/char/64140.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/char/string_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/char/\n+\tstring_position_01.cc\n+\t* testsuite/28_regex/iterators/regex_iterator/ctors/char/default.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/ctors/wchar_t/\n+\tdefault.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/typedefs.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/wchar_t/string_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/wchar_t/string_02.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/64303.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/char/string_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/ctors/char/\n+\tdefault.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/ctors/wchar_t/\n+\tdefault.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n+\tstring_01.cc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n+\twstring_02.cc: Likewise.\n+\t* testsuite/28_regex/match_results/ctors/char/default.cc: Likewise.\n+\t* testsuite/28_regex/match_results/ctors/wchar_t/default.cc: Likewise.\n+\t* testsuite/28_regex/match_results/format.cc: Likewise.\n+\t* testsuite/28_regex/match_results/out_of_range_submatches.cc: Likewise.\n+\t* testsuite/28_regex/match_results/swap.cc: Likewise.\n+\t* testsuite/28_regex/match_results/typedefs.cc: Likewise.\n+\t* testsuite/28_regex/regex_error/regex_error.cc: Likewise.\n+\t* testsuite/28_regex/regression.cc: Likewise.\n+\t* testsuite/28_regex/sub_match/cast_char.cc: Likewise.\n+\t* testsuite/28_regex/sub_match/cast_wchar_t.cc: Likewise.\n+\t* testsuite/28_regex/sub_match/embedded_zeros_cmp.cc: Likewise.\n+\t* testsuite/28_regex/sub_match/length.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/ctor.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/isctype.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/length.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/lookup_classname.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/lookup_collatename.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/transform.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/transform_primary.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/translate.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/translate_nocase.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/user_defined.cc: Likewise.\n+\t* testsuite/28_regex/traits/char/value.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/ctor.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/isctype.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/length.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/lookup_classname.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/lookup_collatename.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/transform.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/transform_primary.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/translate.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/translate_nocase.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/user_defined.cc: Likewise.\n+\t* testsuite/28_regex/traits/wchar_t/value.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/60658.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/operators/51811.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_flag/clear/1.cc: Likewise.\n+\t* testsuite/backward/11460.cc: Likewise.\n+\t* testsuite/backward/hash_map/1.cc: Likewise.\n+\t* testsuite/backward/hash_map/25896.cc: Likewise.\n+\t* testsuite/backward/hash_set/1.cc: Likewise.\n+\t* testsuite/backward/hash_set/25896.cc: Likewise.\n+\t* testsuite/decimal/binary-arith.cc: Likewise.\n+\t* testsuite/decimal/comparison.cc: Likewise.\n+\t* testsuite/decimal/compound-assignment-memfunc.cc: Likewise.\n+\t* testsuite/decimal/compound-assignment.cc: Likewise.\n+\t* testsuite/decimal/conversion-from-float.cc: Likewise.\n+\t* testsuite/decimal/conversion-from-integral.cc: Likewise.\n+\t* testsuite/decimal/conversion-to-generic-float.cc: Likewise.\n+\t* testsuite/decimal/conversion-to-integral.cc: Likewise.\n+\t* testsuite/decimal/ctor.cc: Likewise.\n+\t* testsuite/decimal/incdec-memfunc.cc: Likewise.\n+\t* testsuite/decimal/incdec.cc: Likewise.\n+\t* testsuite/decimal/make-decimal.cc: Likewise.\n+\t* testsuite/decimal/pr54036-1.cc: Likewise.\n+\t* testsuite/decimal/pr54036-2.cc: Likewise.\n+\t* testsuite/decimal/pr54036-3.cc: Likewise.\n+\t* testsuite/decimal/unary-arith.cc: Likewise.\n+\t* testsuite/special_functions/01_assoc_laguerre/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/01_assoc_laguerre/check_value.cc:\n+\tLikewise.\n+\t* testsuite/special_functions/02_assoc_legendre/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/02_assoc_legendre/check_value.cc:\n+\tLikewise.\n+\t* testsuite/special_functions/03_beta/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/03_beta/check_value.cc: Likewise.\n+\t* testsuite/special_functions/04_comp_ellint_1/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/04_comp_ellint_1/check_value.cc: Likewise.\n+\t* testsuite/special_functions/05_comp_ellint_2/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/05_comp_ellint_2/check_value.cc: Likewise.\n+\t* testsuite/special_functions/06_comp_ellint_3/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/06_comp_ellint_3/check_value.cc: Likewise.\n+\t* testsuite/special_functions/07_cyl_bessel_i/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/07_cyl_bessel_i/check_value.cc: Likewise.\n+\t* testsuite/special_functions/07_cyl_bessel_i/pr56216.cc: Likewise.\n+\t* testsuite/special_functions/08_cyl_bessel_j/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: Likewise.\n+\t* testsuite/special_functions/09_cyl_bessel_k/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/09_cyl_bessel_k/check_value.cc: Likewise.\n+\t* testsuite/special_functions/10_cyl_neumann/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/10_cyl_neumann/check_value.cc: Likewise.\n+\t* testsuite/special_functions/11_ellint_1/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/11_ellint_1/check_value.cc: Likewise.\n+\t* testsuite/special_functions/12_ellint_2/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/12_ellint_2/check_value.cc: Likewise.\n+\t* testsuite/special_functions/13_ellint_3/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/13_ellint_3/check_value.cc: Likewise.\n+\t* testsuite/special_functions/14_expint/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/14_expint/check_value.cc: Likewise.\n+\t* testsuite/special_functions/15_hermite/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/15_hermite/check_value.cc: Likewise.\n+\t* testsuite/special_functions/16_laguerre/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/16_laguerre/check_value.cc: Likewise.\n+\t* testsuite/special_functions/17_legendre/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/17_legendre/check_value.cc: Likewise.\n+\t* testsuite/special_functions/18_riemann_zeta/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/18_riemann_zeta/check_value.cc: Likewise.\n+\t* testsuite/special_functions/19_sph_bessel/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/19_sph_bessel/check_value.cc: Likewise.\n+\t* testsuite/special_functions/20_sph_legendre/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/20_sph_legendre/check_value.cc: Likewise.\n+\t* testsuite/special_functions/21_sph_neumann/check_nan.cc: Likewise.\n+\t* testsuite/special_functions/21_sph_neumann/check_value.cc: Likewise.\n+\t* testsuite/tr2/bases/value.cc: Likewise.\n+\t* testsuite/tr2/direct_bases/value.cc: Likewise.\n+\t* testsuite/util/debug/checks.h: Likewise.\n+\t* testsuite/util/debug/unordered_checks.h: Likewise.\n+\t* testsuite/util/testsuite_allocator.h: Likewise.\n+\t* testsuite/util/testsuite_api.h: Likewise.\n+\t* testsuite/util/testsuite_common_types.h: Likewise.\n+\t* testsuite/util/testsuite_random.h: Likewise.\n+\t* testsuite/util/testsuite_rvalref.h: Likewise.\n+\n 2016-10-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr_base.h: Include <functional>."}, {"sha": "262a62c74b582dd2320a51a1d9b03c4901dd79be", "filename": "libstdc++-v3/testsuite/24_iterators/container_access.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontainer_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontainer_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcontainer_access.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n #include <vector>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n void\n test01()\n {"}, {"sha": "d0b435b6b3a9a5d01e39d52c3a1ec8d7a23e17b2", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,7 +26,6 @@\n void test02()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   string st(\"R.Rorty\");\n "}, {"sha": "b8cc4f18ca479a1146984ac7d600e0243ae10627", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/2.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,12 +23,11 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-bool test02(void)\n+void test02(void)\n {\n \n   typedef std::istreambuf_iterator<char> cistreambuf_iter;\n   typedef cistreambuf_iter::streambuf_type cstreambuf_type;\n-  bool test __attribute__((unused)) = true;\n   const char slit01[] = \"playa hermosa, liberia, guanacaste\";\n   std::string str01(slit01);\n   std::istringstream istrs00(str01);\n@@ -106,7 +105,6 @@ bool test02(void)\n       c = *++istrb_it28;\n       VERIFY( c == slit01[++i] );\n     }\n-  return test;\n }\n \n int main()"}, {"sha": "c2c5c8daaac99b2c40b8d9f9878fbbaf7a29c2d5", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/2627.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2627.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2627.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F2627.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,7 +26,6 @@\n // libstdc++/2627\n void test03()\n {\n-  bool test __attribute__((unused)) = true;\n   const std::string s(\"free the vieques\");\n \n   // 1"}, {"sha": "13bb70b3ef73aaa768c1686e91aaf27855ecdd73", "filename": "libstdc++-v3/testsuite/24_iterators/operations/next.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fnext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fnext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fnext.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,7 +26,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::vector<int> c(3);\n   std::vector<int>::iterator i = c.begin(), j;\n \n@@ -37,7 +36,6 @@ void test01()\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n   std::list<int> c(3);    \n   std::list<int>::iterator i = c.begin(), j;\n "}, {"sha": "4f3e5c40c752ea2716284a1581988a02ab1e26a7", "filename": "libstdc++-v3/testsuite/24_iterators/operations/prev.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,7 +26,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::vector<int> c(3);    \n   std::vector<int>::iterator i = c.end(), j;\n \n@@ -37,7 +36,6 @@ void test01()\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n   std::list<int> c(3);    \n   std::list<int>::iterator i = c.end(), j;\n "}, {"sha": "140374f1750c7d5796e777641563e2b7cbb4d924", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/2.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,11 +23,10 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-bool test02(void)\n+void test02(void)\n {\n   typedef std::ostreambuf_iterator<char> costreambuf_iter;\n   typedef costreambuf_iter::streambuf_type cstreambuf_type;\n-  bool test __attribute__((unused)) = true;\n   const char slit01[] = \"playa hermosa, liberia, guanacaste\";\n   const char slit02[] = \"bodega bay, lost coast, california\";\n   std::string str01(slit01);\n@@ -81,7 +80,6 @@ bool test02(void)\n   tmp = ostrs00.str();\n   VERIFY ( tmp != str01 );\n   VERIFY ( tmp != str02 );\n-  return test;\n }\n \n int main()"}, {"sha": "79e0888bc7138964bcd5b811d6f659b2cf761210", "filename": "libstdc++-v3/testsuite/24_iterators/random_access_iterator/26020.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2F26020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2F26020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frandom_access_iterator%2F26020.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n void test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;  \n \n   list<int> ll;\n   ll.push_back(1);"}, {"sha": "1c80e9b33bbf55bd157f4d8c0f1c8b9cd26e43ec", "filename": "libstdc++-v3/testsuite/24_iterators/range_access_cpp14.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access_cpp14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access_cpp14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access_cpp14.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n #include <vector>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n void\n test01()\n {"}, {"sha": "fe7d690a0d4c3f6cfd5ca31b389511738777f1a8", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/11729.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F11729.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F11729.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F11729.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,8 +25,6 @@\n // libstdc++/11729\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef std::vector<int> Vec;\n   typedef Vec::reverse_iterator reverse_iterator;\n   typedef Vec::const_reverse_iterator const_reverse_iterator;"}, {"sha": "504e132787e9ff4212efd4f201ecc1c1650b5915", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,8 +26,6 @@\n // libstdc++/10783\n void test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef std::vector<int> V;\n   VERIFY( sizeof(V::iterator) == sizeof(V::reverse_iterator) );\n }"}, {"sha": "30390df78410dd02c81f6fe6dec0e00db0bb08e8", "filename": "libstdc++-v3/testsuite/25_algorithms/adjacent_find/vectorbool.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fvectorbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fvectorbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fvectorbool.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n void \n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<bool> v;\n   v.push_back(true);\n   v.push_back(false);"}, {"sha": "a5f24fb2f50004980193b22085678d95a077142c", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,26 +36,20 @@ predicate(const int& i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array);\n   VERIFY( std::all_of(con.begin(), con.end(), predicate) );\n }\n \n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   Container con(array, array + 1);\n   VERIFY( std::all_of(con.begin(), con.end(), predicate) );\n }\n \n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 6);\n   VERIFY( !std::all_of(con.begin(), con.end(), predicate) );\n }"}, {"sha": "57f08812a42ba644005953ce6c08f9e57d845edf", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,26 +36,20 @@ predicate(const int& i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array);\n   VERIFY( !std::any_of(con.begin(), con.end(), predicate) );\n }\n \n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   Container con(array, array + 1);\n   VERIFY( !std::any_of(con.begin(), con.end(), predicate) );\n }\n \n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 6);\n   VERIFY( std::any_of(con.begin(), con.end(), predicate) );\n }"}, {"sha": "42184f4567a0a9ba8eb2fa1c172ad50da540c858", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 3, 3, 5, 8};\n const int C[] = {8, 5, 3, 3, 3, 2, 1};\n const int N = sizeof(A) / sizeof(int);"}, {"sha": "019b20c4adca4db3fee9d5e0052a21c28cfa2049", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/partitioned.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fpartitioned.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ struct X\n void\n test01()\n {\n-  bool test __attribute((unused)) = true;\n-\n   // Test with range that is partitioned, but not sorted.\n   X seq[] = { 1, 3, 5, 7, 1, 6, 4 };\n   test_container<X, forward_iterator_wrapper> c(seq);"}, {"sha": "183c367ce5c01e6d4281ca09db2b1845716cf974", "filename": "libstdc++-v3/testsuite/25_algorithms/clamp/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const int x = std::clamp(1, 2, 4);\n   const int y = std::clamp(3, 2, 4);\n   const int z = std::clamp(5, 2, 4);"}, {"sha": "10744953d4e8799f85e64818163d310319eaab71", "filename": "libstdc++-v3/testsuite/25_algorithms/clamp/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@ const T A<T>::a = T(3);\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY( 3 == std::clamp(A<int>::a, 2, 4) );\n   VERIFY( 2 == std::clamp(A<int>::a, 1, 2) );\n   VERIFY( 4 == std::clamp(A<int>::a, 4, 6) );"}, {"sha": "bf439a19b232b0d290217b7714d5a6cb10b9b156", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "363d51fc6847b709c843208b59f29f149c29c95d", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "2d9dfc04bd1b173f994807191e30da40c5803486", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,7 +26,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "ad7452b0da5f8a126795b936052ed7cbe1ed161e", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/34595.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -38,8 +38,6 @@ class Counting_output_iterator\n // libstdc++/34595\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   int t[10] = {0,};\n   Counting_output_iterator cnt;\n   std::size_t res = std::copy(t+0, t+5, cnt).current_counter();"}, {"sha": "427d0b026737fa68f4e9ac4a816e5e9489abf861", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/4.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F4.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,7 +26,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "40fe396b4c8ad8b5fde5e6e6611594f73d37ed2c", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/deque_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdeque_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdeque_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdeque_iterators%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -21,7 +21,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   deque<long> data(200);"}, {"sha": "198dba6dcc0ab64d99694b85577a63cfbae20f9d", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,8 +36,6 @@ typedef test_container<rvalstruct, output_iterator_wrapper> container_out;\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n   const int size = sizeof(inarray) / sizeof(int);\n "}, {"sha": "736b92e6d3b211564e321abad5fad9cb96226a11", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<char> in_iterator_type;"}, {"sha": "6f683636ad66b30cc6ac906c7b6d38143df32200", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,7 +26,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<char> in_iterator_type;"}, {"sha": "1c9328309e1521dbdae1bdcff27c1af72d4500fd", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef ostreambuf_iterator<char> out_iterator_type;"}, {"sha": "cd0353e6f7e7735a5e1785674f0e868a357beafe", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,7 +28,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<char> in_iterator_type;"}, {"sha": "c91411e89f5210f242905df63c337f7e83c13e92", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<wchar_t> in_iterator_type;"}, {"sha": "ed148a15b75ae7007dd5492b09b7565fe110e3bf", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<wchar_t> in_iterator_type;"}, {"sha": "438193cd3e005358e1e27a0ec8f42e8f451a1523", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef ostreambuf_iterator<wchar_t> out_iterator_type;"}, {"sha": "2b4f49afaca534cb407b44f2cbaa3901b48ac496", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/4.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F4.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n   \n   typedef istreambuf_iterator<wchar_t> in_iterator_type;"}, {"sha": "cab0c78db98e476e4f995964e17135ca09393325", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/deque_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdeque_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdeque_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdeque_iterators%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -21,7 +21,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   deque<long> data(200);"}, {"sha": "adf08cfbf365731143a3495bb03d70ffce2ece33", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,8 +37,6 @@ typedef test_container<rvalstruct,\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n   const int size = sizeof(inarray) / sizeof(int);\n "}, {"sha": "e0733662ebb5a34d3fdae84f68e95fd832ff4523", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "3fd0972bb8aceb79ce541495b1687a5a64320990", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "f019b2cf7be37b9a4820ccc4abdb3d8ae53d8dff", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,7 +28,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "34626edf00cc3f75ae2156b13d1a3575699ecbcf", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/4.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F4.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,7 +28,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int N = sizeof(A) / sizeof(int);"}, {"sha": "cd7bbb9cc39e83e53b18d30e262af61091c35982", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/50119.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F50119.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F50119.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F50119.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   vector<int> v;\n   istringstream s(\"1 2 3 4 5\");"}, {"sha": "b924604be4a78558127a891c11676e81bb9b8e4e", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -38,8 +38,6 @@ typedef test_container<rvalstruct, output_iterator_wrapper> container_out;\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n   const int size = sizeof(inarray) / sizeof(int);\n "}, {"sha": "d67e7d0fc8810164cb86180299c047a2e1fd45c0", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 3, 3, 5, 8};\n const int C[] = {8, 5, 3, 3, 3, 2, 1};\n const int N = sizeof(A) / sizeof(int);"}, {"sha": "6bcfe55cbc9172fcdbecb0ed6a4f3ec7d472e2c9", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/partitioned.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fpartitioned.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ struct X\n void\n test01()\n {\n-  bool test __attribute((unused)) = true;\n-\n   // Test with range that is partitioned, but not sorted.\n   X seq[] = { 1, 3, 5, 7, 1, 6, 4, 2 };\n   test_container<X, forward_iterator_wrapper> c(seq);"}, {"sha": "a8298113690d609ec0450843b205bbb163bd1c5f", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,7 +39,6 @@ class num\n // fill\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   const int val = 1;"}, {"sha": "00851809bfc38924fefa0362ec0071ecd3b40aaf", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,7 +39,6 @@ class num\n // fill_n\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   const int val = 3;"}, {"sha": "ba5f20d5054353df30b00b87ad25474cd694ca8f", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   char ca[1] = { '\\0' };\n   signed char sc = 1;\n "}, {"sha": "c4abc971d52862311615a70d5c13a0ca82190f44", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/4.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A1[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3};\n   const int N1 = sizeof(A1) / sizeof(int);"}, {"sha": "d6ec9d39580cc3be59b231debae4cf72df5e5aeb", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@ void\n test01()\n {\n   using namespace std;\n-  bool test __attribute__((unused)) = true;\n \n   const int A1[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3};\n   const int N1 = sizeof(A1) / sizeof(int);"}, {"sha": "cffe2a3a15c0cea21e8aceb85fe4e61143675d3b", "filename": "libstdc++-v3/testsuite/25_algorithms/find/39546.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F39546.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F39546.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F39546.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,8 +26,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<std::string> dict;\n   dict.push_back(\"one\");\n   dict.push_back(\"two\");"}, {"sha": "475161cf7195d567a8cb6067a9051b0a36cb533a", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/char/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<char> in_iterator_type;"}, {"sha": "92ba8ad7650b1d082605ad4b7737fcba10578135", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<char> in_iterator_type;"}, {"sha": "a1f6153013a2965e38b3c430ffef8c6c521be1ce", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<wchar_t> in_iterator_type;"}, {"sha": "1ef5efe480146f3d25547fd99d1ae422938526fb", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,7 +25,6 @@\n // In the occasion of libstdc++/25482\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   typedef istreambuf_iterator<wchar_t> in_iterator_type;"}, {"sha": "18fc7e5c672ed0567811673d01f1a5e39bd75bcc", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,8 +34,6 @@ predicate(const int& i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array);\n   VERIFY( std::find_if(con.begin(), con.end(), \n \t\t       predicate).ptr == array );\n@@ -44,8 +42,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   Container con(array, array + 1);\n   VERIFY( std::find_if(con.begin(), con.end(), \n \t\t       predicate).ptr == array + 1 );\n@@ -54,8 +50,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 6);\n   VERIFY( std::find_if(con.begin(), con.end(),\n \t\t       predicate).ptr == array + 3 );"}, {"sha": "9055513ba0636b54fb0c22392b8cb5bcc38cb30c", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,8 +36,6 @@ predicate(const int& i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array);\n   VERIFY( std::find_if_not(con.begin(), con.end(), \n \t\t\t   predicate).ptr == array );\n@@ -46,8 +44,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   Container con(array, array + 1);\n   VERIFY( std::find_if_not(con.begin(), con.end(), \n \t\t\t   predicate).ptr == array + 1 );\n@@ -56,8 +52,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 6);\n   VERIFY( std::find_if_not(con.begin(), con.end(),\n \t\t\t   predicate).ptr == array + 3 );"}, {"sha": "6a0171522808b516b72c0e6742f62bfd3fc6e033", "filename": "libstdc++-v3/testsuite/25_algorithms/for_each/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -45,7 +45,6 @@ struct Function\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using __gnu_test::test_container;\n   using __gnu_test::input_iterator_wrapper;\n "}, {"sha": "26c4822b8c447b0cccd3600078dfad34b1627872", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/1.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -53,8 +53,6 @@ int Gt::_M_count = 0;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   // sort array s1 using push_heap/pop_heap\n   int s1[N];\n   std::copy(A, A + N, s1);\n@@ -83,8 +81,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Gt gt;\n \n #ifndef _GLIBCXX_DEBUG"}, {"sha": "82e6938cb18c0a61993e8d8e9669038dbc7591bc", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -41,8 +41,6 @@ typedef test_container<int, random_access_iterator_wrapper> container_ref;\n void \n check_make(int* array, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct makeheap[9];\n   int        makeheap_ref[9];\n   std::copy(array, array + length, makeheap);\n@@ -61,8 +59,6 @@ check_make(int* array, int length)\n void\n check_pop(int* array, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct popheap[9];\n   int        popheap_ref[9];\n   std::copy(array, array + length, popheap);\n@@ -81,8 +77,6 @@ check_pop(int* array, int length)\n void\n check_sort(int* array, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct sortheap[9];\n   int        sortheap_ref[9];\n   std::copy(array, array + length, sortheap);\n@@ -101,8 +95,6 @@ check_sort(int* array, int length)\n void\n check_push(int* array, int pushval, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct pushheap[10];\n   int        pushheap_ref[10];\n   std::copy(array, array + length, pushheap);"}, {"sha": "01e33a8b6e119c3a2aceb81e1032465a95054920", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable2.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -47,8 +47,6 @@ bool are_ordered_int(const int& lhs, const int& rhs)\n void \n check_make(int* array, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct makeheap[9];\n   int        makeheap_ref[9];\n   std::copy(array, array + length, makeheap);\n@@ -67,8 +65,6 @@ check_make(int* array, int length)\n void\n check_pop(int* array, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct popheap[9];\n   int        popheap_ref[9];\n   std::copy(array, array + length, popheap);\n@@ -87,8 +83,6 @@ check_pop(int* array, int length)\n void\n check_sort(int* array, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct sortheap[9];\n   int        sortheap_ref[9];\n   std::copy(array, array + length, sortheap);\n@@ -107,8 +101,6 @@ check_sort(int* array, int length)\n void\n check_push(int* array, int pushval, int length)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct pushheap[10];\n   int        pushheap_ref[10];\n   std::copy(array, array + length, pushheap);"}, {"sha": "3364b0d85d2225e95d4b14b6d551b4d9f2742505", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/vectorbool.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fvectorbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fvectorbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fvectorbool.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -55,8 +55,6 @@ int Gt::_S_count = 0;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   // sort array s1 using push_heap/pop_heap\n   std::vector<bool> s1;\n   std::copy(A, A + N, std::back_inserter(s1));\n@@ -85,8 +83,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Gt gt;\n \n #ifndef _GLIBCXX_DEBUG"}, {"sha": "5057c3a571ace4ac952fe691c8ba7823e1ab6197", "filename": "libstdc++-v3/testsuite/25_algorithms/includes/1.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -30,7 +30,6 @@ typedef test_container<int, input_iterator_wrapper> Container;\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {0};\n   Container con1(array, array);\n   Container con2(array, array);\n@@ -40,7 +39,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {0, 1};\n   Container con1(array, array);\n   Container con2(array, array + 2);\n@@ -50,7 +48,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {0, 1};\n   Container con1(array, array + 2);\n   Container con2(array, array);\n@@ -60,7 +57,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n   int array1[] = {1, 2, 3, 4, 6, 8, 9};\n   int array2[] = {2, 4, 6, 8};\n   Container con1(array1, array1 + 7);\n@@ -71,7 +67,6 @@ test4()\n void\n test5()\n {\n-  bool test __attribute__((unused)) = true;\n   int array1[] = {1, 2, 3, 5};\n   int array2[] = {2, 4, 6, 8};\n   Container con1(array1, array1 + 4);"}, {"sha": "bcaa4725398521cf250c8720401a9e0697ac23f5", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/1.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -42,8 +42,6 @@ test1()\n void \n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[] = { 0, 2, 4, 1, 3, 5 };\n   container con(array, array + 6);\n   inplace_merge(con.begin(), con.it(3), con.end());\n@@ -65,8 +63,6 @@ struct S\n void \n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   S s[8];\n   s[0].a = 0;\n   s[1].a = 1;"}, {"sha": "958a7e1578370b5dccf4372b6725aaf5ee917be7", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/49559.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F49559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F49559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F49559.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -43,8 +43,6 @@ bool are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n // libstdc++/49559\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[6];\n   std::copy(A, A + N, s1);\n   Container con1(s1, s1 + N);"}, {"sha": "c5ca701730594c2194426dfcac8832b453e3b1c4", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/moveable.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ typedef test_container<rvalstruct, bidirectional_iterator_wrapper> container;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array1[]={0,2,4,1,3,5};\n   rvalstruct rv_array1[6];\n   std::copy(array1, array1 + 6, rv_array1);"}, {"sha": "0d825338f7e6f454685b7273a65404831dc0d540", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/moveable2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,8 +37,6 @@ are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array1[]={0,2,4,1,3,5};\n   rvalstruct rv_array1[6];\n   std::copy(array1, array1 + 6, rv_array1);"}, {"sha": "89a63330403715345cc21962ecf5d2af85dbd5ab", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -32,8 +32,6 @@ const int N = sizeof(A) / sizeof(int);\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   for (int i = 0; i <= N; ++i)\n     {\n       VERIFY( std::is_heap(A, A + i) );"}, {"sha": "7a8ba293a3a4d38f63c824600451b0fbb6a425d6", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap_until/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -32,8 +32,6 @@ const int N = sizeof(A) / sizeof(int);\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   for (int i = 0; i <= N; ++i)\n     {\n       VERIFY( A + i == std::is_heap_until(A, A + i) );"}, {"sha": "bd7bfcc1ab03ed2347824627c5b81d08d9e507a0", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/1.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,35 +36,27 @@ predicate(const int& i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array);\n   VERIFY( std::is_partitioned(con.begin(), con.end(), predicate) );\n }\n \n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   Container con(array, array + 1);\n   VERIFY( std::is_partitioned(con.begin(), con.end(), predicate) );\n }\n \n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 8);\n   VERIFY( !std::is_partitioned(con.begin(), con.end(), predicate) );\n }\n \n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array + 2, array + 7);\n   VERIFY( std::is_partitioned(con.begin(), con.end(), predicate) );\n }"}, {"sha": "8a030be5f788c3f5389d2067c41a0359f79d6a01", "filename": "libstdc++-v3/testsuite/25_algorithms/is_permutation/1.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,8 +37,6 @@ const int arr0[] = { 11, 22, 33, 44, 55 };\n void\n do_test(int arr1[5], bool np = true)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   do\n     VERIFY( std::is_permutation(arr1, arr1 + 5, arr0) == np );\n   while (std::next_permutation(arr1, arr1 + 5));\n@@ -48,8 +46,6 @@ template<typename Predicate>\n   void\n   do_test(int arr1[5], Predicate pred, bool np = true)\n   {\n-    bool test __attribute__((unused)) = true;\n-\n     do\n       VERIFY( std::is_permutation(arr1, arr1 + 5, arr0, pred) == np );\n     while (std::next_permutation(arr1, arr1 + 5));"}, {"sha": "864ca24832f66b8c0519401518895e83bdbc49e9", "filename": "libstdc++-v3/testsuite/25_algorithms/is_permutation/2.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -35,8 +35,6 @@ const int arr0[] = { 11, 22, 33, 44, 55 };\n void\n do_test(int arr1[5], bool np = true, unsigned N = 5)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   do\n     VERIFY( std::is_permutation(arr1, arr1 + 5, arr0, arr0 + N) == np );\n   while (std::next_permutation(arr1, arr1 + 5));\n@@ -46,8 +44,6 @@ template<typename Predicate>\n   void\n   do_test(int arr1[5], Predicate pred, bool np = true, unsigned N = 5)\n   {\n-    bool test __attribute__((unused)) = true;\n-\n     do\n       VERIFY( std::is_permutation(arr1, arr1 + 5, arr0, arr0 + N, pred) == np );\n     while (std::next_permutation(arr1, arr1 + 5));"}, {"sha": "87f09afa893fded48a9d84eaa67b7aeb2d455664", "filename": "libstdc++-v3/testsuite/25_algorithms/is_permutation/vectorbool.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fvectorbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fvectorbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fvectorbool.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,8 +25,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<bool> v1 = { true, false, true, false, true };\n   std::vector<bool> v2 = { false, true, false, true, true };\n   VERIFY( std::is_permutation(v1.begin(), v1.end(), v2.begin()) );\n@@ -35,8 +33,6 @@ void test01()\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<bool> v1 = { true, false, true, false, true };\n   std::vector<bool> v2 = { false, true, false, true, true };\n   VERIFY( std::is_permutation(v1.begin(), v1.end(), v2.begin(), v2.end()) );"}, {"sha": "57183c781fee9078f7824d66f580f817a0177098", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -32,8 +32,6 @@ const int N = sizeof(A) / sizeof(int);\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   for (int i = 0; i <= N; ++i)\n     {\n       VERIFY( std::is_sorted(A, A + i) );"}, {"sha": "4c0c0cf38165336e7aa2e559c160bc9bdbebde08", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted_until/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -32,8 +32,6 @@ const int N = sizeof(A) / sizeof(int);\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   for (int i = 0; i <= N; ++i)\n     {\n       VERIFY( A + i == std::is_sorted_until(A, A + i) );"}, {"sha": "02decbffbfab950e672d2248342e0f35cd525eab", "filename": "libstdc++-v3/testsuite/25_algorithms/iter_swap/20577.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2F20577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2F20577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2F20577.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,8 +22,6 @@\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<bool> v;\n   v.push_back(true);\n   v.push_back(false);\n@@ -34,8 +32,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<int> v;\n   v.push_back(1);\n   v.push_back(2);\n@@ -52,8 +48,6 @@ void swap(X&, X&)\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int_swap_count = 0;\n   X i, j;\n   std::iter_swap(&i, &j);"}, {"sha": "d545a8e99da3a3a79a6df0433098526999dd26ed", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 3, 3, 5, 8};\n const int C[] = {8, 5, 3, 3, 3, 2, 1};\n const int N = sizeof(A) / sizeof(int);"}, {"sha": "e2cb3d28ec4e651e23dd91f46213bc050a5145d5", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/partitioned.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fpartitioned.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ struct X\n void\n test01()\n {\n-  bool test __attribute((unused)) = true;\n-\n   // Test with range that is partitioned, but not sorted.\n   X seq[] = { 1, 3, 5, 7, 1, 6, 4, 2 };\n   test_container<X, forward_iterator_wrapper> c(seq);\n@@ -71,8 +69,6 @@ struct Y\n void\n test02()\n {\n-  bool test __attribute((unused)) = true;\n-\n   // Test that Debug Mode checks don't fire (libstdc++/71545)\n \n   Y seq[] = { -0.1, 1.2, 5.0, 5.2, 5.1, 5.9, 5.5, 6.0 };"}, {"sha": "d555288c8de9334801ea9199901a05cbf90292f0", "filename": "libstdc++-v3/testsuite/25_algorithms/make_heap/complexity.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fcomplexity.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,8 +26,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   using __gnu_test::counter_type;\n   const std::size_t nb_values = 1000;\n "}, {"sha": "265d976fba617ba25d89ced256d6177d66859680", "filename": "libstdc++-v3/testsuite/25_algorithms/max/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const int x = std::max(1, 2);\n   const int y = std::max(4, 3);\n   VERIFY( x == 2 );"}, {"sha": "bf965d5b15f971d2fa55ba05c6130f6f8a3fa602", "filename": "libstdc++-v3/testsuite/25_algorithms/max/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@ const T A<T>::a = T(3);\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY( 3 == std::max(A<int>::a, 2) );\n   VERIFY( 4 == std::max(A<int>::a, 4) );\n "}, {"sha": "542115ce7c5b3d8db9c4a59274bc3e6398013b79", "filename": "libstdc++-v3/testsuite/25_algorithms/max/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const int& x = std::max({1, 3, 2});\n   const int& y = std::max({4, 3, 2});\n   const int& z = std::max({3, 2, 4});"}, {"sha": "fe908dc5ef807a7cc7a03b09d59e13961e725154", "filename": "libstdc++-v3/testsuite/25_algorithms/max/37547.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F37547.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F37547.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F37547.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n // libstdc++/37547\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<int> v{1,2,3,4,5};\n \n   auto p = std::max({v});"}, {"sha": "1123a24a1034a302a32c48ff89b4975756ec45a3", "filename": "libstdc++-v3/testsuite/25_algorithms/max/4.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F4.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const int& z = std::max({1, 2, 3, 4, 5, 6, 7});\n   const double& w = std::max({2.0, 1.0, 3.2, 4.5, 5.0, 6.0, 7.0});\n   const int& y = std::max({2, 3, 1, 4, 5, 6, 7});"}, {"sha": "d237c45a3408ab3614a31c4109a6557f0ddef42e", "filename": "libstdc++-v3/testsuite/25_algorithms/min/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const int z = std::min(1, 2);\n   const int w = std::min(4, 3);\n   VERIFY( z == 1 );"}, {"sha": "48885aa971c32c60f20936d54e528ac0a84fe679", "filename": "libstdc++-v3/testsuite/25_algorithms/min/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@ const T A<T>::a = T(3);\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY( 2 == std::min(A<int>::a, 2) );\n   VERIFY( 3 == std::min(A<int>::a, 4) );\n "}, {"sha": "bef823ebc7f2aa6e4c0f25856a844849a7e17c04", "filename": "libstdc++-v3/testsuite/25_algorithms/min/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const int& z = std::min({1, 3, 2});\n   const int& w = std::min({4, 3, 5});\n   const int& y = std::min({4, 3, 2});"}, {"sha": "eb1b496c6fb16d2686a2202b0e8ac48192fcd340", "filename": "libstdc++-v3/testsuite/25_algorithms/min/37547.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F37547.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F37547.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F37547.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n // libstdc++/37547\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<int> v{1,2,3,4,5};\n \n   auto p = std::min({v});"}, {"sha": "7c694f85643eebb5c0d7bf71562b1cb34a15e69e", "filename": "libstdc++-v3/testsuite/25_algorithms/min/4.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F4.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,8 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const int& z = std::min({1, 2, 3, 4, 5, 6, 7});\n   const double& w = std::min({2.0, 1.0, 3.2, 4.5, 5.0, 6.0, 7.0});\n   const int& y = std::min({2, 3, 1, 4, 5, 6, 7});"}, {"sha": "e46126c9508529166b2ff16cc4b438bd18b334ca", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,8 +25,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::pair<const int, const int> z = std::minmax(1, 2);\n   std::pair<const int, const int> w = std::minmax(4, 3);\n   VERIFY( z.first == 1 );"}, {"sha": "3c8310bebac7e8e0947647d4a2158f0ab6605af2", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,8 +25,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::pair<int, int> z = std::minmax({1, 2, 3});\n   std::pair<int, int> w = std::minmax({4, 3, 5, 4});\n   std::pair<int, int> y = std::minmax({4, 5, 3, 7, 3});"}, {"sha": "0c4fd9781b5f88cd7d042868b0cba8a44f0ea8c6", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ int compare_counter::count = 0;\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::minmax({1, 2, 3, 4, 5, 6, 7, 8}, compare_counter());\n \n   // If N is the number of arguments in the minmax function call, "}, {"sha": "3fae0777c43cca1e6a24beac924f4dccbb1f1aa1", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/37547.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F37547.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F37547.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F37547.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n // libstdc++/37547\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<int> v{1,2,3,4,5};\n \n   auto p = std::minmax({v});"}, {"sha": "bc2efd75c749fbe96d460a59321424ee078e2e9a", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax_element/1.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,8 +31,6 @@ typedef std::pair<forward_iterator_wrapper<int>, forward_iterator_wrapper<int> >\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   int array[] = {0};\n   Container con(array, array);\n   pair_type p1 = minmax_element(con.begin(), con.end());\n@@ -43,8 +41,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[] = {0};\n   Container con(array, array + 1);\n   pair_type p1 = minmax_element(con.begin(), con.end());\n@@ -55,8 +51,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   int array[] = {0, 3};\n   Container con(array, array + 2);\n   pair_type p1 = minmax_element(con.begin(), con.end());\n@@ -67,8 +61,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   int array[] = {3, 0};\n   Container con(array, array + 2);\n   pair_type p1 = minmax_element(con.begin(), con.end());\n@@ -79,8 +71,6 @@ test4()\n void\n test5()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[] = {3, 3};\n   Container con(array, array + 2);\n   pair_type p1 = minmax_element(con.begin(), con.end());\n@@ -91,8 +81,6 @@ test5()\n void\n test6()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[] = {6, 3, 0, 2, 6, 4, 0};\n   Container con(array, array + 7);\n   pair_type p1 = minmax_element(con.begin(), con.end());\n@@ -103,8 +91,6 @@ test6()\n void\n test7()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[] = {4, 4, 4, 6, 6, 6, 1, 1, 0, 0, 0, 2, 2};\n   Container con(array, array + 13);\n   pair_type p1 = minmax_element(con.begin(), con.end());\n@@ -115,8 +101,6 @@ test7()\n void\n test8()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[] = {1, 7, 5, 5, 10, 1, 0, 0, 8, 4, 4, 0, 10, 10, 10, 1};\n   Container con(array, array + 16);\n   pair_type p1 = minmax_element(con.begin(), con.end());"}, {"sha": "a0ee9b6a2eb35fb062181ac2ae29f666bc3d6d2e", "filename": "libstdc++-v3/testsuite/25_algorithms/move/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -35,8 +35,6 @@ typedef test_container<rvalstruct, output_iterator_wrapper> container_out;\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n   const int size = sizeof(inarray) / sizeof(int);\n "}, {"sha": "2acb70d94325d50aa3d7a9411ca1f00f41ec8895", "filename": "libstdc++-v3/testsuite/25_algorithms/move/deque_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fdeque_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fdeque_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fdeque_iterators%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,7 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   deque<long> data(200);"}, {"sha": "b0ce1ed71738394e47dec09e0aae1b1a09fe60fe", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,8 +36,6 @@ typedef test_container<rvalstruct,\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n   const int size = sizeof(inarray) / sizeof(int);\n "}, {"sha": "1d7414298ed9074b66a4ad150b67ce713a3fe794", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/deque_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Fdeque_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Fdeque_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Fdeque_iterators%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,7 +23,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   deque<long> data(200);"}, {"sha": "537fc40a5e2d9597b1b2b296186e0847ffdd9eca", "filename": "libstdc++-v3/testsuite/25_algorithms/next_permutation/moveable.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,8 +34,6 @@ typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Container;\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   // Note: The standard is unclear on what should happen in this case.\n   // This seems the only really sensible behaviour, and what is done.\n   rvalstruct array[] = {0};\n@@ -46,8 +44,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct array[] = {0};\n   Container con(array, array + 1);\n   VERIFY( !next_permutation(con.begin(), con.end()) );\n@@ -56,8 +52,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct array[] = {0, 3};\n   Container con(array, array + 2);\n   VERIFY( next_permutation(con.begin(), con.end()) );\n@@ -69,8 +63,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[6] = {0, 1, 2, 3, 4, 5};\n   for(int i = 0 ; i < 719; ++i)\n     {\n@@ -98,8 +90,6 @@ are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n void\n test5()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[6] = {0, 1, 2, 3, 4, 5};\n   for(int i = 0 ; i < 719; ++i)\n     {"}, {"sha": "5b654fce4686fa16d250030bcee874c1eadfb8bc", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,26 +36,20 @@ predicate(const int& i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array);\n   VERIFY( std::none_of(con.begin(), con.end(), predicate) );\n }\n \n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-  \n   Container con(array, array + 1);\n   VERIFY( std::none_of(con.begin(), con.end(), predicate) );\n }\n \n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 6);\n   VERIFY( !std::none_of(con.begin(), con.end(), predicate) );\n }"}, {"sha": "301b71563ef422821d641c203148144dc00bcc6a", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -48,7 +48,6 @@ test2()\n void \n test3()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {6, 5, 4, 3, 2, 1, 0};\n   Container con(array, array + 7);\n   nth_element(con.begin(), con.it(3), con.end());\n@@ -61,7 +60,6 @@ test3()\n void \n test4()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {0, 6, 1, 5, 2, 4, 3};\n   Container con(array,array + 7);\n   nth_element(con.begin(), con.it(3), con.end());"}, {"sha": "71bad0058ca5f2b327ff5da79c9599267821c757", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -44,8 +44,6 @@ test_set(std::vector<unsigned>& v, unsigned size)\n void\n do_test01(unsigned size)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<unsigned> v, s;\n \n   for (unsigned j = 0; j < size; ++j)"}, {"sha": "4ac045bb0033d6a205fdbd4610309c237429f3a6", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};"}, {"sha": "5178a4c54837cf88242ff0dee3a9759fd6541392", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/moveable.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -40,8 +40,6 @@ typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n void \n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray[] = {6, 5, 4, 3, 2, 1, 0};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n@@ -58,8 +56,6 @@ test1()\n void \n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n@@ -80,8 +76,6 @@ are_less(const rvalstruct& lhs, const rvalstruct& rhs)\n void \n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);"}, {"sha": "e1e95001c3f8aa2a23e20608a5bfa553e24b2bc7", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/random_test.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Frandom_test.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,8 +37,6 @@ struct testNthElement\n   template<typename Container, typename RandomGen>\n   void operator()(Container con, RandomGen& rg)\n   {\n-    bool test __attribute__((unused)) = true;\n-\n     const int size = con.end() - con.begin();\n     auto dist = std::uniform_int_distribution<>(0, size);\n     const int element = dist(rg);"}, {"sha": "02a082fcc8a34a59335a6007e7cdcd72dccb28e8", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};"}, {"sha": "0bbdb22f72e4e2bcf56fbdf235309d6843f1aa99", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/check_compare_by_value.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fcheck_compare_by_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fcheck_compare_by_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fcheck_compare_by_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ typedef test_container<V, random_access_iterator_wrapper> Container;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -57,8 +55,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -75,8 +71,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V vvs[] = { 2, 0 };\n   std::partial_sort(vvs, vvs + 2, vvs + 2);\n   VERIFY( vvs[0].ok && vvs[0].val == 0 );"}, {"sha": "5c4522ef821c0ccc0ef35ef36cd326193eac27f7", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/moveable.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -40,8 +40,6 @@ typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n void \n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray[] = {6, 5, 4, 3, 2, 1, 0};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n@@ -55,8 +53,6 @@ test1()\n void \n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n@@ -73,8 +69,6 @@ bool are_less(const rvalstruct& lhs, const rvalstruct& rhs)\n void \n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);"}, {"sha": "af8600f8a59940f216a15ab7a58d5ce20cf6097e", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/random_test.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Frandom_test.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,8 +37,6 @@ struct testPartialSort\n   template<typename Container, typename RandomGen>\n   void operator()(Container con, RandomGen& rg)\n   {\n-    bool test __attribute__((unused)) = true;\n-\n     const int size = con.end() - con.begin();\n     auto dist = std::uniform_int_distribution<>(0, size);\n     const int element = dist(rg);"}, {"sha": "ddfc7ee10120560b9a8e48e3226329a75a814b09", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};"}, {"sha": "93b6fd434208d40cbabbe647eb182f142a9fc769", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/random_test.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Frandom_test.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -38,8 +38,6 @@ struct testPartialSortCopy\n   template<typename Container, typename RandomGen>\n   void operator()(Container con, RandomGen& rg)\n   {\n-    bool test __attribute__((unused)) = true;\n-\n     const int size = con.end() - con.begin();\n     auto dist = std::uniform_int_distribution<>(0, size);\n     const int element = dist(rg);"}, {"sha": "e703f2a0d7459e6516081dbba369437a95980d58", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -21,8 +21,6 @@\n #include <functional>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n const int N = sizeof(A) / sizeof(int);"}, {"sha": "60b916ae458ff102a3c65bb5c1ec0584d1fdaf75", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/moveable.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -35,8 +35,6 @@ using __gnu_test::rvalstruct;\n typedef test_container<rvalstruct, forward_iterator_wrapper> Fcontainer;\n typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Bcontainer;\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n const int N = sizeof(A) / sizeof(int);"}, {"sha": "1bbc340f9caeefd250955b3be216ae5da3f8e4cf", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -38,8 +38,6 @@ pred(int i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int true_out[1] = { -1 };\n   int false_out[1] = { -1 };\n   Icontainer in_con(array, array);\n@@ -57,8 +55,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int true_out[1] = { -1 };\n   int false_out[1] = { -1 };\n   Icontainer in_con(array, array + 2);\n@@ -78,8 +74,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int true_out[3] = { -1, -1, -1 };\n   int false_out[3] = { -1, -1, -1 };\n   Icontainer in_con(array, array + 6);"}, {"sha": "2227a1921790fc260087f92f0821fbd4cc9a67a1", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,8 +36,6 @@ predicate(const int& i)\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array);\n \n   forward_iterator_wrapper<int> mid =\n@@ -50,8 +48,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 1);\n \n   forward_iterator_wrapper<int> mid =\n@@ -64,8 +60,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   Container con(array, array + 6);\n \n   forward_iterator_wrapper<int> mid ="}, {"sha": "b632fb3ce89e70645bcd83390676be43fcb061c7", "filename": "libstdc++-v3/testsuite/25_algorithms/pop_heap/complexity.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fcomplexity.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   using __gnu_test::counter_type;\n   const std::size_t nb_values = 1000;\n "}, {"sha": "d46c0696f16c95557e0ed3c01ad444eb1c8c76cc", "filename": "libstdc++-v3/testsuite/25_algorithms/prev_permutation/moveable.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,8 +34,6 @@ typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Container;\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   // Note: The standard is unclear on what should happen in this case.\n   // This seems the only really sensible behaviour, and what is done.\n   rvalstruct array[] = {0};\n@@ -46,8 +44,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct array[] = {0};\n   Container con(array, array + 1);\n   VERIFY( !prev_permutation(con.begin(), con.end()) );\n@@ -56,8 +52,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct array[] = {3, 0};\n   Container con(array, array + 2);\n   VERIFY( prev_permutation(con.begin(), con.end()) );\n@@ -69,8 +63,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[6] = {5, 4, 3, 2, 1, 0};\n   for(int i = 0 ; i < 719; ++i)\n     {\n@@ -98,8 +90,6 @@ are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n void\n test5()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int array[6] = {5, 4, 3, 2, 1, 0};\n   for(int i = 0 ; i < 719; ++i)\n     {"}, {"sha": "c80eac787faee0f4490bc72930f12b0ff98edc79", "filename": "libstdc++-v3/testsuite/25_algorithms/push_heap/complexity.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fcomplexity.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   using __gnu_test::counter_type;\n   const std::size_t nb_values = 1000;\n "}, {"sha": "3e3ccc69583b897e7da2972239c12e8b2ce5bfd3", "filename": "libstdc++-v3/testsuite/25_algorithms/random_shuffle/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int N = 200000;\n int A[N], s1[N];\n "}, {"sha": "da89e1d16c39c76612820f01a4c2739d7e181e22", "filename": "libstdc++-v3/testsuite/25_algorithms/random_shuffle/moveable.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -46,8 +46,6 @@ void fill_ascending()\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   fill_ascending();\n   rvalstruct rv[N];\n   std::copy(A, A + N, rv);\n@@ -68,8 +66,6 @@ int random_generator(int)\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct rv[10] = {1,2,3,4,5,6,7,8,9,10};\n   int result[10] = {10,1,2,3,4,5,6,7,8,9};\n   Container con(rv, rv + 10);"}, {"sha": "4c8e46b9322c789b19ee3ca8c85d4f8848a7e8a8", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/1.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -35,7 +35,6 @@ typedef test_container<int, random_access_iterator_wrapper> Rcontainer;\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[]={1};\n   Fcontainer fcon(array, array);\n   Bcontainer bcon(array, array);\n@@ -48,7 +47,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {1};\n   Fcontainer fcon(array, array + 1);\n   Bcontainer bcon(array, array + 1);\n@@ -64,7 +62,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {1, 2, 3, 4, 5};\n   Fcontainer fcon(array, array + 5);\n   Bcontainer bcon(array, array + 5);\n@@ -83,7 +80,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {1, 2, 3, 4};\n   Fcontainer fcon(array, array + 4);\n   Bcontainer bcon(array, array + 4);  \n@@ -106,7 +102,6 @@ test4()\n void\n test5()\n {\n-  bool test __attribute__((unused)) = true;\n   int array[] = {1, 2, 3, 4};\n   Rcontainer con(array, array + 4);\n   std::rotate(con.begin(), con.it(2), con.end());"}, {"sha": "69e12393c32a7d118d2ca4083ac28d4223b285c7", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -41,7 +41,6 @@ typedef test_container<rvalstruct, random_access_iterator_wrapper> Rcontainer;\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n   int data[] = {1, 2, 3, 4, 5};\n   rvalstruct array[5];\n   std::copy(data, data + 5, array); "}, {"sha": "5aeaaba8c00ca94fd2bdaace4360d64b883c68f0", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/moveable2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fmoveable2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -42,8 +42,6 @@ template<typename Con>\n   void\n   test_con(int length, int rotate_pos)\n   {\n-    bool test __attribute__((unused)) = true;\n-\n     /* Make sure the VLA upper bound is positive. */\n     rvalstruct array[length + 1];\n     for(int i = 0; i < length; ++i)"}, {"sha": "383bf8e5a013ad3d0616265b383213bf80f092e6", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/rotate.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frotate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frotate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frotate.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -21,8 +21,6 @@\n #include <testsuite_hooks.h>\n #include <list>\n \n-bool test __attribute__((unused)) = true;\n-\n int A[] = {1, 2, 3, 4, 5, 6, 7};\n int B[] = {2, 3, 4, 5, 6, 7, 1};\n int C[] = {1, 2, 3, 4, 5, 6, 7};\n@@ -31,7 +29,7 @@ const int N = sizeof(A) / sizeof(int);\n \n /* need a test for a forward iterator -- can't think of one that makes sense */\n \n-/* biderectional iterator */\n+/* bidirectional iterator */\n void\n test02()\n {"}, {"sha": "5be2b7f880cebf393fc64e3a76afdd66f6d61c47", "filename": "libstdc++-v3/testsuite/25_algorithms/search/1.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,7 +34,6 @@ int array2[] = {0, 0, 0};\n void \n test1()\n {\n-  bool test __attribute__((unused)) = true;\n   Container con1(array1, array1);\n   Container con2(array1, array1 + 1);\n   VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr == array1);\n@@ -44,7 +43,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n   Container con1(array1, array1 + 3);\n   Container con2(array2, array2 + 3);\n   VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr \n@@ -54,7 +52,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n   Container con1(array1 + 3, array1 + 10);\n   Container con2(array2, array2 + 3);\n   VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr \n@@ -64,7 +61,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n   Container con1(array1, array1 + 10);\n   Container con2(array2, array2 + 1);\n   VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr\n@@ -74,7 +70,6 @@ test4()\n void\n test5()\n {\n-  bool test __attribute__((unused)) = true;\n   Container con1(array1 + 6, array1 + 10);\n   Container con2(array2, array2 + 1);\n   VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr\n@@ -84,7 +79,6 @@ test5()\n void\n test6()\n {\n-  bool test __attribute__((unused)) = true;\n   int array3[]={2, 2, 1, 2, 3, 5};\n   int array4[]={1, 2, 3, 4};\n   Container con1(array3, array3 + 3);"}, {"sha": "5962ac879bb514403d2c23b7e29fe823c56b36a8", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/58358.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F58358.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F58358.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F58358.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -25,8 +25,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<int> a{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n   int count = 0;\n   std::search_n(a.begin(), a.end(), 10, 1,"}, {"sha": "d3b233228e533ca4710b3f464f4c2199c5d661c8", "filename": "libstdc++-v3/testsuite/25_algorithms/shuffle/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,8 +27,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   for (unsigned size = 0; size < 50; ++size)\n     {\n       std::vector<int> vref(size);"}, {"sha": "cd399f099e192717926ba45d143b5cd6f0b8bf9c", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};"}, {"sha": "5e5641fc979976ab93716291418a2db429263943", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/check_compare_by_value.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fcheck_compare_by_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fcheck_compare_by_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fcheck_compare_by_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ typedef test_container<V, random_access_iterator_wrapper> Container;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -54,8 +52,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -68,8 +64,6 @@ test02()\n \n void test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V vvs[] = { 2, 0 };\n   std::sort(vvs, vvs + 2);\n   VERIFY( vvs[0].ok && vvs[0].val == 0 );"}, {"sha": "4d100b82017ece25bf4aa0cf0996fbed315ccda2", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/moveable.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -45,8 +45,6 @@ const int N = sizeof(A) / sizeof(int);\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[N];\n   std::copy(A, A + N, s1);\n   Container con(s1, s1 + N);\n@@ -63,8 +61,6 @@ bool order(const rvalstruct& lhs, const rvalstruct& rhs)\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[N];\n   std::copy(A, A + N, s1);\n   Container con(s1, s1 + N);"}, {"sha": "dbf5c529b60daefe951c29dd1f97a3801efa8548", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/random_test.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Frandom_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Frandom_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Frandom_test.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,8 +37,6 @@ struct testSort\n   template<typename Container, typename RandomGen>\n   void operator()(Container con, RandomGen&)\n   {\n-    bool test __attribute__((unused)) = true;\n-\n     std::sort(con.begin(), con.end());\n     VERIFY( std::is_sorted(con.begin(), con.end()) );\n   }"}, {"sha": "45cda370986de5371b6ab9b77f1631c6ce719d78", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/vectorbool.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fvectorbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fvectorbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fvectorbool.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<bool> b;\n   b.push_back(false);\n   b.push_back(true);"}, {"sha": "80aec6ef0af43a4f4f7deef579b0e2dc6f151d8f", "filename": "libstdc++-v3/testsuite/25_algorithms/sort_heap/check_compare_by_value.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcheck_compare_by_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcheck_compare_by_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcheck_compare_by_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ typedef test_container<V, random_access_iterator_wrapper> Container;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -49,8 +47,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -65,8 +61,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V vvs[] = { 2, 0 };\n   std::make_heap(vvs, vvs + 2);\n   std::sort_heap(vvs, vvs + 2);"}, {"sha": "a9f11f96fe3894ed5679dba6594b01dd6eff6c51", "filename": "libstdc++-v3/testsuite/25_algorithms/sort_heap/complexity.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcomplexity.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,8 +28,6 @@\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   using __gnu_test::counter_type;\n   const std::size_t nb_values = 1000;\n "}, {"sha": "8f80d27a16f9c4bc4c50bdab005e715d06911a6e", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,8 +22,6 @@\n #include <testsuite_new_operators.h>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n const int N = sizeof(A) / sizeof(int);"}, {"sha": "280efa530949193285a50da9914de669300b3217", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/mem_check.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmem_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmem_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmem_check.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ bool even(const copy_tracker& ct)\n void\n test1(int throw_count)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   copy_tracker vals[30];\n   for(int i = 0; i < 30; ++i)\n     vals[i] = A[i];"}, {"sha": "24b7a4b41cc54900f184c574bf04921c4c4ec425", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/moveable.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -51,8 +51,6 @@ struct Pred\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[N];\n   std::copy(A, A + N, s1);\n   Container con(s1, s1 + N);\n@@ -65,8 +63,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[N2];\n   std::copy(A2, A2 + N2, s1);\n   Container con(s1, s1 + N2);"}, {"sha": "f1166463f5317845a8e9c5b7fae4daedc93576b1", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};"}, {"sha": "db2409eca0abec45442c8f04886b48ed2d66f852", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n void \n test1()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::vector<bool> bools;\n   bools.push_back(true);\n   bools.push_back(false);"}, {"sha": "50e6db74994ae10e8cfda7139ddbdfcbb6a22f12", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/49559.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F49559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F49559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F49559.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -43,8 +43,6 @@ bool order(const rvalstruct& lhs, const rvalstruct& rhs)\n // libstdc++/49559\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[1];\n   std::copy(A, A + 1, s1);\n   Container con1(s1, s1 + 1);"}, {"sha": "6c99ecd802f8d775073a610aecd26a168fc7dca7", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/check_compare_by_value.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fcheck_compare_by_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fcheck_compare_by_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fcheck_compare_by_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ typedef test_container<V, random_access_iterator_wrapper> Container;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -57,8 +55,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V s1[] = { 10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n \t     17, 8, 18, 9, 19 };\n   const int N = sizeof(s1) / sizeof(V);\n@@ -72,8 +68,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   V vvs[] = { 2, 0 };\n   std::stable_sort(vvs, vvs + 2);\n   VERIFY( vvs[0].ok && vvs[0].val == 0 );"}, {"sha": "79cccae93f1ea86d66734661c894301937620303", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/mem_check.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmem_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmem_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmem_check.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,8 +36,6 @@ const int A[] = {10, 20, 1, 11, 2, 21, 28, 29, 12, 35, 15, 27, 6, 16, 7,\n void\n test_mem1(int throw_count)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   copy_tracker vals[30];\n   for(int i = 0; i < 30; ++i)\n     vals[i] = A[i];\n@@ -67,8 +65,6 @@ is_ordered(const copy_tracker& lhs, const copy_tracker& rhs)\n void\n test_mem2(int throw_count)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   copy_tracker vals[30];\n   for(int i = 0; i < 30; ++i)\n     vals[i] = A[i];"}, {"sha": "dcc1941a368dad3063a258762513e9a31c48ebd4", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/moveable.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -44,8 +44,6 @@ const int N = sizeof(A) / sizeof(int);\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[N];\n   std::copy(A, A + N, s1);\n   Container con(s1, s1 + N);"}, {"sha": "9d82f1ae95edcfcb449cdfa722deec6ac91f43d1", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/moveable2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmoveable2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -47,8 +47,6 @@ bool order(const rvalstruct& lhs, const rvalstruct& rhs)\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   rvalstruct s1[N];\n   std::copy(A, A + N, s1);\n   Container con(s1, s1 + N);"}, {"sha": "3841808f666180edde5f0d8c5dd2bb0617787c35", "filename": "libstdc++-v3/testsuite/25_algorithms/swap_ranges/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -30,7 +30,6 @@ typedef test_container<int, forward_iterator_wrapper> Container;\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n   int array1[]={1, 2};\n   int array2[]={3, 4};\n   Container con1(array1, array1 + 2);\n@@ -43,7 +42,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n   int array1[] = {1};\n   int array2[] = {1};\n   Container con1(array1, array1);"}, {"sha": "8f5ed8e6d8bbda4f9e25a1bea4d91f7038d56a8f", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/11480.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F11480.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F11480.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F11480.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,8 +31,6 @@ bool compare(int a, int b)\n // libstdc++/11480\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::unique(a, a+10, compare);\n   VERIFY( compare_count == 9 );\n }"}, {"sha": "1870a5045b6e71629d296252273078873efec635", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/2.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -38,7 +38,6 @@ const int B3[] = {9, 9, 8, 8, 8, 8, 7, 6, 6, 1, 1, 1, 1, 1};\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   list<int>::iterator pos;\n@@ -54,7 +53,6 @@ void test01()\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   list<int>::iterator pos;\n@@ -70,7 +68,6 @@ void test02()\n \n void test03()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n   list<int>::iterator pos;"}, {"sha": "7a2d86ee8148cf173fc24911751f70c064fac3ad", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/moveable.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -36,8 +36,6 @@ typedef test_container<rvalstruct, forward_iterator_wrapper> Container;\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray1[] = {1, 4, 4, 6, 1, 2, 2, 3, 1, 6, 6, 6, 5, 7, 5, 4, 4};\n   int intarray2[] = {1, 1, 1, 2, 2, 1, 1, 7, 6, 6, 7, 8, 8, 8, 8, 9, 9};\n \n@@ -69,8 +67,6 @@ bool are_equal(const rvalstruct& rhs, const rvalstruct& lhs)\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   int intarray1[] = {1, 4, 4, 6, 1, 2, 2, 3, 1, 6, 6, 6, 5, 7, 5, 4, 4};\n   int intarray2[] = {1, 1, 1, 2, 2, 1, 1, 7, 6, 6, 7, 8, 8, 8, 8, 9, 9};\n "}, {"sha": "b74672be695a76eeb707161f24e36a2be2a8dbd4", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/1.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,7 +37,6 @@ int array2[2];\n void \n test1()\n {\n-  bool test __attribute__((unused)) = true;\n   Icontainer con1(array1, array1);\n   Ocontainer con2(array2, array2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr == array2 );\n@@ -46,7 +45,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n   Icontainer con1(array1, array1 + 6);\n   Ocontainer con2(array2, array2 + 2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr \n@@ -57,7 +55,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n   Icontainer con1(array1, array1);\n   Fcontainer con2(array2, array2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr == array2 );\n@@ -66,7 +63,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n   Icontainer con1(array1, array1 + 6);\n   Fcontainer con2(array2, array2 + 2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr"}, {"sha": "6b336a2b0bbeafa526d2d9a318ff40314f63acde", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/2.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,7 +37,6 @@ int array2[2];\n void\n test1()\n {\n-  bool test __attribute__((unused)) = true;\n   Fcontainer con1(array1, array1);\n   Ocontainer con2(array2, array2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr == array2 );\n@@ -46,7 +45,6 @@ test1()\n void\n test2()\n {\n-  bool test __attribute__((unused)) = true;\n   Fcontainer con1(array1, array1 + 6);\n   Ocontainer con2(array2, array2 + 2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin()).ptr\n@@ -57,7 +55,6 @@ test2()\n void\n test3()\n {\n-  bool test __attribute__((unused)) = true;\n   Fcontainer con1(array1, array1);\n   Ocontainer con2(array2, array2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin(),\n@@ -67,7 +64,6 @@ test3()\n void\n test4()\n {\n-  bool test __attribute__((unused)) = true;\n   Fcontainer con1(array1, array1 + 6);\n   Ocontainer con2(array2, array2 + 2);\n   VERIFY( unique_copy(con1.begin(), con1.end(), con2.begin(),"}, {"sha": "a6c21da34d6658a4ba8f2ed24488bdc9439ffa13", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/26133.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F26133.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F26133.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F26133.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -30,7 +30,6 @@ struct no_assign\n // libstdc++/26133\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::ostringstream oss1, oss2;\n \n   no_assign in[4];"}, {"sha": "75074131f9c494f30884e0ff054b4dce1d54b612", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -20,8 +20,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 2, 3, 3, 3, 5, 8};\n const int C[] = {8, 5, 3, 3, 3, 2, 1};\n const int N = sizeof(A) / sizeof(int);"}, {"sha": "868663bcf3393df41f356289936fef24cfb7d505", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/partitioned.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fpartitioned.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,8 +39,6 @@ struct X\n void\n test01()\n {\n-  bool test __attribute((unused)) = true;\n-\n   // Test with range that is partitioned, but not sorted.\n   X seq[] = { 1, 3, 5, 7, 1, 6, 4, 2 };\n   test_container<X, forward_iterator_wrapper> c(seq);\n@@ -69,8 +67,6 @@ struct Y\n void\n test02()\n {\n-  bool test __attribute((unused)) = true;\n-\n   // Test that Debug Mode checks don't fire (libstdc++/71545)\n \n   Y seq[] = { -0.1, 1.2, 5.0, 5.2, 5.1, 5.9, 5.5, 6.0 };"}, {"sha": "08798babbb5efe63f505696359a060455e53533b", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/awk/cstring_01.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fawk%2Fcstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fawk%2Fcstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fawk%2Fcstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex(\"\\\\[\", regex_constants::awk);\n   VERIFY(regex_match_debug(\"\\\"\", regex(\"[\\\\\\\"]\", regex_constants::awk)));\n   VERIFY(regex_match_debug(\"/\", regex(\"/\", regex_constants::awk)));"}, {"sha": "d53cfdfb8fb160eb1f9cc6f32b5ef95e65e3d394", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/empty_range.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fempty_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fempty_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fempty_range.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n #define FAIL(s) \\\n   try\\\n     {\\"}, {"sha": "1e442e911224ae3a752870d2a78e7cb2ca197443", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_01.cc", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,28 +33,26 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n+  std::regex  re(\"\\\\(a\\\\).*\", std::regex::basic);\n+  std::string target(\"aaba\");\n+  std::smatch m;\n \n-\tstd::regex  re(\"\\\\(a\\\\).*\", std::regex::basic);\n-\tstd::string target(\"aaba\");\n-\tstd::smatch m;\n+  VERIFY( regex_match_debug(target, m, re) );\n \n-\tVERIFY( regex_match_debug(target, m, re) );\n-\n-\tVERIFY( m.size()  == re.mark_count()+1 );\n-\tVERIFY( m.empty() == false );\n-\tVERIFY( m.prefix().first == target.begin() );\n-\tVERIFY( m.prefix().second == target.begin() );\n-\tVERIFY( m.prefix().matched == false );\n-\tVERIFY( m.suffix().first == target.end() );\n-\tVERIFY( m.suffix().second == target.end() );\n-\tVERIFY( m.suffix().matched == false );\n-\tVERIFY( m[0].first == target.begin() );\n-\tVERIFY( m[0].second == target.end() );\n-\tVERIFY( m[0].matched == true );\n-\tVERIFY( m[1].first == target.begin() );\n-\tVERIFY( m[1].second == target.begin()+1 );\n-\tVERIFY( m[1].matched == true );\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().first == target.begin() );\n+  VERIFY( m.prefix().second == target.begin() );\n+  VERIFY( m.prefix().matched == false );\n+  VERIFY( m.suffix().first == target.end() );\n+  VERIFY( m.suffix().second == target.end() );\n+  VERIFY( m.suffix().matched == false );\n+  VERIFY( m[0].first == target.begin() );\n+  VERIFY( m[0].second == target.end() );\n+  VERIFY( m[0].matched == true );\n+  VERIFY( m[1].first == target.begin() );\n+  VERIFY( m[1].second == target.begin()+1 );\n+  VERIFY( m[1].matched == true );\n }\n \n "}, {"sha": "82737192ea9ec0ae01f42b832153077a3bd4fc6d", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_range_00_03.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_00_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_00_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_00_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,25 +33,23 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\tstd::regex  re(\"a\\\\{0,3\\\\}\", std::regex::basic);\n-\tstd::string target(\"aa\");\n-\tstd::smatch m;\n-\n-\tVERIFY( regex_match_debug(target, m, re) );\n-\n-\tVERIFY( m.size()  == re.mark_count()+1 );\n-\tVERIFY( m.empty() == false );\n-\tVERIFY( m.prefix().first == target.begin() );\n-\tVERIFY( m.prefix().second == target.begin() );\n-\tVERIFY( m.prefix().matched == false );\n-\tVERIFY( m.suffix().first == target.end() );\n-\tVERIFY( m.suffix().second == target.end() );\n-\tVERIFY( m.suffix().matched == false );\n-\tVERIFY( m[0].first == target.begin() );\n-\tVERIFY( m[0].second == target.end() );\n-\tVERIFY( m[0].matched == true );\n+  std::regex  re(\"a\\\\{0,3\\\\}\", std::regex::basic);\n+  std::string target(\"aa\");\n+  std::smatch m;\n+\n+  VERIFY( regex_match_debug(target, m, re) );\n+\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().first == target.begin() );\n+  VERIFY( m.prefix().second == target.begin() );\n+  VERIFY( m.prefix().matched == false );\n+  VERIFY( m.suffix().first == target.end() );\n+  VERIFY( m.suffix().second == target.end() );\n+  VERIFY( m.suffix().matched == false );\n+  VERIFY( m[0].first == target.begin() );\n+  VERIFY( m[0].second == target.end() );\n+  VERIFY( m[0].matched == true );\n }\n \n "}, {"sha": "799b804a5163ec0f90fba758120eb950f5e26ac8", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_range_01_03.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_01_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_01_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_01_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,25 +33,23 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\tstd::regex  re(\"a\\\\{1,3\\\\}\", std::regex::basic);\n-\tstd::string target(\"aa\");\n-\tstd::smatch m;\n-\n-\tVERIFY( regex_match_debug(target, m, re) );\n-\n-\tVERIFY( m.size()  == re.mark_count()+1 );\n-\tVERIFY( m.empty() == false );\n-\tVERIFY( m.prefix().first == target.begin() );\n-\tVERIFY( m.prefix().second == target.begin() );\n-\tVERIFY( m.prefix().matched == false );\n-\tVERIFY( m.suffix().first == target.end() );\n-\tVERIFY( m.suffix().second == target.end() );\n-\tVERIFY( m.suffix().matched == false );\n-\tVERIFY( m[0].first == target.begin() );\n-\tVERIFY( m[0].second == target.end() );\n-\tVERIFY( m[0].matched == true );\n+  std::regex  re(\"a\\\\{1,3\\\\}\", std::regex::basic);\n+  std::string target(\"aa\");\n+  std::smatch m;\n+\n+  VERIFY( regex_match_debug(target, m, re) );\n+\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().first == target.begin() );\n+  VERIFY( m.prefix().second == target.begin() );\n+  VERIFY( m.prefix().matched == false );\n+  VERIFY( m.suffix().first == target.end() );\n+  VERIFY( m.suffix().second == target.end() );\n+  VERIFY( m.suffix().matched == false );\n+  VERIFY( m[0].first == target.begin() );\n+  VERIFY( m[0].second == target.end() );\n+  VERIFY( m[0].matched == true );\n }\n \n "}, {"sha": "0ec594e83a611b06011ab35f3eb47c3bf2437d96", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/basic/string_range_02_03.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fbasic%2Fstring_range_02_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,25 +33,23 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\tstd::regex  re(\"a\\\\{2,3\\\\}\", std::regex::basic);\n-\tstd::string target(\"aa\");\n-\tstd::smatch m;\n-\n-\tVERIFY( regex_match_debug(target, m, re) );\n-\n-\tVERIFY( m.size()  == re.mark_count()+1 );\n-\tVERIFY( m.empty() == false );\n-\tVERIFY( m.prefix().first == target.begin() );\n-\tVERIFY( m.prefix().second == target.begin() );\n-\tVERIFY( m.prefix().matched == false );\n-\tVERIFY( m.suffix().first == target.end() );\n-\tVERIFY( m.suffix().second == target.end() );\n-\tVERIFY( m.suffix().matched == false );\n-\tVERIFY( m[0].first == target.begin() );\n-\tVERIFY( m[0].second == target.end() );\n-\tVERIFY( m[0].matched == true );\n+  std::regex  re(\"a\\\\{2,3\\\\}\", std::regex::basic);\n+  std::string target(\"aa\");\n+  std::smatch m;\n+\n+  VERIFY( regex_match_debug(target, m, re) );\n+\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().first == target.begin() );\n+  VERIFY( m.prefix().second == target.begin() );\n+  VERIFY( m.prefix().matched == false );\n+  VERIFY( m.suffix().first == target.end() );\n+  VERIFY( m.suffix().second == target.end() );\n+  VERIFY( m.suffix().matched == false );\n+  VERIFY( m[0].first == target.begin() );\n+  VERIFY( m[0].second == target.end() );\n+  VERIFY( m[0].matched == true );\n }\n \n "}, {"sha": "d3acf5ea19be4f2e96862b283666bd1a74144481", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   {\n     std::regex  re(\"pre/[za-x]\", std::regex::extended);\n     VERIFY( regex_match_debug(\"pre/z\", re) );\n@@ -70,8 +68,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   try\n   {\n     std::regex re(\"[-----]\", std::regex::extended);\n@@ -103,8 +99,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   try\n   {\n     std::regex re(\"[z-a]\", std::regex::extended);\n@@ -119,8 +113,6 @@ test03()\n void\n test04()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex re(\"[-0-9a-z]\");\n   VERIFY(regex_match_debug(\"-\", re));\n   VERIFY(regex_match_debug(\"1\", re));\n@@ -135,8 +127,6 @@ test04()\n void\n test05()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex lanana_namespace(\"^[a-z0-9]+$\", regex::extended);\n   regex lsb_namespace(\"^_?([a-z0-9_.]+-, regex::extended)+[a-z0-9]+$\");\n   regex debian_dpkg_conffile_cruft(\"dpkg-(old|dist|new|tmp, regex::extended)$\");\n@@ -154,8 +144,6 @@ test05()\n void\n test06()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex lanana_namespace(\"^[a-z0-9]+$\");\n   regex lsb_namespace(\"^_?([a-z0-9_.]+-)+[a-z0-9]+$\");\n   regex debian_dpkg_conffile_cruft(\"dpkg-(old|dist|new|tmp)$\");"}, {"sha": "82cf96b8752c61094a42c5f82e33c263fb0680f1", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/53622.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F53622.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F53622.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F53622.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   {\n     std::regex  re(\"zxcv/(one.*)abc\", std::regex::ECMAScript);\n     std::string target(\"zxcv/onetwoabc\");"}, {"sha": "fb2f79ad3c29fd11e2dda2d481ad3bd5c0d16b95", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/57173.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F57173.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F57173.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F57173.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,8 +34,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   {\n     std::regex  re(\"/asdf(/.*)\", std::regex::ECMAScript);\n     std::string target(\"/asdf/qwerty\");"}, {"sha": "ab8772b7bb8257d18a728634a0abbe3b5ca7d027", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/58576.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F58576.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F58576.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F58576.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   string domain_name = \"valid.hostname.org\";\n   /**\n    * based on http://stackoverflow.com/questions/1418423/the-hostname-regex"}, {"sha": "0a7fc404a5d883991743fd0ac6264182ff4d3aef", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/68863.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F68863.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F68863.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2F68863.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -30,8 +30,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(!std::regex_match(\"aa\", std::regex(\"(.)(?!\\\\1).\")));\n }\n "}, {"sha": "ba66c693055e506243b981fbaec3b52395a95d39", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fanymatcher.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n #define TEST(res, s) \\\n   {\\\n     regex re(res);\\"}, {"sha": "5e0ddbcbc6912e07966ca94e186a8f19cb4652fa", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fbackref.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex re(\"([A-Z])\\\\1*\");\n   smatch m;\n   {"}, {"sha": "71e815d418b88035577e4e3d4c5690872d380812", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fempty_range.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(!regex_match_debug(\"x\", regex(\"[]\")));\n   VERIFY(regex_match_debug(\"x\", regex(\"[^]\")));\n   VERIFY(!regex_match_debug(\"]\", regex(\"[]]\")));"}, {"sha": "8de6ad82b9d003c4b427faa67c8afec60293857f", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Femptygroup.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   {\n     regex re(\"()*\\\\1\");\n     cmatch m;"}, {"sha": "20dad639a8cdd52f2927c5e717dcd78170d8a941", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fhex.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(regex_match_debug(\":\", regex(\"\\\\x3a\")));\n   try\n     {"}, {"sha": "6277818a2fecb7c9e9c3e32ac157aa5ea6513d3d", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/quoted_char.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fquoted_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fquoted_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fquoted_char.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(regex_match_debug(\"01\", regex(\"\\\\d*\")));\n   VERIFY(regex_match_debug(\"asdfjkl\", regex(\"\\\\D*\")));\n   VERIFY(!regex_match_debug(\"asdfjkl0\", regex(\"\\\\D*\")));"}, {"sha": "2936e88b8e3ef20684f82105f6be99603b3850b2", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/char/ungreedy.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fungreedy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fungreedy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fchar%2Fungreedy.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex re(\"(a*?)*?\");\n   cmatch m;\n   VERIFY(regex_match(\"a\", m, re));"}, {"sha": "2e4de780ae8b125139a4a64845ffa1fc9e8b1604", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/63199.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2F63199.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2F63199.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2F63199.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::setlocale(LC_ALL, \"\");\n \n   std::wstring current_token(L\"II.\");"}, {"sha": "758f6d47cb61a90c6a05cbd314bc5220b7098a6d", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fanymatcher.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n #define TESTL(res, s) \\\n   {\\\n     wregex re(res);\\"}, {"sha": "ef15553394cf0265276107bfa6dbb1b2d22319a7", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/cjk_match.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fcjk_match.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fcjk_match.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fcjk_match.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const wchar_t * s = L\"\\u4f60\\u597d\\u002c\\u0020\\u4e16\\u002b\\u754c\";\n \n   wregex re(s);"}, {"sha": "9ff06d461ceb063962f42583177299630966f176", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fwchar_t%2Fhex.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(regex_match_debug(L\"\\u1234\", wregex(L\"\\\\u1234\")));\n }\n "}, {"sha": "abd21449c9eef5b291e2a1fe2762f4a97a229802", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_plus.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_plus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_plus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_plus.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex  re(\"(a+)\", std::regex::extended);\n   const char target[] = \"aa\";\n   std::cmatch m;"}, {"sha": "81356b61e1c28d9f6ebb149d4527ad427e545a17", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_questionmark.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_questionmark.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_questionmark.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_questionmark.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex  re(\"(aa?)\", std::regex::extended);\n   char target[] = \"a\";\n   std::cmatch m;"}, {"sha": "eb7a8142ae1a3eb36bd7845299c2f3e6734d8974", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_range.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fcstring_range.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex re;\n   re.assign(\"(ab){3}\", std::regex::extended);\n   VERIFY(!regex_match_debug(\"abab\", re));"}, {"sha": "a4198011f5fbdd9c69b15910614f87695f47ff08", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_any.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_any.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_any.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_any.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,25 +33,23 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\tstd::regex  re(\".*\", std::regex::extended);\n-\tstd::string target(\"aaba\");\n-\tstd::smatch m;\n-\n-\tVERIFY( regex_match_debug(target, m, re) );\n-\n-\tVERIFY( m.size()  == re.mark_count()+1 );\n-\tVERIFY( m.empty() == false );\n-\tVERIFY( m.prefix().first == target.begin() );\n-\tVERIFY( m.prefix().second == target.begin() );\n-\tVERIFY( m.prefix().matched == false );\n-\tVERIFY( m.suffix().first == target.end() );\n-\tVERIFY( m.suffix().second == target.end() );\n-\tVERIFY( m.suffix().matched == false );\n-\tVERIFY( m[0].first == target.begin() );\n-\tVERIFY( m[0].second == target.end() );\n-\tVERIFY( m[0].matched == true );\n+  std::regex  re(\".*\", std::regex::extended);\n+  std::string target(\"aaba\");\n+  std::smatch m;\n+\n+  VERIFY( regex_match_debug(target, m, re) );\n+\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().first == target.begin() );\n+  VERIFY( m.prefix().second == target.begin() );\n+  VERIFY( m.prefix().matched == false );\n+  VERIFY( m.suffix().first == target.end() );\n+  VERIFY( m.suffix().second == target.end() );\n+  VERIFY( m.suffix().matched == false );\n+  VERIFY( m[0].first == target.begin() );\n+  VERIFY( m[0].second == target.end() );\n+  VERIFY( m[0].matched == true );\n }\n \n "}, {"sha": "e2ec64ec94d299d6e42b3ab5f57db94b9ee8d285", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_range_00_03.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_00_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_00_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_00_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -32,8 +32,6 @@ using namespace __gnu_test;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex  re(\"a{0,3}\", std::regex::extended);\n   std::string target(\"aa\");\n   std::smatch m;"}, {"sha": "27dac9fb1d12ea346afb1d46ee408a52c8f9526b", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_range_01_03.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_01_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_01_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_01_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,25 +33,23 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\tstd::regex  re(\"a{1,3}\", std::regex::extended);\n-\tstd::string target(\"aa\");\n-\tstd::smatch m;\n-\n-\tVERIFY( regex_match_debug(target, m, re) );\n-\n-\tVERIFY( m.size()  == re.mark_count()+1 );\n-\tVERIFY( m.empty() == false );\n-\tVERIFY( m.prefix().first == target.begin() );\n-\tVERIFY( m.prefix().second == target.begin() );\n-\tVERIFY( m.prefix().matched == false );\n-\tVERIFY( m.suffix().first == target.end() );\n-\tVERIFY( m.suffix().second == target.end() );\n-\tVERIFY( m.suffix().matched == false );\n-\tVERIFY( m[0].first == target.begin() );\n-\tVERIFY( m[0].second == target.end() );\n-\tVERIFY( m[0].matched == true );\n+  std::regex  re(\"a{1,3}\", std::regex::extended);\n+  std::string target(\"aa\");\n+  std::smatch m;\n+\n+  VERIFY( regex_match_debug(target, m, re) );\n+\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().first == target.begin() );\n+  VERIFY( m.prefix().second == target.begin() );\n+  VERIFY( m.prefix().matched == false );\n+  VERIFY( m.suffix().first == target.end() );\n+  VERIFY( m.suffix().second == target.end() );\n+  VERIFY( m.suffix().matched == false );\n+  VERIFY( m[0].first == target.begin() );\n+  VERIFY( m[0].second == target.end() );\n+  VERIFY( m[0].matched == true );\n }\n \n "}, {"sha": "ed44ff0736ac1187ca2b11c02fa3ebb29ece9fd3", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/string_range_02_03.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fstring_range_02_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,25 +33,23 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\tstd::regex  re(\"a{2,3}\", std::regex::extended);\n-\tstd::string target(\"aa\");\n-\tstd::smatch m;\n-\n-\tVERIFY( regex_match_debug(target, m, re) );\n-\n-\tVERIFY( m.size()  == re.mark_count()+1 );\n-\tVERIFY( m.empty() == false );\n-\tVERIFY( m.prefix().first == target.begin() );\n-\tVERIFY( m.prefix().second == target.begin() );\n-\tVERIFY( m.prefix().matched == false );\n-\tVERIFY( m.suffix().first == target.end() );\n-\tVERIFY( m.suffix().second == target.end() );\n-\tVERIFY( m.suffix().matched == false );\n-\tVERIFY( m[0].first == target.begin() );\n-\tVERIFY( m[0].second == target.end() );\n-\tVERIFY( m[0].matched == true );\n+  std::regex  re(\"a{2,3}\", std::regex::extended);\n+  std::string target(\"aa\");\n+  std::smatch m;\n+\n+  VERIFY( regex_match_debug(target, m, re) );\n+\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().first == target.begin() );\n+  VERIFY( m.prefix().second == target.begin() );\n+  VERIFY( m.prefix().matched == false );\n+  VERIFY( m.suffix().first == target.end() );\n+  VERIFY( m.suffix().second == target.end() );\n+  VERIFY( m.suffix().matched == false );\n+  VERIFY( m[0].first == target.begin() );\n+  VERIFY( m[0].second == target.end() );\n+  VERIFY( m[0].matched == true );\n }\n \n "}, {"sha": "ff04858026eae52f3bf6d27ab42cb2e7dc4b177e", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,8 +34,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::wstring str2 = L\"\u00dcBER\";\n   std::wregex re2;\n   re2.imbue(std::locale(\"de_DE.UTF-8\"));"}, {"sha": "4af05ddf866d3f68505949414947edbfc1e592da", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_replace/char/basic_replace.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2Fbasic_replace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2Fbasic_replace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2Fbasic_replace.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,8 +31,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(regex_replace(string(\"This is a string\"), regex(\"\\\\b\\\\w*\\\\b\"), \"|$0|\")\n \t == \"|This||| |is||| |a||| |string|||\");\n   VERIFY(regex_replace(string(\"This is a string\"), regex(\"\\\\b\\\\w*\\\\b\"), \"|$0|\","}, {"sha": "169dd086c03de28d315921a9eb4ab22b923c0f0c", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_replace/char/dr2213.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2Fdr2213.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2Fdr2213.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_replace%2Fchar%2Fdr2213.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   char buff[4096] = {0};\n   regex re(\"asdf\");\n   cmatch m;"}, {"sha": "b4726922b69c2b9a1042e604664f03008c3eb46c", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/61720.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2F61720.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2F61720.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2F61720.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   string s = R\"(\"test\\\")\";\n   VERIFY(!regex_search_debug(s, regex(R\"(\"([^\"]|\\\\\")*[^\\\\]\")\")));\n   VERIFY(!regex_match_debug(s, regex(R\"(\"([^\"]|\\\\\")*[^\\\\]\")\")));"}, {"sha": "d11a2b860a426f15d9a2c1ab13043e0e76591a46", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/basic/string_01.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex  re(\"as\\\\(df\\\\)\", std::regex::basic);\n   std::string target(\"xxasdfyy\");\n   std::smatch m;"}, {"sha": "9686643d06aa07a2a0779740acefad1a60483dda", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/assertion.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fassertion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fassertion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fassertion.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(!regex_search_debug(\"2123456\", regex(\"^1234\")));\n   VERIFY(regex_search_debug(\"123456\", regex(\"^1234\")));\n   VERIFY(regex_search_debug(\"123456\", regex(\"(5|^)1234\")));"}, {"sha": "69c6c2ab8be689abfd9df55449108b4bb470e903", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/flags.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fflags.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fflags.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fflags.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   cmatch m;\n   regex re(\"((as)(df))\", regex_constants::ECMAScript | regex_constants::nosubs);\n   VERIFY(regex_search_debug(\"asdf\", m, re));"}, {"sha": "f3d10363adadfbfc958462b7c3feac1fb66f9ec7", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/greedy.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fgreedy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fgreedy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fgreedy.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   cmatch m;\n #define TEST(i, s) VERIFY(m[i].matched && string(m[i].first, m[i].second) == s)\n   VERIFY(regex_search_debug(\"aaaa\", m, regex(\"a*\")));"}, {"sha": "e3df1b461a36efc71437f96b9cf6c6b3a6366500", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/ecma/string_01.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fecma%2Fstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(regex_search_debug(\"\", std::regex(\"\")));\n }\n "}, {"sha": "e8ca82949e8900420eed245c0228d41d3ef815c4", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/cstring.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fcstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fcstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fcstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -35,8 +35,6 @@ void test01()\n // basic_regex::operator=() resets flags. libstdc++/64680\n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex re(\"[[:alnum:]]\", std::regex_constants::basic);\n   re = \"\\\\w+\";\n }"}, {"sha": "590518128c26128d97703f42ebff2dfee93181ff", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/cstring_op.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fcstring_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fcstring_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fcstring_op.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,7 +22,6 @@\n // [28.8.3] class template basic_regex assign()\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests basic_regex assign operator from a C-style null-terminated-string.  \n void test01()"}, {"sha": "1bf4b00cc3b685e33e8c1a31bb53850d30793f78", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/moveable.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fmoveable.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,8 +28,6 @@\n // Tests assign operator of the basic_regex class for moveable rvalues.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex src_re(\"aaba\");\n   const unsigned mark_count = src_re.mark_count();\n   const std::regex::flag_type flags = src_re.flags();"}, {"sha": "4eaf572cf042a2ae6f064ede1d297bac2622ab65", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/pstring.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fpstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fpstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fpstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,7 +22,6 @@\n // [28.8.3] class template basic_regex assign()\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests assign operation from a Pascal-style counted-string.  \n void test01()"}, {"sha": "c7867776534dbfdc65c7197dc7b34d1bde35630c", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/range.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Frange.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,7 +22,6 @@\n // [28.8.3] class template basic_regex assign()\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests range assign of the basic_regex class.  \n void test01()"}, {"sha": "097f4662fc418baabd25f09803742938323d18aa", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/string.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,7 +28,6 @@\n // Tests C++ string assignment of the basic_regex class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<char> test_type;\n \n   std::string s(\"a*b\");\n@@ -39,7 +38,6 @@ void test01()\n // libstdc++/64584\n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n   std::regex re(\"\", std::regex_constants::extended);\n   auto flags = re.flags();\n   try"}, {"sha": "6f129f40e6c3a0a42815527eb3807b5fb12aac31", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/string_op.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring_op.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,7 +23,6 @@\n \n #include <string>\n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests basic_regex assignment operator from a C++ string;\n void test01()"}, {"sha": "8bc685848012b4ea9eb17b3cc85475d9f81ea9a2", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/wchar_t/cstring.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fcstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fcstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fcstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,12 +22,10 @@\n // [28.8.3] class template basic_regex assign()\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests assign operation from a C-style null-terminated-string.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<wchar_t> test_type;\n \n   const wchar_t* cs = L\"aab\";"}, {"sha": "3eaa79c233ff2579edf8e05d5b426b0438b03abb", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/wchar_t/cstring_op.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fcstring_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fcstring_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fcstring_op.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,12 +22,10 @@\n // [28.8.3] class template basic_regex assign()\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests basic_regex assign operator from a C-style null-terminated-string.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<wchar_t> test_type;\n \n   const wchar_t* cs = L\"aab\";"}, {"sha": "0aa690ce87bd812c865e02567f5710222f09f8f9", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/wchar_t/pstring.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fpstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fpstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fpstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,7 +22,6 @@\n // [28.8.3] class template basic_regex assign()\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests assign operation from a Pascal-style counted-string.  \n void test01()"}, {"sha": "e15cd6bbc9adb987ead0f973e9995855c321ca17", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/wchar_t/range.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Frange.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,13 +22,11 @@\n // [28.8.3] class template basic_regex assign()\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests range assign of the basic_regex class.  \n void test01()\n {\n   typedef std::basic_regex<wchar_t> test_type;\n-  bool test __attribute__((unused)) = true;\n \n   wchar_t s[] = L\"a+b|c\";\n   test_type re;"}, {"sha": "5869cb1d68db06c7b84ea16bde9acf577b2cf222", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/wchar_t/string.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,12 +23,10 @@\n \n #include <string>\n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests C++ string assignment of the basic_regex class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<wchar_t> test_type;\n \n   std::wstring s(L\"a*b\");"}, {"sha": "969f682fb2e21ec7ce6dd569fd33d2baa06befa9", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/wchar_t/string_op.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fstring_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fstring_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fwchar_t%2Fstring_op.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,13 +23,11 @@\n \n #include <string>\n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests basic_regex assignment operator from a C++ string;\n void test01()\n {\n-\tbool test __attribute__((unused)) = true;\n-\ttypedef std::basic_regex<wchar_t> test_type;\n+  typedef std::basic_regex<wchar_t> test_type;\n \n   std::wstring s(L\"a*b\");\n   test_type re;"}, {"sha": "6e68af835881d0582b8188d4a48e0d882e3d6f80", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/basic/pstring_wchar_t.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fpstring_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fpstring_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fpstring_wchar_t.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,8 +27,6 @@\n // Tests Pascal-style counted-string constructor of the basic_regex class.  \n void test01()\n {\n-\tbool test __attribute__((unused)) = true;\n-\n   const wchar_t* cs = L\"aab\";\n \tstd::wregex re(cs, 3, std::wregex::basic);\n "}, {"sha": "45844a62fb606ee1a3faee7d2e428def11c30184", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/basic/string_range_01_02_03.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fstring_range_01_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fstring_range_01_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fstring_range_01_02_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,16 +29,14 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\ttry\n-\t{\n-\t\tstd::regex  re(\"a\\\\{1,2,3\\\\}\", std::regex::basic);\n-\t}\n-\tcatch (std::regex_error& ex)\n-\t{\n-\t\tVERIFY( ex.code() == std::regex_constants::error_brace );\n-\t}\n+  try\n+    {\n+      std::regex  re(\"a\\\\{1,2,3\\\\}\", std::regex::basic);\n+    }\n+  catch (std::regex_error& ex)\n+    {\n+      VERIFY( ex.code() == std::regex_constants::error_brace );\n+    }\n }\n \n "}, {"sha": "be9d241b3892c3081f84090a69785822ff42c170", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/extended/cstring.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fcstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fcstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fcstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,8 +27,6 @@\n void\n test01() \n { \n-  bool test __attribute__((unused)) = true;\n-\n   std::regex re(\"(wee|week)(knights|night)\", std::regex::extended);\n   \n   VERIFY( re.flags() == std::regex::extended );"}, {"sha": "673f581ff70257234dc618ad7202e0b9e56dabed", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/extended/string_range_01_02_03.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fstring_range_01_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fstring_range_01_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fstring_range_01_02_03.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,16 +29,14 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-\ttry\n-\t{\n-\t\tstd::regex  re(\"a{1,2,3}\", std::regex::extended);\n-\t}\n-\tcatch (std::regex_error& ex)\n-\t{\n-\t\tVERIFY( ex.code() == std::regex_constants::error_brace );\n-\t}\n+  try\n+    {\n+      std::regex  re(\"a{1,2,3}\", std::regex::extended);\n+    }\n+  catch (std::regex_error& ex)\n+    {\n+      VERIFY( ex.code() == std::regex_constants::error_brace );\n+    }\n }\n \n "}, {"sha": "c001aca28302d7b6a0d4443d2f7a18d6c9ec2266", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/move_char.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fmove_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fmove_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fmove_char.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,17 +28,16 @@\n // Tests move constructor of the basic_regex class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<char> test_type;\n \n   test_type src_re(\"aaba\");\n   const unsigned mark_count = src_re.mark_count();\n-\tconst test_type::flag_type flags = src_re.flags();\n+  const test_type::flag_type flags = src_re.flags();\n \n   test_type target_re = std::move(src_re);\n   \n-\tVERIFY( target_re.flags() == flags );\n-\tVERIFY( target_re.mark_count() == mark_count );\n+  VERIFY( target_re.flags() == flags );\n+  VERIFY( target_re.mark_count() == mark_count );\n }\n \n int"}, {"sha": "2252ec7e409823ce94c993d6306da8414a0d6a7d", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/string_wchar_t.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fstring_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fstring_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fstring_wchar_t.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,7 +28,6 @@\n // Tests C++ string constructor of the basic_regex class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<wchar_t> test_type;\n \n   std::wstring s(L\"a*b\");"}, {"sha": "904b6df1904f2e98b0126a7cc6e5bba019269843", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/wchar_t/cstring.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Fcstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Fcstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Fcstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,12 +22,10 @@\n // [28.8.2] class template basic_regex constructor\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests C-style null-terminated-string constructor of the basic_regex class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<wchar_t> test_type;\n \n   const wchar_t* cs = L\"aab\";"}, {"sha": "daf132dae40b74f144e8e8b6f14dcb994814ad83", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/wchar_t/default.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Fdefault.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,12 +22,10 @@\n // [28.8.2] class template basic_regex constructor\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests default constructor of the basic_regex class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<wchar_t> test_type;\n \n   // default constructor"}, {"sha": "8e57e99db6475e30387404d367d8332e9a452035", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/wchar_t/range.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fwchar_t%2Frange.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,12 +22,10 @@\n // [28.8.2] class template basic_regex constructor\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests range constructor of the basic_regex class.  \n void test01()\n {\n-\tbool test __attribute__((unused)) = true;\n   typedef std::basic_regex<wchar_t> test_type;\n \n   wchar_t s[] = L\"a+b|c\";"}, {"sha": "6042f9bd40c1d2f20d27dcf8310c38fab5bf94c9", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/imbue/string.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fimbue%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fimbue%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fimbue%2Fstring.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,8 +26,6 @@\n // libstdc++/64585\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   static const char s[] = \"a\";\n   std::regex re(\"a\");\n   VERIFY(std::regex_search(s, re));"}, {"sha": "2c424d576cd0f312012b51f2b5b15569c6eb42cc", "filename": "libstdc++-v3/testsuite/28_regex/constants/error_type.cc", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Ferror_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Ferror_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Ferror_type.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,28 +22,25 @@\n // 28.5.3 \n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n+  std::regex_constants::error_type err __attribute__((unused));\n \n-\tstd::regex_constants::error_type err __attribute__((unused));\n-\n-\terr = std::regex_constants::error_collate;\n-\terr = std::regex_constants::error_ctype;\n-\terr = std::regex_constants::error_escape;\n-\terr = std::regex_constants::error_backref;\n-\terr = std::regex_constants::error_brack;\n-\terr = std::regex_constants::error_paren;\n-\terr = std::regex_constants::error_brace;\n-\terr = std::regex_constants::error_badbrace;\n-\terr = std::regex_constants::error_range;\n-\terr = std::regex_constants::error_space;\n-\terr = std::regex_constants::error_badrepeat;\n-\terr = std::regex_constants::error_complexity;\n-\terr = std::regex_constants::error_stack;\n+  err = std::regex_constants::error_collate;\n+  err = std::regex_constants::error_ctype;\n+  err = std::regex_constants::error_escape;\n+  err = std::regex_constants::error_backref;\n+  err = std::regex_constants::error_brack;\n+  err = std::regex_constants::error_paren;\n+  err = std::regex_constants::error_brace;\n+  err = std::regex_constants::error_badbrace;\n+  err = std::regex_constants::error_range;\n+  err = std::regex_constants::error_space;\n+  err = std::regex_constants::error_badrepeat;\n+  err = std::regex_constants::error_complexity;\n+  err = std::regex_constants::error_stack;\n }\n \n int main()"}, {"sha": "d1e7c3719577cd0c077e77c99ce383fba391feb4", "filename": "libstdc++-v3/testsuite/28_regex/constants/match_flag_type.cc", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fmatch_flag_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fmatch_flag_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fmatch_flag_type.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,27 +22,24 @@\n // 28.5.1 \n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n+  std::regex_constants::match_flag_type flag = std::regex_constants::match_default;\n \n-\tstd::regex_constants::match_flag_type flag = std::regex_constants::match_default;\n-\n-\tflag |= std::regex_constants::match_not_bol;\n-\tflag |= std::regex_constants::match_not_eol;\n-\tflag |= std::regex_constants::match_not_bow;\n-\tflag |= std::regex_constants::match_not_eow;\n-\tflag |= std::regex_constants::match_any;\n-\tflag |= std::regex_constants::match_not_null;\n-\tflag |= std::regex_constants::match_continuous;\n-\tflag |= std::regex_constants::match_prev_avail;\n-\tflag |= std::regex_constants::format_default;\n-\tflag |= std::regex_constants::format_sed;\n-\tflag |= std::regex_constants::format_no_copy;\n-\tflag |= std::regex_constants::format_first_only;\n+  flag |= std::regex_constants::match_not_bol;\n+  flag |= std::regex_constants::match_not_eol;\n+  flag |= std::regex_constants::match_not_bow;\n+  flag |= std::regex_constants::match_not_eow;\n+  flag |= std::regex_constants::match_any;\n+  flag |= std::regex_constants::match_not_null;\n+  flag |= std::regex_constants::match_continuous;\n+  flag |= std::regex_constants::match_prev_avail;\n+  flag |= std::regex_constants::format_default;\n+  flag |= std::regex_constants::format_sed;\n+  flag |= std::regex_constants::format_no_copy;\n+  flag |= std::regex_constants::format_first_only;\n }\n \n int main()"}, {"sha": "09b12803aec8510dc63132b8c76c0db2b4521d6b", "filename": "libstdc++-v3/testsuite/28_regex/init-list.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Finit-list.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,10 +23,8 @@\n \n using namespace std;\n \n-int test01(void)\n+void test01(void)\n {\n-  bool test = true;\n-\n   regex r = { 'a', 'b', 'c' };\n   cmatch res;\n   VERIFY(regex_match (\"abc\", res, r));\n@@ -35,8 +33,6 @@ int test01(void)\n   r = { 'd', 'e', 'f' };\n   VERIFY(regex_match (\"def\", res, r));\n   VERIFY(!regex_match (\"abc\", res, r));\n-\n-  return test;\n }\n \n int main()"}, {"sha": "f6bfe269c848bd28dc3ee68cb89673891dd23ef9", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/char/64140.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2F64140.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2F64140.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2F64140.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,8 +26,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const std::regex e(\"z*\");\n   const std::string s(\"ab\");\n "}, {"sha": "eab981572c9d1970bbd2bb812917ed2c5d7f67fa", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/char/string_01.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::basic_regex<char> re(\"asdf\");\n   const char s[] = \"ffasdf88asdf99asdf00asdf77\";\n   int cnt = 0;"}, {"sha": "db7b04a766dce275355889418d93748f1b8184d4", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/char/string_position_01.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -30,8 +30,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex re(\"asdf\");\n   std::string s(\"asdfasdfasdf\");\n   int i = 0;\n@@ -46,8 +44,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::regex re(\"\\\\w+\");\n   std::string s(\"-a-b-c-\");\n \n@@ -75,8 +71,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::smatch m;\n   std::string s = \"abcde\";\n   std::regex_search(s, m, std::regex(\"bcd\"));"}, {"sha": "53d55d31e84e8e9bda9c93f85d2dcc2931ef1e73", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/ctors/char/default.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fctors%2Fchar%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fctors%2Fchar%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fctors%2Fchar%2Fdefault.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::regex_iterator<char*> it;\n \tstd::cregex_iterator cit;\n \tstd::sregex_iterator sit;"}, {"sha": "f745097fd825bc0221d56045894c8762eb128173", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/ctors/wchar_t/default.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fctors%2Fwchar_t%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fctors%2Fwchar_t%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fctors%2Fwchar_t%2Fdefault.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::regex_iterator<wchar_t*> it;\n \tstd::wcregex_iterator cit;\n \tstd::wsregex_iterator sit;"}, {"sha": "35fe0fab371b375fb8d0c45edb6ecea1cf136d2f", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/typedefs.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Ftypedefs.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::regex_iterator<char*> it;\n \n   typedef it::regex_type         regex_type;"}, {"sha": "7a48dadca454f52b20429b2ac41ced0ad407d766", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/wchar_t/string_01.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fwchar_t%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fwchar_t%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fwchar_t%2Fstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::basic_regex<wchar_t> re(L\"asdf\");\n   const wchar_t s[] = L\"ffasdf88asdf99asdf00asdf77\";\n   int cnt = 0;"}, {"sha": "fde100625de1b55adbb320a7efb988d5113570f2", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/wchar_t/string_02.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fwchar_t%2Fstring_02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fwchar_t%2Fstring_02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fwchar_t%2Fstring_02.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -30,8 +30,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::setlocale(LC_ALL, \"en_US.UTF-8\");\n \n   std::wstring str2 = L\"\u00e4\\u2009\u00c4\\u2009\u00f6\\u2009\u00d6\\u2009\u00fc\\u2009\u00dc\";"}, {"sha": "0a7087ba00297bcc20010cc5cd277349e801c494", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/64303.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2F64303.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2F64303.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2F64303.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,8 +26,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const std::string s(\"  111  222  \");\n   const std::regex re(\"\\\\w+\");\n "}, {"sha": "9d10e8f00f1d5484857cb1126e42c09cf58ce914", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/char/string_01.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fchar%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fchar%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fchar%2Fstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::basic_regex<char> re(\" \");\n   const char s[] = \"Quick brown fox.\";\n   int cnt = 0;"}, {"sha": "4c58414002bd75bb31920248557b2f9b214e9efe", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/ctors/char/default.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fctors%2Fchar%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fctors%2Fchar%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fctors%2Fchar%2Fdefault.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::regex_token_iterator<char*> it;\n \tstd::cregex_token_iterator cit;\n \tstd::sregex_token_iterator sit;"}, {"sha": "18183ec6f4b440f66f90984cd6e83011e3eaf053", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/ctors/wchar_t/default.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fctors%2Fwchar_t%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fctors%2Fwchar_t%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fctors%2Fwchar_t%2Fdefault.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::regex_token_iterator<wchar_t*> it;\n \tstd::wcregex_token_iterator cit;\n \tstd::wsregex_token_iterator sit;"}, {"sha": "b9ac98ed7db04f206e9ddbb4c22d05383526af5b", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/typedefs.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Ftypedefs.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::regex_token_iterator<char*> it;\n \n   typedef it::regex_type         regex_type;"}, {"sha": "8feb2b892c1b9f261bfea56538556af96894a9fc", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/wchar_t/string_01.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fstring_01.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,8 +29,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::basic_regex<wchar_t> re(L\" \");\n   const wchar_t s[] = L\"Quick brown fox.\";\n   int cnt = 0;"}, {"sha": "5c66fee33f17bb147e1e4c2e09e0b86da65ac222", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_token_iterator/wchar_t/wstring_02.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fwstring_02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fwstring_02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_token_iterator%2Fwchar_t%2Fwstring_02.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -30,8 +30,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::setlocale(LC_ALL, \"en_US.UTF-8\");\n \n   std::wstring str2 = L\"\u00f6\u00e4\u00fc\";"}, {"sha": "fb49bc323e7bc65d1639cd995b0d7cefb96dfe5c", "filename": "libstdc++-v3/testsuite/28_regex/match_results/ctors/char/default.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fchar%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fchar%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fchar%2Fdefault.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,17 +27,13 @@\n // Tests default constructor of the match_result class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::cmatch cm;\n   VERIFY( cm.size() == 0 );\n   VERIFY( !cm.ready() );\n }\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::smatch sm;\n   VERIFY( sm.size() == 0 );\n   VERIFY( !sm.ready() );"}, {"sha": "425184f03c1958f7f2289ca4ebf9f92c998b9a1c", "filename": "libstdc++-v3/testsuite/28_regex/match_results/ctors/wchar_t/default.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fwchar_t%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fwchar_t%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fwchar_t%2Fdefault.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,17 +27,13 @@\n // Tests default constructor of the match_result class.  \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::wcmatch cm;\n   VERIFY( cm.size() == 0 );\n   VERIFY( !cm.ready() );\n }\n \n void test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::wsmatch sm;\n   VERIFY( sm.size() == 0 );\n   VERIFY( !sm.ready() );"}, {"sha": "ff047c5276916594d2cbb6a068f873df96d63b79", "filename": "libstdc++-v3/testsuite/28_regex/match_results/format.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fformat.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,8 +33,6 @@ using namespace __gnu_test;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   cmatch m;\n   VERIFY(regex_search_debug(\"*** this is a string !!!\", m,\n \t\t\t    regex(\"(\\\\w+) (\\\\w+) (\\\\w+) (\\\\w+)\")));\n@@ -48,8 +46,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex re(\"asdf\");\n   cmatch m;\n   regex_match(\"asdf\", m, re);"}, {"sha": "eb83131cac346c000b1bf28a5696a42d011684e5", "filename": "libstdc++-v3/testsuite/28_regex/match_results/out_of_range_submatches.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fout_of_range_submatches.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fout_of_range_submatches.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fout_of_range_submatches.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,8 +28,6 @@ using namespace __gnu_test;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const char s[] = \"abc\";\n   const std::regex re(\"(\\\\d+)|(\\\\w+)\");\n \n@@ -55,8 +53,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::match_results<const char*> m;\n   const char s[] = \"a\";\n   VERIFY(regex_search_debug(s, m, std::regex(\"a\")));"}, {"sha": "b25b02d083e7f2036aa87c59dc7784eede6d88ec", "filename": "libstdc++-v3/testsuite/28_regex/match_results/swap.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fswap.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -24,8 +24,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::cmatch m;\n   std::regex_match(\"a\", m, std::regex(\"a\"));\n   std::cmatch mm1 = m, mm2;"}, {"sha": "ad96752723d36c9cd135c69471afd6be27d31628", "filename": "libstdc++-v3/testsuite/28_regex/match_results/typedefs.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Ftypedefs.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef std::match_results<char*> mr;\n \n   typedef mr::value_type       value_type;"}, {"sha": "a87f0e5e3ce6aeeca11e9e7412bfcc1aae863555", "filename": "libstdc++-v3/testsuite/28_regex/regex_error/regex_error.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregex_error%2Fregex_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregex_error%2Fregex_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregex_error%2Fregex_error.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,18 +27,16 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n+  std::regex_error error(std::regex_constants::error_collate);\n+  VERIFY(error.code() == std::regex_constants::error_collate);\n \n-\tstd::regex_error error(std::regex_constants::error_collate);\n-\tVERIFY(error.code() == std::regex_constants::error_collate);\n-\n-\ttry\n-\t{\n-\t\tthrow error;\n-\t}\n-\tcatch (std::runtime_error& ex)\n-\t{\n-\t}\n+  try\n+    {\n+      throw error;\n+    }\n+  catch (std::runtime_error& ex)\n+    {\n+    }\n }\n \n int main()"}, {"sha": "effb356075e0cfb52a8fb494cd2ce7169257a4f9", "filename": "libstdc++-v3/testsuite/28_regex/regression.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregression.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregression.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregression.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,16 +28,12 @@ using namespace std;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   regex re(\"((.)\", regex_constants::basic);\n }\n \n void\n test02()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::string re_str\n     {\n       \"/abcd\" \"\\n\"\n@@ -51,8 +47,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(regex_match_debug(\"a.\", regex(R\"(a\\b.)\"), regex_constants::match_not_eow));\n   VERIFY(regex_match_debug(\".a\", regex(R\"(.\\ba)\"), regex_constants::match_not_bow));\n   VERIFY(regex_search_debug(\"a\", regex(R\"(^\\b)\")));\n@@ -65,8 +59,6 @@ test03()\n void\n test04()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   static const char* kNumericAnchor =\"(\\\\$|usd)(usd|\\\\$|to|and|up to|[0-9,\\\\.\\\\-\\\\sk])+\";\n   const std::regex re(kNumericAnchor);\n   (void)re;\n@@ -75,8 +67,6 @@ test04()\n void\n test05()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   VERIFY(regex_match_debug(\"!\", std::regex(\"[![:alnum:]]\")));\n   VERIFY(regex_match_debug(\"-\", std::regex(\"[a-]\", regex_constants::basic)));\n   VERIFY(regex_match_debug(\"-\", std::regex(\"[a-]\")));"}, {"sha": "267f4e5295f2fba988ac2e19fdd9d2390d57af0f", "filename": "libstdc++-v3/testsuite/28_regex/sub_match/cast_char.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fcast_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fcast_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fcast_char.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,19 +28,17 @@\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef char                          value_type;\n   typedef std::basic_string<value_type> string_type;\n   typedef std::sub_match<value_type*>   sub_match_type;\n   value_type test_data[] = \"cabbage\";\n \n-\tsub_match_type sm;\n-\tsm.first = std::begin(test_data);\n-\tsm.second  = std::end(test_data) - 1;\n-\tsm.matched = true;\n+  sub_match_type sm;\n+  sm.first = std::begin(test_data);\n+  sm.second  = std::end(test_data) - 1;\n+  sm.matched = true;\n \n-\tstring_type sm_string = sm;\n+  string_type sm_string = sm;\n \n-\tVERIFY( sm_string == string_type(test_data) );\n+  VERIFY( sm_string == string_type(test_data) );\n }"}, {"sha": "49f9bd3c6d252f4ff8d24b72ad57ac00f642488e", "filename": "libstdc++-v3/testsuite/28_regex/sub_match/cast_wchar_t.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fcast_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fcast_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fcast_wchar_t.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,19 +28,17 @@\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef wchar_t                       value_type;\n   typedef std::basic_string<value_type> string_type;\n   typedef std::sub_match<value_type*>   sub_match_type;\n   value_type test_data[] = L\"cabbage\";\n \n-\tsub_match_type sm;\n-\tsm.first = std::begin(test_data);\n-\tsm.second  = std::end(test_data) - 1;\n-\tsm.matched = true;\n+  sub_match_type sm;\n+  sm.first = std::begin(test_data);\n+  sm.second  = std::end(test_data) - 1;\n+  sm.matched = true;\n \n-\tstring_type sm_string = sm;\n+  string_type sm_string = sm;\n \n-\tVERIFY( sm_string == string_type(test_data) );\n+  VERIFY( sm_string == string_type(test_data) );\n }"}, {"sha": "9244f9dae1a4e17f4bd1b437e187ded2b054e764", "filename": "libstdc++-v3/testsuite/28_regex/sub_match/embedded_zeros_cmp.cc", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fembedded_zeros_cmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fembedded_zeros_cmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Fembedded_zeros_cmp.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,28 +28,26 @@\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef char                          value_type;\n   typedef std::basic_string<value_type> string_type;\n   typedef std::sub_match<value_type*>   sub_match_type;\n   const string_type test_data1(\"abc\\0d\", 4);\n   value_type test_data2[] = {'a', 'b', 'c'};\n   const string_type test_data3(\"abc\");\n \n-\tsub_match_type sm;\n-\tsm.first = std::begin(test_data2);\n-\tsm.second  = std::end(test_data2);\n-\tsm.matched = true;\n-\n-\tVERIFY( test_data1 != sm );\n-\tVERIFY( sm != test_data1 );\n-\tVERIFY( sm < test_data1 );\n-\tVERIFY( !(test_data1 < sm) );\n-\tVERIFY( test_data1 > sm );\n-\n-\tVERIFY( test_data3 == sm );\n-\tVERIFY( sm == test_data3 );\n-\tVERIFY( !(sm < test_data3) );\n-\tVERIFY( !(test_data3 < sm) );\n+  sub_match_type sm;\n+  sm.first = std::begin(test_data2);\n+  sm.second  = std::end(test_data2);\n+  sm.matched = true;\n+\n+  VERIFY( test_data1 != sm );\n+  VERIFY( sm != test_data1 );\n+  VERIFY( sm < test_data1 );\n+  VERIFY( !(test_data1 < sm) );\n+  VERIFY( test_data1 > sm );\n+\n+  VERIFY( test_data3 == sm );\n+  VERIFY( sm == test_data3 );\n+  VERIFY( !(sm < test_data3) );\n+  VERIFY( !(test_data3 < sm) );\n }"}, {"sha": "6f6bb24be9b4c8dff8d388793e2bd2bdd2d3783e", "filename": "libstdc++-v3/testsuite/28_regex/sub_match/length.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Flength.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Flength.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsub_match%2Flength.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,22 +29,20 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef std::sub_match<const char*> sm_t;\n   const char*           test_data = \"cabbage\";\n   sm_t::difference_type test_len = 3;\n \n-\tsm_t sm1;\n-\tsm1.first   = test_data + 0;\n-\tsm1.second  = test_data + test_len;\n-\tsm1.matched = true;\n+  sm_t sm1;\n+  sm1.first   = test_data + 0;\n+  sm1.second  = test_data + test_len;\n+  sm1.matched = true;\n \n-\tsm_t sm2;\n-\tsm2.matched = false;\n+  sm_t sm2;\n+  sm2.matched = false;\n \n-\tVERIFY( sm1.length() == test_len );\n-\tVERIFY( sm2.length() == 0 );\n+  VERIFY( sm1.length() == test_len );\n+  VERIFY( sm2.length() == 0 );\n }\n \n int main()"}, {"sha": "5ab57497a98aded9e4b33ccd8784d86f866c19fa", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/ctor.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fctor.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,13 +22,11 @@\n // [28.7] class template regex_traits\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests default constructor of the regex_traits class.  There is only the\n // default constructor.\n void test01()\n {\n-\tbool test __attribute__((unused)) = true;\n   typedef std::regex_traits<char> test_type;\n \n   // required default constructor"}, {"sha": "01f8a6f4ca35b893214750ef20c1817ae0364b9b", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/isctype.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,7 +31,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef char CharT;\n   typedef std::regex_traits<CharT> traits;\n "}, {"sha": "ddd00f8c5762f94c2329da797e9c618723344967", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/length.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flength.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flength.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flength.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,16 +33,15 @@ test01()\n {\n   typedef char CharT;\n   typedef std::regex_traits<CharT> traits;\n-  bool test __attribute__((unused)) = true;\n   const CharT* p = \"\";\n \n-\tstd::size_t i = traits::length(p);\n+  std::size_t i = traits::length(p);\n \n-\tVERIFY( i == 0 );\n+  VERIFY( i == 0 );\n }\n \n int main()\n {\n-\ttest01();\n-\treturn 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "6b93d616e13b80a5acf0849aea6654b66d361118", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/lookup_classname.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,20 +31,19 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef char CharT;\n   typedef std::regex_traits<CharT> traits;\n \n-\tchar n1[] = \"lower\";\n-\tchar n2[] = \"alpha\";\n-\ttraits t;\n+  char n1[] = \"lower\";\n+  char n2[] = \"alpha\";\n+  traits t;\n \n   traits::char_class_type c1 = t.lookup_classname(n1, n1+sizeof(n1)-1);\n   VERIFY( c1 != 0 );\n \n   traits::char_class_type c2 = t.lookup_classname(n1, n1+sizeof(n1)-1, true);\n   traits::char_class_type c3 = t.lookup_classname(n2, n2+sizeof(n2)-1, true);\n-\tVERIFY( c2 == c3 );\n+  VERIFY( c2 == c3 );\n }\n \n // Test forward iterator"}, {"sha": "7fcbc2f8439c3f79a8b66980872a7df84c3b5cd5", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/lookup_collatename.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,7 +31,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef char CharT;\n   typedef std::regex_traits<CharT> traits;\n "}, {"sha": "e3eda194a9e37e24a64dc0ccc41c2eaf515bde30", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/transform.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,20 +31,19 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef char CharT;\n   typedef std::regex_traits<CharT> traits;\n \n-\ttraits t;\n-\ttraits::string_type G = \"abc\";\n-\ttraits::string_type H = \"def\";\n+  traits t;\n+  traits::string_type G = \"abc\";\n+  traits::string_type H = \"def\";\n \n   VERIFY( G < H );\n   VERIFY( t.transform(G.begin(), G.end()) < t.transform(H.begin(), H.end()) );\n }\n \n int main()\n {\n-\ttest01();\n-\treturn 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "2a65256d1bd84caef1a0c4ab5854bdaeb7b2a589", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/transform_primary.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform_primary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform_primary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftransform_primary.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,14 +31,13 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef char CharT;\n   typedef std::regex_traits<CharT> traits;\n \n-\ttraits t;\n-\ttraits::string_type G = \"abc\";\n-\ttraits::string_type H = \"def\";\n-\ttraits::string_type J = \"ABC\";\n+  traits t;\n+  traits::string_type G = \"abc\";\n+  traits::string_type H = \"def\";\n+  traits::string_type J = \"ABC\";\n \n   VERIFY( G < H );\n   VERIFY( t.transform_primary(G.begin(), G.end())"}, {"sha": "6709d63b0af583311bd525498b7a73ebedd02ce5", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/translate.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftranslate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftranslate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftranslate.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -32,7 +32,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef char CharT;\n \n   std::regex_traits<CharT> t;"}, {"sha": "fab1859d3b43c16dca94c34f8ad52c298b0d541b", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/translate_nocase.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftranslate_nocase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftranslate_nocase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Ftranslate_nocase.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n // Verifies the workings of the regex_traits translate_nocase function.\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef char CharT;\n \n   std::regex_traits<CharT> t;"}, {"sha": "4af05634b2391fa7fd62b11a6c6b2384d94473c9", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/user_defined.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -45,8 +45,6 @@ template<typename CharT>\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   basic_regex<char, MyRegexTraits<char>> re(\".\");\n   VERIFY(!regex_match(\"\\n\", re));\n   VERIFY(!regex_match(\"\\r\", re));"}, {"sha": "cecfc8787da82fd53a95635db5cf832d39beac04", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/value.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fvalue.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n // Tests the value() function of the regex_traits<char> class.\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::regex_traits<char> t;\n   VERIFY( t.value('7', 8)  == 7 );\n   VERIFY( t.value('7', 10) == 7 );"}, {"sha": "378ce3570e76d3dc94e0faabdc44ca0d5a6891bd", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/ctor.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fctor.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -22,7 +22,6 @@\n // [28.7] class template regex_traits\n \n #include <regex>\n-#include <testsuite_hooks.h>\n \n // Tests default constructor of the regex_traits class.  There is only the\n // default constructor."}, {"sha": "bcaafb74edfb9f64da88b74fc9e05b2f39e5f0f6", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/isctype.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,7 +28,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef wchar_t CharT;\n   typedef std::regex_traits<CharT> traits;\n "}, {"sha": "ff5c5284027a092fd48834e5728b887040dfbc83", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/length.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flength.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flength.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flength.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,16 +33,15 @@ test01()\n {\n   typedef wchar_t CharT;\n   typedef std::regex_traits<CharT> traits;\n-  bool test __attribute__((unused)) = true;\n   const CharT* p = L\"\";\n \n-\tstd::size_t i = traits::length(p);\n+  std::size_t i = traits::length(p);\n \n-\tVERIFY( i == 0 );\n+  VERIFY( i == 0 );\n }\n \n int main()\n {\n-\ttest01();\n-\treturn 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "665ce176b97021bb928224ffe2a0e91d00cb3879", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/lookup_classname.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_classname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_classname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_classname.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef wchar_t CharT;\n   typedef std::regex_traits<CharT> traits;\n "}, {"sha": "171f24895aa966823c9ef98a0886fc7a6e359542", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/lookup_collatename.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_collatename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_collatename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Flookup_collatename.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -28,7 +28,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef wchar_t CharT;\n   typedef std::regex_traits<CharT> traits;\n \n@@ -39,6 +38,6 @@ test01()\n \n int main()\n {\n-\ttest01();\n-\treturn 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "795f62a0978830bfdd806e84e26781f3e71fc9ee", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/transform.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,20 +31,19 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef wchar_t CharT;\n   typedef std::regex_traits<CharT> traits;\n \n-\ttraits t;\n-\ttraits::string_type G = L\"abc\";\n-\ttraits::string_type H = L\"def\";\n+  traits t;\n+  traits::string_type G = L\"abc\";\n+  traits::string_type H = L\"def\";\n \n   VERIFY( G < H );\n   VERIFY( t.transform(G.begin(), G.end()) < t.transform(H.begin(), H.end()) );\n }\n \n int main()\n {\n-\ttest01();\n-\treturn 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "0a6fb920446bf8a857dab3d60e0f70b49b97c82c", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/transform_primary.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform_primary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform_primary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftransform_primary.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,14 +29,13 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef wchar_t CharT;\n   typedef std::regex_traits<CharT> traits;\n \n-\ttraits t;\n-\ttraits::string_type G = L\"abc\";\n-\ttraits::string_type H = L\"def\";\n-\ttraits::string_type J = L\"ABC\";\n+  traits t;\n+  traits::string_type G = L\"abc\";\n+  traits::string_type H = L\"def\";\n+  traits::string_type J = L\"ABC\";\n \n   VERIFY( G < H );\n   VERIFY( t.transform_primary(G.begin(), G.end())\n@@ -49,6 +48,6 @@ test01()\n \n int main()\n {\n-\ttest01();\n-\treturn 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "abf822be798514aa6dc301ae3c050380cf8b8565", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/translate.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftranslate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftranslate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftranslate.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,7 +31,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef wchar_t CharT;\n \n   std::regex_traits<CharT> t;\n@@ -43,6 +42,6 @@ test01()\n \n int main()\n {\n-\ttest01();\n-\treturn 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "a935b1ab74cabab6856fb60933d6210e1f301744", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/translate_nocase.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftranslate_nocase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftranslate_nocase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Ftranslate_nocase.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n // Verifies the workings of the regex_traits translate_nocase function.\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   typedef wchar_t CharT;\n \n   std::regex_traits<CharT> t;"}, {"sha": "901e042ba89455a81033bda3e7d0238a525b917e", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/user_defined.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fuser_defined.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fuser_defined.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fuser_defined.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -45,8 +45,6 @@ template<typename CharT>\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   basic_regex<wchar_t, MyRegexTraits<wchar_t>> re(L\".\");\n   VERIFY(!regex_match(L\"\\n\", re));\n   VERIFY(!regex_match(L\"\\r\", re));"}, {"sha": "92dd046397f8b6ed26e24c99b0cae75e8ef69d59", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/value.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fvalue.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n // Tests the value() function of the regex_traits<wchar_t> class.\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   std::regex_traits<wchar_t> t;\n   VERIFY( t.value(L'7', 8)  == 7 );\n   VERIFY( t.value(L'7', 10) == 7 );"}, {"sha": "cf14e8e4dae3d95145dc9fc64d5c396e0c654dc2", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/60658.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60658.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60658.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60658.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,8 +34,6 @@ struct Bar {\n int\n main ()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::atomic<Foo*> a;\n   std::atomic<Bar*> b;\n "}, {"sha": "7b013d4c32f0bf264ab55aa35649e678872534d6", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/operators/51811.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F51811.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F51811.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F51811.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -26,8 +26,6 @@\n // pointer arithimetic vs. atomic<_Tp*> specialization\n int main(void)\n {\n-  bool test __attribute__((unused)) = true;\n-\n   using namespace std;\n \n   typedef int \tvalue_type;"}, {"sha": "1457dc90bb3bfb75b44e895510909dc070b2c71b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/clear/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -23,7 +23,6 @@\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n   std::atomic_flag f = ATOMIC_FLAG_INIT;\n \n   f.clear(); // set to false"}, {"sha": "8aa55995c0291afcb722c0b8dde427128f0a3c2d", "filename": "libstdc++-v3/testsuite/backward/11460.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2F11460.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2F11460.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2F11460.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -35,8 +35,6 @@ class Buf : public std::strstreambuf\n // libstdc++/11460\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef std::strstreambuf::traits_type Traits;\n   const char str[] = \"a\\xff\";\n   "}, {"sha": "a9b4210c0f1a2f4063da9729d345abf778b61ebb", "filename": "libstdc++-v3/testsuite/backward/hash_map/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -66,7 +66,6 @@ namespace __gnu_cxx\n void test01()\n {\n   const int Size = 5;\n-  bool test __attribute__((unused)) = true;\n \n   using std::string;\n   using std::pair;"}, {"sha": "cf1610bf3f792843b667be4b341f35b6f3807ab8", "filename": "libstdc++-v3/testsuite/backward/hash_map/25896.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F25896.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F25896.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_map%2F25896.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -56,8 +56,6 @@ namespace __gnu_cxx\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef __gnu_cxx::hash_map<std::string, int> Map;\n   typedef Map::iterator       iterator;\n   typedef Map::const_iterator const_iterator;"}, {"sha": "aea81e279e730a99784edea1c1f703c92926e568", "filename": "libstdc++-v3/testsuite/backward/hash_set/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_set%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_set%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_set%2F1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@\n void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n   const int werte[] = { 1, 25, 9, 16, -36};\n   const int anzahl = sizeof(werte) / sizeof(int);\n   __gnu_cxx::hash_set<int> intTable(werte, werte + anzahl);"}, {"sha": "bfedf5109ee2ca6c8e2a267be09dfa29fa0f4c48", "filename": "libstdc++-v3/testsuite/backward/hash_set/25896.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_set%2F25896.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_set%2F25896.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fbackward%2Fhash_set%2F25896.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -56,8 +56,6 @@ namespace __gnu_cxx\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   typedef __gnu_cxx::hash_set<std::string> Set;\n   typedef Set::iterator       iterator;\n   typedef Set::const_iterator const_iterator;"}, {"sha": "eb6ac3e34fce2cac3a387a69b8fd178040ad59c7", "filename": "libstdc++-v3/testsuite/decimal/binary-arith.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,7 +37,6 @@ unsigned long long ull = 50;\n void\n binary_add_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = si + a;   VERIFY (b == 980);\n@@ -64,7 +63,6 @@ binary_add_32 (void)\n void\n binary_subtract_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a - si;   VERIFY (b == 1020);\n@@ -92,7 +90,6 @@ binary_subtract_32 (void)\n void\n binary_multiply_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a * si;   VERIFY (b == -20000);\n@@ -119,7 +116,6 @@ binary_multiply_32 (void)\n void\n binary_divide_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a / si;   VERIFY (b == -50);\n@@ -147,7 +143,6 @@ binary_divide_32 (void)\n void\n binary_add_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a + si;   VERIFY (b == 980);\n@@ -174,7 +169,6 @@ binary_add_64 (void)\n void\n binary_subtract_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a - si;   VERIFY (b == 1020);\n@@ -202,7 +196,6 @@ binary_subtract_64 (void)\n void\n binary_multiply_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a * si;   VERIFY (b == -20000);\n@@ -229,7 +222,6 @@ binary_multiply_64 (void)\n void\n binary_divide_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a / si;   VERIFY (b == -50);\n@@ -257,7 +249,6 @@ binary_divide_64 (void)\n void\n binary_add_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a + si;   VERIFY (b == 980);\n@@ -284,7 +275,6 @@ binary_add_128 (void)\n void\n binary_subtract_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a - si;   VERIFY (b == 1020);\n@@ -312,7 +302,6 @@ binary_subtract_128 (void)\n void\n binary_multiply_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a * si;   VERIFY (b == -20000);\n@@ -339,7 +328,6 @@ binary_multiply_128 (void)\n void\n binary_divide_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a / si;   VERIFY (b == -50);"}, {"sha": "5834e4ec891cdf405c992073b062fd60a4f95d8b", "filename": "libstdc++-v3/testsuite/decimal/comparison.cc", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -37,7 +37,6 @@ unsigned long long ull = 50;\n void\n compare_eq_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = si;   VERIFY (a == si);   VERIFY (si == a);\n@@ -54,7 +53,6 @@ compare_eq_32 (void)\n void\n compare_ne_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a = 100;\n \n   VERIFY (a != si);   VERIFY (si != a);\n@@ -71,7 +69,6 @@ compare_ne_32 (void)\n void\n compare_lt_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a = -100;\n \n   VERIFY (a < si);\n@@ -99,7 +96,6 @@ compare_lt_32 (void)\n void\n compare_le_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n@@ -138,7 +134,6 @@ compare_le_32 (void)\n void\n compare_gt_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a = 100;\n \n   VERIFY (a > si);\n@@ -166,7 +161,6 @@ compare_gt_32 (void)\n void\n compare_ge_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = si;   VERIFY (a >= si);   VERIFY (si <= a);\n@@ -205,7 +199,6 @@ compare_ge_32 (void)\n void\n compare_eq_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = si;   VERIFY (a == si);   VERIFY (si == a);\n@@ -222,7 +215,6 @@ compare_eq_64 (void)\n void\n compare_ne_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a = 100;\n \n   VERIFY (a != si);   VERIFY (si != a);\n@@ -239,7 +231,6 @@ compare_ne_64 (void)\n void\n compare_lt_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a = -100;\n \n   VERIFY (a < si);\n@@ -267,7 +258,6 @@ compare_lt_64 (void)\n void\n compare_le_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n@@ -306,7 +296,6 @@ compare_le_64 (void)\n void\n compare_gt_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a = 100;\n \n   VERIFY (a > si);\n@@ -334,7 +323,6 @@ compare_gt_64 (void)\n void\n compare_ge_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = si;   VERIFY (a >= si);   VERIFY (si <= a);\n@@ -373,7 +361,6 @@ compare_ge_64 (void)\n void\n compare_eq_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = si;   VERIFY (a == si);   VERIFY (si == a);\n@@ -390,7 +377,6 @@ compare_eq_128 (void)\n void\n compare_ne_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a = 100;\n \n   VERIFY (a != si);   VERIFY (si != a);\n@@ -407,7 +393,6 @@ compare_ne_128 (void)\n void\n compare_lt_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a = -100;\n \n   VERIFY (a < si);\n@@ -435,7 +420,6 @@ compare_lt_128 (void)\n void\n compare_le_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n@@ -474,7 +458,6 @@ compare_le_128 (void)\n void\n compare_gt_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a = 100;\n \n   VERIFY (a > si);\n@@ -502,7 +485,6 @@ compare_gt_128 (void)\n void\n compare_ge_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = si;   VERIFY (a >= si);   VERIFY (si <= a);"}, {"sha": "aa2a756b3f5f79e85861c38d3a9b676f50a5912e", "filename": "libstdc++-v3/testsuite/decimal/compound-assignment-memfunc.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -41,7 +41,6 @@ unsigned long long ull = 50;\n void\n compound_assignment_add_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator+=(d32);  VERIFY (b == 1005);\n@@ -58,7 +57,6 @@ compound_assignment_add_32 (void)\n void\n compound_assignment_subtract_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator-=(d32);  VERIFY (b == 995);\n@@ -75,7 +73,6 @@ compound_assignment_subtract_32 (void)\n void\n compound_assignment_multiply_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator*=(d32);  VERIFY (b == 5000);\n@@ -92,7 +89,6 @@ compound_assignment_multiply_32 (void)\n void\n compound_assignment_divide_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator/=(d32);  VERIFY (b == 200);\n@@ -109,7 +105,6 @@ compound_assignment_divide_32 (void)\n void\n compound_assignment_add_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator+=(d32);  VERIFY (b == 1005);\n@@ -126,7 +121,6 @@ compound_assignment_add_64 (void)\n void\n compound_assignment_subtract_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator-=(d32);  VERIFY (b == 995);\n@@ -143,7 +137,6 @@ compound_assignment_subtract_64 (void)\n void\n compound_assignment_multiply_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator*=(d32);  VERIFY (b == 5000);\n@@ -160,7 +153,6 @@ compound_assignment_multiply_64 (void)\n void\n compound_assignment_divide_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator/=(d32);  VERIFY (b == 200);\n@@ -177,7 +169,6 @@ compound_assignment_divide_64 (void)\n void\n compound_assignment_add_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator+=(d32);  VERIFY (b == 1005);\n@@ -194,7 +185,6 @@ compound_assignment_add_128 (void)\n void\n compound_assignment_subtract_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator-=(d32);  VERIFY (b == 995);\n@@ -211,7 +201,6 @@ compound_assignment_subtract_128 (void)\n void\n compound_assignment_multiply_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator*=(d32);  VERIFY (b == 5000);\n@@ -228,7 +217,6 @@ compound_assignment_multiply_128 (void)\n void\n compound_assignment_divide_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator/=(d32);  VERIFY (b == 200);"}, {"sha": "ff70268200b1072464a04e0b913235577a8fdb46", "filename": "libstdc++-v3/testsuite/decimal/compound-assignment.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -39,7 +39,6 @@ unsigned long long ull = 50;\n void\n compound_assignment_add_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b += d32;  VERIFY (b == 1005);\n@@ -56,7 +55,6 @@ compound_assignment_add_32 (void)\n void\n compound_assignment_subtract_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b -= d32;  VERIFY (b == 995);\n@@ -73,7 +71,6 @@ compound_assignment_subtract_32 (void)\n void\n compound_assignment_multiply_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b *= d32;  VERIFY (b == 5000);\n@@ -90,7 +87,6 @@ compound_assignment_multiply_32 (void)\n void\n compound_assignment_divide_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b /= d32;  VERIFY (b == 200);\n@@ -107,7 +103,6 @@ compound_assignment_divide_32 (void)\n void\n compound_assignment_add_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b += d32;  VERIFY (b == 1005);\n@@ -124,7 +119,6 @@ compound_assignment_add_64 (void)\n void\n compound_assignment_subtract_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b -= d32;  VERIFY (b == 995);\n@@ -141,7 +135,6 @@ compound_assignment_subtract_64 (void)\n void\n compound_assignment_multiply_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b *= d32;  VERIFY (b == 5000);\n@@ -158,7 +151,6 @@ compound_assignment_multiply_64 (void)\n void\n compound_assignment_divide_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b /= d32;  VERIFY (b == 200);\n@@ -175,7 +167,6 @@ compound_assignment_divide_64 (void)\n void\n compound_assignment_add_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b += d32;  VERIFY (b == 1005);\n@@ -192,7 +183,6 @@ compound_assignment_add_128 (void)\n void\n compound_assignment_subtract_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b -= d32;  VERIFY (b == 995);\n@@ -209,7 +199,6 @@ compound_assignment_subtract_128 (void)\n void\n compound_assignment_multiply_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b *= d32;  VERIFY (b == 5000);\n@@ -226,7 +215,6 @@ compound_assignment_multiply_128 (void)\n void\n compound_assignment_divide_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b /= d32;  VERIFY (b == 200);"}, {"sha": "8e2ab87c7a69ac7deeb8bd56d6d6e3c18d7760ec", "filename": "libstdc++-v3/testsuite/decimal/conversion-from-float.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,7 +29,6 @@ using namespace std::decimal;\n void\n conversion_from_float_32 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 d32(123);\n   decimal64 d64(234);\n   decimal128 d128(345);\n@@ -52,7 +51,6 @@ conversion_from_float_32 ()\n void\n conversion_from_float_64 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 d32(123);\n   decimal64 d64(234);\n   decimal128 d128(345);\n@@ -75,7 +73,6 @@ conversion_from_float_64 ()\n void\n conversion_from_float_128 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 d32(123);\n   decimal64 d64(234);\n   decimal128 d128(345);"}, {"sha": "9f11890f3a70c86eeec2603ace8a10ecfdcac695", "filename": "libstdc++-v3/testsuite/decimal/conversion-from-integral.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,7 +29,6 @@ using namespace std::decimal;\n void\n conversion_from_integral_p32 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 d;\n   decimal32 from_si (1);\n   decimal32 from_ui (2U);\n@@ -62,7 +61,6 @@ conversion_from_integral_p32 ()\n void\n conversion_from_integral_m32 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 d;\n   decimal32 from_si (-1);\n   decimal32 from_sl (-2L);\n@@ -83,7 +81,6 @@ conversion_from_integral_m32 ()\n void\n conversion_from_integral_p64 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 d;\n   decimal64 from_si (1);\n   decimal64 from_ui (2U);\n@@ -116,7 +113,6 @@ conversion_from_integral_p64 ()\n void\n conversion_from_integral_m64 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 d;\n   decimal64 from_si (-1);\n   decimal64 from_sl (-2L);\n@@ -137,7 +133,6 @@ conversion_from_integral_m64 ()\n void\n conversion_from_integral_p128 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 d;\n   decimal128 from_si (1);\n   decimal128 from_ui (2U);\n@@ -169,7 +164,6 @@ conversion_from_integral_p128 ()\n void\n conversion_from_integral_m128 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 d;\n   decimal128 from_si (-1);\n   decimal128 from_sl (-2L);"}, {"sha": "afdd73acc4e3fd28c3a3791c2973bc92fbcd60ad", "filename": "libstdc++-v3/testsuite/decimal/conversion-to-generic-float.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -27,7 +27,6 @@ using namespace std::decimal;\n void\n conversion_to_generic_float_32 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 d32(123);\n   float f;\n   double d;\n@@ -52,7 +51,6 @@ conversion_to_generic_float_32 ()\n void\n conversion_to_generic_float_64 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 d64(234);\n   float f;\n   double d;\n@@ -77,7 +75,6 @@ conversion_to_generic_float_64 ()\n void\n conversion_to_generic_float_128 ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 d128(345);\n   float f;\n   double d;"}, {"sha": "913b92135272ccefe5950e35bd0b3b45b27c79ab", "filename": "libstdc++-v3/testsuite/decimal/conversion-to-integral.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -35,7 +35,6 @@ conversion_to_integral_32 (void)\n {\n   #undef MAXVAL\n   #define MAXVAL 999999LL\n-  bool test __attribute__((unused)) = true;\n   decimal32 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n   long long ll;\n \n@@ -51,7 +50,6 @@ conversion_to_integral_64 (void)\n {\n   #undef MAXVAL\n   #define MAXVAL 999999999999999LL\n-  bool test __attribute__((unused)) = true;\n   decimal64 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n   long long ll;\n \n@@ -67,7 +65,6 @@ conversion_to_integral_128 (void)\n {\n   #undef MAXVAL\n   #define MAXVAL LONG_LONG_MAX\n-  bool test __attribute__((unused)) = true;\n   decimal128 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n   long long ll;\n "}, {"sha": "d873f26e2d4a3b592ed85fdd66abd7ad34b7031d", "filename": "libstdc++-v3/testsuite/decimal/ctor.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -33,7 +33,6 @@ using namespace std::decimal;\n void\n ctor_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a;\n   float b __attribute__((mode(SD))) = 0.e-101DF;\n \n@@ -43,7 +42,6 @@ ctor_32 (void)\n void\n ctor_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a;\n   float b __attribute__((mode(DD))) = 0.e-398DD;\n \n@@ -53,7 +51,6 @@ ctor_64 (void)\n void\n ctor_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a;\n   float b __attribute__((mode(TD))) = 0.e-6176DL;\n "}, {"sha": "36f9110360887fc827f69ede7121c958bc735f7a", "filename": "libstdc++-v3/testsuite/decimal/incdec-memfunc.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -34,7 +34,6 @@ using namespace std::decimal;\n void\n incdec32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   int ival;\n   decimal32 a(11), b, c;\n \n@@ -82,7 +81,6 @@ incdec32 (void)\n void\n incdec64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   int ival;\n   decimal64 a(11), b, c;\n \n@@ -130,7 +128,6 @@ incdec64 (void)\n void\n incdec128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   int ival;\n   decimal128 a(11), b, c;\n "}, {"sha": "11c81408619d1376b29b9217462d99f0b3dc3e2d", "filename": "libstdc++-v3/testsuite/decimal/incdec.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -32,7 +32,6 @@ using namespace std::decimal;\n void\n incdec32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   int ival;\n   decimal32 a(11), b, c;\n \n@@ -80,7 +79,6 @@ incdec32 (void)\n void\n incdec64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   int ival;\n   decimal64 a(11), b, c;\n \n@@ -128,7 +126,6 @@ incdec64 (void)\n void\n incdec128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   int ival;\n   decimal128 a(11), b, c;\n "}, {"sha": "1ed0ebe27ee01344594b615fd7208eeca4c619d3", "filename": "libstdc++-v3/testsuite/decimal/make-decimal.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -55,7 +55,6 @@ using namespace std::decimal;\n void\n make_decimal_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a, b, c, d;\n   float x __attribute__((mode(SD)));\n   int i;\n@@ -80,7 +79,6 @@ make_decimal_32 (void)\n void\n make_decimal_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a, b, c, d;\n   float x __attribute__((mode(DD)));\n   int i;\n@@ -105,7 +103,6 @@ make_decimal_64 (void)\n void\n make_decimal_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a, b, c, d;\n   float x __attribute__((mode(TD)));\n   int i;"}, {"sha": "9b6d6040c7b4ff77d814b541a0722eb82118df9a", "filename": "libstdc++-v3/testsuite/decimal/pr54036-1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-1.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -44,7 +44,6 @@ my_inf32 (void)\n int\n main ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 v;\n \n   v = my_nan32 ();"}, {"sha": "158735b5b31296245aef8f9d1144052dddd9f1e0", "filename": "libstdc++-v3/testsuite/decimal/pr54036-2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-2.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -44,7 +44,6 @@ my_inf64 (void)\n int\n main ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 v;\n \n   v = my_nan64 ();"}, {"sha": "36a0984b4e0b6b58d62013f6c2dcb9216a466b92", "filename": "libstdc++-v3/testsuite/decimal/pr54036-3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-3.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -44,7 +44,6 @@ my_inf128 (void)\n int\n main ()\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 v;\n \n   v = my_nan128 ();"}, {"sha": "70299609786014d0e2ef90959a6ca99d60f429f5", "filename": "libstdc++-v3/testsuite/decimal/unary-arith.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -31,7 +31,6 @@ decimal128 a128 (5001), b128 (-5001);\n void\n unary_plus_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = +a32; VERIFY (a == a32);\n@@ -41,7 +40,6 @@ unary_plus_32 (void)\n void\n unary_minus_32 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = -a32; VERIFY (a == b32);\n@@ -51,7 +49,6 @@ unary_minus_32 (void)\n void\n unary_plus_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = +a64; VERIFY (a == a64);\n@@ -61,7 +58,6 @@ unary_plus_64 (void)\n void\n unary_minus_64 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = -a64; VERIFY (a == b64);\n@@ -71,7 +67,6 @@ unary_minus_64 (void)\n void\n unary_plus_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = +a128; VERIFY (a == a128);\n@@ -81,7 +76,6 @@ unary_plus_128 (void)\n void\n unary_minus_128 (void)\n {\n-  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = -a128; VERIFY (a == b128);"}, {"sha": "664502c5c4323cdebe4575d9d6adc1f860bcba4e", "filename": "libstdc++-v3/testsuite/special_functions/01_assoc_laguerre/check_nan.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_nan.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -29,7 +29,6 @@\n void\n test01()\n {\n-  bool test [[gnu::unused]] = true;\n   float xf = std::numeric_limits<float>::quiet_NaN();\n   double xd = std::numeric_limits<double>::quiet_NaN();\n   long double xl = std::numeric_limits<long double>::quiet_NaN();"}, {"sha": "d38775d3a0372307bc6d2fbedc2f0afeff2e2b94", "filename": "libstdc++-v3/testsuite/special_functions/01_assoc_laguerre/check_value.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -2026,7 +2026,6 @@ template<typename Tp, unsigned int Num>\n   void\n   test(const testcase_assoc_laguerre<Tp> (&data)[Num], Tp toler)\n   {\n-    bool test __attribute__((unused)) = true;\n     const Tp eps = std::numeric_limits<Tp>::epsilon();\n     Tp max_abs_diff = -Tp(1);\n     Tp max_abs_frac = -Tp(1);"}, {"sha": "e15c9341583063f983bcb94aebcf04cbcd553ea5", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/check_nan.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_nan.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -40,7 +40,6 @@ test01()\n   long double d = std::assoc_legendre(l, m, xl);\n   long double e = std::assoc_legendrel(l, m, xl);\n \n-  bool test [[gnu::unused]] = true;\n   VERIFY(std::isnan(a));\n   VERIFY(std::isnan(b));\n   VERIFY(std::isnan(c));"}, {"sha": "b7e975f81308e82e7eaecc9d3378eb7338f944f6", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/check_value.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -1878,7 +1878,6 @@ template<typename Tp, unsigned int Num>\n   void\n   test(const testcase_assoc_legendre<Tp> (&data)[Num], Tp toler)\n   {\n-    bool test __attribute__((unused)) = true;\n     const Tp eps = std::numeric_limits<Tp>::epsilon();\n     Tp max_abs_diff = -Tp(1);\n     Tp max_abs_frac = -Tp(1);"}, {"sha": "e88451833740055c9ba9da8d1e7735de1db42434", "filename": "libstdc++-v3/testsuite/special_functions/03_beta/check_nan.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_nan.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -42,7 +42,6 @@ test01()\n   long double d = std::beta(xl, yl);\n   long double e = std::betal(xl, yl);\n \n-  bool test [[gnu::unused]] = true;\n   VERIFY(std::isnan(a));\n   VERIFY(std::isnan(b));\n   VERIFY(std::isnan(c));\n@@ -69,7 +68,6 @@ test02()\n   long double d = std::beta(xl, yl);\n   long double e = std::betal(xl, yl);\n \n-  bool test [[gnu::unused]] = true;\n   VERIFY(std::isnan(a));\n   VERIFY(std::isnan(b));\n   VERIFY(std::isnan(c));"}, {"sha": "5c516033928fc3e9ec0bda4646fc0157c2094486", "filename": "libstdc++-v3/testsuite/special_functions/03_beta/check_value.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -232,7 +232,6 @@ template<typename Tp, unsigned int Num>\n   void\n   test(const testcase_beta<Tp> (&data)[Num], Tp toler)\n   {\n-    bool test __attribute__((unused)) = true;\n     const Tp eps = std::numeric_limits<Tp>::epsilon();\n     Tp max_abs_diff = -Tp(1);\n     Tp max_abs_frac = -Tp(1);"}, {"sha": "c8e5dc07658eb8fd58581924566d10c6f324d06d", "filename": "libstdc++-v3/testsuite/special_functions/04_comp_ellint_1/check_nan.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_nan.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -38,7 +38,6 @@ test01()\n   long double d = std::comp_ellint_1(kl);\n   long double e = std::comp_ellint_1l(kl);\n \n-  bool test [[gnu::unused]] = true;\n   VERIFY(std::isnan(a));\n   VERIFY(std::isnan(b));\n   VERIFY(std::isnan(c));"}, {"sha": "06de6fc1307496d2f05340e837ed69b4a44d349c", "filename": "libstdc++-v3/testsuite/special_functions/04_comp_ellint_1/check_value.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -70,7 +70,6 @@ template<typename Tp, unsigned int Num>\n   void\n   test(const testcase_comp_ellint_1<Tp> (&data)[Num], Tp toler)\n   {\n-    bool test __attribute__((unused)) = true;\n     const Tp eps = std::numeric_limits<Tp>::epsilon();\n     Tp max_abs_diff = -Tp(1);\n     Tp max_abs_frac = -Tp(1);"}, {"sha": "80ff3bc1c1c1b12bf3c2913d171a073131fdbce2", "filename": "libstdc++-v3/testsuite/special_functions/05_comp_ellint_2/check_nan.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_nan.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -38,7 +38,6 @@ test01()\n   long double d = std::comp_ellint_2(kl);\n   long double e = std::comp_ellint_2l(kl);\n \n-  bool test [[gnu::unused]] = true;\n   VERIFY(std::isnan(a));\n   VERIFY(std::isnan(b));\n   VERIFY(std::isnan(c));"}, {"sha": "85ae28268324c55b7bfd16534cbbb1dcafb1c5e8", "filename": "libstdc++-v3/testsuite/special_functions/05_comp_ellint_2/check_value.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -70,7 +70,6 @@ template<typename Tp, unsigned int Num>\n   void\n   test(const testcase_comp_ellint_2<Tp> (&data)[Num], Tp toler)\n   {\n-    bool test __attribute__((unused)) = true;\n     const Tp eps = std::numeric_limits<Tp>::epsilon();\n     Tp max_abs_diff = -Tp(1);\n     Tp max_abs_frac = -Tp(1);"}, {"sha": "f41022ca88e2d73715b4e0bfc4f62d8b20f37b1f", "filename": "libstdc++-v3/testsuite/special_functions/06_comp_ellint_3/check_nan.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2437d31d0e52f0ea67ef1c7a2761f6bff8870c82/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_nan.cc?ref=2437d31d0e52f0ea67ef1c7a2761f6bff8870c82", "patch": "@@ -42,7 +42,6 @@ test01()\n   long double d = std::comp_ellint_3(kl, nul);\n   long double e = std::comp_ellint_3l(kl, nul);\n \n-  bool test [[gnu::unused]] = true;\n   VERIFY(std::isnan(a));\n   VERIFY(std::isnan(b));\n   VERIFY(std::isnan(c));\n@@ -69,7 +68,6 @@ test02()\n   long double d = std::comp_ellint_3(kl, nul);\n   long double e = std::comp_ellint_3l(kl, nul);\n \n-  bool test [[gnu::unused]] = true;\n   VERIFY(std::isnan(a));\n   VERIFY(std::isnan(b));\n   VERIFY(std::isnan(c));"}]}