{"sha": "91b27d984ce17473c80896bd79c63e2c50185d4e", "node_id": "C_kwDOANBUbNoAKDkxYjI3ZDk4NGNlMTc0NzNjODA4OTZiZDc5YzYzZTJjNTAxODVkNGU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-09T19:35:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-09T22:37:39Z"}, "message": "analyzer: more uninit test coverage\n\nIn addition to other test coverage, this adds the examples from\n  https://cwe.mitre.org/data/definitions/457.html\n(aka \"CWE-457: Use of Uninitialized Variable\")\n\nFor reference, the output from -fanalyzer looks like this\n(after stripping away the DejaGnu directives):\n\nuninit-CWE-457-examples.c: In function 'example_2_bad_code':\nuninit-CWE-457-examples.c:56:3: warning: use of uninitialized value 'bN' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]\n   56 |   repaint(aN, bN); /* { dg-warning \"use of uninitialized value 'bN'\" } */\n      |   ^~~~~~~~~~~~~~~\n  'example_2_bad_code': events 1-4\n    |\n    |   34 |   int aN, bN;\n    |      |           ^~\n    |      |           |\n    |      |           (1) region created on stack here\n    |   35 |   switch (ctl) {\n    |      |   ~~~~~~\n    |      |   |\n    |      |   (2) following 'default:' branch...\n    |......\n    |   51 |   default:\n    |      |   ~~~~~~~\n    |      |   |\n    |      |   (3) ...to here\n    |......\n    |   56 |   repaint(aN, bN);\n    |      |   ~~~~~~~~~~~~~~~\n    |      |   |\n    |      |   (4) use of uninitialized value 'bN' here\n    |\nuninit-CWE-457-examples.c: In function 'example_3_bad_code':\nuninit-CWE-457-examples.c:95:3: warning: use of uninitialized value 'test_string' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]\n   95 |   printf(\"%s\", test_string);\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~\n  'example_3_bad_code': events 1-4\n    |\n    |   90 |   char *test_string;\n    |      |         ^~~~~~~~~~~\n    |      |         |\n    |      |         (1) region created on stack here\n    |   91 |   if (i != err_val)\n    |      |      ~\n    |      |      |\n    |      |      (2) following 'false' branch (when 'i == err_val')...\n    |......\n    |   95 |   printf(\"%s\", test_string);\n    |      |   ~~~~~~~~~~~~~~~~~~~~~~~~~\n    |      |   |\n    |      |   (3) ...to here\n    |      |   (4) use of uninitialized value 'test_string' here\n    |\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/uninit-1.c: Add test coverage for shifts,\n\tcomparisons, +, -, *, /, and __builtin_strlen.\n\t* gcc.dg/analyzer/uninit-CWE-457-examples.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "463ed75ca9c0ef9523210d69e0ced780db24f9e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/463ed75ca9c0ef9523210d69e0ced780db24f9e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91b27d984ce17473c80896bd79c63e2c50185d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b27d984ce17473c80896bd79c63e2c50185d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b27d984ce17473c80896bd79c63e2c50185d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b27d984ce17473c80896bd79c63e2c50185d4e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e50a79552d567cd49703103d478ab93d805f60c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50a79552d567cd49703103d478ab93d805f60c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e50a79552d567cd49703103d478ab93d805f60c1"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "9a6576e1b0aa5fe00ef78ab27069673d005915b3", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-1.c", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b27d984ce17473c80896bd79c63e2c50185d4e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b27d984ce17473c80896bd79c63e2c50185d4e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-1.c?ref=91b27d984ce17473c80896bd79c63e2c50185d4e", "patch": "@@ -1,4 +1,5 @@\n #include \"analyzer-decls.h\"\n+typedef __SIZE_TYPE__ size_t;\n \n int test_1 (void)\n {\n@@ -42,3 +43,87 @@ int test_6 (int i)\n   int arr[10]; /* { dg-message \"region created on stack here\" } */\n   return arr[i]; /* { dg-warning \"use of uninitialized value 'arr\\\\\\[i\\\\\\]'\" } */\n }\n+\n+int test_rshift_rhs (int i)\n+{\n+  int j; /* { dg-message \"region created on stack here\" } */\n+  return i >> j; /* { dg-warning \"use of uninitialized value 'j'\" } */\n+}\n+\n+int test_lshift_rhs (int i)\n+{\n+  int j; /* { dg-message \"region created on stack here\" } */\n+  return i << j; /* { dg-warning \"use of uninitialized value 'j'\" } */\n+}\n+\n+int test_rshift_lhs (int i)\n+{\n+  int j; /* { dg-message \"region created on stack here\" } */\n+  return j >> i; /* { dg-warning \"use of uninitialized value 'j'\" } */\n+}\n+\n+int test_lshift_lhs (int i)\n+{\n+  int j; /* { dg-message \"region created on stack here\" } */\n+  return j << i; /* { dg-warning \"use of uninitialized value 'j'\" } */\n+}\n+\n+int test_cmp (int i)\n+{\n+  int j; /* { dg-message \"region created on stack here\" } */\n+  return i < j; /* { dg-warning \"use of uninitialized value 'j'\" } */\n+}\n+\n+float test_plus_rhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return x + y; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+float test_plus_lhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return y + x; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+float test_minus_rhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return x - y; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+float test_minus_lhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return y - x; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+float test_times_rhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return x * y; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+float test_times_lhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return y * x; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+float test_divide_rhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return x / y; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+float test_divide_lhs (float x)\n+{\n+  float y; /* { dg-message \"region created on stack here\" } */\n+  return y / x; /* { dg-warning \"use of uninitialized value 'y'\" } */\n+}\n+\n+size_t test_builtin_strlen (void)\n+{\n+  const char *ptr; /* { dg-message \"region created on stack here\" } */\n+  return __builtin_strlen (ptr); /* { dg-warning \"use of uninitialized value 'ptr'\" } */\n+}"}, {"sha": "47d9c89d7730cbf6d575c67318dc94e9103b0004", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-CWE-457-examples.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b27d984ce17473c80896bd79c63e2c50185d4e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-CWE-457-examples.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b27d984ce17473c80896bd79c63e2c50185d4e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-CWE-457-examples.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-CWE-457-examples.c?ref=91b27d984ce17473c80896bd79c63e2c50185d4e", "patch": "@@ -0,0 +1,119 @@\n+/* Examples adapted from https://cwe.mitre.org/data/definitions/457.html\n+   which states \"Copyright \u00a9 2006\u20132022, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.\"\n+   and which has this on:\n+     https://cwe.mitre.org/about/termsofuse.html\n+\n+   Terms of Use\n+\n+   CWE\u2122 is free to use by any organization or individual for any research, development, and/or commercial purposes, per these CWE Terms of Use. The MITRE Corporation (\"MITRE\") has copyrighted the CWE List, Top 25, CWSS, and CWRAF for the benefit of the community in order to ensure each remains a free and open standard, as well as to legally protect the ongoing use of it and any resulting content by government, vendors, and/or users. CWE is a trademark of MITRE. Please contact cwe@mitre.org if you require further clarification on this issue.\n+\n+   LICENSE\n+\n+   CWE Submissions: By submitting materials to The MITRE Corporation\u2019s (\"MITRE\") Common Weakness Enumeration Program (CWE\u2122), you hereby grant to MITRE a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to use, reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute your submitted materials and derivative works. Unless otherwise required by applicable law or agreed to in writing, it is understood that you are providing such materials on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.\n+\n+   CWE Usage: MITRE hereby grants you a non-exclusive, royalty-free license to use CWE for research, development, and commercial purposes. Any copy you make for such purposes is authorized on the condition that you reproduce MITRE\u2019s copyright designation and this license in any such copy.\n+\n+   DISCLAIMERS\n+\n+   ALL DOCUMENTS AND THE INFORMATION CONTAINED IN THE CWE ARE PROVIDED ON AN \"AS IS\" BASIS AND THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE MITRE CORPORATION, ITS BOARD OF TRUSTEES, OFFICERS, AGENTS, AND EMPLOYEES, DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION THEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+\n+   IN NO EVENT SHALL THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE MITRE CORPORATION, ITS BOARD OF TRUSTEES, OFFICERS, AGENTS, AND EMPLOYEES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE INFORMATION OR THE USE OR OTHER DEALINGS IN THE CWE.  */\n+\n+#include <stdio.h>\n+\n+/* (example 1 from the page is written in PHP).  */\n+\n+/* Example 2.  */\n+\n+extern int repaint(int, int);\n+\n+#define NEXT_SZ 42\n+\n+void example_2_bad_code (int ctl, int i)\n+{\n+  int aN, bN; /* { dg-message \"11: region created on stack here\" } */\n+  switch (ctl) { /* { dg-message \"following 'default:' branch\\\\.\\\\.\\\\.\" } */\n+  case -1:\n+    aN = 0;\n+    bN = 0;\n+    break;\n+\n+  case 0:\n+    aN = i;\n+    bN = -i;\n+    break;\n+\n+  case 1:\n+    aN = i + NEXT_SZ;\n+    bN = i - NEXT_SZ;\n+    break;\n+\n+  default:\n+    aN = -1;\n+    aN = -1;\n+    break;\n+  }\n+  repaint(aN, bN); /* { dg-warning \"use of uninitialized value 'bN'\" } */\n+}\n+\n+void example_2_fixed (int ctl, int i)\n+{\n+  int aN, bN;\n+  switch (ctl) {\n+  case -1:\n+    aN = 0;\n+    bN = 0;\n+    break;\n+\n+  case 0:\n+    aN = i;\n+    bN = -i;\n+    break;\n+\n+  case 1:\n+    aN = i + NEXT_SZ;\n+    bN = i - NEXT_SZ;\n+    break;\n+\n+  default:\n+    aN = -1;\n+    bN = -1; /* (fixing bN/aN typo)  */\n+    break;\n+  }\n+  repaint(aN, bN);\n+}\n+\n+/* Example 3.  */\n+\n+void example_3_bad_code (int i, int err_val)\n+{\n+  char *test_string; /* { dg-message \"9: region created on stack here\" } */\n+  if (i != err_val)  /* { dg-message \"following 'false' branch \\\\(when 'i == err_val'\\\\)\\\\.\\\\.\\\\.\" } */\n+  {\n+      test_string = \"Hello World!\";\n+  }\n+  printf(\"%s\", test_string); /* { dg-warning \"use of uninitialized value 'test_string'\" } */\n+}\n+\n+void example_3_fix_a (int i, int err_val)\n+{\n+  char *test_string = \"Done at the beginning\";\n+  if (i != err_val)\n+  {\n+      test_string = \"Hello World!\";\n+  }\n+  printf(\"%s\", test_string);\n+}\n+\n+void example_3_fix_b (int i, int err_val)\n+{\n+  char *test_string;\n+  if (i != err_val)\n+  {\n+      test_string = \"Hello World!\";\n+  }\n+  else {\n+    test_string = \"Done on the other side!\";\n+  }\n+  printf(\"%s\", test_string);\n+}"}]}