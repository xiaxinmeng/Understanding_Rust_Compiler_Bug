{"sha": "26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmYzczMGRkMmIwNGE3MThmMTJlYTViYTBhYTdhODczN2NjNTEzZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-19T22:36:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-19T22:36:04Z"}, "message": "re PR debug/81570 (create_pseudo_cfg assumes that INCOMING_FRAME_SP_OFFSET is a constant)\n\n\tPR debug/81570\n\tPR debug/83728\n\t* dwarf2cfi.c (DEFAULT_INCOMING_FRAME_SP_OFFSET): Define to\n\tINCOMING_FRAME_SP_OFFSET if not defined.\n\t(scan_trace): Add ENTRY argument.  If true and\n\tDEFAULT_INCOMING_FRAME_SP_OFFSET != INCOMING_FRAME_SP_OFFSET,\n\temit a note to adjust the CFA offset.\n\t(create_cfi_notes): Adjust scan_trace callers.\n\t(create_cie_data): Use DEFAULT_INCOMING_FRAME_SP_OFFSET rather than\n\tINCOMING_FRAME_SP_OFFSET in the CIE.\n\t* config/i386/i386.h (DEFAULT_INCOMING_FRAME_SP_OFFSET): Define.\n\t* config/stormy16/stormy16.h (DEFAULT_INCOMING_FRAME_SP_OFFSET):\n\tLikewise.\n\t* doc/tm.texi.in (DEFAULT_INCOMING_FRAME_SP_OFFSET): Document.\n\t* doc/tm.texi: Regenerated.\n\nFrom-SVN: r256904", "tree": {"sha": "b019a9e56d4c261f73f4aa06dd53814e5ca5c265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b019a9e56d4c261f73f4aa06dd53814e5ca5c265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6f97c3feec266355a80cdcb68a5885748454c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f97c3feec266355a80cdcb68a5885748454c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f97c3feec266355a80cdcb68a5885748454c39"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "bd3c00361f1adcc445fd65908aded5752cea5a8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "patch": "@@ -1,3 +1,21 @@\n+2018-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/81570\n+\tPR debug/83728\n+\t* dwarf2cfi.c (DEFAULT_INCOMING_FRAME_SP_OFFSET): Define to\n+\tINCOMING_FRAME_SP_OFFSET if not defined.\n+\t(scan_trace): Add ENTRY argument.  If true and\n+\tDEFAULT_INCOMING_FRAME_SP_OFFSET != INCOMING_FRAME_SP_OFFSET,\n+\temit a note to adjust the CFA offset.\n+\t(create_cfi_notes): Adjust scan_trace callers.\n+\t(create_cie_data): Use DEFAULT_INCOMING_FRAME_SP_OFFSET rather than\n+\tINCOMING_FRAME_SP_OFFSET in the CIE.\n+\t* config/i386/i386.h (DEFAULT_INCOMING_FRAME_SP_OFFSET): Define.\n+\t* config/stormy16/stormy16.h (DEFAULT_INCOMING_FRAME_SP_OFFSET):\n+\tLikewise.\n+\t* doc/tm.texi.in (DEFAULT_INCOMING_FRAME_SP_OFFSET): Document.\n+\t* doc/tm.texi: Regenerated.\n+\n 2018-01-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR rtl-optimization/83147"}, {"sha": "59522ccba02bb8739535a29f19093a447c96e7a9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "patch": "@@ -2110,6 +2110,10 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n   (cfun->machine->func_type == TYPE_EXCEPTION \\\n    ? 2 * UNITS_PER_WORD : UNITS_PER_WORD)\n \n+/* The value of INCOMING_FRAME_SP_OFFSET the assembler assumes in\n+   .cfi_startproc.  */\n+#define DEFAULT_INCOMING_FRAME_SP_OFFSET UNITS_PER_WORD\n+\n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N)\t((N) <= DX_REG ? (N) : INVALID_REGNUM)\n #define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, CX_REG)"}, {"sha": "4667d8d96dcc65b078eb8a429e7c378e8a23ef8b", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "patch": "@@ -228,6 +228,7 @@ enum reg_class\n \n #define INCOMING_FRAME_SP_OFFSET (xstormy16_interrupt_function_p () ? -6 : -4)\n \n+#define DEFAULT_INCOMING_FRAME_SP_OFFSET -4\n \f\n /* Register That Address the Stack Frame.  */\n "}, {"sha": "2f317b5a3681c7439f48d1b97409774b7c63c413", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "patch": "@@ -3168,6 +3168,15 @@ You only need to define this macro if you want to support call frame\n debugging information like that provided by DWARF 2.\n @end defmac\n \n+@defmac DEFAULT_INCOMING_FRAME_SP_OFFSET\n+Like @code{INCOMING_FRAME_SP_OFFSET}, but must be the same for all\n+functions of the same ABI, and when using GAS @code{.cfi_*} directives\n+must also agree with the default CFI GAS emits.  Define this macro\n+only if @code{INCOMING_FRAME_SP_OFFSET} can have different values\n+between different functions of the same ABI or when\n+@code{INCOMING_FRAME_SP_OFFSET} does not agree with GAS default CFI.\n+@end defmac\n+\n @defmac ARG_POINTER_CFA_OFFSET (@var{fundecl})\n A C expression whose value is an integer giving the offset, in bytes,\n from the argument pointer to the canonical frame address (cfa).  The"}, {"sha": "2a42038829d9980865c81bcc3fc4fa161e4a9780", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "patch": "@@ -2559,6 +2559,15 @@ You only need to define this macro if you want to support call frame\n debugging information like that provided by DWARF 2.\n @end defmac\n \n+@defmac DEFAULT_INCOMING_FRAME_SP_OFFSET\n+Like @code{INCOMING_FRAME_SP_OFFSET}, but must be the same for all\n+functions of the same ABI, and when using GAS @code{.cfi_*} directives\n+must also agree with the default CFI GAS emits.  Define this macro\n+only if @code{INCOMING_FRAME_SP_OFFSET} can have different values\n+between different functions of the same ABI or when\n+@code{INCOMING_FRAME_SP_OFFSET} does not agree with GAS default CFI.\n+@end defmac\n+\n @defmac ARG_POINTER_CFA_OFFSET (@var{fundecl})\n A C expression whose value is an integer giving the offset, in bytes,\n from the argument pointer to the canonical frame address (cfa).  The"}, {"sha": "07e6a5a2887f6014b01aae0a2f69bfe92f371f3e", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fc730dd2b04a718f12ea5ba0aa7a8737cc513e/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=26fc730dd2b04a718f12ea5ba0aa7a8737cc513e", "patch": "@@ -52,6 +52,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef INCOMING_RETURN_ADDR_RTX\n #define INCOMING_RETURN_ADDR_RTX  (gcc_unreachable (), NULL_RTX)\n #endif\n+\n+#ifndef DEFAULT_INCOMING_FRAME_SP_OFFSET\n+#define DEFAULT_INCOMING_FRAME_SP_OFFSET INCOMING_FRAME_SP_OFFSET\n+#endif\n \f\n /* A collected description of an entire row of the abstract CFI table.  */\n struct GTY(()) dw_cfi_row\n@@ -2484,7 +2488,7 @@ scan_insn_after (rtx_insn *insn)\n    instructions therein.  */\n \n static void\n-scan_trace (dw_trace_info *trace)\n+scan_trace (dw_trace_info *trace, bool entry)\n {\n   rtx_insn *prev, *insn = trace->head;\n   dw_cfa_location this_cfa;\n@@ -2503,6 +2507,17 @@ scan_trace (dw_trace_info *trace)\n   this_cfa = cur_row->cfa;\n   cur_cfa = &this_cfa;\n \n+  /* If the current function starts with a non-standard incoming frame\n+     sp offset, emit a note before the first instruction.  */\n+  if (entry\n+      && DEFAULT_INCOMING_FRAME_SP_OFFSET != INCOMING_FRAME_SP_OFFSET)\n+    {\n+      add_cfi_insn = insn;\n+      gcc_assert (NOTE_P (insn) && NOTE_KIND (insn) == NOTE_INSN_DELETED);\n+      this_cfa.offset = INCOMING_FRAME_SP_OFFSET;\n+      def_cfa_1 (&this_cfa);\n+    }\n+\n   for (prev = insn, insn = NEXT_INSN (insn);\n        insn;\n        prev = insn, insn = NEXT_INSN (insn))\n@@ -2671,12 +2686,12 @@ create_cfi_notes (void)\n \n   /* Always begin at the entry trace.  */\n   ti = &trace_info[0];\n-  scan_trace (ti);\n+  scan_trace (ti, true);\n \n   while (!trace_work_list.is_empty ())\n     {\n       ti = trace_work_list.pop ();\n-      scan_trace (ti);\n+      scan_trace (ti, false);\n     }\n \n   queued_reg_saves.release ();\n@@ -2980,7 +2995,12 @@ create_cie_data (void)\n   /* On entry, the Canonical Frame Address is at SP.  */\n   memset (&loc, 0, sizeof (loc));\n   loc.reg = dw_stack_pointer_regnum;\n-  loc.offset = INCOMING_FRAME_SP_OFFSET;\n+  /* create_cie_data is called just once per TU, and when using .cfi_startproc\n+     is even done by the assembler rather than the compiler.  If the target\n+     has different incoming frame sp offsets depending on what kind of\n+     function it is, use a single constant offset for the target and\n+     if needed, adjust before the first instruction in insn stream.  */\n+  loc.offset = DEFAULT_INCOMING_FRAME_SP_OFFSET;\n   def_cfa_1 (&loc);\n \n   if (targetm.debug_unwind_info () == UI_DWARF2"}]}