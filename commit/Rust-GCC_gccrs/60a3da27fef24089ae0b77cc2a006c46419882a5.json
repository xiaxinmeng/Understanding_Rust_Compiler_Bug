{"sha": "60a3da27fef24089ae0b77cc2a006c46419882a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhM2RhMjdmZWYyNDA4OWFlMGI3N2NjMmEwMDZjNDY0MTk4ODJhNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-16T22:10:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-16T22:10:26Z"}, "message": "compiler: Lower constant string comparisons.\n\nFrom-SVN: r184316", "tree": {"sha": "1393fc131050d4a0b694f9a22d6ad012753f3bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1393fc131050d4a0b694f9a22d6ad012753f3bb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60a3da27fef24089ae0b77cc2a006c46419882a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a3da27fef24089ae0b77cc2a006c46419882a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a3da27fef24089ae0b77cc2a006c46419882a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a3da27fef24089ae0b77cc2a006c46419882a5/comments", "author": null, "committer": null, "parents": [{"sha": "539b471b67c7e7076c7c4da34c2ba28fdf816cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539b471b67c7e7076c7c4da34c2ba28fdf816cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/539b471b67c7e7076c7c4da34c2ba28fdf816cb0"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "20c49f13b0e2fb19c1126e93df0729bb06127c17", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a3da27fef24089ae0b77cc2a006c46419882a5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a3da27fef24089ae0b77cc2a006c46419882a5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=60a3da27fef24089ae0b77cc2a006c46419882a5", "patch": "@@ -5824,15 +5824,46 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n   }\n \n   // String constant expressions.\n-  if (op == OPERATOR_PLUS\n-      && left->type()->is_string_type()\n-      && right->type()->is_string_type())\n+  if (left->type()->is_string_type() && right->type()->is_string_type())\n     {\n       std::string left_string;\n       std::string right_string;\n       if (left->string_constant_value(&left_string)\n \t  && right->string_constant_value(&right_string))\n-\treturn Expression::make_string(left_string + right_string, location);\n+\t{\n+\t  if (op == OPERATOR_PLUS)\n+\t    return Expression::make_string(left_string + right_string,\n+\t\t\t\t\t   location);\n+\t  else if (is_comparison)\n+\t    {\n+\t      int cmp = left_string.compare(right_string);\n+\t      bool r;\n+\t      switch (op)\n+\t\t{\n+\t\tcase OPERATOR_EQEQ:\n+\t\t  r = cmp == 0;\n+\t\t  break;\n+\t\tcase OPERATOR_NOTEQ:\n+\t\t  r = cmp != 0;\n+\t\t  break;\n+\t\tcase OPERATOR_LT:\n+\t\t  r = cmp < 0;\n+\t\t  break;\n+\t\tcase OPERATOR_LE:\n+\t\t  r = cmp <= 0;\n+\t\t  break;\n+\t\tcase OPERATOR_GT:\n+\t\t  r = cmp > 0;\n+\t\t  break;\n+\t\tcase OPERATOR_GE:\n+\t\t  r = cmp >= 0;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  go_unreachable();\n+\t\t}\n+\t      return Expression::make_boolean(r, location);\n+\t    }\n+\t}\n     }\n \n   // Special case for shift of a floating point constant."}]}