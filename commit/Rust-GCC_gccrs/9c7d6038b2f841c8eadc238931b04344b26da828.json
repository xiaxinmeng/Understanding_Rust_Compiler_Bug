{"sha": "9c7d6038b2f841c8eadc238931b04344b26da828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3ZDYwMzhiMmY4NDFjOGVhZGMyMzg5MzFiMDQzNDRiMjZkYTgyOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-11T23:00:48Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-11T23:00:48Z"}, "message": "T\n\t* mpw-* Delete.  Not used.\n\t* ltconfig, ltmain.sh: Update to libtool 1.2a.\n\t* Makefile.in (CC_FOR_TARGET): Use $(TARGET_SUBDIR) when passing -B\n\tfor newlib directory.\n\t(CXX_FOR_TARGET): Likewise.\nBring over from devo.\n\nFrom-SVN: r19690", "tree": {"sha": "4ba06beed1cf750b2c6b676a468d15fde3efab7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba06beed1cf750b2c6b676a468d15fde3efab7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c7d6038b2f841c8eadc238931b04344b26da828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7d6038b2f841c8eadc238931b04344b26da828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c7d6038b2f841c8eadc238931b04344b26da828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7d6038b2f841c8eadc238931b04344b26da828/comments", "author": null, "committer": null, "parents": [{"sha": "8475691625ffe03ab33968891fac48aec8db1850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8475691625ffe03ab33968891fac48aec8db1850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8475691625ffe03ab33968891fac48aec8db1850"}], "stats": {"total": 376, "additions": 0, "deletions": 376}, "files": [{"sha": "767140b5b2632a3d630ad010af2afaa5371c3e2b", "filename": "mpw-README", "status": "removed", "additions": 0, "deletions": 376, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8475691625ffe03ab33968891fac48aec8db1850/mpw-README", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8475691625ffe03ab33968891fac48aec8db1850/mpw-README", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/mpw-README?ref=8475691625ffe03ab33968891fac48aec8db1850", "patch": "@@ -1,376 +0,0 @@\n-This is basic information about the Macintosh(tm) MPW(tm) port of the\n-GNU tools.  The information below applies to both native and cross\n-compilers.\n-\n-(Please note that there are two versions of this file; \"mpw-README\"\n-is the source form, and \"Read Me for MPW\" is the distribution form.\n-\"Read Me for MPW\" has 8-bit chars such as \\Option-d embedded in it.)\n-\n-INSTALLING GNU TOOLS\n-\n-* System Requirements\n-\n-To use these tools, you will need a Mac with a 68020 or better or else\n-any PowerMac, System 7.1 or later, and MPW 3.3 or 3.4.  You will *not*\n-need any other MPW compiler unless you want to rebuild from sources,\n-nor even any include files, unless you are building actual Mac\n-applications.  For PowerMac native you will need PPCLink, however;\n-also the executables are PowerPC-only.\n-\n-* Automated Installation\n-\n-The simplest way to install GNU tools is to run the Install script.\n-The script will copy things to where you want to keep them, will build\n-a UserStartup file with settings corresponding to where things were\n-copied, and offer to put that UserStartup file in your MPW folder.\n-\n-The Install script does not alter anything in the System Folder, and\n-it does not take any action without confirmation.\n-\n-The Install script will be at the top level of the binary\n-distribution, or at the top level of the object directory if\n-rebuilding from source.  (The sources include a file called\n-\"mpw-install\" at the top level, but it is the source to the Install\n-script and cannot be run directly.)\n-\n-* Manual Installation\n-\n-If you don't want to run the Install script, you can do installation\n-manually; this section describes the steps involved.\n-\n-The GNU tools can go in any directory that is in your {Commands} list.\n-We generally put all the tools somewhere like {Boot}Cygnus:latest:bin,\n-and then add to a UserStartup file:\n-\n-\tset Commands \"{Boot}Cygnus:latest:bin:,{Commands}\"\n-\n-However, the cpp and cc1 programs of GCC are not normally stored here.\n-Instead, they will be in a \"lib\" directory that is alongside \"bin\",\n-and organized by target and version underneath, with names like\n-\n-\t:lib:gcc-lib:<target>:cygnus-<version>:\n-\n-If you build and install everything yourself according to the build\n-instructions below, then you will not have any problems.  However, you\n-may discover that GCC seems unable to find the right cpp and cc1;\n-usually this will be because directory names have changed.  (Even\n-renaming your hard disk will make this happen.)  In such cases, you\n-have several choices.  One is just to add this directory to\n-{Commands}, but then you will not be able to get any other cpp or cc1,\n-such as those used by a different target or version.  Another way is\n-to rename your disk and directories to match the prefix used when the\n-tools were compiled.  Finally, you can set the variable\n-GCC_EXEC_PREFIX to point to the library directory:\n-\n-\tset GCC_EXEC_PREFIX MyDisk:Stuff:lib:gcc-lib:\n-\texport GCC_EXEC_PREFIX\n-\n-You may also want to edit MPW's HEXA 128 resource.  When GCC is built\n-using a native GCC, it is compiled to use a special stack allocator\n-function alloca().  While this is very efficient, it means that GCC\n-will need considerable stack space to run, especially when compiling\n-large programs with optimization turned on.  You give MPW more stack\n-by editing the HEXA 128 resource of the MPW Shell.  A value of \"0008\n-0000\" gives 512K of stack size, which is usually sufficient.\n-\n-USING GNU TOOLS\n-\n-* Using Native PowerMac GCC\n-\n-Using a native PowerMac GCC to produce MPW tools or MacOS applications\n-is more complicated than just \"gC foo.c\", although no more complicated\n-than with other Mac compilers.\n-\n-To build a native PowerMac MPW tool, use this sequence, where hello.c\n-is the usual \"hello world\" program, and genericcfrg.r is the Rez file\n-with the code fragment resource:\n-\n-gC -I{CIncludes} -fno-builtin -Dpascal= -c -g hello.c\n-PPCLink hello.o -o hello \\Option-d\n-\t\"{PPCLibraries}\"StdCRuntime.o \\Option-d\n-\t\"{SharedLibraries}\"InterfaceLib \\Option-d\n-\t\"{SharedLibraries}\"StdCLib \\Option-d\n-\t\"{PPCLibraries}\"PPCToolLibs.o \\Option-d\n-\t\"{PPCLibraries}\"PPCCRuntime.o \\Option-d\n-\t\"{GCCPPCLibraries}\"libgcc.xcoff\n-rez -d APPNAME='\"'hello'\"' GenericCFRG.r -o hello\n-setfile -t 'MPST' -c 'MPS ' hello\n-\n-The same sequence works to build a MacOS application, but you set the file\n-type to 'APPL' and don't link in PPCToolLibs.o.  For further details on\n-using MPW to build Mac applications, see the general MPW documentation.\n-\n-Recent versions of PPCLink have an option to generate the code\n-fragment resource and automatically set creator and file type;\n-here is what GenericCFRG.r should look like if you have an older\n-PPCLink or are using GNU ld:\n-\n-#include \"CodeFragmentTypes.r\"\n-\n-resource 'cfrg' (0) {\n-        {\n-                kPowerPC,\n-                kFullLib,\n-                kNoVersionNum,kNoVersionNum,\n-                0,0,\n-                kIsApp,kOnDiskFlat,kZeroOffset,kWholeFork,\n-                APPNAME // must be defined on Rez command line with -d option\n-        }\n-};\n-\n-In general this port of GCC supports the same option syntax and\n-behavior as its Unix counterpart.  It also has similar compilation\n-rules, so it will run the assembler on .s files and so forth.\n-\n-The GCC manual includes full information on the available options.\n-One option that may be especially useful is \"-v\", which shows you what\n-tools and options are being used; unlike most Mac C compilers, GCC\n-directs assembly and linking in addition to compilation.\n-\n-MPW GCC does feature two extensions to the option syntax; '-d macro=name'\n-works just as '-Dmacro=name' does in Unix, and '-i directory' works the\n-same as '-Idirectory'.\n-\n-MPW GCC supports the usual Pascal-style strings and alignment pragmas.\n-\n-To find standard include files you can set the variable GCCIncludes:\n-\n-\tset GCCIncludes MyDisk:MyIncludes:\n-\texport GCCIncludes\n-\n-GCCIncludes is similar to MPW's CIncludes or CW's MWCIncludes.  In\n-order to use MPW's usual include files, just say:\n-\n-\tset GCCIncludes \"{CIncludes}\"\n-\texport GCCIncludes\n-\n-* Using GCC as a Cross-Compiler\n-\n-If you have a cross-compiler, and you have all of the correct\n-target-side crt0 and libraries available, then to compile and link a\n-file \"foo.c\", you can say just\n-\n-\tgC foo.c\n-\n-The output file will be an MPW binary file named \"a.out\"; the format\n-of the contents will depend on which target is in use, so for instance\n-a MIPS-targeting GCC will produce ECOFF or ELF executables.\n-\n-Note that using MPW include files with a cross-compiler is somewhat\n-dangerous.\n-\n-* Using the Assembler and Friends\n-\n-The assembler (\"as\") and linker (\"ld\") are faithful ports of their\n-Unix counterparts.  Similarly, the binutils \"ar\", \"cplusfilt\", \"nm\",\n-\"objcopy\", \"objdump\", \"ranlib\", \"size\", \"strings\", and \"strip\" are all\n-like they are under Unix.  (Note that \"cplusfilt\" is usually called\n-\"c++filt\" under Unix.)\n-\n-* Using GDB\n-\n-There are two flavors of GDB.  \"gdb\" is an MPW tool that works very\n-much like it does in Unix; put a command into the MPW worksheet and\n-type the <enter> key to send it to GDB.  While \"gdb\" is running, you\n-cannot do anything else in MPW, although you can switch to other\n-Mac applications and use them.\n-\n-\"SiowGDB\" is also a Mac application, but it is GDB using the SIOW\n-package to provide console emulation.  Commands are exactly as for the\n-MPW tool, but since this is its own application, you can switch\n-between it and MPW.\n-\n-BUILDING GNU TOOLS\n-\n-This port of the GNU tools uses a configure script similar to\n-that used for GNU tools under Unix, but rewritten for MPW.  As with\n-Unix configuration, there is an \"object\" directory that may be\n-different from the \"source\" directory.  In the example commands below,\n-we will assume that we are currently in the object directory, and that\n-the source directory is \"{Boot}Cygnus:src:\".\n-\n-* Requirements for Building\n-\n-In addition to the sources, you will need a set of tools that the\n-configure and build scripts assume to be available.  These tools\n-(and their versions, if relevant) are as follows:\n-\n-\tbyacc tool\n-\tflex (2.3.7) tool (and Flex.skel file)\n-\tforward-include script\n-\tMoveIfChange script\n-\tmpw-touch script\n-\tmpw-true script\n-\tNewFolderRecursive script\n-\tnull-command script\n-\topen-brace script\n-\tsed (1.13) tool\n-\ttr-7to8 script\n-\ttrue script\n-\n-The scripts are in the sources, under utils:mpw:. You must arrange to\n-get the other tools yourself (they are readily available from the\n-\"usual\" net sites, and are also on many CDROMS).  In addition, there\n-will usually be a set of these available at ftp.cygnus.com, in pub/mac.\n-\n-You may put the build tools in your usual Tools or Scripts\n-directories, or keep them in a separate directories.  We prefer to\n-make a directory called \"buildtools\" and we put this in one of our\n-UserStartup files:\n-\n-\tset Commands \"{Boot}Cygnus:buildtools:,{Commands}\"\n-\n-Flex uses an environment variable FLEX_SKELETON to locate its skeleton\n-file, so you need to do something like this, preferably in a UserStartup:\n-\n-\tSet FLEX_SKELETON \"{Boot}\"Cygnus:buildtools:Flex.skel\n-\tExport FLEX_SKELETON\n-\n-* Configuring\n-\n-Before you can build anything, you must configure.  You do this by\n-creating an directory where object files will be stored, setdirectory\n-to that directory and do a configure command:\n-\n-\t{Boot}Cygnus:src:mpw-configure --target <name> --cc <compiler> --srcdir {Boot}Cygnus:src: --prefix <whatever>\n-\n-If the source directory is not in your {Commands} list, then you must\n-supply a full pathname to mpw-configure, since mpw-configure invokes\n-itself after switching into each subdirectory.  Using a relative\n-pathname, even something like ':mpw-configure', will therefore not work.\n-\n-<name> must be a known target.  Valid ones include \"m68k-apple-macos\",\n-\"powerpc-apple-macos\", \"i386-unknown-go32\", \"mips-idt-ecoff\", and\n-\"sh-hitachi-hms\".  Not all target types are accepted for all of the\n-tools yet.\n-\n-<compiler> must be the name of the compiler to use.  It defaults to \"mpwc\".\n-\n-\t(m68k)\n-\tmpwc\tMPW C\n-\tsc68k\tSymantec C\n-\tmwc68k\tMetrowerks C (Codewarrior)\n-\tgcc68k\tGCC\n-\n-\t(powerpc)\n-\tppcc\tPPCC\n-\tmrc\tMacintosh on RisC (Mister C, aka(?) Frankenstein)\n-\tscppc\tSymantec C\n-\tmwcppc\tMetrowerks C (Codewarrior)\n-\tgccppc\tGCC\n-\n-Not all compilers will compile all tools equally well!  For m68k Macs,\n-MPW C has the best record so far (it has problems, but they can be\n-worked around), while for PowerMacs, CodeWarrior is the only compiler\n-that has successfully compiled everything into running code.\n-\n-<prefix> is the path that \"gcc\" will prepend when looking for tools\n-to execute.  GCC_EXEC_PREFIX overrides this value, so you need not\n-include it if you plan to use GCC_EXEC_PREFIX.\n-\n-As an example, here is the configure line that you could use to build\n-native PowerMac GCC:\n-\n-\"{Boot}\"Cygnus:src:mpw-configure --cc mwcppc --target powerpc-apple-macos --srcdir \"{Boot}\"Cygnus:src: --prefix \"{Boot}\"GNUTools:\n-\n-* Building\n-\n-If you use CodeWarrior, you *must* first set MWCIncludes to\n-{CIncludes}.  This is because you will be building MPW tools, and\n-their standard I/O works by making references to data that is part of\n-the MPW Shell, which means that the code must be compiled and linked\n-with macros that refer to that data, and those macros are in\n-{CIncludes}, not the default {MWCIncludes}.  Without this change, you\n-will encounter problems compiling libiberty/mpw.c, but tweaking that\n-file only masks the real problem, and does not fix it.\n-\n-The command\n-\n-\tmpw-build\n-\n-will build everything. Building will take over an hour on a Quadra 800\n-or PowerMac 8100/110, longer if the sources are on a shared volume.\n-\n-You may see some warnings; these are mostly likely benign, typically\n-disagreements about declarations of library and system functions.\n-\n-* Installing\n-\n-To install the just-built tools, use the command\n-\n-\tmpw-build install\n-\n-This part of the installation procedure just copies files to the\n-location specified at configure time by <prefix>, and, in some cases,\n-renames them from temporary internal names to their usual names. This\n-install process is *not* the same as what the Install script does;\n-Install can copy tools from the installation location chosen at\n-configuration time to a user-chosen place, and sets up a UserStartup\n-file.  Note that while the Install script is optional, the install\n-build action performs some tasks would be very hard to replicate\n-manually, so you should always do it before using the tools.\n-\n-* Known Problems With Using Various Compilers to Build\n-\n-Most versions of MPW C have problems with compiling GNU software.\n-\n-MPW C 3.2.x has preprocessing bugs that render it incapable of\n-compiling the BFD library, so it can't be used at all for building BFD.\n-\n-MPW C 3.3, 3.3.1, and 3.3.2 will spontaneously claim to have found\n-errors in the source code, but in fact the code is perfectly fine.  If\n-this happens, just set the working directory back to the top-level\n-objdir (where the configure command above was performed), and type\n-\"mpw-build all\" again.  If it goes on through the supposed error, then\n-you got one of the spurious errors.  A full build may require a number\n-of these restarts.\n-\n-MPW C 3.3.3 seems to work OK, at least with the aid of a number of\n-workarounds that are in the sources (look for #ifdef MPW_C).\n-\n-Versions of MPW Make earlier than 4.0d2 have exhibited bizarre behavior,\n-failure to substitute variables and the like.\n-\n-Metrowerks CW6 PPC linker (MWLinkPPC) seems to do bad things with memory\n-if the \"Modern Memory Manager\" is turned on (in the Memory control panel),\n-but works OK if it is turned off.\n-\n-Metrowerks CW6 loses bigtime compiling opcodes:ppc-opc.c, which has\n-some deeply nested macros.  (CW7 is OK.)  There is a way to patch the\n-file, by substituting constant values.  If you need to do this,\n-contact shebs@cygnus.com for details.\n-\n-<Gestalt.h> is missing from {CIncludes} in the MPW version that comes\n-with CW7.  You can just copy the one in CW7's {MWCIncludes}.\n-\n-CW8 and later have changes to headers and such that will require changes\n-to the source in order to be able to use them to rebuild.\n-\n-KNOWN BUGS\n-\n-The declarations for memcpy and memcmp in some versions of header files\n-may conflict with GCC's builtin definition.  Either use -fno-builtin\n-or ignore the warnings.\n-\n-This is not a bug, but - watch out for cr/nl translation!  For instance,\n-if config/mpw-mh-mpw is not properly translated because it has been\n-copied or updated separately, then everything will almost build, but\n-you will get puzzling error messages from make or the compiler.\n-\n-'/' or ' ' embedded in any device, directory, or file name may or may\n-not work.\n-\n-objcopy -O srec foo.o makes random output filenames.\n-\n-Mac-x-mips requires -mgas but Unix hosts don't.\n-\n-GDB will frequently require a '/' on the front of a device name in order\n-to recognize it as an absolute rather than a relative pathname.\n-\n-GDB doesn't seem to use the printer port correctly, although it tries.\n-\n-The cursor doesn't always spin as much as it should.  To get elaborate\n-statistics and warnings about spin rates, add this to UserStartup:\n-\n-\tset MEASURE_SPIN all\n-\texport MEASURE_SPIN"}]}