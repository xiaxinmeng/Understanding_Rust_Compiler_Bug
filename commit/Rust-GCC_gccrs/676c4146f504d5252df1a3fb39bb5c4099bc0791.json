{"sha": "676c4146f504d5252df1a3fb39bb5c4099bc0791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2YzQxNDZmNTA0ZDUyNTJkZjFhM2ZiMzliYjVjNDA5OWJjMDc5MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-08-18T17:46:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-08-18T17:46:57Z"}, "message": "PR libstdc++/81891 fix double-free in hashtable constructor\n\n\tPR libstdc++/81891\n\t* include/bits/hashtable.h (_Hashtable(_InputIterator, _InputIterator,\n\tsize_type, const _H1&, const _H2&, const _Hash&, const _Equal&,\n\tconst _ExtractKey&, const allocator_type&)): Let destructor do clean\n\tup if an exception is thrown.\n\t* testsuite/23_containers/unordered_map/cons/81891.cc: New.\n\nFrom-SVN: r251185", "tree": {"sha": "dfbe1a715b12079e6ed0e120937397676b8ccd3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfbe1a715b12079e6ed0e120937397676b8ccd3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676c4146f504d5252df1a3fb39bb5c4099bc0791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676c4146f504d5252df1a3fb39bb5c4099bc0791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676c4146f504d5252df1a3fb39bb5c4099bc0791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676c4146f504d5252df1a3fb39bb5c4099bc0791/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419d55e8df26ba17ee7514fa40669490d387d2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419d55e8df26ba17ee7514fa40669490d387d2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419d55e8df26ba17ee7514fa40669490d387d2c4"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "710cc9dd691b37fbea832263bfe945fb89e92beb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676c4146f504d5252df1a3fb39bb5c4099bc0791/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676c4146f504d5252df1a3fb39bb5c4099bc0791/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=676c4146f504d5252df1a3fb39bb5c4099bc0791", "patch": "@@ -1,3 +1,12 @@\n+2017-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/81891\n+\t* include/bits/hashtable.h (_Hashtable(_InputIterator, _InputIterator,\n+\tsize_type, const _H1&, const _H2&, const _Hash&, const _Equal&,\n+\tconst _ExtractKey&, const allocator_type&)): Let destructor do clean\n+\tup if an exception is thrown.\n+\t* testsuite/23_containers/unordered_map/cons/81891.cc: New.\n+\n 2017-08-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81808"}, {"sha": "e0806dc93a155e83d1a3020ff2fa8b172ddd490d", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676c4146f504d5252df1a3fb39bb5c4099bc0791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676c4146f504d5252df1a3fb39bb5c4099bc0791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=676c4146f504d5252df1a3fb39bb5c4099bc0791", "patch": "@@ -973,17 +973,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_bucket_count = __bkt_count;\n \t  }\n \n-\t__try\n-\t  {\n-\t    for (; __f != __l; ++__f)\n-\t      this->insert(*__f);\n-\t  }\n-\t__catch(...)\n-\t  {\n-\t    clear();\n-\t    _M_deallocate_buckets();\n-\t    __throw_exception_again;\n-\t  }\n+\tfor (; __f != __l; ++__f)\n+\t  this->insert(*__f);\n       }\n \n   template<typename _Key, typename _Value,"}, {"sha": "61807c0efd2f5b3dcaf665fc97e702ba4c312fbc", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/81891.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676c4146f504d5252df1a3fb39bb5c4099bc0791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2F81891.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676c4146f504d5252df1a3fb39bb5c4099bc0791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2F81891.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2F81891.cc?ref=676c4146f504d5252df1a3fb39bb5c4099bc0791", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct fails_on_copy {\n+  fails_on_copy() = default;\n+  fails_on_copy(const fails_on_copy&) { throw 0; };\n+};\n+\n+using value_type = std::pair<int, fails_on_copy>;\n+\n+void\n+test01()\n+{\n+  value_type p;\n+  try\n+  {\n+    std::unordered_map<int, fails_on_copy> umap(&p, &p + 1);\n+  }\n+  catch(...)\n+  { }\n+}\n+\n+void\n+test02()\n+{\n+  using Alloc = __gnu_test::tracker_allocator<value_type>;\n+  using std::hash;\n+  using std::equal_to;\n+\n+  value_type p;\n+  try\n+  {\n+    std::unordered_map<int, fails_on_copy, hash<int>, equal_to<int>, Alloc>\n+\tumap(&p, &p + 1);\n+  }\n+  catch(...)\n+  { }\n+\n+  using counter = __gnu_test::tracker_allocator_counter;\n+  VERIFY(counter::get_allocation_count() == counter::get_deallocation_count());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}