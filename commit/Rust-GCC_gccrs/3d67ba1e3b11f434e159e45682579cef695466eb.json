{"sha": "3d67ba1e3b11f434e159e45682579cef695466eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q2N2JhMWUzYjExZjQzNGUxNTllNDU2ODI1NzljZWY2OTU0NjZlYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-11-08T02:17:51Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-11-08T02:17:51Z"}, "message": "cppfiles.c (pch_open_file): New parameter 'invalid_pch', set it.\n\n2003-11-07  Geoffrey Keating  <geoffk@apple.com>\n\n\t* cppfiles.c (pch_open_file): New parameter 'invalid_pch', set it.\n\t(find_file_in_dir): Likewise.\n\t(_cpp_find_file): Print message if no header file is found\n\tbut an invalid PCH file was.\n\n2003-11-07  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/pch/warn-1.c: Allow for more helpful error message.\n\nFrom-SVN: r73353", "tree": {"sha": "98d74566858a9a43943bb8d246dfb37ca335e164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98d74566858a9a43943bb8d246dfb37ca335e164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d67ba1e3b11f434e159e45682579cef695466eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d67ba1e3b11f434e159e45682579cef695466eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d67ba1e3b11f434e159e45682579cef695466eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d67ba1e3b11f434e159e45682579cef695466eb/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30321c396e258cd2ed96e93b28a2ccd5b294b56f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30321c396e258cd2ed96e93b28a2ccd5b294b56f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30321c396e258cd2ed96e93b28a2ccd5b294b56f"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "8dfa0a82a6133d88e37cb583cdd653efdda229a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d67ba1e3b11f434e159e45682579cef695466eb", "patch": "@@ -1,3 +1,10 @@\n+2003-11-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* cppfiles.c (pch_open_file): New parameter 'invalid_pch', set it.\n+\t(find_file_in_dir): Likewise.\n+\t(_cpp_find_file): Print message if no header file is found\n+\tbut an invalid PCH file was.\n+\n 2003-11-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-typeck.c (pedantic_lvalue_warning): Deprecate compound"}, {"sha": "f455162be5193dde75d942363b1909c08ea17e39", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=3d67ba1e3b11f434e159e45682579cef695466eb", "patch": "@@ -154,8 +154,10 @@ struct file_hash_entry\n };\n \n static bool open_file (_cpp_file *file);\n-static bool pch_open_file (cpp_reader *pfile, _cpp_file *file);\n-static bool find_file_in_dir (cpp_reader *pfile, _cpp_file *file);\n+static bool pch_open_file (cpp_reader *pfile, _cpp_file *file,\n+\t\t\t   bool *invalid_pch);\n+static bool find_file_in_dir (cpp_reader *pfile, _cpp_file *file,\n+\t\t\t      bool *invalid_pch);\n static bool read_file_guts (cpp_reader *pfile, _cpp_file *file);\n static bool read_file (cpp_reader *pfile, _cpp_file *file);\n static bool should_stack_file (cpp_reader *, _cpp_file *file, bool import);\n@@ -234,9 +236,13 @@ open_file (_cpp_file *file)\n   return false;\n }\n \n-/* Temporary PCH intercept of opening a file.  */\n+/* Temporary PCH intercept of opening a file.  Try to find a PCH file\n+   based on FILE->name and FILE->dir, and test those found for\n+   validity using PFILE->cb.valid_pch.  Return true iff a valid file is\n+   found.  Set *INVALID_PCH if a PCH file is found but wasn't valid.  */\n+\n static bool\n-pch_open_file (cpp_reader *pfile, _cpp_file *file)\n+pch_open_file (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n {\n   static const char extension[] = \".gch\";\n   const char *path = file->path;\n@@ -285,6 +291,7 @@ pch_open_file (cpp_reader *pfile, _cpp_file *file)\n \t  closedir (pchdir);\n \t}\n       file->pch |= valid;\n+      *invalid_pch |= ! valid;\n     }\n \n   if (valid)\n@@ -297,9 +304,11 @@ pch_open_file (cpp_reader *pfile, _cpp_file *file)\n \n /* Try to open the path FILE->name appended to FILE->dir.  This is\n    where remap and PCH intercept the file lookup process.  Return true\n-   if the file was found, whether or not the open was successful.  */\n+   if the file was found, whether or not the open was successful.  \n+   Set *INVALID_PCH to true if a PCH file is found but wasn't valid.  */\n+\n static bool\n-find_file_in_dir (cpp_reader *pfile, _cpp_file *file)\n+find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n {\n   char *path;\n \n@@ -309,7 +318,7 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file)\n     path = append_file_to_dir (file->name, file->dir);\n \n   file->path = path;\n-  if (pch_open_file (pfile, file))\n+  if (pch_open_file (pfile, file, invalid_pch))\n     return true;\n \n   if (open_file (file))\n@@ -351,6 +360,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n {\n   struct file_hash_entry *entry, **hash_slot;\n   _cpp_file *file;\n+  bool invalid_pch = false;\n \n   /* Ensure we get no confusion between cached files and directories.  */\n   if (start_dir == NULL)\n@@ -369,13 +379,21 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n   /* Try each path in the include chain.  */\n   for (; !fake ;)\n     {\n-      if (find_file_in_dir (pfile, file))\n+      if (find_file_in_dir (pfile, file, &invalid_pch))\n \tbreak;\n \n       file->dir = file->dir->next;\n       if (file->dir == NULL)\n \t{\n \t  open_file_failed (pfile, file);\n+\t  if (invalid_pch)\n+\t    {\n+\t      cpp_error (pfile, CPP_DL_ERROR, \n+\t       \"One or more PCH files were found, but they were invalid.\");\n+\t      if (! cpp_get_options (pfile)->warn_invalid_pch)\n+\t\tcpp_error (pfile, CPP_DL_ERROR, \n+\t\t\t   \"Use -Winvalid-pch for more information.\");\n+\t    }\n \t  break;\n \t}\n "}, {"sha": "c19b30ad54a7fc6dbbc093da8c2f4122043927eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d67ba1e3b11f434e159e45682579cef695466eb", "patch": "@@ -1,3 +1,7 @@\n+2003-11-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/pch/warn-1.c: Allow for more helpful error message.\n+\n 2003-11-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/compound-lvalue-1.c: New test."}, {"sha": "6e895818c63b222dab76b334996e12f598465437", "filename": "gcc/testsuite/gcc.dg/pch/warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fwarn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d67ba1e3b11f434e159e45682579cef695466eb/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fwarn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fwarn-1.c?ref=3d67ba1e3b11f434e159e45682579cef695466eb", "patch": "@@ -2,7 +2,7 @@\n \n #define DEFINED_VALUE 3\n \n-#include \"warn-1.h\"/* { dg-error \"not used because `DEFINED_VALUE' is defined|No such file\" } */\n+#include \"warn-1.h\"/* { dg-error \"not used because `DEFINED_VALUE' is defined|No such file|they were invalid\" } */\n \n int main(void) \n {"}]}