{"sha": "e922f9785cea44a5923598d4e7a72352a42df737", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyMmY5Nzg1Y2VhNDRhNTkyMzU5OGQ0ZTdhNzIzNTJhNDJkZjczNw==", "commit": {"author": {"name": "Eli Zaretskii", "email": "eliz@is.elta.co.il", "date": "2001-09-27T19:55:37Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-09-27T19:55:37Z"}, "message": "libiberty.texi: (Top level): Add syncodeindex pg.\n\n* libiberty.texi: (Top level): Add syncodeindex pg.  Add\n@dircategory and @direntry directives.  Add @finalout.\n(many nodes): Lose the next,prev,up pointers on the @nide line.\n(Using, Supplemental Functions, Replacement Functions): Fix\nmarkup.\n(Functions): Move around, to allow makeinfo to build the manual\nwithout next,prev,up pointers in thye node lines.\n(Licenses): Fix typos.\n\n* index.c, rindex.c, strchr.c, strerror.c, strrchr.c, strstr.c,\nstrtol.c, xatexit.c, xexit.c, xmalloc.c: Fix spelling and markup.\n* functions.texi: Regenerate.\n\n* copying-lib.texi: Lose the next,prev,up pointers on the @node\nline.\n\nFrom-SVN: r45847", "tree": {"sha": "480abcb54fa75ec1846629eeafcf764889c4f370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480abcb54fa75ec1846629eeafcf764889c4f370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e922f9785cea44a5923598d4e7a72352a42df737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e922f9785cea44a5923598d4e7a72352a42df737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e922f9785cea44a5923598d4e7a72352a42df737", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e922f9785cea44a5923598d4e7a72352a42df737/comments", "author": null, "committer": null, "parents": [{"sha": "ae9092da9647424668486f76d322bbc8351857c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9092da9647424668486f76d322bbc8351857c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9092da9647424668486f76d322bbc8351857c4"}], "stats": {"total": 134, "additions": 81, "deletions": 53}, "files": [{"sha": "33a860ed6370ffa0291e35c913d1b2cb22a3ce47", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -1,3 +1,21 @@\n+2001-09-27  Eli Zaretskii  <eliz@is.elta.co.il>\n+\n+\t* libiberty.texi: (Top level): Add syncodeindex pg.  Add\n+\t@dircategory and @direntry directives.  Add @finalout.\n+\t(many nodes): Lose the next,prev,up pointers on the @nide line.\n+\t(Using, Supplemental Functions, Replacement Functions): Fix\n+\tmarkup.\n+\t(Functions): Move around, to allow makeinfo to build the manual\n+\twithout next,prev,up pointers in thye node lines.\n+\t(Licenses): Fix typos.\n+\n+\t* index.c, rindex.c, strchr.c, strerror.c, strrchr.c, strstr.c,\n+\tstrtol.c, xatexit.c, xexit.c, xmalloc.c: Fix spelling and markup.\n+\t* functions.texi: Regenerate.\n+\n+\t* copying-lib.texi: Lose the next,prev,up pointers on the @node\n+\tline.\n+\n 2001-09-27  DJ Delorie  <dj@redhat.com>\n \n \t* configure.in: Don't use in-tree texinfo, because libiberty must"}, {"sha": "940f70e0d63157495c949c9ab254bffb8dd0316e", "filename": "libiberty/copying-lib.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fcopying-lib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fcopying-lib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcopying-lib.texi?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -1,4 +1,4 @@\n-@node Library Copying,,,Licenses\n+@node Library Copying\n @appendixsec GNU LESSER GENERAL PUBLIC LICENSE\n \n @cindex LGPL, Lesser General Public License"}, {"sha": "c00d047dfa8054b3b047315b530a1add2f9a525a", "filename": "libiberty/functions.texi", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -147,7 +147,7 @@ between calls to @code{getpwd}.\n @c index.c:5\n @deftypefn Supplemental char* index (char *@var{s}, int @var{c})\n \n-Returns a pointer to the first occurance of the character @var{c} in\n+Returns a pointer to the first occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  The use of @code{index} is\n deprecated in new programs in favor of @code{strchr}.\n \n@@ -222,7 +222,7 @@ exists, it is removed.\n @c rindex.c:5\n @deftypefn Supplemental char* rindex (const char *@var{s}, int @var{c})\n \n-Returns a pointer to the last occurance of the character @var{c} in\n+Returns a pointer to the last occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  The use of @code{rindex} is\n deprecated in new programs in favor of @code{strrchr}.\n \n@@ -259,7 +259,7 @@ A case-insensitive @code{strcmp}.\n @c strchr.c:6\n @deftypefn Supplemental char* strchr (const char *@var{s}, int @var{c})\n \n-Returns a pointer to the first occurance of the character @var{c} in\n+Returns a pointer to the first occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  If @var{c} is itself the\n null character, the results are undefined.\n \n@@ -282,14 +282,14 @@ symbolic name of that error number, as found in @file{errno.h}.\n \n If the supplied error number is within the valid range of indices for\n symbolic names, but no name is available for the particular error\n-number, then returns the string @samp{\"Error NUM\"}, where NUM is the\n-error number.\n+number, then returns the string @samp{\"Error @var{num}\"}, where @var{num}\n+is the error number.\n \n If the supplied error number is not within the range of valid\n indices, then returns NULL.\n \n The contents of the location pointed to are only guaranteed to be\n-valid until the next call to strerrno.\n+valid until the next call to @code{strerrno}.\n \n @end deftypefn\n \n@@ -303,8 +303,8 @@ strings will be the same as the ones used by @code{perror}.\n \n If the supplied error number is within the valid range of indices for\n the @code{sys_errlist}, but no message is available for the particular\n-error number, then returns the string @samp{\"Error NUM\"}, where NUM is\n-the error number.\n+error number, then returns the string @samp{\"Error @var{num}\"}, where\n+@var{num} is the error number.\n \n If the supplied error number is not a valid index into\n @code{sys_errlist}, returns NULL.\n@@ -332,7 +332,7 @@ Compares the first @var{n} bytes of two strings, returning a value as\n @c strrchr.c:6\n @deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n \n-Returns a pointer to the last occurance of the character @var{c} in\n+Returns a pointer to the last occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  If @var{c} is itself the\n null character, the results are undefined.\n \n@@ -342,8 +342,8 @@ null character, the results are undefined.\n @deftypefn Supplemental char* strstr (const char *@var{string}, const char *@var{sub})\n \n This function searches for the substring @var{sub} in the string\n-@var{string}, not including the terminating NUL characters.  A pointer\n-to the first occurance of @var{sub} is returned, or NULL if the\n+@var{string}, not including the terminating null characters.  A pointer\n+to the first occurrence of @var{sub} is returned, or NULL if the\n substring is absent.  If @var{sub} points to a string with zero\n length, the function returns @var{string}.\n \n@@ -378,7 +378,7 @@ between 2 and 36 inclusive, or be the special value 0.  If @var{base}\n is 0, @code{strtol} will look for the prefixes @code{0} and @code{0x}\n to indicate bases 8 and 16, respectively, else default to base 10.\n When the base is 16 (either explicitly or implicitly), a prefix of\n-@code{0x} is allowed.  The handling of endptr is as that of\n+@code{0x} is allowed.  The handling of @var{endptr} is as that of\n @code{strtod} above.\n \n @end deftypefn\n@@ -428,13 +428,13 @@ does the return value.  The third argument is unused in @libib{}.\n @deftypefun int xatexit (void (*@var{fn}) (void))\n \n Behaves as the standard @code{atexit} function, but with no limit on\n-the number of registered funtions.  Returns 0 on success, or -1 on\n+the number of registered functions.  Returns 0 on success, or -1 on\n failure.  If you use @code{xatexit} to register functions, you must use\n @code{xexit} to terminate your program.\n \n @end deftypefun\n \n-@c xmalloc.c:37\n+@c xmalloc.c:38\n @deftypefn Replacement void* xcalloc (size_t, size_t)\n \n Allocate memory without fail, and set it to zero.  This routine functions\n@@ -447,7 +447,7 @@ cannot be found.\n @deftypefn Replacement void xexit (int @var{code})\n \n Terminates the program.  If any functions have been registered with\n-the @code{xatexit} rpelacement function, they will be called first.\n+the @code{xatexit} replacement function, they will be called first.\n Termination is handled via the system's normal @code{exit} call.\n \n @end deftypefn\n@@ -456,13 +456,14 @@ Termination is handled via the system's normal @code{exit} call.\n @deftypefn Replacement void* xmalloc (size_t)\n \n Allocate memory without fail.  If @code{malloc} fails, this will print\n-a message to stderr (using the name set by @code{xmalloc_set_program_name},\n+a message to @code{stderr} (using the name set by\n+@code{xmalloc_set_program_name},\n if any) and then call @code{xexit}.  Note that it is therefore safe for\n a program to contain @code{#define malloc xmalloc} in its source.\n \n @end deftypefn\n \n-@c xmalloc.c:52\n+@c xmalloc.c:53\n @deftypefn Replacement void xmalloc_failed (size_t)\n \n This function is not meant to be called by client code, and is listed\n@@ -471,7 +472,7 @@ function will be called to print an error message and terminate execution.\n \n @end deftypefn\n \n-@c xmalloc.c:45\n+@c xmalloc.c:46\n @deftypefn Replacement void xmalloc_set_program_name (const char *@var{name})\n \n You can use this to set the name of the program used by\n@@ -489,7 +490,7 @@ allocated, the remaining memory is zeroed.\n \n @end deftypefn\n \n-@c xmalloc.c:31\n+@c xmalloc.c:32\n @deftypefn Replacement void* xrealloc (void*, size_t)\n Reallocate memory without fail.  This routine functions like @code{realloc},\n but will behave the same as @code{xmalloc} if memory cannot be found."}, {"sha": "55a4acc17c2fa63a83672f6486414213bfb5afe5", "filename": "libiberty/index.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Findex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Findex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Findex.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -4,7 +4,7 @@\n \n @deftypefn Supplemental char* index (char *@var{s}, int @var{c})\n \n-Returns a pointer to the first occurance of the character @var{c} in\n+Returns a pointer to the first occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  The use of @code{index} is\n deprecated in new programs in favor of @code{strchr}.\n "}, {"sha": "a13bf2c4e1723fd017a4793bb457060d29875532", "filename": "libiberty/libiberty.texi", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Flibiberty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Flibiberty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flibiberty.texi?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -6,6 +6,16 @@\n \n @syncodeindex fn cp\n @syncodeindex vr cp\n+@syncodeindex pg cp\n+\n+@finalout\n+@c %**end of header\n+ \n+@dircategory GNU libraries\n+@direntry\n+* Libiberty: (libiberty).          Library of utility functions which\n+                                   are missing or broken on some systems.\n+@end direntry\n \n @macro libib\n @code{libiberty}\n@@ -85,7 +95,7 @@ This edition accompanies GCC 3, September 2001.\n * Index::              Index of functions and categories.\n @end menu\n \n-@node Using,Overview,Top,Top\n+@node Using\n @chapter Using\n @cindex using libiberty\n @cindex libiberty usage\n@@ -104,7 +114,7 @@ elsewhere on the system.\n \n Passing @option{--enable-install-libiberty} to the @command{configure}\n script when building @libib{} causes the header files and archive library\n-to be installed when @samp{make install} is run.  This option also takes\n+to be installed when @kbd{make install} is run.  This option also takes\n an (optional) argument to specify the installation location, in the same\n manner as @option{--prefix}.\n \n@@ -121,7 +131,7 @@ necessary in the function descriptions.)  At link time, you will need to\n add @option{-liberty} to your link command invocation.\n \n \n-@node Overview,Functions,Using,Top\n+@node Overview\n @chapter Overview\n \n Functions contained in @libib{} can be divided into three general categories.\n@@ -138,7 +148,7 @@ Functions contained in @libib{} can be divided into three general categories.\n                                  or safety wrappers around existing code.\n @end menu\n \n-@node Supplemental Functions,Replacement Functions,,Overview\n+@node Supplemental Functions\n @section Supplemental Functions\n @cindex supplemental functions\n @cindex functions, supplemental\n@@ -159,14 +169,14 @@ family of systems.\n Many such functions are provided in @libib{}.  They are quickly\n listed here with little description, as systems which lack them\n become less and less common.  Each function @var{foo} is implemented\n-in @file{foo.c} but not declared in any @libib{} header file; more\n+in @file{@var{foo}.c} but not declared in any @libib{} header file; more\n comments and caveats for each function's implementation are often\n available in the source file.  Generally, the function can simply\n be declared as @code{extern}.\n \n \n \n-@node Replacement Functions,Extensions,Supplemental Functions,Overview\n+@node Replacement Functions\n @section Replacement Functions\n @cindex replacement functions\n @cindex functions, replacement\n@@ -196,7 +206,7 @@ functions may call one another.\n @subsection Memory Allocation\n @cindex memory allocation\n \n-The functions beginning with the letter `x' are wrappers around\n+The functions beginning with the letter @samp{x} are wrappers around\n standard functions; the functions provided by the system environment\n are called and their results checked before the results are passed back\n to client code.  If the standard functions fail, these wrappers will\n@@ -223,7 +233,7 @@ contains a good deal of documentation for these functions.\n @c signal stuff\n \n \n-@node Extensions,,Replacement Functions,Overview\n+@node Extensions\n @section Extensions\n @cindex extensions\n @cindex functions, extension\n@@ -238,32 +248,30 @@ central location from which to use, maintain, and distribute them.\n * Obstacks::                     Stacks of arbitrary objects.\n @end menu\n \n-\n-@node Functions,Obstacks,Overview,Top\n-@chapter Function, Variable, and Macro Listing.\n-@include functions.texi\n-\n @c This is generated from the glibc manual using a make-obstacks-texi.sh\n @c script of Phil's.  Hope it's accurate.\n @include obstacks.texi\n \n+@node Functions\n+@chapter Function, Variable, and Macro Listing.\n+@include functions.texi\n \n-@node Licenses,Index,Obstacks,Top\n+@node Licenses\n @appendix Licenses\n \n @menu\n \n-* Library Copying::   The GNU Libary General Public License\n+* Library Copying::   The GNU Library General Public License\n * BSD::               Regents of the University of California\n \n @end menu\n \n @c This takes care of Library Copying.  It is the copying-lib.texi from the\n-@c GNU website, with its @node line altered to make makeinfo shut up.\n+@c GNU web site, with its @node line altered to make makeinfo shut up.\n @include copying-lib.texi\n \n @page\n-@node BSD,,,Licenses\n+@node BSD\n @appendixsec BSD\n \n Copyright @copyright{} 1990 Regents of the University of California.\n@@ -306,7 +314,7 @@ LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n SUCH DAMAGE.\n \n-@node    Index,,Licenses,Top\n+@node    Index\n @unnumbered Index\n \n @printindex cp"}, {"sha": "9c25dff4dcc4579b99b29543c5e1835cab9fd29f", "filename": "libiberty/rindex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Frindex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Frindex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frindex.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -4,7 +4,7 @@\n \n @deftypefn Supplemental char* rindex (const char *@var{s}, int @var{c})\n \n-Returns a pointer to the last occurance of the character @var{c} in\n+Returns a pointer to the last occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  The use of @code{rindex} is\n deprecated in new programs in favor of @code{strrchr}.\n "}, {"sha": "6f327f2a2418976e17ebbf8eb19caa483583b90f", "filename": "libiberty/strchr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrchr.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -5,7 +5,7 @@\n \n @deftypefn Supplemental char* strchr (const char *@var{s}, int @var{c})\n \n-Returns a pointer to the first occurance of the character @var{c} in\n+Returns a pointer to the first occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  If @var{c} is itself the\n null character, the results are undefined.\n "}, {"sha": "6e42f9ec556768b613ea77090ccd3e1b5ce2e74b", "filename": "libiberty/strerror.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrerror.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -608,8 +608,8 @@ strings will be the same as the ones used by @code{perror}.\n \n If the supplied error number is within the valid range of indices for\n the @code{sys_errlist}, but no message is available for the particular\n-error number, then returns the string @samp{\"Error NUM\"}, where NUM is\n-the error number.\n+error number, then returns the string @samp{\"Error @var{num}\"}, where\n+@var{num} is the error number.\n \n If the supplied error number is not a valid index into\n @code{sys_errlist}, returns NULL.\n@@ -675,14 +675,14 @@ symbolic name of that error number, as found in @file{errno.h}.\n \n If the supplied error number is within the valid range of indices for\n symbolic names, but no name is available for the particular error\n-number, then returns the string @samp{\"Error NUM\"}, where NUM is the\n-error number.\n+number, then returns the string @samp{\"Error @var{num}\"}, where @var{num}\n+is the error number.\n \n If the supplied error number is not within the range of valid\n indices, then returns NULL.\n \n The contents of the location pointed to are only guaranteed to be\n-valid until the next call to strerrno.\n+valid until the next call to @code{strerrno}.\n \n @end deftypefn\n "}, {"sha": "9dc31f2a1597c8d4bead8d4e3979a8650173b24e", "filename": "libiberty/strrchr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrrchr.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -5,7 +5,7 @@\n \n @deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n \n-Returns a pointer to the last occurance of the character @var{c} in\n+Returns a pointer to the last occurrence of the character @var{c} in\n the string @var{s}, or NULL if not found.  If @var{c} is itself the\n null character, the results are undefined.\n "}, {"sha": "ffe1d10fc9ef5f6e241cc7b8be1344943ef88a33", "filename": "libiberty/strstr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -6,8 +6,8 @@\n @deftypefn Supplemental char* strstr (const char *@var{string}, const char *@var{sub})\n \n This function searches for the substring @var{sub} in the string\n-@var{string}, not including the terminating NUL characters.  A pointer\n-to the first occurance of @var{sub} is returned, or NULL if the\n+@var{string}, not including the terminating null characters.  A pointer\n+to the first occurrence of @var{sub} is returned, or NULL if the\n substring is absent.  If @var{sub} points to a string with zero\n length, the function returns @var{string}.\n "}, {"sha": "fa84a2e8d2dc4f42dd2aaf8dfa05d30683eca8d6", "filename": "libiberty/strtol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrtol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fstrtol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtol.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -38,7 +38,7 @@ between 2 and 36 inclusive, or be the special value 0.  If @var{base}\n is 0, @code{strtol} will look for the prefixes @code{0} and @code{0x}\n to indicate bases 8 and 16, respectively, else default to base 10.\n When the base is 16 (either explicitly or implicitly), a prefix of\n-@code{0x} is allowed.  The handling of endptr is as that of\n+@code{0x} is allowed.  The handling of @var{endptr} is as that of\n @code{strtod} above.\n \n @end deftypefn"}, {"sha": "6d983a894f4458667f9a3ab46cffa1032cc7f2b5", "filename": "libiberty/xatexit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fxatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fxatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxatexit.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -11,7 +11,7 @@\n @deftypefun int xatexit (void (*@var{fn}) (void))\n \n Behaves as the standard @code{atexit} function, but with no limit on\n-the number of registered funtions.  Returns 0 on success, or -1 on\n+the number of registered functions.  Returns 0 on success, or -1 on\n failure.  If you use @code{xatexit} to register functions, you must use\n @code{xexit} to terminate your program.\n "}, {"sha": "a65690f09c306aca730a2aca736e0b960c329c57", "filename": "libiberty/xexit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fxexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fxexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxexit.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n @deftypefn Replacement void xexit (int @var{code})\n \n Terminates the program.  If any functions have been registered with\n-the @code{xatexit} rpelacement function, they will be called first.\n+the @code{xatexit} replacement function, they will be called first.\n Termination is handled via the system's normal @code{exit} call.\n \n @end deftypefn"}, {"sha": "3fc23a91c7a457bc31a62b9da31e9fcf2a276ae3", "filename": "libiberty/xmalloc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fxmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922f9785cea44a5923598d4e7a72352a42df737/libiberty%2Fxmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmalloc.c?ref=e922f9785cea44a5923598d4e7a72352a42df737", "patch": "@@ -22,7 +22,8 @@ Boston, MA 02111-1307, USA.  */\n @deftypefn Replacement void* xmalloc (size_t)\n \n Allocate memory without fail.  If @code{malloc} fails, this will print\n-a message to stderr (using the name set by @code{xmalloc_set_program_name},\n+a message to @code{stderr} (using the name set by\n+@code{xmalloc_set_program_name},\n if any) and then call @code{xexit}.  Note that it is therefore safe for\n a program to contain @code{#define malloc xmalloc} in its source.\n "}]}