{"sha": "23668cf768bd439b04610ead2d124fcaa73f1828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2NjhjZjc2OGJkNDM5YjA0NjEwZWFkMmQxMjRmY2FhNzNmMTgyOA==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "ctang@marvell.com", "date": "2008-06-19T02:51:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2008-06-19T02:51:26Z"}, "message": "arm-protos.h (arm_return_in_memory): Remove public arm_return_in_memory() prototype.\n\n\t* arm-protos.h (arm_return_in_memory): Remove public\n\tarm_return_in_memory() prototype.\n\t* arm.c (arm_return_in_memory): Add static prototype, add target\n\thook macro, change definition and comments.\n\t* arm.h (TARGET_RETURN_IN_MEMORY): Remove.\n\nFrom-SVN: r136934", "tree": {"sha": "b5feecc404af0602baae7b2254fc222b5cb468df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5feecc404af0602baae7b2254fc222b5cb468df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23668cf768bd439b04610ead2d124fcaa73f1828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23668cf768bd439b04610ead2d124fcaa73f1828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23668cf768bd439b04610ead2d124fcaa73f1828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23668cf768bd439b04610ead2d124fcaa73f1828/comments", "author": null, "committer": null, "parents": [{"sha": "7292b8e4bac5eaf830e81b38be439719ecee8cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7292b8e4bac5eaf830e81b38be439719ecee8cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7292b8e4bac5eaf830e81b38be439719ecee8cf3"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "e5bbef9740dba95e92de82574e5428657d174976", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23668cf768bd439b04610ead2d124fcaa73f1828", "patch": "@@ -1,3 +1,11 @@\n+2008-06-16  Chung-Lin Tang  <ctang@marvell.com>\n+\n+\t* arm-protos.h (arm_return_in_memory): Remove public\n+\tarm_return_in_memory() prototype.\n+\t* arm.c (arm_return_in_memory): Add static prototype, add target\n+\thook macro, change definition and comments.\n+\t* arm.h (TARGET_RETURN_IN_MEMORY): Remove.\n+\n 2008-06-19  Ben Elliston  <bje@au.ibm.com>\n \n \t* dfp.h, dfp.c, config/dfp-bit.h, config/dfp-bit.c, real.h,"}, {"sha": "a2963494c480750bf00c5f679f71d2cbdb950b86", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=23668cf768bd439b04610ead2d124fcaa73f1828", "patch": "@@ -42,9 +42,6 @@ extern unsigned int arm_dbx_register_number (unsigned int);\n extern void arm_output_fn_unwind (FILE *, bool);\n   \n \n-#ifdef TREE_CODE\n-extern bool arm_return_in_memory (const_tree, const_tree);\n-#endif\n #ifdef RTX_CODE\n extern bool arm_vector_mode_supported_p (enum machine_mode);\n extern int arm_hard_regno_mode_ok (unsigned int, enum machine_mode);"}, {"sha": "c7f223a6b6302c39bb112090db7664e59327d49b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=23668cf768bd439b04610ead2d124fcaa73f1828", "patch": "@@ -166,6 +166,7 @@ static bool arm_default_short_enums (void);\n static bool arm_align_anon_bitfield (void);\n static bool arm_return_in_msb (const_tree);\n static bool arm_must_pass_in_stack (enum machine_mode, const_tree);\n+static bool arm_return_in_memory (const_tree, const_tree);\n #ifdef TARGET_UNWIND_INFO\n static void arm_unwind_emit (FILE *, rtx);\n static bool arm_output_ttype (rtx);\n@@ -333,6 +334,9 @@ static bool arm_allocate_stack_slots_for_args (void);\n #undef TARGET_RETURN_IN_MSB\n #define TARGET_RETURN_IN_MSB arm_return_in_msb\n \n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY arm_return_in_memory\n+\n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK arm_must_pass_in_stack\n \n@@ -2747,9 +2751,9 @@ arm_apply_result_size (void)\n }\n \n /* Decide whether a type should be returned in memory (true)\n-   or in a register (false).  This is called by the macro\n+   or in a register (false).  This is called as the target hook\n    TARGET_RETURN_IN_MEMORY.  */\n-bool\n+static bool\n arm_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   HOST_WIDE_INT size;"}, {"sha": "9f662f312977caeee7078cb22506a3799bf1a6d4", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23668cf768bd439b04610ead2d124fcaa73f1828/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=23668cf768bd439b04610ead2d124fcaa73f1828", "patch": "@@ -1478,11 +1478,6 @@ do {\t\t\t\t\t\t\t\t\t      \\\n    registers.  */\n #define APPLY_RESULT_SIZE arm_apply_result_size()\n \n-/* How large values are returned */\n-/* A C expression which can inhibit the returning of certain function values\n-   in registers, based on the type of value.  */\n-#define TARGET_RETURN_IN_MEMORY arm_return_in_memory\n-\n /* Define DEFAULT_PCC_STRUCT_RETURN to 1 if all structure and union return\n    values must be in memory.  On the ARM, they need only do so if larger\n    than a word, or if they contain elements offset from zero in the struct.  */"}]}