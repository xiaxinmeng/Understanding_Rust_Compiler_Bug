{"sha": "930aeef3f3963cd1660a217e8f43ce04efd5d678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMwYWVlZjNmMzk2M2NkMTY2MGEyMTdlOGY0M2NlMDRlZmQ1ZDY3OA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-02-19T00:40:42Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-02-19T00:40:42Z"}, "message": "reload1.c (eliminate_regs, case MINUS): Canonicalize (minus (plus reg const) reg) to (plus (minus reg reg) const).\n\n\t* reload1.c (eliminate_regs, case MINUS): Canonicalize\n\t(minus (plus reg const) reg) to (plus (minus reg reg) const).\nBack out this patch.\n\nFrom-SVN: r13664", "tree": {"sha": "f8af545a13cbc101ca6967d8cbb9534b2e1823ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8af545a13cbc101ca6967d8cbb9534b2e1823ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/930aeef3f3963cd1660a217e8f43ce04efd5d678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930aeef3f3963cd1660a217e8f43ce04efd5d678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930aeef3f3963cd1660a217e8f43ce04efd5d678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930aeef3f3963cd1660a217e8f43ce04efd5d678/comments", "author": null, "committer": null, "parents": [{"sha": "f302eea3892031ac184e7712e25d61ae7b59609d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f302eea3892031ac184e7712e25d61ae7b59609d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f302eea3892031ac184e7712e25d61ae7b59609d"}], "stats": {"total": 25, "additions": 2, "deletions": 23}, "files": [{"sha": "591f489451312cdb39176c41a81a5b5cb5eaae44", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930aeef3f3963cd1660a217e8f43ce04efd5d678/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930aeef3f3963cd1660a217e8f43ce04efd5d678/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=930aeef3f3963cd1660a217e8f43ce04efd5d678", "patch": "@@ -2873,7 +2873,7 @@ eliminate_regs (x, mem_mode, insn)\n \t context.\n \n \t If we have (plus (eliminable) (reg)), we want to produce\n-\t (plus (plus (replacement) (reg)) (const)).  If this was part of a\n+\t (plus (plus (replacement) (reg) (const))).  If this was part of a\n \t normal add insn, (plus (replacement) (reg)) will be pushed as a\n \t reload.  This is the desired action.  */\n \n@@ -2912,28 +2912,6 @@ eliminate_regs (x, mem_mode, insn)\n       }\n       return x;\n \n-    case MINUS:\n-      /* If we have (minus (eliminable) (reg)), we want to produce\n-\t (plus (minus (replacement) (reg)) (const)).  The main reason being\n-\t to be consistent with what is done for PLUS.  find_reloads_address\n-\t assumes that we do this.  */\n-      {\n-\trtx new0 = eliminate_regs (XEXP (x, 0), mem_mode, insn);\n-\trtx new1 = eliminate_regs (XEXP (x, 1), mem_mode, insn);\n-\n-\tif (new0 != XEXP (x, 0) || new1 != XEXP (x, 1))\n-\t  {\n-\t    if (GET_CODE (new0) == PLUS)\n-\t      return gen_rtx (PLUS, GET_MODE (x),\n-\t\t\t      gen_rtx (MINUS, GET_MODE (x),\n-\t\t\t\t       XEXP (new0, 0), new1),\n-\t\t\t      XEXP (new0, 1));\n-\t    else\n-\t      return gen_rtx (MINUS, GET_MODE (x), new0, new1);\n-\t  }\n-      }\n-      return x;\n-\n     case MULT:\n       /* If this is the product of an eliminable register and a \n \t constant, apply the distribute law and move the constant out\n@@ -2962,6 +2940,7 @@ eliminate_regs (x, mem_mode, insn)\n \n     case CALL:\n     case COMPARE:\n+    case MINUS:\n     case DIV:      case UDIV:\n     case MOD:      case UMOD:\n     case AND:      case IOR:      case XOR:"}]}