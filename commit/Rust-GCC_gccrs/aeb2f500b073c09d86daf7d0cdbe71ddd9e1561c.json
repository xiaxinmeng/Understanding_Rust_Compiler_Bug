{"sha": "aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViMmY1MDBiMDczYzA5ZDg2ZGFmN2QwY2RiZTcxZGRkOWUxNTYxYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-06-22T12:02:52Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-06-22T12:02:52Z"}, "message": "Fix irix6 -O3 -funroll-all-loops bootstrap failure reported by Kaveh Ghazi.\n\n\t* gcse.c (add_label_notes): New function.\n\t(pre_insert_insn): Call it.\n\t* unroll.c (unroll_loop): Look for insns with a REG_LABEL note, and\n\tpass the label to set_label_in_map.\n\nFrom-SVN: r20658", "tree": {"sha": "fcfeac16601900f555f6e18a00c09d9d28703514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcfeac16601900f555f6e18a00c09d9d28703514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c/comments", "author": null, "committer": null, "parents": [{"sha": "efef624b6f02ae9bacb45069f79d88201b847f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efef624b6f02ae9bacb45069f79d88201b847f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efef624b6f02ae9bacb45069f79d88201b847f7c"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "c539488fcf216abe04f799a9aec73f8a4339eb25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c", "patch": "@@ -1,3 +1,10 @@\n+Mon Jun 22 12:01:48 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* gcse.c (add_label_notes): New function.\n+\t(pre_insert_insn): Call it.\n+\t* unroll.c (unroll_loop): Look for insns with a REG_LABEL note, and\n+\tpass the label to set_label_in_map.\n+\n Mon Jun 22 19:01:14 1998  Dave Love  <d.love@dl.ac.uk>\n \n \t* Makefile.in (install-info): Fix typpo in previous change."}, {"sha": "8e73b19c25bd0c10463e576dc22959af3beba483", "filename": "gcc/gcse.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c", "patch": "@@ -641,6 +641,8 @@ static void pre_insert_copies         PROTO ((void));\n static int pre_delete                 PROTO ((void));\n static int pre_gcse                   PROTO ((void));\n static int one_pre_gcse_pass          PROTO ((rtx, int));\n+\n+static void add_label_notes\t      PROTO ((rtx, rtx));\n \f\n /* Entry point for global common subexpression elimination.\n    F is the first instruction in the function.  */\n@@ -4354,6 +4356,7 @@ pre_insert_insn (expr, bb)\n #endif\n       /* FIXME: What if something in cc0/jump uses value set in new insn?  */\n       new_insn = emit_insn_before (pat, insn);\n+      add_label_notes (SET_SRC (pat), new_insn);\n       if (BLOCK_HEAD (bb) == insn)\n \tBLOCK_HEAD (bb) = new_insn;\n       /* Keep block number table up to date.  */\n@@ -4364,6 +4367,7 @@ pre_insert_insn (expr, bb)\n   else\n     {\n       new_insn = emit_insn_after (pat, insn);\n+      add_label_notes (SET_SRC (pat), new_insn);\n       BLOCK_END (bb) = new_insn;\n       /* Keep block number table up to date.  */\n       set_block_num (new_insn, bb);\n@@ -4695,3 +4699,50 @@ one_pre_gcse_pass (f, pass)\n \n   return changed;\n }\n+\f\n+/* If X contains any LABEL_REF's, add REG_LABEL notes for them to INSN.\n+   We have to add REG_LABEL notes, because the following loop optimization\n+   pass requires them.  */\n+\n+/* ??? This is very similar to the loop.c add_label_notes function.  We\n+   could probably share code here.  */\n+\n+/* ??? If there was a jump optimization pass after gcse and before loop,\n+   then we would not need to do this here, because jump would add the\n+   necessary REG_LABEL notes.  */\n+\n+static void\n+add_label_notes (x, insn)\n+     rtx x;\n+     rtx insn;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  int i, j;\n+  char *fmt;\n+\n+  if (code == LABEL_REF && !LABEL_REF_NONLOCAL_P (x))\n+    {\n+      rtx next = next_real_insn (XEXP (x, 0));\n+\n+      /* Don't record labels that refer to dispatch tables.\n+\t This is not necessary, since the tablejump references the same label.\n+\t And if we did record them, flow.c would make worse code.  */\n+      if (next == 0\n+\t  || ! (GET_CODE (next) == JUMP_INSN\n+\t\t&& (GET_CODE (PATTERN (next)) == ADDR_VEC\n+\t\t    || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC)))\n+\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_LABEL, XEXP (x, 0),\n+\t\t\t\t\t      REG_NOTES (insn));\n+      return;\n+    }\n+\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'e')\n+\tadd_label_notes (XEXP (x, i), insn);\n+      else if (fmt[i] == 'E')\n+\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n+\t  add_label_notes (XVECEXP (x, i, j), insn);\n+    }\n+}"}, {"sha": "7b745b2ab084cbcbfde54de99ab9d87b0ed0fc31", "filename": "gcc/unroll.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=aeb2f500b073c09d86daf7d0cdbe71ddd9e1561c", "patch": "@@ -691,6 +691,8 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \n   for (insn = copy_start; insn != loop_end; insn = NEXT_INSN (insn))\n     {\n+      rtx note;\n+\n       if (GET_CODE (insn) == CODE_LABEL)\n \tlocal_label[CODE_LABEL_NUMBER (insn)] = 1;\n       else if (GET_CODE (insn) == JUMP_INSN)\n@@ -716,6 +718,9 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t\t}\n \t    }\n \t}\n+      else if (note = find_reg_note (insn, REG_LABEL, NULL_RTX))\n+\tset_label_in_map (map, CODE_LABEL_NUMBER (XEXP (note, 0)),\n+\t\t\t  XEXP (note, 0));\n     }\n \n   /* Allocate space for the insn map.  */"}]}