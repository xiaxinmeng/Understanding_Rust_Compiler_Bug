{"sha": "d94a3592d4b796aa86da74cda88de8dfaadddbf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0YTM1OTJkNGI3OTZhYTg2ZGE3NGNkYTg4ZGU4ZGZhYWRkZGJmMw==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-06-07T10:56:44Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-06-07T10:56:44Z"}, "message": "re PR testsuite/44159 (CPU options cause testsuite failures)\n\n2010-06-07  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR target/44159\n\t* gcc.target/i386/abi-2.c: Check sysv abi here.\n\t* gcc.target/i386/aes-avx-check.h: Call test in noinline\n\tfunction to avoid failures by different ABIs.\n\t* gcc.target/i386/aes-check.h: Likewise.\n\t* gcc.target/i386/avx-check.h: Likewise.\n\t* gcc.target/i386/fma4-check.h: Likewise.\n\t* gcc.target/i386/mmx-3dnow-check.h: Likewise.\n\t* gcc.target/i386/mmx-check.h: Likewise.\n\t* gcc.target/i386/pclmul-avx-check.h: Likewise.\n\t* gcc.target/i386/pclmul-check.h: Likewise.\n\t* gcc.target/i386/sse-check.h: Likewise.\n\t* gcc.target/i386/sse2-check.h: Likewise.\n\t* gcc.target/i386/sse3-check.h: Likewise.\n\t* gcc.target/i386/sse4_1-check.h: Likewise.\n\t* gcc.target/i386/sse4_2-check.h: Likewise.\n\t* gcc.target/i386/sse4a-check.h: Likewise.\n\t* gcc.target/i386/ssse3-check.h: Likewise.\n\t* gcc.target/i386/xop-check.h: Likewise.\n\t* gcc.target/i386/pr27971.c: Fix for LLP64.\n\t* gcc.target/i386/pr39139.c: Likewise.\n\t* gcc.target/i386/pr39315-check.c: Likewise.\n\t* gcc.target/i386/vararg-1.c: Likewise.\n\t* gcc.target/i386/vararg-2.c: Likewise.\n\tAdditional add dg-compile to avoid failure due\n\tmissing foo symbol.\n\nFrom-SVN: r160363", "tree": {"sha": "d18ce95c065410ab83e4cfbfc73cce11d87de268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d18ce95c065410ab83e4cfbfc73cce11d87de268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d94a3592d4b796aa86da74cda88de8dfaadddbf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94a3592d4b796aa86da74cda88de8dfaadddbf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94a3592d4b796aa86da74cda88de8dfaadddbf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94a3592d4b796aa86da74cda88de8dfaadddbf3/comments", "author": null, "committer": null, "parents": [{"sha": "78e68a8937395f334fe12c347897950e9caba6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e68a8937395f334fe12c347897950e9caba6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e68a8937395f334fe12c347897950e9caba6cb"}], "stats": {"total": 202, "additions": 177, "deletions": 25}, "files": [{"sha": "7020fc7aa7368d03222abe293589827638a2f874", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -1,5 +1,32 @@\n 2010-06-07  Kai Tietz  <kai.tietz@onevision.com>\n \n+\tPR target/44159\n+\t* gcc.target/i386/abi-2.c: Check sysv abi here.\n+\t* gcc.target/i386/aes-avx-check.h: Call test in noinline\n+\tfunction to avoid failures by different ABIs.\n+\t* gcc.target/i386/aes-check.h: Likewise.\n+\t* gcc.target/i386/avx-check.h: Likewise.\n+\t* gcc.target/i386/fma4-check.h: Likewise.\n+\t* gcc.target/i386/mmx-3dnow-check.h: Likewise.\n+\t* gcc.target/i386/mmx-check.h: Likewise.\n+\t* gcc.target/i386/pclmul-avx-check.h: Likewise.\n+\t* gcc.target/i386/pclmul-check.h: Likewise.\n+\t* gcc.target/i386/sse-check.h: Likewise.\n+\t* gcc.target/i386/sse2-check.h: Likewise.\n+\t* gcc.target/i386/sse3-check.h: Likewise.\n+\t* gcc.target/i386/sse4_1-check.h: Likewise.\n+\t* gcc.target/i386/sse4_2-check.h: Likewise.\n+\t* gcc.target/i386/sse4a-check.h: Likewise.\n+\t* gcc.target/i386/ssse3-check.h: Likewise.\n+\t* gcc.target/i386/xop-check.h: Likewise.\n+\t* gcc.target/i386/pr27971.c: Fix for LLP64.\n+\t* gcc.target/i386/pr39139.c: Likewise.\n+\t* gcc.target/i386/pr39315-check.c: Likewise.\n+\t* gcc.target/i386/vararg-1.c: Likewise.\n+\t* gcc.target/i386/vararg-2.c: Likewise.\n+\tAdditional add dg-compile to avoid failure due\n+\tmissing foo symbol.\n+\n         * gcc.dg/compound-literal-1.c: Fix for llp64.\n         * gcc.dg/pr32370.c: Likewise.\n         * gcc.dg/pr37561.c: Likewise."}, {"sha": "39eafc25039691237360869c596816f1c26acd84", "filename": "gcc/testsuite/gcc.target/i386/abi-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -1,6 +1,7 @@\n /* Make certain that we pass __m256i in the correct register for AVX.  */\n /* { dg-do compile } */\n /* { dg-options \"-O1 -mavx\" } */\n+/* { dg-options \"-mabi=sysv -O1 -mavx\" { target x86_64-*-mingw* } } */\n \n typedef long long __m256i __attribute__ ((__vector_size__ (32)));\n __m256i foo (void) { return (__m256i){ 1, 2, 3, 4 }; }"}, {"sha": "e91e88173cf633d0e6e42f87e0b10fd9f3900022", "filename": "gcc/testsuite/gcc.target/i386/aes-avx-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-avx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-avx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-avx-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -6,6 +6,13 @@\n \n static void aes_avx_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  aes_avx_test ();\n+}\n+\n int\n main ()\n {\n@@ -17,7 +24,7 @@ main ()\n   /* Run AES + AVX test only if host has AES + AVX support.  */\n   if ((ecx & (bit_AVX | bit_AES)) == (bit_AVX | bit_AES))\n     {\n-      aes_avx_test ();\n+      do_test ();\n #ifdef DEBUG\n       printf (\"PASSED\\n\");\n #endif"}, {"sha": "7e794423e47ed7cdd44905a3f10dfc191a29ce77", "filename": "gcc/testsuite/gcc.target/i386/aes-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void aes_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  aes_test ();\n+}\n+\n int\n main ()\n {\n@@ -16,7 +23,7 @@ main ()\n   /* Run AES test only if host has AES support.  */\n   if (ecx & bit_AES)\n     {\n-      aes_test ();\n+      do_test ();\n #ifdef DEBUG\n     printf (\"PASSED\\n\");\n #endif"}, {"sha": "7736fc9f40ba40fb3718d161c41ca6a6cde10fac", "filename": "gcc/testsuite/gcc.target/i386/avx-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -4,6 +4,13 @@\n \n static void avx_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  avx_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n   /* Run AVX test only if host has AVX support.  */\n   if (ecx & bit_AVX)\n     {\n-      avx_test ();\n+      do_test ();\n #ifdef DEBUG\n       printf (\"PASSED\\n\");\n #endif"}, {"sha": "dc7ee5748782e81bdae9ba0767ea5241d961ecca", "filename": "gcc/testsuite/gcc.target/i386/fma4-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -4,6 +4,13 @@\n \n static void fma4_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  fma4_test ();\n+}\n+\n int\n main ()\n {\n@@ -14,7 +21,7 @@ main ()\n \n   /* Run FMA4 test only if host has FMA4 support.  */\n   if (ecx & bit_FMA4)\n-    fma4_test ();\n+    do_test ();\n \n   exit (0);\n }"}, {"sha": "4f2f7f3ac40215c6a9c6e98395231167d1f1d1a6", "filename": "gcc/testsuite/gcc.target/i386/mmx-3dnow-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-3dnow-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-3dnow-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-3dnow-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void mmx_3dnow_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  mmx_3dnow_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n \n   /* Run 3DNow! test only if host has 3DNow! support.  */\n   if (edx & bit_3DNOW)\n-    mmx_3dnow_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "faf9b876f382853f73f4bab245062177ea771917", "filename": "gcc/testsuite/gcc.target/i386/mmx-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void mmx_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  mmx_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n \n   /* Run MMX test only if host has MMX support.  */\n   if (edx & bit_MMX)\n-    mmx_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "550e49904d9b72a721b07f43d675fa6b7ee9551f", "filename": "gcc/testsuite/gcc.target/i386/pclmul-avx-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-avx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-avx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-avx-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -6,6 +6,13 @@\n \n static void pclmul_avx_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  pclmul_avx_test ();\n+}\n+\n int\n main ()\n {\n@@ -17,7 +24,7 @@ main ()\n   /* Run PCLMUL + AVX test only if host has PCLMUL + AVX support.  */\n   if ((ecx & (bit_AVX | bit_PCLMUL)) == (bit_AVX | bit_PCLMUL))\n     {\n-      pclmul_avx_test ();\n+      do_test ();\n #ifdef DEBUG\n       printf (\"PASSED\\n\");\n #endif"}, {"sha": "7526cbe2ddfc7948af1256a2835024f10e58e11d", "filename": "gcc/testsuite/gcc.target/i386/pclmul-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void pclmul_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  pclmul_test ();\n+}\n+\n int\n main ()\n {\n@@ -16,7 +23,7 @@ main ()\n   /* Run PCLMULQDQ test only if host has PCLMULQDQ support.  */\n   if (ecx & bit_PCLMUL)\n     {\n-      pclmul_test ();\n+      do_test ();\n #ifdef DEBUG\n       printf (\"PASSED\\n\");\n #endif"}, {"sha": "27888de6d2f50eb39eedcb2ee73917e56ca6b965", "filename": "gcc/testsuite/gcc.target/i386/pr27971.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr27971.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr27971.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr27971.c?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -3,7 +3,13 @@\n \n unsigned array[4];\n \n-unsigned foo(unsigned long x)\n+#ifdef _WIN64\n+__extension__ typedef unsigned long long TYPE;\n+#else\n+#define TYPE unsigned long\n+#endif\n+\n+unsigned foo(TYPE x)\n {\n           return array[(x>>2)&3ul];\n }"}, {"sha": "e4cb845f9ec7709d150a8e58033c27bc098e3621", "filename": "gcc/testsuite/gcc.target/i386/pr39139.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39139.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39139.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39139.c?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -12,22 +12,24 @@\n # define SI_REG asm (\"esi\")\n #endif\n \n+__extension__ typedef __SIZE_TYPE__ size_t;\n+\n static inline int\n foo (unsigned int x, void *y)\n {\n-  register unsigned long r AX_REG;\n-  register unsigned long a1 DI_REG;\n-  register unsigned long a2 SI_REG;\n-  a1 = (unsigned long) x;\n-  a2 = (unsigned long) y;\n+  register size_t r AX_REG;\n+  register size_t a1 DI_REG;\n+  register size_t a2 SI_REG;\n+  a1 = (size_t) x;\n+  a2 = (size_t) y;\n   asm volatile (\"\" : \"=r\" (r), \"+r\" (a1), \"+r\" (a2) : : \"memory\");\n   return (int) r;\n }\n \n-struct T { unsigned long t1, t2; unsigned int t3, t4, t5; };\n+struct T { size_t t1, t2; unsigned int t3, t4, t5; };\n \n int\n-bar (unsigned long x, unsigned int y, unsigned long u, unsigned int v)\n+bar (size_t x, unsigned int y, size_t u, unsigned int v)\n {\n   long r;\n   struct T e = { .t1 = x, .t2 = u };"}, {"sha": "8f7376015d01c353eec51efd0ee6d30efabf0fab", "filename": "gcc/testsuite/gcc.target/i386/pr39315-check.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-check.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-check.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39315-check.c?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -1,4 +1,6 @@\n+/* { dg-compile } */\n typedef float __m128 __attribute__ ((__vector_size__ (16)));\n+__extension__ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n \n extern void foo (__m128 *);\n extern void abort (void);\n@@ -8,7 +10,7 @@ __m128 y = { 0.0, 1.0, 2.0, 3.0 };\n void\n bar (__m128 *x, int align)\n {\n-  if ((((__PTRDIFF_TYPE__) x) & (align - 1)) != 0)\n+  if ((((ptrdiff_t) x) & (align - 1)) != 0)\n     abort ();\n   if (__builtin_memcmp (x, &y, sizeof (y)) != 0)\n     abort ();"}, {"sha": "85629cc71b95bafc58e92642ca824c6b65c2ee68", "filename": "gcc/testsuite/gcc.target/i386/sse-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -6,6 +6,13 @@\n \n static void sse_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse_test ();\n+}\n+\n int\n main ()\n {\n@@ -16,7 +23,7 @@ main ()\n \n   /* Run SSE test only if host has SSE support.  */\n   if (edx & bit_SSE)\n-    sse_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "e9f17f04079ea696f29cf1157f3e6df67c6ac955", "filename": "gcc/testsuite/gcc.target/i386/sse2-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -4,6 +4,13 @@\n \n static void sse2_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse2_test ();\n+}\n+\n int\n main ()\n {\n@@ -14,7 +21,7 @@ main ()\n \n   /* Run SSE2 test only if host has SSE2 support.  */\n   if (edx & bit_SSE2)\n-    sse2_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "df0e63a457504d84449f3c5878b4e4728d5d60f2", "filename": "gcc/testsuite/gcc.target/i386/sse3-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse3-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void sse3_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse3_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n  \n   /* Run SSE3 test only if host has SSE3 support.  */\n   if (ecx & bit_SSE3)\n-    sse3_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "788f65d61cbfce186a3000bc6a2fc6b691fdad8f", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -7,6 +7,13 @@ static void sse4_1_test (void);\n \n #define MASK 0x2\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse4_1_test ();\n+}\n+\n int\n main ()\n {\n@@ -17,7 +24,7 @@ main ()\n \n   /* Run SSE4.1 test only if host has SSE4.1 support.  */\n   if (ecx & bit_SSE4_1)\n-    sse4_1_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "d10e6c7d7e203c3bc22560e3331765d2048726d4", "filename": "gcc/testsuite/gcc.target/i386/sse4_2-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_2-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void sse4_2_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse4_2_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n \n   /* Run SSE4.2 test only if host has SSE4.2 support.  */\n   if (ecx & bit_SSE4_2)\n-    sse4_2_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "d43b4b222b13149bfbe5250942e76476e9e71f6f", "filename": "gcc/testsuite/gcc.target/i386/sse4a-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4a-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void sse4a_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse4a_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n \n   /* Run SSE4a test only if host has SSE4a support.  */\n   if (ecx & bit_SSE4a)\n-    sse4a_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "3ca79333c7f84ec2255e63c14d4127d705f9f85e", "filename": "gcc/testsuite/gcc.target/i386/ssse3-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssse3-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssse3-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssse3-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void ssse3_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  ssse3_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n \n   /* Run SSSE3 test only if host has SSSE3 support.  */\n   if (ecx & bit_SSSE3)\n-    ssse3_test ();\n+    do_test ();\n \n   return 0;\n }"}, {"sha": "9ed9ab087d0b9d80dbd81e446d770c77163cf120", "filename": "gcc/testsuite/gcc.target/i386/vararg-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-1.c?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/36858 */\n /* { dg-do run } */\n /* { dg-options \"-w\" { target { lp64 } } } */\n+/* { dg-options \"-w\" { target { llp64 } } } */\n /* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" { target { ilp32 } } } */\n /* { dg-require-effective-target sse2 } */\n "}, {"sha": "804801256f19b10d5e2a4614162a5cb08cb30e8f", "filename": "gcc/testsuite/gcc.target/i386/vararg-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -1,6 +1,7 @@\n /* PR middle-end/36859 */\n /* { dg-do run } */\n /* { dg-options \"-w\" { target { lp64 } } } */\n+/* { dg-options \"-w\" { target { llp64 } } } */\n /* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" { target { ilp32 } } } */\n /* { dg-require-effective-target sse2 } */\n "}, {"sha": "7e8e665c79f11be6be89be70ca5fba531c1a6a19", "filename": "gcc/testsuite/gcc.target/i386/xop-check.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94a3592d4b796aa86da74cda88de8dfaadddbf3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-check.h?ref=d94a3592d4b796aa86da74cda88de8dfaadddbf3", "patch": "@@ -5,6 +5,13 @@\n \n static void xop_test (void);\n \n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  xop_test ();\n+}\n+\n int\n main ()\n {\n@@ -15,7 +22,7 @@ main ()\n \n   /* Run XOP test only if host has XOP support.  */\n   if (ecx & bit_XOP)\n-    xop_test ();\n+    do_test ();\n \n   exit (0);\n }"}]}