{"sha": "4530b919823b0cd7cdaddd14350310e2cb5711c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzMGI5MTk4MjNiMGNkN2NkYWRkZDE0MzUwMzEwZTJjYjU3MTFjNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:27:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:27:37Z"}, "message": "[multiple changes]\n\n2013-10-10  Pascal Obry  <obry@adacore.com>\n\n\t* prj-conf.adb: Minor typo fixes in comment.\n\n2013-10-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-taprop-posix.adb (Compute_Deadline): New local subprogram,\n\tfactors common code between Timed_Sleep and Timed_Delay.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Don't replace others if\n\texpander inactive. This avoids clobbering the ASIS tree in\n\t-gnatct mode.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb (Resolve_Op_Expon): Avoid crash testing for\n\tfixed-point case in preanalysis mode (error will be caught during\n\tfull analysis).\n\nFrom-SVN: r203362", "tree": {"sha": "19eca81a6b738b0f0635049d99cccf6e686ce8e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19eca81a6b738b0f0635049d99cccf6e686ce8e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4530b919823b0cd7cdaddd14350310e2cb5711c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4530b919823b0cd7cdaddd14350310e2cb5711c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4530b919823b0cd7cdaddd14350310e2cb5711c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4530b919823b0cd7cdaddd14350310e2cb5711c4/comments", "author": null, "committer": null, "parents": [{"sha": "4169c2d220718a78e661a605ebd838b0ad5a40bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4169c2d220718a78e661a605ebd838b0ad5a40bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4169c2d220718a78e661a605ebd838b0ad5a40bd"}], "stats": {"total": 183, "additions": 122, "deletions": 61}, "files": [{"sha": "ddec47a0d9726262bd1c6f06d4fedc54b252bcc7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4530b919823b0cd7cdaddd14350310e2cb5711c4", "patch": "@@ -1,3 +1,24 @@\n+2013-10-10  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj-conf.adb: Minor typo fixes in comment.\n+\n+2013-10-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-taprop-posix.adb (Compute_Deadline): New local subprogram,\n+\tfactors common code between Timed_Sleep and Timed_Delay.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Don't replace others if\n+\texpander inactive. This avoids clobbering the ASIS tree in\n+\t-gnatct mode.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Op_Expon): Avoid crash testing for\n+\tfixed-point case in preanalysis mode (error will be caught during\n+\tfull analysis).\n+\n 2013-10-10  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Refined_Pre and Refined_Post are now allowed as"}, {"sha": "79b0a0d6ec94ef4f6b4309c94bbe65133e5af090", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4530b919823b0cd7cdaddd14350310e2cb5711c4", "patch": "@@ -2766,20 +2766,28 @@ package body Freeze is\n                --  of course we already know the list of choices corresponding\n                --  to the others choice (it's the list we're replacing!)\n \n-               declare\n-                  Last_Var    : constant Node_Id :=\n-                                  Last_Non_Pragma (Variants (V));\n-                  Others_Node : Node_Id;\n-               begin\n-                  if Nkind (First (Discrete_Choices (Last_Var))) /=\n+               --  We only want to do this if the expander is active, since\n+               --  we do not want to clobber the ASIS tree!\n+\n+               if Expander_Active then\n+                  declare\n+                     Last_Var : constant Node_Id :=\n+                                     Last_Non_Pragma (Variants (V));\n+\n+                     Others_Node : Node_Id;\n+\n+                  begin\n+                     if Nkind (First (Discrete_Choices (Last_Var))) /=\n                                                             N_Others_Choice\n-                  then\n-                     Others_Node := Make_Others_Choice (Sloc (Last_Var));\n-                     Set_Others_Discrete_Choices\n-                       (Others_Node, Discrete_Choices (Last_Var));\n-                     Set_Discrete_Choices (Last_Var, New_List (Others_Node));\n-                  end if;\n-               end;\n+                     then\n+                        Others_Node := Make_Others_Choice (Sloc (Last_Var));\n+                        Set_Others_Discrete_Choices\n+                          (Others_Node, Discrete_Choices (Last_Var));\n+                        Set_Discrete_Choices\n+                          (Last_Var, New_List (Others_Node));\n+                     end if;\n+                  end;\n+               end if;\n             end if;\n          end Check_Variant_Part;\n       end Freeze_Record_Type;"}, {"sha": "f16509b18ab0217e2b33d9c95f3800003db76299", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=4530b919823b0cd7cdaddd14350310e2cb5711c4", "patch": "@@ -643,8 +643,8 @@ package body Prj.Conf is\n       --  Check for switches --config and --RTS in package Builder\n \n       procedure Get_Project_Target;\n-      --  Target_Name is empty, get the specifiedtarget in the project file,\n-      --  if any.\n+      --  If Target_Name is empty, get the specified target in the project\n+      --  file, if any.\n \n       function Get_Config_Switches return Argument_List_Access;\n       --  Return the --config switches to use for gprconfig"}, {"sha": "275828d049c284a34281719895390acf6d98e8a7", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 63, "deletions": 34, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=4530b919823b0cd7cdaddd14350310e2cb5711c4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,6 +178,18 @@ package body System.Task_Primitives.Operations is\n    pragma Import (C,\n      GNAT_pthread_condattr_setup, \"__gnat_pthread_condattr_setup\");\n \n+   procedure Compute_Deadline\n+     (Time       : Duration;\n+      Mode       : ST.Delay_Modes;\n+      Check_Time : out Duration;\n+      Abs_Time   : out Duration;\n+      Rel_time   : out Duration);\n+   --  Helper for Timed_Sleep and Timed_Delay: given a deadline specified by\n+   --  Time and Mode, compute the current clock reading (Check_Time), and the\n+   --  target absolute and relative clock readings (Abs_Time, Rel_Time). The\n+   --  epoch for Time depends on Mode; the epoch for Check_Time and Abs_Time\n+   --  is always that of CLOCK_RT_Ada.\n+\n    -------------------\n    -- Abort_Handler --\n    -------------------\n@@ -236,6 +248,36 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Abort_Handler;\n \n+   ----------------------\n+   -- Compute_Deadline --\n+   ----------------------\n+\n+   procedure Compute_Deadline\n+     (Time       : Duration;\n+      Mode       : ST.Delay_Modes;\n+      Check_Time : out Duration;\n+      Abs_Time   : out Duration;\n+      Rel_time   : out Duration)\n+   is\n+   begin\n+      Check_Time := Monotonic_Clock;\n+\n+      if Mode = Relative then\n+         Abs_Time := Duration'Min (Time, Max_Sensible_Delay) + Check_Time;\n+\n+         if Relative_Timed_Wait then\n+            Rel_Time := Duration'Min (Max_Sensible_Delay, Time);\n+         end if;\n+\n+      else\n+         Abs_Time := Duration'Min (Check_Time + Max_Sensible_Delay, Time);\n+\n+         if Relative_Timed_Wait then\n+            Rel_Time := Duration'Min (Max_Sensible_Delay, Time - Check_Time);\n+         end if;\n+      end if;\n+   end Compute_Deadline;\n+\n    -----------------\n    -- Stack_Guard --\n    -----------------\n@@ -528,31 +570,25 @@ package body System.Task_Primitives.Operations is\n    is\n       pragma Unreferenced (Reason);\n \n-      Base_Time  : constant Duration := Monotonic_Clock;\n-      Check_Time : Duration := Base_Time;\n-      Rel_Time   : Duration;\n+      Base_Time  : Duration;\n+      Check_Time : Duration;\n       Abs_Time   : Duration;\n+      Rel_Time   : Duration;\n+\n       Request    : aliased timespec;\n       Result     : Interfaces.C.int;\n \n    begin\n       Timedout := True;\n       Yielded := False;\n \n-      if Mode = Relative then\n-         Abs_Time := Duration'Min (Time, Max_Sensible_Delay) + Check_Time;\n-\n-         if Relative_Timed_Wait then\n-            Rel_Time := Duration'Min (Max_Sensible_Delay, Time);\n-         end if;\n-\n-      else\n-         Abs_Time := Duration'Min (Check_Time + Max_Sensible_Delay, Time);\n-\n-         if Relative_Timed_Wait then\n-            Rel_Time := Duration'Min (Max_Sensible_Delay, Time - Check_Time);\n-         end if;\n-      end if;\n+      Compute_Deadline\n+        (Time       => Time,\n+         Mode       => Mode,\n+         Check_Time => Check_Time,\n+         Abs_Time   => Abs_Time,\n+         Rel_Time   => Rel_Time);\n+      Base_Time := Check_Time;\n \n       if Abs_Time > Check_Time then\n          Request :=\n@@ -597,8 +633,8 @@ package body System.Task_Primitives.Operations is\n       Time    : Duration;\n       Mode    : ST.Delay_Modes)\n    is\n-      Base_Time  : constant Duration := Monotonic_Clock;\n-      Check_Time : Duration := Base_Time;\n+      Base_Time  : Duration;\n+      Check_Time : Duration;\n       Abs_Time   : Duration;\n       Rel_Time   : Duration;\n       Request    : aliased timespec;\n@@ -613,20 +649,13 @@ package body System.Task_Primitives.Operations is\n \n       Write_Lock (Self_ID);\n \n-      if Mode = Relative then\n-         Abs_Time := Duration'Min (Time, Max_Sensible_Delay) + Check_Time;\n-\n-         if Relative_Timed_Wait then\n-            Rel_Time := Duration'Min (Max_Sensible_Delay, Time);\n-         end if;\n-\n-      else\n-         Abs_Time := Duration'Min (Check_Time + Max_Sensible_Delay, Time);\n-\n-         if Relative_Timed_Wait then\n-            Rel_Time := Duration'Min (Max_Sensible_Delay, Time - Check_Time);\n-         end if;\n-      end if;\n+      Compute_Deadline\n+        (Time       => Time,\n+         Mode       => Mode,\n+         Check_Time => Check_Time,\n+         Abs_Time   => Abs_Time,\n+         Rel_Time   => Rel_Time);\n+      Base_Time := Check_Time;\n \n       if Abs_Time > Check_Time then\n          Request :="}, {"sha": "ca2b551136df7368bc9094b7d54d879e90c460e6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4530b919823b0cd7cdaddd14350310e2cb5711c4/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4530b919823b0cd7cdaddd14350310e2cb5711c4", "patch": "@@ -8295,19 +8295,22 @@ package body Sem_Res is\n    begin\n       --  Catch attempts to do fixed-point exponentiation with universal\n       --  operands, which is a case where the illegality is not caught during\n-      --  normal operator analysis.\n+      --  normal operator analysis. This is not done in preanalysis mode\n+      --  since the tree is not fully decorated during preanalysis.\n \n-      if Is_Fixed_Point_Type (Typ) and then Comes_From_Source (N) then\n-         Error_Msg_N (\"exponentiation not available for fixed point\", N);\n-         return;\n+      if Full_Analysis then\n+         if Is_Fixed_Point_Type (Typ) and then Comes_From_Source (N) then\n+            Error_Msg_N (\"exponentiation not available for fixed point\", N);\n+            return;\n \n-      elsif Nkind (Parent (N)) in N_Op\n-        and then Is_Fixed_Point_Type (Etype (Parent (N)))\n-        and then Etype (N) = Universal_Real\n-        and then Comes_From_Source (N)\n-      then\n-         Error_Msg_N (\"exponentiation not available for fixed point\", N);\n-         return;\n+         elsif Nkind (Parent (N)) in N_Op\n+           and then Is_Fixed_Point_Type (Etype (Parent (N)))\n+           and then Etype (N) = Universal_Real\n+           and then Comes_From_Source (N)\n+         then\n+            Error_Msg_N (\"exponentiation not available for fixed point\", N);\n+            return;\n+         end if;\n       end if;\n \n       if Comes_From_Source (N)\n@@ -8326,7 +8329,7 @@ package body Sem_Res is\n       end if;\n \n       --  We do the resolution using the base type, because intermediate values\n-      --  in expressions always are of the base type, not a subtype of it.\n+      --  in expressions are always of the base type, not a subtype of it.\n \n       Resolve (Left_Opnd (N), B_Typ);\n       Resolve (Right_Opnd (N), Standard_Integer);"}]}