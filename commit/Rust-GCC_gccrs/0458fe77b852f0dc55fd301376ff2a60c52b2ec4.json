{"sha": "0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1OGZlNzdiODUyZjBkYzU1ZmQzMDEzNzZmZjJhNjBjNTJiMmVjNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2006-01-23T15:15:12Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-23T15:15:12Z"}, "message": "r110124@banpei: zack | 2006-01-22 14:45:55 -0800\n\n r110124@banpei:  zack | 2006-01-22 14:45:55 -0800\n \t* gensupport.c: Define get_insn_name and record_insn_name here.\n \t(read_md_rtx): Call record_insn_name as appropriate.\n \t* genattr.c, genattrtab.c, gencodes.c, genconfig.c, genemit.c\n \t* genextract.c, genflags.c, genopinit.c, genoutput.c, genpeep.c\n \t* genpreds.c, genrecog.c: Don't define get_insn_name nor\n \trecord_insn_name.\n \t* Makefile.in (BUILD_SUPPORT, BUILD_PRINT): Fold into BUILD_RTL.\n \t(BUILD_VARRAY): Delete.\n \t(genprognormal): Rename genprogmd.  Fold in all programs from\n \tgenprognoprint; also attrtab.\n \t(build/genattrtab): Just mention genautomata.o and varray.o.\n \tReorganize a bit, add comments to make the categories clearer.\n\nFrom-SVN: r110120", "tree": {"sha": "04e7c2430e813b518ab2f021d422bd49f8d865ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04e7c2430e813b518ab2f021d422bd49f8d865ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c7352cde8a759e414b61d3aeaf40eda67f8dd75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7352cde8a759e414b61d3aeaf40eda67f8dd75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7352cde8a759e414b61d3aeaf40eda67f8dd75"}], "stats": {"total": 290, "additions": 79, "deletions": 211}, "files": [{"sha": "b67c0339b6c92728f152cd3bb9c38091da819e7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -1,3 +1,18 @@\n+2006-01-22  Zack Weinberg  <zackw@panix.com>\n+\n+\t* gensupport.c: Define get_insn_name and record_insn_name here.\n+\t(read_md_rtx): Call record_insn_name as appropriate.\n+\t* genattr.c, genattrtab.c, gencodes.c, genconfig.c, genemit.c\n+\t* genextract.c, genflags.c, genopinit.c, genoutput.c, genpeep.c\n+\t* genpreds.c, genrecog.c: Don't define get_insn_name nor\n+\trecord_insn_name.\n+\t* Makefile.in (BUILD_SUPPORT, BUILD_PRINT): Fold into BUILD_RTL.\n+\t(BUILD_VARRAY): Delete.\n+\t(genprognormal): Rename genprogmd.  Fold in all programs from\n+\tgenprognoprint; also attrtab.\n+\t(build/genattrtab): Just mention genautomata.o and varray.o.\n+\tReorganize a bit, add comments to make the categories clearer.\n+\n 2006-01-22  Zack Weinberg  <zackw@panix.com>\n \n \t* genconditions.c (condition_table, add_condition): Delete."}, {"sha": "6d25f9001c10ebfb8ca660e64e887c581e78efda", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -839,11 +839,8 @@ LDEXP_LIB = @LDEXP_LIB@\n BUILD_LIBS = $(BUILD_LIBIBERTY)\n \n BUILD_RTL = build/rtl.o build/read-rtl.o build/ggc-none.o \\\n-\t    build/min-insn-modes.o\n-BUILD_SUPPORT = build/gensupport.o\n-BUILD_PRINT = build/print-rtl.o\n+\t    build/min-insn-modes.o build/gensupport.o build/print-rtl.o\n BUILD_ERRORS = build/errors.o\n-BUILD_VARRAY = build/varray.o\n \n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n@@ -2964,29 +2961,19 @@ build/gen%$(build_exeext): build/gen%.o $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n \t    $(filter-out $(BUILD_LIBDEPS), $^) $(BUILD_LIBS)\n \n-# All these programs have the same additional dependency set.\n-genprognormal = attr codes config emit extract flags opinit output peep recog \\\n-\t\tpreds\n-$(genprognormal:%=build/gen%$(build_exeext)): $(BUILD_RTL) $(BUILD_SUPPORT) \\\n-  $(BUILD_PRINT) $(BUILD_ERRORS)\n-\n-# These don't have the glue to link with print-rtl.o.\n-genprognoprint = mddeps constants conditions\n-$(genprognoprint:%=build/gen%$(build_exeext)): $(BUILD_RTL) $(BUILD_SUPPORT) \\\n-  $(BUILD_ERRORS)\n+# All these programs use the MD reader ($(BUILD_RTL)).\n+genprogmd = attr attrtab codes conditions config constants emit extract \\\n+\t    flags mddeps opinit output peep preds recog\n+$(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_RTL) $(BUILD_ERRORS)\n \n+# These programs need files over and above what they get from the above list.\n+build/genextract$(build_exeext) : build/vec.o\n+build/genattrtab$(build_exeext) : build/genautomata.o build/varray.o\n+build/genattrtab$(build_exeext) : BUILD_LIBS += -lm\n \n+# These programs are not linked with the MD reader.\n build/gengenrtl$(build_exeext) : $(BUILD_ERRORS)\n build/genmodes$(build_exeext) : $(BUILD_ERRORS)\n-build/genextract$(build_exeext): build/vec.o\n-\n-# These programs are made from more than one source file.\n-# The primary source file comes from the pattern rule above.\n-build/genattrtab$(build_exeext) : build/genautomata.o \\\n-  $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) \\\n-  $(BUILD_VARRAY)\n-build/genattrtab$(build_exeext) : BUILD_LIBS += -lm\n-\n build/gengtype$(build_exeext) : build/gengtype-lex.o \\\n   build/gengtype-yacc.o $(BUILD_ERRORS)\n "}, {"sha": "7d6d50fffb0d5bc4f213a7105d5eb11e8dfafd0a", "filename": "gcc/genattr.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -286,10 +286,3 @@ main (int argc, char **argv)\n \n   return SUCCESS_EXIT_CODE;\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  return NULL;\n-}"}, {"sha": "41dda6bb5daf7003ead4764b30bab6804156b94e", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -4626,10 +4626,3 @@ from the machine description file `md'.  */\\n\\n\");\n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  return NULL;\n-}"}, {"sha": "27a68ad4a265841a8a61c631574d95c9c0e8d0f8", "filename": "gcc/gencodes.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -96,11 +96,3 @@ enum insn_code {\");\n \n   return SUCCESS_EXIT_CODE;\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  return NULL;\n-}"}, {"sha": "9391315108473742a56163b66e22fb729be0154f", "filename": "gcc/genconfig.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -364,10 +364,3 @@ main (int argc, char **argv)\n \n   return SUCCESS_EXIT_CODE;\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int ARG_UNUSED (code))\n-{\n-  return NULL;\n-}"}, {"sha": "e9773082f9eb11599ae874704d38e2ce19333caf", "filename": "gcc/genemit.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -894,10 +894,3 @@ from the machine description file `md'.  */\\n\\n\");\n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  return NULL;\n-}"}, {"sha": "319a0b0bfa96b321db8402f48a958f9f4028c16b", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -86,7 +86,6 @@ struct accum_extract\n \n /* Forward declarations.  */\n static void walk_rtx (rtx, struct accum_extract *);\n-static void record_insn_name (int, const char *);\n \n static void\n gen_insn (rtx insn, int insn_code_number)\n@@ -416,10 +415,7 @@ main (int argc, char **argv)\n   while ((desc = read_md_rtx (&line_no, &insn_code_number)) != NULL)\n     {\n        if (GET_CODE (desc) == DEFINE_INSN)\n-\t{\n-\t  record_insn_name (insn_code_number, XSTR (desc, 0));\n-\t  gen_insn (desc, insn_code_number);\n-\t}\n+\t gen_insn (desc, insn_code_number);\n \n       else if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n \t{\n@@ -493,49 +489,3 @@ main (int argc, char **argv)\n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-\n-/* Holds an array of names indexed by insn_code_number.  */\n-static char **insn_name_ptr = 0;\n-static int insn_name_ptr_size = 0;\n-\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  if (code < insn_name_ptr_size)\n-    return insn_name_ptr[code];\n-  else\n-    return NULL;\n-}\n-\n-static void\n-record_insn_name (int code, const char *name)\n-{\n-  static const char *last_real_name = \"insn\";\n-  static int last_real_code = 0;\n-  char *new;\n-\n-  if (insn_name_ptr_size <= code)\n-    {\n-      int new_size;\n-      new_size = (insn_name_ptr_size ? insn_name_ptr_size * 2 : 512);\n-      insn_name_ptr = xrealloc (insn_name_ptr, sizeof(char *) * new_size);\n-      memset (insn_name_ptr + insn_name_ptr_size, 0,\n-\t      sizeof(char *) * (new_size - insn_name_ptr_size));\n-      insn_name_ptr_size = new_size;\n-    }\n-\n-  if (!name || name[0] == '\\0')\n-    {\n-      new = xmalloc (strlen (last_real_name) + 10);\n-      sprintf (new, \"%s+%d\", last_real_name, code - last_real_code);\n-    }\n-  else\n-    {\n-      last_real_name = new = xstrdup (name);\n-      last_real_code = code;\n-    }\n-\n-  insn_name_ptr[code] = new;\n-}"}, {"sha": "30e9c7e103a03b1f95cf5f3f950c426ea05ed860", "filename": "gcc/genflags.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -279,10 +279,3 @@ main (int argc, char **argv)\n \n   return SUCCESS_EXIT_CODE;\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int ARG_UNUSED (code))\n-{\n-  return NULL;\n-}"}, {"sha": "c9cea085852a08372ed373709ec1d084d0c24148", "filename": "gcc/genopinit.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -453,10 +453,3 @@ from the machine description file `md'.  */\\n\\n\");\n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  return NULL;\n-}"}, {"sha": "4a73904259910c51018e119542d6bcadf75e312d", "filename": "gcc/genoutput.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -192,28 +192,6 @@ static void gen_split (rtx, int);\n static void check_constraint_len (void);\n static int constraint_len (const char *, int);\n \f\n-const char *\n-get_insn_name (int index)\n-{\n-  static char buf[100];\n-\n-  struct data *i, *last_named = NULL;\n-  for (i = idata; i ; i = i->next)\n-    {\n-      if (i->index_number == index)\n-\treturn i->name;\n-      if (i->name)\n-\tlast_named = i;\n-    }\n-\n-  if (last_named)\n-    sprintf(buf, \"%s+%d\", last_named->name, index - last_named->index_number);\n-  else\n-    sprintf(buf, \"insn %d\", index);\n-\n-  return buf;\n-}\n-\n static void\n output_prologue (void)\n {"}, {"sha": "ad4b5a1135130db10390df17ef015faeb9433880", "filename": "gcc/genpeep.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -426,10 +426,3 @@ from the machine description file `md'.  */\\n\\n\");\n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n-\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  return NULL;\n-}"}, {"sha": "6dbe7d4b9201bd2f619728627a55a24ff92f664a", "filename": "gcc/genpreds.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -492,10 +492,3 @@ main (int argc, char **argv)\n \n   return SUCCESS_EXIT_CODE;\n }\n-\n-/* Dummy for debugging purposes.  */\n-const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}"}, {"sha": "cb86849e9369628ec12e2d62c3a4993ad9e3de06", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -61,10 +61,6 @@\n #define OUTPUT_LABEL(INDENT_STRING, LABEL_NUMBER) \\\n   printf(\"%sL%d: ATTRIBUTE_UNUSED_LABEL\\n\", (INDENT_STRING), (LABEL_NUMBER))\n \n-/* Holds an array of names indexed by insn_code_number.  */\n-static char **insn_name_ptr = 0;\n-static int insn_name_ptr_size = 0;\n-\n /* A listhead of decision trees.  The alternatives to a node are kept\n    in a doubly-linked list so we can easily add nodes to the proper\n    place when merging.  */\n@@ -473,9 +469,6 @@ static struct decision_head make_insn_sequence\n static void process_tree\n   (struct decision_head *, enum routine_type);\n \n-static void record_insn_name\n-  (int, const char *);\n-\n static void debug_decision_0\n   (struct decision *, int, int);\n static void debug_decision_1\n@@ -2189,7 +2182,7 @@ write_action (struct decision *p, struct decision_test *test,\n \t\t    indent, test->u.insn.num_clobbers_to_add);\n \t  printf (\"%sreturn %d;  /* %s */\\n\", indent,\n \t\t  test->u.insn.code_number,\n-\t\t  insn_name_ptr[test->u.insn.code_number]);\n+\t\t  get_insn_name (test->u.insn.code_number));\n \t  break;\n \n \tcase SPLIT:\n@@ -2548,8 +2541,6 @@ make_insn_sequence (rtx insn, enum routine_type type)\n   /* We should never see an insn whose C test is false at compile time.  */\n   gcc_assert (truth);\n \n-  record_insn_name (next_insn_code, (type == RECOG ? XSTR (insn, 0) : NULL));\n-\n   c_test_pos[0] = '\\0';\n   if (type == PEEPHOLE2)\n     {\n@@ -2798,47 +2789,6 @@ main (int argc, char **argv)\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }\n \f\n-/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n-const char *\n-get_insn_name (int code)\n-{\n-  if (code < insn_name_ptr_size)\n-    return insn_name_ptr[code];\n-  else\n-    return NULL;\n-}\n-\n-static void\n-record_insn_name (int code, const char *name)\n-{\n-  static const char *last_real_name = \"insn\";\n-  static int last_real_code = 0;\n-  char *new;\n-\n-  if (insn_name_ptr_size <= code)\n-    {\n-      int new_size;\n-      new_size = (insn_name_ptr_size ? insn_name_ptr_size * 2 : 512);\n-      insn_name_ptr = xrealloc (insn_name_ptr, sizeof(char *) * new_size);\n-      memset (insn_name_ptr + insn_name_ptr_size, 0,\n-\t      sizeof(char *) * (new_size - insn_name_ptr_size));\n-      insn_name_ptr_size = new_size;\n-    }\n-\n-  if (!name || name[0] == '\\0')\n-    {\n-      new = xmalloc (strlen (last_real_name) + 10);\n-      sprintf (new, \"%s+%d\", last_real_name, code - last_real_code);\n-    }\n-  else\n-    {\n-      last_real_name = new = xstrdup (name);\n-      last_real_code = code;\n-    }\n-\n-  insn_name_ptr[code] = new;\n-}\n-\f\n static void\n debug_decision_2 (struct decision_test *test)\n {"}, {"sha": "bbac33a2c8863d496d827f23418ff10c5eb9d907", "filename": "gcc/gensupport.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0458fe77b852f0dc55fd301376ff2a60c52b2ec4/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=0458fe77b852f0dc55fd301376ff2a60c52b2ec4", "patch": "@@ -118,6 +118,7 @@ static void process_define_cond_exec (void);\n static void process_include (rtx, int);\n static char *save_string (const char *, int);\n static void init_predicate_table (void);\n+static void record_insn_name (int, const char *);\n \f\n void\n message_with_line (int lineno, const char *msg, ...)\n@@ -1104,6 +1105,10 @@ read_md_rtx (int *lineno, int *seqnr)\n \tsequence_num++;\n       else if (insn_elision)\n \tgoto discard;\n+\n+      /* *seqnr is used here so the name table will match caller's\n+\t idea of insn numbering, whether or not elision is active.  */\n+      record_insn_name (*seqnr, XSTR (desc, 0));\n       break;\n \n     case DEFINE_SPLIT:\n@@ -1373,3 +1378,50 @@ init_predicate_table (void)\n       add_predicate (pred);\n     }\n }\n+\f\n+/* These functions allow linkage with print-rtl.c.  Also, some generators\n+   like to annotate their output with insn names.  */\n+\n+/* Holds an array of names indexed by insn_code_number.  */\n+static char **insn_name_ptr = 0;\n+static int insn_name_ptr_size = 0;\n+\n+const char *\n+get_insn_name (int code)\n+{\n+  if (code < insn_name_ptr_size)\n+    return insn_name_ptr[code];\n+  else\n+    return NULL;\n+}\n+\n+static void\n+record_insn_name (int code, const char *name)\n+{\n+  static const char *last_real_name = \"insn\";\n+  static int last_real_code = 0;\n+  char *new;\n+\n+  if (insn_name_ptr_size <= code)\n+    {\n+      int new_size;\n+      new_size = (insn_name_ptr_size ? insn_name_ptr_size * 2 : 512);\n+      insn_name_ptr = xrealloc (insn_name_ptr, sizeof(char *) * new_size);\n+      memset (insn_name_ptr + insn_name_ptr_size, 0,\n+\t      sizeof(char *) * (new_size - insn_name_ptr_size));\n+      insn_name_ptr_size = new_size;\n+    }\n+\n+  if (!name || name[0] == '\\0')\n+    {\n+      new = xmalloc (strlen (last_real_name) + 10);\n+      sprintf (new, \"%s+%d\", last_real_name, code - last_real_code);\n+    }\n+  else\n+    {\n+      last_real_name = new = xstrdup (name);\n+      last_real_code = code;\n+    }\n+\n+  insn_name_ptr[code] = new;\n+}"}]}