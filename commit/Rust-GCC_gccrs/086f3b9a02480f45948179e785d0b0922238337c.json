{"sha": "086f3b9a02480f45948179e785d0b0922238337c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2ZjNiOWEwMjQ4MGY0NTk0ODE3OWU3ODVkMGIwOTIyMjM4MzM3Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-21T09:56:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-21T09:56:45Z"}, "message": "re PR c++/50454 (Unexpected problems with -pedantic / -pedantic-errors and __int128 and unsigned __int128 specializations)\n\n/cp\n2011-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50454\n\t* decl.c (grokdeclarator): Consistently handle both __int128\n\tand unsigned __int128 with -pedantic; suppress diagnostic in\n\tsystem headers.\n\n/testsuite\n2011-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50454\n\t* g++.dg/ext/int128-1.C: New.\n\t* g++.dg/ext/int128-2.C: Likewise.\n\t* g++.dg/ext/int128-2.h: Likewise.\n\nFrom-SVN: r179042", "tree": {"sha": "33e0dd9d1eebff7baf5fec4766fb53bd48ccc9c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e0dd9d1eebff7baf5fec4766fb53bd48ccc9c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/086f3b9a02480f45948179e785d0b0922238337c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086f3b9a02480f45948179e785d0b0922238337c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/086f3b9a02480f45948179e785d0b0922238337c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086f3b9a02480f45948179e785d0b0922238337c/comments", "author": null, "committer": null, "parents": [{"sha": "e3e285857d96da68abc12b8e6ff6a585ed3b8b5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e285857d96da68abc12b8e6ff6a585ed3b8b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e285857d96da68abc12b8e6ff6a585ed3b8b5c"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "51230909ed974a29b1ddff1dba3a74ba014cb2e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=086f3b9a02480f45948179e785d0b0922238337c", "patch": "@@ -1,3 +1,10 @@\n+2011-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50454\n+\t* decl.c (grokdeclarator): Consistently handle both __int128\n+\tand unsigned __int128 with -pedantic; suppress diagnostic in\n+\tsystem headers.\n+\n 2011-09-20  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (DECL_TEMPLOID_INSTANTIATION): New."}, {"sha": "86fd2d5a23b944caf8e76e0a54d2d96b0681e520", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=086f3b9a02480f45948179e785d0b0922238337c", "patch": "@@ -8640,6 +8640,18 @@ grokdeclarator (const cp_declarator *declarator,\n \n   ctype = NULL_TREE;\n \n+  if (explicit_int128)\n+    {\n+      if (int128_integer_type_node == NULL_TREE)\n+\t{\n+\t  error (\"%<__int128%> is not supported by this target\");\n+\t  explicit_int128 = false;\n+\t}\n+      else if (pedantic && ! in_system_header)\n+\tpedwarn (input_location, OPT_pedantic,\n+\t\t \"ISO C++ does not support %<__int128%> for %qs\", name);\n+    }\n+\n   /* Now process the modifiers that were specified\n      and check for invalid combinations.  */\n \n@@ -8663,8 +8675,6 @@ grokdeclarator (const cp_declarator *declarator,\n \terror (\"%<signed%> and %<unsigned%> specified together for %qs\", name);\n       else if (longlong && TREE_CODE (type) != INTEGER_TYPE)\n \terror (\"%<long long%> invalid for %qs\", name);\n-      else if (explicit_int128 && TREE_CODE (type) != INTEGER_TYPE)\n-\terror (\"%<__int128%> invalid for %qs\", name);\n       else if (long_p && TREE_CODE (type) == REAL_TYPE)\n \terror (\"%<long%> invalid for %qs\", name);\n       else if (short_p && TREE_CODE (type) == REAL_TYPE)\n@@ -8695,22 +8705,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t      if (flag_pedantic_errors)\n \t\tok = 0;\n \t    }\n-\t  if (explicit_int128)\n-\t    {\n-\t      if (int128_integer_type_node == NULL_TREE)\n-\t        {\n-\t\t  error (\"%<__int128%> is not supported by this target\");\n-\t\t  ok = 0;\n-\t        }\n-\t      else if (pedantic)\n-\t\t{\n-\t\t  pedwarn (input_location, OPT_pedantic,\n-\t\t\t   \"ISO C++ does not support %<__int128%> for %qs\",\n-\t\t\t   name);\n-\t\t  if (flag_pedantic_errors)\n-\t\t    ok = 0;\n-\t\t}\n-\t    }\n \t}\n \n       /* Discard the type modifiers if they are invalid.  */\n@@ -8721,7 +8715,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t  long_p = false;\n \t  short_p = false;\n \t  longlong = 0;\n-\t  explicit_int128 = false;\n \t}\n     }\n "}, {"sha": "cba634168177e5d9d862464d7e57f9f234faa6c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=086f3b9a02480f45948179e785d0b0922238337c", "patch": "@@ -1,3 +1,10 @@\n+2011-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50454\n+\t* g++.dg/ext/int128-1.C: New.\n+\t* g++.dg/ext/int128-2.C: Likewise.\n+\t* g++.dg/ext/int128-2.h: Likewise.\n+\n 2011-09-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/50469\n@@ -11,9 +18,9 @@\n \tPR c++/50442\n \t* g++.dg/overload/ref-conv1.C: New.\n \n-2011-09-20 Roberto Agostino Vitillo <ravitillo@lbl.gov>\n+2011-09-20  Roberto Agostino Vitillo  <ravitillo@lbl.gov>\n \n-\t* g++.dg/other/final1.C: new test\n+\t* g++.dg/other/final1.C: New.\n \n 2011-09-20  Ira Rosen  <ira.rosen@linaro.org>\n "}, {"sha": "65540e84841f31130be459c22a51867fc0af0e20", "filename": "gcc/testsuite/g++.dg/ext/int128-1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-1.C?ref=086f3b9a02480f45948179e785d0b0922238337c", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/50454\n+// { dg-do compile { target int128 } }\n+\n+template<typename T>\n+  struct limits;\n+\n+template<>\n+  struct limits<__int128> { }; // { dg-error \"does not support\" }\n+\n+template<>\n+  struct limits<unsigned __int128> { }; // { dg-error \"does not support\" }"}, {"sha": "36a3f1a44d1b6a5179dbe3885593da6b4cd173f7", "filename": "gcc/testsuite/g++.dg/ext/int128-2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-2.C?ref=086f3b9a02480f45948179e785d0b0922238337c", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/50454\n+// { dg-do compile { target int128 } }\n+\n+#include \"int128-2.h\""}, {"sha": "4e441be8d0ddac2f27e8f82051a190a3aa300d43", "filename": "gcc/testsuite/g++.dg/ext/int128-2.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086f3b9a02480f45948179e785d0b0922238337c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-2.h?ref=086f3b9a02480f45948179e785d0b0922238337c", "patch": "@@ -0,0 +1,10 @@\n+#pragma GCC system_header\n+\n+template<typename T>\n+  struct limits;\n+\n+template<>\n+  struct limits<__int128> { };\n+\n+template<>\n+  struct limits<unsigned __int128> { };"}]}