{"sha": "d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAxYjJjMjFjZjJkNzJjNTUyYWZkYTdlZDc5NmM1NTg0ZDExZDlmMw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2014-04-27T10:48:56Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2014-04-27T10:48:56Z"}, "message": "re PR fortran/59604 (Constant comparisons with -fno-range-check and int(z'...'))\n\n2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/59604\n\tPR fortran/58003\n\t* gfortran.h (gfc_convert_mpz_to_signed):  Add prototype.\n\t* arith.c (gfc_int2int):  Convert number to signed if\n\tarithmetic overflow is not checked.\n\t* simplify.c (convert_mpz_to_unsigned): Only trigger assert for\n\tsize if range checking is in force.\n\t(convert_mpz_to_signed):  Make non-static, rename to\n\t(gfc_convert_mpz_to_signed).\n\t(simplify_dshift): Use gfc_convert_mpz_to_signed.\n\t(gfc_simplify_ibclr):  Likewise.\n\t(gfc_simplify_ibits):  Likewise.\n\t(gfc_simplify_ibset):  Likewise.\n\t(simplify_shift):  Likewise.\n\t(gfc_simplify_ishiftc):  Likewise.\n\t(gfc_simplify_maskr):  Likewise.\n\t(gfc_simplify_maskl):  Likewise.\n\n2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/59604\n\tPR fortran/58003\n\t* gfortran.dg/no_range_check_3.f90:  New test.\n\nFrom-SVN: r209836", "tree": {"sha": "df8990f63d71efb8bb9c81ebabcbf81b51cbef68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df8990f63d71efb8bb9c81ebabcbf81b51cbef68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/comments", "author": null, "committer": null, "parents": [{"sha": "0a8dbb046ca7ee236301af33d742caf85d6611b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8dbb046ca7ee236301af33d742caf85d6611b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8dbb046ca7ee236301af33d742caf85d6611b9"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "5cf25134e30787ed3646ac6977536dec3924fca9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "patch": "@@ -1,3 +1,23 @@\n+2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/59604\n+\tPR fortran/58003\n+\t* gfortran.h (gfc_convert_mpz_to_signed):  Add prototype.\n+\t* arith.c (gfc_int2int):  Convert number to signed if\n+\tarithmetic overflow is not checked.\n+\t* simplify.c (convert_mpz_to_unsigned): Only trigger assert for\n+\tsize if range checking is in force.\n+\t(convert_mpz_to_signed):  Make non-static, rename to\n+\t(gfc_convert_mpz_to_signed).\n+\t(simplify_dshift): Use gfc_convert_mpz_to_signed.\n+\t(gfc_simplify_ibclr):  Likewise.\n+\t(gfc_simplify_ibits):  Likewise.\n+\t(gfc_simplify_ibset):  Likewise.\n+\t(simplify_shift):  Likewise.\n+\t(gfc_simplify_ishiftc):  Likewise.\n+\t(gfc_simplify_maskr):  Likewise.\n+\t(gfc_simplify_maskl):  Likewise.\n+\n 2014-04-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/60881"}, {"sha": "a05fa4907a4d8233905d80084d655e2d00b8c98b", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "patch": "@@ -1976,6 +1976,17 @@ gfc_int2int (gfc_expr *src, int kind)\n \t}\n     }\n \n+  /*  If we do not trap numeric overflow, we need to convert the number to\n+      signed, throwing away high-order bits if necessary.  */\n+  if (gfc_option.flag_range_check == 0)\n+    {\n+      int k;\n+\n+      k = gfc_validate_kind (BT_INTEGER, kind, false);\n+      gfc_convert_mpz_to_signed (result->value.integer,\n+\t\t\t\t gfc_integer_kinds[k].bit_size);\n+    }\n+\n   return result;\n }\n "}, {"sha": "f0eed809ab8a4e32f5be47c9247db5193d520d0a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "patch": "@@ -3022,4 +3022,8 @@ typedef int (*walk_expr_fn_t) (gfc_expr **, int *, void *);\n int gfc_expr_walker (gfc_expr **, walk_expr_fn_t, void *);\n int gfc_code_walker (gfc_code **, walk_code_fn_t, walk_expr_fn_t, void *);\n \n+/* simplify.c */\n+\n+void gfc_convert_mpz_to_signed (mpz_t, int);\n+\n #endif /* GCC_GFORTRAN_H  */"}, {"sha": "1b6cd5bc4c1ed7789bbf3554e2cdd59d1666937e", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "patch": "@@ -151,8 +151,10 @@ convert_mpz_to_unsigned (mpz_t x, int bitsize)\n \n   if (mpz_sgn (x) < 0)\n     {\n-      /* Confirm that no bits above the signed range are unset.  */\n-      gcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);\n+      /* Confirm that no bits above the signed range are unset if we\n+\t are doing range checking.  */\n+      if (gfc_option.flag_range_check != 0)\n+\tgcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);\n \n       mpz_init_set_ui (mask, 1);\n       mpz_mul_2exp (mask, mask, bitsize);\n@@ -175,13 +177,15 @@ convert_mpz_to_unsigned (mpz_t x, int bitsize)\n    If the bitsize-1 bit is set, this is taken as a sign bit and\n    the number is converted to the corresponding negative number.  */\n \n-static void\n-convert_mpz_to_signed (mpz_t x, int bitsize)\n+void\n+gfc_convert_mpz_to_signed (mpz_t x, int bitsize)\n {\n   mpz_t mask;\n \n-  /* Confirm that no bits above the unsigned range are set.  */\n-  gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);\n+  /* Confirm that no bits above the unsigned range are set if we are\n+     doing range checking.  */\n+  if (gfc_option.flag_range_check != 0)\n+    gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);\n \n   if (mpz_tstbit (x, bitsize - 1) == 1)\n     {\n@@ -1943,7 +1947,7 @@ simplify_dshift (gfc_expr *arg1, gfc_expr *arg2, gfc_expr *shiftarg,\n       mpz_setbit (result->value.integer, shift + i);\n \n   /* Convert to a signed value.  */\n-  convert_mpz_to_signed (result->value.integer, size);\n+  gfc_convert_mpz_to_signed (result->value.integer, size);\n \n   return result;\n }\n@@ -2561,7 +2565,7 @@ gfc_simplify_ibclr (gfc_expr *x, gfc_expr *y)\n \n   mpz_clrbit (result->value.integer, pos);\n \n-  convert_mpz_to_signed (result->value.integer,\n+  gfc_convert_mpz_to_signed (result->value.integer,\n \t\t\t gfc_integer_kinds[k].bit_size);\n \n   return result;\n@@ -2619,7 +2623,7 @@ gfc_simplify_ibits (gfc_expr *x, gfc_expr *y, gfc_expr *z)\n \n   free (bits);\n \n-  convert_mpz_to_signed (result->value.integer,\n+  gfc_convert_mpz_to_signed (result->value.integer,\n \t\t\t gfc_integer_kinds[k].bit_size);\n \n   return result;\n@@ -2646,7 +2650,7 @@ gfc_simplify_ibset (gfc_expr *x, gfc_expr *y)\n \n   mpz_setbit (result->value.integer, pos);\n \n-  convert_mpz_to_signed (result->value.integer,\n+  gfc_convert_mpz_to_signed (result->value.integer,\n \t\t\t gfc_integer_kinds[k].bit_size);\n \n   return result;\n@@ -3093,7 +3097,7 @@ simplify_shift (gfc_expr *e, gfc_expr *s, const char *name,\n \t}\n     }\n \n-  convert_mpz_to_signed (result->value.integer, bitsize);\n+  gfc_convert_mpz_to_signed (result->value.integer, bitsize);\n   free (bits);\n \n   return result;\n@@ -3234,7 +3238,7 @@ gfc_simplify_ishftc (gfc_expr *e, gfc_expr *s, gfc_expr *sz)\n \t}\n     }\n \n-  convert_mpz_to_signed (result->value.integer, isize);\n+  gfc_convert_mpz_to_signed (result->value.integer, isize);\n \n   free (bits);\n   return result;\n@@ -3954,7 +3958,7 @@ gfc_simplify_maskr (gfc_expr *i, gfc_expr *kind_arg)\n   mpz_mul_2exp (result->value.integer, result->value.integer, arg);\n   mpz_sub_ui (result->value.integer, result->value.integer, 1);\n \n-  convert_mpz_to_signed (result->value.integer, gfc_integer_kinds[k].bit_size);\n+  gfc_convert_mpz_to_signed (result->value.integer, gfc_integer_kinds[k].bit_size);\n \n   return result;\n }\n@@ -3990,7 +3994,7 @@ gfc_simplify_maskl (gfc_expr *i, gfc_expr *kind_arg)\n   mpz_sub (result->value.integer, z, result->value.integer);\n   mpz_clear (z);\n \n-  convert_mpz_to_signed (result->value.integer, gfc_integer_kinds[k].bit_size);\n+  gfc_convert_mpz_to_signed (result->value.integer, gfc_integer_kinds[k].bit_size);\n \n   return result;\n }"}, {"sha": "ba21fed78f3a5666f15bb7309f4b0a5d87abd888", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "patch": "@@ -1,3 +1,9 @@\n+2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/59604\n+\tPR fortran/58003\n+\t* gfortran.dg/no_range_check_3.f90:  New test.\n+\n 2014-04-26  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/52539"}, {"sha": "24223af5b3837520bf2d11e8b13fe618d1a0c4c4", "filename": "gcc/testsuite/gfortran.dg/no_range_check_3.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01b2c21cf2d72c552afda7ed796c5584d11d9f3/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_3.f90?ref=d01b2c21cf2d72c552afda7ed796c5584d11d9f3", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! { dg-options \"-fno-range-check\" }\n+program test\n+  integer :: i\n+  i = int(z'FFFFFFFF',kind(i))\n+  if (i /= -1) call abort\n+  if (int(z'FFFFFFFF',kind(i)) /= -1) call abort\n+\n+  if (popcnt(int(z'0F00F00080000001',8)) /= 10) call abort\n+  if (popcnt(int(z'800F0001',4)) /= 6) call abort\n+\n+end program test"}]}