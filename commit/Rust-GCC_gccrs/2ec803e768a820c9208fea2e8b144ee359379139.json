{"sha": "2ec803e768a820c9208fea2e8b144ee359379139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjODAzZTc2OGE4MjBjOTIwOGZlYTJlOGIxNDRlZTM1OTM3OTEzOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-10T21:39:54Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-08-13T00:53:35Z"}, "message": "c++: Fixing the wording of () aggregate-init [PR92812]\n\nP1975R0 tweaks the static_cast wording: it says that \"An expression e can be\nexplicitly converted to a type T if [...] T is an aggregate type having a first\nelement x and there is an implicit conversion sequence from e to the type of\nx.\"  This already works for classes, e.g.:\n\n  struct Aggr { int x; int y; };\n  Aggr a = static_cast<Aggr>(1);\n\nfor which we create TARGET_EXPR <D.2111, {.x=1}>.\n\nThe proposal also mentions \"If T is ``array of unknown bound of U'',\nthis direct-initialization defines the type of the expression as U[1]\" which\nsuggest that this should work for arrays (they're aggregates too, after all):\n\n  int (&&r)[3] = static_cast<int[3]>(42);\n  int (&&r2)[1] = static_cast<int[]>(42);\n\nSo I handled that specifically in build_static_cast_1: wrap the\nexpression in { } and initialize from that.  For the 'r' case above\nthis creates TARGET_EXPR <D.2083, {42}>.\n\nThere are multiple things in play, as usual, so the tests test brace\nelision, narrowing, explicit constructors, and lifetime extension too.\nI think it's in line with what we discussed on the core reflector.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/92812\n\t* typeck.c (build_static_cast_1): Implement P1975R0 by allowing\n\tstatic_cast to aggregate type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/92812\n\t* g++.dg/cpp2a/paren-init27.C: New test.\n\t* g++.dg/cpp2a/paren-init28.C: New test.\n\t* g++.dg/cpp2a/paren-init29.C: New test.\n\t* g++.dg/cpp2a/paren-init30.C: New test.\n\t* g++.dg/cpp2a/paren-init31.C: New test.\n\t* g++.dg/cpp2a/paren-init32.C: New test.", "tree": {"sha": "c4b048520c0be28004ec167a05e26136311aa62d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b048520c0be28004ec167a05e26136311aa62d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec803e768a820c9208fea2e8b144ee359379139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec803e768a820c9208fea2e8b144ee359379139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec803e768a820c9208fea2e8b144ee359379139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec803e768a820c9208fea2e8b144ee359379139/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afdd220a0ccf9d5a689b6aceccd8327213a51b9b"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "9166156a5d53748aa5f4d59f90c7f3a54e6be54f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2ec803e768a820c9208fea2e8b144ee359379139", "patch": "@@ -7480,6 +7480,20 @@ build_static_cast_1 (location_t loc, tree type, tree expr, bool c_cast_p,\n      t.  */\n   result = perform_direct_initialization_if_possible (type, expr,\n \t\t\t\t\t\t      c_cast_p, complain);\n+  /* P1975 allows static_cast<Aggr>(42), as well as static_cast<T[5]>(42),\n+     which initialize the first element of the aggregate.  We need to handle\n+     the array case specifically.  */\n+  if (result == NULL_TREE\n+      && cxx_dialect >= cxx20\n+      && TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      /* Create { EXPR } and perform direct-initialization from it.  */\n+      tree e = build_constructor_single (init_list_type_node, NULL_TREE, expr);\n+      CONSTRUCTOR_IS_DIRECT_INIT (e) = true;\n+      CONSTRUCTOR_IS_PAREN_INIT (e) = true;\n+      result = perform_direct_initialization_if_possible (type, e, c_cast_p,\n+\t\t\t\t\t\t\t  complain);\n+    }\n   if (result)\n     {\n       if (processing_template_decl)"}, {"sha": "0b8cbe33b697de0577fdc4a7e7daddbea5307f0b", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init27.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init27.C?ref=2ec803e768a820c9208fea2e8b144ee359379139", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/92812\n+// P1975R0\n+// { dg-do run { target c++20 } }\n+// { dg-options \"-Wall -Wextra\" }\n+\n+struct Aggr { int x; int y; };\n+struct Base { int i; Base(int i_) : i{i_} { } };\n+struct BaseAggr : Base { };\n+struct X { };\n+struct AggrSDM { static X x; int i; int j; };\n+\n+int\n+main ()\n+{\n+  Aggr a = static_cast<Aggr>(42); // { dg-warning \"missing initializer\" }\n+  if (a.x != 42 || a.y != 0)\n+    __builtin_abort ();\n+  BaseAggr b = static_cast<BaseAggr>(42);\n+  if (b.i != 42)\n+    __builtin_abort ();\n+  AggrSDM s = static_cast<AggrSDM>(42); // { dg-warning \"missing initializer\" }\n+  if (s.i != 42 || s.j != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "8c57dc8e15533a79350bdb074e51c95d7f3d3c0b", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init28.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init28.C?ref=2ec803e768a820c9208fea2e8b144ee359379139", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/92812\n+// P1975R0\n+// { dg-do compile { target c++20 } }\n+\n+// In both cases the reference declarations lifetime-extend the array\n+// temporary.\n+int (&&r)[3] = static_cast<int[3]>(42);\n+int (&&r2)[1] = static_cast<int[]>(42);\n+\n+// Make sure we've lifetime-extended.\n+// { dg-final { scan-assembler \"_ZGR1r_\" } }\n+// { dg-final { scan-assembler \"_ZGR2r2_\" } }\n+\n+// Narrowing is probably OK here.\n+int (&&r3)[1] = static_cast<int[1]>(1.3);"}, {"sha": "c39cd8cc0d09fc7dd9e2b72a857ebe45ea16df5a", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init29.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init29.C?ref=2ec803e768a820c9208fea2e8b144ee359379139", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/92812\n+// P1975R0\n+// { dg-do run { target c++20 } }\n+\n+int (&&r)[3] = static_cast<int[3]>(42);\n+int (&&r2)[1] = static_cast<int[]>(42);\n+\n+int\n+main ()\n+{\n+  if (r[0] != 42 || r[1] != 0 || r[2] != 0)\n+    __builtin_abort ();\n+  if (r2[0] != 42 || sizeof (r2) != sizeof (int))\n+    __builtin_abort ();\n+}"}, {"sha": "6b2e86f00f47014ebb2472867c186b78fd88fee2", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init30.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init30.C?ref=2ec803e768a820c9208fea2e8b144ee359379139", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/92812\n+// P1975R0\n+// { dg-do compile { target c++20 } }\n+\n+struct S1 {\n+  int i;\n+  int j;\n+};\n+\n+struct S2 {\n+  S1 s[4];\n+};\n+\n+struct S3 {\n+  S2 s2;\n+};\n+\n+void\n+f ()\n+{\n+  // Brace elision not allowed.\n+  auto s3 = static_cast<S3>(1); // { dg-error \"could not convert\" }\n+}"}, {"sha": "3600c4993a58e1e61ef465f064ec828ec5275ae0", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init31.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init31.C?ref=2ec803e768a820c9208fea2e8b144ee359379139", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/92812\n+// P1975R0\n+// { dg-do compile { target c++20 } }\n+// Test we don't lifetime-extend the int temporary.\n+\n+struct A { const int &r; };\n+A a(42);\n+auto a2 = static_cast<A>(42);\n+\n+// { dg-final { scan-assembler-not \"_ZGR\" } }"}, {"sha": "bf7833ebd5bc32fc06d040166b6721b60aebb0ff", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init32.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec803e768a820c9208fea2e8b144ee359379139/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init32.C?ref=2ec803e768a820c9208fea2e8b144ee359379139", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/92812\n+// P1975R0\n+// { dg-do compile { target c++20 } }\n+\n+struct A { int i; };\n+struct A2 { int i; A2(int); };\n+struct A3 { int i; explicit A3(int); };\n+\n+struct X { A a; };\n+auto x = static_cast<X>(42); // { dg-error \"could not convert\" }\n+\n+struct X2 { A2 a; };\n+auto x2 = static_cast<X2>(42);\n+\n+struct X3 { A3 a; };\n+// Aggregate-initialization copy-initializes, so the explicit ctor\n+// isn't considered.\n+auto x3 = static_cast<X3>(42); // { dg-error \"could not convert\" }\n+\n+struct NonAggr { int i; virtual void foo (); };\n+auto x4 = static_cast<NonAggr>(42); // { dg-error \"no matching\" }"}]}