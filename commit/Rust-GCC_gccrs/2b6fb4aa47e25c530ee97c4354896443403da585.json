{"sha": "2b6fb4aa47e25c530ee97c4354896443403da585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI2ZmI0YWE0N2UyNWM1MzBlZTk3YzQzNTQ4OTY0NDM0MDNkYTU4NQ==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2015-08-27T18:20:45Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2015-08-27T18:20:45Z"}, "message": "vector.md (vec_shr_<mode>): Fix to do a shift instead of a rotate.\n\n\t* config/rs6000/vector.md (vec_shr_<mode>): Fix to do a shift\n\tinstead of a rotate.\n\n\t* gcc.target/powerpc/vec-shr.c: New.\n\nFrom-SVN: r227270", "tree": {"sha": "b2cec59ef3a583ee196b3de9541aa025bd9713c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2cec59ef3a583ee196b3de9541aa025bd9713c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b6fb4aa47e25c530ee97c4354896443403da585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6fb4aa47e25c530ee97c4354896443403da585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b6fb4aa47e25c530ee97c4354896443403da585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6fb4aa47e25c530ee97c4354896443403da585/comments", "author": null, "committer": null, "parents": [{"sha": "b7e36a33eb4b756440b9a93f812414a42800f38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e36a33eb4b756440b9a93f812414a42800f38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e36a33eb4b756440b9a93f812414a42800f38b"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "0cf325faf998aadd147efdfb5b7afd5366282547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b6fb4aa47e25c530ee97c4354896443403da585", "patch": "@@ -1,3 +1,8 @@\n+2015-08-27  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* config/rs6000/vector.md (vec_shr_<mode>): Fix to do a shift\n+\tinstead of a rotate.\n+\n 2015-08-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/67005"}, {"sha": "8821dec59891c03a7188791d427664653a57a486", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=2b6fb4aa47e25c530ee97c4354896443403da585", "patch": "@@ -977,6 +977,8 @@\n ;; General shift amounts can be supported using vsro + vsr. We're\n ;; not expecting to see these yet (the vectorizer currently\n ;; generates only shifts by a whole number of vector elements).\n+;; Note that the vec_shr operation is actually defined as \n+;; 'shift toward element 0' so is a shr for LE and shl for BE.\n (define_expand \"vec_shr_<mode>\"\n   [(match_operand:VEC_L 0 \"vlogical_operand\" \"\")\n    (match_operand:VEC_L 1 \"vlogical_operand\" \"\")\n@@ -987,6 +989,7 @@\n   rtx bitshift = operands[2];\n   rtx shift;\n   rtx insn;\n+  rtx zero_reg, op1, op2;\n   HOST_WIDE_INT bitshift_val;\n   HOST_WIDE_INT byteshift_val;\n \n@@ -996,19 +999,29 @@\n   if (bitshift_val & 0x7)\n     FAIL;\n   byteshift_val = (bitshift_val >> 3);\n+  zero_reg = gen_reg_rtx (<MODE>mode);\n+  emit_move_insn (zero_reg, CONST0_RTX (<MODE>mode));\n   if (!BYTES_BIG_ENDIAN)\n-    byteshift_val = 16 - byteshift_val;\n+    {\n+      byteshift_val = 16 - byteshift_val;\n+      op1 = zero_reg;\n+      op2 = operands[1];\n+    }\n+  else\n+    {\n+      op1 = operands[1];\n+      op2 = zero_reg;\n+    }\n+\n   if (TARGET_VSX && (byteshift_val & 0x3) == 0)\n     {\n       shift = gen_rtx_CONST_INT (QImode, byteshift_val >> 2);\n-      insn = gen_vsx_xxsldwi_<mode> (operands[0], operands[1], operands[1],\n-\t\t\t\t     shift);\n+      insn = gen_vsx_xxsldwi_<mode> (operands[0], op1, op2, shift);\n     }\n   else\n     {\n       shift = gen_rtx_CONST_INT (QImode, byteshift_val);\n-      insn = gen_altivec_vsldoi_<mode> (operands[0], operands[1], operands[1],\n-\t\t\t\t\tshift);\n+      insn = gen_altivec_vsldoi_<mode> (operands[0], op1, op2, shift);\n     }\n \n   emit_insn (insn);"}, {"sha": "8f1e24ca6924f88af1c4378a87c389db643f0f7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b6fb4aa47e25c530ee97c4354896443403da585", "patch": "@@ -1,3 +1,7 @@\n+2015-08-27  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-shr.c: New.\n+\n 2015-08-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/67005"}, {"sha": "31a27c8832dd561af65ce65b80cb2c78f1de442c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-shr.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-shr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6fb4aa47e25c530ee97c4354896443403da585/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-shr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-shr.c?ref=2b6fb4aa47e25c530ee97c4354896443403da585", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-inline\" } */\n+\n+#include <stdlib.h>\n+\n+typedef struct { double r, i; } complex;\n+#define LEN 30\n+complex c[LEN];\n+double d[LEN];\n+\n+void\n+foo (complex *c, double *d, int len1)\n+{\n+  int i;\n+  for (i = 0; i < len1; i++)\n+    {\n+      c[i].r = d[i];\n+      c[i].i = 0.0;\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  int i;\n+  for (i = 0; i < LEN; i++)\n+    d[i] = (double) i;\n+  foo (c, d, LEN);\n+  for (i=0;i<LEN;i++)\n+    if ((c[i].r != (double) i) || (c[i].i != 0.0))\n+      abort ();\n+  return 0;\n+}\n+"}]}