{"sha": "2a5fce6d487573f7f330d721da83fd9881fdb06a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE1ZmNlNmQ0ODc1NzNmN2YzMzBkNzIxZGE4M2ZkOTg4MWZkYjA2YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-11T11:49:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-11T11:49:29Z"}, "message": "re PR other/31852 (Missing __builtin_memchr)\n\n2007-05-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR other/31852\n\t* builtin-types.def: Add BT_FN_PTR_CONST_PTR_INT_SIZE.\n\t* builtins.def: Add BUILT_IN_MEMCHR, use the latter.\n\t* builtins.c (fold_builtin_memchr): New.\n\t(expand_builtin_memchr): Call the latter.\n\t(expand_builtin, fold_builtin_3): Deal with BUILT_IN_MEMCHR.\n\t* doc/extend.texi ([Other built-in functions provided by GCC]):\n\tDocument memchr.\n\n/testsuite\n2007-05-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR other/31852\n\t* gcc.c-torture/execute/builtins/memchr.c: New.\n\t* gcc.c-torture/execute/builtins/memchr-lib.c: New.\n\t* gcc.c-torture/execute/builtins/lib/memchr.c: New.\n\nFrom-SVN: r124617", "tree": {"sha": "fb56c76682615c7dad204ce522509be79c7b200d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb56c76682615c7dad204ce522509be79c7b200d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a5fce6d487573f7f330d721da83fd9881fdb06a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5fce6d487573f7f330d721da83fd9881fdb06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a5fce6d487573f7f330d721da83fd9881fdb06a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5fce6d487573f7f330d721da83fd9881fdb06a/comments", "author": null, "committer": null, "parents": [{"sha": "fc2d8680dde7cdf9a19f0007a3a2ae49c7e0aa36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2d8680dde7cdf9a19f0007a3a2ae49c7e0aa36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2d8680dde7cdf9a19f0007a3a2ae49c7e0aa36"}], "stats": {"total": 173, "additions": 164, "deletions": 9}, "files": [{"sha": "aee5d83ac9dfd3fb3331acb13cc107ddab2eec28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -1,3 +1,14 @@\n+2007-05-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR other/31852\n+\t* builtin-types.def: Add BT_FN_PTR_CONST_PTR_INT_SIZE.\n+\t* builtins.def: Add BUILT_IN_MEMCHR, use the latter.\n+\t* builtins.c (fold_builtin_memchr): New.\n+\t(expand_builtin_memchr): Call the latter.\n+\t(expand_builtin, fold_builtin_3): Deal with BUILT_IN_MEMCHR.\n+\t* doc/extend.texi ([Other built-in functions provided by GCC]):\n+\tDocument memchr.\n+\n 2007-05-11  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (GPR0_REGNUM, FPR0_REGNUM, FPR2_REGNUM,"}, {"sha": "bab6b9deaf52eeb70e456fe86a0560e4b597fad0", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -371,6 +371,8 @@ DEF_FUNCTION_TYPE_3 (BT_FN_I16_VPTR_I16_I16, BT_I16, BT_VOLATILE_PTR,\n \t\t     BT_I16, BT_I16)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_OMPFN_PTR_UINT, BT_VOID, BT_PTR_FN_VOID_PTR,\n \t\t     BT_PTR, BT_UINT)\n+DEF_FUNCTION_TYPE_3 (BT_FN_PTR_CONST_PTR_INT_SIZE, BT_PTR,\n+\t\t     BT_CONST_PTR, BT_INT, BT_SIZE)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_FILEPTR)"}, {"sha": "48c0cc0871ffab6b5b4ad75fff89b7b7a944c116", "filename": "gcc/builtins.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -105,6 +105,7 @@ static rtx expand_builtin_next_arg (void);\n static rtx expand_builtin_va_start (tree);\n static rtx expand_builtin_va_end (tree);\n static rtx expand_builtin_va_copy (tree);\n+static rtx expand_builtin_memchr (tree, rtx, enum machine_mode);\n static rtx expand_builtin_memcmp (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strcmp (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strncmp (tree, rtx, enum machine_mode);\n@@ -172,6 +173,7 @@ static tree fold_builtin_int_roundingfn (tree, tree);\n static tree fold_builtin_bitop (tree, tree);\n static tree fold_builtin_memory_op (tree, tree, tree, tree, bool, int);\n static tree fold_builtin_strchr (tree, tree, tree);\n+static tree fold_builtin_memchr (tree, tree, tree, tree);\n static tree fold_builtin_memcmp (tree, tree, tree);\n static tree fold_builtin_strcmp (tree, tree);\n static tree fold_builtin_strncmp (tree, tree, tree);\n@@ -3978,6 +3980,26 @@ expand_builtin_bzero (tree exp)\n \t\t\t\t     const0_rtx, VOIDmode, exp);\n }\n \n+/* Expand a call to the memchr builtin.  Return NULL_RTX if we failed the\n+   caller should emit a normal call, otherwise try to get the result\n+   in TARGET, if convenient (and in mode MODE if that's convenient).  */\n+\n+static rtx\n+expand_builtin_memchr (tree exp, rtx target, enum machine_mode mode)\n+{\n+  if (validate_arglist (exp, POINTER_TYPE, INTEGER_TYPE,\n+\t\t\tINTEGER_TYPE, VOID_TYPE))\n+    {\n+      tree type = TREE_TYPE (exp);\n+      tree result = fold_builtin_memchr (CALL_EXPR_ARG (exp, 0),\n+\t\t\t\t\t CALL_EXPR_ARG (exp, 1),\n+\t\t\t\t\t CALL_EXPR_ARG (exp, 2), type);\n+      if (result)\n+\treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n+    }\n+  return NULL_RTX;\n+}\n+\n /* Expand expression EXP, which is a call to the memcmp built-in function.\n    Return NULL_RTX if we failed and the\n    caller should emit a normal call, otherwise try to get the result in\n@@ -6345,6 +6367,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    case BUILT_IN_MEMCHR:\n+      target = expand_builtin_memchr (exp, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     case BUILT_IN_BCMP:\n     case BUILT_IN_MEMCMP:\n       target = expand_builtin_memcmp (exp, target, mode);\n@@ -8654,6 +8682,48 @@ fold_builtin_strncpy (tree fndecl, tree dest, tree src, tree len, tree slen)\n \t\t       build_call_expr (fn, 3, dest, src, len));\n }\n \n+/* Fold function call to builtin memchr.  ARG1, ARG2 and LEN are the\n+   arguments to the call, and TYPE is its return type.\n+   Return NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_memchr (tree arg1, tree arg2, tree len, tree type)\n+{\n+  if (!validate_arg (arg1, POINTER_TYPE)\n+      || !validate_arg (arg2, INTEGER_TYPE)\n+      || !validate_arg (len, INTEGER_TYPE))\n+    return NULL_TREE;\n+  else\n+    {\n+      const char *p1;\n+\n+      if (TREE_CODE (arg2) != INTEGER_CST\n+\t  || !host_integerp (len, 1))\n+\treturn NULL_TREE;\n+\n+      p1 = c_getstr (arg1);\n+      if (p1 && compare_tree_int (len, strlen (p1) + 1) <= 0)\n+\t{\n+\t  char c;\n+\t  const char *r;\n+\t  tree tem;\n+\n+\t  if (target_char_cast (arg2, &c))\n+\t    return NULL_TREE;\n+\n+\t  r = memchr (p1, c, tree_low_cst (len, 1));\n+\n+\t  if (r == NULL)\n+\t    return build_int_cst (TREE_TYPE (arg1), 0);\n+\n+\t  tem = fold_build2 (PLUS_EXPR, TREE_TYPE (arg1), arg1,\n+\t\t\t     build_int_cst (TREE_TYPE (arg1), r - p1));\n+\t  return fold_convert (type, tem);\n+\t}\n+      return NULL_TREE;\n+    }\n+}\n+\n /* Fold function call to builtin memcmp with arguments ARG1 and ARG2.\n    Return NULL_TREE if no simplification can be made.  */\n \n@@ -9983,6 +10053,9 @@ fold_builtin_3 (tree fndecl, tree arg0, tree arg1, tree arg2, bool ignore)\n     case BUILT_IN_STRNCMP:\n       return fold_builtin_strncmp (arg0, arg1, arg2);\n \n+    case BUILT_IN_MEMCHR:\n+      return fold_builtin_memchr (arg0, arg1, arg2, type);\n+\n     case BUILT_IN_BCMP:\n     case BUILT_IN_MEMCMP:\n       return fold_builtin_memcmp (arg0, arg1, arg2);;"}, {"sha": "1c17edb211893e601582266d8b3dfa115c4322bb", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -502,6 +502,7 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_BCMP, \"bcmp\", BT_FN_INT_CONST_PTR_CONST_PTR_SIZ\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_BCOPY, \"bcopy\", BT_FN_VOID_CONST_PTR_PTR_SIZE, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_BZERO, \"bzero\", BT_FN_VOID_PTR_SIZE, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_INDEX, \"index\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL)\n+DEF_LIB_BUILTIN        (BUILT_IN_MEMCHR, \"memchr\", BT_FN_PTR_CONST_PTR_INT_SIZE, ATTR_PURE_NOTHROW_NONNULL)\n DEF_LIB_BUILTIN        (BUILT_IN_MEMCMP, \"memcmp\", BT_FN_INT_CONST_PTR_CONST_PTR_SIZE, ATTR_PURE_NOTHROW_NONNULL)\n DEF_LIB_BUILTIN        (BUILT_IN_MEMCPY, \"memcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL)\n DEF_LIB_BUILTIN        (BUILT_IN_MEMMOVE, \"memmove\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL)"}, {"sha": "574bc12776826053f374ba0b847460863128dabf", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -5592,6 +5592,7 @@ should be called and the @var{flag} argument passed to it.\n @findex lroundf\n @findex lroundl\n @findex malloc\n+@findex memchr\n @findex memcmp\n @findex memcpy\n @findex mempcpy\n@@ -5836,14 +5837,14 @@ The ISO C90 functions\n @code{isgraph}, @code{islower}, @code{isprint}, @code{ispunct},\n @code{isspace}, @code{isupper}, @code{isxdigit}, @code{tolower},\n @code{toupper}, @code{labs}, @code{ldexp}, @code{log10}, @code{log},\n-@code{malloc}, @code{memcmp}, @code{memcpy}, @code{memset}, @code{modf},\n-@code{pow}, @code{printf}, @code{putchar}, @code{puts}, @code{scanf},\n-@code{sinh}, @code{sin}, @code{snprintf}, @code{sprintf}, @code{sqrt},\n-@code{sscanf}, @code{strcat}, @code{strchr}, @code{strcmp},\n-@code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat},\n-@code{strncmp}, @code{strncpy}, @code{strpbrk}, @code{strrchr},\n-@code{strspn}, @code{strstr}, @code{tanh}, @code{tan}, @code{vfprintf},\n-@code{vprintf} and @code{vsprintf}\n+@code{malloc}, @code{memchr}, @code{memcmp}, @code{memcpy},\n+@code{memset}, @code{modf}, @code{pow}, @code{printf}, @code{putchar},\n+@code{puts}, @code{scanf}, @code{sinh}, @code{sin}, @code{snprintf},\n+@code{sprintf}, @code{sqrt}, @code{sscanf}, @code{strcat},\n+@code{strchr}, @code{strcmp}, @code{strcpy}, @code{strcspn},\n+@code{strlen}, @code{strncat}, @code{strncmp}, @code{strncpy},\n+@code{strpbrk}, @code{strrchr}, @code{strspn}, @code{strstr},\n+@code{tanh}, @code{tan}, @code{vfprintf}, @code{vprintf} and @code{vsprintf}\n are all recognized as built-in functions unless\n @option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}}\n is specified for an individual function).  All of these functions have"}, {"sha": "dc59bf04d8a60e19a76a6b722d13ecc6ac8d33c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -1,3 +1,10 @@\n+2007-05-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR other/31852\n+\t* gcc.c-torture/execute/builtins/memchr.c: New.\n+\t* gcc.c-torture/execute/builtins/memchr-lib.c: New.\n+\t* gcc.c-torture/execute/builtins/lib/memchr.c: New.\n+\n 2007-05-11 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/30876"}, {"sha": "ddab08bcf8df25f552d7d9dc55b853fc56b90a1a", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/memchr.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemchr.c?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -0,0 +1,21 @@\n+extern void abort(void);\n+extern int inside_main;\n+\n+void *\n+memchr (const void *s, int c, __SIZE_TYPE__ n)\n+{\n+  const unsigned char uc = c;\n+  const unsigned char *sp;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  sp = s;\n+  for (; n != 0; ++sp, --n)\n+    if (*sp == uc)\n+      return (void *) sp;\n+\n+  return 0;\n+}"}, {"sha": "ccea6ba7d97fdcb74f88629f67416377ebcb8b9c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memchr-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemchr-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemchr-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemchr-lib.c?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -0,0 +1 @@\n+#include \"lib/memchr.c\""}, {"sha": "88e731128f6ac77037bbb18a2b39d5e8185dc55b", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/memchr.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5fce6d487573f7f330d721da83fd9881fdb06a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fmemchr.c?ref=2a5fce6d487573f7f330d721da83fd9881fdb06a", "patch": "@@ -0,0 +1,38 @@\n+/* Copyright (C) 2007  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin memchr occur\n+   and perform correctly.\n+\n+   Written by Paolo Carlini, 10/5/2007.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memchr (const void *, int, size_t);\n+\n+void\n+main_test (void)\n+{\n+  const char* const foo1 = \"hello world\";\n+\n+  if (memchr (foo1, 'x', 11))\n+    abort ();\n+  if (memchr (foo1, 'o', 11) != foo1 + 4)\n+    abort ();\n+  if (memchr (foo1, 'w', 2))\n+    abort ();\n+  if (memchr (foo1 + 5, 'o', 6) != foo1 + 7)\n+    abort ();\n+  if (memchr (foo1, 'd', 11) != foo1 + 10)\n+    abort ();\n+  if (memchr (foo1, 'd', 10))\n+    abort ();\n+  if (memchr (foo1, '\\0', 11))\n+    abort ();\n+  if (memchr (foo1, '\\0', 12) != foo1 + 11)\n+    abort ();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_memchr (foo1, 'r', 11) != foo1 + 8)\n+    abort ();\n+}"}]}