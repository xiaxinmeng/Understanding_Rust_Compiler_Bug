{"sha": "c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0OWIxMDcyMjNlYjhmOTdjMTA0OWFiMjliN2JiMmUyOTNiYmU5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-25T08:09:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-25T08:09:02Z"}, "message": "re PR rtl-optimization/69896 (wrong code with -frename-registers @ x64_64)\n\n\tPR rtl-optimization/69896\n\t* regcprop.c: Include cfgrtl.h.\n\t(copyprop_hardreg_forward_1): If noop_p insn uses narrower\n\tthan remembered mode, either delete it (if noop_move_p), or\n\ttreat like copy_p but not noop_p instruction.\n\n\t* gcc.dg/pr69896.c: New test.\n\nFrom-SVN: r233692", "tree": {"sha": "6e696474a52643cf97587b6fe3c948c006c50f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e696474a52643cf97587b6fe3c948c006c50f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1137001cd9b3751964b44ab80861cf7a91aa197b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1137001cd9b3751964b44ab80861cf7a91aa197b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1137001cd9b3751964b44ab80861cf7a91aa197b"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "4e360d57f4681ddf8bf4164329b892a14667a5fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "patch": "@@ -1,3 +1,11 @@\n+2016-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/69896\n+\t* regcprop.c: Include cfgrtl.h.\n+\t(copyprop_hardreg_forward_1): If noop_p insn uses narrower\n+\tthan remembered mode, either delete it (if noop_move_p), or\n+\ttreat like copy_p but not noop_p instruction.\n+\n 2016-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/69705"}, {"sha": "933cc8a8e07a8bfdc974382d86101788d46d0e39", "filename": "gcc/regcprop.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "patch": "@@ -32,6 +32,7 @@\n #include \"addresses.h\"\n #include \"tree-pass.h\"\n #include \"rtl-iter.h\"\n+#include \"cfgrtl.h\"\n \n /* The following code does forward propagation of hard register copies.\n    The object is to eliminate as many dependencies as possible, so that\n@@ -739,9 +740,9 @@ static bool\n copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n {\n   bool anything_changed = false;\n-  rtx_insn *insn;\n+  rtx_insn *insn, *next;\n \n-  for (insn = BB_HEAD (bb); ; insn = NEXT_INSN (insn))\n+  for (insn = BB_HEAD (bb); ; insn = next)\n     {\n       int n_ops, i, predicated;\n       bool is_asm, any_replacements;\n@@ -751,6 +752,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n       bool changed = false;\n       struct kill_set_value_data ksvd;\n \n+      next = NEXT_INSN (insn);\n       if (!NONDEBUG_INSN_P (insn))\n \t{\n \t  if (DEBUG_INSN_P (insn))\n@@ -1042,6 +1044,23 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n       bool noop_p = (copy_p\n \t\t     && rtx_equal_p (SET_DEST (set), SET_SRC (set)));\n \n+      /* If a noop move is using narrower mode than we have recorded,\n+\t we need to either remove the noop move, or kill_set_value.  */\n+      if (noop_p\n+\t  && (GET_MODE_BITSIZE (GET_MODE (SET_DEST (set)))\n+\t      < GET_MODE_BITSIZE (vd->e[REGNO (SET_DEST (set))].mode)))\n+\t{\n+\t  if (noop_move_p (insn))\n+\t    {\n+\t      bool last = insn == BB_END (bb);\n+\t      delete_insn (insn);\n+\t      if (last)\n+\t\tbreak;\n+\t    }\n+\t  else\n+\t    noop_p = false;\n+\t}\n+\n       if (!noop_p)\n \t{\n \t  /* Notice stores.  */"}, {"sha": "7ce00d3b31357a3184004b6998709fc1af500d5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "patch": "@@ -1,3 +1,8 @@\n+2016-02-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/69896\n+\t* gcc.dg/pr69896.c: New test.\n+\n 2016-02-25  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/69736"}, {"sha": "af141adbf5e73d93496e2037569c2a29b529c575", "filename": "gcc/testsuite/gcc.dg/pr69896.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69896.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c049b107223eb8f97c1049ab29b7bb2e293bbe9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69896.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69896.c?ref=c049b107223eb8f97c1049ab29b7bb2e293bbe9e", "patch": "@@ -0,0 +1,33 @@\n+/* PR rtl-optimization/69896 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-w -O -fcaller-saves -fno-dse -frename-registers -fno-tree-ter\" } */\n+/* { dg-additional-options \"-mno-sse\" { target x86_64-*-* i?86-*-* } } */\n+\n+typedef unsigned short A;\n+typedef unsigned short B __attribute__ ((vector_size (32)));\n+typedef unsigned int C;\n+typedef unsigned int D __attribute__ ((vector_size (32)));\n+typedef unsigned long long E;\n+typedef unsigned long long F __attribute__ ((vector_size (32)));\n+typedef unsigned __int128 G;\n+typedef unsigned __int128 H __attribute__ ((vector_size (32)));\n+\n+G __attribute__ ((noinline, noclone))\n+foo (A a, C b, E c, G d, A e, C f, E g, G h, B i, D j, F k, H l, B m, D n, F o, H p)\n+{\n+  j /= (D) { -c, -c, ~h, 1, ~l[0], -m[0], p[0], 1} | 1;\n+  l %= (H) o | 1;\n+  l[1] = (l[1] << (e & 127)) | (l[1] >> (e & 127));\n+  return j[6] + l[0] + l[1] + n[7] + o[0] + o[2] + o[3] + p[0] + p[1];\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ != 8 || sizeof (A) != 2 || sizeof (C) != 4 || sizeof (E) != 8 || sizeof (G) != 16)\n+    return 0;\n+  G x = foo (0, 1, 2, 3, 4, 5, 6, 7, (B) {}, (D) {}, (F) {}, (H) {}, (B) {}, (D) {}, (F) {}, (H) { 0xffffffffffffffffULL, 0x74a3e4aULL });\n+  if ((E) x != 0x00000000074a3e49ULL || (E) (x >> 64) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}