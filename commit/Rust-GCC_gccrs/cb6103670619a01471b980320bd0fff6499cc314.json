{"sha": "cb6103670619a01471b980320bd0fff6499cc314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I2MTAzNjcwNjE5YTAxNDcxYjk4MDMyMGJkMGZmZjY0OTljYzMxNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-25T07:08:14Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-25T07:08:14Z"}, "message": "i386.h (TARGET_MPX): New define.\n\n\t* config/i386/i386.h (TARGET_MPX): New define.\n\t(TARGET_MPX_P): Ditto.\n\nFrom-SVN: r204048", "tree": {"sha": "38b4f0931ba257be8442cd36536fd436f1398b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38b4f0931ba257be8442cd36536fd436f1398b2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb6103670619a01471b980320bd0fff6499cc314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6103670619a01471b980320bd0fff6499cc314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6103670619a01471b980320bd0fff6499cc314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6103670619a01471b980320bd0fff6499cc314/comments", "author": null, "committer": null, "parents": [{"sha": "43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ae206cf9094ef913c3d91e1a0be6b3f07c95d0"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "68ef8a742eb73cbbc1a1f9578f4320d75b1ab3b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6103670619a01471b980320bd0fff6499cc314/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6103670619a01471b980320bd0fff6499cc314/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb6103670619a01471b980320bd0fff6499cc314", "patch": "@@ -1,3 +1,8 @@\n+2013-10-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (TARGET_MPX): New define.\n+\t(TARGET_MPX_P): Ditto.\n+\n 2013-10-24  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* config/i386/constraints.md (B): New.\n@@ -112,8 +117,8 @@\n \n 2013-10-24  Igor Shevlyakov  <igor.shevlyakov@gmail.com>\n \n-\t* expr.c (expand_expr_real_1): Use mode of memory reference rather\n-\tthan mode of address computation when calling memory_address_addr_space.\n+\t* expr.c (expand_expr_real_1): Use mode of memory reference rather than\n+\tmode of address computation when calling memory_address_addr_space.\n \n 2013-08-24  Richard Henderson  <rth@twiddle.net>\n \n@@ -149,10 +154,10 @@\n \n \t* convert.c (convert_to_real): Guard those unsafe math function\n \tconvertions with flag_unsafe_math_optimizations.  Handle sqrt()\n-\tspecially. \n+\tspecially.\n \n 2013-10-24  Markus Trippelsdorf  <markus@trippelsdorf.de>\n-\t\n+\n \tPR ipa/58712\n \t* cgraph.c (cgraph_create_edge_1): Add indirect_unknown_callee\n \tas argument.\n@@ -188,16 +193,15 @@\n \n 2013-10-24  Michael Matz  <matz@suse.de>\n \n-\t* gengtype.c (is_file_equal): Check that files will be same\n-\tlength.\n+\t* gengtype.c (is_file_equal): Check that files will be same length.\n \n 2013-10-25  Christian Bruel  <christian.bruel@st.com>\n \n \t* config.gcc (sh-*): Add sh-mem.o to extra_obj.\n \t* gcc/config/sh/t-sh (sh-mem.o): New rule.\n \t* gcc/config/sh/sh-mem.cc (expand_block_move): Moved here.\n \t(sh4_expand_cmpstr): New function.\n-\t* gcc/config/sh/sh.c (force_into, expand_block_move): Move to sh-mem.c\n+\t* gcc/config/sh/sh.c (force_into, expand_block_move): Move to sh-mem.c.\n \t* gcc/config/sh/sh-protos.h (sh4_expand_cmpstr): Declare.\n \t* gcc/config/sh/sh.md (cmpstrsi, cmpstr_t): New patterns.\n \t(rotlhi3_8): Rename.\n@@ -220,8 +224,7 @@\n \tWrite base class of type (if any).\n \t(read_state_struct_type): Read base class of type (if any).\n \t* gengtype.c (new_structure): Add a \"base_class\" parameter.\n-\t(create_optional_field_): Update for new parameter to\n-\tnew_structure.\n+\t(create_optional_field_): Update for new parameter to new_structure.\n \t(adjust_field_rtx_def): Likewise.\n \t(adjust_field_tree_exp): Likewise.\n \t* gengtype.h (struct type): Add \"base_class\" field to the s\n@@ -290,13 +293,11 @@\n \tinsert it.\n \t(get_stmt_uid_with_default): Remove.\n \t(build_and_add_sum): Use insert_stmt_after and\n-\treassoc_stmt_dominates_stmt_p.  Fix up uid if bb contains only\n-\tlabels.\n+\treassoc_stmt_dominates_stmt_p.  Fix up uid if bb contains only labels.\n \t(update_range_test): Set uid on stmts added by\n \tforce_gimple_operand_gsi.  Don't immediately modify statements\n \tin inter-bb optimization, just update oe->op values.\n-\t(optimize_range_tests): Return bool whether any changed have\n-\tbeen made.\n+\t(optimize_range_tests): Return bool whether any changed have been made.\n \t(update_ops): New function.\n \t(struct inter_bb_range_test_entry): New type.\n \t(maybe_optimize_range_tests): Perform statement changes here.\n@@ -515,10 +516,12 @@\n \n 2013-10-22  Jan Hubicka  <jh@suse.cz>\n \n-\t* i386.h (TARGET_MISALIGNED_MOVE_STRING_PROLOGUES_EPILOGUES): New tuning flag.\n+\t* i386.h (TARGET_MISALIGNED_MOVE_STRING_PROLOGUES_EPILOGUES): New\n+\ttuning flag.\n \t* x86-tune.def (TARGET_MISALIGNED_MOVE_STRING_PROLOGUES): Define it.\n \t* i386.c (expand_small_movmem_or_setmem): New function.\n-\t(expand_set_or_movmem_prologue_epilogue_by_misaligned_moves): New function\n+\t(expand_set_or_movmem_prologue_epilogue_by_misaligned_moves): New\n+\tfunction.\n \t(alg_usable_p): Add support for value ranges; cleanup.\n \t(ix86_expand_set_or_movmem): Add support for misaligned moves.\n "}, {"sha": "c979ee534a8c7897dff4c4033c57726ccf327851", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6103670619a01471b980320bd0fff6499cc314/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6103670619a01471b980320bd0fff6499cc314/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cb6103670619a01471b980320bd0fff6499cc314", "patch": "@@ -63,14 +63,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX_P(x)\tTARGET_ISA_AVX_P(x)\n #define TARGET_AVX2\tTARGET_ISA_AVX2\n #define TARGET_AVX2_P(x)\tTARGET_ISA_AVX2_P(x)\n-#define TARGET_AVX512F  TARGET_ISA_AVX512F\n-#define TARGET_AVX512F_P(x)  TARGET_ISA_AVX512F_P(x)\n-#define TARGET_AVX512PF TARGET_ISA_AVX512PF\n-#define TARGET_AVX512PF_P(x) TARGET_ISA_AVX512PF_P(x)\n-#define TARGET_AVX512ER TARGET_ISA_AVX512ER\n-#define TARGET_AVX512ER_P(x) TARGET_ISA_AVX512ER_P(x)\n-#define TARGET_AVX512CD TARGET_ISA_AVX512CD\n-#define TARGET_AVX512CD_P(x) TARGET_ISA_AVX512CD_P(x)\n+#define TARGET_AVX512F\tTARGET_ISA_AVX512F\n+#define TARGET_AVX512F_P(x)\tTARGET_ISA_AVX512F_P(x)\n+#define TARGET_AVX512PF\tTARGET_ISA_AVX512PF\n+#define TARGET_AVX512PF_P(x)\tTARGET_ISA_AVX512PF_P(x)\n+#define TARGET_AVX512ER\tTARGET_ISA_AVX512ER\n+#define TARGET_AVX512ER_P(x)\tTARGET_ISA_AVX512ER_P(x)\n+#define TARGET_AVX512CD\tTARGET_ISA_AVX512CD\n+#define TARGET_AVX512CD_P(x)\tTARGET_ISA_AVX512CD_P(x)\n #define TARGET_FMA\tTARGET_ISA_FMA\n #define TARGET_FMA_P(x)\tTARGET_ISA_FMA_P(x)\n #define TARGET_SSE4A\tTARGET_ISA_SSE4A\n@@ -104,16 +104,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AES_P(x)\tTARGET_ISA_AES_P(x)\n #define TARGET_PCLMUL\tTARGET_ISA_PCLMUL\n #define TARGET_PCLMUL_P(x)\tTARGET_ISA_PCLMUL_P(x)\n-#define TARGET_CMPXCHG16B TARGET_ISA_CX16\n-#define TARGET_CMPXCHG16B_P(x) TARGET_ISA_CX16_P(x)\n+#define TARGET_CMPXCHG16B\tTARGET_ISA_CX16\n+#define TARGET_CMPXCHG16B_P(x)\tTARGET_ISA_CX16_P(x)\n #define TARGET_FSGSBASE\tTARGET_ISA_FSGSBASE\n #define TARGET_FSGSBASE_P(x)\tTARGET_ISA_FSGSBASE_P(x)\n #define TARGET_RDRND\tTARGET_ISA_RDRND\n #define TARGET_RDRND_P(x)\tTARGET_ISA_RDRND_P(x)\n #define TARGET_F16C\tTARGET_ISA_F16C\n #define TARGET_F16C_P(x)\tTARGET_ISA_F16C_P(x)\n-#define TARGET_RTM      TARGET_ISA_RTM\n-#define TARGET_RTM_P(x)      TARGET_ISA_RTM_P(x)\n+#define TARGET_RTM\tTARGET_ISA_RTM\n+#define TARGET_RTM_P(x)\tTARGET_ISA_RTM_P(x)\n #define TARGET_HLE\tTARGET_ISA_HLE\n #define TARGET_HLE_P(x)\tTARGET_ISA_HLE_P(x)\n #define TARGET_RDSEED\tTARGET_ISA_RDSEED\n@@ -128,6 +128,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_XSAVE_P(x)\tTARGET_ISA_XSAVE_P(x)\n #define TARGET_XSAVEOPT\tTARGET_ISA_XSAVEOPT\n #define TARGET_XSAVEOPT_P(x)\tTARGET_ISA_XSAVEOPT_P(x)\n+#define TARGET_MPX\tTARGET_ISA_MPX\n+#define TARGET_MPX_P(x)\tTARGET_ISA_MPX_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}]}