{"sha": "fc01261a60ff3e7643ff663950020505a6d659d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwMTI2MWE2MGZmM2U3NjQzZmY2NjM5NTAwMjA1MDVhNmQ2NTlkMA==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-02-15T14:49:50Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-02-15T14:49:50Z"}, "message": "natVMVirtualMachine (getFrames): Implement.\n\n2007-02-15  Kyle Galloway  <kgallowa@redhat.com>\n \n   * gnu/classpath/jdwp/natVMVirtualMachine (getFrames): Implement.\n\nFrom-SVN: r121997", "tree": {"sha": "b6fcfec2b20b166cb494d556988e1edde4624e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6fcfec2b20b166cb494d556988e1edde4624e05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc01261a60ff3e7643ff663950020505a6d659d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc01261a60ff3e7643ff663950020505a6d659d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc01261a60ff3e7643ff663950020505a6d659d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc01261a60ff3e7643ff663950020505a6d659d0/comments", "author": null, "committer": null, "parents": [{"sha": "02bba3c4176fe3c6055a149d75ad8694a9c01e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bba3c4176fe3c6055a149d75ad8694a9c01e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02bba3c4176fe3c6055a149d75ad8694a9c01e51"}], "stats": {"total": 308, "additions": 304, "deletions": 4}, "files": [{"sha": "5862f8fd050de63ff4465d289d44aac87d390ebe", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fc01261a60ff3e7643ff663950020505a6d659d0", "patch": "@@ -1,3 +1,7 @@\n+2007-02-15  Kyle Galloway  <kgallowa@redhat.com>\n+ \n+   * gnu/classpath/jdwp/natVMVirtualMachine (getFrames): Implement.\n+\n 2007-02-13  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/natVMVirtualMachine.cc"}, {"sha": "71aa674054af41e03da4e22caa328e6a1871e88d", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=fc01261a60ff3e7643ff663950020505a6d659d0", "patch": "@@ -486,11 +486,49 @@ getClassMethod (jclass klass, jlong id)\n }\n \n java::util::ArrayList *\n-gnu::classpath::jdwp::VMVirtualMachine::getFrames (MAYBE_UNUSED Thread *thread,\n-\t\t\t\t\t\t   MAYBE_UNUSED jint start,\n-\t\t\t\t\t\t   MAYBE_UNUSED jint length)\n+gnu::classpath::jdwp::VMVirtualMachine::getFrames (Thread *thread, jint start,\n+                                                   jint length)\n {\n-  return NULL;\n+  jint frame_count = getFrameCount (thread);\n+  ::java::util::ArrayList *frame_list;\n+  \n+  // Calculate the max number of frames to be returned.\n+  jint num_frames = frame_count - start;\n+  \n+  // Check if num_frames is valid.\n+  if (num_frames < 0)\n+    num_frames = 0;\n+  \n+  // Check if there are more than length frames left after start.\n+  // If length ios -1 return all remaining frames.\n+  if (length != -1 && num_frames > length)\n+    num_frames = length;\n+     \n+  frame_list = new ::java::util::ArrayList (num_frames);\n+  \n+  _Jv_Frame *vm_frame = reinterpret_cast<_Jv_Frame *> (thread->frame);\n+  \n+  // Take start frames off the top of the stack\n+  while (vm_frame != NULL && start > 0)\n+    {\n+      start--;\n+      vm_frame = vm_frame->next;\n+    }\n+  \n+  // Use as a counter for the number of frames returned.\n+  num_frames = 0;\n+  \n+  while (vm_frame != NULL && (num_frames < length || length == -1))\n+    {  \n+      jlong frameId = reinterpret_cast<jlong> (vm_frame);\n+      \n+      VMFrame *frame = getFrame (thread, frameId);\n+      frame_list->add (frame);\n+      vm_frame = vm_frame->next;\n+      num_frames++;\n+    }\n+  \n+  return frame_list;\n }\n \n gnu::classpath::jdwp::VMFrame *"}, {"sha": "8d4cb3bed5bc07f9ab3d5cb127357a70fed2abb6", "filename": "libjava/testsuite/libjava.jvmti/interp/getlocalvartable.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.h?ref=fc01261a60ff3e7643ff663950020505a6d659d0", "patch": "@@ -0,0 +1,19 @@\n+/* DO NOT EDIT THIS FILE - it is machine generated */\n+\n+#ifndef __getlocalvartable__\n+#define __getlocalvartable__\n+\n+#include <jni.h>\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+\n+JNIEXPORT jint JNICALL Java_getlocalvartable_do_1getlocalvartable_1tests (JNIEnv *env, jclass);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* __getlocalvartable__ */"}, {"sha": "9fffb928d8fac6534bb52c54422b368f63c5bc33", "filename": "libjava/testsuite/libjava.jvmti/interp/getlocalvartable.jar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.jar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.jar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.jar?ref=fc01261a60ff3e7643ff663950020505a6d659d0"}, {"sha": "e0f3b31b810133525627be612a511dc3ef711f42", "filename": "libjava/testsuite/libjava.jvmti/interp/getlocalvartable.java", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.java?ref=fc01261a60ff3e7643ff663950020505a6d659d0", "patch": "@@ -0,0 +1,63 @@\n+public class getlocalvartable\n+{\n+  public boolean done = false;\n+\n+  // num_frames is the number of frames > the original run () call so if\n+  // num_frames = 1, the thread will have 2 frames, the original Thread.run\n+  // call, plus one additional\n+  public int num_frames, thread_num;\n+\n+  public static int num_threads = 1;\n+\n+  static\n+    {\n+      System.loadLibrary(\"natgetlocalvartable\");\n+    }\n+\n+  public double aMethod (float pone, float ptwo)\n+  {\n+    float fone, ftwo;\n+    double done, dtwo;\n+    \n+    fone = pone;\n+    ftwo = 2 * ptwo;\n+    \n+    done = 5 * fone;\n+    dtwo = 6 * ftwo;\n+    \n+    return done + dtwo;\n+  }\n+  \n+  public long bMethod (int ipone, int iptwo)\n+  {\n+    int ione, itwo;\n+    long lone, ltwo;\n+    \n+    ione = ipone;\n+    itwo = 5 * iptwo;\n+    \n+    lone = ione;\n+    ltwo = 8 * itwo;\n+    \n+    return lone + ltwo;\n+  }\n+  \n+  public Object cMethod (Object op)\n+  {\n+    Object oone, otwo;\n+    oone = op;\n+    otwo = oone;\n+    oone = null;\n+    \n+    return otwo;\n+  }\n+\n+  public static native int do_getlocalvartable_tests ();\n+\n+  public static void main (String[] args)\n+  {\n+    System.out.println (\"JVMTI getlocalvartable Interpreted Test\");\n+\n+    do_getlocalvartable_tests ();\n+  }\n+}"}, {"sha": "2e0ec40202e43968e766264eb8717c82ed8c40d3", "filename": "libjava/testsuite/libjava.jvmti/interp/getlocalvartable.out", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetlocalvartable.out?ref=fc01261a60ff3e7643ff663950020505a6d659d0", "patch": "@@ -0,0 +1,109 @@\n+JVMTI getlocalvartable Interpreted Test\n+Slot: 0\n+  Name: this\n+  Sig: Lgetlocalvartable;\n+  Gen Sig: Lgetlocalvartable;\n+  Start Loc: 0\n+  Length: 28\n+Slot: 1\n+  Name: pone\n+  Sig: F\n+  Gen Sig: F\n+  Start Loc: 0\n+  Length: 28\n+Slot: 2\n+  Name: ptwo\n+  Sig: F\n+  Gen Sig: F\n+  Start Loc: 0\n+  Length: 28\n+Slot: 3\n+  Name: fone\n+  Sig: F\n+  Gen Sig: F\n+  Start Loc: 2\n+  Length: 26\n+Slot: 4\n+  Name: ftwo\n+  Sig: F\n+  Gen Sig: F\n+  Start Loc: 7\n+  Length: 21\n+Slot: 5\n+  Name: done\n+  Sig: D\n+  Gen Sig: D\n+  Start Loc: 14\n+  Length: 14\n+Slot: 7\n+  Name: dtwo\n+  Sig: D\n+  Gen Sig: D\n+  Start Loc: 22\n+  Length: 6\n+Slot: 0\n+  Name: this\n+  Sig: Lgetlocalvartable;\n+  Gen Sig: Lgetlocalvartable;\n+  Start Loc: 0\n+  Length: 25\n+Slot: 1\n+  Name: ipone\n+  Sig: I\n+  Gen Sig: I\n+  Start Loc: 0\n+  Length: 25\n+Slot: 2\n+  Name: iptwo\n+  Sig: I\n+  Gen Sig: I\n+  Start Loc: 0\n+  Length: 25\n+Slot: 3\n+  Name: ione\n+  Sig: I\n+  Gen Sig: I\n+  Start Loc: 2\n+  Length: 23\n+Slot: 4\n+  Name: itwo\n+  Sig: I\n+  Gen Sig: I\n+  Start Loc: 7\n+  Length: 18\n+Slot: 5\n+  Name: lone\n+  Sig: J\n+  Gen Sig: J\n+  Start Loc: 11\n+  Length: 14\n+Slot: 7\n+  Name: ltwo\n+  Sig: J\n+  Gen Sig: J\n+  Start Loc: 19\n+  Length: 6\n+Slot: 0\n+  Name: this\n+  Sig: Lgetlocalvartable;\n+  Gen Sig: Lgetlocalvartable;\n+  Start Loc: 0\n+  Length: 8\n+Slot: 1\n+  Name: op\n+  Sig: Ljava/lang/Object;\n+  Gen Sig: Ljava/lang/Object;\n+  Start Loc: 0\n+  Length: 8\n+Slot: 2\n+  Name: oone\n+  Sig: Ljava/lang/Object;\n+  Gen Sig: Ljava/lang/Object;\n+  Start Loc: 2\n+  Length: 6\n+Slot: 3\n+  Name: otwo\n+  Sig: Ljava/lang/Object;\n+  Gen Sig: Ljava/lang/Object;\n+  Start Loc: 4\n+  Length: 4"}, {"sha": "3ca112d30f6f6dfb125a4d2ea76064fb52ed16e0", "filename": "libjava/testsuite/libjava.jvmti/interp/natgetlocalvartable.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fnatgetlocalvartable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01261a60ff3e7643ff663950020505a6d659d0/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fnatgetlocalvartable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fnatgetlocalvartable.cc?ref=fc01261a60ff3e7643ff663950020505a6d659d0", "patch": "@@ -0,0 +1,67 @@\n+#include <jni.h>\n+\n+#include <jvmti.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"getlocalvartable.h\"\n+\n+JNIEXPORT jint JNICALL Java_getlocalvartable_do_1getlocalvartable_1tests\n+(JNIEnv *env, jclass klass)\n+{\n+  JavaVM *vm;\n+  jint err = env->GetJavaVM (&vm);\n+  if (err < 0)\n+    {\n+      fprintf (stderr, \"error getting VM\\n\");\n+      exit (1);\n+    }\n+\n+  jvmtiEnv *jvmti = NULL;\n+  vm->GetEnv ((void **) &jvmti, JVMTI_VERSION_1_0);\n+\n+  if (jvmti == NULL)\n+    {\n+      fprintf (stderr, \"error getting jvmti environment\\n\");\n+      exit (1);\n+    }\n+  \n+  jint entrys;\n+  jvmtiLocalVariableEntry *var_table;\n+\n+  jvmtiError jerr;\n+  \n+  jmethodID meth_ids[3];\n+  \n+  meth_ids[0] = env->GetMethodID (klass, \"aMethod\", \"(FF)D\");\n+  meth_ids[1] = env->GetMethodID (klass, \"bMethod\", \"(II)J\");\n+  meth_ids[2] = env->GetMethodID (klass, \"cMethod\", \n+                                  \"(Ljava/lang/Object;)Ljava/lang/Object;\");\n+  for (int i = 0; i < 3; i++)\n+    {\n+      jerr = jvmti->GetLocalVariableTable (meth_ids[i], &entrys, &var_table);\n+      if (jerr != JVMTI_ERROR_NONE)\n+        {\n+          char *error_name;\n+          jvmti->GetErrorName (jerr, &error_name);\n+          fprintf (stderr, \"JVMTI Error: %s\\n\", error_name);\n+          jvmti->Deallocate (reinterpret_cast<unsigned char *> (error_name));\n+        }\n+      else\n+        {\n+          for (int j = 0; j < entrys; j++)\n+            {\n+              printf (\"Slot: %d\\n\", static_cast<int> (var_table[j].slot));\n+              printf (\"  Name: %s\\n\", var_table[j].name);\n+              printf (\"  Sig: %s\\n\", var_table[j].signature);\n+              printf (\"  Gen Sig: %s\\n\", var_table[j].generic_signature);\n+              printf (\"  Start Loc: %ld\\n\", static_cast<long> (var_table[j].start_location));\n+              printf (\"  Length: %d\\n\", static_cast<int> (var_table[j].length));\n+            }\n+          \n+          jvmti->Deallocate (reinterpret_cast<unsigned char *> (var_table));\n+        }\n+    }\n+    \n+    return 0;\n+}"}]}