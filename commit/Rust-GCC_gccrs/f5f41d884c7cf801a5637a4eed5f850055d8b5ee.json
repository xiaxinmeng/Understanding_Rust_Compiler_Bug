{"sha": "f5f41d884c7cf801a5637a4eed5f850055d8b5ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmNDFkODg0YzdjZjgwMWE1NjM3YTRlZWQ1Zjg1MDA1NWQ4YjVlZQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-11T13:45:55Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-11T13:45:55Z"}, "message": "sse.md (VI4_AVX512F): New.\n\n        * config/i386/sse.md (VI4_AVX512F): New.\n        (VI8_AVX2_AVX512F): Ditto.\n        (mul<mode>3): Extended with wider modes.\n        (*<sse4_1_avx2>_mul<mode>3): Ditto.\n        (mul<mode>3): Ditto.\n        (vec_widen_<s>mult_odd_<mode>): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203434", "tree": {"sha": "b916df7e2348bf8c73ce018e9770666e29731226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b916df7e2348bf8c73ce018e9770666e29731226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5f41d884c7cf801a5637a4eed5f850055d8b5ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f41d884c7cf801a5637a4eed5f850055d8b5ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f41d884c7cf801a5637a4eed5f850055d8b5ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f41d884c7cf801a5637a4eed5f850055d8b5ee/comments", "author": null, "committer": null, "parents": [{"sha": "3bdf634051b1b7f5dbb21e7a1388baaf78619c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdf634051b1b7f5dbb21e7a1388baaf78619c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bdf634051b1b7f5dbb21e7a1388baaf78619c23"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "22ffaa51a6fe6f091130730c6c7e7fe86f6e77f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f41d884c7cf801a5637a4eed5f850055d8b5ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f41d884c7cf801a5637a4eed5f850055d8b5ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5f41d884c7cf801a5637a4eed5f850055d8b5ee", "patch": "@@ -1,3 +1,20 @@\n+2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (VI4_AVX512F): New.\n+\t(VI8_AVX2_AVX512F): Ditto.\n+\t(mul<mode>3): Extended with wider modes.\n+\t(*<sse4_1_avx2>_mul<mode>3): Ditto.\n+\t(mul<mode>3): Ditto.\n+\t(vec_widen_<s>mult_odd_<mode>): Ditto.\n+\n 2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "127ecf262397657a85f65103442f5d7e4c33a57d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f41d884c7cf801a5637a4eed5f850055d8b5ee/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f41d884c7cf801a5637a4eed5f850055d8b5ee/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f5f41d884c7cf801a5637a4eed5f850055d8b5ee", "patch": "@@ -207,9 +207,15 @@\n (define_mode_iterator VI4_AVX2\n   [(V8SI \"TARGET_AVX2\") V4SI])\n \n+(define_mode_iterator VI4_AVX512F\n+  [(V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX2\") V4SI])\n+\n (define_mode_iterator VI8_AVX2\n   [(V4DI \"TARGET_AVX2\") V2DI])\n \n+(define_mode_iterator VI8_AVX2_AVX512F\n+  [(V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n+\n ;; ??? We should probably use TImode instead.\n (define_mode_iterator VIMAX_AVX2\n   [(V2TI \"TARGET_AVX2\") V1TI])\n@@ -5854,10 +5860,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"mul<mode>3\"\n-  [(set (match_operand:VI4_AVX2 0 \"register_operand\")\n-\t(mult:VI4_AVX2\n-\t  (match_operand:VI4_AVX2 1 \"general_vector_operand\")\n-\t  (match_operand:VI4_AVX2 2 \"general_vector_operand\")))]\n+  [(set (match_operand:VI4_AVX512F 0 \"register_operand\")\n+\t(mult:VI4_AVX512F\n+\t  (match_operand:VI4_AVX512F 1 \"general_vector_operand\")\n+\t  (match_operand:VI4_AVX512F 2 \"general_vector_operand\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1)\n@@ -5876,10 +5882,10 @@\n })\n \n (define_insn \"*<sse4_1_avx2>_mul<mode>3\"\n-  [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x,v\")\n-\t(mult:VI4_AVX2\n-\t  (match_operand:VI4_AVX2 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VI4_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+  [(set (match_operand:VI4_AVX512F 0 \"register_operand\" \"=x,v\")\n+\t(mult:VI4_AVX512F\n+\t  (match_operand:VI4_AVX512F 1 \"nonimmediate_operand\" \"%0,v\")\n+\t  (match_operand:VI4_AVX512F 2 \"nonimmediate_operand\" \"xm,vm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n   \"@\n    pmulld\\t{%2, %0|%0, %2}\n@@ -5892,9 +5898,10 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"mul<mode>3\"\n-  [(set (match_operand:VI8_AVX2 0 \"register_operand\")\n-\t(mult:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\")\n-\t\t       (match_operand:VI8_AVX2 2 \"register_operand\")))]\n+  [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\")\n+\t(mult:VI8_AVX2_AVX512F\n+\t  (match_operand:VI8_AVX2_AVX512F 1 \"register_operand\")\n+\t  (match_operand:VI8_AVX2_AVX512F 2 \"register_operand\")))]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_sse2_mulvxdi3 (operands[0], operands[1], operands[2]);\n@@ -5941,8 +5948,8 @@\n (define_expand \"vec_widen_<s>mult_odd_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n    (any_extend:<sseunpackmode>\n-     (match_operand:VI4_AVX2 1 \"general_vector_operand\"))\n-   (match_operand:VI4_AVX2 2 \"general_vector_operand\")]\n+     (match_operand:VI4_AVX512F 1 \"general_vector_operand\"))\n+   (match_operand:VI4_AVX512F 2 \"general_vector_operand\")]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],"}]}