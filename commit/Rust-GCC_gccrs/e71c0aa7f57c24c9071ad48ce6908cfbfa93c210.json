{"sha": "e71c0aa7f57c24c9071ad48ce6908cfbfa93c210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxYzBhYTdmNTdjMjRjOTA3MWFkNDhjZTY5MDhjZmJmYTkzYzIxMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-25T14:28:55Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-25T14:28:55Z"}, "message": "expmed.c (choose_multiplier): Change interface to return the multiplier lowpart as an rtx instead of an...\n\n\n\t* expmed.c (choose_multiplier): Change interface to return the\n\tmultiplier lowpart as an rtx instead of an unsigned HOST_WIDE_INT.\n\t(expand_divmod): Update calls to choose_multiplier.\n\nFrom-SVN: r94220", "tree": {"sha": "4059737aea01d8db0ff04ba5b2ec876e4613a6a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4059737aea01d8db0ff04ba5b2ec876e4613a6a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210/comments", "author": null, "committer": null, "parents": [{"sha": "b01150a22f04194ea7d01e66cfa85d0481d0cea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01150a22f04194ea7d01e66cfa85d0481d0cea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01150a22f04194ea7d01e66cfa85d0481d0cea4"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "400456c26c1f23582be2b7ad96b915cf4540047c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e71c0aa7f57c24c9071ad48ce6908cfbfa93c210", "patch": "@@ -1,3 +1,9 @@\n+2005-01-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expmed.c (choose_multiplier): Change interface to return the\n+\tmultiplier lowpart as an rtx instead of an unsigned HOST_WIDE_INT.\n+\t(expand_divmod): Update calls to choose_multiplier.\n+\n 2005-01-24  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/19330"}, {"sha": "1091c454064a9be6e4e65183df22a8f63cf145ed", "filename": "gcc/expmed.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71c0aa7f57c24c9071ad48ce6908cfbfa93c210/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=e71c0aa7f57c24c9071ad48ce6908cfbfa93c210", "patch": "@@ -2391,8 +2391,7 @@ static bool choose_mult_variant (enum machine_mode, HOST_WIDE_INT,\n static rtx expand_mult_const (enum machine_mode, rtx, HOST_WIDE_INT, rtx,\n \t\t\t      const struct algorithm *, enum mult_variant);\n static unsigned HOST_WIDE_INT choose_multiplier (unsigned HOST_WIDE_INT, int,\n-\t\t\t\t\t\t int, unsigned HOST_WIDE_INT *,\n-\t\t\t\t\t\t int *, int *);\n+\t\t\t\t\t\t int, rtx *, int *, int *);\n static unsigned HOST_WIDE_INT invert_mod2n (unsigned HOST_WIDE_INT, int);\n static rtx extract_high_half (enum machine_mode, rtx);\n static rtx expand_mult_highpart (enum machine_mode, rtx, rtx, rtx, int, int);\n@@ -3118,8 +3117,7 @@ ceil_log2 (unsigned HOST_WIDE_INT x)\n static\n unsigned HOST_WIDE_INT\n choose_multiplier (unsigned HOST_WIDE_INT d, int n, int precision,\n-\t\t   unsigned HOST_WIDE_INT *multiplier_ptr,\n-\t\t   int *post_shift_ptr, int *lgup_ptr)\n+\t\t   rtx *multiplier_ptr, int *post_shift_ptr, int *lgup_ptr)\n {\n   HOST_WIDE_INT mhigh_hi, mlow_hi;\n   unsigned HOST_WIDE_INT mhigh_lo, mlow_lo;\n@@ -3191,12 +3189,12 @@ choose_multiplier (unsigned HOST_WIDE_INT d, int n, int precision,\n   if (n < HOST_BITS_PER_WIDE_INT)\n     {\n       unsigned HOST_WIDE_INT mask = ((unsigned HOST_WIDE_INT) 1 << n) - 1;\n-      *multiplier_ptr = mhigh_lo & mask;\n+      *multiplier_ptr = GEN_INT (mhigh_lo & mask);\n       return mhigh_lo >= mask;\n     }\n   else\n     {\n-      *multiplier_ptr = mhigh_lo;\n+      *multiplier_ptr = GEN_INT (mhigh_lo);\n       return mhigh_hi;\n     }\n }\n@@ -3855,9 +3853,10 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t  {\n \t    if (unsignedp)\n \t      {\n-\t\tunsigned HOST_WIDE_INT mh, ml;\n+\t\tunsigned HOST_WIDE_INT mh;\n \t\tint pre_shift, post_shift;\n \t\tint dummy;\n+\t\trtx ml;\n \t\tunsigned HOST_WIDE_INT d = (INTVAL (op1)\n \t\t\t\t\t    & GET_MODE_MASK (compute_mode));\n \n@@ -3923,8 +3922,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t      = (shift_cost[compute_mode][post_shift - 1]\n \t\t\t\t + shift_cost[compute_mode][1]\n \t\t\t\t + 2 * add_cost[compute_mode]);\n-\t\t\t    t1 = gen_int_mode (ml, compute_mode);\n-\t\t\t    t1 = expand_mult_highpart (compute_mode, op0, t1,\n+\t\t\t    t1 = expand_mult_highpart (compute_mode, op0, ml,\n \t\t\t\t\t\t       NULL_RTX, 1,\n \t\t\t\t\t\t       max_cost - extra_cost);\n \t\t\t    if (t1 == 0)\n@@ -3959,8 +3957,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t    extra_cost\n \t\t\t      = (shift_cost[compute_mode][pre_shift]\n \t\t\t\t + shift_cost[compute_mode][post_shift]);\n-\t\t\t    t2 = gen_int_mode (ml, compute_mode);\n-\t\t\t    t2 = expand_mult_highpart (compute_mode, t1, t2,\n+\t\t\t    t2 = expand_mult_highpart (compute_mode, t1, ml,\n \t\t\t\t\t\t       NULL_RTX, 1,\n \t\t\t\t\t\t       max_cost - extra_cost);\n \t\t\t    if (t2 == 0)\n@@ -3987,6 +3984,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t      {\n \t\tunsigned HOST_WIDE_INT ml;\n \t\tint lgup, post_shift;\n+\t\trtx mlr;\n \t\tHOST_WIDE_INT d = INTVAL (op1);\n \t\tunsigned HOST_WIDE_INT abs_d = d >= 0 ? d : -d;\n \n@@ -4069,7 +4067,8 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\telse if (size <= HOST_BITS_PER_WIDE_INT)\n \t\t  {\n \t\t    choose_multiplier (abs_d, size, size - 1,\n-\t\t\t\t       &ml, &post_shift, &lgup);\n+\t\t\t\t       &mlr, &post_shift, &lgup);\n+\t\t    ml = (unsigned HOST_WIDE_INT) INTVAL (mlr);\n \t\t    if (ml < (unsigned HOST_WIDE_INT) 1 << (size - 1))\n \t\t      {\n \t\t\trtx t1, t2, t3;\n@@ -4081,8 +4080,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\textra_cost = (shift_cost[compute_mode][post_shift]\n \t\t\t\t      + shift_cost[compute_mode][size - 1]\n \t\t\t\t      + add_cost[compute_mode]);\n-\t\t\tt1 = gen_int_mode (ml, compute_mode);\n-\t\t\tt1 = expand_mult_highpart (compute_mode, op0, t1,\n+\t\t\tt1 = expand_mult_highpart (compute_mode, op0, mlr,\n \t\t\t\t\t\t   NULL_RTX, 0,\n \t\t\t\t\t\t   max_cost - extra_cost);\n \t\t\tif (t1 == 0)\n@@ -4115,11 +4113,11 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t  goto fail1;\n \n \t\t\tml |= (~(unsigned HOST_WIDE_INT) 0) << (size - 1);\n+\t\t\tmlr = gen_int_mode (ml, compute_mode);\n \t\t\textra_cost = (shift_cost[compute_mode][post_shift]\n \t\t\t\t      + shift_cost[compute_mode][size - 1]\n \t\t\t\t      + 2 * add_cost[compute_mode]);\n-\t\t\tt1 = gen_int_mode (ml, compute_mode);\n-\t\t\tt1 = expand_mult_highpart (compute_mode, op0, t1,\n+\t\t\tt1 = expand_mult_highpart (compute_mode, op0, mlr,\n \t\t\t\t\t\t   NULL_RTX, 0,\n \t\t\t\t\t\t   max_cost - extra_cost);\n \t\t\tif (t1 == 0)\n@@ -4169,9 +4167,10 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n       /* We will come here only for signed operations.  */\n \tif (op1_is_constant && HOST_BITS_PER_WIDE_INT >= size)\n \t  {\n-\t    unsigned HOST_WIDE_INT mh, ml;\n+\t    unsigned HOST_WIDE_INT mh;\n \t    int pre_shift, lgup, post_shift;\n \t    HOST_WIDE_INT d = INTVAL (op1);\n+\t    rtx ml;\n \n \t    if (d > 0)\n \t      {\n@@ -4213,8 +4212,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\textra_cost = (shift_cost[compute_mode][post_shift]\n \t\t\t\t      + shift_cost[compute_mode][size - 1]\n \t\t\t\t      + 2 * add_cost[compute_mode]);\n-\t\t\tt3 = gen_int_mode (ml, compute_mode);\n-\t\t\tt3 = expand_mult_highpart (compute_mode, t2, t3,\n+\t\t\tt3 = expand_mult_highpart (compute_mode, t2, ml,\n \t\t\t\t\t\t   NULL_RTX, 1,\n \t\t\t\t\t\t   max_cost - extra_cost);\n \t\t\tif (t3 != 0)"}]}