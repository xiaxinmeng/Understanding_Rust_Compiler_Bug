{"sha": "ecd5543ffa4648505979d4e0b90118273acf6c17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkNTU0M2ZmYTQ2NDg1MDU5NzlkNGUwYjkwMTE4MjczYWNmNmMxNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-05-30T13:48:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-05-30T13:48:22Z"}, "message": "sanitizer_stacktrace.cc: Cherry pick upstream r209879.\n\n\t* sanitizer_common/sanitizer_stacktrace.cc: Cherry pick upstream\n\tr209879.\n\t* sanitizer_common/sanitizer_common.h: Likewise.\n\t* asan/asan_mapping.h: Likewise.\n\t* asan/asan_linux.cc: Likewise.\n\t* tsan/tsan_mman.cc: Cherry pick upstream r209744.\n\t* sanitizer_common/sanitizer_allocator.h: Likewise.\n\nFrom-SVN: r211080", "tree": {"sha": "76015d23f34435b311f781d9e25f6c528bf3521f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76015d23f34435b311f781d9e25f6c528bf3521f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecd5543ffa4648505979d4e0b90118273acf6c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd5543ffa4648505979d4e0b90118273acf6c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd5543ffa4648505979d4e0b90118273acf6c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd5543ffa4648505979d4e0b90118273acf6c17/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9a8f6d9cbcffff7d591c18c1e8d9155365db2c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a8f6d9cbcffff7d591c18c1e8d9155365db2c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a8f6d9cbcffff7d591c18c1e8d9155365db2c8"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "b441ea3b705d0bc2c08cfb7d12515b109c3cad55", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=ecd5543ffa4648505979d4e0b90118273acf6c17", "patch": "@@ -1,3 +1,13 @@\n+2014-05-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sanitizer_common/sanitizer_stacktrace.cc: Cherry pick upstream\n+\tr209879.\n+\t* sanitizer_common/sanitizer_common.h: Likewise.\n+\t* asan/asan_mapping.h: Likewise.\n+\t* asan/asan_linux.cc: Likewise.\n+\t* tsan/tsan_mman.cc: Cherry pick upstream r209744.\n+\t* sanitizer_common/sanitizer_allocator.h: Likewise.\n+\n 2014-05-23  Marek Polacek  <polacek@redhat.com>\n \n \t* ubsan/ubsan_value.cc (getFloatValue): Handle 96-bit"}, {"sha": "c401d9df48b250b1d341fc0f8247c7ff6c2538e5", "filename": "libsanitizer/asan/asan_linux.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fasan%2Fasan_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fasan%2Fasan_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_linux.cc?ref=ecd5543ffa4648505979d4e0b90118273acf6c17", "patch": "@@ -186,6 +186,13 @@ void GetPcSpBp(void *context, uptr *pc, uptr *sp, uptr *bp) {\n   *bp = ucontext->uc_mcontext.gregs[REG_EBP];\n   *sp = ucontext->uc_mcontext.gregs[REG_ESP];\n # endif\n+#elif defined(__powerpc__) || defined(__powerpc64__)\n+  ucontext_t *ucontext = (ucontext_t*)context;\n+  *pc = ucontext->uc_mcontext.regs->nip;\n+  *sp = ucontext->uc_mcontext.regs->gpr[PT_R1];\n+  // The powerpc{,64}-linux ABIs do not specify r31 as the frame\n+  // pointer, but GCC always uses r31 when we need a frame pointer.\n+  *bp = ucontext->uc_mcontext.regs->gpr[PT_R31];\n #elif defined(__sparc__)\n   ucontext_t *ucontext = (ucontext_t*)context;\n   uptr *stk_ptr;"}, {"sha": "a1f84e24c46e8c03adbb331d26bbf038fa0d9b7a", "filename": "libsanitizer/asan/asan_mapping.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fasan%2Fasan_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fasan%2Fasan_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping.h?ref=ecd5543ffa4648505979d4e0b90118273acf6c17", "patch": "@@ -85,6 +85,7 @@ static const u64 kDefaultShadowOffset64 = 1ULL << 44;\n static const u64 kDefaultShort64bitShadowOffset = 0x7FFF8000;  // < 2G.\n static const u64 kAArch64_ShadowOffset64 = 1ULL << 36;\n static const u64 kMIPS32_ShadowOffset32 = 0x0aaa8000;\n+static const u64 kPPC64_ShadowOffset64 = 1ULL << 41;\n static const u64 kFreeBSD_ShadowOffset32 = 1ULL << 30;  // 0x40000000\n static const u64 kFreeBSD_ShadowOffset64 = 1ULL << 46;  // 0x400000000000\n \n@@ -107,6 +108,8 @@ static const u64 kFreeBSD_ShadowOffset64 = 1ULL << 46;  // 0x400000000000\n # else\n #  if defined(__aarch64__)\n #    define SHADOW_OFFSET kAArch64_ShadowOffset64\n+#  elif defined(__powerpc64__)\n+#    define SHADOW_OFFSET kPPC64_ShadowOffset64\n #  elif SANITIZER_FREEBSD\n #    define SHADOW_OFFSET kFreeBSD_ShadowOffset64\n #  elif SANITIZER_MAC"}, {"sha": "99be09ba9baa5be69ab00111fa6564dc9b42ba4f", "filename": "libsanitizer/sanitizer_common/sanitizer_allocator.h", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator.h?ref=ecd5543ffa4648505979d4e0b90118273acf6c17", "patch": "@@ -196,14 +196,12 @@ template<class SizeClassAllocator> struct SizeClassAllocatorLocalCache;\n \n // Memory allocator statistics\n enum AllocatorStat {\n-  AllocatorStatMalloced,\n-  AllocatorStatFreed,\n-  AllocatorStatMmapped,\n-  AllocatorStatUnmapped,\n+  AllocatorStatAllocated,\n+  AllocatorStatMapped,\n   AllocatorStatCount\n };\n \n-typedef u64 AllocatorStatCounters[AllocatorStatCount];\n+typedef uptr AllocatorStatCounters[AllocatorStatCount];\n \n // Per-thread stats, live in per-thread cache.\n class AllocatorStats {\n@@ -212,24 +210,29 @@ class AllocatorStats {\n     internal_memset(this, 0, sizeof(*this));\n   }\n \n-  void Add(AllocatorStat i, u64 v) {\n+  void Add(AllocatorStat i, uptr v) {\n     v += atomic_load(&stats_[i], memory_order_relaxed);\n     atomic_store(&stats_[i], v, memory_order_relaxed);\n   }\n \n-  void Set(AllocatorStat i, u64 v) {\n+  void Sub(AllocatorStat i, uptr v) {\n+    v = atomic_load(&stats_[i], memory_order_relaxed) - v;\n     atomic_store(&stats_[i], v, memory_order_relaxed);\n   }\n \n-  u64 Get(AllocatorStat i) const {\n+  void Set(AllocatorStat i, uptr v) {\n+    atomic_store(&stats_[i], v, memory_order_relaxed);\n+  }\n+\n+  uptr Get(AllocatorStat i) const {\n     return atomic_load(&stats_[i], memory_order_relaxed);\n   }\n \n  private:\n   friend class AllocatorGlobalStats;\n   AllocatorStats *next_;\n   AllocatorStats *prev_;\n-  atomic_uint64_t stats_[AllocatorStatCount];\n+  atomic_uintptr_t stats_[AllocatorStatCount];\n };\n \n // Global stats, used for aggregation and querying.\n@@ -258,7 +261,7 @@ class AllocatorGlobalStats : public AllocatorStats {\n   }\n \n   void Get(AllocatorStatCounters s) const {\n-    internal_memset(s, 0, AllocatorStatCount * sizeof(u64));\n+    internal_memset(s, 0, AllocatorStatCount * sizeof(uptr));\n     SpinMutexLock l(&mu_);\n     const AllocatorStats *stats = this;\n     for (;;) {\n@@ -268,6 +271,9 @@ class AllocatorGlobalStats : public AllocatorStats {\n       if (stats == this)\n         break;\n     }\n+    // All stats must be positive.\n+    for (int i = 0; i < AllocatorStatCount; i++)\n+      s[i] = ((sptr)s[i]) > 0 ? s[i] : 1;\n   }\n \n  private:\n@@ -520,7 +526,7 @@ class SizeClassAllocator64 {\n         map_size += kUserMapSize;\n       CHECK_GE(region->mapped_user + map_size, end_idx);\n       MapWithCallback(region_beg + region->mapped_user, map_size);\n-      stat->Add(AllocatorStatMmapped, map_size);\n+      stat->Add(AllocatorStatMapped, map_size);\n       region->mapped_user += map_size;\n     }\n     uptr total_count = (region->mapped_user - beg_idx - size)\n@@ -839,7 +845,7 @@ class SizeClassAllocator32 {\n     uptr res = reinterpret_cast<uptr>(MmapAlignedOrDie(kRegionSize, kRegionSize,\n                                       \"SizeClassAllocator32\"));\n     MapUnmapCallback().OnMap(res, kRegionSize);\n-    stat->Add(AllocatorStatMmapped, kRegionSize);\n+    stat->Add(AllocatorStatMapped, kRegionSize);\n     CHECK_EQ(0U, (res & (kRegionSize - 1)));\n     possible_regions.set(ComputeRegionId(res), static_cast<u8>(class_id));\n     return res;\n@@ -905,7 +911,7 @@ struct SizeClassAllocatorLocalCache {\n   void *Allocate(SizeClassAllocator *allocator, uptr class_id) {\n     CHECK_NE(class_id, 0UL);\n     CHECK_LT(class_id, kNumClasses);\n-    stats_.Add(AllocatorStatMalloced, SizeClassMap::Size(class_id));\n+    stats_.Add(AllocatorStatAllocated, SizeClassMap::Size(class_id));\n     PerClass *c = &per_class_[class_id];\n     if (UNLIKELY(c->count == 0))\n       Refill(allocator, class_id);\n@@ -920,7 +926,7 @@ struct SizeClassAllocatorLocalCache {\n     // If the first allocator call on a new thread is a deallocation, then\n     // max_count will be zero, leading to check failure.\n     InitCache();\n-    stats_.Add(AllocatorStatFreed, SizeClassMap::Size(class_id));\n+    stats_.Sub(AllocatorStatAllocated, SizeClassMap::Size(class_id));\n     PerClass *c = &per_class_[class_id];\n     CHECK_NE(c->max_count, 0UL);\n     if (UNLIKELY(c->count == c->max_count))\n@@ -1031,8 +1037,8 @@ class LargeMmapAllocator {\n       stats.currently_allocated += map_size;\n       stats.max_allocated = Max(stats.max_allocated, stats.currently_allocated);\n       stats.by_size_log[size_log]++;\n-      stat->Add(AllocatorStatMalloced, map_size);\n-      stat->Add(AllocatorStatMmapped, map_size);\n+      stat->Add(AllocatorStatAllocated, map_size);\n+      stat->Add(AllocatorStatMapped, map_size);\n     }\n     return reinterpret_cast<void*>(res);\n   }\n@@ -1050,8 +1056,8 @@ class LargeMmapAllocator {\n       chunks_sorted_ = false;\n       stats.n_frees++;\n       stats.currently_allocated -= h->map_size;\n-      stat->Add(AllocatorStatFreed, h->map_size);\n-      stat->Add(AllocatorStatUnmapped, h->map_size);\n+      stat->Sub(AllocatorStatAllocated, h->map_size);\n+      stat->Sub(AllocatorStatMapped, h->map_size);\n     }\n     MapUnmapCallback().OnUnmap(h->map_beg, h->map_size);\n     UnmapOrDie(reinterpret_cast<void*>(h->map_beg), h->map_size);"}, {"sha": "93317132c49da688d8b6919899f51f09a28e7449", "filename": "libsanitizer/sanitizer_common/sanitizer_common.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common.h?ref=ecd5543ffa4648505979d4e0b90118273acf6c17", "patch": "@@ -26,7 +26,11 @@ struct StackTrace;\n const uptr kWordSize = SANITIZER_WORDSIZE / 8;\n const uptr kWordSizeInBits = 8 * kWordSize;\n \n-const uptr kCacheLineSize = 64;\n+#if defined(__powerpc__) || defined(__powerpc64__)\n+  const uptr kCacheLineSize = 128;\n+#else\n+  const uptr kCacheLineSize = 64;\n+#endif\n \n const uptr kMaxPathLength = 512;\n "}, {"sha": "244ac36f5f861b6bd49cd69757a18bbe7ca79b6b", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cc?ref=ecd5543ffa4648505979d4e0b90118273acf6c17", "patch": "@@ -16,11 +16,13 @@\n namespace __sanitizer {\n \n uptr StackTrace::GetPreviousInstructionPc(uptr pc) {\n-#ifdef __arm__\n+#if defined(__arm__)\n   // Cancel Thumb bit.\n   pc = pc & (~1);\n-#endif\n-#if defined(__sparc__)\n+#elif defined(__powerpc__) || defined(__powerpc64__)\n+  // PCs are always 4 byte aligned.\n+  return pc - 4;\n+#elif defined(__sparc__)\n   return pc - 8;\n #else\n   return pc - 1;"}, {"sha": "3df0531f0c8a7e11ee35b8f8d958aa60dd88a2cd", "filename": "libsanitizer/tsan/tsan_mman.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Ftsan%2Ftsan_mman.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd5543ffa4648505979d4e0b90118273acf6c17/libsanitizer%2Ftsan%2Ftsan_mman.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_mman.cc?ref=ecd5543ffa4648505979d4e0b90118273acf6c17", "patch": "@@ -215,19 +215,15 @@ using namespace __tsan;\n \n extern \"C\" {\n uptr __tsan_get_current_allocated_bytes() {\n-  u64 stats[AllocatorStatCount];\n+  uptr stats[AllocatorStatCount];\n   allocator()->GetStats(stats);\n-  u64 m = stats[AllocatorStatMalloced];\n-  u64 f = stats[AllocatorStatFreed];\n-  return m >= f ? m - f : 1;\n+  return stats[AllocatorStatAllocated];\n }\n \n uptr __tsan_get_heap_size() {\n-  u64 stats[AllocatorStatCount];\n+  uptr stats[AllocatorStatCount];\n   allocator()->GetStats(stats);\n-  u64 m = stats[AllocatorStatMmapped];\n-  u64 f = stats[AllocatorStatUnmapped];\n-  return m >= f ? m - f : 1;\n+  return stats[AllocatorStatMapped];\n }\n \n uptr __tsan_get_free_bytes() {"}]}