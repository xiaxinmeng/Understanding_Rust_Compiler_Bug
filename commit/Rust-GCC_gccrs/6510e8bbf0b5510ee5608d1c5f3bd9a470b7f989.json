{"sha": "6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxMGU4YmJmMGI1NTEwZWU1NjA4ZDFjNWYzYmQ5YTQ3MGI3Zjk4OQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-03-25T16:10:56Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-03-25T16:10:56Z"}, "message": "cygming.h (DWARF_FRAME_REGISTERS): Adjust comment.\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* config/i386/cygming.h (DWARF_FRAME_REGISTERS): Adjust comment.\n\t(STACK_BOUNDARY): Check for bit-ness in case of MS_ABI.\n\t* config/i386/i386.c (ix86_conditional_register_usage): Adjust\n\tcomment and use macro TARGET_64BIT_MS_ABI instead.\n\t(ix86_keep_aggregate_return_pointer): Optimize for 64-bit case\n\tand change default behavior for 32-bit MS_ABI.\n\t(ix86_reg_parm_stack_space): Check additionally for bit-ness.\n\t(ix86_function_type_abi): Allow check for ms_abi/sysv_abi for\n\t32-bit, too.\n\t(ix86_cfun_abi): Likewise.\n\t(ix86_maybe_switch_abi): Adjust comment.\n\t(init_cumulative_args): Check for bit-ness in MS_ABI case.\n\t(ix86_gimplify_va_arg): Check just for not TARGET_64BIT_MS_ABI\n\tinstead of checking for SYSV_ABI.\n\t(ix86_nsaved_sseregs): Likewise.\n\t(ix86_compute_frame_layout): Set only for 64-bit MS_ABI alignment\n\tto 16 bytes.\n\t(ix86_expand_call): Use TARGET_64BIT_MS_ABI macro.\n\t* config/i386.h (TARGET_32BIT_MS_ABI): New macro.\n\t(ACCUMULATE_OUTGOING_ARGS): Check explicit for 64-bit MS_ABI.\n\t(OUTGOING_REG_PARM_STACK_SPACE): Likewise.\n\t* config/mingw32.h (DEFAULT_ABI): Change default always to MS_ABI.\n\nFrom-SVN: r171459", "tree": {"sha": "b72b471b6b2fce395c58167740ad401f4d7dc34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72b471b6b2fce395c58167740ad401f4d7dc34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/comments", "author": null, "committer": null, "parents": [{"sha": "a5205bd2e9f0e8b0131fe34e25a2a76167b60f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5205bd2e9f0e8b0131fe34e25a2a76167b60f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5205bd2e9f0e8b0131fe34e25a2a76167b60f59"}], "stats": {"total": 89, "additions": 63, "deletions": 26}, "files": [{"sha": "827a662890593ab3e4bfee19d65072b6f091378b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "patch": "@@ -1,3 +1,28 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* config/i386/cygming.h (DWARF_FRAME_REGISTERS): Adjust comment.\n+\t(STACK_BOUNDARY): Check for bit-ness in case of MS_ABI.\n+\t* config/i386/i386.c (ix86_conditional_register_usage): Adjust\n+\tcomment and use macro TARGET_64BIT_MS_ABI instead.\n+\t(ix86_keep_aggregate_return_pointer): Optimize for 64-bit case\n+\tand change default behavior for 32-bit MS_ABI.\n+\t(ix86_reg_parm_stack_space): Check additionally for bit-ness.\n+\t(ix86_function_type_abi): Allow check for ms_abi/sysv_abi for\n+\t32-bit, too.\n+\t(ix86_cfun_abi): Likewise.\n+\t(ix86_maybe_switch_abi): Adjust comment.\n+\t(init_cumulative_args): Check for bit-ness in MS_ABI case.\n+\t(ix86_gimplify_va_arg): Check just for not TARGET_64BIT_MS_ABI\n+\tinstead of checking for SYSV_ABI.\n+\t(ix86_nsaved_sseregs): Likewise.\n+\t(ix86_compute_frame_layout): Set only for 64-bit MS_ABI alignment\n+\tto 16 bytes.\n+\t(ix86_expand_call): Use TARGET_64BIT_MS_ABI macro.\n+\t* config/i386.h (TARGET_32BIT_MS_ABI): New macro.\n+\t(ACCUMULATE_OUTGOING_ARGS): Check explicit for 64-bit MS_ABI.\n+\t(OUTGOING_REG_PARM_STACK_SPACE): Likewise.\n+\t* config/mingw32.h (DEFAULT_ABI): Change default always to MS_ABI.\n+\n 2011-03-25  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (verify_stmts): Rename to verify_gimple_in_cfg."}, {"sha": "db266b8716389d6d2f8a0e92be8fe9ac7b6a9b84", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "patch": "@@ -84,7 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n   (TARGET_64BIT ? dbx64_register_map[(n)]\t\t\\\n \t\t: svr4_dbx_register_map[(n)])\n \n-/* The MS_ABI changes the set of call-used registers.  */\n+/* The 64-bit MS_ABI changes the set of call-used registers.  */\n #undef DWARF_FRAME_REGISTERS\n #define DWARF_FRAME_REGISTERS (TARGET_64BIT ? 33 : 17)\n \n@@ -262,7 +262,7 @@ do {\t\t\t\t\t\t\\\n #define CHECK_STACK_LIMIT 4000\n \n #undef STACK_BOUNDARY\n-#define STACK_BOUNDARY\t(ix86_abi == MS_ABI ? 128 : BITS_PER_WORD)\n+#define STACK_BOUNDARY\t(TARGET_64BIT && ix86_abi == MS_ABI ? 128 : BITS_PER_WORD)\n \n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    returns float values in the 387 and needs stack probes."}, {"sha": "4e8ca698a4470da0adb831154baa30dce57ffe5d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "patch": "@@ -4347,8 +4347,8 @@ ix86_conditional_register_usage (void)\n   if (j != INVALID_REGNUM)\n     fixed_regs[j] = call_used_regs[j] = 1;\n \n-  /* The MS_ABI changes the set of call-used registers.  */\n-  if (TARGET_64BIT && ix86_cfun_abi () == MS_ABI)\n+  /* The 64-bit MS_ABI changes the set of call-used registers.  */\n+  if (TARGET_64BIT_MS_ABI)\n     {\n       call_used_regs[SI_REG] = 0;\n       call_used_regs[DI_REG] = 0;\n@@ -5607,11 +5607,18 @@ ix86_keep_aggregate_return_pointer (tree fntype)\n {\n   tree attr;\n \n-  attr = lookup_attribute (\"callee_pop_aggregate_return\",\n-\t\t\t   TYPE_ATTRIBUTES (fntype));\n-  if (attr)\n-    return (TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr))) == 0);\n+  if (!TARGET_64BIT)\n+    {\n+      attr = lookup_attribute (\"callee_pop_aggregate_return\",\n+\t\t\t       TYPE_ATTRIBUTES (fntype));\n+      if (attr)\n+\treturn (TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr))) == 0);\n \n+      /* For 32-bit MS-ABI the default is to keep aggregate\n+         return pointer.  */\n+      if (ix86_function_type_abi (fntype) == MS_ABI)\n+\treturn true;\n+    }\n   return KEEP_AGGREGATE_RETURN_POINTER != 0;\n }\n \n@@ -5748,7 +5755,7 @@ ix86_reg_parm_stack_space (const_tree fndecl)\n     call_abi = ix86_function_abi (fndecl);\n   else\n     call_abi = ix86_function_type_abi (fndecl);\n-  if (call_abi == MS_ABI)\n+  if (TARGET_64BIT && call_abi == MS_ABI)\n     return 32;\n   return 0;\n }\n@@ -5758,7 +5765,7 @@ ix86_reg_parm_stack_space (const_tree fndecl)\n enum calling_abi\n ix86_function_type_abi (const_tree fntype)\n {\n-  if (TARGET_64BIT && fntype != NULL)\n+  if (fntype != NULL)\n     {\n       enum calling_abi abi = ix86_abi;\n       if (abi == SYSV_ABI)\n@@ -5800,7 +5807,7 @@ ix86_function_abi (const_tree fndecl)\n enum calling_abi\n ix86_cfun_abi (void)\n {\n-  if (! cfun || ! TARGET_64BIT)\n+  if (! cfun)\n     return ix86_abi;\n   return cfun->machine->call_abi;\n }\n@@ -5863,9 +5870,9 @@ ix86_call_abi_override (const_tree fndecl)\n     cfun->machine->call_abi = ix86_function_type_abi (TREE_TYPE (fndecl));\n }\n \n-/* MS and SYSV ABI have different set of call used registers.  Avoid expensive\n-   re-initialization of init_regs each time we switch function context since\n-   this is needed only during RTL expansion.  */\n+/* 64-bit MS and SYSV ABI have different set of call used registers.  Avoid\n+   expensive re-initialization of init_regs each time we switch function context\n+   since this is needed only during RTL expansion.  */\n static void\n ix86_maybe_switch_abi (void)\n {\n@@ -5931,7 +5938,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \n   /* Set up the number of registers to use for passing arguments.  */\n \n-  if (cum->call_abi == MS_ABI && !ACCUMULATE_OUTGOING_ARGS)\n+  if (TARGET_64BIT && cum->call_abi == MS_ABI && !ACCUMULATE_OUTGOING_ARGS)\n     sorry (\"ms_abi attribute requires -maccumulate-outgoing-args \"\n \t   \"or subtarget optimization implying it\");\n   cum->nregs = ix86_regparm;\n@@ -8179,7 +8186,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n     case V4DFmode:\n     case V4DImode:\n       /* Unnamed 256bit vector mode parameters are passed on stack.  */\n-      if (ix86_cfun_abi () == SYSV_ABI)\n+      if (!TARGET_64BIT_MS_ABI)\n \t{\n \t  container = NULL;\n \t  break;\n@@ -9095,7 +9102,7 @@ ix86_nsaved_sseregs (void)\n   int nregs = 0;\n   int regno;\n \n-  if (ix86_cfun_abi () != MS_ABI)\n+  if (!TARGET_64BIT_MS_ABI)\n     return 0;\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if (SSE_REGNO_P (regno) && ix86_save_reg (regno, true))\n@@ -9207,9 +9214,9 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n   stack_alignment_needed = crtl->stack_alignment_needed / BITS_PER_UNIT;\n   preferred_alignment = crtl->preferred_stack_boundary / BITS_PER_UNIT;\n \n-  /* MS ABI seem to require stack alignment to be always 16 except for function\n-     prologues and leaf.  */\n-  if ((ix86_cfun_abi () == MS_ABI && preferred_alignment < 16)\n+  /* 64-bit MS ABI seem to require stack alignment to be always 16 except for\n+     function prologues and leaf.  */\n+  if ((TARGET_64BIT_MS_ABI && preferred_alignment < 16)\n       && (!current_function_is_leaf || cfun->calls_alloca != 0\n           || ix86_current_function_calls_tls_descriptor))\n     {\n@@ -21877,8 +21884,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       pop = gen_rtx_SET (VOIDmode, stack_pointer_rtx, pop);\n       call = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, call, pop));\n     }\n-  if (TARGET_64BIT\n-      && ix86_cfun_abi () == MS_ABI\n+  if (TARGET_64BIT_MS_ABI\n       && (!callarg2 || INTVAL (callarg2) != -2))\n     {\n       /* We need to represent that SI and DI registers are clobbered"}, {"sha": "12edeba97f7ba29c507bc51e2aa9c9b891bec18b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "patch": "@@ -497,6 +497,9 @@ extern tree x86_mfence;\n /* For the Windows 64-bit ABI.  */\n #define TARGET_64BIT_MS_ABI (TARGET_64BIT && ix86_cfun_abi () == MS_ABI)\n \n+/* For the Windows 32-bit ABI.  */\n+#define TARGET_32BIT_MS_ABI (!TARGET_64BIT && ix86_cfun_abi () == MS_ABI)\n+\n /* This is re-defined by cygming.h.  */\n #define TARGET_SEH 0\n \n@@ -1439,12 +1442,12 @@ enum reg_class\n    No space will be pushed onto the stack for each call; instead, the\n    function prologue should increase the stack frame size by this amount.  \n    \n-   MS ABI seem to require 16 byte alignment everywhere except for function\n-   prologue and apilogue.  This is not possible without\n+   64-bit MS ABI seem to require 16 byte alignment everywhere except for\n+   function prologue and apilogue.  This is not possible without\n    ACCUMULATE_OUTGOING_ARGS.  */\n \n #define ACCUMULATE_OUTGOING_ARGS \\\n-  (TARGET_ACCUMULATE_OUTGOING_ARGS || ix86_cfun_abi () == MS_ABI)\n+  (TARGET_ACCUMULATE_OUTGOING_ARGS || TARGET_64BIT_MS_ABI)\n \n /* If defined, a C expression whose value is nonzero when we want to use PUSH\n    instructions to pass outgoing arguments.  */\n@@ -1470,7 +1473,7 @@ enum reg_class\n #define REG_PARM_STACK_SPACE(FNDECL) ix86_reg_parm_stack_space (FNDECL)\n \n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) \\\n-  (ix86_function_type_abi (FNTYPE) == MS_ABI)\n+  (TARGET_64BIT && ix86_function_type_abi (FNTYPE) == MS_ABI)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */"}, {"sha": "d92a3e4c9e535915744a3dac252ac1b8877101a6", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=6510e8bbf0b5510ee5608d1c5f3bd9a470b7f989", "patch": "@@ -26,6 +26,9 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_VERSION fprintf (stderr,\" (x86 MinGW)\");\n #endif\n \n+#undef DEFAULT_ABI\n+#define DEFAULT_ABI MS_ABI\n+\n /* See i386/crtdll.h for an alternative definition. _INTEGRAL_MAX_BITS\n    is for compatibility with native compiler.  */\n #define EXTRA_OS_CPP_BUILTINS()\t\t\t\t\t\\"}]}