{"sha": "6d1e6c0f5bc51270d159fd727b70176963fb2bf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQxZTZjMGY1YmM1MTI3MGQxNTlmZDcyN2I3MDE3Njk2M2ZiMmJmNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-21T22:02:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-21T22:02:25Z"}, "message": "sparc.c (eligible_for_return_delay): Do not return false if there are call-saved registers here...\n\n\t* config/sparc/sparc.c (eligible_for_return_delay): Do not return\n\tfalse if there are call-saved registers here...\n\t(sparc_can_use_return_insn_p): ...but here instead.\n\t(save_or_restore_regs): Fix thinko.\n\t(sparc_expand_prologue): Use current_function_is_leaf.\n\t(sparc_frame_pointer_required): Likewise.\n\nFrom-SVN: r174008", "tree": {"sha": "c33f3eff65e9ec19d6c8140cc20ef668bf0f57fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33f3eff65e9ec19d6c8140cc20ef668bf0f57fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d1e6c0f5bc51270d159fd727b70176963fb2bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1e6c0f5bc51270d159fd727b70176963fb2bf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1e6c0f5bc51270d159fd727b70176963fb2bf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1e6c0f5bc51270d159fd727b70176963fb2bf5/comments", "author": null, "committer": null, "parents": [{"sha": "fa4a1e468dd4fc44b1d805142d60ff1c3330276e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4a1e468dd4fc44b1d805142d60ff1c3330276e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4a1e468dd4fc44b1d805142d60ff1c3330276e"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "22f641db519f1acf907b0723bbb6566f9f5a3e2d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1e6c0f5bc51270d159fd727b70176963fb2bf5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1e6c0f5bc51270d159fd727b70176963fb2bf5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=6d1e6c0f5bc51270d159fd727b70176963fb2bf5", "patch": "@@ -2808,11 +2808,6 @@ eligible_for_return_delay (rtx trial)\n   if (get_attr_length (trial) != 1)\n     return 0;\n \n-  /* If there are any call-saved registers, we should scan TRIAL if it\n-     does not reference them.  For now just make it easy.  */\n-  if (num_gfregs)\n-    return 0;\n-\n   /* If the function uses __builtin_eh_return, the eh_return machinery\n      occupies the delay slot.  */\n   if (crtl->calls_eh_return)\n@@ -4400,7 +4395,7 @@ save_or_restore_regs (int low, int high, rtx base, int offset, int action)\n \t    emit_move_insn (gen_rtx_REG (mode, regno), mem);\n \n \t  /* Always preserve double-word alignment.  */\n-\t  offset = (offset + 7) & -8;\n+\t  offset = (offset + 8) & -8;\n \t}\n     }\n \n@@ -4507,7 +4502,7 @@ sparc_expand_prologue (void)\n      example, the regrename pass has special provisions to not rename to\n      non-leaf registers in a leaf function.  */\n   sparc_leaf_function_p\n-    = optimize > 0 && leaf_function_p () && only_leaf_regs_used ();\n+    = optimize > 0 && current_function_is_leaf && only_leaf_regs_used ();\n \n   /* Need to use actual_fsize, since we are also allocating\n      space for our callee (and our own register save area).  */\n@@ -4637,6 +4632,7 @@ bool\n sparc_can_use_return_insn_p (void)\n {\n   return sparc_prologue_data_valid_p\n+\t && num_gfregs == 0\n \t && (actual_fsize == 0 || !sparc_leaf_function_p);\n }\n \n@@ -9796,7 +9792,7 @@ sparc_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n bool\n sparc_frame_pointer_required (void)\n {\n-  return !(leaf_function_p () && only_leaf_regs_used ());\n+  return !(current_function_is_leaf && only_leaf_regs_used ());\n }\n \n /* The way this is structured, we can't eliminate SFP in favor of SP"}]}