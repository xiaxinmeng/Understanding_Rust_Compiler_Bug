{"sha": "fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlM2U3MmNkZjRmMjk3MWY1MzRkYmVhOGJhOGIxZjQ5YTEyMzBmZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-26T19:31:29Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-26T19:31:29Z"}, "message": "Strengthen various insn emission functions\n\ngcc/\n2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (push_to_sequence): Strengthen param from rtx to\n\trtx_insn *.\n\t(push_to_sequence2): Likewise for both params.\n\t(delete_insns_since): Likewise for param.\n\t(reorder_insns_nobb): Likewise for all three params.\n\t(set_new_first_and_last_insn): Likewise for both params.\n\n\t* emit-rtl.h (set_first_insn): Strengthen param \"insn\" from rtx to\n\trtx_insn *.  Remove now-redundant cast.\n\t(set_last_insn): Likewise.\n\n\t* builtins.c (expand_builtin_return): Strengthen local\n\t\"call_fusage\" from rtx to rtx_insn *.\n\t* cfgrtl.c (create_basic_block_structure): Likewise for local\n\t\"after\".\n\t* emit-rtl.c (set_new_first_and_last_insn): Likewise for params\n\t\"first\", \"last\" and local \"insn\".\n\t(delete_insns_since): Likewise for param \"from\".\n\t(reorder_insns_nobb): Likewise for params \"from\", \"to\", \"after\"\n\tand local \"x\".\n\t(push_to_sequence): Likewise for param \"first\" and local \"last\".\n\t(push_to_sequence2): Likewise for params \"first\" and \"last\".\n\t* lra.c (emit_add3_insn): Likewise for local \"last\".\n\t(lra_emit_add): Likewise.\n\t* lra-constraints.c (base_to_reg): Likewise for locals \"insn\",\n\t\"last_insn\".\n\t(process_address_1): Likewise for locals \"insn\", last\".\n\t* modulo-sched.c (ps_first_note): Likewise for return type.\n\t* optabs.c (expand_binop_directly): Likewise for param \"last\".\n\nFrom-SVN: r214539", "tree": {"sha": "9eaf84138b17fd53a0228bd51cde730973bdc703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eaf84138b17fd53a0228bd51cde730973bdc703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db76cf1e63450264df9a4b0e7e9ccdc85ce70afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db76cf1e63450264df9a4b0e7e9ccdc85ce70afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db76cf1e63450264df9a4b0e7e9ccdc85ce70afa"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "81f9bd5a9abc95d98141523756107078931eea73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -1,3 +1,35 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (push_to_sequence): Strengthen param from rtx to\n+\trtx_insn *.\n+\t(push_to_sequence2): Likewise for both params.\n+\t(delete_insns_since): Likewise for param.\n+\t(reorder_insns_nobb): Likewise for all three params.\n+\t(set_new_first_and_last_insn): Likewise for both params.\n+\n+\t* emit-rtl.h (set_first_insn): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.  Remove now-redundant cast.\n+\t(set_last_insn): Likewise.\n+\n+\t* builtins.c (expand_builtin_return): Strengthen local\n+\t\"call_fusage\" from rtx to rtx_insn *.\n+\t* cfgrtl.c (create_basic_block_structure): Likewise for local\n+\t\"after\".\n+\t* emit-rtl.c (set_new_first_and_last_insn): Likewise for params\n+\t\"first\", \"last\" and local \"insn\".\n+\t(delete_insns_since): Likewise for param \"from\".\n+\t(reorder_insns_nobb): Likewise for params \"from\", \"to\", \"after\"\n+\tand local \"x\".\n+\t(push_to_sequence): Likewise for param \"first\" and local \"last\".\n+\t(push_to_sequence2): Likewise for params \"first\" and \"last\".\n+\t* lra.c (emit_add3_insn): Likewise for local \"last\".\n+\t(lra_emit_add): Likewise.\n+\t* lra-constraints.c (base_to_reg): Likewise for locals \"insn\",\n+\t\"last_insn\".\n+\t(process_address_1): Likewise for locals \"insn\", last\".\n+\t* modulo-sched.c (ps_first_note): Likewise for return type.\n+\t* optabs.c (expand_binop_directly): Likewise for param \"last\".\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (get_last_insn_anywhere): Strengthen return type from rtx"}, {"sha": "e5a9b4d72286b10e649f23ab96a8a8743afeec59", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -1743,7 +1743,7 @@ expand_builtin_return (rtx result)\n   int size, align, regno;\n   enum machine_mode mode;\n   rtx reg;\n-  rtx call_fusage = 0;\n+  rtx_insn *call_fusage = 0;\n \n   result = convert_memory_address (Pmode, result);\n "}, {"sha": "c39049202a3ebd1e33377bb5167db7b8041b760a", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -283,7 +283,7 @@ create_basic_block_structure (rtx_insn *head, rtx_insn *end, rtx_note *bb_note,\n     {\n       /* If we found an existing note, thread it back onto the chain.  */\n \n-      rtx after;\n+      rtx_insn *after;\n \n       if (LABEL_P (head))\n \tafter = head;"}, {"sha": "8fe13312ab4f6f3006585744c9d7a83bb0732494", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -2488,9 +2488,9 @@ gen_label_rtx (void)\n    Used for an inline-procedure after copying the insn chain.  */\n \n void\n-set_new_first_and_last_insn (rtx first, rtx last)\n+set_new_first_and_last_insn (rtx_insn *first, rtx_insn *last)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   set_first_insn (first);\n   set_last_insn (last);\n@@ -4165,7 +4165,7 @@ add_function_usage_to (rtx call_insn, rtx call_fusage)\n    FROM becomes the new last instruction.  */\n \n void\n-delete_insns_since (rtx from)\n+delete_insns_since (rtx_insn *from)\n {\n   if (from == 0)\n     set_first_insn (0);\n@@ -4185,10 +4185,10 @@ delete_insns_since (rtx from)\n    called after delay-slot filling has been done.  */\n \n void\n-reorder_insns_nobb (rtx from, rtx to, rtx after)\n+reorder_insns_nobb (rtx_insn *from, rtx_insn *to, rtx_insn *after)\n {\n #ifdef ENABLE_CHECKING\n-  rtx x;\n+  rtx_insn *x;\n   for (x = from; x != to; x = NEXT_INSN (x))\n     gcc_assert (after != x);\n   gcc_assert (after != to);\n@@ -5309,9 +5309,9 @@ start_sequence (void)\n    start_sequence for more information about how to use this function.  */\n \n void\n-push_to_sequence (rtx first)\n+push_to_sequence (rtx_insn *first)\n {\n-  rtx last;\n+  rtx_insn *last;\n \n   start_sequence ();\n \n@@ -5326,7 +5326,7 @@ push_to_sequence (rtx first)\n    looping through the list.  */\n \n void\n-push_to_sequence2 (rtx first, rtx last)\n+push_to_sequence2 (rtx_insn *first, rtx_insn *last)\n {\n   start_sequence ();\n "}, {"sha": "9f5ebe856fca1c251916d69274f96b2a1f7b2908", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -86,10 +86,10 @@ get_insns (void)\n /* Specify a new insn as the first in the chain.  */\n \n static inline void\n-set_first_insn (rtx insn)\n+set_first_insn (rtx_insn *insn)\n {\n   gcc_checking_assert (!insn || !PREV_INSN (insn));\n-  crtl->emit.x_first_insn = safe_as_a <rtx_insn *> (insn);\n+  crtl->emit.x_first_insn = insn;\n }\n \n /* Return the last insn emitted in current sequence or current function.  */\n@@ -103,10 +103,10 @@ get_last_insn (void)\n /* Specify a new insn as the last in the chain.  */\n \n static inline void\n-set_last_insn (rtx insn)\n+set_last_insn (rtx_insn *insn)\n {\n   gcc_checking_assert (!insn || !NEXT_INSN (insn));\n-  crtl->emit.x_last_insn = safe_as_a <rtx_insn *> (insn);\n+  crtl->emit.x_last_insn = insn;\n }\n \n /* Return a number larger than any instruction's uid in this function.  */"}, {"sha": "9152ffeb3ef103bc17749d9f29a20f84ddac4ab8", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -2567,8 +2567,8 @@ base_to_reg (struct address_info *ad)\n   int code = -1;\n   rtx new_inner = NULL_RTX;\n   rtx new_reg = NULL_RTX;\n-  rtx insn;\n-  rtx last_insn = get_last_insn();\n+  rtx_insn *insn;\n+  rtx_insn *last_insn = get_last_insn();\n \n   lra_assert (ad->base == ad->base_term && ad->disp == ad->disp_term);\n   cl = base_reg_class (ad->mode, ad->as, ad->base_outer_code,\n@@ -2834,8 +2834,8 @@ process_address_1 (int nop, rtx_insn **before, rtx_insn **after)\n \t  new_reg = lra_create_new_reg (Pmode, NULL_RTX, cl, \"addr\");\n #ifdef HAVE_lo_sum\n \t  {\n-\t    rtx insn;\n-\t    rtx last = get_last_insn ();\n+\t    rtx_insn *insn;\n+\t    rtx_insn *last = get_last_insn ();\n \n \t    /* addr => lo_sum (new_base, addr), case (2) above.  */\n \t    insn = emit_insn (gen_rtx_SET"}, {"sha": "f16705ef12004680503375d5259bbc659f859742", "filename": "gcc/lra.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -252,7 +252,8 @@ lra_delete_dead_insn (rtx_insn *insn)\n static rtx\n emit_add3_insn (rtx x, rtx y, rtx z)\n {\n-  rtx insn, last;\n+  rtx_insn *last;\n+  rtx insn;\n \n   last = get_last_insn ();\n \n@@ -309,7 +310,8 @@ void\n lra_emit_add (rtx x, rtx y, rtx z)\n {\n   int old;\n-  rtx insn, last;\n+  rtx insn;\n+  rtx_insn *last;\n   rtx a1, a2, base, index, disp, scale, index_scale;\n   bool ok_p;\n "}, {"sha": "3b62eafe157f15902b98a5203ace9d12afe4a6bf", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -319,7 +319,7 @@ ps_rtl_insn (partial_schedule_ptr ps, int id)\n    in the loop that was associated with ps_rtl_insn (PS, ID).\n    If the instruction had some notes before it, this is the first\n    of those notes.  */\n-static rtx\n+static rtx_insn *\n ps_first_note (partial_schedule_ptr ps, int id)\n {\n   gcc_assert (id < ps->g->num_nodes);"}, {"sha": "ef8941b00ee0160f36f29eaf2ffe749a67d01c70", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -1412,7 +1412,7 @@ static rtx\n expand_binop_directly (enum machine_mode mode, optab binoptab,\n \t\t       rtx op0, rtx op1,\n \t\t       rtx target, int unsignedp, enum optab_methods methods,\n-\t\t       rtx last)\n+\t\t       rtx_insn *last)\n {\n   enum machine_mode from_mode = widened_mode (mode, op0, op1);\n   enum insn_code icode = find_widening_optab_handler (binoptab, mode,"}, {"sha": "12b9147ed75d7901ae7722d54b369d5d5af66cd3", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fee3e72cdf4f2971f534dbea8ba8b1f49a1230ff", "patch": "@@ -2362,8 +2362,8 @@ extern rtx_insn *get_last_insn_anywhere (void);\n extern rtx get_first_nonnote_insn (void);\n extern rtx get_last_nonnote_insn (void);\n extern void start_sequence (void);\n-extern void push_to_sequence (rtx);\n-extern void push_to_sequence2 (rtx, rtx);\n+extern void push_to_sequence (rtx_insn *);\n+extern void push_to_sequence2 (rtx_insn *, rtx_insn *);\n extern void end_sequence (void);\n #if TARGET_SUPPORTS_WIDE_INT == 0\n extern double_int rtx_to_double_int (const_rtx);\n@@ -3094,13 +3094,13 @@ extern int max_reg_num (void);\n extern int max_label_num (void);\n extern int get_first_label_num (void);\n extern void maybe_set_first_label_num (rtx);\n-extern void delete_insns_since (rtx);\n+extern void delete_insns_since (rtx_insn *);\n extern void mark_reg_pointer (rtx, int);\n extern void mark_user_reg (rtx);\n extern void reset_used_flags (rtx);\n extern void set_used_flags (rtx);\n extern void reorder_insns (rtx_insn *, rtx_insn *, rtx_insn *);\n-extern void reorder_insns_nobb (rtx, rtx, rtx);\n+extern void reorder_insns_nobb (rtx_insn *, rtx_insn *, rtx_insn *);\n extern int get_max_insn_count (void);\n extern int in_sequence_p (void);\n extern void init_emit (void);\n@@ -3109,7 +3109,7 @@ extern void init_derived_machine_modes (void);\n extern void init_emit_once (void);\n extern void push_topmost_sequence (void);\n extern void pop_topmost_sequence (void);\n-extern void set_new_first_and_last_insn (rtx, rtx);\n+extern void set_new_first_and_last_insn (rtx_insn *, rtx_insn *);\n extern unsigned int unshare_all_rtl (void);\n extern void unshare_all_rtl_again (rtx_insn *);\n extern void unshare_all_rtl_in_chain (rtx);"}]}