{"sha": "3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyZDM1MmMxZDhhOGIwM2IwMmU1N2EzNDM1OGQ1ZTJlZTY1ZjllZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-07-24T08:35:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-24T08:35:54Z"}, "message": "re PR c++/57942 (g++-4.8.1 tries to instantiate wrong constructor)\n\n/cp\n2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57942\n\t* typeck.c (ptr_reasonably_similar): Use COMPARE_STRICT if one of\n\tthe target types is incomplete; return a bool, not an int.\n\t* cp-tree.h (ptr_reasonably_similar): Adjust declaration.\n\n/testsuite\n2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57942\n\t* g++.dg/inherit/pr57942.C: New.\n\nFrom-SVN: r201201", "tree": {"sha": "aa800f4feaf2aef175748c37ddc9af9067e46167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa800f4feaf2aef175748c37ddc9af9067e46167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/comments", "author": null, "committer": null, "parents": [{"sha": "a5f257fdc1a761be12de5be152137f6abe8a2e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f257fdc1a761be12de5be152137f6abe8a2e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f257fdc1a761be12de5be152137f6abe8a2e89"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "f7052cb54aa0ea8cc047cdfac4998d8b93f4cf47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "patch": "@@ -1,3 +1,10 @@\n+2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57942\n+\t* typeck.c (ptr_reasonably_similar): Use COMPARE_STRICT if one of\n+\tthe target types is incomplete; return a bool, not an int.\n+\t* cp-tree.h (ptr_reasonably_similar): Adjust declaration.\n+\n 2013-07-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* cp-tree.h (DERIVED_FROM_P): Pass tf_none to lookup_base, not"}, {"sha": "4a2271fcce08f75a2d6316f5a145cc779abaf698", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "patch": "@@ -6022,7 +6022,7 @@ extern tree convert_for_initialization\t\t(tree, tree, tree, int,\n extern int comp_ptr_ttypes\t\t\t(tree, tree);\n extern bool comp_ptr_ttypes_const\t\t(tree, tree);\n extern bool error_type_p\t\t\t(const_tree);\n-extern int ptr_reasonably_similar\t\t(const_tree, const_tree);\n+extern bool ptr_reasonably_similar\t\t(const_tree, const_tree);\n extern tree build_ptrmemfunc\t\t\t(tree, tree, int, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n extern int cp_type_quals\t\t\t(const_tree);"}, {"sha": "6f330559adf06793833b86e7ff899cd0aed9848f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "patch": "@@ -8599,10 +8599,10 @@ error_type_p (const_tree type)\n     }\n }\n \n-/* Returns 1 if to and from are (possibly multi-level) pointers to the same\n+/* Returns true if to and from are (possibly multi-level) pointers to the same\n    type or inheritance-related types, regardless of cv-quals.  */\n \n-int\n+bool\n ptr_reasonably_similar (const_tree to, const_tree from)\n {\n   for (; ; to = TREE_TYPE (to), from = TREE_TYPE (from))\n@@ -8614,7 +8614,7 @@ ptr_reasonably_similar (const_tree to, const_tree from)\n \treturn !error_type_p (to);\n \n       if (TREE_CODE (to) != TREE_CODE (from))\n-\treturn 0;\n+\treturn false;\n \n       if (TREE_CODE (from) == OFFSET_TYPE\n \t  && comptypes (TYPE_OFFSET_BASETYPE (to),\n@@ -8624,19 +8624,24 @@ ptr_reasonably_similar (const_tree to, const_tree from)\n \n       if (TREE_CODE (to) == VECTOR_TYPE\n \t  && vector_types_convertible_p (to, from, false))\n-\treturn 1;\n+\treturn true;\n \n       if (TREE_CODE (to) == INTEGER_TYPE\n \t  && TYPE_PRECISION (to) == TYPE_PRECISION (from))\n-\treturn 1;\n+\treturn true;\n \n       if (TREE_CODE (to) == FUNCTION_TYPE)\n \treturn !error_type_p (to) && !error_type_p (from);\n \n       if (!TYPE_PTR_P (to))\n-\treturn comptypes\n-\t  (TYPE_MAIN_VARIANT (to), TYPE_MAIN_VARIANT (from),\n-\t   COMPARE_BASE | COMPARE_DERIVED);\n+\t{\n+\t  /* When either type is incomplete avoid DERIVED_FROM_P,\n+\t     which may call complete_type (c++/57942).  */\n+\t  bool b = !COMPLETE_TYPE_P (to) || !COMPLETE_TYPE_P (from);\n+\t  return comptypes\n+\t    (TYPE_MAIN_VARIANT (to), TYPE_MAIN_VARIANT (from),\n+\t     b ? COMPARE_STRICT : COMPARE_BASE | COMPARE_DERIVED);\n+\t}\n     }\n }\n "}, {"sha": "1cfb5a4f945f172c61955a32dd8f663fc846f310", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "patch": "@@ -1,3 +1,8 @@\n+2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57942\n+\t* g++.dg/inherit/pr57942.C: New.\n+\n 2013-07-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/bool2.h: New file, test the code generation"}, {"sha": "580e9ecd2427a73263dca663294f49f8f44ef26f", "filename": "gcc/testsuite/g++.dg/inherit/pr57942.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fpr57942.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fpr57942.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fpr57942.C?ref=3f2d352c1d8a8b03b02e57a34358d5e2ee65f9ee", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/57942\n+\n+template<typename T> struct S { typename T::error type; };\n+struct X {};\n+void f(S<int>*);\n+void f(...);\n+void g() { f((X*)0); }\n+struct Y;\n+void h() { f((Y*)0); }"}]}