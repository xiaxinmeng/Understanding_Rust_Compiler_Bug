{"sha": "a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiNTZjM2VmNzAwMzZhZjZkMTcxZDYxZWE0OGFkNGMzNjhmY2I1Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T15:02:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T15:02:07Z"}, "message": "c-ppoutput: Fix preprocessing ICE on very large line number [PR99325]\n\nIn libcpp, lines are represented as linenum_type, which is unsigned int.\nThe following testcases ICE because maybe_print_line_1 is sometimes called\nwith UNKNOWN_LOCATION (e.g. at pragma eof) and while most of the time\nthe\n        && src_line >= print.src_line\n        && src_line < print.src_line + 8\ncheck doesn't succeed for the src_line of 0 from UNKNOWN_LOCATION, when\nprint.src_line is from very large line numbers (UINT_MAX - 7 and above)\nit succeeds (with UB on the compiler side) but src_file is NULL for\nUNKNOWN_LOCATION and so the strcmp call ICEs.\nAs print.src_line can easily wrap around, this patch changes its type\nto unsigned int to match libcpp, so that we don't invoke UB in the compiler.\nFor print.src_line of UINT_MAX - 7 and above, src_line from UNKNOWN_LOCATION\nwill not pass that test anymore, but when it wraps around to 0, it can,\nso I've also added a check for src_loc != UNKNOWN_LOCATION (or, if\npreferred, could be src_file != NULL).\nBesides fixing the ICE and UB in the compiler, I believe worst case the\npatch will cause printing a few more line directives in the preprocessed\nsource around the wrapping from lines UINT_MAX - 7 to 0 (but less\naround the wrapping from INT_MAX to INT_MAX + 1U), but I think those\nare exceptional cases (sources with > 2billion lines are rare and\nwe warn or error on #line > INT_MAX).\n\n2021-03-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/99325\n\t* c-ppoutput.c (print): Change src_line type from int to unsigned.\n\t(token_streamer::stream) Likewise.\n\t(maybe_print_line_1): Likewise.  Don't strcmp src_file if src_loc is\n\tUNKNOWN_LOCATION.\n\n\t* gcc.dg/cpp/line11.c: New test.\n\t* gcc.dg/cpp/line12.c: New test.", "tree": {"sha": "0f00abfaabbe4e976247537c1413b7c1a6a65ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f00abfaabbe4e976247537c1413b7c1a6a65ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6bc1680a493de356d6a381718021c6a44401201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bc1680a493de356d6a381718021c6a44401201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bc1680a493de356d6a381718021c6a44401201"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "ae33c1ff40f76cfe4094d43607995461ffdeab7d", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "patch": "@@ -32,7 +32,7 @@ static struct\n   FILE *outf;\t\t\t/* Stream to write to.  */\n   const cpp_token *prev;\t/* Previous token.  */\n   const cpp_token *source;\t/* Source token for spacing.  */\n-  int src_line;\t\t\t/* Line number currently being written.  */\n+  unsigned src_line;\t\t/* Line number currently being written.  */\n   bool printed;\t\t\t/* True if something output at line.  */\n   bool first_time;\t\t/* pp_file_change hasn't been called yet.  */\n   bool prev_was_system_token;\t/* True if the previous token was a\n@@ -213,7 +213,7 @@ token_streamer::stream (cpp_reader *pfile, const cpp_token *token,\n   /* Subtle logic to output a space if and only if necessary.  */\n   if (avoid_paste)\n     {\n-      int src_line = LOCATION_LINE (loc);\n+      unsigned src_line = LOCATION_LINE (loc);\n \n       if (print.source == NULL)\n \tprint.source = token;\n@@ -237,7 +237,7 @@ token_streamer::stream (cpp_reader *pfile, const cpp_token *token,\n     }\n   else if (token->flags & PREV_WHITE)\n     {\n-      int src_line = LOCATION_LINE (loc);\n+      unsigned src_line = LOCATION_LINE (loc);\n \n       if (src_line != print.src_line\n \t  && do_line_adjustments\n@@ -437,7 +437,7 @@ static bool\n maybe_print_line_1 (location_t src_loc, FILE *stream)\n {\n   bool emitted_line_marker = false;\n-  int src_line = LOCATION_LINE (src_loc);\n+  unsigned src_line = LOCATION_LINE (src_loc);\n   const char *src_file = LOCATION_FILE (src_loc);\n \n   /* End the previous line of text.  */\n@@ -451,6 +451,7 @@ maybe_print_line_1 (location_t src_loc, FILE *stream)\n   if (!flag_no_line_commands\n       && src_line >= print.src_line\n       && src_line < print.src_line + 8\n+      && src_loc != UNKNOWN_LOCATION\n       && strcmp (src_file, print.src_file) == 0)\n     {\n       while (src_line > print.src_line)"}, {"sha": "67c6583f7dae7aa2dbbc8397fa8747db2cd9b566", "filename": "gcc/testsuite/gcc.dg/cpp/line11.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline11.c?ref=a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "patch": "@@ -0,0 +1,6 @@\n+/* PR c/99325 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-pedantic\" } */\n+\n+#line 4294967295\t/* { dg-warning \"line number out of range\" } */\n+#pragma message \"foo\""}, {"sha": "c2e88f67bf960ca685c0c8aaee02824895c1f937", "filename": "gcc/testsuite/gcc.dg/cpp/line12.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline12.c?ref=a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "patch": "@@ -0,0 +1,6 @@\n+/* PR c/99325 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-pedantic\" } */\n+\n+#line 9223372036854775807\t/* { dg-warning \"line number out of range\" } */\n+#pragma message \"foo\""}]}