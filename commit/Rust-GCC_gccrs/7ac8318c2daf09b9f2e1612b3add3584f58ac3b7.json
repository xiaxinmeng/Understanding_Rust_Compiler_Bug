{"sha": "7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjODMxOGMyZGFmMDliOWYyZTE2MTJiM2FkZDM1ODRmNThhYzNiNw==", "commit": {"author": {"name": "Basile Starynkevitch", "email": "basile@starynkevitch.net", "date": "2009-11-06T19:20:39Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-11-06T19:20:39Z"}, "message": "plugins.texi (Plugin callbacks): added PLUGIN_PRAGMAS.\n\n2009-11-06  Basile Starynkevitch  <basile@starynkevitch.net>\n\n\t* doc/plugins.texi (Plugin callbacks): added PLUGIN_PRAGMAS.\n\t* c-pragma.c: Include \"plugin.h\".\n\t(init_pragma): Invoke PLUGIN_PRAGMAS.\n\t* gcc-plugin.h: Added PLUGIN_PRAGMAS.\n\t* plugin.c (plugin_event_name): Added PLUGIN_PRAGMAS & the missing\n\tPLUGIN_ATTRIBUTES.\n\t(register_callback): Added PLUGIN_PRAGMAS. Fixed typo in message\n\terror for unknown callback event.\n\t(invoke_plugin_callbacks): Added PLUGIN_PRAGMAS.\n\t* Makefile.in (c-pragma.o): Added dependency upon plugin.h.\n\t(PLUGIN_HEADERS): added plugin.h.\n\n2009-11-06  Basile Starynkevitch  <basile@starynkevitch.net>\n\n\t* g++.dg/plugin/pragma_plugin-test-1.C: new testcase for\n\tPLUGIN_PRAGMAS.\n\t* g++.dg/plugin/pragma_plugin.c: new test plugin for\n\tPLUGIN_PRAGMAS.\n\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add pragma_plugin.c and\n\tpragma_plugin-test-1.C.\n\nFrom-SVN: r153975", "tree": {"sha": "9a9a21a6222d8d5e0d4faa8b2d2a263613b6cd83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a9a21a6222d8d5e0d4faa8b2d2a263613b6cd83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/comments", "author": {"login": "bstarynk", "id": 90412, "node_id": "MDQ6VXNlcjkwNDEy", "avatar_url": "https://avatars.githubusercontent.com/u/90412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstarynk", "html_url": "https://github.com/bstarynk", "followers_url": "https://api.github.com/users/bstarynk/followers", "following_url": "https://api.github.com/users/bstarynk/following{/other_user}", "gists_url": "https://api.github.com/users/bstarynk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstarynk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstarynk/subscriptions", "organizations_url": "https://api.github.com/users/bstarynk/orgs", "repos_url": "https://api.github.com/users/bstarynk/repos", "events_url": "https://api.github.com/users/bstarynk/events{/privacy}", "received_events_url": "https://api.github.com/users/bstarynk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87e928642892922f18f1e652f41d8fc9169ae757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e928642892922f18f1e652f41d8fc9169ae757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e928642892922f18f1e652f41d8fc9169ae757"}], "stats": {"total": 114, "additions": 109, "deletions": 5}, "files": [{"sha": "f66f9ef0bf4615ffb1d6aa5d2557e847991758e5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -1982,7 +1982,7 @@ c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n     $(TREE_H) $(FUNCTION_H) $(C_PRAGMA_H) $(TOPLEV_H) output.h $(GGC_H) $(TM_P_H) \\\n     $(C_COMMON_H) $(TARGET_H) gt-c-pragma.h $(CPPLIB_H) $(FLAGS_H) $(DIAGNOSTIC_H) \\\n-    opts.h\n+    opts.h $(PLUGINS_H)\n graph.o: graph.c $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) $(FLAGS_H) output.h \\\n     $(RTL_H) $(FUNCTION_H) hard-reg-set.h $(BASIC_BLOCK_H) graph.h $(OBSTACK_H) \\\n     $(CONFIG_H)\n@@ -4260,7 +4260,8 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(host_xm_file_list) $(host_xm_include_list) $(xm_include_list) \\\n   intl.h $(PLUGIN_VERSION_H) $(DIAGNOSTIC_H) $(C_COMMON_H) $(C_PRETTY_PRINT_H) \\\n   tree-iterator.h $(PLUGIN_H) $(TREE_FLOW_H) langhooks.h incpath.h \\\n-  tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H)\n+  tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H) \\\n+  $(C_PRAGMA_H)  $(CPPLIB_H)  $(FUNCTION_H)\n \n # Install the headers needed to build a plugin.\n install-plugin: installdirs lang.install-plugin\n@@ -4524,7 +4525,7 @@ install-collect2: collect2 installdirs\n # Install lto-wrapper.\n install-lto-wrapper: lto-wrapper$(exeext)\n \t$(INSTALL_PROGRAM) lto-wrapper$(exeext) $(DESTDIR)$(libexecsubdir)/lto-wrapper$(exeext)\n-\t\n+\n # Cancel installation by deleting the installed files.\n uninstall: lang.uninstall\n \t-rm -rf $(DESTDIR)$(libsubdir)"}, {"sha": "f71399fa93ee40e49e08413532305ff15e4508d0", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"diagnostic.h\"\n #include \"opts.h\"\n+#include \"plugin.h\"\n \n #define GCC_BAD(gmsgid) \\\n   do { warning (OPT_Wpragmas, gmsgid); return; } while (0)\n@@ -1450,6 +1451,9 @@ init_pragma (void)\n #ifdef REGISTER_TARGET_PRAGMAS\n   REGISTER_TARGET_PRAGMAS ();\n #endif\n+\n+  /* Allow plugins to register their own pragmas. */\n+  invoke_plugin_callbacks (PLUGIN_PRAGMAS, NULL);\n }\n \n #include \"gt-c-pragma.h\""}, {"sha": "123f67075add3acafa058f67064b73c098dff360", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -136,6 +136,7 @@ enum plugin_event\n   PLUGIN_REGISTER_GGC_CACHES,\t/* Register an extra GGC cache table. */\n   PLUGIN_ATTRIBUTES,            /* Called during attribute registration */\n   PLUGIN_START_UNIT,            /* Called before processing a translation unit.  */\n+  PLUGIN_PRAGMAS,\t        /* Called during pragma registration. */\n   PLUGIN_EVENT_LAST             /* Dummy event used for indexing callback\n                                    array.  */\n @};\n@@ -156,6 +157,11 @@ For the PLUGIN_PASS_MANAGER_SETUP, PLUGIN_INFO, PLUGIN_REGISTER_GGC_ROOTS\n and PLUGIN_REGISTER_GGC_CACHES pseudo-events the @code{callback} should be\n null, and the @code{user_data} is specific.\n \n+When the PLUGIN_PRAGMAS event is triggered (with a null\n+pointer as data from GCC), plugins may register their own pragmas\n+using functions like @code{c_register_pragma} or\n+@code{c_register_pragma_with_expansion}.\n+\n @section Interacting with the pass manager\n \n There needs to be a way to add/reorder/remove passes dynamically. This"}, {"sha": "2e36f486262981c1661c4822eab1cd6ce7c12e8b", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -43,6 +43,7 @@ enum plugin_event\n   PLUGIN_REGISTER_GGC_CACHES,\t/* Register an extra GGC cache table. */\n   PLUGIN_ATTRIBUTES,            /* Called during attribute registration.  */\n   PLUGIN_START_UNIT,            /* Called before processing a translation unit.  */\n+  PLUGIN_PRAGMAS,\t        /* Called during pragma registration.  */\n   PLUGIN_EVENT_LAST             /* Dummy event used for indexing callback\n                                    array.  */\n };"}, {"sha": "2d64422787eb43a9fae255175e64af86ec6f993e", "filename": "gcc/plugin.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -58,7 +58,9 @@ const char *plugin_event_name[] =\n   \"PLUGIN_GGC_END\",\n   \"PLUGIN_REGISTER_GGC_ROOTS\",\n   \"PLUGIN_REGISTER_GGC_CACHES\",\n-  \"PLUGIN_START_UNIT\", \n+  \"PLUGIN_ATTRIBUTES\",\n+  \"PLUGIN_START_UNIT\",\n+  \"PLUGIN_PRAGMAS\",\n   \"PLUGIN_EVENT_LAST\"\n };\n \n@@ -325,6 +327,7 @@ register_callback (const char *plugin_name,\n       case PLUGIN_GGC_MARKING:\n       case PLUGIN_GGC_END:\n       case PLUGIN_ATTRIBUTES:\n+      case PLUGIN_PRAGMAS:\n       case PLUGIN_FINISH:\n         {\n           struct callback_info *new_callback;\n@@ -344,7 +347,7 @@ register_callback (const char *plugin_name,\n         break;\n       case PLUGIN_EVENT_LAST:\n       default:\n-        error (\"Unkown callback event registered by plugin %s\",\n+        error (\"Unknown callback event registered by plugin %s\",\n                plugin_name);\n     }\n }\n@@ -368,6 +371,7 @@ invoke_plugin_callbacks (enum plugin_event event, void *gcc_data)\n       case PLUGIN_FINISH_UNIT:\n       case PLUGIN_CXX_CP_PRE_GENERICIZE:\n       case PLUGIN_ATTRIBUTES:\n+      case PLUGIN_PRAGMAS:\n       case PLUGIN_FINISH:\n       case PLUGIN_GGC_START:\n       case PLUGIN_GGC_MARKING:"}, {"sha": "bf743708f873bab24525487f06dbf574a56f3918", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -1,3 +1,12 @@\n+2009-11-06  Basile Starynkevitch  <basile@starynkevitch.net>\n+\n+\t* g++.dg/plugin/pragma_plugin-test-1.C: new testcase for\n+\tPLUGIN_PRAGMAS.\n+\t* g++.dg/plugin/pragma_plugin.c: new test plugin for\n+\tPLUGIN_PRAGMAS.\n+\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add pragma_plugin.c and\n+\tpragma_plugin-test-1.C.\n+\n 2009-11-06  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c++/41536"}, {"sha": "72de92dfd427bd6199853e5b0ef1c7943c0d088a", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -48,6 +48,7 @@ load_lib plugin-support.exp\n # plugin_test_list={ {plugin1 test1 test2 ...} {plugin2 test1 ...} ... }\n set plugin_test_list [list \\\n     { attribute_plugin.c attribute_plugin-test-1.C } \\\n+    { pragma_plugin.c pragma_plugin-test-1.C } \\\n     { selfassign.c self-assign-test-1.C self-assign-test-2.C self-assign-test-3.C } \\\n     { dumb_plugin.c dumb-plugin-test-1.C } \\\n     { header_plugin.c header-plugin-test.C } ]"}, {"sha": "3c084208b71c9fb8fc4e6dbd25a35382eba0c6fb", "filename": "gcc/testsuite/g++.dg/plugin/pragma_plugin-test-1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin-test-1.C?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -0,0 +1,18 @@\n+// { dg-warning \"Callback to register pragmas\" \"\" { target *-*-* } 0 }\n+\n+int some_func (int c);\n+\n+#pragma GCCPLUGIN sayhello \"here\" // { dg-warning \"'pragma GCCPLUGIN sayhello' outside of function: here\" }\n+\n+int some_func (const char* s)\n+{\n+#pragma GCCPLUGIN sayhello \"at start\" // { dg-warning \"'pragma GCCPLUGIN sayhello' from function 'some_func': at start\" }\n+\n+#define DO_PRAGMA(x) _Pragma(#x)\n+  if (!s)\n+    {\n+      DO_PRAGMA(GCCPLUGIN sayhello \"in block\"); // { dg-warning \"'pragma GCCPLUGIN sayhello' from function 'some_func': in block\" }\n+      return 0;\n+    }\n+  return 1;\n+}"}, {"sha": "237fcdddfa9518248a450f8ed965d5bfd7960056", "filename": "gcc/testsuite/g++.dg/plugin/pragma_plugin.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac8318c2daf09b9f2e1612b3add3584f58ac3b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c?ref=7ac8318c2daf09b9f2e1612b3add3584f58ac3b7", "patch": "@@ -0,0 +1,60 @@\n+/* Demonstrates how to add custom pragmas */\n+\n+#include \"gcc-plugin.h\"\n+#include <stdlib.h>\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"tree.h\"\n+#include \"function.h\"\n+#include \"c-pragma.h\"\n+#include \"cpplib.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+\n+/* handler of #pragma GCCPLUGIN sayhello \"message\" is quite similar to\n+   handler of #pragma GCC message...*/\n+\n+static void\n+handle_pragma_sayhello (cpp_reader *dummy)\n+{\n+  tree message = 0;\n+  if (pragma_lex (&message) != CPP_STRING)\n+    {\n+      warning (OPT_Wpragmas, \"%<#pragma GCCPLUGIN sayhello%>  is not a string\");\n+      return;\n+    }\n+  if (TREE_STRING_LENGTH (message) > 1)\n+    if (cfun)\n+      warning (OPT_Wpragmas, \n+\t      \"%<pragma GCCPLUGIN sayhello%> from function %qE: %s\",\n+\t      cfun->decl, TREE_STRING_POINTER (message));\n+      else\n+\twarning (OPT_Wpragmas, \n+\t    \"%<pragma GCCPLUGIN sayhello%> outside of function: %s\",\n+\t    TREE_STRING_POINTER (message));\n+}\n+\n+/* Plugin callback called during pragma registration */\n+\n+static void \n+register_my_pragma (void *event_data, void *data) \n+{\n+  warning (0, G_(\"Callback to register pragmas\"));\n+  c_register_pragma (\"GCCPLUGIN\", \"sayhello\", handle_pragma_sayhello);\n+}\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+             struct plugin_gcc_version *version)\n+{\n+  const char *plugin_name = plugin_info->base_name;\n+\n+  register_callback (plugin_name, PLUGIN_PRAGMAS, register_my_pragma, NULL);\n+  return 0;\n+}"}]}