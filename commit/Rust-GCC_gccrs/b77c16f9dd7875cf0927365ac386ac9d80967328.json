{"sha": "b77c16f9dd7875cf0927365ac386ac9d80967328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3YzE2ZjlkZDc4NzVjZjA5MjczNjVhYzM4NmFjOWQ4MDk2NzMyOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-11-02T09:13:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-11-02T09:13:37Z"}, "message": "typeck.c (composite_pointer_type): Add a const op_location_t& parameter and use it in diagnostics.\n\n/cp\n2019-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (composite_pointer_type): Add a const op_location_t&\n\tparameter and use it in diagnostics.\n\t(composite_pointer_error): Likewise.\n\t(composite_pointer_type_r): Add a const op_location_t&\n\tparameter and forward it.\n\t(cp_build_binary_op): Adjust calls.\n\t(common_pointer_type): Likewise.\n\t* call.c (add_builtin_candidate): Likewise.\n\t(build_conditional_expr_1): Likewise.\n\t* cp-tree.h (composite_pointer_type): Update declaration.\n\n\t* typeck.c (cxx_sizeof_expr): Use cp_expr_loc_or_input_loc\n\tin permerror.\n\t(cxx_alignof_expr): Likewise.\n\t(lvalue_or_else): Likewise.\n\n/testsuite\n2019-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/conversion/ptrmem9.C: Check location.\n\t* g++.dg/expr/cond2.C: Likewise.\n\t* g++.dg/warn/Waddress-1.C: Check locations.\n\t* g++.old-deja/g++.bugs/900324_02.C: Check location.\n\t* g++.old-deja/g++.jason/rfg20.C: Likewise.\n\t* g++.old-deja/g++.law/typeck1.C: Likewise.\n\t* g++.old-deja/g++.rfg/00321_01-.C: Likewise.\n\t* g++.old-deja/g++.rfg/00324_02-.C: Likewise.\n\n\t* g++.dg/diagnostic/alignof1.C: New.\n\t* g++.dg/expr/sizeof1.C: Check location.\n\t* g++.dg/cpp0x/rv-lvalue-req.C: Check locations.\n\nFrom-SVN: r277743", "tree": {"sha": "e174045073f34a49420e5c5da1aa175890b951ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e174045073f34a49420e5c5da1aa175890b951ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b77c16f9dd7875cf0927365ac386ac9d80967328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77c16f9dd7875cf0927365ac386ac9d80967328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77c16f9dd7875cf0927365ac386ac9d80967328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77c16f9dd7875cf0927365ac386ac9d80967328/comments", "author": null, "committer": null, "parents": [{"sha": "d0c464d27244ba47e66f3e1444354e423304bd12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c464d27244ba47e66f3e1444354e423304bd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c464d27244ba47e66f3e1444354e423304bd12"}], "stats": {"total": 219, "additions": 138, "deletions": 81}, "files": [{"sha": "42dfc325bfa18689b5f9d4fdae5ddec442735024", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -1,3 +1,21 @@\n+2019-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (composite_pointer_type): Add a const op_location_t&\n+\tparameter and use it in diagnostics.\n+\t(composite_pointer_error): Likewise.\n+\t(composite_pointer_type_r): Add a const op_location_t&\n+\tparameter and forward it.\n+\t(cp_build_binary_op): Adjust calls.\n+\t(common_pointer_type): Likewise.\n+\t* call.c (add_builtin_candidate): Likewise.\n+\t(build_conditional_expr_1): Likewise.\n+\t* cp-tree.h (composite_pointer_type): Update declaration.\n+\n+\t* typeck.c (cxx_sizeof_expr): Use cp_expr_loc_or_input_loc\n+\tin permerror.\n+\t(cxx_alignof_expr): Likewise.\n+\t(lvalue_or_else): Likewise.\n+\n 2019-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (omp_declare_variant_finalize_one): Use"}, {"sha": "c1969bceb5c2d4a7472a5cfb80c279c88cb20c2d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -3032,7 +3032,8 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n     {\n       if (TYPE_PTR_OR_PTRMEM_P (type1))\n \t{\n-\t  tree cptype = composite_pointer_type (type1, type2,\n+\t  tree cptype = composite_pointer_type (input_location,\n+\t\t\t\t\t\ttype1, type2,\n \t\t\t\t\t\terror_mark_node,\n \t\t\t\t\t\terror_mark_node,\n \t\t\t\t\t\tCPO_CONVERSION,\n@@ -5556,7 +5557,8 @@ build_conditional_expr_1 (const op_location_t &loc,\n \t   || (TYPE_PTRDATAMEM_P (arg2_type) && TYPE_PTRDATAMEM_P (arg3_type))\n \t   || (TYPE_PTRMEMFUNC_P (arg2_type) && TYPE_PTRMEMFUNC_P (arg3_type)))\n     {\n-      result_type = composite_pointer_type (arg2_type, arg3_type, arg2,\n+      result_type = composite_pointer_type (loc,\n+\t\t\t\t\t    arg2_type, arg3_type, arg2,\n \t\t\t\t\t    arg3, CPO_CONDITIONAL_EXPR,\n \t\t\t\t\t    complain);\n       if (result_type == error_mark_node)"}, {"sha": "4b9aea6193102c20d5e4417d362618c58c10b09e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -7526,7 +7526,8 @@ extern tree build_ptrmemfunc1\t\t\t(tree, tree, tree);\n extern void expand_ptrmemfunc_cst\t\t(tree, tree *, tree *);\n extern tree type_after_usual_arithmetic_conversions (tree, tree);\n extern tree common_pointer_type                 (tree, tree);\n-extern tree composite_pointer_type\t\t(tree, tree, tree, tree,\n+extern tree composite_pointer_type\t\t(const op_location_t &,\n+\t\t\t\t\t\t tree, tree, tree, tree,\n \t\t\t\t\t\t composite_pointer_operation,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree merge_types\t\t\t\t(tree, tree);"}, {"sha": "29a2942dcaf0a6b1c305c2f90a0d886acb838ddc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 50, "deletions": 36, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -450,25 +450,26 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n }\n \n static void\n-composite_pointer_error (diagnostic_t kind, tree t1, tree t2,\n+composite_pointer_error (const op_location_t &location,\n+\t\t\t diagnostic_t kind, tree t1, tree t2,\n \t\t\t composite_pointer_operation operation)\n {\n   switch (operation)\n     {\n     case CPO_COMPARISON:\n-      emit_diagnostic (kind, input_location, 0,\n+      emit_diagnostic (kind, location, 0,\n \t\t       \"comparison between \"\n \t\t       \"distinct pointer types %qT and %qT lacks a cast\",\n \t\t       t1, t2);\n       break;\n     case CPO_CONVERSION:\n-      emit_diagnostic (kind, input_location, 0,\n+      emit_diagnostic (kind, location, 0,\n \t\t       \"conversion between \"\n \t\t       \"distinct pointer types %qT and %qT lacks a cast\",\n \t\t       t1, t2);\n       break;\n     case CPO_CONDITIONAL_EXPR:\n-      emit_diagnostic (kind, input_location, 0,\n+      emit_diagnostic (kind, location, 0,\n \t\t       \"conditional expression between \"\n \t\t       \"distinct pointer types %qT and %qT lacks a cast\",\n \t\t       t1, t2);\n@@ -482,7 +483,8 @@ composite_pointer_error (diagnostic_t kind, tree t1, tree t2,\n    case.  See that function for documentation of the parameters.  */\n \n static tree\n-composite_pointer_type_r (tree t1, tree t2, \n+composite_pointer_type_r (const op_location_t &location,\n+\t\t\t  tree t1, tree t2, \n \t\t\t  composite_pointer_operation operation,\n \t\t\t  tsubst_flags_t complain)\n {\n@@ -515,15 +517,16 @@ composite_pointer_type_r (tree t1, tree t2,\n   else if ((TYPE_PTR_P (pointee1) && TYPE_PTR_P (pointee2))\n \t   || (TYPE_PTRMEM_P (pointee1) && TYPE_PTRMEM_P (pointee2)))\n     {\n-      result_type = composite_pointer_type_r (pointee1, pointee2, operation,\n-\t\t\t\t\t      complain);\n+      result_type = composite_pointer_type_r (location, pointee1, pointee2,\n+\t\t\t\t\t      operation, complain);\n       if (result_type == error_mark_node)\n \treturn error_mark_node;\n     }\n   else\n     {\n       if (complain & tf_error)\n-\tcomposite_pointer_error (DK_PERMERROR, t1, t2, operation);\n+\tcomposite_pointer_error (location, DK_PERMERROR,\n+\t\t\t\t t1, t2, operation);\n       else\n \treturn error_mark_node;\n       result_type = void_type_node;\n@@ -539,7 +542,8 @@ composite_pointer_type_r (tree t1, tree t2,\n \t\t\tTYPE_PTRMEM_CLASS_TYPE (t2)))\n \t{\n \t  if (complain & tf_error)\n-\t    composite_pointer_error (DK_PERMERROR, t1, t2, operation);\n+\t    composite_pointer_error (location, DK_PERMERROR,\n+\t\t\t\t     t1, t2, operation);\n \t  else\n \t    return error_mark_node;\n \t}\n@@ -563,7 +567,8 @@ composite_pointer_type_r (tree t1, tree t2,\n    pointers-to-members as per [expr.eq].  */\n \n tree\n-composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n+composite_pointer_type (const op_location_t &location,\n+\t\t\ttree t1, tree t2, tree arg1, tree arg2,\n \t\t\tcomposite_pointer_operation operation, \n \t\t\ttsubst_flags_t complain)\n {\n@@ -605,17 +610,17 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n \t      switch (operation)\n \t\t{\n \t\tcase CPO_COMPARISON:\n-\t\t  pedwarn (input_location, OPT_Wpedantic, \n+\t\t  pedwarn (location, OPT_Wpedantic, \n \t\t\t   \"ISO C++ forbids comparison between pointer \"\n \t\t\t   \"of type %<void *%> and pointer-to-function\");\n \t\t  break;\n \t\tcase CPO_CONVERSION:\n-\t\t  pedwarn (input_location, OPT_Wpedantic,\n+\t\t  pedwarn (location, OPT_Wpedantic,\n \t\t\t   \"ISO C++ forbids conversion between pointer \"\n \t\t\t   \"of type %<void *%> and pointer-to-function\");\n \t\t  break;\n \t\tcase CPO_CONDITIONAL_EXPR:\n-\t\t  pedwarn (input_location, OPT_Wpedantic,\n+\t\t  pedwarn (location, OPT_Wpedantic,\n \t\t\t   \"ISO C++ forbids conditional expression between \"\n \t\t\t   \"pointer of type %<void *%> and \"\n \t\t\t   \"pointer-to-function\");\n@@ -672,7 +677,7 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n       else\n         {\n           if (complain & tf_error)\n-\t    composite_pointer_error (DK_ERROR, t1, t2, operation);\n+\t    composite_pointer_error (location, DK_ERROR, t1, t2, operation);\n           return error_mark_node;\n         }\n     }\n@@ -695,19 +700,19 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n             switch (operation)\n               {\n               case CPO_COMPARISON:\n-                error (\"comparison between distinct \"\n-                       \"pointer-to-member types %qT and %qT lacks a cast\",\n-                       t1, t2);\n+                error_at (location, \"comparison between distinct \"\n+\t\t\t  \"pointer-to-member types %qT and %qT lacks a cast\",\n+\t\t\t  t1, t2);\n                 break;\n               case CPO_CONVERSION:\n-                error (\"conversion between distinct \"\n-                       \"pointer-to-member types %qT and %qT lacks a cast\",\n-                       t1, t2);\n+                error_at (location, \"conversion between distinct \"\n+\t\t\t  \"pointer-to-member types %qT and %qT lacks a cast\",\n+\t\t\t  t1, t2);\n                 break;\n               case CPO_CONDITIONAL_EXPR:\n-                error (\"conditional expression between distinct \"\n-                       \"pointer-to-member types %qT and %qT lacks a cast\",\n-                       t1, t2);\n+                error_at (location, \"conditional expression between distinct \"\n+\t\t\t  \"pointer-to-member types %qT and %qT lacks a cast\",\n+\t\t\t  t1, t2);\n                 break;\n               default:\n                 gcc_unreachable ();\n@@ -716,7 +721,7 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n         }\n     }\n \n-  return composite_pointer_type_r (t1, t2, operation, complain);\n+  return composite_pointer_type_r (location, t1, t2, operation, complain);\n }\n \n /* Return the merged type of two types.\n@@ -951,7 +956,8 @@ common_pointer_type (tree t1, tree t2)\n               || (TYPE_PTRDATAMEM_P (t1) && TYPE_PTRDATAMEM_P (t2))\n               || (TYPE_PTRMEMFUNC_P (t1) && TYPE_PTRMEMFUNC_P (t2)));\n \n-  return composite_pointer_type (t1, t2, error_mark_node, error_mark_node,\n+  return composite_pointer_type (input_location, t1, t2,\n+\t\t\t\t error_mark_node, error_mark_node,\n                                  CPO_CONVERSION, tf_warning_or_error);\n }\n \f\n@@ -1768,8 +1774,9 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n   else if (is_overloaded_fn (e))\n     {\n       if (complain & tf_error)\n-        permerror (input_location, \"ISO C++ forbids applying %<sizeof%> to an expression of \"\n-                   \"function type\");\n+\tpermerror (cp_expr_loc_or_input_loc (e),\n+\t\t   \"ISO C++ forbids applying %<sizeof%> to an expression \"\n+\t\t   \"of function type\");\n       else\n         return error_mark_node;\n       e = char_type_node;\n@@ -1830,8 +1837,9 @@ cxx_alignof_expr (tree e, tsubst_flags_t complain)\n   else if (is_overloaded_fn (e))\n     {\n       if (complain & tf_error)\n-        permerror (input_location, \"ISO C++ forbids applying %<__alignof%> to an expression of \"\n-                   \"function type\");\n+\tpermerror (cp_expr_loc_or_input_loc (e),\n+\t\t   \"ISO C++ forbids applying %<__alignof%> to an expression \"\n+\t\t   \"of function type\");\n       else\n         return error_mark_node;\n       if (TREE_CODE (e) == FUNCTION_DECL)\n@@ -4935,7 +4943,8 @@ cp_build_binary_op (const op_location_t &location,\n \t\t   && TYPE_PTR_P (type1) && integer_zerop (op1)))\n \t{\n \t  if (TYPE_PTR_P (type1))\n-\t    result_type = composite_pointer_type (type0, type1, op0, op1,\n+\t    result_type = composite_pointer_type (location,\n+\t\t\t\t\t\t  type0, type1, op0, op1,\n \t\t\t\t\t\t  CPO_COMPARISON, complain);\n \t  else\n \t    result_type = type0;\n@@ -4958,7 +4967,8 @@ cp_build_binary_op (const op_location_t &location,\n \t\t   && TYPE_PTR_P (type0) && integer_zerop (op0)))\n \t{\n \t  if (TYPE_PTR_P (type0))\n-\t    result_type = composite_pointer_type (type0, type1, op0, op1,\n+\t    result_type = composite_pointer_type (location,\n+\t\t\t\t\t\t  type0, type1, op0, op1,\n \t\t\t\t\t\t  CPO_COMPARISON, complain);\n \t  else\n \t    result_type = type1;\n@@ -4976,7 +4986,8 @@ cp_build_binary_op (const op_location_t &location,\n \t}\n       else if ((code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \t       || (TYPE_PTRDATAMEM_P (type0) && TYPE_PTRDATAMEM_P (type1)))\n-\tresult_type = composite_pointer_type (type0, type1, op0, op1,\n+\tresult_type = composite_pointer_type (location,\n+\t\t\t\t\t      type0, type1, op0, op1,\n \t\t\t\t\t      CPO_COMPARISON, complain);\n       else if (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1))\n \t/* One of the operands must be of nullptr_t type.  */\n@@ -5055,7 +5066,7 @@ cp_build_binary_op (const op_location_t &location,\n \t  tree delta0;\n \t  tree delta1;\n \n-\t  type = composite_pointer_type (type0, type1, op0, op1, \n+\t  type = composite_pointer_type (location, type0, type1, op0, op1, \n \t\t\t\t\t CPO_COMPARISON, complain);\n \n \t  if (!same_type_p (TREE_TYPE (op0), type))\n@@ -5169,7 +5180,8 @@ cp_build_binary_op (const op_location_t &location,\n \t   && (code1 == INTEGER_TYPE || code1 == REAL_TYPE))\n \tshorten = 1;\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n-\tresult_type = composite_pointer_type (type0, type1, op0, op1,\n+\tresult_type = composite_pointer_type (location,\n+\t\t\t\t\t      type0, type1, op0, op1,\n \t\t\t\t\t      CPO_COMPARISON, complain);\n       break;\n \n@@ -5252,7 +5264,8 @@ cp_build_binary_op (const op_location_t &location,\n \t       || code1 == ENUMERAL_TYPE))\n \tshort_compare = 1;\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n-\tresult_type = composite_pointer_type (type0, type1, op0, op1,\n+\tresult_type = composite_pointer_type (location,\n+\t\t\t\t\t      type0, type1, op0, op1,\n \t\t\t\t\t      CPO_COMPARISON, complain);\n       else if (code0 == POINTER_TYPE && null_ptr_cst_p (orig_op1))\n \t{\n@@ -10378,7 +10391,8 @@ lvalue_or_else (tree ref, enum lvalue_use use, tsubst_flags_t complain)\n       if (!(complain & tf_error))\n \treturn 0;\n       /* Make this a permerror because we used to accept it.  */\n-      permerror (input_location, \"using rvalue as lvalue\");\n+      permerror (cp_expr_loc_or_input_loc (ref),\n+\t\t \"using rvalue as lvalue\");\n     }\n   return 1;\n }"}, {"sha": "e0e8c9e3d65ea371b9c3d95b6095390a5ef3fd56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -1,3 +1,18 @@\n+2019-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/conversion/ptrmem9.C: Check location.\n+\t* g++.dg/expr/cond2.C: Likewise.\n+\t* g++.dg/warn/Waddress-1.C: Check locations.\n+\t* g++.old-deja/g++.bugs/900324_02.C: Check location.\n+\t* g++.old-deja/g++.jason/rfg20.C: Likewise.\n+\t* g++.old-deja/g++.law/typeck1.C: Likewise.\n+\t* g++.old-deja/g++.rfg/00321_01-.C: Likewise.\n+\t* g++.old-deja/g++.rfg/00324_02-.C: Likewise.\n+\n+\t* g++.dg/diagnostic/alignof1.C: New.\n+\t* g++.dg/expr/sizeof1.C: Check location.\n+\t* g++.dg/cpp0x/rv-lvalue-req.C: Check locations.\n+\n 2019-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/declare-variant-12.c: New test."}, {"sha": "09ea57643f55a63a1ab4a155deafeeb376068e5d", "filename": "gcc/testsuite/g++.dg/conversion/ptrmem9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem9.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -22,5 +22,5 @@ void f ()\n \n   pd == pb;\n   pd == pbv;  // { dg-error \"\" }\n-  pd == pc;   // { dg-error \"comparison between distinct pointer-to-member types\" }\n+  pd == pc;   // { dg-error \"6:comparison between distinct pointer-to-member types\" }\n }"}, {"sha": "b8f7ddd78953f023ed342f38d7ce824fea3a72b6", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-lvalue-req.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -5,8 +5,8 @@ template <class T> T&& declval();\n int main()\n {\n   &declval<int>();\t\t        // { dg-error \"rvalue\" }\n-  declval<int>() = declval<int>();\t// { dg-error \"rvalue\" }\n-  declval<int>()++;\t\t\t// { dg-error \"rvalue\" }\n-  --declval<int>();\t\t\t// { dg-error \"rvalue\" }\n+  declval<int>() = declval<int>();\t// { dg-error \"15:using rvalue as lvalue\" }\n+  declval<int>()++;\t\t\t// { dg-error \"15:using rvalue as lvalue\" }\n+  --declval<int>();\t\t\t// { dg-error \"17:using rvalue as lvalue\" }\n   declval<int>() += 1;\t\t\t// { dg-error \"rvalue\" }\n }"}, {"sha": "705bbf138db97ae9dfe81bb46d4d44a169e2be5e", "filename": "gcc/testsuite/g++.dg/diagnostic/alignof1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof1.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -0,0 +1,5 @@\n+struct A\n+{\n+  int foo() { return __alignof(bar); } // { dg-error \"32:ISO C\\\\+\\\\+ forbids applying .__alignof.\" }\n+  int bar();\n+};"}, {"sha": "93b166330c4e21b6b59817223d3897c00f4c76ee", "filename": "gcc/testsuite/g++.dg/expr/cond2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond2.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -8,5 +8,5 @@ struct IsZero : Term {\n Term*\n IsZero::eval()\n {\n-  return true ? new Boolean(false) : this; // { dg-error \"conditional expression\" }\n+  return true ? new Boolean(false) : this; // { dg-error \"15:conditional expression\" }\n }"}, {"sha": "fd6c6636ef24d476b8d7ccff296305843d441791", "filename": "gcc/testsuite/g++.dg/expr/sizeof1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof1.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -2,6 +2,6 @@\n \n struct A\n {\n-  int foo() { return sizeof(bar); } // { dg-error \"\" }\n+  int foo() { return sizeof(bar); } // { dg-error \"29:ISO C\\\\+\\\\+ forbids applying .sizeof.\" }\n   int bar();\n };"}, {"sha": "43a2a7035d5df6f550a989a591fa3138d87159cb", "filename": "gcc/testsuite/g++.dg/warn/Waddress-1.C", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -15,36 +15,38 @@ double d;\n \n void f()  { if (z) z(); }               // { dg-warning \"address\" }\n \n-void gl() { if (z != 0) z(); }          // { dg-warning \"address\" }\n-void hl() { if (z != (ptrf)0) z(); }    // { dg-warning \"address\" }\n-void il() { if (z != (void*)0) z(); }   // { dg-warning \"address|comparison\" }\n-void jl() { if (&n != (int*)0) z(); }   // { dg-warning \"address\" }\n-void kl() { if (&m != (int*)0) z(); }   // { dg-warning \"address\" }\n-void ll() { if (&s != (T*)0) z(); }     // { dg-warning \"address\" }\n-void ml() { if (&t != (S*)0) z(); }     // { dg-warning \"address\" }\n+void gl() { if (z != 0) z(); }          // { dg-warning \"19:address\" }\n+void hl() { if (z != (ptrf)0) z(); }    // { dg-warning \"19:address\" }\n+void il() { if (z != (void*)0) z(); }   // { dg-warning \"19:comparison\" }\n+// { dg-warning \"19:address\" \"\" { target *-*-* } .-1 }\n+void jl() { if (&n != (int*)0) z(); }   // { dg-warning \"20:address\" }\n+void kl() { if (&m != (int*)0) z(); }   // { dg-warning \"20:address\" }\n+void ll() { if (&s != (T*)0) z(); }     // { dg-warning \"20:address\" }\n+void ml() { if (&t != (S*)0) z(); }     // { dg-warning \"20:address\" }\n \n-void nl() { if (z != (S*)0) z(); }      // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n-void pl() { if (z != (ptrfn)0) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n-void ql() { if (&d != (int*)0) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n-void rl() { if (&s != (U*)0) z(); }     // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n+void nl() { if (z != (S*)0) z(); }      // { dg-error \"19:comparison\" }\n+// { dg-warning \"19:address\" \"\" { target *-*-* } .-1 }\n+void pl() { if (z != (ptrfn)0) z(); }   // { dg-error \"19:comparison\" }\n+// { dg-warning \"19:address\" \"\" { target *-*-* } .-1 }\n+void ql() { if (&d != (int*)0) z(); }   // { dg-error \"20:comparison\" }\n+// { dg-warning \"20:address\" \"\" { target *-*-* } .-1 }\n+void rl() { if (&s != (U*)0) z(); }     // { dg-error \"20:comparison\" }\n+// { dg-warning \"20:address\" \"\" { target *-*-* } .-1 }\n \n-void gr() { if (0 != z) z(); }          // { dg-warning \"address\" }\n-void hr() { if ((ptrf)0 != z) z(); }    // { dg-warning \"address\" }\n-void ir() { if ((void*)0 != z) z(); }   // { dg-warning \"address|comparison\" }\n-void jr() { if ((int*)0 != &n) z(); }   // { dg-warning \"address\" }\n-void kr() { if ((int*)0 != &m) z(); }   // { dg-warning \"address\" }\n-void lr() { if ((T*)0 != &s) z(); }     // { dg-warning \"address\" }\n-void mr() { if ((S*)0 != &t) z(); }     // { dg-warning \"address\" }\n+void gr() { if (0 != z) z(); }          // { dg-warning \"19:address\" }\n+void hr() { if ((ptrf)0 != z) z(); }    // { dg-warning \"25:address\" }\n+void ir() { if ((void*)0 != z) z(); }   // { dg-warning \"26:comparison\" }\n+// { dg-warning \"26:address\" \"\" { target *-*-* } .-1 }\n+void jr() { if ((int*)0 != &n) z(); }   // { dg-warning \"25:address\" }\n+void kr() { if ((int*)0 != &m) z(); }   // { dg-warning \"25:address\" }\n+void lr() { if ((T*)0 != &s) z(); }     // { dg-warning \"23:address\" }\n+void mr() { if ((S*)0 != &t) z(); }     // { dg-warning \"23:address\" }\n \n-void nr() { if ((S*)0 != z) z(); }      // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n-void pr() { if ((ptrfn)0 != z) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n-void qr() { if ((int*)0 != &d) z(); }   // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n-void rr() { if ((U*)0 != &s) z(); }     // { dg-error \"comparison\" }\n-// { dg-warning \"address\" \"\" { target *-*-* } .-1 }\n+void nr() { if ((S*)0 != z) z(); }      // { dg-error \"23:comparison\" }\n+// { dg-warning \"23:address\" \"\" { target *-*-* } .-1 }\n+void pr() { if ((ptrfn)0 != z) z(); }   // { dg-error \"26:comparison\" }\n+// { dg-warning \"26:address\" \"\" { target *-*-* } .-1 }\n+void qr() { if ((int*)0 != &d) z(); }   // { dg-error \"25:comparison\" }\n+// { dg-warning \"25:address\" \"\" { target *-*-* } .-1 }\n+void rr() { if ((U*)0 != &s) z(); }     // { dg-error \"23:comparison\" }\n+// { dg-warning \"23:address\" \"\" { target *-*-* } .-1 }"}, {"sha": "c90e8d0518acb555cdc3a71ca5051296f975799e", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900324_02.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_02.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -13,7 +13,7 @@ void (*fp)(void);\n \n void function_1 ()\n {\n-  fp = 1 ? function_0 : fp;\t\t// { dg-error \"conditional expression|invalid conversion\" } \n+  fp = 1 ? function_0 : fp;\t\t// { dg-error \"10:conditional expression|invalid conversion\" } \n }\n \n int main () { return 0; }"}, {"sha": "1bd4ded9e1459bcb736a6f551a5c516a5d72c5c5", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg20.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -6,5 +6,5 @@ void *vp;\n \n void example ()\n {\n-    vp != fp;\t\t\t// { dg-error \"forbids comparison\" } no conversion from pfn to void*\n+    vp != fp;\t\t\t// { dg-error \"8:ISO C\\\\+\\\\+ forbids comparison\" } no conversion from pfn to void*\n }"}, {"sha": "6572afcce5111c16c7f59763acffdf4478f50c6d", "filename": "gcc/testsuite/g++.old-deja/g++.law/typeck1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftypeck1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftypeck1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftypeck1.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -13,6 +13,6 @@\n \n         int test( const foo* f, const bar* b )\n                 {\n-                return f == b;// { dg-error \"comparison between distinct pointer types\" } \n+                return f == b;// { dg-error \"26:comparison between distinct pointer types\" } \n                 }\n "}, {"sha": "efa0e367a74d72a760f5af28e2e935b938c1f780", "filename": "gcc/testsuite/g++.old-deja/g++.rfg/00321_01-.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00321_01-.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00321_01-.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00321_01-.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -9,6 +9,6 @@ int (*p2)[5];\n void\n test ()\n {\n-  p1 == p2;\t\t// { dg-error \"comparison between distinct pointer types\" } comparison.*\n-  p1 > p2;\t\t// { dg-error \"comparison between distinct pointer types\" } comparison.*\n+  p1 == p2;\t\t// { dg-error \"6:comparison between distinct pointer types\" } comparison.*\n+  p1 > p2;\t\t// { dg-error \"6:comparison between distinct pointer types\" } comparison.*\n }"}, {"sha": "54fe696676022bbd5e18e49402d504e3b40fb5d6", "filename": "gcc/testsuite/g++.old-deja/g++.rfg/00324_02-.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00324_02-.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c16f9dd7875cf0927365ac386ac9d80967328/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00324_02-.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00324_02-.C?ref=b77c16f9dd7875cf0927365ac386ac9d80967328", "patch": "@@ -12,5 +12,5 @@ int i;\n void\n test ()\n {\n-   i ? f : fp; // { dg-error \"conditional expression|invalid conversion\" } \n+   i ? f : fp; // { dg-error \"6:conditional expression|invalid conversion\" } \n }"}]}