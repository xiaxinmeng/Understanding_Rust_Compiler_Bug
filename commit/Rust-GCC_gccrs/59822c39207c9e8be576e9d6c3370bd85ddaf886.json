{"sha": "59822c39207c9e8be576e9d6c3370bd85ddaf886", "node_id": "C_kwDOANBUbNoAKDU5ODIyYzM5MjA3YzllOGJlNTc2ZTlkNmMzMzcwYmQ4NWRkYWY4ODY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-16T16:07:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-16T20:58:09Z"}, "message": "libstdc++: Fixes for std::expected\n\nThis fixes some bugs in the swap functions for std::expected.\n\nIt also disables the noexcept-specifiers for equality operators, because\nthose are problematic when querying whether a std::expected is equality\ncomparable. The operator==(const expected<T,E>&, const U&) function is\nnot constrained, so is viable for comparing expected<T,E> with\nexpected<void,G>, but then we get an error from the noexcept-specifier.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/expected (expected::_M_swap_val_unex): Guard the\n\tcorrect object.\n\t(expected::swap): Move is_swappable\n\trequirement from static_assert to constraint.\n\t(swap): Likewise.\n\t(operator==): Remove noexcept-specifier.\n\t* testsuite/20_util/expected/swap.cc: Check swapping of\n\ttypes without non-throwing move constructor. Check constraints\n\ton swap.\n\t* testsuite/20_util/expected/unexpected.cc: Check constraints on\n\tswap.\n\t* testsuite/20_util/expected/equality.cc: New test.", "tree": {"sha": "5f1c1de4a706e68c52b8906bddc82bb43b92abe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f1c1de4a706e68c52b8906bddc82bb43b92abe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59822c39207c9e8be576e9d6c3370bd85ddaf886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59822c39207c9e8be576e9d6c3370bd85ddaf886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59822c39207c9e8be576e9d6c3370bd85ddaf886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59822c39207c9e8be576e9d6c3370bd85ddaf886/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c986b49558a7c356b85bda85195216936c29a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c986b49558a7c356b85bda85195216936c29a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c986b49558a7c356b85bda85195216936c29a3"}], "stats": {"total": 166, "additions": 152, "deletions": 14}, "files": [{"sha": "2fe25a90d2d7bc9b151e8946311672e10eae5d88", "filename": "libstdc++-v3/include/std/expected", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexpected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexpected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fexpected?ref=59822c39207c9e8be576e9d6c3370bd85ddaf886", "patch": "@@ -217,8 +217,8 @@ namespace __expected\n \n       constexpr void\n       swap(unexpected& __other) noexcept(is_nothrow_swappable_v<_Er>)\n+      requires is_swappable_v<_Er>\n       {\n-\tstatic_assert( is_swappable_v<_Er> );\n \tusing std::swap;\n \tswap(_M_unex, __other._M_unex);\n       }\n@@ -230,9 +230,8 @@ namespace __expected\n \t{ return __x._M_unex == __y.error(); }\n \n       friend constexpr void\n-      swap(unexpected& __x, unexpected& __y)\n-      noexcept(noexcept(__x.swap(__y)))\n-      requires requires {__x.swap(__y);}\n+      swap(unexpected& __x, unexpected& __y) noexcept(noexcept(__x.swap(__y)))\n+      requires is_swappable_v<_Er>\n       { __x.swap(__y); }\n \n     private:\n@@ -798,8 +797,8 @@ namespace __expected\n \trequires (!is_void_v<_Up>)\n \tfriend constexpr bool\n \toperator==(const expected& __x, const expected<_Up, _Er2>& __y)\n-\tnoexcept(noexcept(bool(*__x == *__y))\n-\t\t  && noexcept(bool(__x.error() == __y.error())))\n+\t// FIXME: noexcept(noexcept(bool(*__x == *__y))\n+\t\t  // && noexcept(bool(__x.error() == __y.error())))\n \t{\n \t  if (__x.has_value())\n \t    return __y.has_value() && bool(*__x == *__y);\n@@ -810,13 +809,13 @@ namespace __expected\n       template<typename _Up>\n \tfriend constexpr bool\n \toperator==(const expected& __x, const _Up& __v)\n-\tnoexcept(noexcept(bool(*__x == __v)))\n+\t// FIXME: noexcept(noexcept(bool(*__x == __v)))\n \t{ return __x.has_value() && bool(*__x == __v); }\n \n       template<typename _Er2>\n \tfriend constexpr bool\n \toperator==(const expected& __x, const unexpected<_Er2>& __e)\n-\tnoexcept(noexcept(bool(__x.error() == __e.error())))\n+\t// FIXME: noexcept(noexcept(bool(__x.error() == __e.error())))\n \t{ return !__x.has_value() && bool(__x.error() == __e.error()); }\n \n       friend constexpr void\n@@ -878,7 +877,7 @@ namespace __expected\n \t  }\n \telse\n \t  {\n-\t    __expected::_Guard<_Tp> __guard(__rhs._M_val);\n+\t    __expected::_Guard<_Tp> __guard(_M_val);\n \t    std::construct_at(__builtin_addressof(_M_unex),\n \t\t\t      std::move(__rhs._M_unex)); // might throw\n \t    _M_has_value = false;\n@@ -1187,7 +1186,7 @@ namespace __expected\n \trequires is_void_v<_Up>\n \tfriend constexpr bool\n \toperator==(const expected& __x, const expected<_Up, _Er2>& __y)\n-\tnoexcept(noexcept(bool(__x.error() == __y.error())))\n+\t// FIXME: noexcept(noexcept(bool(__x.error() == __y.error())))\n \t{\n \t  if (__x.has_value())\n \t    return __y.has_value();\n@@ -1198,7 +1197,7 @@ namespace __expected\n       template<typename _Er2>\n \tfriend constexpr bool\n \toperator==(const expected& __x, const unexpected<_Er2>& __e)\n-\tnoexcept(noexcept(bool(__x.error() == __e.error())))\n+\t// FIXME: noexcept(noexcept(bool(__x.error() == __e.error())))\n \t{ return !__x.has_value() && bool(__x.error() == __e.error()); }\n \n       friend constexpr void"}, {"sha": "1862719e73d52edf8fee760503a9769eb6e84338", "filename": "libstdc++-v3/testsuite/20_util/expected/equality.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Fequality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Fequality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Fequality.cc?ref=59822c39207c9e8be576e9d6c3370bd85ddaf886", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <expected>\n+#include <testsuite_hooks.h>\n+\n+template<typename T, typename U>\n+concept Eq = requires(T t, U u) { t == u; };\n+\n+static_assert(Eq<std::expected<int, long>, std::expected<short, unsigned>>);\n+static_assert(Eq<std::expected<void, long>, std::expected<void, unsigned>>);\n+// static_assert(!Eq<std::expected<void, long>, std::expected<short, unsigned>>);\n+static_assert(Eq<std::expected<int, long>, short>);\n+static_assert(!Eq<std::expected<void, long>, short>);\n+static_assert(Eq<std::expected<int, long>, std::unexpected<short>>);\n+static_assert(Eq<std::expected<void, long>, std::unexpected<short>>);\n+\n+struct NotEqCmp\n+{\n+  constexpr bool operator==(int) const { return true; }\n+  bool operator==(NotEqCmp) const = delete;\n+};\n+\n+constexpr bool\n+test_eq()\n+{\n+  std::expected<NotEqCmp, int> e1;\n+  VERIFY(e1 == 1);\n+  std::expected<int, int> e2;\n+  VERIFY(e2 == e2);\n+  VERIFY(e1 == e2);\n+  VERIFY(e1 != std::unexpected<int>(1));\n+  e1 = std::unexpected<int>(1);\n+  VERIFY(e1 == std::unexpected<int>(1));\n+  VERIFY(e1 != std::unexpected<int>(2));\n+  VERIFY(e1 != e2);\n+\n+  std::expected<void, int> e3;\n+  VERIFY(e3 == e3);\n+  VERIFY(e3 != std::unexpected<int>(1));\n+  e3 = std::unexpected<int>(1);\n+  VERIFY(e3 == e3);\n+  VERIFY(e3 == std::unexpected<int>(1));\n+  VERIFY(e3 != std::unexpected<int>(2));\n+\n+  return true;\n+}\n+\n+static_assert( test_eq() );"}, {"sha": "08a110da47c4fc82164e421792cce3e1391a1036", "filename": "libstdc++-v3/testsuite/20_util/expected/swap.cc", "status": "modified", "additions": 89, "deletions": 3, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Fswap.cc?ref=59822c39207c9e8be576e9d6c3370bd85ddaf886", "patch": "@@ -4,8 +4,18 @@\n #include <expected>\n #include <testsuite_hooks.h>\n \n+struct NonTrivial\n+{\n+  constexpr NonTrivial(int i) : i(i) { }\n+  constexpr NonTrivial(const NonTrivial& x) noexcept(false): i(x.i) { }\n+  constexpr ~NonTrivial() { }\n+  int i;\n+\n+  constexpr bool operator==(const NonTrivial&) const = default;\n+};\n+\n constexpr bool\n-test_swap()\n+test_swap_obj()\n {\n   std::expected<int, int> e1(1), e2(2);\n   std::expected<int, int> e3(std::unexpect, 3), e4(std::unexpect, 4);\n@@ -27,6 +37,52 @@ test_swap()\n   VERIFY( e3.error() == 4 );\n   VERIFY( e4.error() == 3 );\n \n+  std::expected<int, NonTrivial> e5(1), e6(2);\n+  std::expected<int, NonTrivial> e7(std::unexpect, 3), e8(std::unexpect, 4);\n+\n+  swap(e5, e6);\n+  VERIFY( e5.value() == 2 );\n+  VERIFY( e6.value() == 1 );\n+  swap(e5, e7);\n+  VERIFY( ! e5.has_value() );\n+  VERIFY( e5.error() == 3 );\n+  VERIFY( e7.value() == 2 );\n+  swap(e5, e7);\n+  VERIFY( ! e7.has_value() );\n+  VERIFY( e5.value() == 2 );\n+  VERIFY( e7.error() == 3 );\n+  swap(e7, e8);\n+  VERIFY( ! e7.has_value() );\n+  VERIFY( ! e8.has_value() );\n+  VERIFY( e7.error() == 4 );\n+  VERIFY( e8.error() == 3 );\n+\n+  std::expected<NonTrivial, int> e9(1), e10(2);\n+  std::expected<NonTrivial, int> e11(std::unexpect, 3), e12(std::unexpect, 4);\n+\n+  swap(e9, e10);\n+  VERIFY( e9.value() == 2 );\n+  VERIFY( e10.value() == 1 );\n+  swap(e9, e11);\n+  VERIFY( ! e9.has_value() );\n+  VERIFY( e9.error() == 3 );\n+  VERIFY( e11.value() == 2 );\n+  swap(e9, e11);\n+  VERIFY( ! e11.has_value() );\n+  VERIFY( e9.value() == 2 );\n+  VERIFY( e11.error() == 3 );\n+  swap(e11, e12);\n+  VERIFY( ! e11.has_value() );\n+  VERIFY( ! e12.has_value() );\n+  VERIFY( e11.error() == 4 );\n+  VERIFY( e12.error() == 3 );\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test_swap_void()\n+{\n   std::expected<void, int> v1, v2;\n   std::expected<void, int> v3(std::unexpect, 3), v4(std::unexpect, 4);\n \n@@ -47,11 +103,41 @@ test_swap()\n   VERIFY( v3.error() == 4 );\n   VERIFY( v4.error() == 3 );\n \n+  std::expected<void, NonTrivial> v5, v6;\n+  std::expected<void, NonTrivial> v7(std::unexpect, 3), v8(std::unexpect, 4);\n+\n+  swap(v5, v6);\n+  VERIFY( v5.has_value() );\n+  VERIFY( v6.has_value() );\n+  swap(v5, v7);\n+  VERIFY( ! v5.has_value() );\n+  VERIFY( v5.error() == 3 );\n+  VERIFY( v7.has_value() );\n+  swap(v5, v7);\n+  VERIFY( ! v7.has_value() );\n+  VERIFY( v5.has_value() );\n+  VERIFY( v7.error() == 3 );\n+  swap(v7, v8);\n+  VERIFY( ! v7.has_value() );\n+  VERIFY( ! v8.has_value() );\n+  VERIFY( v7.error() == 4 );\n+  VERIFY( v8.error() == 3 );\n+\n   return true;\n }\n \n+static_assert( std::is_swappable_v<std::expected<int, int>> );\n+static_assert( std::is_swappable_v<std::expected<void, int>> );\n+\n+struct A { A& operator=(A&&) = delete; };\n+static_assert( ! std::is_swappable_v<std::expected<A, int>> );\n+static_assert( ! std::is_swappable_v<std::expected<int, A>> );\n+static_assert( ! std::is_swappable_v<std::expected<void, A>> );\n+\n int main()\n {\n-  static_assert( test_swap() );\n-  test_swap();\n+  static_assert( test_swap_obj() );\n+  test_swap_obj();\n+  static_assert( test_swap_void() );\n+  test_swap_void();\n }"}, {"sha": "050f8e3e81f7b50c16ac49260a3ed1c7e526e614", "filename": "libstdc++-v3/testsuite/20_util/expected/unexpected.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Funexpected.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59822c39207c9e8be576e9d6c3370bd85ddaf886/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Funexpected.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fexpected%2Funexpected.cc?ref=59822c39207c9e8be576e9d6c3370bd85ddaf886", "patch": "@@ -73,6 +73,10 @@ test()\n   return true;\n }\n \n+static_assert( std::is_swappable_v<std::unexpected<int>> );\n+struct A { A& operator=(A&&) = delete; };\n+static_assert( ! std::is_swappable_v<std::unexpected<A>> );\n+\n int main()\n {\n   static_assert( test() );"}]}