{"sha": "034c3117520f33bc108afc930c16b220041e4a97", "node_id": "C_kwDOANBUbNoAKDAzNGMzMTE3NTIwZjMzYmMxMDhhZmM5MzBjMTZiMjIwMDQxZTRhOTc", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-10-20T20:55:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-25T15:07:21Z"}, "message": "[Ada] Fix bugs in Base_Type_Only (etc.) fields\n\ngcc/ada/\n\n\t* gen_il-gen.adb (Put_Seinfo): Generate type\n\tSeinfo.Type_Only_Enum based on type\n\tGen_IL.Internals.Type_Only_Enum. Automatically generating a copy\n\tof the type will help keep them in sync.  (Note that there are\n\tno Ada compiler packages imported into Gen_IL.)  Add a Type_Only\n\tfield to Field_Descriptor, so this information is available in\n\tthe Ada compiler (as opposed to just in the Gen_IL \"compiler\").\n\t(One_Comp): Add initialization of the Type_Only field of\n\tField_Descriptor.\n\t* gen_il-internals.ads (Image): Image function for\n\tType_Only_Enum.\n\t* atree.ads (Node_To_Fetch_From): New function to compute which\n\tnode to fetch from, based on the Type_Only aspect.\n\t* atree.adb (Get_Field_Value): Call Node_To_Fetch_From.\n\t* treepr.adb (Print_Entity_Field): Call Node_To_Fetch_From.\n\t(Print_Node_Field): Assert.\n\t* sinfo-utils.adb (Walk_Sinfo_Fields,\n\tWalk_Sinfo_Fields_Pairwise): Asserts.", "tree": {"sha": "6f9632f0f7f159bcdc8bf527b4020410328d77c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f9632f0f7f159bcdc8bf527b4020410328d77c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/034c3117520f33bc108afc930c16b220041e4a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/034c3117520f33bc108afc930c16b220041e4a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/034c3117520f33bc108afc930c16b220041e4a97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/034c3117520f33bc108afc930c16b220041e4a97/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234815d4c38608eb1bff20f68d6dd4c233f07725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234815d4c38608eb1bff20f68d6dd4c233f07725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234815d4c38608eb1bff20f68d6dd4c233f07725"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "88d766a2b29ba395f196ae086573680f094cc595", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=034c3117520f33bc108afc930c16b220041e4a97", "patch": "@@ -854,14 +854,15 @@ package body Atree is\n      (N : Node_Id; Field : Node_Or_Entity_Field) return Field_Size_32_Bit\n    is\n       Desc : Field_Descriptor renames Field_Descriptors (Field);\n+      NN : constant Node_Or_Entity_Id := Node_To_Fetch_From (N, Field);\n \n    begin\n       case Field_Size (Desc.Kind) is\n-         when 1 => return Field_Size_32_Bit (Get_1_Bit_Val (N, Desc.Offset));\n-         when 2 => return Field_Size_32_Bit (Get_2_Bit_Val (N, Desc.Offset));\n-         when 4 => return Field_Size_32_Bit (Get_4_Bit_Val (N, Desc.Offset));\n-         when 8 => return Field_Size_32_Bit (Get_8_Bit_Val (N, Desc.Offset));\n-         when others => return Get_32_Bit_Val (N, Desc.Offset);  -- 32\n+         when 1 => return Field_Size_32_Bit (Get_1_Bit_Val (NN, Desc.Offset));\n+         when 2 => return Field_Size_32_Bit (Get_2_Bit_Val (NN, Desc.Offset));\n+         when 4 => return Field_Size_32_Bit (Get_4_Bit_Val (NN, Desc.Offset));\n+         when 8 => return Field_Size_32_Bit (Get_8_Bit_Val (NN, Desc.Offset));\n+         when others => return Get_32_Bit_Val (NN, Desc.Offset);  -- 32\n       end case;\n    end Get_Field_Value;\n "}, {"sha": "c239507c93cfb3432fb8b30ee6bc6d6fc3c54ff7", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=034c3117520f33bc108afc930c16b220041e4a97", "patch": "@@ -47,6 +47,7 @@\n with Alloc;\n with Sinfo.Nodes;    use Sinfo.Nodes;\n with Einfo.Entities; use Einfo.Entities;\n+with Einfo.Utils;    use Einfo.Utils;\n with Types;          use Types;\n with Seinfo;         use Seinfo;\n with System;         use System;\n@@ -616,6 +617,20 @@ package Atree is\n    --  always the same; for example we change from E_Void, to E_Variable, to\n    --  E_Void, to E_Constant.\n \n+   function Node_To_Fetch_From\n+     (N : Node_Or_Entity_Id; Field : Node_Or_Entity_Field)\n+     return Node_Or_Entity_Id is\n+      (case Field_Descriptors (Field).Type_Only is\n+         when No_Type_Only => N,\n+         when Base_Type_Only => Base_Type (N),\n+         when Impl_Base_Type_Only => Implementation_Base_Type (N),\n+         when Root_Type_Only => Root_Type (N));\n+   --  This is analogous to the same-named function in Gen_IL.Gen. Normally,\n+   --  Type_Only is No_Type_Only, and we fetch the field from the node N. But\n+   --  if Type_Only = Base_Type_Only, we need to go to the Base_Type, and\n+   --  similarly for the other two cases. This can return something other\n+   --  than N only if N is an Entity.\n+\n    -----------------------------\n    -- Private Part Subpackage --\n    -----------------------------"}, {"sha": "f058c5a7f7ade1132de22a410fceee6e6a0e23d8", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=034c3117520f33bc108afc930c16b220041e4a97", "patch": "@@ -2157,7 +2157,8 @@ package body Gen_IL.Gen is\n \n                   Put (S, F_Image (F) & \" => (\" &\n                        Image (Field_Table (F).Field_Type) & \"_Field, \" &\n-                       Image (Offset) & \")\");\n+                       Image (Offset) & \", \" &\n+                       Image (Field_Table (F).Type_Only) & \")\");\n \n                   FS := Field_Size (F);\n                   FB := First_Bit (F, Offset);\n@@ -2252,10 +2253,32 @@ package body Gen_IL.Gen is\n          Decrease_Indent (S, 2);\n          Put (S, \");\" & LF & LF);\n \n+         Put (S, \"type Type_Only_Enum is\" & LF);\n+         Increase_Indent (S, 2);\n+         Put (S, \"(\");\n+\n+         declare\n+            First_Time : Boolean := True;\n+         begin\n+            for TO in Type_Only_Enum loop\n+               if First_Time then\n+                  First_Time := False;\n+               else\n+                  Put (S, \", \");\n+               end if;\n+\n+               Put (S, Image (TO));\n+            end loop;\n+         end;\n+\n+         Decrease_Indent (S, 2);\n+         Put (S, \");\" & LF & LF);\n+\n          Put (S, \"type Field_Descriptor is record\" & LF);\n          Increase_Indent (S, 3);\n          Put (S, \"Kind : Field_Kind;\" & LF);\n          Put (S, \"Offset : Field_Offset;\" & LF);\n+         Put (S, \"Type_Only : Type_Only_Enum;\" & LF);\n          Decrease_Indent (S, 3);\n          Put (S, \"end record;\" & LF & LF);\n "}, {"sha": "3febf7fc22277c3e19f08d0c8f5315eaaa097272", "filename": "gcc/ada/gen_il-internals.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fgen_il-internals.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fgen_il-internals.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-internals.ads?ref=034c3117520f33bc108afc930c16b220041e4a97", "patch": "@@ -147,6 +147,9 @@ package Gen_IL.Internals is\n    --  The default is No_Type_Only, indicating the field is not one of\n    --  these special \"[... only]\" ones.\n \n+   function Image (Type_Only : Type_Only_Enum) return String is\n+     (Capitalize (Type_Only'Img));\n+\n    Unknown_Offset : constant := -1;\n    --  Initial value of Offset, so we can tell whether it has been set\n "}, {"sha": "33247e21ca74974d7a5e77ec119cde6b4ef38d52", "filename": "gcc/ada/sinfo-utils.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fsinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Fsinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo-utils.adb?ref=034c3117520f33bc108afc930c16b220041e4a97", "patch": "@@ -279,6 +279,8 @@ package body Sinfo.Utils is\n             declare\n                Desc : Field_Descriptor renames\n                  Field_Descriptors (Fields (J));\n+               pragma Assert (Desc.Type_Only = No_Type_Only);\n+               --  Type_Only is for entities\n             begin\n                if Is_In_Union_Id (Desc.Kind) then\n                   Action (Get_Node_Field_Union (N, Desc.Offset));\n@@ -304,6 +306,8 @@ package body Sinfo.Utils is\n             declare\n                Desc : Field_Descriptor renames\n                  Field_Descriptors (Fields (J));\n+               pragma Assert (Desc.Type_Only = No_Type_Only);\n+               --  Type_Only is for entities\n             begin\n                if Is_In_Union_Id (Desc.Kind) then\n                   Set_Node_Field_Union"}, {"sha": "aa06506bb19ea05c4783437ede8255bb4944c0bd", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034c3117520f33bc108afc930c16b220041e4a97/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=034c3117520f33bc108afc930c16b220041e4a97", "patch": "@@ -1024,6 +1024,8 @@ package body Treepr is\n       FD     : Field_Descriptor;\n       Format : UI_Format := Auto)\n    is\n+      pragma Assert (FD.Type_Only = No_Type_Only);\n+      --  Type_Only is for entities\n    begin\n       if not Field_Is_Initial_Zero (N, Field) then\n          Print_Field (Prefix, Image (Field), N, FD, Format);\n@@ -1041,9 +1043,10 @@ package body Treepr is\n       FD     : Field_Descriptor;\n       Format : UI_Format := Auto)\n    is\n+      NN : constant Node_Id := Node_To_Fetch_From (N, Field);\n    begin\n       if not Field_Is_Initial_Zero (N, Field) then\n-         Print_Field (Prefix, Image (Field), N, FD, Format);\n+         Print_Field (Prefix, Image (Field), NN, FD, Format);\n       end if;\n    end Print_Entity_Field;\n "}]}