{"sha": "7967c666c27082f9f7d31500c1ec00fa0d18d055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2N2M2NjZjMjcwODJmOWY3ZDMxNTAwYzFlYzAwZmEwZDE4ZDA1NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-29T21:16:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-29T21:16:35Z"}, "message": "Add prototypes for all functions defined in file.\n\nChange a few occurrences of RTX_CODE to enum rtx_code for consistency.\n(merge_trees): Add casts of args to mybcopy.\n(write_tree_1): Now static.\n(fatal): Always called with one arg, so define that way.\n\nFrom-SVN: r3914", "tree": {"sha": "8283c9d22c5e6d8a711ebfda2382905b3c986e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8283c9d22c5e6d8a711ebfda2382905b3c986e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7967c666c27082f9f7d31500c1ec00fa0d18d055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7967c666c27082f9f7d31500c1ec00fa0d18d055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7967c666c27082f9f7d31500c1ec00fa0d18d055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7967c666c27082f9f7d31500c1ec00fa0d18d055/comments", "author": null, "committer": null, "parents": [{"sha": "e4135fa5a2a9aced4c5564ff5523af7a66144f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4135fa5a2a9aced4c5564ff5523af7a66144f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4135fa5a2a9aced4c5564ff5523af7a66144f6b"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "2480ea91a4ea522be51524386cff8ca5300d1958", "filename": "gcc/genrecog.c", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7967c666c27082f9f7d31500c1ec00fa0d18d055/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7967c666c27082f9f7d31500c1ec00fa0d18d055/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=7967c666c27082f9f7d31500c1ec00fa0d18d055", "patch": "@@ -164,26 +164,37 @@ static struct pred_table\n \n #define NUM_KNOWN_PREDS (sizeof preds / sizeof preds[0])\n \n-static int try_merge_1 ();\n-static int no_same_mode ();\n-static int same_codes ();\n-static int same_modes ();\n-char *xmalloc ();\n-static struct decision *add_to_sequence ();\n-static struct decision_head merge_trees ();\n-static struct decision *try_merge_2 ();\n-static void write_subroutine ();\n-static void print_code ();\n-static void clear_codes ();\n-static void clear_modes ();\n-static void change_state ();\n-static void write_tree ();\n-static char *copystr ();\n-static char *concat ();\n-static void fatal ();\n-void fancy_abort ();\n-static void mybzero ();\n-static void mybcopy ();\n+static struct decision_head make_insn_sequence PROTO((rtx, enum routine_type));\n+static struct decision *add_to_sequence PROTO((rtx, struct decision_head *,\n+\t\t\t\t\t       char *));\n+static int not_both_true\tPROTO((struct decision *, struct decision *,\n+\t\t\t\t       int));\n+static int position_merit\tPROTO((struct decision *, enum machine_mode,\n+\t\t\t\t       enum rtx_code));\n+static struct decision_head merge_trees PROTO((struct decision_head,\n+\t\t\t\t\t       struct decision_head));\n+static int break_out_subroutines PROTO((struct decision_head,\n+\t\t\t\t\tenum routine_type, int));\n+static void write_subroutine\tPROTO((struct decision *, enum routine_type));\n+static void write_tree_1\tPROTO((struct decision *, char *,\n+\t\t\t\t       struct decision *, enum routine_type));\n+static void print_code\t\tPROTO((enum rtx_code));\n+static int same_codes\t\tPROTO((struct decision *, enum rtx_code));\n+static void clear_codes\t\tPROTO((struct decision *));\n+static int same_modes\t\tPROTO((struct decision *, enum machine_mode));\n+static void clear_modes\t\tPROTO((struct decision *));\n+static void write_tree\t\tPROTO((struct decision *, char *,\n+\t\t\t\t       struct decision *, int,\n+\t\t\t\t       enum routine_type));\n+static void change_state\tPROTO((char *, char *, int));\n+static char *copystr\t\tPROTO((char *));\n+static void mybzero\t\tPROTO((char *, unsigned));\n+static void mybcopy\t\tPROTO((char *, char *, unsigned));\n+static char *concat\t\tPROTO((char *, char *));\n+static void fatal\t\tPROTO((char *));\n+char *xrealloc\t\t\tPROTO((char *, unsigned));\n+char *xmalloc\t\t\tPROTO((unsigned));\n+void fancy_abort\t\tPROTO((void));\n \f\n /* Construct and return a sequence of decisions\n    that will recognize INSN.\n@@ -653,7 +664,7 @@ static int\n position_merit (p, mode, code)\n      struct decision *p;\n      enum machine_mode mode;\n-     RTX_CODE code;\n+     enum rtx_code code;\n {\n   enum machine_mode p_mode;\n \n@@ -793,7 +804,8 @@ merge_trees (oldh, addh)\n \t\t      struct decision *split\n \t\t\t= (struct decision *) xmalloc (sizeof (struct decision));\n \n-\t\t      mybcopy (old, split, sizeof (struct decision));\n+\t\t      mybcopy ((char *) old, (char *) split,\n+\t\t\t       sizeof (struct decision));\n \n \t\t      old->success.first = old->success.last = split;\n \t\t      old->c_test = 0;\n@@ -819,7 +831,8 @@ merge_trees (oldh, addh)\n \t\t      struct decision *split\n \t\t\t= (struct decision *) xmalloc (sizeof (struct decision));\n \n-\t\t      mybcopy (add, split, sizeof (struct decision));\n+\t\t      mybcopy ((char *) add, (char *) split,\n+\t\t\t       sizeof (struct decision));\n \n \t\t      add->success.first = add->success.last = split;\n \t\t      add->c_test = 0;\n@@ -1018,7 +1031,7 @@ static char *indents[]\n    resulting function.   We do check for when every test is the same mode\n    or code.  */\n \n-void\n+static void\n write_tree_1 (tree, prevpos, afterward, type)\n      struct decision *tree;\n      char *prevpos;\n@@ -1441,7 +1454,7 @@ write_tree_1 (tree, prevpos, afterward, type)\n \n static void\n print_code (code)\n-     RTX_CODE code;\n+     enum rtx_code code;\n {\n   register char *p1;\n   for (p1 = GET_RTX_NAME (code); *p1; p1++)\n@@ -1456,7 +1469,7 @@ print_code (code)\n static int\n same_codes (p, code)\n      register struct decision *p;\n-     register RTX_CODE code;\n+     register enum rtx_code code;\n {\n   for (; p; p = p->next)\n     if (p->code != code)\n@@ -1652,11 +1665,11 @@ xmalloc (size)\n }\n \n static void\n-fatal (s, a1, a2)\n+fatal (s)\n      char *s;\n {\n   fprintf (stderr, \"genrecog: \");\n-  fprintf (stderr, s, a1, a2);\n+  fprintf (stderr, s);\n   fprintf (stderr, \"\\n\");\n   fprintf (stderr, \"after %d definitions\\n\", next_index);\n   exit (FATAL_EXIT_CODE);"}]}