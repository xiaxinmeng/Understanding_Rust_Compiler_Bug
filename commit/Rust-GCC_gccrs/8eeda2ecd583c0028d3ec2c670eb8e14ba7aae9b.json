{"sha": "8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlZGEyZWNkNTgzYzAwMjhkM2VjMmM2NzBlYjhlMTRiYTdhYWU5Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-08-22T01:52:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-08-22T01:52:56Z"}, "message": "lex.c (real_yylex): Refer to __complex instead of complex.\n\n\t* lex.c (real_yylex): Refer to __complex instead of complex.\n\n-Wed Jul 16 15:57:42 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n-\n-       * parse.y (empty_parms): Only use VOID_LIST_NODE for the PARMS if\n-       we're in a C++ struct/class, not if we're doing xtern \"C\"'.\n-\n\nand regenerate parse.c.\n\nFrom-SVN: r14885", "tree": {"sha": "bafe1a8aa2c3ad7e2ba3e7c97ad5224b96f88059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bafe1a8aa2c3ad7e2ba3e7c97ad5224b96f88059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/comments", "author": null, "committer": null, "parents": [{"sha": "b4f32d7b120680f16eb9a95c282bba0c5c5e86aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f32d7b120680f16eb9a95c282bba0c5c5e86aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f32d7b120680f16eb9a95c282bba0c5c5e86aa"}], "stats": {"total": 7215, "additions": 3632, "deletions": 3583}, "files": [{"sha": "0d346c3b7a87a1376cddfb0ddd3020f0825e01c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "patch": "@@ -1,3 +1,7 @@\n+Thu Aug 21 18:48:44 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* lex.c (real_yylex): Refer to __complex instead of complex.\n+\n Thu Aug 21 22:25:46 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* lex.c (real_yylex): Don't use getc directly.\n@@ -200,11 +204,6 @@ Wed Jul 16 23:47:08 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \t* lex.c (do_scoped_id): convert_from_reference.\n \t* init.c (build_offset_ref): Likewise.\n \n-Wed Jul 16 15:57:42 1997  Benjamin Kosnik  <bkoz@rhino.cygnus.com>\n-\n-\t* parse.y (empty_parms): Only use VOID_LIST_NODE for the PARMS if\n-\twe're in a C++ struct/class, not if we're doing `extern \"C\"'.\n-\n Wed Jul 16 12:34:29 1997  Benjamin Kosnik  <bkoz@lisa.cygnus.com>\n \n \t* error.c (dump_expr): Check TREE_OPERAND before dump_expr_list.\n@@ -526,8 +525,7 @@ Tue May 20 13:55:57 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \t* hash.h: Regenerate.\n \t* lex.h (rid): Add RID_COMPLEX.\n \t(RID_LAST_MODIFIER): Set to RID_COMPLEX.\n-\t* lex.c (init_lex): Add building of RID_COMPLEX.  Unset reserved\n-\tword \"complex\" if -fno-gnu-keywords.\n+\t* lex.c (init_lex): Add building of RID_COMPLEX.\n \t(real_yylex): General cleanup in line with what c-lex.c also has,\n \tsans the cruft for traditional; add handling of SPEC_IMAG, complex\n \ttypes, and imaginary numeric constants."}, {"sha": "69fc05f8f29b16f0c38691fd67fbf915c2d98af0", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "patch": "@@ -7,8 +7,20 @@\n \n   for more information.\n \n+* New flags -Wsign-promo, -Wno-pmf-conversion.\n+\n+* local static variables in extern inline functions will be shared between\n+  translation units.\n+\n+* Standard usage syntax for the std namespace is supported; std is treated\n+  as an alias for global scope.  General namespaces are still not supported.\n+\n+* -fvtable-thunks is supported for all targets, and is the default for \n+  Linux with glibc (libc 6 on x86).\n+\n * Default function arguments in templates will not be evaluated (or\n-  checked for semantic validity) unless they are needed.\n+  checked for semantic validity) unless they are needed.  Default arguments\n+  in class bodies will not be parsed until the class definition is complete.\n \n * The -ftemplate-depth-NN flag can be used to increase the maximum\n   recursive template instantiation depth, defaulting to 17. If you need"}, {"sha": "58c79dfa6a9ceaa89ac41e0a73b5ceb44af46205", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "patch": "@@ -663,7 +663,7 @@ init_lex ()\n   ridpointers[(int) RID_REGISTER] = get_identifier (\"register\");\n   SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_REGISTER],\n \t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_REGISTER]));\n-  ridpointers[(int) RID_COMPLEX] = get_identifier (\"complex\");\n+  ridpointers[(int) RID_COMPLEX] = get_identifier (\"__complex\");\n   SET_IDENTIFIER_AS_LIST (ridpointers[(int) RID_COMPLEX],\n \t\t\t  build_tree_list (NULL_TREE, ridpointers[(int) RID_COMPLEX]));\n \n@@ -833,8 +833,6 @@ init_lex ()\n       UNSET_RESERVED_WORD (\"signature\");\n       UNSET_RESERVED_WORD (\"sigof\");\n     }\n-  if (flag_no_gnu_keywords)\n-    UNSET_RESERVED_WORD (\"complex\");\n   if (flag_no_asm || flag_no_gnu_keywords)\n     UNSET_RESERVED_WORD (\"typeof\");\n   if (! flag_operator_names)\n@@ -3843,7 +3841,7 @@ real_yylex ()\n \t\t\t\t\t cp_convert (integer_type_node,\n \t\t\t\t\t\t     yylval.ttype));\n \t\t    else\n-\t\t      error (\"complex integer constant is too wide for `complex int'\");\n+\t\t      error (\"complex integer constant is too wide for `__complex int'\");\n \t\t  }\n \t      }\n "}, {"sha": "63b65a39838ca29704926f350114dcf2f8071a4b", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 3611, "deletions": 3567, "changes": 7178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b"}, {"sha": "4eb8a20eb783288263779d39c1628a3efa15e3d5", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=8eeda2ecd583c0028d3ec2c670eb8e14ba7aae9b", "patch": "@@ -88,10 +88,7 @@ empty_parms ()\n   tree parms;\n \n   if (strict_prototype\n-      /* Only go ahead with using the void list node if we're actually\n-\t parsing a class in C++, not a struct in extern \"C\" mode.  */\n-      || (current_class_type != NULL\n-\t  && current_lang_name == lang_name_cplusplus))\n+      || current_class_type != NULL)\n     parms = void_list_node;\n   else\n     parms = NULL_TREE;"}]}