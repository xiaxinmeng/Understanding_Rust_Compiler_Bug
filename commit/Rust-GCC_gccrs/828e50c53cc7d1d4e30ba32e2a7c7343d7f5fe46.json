{"sha": "828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4ZTUwYzUzY2M3ZDFkNGUzMGJhMzJlMmE3YzczNDNkN2Y1ZmU0Ng==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2013-02-06T20:22:56Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2013-02-06T20:22:56Z"}, "message": "Fix validate_failures.py in standalone testing.\n\nWhen using validate_failures.py with --manifest and --results, we\ndon't need a GCC build directory.  This is useful when using the\nvalidator outside of the build tree.  We were insisting on finding\na valid build tree regardless of those options.\n\nTested on x86_64.  Committed to trunk.\n\n\t* testsuite-management/validate_failures.py: Update\n\tCopyright years.\n\tRequest contributions not to use Python features newer\n\tthan 2.4.\n\t(GetBuildData): If this is not a build directory,\n\temit an error only if --results or --manifest are missing.\n\nFrom-SVN: r195817", "tree": {"sha": "bc7faa6754990b2b335ea01836a03900191f9880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc7faa6754990b2b335ea01836a03900191f9880"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0c4e31020ff1f11fe4db2dd1f66f111d2078217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c4e31020ff1f11fe4db2dd1f66f111d2078217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c4e31020ff1f11fe4db2dd1f66f111d2078217"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "2e4db76d18e1eabec65b5baa8ef6516cc5923ab1", "filename": "contrib/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46", "patch": "@@ -1,3 +1,12 @@\n+2013-02-06  Diego Novillo  <dnovillo@google.com>\n+\n+\t* testsuite-management/validate_failures.py: Update\n+\tCopyright years.\n+\tRequest contributions not to use Python features newer\n+\tthan 2.4.\n+\t(GetBuildData): If this is not a build directory,\n+\temit an error only if --results or --manifest are missing.\n+\n 2013-02-06  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* testsuite-management/validate_failures.py"}, {"sha": "76f9aab1087bdef965d0eae14839a6338587aa8a", "filename": "contrib/testsuite-management/validate_failures.py", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftestsuite-management%2Fvalidate_failures.py?ref=828e50c53cc7d1d4e30ba32e2a7c7343d7f5fe46", "patch": "@@ -2,10 +2,14 @@\n \n # Script to compare testsuite failures against a list of known-to-fail\n # tests.\n+#\n+# NOTE: This script is used in installations that are running Python 2.4.\n+#       Please stick to syntax features available in 2.4 and earlier\n+#       versions.\n \n # Contributed by Diego Novillo <dnovillo@google.com>\n #\n-# Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n+# Copyright (C) 2011-2013 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -78,7 +82,7 @@\n _OPTIONS = None\n \n def Error(msg):\n-  print >>sys.stderr, '\\nerror: %s' % msg\n+  print >>sys.stderr, 'error: %s' % msg\n   sys.exit(1)\n \n \n@@ -358,15 +362,24 @@ def GetManifestPath(srcdir, target, user_provided_must_exist):\n       Error('Manifest does not exist: %s' % manifest_path)\n     return manifest_path\n   else:\n+    assert srdir and target\n     return _MANIFEST_PATH_PATTERN % (srcdir, _MANIFEST_SUBDIR, target)\n \n \n def GetBuildData():\n-  target = GetMakefileValue('%s/Makefile' % _OPTIONS.build_dir, 'target_alias=')\n   srcdir = GetMakefileValue('%s/Makefile' % _OPTIONS.build_dir, 'srcdir =')\n+  target = GetMakefileValue('%s/Makefile' % _OPTIONS.build_dir, 'target_alias=')\n   if not ValidBuildDirectory(_OPTIONS.build_dir, target):\n-    Error('%s is not a valid GCC top level build directory.' %\n-          _OPTIONS.build_dir)\n+    # If we have been given a set of results to use, we may\n+    # not be inside a valid GCC build directory.  In that case,\n+    # the user must provide both a manifest file and a set\n+    # of results to check against it.\n+    if not _OPTIONS.results or not _OPTIONS.manifest:\n+      Error('%s is not a valid GCC top level build directory. '\n+            'You must use --manifest and --results to do the validation.' %\n+            _OPTIONS.build_dir)\n+    else:\n+      return None, None\n   print 'Source directory: %s' % srcdir\n   print 'Build target:     %s' % target\n   return srcdir, target\n@@ -410,7 +423,7 @@ def PerformComparison(expected, actual, ignore_missing_failures):\n \n \n def CheckExpectedResults():\n-  (srcdir, target) = GetBuildData()\n+  srcdir, target = GetBuildData()\n   manifest_path = GetManifestPath(srcdir, target, True)\n   print 'Manifest:         %s' % manifest_path\n   manifest = GetManifest(manifest_path)\n@@ -485,7 +498,8 @@ def Main(argv):\n   parser.add_option('--manifest', action='store', type='string',\n                     dest='manifest', default=None,\n                     help='Name of the manifest file to use (default = '\n-                    'taken from contrib/testsuite-managment/<target_alias>.xfail)')\n+                    'taken from '\n+                    'contrib/testsuite-managment/<target_alias>.xfail)')\n   parser.add_option('--produce_manifest', action='store_true',\n                     dest='produce_manifest', default=False,\n                     help='Produce the manifest for the current '"}]}