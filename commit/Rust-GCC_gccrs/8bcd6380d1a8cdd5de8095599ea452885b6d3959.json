{"sha": "8bcd6380d1a8cdd5de8095599ea452885b6d3959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjZDYzODBkMWE4Y2RkNWRlODA5NTU5OWVhNDUyODg1YjZkMzk1OQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-01-13T05:39:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-13T05:39:57Z"}, "message": "c-typeck.c (null_pointer_constant_p): Replace use of TREE_CONSTANT_OVERFLOW with TREE_OVERFLOW.\n\n\n\t* c-typeck.c (null_pointer_constant_p): Replace use of\n\tTREE_CONSTANT_OVERFLOW with TREE_OVERFLOW.\n\t(build_c_cast): Likewise.\n\nFrom-SVN: r120747", "tree": {"sha": "d4290671d093f8e648c9da2482bcce6088ee57b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4290671d093f8e648c9da2482bcce6088ee57b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bcd6380d1a8cdd5de8095599ea452885b6d3959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcd6380d1a8cdd5de8095599ea452885b6d3959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcd6380d1a8cdd5de8095599ea452885b6d3959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcd6380d1a8cdd5de8095599ea452885b6d3959/comments", "author": null, "committer": null, "parents": [{"sha": "d95787e646b7b5f027d7f241707aa0f297949792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95787e646b7b5f027d7f241707aa0f297949792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95787e646b7b5f027d7f241707aa0f297949792"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "fcaf921c281ddab39d77f92acd54935e0aad7243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcd6380d1a8cdd5de8095599ea452885b6d3959/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcd6380d1a8cdd5de8095599ea452885b6d3959/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bcd6380d1a8cdd5de8095599ea452885b6d3959", "patch": "@@ -1,3 +1,9 @@\n+2007-01-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-typeck.c (null_pointer_constant_p): Replace use of\n+\tTREE_CONSTANT_OVERFLOW with TREE_OVERFLOW.\n+\t(build_c_cast): Likewise.\n+\n 2007-01-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* tree.h (force_fit_type_double): Remove unused final argument."}, {"sha": "66b109ecf3ea86754b3564a5d0929b850233effe", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcd6380d1a8cdd5de8095599ea452885b6d3959/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcd6380d1a8cdd5de8095599ea452885b6d3959/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8bcd6380d1a8cdd5de8095599ea452885b6d3959", "patch": "@@ -1,6 +1,6 @@\n /* Build expressions with type checking for C compiler.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -117,7 +117,7 @@ null_pointer_constant_p (tree expr)\n      yet available everywhere required.  */\n   tree type = TREE_TYPE (expr);\n   return (TREE_CODE (expr) == INTEGER_CST\n-\t  && !TREE_CONSTANT_OVERFLOW (expr)\n+\t  && !TREE_OVERFLOW (expr)\n \t  && integer_zerop (expr)\n \t  && (INTEGRAL_TYPE_P (type)\n \t      || (TREE_CODE (type) == POINTER_TYPE\n@@ -3588,15 +3588,16 @@ build_c_cast (tree type, tree expr)\n       /* Ignore any integer overflow caused by the cast.  */\n       if (TREE_CODE (value) == INTEGER_CST)\n \t{\n-\t  if (CONSTANT_CLASS_P (ovalue)\n-\t      && (TREE_OVERFLOW (ovalue) || TREE_CONSTANT_OVERFLOW (ovalue)))\n+\t  if (CONSTANT_CLASS_P (ovalue) && TREE_OVERFLOW (ovalue))\n \t    {\n-\t      /* Avoid clobbering a shared constant.  */\n-\t      value = copy_node (value);\n-\t      TREE_OVERFLOW (value) = TREE_OVERFLOW (ovalue);\n-\t      TREE_CONSTANT_OVERFLOW (value) = TREE_CONSTANT_OVERFLOW (ovalue);\n+\t      if (!TREE_OVERFLOW (value))\n+\t\t{\n+\t\t  /* Avoid clobbering a shared constant.  */\n+\t\t  value = copy_node (value);\n+\t\t  TREE_OVERFLOW (value) = TREE_OVERFLOW (ovalue);\n+\t\t}\n \t    }\n-\t  else if (TREE_OVERFLOW (value) || TREE_CONSTANT_OVERFLOW (value))\n+\t  else if (TREE_OVERFLOW (value))\n \t    /* Reset VALUE's overflow flags, ensuring constant sharing.  */\n \t    value = build_int_cst_wide (TREE_TYPE (value),\n \t\t\t\t\tTREE_INT_CST_LOW (value),"}]}