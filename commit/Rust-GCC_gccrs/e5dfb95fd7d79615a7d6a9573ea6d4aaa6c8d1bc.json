{"sha": "e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkZmI5NWZkN2Q3OTYxNWE3ZDZhOTU3M2VhNmQ0YWFhNmM4ZDFiYw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2010-02-19T13:58:09Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2010-02-19T13:58:09Z"}, "message": "configure.ac: Replace all uses of changequote in macro arguments with proper quoting.\n\n* configure.ac: Replace all uses of changequote in macro arguments\nwith proper quoting.\n\nFrom-SVN: r156895", "tree": {"sha": "cca30459ecf0987362f267b3df438cddd5cd8f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cca30459ecf0987362f267b3df438cddd5cd8f78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bdd49f4b399a41b1bb4129961e64da7ea152a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdd49f4b399a41b1bb4129961e64da7ea152a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bdd49f4b399a41b1bb4129961e64da7ea152a93"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "1d230c47bb6131ce5101f4c0c56b096cc87688a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc", "patch": "@@ -1,3 +1,8 @@\n+2010-02-19  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* configure.ac: Replace all uses of changequote in macro arguments\n+\twith proper quoting.\n+\n 2010-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/42233"}, {"sha": "fee13b306a13bea0a1ccde53dd30dc46a0e64957", "filename": "gcc/configure.ac", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e5dfb95fd7d79615a7d6a9573ea6d4aaa6c8d1bc", "patch": "@@ -2134,14 +2134,13 @@ fi\n changequote([,])dnl\n \n AC_CACHE_CHECK(linker for .hidden support, gcc_cv_ld_hidden,\n-[if test $in_tree_ld = yes ; then\n+[[if test $in_tree_ld = yes ; then\n   gcc_cv_ld_hidden=no\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 13 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n      && test $in_tree_ld_is_elf = yes; then\n      gcc_cv_ld_hidden=yes\n   fi\n else\n-changequote(,)dnl\n   gcc_cv_ld_hidden=yes\n   if echo \"$ld_ver\" | grep GNU > /dev/null; then\n     if test 0\"$ld_date\" -lt 20020404; then\n@@ -2175,8 +2174,7 @@ changequote(,)dnl\n \t;;\n     esac\n   fi\n-changequote([,])dnl\n-fi])\n+fi]])\n libgcc_visibility=no\n AC_SUBST(libgcc_visibility)\n GCC_TARGET_TEMPLATE([HAVE_GAS_HIDDEN])\n@@ -2234,24 +2232,22 @@ L1:\n \t.uleb128 1280\n \t.sleb128 -1010\n L2:],\n- [# GAS versions before 2.11 do not support uleb128,\n+[[# GAS versions before 2.11 do not support uleb128,\n   # despite appearing to.\n   # ??? There exists an elf-specific test that will crash\n   # the assembler.  Perhaps it's better to figure out whether\n   # arbitrary sections are supported and try the test.\n   as_ver=`$gcc_cv_as --version 2>/dev/null | sed 1q`\n   if echo \"$as_ver\" | grep GNU > /dev/null; then\n-changequote(,)dnl\n     as_vers=`echo $as_ver | sed -n \\\n \t-e 's,^.*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*.*\\)$,\\1,p'`\n     as_major=`expr \"$as_vers\" : '\\([0-9]*\\)'`\n     as_minor=`expr \"$as_vers\" : '[0-9]*\\.\\([0-9]*\\)'`\n-changequote([,])dnl\n     if test $as_major -eq 2 && test $as_minor -lt 11\n     then :\n     else gcc_cv_as_leb128=yes\n     fi\n-  fi],\n+  fi]],\n   [AC_DEFINE(HAVE_AS_LEB128, 1,\n     [Define if your assembler supports .sleb128 and .uleb128.])])\n \n@@ -2299,14 +2295,12 @@ gcc_GAS_CHECK_FEATURE([working cfi advance], gcc_cv_as_cfi_advance_working,\n \t.skip 512, 0\n \t.cfi_adjust_cfa_offset 128\n \t.cfi_endproc],\n-[\n-changequote(,)dnl\n+[[\n if $gcc_cv_readelf -wf conftest.o 2>/dev/null \\\n     | grep 'DW_CFA_advance_loc[12]:[ \t][ \t]*512[ \t]' >/dev/null; then\n    gcc_cv_as_cfi_advance_working=yes\n fi\n-changequote([,])dnl\n-])\n+]])\n else\n   # no readelf, err on the side of caution\n   gcc_cv_as_cfi_advance_working=no\n@@ -3566,17 +3560,15 @@ Valid choices are 'yes' and 'no'.]) ;;\n    [elf,2,19,52],,\n    [.type foo, @gnu_unique_object],,\n # Also check for ld.so support, i.e. glibc 2.11 or higher.\n-   [if test x$host = x$build -a x$host = x$target &&\n+   [[if test x$host = x$build -a x$host = x$target &&\n        glibcver=`ldd --version 2>/dev/null | sed 's/.* //;q'`; then\n-changequote(,)dnl\n       glibcmajor=`expr \"$glibcver\" : \"\\([0-9]*\\)\"`\n       glibcminor=`expr \"$glibcver\" : \"[2-9]*\\.\\([0-9]*\\)\"`\n-changequote([,])dnl\n       glibcnum=`expr $glibcmajor \\* 1000 + $glibcminor`\n       if test \"$glibcnum\" -ge 2011 ; then\n         enable_gnu_unique_object=yes\n       fi\n-    fi])])\n+    fi]])])\n if test x$enable_gnu_unique_object = xyes; then\n   AC_DEFINE(HAVE_GAS_GNU_UNIQUE_OBJECT, 1,\n    [Define if your assembler supports @gnu_unique_object.])\n@@ -3869,9 +3861,8 @@ AC_CACHE_CHECK(__stack_chk_fail in target C library,\n       else\n \tglibc_header_dir=/usr/include\n       fi\n-      # glibc 2.4 and later provides __stack_chk_fail and\n+      [# glibc 2.4 and later provides __stack_chk_fail and\n       # either __stack_chk_guard, or TLS access to stack guard canary.\n-changequote(,)dnl\n       if test -f $glibc_header_dir/features.h \\\n \t && $EGREP '^[ \t]*#[ \t]*define[ \t]+__GNU_LIBRARY__[ \t]+([1-9][0-9]|[6-9])' \\\n \t    $glibc_header_dir/features.h > /dev/null; then\n@@ -3890,8 +3881,7 @@ changequote(,)dnl\n \t     $glibc_header_dir/bits/uClibc_config.h > /dev/null; then\n \t  gcc_cv_libc_provides_ssp=yes\n \tfi\n-      fi\n-changequote([,])dnl\n+      fi]\n \t;;\n        *-*-gnu*)\n \t # Avoid complicated tests (see\n@@ -3923,7 +3913,7 @@ case \"$target\" in\n     AC_ARG_WITH(long-double-128,\n [  --with-long-double-128  Use 128-bit long double by default.],\n       gcc_cv_target_ldbl128=\"$with_long_double_128\",\n-      [gcc_cv_target_ldbl128=no\n+      [[gcc_cv_target_ldbl128=no\n       if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n \tif test \"x$with_sysroot\" = x; then\n \t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n@@ -3937,12 +3927,10 @@ case \"$target\" in\n       else\n \tglibc_header_dir=/usr/include\n       fi\n-changequote(,)dnl\n       grep '^[ \t]*#[ \t]*define[ \t][ \t]*__LONG_DOUBLE_MATH_OPTIONAL' \\\n         $glibc_header_dir/bits/wordsize.h > /dev/null 2>&1 \\\n       && gcc_cv_target_ldbl128=yes\n-changequote([,])dnl\n-      ])\n+      ]])\n     ;;\n esac\n if test x$gcc_cv_target_ldbl128 = xyes; then"}]}