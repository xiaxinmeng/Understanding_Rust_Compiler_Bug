{"sha": "4bc0cb117e06435823612aa16dc9f75e32eff226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjMGNiMTE3ZTA2NDM1ODIzNjEyYWExNmRjOWY3NWUzMmVmZjIyNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-04-02T01:34:17Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-04-02T01:34:17Z"}, "message": "Initial revision\n\nFrom-SVN: r13828", "tree": {"sha": "ccda681d8b35fc896257497c3c20766366317a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccda681d8b35fc896257497c3c20766366317a1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bc0cb117e06435823612aa16dc9f75e32eff226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc0cb117e06435823612aa16dc9f75e32eff226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc0cb117e06435823612aa16dc9f75e32eff226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc0cb117e06435823612aa16dc9f75e32eff226/comments", "author": null, "committer": null, "parents": [{"sha": "22ef4e9b59f8df4b3a8e37d178426b2cfe059657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ef4e9b59f8df4b3a8e37d178426b2cfe059657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ef4e9b59f8df4b3a8e37d178426b2cfe059657"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "e156ccf5939b02c008612e106ace49a91cc77101", "filename": "gcc/ginclude/va-mn10300.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc0cb117e06435823612aa16dc9f75e32eff226/gcc%2Fginclude%2Fva-mn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc0cb117e06435823612aa16dc9f75e32eff226/gcc%2Fginclude%2Fva-mn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-mn10300.h?ref=4bc0cb117e06435823612aa16dc9f75e32eff226", "patch": "@@ -0,0 +1,35 @@\n+/* Define __gnuc_va_list. */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+typedef void *__gnuc_va_list;\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n+#define __gnuc_va_start(AP) (AP = (__gnuc_va_list)__builtin_saveregs())\n+#define __va_ellipsis ...\n+\n+#ifdef _STDARG_H\n+#define va_start(AP, LASTARG) \\\n+  (__builtin_next_arg (LASTARG), __gnuc_va_start (AP))\n+#else\n+#define va_alist __builtin_va_alist\n+#define va_dcl int __builtin_va_alist; __va_ellipsis\n+#define va_start(AP)  AP=(char *) &__builtin_va_alist\n+#endif\n+\n+/* Now stuff common to both varargs & stdarg implementations.  */\n+#define __va_rounded_size(TYPE)\t\t\t\t\t\t\\\n+  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n+#undef va_end\n+void va_end (__gnuc_va_list);\n+#define va_end(AP) ((void)0)\n+#define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n+ (sizeof (TYPE) > 8\t\t\t\t\t\t\t\\\n+  ? (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (char *)),\\\n+    **((TYPE **) (void *) ((char *) (AP) - __va_rounded_size (char *))))\\\n+  : (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),\t\\\n+    *((TYPE *) (void *) ((char *) (AP) - __va_rounded_size (TYPE)))))\n+#endif"}]}