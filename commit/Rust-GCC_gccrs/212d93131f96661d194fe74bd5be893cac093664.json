{"sha": "212d93131f96661d194fe74bd5be893cac093664", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyZDkzMTMxZjk2NjYxZDE5NGZlNzRiZDViZTg5M2NhYzA5MzY2NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-03-31T14:44:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-03-31T14:44:12Z"}, "message": "h8300.md: Organize peephole2's that trasform (compare (reg:HI) (const_int)).\n\n\t* config/h8300/h8300.md: Organize peephole2's that trasform\n\t(compare (reg:HI) (const_int)).\n\nFrom-SVN: r65089", "tree": {"sha": "39206ed13281b03dc9611cb42c673bedd6562dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39206ed13281b03dc9611cb42c673bedd6562dbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/212d93131f96661d194fe74bd5be893cac093664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212d93131f96661d194fe74bd5be893cac093664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212d93131f96661d194fe74bd5be893cac093664", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212d93131f96661d194fe74bd5be893cac093664/comments", "author": null, "committer": null, "parents": [{"sha": "03f2ea93564390f4b0ca1b87f9e63ae07197a936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f2ea93564390f4b0ca1b87f9e63ae07197a936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f2ea93564390f4b0ca1b87f9e63ae07197a936"}], "stats": {"total": 129, "additions": 80, "deletions": 49}, "files": [{"sha": "b779ea3c63dc8fdb439999a610a606869ce30fb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212d93131f96661d194fe74bd5be893cac093664/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212d93131f96661d194fe74bd5be893cac093664/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=212d93131f96661d194fe74bd5be893cac093664", "patch": "@@ -1,3 +1,8 @@\n+2003-03-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.md: Organize peephole2's that trasform\n+\t(compare (reg:HI) (const_int)).\n+\n 2003-03-31  Roger Sayle  <roger@eyesopen.com>\n \n \t* emit-rtl.c (dconstm2, dconsthalf): New real constants."}, {"sha": "d0dbb1f358e5b2aef5f2ab8903d804dee49e0f39", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 75, "deletions": 49, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212d93131f96661d194fe74bd5be893cac093664/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212d93131f96661d194fe74bd5be893cac093664/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=212d93131f96661d194fe74bd5be893cac093664", "patch": "@@ -3969,7 +3969,50 @@\n ;; dead     1                       geu/ltu shlr.l\n ;; dead     3 (H8S)                 geu/ltu shlr.l\n ;;\n-;; dead   255                       geu/ltu mov.b\n+;; ----   255                       geu/ltu mov.b\n+\n+;; Transform\n+;;\n+;;\tcmp.w\t#1,r0\n+;;\tbne\t.L1\n+;;\n+;; into\n+;;\n+;;\tdec.w\t#1,r0\n+;;\tbne\t.L1\n+\n+(define_peephole2\n+  [(set (cc0)\n+\t(compare (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t (match_operand:HI 1 \"incdec_operand\" \"\")))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && peep2_reg_dead_p (1, operands[0])\"\n+  [(set (match_dup 0)\n+\t(unspec:HI [(match_dup 0)\n+\t\t    (match_dup 4)]\n+\t\t   UNSPEC_INCDEC))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"operands[4] = GEN_INT (- INTVAL (operands[1]));\")\n+\n+;; Transform\n+;;\n+;;\tcmp.w\t#1,r0\n+;;\tbhi\t.L1\n+;;\n+;; into\n+;;\n+;;\tshlr.w\tr0\n+;;\tbne\t.L1\n \n (define_peephole2\n   [(set (cc0)\n@@ -3999,6 +4042,37 @@\n \t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\n    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));\")\n \n+;; Transform\n+;;\n+;;\tcmp.w\t#255,r0\n+;;\tbhi\t.L1\n+;;\n+;; into\n+;;\n+;;\tmov.b\tr0h,r0h\n+;;\tbne\t.L1\n+\n+(define_peephole2\n+  [(set (cc0)\n+\t(compare (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t (const_int 255)))\n+   (set (pc)\n+\t(if_then_else (match_operator 1 \"gtuleu_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n+  [(set (cc0)\n+\t(and:HI (match_dup 0)\n+\t\t(const_int -256)))\n+   (set (pc)\n+\t(if_then_else (match_dup 4)\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"operands[4] = ((GET_CODE (operands[1]) == GTU) ?\n+\t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n+\t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\")\n+\n ;; (compare (reg:SI) (const_int)) takes 6 bytes, so we try to achieve\n ;; the equivalent with shorter sequences.  Here is the summary.  Cases\n ;; are grouped for each define_peephole2.\n@@ -4041,31 +4115,6 @@\n ;; For a small constant, it is cheaper to actually do the subtraction\n ;; and then test the register.\n \n-(define_peephole2\n-  [(set (cc0)\n-\t(compare (match_operand:HI 0 \"register_operand\" \"\")\n-\t\t (match_operand:HI 1 \"incdec_operand\" \"\")))\n-   (set (pc)\n-\t(if_then_else (match_operator 3 \"eqne_operator\"\n-\t\t\t[(cc0) (const_int 0)])\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"(TARGET_H8300H || TARGET_H8300S)\n-   && peep2_reg_dead_p (1, operands[0])\"\n-  [(set (match_dup 0)\n-\t(unspec:HI [(match_dup 0)\n-\t\t    (match_dup 4)]\n-\t\t   UNSPEC_INCDEC))\n-   (set (cc0)\n-\t(match_dup 0))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_dup 2))\n-\t\t      (pc)))]\n-  \"operands[4] = GEN_INT (- INTVAL (operands[1]));\")\n-\n-;; The SImode version of the previous pattern.\n-\n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4209,29 +4258,6 @@\n \t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\n    operands[5] = GEN_INT (~INTVAL (operands[1]));\")\n \n-;; Transform A <= 255 to (A & 0xff00) == 0.\n-\n-(define_peephole2\n-  [(set (cc0)\n-\t(compare (match_operand:HI 0 \"register_operand\" \"\")\n-\t\t (const_int 255)))\n-   (set (pc)\n-\t(if_then_else (match_operator 1 \"gtuleu_operator\"\n-\t\t\t[(cc0) (const_int 0)])\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  [(set (cc0)\n-\t(and:HI (match_dup 0)\n-\t\t(const_int -256)))\n-   (set (pc)\n-\t(if_then_else (match_dup 4)\n-\t\t      (label_ref (match_dup 2))\n-\t\t      (pc)))]\n-  \"operands[4] = ((GET_CODE (operands[1]) == GTU) ?\n-\t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n-\t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\")\n-\n ;; Transform A <= 65535 to (A & 0xffff0000) == 0.\n \n (define_peephole2"}]}