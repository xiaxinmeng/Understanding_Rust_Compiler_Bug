{"sha": "36f94c9cb3618361343f5628367042efbfdcfe64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmOTRjOWNiMzYxODM2MTM0M2Y1NjI4MzY3MDQyZWZiZmRjZmU2NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-23T13:48:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-23T13:48:20Z"}, "message": "(FRAME_POINTER_REQUIRED): Not required.\n\n(INITIAL_FRAME_POINTER_OFFSET,FIX_FRAME_POINTER_ADDRESS): Undefine.\n(FUNCTION_PROLOGUE,FUNCTION_EPILOGUE): Honor -fomit-frame-pointer.\n(ELIMINABLE_REGS,CAN_ELIMINATE,INITIAL_ELIMINATION_OFFSET): Defined.\n(PREFERRED_RELOAD_CLASS): Corrected.\n(CONST_COSTS,ADDRESS_COST,REGISTER_MOVE_COST,MEMORY_MOVE_COST):\nSlight adjustments.\n(ASM_APP_ON,ASM_APP_OFF): Corrected.\n\nFrom-SVN: r13965", "tree": {"sha": "4a90f56c5cf71cb0dcc05fa8e70268a90904f0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a90f56c5cf71cb0dcc05fa8e70268a90904f0e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f94c9cb3618361343f5628367042efbfdcfe64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f94c9cb3618361343f5628367042efbfdcfe64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f94c9cb3618361343f5628367042efbfdcfe64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f94c9cb3618361343f5628367042efbfdcfe64/comments", "author": null, "committer": null, "parents": [{"sha": "7bbf567063b8628151545c42c2ada3ce2d6d9a3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bbf567063b8628151545c42c2ada3ce2d6d9a3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bbf567063b8628151545c42c2ada3ce2d6d9a3b"}], "stats": {"total": 112, "additions": 68, "deletions": 44}, "files": [{"sha": "fd2a7c6afa34bd18d864a1cf87381a4b11c6fb24", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 68, "deletions": 44, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f94c9cb3618361343f5628367042efbfdcfe64/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f94c9cb3618361343f5628367042efbfdcfe64/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=36f94c9cb3618361343f5628367042efbfdcfe64", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n@@ -247,7 +247,7 @@ extern char *branch_or_jump ();\n    Zero means the frame pointer need not be set up (and parms\n    may be accessed via the stack pointer) in functions that seem suitable.\n    This is computed in `reload', in reload1.c. */\n-#define FRAME_POINTER_REQUIRED 1\n+#define FRAME_POINTER_REQUIRED 0\n \n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM 14\n@@ -394,11 +394,9 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.\n-   For the 1750A, we force an immediate CONST_DOUBLE value to memory. */\n+   in some cases it is preferable to use a more restrictive class.  */\n \n-#define PREFERRED_RELOAD_CLASS(X,CLASS)  \\\n-\t\t(GET_CODE(X) == CONST_DOUBLE ? NO_REGS : CLASS)\n+#define PREFERRED_RELOAD_CLASS(X,CLASS)  CLASS\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.\n@@ -567,23 +565,38 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n \n #define FUNCTION_PROLOGUE(FILE, SIZE) {   \\\n-  register int regno, none_used=1;\t\t\t\t\\\n-  extern char call_used_regs[];\t\t\t\t\t\\\n-  fprintf(FILE, \"; regs used in this function: \");\t\t\\\n-  for (regno = 0; regno < 15; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno]) {\t\t\t\t\\\n-\tfprintf(FILE,\" %s\",reg_names[regno]);\t\t\t\\\n-\tnone_used = 0;\t\t\t\t\t\t\\\n+  if (flag_verbose_asm)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      int regno, regs_used = 0;\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t; registers used: \");\t\t\t\\\n+      for (regno = 0; regno < 14; regno++)\t\t\t\\\n+\tif (regs_ever_live[regno])\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    fprintf (FILE, \" %s\", reg_names[regno]);\t\t\\\n+\t    regs_used++;\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+      if (regs_used == 0)\t\t\t\t\t\\\n+\tfprintf (FILE, \"(none)\");\t\t\t \t\\\n     }\t\t\t\t\t\t\t\t\\\n-  if (none_used)\t\t\t\t\t\t\\\n-    fprintf(FILE,\" (none)\");\t\t\t\t \t\\\n-  fprintf(FILE,\"\\n\");\t\t\t\t\t \t\\\n   if (SIZE > 0)\t\t\t\t\t\t\t\\\n-    fprintf(FILE,\"\\t%s\\tr15,%d  ; reserve local-variable space\\n\",\\\n-\t\t\t (SIZE <= 16 ? \"sisp\" : \"sim\"),SIZE);\t\\\n-  fprintf(FILE,\"\\tpshm\\tr14,r14 ; push old frame\\n\");\t\t\\\n-  fprintf(FILE,\"\\tlr\\tr14,r15 ; set new frame\\n\");\t\t\\\n-  program_counter = 0; jmplbl_ndx = -1;\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\n\\t%s\\tr15,%d\",\t\t\t\t\\\n+\t       (SIZE <= 16 ? \"sisp\" : \"sim\"), SIZE);\t\t\\\n+      if (flag_verbose_asm)\t\t\t\t\t\\\n+\tfprintf (FILE, \"  ; reserve local-variable space\");\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (frame_pointer_needed)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf(FILE, \"\\n\\tpshm\\tr14,r14\");\t\t\t\\\n+      if (flag_verbose_asm)\t\t\t\t\t\\\n+\tfprintf (FILE, \"  ; push old frame\");\t\t\t\\\n+      fprintf (FILE, \"\\n\\tlr\\tr14,r15\");\t\t\t\\\n+      if (flag_verbose_asm)\t\t\t\t\t\\\n+\tfprintf (FILE, \"  ; set new frame\");\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\n\");\t\t\t\t\t \t\\\n+  program_counter = 0;\t\t\t\t\t\t\\\n+  jmplbl_ndx = -1;\t\t\t\t\t\t\\\n }\n \n /************* 1750: PROFILER HANDLING NOT YET DONE !!!!!!! *************/\n@@ -621,39 +634,51 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    before returning. */\n \n #define FUNCTION_EPILOGUE(FILE, SIZE) {\t\t\t\\\n-  fprintf(FILE,\"\\tlr\\tr15,r14 ; set stack ptr to frame ptr\\n\");\t\\\n-  fprintf(FILE,\"\\tpopm\\tr14,r14 ; restore previous frame ptr\\n\");\t\\\n+  if (frame_pointer_needed)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tlr\\tr15,r14\");\t\t\t\t\\\n+      if (flag_verbose_asm)\t\t\t\t\t\\\n+        fprintf (FILE, \"  ; set stack ptr to frame ptr\");\t\\\n+      fprintf (FILE, \"\\n\\tpopm\\tr14,r14\");\t\t\t\\\n+      if (flag_verbose_asm)\t\t\t\t\t\\\n+        fprintf (FILE, \"  ; restore previous frame ptr\");\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   if (SIZE > 0)\t\t\t\t\t\t\t\\\n-    fprintf(FILE,\"\\t%s\\tr15,%d ; free up local-var space\\n\",\t\\\n-\t\t\t (SIZE <= 16 ? \"aisp\" : \"aim\"),SIZE);\t\\\n-  fprintf(FILE,\"\\turs\\tr15\\n\"); }\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t%s\\tr15,%d\",\t\t\t\t\\\n+\t       (SIZE <= 16 ? \"aisp\" : \"aim\"), SIZE);\t\t\\\n+      if (flag_verbose_asm)\t\t\t\t\t\\\n+\tfprintf (FILE, \"  ; free up local-var space\");\t\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\turs\\tr15\\n\\n\");\t\t\t\t\\\n+}\n \n /* If the memory address ADDR is relative to the frame pointer,\n    correct it to be relative to the stack pointer instead.\n    This is for when we don't use a frame pointer.\n-   ADDR should be a variable name. */\n+   ADDR should be a variable name.\n \n-#define FIX_FRAME_POINTER_ADDRESS(ADDR,DEPTH)  \\\n-   fprintf(stderr,\"FIX_FRAME_POINTER_ADDRESS called, depth=%d\\n\"), \\\n-           DEPTH), abort()\n+   #define FIX_FRAME_POINTER_ADDRESS(ADDR,DEPTH)  \n+*/\n \n /* Store in the variable DEPTH the initial difference between the\n    frame pointer reg contents and the stack pointer reg contents,\n    as of the start of the function body.  This depends on the layout\n    of the fixed parts of the stack frame and on how registers are saved.\n-*/\n #define INITIAL_FRAME_POINTER_OFFSET(DEPTH) DEPTH = 0\n+*/\n \n-/* 1750: not needed 'cause we have INITIAL_FRAME_POINTER_OFFSET.\n-   #define ELIMINABLE_REGS { \\\n+#define ELIMINABLE_REGS { \\\n \t{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM },  \\\n \t{ ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM },  \\\n \t{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM } }\n \n-   #define CAN_ELIMINATE(FROM, TO)   1\n+#define CAN_ELIMINATE(FROM, TO)   1\n \n-   #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) { OFFSET = 0; }\n-*/\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)   \\\n+\tOFFSET = (TO == STACK_POINTER_REGNUM) ? -1 : 0\n \n \n /* Output assembler code for a block containing the constant parts\n@@ -869,23 +894,22 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    whose rtx-code is CODE.  The body of this macro is a portion\n    of a switch statement.  If the code is computed here,\n    return it with a return statement.  Otherwise, break from the switch.  */\n-/* 1750 note: haven't paid attention to this yet. */\n \n-#define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n+#define CONST_COSTS(RTX,CODE,OUTER_CODE)  \\\n   case CONST_INT:\t\t\t\t\t\t\\\n     return (INTVAL(RTX) >= -16 && INTVAL(RTX) <= 16) ? 1 : 3;\t\\\n   case CONST:\t\t\t\t\t\t\t\\\n   case LABEL_REF:\t\t\t\t\t\t\\\n   case SYMBOL_REF:\t\t\t\t\t\t\\\n-    return 5;\t\t\t\t\t\t\t\\\n+    return 3;\t\t\t\t\t\t\t\\\n   case CONST_DOUBLE:\t\t\t\t\t\t\\\n-    return 7;\n+    return 4;\n \n-#define ADDRESS_COST(ADDRESS)  (memop_valid(ADDRESS) ?  3 : 1000)\n+#define ADDRESS_COST(ADDRESS)  (memop_valid (ADDRESS) ?  3 : 10)\n \n #define REGISTER_MOVE_COST(FROM,TO)\t2\n \n-#define MEMORY_MOVE_COST(M)\t\t5\n+#define MEMORY_MOVE_COST(M)\t\t4\n \n /* Tell final.c how to eliminate redundant test instructions.  */\n \n@@ -961,12 +985,12 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n \n-#define ASM_APP_ON \"\\n\\tif 0\\n; by ASM_APP_ON\\n\"\n+#define ASM_APP_ON \"; ASM_APP_ON\\n\"\n \n /* Output to assembler file text saying following lines\n    no longer contain unusual constructs.  */\n \n-#define ASM_APP_OFF \"\\n\\tendif\\n\"\n+#define ASM_APP_OFF \"; ASM_APP_OFF\\n\"\n \n \n #define EXTRA_SECTIONS  in_readonly_data"}]}