{"sha": "cceb18855ea7d7f2e897858656481174b6da5e93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlYjE4ODU1ZWE3ZDdmMmU4OTc4NTg2NTY0ODExNzRiNmRhNWU5Mw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-12-17T20:45:46Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-12-17T20:45:46Z"}, "message": "tree-inline.c (copy_body_r): Use explicit cast when converting from void *.\n\n        * tree-inline.c (copy_body_r): Use explicit cast when\n          converting\n        from void *.\n        (copy_bb): Likewise.\n        (copy_edges_for_bb): Likewise.\n        (remap_decl_1): Likewise.\n        (estimate_num_insns_1): Likewise.\n        * cgraph.c (hash_node): Use explicit cast when converting from\n        void *.\n        (eq_node): Likewise.\n        (cgraph_create_node): Use GGC_CNEW.\n        (cgraph_create_edge): Use GGC_NEW.\n        (cgraph_remove_node): Use explicit cast when converting from\n          void *.\n        (hash_varpool_node): Likewise.\n        (eq_varpool_node): Likewise.\n        (cgraph_varpool_node): Use GGC_CNEW.\n        * lambda.h (lambda_vector_new): Use GGC_CNEWVEC.\n        * tree-scalar-evolution.c (new_scev_info_str): Use XNEW.\n        (eq_scev_info): Use explicit cast when converting from void *.\n        (find_var_scev_info): Likewise.\n        (set_instantiated_value): Likewise.\n        (gather_stats_on_scev_database_1): Likewise.\n        * cfgloop.h (simple_loop_desc): Use explicit cast when\n          converting\n        from void *.\n        * c-pch.c (c_common_write_pch): Use XNEWVEC.\n        (c_common_read_pch): Likewise.\n        * prefix.c (save_string): Use XNEWVEC.\n        (translate_name): Use explicit cast when converting from void\n          *.\n        * c-ppoutput.c (print_line): Use explicit cast when converting\n        from void *.\n        (pp_dir_change): Likewise.\n        * c-cppbuiltin.c (builtin_define_std): Likewise.\n        (builtin_define_with_value): Likewise.\n        (builtin_define_with_value_n): Likewise.\n        (builtin_define_with_int_value): Likewise.\n        (builtin_define_type_max): Likewise.\n        * c-incpath.c (add_env_var_paths): Use XNEWVEC.\n        (add_path): Use XNEW.\n        * c-format.c (check_format_info_main): Use GGC_NEW.\n        (format_type_warning): Use explicit cast when converting from\n          void *.\n        * c-typeck.c (alloc_tagged_tu_seen_cache): Use XNEW instead of\n        xmalloc. \n        (start_init): Likewise.\n        * tree-flow-inline.h (first_referenced_var): Use explicit cast\n        when converting from void *.\n        (next_referenced_var): Likewise.\n        * c-pragma.c (push_alignment): Use GGC_NEW instead of\n          ggc_alloc.\n        * gensupport.c (lookup_predicate): Use explicit cast to\n          convert\n        from void *.\n        (init_predicate_table): Use XCNEW instead of xcalloc.\n        * genpreds.c (process_define_predicate): Likewise.\n\nFrom-SVN: r108723", "tree": {"sha": "50983d29e1f2d95d1c133d691fc5d44215ddacbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50983d29e1f2d95d1c133d691fc5d44215ddacbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cceb18855ea7d7f2e897858656481174b6da5e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cceb18855ea7d7f2e897858656481174b6da5e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cceb18855ea7d7f2e897858656481174b6da5e93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cceb18855ea7d7f2e897858656481174b6da5e93/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef98c52a44394a1f9e9d91662cace6294e0ba2db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef98c52a44394a1f9e9d91662cace6294e0ba2db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef98c52a44394a1f9e9d91662cace6294e0ba2db"}], "stats": {"total": 159, "additions": 110, "deletions": 49}, "files": [{"sha": "e023f528832019f86529b8441c8f54eb7ea84a2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -1,3 +1,56 @@\n+2005-12-17  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* tree-inline.c (copy_body_r): Use explicit cast when converting\n+\tfrom void *.\n+\t(copy_bb): Likewise.\n+\t(copy_edges_for_bb): Likewise.\n+\t(remap_decl_1): Likewise.\n+\t(estimate_num_insns_1): Likewise.\n+\t* cgraph.c (hash_node): Use explicit cast when converting from\n+\tvoid *.\n+\t(eq_node): Likewise.\n+\t(cgraph_create_node): Use GGC_CNEW.\n+\t(cgraph_create_edge): Use GGC_NEW.\n+\t(cgraph_remove_node): Use explicit cast when converting from void *.\n+\t(hash_varpool_node): Likewise.\n+\t(eq_varpool_node): Likewise.\n+\t(cgraph_varpool_node): Use GGC_CNEW.\n+\t* lambda.h (lambda_vector_new): Use GGC_CNEWVEC.\n+\t* tree-scalar-evolution.c (new_scev_info_str): Use XNEW.\n+\t(eq_scev_info): Use explicit cast when converting from void *.\n+\t(find_var_scev_info): Likewise.\n+\t(set_instantiated_value): Likewise.\n+\t(gather_stats_on_scev_database_1): Likewise.\n+\t* cfgloop.h (simple_loop_desc): Use explicit cast when converting\n+\tfrom void *.\n+\t* c-pch.c (c_common_write_pch): Use XNEWVEC.\n+\t(c_common_read_pch): Likewise.\n+\t* prefix.c (save_string): Use XNEWVEC.\n+\t(translate_name): Use explicit cast when converting from void *.\n+\t* c-ppoutput.c (print_line): Use explicit cast when converting\n+\tfrom void *.\n+\t(pp_dir_change): Likewise.\n+\t* c-cppbuiltin.c (builtin_define_std): Likewise.\n+\t(builtin_define_with_value): Likewise.\n+\t(builtin_define_with_value_n): Likewise.\n+\t(builtin_define_with_int_value): Likewise.\n+\t(builtin_define_type_max): Likewise.\n+\t* c-incpath.c (add_env_var_paths): Use XNEWVEC.\n+\t(add_path): Use XNEW.\n+\t* c-format.c (check_format_info_main): Use GGC_NEW.\n+\t(format_type_warning): Use explicit cast when converting from void *.\n+\t* c-typeck.c (alloc_tagged_tu_seen_cache): Use XNEW instead of\n+\txmalloc. \n+\t(start_init): Likewise.\n+\t* tree-flow-inline.h (first_referenced_var): Use explicit cast\n+\twhen converting from void *.\n+\t(next_referenced_var): Likewise.\n+\t* c-pragma.c (push_alignment): Use GGC_NEW instead of ggc_alloc.\n+\t* gensupport.c (lookup_predicate): Use explicit cast to convert\n+\tfrom void *.\n+\t(init_predicate_table): Use XCNEW instead of xcalloc.\n+\t* genpreds.c (process_define_predicate): Likewise.\n+\n 2005-12-17  Danny Berlin <dberlin@dberlin.org>\n \t    Kenneth Zadeck <zadeck@naturalbridge.com>\n "}, {"sha": "e9f60f63bf3a775f7c9f31c07a854eaf200f9517", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -577,7 +577,7 @@ void\n builtin_define_std (const char *macro)\n {\n   size_t len = strlen (macro);\n-  char *buff = alloca (len + 5);\n+  char *buff = (char *) alloca (len + 5);\n   char *p = buff + 2;\n   char *q = p + len;\n \n@@ -623,7 +623,7 @@ builtin_define_with_value (const char *macro, const char *expansion, int is_str)\n   if (is_str)\n     extra += 2;  /* space for two quote marks */\n \n-  buf = alloca (mlen + elen + extra);\n+  buf = (char *) alloca (mlen + elen + extra);\n   if (is_str)\n     sprintf (buf, \"%s=\\\"%s\\\"\", macro, expansion);\n   else\n@@ -641,7 +641,7 @@ builtin_define_with_value_n (const char *macro, const char *expansion, size_t el\n   size_t mlen = strlen (macro);\n \n   /* Space for an = and a NUL.  */\n-  buf = alloca (mlen + elen + 2);\n+  buf = (char *) alloca (mlen + elen + 2);\n   memcpy (buf, macro, mlen);\n   buf[mlen] = '=';\n   memcpy (buf + mlen + 1, expansion, elen);\n@@ -659,7 +659,7 @@ builtin_define_with_int_value (const char *macro, HOST_WIDE_INT value)\n   size_t vlen = 18;\n   size_t extra = 2; /* space for = and NUL.  */\n \n-  buf = alloca (mlen + vlen + extra);\n+  buf = (char *) alloca (mlen + vlen + extra);\n   memcpy (buf, macro, mlen);\n   buf[mlen] = '=';\n   sprintf (buf + mlen + 1, HOST_WIDE_INT_PRINT_DEC, value);\n@@ -736,7 +736,8 @@ builtin_define_type_max (const char *macro, tree type, int is_long)\n   value = values[idx + TYPE_UNSIGNED (type)];\n   suffix = suffixes[is_long * 2 + TYPE_UNSIGNED (type)];\n \n-  buf = alloca (strlen (macro) + 1 + strlen (value) + strlen (suffix) + 1);\n+  buf = (char *) alloca (strlen (macro) + 1 + strlen (value)\n+                         + strlen (suffix) + 1);\n   sprintf (buf, \"%s=%s%s\", macro, value, suffix);\n \n   cpp_define (parse_in, buf);"}, {"sha": "7a797ba3c61322b444de08a82afd1c9dde43a9a8", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -2077,7 +2077,7 @@ check_format_info_main (format_check_results *res,\n \t      fci = fci->chain;\n \t      if (fci)\n \t\t{\n-\t\t  wanted_type_ptr = ggc_alloc (sizeof (main_wanted_type));\n+\t\t  wanted_type_ptr = GGC_NEW (format_wanted_type);\n \t\t  arg_num++;\n \t\t  wanted_type = *fci->types[length_chars_val].type;\n \t\t  wanted_type_name = fci->types[length_chars_val].name;\n@@ -2286,7 +2286,7 @@ format_type_warning (const char *descr, const char *format_start,\n      this is adequate, but formats taking pointers to functions or\n      arrays would require the full type to be built up in order to\n      print it with %T.  */\n-  p = alloca (pointer_count + 2);\n+  p = (char *) alloca (pointer_count + 2);\n   if (pointer_count == 0)\n     p[0] = 0;\n   else if (c_dialect_cxx ())"}, {"sha": "38611068a79e613b94424666837fc892bf85429f", "filename": "gcc/c-incpath.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-incpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-incpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -109,7 +109,7 @@ add_env_var_paths (const char *env_var, int chain)\n \tpath = xstrdup (\".\");\n       else\n \t{\n-\t  path = xmalloc (q - p + 1);\n+\t  path = XNEWVEC (char, q - p + 1);\n \t  memcpy (path, p, q - p);\n \t  path[q - p] = '\\0';\n \t}\n@@ -340,7 +340,7 @@ add_path (char *path, int chain, int cxx_aware, bool user_supplied_p)\n     if (*c == '\\\\') *c = '/';\n #endif\n \n-  p = xmalloc (sizeof (cpp_dir));\n+  p = XNEW (cpp_dir);\n   p->next = NULL;\n   p->name = path;\n   if (chain == SYSTEM || chain == AFTER)"}, {"sha": "1bbcab1193c89b20b53d21008955a7657ddc4a35", "filename": "gcc/c-pch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -187,7 +187,7 @@ c_common_write_pch (void)\n   if (fwrite (&h, sizeof (h), 1, pch_outfile) != 1)\n     fatal_error (\"can%'t write %s: %m\", pch_file);\n   \n-  buf = xmalloc (16384);\n+  buf = XNEWVEC (char, 16384);\n \n   if (fseek (asm_out_file, asm_file_startpos, SEEK_SET) != 0)\n     fatal_error (\"can%'t seek in %s: %m\", asm_file_name);\n@@ -385,7 +385,7 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n   if (!flag_preprocess_only)\n     {\n       unsigned long written;\n-      char * buf = xmalloc (16384);\n+      char * buf = XNEWVEC (char, 16384);\n \n       for (written = 0; written < h.asm_size; )\n \t{"}, {"sha": "52187a726abcefedfb8c01752e2b7f646e3e5fb7", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -246,7 +246,8 @@ print_line (source_location src_loc, const char *special_flags)\n       const struct line_map *map = linemap_lookup (&line_table, src_loc);\n \n       size_t to_file_len = strlen (map->to_file);\n-      unsigned char *to_file_quoted = alloca (to_file_len * 4 + 1);\n+      unsigned char *to_file_quoted =\n+         (unsigned char *) alloca (to_file_len * 4 + 1);\n       unsigned char *p;\n \n       print.src_line = SOURCE_LINE (map, src_loc);\n@@ -368,7 +369,8 @@ void\n pp_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n {\n   size_t to_file_len = strlen (dir);\n-  unsigned char *to_file_quoted = alloca (to_file_len * 4 + 1);\n+  unsigned char *to_file_quoted =\n+     (unsigned char *) alloca (to_file_len * 4 + 1);\n   unsigned char *p;\n \n   /* cpp_quote_string does not nul-terminate, so we have to do it ourselves.  */"}, {"sha": "18eafcd96ad960015ea91971b3b17ef25b369924", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -74,7 +74,7 @@ push_alignment (int alignment, tree id)\n {\n   align_stack * entry;\n \n-  entry = ggc_alloc (sizeof (* entry));\n+  entry = GGC_NEW (align_stack);\n \n   entry->alignment  = alignment;\n   entry->id         = id;"}, {"sha": "81fc40b3945305be46700443b0575d4af4f787b0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -934,7 +934,7 @@ same_translation_unit_p (tree t1, tree t2)\n static struct tagged_tu_seen_cache *\n alloc_tagged_tu_seen_cache (tree t1, tree t2)\n {\n-  struct tagged_tu_seen_cache *tu = xmalloc (sizeof (struct tagged_tu_seen_cache));\n+  struct tagged_tu_seen_cache *tu = XNEW (struct tagged_tu_seen_cache);\n   tu->next = tagged_tu_seen_base;\n   tu->t1 = t1;\n   tu->t2 = t2;\n@@ -4882,7 +4882,7 @@ void\n start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level)\n {\n   const char *locus;\n-  struct initializer_stack *p = xmalloc (sizeof (struct initializer_stack));\n+  struct initializer_stack *p = XNEW (struct initializer_stack);\n \n   p->decl = constructor_decl;\n   p->require_constant_value = require_constant_value;"}, {"sha": "b9c0dbc5b0dedbc03cdf8c36e0845c1cf881e5ce", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -417,7 +417,7 @@ extern void free_simple_loop_desc (struct loop *loop);\n static inline struct niter_desc *\n simple_loop_desc (struct loop *loop)\n {\n-  return loop->aux;\n+  return (struct niter_desc *) loop->aux;\n }\n \n /* The properties of the target.  */"}, {"sha": "ab45f04c7cc40c61f8e74e32b3471d4d3bd010df", "filename": "gcc/cgraph.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -146,7 +146,7 @@ static int eq_node (const void *, const void *);\n static hashval_t\n hash_node (const void *p)\n {\n-  const struct cgraph_node *n = p;\n+  const struct cgraph_node *n = (const struct cgraph_node *) p;\n   return (hashval_t) DECL_UID (n->decl);\n }\n \n@@ -155,7 +155,8 @@ hash_node (const void *p)\n static int\n eq_node (const void *p1, const void *p2)\n {\n-  const struct cgraph_node *n1 = p1, *n2 = p2;\n+  const struct cgraph_node *n1 = (const struct cgraph_node *) p1;\n+  const struct cgraph_node *n2 = (const struct cgraph_node *) p2;\n   return DECL_UID (n1->decl) == DECL_UID (n2->decl);\n }\n \n@@ -165,7 +166,7 @@ cgraph_create_node (void)\n {\n   struct cgraph_node *node;\n \n-  node = ggc_alloc_cleared (sizeof (*node));\n+  node = GGC_CNEW (struct cgraph_node);\n   node->next = cgraph_nodes;\n   node->uid = cgraph_max_uid++;\n   if (cgraph_nodes)\n@@ -286,7 +287,7 @@ struct cgraph_edge *\n cgraph_create_edge (struct cgraph_node *caller, struct cgraph_node *callee,\n \t\t    tree call_stmt, gcov_type count, int nest)\n {\n-  struct cgraph_edge *edge = ggc_alloc (sizeof (struct cgraph_edge));\n+  struct cgraph_edge *edge = GGC_NEW (struct cgraph_edge);\n #ifdef ENABLE_CHECKING\n   struct cgraph_edge *e;\n \n@@ -472,7 +473,7 @@ cgraph_remove_node (struct cgraph_node *node)\n      */\n   if (!kill_body && *slot)\n     {\n-      struct cgraph_node *n = *slot;\n+      struct cgraph_node *n = (struct cgraph_node *) *slot;\n       if (!n->next_clone && !n->global.inlined_to\n \t  && (cgraph_global_info_ready\n \t      && (TREE_ASM_WRITTEN (n->decl) || DECL_EXTERNAL (n->decl))))\n@@ -697,7 +698,7 @@ dump_varpool (FILE *f)\n static hashval_t\n hash_varpool_node (const void *p)\n {\n-  const struct cgraph_varpool_node *n = p;\n+  const struct cgraph_varpool_node *n = (const struct cgraph_varpool_node *) p;\n   return (hashval_t) DECL_UID (n->decl);\n }\n \n@@ -706,7 +707,10 @@ hash_varpool_node (const void *p)\n static int\n eq_varpool_node (const void *p1, const void *p2)\n {\n-  const struct cgraph_varpool_node *n1 = p1, *n2 = p2;\n+  const struct cgraph_varpool_node *n1 =\n+    (const struct cgraph_varpool_node *) p1;\n+  const struct cgraph_varpool_node *n2 =\n+    (const struct cgraph_varpool_node *) p2;\n   return DECL_UID (n1->decl) == DECL_UID (n2->decl);\n }\n \n@@ -726,7 +730,7 @@ cgraph_varpool_node (tree decl)\n     htab_find_slot (cgraph_varpool_hash, &key, INSERT);\n   if (*slot)\n     return *slot;\n-  node = ggc_alloc_cleared (sizeof (*node));\n+  node = GGC_CNEW (struct cgraph_varpool_node);\n   node->decl = decl;\n   node->next = cgraph_varpool_nodes;\n   cgraph_varpool_nodes = node;"}, {"sha": "dd044f771e4b6e7f1a3450257845a7507fc55d32", "filename": "gcc/genpreds.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -43,7 +43,7 @@ process_define_predicate (rtx defn)\n       return;\n     }\n \n-  pred = xcalloc (sizeof (struct pred_data), 1);\n+  pred = XCNEW (struct pred_data);\n   pred->name    = XSTR (defn, 0);\n   pred->exp     = XEXP (defn, 1);\n   pred->c_block = XSTR (defn, 2);"}, {"sha": "644b3b920a3da167fbe98dd8c09a7666be3b6b57", "filename": "gcc/gensupport.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -1200,7 +1200,7 @@ lookup_predicate (const char *name)\n {\n   struct pred_data key;\n   key.name = name;\n-  return htab_find (predicate_table, &key);\n+  return (struct pred_data *) htab_find (predicate_table, &key);\n }\n \n void\n@@ -1268,7 +1268,7 @@ init_predicate_table (void)\n \n   for (i = 0; i < NUM_KNOWN_STD_PREDS; i++)\n     {\n-      pred = xcalloc (sizeof (struct pred_data), 1);\n+      pred = XCNEW (struct pred_data);\n       pred->name = std_preds[i].name;\n       pred->special = std_preds[i].special;\n "}, {"sha": "817f084351a528cfc8703a76590fdbe1cc29009f", "filename": "gcc/lambda.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Flambda.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Flambda.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda.h?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -226,7 +226,7 @@ static inline void print_lambda_vector (FILE *, lambda_vector, int);\n static inline lambda_vector\n lambda_vector_new (int size)\n {\n-  return ggc_alloc_cleared (size * sizeof(int));\n+  return GGC_CNEWVEC (int, size);\n }\n \n "}, {"sha": "7b92ce5c7db9d4dc956f41521ff85bcbd6d739b3", "filename": "gcc/prefix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -115,7 +115,7 @@ get_key_value (char *key)\n static char *\n save_string (const char *s, int len)\n {\n-  char *result = xmalloc (len + 1);\n+  char *result = XNEWVEC (char, len + 1);\n \n   memcpy (result, s, len);\n   result[len] = 0;\n@@ -201,7 +201,7 @@ translate_name (char *name)\n \t   keylen++)\n \t;\n \n-      key = alloca (keylen + 1);\n+      key = (char *) alloca (keylen + 1);\n       strncpy (key, &name[1], keylen);\n       key[keylen] = 0;\n "}, {"sha": "27ce86d7d6e0491b852a6cf82d1e417c242b1d0a", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -78,7 +78,8 @@ static inline tree\n first_referenced_var (referenced_var_iterator *iter)\n {\n   struct int_tree_map *itm;\n-  itm = first_htab_element (&iter->hti, referenced_vars);\n+  itm = (struct int_tree_map *) first_htab_element (&iter->hti,\n+                                                    referenced_vars);\n   if (!itm) \n     return NULL;\n   return itm->to;\n@@ -100,7 +101,7 @@ static inline tree\n next_referenced_var (referenced_var_iterator *iter)\n {\n   struct int_tree_map *itm;\n-  itm = next_htab_element (&iter->hti);\n+  itm = (struct int_tree_map *) next_htab_element (&iter->hti);\n   if (!itm) \n     return NULL;\n   return itm->to;"}, {"sha": "d3265253b20e1485c92eda3bfb6fd8c277616718", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -544,7 +544,7 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n       else /* Else the RETURN_EXPR returns no value.  */\n \t{\n \t  *tp = NULL;\n-\t  return (void *)1;\n+\t  return (tree) (void *)1;\n \t}\n     }\n \n@@ -724,7 +724,8 @@ copy_bb (inline_data *id, basic_block bb, int frequency_scale, int count_scale)\n \n   /* create_basic_block() will append every new block to\n      basic_block_info automatically.  */\n-  copy_basic_block = create_basic_block (NULL, (void *) 0, bb->prev_bb->aux);\n+  copy_basic_block = create_basic_block (NULL, (void *) 0,\n+                                         (basic_block) bb->prev_bb->aux);\n   copy_basic_block->count = bb->count * count_scale / REG_BR_PROB_BASE;\n   copy_basic_block->frequency = (bb->frequency\n \t\t\t\t     * frequency_scale / REG_BR_PROB_BASE);\n@@ -827,7 +828,7 @@ copy_bb (inline_data *id, basic_block bb, int frequency_scale, int count_scale)\n static void\n copy_edges_for_bb (basic_block bb, int count_scale)\n {\n-  basic_block new_bb = bb->aux;\n+  basic_block new_bb = (basic_block) bb->aux;\n   edge_iterator ei;\n   edge old_edge;\n   block_stmt_iterator bsi;\n@@ -846,7 +847,7 @@ copy_edges_for_bb (basic_block bb, int count_scale)\n \tif (old_edge->dest->index == EXIT_BLOCK && !old_edge->flags\n \t    && old_edge->dest->aux != EXIT_BLOCK_PTR)\n \t  flags |= EDGE_FALLTHRU;\n-\tnew = make_edge (new_bb, old_edge->dest->aux, flags);\n+\tnew = make_edge (new_bb, (basic_block) old_edge->dest->aux, flags);\n \tnew->count = old_edge->count * count_scale / REG_BR_PROB_BASE;\n \tnew->probability = old_edge->probability;\n       }\n@@ -895,7 +896,7 @@ copy_edges_for_bb (basic_block bb, int count_scale)\n static tree\n remap_decl_1 (tree decl, void *data)\n {\n-  return remap_decl (decl, data);\n+  return remap_decl (decl, (inline_data *) data);\n }\n \n /* Make a copy of the body of FN so that it can be inserted inline in\n@@ -1614,7 +1615,7 @@ estimate_move_cost (tree type)\n static tree\n estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n {\n-  int *count = data;\n+  int *count = (int *) data;\n   tree x = *tp;\n \n   if (IS_TYPE_OR_DECL_P (x))"}, {"sha": "116773b9f997ae437b0618199e81bf0badf28f1f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cceb18855ea7d7f2e897858656481174b6da5e93/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=cceb18855ea7d7f2e897858656481174b6da5e93", "patch": "@@ -296,7 +296,7 @@ new_scev_info_str (tree var)\n {\n   struct scev_info_str *res;\n   \n-  res = xmalloc (sizeof (struct scev_info_str));\n+  res = XNEW (struct scev_info_str);\n   res->var = var;\n   res->chrec = chrec_not_analyzed_yet;\n   \n@@ -316,8 +316,8 @@ hash_scev_info (const void *elt)\n static int\n eq_scev_info (const void *e1, const void *e2)\n {\n-  const struct scev_info_str *elt1 = e1;\n-  const struct scev_info_str *elt2 = e2;\n+  const struct scev_info_str *elt1 = (const struct scev_info_str *) e1;\n+  const struct scev_info_str *elt2 = (const struct scev_info_str *) e2;\n \n   return elt1->var == elt2->var;\n }\n@@ -346,7 +346,7 @@ find_var_scev_info (tree var)\n \n   if (!*slot)\n     *slot = new_scev_info_str (var);\n-  res = *slot;\n+  res = (struct scev_info_str *) *slot;\n \n   return &res->chrec;\n }\n@@ -1886,10 +1886,9 @@ set_instantiated_value (htab_t cache, tree version, tree val)\n   pattern.var = version;\n   slot = htab_find_slot (cache, &pattern, INSERT);\n \n-  if (*slot)\n-    info = *slot;\n-  else\n-    info = *slot = new_scev_info_str (version);\n+  if (!*slot)\n+    *slot = new_scev_info_str (version);\n+  info = (struct scev_info_str *) *slot;\n   info->chrec = val;\n }\n \n@@ -2479,9 +2478,9 @@ analyze_scalar_evolution_for_all_loop_phi_nodes (VEC(tree,heap) **exit_condition\n static int\n gather_stats_on_scev_database_1 (void **slot, void *stats)\n {\n-  struct scev_info_str *entry = *slot;\n+  struct scev_info_str *entry = (struct scev_info_str *) *slot;\n \n-  gather_chrec_stats (entry->chrec, stats);\n+  gather_chrec_stats (entry->chrec, (struct chrec_stats *) stats);\n \n   return 1;\n }"}]}