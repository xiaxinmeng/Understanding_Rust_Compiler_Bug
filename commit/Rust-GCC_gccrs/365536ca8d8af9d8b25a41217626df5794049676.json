{"sha": "365536ca8d8af9d8b25a41217626df5794049676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY1NTM2Y2E4ZDhhZjlkOGIyNWE0MTIxNzYyNmRmNTc5NDA0OTY3Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-01-12T10:39:25Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-01-12T10:39:25Z"}, "message": "re PR ipa/64550 (IPA fixes cause ICE in tree-ssa.c:939)\n\nFix for PR64550.\n\n        PR ipa/64550\n\t* ipa-icf-gimple.c (func_checker::compare_memory_operand): Compare\n\tvolatility for correct operands.\n\t* gcc.dg/ipa/PR64550.c: New test.\n\nFrom-SVN: r219457", "tree": {"sha": "746342e7bbaadb4d6b4a26a0086bbbc941af331d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/746342e7bbaadb4d6b4a26a0086bbbc941af331d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/365536ca8d8af9d8b25a41217626df5794049676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365536ca8d8af9d8b25a41217626df5794049676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/365536ca8d8af9d8b25a41217626df5794049676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365536ca8d8af9d8b25a41217626df5794049676/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c928ddc69d2f9c9ff2105635a666d82c2e0ee98"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "a2486a9ee747a8d5b6811707f366f95d80d95aa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/365536ca8d8af9d8b25a41217626df5794049676/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/365536ca8d8af9d8b25a41217626df5794049676/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=365536ca8d8af9d8b25a41217626df5794049676", "patch": "@@ -1,3 +1,15 @@\n+2015-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/64550\n+\t* ipa-icf-gimple.c (func_checker::compare_memory_operand): Compare\n+\tvolatility for correct operands.\n+\n+2015-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf.c (sem_function::equals_wpa): Add indirect_calls as indication\n+\tthat a function is not leaf.\n+\t(sem_function::compare_polymorphic_p): Likewise.\n+\n 2015-01-12  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sem_function::equals_wpa): Add indirect_calls as indication"}, {"sha": "ed3cdf56ccb5e4ec46f1f96e25114bab810bcfc0", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/365536ca8d8af9d8b25a41217626df5794049676/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/365536ca8d8af9d8b25a41217626df5794049676/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=365536ca8d8af9d8b25a41217626df5794049676", "patch": "@@ -267,7 +267,7 @@ func_checker::compare_memory_operand (tree t1, tree t2)\n   /* Compare alias sets for memory operands.  */\n   if (source_is_memop && target_is_memop)\n     {\n-      if (TREE_THIS_VOLATILE (b1) != TREE_THIS_VOLATILE (b2))\n+      if (TREE_THIS_VOLATILE (t1) != TREE_THIS_VOLATILE (t2))\n \treturn return_false_with_msg (\"different operand volatility\");\n \n       if (ao_ref_alias_set (&r1) != ao_ref_alias_set (&r2)"}, {"sha": "7e3489baae0bf9e2de790046e5169de4d1c1afdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/365536ca8d8af9d8b25a41217626df5794049676/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/365536ca8d8af9d8b25a41217626df5794049676/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=365536ca8d8af9d8b25a41217626df5794049676", "patch": "@@ -1,3 +1,7 @@\n+2015-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/ipa/PR64550.c: New test.\n+\n 2015-01-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/63470"}, {"sha": "3b439c9568a98dbcf7044e10d5e6b49f3ac6d9c0", "filename": "gcc/testsuite/gcc.dg/ipa/PR64550.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/365536ca8d8af9d8b25a41217626df5794049676/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2FPR64550.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/365536ca8d8af9d8b25a41217626df5794049676/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2FPR64550.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2FPR64550.c?ref=365536ca8d8af9d8b25a41217626df5794049676", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf-details\"  } */\n+\n+struct __hlist_head\n+{\n+  struct __hlist_node *first;\n+};\n+\n+struct __hlist_node\n+{\n+  struct __hlist_node *next, **pprev;\n+};\n+\n+struct __net\n+{\n+  int ifindex;\n+  struct __hlist_head * dev_index_head;\n+};\n+\n+struct __net_device\n+{\n+  int ifindex;\n+  struct __net *nd_net;\n+  struct __hlist_node index_hlist;\n+};\n+\n+__attribute__ ((noinline, noclone))\n+static struct __hlist_head * __dev_index_hash(struct __net *net,\n+    int ifindex)\n+{\n+  return &net->dev_index_head[ifindex & 1];\n+}\n+\n+__attribute__ ((noinline, noclone))\n+struct __net_device * __dev_get_by_index(struct __net *net, int ifindex)\n+{\n+  struct __net_device * dev;\n+  struct __hlist_head * head = __dev_index_hash(net, ifindex);\n+\n+  for (dev = ( { typeof((head)->first) ____ptr = ((head)->first); ____ptr ? ( { const typeof(((typeof(*(dev)) *) 0)->index_hlist) * __mptr = (____ptr); (typeof(*(dev)) *) ((char *)__mptr - __builtin_offsetof(typeof(*(dev)), index_hlist));}): ((void *) 0);});\n+       dev; dev = ( { typeof ((dev)->index_hlist.next) ____ptr = ((dev)->index_hlist.next); ____ptr ? ( { const typeof(((typeof(*(dev)) *) 0)->index_hlist) * __mptr = (____ptr); (typeof(*(dev)) *) ((char *)__mptr - __builtin_offsetof(typeof(*(dev)), index_hlist));}): ((void *) 0);}))\n+    if (dev->ifindex == ifindex)\n+      return dev;\n+\n+  return ((void *)0);\n+}\n+\n+__attribute__ ((noinline, noclone))\n+struct __net_device * dev_get_by_index_rcu(struct __net *net, int ifindex)\n+{\n+  struct __net_device * dev;\n+  struct __hlist_head * head = __dev_index_hash(net, ifindex);\n+\n+  for (dev = ( { typeof(( { typeof (* ((*((struct __hlist_node **)(&(head)->first))))) * _________p1 = (typeof(*((*((struct __hlist_node **)(&(head)->first))))) *) (*(volatile typeof(((*((struct __hlist_node **)(&(head)->first))))) *)&(((*((struct __hlist_node **)(&(head)->first)))))); do { } while (0);; do { } while (0); ((typeof(*((*((struct __hlist_node **)(&(head)->first))))) *) (_________p1));})) ____ptr = (( { typeof (* ((*((struct __hlist_node **)(&(head)->first))))) * _________p1 = (typeof(*((*((struct __hlist_node **)(&(head)->first))))) *) (*(volatile typeof(((*((struct __hlist_node **)(&(head)->first))))) *)&(((*((struct __hlist_node **)(&(head)->first)))))); do { } while (0);; do { } while (0); ((typeof(*((*((struct __hlist_node **)(&(head)->first))))) *) (_________p1));})); ____ptr ? ( { const typeof(((typeof(*(dev)) *) 0)->index_hlist) * __mptr = (____ptr); (typeof(*(dev)) *) ((char *)__mptr - __builtin_offsetof(typeof(*(dev)), index_hlist));}):((void *) 0);});\n+\t  dev; dev = ( { typeof(( { typeof (* ((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) * _________p1 = (typeof(*((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) *) (*(volatile typeof(((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) *)&(((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next)))))); do { } while (0);; do { } while (0); ((typeof(*((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) *) (_________p1));})) ____ptr = (( { typeof (* ((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) * _________p1 = (typeof(*((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) *) (*(volatile typeof(((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) *)&(((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next)))))); do { } while (0);; do { } while (0); ((typeof(*((*((struct __hlist_node **)(&(&(dev)->index_hlist)->next))))) *) (_________p1));})); ____ptr ? ( { const typeof(((typeof(*(dev)) *) 0)->index_hlist) * __mptr = (____ptr); (typeof(*(dev)) *) ((char *)__mptr - __builtin_offsetof(typeof(*(dev)), index_hlist));}): ((void *) 0);}))\n+\t\t    if (dev->ifindex == ifindex)\n+\t\t      return dev;\n+  return ((void *)0);\n+}\n+\n+__attribute__ ((noinline, noclone))\n+int foo(struct __net *net)\n+{\n+  if (!__dev_get_by_index(net, net->ifindex));\n+    return 1;\n+  return 0;\n+}\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"different operand volatility\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 0\" \"icf\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"icf\" } } */"}]}