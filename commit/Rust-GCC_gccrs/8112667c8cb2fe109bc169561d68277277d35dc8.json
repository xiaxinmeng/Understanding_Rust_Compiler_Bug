{"sha": "8112667c8cb2fe109bc169561d68277277d35dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExMjY2N2M4Y2IyZmUxMDliYzE2OTU2MWQ2ODI3NzI3N2QzNWRjOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-09-07T14:12:48Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-09-07T14:12:48Z"}, "message": "PR c++/87152 - range-based for loops with initializer broken in templates.\n\n\t* constexpr.c (potential_constant_expression_1) <case RANGE_FOR_STMT>:\n\tRecur into RANGE_FOR_INIT_STMT.\n\t* cp-tree.def: Add RANGE_FOR_INIT_STMT to RANGE_FOR_STMT.\n\t* cp-tree.h (RANGE_FOR_INIT_STMT): Define.\n\t* dump.c (cp_dump_tree) <case RANGE_FOR_STMT>: Also dump\n\tRANGE_FOR_INIT_STMT.\n\t* pt.c (tsubst_expr) <case RANGE_FOR_STMT>: Recur into\n\tRANGE_FOR_INIT_STMT.\n\t* semantics.c (begin_range_for_stmt): Adjust call to build_stmt.\n\tDo put the init statement in RANGE_FOR_INIT_STMT.\n\t(finish_range_for_decl): Pop it for templates.\n\n\t* g++.dg/cpp2a/range-for11.C: New test.\n\t* g++.dg/cpp2a/range-for12.C: New test.\n\t* g++.dg/cpp2a/range-for13.C: New test.\n\t* g++.dg/cpp2a/range-for14.C: New test.\n\t* g++.dg/cpp2a/range-for15.C: New test.\n\t* g++.dg/cpp2a/range-for16.C: New test.\n\t* g++.dg/cpp2a/range-for17.C: New test.\n\t* g++.dg/cpp2a/range-for18.C: New test.\n\t* g++.dg/parse/error61.C (foo): Adjust dg-error.\n\nFrom-SVN: r264158", "tree": {"sha": "d8b5de955e6ab86691eb6cf20cdd7c9733cf9009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b5de955e6ab86691eb6cf20cdd7c9733cf9009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8112667c8cb2fe109bc169561d68277277d35dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8112667c8cb2fe109bc169561d68277277d35dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8112667c8cb2fe109bc169561d68277277d35dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8112667c8cb2fe109bc169561d68277277d35dc8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bf9284fbfe4f37cdb02c502b211dd28317710a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf9284fbfe4f37cdb02c502b211dd28317710a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf9284fbfe4f37cdb02c502b211dd28317710a6"}], "stats": {"total": 296, "additions": 284, "deletions": 12}, "files": [{"sha": "70c462cad7817a529e0af68a41d6909512ccedc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -1,3 +1,18 @@\n+2018-09-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87152 - range-based for loops with initializer broken in templates.\n+\t* constexpr.c (potential_constant_expression_1) <case RANGE_FOR_STMT>:\n+\tRecur into RANGE_FOR_INIT_STMT.\n+\t* cp-tree.def: Add RANGE_FOR_INIT_STMT to RANGE_FOR_STMT.\n+\t* cp-tree.h (RANGE_FOR_INIT_STMT): Define.\n+\t* dump.c (cp_dump_tree) <case RANGE_FOR_STMT>: Also dump\n+\tRANGE_FOR_INIT_STMT.\n+\t* pt.c (tsubst_expr) <case RANGE_FOR_STMT>: Recur into\n+\tRANGE_FOR_INIT_STMT.\n+\t* semantics.c (begin_range_for_stmt): Adjust call to build_stmt.\n+\tDo put the init statement in RANGE_FOR_INIT_STMT.\n+\t(finish_range_for_decl): Pop it for templates.\n+\n 2018-09-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* decl.c (check_initializer): Call cp_complete_array_type."}, {"sha": "6c2689064f33c347d18748a2344343a0a247d046", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -5767,6 +5767,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       return true;\n \n     case RANGE_FOR_STMT:\n+      if (!RECUR (RANGE_FOR_INIT_STMT (t), any))\n+\treturn false;\n       if (!RECUR (RANGE_FOR_EXPR (t), any))\n \treturn false;\n       if (!RECUR (RANGE_FOR_BODY (t), any))"}, {"sha": "c64225ded6f09de96d86694d4708a542c9372774", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -301,9 +301,10 @@ DEFTREECODE (IF_STMT, \"if_stmt\", tcc_statement, 4)\n DEFTREECODE (FOR_STMT, \"for_stmt\", tcc_statement, 5)\n \n /* Used to represent a range-based `for' statement. The operands are\n-   RANGE_FOR_DECL, RANGE_FOR_EXPR, RANGE_FOR_BODY, and RANGE_FOR_SCOPE,\n-   RANGE_FOR_UNROLL respectively.  Only used in templates.  */\n-DEFTREECODE (RANGE_FOR_STMT, \"range_for_stmt\", tcc_statement, 5)\n+   RANGE_FOR_DECL, RANGE_FOR_EXPR, RANGE_FOR_BODY, RANGE_FOR_SCOPE,\n+   RANGE_FOR_UNROLL, and RANGE_FOR_INIT_STMT, respectively.  Only used in\n+   templates.  */\n+DEFTREECODE (RANGE_FOR_STMT, \"range_for_stmt\", tcc_statement, 6)\n \n /* Used to represent a 'while' statement. The operands are WHILE_COND\n    and WHILE_BODY, respectively.  */"}, {"sha": "b78e9eb252b8bfacea24f1f63bb93c7369a8ea3b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -4923,6 +4923,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define RANGE_FOR_BODY(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 2)\n #define RANGE_FOR_SCOPE(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 3)\n #define RANGE_FOR_UNROLL(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 4)\n+#define RANGE_FOR_INIT_STMT(NODE) TREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 5)\n #define RANGE_FOR_IVDEP(NODE)\tTREE_LANG_FLAG_6 (RANGE_FOR_STMT_CHECK (NODE))\n \n #define SWITCH_STMT_COND(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 0)"}, {"sha": "d9b868bfaef099a3760b37cfdef748b1a99b9cf3", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -301,6 +301,7 @@ cp_dump_tree (void* dump_info, tree t)\n \n     case RANGE_FOR_STMT:\n       dump_stmt (di, t);\n+      dump_child (\"init\", RANGE_FOR_INIT_STMT (t));\n       dump_child (\"decl\", RANGE_FOR_DECL (t));\n       dump_child (\"expr\", RANGE_FOR_EXPR (t));\n       dump_child (\"body\", RANGE_FOR_BODY (t));"}, {"sha": "892a387cbc56e92175553485023e2318e035ac9d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -16815,6 +16815,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n         stmt = (processing_template_decl\n \t\t? begin_range_for_stmt (NULL_TREE, NULL_TREE)\n \t\t: begin_for_stmt (NULL_TREE, NULL_TREE));\n+\tRECUR (RANGE_FOR_INIT_STMT (t));\n         decl = RANGE_FOR_DECL (t);\n         decl = tsubst (decl, args, complain, in_decl);\n         maybe_push_decl (decl);"}, {"sha": "f3e5d83b1ef5d2f35b34b2bc1807a11439d37be9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -1101,31 +1101,32 @@ begin_range_for_stmt (tree scope, tree init)\n {\n   begin_maybe_infinite_loop (boolean_false_node);\n \n-  tree r = build_stmt (input_location, RANGE_FOR_STMT,\n-\t\t       NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE);\n+  tree r = build_stmt (input_location, RANGE_FOR_STMT, NULL_TREE, NULL_TREE,\n+\t\t       NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE);\n \n   if (scope == NULL_TREE)\n     {\n       gcc_assert (!init);\n       scope = begin_for_scope (&init);\n     }\n \n-  /* RANGE_FOR_STMTs do not use nor save the init tree, so we\n-     pop it now.  */\n-  if (init)\n-    pop_stmt_list (init);\n+  /* Since C++20, RANGE_FOR_STMTs can use the init tree, so save it.  */\n+  RANGE_FOR_INIT_STMT (r) = init;\n   RANGE_FOR_SCOPE (r) = scope;\n \n   return r;\n }\n \n /* Finish the head of a range-based for statement, which may\n-   be given by RANGE_FOR_STMT. DECL must be the declaration\n+   be given by RANGE_FOR_STMT.  DECL must be the declaration\n    and EXPR must be the loop expression. */\n \n void\n finish_range_for_decl (tree range_for_stmt, tree decl, tree expr)\n {\n+  if (processing_template_decl)\n+    RANGE_FOR_INIT_STMT (range_for_stmt)\n+      = pop_stmt_list (RANGE_FOR_INIT_STMT (range_for_stmt));\n   RANGE_FOR_DECL (range_for_stmt) = decl;\n   RANGE_FOR_EXPR (range_for_stmt) = expr;\n   add_stmt (range_for_stmt);"}, {"sha": "81a32afa2dbf8d0d2199f954f57080c960edeb6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -1,3 +1,16 @@\n+2018-09-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87152 - range-based for loops with initializer broken in templates.\n+\t* g++.dg/cpp2a/range-for11.C: New test.\n+\t* g++.dg/cpp2a/range-for12.C: New test.\n+\t* g++.dg/cpp2a/range-for13.C: New test.\n+\t* g++.dg/cpp2a/range-for14.C: New test.\n+\t* g++.dg/cpp2a/range-for15.C: New test.\n+\t* g++.dg/cpp2a/range-for16.C: New test.\n+\t* g++.dg/cpp2a/range-for17.C: New test.\n+\t* g++.dg/cpp2a/range-for18.C: New test.\n+\t* g++.dg/parse/error61.C (foo): Adjust dg-error.\n+\n 2018-09-06  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \tPR target/86731"}, {"sha": "5f0a80318ab78065c65b64979e1d5cb6cee308a6", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for11.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for11.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/87152\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+template<typename>\n+int foo ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+  int j = 0;\n+  for (int i = 0; auto x : a)\n+    j += i++;\n+\n+  return j;\n+}\n+\n+int\n+main ()\n+{\n+  int j = foo<int>();\n+  if (j != 10)\n+    __builtin_abort ();\n+}"}, {"sha": "09558341bb92a89683684977f17c89d955d3274d", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for12.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for12.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/87152\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+static const int a[] = { 1, 2, 3, 4, 5 };\n+extern void foo (int);\n+extern void bar (int, int);\n+\n+constexpr int\n+baz ()\n+{\n+  return 6;\n+}\n+\n+template<typename T>\n+void\n+fn1 (T i)\n+{\n+  for ((i += 2); auto x : a)\n+    foo (i);\n+\n+  for (auto j = 0, k = 0; auto x : a)\n+    bar (j + k, x);\n+\n+  for (constexpr int j = baz (); auto x : a)\n+    bar (x, j);\n+}\n+\n+void\n+do_fn1 ()\n+{\n+  fn1<int>(10);\n+}"}, {"sha": "fb1ff28552960af525f726e0ae9db8d8dbd5e7d4", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for13.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for13.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/87152\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+template<typename T>\n+void foo ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (T i = 1; auto x : a)\n+    if (i++ != x)\n+      __builtin_abort ();\n+\n+  T i;\n+  for (i = 1; auto x : a)\n+    if (i++ != x)\n+      __builtin_abort ();\n+\n+  i = 0;\n+  for (i++; auto x : a)\n+    if (i != 1)\n+      __builtin_abort ();\n+\n+  for (T s[] = { 1, 1, 1 }; auto x : s)\n+    if (x != 1)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int>();\n+}"}, {"sha": "94ff3c19153dc9832224a41b28587de6cd074f2f", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for14.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for14.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/87152\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+template<typename T>\n+void\n+fn ()\n+{\n+  T a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (T i = []{ return 3; }(); auto x : a)\n+    if (i != 3)\n+      __builtin_abort ();\n+\n+  for (T i = ({ 3; }); auto x : a)\n+    if (i != 3)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  fn<int>();\n+}"}, {"sha": "532b7689459329baf8906b66abcce57303613015", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for15.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for15.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/87152\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct A { int i; long long j; } a[64];\n+\n+template<typename T>\n+void foo ()\n+{\n+  for (T i = 0; auto &x : a)\n+    {\n+      x.i = i;\n+      x.j = 2 * i++;\n+    }\n+  for (auto & [ x, y ] : a)\n+    {\n+      x += 2;\n+      y += 3;\n+    }\n+  for (T i = 0; const auto [ u, v ] : a)\n+    {\n+      if (u != i + 2 || v != 2 * i++ + 3)\n+        __builtin_abort ();\n+    }\n+  for (T i = 0; auto [ x, y ] : a)\n+    {\n+      x += 4;\n+      y += 5;\n+      if (x != i + 6 || y != 2 * i++ + 8)\n+        __builtin_abort ();\n+    }\n+  for (T i = 0; const auto x : a)\n+    {\n+      if (x.i != i + 2 || x.j != 2 * i++ + 3)\n+        __builtin_abort ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  foo<int>();\n+}"}, {"sha": "cbfd987338756e3584db6a2a7f80ac33284ffc49", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for16.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for16.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/87152\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct A { int i, j; };\n+\n+template<typename T>\n+void foo ()\n+{\n+  A a = { .i = 2, .j = 3 };\n+  T arr[] = { 1, 1, 1 };\n+\n+  for (auto & [ x, y ] = a; auto z : arr)\n+    if (x + z != 3 || y + z != 4)\n+      __builtin_abort ();\n+\n+  for (T d = 1; auto &z : arr)\n+    z += d;\n+\n+  for (const auto [ x, y ] = a; auto z : arr)\n+    if (x + z != 4 || y + z != 5)\n+      __builtin_abort ();\n+\n+  for (T d = 1; auto &z : arr)\n+    z += d;\n+\n+  for (auto [ x, y ] = a; auto z : arr)\n+    if (x + z != 5 || y + z != 6)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int>();\n+}"}, {"sha": "2e8734b795df978448dae7dc64f118bbe66783e0", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for17.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for17.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/87152\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct A { int i; long long j; } a[64];\n+\n+template<typename>\n+void foo ()\n+{\n+  A b = { 1, 2 };\n+  for (auto & [ u, v ] : a)\n+    {\n+      u = 2;\n+      v = 3;\n+    }\n+\n+  for (auto [x, y] = b; auto [ u, v ] : a)\n+    if (y + u != x + v)\n+      __builtin_abort ();\n+\n+  for (auto [x, y] = b; auto & [ u, v ] : a)\n+    if (y + u != x + v)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo<int>();\n+}"}, {"sha": "e38b41cc30d2b9bca10d663ccc5e51f5b61faa4d", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for18.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for18.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/87152\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+template<int> void foo()\n+{\n+  int a[] = { 1, 1, 1 };\n+  for (int i = 0; auto x : a);\n+  int i;\n+}\n+\n+void\n+bar ()\n+{\n+  foo<0>();\n+}"}, {"sha": "272626bd7344eb7bd3adc7338f807aba3e509560", "filename": "gcc/testsuite/g++.dg/parse/error61.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8112667c8cb2fe109bc169561d68277277d35dc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror61.C?ref=8112667c8cb2fe109bc169561d68277277d35dc8", "patch": "@@ -4,8 +4,8 @@\n template<int> void foo()\n {\n   int x[8];\n-  for (int& i, j : x) // { dg-error \"multiple\" }\n-    i = 0; // { dg-error \"local variable\" }\n+  for (int& i, j : x) // { dg-error \"multiple|reference\" }\n+    i = 0;\n }\n \n void bar()"}]}