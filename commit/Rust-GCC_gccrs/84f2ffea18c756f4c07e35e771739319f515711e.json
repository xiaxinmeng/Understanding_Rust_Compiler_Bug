{"sha": "84f2ffea18c756f4c07e35e771739319f515711e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmMmZmZWExOGM3NTZmNGMwN2UzNWU3NzE3MzkzMTlmNTE1NzExZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-07-21T22:57:49Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-07-21T22:57:49Z"}, "message": "Generate signed types whenever possible.\n\n2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (type_for_interval): Generate signed\n\ttypes whenever possible.\n\nFrom-SVN: r176604", "tree": {"sha": "f1d9fd23a26747a21db1850b97aa3885e1eec681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1d9fd23a26747a21db1850b97aa3885e1eec681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84f2ffea18c756f4c07e35e771739319f515711e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f2ffea18c756f4c07e35e771739319f515711e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f2ffea18c756f4c07e35e771739319f515711e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f2ffea18c756f4c07e35e771739319f515711e/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9784cb6fbfa0bc90b75c90c67557a136aace35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9784cb6fbfa0bc90b75c90c67557a136aace35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9784cb6fbfa0bc90b75c90c67557a136aace35"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "ea4db8c36c2cdb493bbbdc51e9038fb35e4eea88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f2ffea18c756f4c07e35e771739319f515711e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f2ffea18c756f4c07e35e771739319f515711e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84f2ffea18c756f4c07e35e771739319f515711e", "patch": "@@ -1,3 +1,8 @@\n+2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (type_for_interval): Generate signed\n+\ttypes whenever possible.\n+\n 2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-clast-to-gimple.c (struct clast_name_index): Add lb"}, {"sha": "9cd27372bb65a3cef727388c6edf0155259fb2a8", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f2ffea18c756f4c07e35e771739319f515711e/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f2ffea18c756f4c07e35e771739319f515711e/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=84f2ffea18c756f4c07e35e771739319f515711e", "patch": "@@ -443,6 +443,7 @@ type_for_interval (mpz_t v1, mpz_t v2)\n   bool unsigned_p;\n   tree type;\n   enum machine_mode mode;\n+  int wider_precision;\n   int precision = MAX (mpz_sizeinbase (v1, 2),\n \t\t       mpz_sizeinbase (v2, 2));\n \n@@ -458,8 +459,16 @@ type_for_interval (mpz_t v1, mpz_t v2)\n     unsigned_p = (mpz_sgn (v2) >= 0);\n \n   mode = smallest_mode_for_size (precision, MODE_INT);\n-  precision = GET_MODE_PRECISION (mode);\n-  type = build_nonstandard_integer_type (precision, unsigned_p);\n+  wider_precision = GET_MODE_PRECISION (mode);\n+\n+  /* As we want to generate signed types as much as possible, try to\n+     fit the interval [v1, v2] in a signed type.  For example,\n+     supposing that we have the interval [0, 100], instead of\n+     generating unsigned char, we want to generate a signed char.  */\n+  if (unsigned_p && precision < wider_precision)\n+    unsigned_p = false;\n+\n+  type = build_nonstandard_integer_type (wider_precision, unsigned_p);\n \n   if (!type)\n     {"}]}