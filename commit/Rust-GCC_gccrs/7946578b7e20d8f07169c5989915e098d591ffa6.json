{"sha": "7946578b7e20d8f07169c5989915e098d591ffa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0NjU3OGI3ZTIwZDhmMDcxNjljNTk4OTkxNWUwOThkNTkxZmZhNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-06-04T16:00:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-06-04T16:00:10Z"}, "message": "tree-flow-inline.h (is_global_var): Do not check TREE_STATIC on MTAGs.\n\n2008-06-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow-inline.h (is_global_var): Do not check TREE_STATIC\n\ton MTAGs.\n\t(is_call_clobbered): Always check var_ann->call_clobbered.\n\t(mark_call_clobbered): Always set var_ann->call_clobbered.\n\t(clear_call_clobbered): Always clear var_ann->call_clobbered.\n\t* tree-ssa-alias.c (mark_non_addressable): Use clear_call_clobbered.\n\t(reset_alias_info): Clear call clobbering info on MTAGs and\n\tglobals as well.\n\t(set_pt_anything): Set pt_global_mem.\n\t(create_tag_raw): Adjust comment.\n\t(may_be_aliased): Do not check TREE_PUBLIC on MTAGs.\n\nFrom-SVN: r136360", "tree": {"sha": "b685361935e605acc28e8b1347c61de22cdcbd06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b685361935e605acc28e8b1347c61de22cdcbd06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7946578b7e20d8f07169c5989915e098d591ffa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7946578b7e20d8f07169c5989915e098d591ffa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7946578b7e20d8f07169c5989915e098d591ffa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7946578b7e20d8f07169c5989915e098d591ffa6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b67758fe851a2a3e96d354c40879d1cd9f4a4b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67758fe851a2a3e96d354c40879d1cd9f4a4b48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b67758fe851a2a3e96d354c40879d1cd9f4a4b48"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "ed7c58c5c82e683ee74a657ee44239eec35b37c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7946578b7e20d8f07169c5989915e098d591ffa6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7946578b7e20d8f07169c5989915e098d591ffa6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7946578b7e20d8f07169c5989915e098d591ffa6", "patch": "@@ -1,3 +1,17 @@\n+2008-06-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow-inline.h (is_global_var): Do not check TREE_STATIC\n+\ton MTAGs.\n+\t(is_call_clobbered): Always check var_ann->call_clobbered.\n+\t(mark_call_clobbered): Always set var_ann->call_clobbered.\n+\t(clear_call_clobbered): Always clear var_ann->call_clobbered.\n+\t* tree-ssa-alias.c (mark_non_addressable): Use clear_call_clobbered.\n+\t(reset_alias_info): Clear call clobbering info on MTAGs and\n+\tglobals as well.\n+\t(set_pt_anything): Set pt_global_mem.\n+\t(create_tag_raw): Adjust comment.\n+\t(may_be_aliased): Do not check TREE_PUBLIC on MTAGs.\n+\n 2008-06-04  Joseph Myers  <joseph@codesourcery.com>\n             Maxim Kuvyrkov  <maxim@codesourcery.com>\n "}, {"sha": "a8dc8fffa733bf981e53d5f4c981481c7dfe8534", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7946578b7e20d8f07169c5989915e098d591ffa6/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7946578b7e20d8f07169c5989915e098d591ffa6/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=7946578b7e20d8f07169c5989915e098d591ffa6", "patch": "@@ -698,7 +698,7 @@ static inline bool\n is_global_var (const_tree t)\n {\n   if (MTAG_P (t))\n-    return (TREE_STATIC (t) || MTAG_GLOBAL (t));\n+    return MTAG_GLOBAL (t);\n   else\n     return (TREE_STATIC (t) || DECL_EXTERNAL (t));\n }\n@@ -875,19 +875,15 @@ factoring_name_p (const_tree name)\n static inline bool\n is_call_clobbered (const_tree var)\n {\n-  if (!MTAG_P (var))\n-    return var_ann (var)->call_clobbered;\n-  else\n-    return bitmap_bit_p (gimple_call_clobbered_vars (cfun), DECL_UID (var)); \n+  return var_ann (var)->call_clobbered;\n }\n \n /* Mark variable VAR as being clobbered by function calls.  */\n static inline void\n mark_call_clobbered (tree var, unsigned int escape_type)\n {\n   var_ann (var)->escape_mask |= escape_type;\n-  if (!MTAG_P (var))\n-    var_ann (var)->call_clobbered = true;\n+  var_ann (var)->call_clobbered = true;\n   bitmap_set_bit (gimple_call_clobbered_vars (cfun), DECL_UID (var));\n }\n \n@@ -899,8 +895,7 @@ clear_call_clobbered (tree var)\n   ann->escape_mask = 0;\n   if (MTAG_P (var))\n     MTAG_GLOBAL (var) = 0;\n-  if (!MTAG_P (var))\n-    var_ann (var)->call_clobbered = false;\n+  var_ann (var)->call_clobbered = false;\n   bitmap_clear_bit (gimple_call_clobbered_vars (cfun), DECL_UID (var));\n }\n "}, {"sha": "05c123c0e99c4ce80cc22abd1ac59eef804ed619", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7946578b7e20d8f07169c5989915e098d591ffa6/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7946578b7e20d8f07169c5989915e098d591ffa6/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=7946578b7e20d8f07169c5989915e098d591ffa6", "patch": "@@ -305,10 +305,7 @@ mark_non_addressable (tree var)\n \n   mpt = memory_partition (var);\n \n-  if (!MTAG_P (var))\n-    var_ann (var)->call_clobbered = false;\n-\n-  bitmap_clear_bit (gimple_call_clobbered_vars (cfun), DECL_UID (var));\n+  clear_call_clobbered (var);\n   TREE_ADDRESSABLE (var) = 0;\n \n   if (mpt)\n@@ -2003,22 +2000,13 @@ reset_alias_info (void)\n \tbitmap_set_bit (all_nmts, DECL_UID (var));\n \n       /* Since we are about to re-discover call-clobbered\n-\t variables, clear the call-clobbered flag.  Variables that\n-\t are intrinsically call-clobbered (globals, local statics,\n-\t etc) will not be marked by the aliasing code, so we can't\n-\t remove them from CALL_CLOBBERED_VARS.  \n-\n-\t NB: STRUCT_FIELDS are still call clobbered if they are for a\n-\t global variable, so we *don't* clear their call clobberedness\n-\t just because they are tags, though we will clear it if they\n-\t aren't for global variables.  */\n-      if (TREE_CODE (var) == NAME_MEMORY_TAG\n-\t  || TREE_CODE (var) == SYMBOL_MEMORY_TAG\n-\t  || TREE_CODE (var) == MEMORY_PARTITION_TAG\n-\t  || !is_global_var (var))\n-\tclear_call_clobbered (var);\n+\t variables, clear the call-clobbered flag.  */\n+      clear_call_clobbered (var);\n     }\n \n+  /* There should be no call-clobbered variable left.  */\n+  gcc_assert (bitmap_empty_p (gimple_call_clobbered_vars (cfun)));\n+\n   /* Clear flow-sensitive points-to information from each SSA name.  */\n   for (i = 1; i < num_ssa_names; i++)\n     {\n@@ -2830,6 +2818,8 @@ set_pt_anything (tree ptr)\n   struct ptr_info_def *pi = get_ptr_info (ptr);\n \n   pi->pt_anything = 1;\n+  /* Anything includes global memory.  */\n+  pi->pt_global_mem = 1;\n   pi->pt_vars = NULL;\n \n   /* The pointer used to have a name tag, but we now found it pointing\n@@ -2926,12 +2916,12 @@ create_tag_raw (enum tree_code code, tree type, const char *prefix)\n \n   tmp_var = build_decl (code, create_tmp_var_name (prefix), type);\n \n-  /* Make the variable writable.  */\n+  /* Memory tags are always writable and non-static.  */\n   TREE_READONLY (tmp_var) = 0;\n+  TREE_STATIC (tmp_var) = 0;\n \n   /* It doesn't start out global.  */\n   MTAG_GLOBAL (tmp_var) = 0;\n-  TREE_STATIC (tmp_var) = 0;\n   TREE_USED (tmp_var) = 1;\n \n   return tmp_var;\n@@ -3365,7 +3355,7 @@ may_be_aliased (tree var)\n   /* Globally visible variables can have their addresses taken by other\n      translation units.  */\n   if (MTAG_P (var)\n-      && (MTAG_GLOBAL (var) || TREE_PUBLIC (var)))\n+      && MTAG_GLOBAL (var))\n     return true;\n   else if (!MTAG_P (var)\n            && (DECL_EXTERNAL (var) || TREE_PUBLIC (var)))"}]}