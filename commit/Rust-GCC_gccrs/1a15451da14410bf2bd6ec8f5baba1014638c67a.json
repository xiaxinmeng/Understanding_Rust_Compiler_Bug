{"sha": "1a15451da14410bf2bd6ec8f5baba1014638c67a", "node_id": "C_kwDOANBUbNoAKDFhMTU0NTFkYTE0NDEwYmYyYmQ2ZWM4ZjViYWJhMTAxNDYzOGM2N2E", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-04T09:12:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-04T09:16:28Z"}, "message": "tree-optimization/103864 - SLP reduction of reductions with conversions\n\nThis generalizes the fix for PR103544 to also cover reductions that\nare not reduction chains and does not consider reductions wrapped in\nsign conversions for SLP reduction handling.\n\n2022-01-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103864\n\tPR tree-optimization/103544\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Exclude\n\treductions wrapped in conversions from SLP handling.\n\t(vect_analyze_slp): Revert PR103544 change.\n\n\t* gcc.dg/vect/pr103864.c: New testcase.", "tree": {"sha": "0724eed0f643230c2bfae5abad60a2564abe7d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0724eed0f643230c2bfae5abad60a2564abe7d15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a15451da14410bf2bd6ec8f5baba1014638c67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a15451da14410bf2bd6ec8f5baba1014638c67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a15451da14410bf2bd6ec8f5baba1014638c67a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a15451da14410bf2bd6ec8f5baba1014638c67a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801b2c880c8079934ac186ea1c31f3bf4af5aef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801b2c880c8079934ac186ea1c31f3bf4af5aef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801b2c880c8079934ac186ea1c31f3bf4af5aef3"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "464d5731a42d7064abc9ccd79af1e04e98998a01", "filename": "gcc/testsuite/gcc.dg/vect/pr103864.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a15451da14410bf2bd6ec8f5baba1014638c67a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103864.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a15451da14410bf2bd6ec8f5baba1014638c67a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103864.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103864.c?ref=1a15451da14410bf2bd6ec8f5baba1014638c67a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 -fno-tree-reassoc\" } */\n+\n+void\n+crash_me (short int *crash_me_result, int i, char crash_me_ptr_0)\n+{\n+  while (i < 1)\n+    {\n+      int j;\n+\n+      for (j = 0; j < 2; ++j)\n+        crash_me_result[j] += crash_me_ptr_0 + 1;\n+\n+      i += 3;\n+    }\n+}"}, {"sha": "c3a1681d7c6495ae98084288bf335956effd6893", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a15451da14410bf2bd6ec8f5baba1014638c67a/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a15451da14410bf2bd6ec8f5baba1014638c67a/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=1a15451da14410bf2bd6ec8f5baba1014638c67a", "patch": "@@ -3325,8 +3325,13 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t= as_a <loop_vec_info> (vinfo)->reductions;\n       scalar_stmts.create (reductions.length ());\n       for (i = 0; reductions.iterate (i, &next_info); i++)\n-\tif (STMT_VINFO_RELEVANT_P (next_info)\n-\t    || STMT_VINFO_LIVE_P (next_info))\n+\tif ((STMT_VINFO_RELEVANT_P (next_info)\n+\t     || STMT_VINFO_LIVE_P (next_info))\n+\t    /* ???  Make sure we didn't skip a conversion around a reduction\n+\t       path.  In that case we'd have to reverse engineer that conversion\n+\t       stmt following the chain using reduc_idx and from the PHI\n+\t       using reduc_def.  */\n+\t    && STMT_VINFO_DEF_TYPE (next_info) == vect_reduction_def)\n \t  scalar_stmts.quick_push (next_info);\n       /* If less than two were relevant/live there's nothing to SLP.  */\n       if (scalar_stmts.length () < 2)\n@@ -3419,13 +3424,8 @@ vect_analyze_slp (vec_info *vinfo, unsigned max_tree_size)\n \t\tvinfo = next;\n \t      }\n \t    STMT_VINFO_DEF_TYPE (first_element) = vect_internal_def;\n-\t    /* It can be still vectorized as part of an SLP reduction.\n-\t       ???  But only if we didn't skip a conversion around the group.\n-\t       In that case we'd have to reverse engineer that conversion\n-\t       stmt following the chain using reduc_idx and from the PHI\n-\t       using reduc_def.  */\n-\t    if (STMT_VINFO_DEF_TYPE (last) == vect_reduction_def)\n-\t      loop_vinfo->reductions.safe_push (last);\n+\t    /* It can be still vectorized as part of an SLP reduction.  */\n+\t    loop_vinfo->reductions.safe_push (last);\n \t  }\n \n       /* Find SLP sequences starting from groups of reductions.  */"}]}