{"sha": "23f2660fb17e1160870fd00fe9aa73c8554c74b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmMjY2MGZiMTdlMTE2MDg3MGZkMDBmZTlhYTczYzg1NTRjNzRiNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-04-17T17:38:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-04-17T17:38:28Z"}, "message": "c-ada-spec.c (get_underlying_decl): Return the typedef, if any.\n\n\t* c-ada-spec.c (get_underlying_decl): Return the typedef, if any.\n\t(dump_generic_ada_node) <POINTER_TYPE>: Clean up handling of access\n\tto incomplete types.\n\t(dump_nested_type): Remove redundant tests and tidy up.\n\t(print_ada_declaration): Also set TREE_VISITED on the declaration of\n\ta type which is the typedef of an original type.\n\nFrom-SVN: r235084", "tree": {"sha": "04e24f7d9984ce6f942a4c2471692d0faa329225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04e24f7d9984ce6f942a4c2471692d0faa329225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23f2660fb17e1160870fd00fe9aa73c8554c74b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f2660fb17e1160870fd00fe9aa73c8554c74b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f2660fb17e1160870fd00fe9aa73c8554c74b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f2660fb17e1160870fd00fe9aa73c8554c74b5/comments", "author": null, "committer": null, "parents": [{"sha": "d0e037eb8803681527ec7c81ba40bc4e27b1b1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e037eb8803681527ec7c81ba40bc4e27b1b1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e037eb8803681527ec7c81ba40bc4e27b1b1bb"}], "stats": {"total": 126, "additions": 74, "deletions": 52}, "files": [{"sha": "5cf0e84a741e789fccf36972ace0f2fe4293d98e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=23f2660fb17e1160870fd00fe9aa73c8554c74b5", "patch": "@@ -1,3 +1,12 @@\n+2016-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (get_underlying_decl): Return the typedef, if any.\n+\t(dump_generic_ada_node) <POINTER_TYPE>: Clean up handling of access\n+\tto incomplete types.\n+\t(dump_nested_type): Remove redundant tests and tidy up.\n+\t(print_ada_declaration): Also set TREE_VISITED on the declaration of\n+\ta type which is the typedef of an original type.\n+\n 2016-04-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70651"}, {"sha": "e33fdffef0e985080fc132a201303f65ca21bedd", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 36, "deletions": 52, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=23f2660fb17e1160870fd00fe9aa73c8554c74b5", "patch": "@@ -892,25 +892,22 @@ static const char *c_duplicates[] = {\n static tree\n get_underlying_decl (tree type)\n {\n-  tree decl = NULL_TREE;\n-\n-  if (type == NULL_TREE)\n+  if (!type)\n     return NULL_TREE;\n \n   /* type is a declaration.  */\n   if (DECL_P (type))\n-    decl = type;\n+    return type;\n \n   /* type is a typedef.  */\n   if (TYPE_P (type) && TYPE_NAME (type) && DECL_P (TYPE_NAME (type)))\n-    decl = TYPE_NAME (type);\n+    return TYPE_NAME (type);\n \n   /* TYPE_STUB_DECL has been set for type.  */\n-  if (TYPE_P (type) && TYPE_STUB_DECL (type) &&\n-      DECL_P (TYPE_STUB_DECL (type)))\n-    decl = TYPE_STUB_DECL (type);\n+  if (TYPE_P (type) && TYPE_STUB_DECL (type))\n+    return TYPE_STUB_DECL (type);\n \n-  return decl;\n+  return NULL_TREE;\n }\n \n /* Return whether TYPE has static fields.  */\n@@ -2083,37 +2080,25 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t\t}\n \t      else\n \t\t{\n-\t\t  /* For now, handle all access-to-access or\n-\t\t     access-to-unknown-structs as opaque system.address.  */\n-\n \t\t  tree type_name = TYPE_NAME (TREE_TYPE (node));\n-\t\t  const_tree typ2 = !type ||\n-\t\t    DECL_P (type) ? type : TYPE_NAME (type);\n-\t\t  const_tree underlying_type =\n-\t\t    get_underlying_decl (TREE_TYPE (node));\n+\t\t  tree decl = get_underlying_decl (TREE_TYPE (node));\n+\t\t  tree enclosing_decl = get_underlying_decl (type);\n \n+\t\t  /* For now, handle access-to-access, access-to-empty-struct\n+\t\t     or access-to-incomplete as opaque system.address.  */\n \t\t  if (TREE_CODE (TREE_TYPE (node)) == POINTER_TYPE\n-\t\t      /* Pointer to pointer.  */\n-\n \t\t      || (RECORD_OR_UNION_TYPE_P (TREE_TYPE (node))\n-\t\t\t  && (!underlying_type\n-\t\t\t      || !TYPE_FIELDS (TREE_TYPE (underlying_type))))\n-\t\t      /* Pointer to opaque structure.  */\n-\n-\t\t      || underlying_type == NULL_TREE\n-\t\t      || (!typ2\n-\t\t\t  && !TREE_VISITED (underlying_type)\n-\t\t\t  && !TREE_VISITED (type_name)\n-\t\t\t  && !is_tagged_type (TREE_TYPE (node))\n-\t\t\t  && DECL_SOURCE_FILE (underlying_type)\n-\t\t\t       == source_file_base)\n-\t\t      || (type_name && typ2\n-\t\t\t  && DECL_P (underlying_type)\n-\t\t\t  && DECL_P (typ2)\n-\t\t\t  && decl_sloc (underlying_type, true)\n-\t\t\t       > decl_sloc (typ2, true)\n-\t\t\t  && DECL_SOURCE_FILE (underlying_type)\n-\t\t\t       == DECL_SOURCE_FILE (typ2)))\n+\t\t\t  && !TYPE_FIELDS (TREE_TYPE (node)))\n+\t\t      || !decl\n+\t\t      || (!enclosing_decl\n+\t\t\t  && !TREE_VISITED (decl)\n+\t\t\t  && DECL_SOURCE_FILE (decl) == source_file_base)\n+\t\t      || (enclosing_decl\n+\t\t\t  && !TREE_VISITED (decl)\n+\t\t\t  && DECL_SOURCE_FILE (decl)\n+\t\t\t       == DECL_SOURCE_FILE (enclosing_decl)\n+\t\t\t  && decl_sloc (decl, true)\n+\t\t\t       > decl_sloc (enclosing_decl, true)))\n \t\t    {\n \t\t      if (package_prefix)\n \t\t\t{\n@@ -2160,13 +2145,11 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t\t    }\n \n \t\t  if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (node)) && type_name)\n-\t\t    dump_generic_ada_node\n-\t\t      (buffer, type_name,\n-\t\t       TREE_TYPE (node), spc, is_access, true);\n+\t\t    dump_generic_ada_node (buffer, type_name, TREE_TYPE (node),\n+\t\t\t\t\t   spc, is_access, true);\n \t\t  else\n-\t\t    dump_generic_ada_node\n-\t\t      (buffer, TREE_TYPE (node), TREE_TYPE (node),\n-\t\t       spc, 0, true);\n+\t\t    dump_generic_ada_node (buffer, TREE_TYPE (node),\n+\t\t\t\t\t   TREE_TYPE (node), spc, 0, true);\n \t\t}\n \t    }\n \t}\n@@ -2507,13 +2490,12 @@ dump_nested_type (pretty_printer *buffer, tree field, tree t, tree parent,\n \n       decl = get_underlying_decl (tmp);\n       if (decl\n-\t  && DECL_P (decl)\n-\t  && decl_sloc (decl, true) > decl_sloc (t, true)\n-\t  && DECL_SOURCE_FILE (decl) == DECL_SOURCE_FILE (t)\n-\t  && !TREE_VISITED (decl)\n \t  && !DECL_IS_BUILTIN (decl)\n \t  && (!RECORD_OR_UNION_TYPE_P (TREE_TYPE (decl))\n-\t      || TYPE_FIELDS (TREE_TYPE (decl))))\n+\t      || TYPE_FIELDS (TREE_TYPE (decl)))\n+\t  && !TREE_VISITED (decl)\n+\t  && DECL_SOURCE_FILE (decl) == DECL_SOURCE_FILE (t)\n+\t  && decl_sloc (decl, true) > decl_sloc (t, true))\n \t{\n \t  /* Generate forward declaration.  */\n \t  pp_string (buffer, \"type \");\n@@ -2529,10 +2511,7 @@ dump_nested_type (pretty_printer *buffer, tree field, tree t, tree parent,\n       while (TREE_CODE (tmp) == ARRAY_TYPE)\n \ttmp = TREE_TYPE (tmp);\n       decl = get_underlying_decl (tmp);\n-      if (decl\n-\t  && DECL_P (decl)\n-\t  && !DECL_NAME (decl)\n-\t  && !TREE_VISITED (decl))\n+      if (decl && !DECL_NAME (decl) && !TREE_VISITED (decl))\n \t{\n \t  /* Generate full declaration.  */\n \t  dump_nested_type (buffer, decl, t, parent, spc);\n@@ -2682,7 +2661,10 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t\t casing), then ignore the second type.  */\n \t      if (type_name (typ) == type_name (TREE_TYPE (t))\n \t\t  || !strcasecmp (type_name (typ), type_name (TREE_TYPE (t))))\n-\t\treturn 0;\n+\t\t{\n+\t\t  TREE_VISITED (t) = 1;\n+\t\t  return 0;\n+\t\t}\n \n \t      INDENT (spc);\n \n@@ -2703,6 +2685,8 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t\t  dump_generic_ada_node (buffer, typ, type, spc, false, true);\n \t\t  pp_semicolon (buffer);\n \t\t}\n+\n+\t      TREE_VISITED (t) = 1;\n \t      return 1;\n \t    }\n \t}"}, {"sha": "8f16407c5d69c8fc92cfab11a09170c43d899b78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23f2660fb17e1160870fd00fe9aa73c8554c74b5", "patch": "@@ -1,3 +1,8 @@\n+2016-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/dump-ada-spec-3.c: New test.\n+\t* c-c++-common/dump-ada-spec-4.c: Likewise.\n+\n 2016-04-17  Tom de Vries  <tom@codesourcery.com>\n \n \tPR other/70183"}, {"sha": "19cfd0087ebf801307bacf566b36883ecc9e91e8", "filename": "gcc/testsuite/c-c++-common/dump-ada-spec-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-3.c?ref=23f2660fb17e1160870fd00fe9aa73c8554c74b5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-ada-spec\" } */\n+\n+typedef struct \n+{\n+   int a;\n+} Message_Type;\n+\n+extern int Func(const Message_Type *in, Message_Type *out);\n+\n+/* { dg-final { scan-ada-spec-not \"System.Address\" } } */\n+/* { dg-final { cleanup-ada-spec } } */"}, {"sha": "d2a45a6363ea00aadfc433034eee86a9759152cf", "filename": "gcc/testsuite/c-c++-common/dump-ada-spec-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f2660fb17e1160870fd00fe9aa73c8554c74b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-4.c?ref=23f2660fb17e1160870fd00fe9aa73c8554c74b5", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-ada-spec\" } */\n+\n+typedef struct Message_Type\n+{\n+   int a;\n+} Message_Type;\n+\n+extern int Func(const Message_Type *in, Message_Type *out);\n+\n+/* { dg-final { scan-ada-spec-not \"System.Address\" } } */\n+/* { dg-final { cleanup-ada-spec } } */"}]}