{"sha": "ac2a4c0df812e297d37b0db8eb9ba2662bc27d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyYTRjMGRmODEyZTI5N2QzN2IwZGI4ZWI5YmEyNjYyYmMyN2QxMg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-05-10T23:31:27Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-05-10T23:31:27Z"}, "message": "cfgcleanup: Handle a branch with just a return in both arms (PR71028)\n\nIf we have a conditional jump that has only a return in both the branch\npath and the fallthrough path, and the return on the branch path can not\nbe made a conditional return, we will try to make a conditional return\nfrom the fallthrough path, and that does not work because we then try\nto redirect the (new) jump in the fallthrough block to the original\ndest in the branch path, which is the exit block.\n\nFor the testcase on ARM we end up in this situation because before the\njump2 pass there are some other insns in the return blocks as well, but\nthe same insns in both, so those are moved above the conditional jump.\nOnly later (in the ce3 pass) are the conditional jump and two returns\nmelded into one return, so we need to handle this strange case here.\n\n\n\tPR rtl-optimization/71028\n\t* cfgcleanup.c (try_optimize_cfg): Do not flip a conditional\n\tjump with just a return in the fallthrough block if the branch\n\tblock contains just a returns as well.\n\nFrom-SVN: r236106", "tree": {"sha": "c9e4e1e04a7acbd464e6de9038cf4ea4a138bfd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9e4e1e04a7acbd464e6de9038cf4ea4a138bfd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e39dab2c21c0e1fe615a1050da051c8088cb3267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39dab2c21c0e1fe615a1050da051c8088cb3267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39dab2c21c0e1fe615a1050da051c8088cb3267"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "e95fcad02a60c9f026308ec3a109c8ae71f13206", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac2a4c0df812e297d37b0db8eb9ba2662bc27d12", "patch": "@@ -1,3 +1,10 @@\n+2016-05-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/71028\n+\t* cfgcleanup.c (try_optimize_cfg): Do not flip a conditional\n+\tjump with just a return in the fallthrough block if the branch\n+\tblock contains just a return as well.\n+\n 2016-05-10  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* fold-const.c (fold_binary_loc) [(X ^ Y) & Y]: Remove and merge with..."}, {"sha": "023b9d239a8ee3c16de3a7da8f67caf4793ecdc6", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a4c0df812e297d37b0db8eb9ba2662bc27d12/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=ac2a4c0df812e297d37b0db8eb9ba2662bc27d12", "patch": "@@ -2870,6 +2870,7 @@ try_optimize_cfg (int mode)\n \t\t a return so that it becomes a conditional return and a\n \t\t new jump to the original branch target.  */\n \t      if (EDGE_COUNT (b->succs) == 2\n+\t\t  && BRANCH_EDGE (b)->dest != EXIT_BLOCK_PTR_FOR_FN (cfun)\n \t\t  && any_condjump_p (BB_END (b))\n \t\t  && bb_is_just_return (FALLTHRU_EDGE (b)->dest, &ret, &use))\n \t\t{"}]}