{"sha": "a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzODEyZTJjODNiNmNjM2ZjYzMyNGNhM2M4NTVhZjY4ZDMxZGFhNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-25T13:01:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-25T13:01:45Z"}, "message": "diagnostic.c: Don't include plugin.h.\n\n\t* diagnostic.c: Don't include plugin.h.\n\t(diagnostic_report_diagnostic): Don't handle plugins specially\n\there.  Pass context to internal_error callback.\n\t* diagnostic.h (struct diagnostic_context): Add context parameter\n\tto internal_error callback.\n\t* plugin.c (warn_if_plugins, plugins_internal_error_function):\n\tNew.\n\t* plugin.h (struct diagnostic_context): Declare.\n\t(warn_if_plugins, plugins_internal_error_function): Declare.\n\t* toplev.c (general_init): Set global_dc->internal_error.\n\t* Makefile.in (diagnostic.o): Update dependencies.\n\nada:\n\t* gcc-interface/misc.c (internal_error_function): Add context\n\tparameter.  Use it to access show_column flag and instead of using\n\tglobal_dc.  Call warn_if_plugins.\n\t* gcc-interface/Make-lang.in (ada/misc.o): Update dependencies.\n\nFrom-SVN: r159819", "tree": {"sha": "013d843f2cba975bbb1d9e3277b722a21d0aec70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/013d843f2cba975bbb1d9e3277b722a21d0aec70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791bddee093414f72f673e0fefb405c8eca32e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791bddee093414f72f673e0fefb405c8eca32e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791bddee093414f72f673e0fefb405c8eca32e23"}], "stats": {"total": 88, "additions": 69, "deletions": 19}, "files": [{"sha": "7ece57b731bd87b91bb70dbb897e9b2b82903442", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -1,3 +1,17 @@\n+2010-05-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* diagnostic.c: Don't include plugin.h.\n+\t(diagnostic_report_diagnostic): Don't handle plugins specially\n+\there.  Pass context to internal_error callback.\n+\t* diagnostic.h (struct diagnostic_context): Add context parameter\n+\tto internal_error callback.\n+\t* plugin.c (warn_if_plugins, plugins_internal_error_function):\n+\tNew.\n+\t* plugin.h (struct diagnostic_context): Declare.\n+\t(warn_if_plugins, plugins_internal_error_function): Declare.\n+\t* toplev.c (general_init): Set global_dc->internal_error.\n+\t* Makefile.in (diagnostic.o): Update dependencies.\n+\n 2010-05-25 Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/rs6000/darwin64.h: Update DARWIN_ARCH_SPEC."}, {"sha": "f9926fab1152f2caefa9a02e9d38509f6d0b8b86", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -2735,7 +2735,7 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GIMPLE_H) realmpfr.h\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) $(TOPLEV_H) intl.h $(DIAGNOSTIC_H) \\\n-   diagnostic.def opts.h $(PLUGIN_H)\n+   diagnostic.def opts.h\n opts.o : opts.c opts.h options.h $(TOPLEV_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(EXPR_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\"}, {"sha": "7e1d62d73f6002c78ecf8b1e739ae7873ac816e5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -1,3 +1,10 @@\n+2010-05-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/misc.c (internal_error_function): Add context\n+\tparameter.  Use it to access show_column flag and instead of using\n+\tglobal_dc.  Call warn_if_plugins.\n+\t* gcc-interface/Make-lang.in (ada/misc.o): Update dependencies.\n+\n 2010-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/misc.c (LANG_HOOKS_DEEP_UNSHARING): Redefine."}, {"sha": "43a3cec16596a0064d77aad270455360f494a771", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -1235,7 +1235,7 @@ ada/decl.o : ada/gcc-interface/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TARGET_H) $(EXPR_H) libfuncs.h \\\n    $(FLAGS_H) debug.h $(CGRAPH_H) $(OPTABS_H) toplev.h except.h langhooks.h \\\n-   $(LANGHOOKS_DEF_H) opts.h options.h $(TREE_INLINE_H) \\\n+   $(LANGHOOKS_DEF_H) opts.h options.h $(TREE_INLINE_H) $(PLUGIN_H) \\\n    ada/gcc-interface/ada.h ada/adadecode.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h \\\n    ada/sinfo.h ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h \\"}, {"sha": "22826ed0b96183f7cf3c7f7a517de49ab12c3d73", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -48,6 +48,7 @@\n #include \"opts.h\"\n #include \"options.h\"\n #include \"tree-inline.h\"\n+#include \"plugin.h\"\n \n #include \"ada.h\"\n #include \"adadecode.h\"\n@@ -75,7 +76,8 @@ static const char *gnat_printable_name\t(tree, int);\n static const char *gnat_dwarf_name\t(tree, int);\n static tree gnat_return_tree\t\t(tree);\n static void gnat_parse_file\t\t(int);\n-static void internal_error_function\t(const char *, va_list *);\n+static void internal_error_function\t(diagnostic_context *,\n+\t\t\t\t\t const char *, va_list *);\n static tree gnat_type_max_size\t\t(const_tree);\n static void gnat_get_subrange_bounds\t(const_tree, tree *, tree *);\n static tree gnat_eh_personality\t\t(void);\n@@ -334,25 +336,29 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n /* Here is the function to handle the compiler error processing in GCC.  */\n \n static void\n-internal_error_function (const char *msgid, va_list *ap)\n+internal_error_function (diagnostic_context *context,\n+\t\t\t const char *msgid, va_list *ap)\n {\n   text_info tinfo;\n   char *buffer, *p, *loc;\n   String_Template temp, temp_loc;\n   Fat_Pointer fp, fp_loc;\n   expanded_location s;\n \n+  /* Warn if plugins present.  */\n+  warn_if_plugins ();\n+\n   /* Reset the pretty-printer.  */\n-  pp_clear_output_area (global_dc->printer);\n+  pp_clear_output_area (context->printer);\n \n   /* Format the message into the pretty-printer.  */\n   tinfo.format_spec = msgid;\n   tinfo.args_ptr = ap;\n   tinfo.err_no = errno;\n-  pp_format_verbatim (global_dc->printer, &tinfo);\n+  pp_format_verbatim (context->printer, &tinfo);\n \n   /* Extract a (writable) pointer to the formatted text.  */\n-  buffer = xstrdup (pp_formatted_text (global_dc->printer));\n+  buffer = xstrdup (pp_formatted_text (context->printer));\n \n   /* Go up to the first newline.  */\n   for (p = buffer; *p; p++)\n@@ -368,7 +374,7 @@ internal_error_function (const char *msgid, va_list *ap)\n   fp.Array = buffer;\n \n   s = expand_location (input_location);\n-  if (flag_show_column && s.column != 0)\n+  if (context->show_column && s.column != 0)\n     asprintf (&loc, \"%s:%d:%d\", s.file, s.line, s.column);\n   else\n     asprintf (&loc, \"%s:%d\", s.file, s.line);"}, {"sha": "c16ec7cafe05ecd3714946e2a5e21e5874a6c15f", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -32,7 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"diagnostic.h\"\n #include \"opts.h\"\n-#include \"plugin.h\"\n \n #define pedantic_warning_kind(DC)\t\t\t\\\n   ((DC)->pedantic_errors ? DK_ERROR : DK_WARNING)\n@@ -380,14 +379,6 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \n   context->lock++;\n \n-  if (diagnostic->kind == DK_ICE && plugins_active_p ())\n-    {\n-      fnotice (stderr, \"*** WARNING *** there are active plugins, do not report\"\n-\t       \" this as a bug unless you can reproduce it without enabling\"\n-\t       \" any plugins.\\n\");\n-      dump_active_plugins (stderr);\n-    }\n-\n   if (diagnostic->kind == DK_ICE)\n     {\n #ifndef ENABLE_CHECKING\n@@ -405,7 +396,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \t}\n #endif\n       if (context->internal_error)\n-\t(*context->internal_error) (diagnostic->message.format_spec,\n+\t(*context->internal_error) (context,\n+\t\t\t\t    diagnostic->message.format_spec,\n \t\t\t\t    diagnostic->message.args_ptr);\n     }\n   ++diagnostic_kind_count (context, diagnostic->kind);"}, {"sha": "9fd508b78ff15f044ac1eb37cb4e0e92cd7e66e2", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -112,7 +112,7 @@ struct diagnostic_context\n   diagnostic_finalizer_fn end_diagnostic;\n \n   /* Client hook to report an internal error.  */\n-  void (*internal_error) (const char *, va_list *);\n+  void (*internal_error) (diagnostic_context *, const char *, va_list *);\n \n   /* Auxiliary data for client.  */\n   void *x_data;"}, {"sha": "1c737a5cd254b13e18d0cd3641820f5a69cc6398", "filename": "gcc/plugin.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -810,6 +810,32 @@ debug_active_plugins (void)\n   dump_active_plugins (stderr);\n }\n \n+/* Give a warning if plugins are present, before an ICE message asking\n+   to submit a bug report.  */\n+\n+void\n+warn_if_plugins (void)\n+{\n+  if (plugins_active_p ())\n+    {\n+      fnotice (stderr, \"*** WARNING *** there are active plugins, do not report\"\n+\t       \" this as a bug unless you can reproduce it without enabling\"\n+\t       \" any plugins.\\n\");\n+      dump_active_plugins (stderr);\n+    }\n+\n+}\n+\n+/* Likewise, as a callback from the diagnostics code.  */\n+\n+void\n+plugins_internal_error_function (struct diagnostic_context *context ATTRIBUTE_UNUSED,\n+\t\t\t\t const char *msgid ATTRIBUTE_UNUSED,\n+\t\t\t\t va_list *ap ATTRIBUTE_UNUSED)\n+{\n+  warn_if_plugins ();\n+}\n+\n /* The default version check. Compares every field in VERSION. */\n \n bool"}, {"sha": "ec0420346f426492b3132f578d6c516ee34ecb66", "filename": "gcc/plugin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fplugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Fplugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.h?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcc-plugin.h\"\n \n struct attribute_spec;\n+struct diagnostic_context;\n \n extern void add_new_plugin (const char *);\n extern void parse_plugin_arg_opt (const char *);\n@@ -31,6 +32,9 @@ extern void initialize_plugins (void);\n extern bool plugins_active_p (void);\n extern void dump_active_plugins (FILE *);\n extern void debug_active_plugins (void);\n+extern void warn_if_plugins (void);\n+extern void plugins_internal_error_function (struct diagnostic_context *,\n+\t\t\t\t\t     const char *, va_list *);\n extern void print_plugins_versions (FILE *file, const char *indent);\n extern void print_plugins_help (FILE *file, const char *indent);\n extern void finalize_plugins (void);"}, {"sha": "aa3eff3be3541d2e89b087719267a1e6790290ed", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13812e2c83b6cc3fcc324ca3c855af68d31daa6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a13812e2c83b6cc3fcc324ca3c855af68d31daa6", "patch": "@@ -1697,6 +1697,7 @@ general_init (const char *argv0)\n      override it later.  */\n   pp_format_decoder (global_dc->printer) = &default_tree_printer;\n   global_dc->show_option_requested = flag_diagnostics_show_option;\n+  global_dc->internal_error = plugins_internal_error_function;\n \n   /* Trap fatal signals, e.g. SIGSEGV, and convert them to ICE messages.  */\n #ifdef SIGSEGV"}]}