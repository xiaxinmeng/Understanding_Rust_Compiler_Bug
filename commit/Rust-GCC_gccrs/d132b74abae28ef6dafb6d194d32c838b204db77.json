{"sha": "d132b74abae28ef6dafb6d194d32c838b204db77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEzMmI3NGFiYWUyOGVmNmRhZmI2ZDE5NGQzMmM4MzhiMjA0ZGI3Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-02-15T01:27:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-02-15T01:27:12Z"}, "message": "re PR c++/55220 ([c++11] ICE when doing partial template specialization on variadic template)\n\n\tPR c++/55220\n\t* pt.c (unify): A pack expansion that is not the last template\n\targument makes the entire template argument list non-deduced.\n\nFrom-SVN: r196068", "tree": {"sha": "8086b22c332006fd4c411faae7343dcc311dfc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8086b22c332006fd4c411faae7343dcc311dfc25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d132b74abae28ef6dafb6d194d32c838b204db77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d132b74abae28ef6dafb6d194d32c838b204db77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d132b74abae28ef6dafb6d194d32c838b204db77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d132b74abae28ef6dafb6d194d32c838b204db77/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06449b408eb72fbc8f5b78fea962efd4e72db5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06449b408eb72fbc8f5b78fea962efd4e72db5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06449b408eb72fbc8f5b78fea962efd4e72db5e6"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "1ecbb7b0b1a0fb83d356b5eda604b8a5fa728d0b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d132b74abae28ef6dafb6d194d32c838b204db77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d132b74abae28ef6dafb6d194d32c838b204db77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d132b74abae28ef6dafb6d194d32c838b204db77", "patch": "@@ -1,5 +1,9 @@\n 2013-02-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/55220\n+\t* pt.c (unify): A pack expansion that is not the last template\n+\targument makes the entire template argument list non-deduced.\n+\n \tPR c++/56323\n \t* name-lookup.c (do_class_using_decl): Handle typedefs with\n \tinheriting constructors."}, {"sha": "440df1ea2317a4803d1fe5a4e6ce63e9ca07e350", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d132b74abae28ef6dafb6d194d32c838b204db77/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d132b74abae28ef6dafb6d194d32c838b204db77/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d132b74abae28ef6dafb6d194d32c838b204db77", "patch": "@@ -16548,6 +16548,14 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n                 && PACK_EXPANSION_P (TREE_VEC_ELT (parmvec, len - 1)))\n               parm_variadic_p = 1;\n             \n+             for (i = 0; i < len - parm_variadic_p; ++i)\n+\t       /* If the template argument list of P contains a pack\n+\t\t  expansion that is not the last template argument, the\n+\t\t  entire template argument list is a non-deduced\n+\t\t  context.  */\n+\t       if (PACK_EXPANSION_P (TREE_VEC_ELT (parmvec, i)))\n+\t\t return unify_success (explain_p);\n+\n             if (TREE_VEC_LENGTH (argvec) < len - parm_variadic_p)\n               return unify_too_few_arguments (explain_p,\n \t\t\t\t\t      TREE_VEC_LENGTH (argvec), len);"}, {"sha": "a82a098c3dacc5108831d3ef3d0b1e7f6d662f60", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-nondeduce2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d132b74abae28ef6dafb6d194d32c838b204db77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-nondeduce2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d132b74abae28ef6dafb6d194d32c838b204db77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-nondeduce2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-nondeduce2.C?ref=d132b74abae28ef6dafb6d194d32c838b204db77", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/55220\n+// { dg-do compile { target c++11 } }\n+\n+template <typename ...> struct something_like_tuple\n+{\n+\n+};\n+\n+template <typename, typename> struct is_last\n+{\n+  static const bool value = false;\n+};\n+\n+// Head is non-deducible, so this can't work as the user intended\n+template <typename T, template <typename ...> class Tuple, typename ... Head>\n+struct is_last<T, Tuple<Head ..., T>>\n+{\n+  static const bool value = true;\n+};\n+\n+#define SA(X) static_assert (X, #X)\n+\n+typedef something_like_tuple<char, int, float> something_like_tuple_t;\n+SA ((is_last<float, something_like_tuple_t>::value == false));\n+SA ((is_last<int, something_like_tuple_t>::value == false));"}]}