{"sha": "70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAxNDRlOWM2YzBmZDQ0MzI0MTBjNDA4ZTJiYjRiNmQ2MjlhMGQxNA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2003-03-10T19:10:26Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2003-03-10T19:10:26Z"}, "message": "Andreas Tobler <a.tobler@schweiz.ch>\n\n        * src/powerpc/darwin_closure.S: Recode to fit dynamic libraries.\n\nFrom-SVN: r64106", "tree": {"sha": "40e4332e44b402603848f7bd75701c8af56e13e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40e4332e44b402603848f7bd75701c8af56e13e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70144e9c6c0fd4432410c408e2bb4b6d629a0d14/comments", "author": null, "committer": null, "parents": [{"sha": "b405370260e7f244876ab88241d003fa8328b58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b405370260e7f244876ab88241d003fa8328b58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b405370260e7f244876ab88241d003fa8328b58d"}], "stats": {"total": 253, "additions": 162, "deletions": 91}, "files": [{"sha": "89dded925a13dbdf73686cf9ce92862c4e7385f7", "filename": "libffi/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70144e9c6c0fd4432410c408e2bb4b6d629a0d14/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70144e9c6c0fd4432410c408e2bb4b6d629a0d14/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "patch": "@@ -1,3 +1,7 @@\n+2003-03-03  Andreas Tobler <a.tobler@schweiz.ch>\n+\n+        * src/powerpc/darwin_closure.S: Recode to fit dynamic libraries.\n+\n 2003-02-06  Andreas Tobler <a.tobler@schweiz.ch>\n \n \t* libffi/src/powerpc/darwin_closure.S:"}, {"sha": "9f721de8a610f87bacd93e4308137c34d6504078", "filename": "libffi/src/powerpc/darwin_closure.S", "status": "modified", "additions": 158, "deletions": 91, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70144e9c6c0fd4432410c408e2bb4b6d629a0d14/libffi%2Fsrc%2Fpowerpc%2Fdarwin_closure.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70144e9c6c0fd4432410c408e2bb4b6d629a0d14/libffi%2Fsrc%2Fpowerpc%2Fdarwin_closure.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fdarwin_closure.S?ref=70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "patch": "@@ -25,29 +25,27 @@\n    ----------------------------------------------------------------------- */\n \n #define LIBFFI_ASM\n-#define JUMPTARGET(name) name\n #define L(x) x\n-.text\n-.globl _ffi_closure_helper_DARWIN\n \n+\t.file\t\"darwin_closure.S\"\n .text\n-\t.align 2\n+\t.align 2\t\n .globl _ffi_closure_ASM\n-\n+\t\n .text\n \t.align 2\n _ffi_closure_ASM:\n LFB1:\t\t\n-\tmflr r0\t\t\t/* extract return address  */\n-\tstw r0, 8(r1)\t\t/* save the return address  */\n+\tmflr\tr0\t\t\t/* extract return address  */\n+\tstw\tr0, 8(r1)\t\t/* save the return address  */\n LCFI0:\t\n \t/* 24 Bytes (Linkage Area)\n \t   32 Bytes (outgoing parameter area, always reserved)\n \t   104 Bytes (13*8 from FPR)\t\n \t   8 Bytes (result)\n \t   168 Bytes  */\n \t\n-\tstwu r1,-176(r1)\t/* skip over caller save area\n+\tstwu\tr1,-176(r1)\t/* skip over caller save area\n \t\t\t\tkeep stack aligned to 16  */\n LCFI1:\t\t\n \t/* we want to build up an area for the parameters passed\n@@ -97,98 +95,147 @@ LCFI1:\n \taddi r7,r1,232\n \t\n \t/* make the call */\n-\tbl L(_ffi_closure_helper_DARWIN)\n-\n+\tbl\tLffi_closure_helper_DARWIN$stub\n+\t\n \t/* now r3 contains the return type */\n \t/* so use it to look up in a table */\n \t/* so we know how to deal with each type */\n \n \t/* look up the proper starting point in table  */\n \t/* by using return type as offset */\n-\taddi r5,r1,160\t\t/* get pointer to results area */\n-\taddis r4,0,ha16(.L60)\t/* get address of jump table */\n-\taddi r4,r4,lo16(.L60)\n-\tslwi r3,r3,2\t\t/* now multiply return type by 4 */\n-\tlwzx r3,r4,r3\t\t/* get the contents of that table value */\n-\tadd r3,r3,r4\t\t/* add contents of table to table address */\n+\taddi  r5,r1,160\t\t  /* get pointer to results area */\n+\tbl    Lget_ret_type0_addr /* get pointer to Lret_type0 into LR  */\n+\tmflr  r4\t\t  /* move to r4  */\n+\tslwi  r3,r3,4\t\t  /* now multiply return type by 16  */\n+\tadd   r3,r3,r4\t\t  /* add contents of table to table address */\n \tmtctr r3\n-\tbctr\t\t\t/* jump to it  */\n+\tbctr\t\t\t  /* jump to it  */\n LFE1:\n-\t.align\t2\n-\n-.L60:\n-\t.long .L44-.L60    /* FFI_TYPE_VOID */\n-\t.long .L50-.L60    /* FFI_TYPE_INT */\n-\t.long .L47-.L60    /* FFI_TYPE_FLOAT */\n-\t.long .L46-.L60    /* FFI_TYPE_DOUBLE */\n-\t.long .L46-.L60    /* FFI_TYPE_LONGDOUBLE */\n-\t.long .L56-.L60    /* FFI_TYPE_UINT8 */\n-\t.long .L55-.L60    /* FFI_TYPE_SINT8 */\n-\t.long .L58-.L60    /* FFI_TYPE_UINT16 */\n-\t.long .L57-.L60    /* FFI_TYPE_SINT16 */\n-\t.long .L50-.L60    /* FFI_TYPE_UINT32 */\n-\t.long .L50-.L60    /* FFI_TYPE_SINT32 */\n-\t.long .L48-.L60    /* FFI_TYPE_UINT64 */\n-\t.long .L48-.L60    /* FFI_TYPE_SINT64 */\n-\t.long .L44-.L60    /* FFI_TYPE_STRUCT */\n-\t.long .L50-.L60    /* FFI_TYPE_POINTER */\n-\n-\n-/* case double */\n-.L46:   \n-\tlfd f1,0(r5)\n-\tb .L44\n-\n-/* case float */\n-.L47:\n-\tlfs f1,0(r5)\n-\tb .L44\n-\t\n-/* case long long */\n-.L48:\n-\tlwz r3,0(r5)\n-\tlwz r4,4(r5)\n-\tb .L44\n+/* Each of the ret_typeX code fragments has to be exactly 16 bytes long  */\n+/* (4 instructions). For cache effectiveness we align to a 16 byte boundary  */\n+/* first.  */\n \t\n-/* case default / int32 / pointer */\n-.L50:\n-\tlwz r3,0(r5)\n-\tb .L44\n-\t\n-/* case signed int8\t */\n-.L55:\n-\taddi r5,r5,3\n-\tlbz r3,0(r5)\n-\textsb r3,r3\n-\tb .L44\n-\n-/* case unsigned int8\t */\n-.L56:\n-\taddi r5,r5,3\n-\tlbz r3,0(r5)\n-\tb .L44\n-\n-/* case signed int16 */\n-.L57:\n-\taddi r5,r5,2\n-\tlhz r3,0(r5)\n-\textsh r3,r3\n-\tb .L44\n-\n-/* case unsigned int16 */\n-.L58:\t\n-\taddi r5,r5,2\n-\tlhz r3,0(r5)\n-\n-/* case void / done\t */\n-.L44:\n-\t\n-\taddi r1,r1,176\t\t/* restore stack pointer  */\n-\tlwz r0,8(r1)\t\t/* get return address  */\n-\tmtlr r0\t\t\t/* reset link register  */\n+\t.align 4\n+\n+\tnop\n+\tnop\n+\tnop\n+Lget_ret_type0_addr:\n+\tblrl\n+\n+/* case FFI_TYPE_VOID  */\n+Lret_type0:\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_INT  */\n+Lret_type1:\n+\tlwz\tr3,0(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_FLOAT  */\n+Lret_type2:\n+\tlfs\tf1,0(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_DOUBLE  */\n+Lret_type3:\n+        lfd\tf1,0(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_LONGDOUBLE  */\n+Lret_type4:\n+        lfd\tf1,0(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_UINT8  */\n+Lret_type5:\n+        lbz\tr3,3(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_SINT8  */\n+Lret_type6:\n+\tlbz\tr3,3(r5)\n+\textsb\tr3,r3\n+\tb\tLfinish\n+\tnop\n+\n+/* case FFI_TYPE_UINT16  */\n+Lret_type7:\n+\tlhz\tr3,2(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_SINT16  */\n+Lret_type8:\n+\tlha\tr3,2(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_UINT32  */\n+Lret_type9:\n+\tlwz\tr3,0(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_SINT32  */\n+Lret_type10:\n+\tlwz\tr3,0(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_UINT64  */\n+Lret_type11:\n+\tlwz\tr3,0(r5)\n+\tlwz\tr4,4(r5)\n+\tb\tLfinish\n+\tnop\n+\n+/* case FFI_TYPE_SINT64  */\n+Lret_type12:\n+\tlwz\tr3,0(r5)\n+\tlwz\tr4,4(r5)\n+\tb\tLfinish\n+\tnop\n+\n+/* case FFI_TYPE_STRUCT */\n+Lret_type13:\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\tnop\n+\n+/* case FFI_TYPE_POINTER  */\n+Lret_type14:\n+\tlwz\tr3,0(r5)\n+\tb\tLfinish\n+\tnop\n+\tnop\n+\n+/* case done  */\t\n+Lfinish:\t\n+\taddi\tr1,r1,176\t\t/* restore stack pointer  */\n+\tlwz\tr0,8(r1)\t\t/* get return address  */\n+\tmtlr\tr0\t\t\t/* reset link register  */\n \tblr\n-\t\n-/* END(ffi_closure_ASM)  */\n+\t\t\n+/* END(ffi_closure_ASM)  */\t\n \n .data\n .section __TEXT,__eh_frame\n@@ -233,4 +280,24 @@ LASFDE1:\n \t.byte   0x7e    ; sleb128 -2\n \t.align\t2\n LEFDE1:\n-\n+.data\n+\t.align\t2\n+LDFCM0:\n+.section __TEXT,__picsymbolstub1,symbol_stubs,pure_instructions,32\n+\t.align\t2\n+Lffi_closure_helper_DARWIN$stub: \n+\t.indirect_symbol _ffi_closure_helper_DARWIN       \n+\tmflr\tr0         \n+\tbcl\t20,31,LO$ffi_closure_helper_DARWIN \n+LO$ffi_closure_helper_DARWIN:\n+\tmflr\tr11                 \n+\taddis\tr11,r11,ha16(L_ffi_closure_helper_DARWIN$lazy_ptr - LO$ffi_closure_helper_DARWIN)\n+\tmtlr\tr0 \n+\tlwzu\tr12,lo16(L_ffi_closure_helper_DARWIN$lazy_ptr - LO$ffi_closure_helper_DARWIN)(r11)         \n+\tmtctr\tr12                \n+\tbctr    \n+.data\n+.lazy_symbol_pointer \n+L_ffi_closure_helper_DARWIN$lazy_ptr:         \n+\t.indirect_symbol _ffi_closure_helper_DARWIN\n+\t.long   dyld_stub_binding_helper"}]}