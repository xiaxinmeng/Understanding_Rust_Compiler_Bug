{"sha": "17472bb623e869846f6d555995686bc54e499c10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc0NzJiYjYyM2U4Njk4NDZmNmQ1NTU5OTU2ODZiYzU0ZTQ5OWMxMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-31T18:48:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-31T18:48:48Z"}, "message": "Reshuffle 23_containers testsuite.\n\n\n2003-07-31  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tReshuffle 23_containers testsuite.\n\t* 23_containers/adaptors.cc, bitset_ctor.cc,bitset_members.cc,\n\tbitset_shift.cc, deque_ctor.cc, deque_operators.cc,\n\tlist_capacity.cc, list_ctor.cc, list_modifiers.cc, list_operators.cc,\n\tmap_insert.cc, map_operators.cc, map_operators_neg.cc, multiset.cc,\n\tset_operators_neg.cc, vector_bool.cc, vector_capacity.cc,\n\tvector_ctor.cc, vector_element_access.cc, vector_modifiers.cc,\n\tvector_resize.cc: Split into...\n\t* 23_containers/bitset/cons/1.cc: New.\n\t* 23_containers/bitset/cons/6282.cc: New.\n\t* 23_containers/bitset/count/6124.cc: New.\n\t* 23_containers/bitset/operations/1.cc: New.\n\t* 23_containers/bitset/operations/2.cc: New.\n\t* 23_containers/bitset/test/1.cc: New.\n\t* 23_containers/bitset/to_ulong/1.cc: New.\n\t* 23_containers/deque/cons/1.cc: New.\n\t* 23_containers/deque/cons/2.cc: New.\n\t* 23_containers/deque/operators/1.cc: New.\n\t* 23_containers/list/capacity/1.cc: New.\n\t* 23_containers/list/cons/1.cc: New.\n\t* 23_containers/list/cons/2.cc: New.\n\t* 23_containers/list/cons/3.cc: New.\n\t* 23_containers/list/cons/4.cc: New.\n\t* 23_containers/list/cons/5.cc: New.\n\t* 23_containers/list/cons/6.cc: New.\n\t* 23_containers/list/cons/7.cc: New.\n\t* 23_containers/list/cons/8.cc: New.\n\t* 23_containers/list/cons/9.cc: New.\n\t* 23_containers/list/modifiers/1.cc: New.\n\t* 23_containers/list/modifiers/2.cc: New.\n\t* 23_containers/list/modifiers/3.cc: New.\n\t* 23_containers/list/operators/1.cc: New.\n\t* 23_containers/list/operators/2.cc: New.\n\t* 23_containers/list/operators/3.cc: New.\n\t* 23_containers/list/operators/4.cc: New.\n\t* 23_containers/map/insert/1.cc: New.\n\t* 23_containers/map/operators/1.cc: New.\n\t* 23_containers/map/operators/1_neg.cc: New.\n\t* 23_containers/multiset/insert/1.cc: New.\n\t* 23_containers/priority_queue/members/7161.cc: New.\n\t* 23_containers/queue/members/7157.cc: New.\n\t* 23_containers/set/operators/1_neg.cc: New.\n\t* 23_containers/stack/members/7158.cc: New.\n\t* 23_containers/vector/bool/1.cc: New.\n\t* 23_containers/vector/bool/6886.cc: New.\n\t* 23_containers/vector/capacity/1.cc: New.\n\t* 23_containers/vector/capacity/2.cc: New.\n\t* 23_containers/vector/capacity/8230.cc: New.\n\t* 23_containers/vector/cons/1.cc: New.\n\t* 23_containers/vector/cons/2.cc: New.\n\t* 23_containers/vector/cons/3.cc: New.\n\t* 23_containers/vector/cons/4.cc: New.\n\t* 23_containers/vector/cons/6513.cc: New.\n\t* 23_containers/vector/element_access/1.cc: New.\n\t* 23_containers/vector/modifiers/1.cc: New.\n\t* 23_containers/vector/modifiers/2.cc: New.\n\t* 23_containers/vector/resize/1.cc: New.\n\nFrom-SVN: r70011", "tree": {"sha": "8df98329304b5133dcb1fbf92cd6a6694e37ce5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8df98329304b5133dcb1fbf92cd6a6694e37ce5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17472bb623e869846f6d555995686bc54e499c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17472bb623e869846f6d555995686bc54e499c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17472bb623e869846f6d555995686bc54e499c10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17472bb623e869846f6d555995686bc54e499c10/comments", "author": null, "committer": null, "parents": [{"sha": "9143c6b76b4b7f198901e441cd06357a3b9c573a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9143c6b76b4b7f198901e441cd06357a3b9c573a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9143c6b76b4b7f198901e441cd06357a3b9c573a"}], "stats": {"total": 3178, "additions": 2067, "deletions": 1111}, "files": [{"sha": "4c19dd4ff600c3bcd500b4c28e0914f4c8d13f81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -1,3 +1,63 @@\n+2003-07-31  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tReshuffle 23_containers testsuite.\n+\t* 23_containers/adaptors.cc, bitset_ctor.cc,bitset_members.cc, \n+\tbitset_shift.cc, deque_ctor.cc, deque_operators.cc,\n+\tlist_capacity.cc, list_ctor.cc, list_modifiers.cc, list_operators.cc,\n+\tmap_insert.cc, map_operators.cc, map_operators_neg.cc, multiset.cc,\n+\tset_operators_neg.cc, vector_bool.cc, vector_capacity.cc,\n+\tvector_ctor.cc, vector_element_access.cc, vector_modifiers.cc,\n+\tvector_resize.cc: Split into...\n+\t* 23_containers/bitset/cons/1.cc: New.\n+\t* 23_containers/bitset/cons/6282.cc: New.\n+\t* 23_containers/bitset/count/6124.cc: New.\n+\t* 23_containers/bitset/operations/1.cc: New.\n+\t* 23_containers/bitset/operations/2.cc: New.\n+\t* 23_containers/bitset/test/1.cc: New.\n+\t* 23_containers/bitset/to_ulong/1.cc: New.\n+\t* 23_containers/deque/cons/1.cc: New.\n+\t* 23_containers/deque/cons/2.cc: New.\n+\t* 23_containers/deque/operators/1.cc: New.\n+\t* 23_containers/list/capacity/1.cc: New.\n+\t* 23_containers/list/cons/1.cc: New.\n+\t* 23_containers/list/cons/2.cc: New.\n+\t* 23_containers/list/cons/3.cc: New.\n+\t* 23_containers/list/cons/4.cc: New.\n+\t* 23_containers/list/cons/5.cc: New.\n+\t* 23_containers/list/cons/6.cc: New.\n+\t* 23_containers/list/cons/7.cc: New.\n+\t* 23_containers/list/cons/8.cc: New.\n+\t* 23_containers/list/cons/9.cc: New.\n+\t* 23_containers/list/modifiers/1.cc: New.\n+\t* 23_containers/list/modifiers/2.cc: New.\n+\t* 23_containers/list/modifiers/3.cc: New.\n+\t* 23_containers/list/operators/1.cc: New.\n+\t* 23_containers/list/operators/2.cc: New.\n+\t* 23_containers/list/operators/3.cc: New.\n+\t* 23_containers/list/operators/4.cc: New.\n+\t* 23_containers/map/insert/1.cc: New.\n+\t* 23_containers/map/operators/1.cc: New.\n+\t* 23_containers/map/operators/1_neg.cc: New.\n+\t* 23_containers/multiset/insert/1.cc: New.\n+\t* 23_containers/priority_queue/members/7161.cc: New.\n+\t* 23_containers/queue/members/7157.cc: New.\n+\t* 23_containers/set/operators/1_neg.cc: New.\n+\t* 23_containers/stack/members/7158.cc: New.\n+\t* 23_containers/vector/bool/1.cc: New.\n+\t* 23_containers/vector/bool/6886.cc: New.\n+\t* 23_containers/vector/capacity/1.cc: New.\n+\t* 23_containers/vector/capacity/2.cc: New.\n+\t* 23_containers/vector/capacity/8230.cc: New.\n+\t* 23_containers/vector/cons/1.cc: New.\n+\t* 23_containers/vector/cons/2.cc: New.\n+\t* 23_containers/vector/cons/3.cc: New.\n+\t* 23_containers/vector/cons/4.cc: New.\n+\t* 23_containers/vector/cons/6513.cc: New.\n+\t* 23_containers/vector/element_access/1.cc: New.\n+\t* 23_containers/vector/modifiers/1.cc: New.\n+\t* 23_containers/vector/modifiers/2.cc: New.\n+\t* 23_containers/vector/resize/1.cc: New.\n+\t\n 2003-07-31  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* testsuite/thread/pthread1.cc: Add alpha*-*-osf* to dg-do run,"}, {"sha": "5d5064de4d6e89f32517c98035eff809611182c4", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/1.cc", "status": "renamed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -76,42 +76,8 @@ bool test01(void)\n   return test;\n }\n \n-// boundary condition:  a zero-sized set\n-// libstdc++/6282\n-bool test02(void)\n-{\n-  using std::char_traits;  using std::allocator;\n-  bool test = true;\n-\n-  std::bitset<0>  z1;\n-  VERIFY( z1.any() == false );\n-\n-  std::bitset<0>  z2(12345);\n-  VERIFY( z2.any() == false );\n-\n-  std::bitset<0>  z3(std::string(\"10101010101\"));\n-  VERIFY( z3.any() == false );\n-\n-  try {\n-    z1.set(0);\n-    VERIFY( false );\n-  }\n-  catch(std::out_of_range& fail) {\n-    VERIFY( true );\n-  }\n-  catch(...) {\n-    VERIFY( false );\n-  }\n-\n-  VERIFY( z1.to_ulong() == 0 );\n-  VERIFY( (z1.to_string<char,char_traits<char>,allocator<char> >().empty() ));\n-  return test;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/bitset_ctor.cc"}, {"sha": "92f9695ab47e7b0a54ca74712fb3e1a405be5a24", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/6282.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F6282.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F6282.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F6282.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,64 @@\n+// 1999-06-08 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.3.5.1 bitset constructors\n+\n+#include <string>\n+#include <bitset>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// boundary condition:  a zero-sized set\n+// libstdc++/6282\n+bool test02(void)\n+{\n+  using std::char_traits;  using std::allocator;\n+  bool test = true;\n+\n+  std::bitset<0>  z1;\n+  VERIFY( z1.any() == false );\n+\n+  std::bitset<0>  z2(12345);\n+  VERIFY( z2.any() == false );\n+\n+  std::bitset<0>  z3(std::string(\"10101010101\"));\n+  VERIFY( z3.any() == false );\n+\n+  try {\n+    z1.set(0);\n+    VERIFY( false );\n+  }\n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  VERIFY( z1.to_ulong() == 0 );\n+  VERIFY( (z1.to_string<char,char_traits<char>,allocator<char> >().empty() ));\n+  return test;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "df01a9f8b7de65c1e1dacc19d2cad51ab3991c42", "filename": "libstdc++-v3/testsuite/23_containers/bitset/count/6124.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcount%2F6124.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcount%2F6124.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcount%2F6124.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,39 @@\n+// 2001-06-03 pme\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.3.5.2 bitset members\n+\n+#include <bitset>\n+#include <stdexcept>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6124\n+void test02()\n+{\n+  std::bitset<1> bs;\n+  bs.count();\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "8d21a9f5521f8c6904e01bec3616e897c4ef9375", "filename": "libstdc++-v3/testsuite/23_containers/bitset/operations/1.cc", "status": "renamed", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -21,7 +21,6 @@\n #include <string>\n #include <set>\n #include <bitset>\n-\n #include <testsuite_hooks.h>\n \n static char original_bits[1024];\n@@ -102,21 +101,9 @@ test01() {\n   return test;\n }\n \n-bool\n-test02()\n-{\n-  bool test = true;\n-\n-  std::bitset<66>  b;\n-  b <<= 400;\n-  VERIFY( b.count() == 0 );\n-  return test;\n-}\n-\n int\n-main() {\n+main() \n+{\n   test01();\n-  test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/bitset_shift.cc"}, {"sha": "fd5c1929b13af0e0c732a57cae9a3a9752947e75", "filename": "libstdc++-v3/testsuite/23_containers/bitset/operations/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,42 @@\n+// 2000-01-15  Anders Widell  <awl@hem.passagen.se>\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <set>\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test02()\n+{\n+  bool test = true;\n+\n+  std::bitset<66>  b;\n+  b <<= 400;\n+  VERIFY( b.count() == 0 );\n+  return test;\n+}\n+\n+int\n+main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "40f4f42d8ea6d565dfffd9713a8989340ac387d1", "filename": "libstdc++-v3/testsuite/23_containers/bitset/test/1.cc", "status": "renamed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Ftest%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Ftest%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Ftest%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -46,34 +46,8 @@ test01(void)\n   VERIFY( test );\n }\n \n-// libstdc++/6124\n-void test02()\n-{\n-  std::bitset<1> bs;\n-  bs.count();\n-}\n-\n-void test03()\n-{\n-  bool test = true;\n-  std::bitset<5>      b;\n-  std::stringstream   ss (\"101\");\n-\n-  ss.exceptions(std::ios_base::eofbit);\n-\n-  try\n-  {\n-    ss >> b;\n-  }\n-  catch (std::exception&) {}\n-\n-  VERIFY( b.to_ulong() == 5 );\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/bitset_members.cc"}, {"sha": "40e54efbde608c19086d60e60bb0cb166d2cc48f", "filename": "libstdc++-v3/testsuite/23_containers/bitset/to_ulong/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fto_ulong%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fto_ulong%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fto_ulong%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,48 @@\n+// 2001-06-03 pme\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.3.5.2 bitset members\n+\n+#include <bitset>\n+#include <stdexcept>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  bool test = true;\n+  std::bitset<5>      b;\n+  std::stringstream   ss(\"101\");\n+  ss.exceptions(std::ios_base::eofbit);\n+\n+  try\n+  {\n+    ss >> b;\n+  }\n+  catch (std::exception&) { }\n+\n+  VERIFY( b.to_ulong() == 5 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "92e94057a98b6f0bb7ce31bc003d3c8806bce064", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/1.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,51 @@\n+// 2001-12-27 pme\n+//\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.1.1 deque constructors, copy, and assignment\n+\n+#include <deque>\n+#include <iterator>\n+#include <sstream>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+typedef std::deque<__gnu_test::counter>   gdeque;\n+\n+bool test = true;\n+\n+// see http://gcc.gnu.org/ml/libstdc++/2001-11/msg00139.html\n+void\n+test01()\n+{\n+  assert_count (0);\n+  {\n+     gdeque   d(10);\n+     assert_count (10);\n+  }\n+  assert_count (0);\n+}\n+\n+\n+int main()\n+{\n+  // specific bug fix checks\n+  test01();\n+  return 0;\n+}"}, {"sha": "bc5a180fc19a51f8e72e474697311971522e3a4a", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/2.cc", "status": "renamed", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -38,19 +38,6 @@ typedef std::deque<counter>   gdeque;\n \n bool test = true;\n \n-// see http://gcc.gnu.org/ml/libstdc++/2001-11/msg00139.html\n-void\n-test01()\n-{\n-  assert_count (0);\n-  {\n-     gdeque   d(10);\n-     assert_count (10);\n-  }\n-  assert_count (0);\n-}\n-\n-\n // 23.2.1     required types\n //\n // A missing required type will cause a compile failure.\n@@ -531,9 +518,5 @@ int main()\n   fillAssignmentCheck2();\n   rangeAssignmentCheck();\n   rangeAssignmentCheckWithException();\n-\n-  // specific bug fix checks\n-  test01();\n-\n-  return !test;\n+  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/deque_ctor.cc"}, {"sha": "5463b47f1cb119c9a80d4e90f8a866594c180144", "filename": "libstdc++-v3/testsuite/23_containers/deque/operators/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Foperators%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/deque_operators.cc"}, {"sha": "e675760cb933a789677ee314f762b6b7ee71fe6a", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/1.cc", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -62,9 +62,8 @@ test01()\n int\n main(int argc, char* argv[])\n {\n-    test01();\n-\n-    return !test;\n+  test01();\n+  return 0;\n }\n \n // vi:set sw=2 ts=2:", "previous_filename": "libstdc++-v3/testsuite/23_containers/list_capacity.cc"}, {"sha": "dfa8ce2bfa0532bfe59dc540dba8aaaaac86b565", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// A nontrivial type.\n+template<typename T>\n+  struct A { };\n+\n+// Another nontrivial type\n+struct B { };\n+\n+// A nontrivial type convertible from an int\n+struct C {\n+  C(int i) : i_(i) { }\n+  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n+  int i_;\n+};\n+\n+// Default constructor, basic properties\n+//\n+// This test verifies the following.\n+// 23.2.2.1     explicit list(const a& = Allocator())\n+// 23.1 (7)     iterator behaviour of empty containers\n+// 23.2.2       iterator begin()\n+// 23.2.2       iterator end()\n+// 23.2.2       size_type size() const\n+// 23.2.2\texistence of required typedefs\n+//\n+void\n+test01()\n+{\n+  std::list< A<B> > list0101;\n+  VERIFY(list0101.begin() == list0101.end());\n+  VERIFY(list0101.size() == 0);\n+\n+  // check type definitions -- will fail compile if missing\n+  typedef std::list< A<B> >::reference              reference;\n+  typedef std::list< A<B> >::const_reference        const_reference;\n+  typedef std::list< A<B> >::iterator               iterator;\n+  typedef std::list< A<B> >::const_iterator         const_iterator;\n+  typedef std::list< A<B> >::size_type              size_type;\n+  typedef std::list< A<B> >::difference_type        difference_type;\n+  typedef std::list< A<B> >::value_type             value_type;\n+  typedef std::list< A<B> >::allocator_type         allocator_type;\n+  typedef std::list< A<B> >::pointer                pointer;\n+  typedef std::list< A<B> >::const_pointer          const_pointer;\n+  typedef std::list< A<B> >::reverse_iterator       reverse_iterator;\n+  typedef std::list< A<B> >::const_reverse_iterator const_reverse_iterator;\n+\n+  // allocator checks?\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "50dc68e38d37e96873fcfc15b4140a8824337022", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/2.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,83 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// A nontrivial type.\n+template<typename T>\n+  struct A { };\n+\n+// Another nontrivial type\n+struct B { };\n+\n+// A nontrivial type convertible from an int\n+struct C {\n+  C(int i) : i_(i) { }\n+  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n+  int i_;\n+};\n+\n+// Fill constructor\n+//\n+// This test verifies the following.\n+// 23.2.2.1     explicit list(size_type n, const T& v = T(), const a& = Allocator())\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       const_iterator end() const\n+// 23.2.2       size_type size() const\n+//\n+void\n+test02()\n+{\n+  const int LIST_SIZE = 5;\n+  const int INIT_VALUE = 7;\n+  int count;\n+  std::list<int>::const_iterator i;\n+\n+  // nontrivial value_type\n+  std::list< A<B> > list0201(LIST_SIZE);\n+\n+  // default value\n+  std::list<int> list0202(LIST_SIZE);\n+  for (i = list0202.begin(), count = 0;\n+       i != list0202.end();\n+       ++i, ++count)\n+    VERIFY(*i == 0);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0202.size() == LIST_SIZE);\n+\n+  // explicit value\n+  std::list<int> list0203(LIST_SIZE, INIT_VALUE);\n+  for (i = list0203.begin(), count = 0;\n+       i != list0203.end();\n+       ++i, ++count)\n+    VERIFY(*i == INIT_VALUE);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0203.size() == LIST_SIZE);\n+}\n+\n+int main()\n+{\n+  test02(); \n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "8baa8627c58fd79add45f29d064907a705a36ca0", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/3.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// A nontrivial type.\n+template<typename T>\n+  struct A { };\n+\n+// Another nontrivial type\n+struct B { };\n+\n+// A nontrivial type convertible from an int\n+struct C {\n+  C(int i) : i_(i) { }\n+  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n+  int i_;\n+};\n+\n+// Fill constructor disguised as a range constructor\n+void\n+test02D()\n+{\n+  const int LIST_SIZE = 5;\n+  const int INIT_VALUE = 7;\n+  int count = 0;\n+  std::list<C> list0204(LIST_SIZE, INIT_VALUE);\n+  std::list<C>::iterator i = list0204.begin();\n+  for (; i != list0204.end(); ++i, ++count)\n+    VERIFY(*i == INIT_VALUE);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0204.size() == LIST_SIZE);\n+}\n+\n+int main()\n+{\n+  test02D(); \n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "30395671cbb4156d0352831e92d6806239f4b190", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/4.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// Range constructor\n+//\n+// This test verifies the following.\n+// 23.2.2.1     template list(InputIterator f, InputIterator l, const Allocator& a = Allocator())\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       const_iterator end() const\n+// 23.2.2       size_type size() const\n+//\n+void\n+test03()\n+{\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int N = sizeof(A) / sizeof(int);\n+  int count;\n+  std::list<int>::const_iterator i;\n+\n+  // construct from a dissimilar range\n+  std::list<int> list0301(A, A + N);\n+  for (i = list0301.begin(), count = 0;\n+       i != list0301.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0301.size() == N);\n+\n+  // construct from a similar range\n+  std::list<int> list0302(list0301.begin(), list0301.end());\n+  for (i = list0302.begin(), count = 0;\n+       i != list0302.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0302.size() == N);\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "64f17118a4792758d7cfc945c23472a5288b3499", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/5.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// Copy constructor\n+//\n+// This test verifies the following.\n+// 23.2.2.1     list(const list& x)\n+// 23.2.2       reverse_iterator rbegin() \n+// 23.2.2       reverse_iterator rend()\n+// 23.2.2       size_type size() const\n+//\n+void\n+test04()\n+{\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int N = sizeof(A) / sizeof(int);\n+  int count;\n+  std::list<int>::reverse_iterator i;\n+  std::list<int> list0401(A, A + N);\n+\n+  std::list<int> list0402(list0401);\n+  for (i = list0401.rbegin(), count = N - 1;\n+       i != list0401.rend();\n+       ++i, --count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == -1);\n+  VERIFY(list0401.size() == N);\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "6742c75e1b463c947fe8398c24d27449042b5fda", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/6.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// Range assign\n+//\n+// This test verifies the following.\n+// 23.2.2.1     void assign(InputIterator f, InputIterator l)\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       const_iterator end() const\n+// 23.2.2       size_type size() const\n+//\n+void\n+test05()\n+{\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int B[] = {101, 102, 103, 104, 105};\n+  const int N = sizeof(A) / sizeof(int);\n+  const int M = sizeof(B) / sizeof(int);\n+  int count;\n+  std::list<int>::const_iterator i;\n+\n+  std::list<int> list0501;\n+\n+  // make it bigger\n+  list0501.assign(A, A + N);\n+  for (i = list0501.begin(), count = 0;\n+       i != list0501.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0501.size() == N);\n+\n+  // make it smaller\n+  list0501.assign(B, B + M);\n+  for (i = list0501.begin(), count = 0;\n+       i != list0501.end();\n+       ++i, ++count)\n+    VERIFY(*i == B[count]);\n+  VERIFY(count == M);\n+  VERIFY(list0501.size() == M);\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "f600fbbcbdcacae26c98e72364f61995b4d17066", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/7.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// Fill assign\n+//\n+// This test verifies the following.\n+// 23.2.2.1     void assign(size_type n, const T& v)\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       const_iterator end() const\n+// 23.2.2       size_type size() const\n+//\n+void\n+test06()\n+{\n+  const int BIG_LIST_SIZE = 11;\n+  const int BIG_INIT_VALUE = 7;\n+  const int SMALL_LIST_SIZE = 5;\n+  const int SMALL_INIT_VALUE = 17;\n+  int count;\n+  std::list<int>::const_iterator i;\n+\n+  std::list<int> list0601;\n+  VERIFY(list0601.size() == 0);\n+\n+  // make it bigger\n+  list0601.assign(BIG_LIST_SIZE, BIG_INIT_VALUE);\n+  for (i = list0601.begin(), count = 0;\n+       i != list0601.end();\n+       ++i, ++count)\n+    VERIFY(*i == BIG_INIT_VALUE);\n+  VERIFY(count == BIG_LIST_SIZE);\n+  VERIFY(list0601.size() == BIG_LIST_SIZE);\n+\n+  // make it shrink\n+  list0601.assign(SMALL_LIST_SIZE, SMALL_INIT_VALUE);\n+  for (i = list0601.begin(), count = 0;\n+       i != list0601.end();\n+       ++i, ++count)\n+    VERIFY(*i == SMALL_INIT_VALUE);\n+  VERIFY(count == SMALL_LIST_SIZE);\n+  VERIFY(list0601.size() == SMALL_LIST_SIZE);\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "17eb0c48ade8eba4e572dcb5f9b4c1028d491ee7", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/8.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+\n+// A nontrivial type.\n+template<typename T>\n+  struct A { };\n+\n+// Another nontrivial type\n+struct B { };\n+\n+// A nontrivial type convertible from an int\n+struct C {\n+  C(int i) : i_(i) { }\n+  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n+  int i_;\n+};\n+\n+// Fill Assignment disguised as a Range Assignment\n+void\n+test06D()\n+{\n+  const int LIST_SIZE = 5;\n+  const int INIT_VALUE = 7;\n+  int count = 0;\n+  std::list<C> list0604;\n+  VERIFY(list0604.size() == 0);\n+  \n+  list0604.assign(LIST_SIZE, INIT_VALUE);\n+  std::list<C>::iterator i = list0604.begin();\n+  for (; i != list0604.end(); ++i, ++count)\n+    VERIFY(*i == INIT_VALUE);\n+  VERIFY(count == LIST_SIZE);\n+  VERIFY(list0604.size() == LIST_SIZE);\n+}\n+\n+int main()\n+{\n+  test06D();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "0fa066aabdfc2931a75473fbe5b193dad0d58de4", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/9.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.1 list constructors, copy, and assignment\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// Assignment operator\n+//\n+// This test verifies the following.\n+// 23.2.2       operator=(const list& x)\n+// 23.2.2       iterator begin()\n+// 23.2.2       iterator end()\n+// 23.2.2       size_type size() const\n+// 23.2.2       bool operator==(const list& x, const list& y)\n+//\n+void\n+test07()\n+{\n+  const int A[] = {701, 702, 703, 704, 705};\n+  const int N = sizeof(A) / sizeof(int);\n+  int count;\n+  std::list<int>::iterator i;\n+\n+  std::list<int> list0701(A, A + N);\n+  VERIFY(list0701.size() == N);\n+\n+  std::list<int> list0702;\n+  VERIFY(list0702.size() == 0);\n+\n+  list0702 = list0701;\n+  VERIFY(list0702.size() == N);\n+  for (i = list0702.begin(), count = 0;\n+       i != list0702.end();\n+       ++i, ++count)\n+    VERIFY(*i == A[count]);\n+  VERIFY(count == N);\n+  VERIFY(list0702 == list0701);\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "c5bb6d7dad0df72872895bf6e86642bf62d3fc2e", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/1.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,120 @@\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+typedef __gnu_test::copy_tracker  T;\n+\n+bool test = true;\n+\n+// range and fill insert/erase + clear\n+// missing: o  fill insert disguised as a range insert in all its variants\n+//          o  exception effects\n+void\n+test03()\n+{\n+  std::list<T> list0301;\n+  T::reset();\n+\n+  // fill insert at beginning of list / empty list\n+  list0301.insert(list0301.begin(), 3, T(11)); // should be [11 11 11]\n+  VERIFY(list0301.size() == 3);\n+  VERIFY(T::copyCount() == 3);\n+\n+  // save iterators to verify post-insert validity\n+  std::list<T>::iterator b = list0301.begin();          \n+  std::list<T>::iterator m = list0301.end(); --m;          \n+  std::list<T>::iterator e = list0301.end();\n+\n+  // fill insert at end of list\n+  T::reset();\n+  list0301.insert(list0301.end(), 3, T(13)); // should be [11 11 11 13 13 13]\n+  VERIFY(list0301.size() == 6);\n+  VERIFY(T::copyCount() == 3);\n+  VERIFY(b == list0301.begin() && b->id() == 11);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 11);\n+\n+  // fill insert in the middle of list\n+  ++m;\n+  T::reset();\n+  list0301.insert(m, 3, T(12)); // should be [11 11 11 12 12 12 13 13 13]\n+  VERIFY(list0301.size() == 9);\n+  VERIFY(T::copyCount() == 3);\n+  VERIFY(b == list0301.begin() && b->id() == 11);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+\n+  // single erase\n+  T::reset();\n+  m = list0301.erase(m); // should be [11 11 11 12 12 12 13 13]\n+  VERIFY(list0301.size() == 8);\n+  VERIFY(T::dtorCount() == 1);\n+  VERIFY(b == list0301.begin() && b->id() == 11);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+\n+  // range erase\n+  T::reset();\n+  m = list0301.erase(list0301.begin(), m); // should be [13 13]\n+  VERIFY(list0301.size() == 2);\n+  VERIFY(T::dtorCount() == 6);\n+  VERIFY(m->id() == 13);\n+\n+  // range fill at beginning\n+  const int A[] = {321, 322, 333};\n+  const int N = sizeof(A) / sizeof(int);\n+  T::reset();\n+  b = list0301.begin();          \n+  list0301.insert(b, A, A + N); // should be [321 322 333 13 13]\n+  VERIFY(list0301.size() == 5);\n+  VERIFY(T::copyCount() == 3);\n+  VERIFY(m->id() == 13);\n+  \n+  // range fill at end\n+  T::reset();\n+  list0301.insert(e, A, A + N); // should be [321 322 333 13 13 321 322 333]\n+  VERIFY(list0301.size() == 8);\n+  VERIFY(T::copyCount() == 3);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+  \n+  // range fill in middle\n+  T::reset();\n+  list0301.insert(m, A, A + N); \n+  VERIFY(list0301.size() == 11);\n+  VERIFY(T::copyCount() == 3);\n+  VERIFY(e == list0301.end());\n+  VERIFY(m->id() == 13);\n+\n+  T::reset();\n+  list0301.clear();\n+  VERIFY(list0301.size() == 0);\n+  VERIFY(T::dtorCount() == 11);\n+  VERIFY(e == list0301.end());\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "24eff6707507f593beadfa83b8fa6d7b9efeea0f", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/2.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+typedef __gnu_test::copy_tracker  T;\n+\n+bool test = true;\n+\n+// general single insert/erase + swap\n+void\n+test02()\n+{\n+  std::list<T> list0201;\n+  T::reset();\n+\n+  list0201.insert(list0201.begin(), T(1));     // list should be [1]\n+  VERIFY(list0201.size() == 1);\n+  VERIFY(T::copyCount() == 1);\n+\n+  list0201.insert(list0201.end(), T(2));     // list should be [1 2]\n+  VERIFY(list0201.size() == 2);\n+  VERIFY(T::copyCount() == 2);\n+\n+  std::list<T>::iterator i = list0201.begin();\n+  std::list<T>::const_iterator j = i;\n+  VERIFY(i->id() == 1); ++i;\n+  VERIFY(i->id() == 2);\n+\n+  list0201.insert(i, T(3));     // list should be [1 3 2]\n+  VERIFY(list0201.size() == 3);\n+  VERIFY(T::copyCount() == 3);\n+\n+  std::list<T>::const_iterator k = i;\n+  VERIFY(i->id() == 2); --i;\n+  VERIFY(i->id() == 3); --i;\n+  VERIFY(i->id() == 1); \n+  VERIFY(j->id() == 1); \n+\n+  ++i; // will point to '3'\n+  T::reset();\n+  list0201.erase(i); // should be [1 2]\n+  VERIFY(list0201.size() == 2);\n+  VERIFY(T::dtorCount() == 1);\n+  VERIFY(k->id() == 2);\n+  VERIFY(j->id() == 1); \n+\n+  std::list<T> list0202;\n+  T::reset();\n+  VERIFY(list0202.size() == 0);\n+  VERIFY(T::copyCount() == 0);\n+  VERIFY(T::dtorCount() == 0);\n+\n+  // member swap\n+  list0202.swap(list0201);\n+  VERIFY(list0201.size() == 0);\n+  VERIFY(list0202.size() == 2);\n+  VERIFY(T::copyCount() == 0);\n+  VERIFY(T::dtorCount() == 0);\n+\n+  // specialized swap\n+  swap(list0201, list0202);\n+  VERIFY(list0201.size() == 2);\n+  VERIFY(list0202.size() == 0);\n+  VERIFY(T::copyCount() == 0);\n+  VERIFY(T::dtorCount() == 0);\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "ee4a93c6f0aa501a0b874aef9a9153338b08a778", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/3.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,124 @@\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.3 list modifiers [lib.list.modifiers]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+typedef __gnu_test::copy_tracker  T;\n+\n+bool test = true;\n+\n+\n+// This test verifies the following.\n+//\n+// 23.2.2.3     void push_front(const T& x)\n+// 23.2.2.3     void push_back(const T& x)\n+// 23.2.2.3 (1) iterator and reference non-invalidation \n+// 23.2.2.3 (1) exception effects\n+// 23.2.2.3 (2) complexity requirements\n+//\n+// 23.2.2.3     void pop_front()\n+// 23.2.2.3     void pop_back()\n+// 23.2.2.3 (3) iterator and reference non-invalidation \n+// 23.2.2.3 (5) complexity requirements\n+//\n+// 23.2.2       const_iterator begin() const\n+// 23.2.2       iterator end() \n+// 23.2.2       const_reverse_iterator rbegin() const\n+// 23.2.2       _reference front() \n+// 23.2.2       const_reference front() const\n+// 23.2.2       reference back() \n+// 23.2.2       const_reference back() const\n+//\n+void\n+test01()\n+{\n+  std::list<T> list0101;\n+  std::list<T>::const_iterator i;\n+  std::list<T>::const_reverse_iterator j;\n+  std::list<T>::iterator k;\n+  T::reset();\n+\n+  list0101.push_back(T(1));     // list should be [1]\n+  VERIFY(list0101.size() == 1);\n+  VERIFY(T::copyCount() == 1);\n+\n+  k = list0101.end();\n+  --k;\n+  VERIFY(k->id() == 1);\n+  VERIFY(k->id() == list0101.front().id());\n+  VERIFY(k->id() == list0101.back().id());\n+\n+  list0101.push_front(T(2));    // list should be [2 1]\n+  VERIFY(list0101.size() == 2);\n+  VERIFY(T::copyCount() == 2);\n+  VERIFY(k->id() == 1);\n+\n+  list0101.push_back(T(3));     // list should be [2 1 3]\n+  VERIFY(list0101.size() == 3);\n+  VERIFY(T::copyCount() == 3);\n+  VERIFY(k->id() == 1);\n+\n+  try\n+  {\n+    list0101.push_back(T(4, true));\n+    VERIFY((\"no exception thrown\", false));\n+  }\n+  catch (...)\n+  {\n+    VERIFY(list0101.size() == 3);\n+    VERIFY(T::copyCount() == 4);\n+  }\n+\n+  i = list0101.begin();\n+  VERIFY(i->id() == 2);\n+  VERIFY(i->id() == list0101.front().id());\n+\n+  j = list0101.rbegin();\n+  VERIFY(j->id() == 3);\n+  VERIFY(j->id() == list0101.back().id());\n+\n+  ++i;\n+  VERIFY(i->id() == 1);\n+\n+  ++j;\n+  VERIFY(j->id() == 1);\n+\n+  T::reset();\n+\n+  list0101.pop_back();          // list should be [2 1]\n+  VERIFY(list0101.size() == 2);\n+  VERIFY(T::dtorCount() == 1);\n+  VERIFY(i->id() == 1);\n+  VERIFY(k->id() == 1);\n+\n+  list0101.pop_front();          // list should be [1]\n+  VERIFY(list0101.size() == 1);\n+  VERIFY(T::dtorCount() == 2);\n+  VERIFY(i->id() == 1);\n+  VERIFY(k->id() == 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "a695b28f8bcc24f3239b58839453904a8b27efb5", "filename": "libstdc++-v3/testsuite/23_containers/list/operators/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// splice(p, x) + remove + reverse\n+void\n+test01()\n+{\n+  const int K = 417;\n+  const int A[] = {1, 2, 3, 4, 5};\n+  const int B[] = {K, K, K, K, K};\n+  const int N = sizeof(A) / sizeof(int);\n+  const int M = sizeof(B) / sizeof(int);\n+\n+  std::list<int> list0101(A, A + N);\n+  std::list<int> list0102(B, B + M);\n+  std::list<int>::iterator p = list0101.begin();\n+\n+  VERIFY(list0101.size() == N);\n+  VERIFY(list0102.size() == M);\n+\n+  ++p;\n+  list0101.splice(p, list0102); // [1 K K K K K 2 3 4 5]\n+  VERIFY(list0101.size() == N + M);\n+  VERIFY(list0102.size() == 0);\n+\n+  // remove range from middle\n+  list0101.remove(K);\n+  VERIFY(list0101.size() == N);\n+\n+  // remove first element\n+  list0101.remove(1);\n+  VERIFY(list0101.size() == N - 1);\n+\n+  // remove last element\n+  list0101.remove(5);\n+  VERIFY(list0101.size() == N - 2);\n+\n+  // reverse\n+  list0101.reverse();\n+  p = list0101.begin();\n+  VERIFY(*p == 4); ++p;\n+  VERIFY(*p == 3); ++p;\n+  VERIFY(*p == 2); ++p;\n+  VERIFY(p == list0101.end());\n+}\n+\n+main(int argc, char* argv[])\n+{\n+  test01();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "09dc0f1c74f53652023f88515ecdbea05a74ff30", "filename": "libstdc++-v3/testsuite/23_containers/list/operators/2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// splice(p, x, i) + remove_if + operator==\n+void\n+test02()\n+{\n+  const int A[] = {1, 2, 3, 4, 5};\n+  const int B[] = {2, 1, 3, 4, 5};\n+  const int C[] = {1, 3, 4, 5, 2};\n+  const int N = sizeof(A) / sizeof(int);\n+  std::list<int> list0201(A, A + N);\n+  std::list<int> list0202(A, A + N);\n+  std::list<int> list0203(B, B + N);\n+  std::list<int> list0204(C, C + N);\n+  std::list<int>::iterator i = list0201.begin();\n+\n+  // result should be unchanged\n+  list0201.splice(list0201.begin(), list0201, i);\n+  VERIFY(list0201 == list0202);\n+\n+  // result should be [2 1 3 4 5]\n+  ++i;\n+  list0201.splice(list0201.begin(), list0201, i);\n+  VERIFY(list0201 != list0202);\n+  VERIFY(list0201 == list0203);\n+\n+  // result should be [1 3 4 5 2]\n+  list0201.splice(list0201.end(), list0201, i);\n+  VERIFY(list0201 == list0204);\n+}\n+\n+main(int argc, char* argv[])\n+{\n+  test02();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "c12286c62441ec340ae371afe818662956cb2f13", "filename": "libstdc++-v3/testsuite/23_containers/list/operators/3.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F3.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// splice(p, x, f, l) + sort + merge + unique\n+void\n+test03()\n+{\n+  const int A[] = {103, 203, 603, 303, 403, 503};\n+  const int B[] = {417, 417, 417, 417, 417};\n+  const int E[] = {103, 417, 417, 203, 603, 303, 403, 503};\n+  const int F[] = {103, 203, 303, 403, 417, 417, 503, 603};\n+  const int C[] = {103, 203, 303, 403, 417, 417, 417, 417, 417, 503, 603};\n+  const int D[] = {103, 203, 303, 403, 417, 503, 603};\n+  const int N = sizeof(A) / sizeof(int);\n+  const int M = sizeof(B) / sizeof(int);\n+  const int P = sizeof(C) / sizeof(int);\n+  const int Q = sizeof(D) / sizeof(int);\n+  const int R = sizeof(E) / sizeof(int);\n+\n+  std::list<int> list0301(A, A + N);\n+  std::list<int> list0302(B, B + M);\n+  std::list<int> list0303(C, C + P);\n+  std::list<int> list0304(D, D + Q);\n+  std::list<int> list0305(E, E + R);\n+  std::list<int> list0306(F, F + R);\n+  std::list<int>::iterator p = list0301.begin();\n+  std::list<int>::iterator q = list0302.begin();\n+\n+  ++p; ++q; ++q;\n+  list0301.splice(p, list0302, list0302.begin(), q);\n+  VERIFY(list0301 == list0305);\n+  VERIFY(list0301.size() == N + 2);\n+  VERIFY(list0302.size() == M - 2);\n+\n+  list0301.sort();\n+  VERIFY(list0301 == list0306);\n+\n+  list0301.merge(list0302);\n+  VERIFY(list0301.size() == N + M);\n+  VERIFY(list0302.size() == 0);\n+  VERIFY(list0301 == list0303);\n+\n+  list0301.unique();\n+  VERIFY(list0301 == list0304);\n+}\n+\n+main(int argc, char* argv[])\n+{\n+  test03();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "6a0b36e38797d0b7e4036d9c5667b5bacdea36b1", "filename": "libstdc++-v3/testsuite/23_containers/list/operators/4.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperators%2F4.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+bool test = true;\n+\n+// A comparison predicate to order by rightmost digit.  Tracks call counts for\n+// performance checks.\n+struct CompLastLt\n+{\n+  bool operator()(const int x, const int y) \n+  { ++itsCount; return x % 10 < y % 10; }\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  static int itsCount;\n+};\n+\n+int CompLastLt::itsCount;\n+\n+struct CompLastEq\n+{\n+  bool operator()(const int x, const int y) \n+  { ++itsCount; return x % 10 == y % 10; }\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  static int itsCount;\n+};\n+\n+int CompLastEq::itsCount;\n+\n+// sort(pred) + merge(pred) + unique(pred)\n+// also checks performance requirements\n+void\n+test04()\n+{\n+  const int A[] = {1, 2, 3, 4, 5, 6};\n+  const int B[] = {12, 15, 13, 14, 11};\n+  const int C[] = {11, 12, 13, 14, 15};\n+  const int D[] = {1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6};\n+  const int N = sizeof(A) / sizeof(int);\n+  const int M = sizeof(B) / sizeof(int);\n+  const int Q = sizeof(D) / sizeof(int);\n+\n+  std::list<int> list0401(A, A + N);\n+  std::list<int> list0402(B, B + M);\n+  std::list<int> list0403(C, C + M);\n+  std::list<int> list0404(D, D + Q);\n+  std::list<int> list0405(A, A + N);\n+\n+  // sort B\n+  CompLastLt lt;\n+\n+  CompLastLt::reset();\n+  list0402.sort(lt);\n+  VERIFY(list0402 == list0403);\n+\n+  CompLastLt::reset();\n+  list0401.merge(list0402, lt);\n+  VERIFY(list0401 == list0404);\n+  VERIFY(lt.count() <= (N + M - 1));\n+\n+  CompLastEq eq;\n+\n+  CompLastEq::reset();\n+  list0401.unique(eq);\n+  VERIFY(list0401 == list0405);\n+  VERIFY(eq.count() == (N + M - 1));\n+}\n+\n+main(int argc, char* argv[])\n+{\n+  test04();\n+  return 0;\n+}\n+// vi:set sw=2 ts=2:"}, {"sha": "e358e7a9fe4bc409e3c954a2252f51557728488b", "filename": "libstdc++-v3/testsuite/23_containers/list_ctor.cc", "status": "removed", "additions": 0, "deletions": 332, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9143c6b76b4b7f198901e441cd06357a3b9c573a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9143c6b76b4b7f198901e441cd06357a3b9c573a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_ctor.cc?ref=9143c6b76b4b7f198901e441cd06357a3b9c573a", "patch": "@@ -1,332 +0,0 @@\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 23.2.2.1 list constructors, copy, and assignment\n-\n-#include <list>\n-#include <testsuite_hooks.h>\n-\n-bool test = true;\n-\n-// A nontrivial type.\n-template<typename T>\n-  struct A { };\n-\n-// Another nontrivial type\n-struct B { };\n-\n-// A nontrivial type convertible from an int\n-struct C {\n-  C(int i) : i_(i) { }\n-  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n-  int i_;\n-};\n-\n-// Default constructor, basic properties\n-//\n-// This test verifies the following.\n-// 23.2.2.1     explicit list(const a& = Allocator())\n-// 23.1 (7)     iterator behaviour of empty containers\n-// 23.2.2       iterator begin()\n-// 23.2.2       iterator end()\n-// 23.2.2       size_type size() const\n-// 23.2.2\texistence of required typedefs\n-//\n-void\n-test01()\n-{\n-  std::list< A<B> > list0101;\n-  VERIFY(list0101.begin() == list0101.end());\n-  VERIFY(list0101.size() == 0);\n-\n-  // check type definitions -- will fail compile if missing\n-  typedef std::list< A<B> >::reference              reference;\n-  typedef std::list< A<B> >::const_reference        const_reference;\n-  typedef std::list< A<B> >::iterator               iterator;\n-  typedef std::list< A<B> >::const_iterator         const_iterator;\n-  typedef std::list< A<B> >::size_type              size_type;\n-  typedef std::list< A<B> >::difference_type        difference_type;\n-  typedef std::list< A<B> >::value_type             value_type;\n-  typedef std::list< A<B> >::allocator_type         allocator_type;\n-  typedef std::list< A<B> >::pointer                pointer;\n-  typedef std::list< A<B> >::const_pointer          const_pointer;\n-  typedef std::list< A<B> >::reverse_iterator       reverse_iterator;\n-  typedef std::list< A<B> >::const_reverse_iterator const_reverse_iterator;\n-\n-  // allocator checks?\n-}\n-\n-// Fill constructor\n-//\n-// This test verifies the following.\n-// 23.2.2.1     explicit list(size_type n, const T& v = T(), const a& = Allocator())\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n-//\n-void\n-test02()\n-{\n-  const int LIST_SIZE = 5;\n-  const int INIT_VALUE = 7;\n-  int count;\n-  std::list<int>::const_iterator i;\n-\n-  // nontrivial value_type\n-  std::list< A<B> > list0201(LIST_SIZE);\n-\n-  // default value\n-  std::list<int> list0202(LIST_SIZE);\n-  for (i = list0202.begin(), count = 0;\n-       i != list0202.end();\n-       ++i, ++count)\n-    VERIFY(*i == 0);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0202.size() == LIST_SIZE);\n-\n-  // explicit value\n-  std::list<int> list0203(LIST_SIZE, INIT_VALUE);\n-  for (i = list0203.begin(), count = 0;\n-       i != list0203.end();\n-       ++i, ++count)\n-    VERIFY(*i == INIT_VALUE);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0203.size() == LIST_SIZE);\n-}\n-\n-// Fill constructor disguised as a range constructor\n-void\n-test02D()\n-{\n-  const int LIST_SIZE = 5;\n-  const int INIT_VALUE = 7;\n-  int count = 0;\n-  std::list<C> list0204(LIST_SIZE, INIT_VALUE);\n-  std::list<C>::iterator i = list0204.begin();\n-  for (; i != list0204.end(); ++i, ++count)\n-    VERIFY(*i == INIT_VALUE);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0204.size() == LIST_SIZE);\n-}\n-\n-// Range constructor\n-//\n-// This test verifies the following.\n-// 23.2.2.1     template list(InputIterator f, InputIterator l, const Allocator& a = Allocator())\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n-//\n-void\n-test03()\n-{\n-  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n-  const int N = sizeof(A) / sizeof(int);\n-  int count;\n-  std::list<int>::const_iterator i;\n-\n-  // construct from a dissimilar range\n-  std::list<int> list0301(A, A + N);\n-  for (i = list0301.begin(), count = 0;\n-       i != list0301.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0301.size() == N);\n-\n-  // construct from a similar range\n-  std::list<int> list0302(list0301.begin(), list0301.end());\n-  for (i = list0302.begin(), count = 0;\n-       i != list0302.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0302.size() == N);\n-}\n-\n-// Copy constructor\n-//\n-// This test verifies the following.\n-// 23.2.2.1     list(const list& x)\n-// 23.2.2       reverse_iterator rbegin() \n-// 23.2.2       reverse_iterator rend()\n-// 23.2.2       size_type size() const\n-//\n-void\n-test04()\n-{\n-  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n-  const int N = sizeof(A) / sizeof(int);\n-  int count;\n-  std::list<int>::reverse_iterator i;\n-  std::list<int> list0401(A, A + N);\n-\n-  std::list<int> list0402(list0401);\n-  for (i = list0401.rbegin(), count = N - 1;\n-       i != list0401.rend();\n-       ++i, --count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == -1);\n-  VERIFY(list0401.size() == N);\n-}\n-\n-// Range assign\n-//\n-// This test verifies the following.\n-// 23.2.2.1     void assign(InputIterator f, InputIterator l)\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n-//\n-void\n-test05()\n-{\n-  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n-  const int B[] = {101, 102, 103, 104, 105};\n-  const int N = sizeof(A) / sizeof(int);\n-  const int M = sizeof(B) / sizeof(int);\n-  int count;\n-  std::list<int>::const_iterator i;\n-\n-  std::list<int> list0501;\n-\n-  // make it bigger\n-  list0501.assign(A, A + N);\n-  for (i = list0501.begin(), count = 0;\n-       i != list0501.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0501.size() == N);\n-\n-  // make it smaller\n-  list0501.assign(B, B + M);\n-  for (i = list0501.begin(), count = 0;\n-       i != list0501.end();\n-       ++i, ++count)\n-    VERIFY(*i == B[count]);\n-  VERIFY(count == M);\n-  VERIFY(list0501.size() == M);\n-}\n-\n-// Fill assign\n-//\n-// This test verifies the following.\n-// 23.2.2.1     void assign(size_type n, const T& v)\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n-//\n-void\n-test06()\n-{\n-  const int BIG_LIST_SIZE = 11;\n-  const int BIG_INIT_VALUE = 7;\n-  const int SMALL_LIST_SIZE = 5;\n-  const int SMALL_INIT_VALUE = 17;\n-  int count;\n-  std::list<int>::const_iterator i;\n-\n-  std::list<int> list0601;\n-  VERIFY(list0601.size() == 0);\n-\n-  // make it bigger\n-  list0601.assign(BIG_LIST_SIZE, BIG_INIT_VALUE);\n-  for (i = list0601.begin(), count = 0;\n-       i != list0601.end();\n-       ++i, ++count)\n-    VERIFY(*i == BIG_INIT_VALUE);\n-  VERIFY(count == BIG_LIST_SIZE);\n-  VERIFY(list0601.size() == BIG_LIST_SIZE);\n-\n-  // make it shrink\n-  list0601.assign(SMALL_LIST_SIZE, SMALL_INIT_VALUE);\n-  for (i = list0601.begin(), count = 0;\n-       i != list0601.end();\n-       ++i, ++count)\n-    VERIFY(*i == SMALL_INIT_VALUE);\n-  VERIFY(count == SMALL_LIST_SIZE);\n-  VERIFY(list0601.size() == SMALL_LIST_SIZE);\n-}\n-\n-// Fill Assignment disguised as a Range Assignment\n-void\n-test06D()\n-{\n-  const int LIST_SIZE = 5;\n-  const int INIT_VALUE = 7;\n-  int count = 0;\n-  std::list<C> list0604;\n-  VERIFY(list0604.size() == 0);\n-  \n-  list0604.assign(LIST_SIZE, INIT_VALUE);\n-  std::list<C>::iterator i = list0604.begin();\n-  for (; i != list0604.end(); ++i, ++count)\n-    VERIFY(*i == INIT_VALUE);\n-  VERIFY(count == LIST_SIZE);\n-  VERIFY(list0604.size() == LIST_SIZE);\n-}\n-\n-// Assignment operator\n-//\n-// This test verifies the following.\n-// 23.2.2       operator=(const list& x)\n-// 23.2.2       iterator begin()\n-// 23.2.2       iterator end()\n-// 23.2.2       size_type size() const\n-// 23.2.2       bool operator==(const list& x, const list& y)\n-//\n-void\n-test07()\n-{\n-  const int A[] = {701, 702, 703, 704, 705};\n-  const int N = sizeof(A) / sizeof(int);\n-  int count;\n-  std::list<int>::iterator i;\n-\n-  std::list<int> list0701(A, A + N);\n-  VERIFY(list0701.size() == N);\n-\n-  std::list<int> list0702;\n-  VERIFY(list0702.size() == 0);\n-\n-  list0702 = list0701;\n-  VERIFY(list0702.size() == N);\n-  for (i = list0702.begin(), count = 0;\n-       i != list0702.end();\n-       ++i, ++count)\n-    VERIFY(*i == A[count]);\n-  VERIFY(count == N);\n-  VERIFY(list0702 == list0701);\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02(); \n-  test02D(); \n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-  test06D();\n-  test07();\n-\n-  return !test;\n-}\n-// vi:set sw=2 ts=2:"}, {"sha": "3e9fa498b84b0670e5e34eb7351900d502a7e492", "filename": "libstdc++-v3/testsuite/23_containers/list_modifiers.cc", "status": "removed", "additions": 0, "deletions": 273, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9143c6b76b4b7f198901e441cd06357a3b9c573a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_modifiers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9143c6b76b4b7f198901e441cd06357a3b9c573a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_modifiers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_modifiers.cc?ref=9143c6b76b4b7f198901e441cd06357a3b9c573a", "patch": "@@ -1,273 +0,0 @@\n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 23.2.2.3 list modifiers [lib.list.modifiers]\n-\n-#include <list>\n-#include <testsuite_hooks.h>\n-\n-typedef __gnu_test::copy_tracker  T;\n-\n-bool test = true;\n-\n-\n-// This test verifies the following.\n-//\n-// 23.2.2.3     void push_front(const T& x)\n-// 23.2.2.3     void push_back(const T& x)\n-// 23.2.2.3 (1) iterator and reference non-invalidation \n-// 23.2.2.3 (1) exception effects\n-// 23.2.2.3 (2) complexity requirements\n-//\n-// 23.2.2.3     void pop_front()\n-// 23.2.2.3     void pop_back()\n-// 23.2.2.3 (3) iterator and reference non-invalidation \n-// 23.2.2.3 (5) complexity requirements\n-//\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       iterator end() \n-// 23.2.2       const_reverse_iterator rbegin() const\n-// 23.2.2       _reference front() \n-// 23.2.2       const_reference front() const\n-// 23.2.2       reference back() \n-// 23.2.2       const_reference back() const\n-//\n-void\n-test01()\n-{\n-  std::list<T> list0101;\n-  std::list<T>::const_iterator i;\n-  std::list<T>::const_reverse_iterator j;\n-  std::list<T>::iterator k;\n-  T::reset();\n-\n-  list0101.push_back(T(1));     // list should be [1]\n-  VERIFY(list0101.size() == 1);\n-  VERIFY(T::copyCount() == 1);\n-\n-  k = list0101.end();\n-  --k;\n-  VERIFY(k->id() == 1);\n-  VERIFY(k->id() == list0101.front().id());\n-  VERIFY(k->id() == list0101.back().id());\n-\n-  list0101.push_front(T(2));    // list should be [2 1]\n-  VERIFY(list0101.size() == 2);\n-  VERIFY(T::copyCount() == 2);\n-  VERIFY(k->id() == 1);\n-\n-  list0101.push_back(T(3));     // list should be [2 1 3]\n-  VERIFY(list0101.size() == 3);\n-  VERIFY(T::copyCount() == 3);\n-  VERIFY(k->id() == 1);\n-\n-  try\n-  {\n-    list0101.push_back(T(4, true));\n-    VERIFY((\"no exception thrown\", false));\n-  }\n-  catch (...)\n-  {\n-    VERIFY(list0101.size() == 3);\n-    VERIFY(T::copyCount() == 4);\n-  }\n-\n-  i = list0101.begin();\n-  VERIFY(i->id() == 2);\n-  VERIFY(i->id() == list0101.front().id());\n-\n-  j = list0101.rbegin();\n-  VERIFY(j->id() == 3);\n-  VERIFY(j->id() == list0101.back().id());\n-\n-  ++i;\n-  VERIFY(i->id() == 1);\n-\n-  ++j;\n-  VERIFY(j->id() == 1);\n-\n-  T::reset();\n-\n-  list0101.pop_back();          // list should be [2 1]\n-  VERIFY(list0101.size() == 2);\n-  VERIFY(T::dtorCount() == 1);\n-  VERIFY(i->id() == 1);\n-  VERIFY(k->id() == 1);\n-\n-  list0101.pop_front();          // list should be [1]\n-  VERIFY(list0101.size() == 1);\n-  VERIFY(T::dtorCount() == 2);\n-  VERIFY(i->id() == 1);\n-  VERIFY(k->id() == 1);\n-}\n-\n-// general single insert/erase + swap\n-void\n-test02()\n-{\n-  std::list<T> list0201;\n-  T::reset();\n-\n-  list0201.insert(list0201.begin(), T(1));     // list should be [1]\n-  VERIFY(list0201.size() == 1);\n-  VERIFY(T::copyCount() == 1);\n-\n-  list0201.insert(list0201.end(), T(2));     // list should be [1 2]\n-  VERIFY(list0201.size() == 2);\n-  VERIFY(T::copyCount() == 2);\n-\n-  std::list<T>::iterator i = list0201.begin();\n-  std::list<T>::const_iterator j = i;\n-  VERIFY(i->id() == 1); ++i;\n-  VERIFY(i->id() == 2);\n-\n-  list0201.insert(i, T(3));     // list should be [1 3 2]\n-  VERIFY(list0201.size() == 3);\n-  VERIFY(T::copyCount() == 3);\n-\n-  std::list<T>::const_iterator k = i;\n-  VERIFY(i->id() == 2); --i;\n-  VERIFY(i->id() == 3); --i;\n-  VERIFY(i->id() == 1); \n-  VERIFY(j->id() == 1); \n-\n-  ++i; // will point to '3'\n-  T::reset();\n-  list0201.erase(i); // should be [1 2]\n-  VERIFY(list0201.size() == 2);\n-  VERIFY(T::dtorCount() == 1);\n-  VERIFY(k->id() == 2);\n-  VERIFY(j->id() == 1); \n-\n-  std::list<T> list0202;\n-  T::reset();\n-  VERIFY(list0202.size() == 0);\n-  VERIFY(T::copyCount() == 0);\n-  VERIFY(T::dtorCount() == 0);\n-\n-  // member swap\n-  list0202.swap(list0201);\n-  VERIFY(list0201.size() == 0);\n-  VERIFY(list0202.size() == 2);\n-  VERIFY(T::copyCount() == 0);\n-  VERIFY(T::dtorCount() == 0);\n-\n-  // specialized swap\n-  swap(list0201, list0202);\n-  VERIFY(list0201.size() == 2);\n-  VERIFY(list0202.size() == 0);\n-  VERIFY(T::copyCount() == 0);\n-  VERIFY(T::dtorCount() == 0);\n-}\n-\n-// range and fill insert/erase + clear\n-// missing: o  fill insert disguised as a range insert in all its variants\n-//          o  exception effects\n-void\n-test03()\n-{\n-  std::list<T> list0301;\n-  T::reset();\n-\n-  // fill insert at beginning of list / empty list\n-  list0301.insert(list0301.begin(), 3, T(11)); // should be [11 11 11]\n-  VERIFY(list0301.size() == 3);\n-  VERIFY(T::copyCount() == 3);\n-\n-  // save iterators to verify post-insert validity\n-  std::list<T>::iterator b = list0301.begin();          \n-  std::list<T>::iterator m = list0301.end(); --m;          \n-  std::list<T>::iterator e = list0301.end();\n-\n-  // fill insert at end of list\n-  T::reset();\n-  list0301.insert(list0301.end(), 3, T(13)); // should be [11 11 11 13 13 13]\n-  VERIFY(list0301.size() == 6);\n-  VERIFY(T::copyCount() == 3);\n-  VERIFY(b == list0301.begin() && b->id() == 11);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 11);\n-\n-  // fill insert in the middle of list\n-  ++m;\n-  T::reset();\n-  list0301.insert(m, 3, T(12)); // should be [11 11 11 12 12 12 13 13 13]\n-  VERIFY(list0301.size() == 9);\n-  VERIFY(T::copyCount() == 3);\n-  VERIFY(b == list0301.begin() && b->id() == 11);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-\n-  // single erase\n-  T::reset();\n-  m = list0301.erase(m); // should be [11 11 11 12 12 12 13 13]\n-  VERIFY(list0301.size() == 8);\n-  VERIFY(T::dtorCount() == 1);\n-  VERIFY(b == list0301.begin() && b->id() == 11);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-\n-  // range erase\n-  T::reset();\n-  m = list0301.erase(list0301.begin(), m); // should be [13 13]\n-  VERIFY(list0301.size() == 2);\n-  VERIFY(T::dtorCount() == 6);\n-  VERIFY(m->id() == 13);\n-\n-  // range fill at beginning\n-  const int A[] = {321, 322, 333};\n-  const int N = sizeof(A) / sizeof(int);\n-  T::reset();\n-  b = list0301.begin();          \n-  list0301.insert(b, A, A + N); // should be [321 322 333 13 13]\n-  VERIFY(list0301.size() == 5);\n-  VERIFY(T::copyCount() == 3);\n-  VERIFY(m->id() == 13);\n-  \n-  // range fill at end\n-  T::reset();\n-  list0301.insert(e, A, A + N); // should be [321 322 333 13 13 321 322 333]\n-  VERIFY(list0301.size() == 8);\n-  VERIFY(T::copyCount() == 3);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-  \n-  // range fill in middle\n-  T::reset();\n-  list0301.insert(m, A, A + N); \n-  VERIFY(list0301.size() == 11);\n-  VERIFY(T::copyCount() == 3);\n-  VERIFY(e == list0301.end());\n-  VERIFY(m->id() == 13);\n-\n-  T::reset();\n-  list0301.clear();\n-  VERIFY(list0301.size() == 0);\n-  VERIFY(T::dtorCount() == 11);\n-  VERIFY(e == list0301.end());\n-}\n-\n-int main()\n-{\n-    test01();\n-    test02();\n-    test03();\n-\n-    return !test;\n-}\n-// vi:set sw=2 ts=2:"}, {"sha": "69a59943e1e747ca370b7227b4468b1ca1423af8", "filename": "libstdc++-v3/testsuite/23_containers/list_operators.cc", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9143c6b76b4b7f198901e441cd06357a3b9c573a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9143c6b76b4b7f198901e441cd06357a3b9c573a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist_operators.cc?ref=9143c6b76b4b7f198901e441cd06357a3b9c573a", "patch": "@@ -1,211 +0,0 @@\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 23.2.2.4 list operations [lib.list.ops]\n-\n-#include <list>\n-#include <testsuite_hooks.h>\n-\n-bool test = true;\n-\n-// splice(p, x) + remove + reverse\n-void\n-test01()\n-{\n-  const int K = 417;\n-  const int A[] = {1, 2, 3, 4, 5};\n-  const int B[] = {K, K, K, K, K};\n-  const int N = sizeof(A) / sizeof(int);\n-  const int M = sizeof(B) / sizeof(int);\n-\n-  std::list<int> list0101(A, A + N);\n-  std::list<int> list0102(B, B + M);\n-  std::list<int>::iterator p = list0101.begin();\n-\n-  VERIFY(list0101.size() == N);\n-  VERIFY(list0102.size() == M);\n-\n-  ++p;\n-  list0101.splice(p, list0102); // [1 K K K K K 2 3 4 5]\n-  VERIFY(list0101.size() == N + M);\n-  VERIFY(list0102.size() == 0);\n-\n-  // remove range from middle\n-  list0101.remove(K);\n-  VERIFY(list0101.size() == N);\n-\n-  // remove first element\n-  list0101.remove(1);\n-  VERIFY(list0101.size() == N - 1);\n-\n-  // remove last element\n-  list0101.remove(5);\n-  VERIFY(list0101.size() == N - 2);\n-\n-  // reverse\n-  list0101.reverse();\n-  p = list0101.begin();\n-  VERIFY(*p == 4); ++p;\n-  VERIFY(*p == 3); ++p;\n-  VERIFY(*p == 2); ++p;\n-  VERIFY(p == list0101.end());\n-}\n-\n-// splice(p, x, i) + remove_if + operator==\n-void\n-test02()\n-{\n-  const int A[] = {1, 2, 3, 4, 5};\n-  const int B[] = {2, 1, 3, 4, 5};\n-  const int C[] = {1, 3, 4, 5, 2};\n-  const int N = sizeof(A) / sizeof(int);\n-  std::list<int> list0201(A, A + N);\n-  std::list<int> list0202(A, A + N);\n-  std::list<int> list0203(B, B + N);\n-  std::list<int> list0204(C, C + N);\n-  std::list<int>::iterator i = list0201.begin();\n-\n-  // result should be unchanged\n-  list0201.splice(list0201.begin(), list0201, i);\n-  VERIFY(list0201 == list0202);\n-\n-  // result should be [2 1 3 4 5]\n-  ++i;\n-  list0201.splice(list0201.begin(), list0201, i);\n-  VERIFY(list0201 != list0202);\n-  VERIFY(list0201 == list0203);\n-\n-  // result should be [1 3 4 5 2]\n-  list0201.splice(list0201.end(), list0201, i);\n-  VERIFY(list0201 == list0204);\n-}\n-\n-// splice(p, x, f, l) + sort + merge + unique\n-void\n-test03()\n-{\n-  const int A[] = {103, 203, 603, 303, 403, 503};\n-  const int B[] = {417, 417, 417, 417, 417};\n-  const int E[] = {103, 417, 417, 203, 603, 303, 403, 503};\n-  const int F[] = {103, 203, 303, 403, 417, 417, 503, 603};\n-  const int C[] = {103, 203, 303, 403, 417, 417, 417, 417, 417, 503, 603};\n-  const int D[] = {103, 203, 303, 403, 417, 503, 603};\n-  const int N = sizeof(A) / sizeof(int);\n-  const int M = sizeof(B) / sizeof(int);\n-  const int P = sizeof(C) / sizeof(int);\n-  const int Q = sizeof(D) / sizeof(int);\n-  const int R = sizeof(E) / sizeof(int);\n-\n-  std::list<int> list0301(A, A + N);\n-  std::list<int> list0302(B, B + M);\n-  std::list<int> list0303(C, C + P);\n-  std::list<int> list0304(D, D + Q);\n-  std::list<int> list0305(E, E + R);\n-  std::list<int> list0306(F, F + R);\n-  std::list<int>::iterator p = list0301.begin();\n-  std::list<int>::iterator q = list0302.begin();\n-\n-  ++p; ++q; ++q;\n-  list0301.splice(p, list0302, list0302.begin(), q);\n-  VERIFY(list0301 == list0305);\n-  VERIFY(list0301.size() == N + 2);\n-  VERIFY(list0302.size() == M - 2);\n-\n-  list0301.sort();\n-  VERIFY(list0301 == list0306);\n-\n-  list0301.merge(list0302);\n-  VERIFY(list0301.size() == N + M);\n-  VERIFY(list0302.size() == 0);\n-  VERIFY(list0301 == list0303);\n-\n-  list0301.unique();\n-  VERIFY(list0301 == list0304);\n-}\n-\n-// A comparison predicate to order by rightmost digit.  Tracks call counts for\n-// performance checks.\n-struct CompLastLt\n-{\n-  bool operator()(const int x, const int y) { ++itsCount; return x % 10 < y % 10; }\n-  static int count() { return itsCount; }\n-  static void reset() { itsCount = 0; }\n-  static int itsCount;\n-};\n-\n-int CompLastLt::itsCount;\n-\n-struct CompLastEq\n-{\n-  bool operator()(const int x, const int y) { ++itsCount; return x % 10 == y % 10; }\n-  static int count() { return itsCount; }\n-  static void reset() { itsCount = 0; }\n-  static int itsCount;\n-};\n-\n-int CompLastEq::itsCount;\n-\n-// sort(pred) + merge(pred) + unique(pred)\n-// also checks performance requirements\n-void\n-test04()\n-{\n-  const int A[] = {1, 2, 3, 4, 5, 6};\n-  const int B[] = {12, 15, 13, 14, 11};\n-  const int C[] = {11, 12, 13, 14, 15};\n-  const int D[] = {1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6};\n-  const int N = sizeof(A) / sizeof(int);\n-  const int M = sizeof(B) / sizeof(int);\n-  const int Q = sizeof(D) / sizeof(int);\n-\n-  std::list<int> list0401(A, A + N);\n-  std::list<int> list0402(B, B + M);\n-  std::list<int> list0403(C, C + M);\n-  std::list<int> list0404(D, D + Q);\n-  std::list<int> list0405(A, A + N);\n-\n-  // sort B\n-  CompLastLt lt;\n-\n-  CompLastLt::reset();\n-  list0402.sort(lt);\n-  VERIFY(list0402 == list0403);\n-\n-  CompLastLt::reset();\n-  list0401.merge(list0402, lt);\n-  VERIFY(list0401 == list0404);\n-  VERIFY(lt.count() <= (N + M - 1));\n-\n-  CompLastEq eq;\n-\n-  CompLastEq::reset();\n-  list0401.unique(eq);\n-  VERIFY(list0401 == list0405);\n-  VERIFY(eq.count() == (N + M - 1));\n-}\n-\n-main(int argc, char* argv[])\n-{\n-    test01();\n-    test02();\n-    test03();\n-    test04();\n-\n-    return !test;\n-}\n-// vi:set sw=2 ts=2:"}, {"sha": "67c838f993ae72c9f19005f6fcc164b9fb257ef3", "filename": "libstdc++-v3/testsuite/23_containers/map/insert/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finsert%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finsert%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finsert%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/map_insert.cc"}, {"sha": "03a7860c8bae631346e817eec1c6f546212e6218", "filename": "libstdc++-v3/testsuite/23_containers/map/operators/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/map_operators.cc"}, {"sha": "75b604c80c24dbb86a86250d71e1f047714dea6f", "filename": "libstdc++-v3/testsuite/23_containers/map/operators/1_neg.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/map_operators_neg.cc"}, {"sha": "b82612f5c7fffc1851578405209f31e8917bc094", "filename": "libstdc++-v3/testsuite/23_containers/multiset/insert/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Finsert%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Finsert%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Finsert%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset.cc"}, {"sha": "9cea073706dbe37155864349de91ccf9d16bc216", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/members/7161.cc", "status": "renamed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmembers%2F7161.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmembers%2F7161.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmembers%2F7161.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -21,33 +21,8 @@\n // 23.2.3 container adaptros\n \n #include <queue>\n-#include <stack>\n #include <testsuite_hooks.h>\n \n-// libstdc++/7157\n-void\n-test01()\n-{\n-  std::queue<int> q;\n-\n-  q.push(1);\n-  q.front();\n-  q.pop();\n-}\n-\n-\n-// libstdc++/7158\n-void\n-test02()\n-{\n-  std::stack<int> st;\n-\n-  st.push(1);\n-  st.top() = 42;\n-  st.pop();\n-}\n-\n-\n // libstdc++/7161\n void\n test03()\n@@ -68,12 +43,8 @@ test03()\n     pq.pop();\n }\n \n-\n int main()\n {\n-  test01();\n-  test02();\n   test03();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/adaptors.cc"}, {"sha": "f1da79580452829e094e092837fbeb6a9964b3fd", "filename": "libstdc++-v3/testsuite/23_containers/queue/members/7157.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmembers%2F7157.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmembers%2F7157.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmembers%2F7157.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,41 @@\n+// 2002-06-28 pme\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.3 container adaptros\n+\n+#include <queue>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7157\n+void\n+test01()\n+{\n+  std::queue<int> q;\n+\n+  q.push(1);\n+  q.front();\n+  q.pop();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c3c23741e2e6e32fafab9c2e82f4cbc47c9970e8", "filename": "libstdc++-v3/testsuite/23_containers/set/operators/1_neg.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/set_operators_neg.cc"}, {"sha": "4bfc10154867f5d5e514b35dbe68b13b6ae4fdeb", "filename": "libstdc++-v3/testsuite/23_containers/stack/members/7158.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fmembers%2F7158.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fmembers%2F7158.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fmembers%2F7158.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,41 @@\n+// 2002-06-28 pme\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.3 container adaptros\n+\n+#include <stack>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7158\n+void\n+test02()\n+{\n+  std::stack<int> st;\n+\n+  st.push(1);\n+  st.top() = 42;\n+  st.pop();\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "8d55642035789a05c8182c76dc27c0082ecbd0c0", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/1.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,37 @@\n+// 2002-03-05 Stephen M. Webb  <stephen.webb@bregmasoft.com>\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.5  class vector<bool>\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  std::vector<bool>::iterator i;\n+  if (false)\n+    ++i;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "acc6e45f54531ccce3f1d3116d1bcbb76cec4b40", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/6886.cc", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F6886.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F6886.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F6886.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -23,13 +23,6 @@\n #include <vector>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  std::vector<bool>::iterator i;\n-  if (false)\n-    ++i;\n-}\n-\n // libstdc++/6886\n void test02()\n {\n@@ -56,7 +49,6 @@ void test02()\n \n int main()\n {\n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector_bool.cc"}, {"sha": "af0eb93c9df123f90aa17b80d334b1c0e600b899", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,61 @@\n+// 1999-05-07\n+// bkoz \n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.4.2 vector capacity\n+\n+#include <vector>\n+#include <stdexcept>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+ \n+template<typename T>\n+  struct A { };\n+\n+struct B { };\n+\n+void test01()\n+{\n+  // non POD types\n+  bool test = true;\n+  std::vector< A<B> > vec01;\n+  typedef std::vector< A<B> >::size_type size_type;\n+\n+  size_type sz01 = vec01.capacity();\n+  vec01.reserve(100);\n+  size_type sz02 = vec01.capacity();\n+  VERIFY( sz02 >= sz01 );\n+  \n+  sz01 = vec01.size() + 5;\n+  vec01.resize(sz01);\n+  sz02 = vec01.size();\n+  VERIFY( sz01 == sz02 );\n+\n+  sz01 = vec01.size() - 5;\n+  vec01.resize(sz01);\n+  sz02 = vec01.size();\n+  VERIFY( sz01 == sz02 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "49cfbfa30bd69e4549efa41de6a39795852a38b9", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/2.cc", "status": "renamed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -32,79 +32,6 @@ using __gnu_test::tracker_alloc;\n using __gnu_test::copy_constructor;\n using __gnu_test::assignment_operator;\n using __gnu_test::destructor;\n- \n-template<typename T>\n-  struct A { };\n-\n-struct B { };\n-\n-void test01()\n-{\n-  // non POD types\n-  bool test = true;\n-  std::vector< A<B> > vec01;\n-  typedef std::vector< A<B> >::size_type size_type;\n-\n-  size_type sz01 = vec01.capacity();\n-  vec01.reserve(100);\n-  size_type sz02 = vec01.capacity();\n-  VERIFY( sz02 >= sz01 );\n-  \n-  sz01 = vec01.size() + 5;\n-  vec01.resize(sz01);\n-  sz02 = vec01.size();\n-  VERIFY( sz01 == sz02 );\n-\n-  sz01 = vec01.size() - 5;\n-  vec01.resize(sz01);\n-  sz02 = vec01.size();\n-  VERIFY( sz01 == sz02 );\n-}\n-\n-// libstdc++/8230\n-void test02()\n-{\n-  bool test = true;\n-  {\n-    std::vector<int>  array;\n-    const std::size_t size = array.max_size();\n-    try \n-      {\n-\tarray.reserve(size);\n-      } \n-    catch (const std::length_error& error) \n-      {\n-\ttest &= false;\n-      }\n-    catch (const std::bad_alloc& error)\n-      {\n-\ttest &= true;\n-      }\n-    catch (...)\n-      {\n-\ttest &= false;\n-      }\n-    VERIFY( test );\n-  }\n-\n-  {\n-    std::vector<int>  array;\n-    const std::size_t size = array.max_size() + 1;\n-    try \n-      {\n-\tarray.reserve(size);\n-      } \n-    catch (const std::length_error& error) \n-      {\n-\ttest &= true;\n-      }\n-    catch (...)\n-      {\n-\ttest &= false;\n-      }\n-    VERIFY( test );\n-  }\n-}\n \n // Verifies basic functionality of reserve() with forced reallocation.\n void\n@@ -170,8 +97,6 @@ test_reserve_exception_guarantee()\n \n int main()\n {\n-  test01();\n-  test02();\n   test_reserve();\n   test_reserve_exception_guarantee();\n   return 0;", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector_capacity.cc"}, {"sha": "df7e4b20b440aecb748ef0f6d2e60972ea3e4782", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/8230.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F8230.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F8230.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F8230.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,78 @@\n+// 1999-05-07\n+// bkoz \n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.4.2 vector capacity\n+\n+#include <vector>\n+#include <stdexcept>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8230\n+void test02()\n+{\n+  bool test = true;\n+  {\n+    std::vector<int>  array;\n+    const std::size_t size = array.max_size();\n+    try \n+      {\n+\tarray.reserve(size);\n+      } \n+    catch (const std::length_error& error) \n+      {\n+\ttest &= false;\n+      }\n+    catch (const std::bad_alloc& error)\n+      {\n+\ttest &= true;\n+      }\n+    catch (...)\n+      {\n+\ttest &= false;\n+      }\n+    VERIFY( test );\n+  }\n+\n+  {\n+    std::vector<int>  array;\n+    const std::size_t size = array.max_size() + 1;\n+    try \n+      {\n+\tarray.reserve(size);\n+      } \n+    catch (const std::length_error& error) \n+      {\n+\ttest &= true;\n+      }\n+    catch (...)\n+      {\n+\ttest &= false;\n+      }\n+    VERIFY( test );\n+  }\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "e2f6587ab0085184d17976aa8d57466dd762beb5", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,48 @@\n+// 1999-06-29 bkoz\n+\n+// Copyright (C) 1999-2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.4.1 vector constructors, copy, and assignment\n+\n+#include <vector>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+ \n+template<typename T>\n+  struct A { };\n+\n+struct B { };\n+\n+void test01()\n+{\n+  // 1\n+  std::vector< A<B> > vec01;\n+  std::vector< A<B> > vec02(5);\n+  typedef std::vector< A<B> >::size_type size_type;\n+\n+  vec01 = vec02;\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "03f84d8b231727eb6b180fead36d48ee5e36cac2", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/2.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,49 @@\n+// 1999-06-29 bkoz\n+\n+// Copyright (C) 1999-2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.4.1 vector constructors, copy, and assignment\n+\n+#include <vector>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+ \n+template<typename T>\n+  struct A { };\n+\n+struct B { };\n+\n+// 2\n+template class std::vector<double>;\n+template class std::vector< A<B> >;\n+\n+// libstdc++/102\n+void test02()\n+{\n+  std::vector<int> v1;\n+  std::vector<int> v2(v1);\n+}\n+\n+int main()\n+{\n+  test02(); \n+\n+  return 0;\n+}"}, {"sha": "53afe8f7fdb3301628ff80e20ece681d0d29a2c8", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/3.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F3.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,54 @@\n+// 1999-06-29 bkoz\n+\n+// Copyright (C) 1999-2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.4.1 vector constructors, copy, and assignment\n+\n+#include <vector>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+// test range constructors and range-fill constructor\n+void\n+test03()\n+{\n+  bool test = true;\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int B[] = {7, 7, 7, 7, 7};\n+  const int N = sizeof(A) / sizeof(int);\n+  const int M = sizeof(B) / sizeof(int);\n+  \n+  std::vector<int> v3(A, A + N);\n+  VERIFY(std::equal(v3.begin(), v3.end(), A));\n+  \n+  std::vector<int> v4(v3.begin(), v3.end());\n+  VERIFY(std::equal(v4.begin(), v4.end(), A));\n+  \n+  std::vector<int> v5(M, 7);\n+  VERIFY(std::equal(v5.begin(), v5.end(), B));\n+  VERIFY(std::equal(B, B + M, v5.begin()));\n+}\n+\n+int main()\n+{\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "af7556517f60caee079f36cf96211b0f4eb15a4b", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/4.cc", "status": "renamed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F4.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -30,62 +30,6 @@ using __gnu_test::allocation_tracker;\n using __gnu_test::tracker_alloc;\n using __gnu_test::copy_constructor;\n using __gnu_test::assignment_operator;\n- \n-template<typename T>\n-  struct A { };\n-\n-struct B { };\n-\n-void test01()\n-{\n-  // 1\n-  std::vector< A<B> > vec01;\n-  std::vector< A<B> > vec02(5);\n-  typedef std::vector< A<B> >::size_type size_type;\n-\n-  vec01 = vec02;\n-}\n-\n-// 2\n-template class std::vector<double>;\n-template class std::vector< A<B> >;\n-\n-\n-// libstdc++/102\n-void test02()\n-{\n-  std::vector<int> v1;\n-  std::vector<int> v2 (v1);\n-}\n-\n-// test range constructors and range-fill constructor\n-void\n-test03()\n-{\n-  bool test = true;\n-  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n-  const int B[] = {7, 7, 7, 7, 7};\n-  const int N = sizeof(A) / sizeof(int);\n-  const int M = sizeof(B) / sizeof(int);\n-  \n-  std::vector<int> v3(A, A + N);\n-  VERIFY(std::equal(v3.begin(), v3.end(), A));\n-  \n-  std::vector<int> v4(v3.begin(), v3.end());\n-  VERIFY(std::equal(v4.begin(), v4.end(), A));\n-  \n-  std::vector<int> v5(M, 7);\n-  VERIFY(std::equal(v5.begin(), v5.end(), B));\n-  VERIFY(std::equal(B, B + M, v5.begin()));\n-}\n-\n-// libstdc++/6513\n-void test04()\n-{\n-  const char* c_strings[5] = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n-  std::vector<std::string> strings(c_strings, c_strings + 5);\n-}\n-\n \n // @fn test_default_ctor_exception_gurantee This test verifies that if\n // one of the vector's contained objects throws an exception from its\n@@ -625,10 +569,6 @@ test_range_assign_4_exception_guarantee()\n \n int main()\n {\n-  test01();\n-  test02(); \n-  test03();\n-  test04();\n   test_default_ctor_exception_gurantee();\n   test_copy_ctor_exception_gurantee();\n   test_assignment_operator_1();", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector_ctor.cc"}, {"sha": "76801831cf35ca1d23d88d9f9a2d7f736c2917d9", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/6513.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F6513.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F6513.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F6513.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,40 @@\n+// 1999-06-29 bkoz\n+\n+// Copyright (C) 1999-2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.4.1 vector constructors, copy, and assignment\n+\n+#include <vector>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6513\n+void test04()\n+{\n+  const char* c_strings[5] = { \"1\", \"2\", \"3\", \"4\", \"5\" };\n+  std::vector<std::string> strings(c_strings, c_strings + 5);\n+}\n+\n+int main()\n+{\n+  test04();\n+\n+  return 0;\n+}"}, {"sha": "8171715dddb461509192a1355d30405160233e62", "filename": "libstdc++-v3/testsuite/23_containers/vector/element_access/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Felement_access%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Felement_access%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Felement_access%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector_element_access.cc"}, {"sha": "c8321b3bd0ff711ee4de542591b4dd0464874154", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -0,0 +1,56 @@\n+// 1999-11-09 bkoz\n+\n+// Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.4.3 vector modifiers\n+\n+#include <vector>\n+#include \"testsuite_hooks.h\"\n+\n+bool test = true;\n+\n+template<typename T>\n+  struct A { };\n+\n+struct B { };\n+\n+// vector::insert(iterator, inputiterator first, inputiterator last)\n+void\n+test01()\n+{\n+  // POD types\n+  typedef std::vector<int> \tvec_POD;\n+  vec_POD\tvec01;\n+  int \t\ti01 = 5;\n+  int*\t\tpi01 = &i01;\n+  vec01.insert(vec01.begin(), pi01, pi01 + 1);\n+\n+  // non POD types\n+  typedef std::vector< A<B> >\tvec_nonPOD;\n+  vec_nonPOD\tvec02;\n+  A<B>\t\tnp01;\n+  A<B>*\t\tpnp01 = &np01;\n+  vec02.insert(vec02.begin(), pnp01, pnp01 + 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc8d36d410881e6ea1ebe3006d626f57b8734847", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/2.cc", "status": "renamed", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2F2.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "patch": "@@ -25,30 +25,6 @@\n \n bool test = true;\n \n-template<typename T>\n-  struct A { };\n-\n-struct B { };\n-\n-// vector::insert(iterator, inputiterator first, inputiterator last)\n-void\n-test01()\n-{\n-  // POD types\n-  typedef std::vector<int> \tvec_POD;\n-  vec_POD\tvec01;\n-  int \t\ti01 = 5;\n-  int*\t\tpi01 = &i01;\n-  vec01.insert(vec01.begin(), pi01, pi01 + 1);\n-\n-  // non POD types\n-  typedef std::vector< A<B> >\tvec_nonPOD;\n-  vec_nonPOD\tvec02;\n-  A<B>\t\tnp01;\n-  A<B>*\t\tpnp01 = &np01;\n-  vec02.insert(vec02.begin(), pnp01, pnp01 + 1);\n-}\n-\n // test the assign() function\n void\n test03()\n@@ -81,8 +57,6 @@ test03()\n \n int main()\n {\n-  test01();\n   test03();\n-\n-  return !test;\n+  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector_modifiers.cc"}, {"sha": "3cc6c57ed4253fdc4ad4581757cb672ef39a78f2", "filename": "libstdc++-v3/testsuite/23_containers/vector/resize/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17472bb623e869846f6d555995686bc54e499c10/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2F1.cc?ref=17472bb623e869846f6d555995686bc54e499c10", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector_resize.cc"}]}