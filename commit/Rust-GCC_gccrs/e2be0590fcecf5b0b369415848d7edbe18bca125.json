{"sha": "e2be0590fcecf5b0b369415848d7edbe18bca125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJiZTA1OTBmY2VjZjViMGIzNjk0MTU4NDhkN2VkYmUxOGJjYTEyNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-04-27T13:45:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-04-27T13:45:26Z"}, "message": "[simplify-rtx][trivial] Use std::swap instead of manually swapping\n\n\t* simplify-rtx.c (simplify_gen_binary): Use std::swap instead\n\tof manually swapping.\n\t(simplify_associative_operation): Likewise.\n\t(simplify_binary_operation): Likewise.\n\t(simplify_plus_minus): Likewise.\n\t(simplify_relational_operation): Likewise.\n\t(simplify_ternary_operation): Likewise.\n\nFrom-SVN: r222465", "tree": {"sha": "4dafb957bf5fa0e63d072004cafa5888a2f78a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dafb957bf5fa0e63d072004cafa5888a2f78a17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2be0590fcecf5b0b369415848d7edbe18bca125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2be0590fcecf5b0b369415848d7edbe18bca125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2be0590fcecf5b0b369415848d7edbe18bca125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2be0590fcecf5b0b369415848d7edbe18bca125/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60a4dfd65e3918679ea74e1b27265e68daef2d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a4dfd65e3918679ea74e1b27265e68daef2d8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a4dfd65e3918679ea74e1b27265e68daef2d8d"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "b211083425e2eb91b6c1b6cf6363c76ba25113c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2be0590fcecf5b0b369415848d7edbe18bca125/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2be0590fcecf5b0b369415848d7edbe18bca125/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2be0590fcecf5b0b369415848d7edbe18bca125", "patch": "@@ -1,3 +1,13 @@\n+2015-04-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* simplify-rtx.c (simplify_gen_binary): Use std::swap instead\n+\tof manually swapping.\n+\t(simplify_associative_operation): Likewise.\n+\t(simplify_binary_operation): Likewise.\n+\t(simplify_plus_minus): Likewise.\n+\t(simplify_relational_operation): Likewise.\n+\t(simplify_ternary_operation): Likewise.\n+\n 2015-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/stormy16/predicates.md (xs_hi_general_operand): Delete."}, {"sha": "665421b79a2583f47d5f59c0a3bb7dc1a2f4f8c6", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2be0590fcecf5b0b369415848d7edbe18bca125/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2be0590fcecf5b0b369415848d7edbe18bca125/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e2be0590fcecf5b0b369415848d7edbe18bca125", "patch": "@@ -216,7 +216,7 @@ simplify_gen_binary (enum rtx_code code, machine_mode mode, rtx op0,\n   /* Put complex operands first and constants second if commutative.  */\n   if (GET_RTX_CLASS (code) == RTX_COMM_ARITH\n       && swap_commutative_operands_p (op0, op1))\n-    tem = op0, op0 = op1, op1 = tem;\n+    std::swap (op0, op1);\n \n   return gen_rtx_fmt_ee (code, mode, op0, op1);\n }\n@@ -1926,9 +1926,7 @@ simplify_associative_operation (enum rtx_code code, machine_mode mode,\n       if (! swap_commutative_operands_p (op1, op0))\n \treturn simplify_gen_binary (code, mode, op1, op0);\n \n-      tem = op0;\n-      op0 = op1;\n-      op1 = tem;\n+      std::swap (op0, op1);\n     }\n \n   if (GET_CODE (op0) == code)\n@@ -1977,9 +1975,7 @@ simplify_binary_operation (enum rtx_code code, machine_mode mode,\n   /* Make sure the constant is second.  */\n   if (GET_RTX_CLASS (code) == RTX_COMM_ARITH\n       && swap_commutative_operands_p (op0, op1))\n-    {\n-      tem = op0, op0 = op1, op1 = tem;\n-    }\n+    std::swap (op0, op1);\n \n   trueop0 = avoid_constant_pool_reference (op0);\n   trueop1 = avoid_constant_pool_reference (op1);\n@@ -4265,10 +4261,10 @@ simplify_plus_minus (enum rtx_code code, machine_mode mode, rtx op0,\n \t\t  {\n \t\t    ncode = MINUS;\n \t\t    if (lneg)\n-\t\t      tem = lhs, lhs = rhs, rhs = tem;\n+\t\t      std::swap (lhs, rhs);\n \t\t  }\n \t\telse if (swap_commutative_operands_p (lhs, rhs))\n-\t\t  tem = lhs, lhs = rhs, rhs = tem;\n+\t\t  std::swap (lhs, rhs);\n \n \t\tif ((GET_CODE (lhs) == CONST || CONST_INT_P (lhs))\n \t\t    && (GET_CODE (rhs) == CONST || CONST_INT_P (rhs)))\n@@ -4458,7 +4454,7 @@ simplify_relational_operation (enum rtx_code code, machine_mode mode,\n   /* For the following tests, ensure const0_rtx is op1.  */\n   if (swap_commutative_operands_p (op0, op1)\n       || (op0 == const0_rtx && op1 != const0_rtx))\n-    tem = op0, op0 = op1, op1 = tem, code = swap_condition (code);\n+    std::swap (op0, op1), code = swap_condition (code);\n \n   /* If op0 is a compare, extract the comparison arguments from it.  */\n   if (GET_CODE (op0) == COMPARE && op1 == const0_rtx)\n@@ -4819,7 +4815,7 @@ simplify_const_relational_operation (enum rtx_code code,\n   /* Make sure the constant is second.  */\n   if (swap_commutative_operands_p (op0, op1))\n     {\n-      tem = op0, op0 = op1, op1 = tem;\n+      std::swap (op0, op1);\n       code = swap_condition (code);\n     }\n \n@@ -5180,7 +5176,7 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n       /* Canonicalize the two multiplication operands.  */\n       /* a * -b + c  =>  -b * a + c.  */\n       if (swap_commutative_operands_p (op0, op1))\n-\ttem = op0, op0 = op1, op1 = tem, any_change = true;\n+\tstd::swap (op0, op1), any_change = true;\n \n       if (any_change)\n \treturn gen_rtx_FMA (mode, op0, op1, op2);"}]}