{"sha": "14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiM2U4ZWYwOWI2YjZmMDRhNWU1Zjc2ZDhkNDI3NmQwY2Y1MzM4MA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-01-08T21:00:02Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-01-08T21:00:02Z"}, "message": "s390.c (s390_preferred_reload_class): Never return ADDR_REGS if it isn't a subset of the given class.\n\n\t* config/s390/s390.c (s390_preferred_reload_class): Never\n\treturn ADDR_REGS if it isn't a subset of the given class.\n\t* config/s390/s390.h (REGISTER_MOVE_COST): Penalize not just\n\tFP_REGS, but all superclasses as well.\n\n\t* config/s390/s390.c (s390_function_profiler): Fix thinko.\n\n\t* config/s390/s390.md (cmpdi_ccu_mem, cmpsi_ccu_mem,\n\tcmphi_ccu_mem, cmpqi_ccu_mem): First operand of compare\n\tmust not be a const_int.\n\nFrom-SVN: r48661", "tree": {"sha": "3c32139c2cbf02a17b530bf419a6f5424a584fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c32139c2cbf02a17b530bf419a6f5424a584fc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/comments", "author": null, "committer": null, "parents": [{"sha": "bd917d3a24b22a18501dc5f9c32b54aa32ab3c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd917d3a24b22a18501dc5f9c32b54aa32ab3c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd917d3a24b22a18501dc5f9c32b54aa32ab3c32"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "99c9c0bd4966d43afa2885b1944d751411478ba5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "patch": "@@ -1,3 +1,16 @@\n+2002-01-08  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_preferred_reload_class): Never\n+\treturn ADDR_REGS if it isn't a subset of the given class.\n+\t* config/s390/s390.h (REGISTER_MOVE_COST): Penalize not just\n+\tFP_REGS, but all superclasses as well.\n+\n+\t* config/s390/s390.c (s390_function_profiler): Fix thinko.\n+\n+\t* config/s390/s390.md (cmpdi_ccu_mem, cmpsi_ccu_mem,\n+\tcmphi_ccu_mem, cmpqi_ccu_mem): First operand of compare\n+\tmust not be a const_int.\n+\n 2002-01-08  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (toplev.o): Depend on options.h."}, {"sha": "f1f45ccf8155695db3b3f3c03dd653d95adfc338", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "patch": "@@ -1106,12 +1106,17 @@ s390_preferred_reload_class (op, class)\n \treturn NO_REGS;\n \n       /* If a symbolic constant or a PLUS is reloaded,\n-\t it is most likely being used as an address.  */\n+\t it is most likely being used as an address, so\n+\t prefer ADDR_REGS.  If 'class' is not a superset\n+\t of ADDR_REGS, e.g. FP_REGS, reject this reload.  */\n       case PLUS:\n       case LABEL_REF:\n       case SYMBOL_REF:\n       case CONST:\n-        return ADDR_REGS;\n+\tif (reg_class_subset_p (ADDR_REGS, class))\n+          return ADDR_REGS;\n+\telse\n+\t  return NO_REGS;\n \n       default:\n \tbreak;\n@@ -3730,8 +3735,8 @@ s390_function_profiler (file, labelno)\n \n       output_asm_insn (\"st\\t%0,%1\", op);\n       output_asm_insn (\"bras\\t%2,%l6\", op);\n-      output_asm_insn (\".long\\t%3\", op);\n       output_asm_insn (\".long\\t%4\", op);\n+      output_asm_insn (\".long\\t%3\", op);\n       ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n       output_asm_insn (\"l\\t%0,0(%2)\", op);\n       output_asm_insn (\"l\\t%2,4(%2)\", op);\n@@ -3746,8 +3751,8 @@ s390_function_profiler (file, labelno)\n       output_asm_insn (\"st\\t%0,%1\", op);\n       output_asm_insn (\"bras\\t%2,%l6\", op);\n       ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[5]));\n-      output_asm_insn (\".long\\t%3-%l5\", op);\n       output_asm_insn (\".long\\t%4-%l5\", op);\n+      output_asm_insn (\".long\\t%3-%l5\", op);\n       ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n       output_asm_insn (\"lr\\t%0,%2\", op);\n       output_asm_insn (\"a\\t%0,0(%2)\", op);"}, {"sha": "99a4318f8b880d21911b9fc5a6c3ae5315a00c30", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "patch": "@@ -1228,8 +1228,10 @@ CUMULATIVE_ARGS;\n /* On s390, copy between fprs and gprs is expensive.  */\n \n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)                        \\\n-  (((CLASS1 != CLASS2) &&                                               \\\n-   (CLASS1 == FP_REGS || CLASS2 == FP_REGS)) ? 10 : 1)\n+  ((   (   reg_classes_intersect_p ((CLASS1), GENERAL_REGS)\t\t\\\n+        && reg_classes_intersect_p ((CLASS2), FP_REGS))\t\t\t\\\n+    || (   reg_classes_intersect_p ((CLASS1), FP_REGS)\t\t\t\\\n+        && reg_classes_intersect_p ((CLASS2), GENERAL_REGS))) ? 10 : 1)\n \n \n /* A C expression for the cost of moving data of mode M between a"}, {"sha": "68fe9e71717eb309efa8b1afd0b69c547e71a3da", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=14b3e8ef09b6b6f04a5e5f76d8d4276d0cf53380", "patch": "@@ -365,7 +365,7 @@\n \n (define_insn \"*cmpdi_ccu_mem\"\n   [(set (reg 33)\n-        (compare (match_operand:DI 0 \"s_imm_operand\" \"oQ\")\n+        (compare (match_operand:DI 0 \"s_operand\" \"oQ\")\n                  (match_operand:DI 1 \"s_imm_operand\" \"oQ\")))]\n   \"s390_match_ccmode(insn, CCUmode)\"\n   \"clc\\\\t%O0(8,%R0),%1\"\n@@ -515,7 +515,7 @@\n \n (define_insn \"*cmpsi_ccu_mem\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"s_imm_operand\" \"oQ\")\n+        (compare (match_operand:SI 0 \"s_operand\" \"oQ\")\n                  (match_operand:SI 1 \"s_imm_operand\" \"oQ\")))]\n   \"s390_match_ccmode(insn, CCUmode)\"\n   \"clc\\\\t%O0(4,%R0),%1\"\n@@ -584,7 +584,7 @@\n \n (define_insn \"*cmphi_ccu_mem\"\n   [(set (reg 33)\n-        (compare (match_operand:HI 0 \"s_imm_operand\" \"oQ\")\n+        (compare (match_operand:HI 0 \"s_operand\" \"oQ\")\n                  (match_operand:HI 1 \"s_imm_operand\" \"oQ\")))]\n   \"s390_match_ccmode(insn, CCUmode)\"\n   \"clc\\\\t%O0(2,%R0),%1\"\n@@ -706,7 +706,7 @@\n \n (define_insn \"*cmpqi_ccu_mem\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"s_imm_operand\" \"oQ\")\n+        (compare (match_operand:QI 0 \"s_operand\" \"oQ\")\n                  (match_operand:QI 1 \"s_imm_operand\" \"oQ\")))]\n   \"s390_match_ccmode(insn, CCUmode)\"\n   \"clc\\\\t%O0(1,%R0),%1\""}]}