{"sha": "78c718490bc2843d4dadcef8a0ae14aed1d15a32", "node_id": "C_kwDOANBUbNoAKDc4YzcxODQ5MGJjMjg0M2Q0ZGFkY2VmOGEwYWUxNGFlZDFkMTVhMzI", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-04-11T14:09:05Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-04-11T14:09:05Z"}, "message": "middle-end: Prevent the use of the cond inversion detection code when both conditions are external. [PR105197]\n\nPreviously ifcvt used to enforce that a mask A and the inverse of said mask be\nrepresented as ~A. So for the masks\n\n  _25 = _6 != 0;\n  _44 = _4 != 0;\n\nifcvt would produce for an operation requiring the inverse of said mask\n\n  _26 = ~_25;\n  _43 = ~_44;\n\nbut now that VN is applied to the entire function body we get a simplification\non the mask and produce:\n\n  _26 = _6 == 0;\n  _43 = _4 == 0;\n\nThis in itself is not a problem semantically speaking (though it does create\nmore masks that need to be tracked) but when vectorizing the masked conditional\nwe would still detect _26 and _43 to be inverses of _25 and _44 and mark them\nas requiring their operands be swapped.\n\nWhen vectorizing we swap the operands but don't find the BIT_NOT_EXPR to remove\nand so we leave the condition as is which produces invalid code:\n\n------>vectorizing statement: _ifc__41 = _43 ? 0 : _ifc__40;\ncreated new init_stmt: vect_cst__136 = { 0, ... }\nadd new stmt: _137 = mask__43.26_135 & loop_mask_111\nnote:  add new stmt: vect__ifc__41.27_138 = VEC_COND_EXPR <_137, vect__ifc__40.25_133, vect_cst__136>;\n\nThis fixes disabling the inversion detection code when the loop isn't masked\nsince both conditional would be external.  We'd then not use the new cond_code\nand would incorrectly still swap the operands.\n\nThe resulting code is also better than GCC-11 with most operations now\npredicated on the loop mask rather than a ptrue.\n\ngcc/ChangeLog:\n\n\tPR target/105197\n\t* tree-vect-stmts.cc (vectorizable_condition): Prevent cond swap when\n\tnot masked.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/105197\n\t* gcc.target/aarch64/sve/pr105197-1.c: New test.\n\t* gcc.target/aarch64/sve/pr105197-2.c: New test.", "tree": {"sha": "29c5af69f5a2200a85e600fda6c1baed48f26ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29c5af69f5a2200a85e600fda6c1baed48f26ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78c718490bc2843d4dadcef8a0ae14aed1d15a32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c718490bc2843d4dadcef8a0ae14aed1d15a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c718490bc2843d4dadcef8a0ae14aed1d15a32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c718490bc2843d4dadcef8a0ae14aed1d15a32/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790b02af6a1fcfa07dba6129909b3578a55a51fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790b02af6a1fcfa07dba6129909b3578a55a51fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790b02af6a1fcfa07dba6129909b3578a55a51fa"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "e33532d8bed5f90f216817a6692544eae1f3ae3f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr105197-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c718490bc2843d4dadcef8a0ae14aed1d15a32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr105197-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c718490bc2843d4dadcef8a0ae14aed1d15a32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr105197-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr105197-1.c?ref=78c718490bc2843d4dadcef8a0ae14aed1d15a32", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-additional-options \"-O -ftree-vectorize\" } */\n+\n+unsigned char arr_7[9][3];\n+unsigned char (*main_arr_7)[3] = arr_7;\n+int main() {\n+  char arr_2[9];\n+  int arr_6[9];\n+  int x;\n+  unsigned i;\n+  for (i = 0; i < 9; ++i) {\n+    arr_2[i] = 21;\n+    arr_6[i] = 6;\n+  }\n+  for (i = arr_2[8] - 21; i < 2; i++)\n+    x = arr_6[i] ? (main_arr_7[8][i] ? main_arr_7[8][i] : 8) : (char)arr_6[i];\n+  if (x != 8)\n+    __builtin_abort ();\n+}\n+"}, {"sha": "5eec5cd837d786390c441fc5ddd2f93c1374d3a4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr105197-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c718490bc2843d4dadcef8a0ae14aed1d15a32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr105197-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c718490bc2843d4dadcef8a0ae14aed1d15a32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr105197-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr105197-2.c?ref=78c718490bc2843d4dadcef8a0ae14aed1d15a32", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O -ftree-vectorize\" } */\n+\n+void f(int n, int y, char *arr_2, char *arr_6) {\n+  for (int i = y; i < n; i++)\n+    arr_6[i] = arr_6[i] ? (arr_2[i] ? 3 : 8) : 1;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tand\\tp[0-9]+.b} } } */"}, {"sha": "c9534ef9b1eba4ec0334de59cb4794b3f578d34c", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c718490bc2843d4dadcef8a0ae14aed1d15a32/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c718490bc2843d4dadcef8a0ae14aed1d15a32/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=78c718490bc2843d4dadcef8a0ae14aed1d15a32", "patch": "@@ -10512,7 +10512,7 @@ vectorizable_condition (vec_info *vinfo,\n \t      bool honor_nans = HONOR_NANS (TREE_TYPE (cond.op0));\n \t      tree_code orig_code = cond.code;\n \t      cond.code = invert_tree_comparison (cond.code, honor_nans);\n-\t      if (loop_vinfo->scalar_cond_masked_set.contains (cond))\n+\t      if (!masked && loop_vinfo->scalar_cond_masked_set.contains (cond))\n \t\t{\n \t\t  masks = &LOOP_VINFO_MASKS (loop_vinfo);\n \t\t  cond_code = cond.code;"}]}