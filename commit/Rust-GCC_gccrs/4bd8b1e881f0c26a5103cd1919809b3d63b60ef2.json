{"sha": "4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "node_id": "C_kwDOANBUbNoAKDRiZDhiMWU4ODFmMGMyNmE1MTAzY2QxOTE5ODA5YjNkNjNiNjBlZjI", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-26T14:55:21Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-01-13T10:52:35Z"}, "message": "Document current '-Wuninitialized'/'-Wmaybe-uninitialized' diagnostics for OpenACC test cases\n\n... including \"note: '[...]' was declared here\" emitted since recent\ncommit 9695e1c23be5b5c55d572ced152897313ddb96ae\n\"Improve -Wuninitialized note location\".\n\nFor those that seemed incorrect to me, I've placed XFAILed 'dg-bogus'es,\nincluding one more instance of PR77504 etc., and several instances where\nfor \"local variables\" of reference-data-type reductions (etc.?) we emit\nbogus (?) diagnostics.\n\nFor implicit data clauses (including 'firstprivate'), we seem to be missing\ndiagnostics, so I've placed XFAILed 'dg-warning's.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/builtin-goacc-parlevel-id-size.c: Document\n\tcurrent '-Wuninitialized' diagnostics.\n\t* c-c++-common/goacc/mdc-1.c: Likewise.\n\t* c-c++-common/goacc/nested-reductions-1-kernels.c: Likewise.\n\t* c-c++-common/goacc/nested-reductions-1-parallel.c: Likewise.\n\t* c-c++-common/goacc/nested-reductions-1-routine.c: Likewise.\n\t* c-c++-common/goacc/nested-reductions-2-kernels.c: Likewise.\n\t* c-c++-common/goacc/nested-reductions-2-parallel.c: Likewise.\n\t* c-c++-common/goacc/nested-reductions-2-routine.c: Likewise.\n\t* c-c++-common/goacc/uninit-dim-clause.c: Likewise.\n\t* c-c++-common/goacc/uninit-firstprivate-clause.c: Likewise.\n\t* c-c++-common/goacc/uninit-if-clause.c: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-1.f90: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-2.f90: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-3.f90: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-4.f90: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-5.f90: Likewise.\n\t* gfortran.dg/goacc/derived-chartypes-1.f90: Likewise.\n\t* gfortran.dg/goacc/derived-chartypes-2.f90: Likewise.\n\t* gfortran.dg/goacc/derived-chartypes-3.f90: Likewise.\n\t* gfortran.dg/goacc/derived-chartypes-4.f90: Likewise.\n\t* gfortran.dg/goacc/derived-classtypes-1.f95: Likewise.\n\t* gfortran.dg/goacc/derived-types-2.f90: Likewise.\n\t* gfortran.dg/goacc/host_data-tree.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-tree.f95: Likewise.\n\t* gfortran.dg/goacc/modules.f95: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-1-kernels.f90: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-1-parallel.f90: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-1-routine.f90: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-2-kernels.f90: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-2-parallel.f90: Likewise.\n\t* gfortran.dg/goacc/nested-reductions-2-routine.f90: Likewise.\n\t* gfortran.dg/goacc/parallel-tree.f95: Likewise.\n\t* gfortran.dg/goacc/pr93464.f90: Likewise.\n\t* gfortran.dg/goacc/privatization-1-compute-loop.f90: Likewise.\n\t* gfortran.dg/goacc/privatization-1-compute.f90: Likewise.\n\t* gfortran.dg/goacc/privatization-1-routine_gang-loop.f90:\n\tLikewise.\n\t* gfortran.dg/goacc/privatization-1-routine_gang.f90: Likewise.\n\t* gfortran.dg/goacc/uninit-dim-clause.f95: Likewise.\n\t* gfortran.dg/goacc/uninit-firstprivate-clause.f95: Likewise.\n\t* gfortran.dg/goacc/uninit-if-clause.f95: Likewise.\n\t* gfortran.dg/goacc/uninit-use-device-clause.f95: Likewise.\n\t* gfortran.dg/goacc/wait.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/vred2d-128.c: Document\n\tcurrent '-Wuninitialized' diagnostics.\n\t* testsuite/libgomp.oacc-fortran/data-5.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/gemm-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/gemm.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/optional-reduction.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/pr70643.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/pr96628-part1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-5.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reference-reductions.f90:\n\tLikewise.", "tree": {"sha": "8c6905ae40aa7cdfea7cffed18d4a260b7f291ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c6905ae40aa7cdfea7cffed18d4a260b7f291ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0d23722e8b8daa54203f537729f578f3809c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0d23722e8b8daa54203f537729f578f3809c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0d23722e8b8daa54203f537729f578f3809c15"}], "stats": {"total": 380, "additions": 368, "deletions": 12}, "files": [{"sha": "19d6c21d0776f481a26677d3fd9a78dcd00a3f35", "filename": "gcc/testsuite/c-c++-common/goacc/builtin-goacc-parlevel-id-size.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fbuiltin-goacc-parlevel-id-size.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,13 +1,16 @@\n /* { dg-do compile }  */\n /* { dg-additional-options \"-O2\" }  */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n #include \"../../../../include/gomp-constants.h\"\n \n #pragma acc routine\n int\n foo (void)\n {\n   int res;\n+  /* { dg-note {'res' was declared here} {} { target *-*-* } .-1 } */\n   \n   __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n   __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n@@ -18,6 +21,7 @@ foo (void)\n   __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n \n   res += __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+  /* { dg-warning {'res' is used uninitialized} {} { target *-*-* } .-1 } */\n   res += __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n   res += __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n \n@@ -34,6 +38,8 @@ foo2 (void)\n   int res;\n \n #pragma acc parallel\n+  /* implicit 'firstprivate (res)'\n+     { dg-warning {'res' is used uninitialized} TODO { xfail *-*-* } .-2 } */\n   {\n     __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n     __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n@@ -59,6 +65,8 @@ foo3 (void)\n   int res;\n \n #pragma acc kernels\n+  /* implicit 'copy (res)'\n+     { dg-warning {'res' is used uninitialized} TODO { xfail *-*-* } .-2 } */\n   {\n     __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n     __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);"}, {"sha": "923a4ea73a39760e56c241e896c49561f12cac33", "filename": "gcc/testsuite/c-c++-common/goacc/mdc-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -5,6 +5,8 @@\n    { dg-do compile { target { lp64 || llp64 } } } */\n /* { dg-additional-options \"-fdump-tree-omplower\" } */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n void\n t1 ()\n {\n@@ -13,10 +15,12 @@ t1 ()\n   } s;\n \n   int *a, *z;\n+  /* { dg-note {'z' was declared here} {} { target *-*-* } .-1 } */\n \n #pragma acc enter data copyin(s)\n   {\n #pragma acc data copy(s.a[0:10]) copy(z[0:10])\n+    /* { dg-warning {'z' is used uninitialized} {} { target *-*-* } .-1 } */\n     {\n       s.e = z;\n #pragma acc parallel loop attach(s.e)"}, {"sha": "e669369f13458c6aac909f8beadd0d60bf3b652e", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-kernels.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-kernels.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n /* See also 'gfortran.dg/goacc/nested-reductions-1-kernels.f90'. */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n void acc_kernels (void)\n {\n   int i, j, k, sum, diff;\n \n   #pragma acc kernels\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   {\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n@@ -74,6 +79,9 @@ void acc_kernels_loop (void)\n   int i, j, k, l, sum, diff;\n \n   #pragma acc kernels loop\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     #pragma acc loop reduction(+:sum)\n@@ -151,6 +159,9 @@ void acc_kernels_loop_reduction (void)\n   int i, j, k, sum, diff;\n \n   #pragma acc kernels loop reduction(+:sum)\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     for (i = 0; i < 10; i++)"}, {"sha": "1182385a6a7f7cd8c2e8a8fbd472cdd0749cce02", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-parallel.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-parallel.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n /* See also 'gfortran.dg/goacc/nested-reductions-1-parallel.f90'. */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n void acc_parallel (void)\n {\n   int i, j, k, sum, diff;\n \n   #pragma acc parallel\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   {\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n@@ -74,6 +79,9 @@ void acc_parallel_loop (void)\n   int i, j, k, l, sum, diff;\n \n   #pragma acc parallel loop\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     #pragma acc loop reduction(+:sum)\n@@ -143,6 +151,9 @@ void acc_parallel_reduction (void)\n   int i, j, k, sum, diff;\n \n   #pragma acc parallel reduction(+:sum)\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   {\n     for (i = 0; i < 10; i++)\n       for (j = 0; j < 10; j++)\n@@ -233,6 +244,9 @@ void acc_parallel_loop_reduction (void)\n   int i, j, k, sum, diff;\n \n   #pragma acc parallel loop reduction(+:sum)\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     for (i = 0; i < 10; i++)"}, {"sha": "df72cd1e61609d2e73e59258c8b2465b67c9363b", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-1-routine.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-1-routine.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,6 +2,8 @@\n \n /* See also 'gfortran.dg/goacc/nested-reductions-1-routine.f90'. */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n #pragma acc routine gang\n void acc_routine (void)\n {\n@@ -10,6 +12,7 @@ void acc_routine (void)\n   {\n     /* { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 } */\n     #pragma acc loop reduction(+:sum)\n+    /* { dg-warning {'sum' is used uninitialized} {} { target *-*-* } .-1 } */\n     for (i = 0; i < 10; i++)\n       for (j = 0; j < 10; j++)\n         for (k = 0; k < 10; k++)\n@@ -57,6 +60,7 @@ void acc_routine (void)\n \n     /* { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 } */\n     #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    /* { dg-warning {'diff' is used uninitialized} {} { target *-*-* } .-1 } */\n     for (i = 0; i < 10; i++)\n       {\n         #pragma acc loop reduction(+:sum)"}, {"sha": "16a870b4a48bfd5261b543698b9000924ef30064", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-kernels.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-kernels.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n /* See also 'gfortran.dg/goacc/nested-reductions-2-kernels.f90'. */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n void acc_kernels (void)\n {\n   int i, j, k, l, sum, diff;\n \n   #pragma acc kernels\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   {\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n@@ -99,6 +104,9 @@ void acc_kernels_loop (void)\n   int i, j, k, l, sum, diff;\n \n   #pragma acc kernels loop\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     #pragma acc loop reduction(+:sum)\n@@ -209,6 +217,9 @@ void acc_kernels_loop_reduction (void)\n   int i, j, k, l, sum, diff;\n \n   #pragma acc kernels loop reduction(+:sum)\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }"}, {"sha": "840ed86adef8fa084fa04c61da9a0a23388bf040", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-parallel.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-parallel.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n /* See also 'gfortran.dg/goacc/nested-reductions-2-parallel.f90'. */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n void acc_parallel (void)\n {\n   int i, j, k, l, sum, diff;\n \n   #pragma acc parallel\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   {\n     #pragma acc loop reduction(+:sum)\n     for (i = 0; i < 10; i++)\n@@ -99,6 +104,9 @@ void acc_parallel_loop (void)\n   int i, j, k, l, sum, diff;\n \n   #pragma acc parallel loop\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     #pragma acc loop reduction(+:sum)\n@@ -201,6 +209,9 @@ void acc_parallel_reduction (void)\n   int i, j, k, l, sum, diff;\n \n   #pragma acc parallel reduction(+:sum)\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   {\n     #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n     for (i = 0; i < 10; i++)\n@@ -293,6 +304,9 @@ void acc_parallel_loop_reduction (void)\n   int i, j, k, l, sum, diff;\n \n   #pragma acc parallel loop reduction(+:sum)\n+  /* implicit 'copy (sum, diff)'\n+     { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+     { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 } */\n   for (int h = 0; h < 10; ++h)\n   {\n     #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }"}, {"sha": "dd03c8597c5075ede8e21b24774fedc6cc1a7911", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-2-routine.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-2-routine.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,6 +2,8 @@\n \n /* See also 'gfortran.dg/goacc/nested-reductions-2-routine.f90'. */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n #pragma acc routine gang\n void acc_routine (void)\n {\n@@ -10,6 +12,7 @@ void acc_routine (void)\n   {\n     /* { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 } */\n     #pragma acc loop reduction(+:sum)\n+    /* { dg-warning {'sum' is used uninitialized} {} { target *-*-* } .-1 } */\n     for (i = 0; i < 10; i++)\n       #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       for (j = 0; j < 10; j++)\n@@ -83,6 +86,7 @@ void acc_routine (void)\n \n     /* { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 } */\n     #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    /* { dg-warning {'diff' is used uninitialized} {} { target *-*-* } .-1 } */\n     for (i = 0; i < 10; i++)\n       {\n         #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }"}, {"sha": "8368ccdc7f80b80cdc7085523beee76b395bada7", "filename": "gcc/testsuite/c-c++-common/goacc/uninit-dim-clause.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -6,6 +6,9 @@\n void acc_parallel()\n {\n   int i, j, k;\n+  /* { dg-note {'i' was declared here} {} { target *-*-* } .-1 } */\n+  /* { dg-note {'j' was declared here} {} { target *-*-* } .-2 } */\n+  /* { dg-note {'k' was declared here} {} { target *-*-* } .-3 } */\n \n   #pragma acc parallel num_gangs(i) /* { dg-warning \"is used uninitialized\" } */\n   /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 } */\n@@ -23,6 +26,9 @@ void acc_parallel()\n void acc_kernels()\n {\n   int i, j, k;\n+  /* { dg-note {'i' was declared here} {} { target *-*-* } .-1 } */\n+  /* { dg-note {'j' was declared here} {} { target *-*-* } .-2 } */\n+  /* { dg-note {'k' was declared here} {} { target *-*-* } .-3 } */\n \n   #pragma acc kernels num_gangs(i) /* { dg-warning \"is used uninitialized\" } */\n   ;"}, {"sha": "bfe1a11aa2b43f26dc5682caec8ebee9e645c595", "filename": "gcc/testsuite/c-c++-common/goacc/uninit-firstprivate-clause.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-firstprivate-clause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-firstprivate-clause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-firstprivate-clause.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -17,6 +17,7 @@ void\n foo2 (void)\n {\n   int i;\n+  /* { dg-note {'i' was declared here} {} { target *-*-* } .-1 } */\n \n #pragma acc parallel firstprivate (i) /* { dg-warning \"is used uninitialized\" } */\n   {"}, {"sha": "de410e5e6ecb521f1f9f319f2c19247c9f868727", "filename": "gcc/testsuite/c-c++-common/goacc/uninit-if-clause.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-if-clause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-if-clause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-if-clause.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -7,7 +7,15 @@ int\n main (void)\n {\n   int l, l2, l3, l4;\n+  /* { dg-note {'l' was declared here} {} { target *-*-* } .-1 } */\n+  /* { dg-note {'l2' was declared here} {} { target *-*-* } .-2 } */\n+  /* { dg-note {'l3' was declared here} {} { target *-*-* } .-3 } */\n+  /* { dg-note {'l4' was declared here} {} { target *-*-* } .-4 } */\n   bool b, b2, b3, b4;\n+  /* { dg-note {'b' was declared here} {} { target *-*-* } .-1 } */\n+  /* { dg-note {'b2' was declared here} {} { target *-*-* } .-2 } */\n+  /* { dg-note {'b3' was declared here} {} { target *-*-* } .-3 } */\n+  /* { dg-note {'b4' was declared here} {} { target *-*-* } .-4 } */\n   int i, i2;\n \n   #pragma acc parallel if(l) /* { dg-warning \"is used uninitialized\" } */"}, {"sha": "136e42acd5930b959df2c2d38e621b2e0ee8aef8", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-1.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,10 +1,15 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type t\n    integer, allocatable :: A(:,:)\n end type t\n \n type(t), allocatable :: b(:)\n+! { dg-note {'b' declared here} {} { target *-*-* } .-1 }\n \n !$acc update host(b)\n+! { dg-warning {'b\\.dim\\[0\\]\\.ubound' is used uninitialized} {} { target *-*-* } .-1 }\n+! { dg-warning {'b\\.dim\\[0\\]\\.lbound' is used uninitialized} {} { target *-*-* } .-2 }\n !$acc update host(b(:))\n !$acc update host(b(1)%A)\n !$acc update host(b(1)%A(:,:))"}, {"sha": "58f4ce84a2c1c42cb8c8ab378a2533deb6ddb1aa", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-2.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-2.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,10 +1,15 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type t\n    integer, allocatable :: A(:,:)\n end type t\n \n type(t), allocatable :: b(:)\n+! { dg-note {'b' declared here} {} { target *-*-* } .-1 }\n \n !$acc update host(b(::2))\n+! { dg-warning {'b\\.dim\\[0\\]\\.ubound' is used uninitialized} {} { target *-*-* } .-1 }\n+! { dg-warning {'b\\.dim\\[0\\]\\.lbound' is used uninitialized} {} { target *-*-* } .-2 }\n !$acc update host(b(1)%A(::3,::4))\n end\n "}, {"sha": "d1fa010c73ce53254f353f1a573f67d971518768", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-3.f90", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-3.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,3 +1,5 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type t2\n    integer :: A(200,200)\n end type t2\n@@ -6,9 +8,15 @@\n end type t\n \n type(t2),allocatable :: c(:)\n+! { dg-note {'c' declared here} {} { target *-*-* } .-1 }\n+! { dg-note {'c\\.offset' was declared here} {} { target *-*-* } .-2 }\n type(t), allocatable :: d(:)\n+! { dg-note {'d' declared here} {} { target *-*-* } .-1 }\n+! { dg-note {'d\\.offset' was declared here} {} { target *-*-* } .-2 }\n \n !$acc exit data delete(c(1)%A)\n+! { dg-warning {'c\\.offset' is used uninitialized} {} { target *-*-* } .-1 }\n !$acc exit data delete(d(1)%A)\n+! { dg-warning {'d\\.offset' is used uninitialized} {} { target *-*-* } .-1 }\n \n end"}, {"sha": "ac005356ed6228da4c4e5d1e7a1e7b34bf7f6217", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-4.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-4.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,3 +1,5 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type t4\n   integer, allocatable :: quux(:)\n end type t4\n@@ -12,7 +14,10 @@\n end type t\n \n type(t), allocatable :: c(:)\n+! { dg-note {'c' declared here} {} { target *-*-* } .-1 }\n \n !$acc enter data copyin(c(5)%foo(4)%bar(3)%qux(2)%quux(:))\n+! { dg-warning {'c\\.offset' is used uninitialized} {} { target *-*-* } .-1 }\n !$acc exit data delete(c(5)%foo(4)%bar(3)%qux(2)%quux(:))\n+! { dg-warning {'c\\.offset' is used uninitialized} {} { target *-*-* } .-1 }\n end"}, {"sha": "ba60ca7b8fab5f96045e655b75206fbac5d91baa", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-5.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-5.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,3 +1,5 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type t2\n   integer :: bar\n end type t2\n@@ -6,7 +8,9 @@\n end type t\n \n type(t) :: c\n+! { dg-note {'c' declared here} {} { target *-*-* } .-1 }\n \n !$acc enter data copyin(c%foo)\n+! { dg-warning {'c\\.foo' is used uninitialized} {} { target *-*-* } .-1 }\n \n end"}, {"sha": "ac458565ff12ba260ad9075854f3e1981506d790", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-chartypes-1.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-1.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,3 +1,5 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type :: type1\n   character(len=35) :: a\n end type type1"}, {"sha": "f4f791dba7473ced5bb7c99ed6cc2a437272c2d6", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-chartypes-2.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-2.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,3 +1,5 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type :: type1\n   character(len=35,kind=4) :: a\n end type type1"}, {"sha": "a523d4fb5c858656c51112bfce8ff6a482b024d6", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-chartypes-3.f90", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-3.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,5 +1,7 @@\n ! { dg-additional-options \"-fdump-tree-gimple\" }\n \n+! { dg-additional-options -Wuninitialized }\n+\n type :: type1\n   character(len=35) :: a\n end type type1\n@@ -12,10 +14,16 @@\n type(type2) :: bar\n \n type(type1), pointer :: pfoo\n+! { dg-note {'pfoo' was declared here} {} { target *-*-* } .-1 }\n type(type2), pointer :: pbar\n+! { dg-note {'pbar' was declared here} {} { target *-*-* } .-1 }\n \n class(type1), pointer :: cfoo\n+! { dg-note {'cfoo' declared here} {} { target *-*-* } .-1 }\n+! { dg-note {'cfoo\\._data' was declared here} {} { target *-*-* } .-2 }\n class(type2), pointer :: cbar\n+! { dg-note {'cbar' declared here} {} { target *-*-* } .-1 }\n+! { dg-note {'cbar\\._data' was declared here} {} { target *-*-* } .-2 }\n \n class(type1), allocatable :: acfoo\n class(type2), allocatable :: acbar\n@@ -24,10 +32,14 @@\n !$acc enter data copyin(bar%b)\n \n !$acc enter data copyin(pfoo%a)\n+! { dg-warning {'pfoo' is used uninitialized} {} { target *-*-* } .-1 }\n !$acc enter data copyin(pbar%b)\n+! { dg-warning {'pbar' is used uninitialized} {} { target *-*-* } .-1 }\n \n !$acc enter data copyin(cfoo%a)\n+! { dg-warning {'cfoo\\._data' is used uninitialized} {} { target *-*-* } .-1 }\n !$acc enter data copyin(cbar%b)\n+! { dg-warning {'cbar\\._data' is used uninitialized} {} { target *-*-* } .-1 }\n \n !$acc enter data copyin(acfoo%a)\n !$acc enter data copyin(acbar%b)"}, {"sha": "a95e3fa3e1a020c30c80379592dc34420726bd26", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-chartypes-4.f90", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-4.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,5 +1,7 @@\n ! { dg-additional-options \"-fdump-tree-gimple\" }\n \n+! { dg-additional-options -Wuninitialized }\n+\n type :: type1\n   character(len=35,kind=4) :: a\n end type type1\n@@ -12,10 +14,16 @@\n type(type2) :: bar\n \n type(type1), pointer :: pfoo\n+! { dg-note {'pfoo' was declared here} {} { target *-*-* } .-1 }\n type(type2), pointer :: pbar\n+! { dg-note {'pbar' was declared here} {} { target *-*-* } .-1 }\n \n class(type1), pointer :: cfoo\n+! { dg-note {'cfoo' declared here} {} { target *-*-* } .-1 }\n+! { dg-note {'cfoo\\._data' was declared here} {} { target *-*-* } .-2 }\n class(type2), pointer :: cbar\n+! { dg-note {'cbar' declared here} {} { target *-*-* } .-1 }\n+! { dg-note {'cbar\\._data' was declared here} {} { target *-*-* } .-2 }\n \n class(type1), allocatable :: acfoo\n class(type2), allocatable :: acbar\n@@ -24,10 +32,14 @@\n !$acc enter data copyin(bar%b)\n \n !$acc enter data copyin(pfoo%a)\n+! { dg-warning {'pfoo' is used uninitialized} {} { target *-*-* } .-1 }\n !$acc enter data copyin(pbar%b)\n+! { dg-warning {'pbar' is used uninitialized} {} { target *-*-* } .-1 }\n \n !$acc enter data copyin(cfoo%a)\n+! { dg-warning {'cfoo\\._data' is used uninitialized} {} { target *-*-* } .-1 }\n !$acc enter data copyin(cbar%b)\n+! { dg-warning {'cbar\\._data' is used uninitialized} {} { target *-*-* } .-1 }\n \n !$acc enter data copyin(acfoo%a)\n !$acc enter data copyin(acbar%b)"}, {"sha": "6d880391febded45e4b33e16627905f7778ce804", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-classtypes-1.f95", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-classtypes-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-classtypes-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-classtypes-1.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,3 +1,5 @@\n+! { dg-additional-options -Wuninitialized }\n+\n type :: type1\n   integer :: a\n end type type1"}, {"sha": "505e0b493b9f93546f067840367fb09756042986", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-types-2.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-types-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-types-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-types-2.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,3 +1,5 @@\n+! { dg-additional-options -Wuninitialized }\n+\n module bar\n   type :: type1\n      real(8), pointer, public :: p(:) => null()"}, {"sha": "9517ce449eb7dbb3c052a44afcbfc08ff9169c81", "filename": "gcc/testsuite/gfortran.dg/goacc/host_data-tree.f95", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fhost_data-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fhost_data-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fhost_data-tree.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,10 +1,14 @@\n ! { dg-additional-options \"-fdump-tree-original -fdump-tree-gimple\" }\n \n+! { dg-additional-options -Wuninitialized }\n+\n program test\n   implicit none\n   integer, pointer :: p\n+  ! { dg-note {'p' was declared here} {} { target *-*-* } .-1 }\n \n   !$acc host_data use_device(p)\n+  ! { dg-warning {'p' is used uninitialized} {} { target *-*-* } .-1 }\n   ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data use_device_ptr\\\\(p\\\\)$\" 1 \"original\" } }\n   ! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data use_device_ptr\\\\(p\\\\)$\" 1 \"gimple\" } }\n   !$acc end host_data"}, {"sha": "ceb07fbb9e91ea7687f57dc8712ca314f2724c0e", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-tree.f95", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -3,16 +3,20 @@\n ! { dg-additional-options \"--param=openacc-kernels=decompose\" }\n ! { dg-additional-options \"-fdump-tree-omp_oacc_kernels_decompose\" }\n \n+! { dg-additional-options -Wuninitialized }\n+\n program test\n   implicit none\n   integer :: q, i, j, k, m, n, o, p, r, s, t, u, v, w\n+  ! { dg-note {'i' was declared here} {} { target *-*-* } .-1 }\n   logical :: l = .true.\n \n   !$acc kernels if(l) async num_gangs(i) num_workers(i) vector_length(i) &\n   !$acc copy(i), copyin(j), copyout(k), create(m) &\n   !$acc no_create(n) &\n   !$acc present(o), pcopy(p), pcopyin(r), pcopyout(s), pcreate(t) &\n   !$acc deviceptr(u)\n+  ! { dg-warning {'i' is used uninitialized} {} { target *-*-* } .-1 }\n   !$acc end kernels\n \n end program test"}, {"sha": "1e8d826415536d1c48596bafb47a1e5bbf71e772", "filename": "gcc/testsuite/gfortran.dg/goacc/modules.f95", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmodules.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmodules.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmodules.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile } \n+! { dg-additional-options -Wuninitialized }\n \n MODULE reduction_test\n \n@@ -18,6 +18,8 @@ SUBROUTINE reduction_kernel(x_min,x_max,y_min,y_max,arr,sum)\n \n !$ACC DATA PRESENT(arr) COPY(sum)\n !$ACC PARALLEL LOOP REDUCTION(+ : sum)\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   DO k=y_min,y_max\n     DO j=x_min,x_max\n       sum=sum*arr(j,k)"}, {"sha": "73812fe473e4f2407ee311395626156542f1f69b", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-kernels.f90", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-kernels.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n ! See also 'c-c++-common/goacc/nested-reductions-1-kernels.c'.\n \n+! { dg-additional-options -Wuninitialized }\n+\n subroutine acc_kernels ()\n   implicit none (type, external)\n   integer :: i, j, k, sum, diff\n \n   !$acc kernels\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       do j = 1, 10\n@@ -94,6 +99,9 @@ subroutine acc_kernels_loop ()\n   integer :: h, i, j, k, l, sum, diff\n \n   !$acc kernels loop\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n@@ -192,6 +200,9 @@ subroutine acc_kernels_loop_reduction ()\n   integer :: h, i, j, k, sum, diff\n \n   !$acc kernels loop reduction(+:sum)\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     do i = 1, 10\n       do j = 1, 10"}, {"sha": "9494f34f0a724dddb8f6ec49ee224ac85ad70a22", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-parallel.f90", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-parallel.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-parallel.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-parallel.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n ! See also 'c-c++-common/goacc/nested-reductions-1-parallel.c'.\n \n+! { dg-additional-options -Wuninitialized }\n+\n subroutine acc_parallel ()\n   implicit none (type, external)\n   integer :: i, j, k, sum, diff\n \n   !$acc parallel\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       do j = 1, 10\n@@ -94,6 +99,9 @@ subroutine acc_parallel_loop ()\n   integer :: h, i, j, k, l, sum, diff\n \n   !$acc parallel loop\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n@@ -183,6 +191,9 @@ subroutine acc_parallel_reduction ()\n   integer :: i, j, k, sum, diff\n \n   !$acc parallel reduction(+:sum)\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n     do i = 1, 10\n       do j = 1, 10\n         do k = 1, 10\n@@ -296,6 +307,9 @@ subroutine acc_parallel_loop_reduction ()\n   integer :: h, i, j, k, sum, diff\n \n   !$acc parallel loop reduction(+:sum)\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     do i = 1, 10\n       do j = 1, 10"}, {"sha": "f89e9fe9d5fae11481ee105265378387627d37d5", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-1-routine.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-1-routine.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,6 +2,8 @@\n \n ! See also 'c-c++-common/goacc/nested-reductions-1-routine.c'.\n \n+! { dg-additional-options -Wuninitialized }\n+\n subroutine acc_routine ()\n   implicit none (type, external)\n   !$acc routine gang\n@@ -10,6 +12,7 @@ subroutine acc_routine ()\n \n     ! { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 }\n     !$acc loop reduction(+:sum)\n+    ! { dg-warning {'sum' is used uninitialized} {} { target *-*-* } .-1 }\n     do i = 1, 10\n       do j = 1, 10\n         do k = 1, 10\n@@ -75,6 +78,7 @@ subroutine acc_routine ()\n \n     ! { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 }\n     !$acc loop reduction(+:sum) reduction(-:diff)\n+    ! { dg-warning {'diff' is used uninitialized} {} { target *-*-* } .-1 }\n     do i = 1, 10\n       !$acc loop reduction(+:sum)\n       do j = 1, 10"}, {"sha": "8b143e9da4a2c4ce38abf64361f98d18f0666aa6", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-kernels.f90", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-kernels.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n ! See also 'c-c++-common/goacc/nested-reductions-2-kernels.c'.\n \n+! { dg-additional-options -Wuninitialized }\n+\n subroutine acc_kernels ()\n   implicit none (type, external)\n   integer :: i, j, k, l, sum, diff\n \n   !$acc kernels\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n@@ -126,6 +131,9 @@ subroutine acc_kernels_loop ()\n   integer :: h, i, j, k, l, sum, diff\n \n   !$acc kernels loop\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n@@ -266,6 +274,9 @@ subroutine acc_kernels_loop_reduction ()\n   integer :: h, i, j, k, l, sum, diff\n \n   !$acc kernels loop reduction(+:sum)\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n     do i = 1, 10"}, {"sha": "99cd22c386240ad9e6a0f89f1034e8418ba1d715", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-parallel.f90", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-parallel.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-parallel.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-parallel.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,11 +2,16 @@\n \n ! See also 'c-c++-common/goacc/nested-reductions-2-parallel.c'.\n \n+! { dg-additional-options -Wuninitialized }\n+\n subroutine acc_parallel ()\n   implicit none (type, external)\n   integer :: i, j, k, l, sum, diff\n \n   !$acc parallel\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n       !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n@@ -126,6 +131,9 @@ subroutine acc_parallel_loop ()\n   integer :: h, i, j, k, l, sum, diff\n \n   !$acc parallel loop\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     !$acc loop reduction(+:sum)\n     do i = 1, 10\n@@ -257,6 +265,9 @@ subroutine acc_parallel_reduction ()\n   integer :: i, j, k, l, sum, diff\n \n   !$acc parallel reduction(+:sum)\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n     !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n     do i = 1, 10\n       !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n@@ -376,6 +387,9 @@ subroutine acc_parallel_loop_reduction ()\n   integer :: h, i, j, k, l, sum, diff\n \n   !$acc parallel loop reduction(+:sum)\n+  ! implicit 'copy (sum, diff)'\n+  ! { dg-warning {'sum' is used uninitialized} TODO { xfail *-*-* } .-2 }\n+  ! { dg-warning {'diff' is used uninitialized} TODO { xfail *-*-* } .-3 }\n   do h = 1, 10\n     !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n     do i = 1, 10"}, {"sha": "d60ec583e16592774deee86f8dbec73b5dd96e51", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-2-routine.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-2-routine.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,13 +2,16 @@\n \n ! See also 'c-c++-common/goacc/nested-reductions-2-routine.c'.\n \n+! { dg-additional-options -Wuninitialized }\n+\n subroutine acc_routine ()\n   implicit none (type, external)\n   !$acc routine gang\n   integer :: i, j, k, l, sum, diff\n \n     ! { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 }\n     !$acc loop reduction(+:sum)\n+    ! { dg-warning {'sum' is used uninitialized} {} { target *-*-* } .-1 }\n     do i = 1, 10\n       !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       do j = 1, 10\n@@ -107,6 +110,7 @@ subroutine acc_routine ()\n \n     ! { dg-error \"gang reduction on an orphan loop\" \"\" { target *-*-* } .+1 }\n     !$acc loop reduction(+:sum) reduction(-:diff)\n+    ! { dg-warning {'diff' is used uninitialized} {} { target *-*-* } .-1 }\n     do i = 1, 10\n       !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n       do j = 1, 10"}, {"sha": "6110d93b91eaf8defbcd2f7e41f75132daf2ab62", "filename": "gcc/testsuite/gfortran.dg/goacc/parallel-tree.f95", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,22 +2,26 @@\n \n ! test for tree-dump-original and spaces-commas\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n \n program test\n   implicit none\n   integer :: q, i, j, k, m, n, o, p, r, s, t, u, v, w\n+  ! { dg-note {'i' was declared here} {} { target *-*-* } .-1 }\n   logical :: l = .true.\n \n   !$acc parallel if(l) async num_gangs(i) num_workers(i) vector_length(i) &\n   !$acc reduction(max:q), copy(i), copyin(j), copyout(k), create(m) &\n   !$acc no_create(n) &\n   !$acc present(o), pcopy(p), pcopyin(r), pcopyout(s), pcreate(t) &\n   !$acc deviceptr(u), private(v), firstprivate(w)\n-  ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 }\n-  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n-  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n+  ! { dg-warning {'i' is used uninitialized} {} { target *-*-* } .-1 }\n+  ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-2 }\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 }\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n   !$acc end parallel\n \n end program test"}, {"sha": "c92f1d3d8b27701b31cdf491567e130e78672487", "filename": "gcc/testsuite/gfortran.dg/goacc/pr93464.f90", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr93464.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,13 +1,16 @@\n-! { dg-do compile }\n-!\n ! PR fortran/93464\n !\n ! Contributed by G. Steinmetz\n-!\n+\n+! { dg-additional-options -Wuninitialized }\n+\n program p\n    character :: c(2) = 'a'\n    character, allocatable :: z(:)\n+   ! { dg-note {'z' declared here} {} { target *-*-* } .-1 }\n    !$acc parallel\n+   ! { dg-warning {'z\\.dim\\[0\\]\\.ubound' is used uninitialized} {} { target *-*-* } .-1 }\n+   ! { dg-warning {'z\\.dim\\[0\\]\\.lbound' is used uninitialized} {} { target *-*-* } .-2 }\n    !$omp target\n    z = c\n    !$acc end parallel"}, {"sha": "c825a958e9bcad25a19a90d36107009a497391a6", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-compute-loop.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -4,6 +4,8 @@\n ! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n ! testing/documenting aspects of that functionality.\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! See also '../../c-c++-common/goacc/privatization-1-compute-loop.c'.\n !TODO More cases should be added here.\n \n@@ -38,6 +40,7 @@ subroutine f (i, j, a)\n           ! (See C/C++ example.)\n \n           a = g (i, j, a, c)\n+          ! { dg-warning {'a' is used uninitialized} TODO { xfail *-*-* } .-1 }\n           x = a\n           !$acc atomic write\n           y = a"}, {"sha": "a88203e48d56c4af8fac4e31c193b7d89cb71fff", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-compute.f90", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -4,20 +4,22 @@\n ! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n ! testing/documenting aspects of that functionality.\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! See also '../../c-c++-common/goacc/privatization-1-compute.c'.\n !TODO More cases should be added here.\n \n ! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n ! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n ! so to maintain compatibility with earlier Tcl releases, we manually\n ! initialize counter variables:\n-! { dg-line l_dummy[variable c_compute 0] }\n+! { dg-line l_dummy[variable c_compute 0 c_function 0] }\n ! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n ! \"WARNING: dg-line var l_dummy defined, but not used\".\n \n module m\n contains\n-  subroutine f (i, j, a)\n+  subroutine f (i, j, a) ! { dg-line l_function[incr c_function] }\n     implicit none\n     integer :: i, j, a\n     integer :: x, y\n@@ -35,6 +37,12 @@ subroutine f (i, j, a)\n           ! (See C/C++ example.)\n \n           a = g (i, j, a, c)\n+          ! { dg-warning {'i' is used uninitialized} {} { target *-*-* } .-1 }\n+          !   { dg-note {'i' was declared here} {} { target *-*-* } l_function$c_function }\n+          ! { dg-warning {'j' is used uninitialized} {} { target *-*-* } .-3 }\n+          !   { dg-note {'j' was declared here} {} { target *-*-* } l_function$c_function }\n+          ! { dg-warning {'a' is used uninitialized} {} { target *-*-* } .-5 }\n+          !   { dg-note {'a' was declared here} {} { target *-*-* } l_function$c_function }\n           x = a\n           !$acc atomic write ! ... to force 'TREE_ADDRESSABLE'.\n           y = a"}, {"sha": "74c740f049330acc4858907ee3020a696d170be0", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-routine_gang-loop.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -4,6 +4,8 @@\n ! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n ! testing/documenting aspects of that functionality.\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! See also '../../c-c++-common/goacc/privatization-1-routine_gang-loop.c'.\n !TODO More cases should be added here.\n \n@@ -38,6 +40,7 @@ subroutine f (i, j, a)\n           ! (See C/C++ example.)\n \n           a = g (i, j, a, c)\n+          ! { dg-warning {'a' is used uninitialized} TODO { xfail *-*-* } .-1 }\n           x = a\n           !$acc atomic write\n           y = a"}, {"sha": "59bd43e4070d6192b3ae252add6b46c881d474ec", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-routine_gang.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -4,6 +4,8 @@\n ! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n ! testing/documenting aspects of that functionality.\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! See also '../../c-c++-common/goacc/privatization-1-routine_gang.c'.\n !TODO More cases should be added here.\n "}, {"sha": "104543923365301efcad2af4c9ab7480b68dc05c", "filename": "gcc/testsuite/gfortran.dg/goacc/uninit-dim-clause.f95", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -6,6 +6,9 @@\n subroutine acc_parallel\n   implicit none\n   integer :: i, j, k\n+  ! { dg-note {'i' was declared here} {} { target *-*-* } .-1 }\n+  ! { dg-note {'j' was declared here} {} { target *-*-* } .-2 }\n+  ! { dg-note {'k' was declared here} {} { target *-*-* } .-3 }\n \n   !$acc parallel num_gangs(i) ! { dg-warning \"is used uninitialized\" }\n   ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 }\n@@ -23,6 +26,9 @@ end subroutine acc_parallel\n subroutine acc_kernels\n   implicit none\n   integer :: i, j, k\n+  ! { dg-note {'i' was declared here} {} { target *-*-* } .-1 }\n+  ! { dg-note {'j' was declared here} {} { target *-*-* } .-2 }\n+  ! { dg-note {'k' was declared here} {} { target *-*-* } .-3 }\n \n   !$acc kernels num_gangs(i) ! { dg-warning \"is used uninitialized\" }\n   !$acc end kernels"}, {"sha": "9615fee4487d3cf5f32e979aabde6a807056dd5b", "filename": "gcc/testsuite/gfortran.dg/goacc/uninit-firstprivate-clause.f95", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-firstprivate-clause.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-firstprivate-clause.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-firstprivate-clause.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -11,6 +11,7 @@ end subroutine test\n \n subroutine test2\n   INTEGER :: i\n+  ! { dg-note {'i' was declared here} {} { target *-*-* } .-1 }\n \n   !$acc parallel firstprivate (i) ! { dg-warning \"is used uninitialized\" }\n   i = 1"}, {"sha": "a059bd986ebcf946b8bf96281a93513c336562b0", "filename": "gcc/testsuite/gfortran.dg/goacc/uninit-if-clause.f95", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-if-clause.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-if-clause.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-if-clause.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -4,6 +4,10 @@\n program test\n   implicit none\n   logical :: b, b2, b3, b4\n+  ! { dg-note {'b' was declared here} {} { target *-*-* } .-1 }\n+  ! { dg-note {'b2' was declared here} {} { target *-*-* } .-2 }\n+  ! { dg-note {'b3' was declared here} {} { target *-*-* } .-3 }\n+  ! { dg-note {'b4' was declared here} {} { target *-*-* } .-4 }\n   integer :: data, data2\n \n   !$acc parallel if(b) ! { dg-warning \"is used uninitialized\" }"}, {"sha": "f661f51fe3f288d2375960ef8a512f2fb1bd0877", "filename": "gcc/testsuite/gfortran.dg/goacc/uninit-use-device-clause.f95", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-use-device-clause.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-use-device-clause.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-use-device-clause.f95?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -3,6 +3,7 @@\n \n subroutine test\n   integer, pointer :: p\n+  ! { dg-note {'p' was declared here} {} { target *-*-* } .-1 }\n \n   !$acc host_data use_device(p) ! { dg-warning \"is used uninitialized\" }\n   !$acc end host_data"}, {"sha": "60018bc144c62d01cdd168243bfba680c5e6f4f0", "filename": "gcc/testsuite/gfortran.dg/goacc/wait.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fwait.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fwait.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fwait.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,12 +1,16 @@\n ! Ensure that ACC WAIT accept integer arguments.\n \n+! { dg-additional-options -Wuninitialized }\n+\n subroutine foo (wqueue)\n   implicit none\n   integer :: wqueue, waitno\n+  ! { dg-note {'waitno' was declared here} {} { target *-*-* } .-1 }\n   integer, parameter :: waitp = 100\n \n   !$acc wait (wqueue)\n   !$acc wait (waitno)\n+  ! { dg-warning {'waitno' is used uninitialized} {} { target *-*-* } .-1 }\n   !$acc wait (waitp)\n   !$acc wait (0)\n end subroutine foo"}, {"sha": "489f26ad9f2da5a08a31da78e9b17eff2577d457", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vred2d-128.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,5 +1,7 @@\n /* Test large vector lengths.  */\n \n+/* { dg-additional-options -Wuninitialized } */\n+\n #include <assert.h>\n \n #define n 10000\n@@ -8,7 +10,7 @@ int a1[n], a2[n];\n #define gentest(name, outer, inner)\t\t\\\n   void name ()\t\t\t\t\t\\\n   {\t\t\t\t\t\t\\\n-  long i, j, t1, t2, t3;\t\t\t\\\n+  long i, j, t1, t2, t3; /* { dg-line vars } */\t\\\n   _Pragma(outer)\t\t\t\t\\\n   for (i = 0; i < n; i++)\t\t\t\\\n     {\t\t\t\t\t\t\\\n@@ -32,15 +34,47 @@ int a1[n], a2[n];\n \n gentest (test1, \"acc parallel loop gang vector_length (128) firstprivate (t1, t2)\",\n \t \"acc loop vector reduction(+:t1) reduction(-:t2)\")\n+/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+   { dg-note {'t1' was declared here} {} { target *-*-* } vars }\n+   { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n+/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+   { dg-note {'t2' was declared here} {} { target *-*-* } vars }\n+   { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n \n gentest (test2, \"acc parallel loop gang vector_length (128) firstprivate (t1, t2)\",\n \t \"acc loop worker vector reduction(+:t1) reduction(-:t2)\")\n+/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+   { DUP_dg-note {'t1' was declared here} {} { target *-*-* } vars }\n+   { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n+/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+   { DUP_dg-note {'t2' was declared here} {} { target *-*-* } vars }\n+   { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n \n gentest (test3, \"acc parallel loop gang worker vector_length (128) firstprivate (t1, t2)\",\n \t \"acc loop vector reduction(+:t1) reduction(-:t2)\")\n+/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+   { DUP_dg-note {'t1' was declared here} {} { target *-*-* } vars }\n+   { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n+/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+   { DUP_dg-note {'t2' was declared here} {} { target *-*-* } vars }\n+   { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n \n gentest (test4, \"acc parallel loop firstprivate (t1, t2)\",\n \t \"acc loop reduction(+:t1) reduction(-:t2)\")\n+/* { dg-warning {'t1' is used uninitialized} {} { target *-*-* } .-1 }\n+   { DUP_dg-note {'t1' was declared here} {} { target *-*-* } vars }\n+   { dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-4 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n+/* { dg-warning {'t2' is used uninitialized} {} { target *-*-* } .-5 }\n+   { DUP_dg-note {'t2' was declared here} {} { target *-*-* } vars }\n+   { DUP_dg-note {in expansion of macro 'gentest'} {} { target { ! offloading_enabled } } .-8 }\n+     TODO See PR101551 for 'offloading_enabled' differences.  */\n \n \n int"}, {"sha": "37c8457ec1f0395ecca2326e57b17388f7015a12", "filename": "libgomp/testsuite/libgomp.oacc-fortran/data-5.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-5.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,6 +1,8 @@\n ! { dg-do run }\n ! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n \n+! { dg-additional-options -Wuninitialized }\n+\n program refcount_test\n   use openacc\n   integer, allocatable :: h(:)\n@@ -21,6 +23,8 @@ program refcount_test\n   call acc_update_self (h)\n   do i = 1, N\n      if (h(i) .eq. i) c = c + 1\n+     ! { dg-warning {'c' may be used uninitialized} {} { target __OPTIMIZE__ } .-1 }\n+     !   { dg-note {'c' was declared here} {} { target __OPTIMIZE__ } .-2 }\n   end do\n   ! h[] should be filled with uninitialized device values,\n   ! 'stop' if it's not."}, {"sha": "bc419cf4fa991b7bbba70022c1a477ec3ca5b655", "filename": "libgomp/testsuite/libgomp.oacc-fortran/gemm-2.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm-2.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -3,6 +3,8 @@\n ! { dg-do run }\n ! { dg-additional-options \"-fopenacc-dim=::128\" }\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! Implicitly set vector_length to 128 using -fopenacc-dim.\n subroutine openacc_sgemm (m, n, k, alpha, a, b, beta, c)\n   integer :: m, n, k\n@@ -11,8 +13,10 @@ subroutine openacc_sgemm (m, n, k, alpha, a, b, beta, c)\n \n   integer :: i, j, l\n   real :: temp\n+  ! { dg-note {'temp' was declared here} {} { target *-*-* } .-1 }\n \n   !$acc parallel loop copy(c(1:m,1:n)) copyin(a(1:k,1:m),b(1:k,1:n)) firstprivate (temp)\n+  ! { dg-warning {'temp' is used uninitialized} {} { target *-*-* } .-1 }\n   do j = 1, n\n      !$acc loop\n      do i = 1, m"}, {"sha": "562cb6a7de48cc950c578f8a587dc3aeb1135882", "filename": "libgomp/testsuite/libgomp.oacc-fortran/gemm.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,6 +2,8 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! Explicitly set vector_length to 128 using a vector_length clause.\n subroutine openacc_sgemm_128 (m, n, k, alpha, a, b, beta, c)\n   integer :: m, n, k\n@@ -10,8 +12,10 @@ subroutine openacc_sgemm_128 (m, n, k, alpha, a, b, beta, c)\n \n   integer :: i, j, l\n   real :: temp\n+  ! { dg-note {'temp' was declared here} {} { target *-*-* } .-1 }\n \n   !$acc parallel loop copy(c(1:m,1:n)) copyin(a(1:k,1:m),b(1:k,1:n)) vector_length (128) firstprivate (temp)\n+  ! { dg-warning {'temp' is used uninitialized} {} { target *-*-* } .-1 }\n   do j = 1, n\n      !$acc loop\n      do i = 1, m"}, {"sha": "0bb05b9b869d9d4f2dbaaceabb7ffdc1f76e7ac6", "filename": "libgomp/testsuite/libgomp.oacc-fortran/optional-reduction.f90", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-reduction.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -4,6 +4,8 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options -Wuninitialized }\n+\n !TODO\n ! { dg-xfail-run-if TODO { openacc_radeon_accel_selected && { ! __OPTIMIZE__ } } }\n \n@@ -32,27 +34,35 @@ subroutine do_test(rg, rw, rv, rc)\n \n     !$acc parallel num_gangs(ng) copy(rg)\n     !$acc loop reduction(+:rg) gang\n+    ! { dg-bogus {'rg\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+    !   { dg-note {'rg\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n     do i = 1, n\n        rg = rg + array(i)\n     end do\n     !$acc end parallel\n \n     !$acc parallel num_workers(nw) copy(rw)\n     !$acc loop reduction(+:rw) worker\n+    ! { dg-bogus {'rw\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+    !   { dg-note {'rw\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n     do i = 1, n\n        rw = rw + array(i)\n     end do\n     !$acc end parallel\n \n     !$acc parallel vector_length(vl) copy(rv)\n     !$acc loop reduction(+:rv) vector\n+    ! { dg-bogus {'rv\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+    !   { dg-note {'rv\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n     do i = 1, n\n        rv = rv + array(i)\n     end do\n     !$acc end parallel\n \n     !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n     !$acc loop reduction(+:rc) gang worker vector\n+    ! { dg-bogus {'rc\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+    !   { dg-note {'rc\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n     do i = 1, n\n        rc = rc + array(i)\n     end do"}, {"sha": "a7b7adebb09e3ac8b0ccc7230f0ec7a8f04edb55", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-reduction.f90", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,5 +1,7 @@\n ! { dg-do run }\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n \n@@ -44,7 +46,11 @@ subroutine redsub(s1, s2, n)\n   integer :: s1, s2, n\n \n   !$acc parallel reduction(+:s1,s2) num_gangs (10)  copy(s1)\n-  ! { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus {'s1\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'s1\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n+  ! { dg-bogus {'s2\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-3 }\n+  !   { dg-note {'s2\\.[0-9]+' was declared here} {} { target *-*-* } .-4 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-5 }\n   s1 = s1 + 1\n   s2 = s2 + 1\n   !$acc end parallel"}, {"sha": "5082e367e020c71ebc3100e3668f1a2145ddf27a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/pr70643.f90", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr70643.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr70643.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr70643.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,5 +1,7 @@\n ! { dg-do run }\n-!\n+\n+! { dg-additional-options -Wuninitialized }\n+\n MODULE reduction_test\n \n CONTAINS\n@@ -16,6 +18,8 @@ SUBROUTINE reduction_kernel(x_min,x_max,y_min,y_max,arr,sum)\n \n !$ACC DATA PRESENT(arr) COPY(sum)\n !$ACC PARALLEL LOOP REDUCTION(+ : sum)\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   DO k=y_min,y_max\n     DO j=x_min,x_max\n       sum=sum+arr(j,k)"}, {"sha": "06512d43c0589d05c39b2fbbca403a6c04610bae", "filename": "libgomp/testsuite/libgomp.oacc-fortran/pr96628-part1.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr96628-part1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr96628-part1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr96628-part1.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -3,6 +3,9 @@\n ! { dg-additional-options \"-ftree-slp-vectorize\" }\n !\n ! This file is compiled first\n+\n+! { dg-additional-options -Wuninitialized }\n+\n module m2\n   real*8 :: mysum\n   !$acc declare device_resident(mysum)\n@@ -16,5 +19,7 @@ SUBROUTINE two(t)\n       !$acc routine seq\n       REAL*8, INTENT(INOUT) :: t(:)\n       t = (100.0_8*t)/sum\n+      ! { dg-warning {'sum' is used uninitialized} {} { target *-*-* } .-1 }\n+      !   { dg-note {'sum' was declared here} {} { target *-*-* } .-2 }\n     END SUBROUTINE two\n end module m2"}, {"sha": "f4a6af986e8a2a52de7f51f7c1cc25c6376196ba", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -15,6 +15,8 @@\n ! Prune a few: uninteresting, and varying depending on GCC configuration (data types):\n ! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n ! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n ! so to maintain compatibility with earlier Tcl releases, we manually\n@@ -27,10 +29,16 @@ program main\n   implicit none (type, external)\n   integer :: j\n   integer, allocatable :: A(:)\n+  ! { dg-note {'a' declared here} {} { target *-*-* } .-1 }\n   character(len=:), allocatable :: my_str\n   character(len=15), allocatable :: my_str15\n \n   A = [(3*j, j=1, 10)]\n+  ! { dg-bogus {'a\\.offset' is used uninitialized} {PR77504 etc.} { xfail *-*-* } .-1 }\n+  ! { dg-bogus {'a\\.dim\\[0\\]\\.lbound' is used uninitialized} {PR77504 etc.} { xfail *-*-* } .-2 }\n+  ! { dg-bogus {'a\\.dim\\[0\\]\\.ubound' is used uninitialized} {PR77504 etc.} { xfail *-*-* } .-3 }\n+  ! { dg-bogus {'a\\.dim\\[0\\]\\.lbound' may be used uninitialized} {PR77504 etc.} { xfail { ! __OPTIMIZE__ } } .-4 }\n+  ! { dg-bogus {'a\\.dim\\[0\\]\\.ubound' may be used uninitialized} {PR77504 etc.} { xfail { ! __OPTIMIZE__ } } .-5 }\n   call foo (A, size(A))\n   call bar (A)\n   my_str = \"1234567890\""}, {"sha": "88a691f7ca159c03abf2fc79f1316ee0ae854ef7", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-5.f90", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,5 +1,7 @@\n ! { dg-do run }\n \n+! { dg-additional-options -Wuninitialized }\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n \n@@ -36,6 +38,8 @@ subroutine redsub_gang(sum, n, c)\n \n   !$acc parallel copyin (n, c) num_gangs(n) copy(sum)\n   !$acc loop reduction(+:sum) gang\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   do i = 1, n\n      sum = sum + c\n   end do\n@@ -50,6 +54,8 @@ subroutine redsub_worker(sum, n, c)\n   !$acc parallel copyin (n, c) num_workers(4) vector_length (32) copy(sum)\n   ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop reduction(+:sum) worker\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   do i = 1, n\n      sum = sum + c\n   end do\n@@ -63,6 +69,8 @@ subroutine redsub_vector(sum, n, c)\n \n   !$acc parallel copyin (n, c) vector_length(32) copy(sum)\n   !$acc loop reduction(+:sum) vector\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   do i = 1, n\n      sum = sum + c\n   end do\n@@ -76,6 +84,8 @@ subroutine redsub_combined(sum, n, c)\n \n   !$acc parallel num_gangs (8) num_workers (4) vector_length(32) copy(sum)\n   !$acc loop reduction(+:sum) gang worker vector\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   do i = 1, n\n      sum = sum + c\n   end do\n@@ -92,8 +102,12 @@ subroutine redsub_nested(sum, n, c)\n \n   !$acc parallel num_gangs (8) copy(sum)\n   !$acc loop reduction(+:sum) gang\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   do i = 1, ii\n      !$acc loop reduction(+:sum) vector\n+     ! { dg-bogus {'sum\\.[0-9]+' may be used uninitialized} TODO { xfail { ! __OPTIMIZE__ } } .-1 }\n+     !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target { ! __OPTIMIZE__ } } .-2 }\n      do j = 1, jj\n         sum = sum + c\n      end do"}, {"sha": "38148f520da85a1549d2abed709b89d030f1a1ce", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-7.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -1,5 +1,7 @@\n ! { dg-do run }\n \n+! { dg-additional-options -Wuninitialized }\n+\n !TODO\n ! { dg-xfail-run-if TODO { openacc_radeon_accel_selected && { ! __OPTIMIZE__ } } }\n \n@@ -62,6 +64,8 @@ subroutine redsub_bogus(sum, n)\n \n   !$acc parallel firstprivate(sum)\n   !$acc loop gang worker vector reduction (+:sum)\n+  ! { dg-bogus {'sum\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n   do i = 1, n\n      sum = sum + 1\n   end do\n@@ -80,6 +84,8 @@ subroutine redsub_combined(sum, n, arr)\n      sum = i;\n \n      !$acc loop reduction(+:sum)\n+     ! { dg-bogus {'sum\\.[0-9]+' may be used uninitialized} TODO { xfail { ! __OPTIMIZE__ } } .-1 }\n+     !   { dg-note {'sum\\.[0-9]+' was declared here} {} { target { ! __OPTIMIZE__ } } .-2 }\n      do j = 1, n\n         sum = sum + 1\n      end do"}, {"sha": "055d22510c4300616de4fb4ae51916d557243431", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reference-reductions.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freference-reductions.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd8b1e881f0c26a5103cd1919809b3d63b60ef2/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freference-reductions.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freference-reductions.f90?ref=4bd8b1e881f0c26a5103cd1919809b3d63b60ef2", "patch": "@@ -2,6 +2,8 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options -Wuninitialized }\n+\n module prm\n   implicit none\n \n@@ -14,8 +16,12 @@ subroutine param_reduction(var)\n \n !$acc parallel copy(var)\n !$acc loop reduction(+ : var) gang\n+  ! { dg-bogus {'var\\.[0-9]+' is used uninitialized} TODO { xfail *-*-* } .-1 }\n+  !   { dg-note {'var\\.[0-9]+' was declared here} {} { target *-*-* } .-2 }\n  do k=1,10\n !$acc loop vector reduction(+ : var)\n+    ! { dg-bogus {'var\\.[0-9]+' may be used uninitialized} TODO { xfail { ! __OPTIMIZE__ } } .-1 }\n+    !   { dg-note {'var\\.[0-9]+' was declared here} {} { target { ! __OPTIMIZE__ } } .-2 }\n     do j=1,100\n      var = var + 1.0\n     enddo"}]}