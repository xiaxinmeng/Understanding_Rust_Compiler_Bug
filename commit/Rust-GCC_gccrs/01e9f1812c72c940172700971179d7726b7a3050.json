{"sha": "01e9f1812c72c940172700971179d7726b7a3050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlOWYxODEyYzcyYzk0MDE3MjcwMDk3MTE3OWQ3NzI2YjdhMzA1MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-21T09:37:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-21T11:54:08Z"}, "message": "tree-optimization/92328 fix value-number with bogus type\n\nWe were actually value-numbering two entities with different type\nthe same rather than just having the same representation in the\nhashtable.  The following fixes that by wrapping the value in a\nto be inserted VIEW_CONVERT_EXPR.\n\n2020-01-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92328\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Preserve\n\ttype when value-numbering same-sized store by inserting a\n\tVIEW_CONVERT_EXPR.\n\t(eliminate_dom_walker::eliminate_stmt): When eliminating\n\ta redundant store handle bit-reinterpretation of the same value.\n\n\t* gcc.dg/torture/pr92328.c: New testcase.", "tree": {"sha": "df25df2f795f0e78d452406e2a8562bfb3c7e364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df25df2f795f0e78d452406e2a8562bfb3c7e364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e9f1812c72c940172700971179d7726b7a3050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e9f1812c72c940172700971179d7726b7a3050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e9f1812c72c940172700971179d7726b7a3050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e9f1812c72c940172700971179d7726b7a3050/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fc2f9337311c11dabcc464c808cbef205f17a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc2f9337311c11dabcc464c808cbef205f17a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc2f9337311c11dabcc464c808cbef205f17a52"}], "stats": {"total": 86, "additions": 70, "deletions": 16}, "files": [{"sha": "073fc2e388dfe524c9cc756436b7f6abd1160baf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e9f1812c72c940172700971179d7726b7a3050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e9f1812c72c940172700971179d7726b7a3050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01e9f1812c72c940172700971179d7726b7a3050", "patch": "@@ -1,3 +1,12 @@\n+2020-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92328\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Preserve\n+\ttype when value-numbering same-sized store by inserting a\n+\tVIEW_CONVERT_EXPR.\n+\t(eliminate_dom_walker::eliminate_stmt): When eliminating\n+\ta redundant store handle bit-reinterpretation of the same value.\n+\n 2020-01-21  Andrew Pinski  <apinski@marvel.com>\n \n \tPR tree-opt/93321"}, {"sha": "6332af819aa7489c20c835894bf508cd19f9d2dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e9f1812c72c940172700971179d7726b7a3050/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e9f1812c72c940172700971179d7726b7a3050/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01e9f1812c72c940172700971179d7726b7a3050", "patch": "@@ -1,3 +1,8 @@\n+2020-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92328\n+\t* gcc.dg/torture/pr92328.c: New testcase.\n+\n 2020-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93073"}, {"sha": "7898b9efe80b12be6335d8b267bd3b0cc3e5bb65", "filename": "gcc/testsuite/gcc.dg/torture/pr92328.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e9f1812c72c940172700971179d7726b7a3050/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92328.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e9f1812c72c940172700971179d7726b7a3050/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92328.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92328.c?ref=01e9f1812c72c940172700971179d7726b7a3050", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-pre -Wno-div-by-zero\" } */\n+\n+int nt;\n+\n+void\n+ja (int os)\n+{\n+  int *ku = &os, *id = &os;\n+  unsigned int qr = 0;\n+\n+  for (;;)\n+    {\n+      if (os == *ku)\n+        {\n+          *id = 0;\n+          qr += os != *ku;\n+          id = &qr;\n+        }\n+\n+      *id &= qr;\n+\n+      if (os != 0)\n+        {\n+          nt /= 0;\n+          ku = &qr;\n+        }\n+    }\n+}"}, {"sha": "0b8ee586139362fb76a630bb9322dc05ab36bf13", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e9f1812c72c940172700971179d7726b7a3050/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e9f1812c72c940172700971179d7726b7a3050/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=01e9f1812c72c940172700971179d7726b7a3050", "patch": "@@ -2712,26 +2712,30 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t  || known_eq (ref->size, TYPE_PRECISION (vr->type)))\n \t      && multiple_p (ref->size, BITS_PER_UNIT))\n \t    {\n-\t      if (known_eq (ref->size, size2))\n-\t\treturn vn_reference_lookup_or_insert_for_pieces\n-\t\t    (vuse, get_alias_set (lhs), vr->type, vr->operands,\n-\t\t     SSA_VAL (def_rhs));\n-\t      else if (! INTEGRAL_TYPE_P (TREE_TYPE (def_rhs))\n-\t\t       || type_has_mode_precision_p (TREE_TYPE (def_rhs)))\n+\t      tree val = NULL_TREE;\n+\t      if (! INTEGRAL_TYPE_P (TREE_TYPE (def_rhs))\n+\t\t  || type_has_mode_precision_p (TREE_TYPE (def_rhs)))\n \t\t{\n \t\t  gimple_match_op op (gimple_match_cond::UNCOND,\n \t\t\t\t      BIT_FIELD_REF, vr->type,\n \t\t\t\t      SSA_VAL (def_rhs),\n \t\t\t\t      bitsize_int (ref->size),\n \t\t\t\t      bitsize_int (offset - offset2));\n-\t\t  tree val = vn_nary_build_or_lookup (&op);\n-\t\t  if (val\n-\t\t      && (TREE_CODE (val) != SSA_NAME\n-\t\t\t  || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n-\t\t    return vn_reference_lookup_or_insert_for_pieces\n-\t\t\t(vuse, get_alias_set (lhs), vr->type,\n-\t\t\t vr->operands, val);\n+\t\t  val = vn_nary_build_or_lookup (&op);\n \t\t}\n+\t      else if (known_eq (ref->size, size2))\n+\t\t{\n+\t\t  gimple_match_op op (gimple_match_cond::UNCOND,\n+\t\t\t\t      VIEW_CONVERT_EXPR, vr->type,\n+\t\t\t\t      SSA_VAL (def_rhs));\n+\t\t  val = vn_nary_build_or_lookup (&op);\n+\t\t}\n+\t      if (val\n+\t\t  && (TREE_CODE (val) != SSA_NAME\n+\t\t      || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n+\t\treturn vn_reference_lookup_or_insert_for_pieces\n+\t\t\t    (vuse, get_alias_set (lhs), vr->type,\n+\t\t\t     vr->operands, val);\n \t    }\n \t  else if (maxsize.is_constant (&maxsizei)\n \t\t   && maxsizei % BITS_PER_UNIT == 0\n@@ -5599,7 +5603,6 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n       && (TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n \t  || is_gimple_min_invariant (gimple_assign_rhs1 (stmt))))\n     {\n-      tree val;\n       tree rhs = gimple_assign_rhs1 (stmt);\n       vn_reference_t vnresult;\n       /* ???  gcc.dg/torture/pr91445.c shows that we lookup a boolean\n@@ -5640,14 +5643,22 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t  else\n \t    lookup_lhs = NULL_TREE;\n \t}\n-      val = NULL_TREE;\n+      tree val = NULL_TREE;\n       if (lookup_lhs)\n \tval = vn_reference_lookup (lookup_lhs, gimple_vuse (stmt), VN_WALK,\n \t\t\t\t   &vnresult, false);\n       if (TREE_CODE (rhs) == SSA_NAME)\n \trhs = VN_INFO (rhs)->valnum;\n       if (val\n-\t  && operand_equal_p (val, rhs, 0))\n+\t  && (operand_equal_p (val, rhs, 0)\n+\t      /* Due to the bitfield lookups above we can get bit\n+\t\t interpretations of the same RHS as values here.  Those\n+\t\t are redundant as well.  */\n+\t      || (TREE_CODE (val) == SSA_NAME\n+\t\t  && gimple_assign_single_p (SSA_NAME_DEF_STMT (val))\n+\t\t  && (val = gimple_assign_rhs1 (SSA_NAME_DEF_STMT (val)))\n+\t\t  && TREE_CODE (val) == VIEW_CONVERT_EXPR\n+\t\t  && TREE_OPERAND (val, 0) == rhs)))\n \t{\n \t  /* We can only remove the later store if the former aliases\n \t     at least all accesses the later one does or if the store"}]}