{"sha": "4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3OTRlYWY3M2VmOGRmNzY4OWQxZTlkZTE0NmUwMDM5OGYyZDFmZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-06T19:31:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-06T19:31:40Z"}, "message": "exgettext: Handle gmsgid and cmsgid arguments specially, as gcc-internal-format and c-format.\n\ngcc/po/\n\t* exgettext: Handle gmsgid and cmsgid arguments specially,\n\tas gcc-internal-format and c-format.  Because of xgettext\n\tbug, invoke xgettext once with --language=c, once with\n\t--language=GCC-source and then merge together.  Fail if\n\txgettext is not 0.14.5 or later.\ngcc/\n\t* intl.h (G_): New macro.\n\t* rtl-error.c (error_for_asm, warning_for_asm): Use gmsgid\n\tinstead of msgid for argument name.\n\t* tree-ssa.c (warn_uninit): Likewise.\n\t* c-parser.c (c_parser_error): Likewise.\n\t* config/rs6000/rs6000-c.c (SYNTAX_ERROR): Likewise.\n\t* config/darwin-c.c (BAD): Likewise.\n\t* config/c4x/c4x-c.c (BAD): Likewise.\n\t* c-pragma.c (GCC_BAD, GCC_BAD2): Likewise.\n\t* c-errors.c (pedwarn_c99, pedwarn_c90): Likewise.\n\t* c-common.c (c_parse_error): Likewise.\n\t* diagnostic.c (diagnostic_set_info, verbatim, inform, warning,\n\twarning0, pedwarn, error, sorry, fatal_error, internal_error):\n\tLikewise.\n\t(fnotice): Use cmsgid instead of msgid for argument name.\n\t* gcov.c (fnotice): Likewise.\n\t* protoize.c (notice): Likewise.\n\t* final.c (output_operand_lossage): Likewise.\n\t* gcc.c (fatal, notice): Likewise.\n\t(error): Use gmsgid instead of msgid for argument name.\n\t* collect2.c (notice, fatal_perror, fatal): Use cmsgid instead\n\tof msgid for argument name.\n\t(error): Use gmsgid instead of msgid for argument name.\n\t* c-decl.c (locate_old_decl, implicit_decl_warning): Use G_()\n\tinstead of N_().\n\t* c-typeck.c (readonly_error, convert_for_assignment): Likewise.\n\t* tree-inline.c (inline_forbidden_p_1): Likewise.\n\t* ABOUT-GCC-NLS: Require gettext 0.14.5 or later.  Mention the new\n\tconventions for marking translations.\n\t* doc/install.texi: Mention gettext 0.14.5 or later requirement.\ngcc/cp/\n\t* error.c (locate_error): Use gmsgid instead of msgid for argument\n\tname.\n\t(cp_error_at, cp_warning_at, cp_pedwarn_at): Likewise.\ngcc/java/\n\t* jv-scan.c (fatal_error, warning, warning0): Use gmsgid instead of\n\tmsgid for argument name.\n\t* gjavah.c (error): Likewise.\n\t* java-tree.h (parse_error_context): Likewise.\n\t* parse.y (parse_error_context, parse_warning_context,\n\tissue_warning_error_from_context): Likewise.\n\nFrom-SVN: r100676", "tree": {"sha": "c8a8fb885e6d7542f092ff09cfbce8b498ccf63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a8fb885e6d7542f092ff09cfbce8b498ccf63e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6be74c4f5c988270ef3e4d4664a15b2b2e205f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be74c4f5c988270ef3e4d4664a15b2b2e205f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be74c4f5c988270ef3e4d4664a15b2b2e205f9a"}], "stats": {"total": 544, "additions": 328, "deletions": 216}, "files": [{"sha": "8107d583e0775c258eede3b9f5776dccf3172196", "filename": "gcc/ABOUT-GCC-NLS", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2FABOUT-GCC-NLS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2FABOUT-GCC-NLS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FABOUT-GCC-NLS?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -25,15 +25,22 @@ responsibility to translate the message before the user sees it.\n \n By convention, any function parameter in the GCC sources whose name\n ends in `msgid' is expected to be a message requiring translation.\n-For example, the `error' function's first parameter is named `msgid'.\n+If the parameter name ends with `gmsgid', it is assumed to be a GCC\n+diagnostics format string requiring translation, if it ends with\n+`cmsgid', it is assumed to be a format string for `printf' family\n+of functions, requiring a translation.\n+For example, the `error' function's first parameter is named `gmsgid'.\n GCC's exgettext script uses this convention to determine which\n function parameter strings need to be translated.  The exgettext\n script also assumes that any occurrence of `%eMSGID}' on a source\n line, where MSGID does not contain `%' or `}', corresponds to a\n message MSGID that requires translation; this is needed to identify\n diagnostics in GCC spec strings.\n+The `G_(GMSGID)' macro defined in intl.h can be used to mark GCC diagnostics\n+format strings as requiring translation, but other than that it is a\n+no-op at runtime.\n \n-If you modify source files, you'll need at least version 0.10.37 of the\n+If you modify source files, you'll need at least version 0.14.15 of the\n GNU gettext package to propagate the modifications to the translation\n tables.\n "}, {"sha": "a087a3d3616b7b7a77f88eab3de4ad3a2eb84492", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1,5 +1,36 @@\n 2005-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* intl.h (G_): New macro.\n+\t* rtl-error.c (error_for_asm, warning_for_asm): Use gmsgid\n+\tinstead of msgid for argument name.\n+\t* tree-ssa.c (warn_uninit): Likewise.\n+\t* c-parser.c (c_parser_error): Likewise.\n+\t* config/rs6000/rs6000-c.c (SYNTAX_ERROR): Likewise.\n+\t* config/darwin-c.c (BAD): Likewise.\n+\t* config/c4x/c4x-c.c (BAD): Likewise.\n+\t* c-pragma.c (GCC_BAD, GCC_BAD2): Likewise.\n+\t* c-errors.c (pedwarn_c99, pedwarn_c90): Likewise.\n+\t* c-common.c (c_parse_error): Likewise.\n+\t* diagnostic.c (diagnostic_set_info, verbatim, inform, warning,\n+\twarning0, pedwarn, error, sorry, fatal_error, internal_error):\n+\tLikewise.\n+\t(fnotice): Use cmsgid instead of msgid for argument name.\n+\t* gcov.c (fnotice): Likewise.\n+\t* protoize.c (notice): Likewise.\n+\t* final.c (output_operand_lossage): Likewise.\n+\t* gcc.c (fatal, notice): Likewise.\n+\t(error): Use gmsgid instead of msgid for argument name.\n+\t* collect2.c (notice, fatal_perror, fatal): Use cmsgid instead\n+\tof msgid for argument name.\n+\t(error): Use gmsgid instead of msgid for argument name.\n+\t* c-decl.c (locate_old_decl, implicit_decl_warning): Use G_()\n+\tinstead of N_().\n+\t* c-typeck.c (readonly_error, convert_for_assignment): Likewise.\n+\t* tree-inline.c (inline_forbidden_p_1): Likewise.\n+\t* ABOUT-GCC-NLS: Require gettext 0.14.5 or later.  Mention the new\n+\tconventions for marking translations.\n+\t* doc/install.texi: Mention gettext 0.14.5 or later requirement.\n+\n \t* tree-chrec.c (reset_evolution_in_loop): Use build3 instead of\n \tbuild2.\n "}, {"sha": "237f7d3a3e2c7d28934ccb6da643c5d5960d2b6b", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -5520,51 +5520,51 @@ catenate_strings (const char *lhs, const char *rhs_start, int rhs_size)\n   return result;\n }\n \n-/* Issue the error given by MSGID, indicating that it occurred before\n+/* Issue the error given by GMSGID, indicating that it occurred before\n    TOKEN, which had the associated VALUE.  */\n \n void\n-c_parse_error (const char *msgid, enum cpp_ttype token, tree value)\n+c_parse_error (const char *gmsgid, enum cpp_ttype token, tree value)\n {\n #define catenate_messages(M1, M2) catenate_strings ((M1), (M2), sizeof (M2))\n \n   char *message = NULL;\n \n   if (token == CPP_EOF)\n-    message = catenate_messages (msgid, \" at end of input\");\n+    message = catenate_messages (gmsgid, \" at end of input\");\n   else if (token == CPP_CHAR || token == CPP_WCHAR)\n     {\n       unsigned int val = TREE_INT_CST_LOW (value);\n       const char *const ell = (token == CPP_CHAR) ? \"\" : \"L\";\n       if (val <= UCHAR_MAX && ISGRAPH (val))\n-        message = catenate_messages (msgid, \" before %s'%c'\");\n+        message = catenate_messages (gmsgid, \" before %s'%c'\");\n       else\n-        message = catenate_messages (msgid, \" before %s'\\\\x%x'\");\n+        message = catenate_messages (gmsgid, \" before %s'\\\\x%x'\");\n \n       error (message, ell, val);\n       free (message);\n       message = NULL;\n     }\n   else if (token == CPP_STRING || token == CPP_WSTRING)\n-    message = catenate_messages (msgid, \" before string constant\");\n+    message = catenate_messages (gmsgid, \" before string constant\");\n   else if (token == CPP_NUMBER)\n-    message = catenate_messages (msgid, \" before numeric constant\");\n+    message = catenate_messages (gmsgid, \" before numeric constant\");\n   else if (token == CPP_NAME)\n     {\n-      message = catenate_messages (msgid, \" before %qE\");\n+      message = catenate_messages (gmsgid, \" before %qE\");\n       error (message, value);\n       free (message);\n       message = NULL;\n     }\n   else if (token < N_TTYPES)\n     {\n-      message = catenate_messages (msgid, \" before %qs token\");\n+      message = catenate_messages (gmsgid, \" before %qs token\");\n       error (message, cpp_type2name (token));\n       free (message);\n       message = NULL;\n     }\n   else\n-    error (msgid);\n+    error (gmsgid);\n \n   if (message)\n     {"}, {"sha": "27d03eb8c3b06820df1ad1999cd716a7bc62cd4e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1131,11 +1131,11 @@ locate_old_decl (tree decl, void (*diag)(const char *, ...))\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl))\n     ;\n   else if (DECL_INITIAL (decl))\n-    diag (N_(\"%Jprevious definition of %qD was here\"), decl, decl);\n+    diag (G_(\"%Jprevious definition of %qD was here\"), decl, decl);\n   else if (C_DECL_IMPLICIT (decl))\n-    diag (N_(\"%Jprevious implicit declaration of %qD was here\"), decl, decl);\n+    diag (G_(\"%Jprevious implicit declaration of %qD was here\"), decl, decl);\n   else\n-    diag (N_(\"%Jprevious declaration of %qD was here\"), decl, decl);\n+    diag (G_(\"%Jprevious declaration of %qD was here\"), decl, decl);\n }\n \n /* Subroutine of duplicate_decls.  Compare NEWDECL to OLDDECL.\n@@ -2292,7 +2292,7 @@ implicit_decl_warning (tree id, tree olddecl)\n     default: gcc_unreachable ();\n     }\n \n-  diag (N_(\"implicit declaration of function %qE\"), id);\n+  diag (G_(\"implicit declaration of function %qE\"), id);\n   if (olddecl)\n     locate_old_decl (olddecl, diag);\n }"}, {"sha": "ccdbf7ef7cc0d341538e8717d9615b05905aca7b", "filename": "gcc/c-errors.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-errors.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -32,13 +32,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Issue an ISO C99 pedantic warning MSGID.  */\n \n void\n-pedwarn_c99 (const char *msgid, ...)\n+pedwarn_c99 (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n   \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location,\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n                        flag_isoc99 ? pedantic_error_kind () : DK_WARNING);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n@@ -50,13 +50,13 @@ pedwarn_c99 (const char *msgid, ...)\n    (There is no flag_c90.)  */\n \n void\n-pedwarn_c90 (const char *msgid, ...)\n+pedwarn_c90 (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location,\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n                        flag_isoc99 ? DK_WARNING : pedantic_error_kind ());\n   report_diagnostic (&diagnostic);\n   va_end (ap);"}, {"sha": "abb8b2291320e6132884502060fe00b8c3c91af1", "filename": "gcc/c-parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -635,18 +635,18 @@ c_parser_new (void)\n    used.  */\n \n static void\n-c_parser_error (c_parser *parser, const char *msgid)\n+c_parser_error (c_parser *parser, const char *gmsgid)\n {\n   c_token *token = c_parser_peek_token (parser);\n   if (parser->error)\n     return;\n   parser->error = true;\n-  if (!msgid)\n+  if (!gmsgid)\n     return;\n   /* This diagnostic makes more sense if it is tagged to the line of\n      the token we just peeked at.  */\n   c_parser_set_source_position_from_token (token);\n-  c_parse_error (msgid,\n+  c_parse_error (gmsgid,\n \t\t /* Because c_parse_error does not understand\n \t\t    CPP_KEYWORD, keywords are treated like\n \t\t    identifiers.  */"}, {"sha": "408ecdd1e3cdef621a3b193ddfec08defb42cf79", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -37,8 +37,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"vec.h\"\n #include \"target.h\"\n \n-#define GCC_BAD(msgid) do { warning (0, msgid); return; } while (0)\n-#define GCC_BAD2(msgid, arg) do { warning (0, msgid, arg); return; } while (0)\n+#define GCC_BAD(gmsgid) do { warning (0, gmsgid); return; } while (0)\n+#define GCC_BAD2(gmsgid, arg) \\\n+  do { warning (0, gmsgid, arg); return; } while (0)\n \n typedef struct align_stack GTY(())\n {"}, {"sha": "25a280a6d54efd8f8d9a15a170b3cb14773409ce", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -2845,20 +2845,20 @@ readonly_error (tree arg, enum lvalue_use use)\n       if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n \treadonly_error (TREE_OPERAND (arg, 0), use);\n       else\n-\terror (READONLY_MSG (N_(\"assignment of read-only member %qD\"),\n-\t\t\t     N_(\"increment of read-only member %qD\"),\n-\t\t\t     N_(\"decrement of read-only member %qD\")),\n+\terror (READONLY_MSG (G_(\"assignment of read-only member %qD\"),\n+\t\t\t     G_(\"increment of read-only member %qD\"),\n+\t\t\t     G_(\"decrement of read-only member %qD\")),\n \t       TREE_OPERAND (arg, 1));\n     }\n   else if (TREE_CODE (arg) == VAR_DECL)\n-    error (READONLY_MSG (N_(\"assignment of read-only variable %qD\"),\n-\t\t\t N_(\"increment of read-only variable %qD\"),\n-\t\t\t N_(\"decrement of read-only variable %qD\")),\n+    error (READONLY_MSG (G_(\"assignment of read-only variable %qD\"),\n+\t\t\t G_(\"increment of read-only variable %qD\"),\n+\t\t\t G_(\"decrement of read-only variable %qD\")),\n \t   arg);\n   else\n-    error (READONLY_MSG (N_(\"assignment of read-only location\"),\n-\t\t\t N_(\"increment of read-only location\"),\n-\t\t\t N_(\"decrement of read-only location\")));\n+    error (READONLY_MSG (G_(\"assignment of read-only location\"),\n+\t\t\t G_(\"increment of read-only location\"),\n+\t\t\t G_(\"decrement of read-only location\")));\n }\n \n \n@@ -3728,26 +3728,26 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t     function where an ordinary one is wanted, but not\n \t\t     vice-versa.  */\n \t\t  if (TYPE_QUALS (ttl) & ~TYPE_QUALS (ttr))\n-\t\t    WARN_FOR_ASSIGNMENT (N_(\"passing argument %d of %qE \"\n+\t\t    WARN_FOR_ASSIGNMENT (G_(\"passing argument %d of %qE \"\n \t\t\t\t\t    \"makes qualified function \"\n \t\t\t\t\t    \"pointer from unqualified\"),\n-\t\t\t\t\t N_(\"assignment makes qualified \"\n+\t\t\t\t\t G_(\"assignment makes qualified \"\n \t\t\t\t\t    \"function pointer from \"\n \t\t\t\t\t    \"unqualified\"),\n-\t\t\t\t\t N_(\"initialization makes qualified \"\n+\t\t\t\t\t G_(\"initialization makes qualified \"\n \t\t\t\t\t    \"function pointer from \"\n \t\t\t\t\t    \"unqualified\"),\n-\t\t\t\t\t N_(\"return makes qualified function \"\n+\t\t\t\t\t G_(\"return makes qualified function \"\n \t\t\t\t\t    \"pointer from unqualified\"));\n \t\t}\n \t      else if (TYPE_QUALS (ttr) & ~TYPE_QUALS (ttl))\n-\t\tWARN_FOR_ASSIGNMENT (N_(\"passing argument %d of %qE discards \"\n+\t\tWARN_FOR_ASSIGNMENT (G_(\"passing argument %d of %qE discards \"\n \t\t\t\t\t\"qualifiers from pointer target type\"),\n-\t\t\t\t     N_(\"assignment discards qualifiers \"\n+\t\t\t\t     G_(\"assignment discards qualifiers \"\n \t\t\t\t\t\"from pointer target type\"),\n-\t\t\t\t     N_(\"initialization discards qualifiers \"\n+\t\t\t\t     G_(\"initialization discards qualifiers \"\n \t\t\t\t\t\"from pointer target type\"),\n-\t\t\t\t     N_(\"return discards qualifiers from \"\n+\t\t\t\t     G_(\"return discards qualifiers from \"\n \t\t\t\t\t\"pointer target type\"));\n \t    }\n \n@@ -3796,14 +3796,14 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t      which are not ANSI null ptr constants.  */\n \t\t   && (!integer_zerop (rhs) || TREE_CODE (rhs) == NOP_EXPR)\n \t\t   && TREE_CODE (ttl) == FUNCTION_TYPE)))\n-\t    WARN_FOR_ASSIGNMENT (N_(\"ISO C forbids passing argument %d of \"\n+\t    WARN_FOR_ASSIGNMENT (G_(\"ISO C forbids passing argument %d of \"\n \t\t\t\t    \"%qE between function pointer \"\n \t\t\t\t    \"and %<void *%>\"),\n-\t\t\t\t N_(\"ISO C forbids assignment between \"\n+\t\t\t\t G_(\"ISO C forbids assignment between \"\n \t\t\t\t    \"function pointer and %<void *%>\"),\n-\t\t\t\t N_(\"ISO C forbids initialization between \"\n+\t\t\t\t G_(\"ISO C forbids initialization between \"\n \t\t\t\t    \"function pointer and %<void *%>\"),\n-\t\t\t\t N_(\"ISO C forbids return between function \"\n+\t\t\t\t G_(\"ISO C forbids return between function \"\n \t\t\t\t    \"pointer and %<void *%>\"));\n \t  /* Const and volatile mean something different for function types,\n \t     so the usual warnings are not appropriate.  */\n@@ -3816,13 +3816,13 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t     qualifier are acceptable if the 'volatile' has been added\n \t\t     in by the Objective-C EH machinery.  */\n \t\t  if (!objc_type_quals_match (ttl, ttr))\n-\t\t    WARN_FOR_ASSIGNMENT (N_(\"passing argument %d of %qE discards \"\n+\t\t    WARN_FOR_ASSIGNMENT (G_(\"passing argument %d of %qE discards \"\n \t\t\t\t\t    \"qualifiers from pointer target type\"),\n-\t\t\t\t\t N_(\"assignment discards qualifiers \"\n+\t\t\t\t\t G_(\"assignment discards qualifiers \"\n \t\t\t\t\t    \"from pointer target type\"),\n-\t\t\t\t\t N_(\"initialization discards qualifiers \"\n+\t\t\t\t\t G_(\"initialization discards qualifiers \"\n \t\t\t\t\t    \"from pointer target type\"),\n-\t\t\t\t\t N_(\"return discards qualifiers from \"\n+\t\t\t\t\t G_(\"return discards qualifiers from \"\n \t\t\t\t\t    \"pointer target type\"));\n \t\t}\n \t      /* If this is not a case of ignoring a mismatch in signedness,\n@@ -3832,13 +3832,13 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t;\n \t      /* If there is a mismatch, do warn.  */\n \t      else if (warn_pointer_sign)\n-\t\tWARN_FOR_ASSIGNMENT (N_(\"pointer targets in passing argument \"\n+\t\tWARN_FOR_ASSIGNMENT (G_(\"pointer targets in passing argument \"\n \t\t\t\t\t\"%d of %qE differ in signedness\"),\n-\t\t\t\t     N_(\"pointer targets in assignment \"\n+\t\t\t\t     G_(\"pointer targets in assignment \"\n \t\t\t\t\t\"differ in signedness\"),\n-\t\t\t\t     N_(\"pointer targets in initialization \"\n+\t\t\t\t     G_(\"pointer targets in initialization \"\n \t\t\t\t\t\"differ in signedness\"),\n-\t\t\t\t     N_(\"pointer targets in return differ \"\n+\t\t\t\t     G_(\"pointer targets in return differ \"\n \t\t\t\t\t\"in signedness\"));\n \t    }\n \t  else if (TREE_CODE (ttl) == FUNCTION_TYPE\n@@ -3849,26 +3849,26 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t it is okay to use a const or volatile function\n \t\t where an ordinary one is wanted, but not vice-versa.  */\n \t      if (TYPE_QUALS (ttl) & ~TYPE_QUALS (ttr))\n-\t\tWARN_FOR_ASSIGNMENT (N_(\"passing argument %d of %qE makes \"\n+\t\tWARN_FOR_ASSIGNMENT (G_(\"passing argument %d of %qE makes \"\n \t\t\t\t\t\"qualified function pointer \"\n \t\t\t\t\t\"from unqualified\"),\n-\t\t\t\t     N_(\"assignment makes qualified function \"\n+\t\t\t\t     G_(\"assignment makes qualified function \"\n \t\t\t\t\t\"pointer from unqualified\"),\n-\t\t\t\t     N_(\"initialization makes qualified \"\n+\t\t\t\t     G_(\"initialization makes qualified \"\n \t\t\t\t\t\"function pointer from unqualified\"),\n-\t\t\t\t     N_(\"return makes qualified function \"\n+\t\t\t\t     G_(\"return makes qualified function \"\n \t\t\t\t\t\"pointer from unqualified\"));\n \t    }\n \t}\n       else\n \t/* Avoid warning about the volatile ObjC EH puts on decls.  */\n \tif (!objc_ok)\n-\t  WARN_FOR_ASSIGNMENT (N_(\"passing argument %d of %qE from \"\n+\t  WARN_FOR_ASSIGNMENT (G_(\"passing argument %d of %qE from \"\n \t\t\t\t  \"incompatible pointer type\"),\n-\t\t\t       N_(\"assignment from incompatible pointer type\"),\n-\t\t\t       N_(\"initialization from incompatible \"\n+\t\t\t       G_(\"assignment from incompatible pointer type\"),\n+\t\t\t       G_(\"initialization from incompatible \"\n \t\t\t\t  \"pointer type\"),\n-\t\t\t       N_(\"return from incompatible pointer type\"));\n+\t\t\t       G_(\"return from incompatible pointer type\"));\n \n       return convert (type, rhs);\n     }\n@@ -3890,26 +3890,26 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t    && TREE_CODE (TREE_TYPE (rhs)) == INTEGER_TYPE\n \t    && TREE_CODE (TREE_OPERAND (rhs, 0)) == INTEGER_CST\n \t    && integer_zerop (TREE_OPERAND (rhs, 0))))\n-\tWARN_FOR_ASSIGNMENT (N_(\"passing argument %d of %qE makes \"\n+\tWARN_FOR_ASSIGNMENT (G_(\"passing argument %d of %qE makes \"\n \t\t\t\t\"pointer from integer without a cast\"),\n-\t\t\t     N_(\"assignment makes pointer from integer \"\n+\t\t\t     G_(\"assignment makes pointer from integer \"\n \t\t\t\t\"without a cast\"),\n-\t\t\t     N_(\"initialization makes pointer from \"\n+\t\t\t     G_(\"initialization makes pointer from \"\n \t\t\t\t\"integer without a cast\"),\n-\t\t\t     N_(\"return makes pointer from integer \"\n+\t\t\t     G_(\"return makes pointer from integer \"\n \t\t\t\t\"without a cast\"));\n \n       return convert (type, rhs);\n     }\n   else if (codel == INTEGER_TYPE && coder == POINTER_TYPE)\n     {\n-      WARN_FOR_ASSIGNMENT (N_(\"passing argument %d of %qE makes integer \"\n+      WARN_FOR_ASSIGNMENT (G_(\"passing argument %d of %qE makes integer \"\n \t\t\t      \"from pointer without a cast\"),\n-\t\t\t   N_(\"assignment makes integer from pointer \"\n+\t\t\t   G_(\"assignment makes integer from pointer \"\n \t\t\t      \"without a cast\"),\n-\t\t\t   N_(\"initialization makes integer from pointer \"\n+\t\t\t   G_(\"initialization makes integer from pointer \"\n \t\t\t      \"without a cast\"),\n-\t\t\t   N_(\"return makes integer from pointer \"\n+\t\t\t   G_(\"return makes integer from pointer \"\n \t\t\t      \"without a cast\"));\n       return convert (type, rhs);\n     }"}, {"sha": "f89a925124caf5b89adce946c3229048e4ba3945", "filename": "gcc/collect2.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -328,26 +328,26 @@ collect_exit (int status)\n \f\n /* Notify user of a non-error.  */\n void\n-notice (const char *msgid, ...)\n+notice (const char *cmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  vfprintf (stderr, _(msgid), ap);\n+  va_start (ap, cmsgid);\n+  vfprintf (stderr, _(cmsgid), ap);\n   va_end (ap);\n }\n \n /* Die when sys call fails.  */\n \n void\n-fatal_perror (const char * msgid, ...)\n+fatal_perror (const char * cmsgid, ...)\n {\n   int e = errno;\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, cmsgid);\n   fprintf (stderr, \"collect2: \");\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(cmsgid), ap);\n   fprintf (stderr, \": %s\\n\", xstrerror (e));\n   va_end (ap);\n \n@@ -357,13 +357,13 @@ fatal_perror (const char * msgid, ...)\n /* Just die.  */\n \n void\n-fatal (const char * msgid, ...)\n+fatal (const char * cmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, cmsgid);\n   fprintf (stderr, \"collect2: \");\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(cmsgid), ap);\n   fprintf (stderr, \"\\n\");\n   va_end (ap);\n \n@@ -373,13 +373,13 @@ fatal (const char * msgid, ...)\n /* Write error message.  */\n \n void\n-error (const char * msgid, ...)\n+error (const char * gmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n   fprintf (stderr, \"collect2: \");\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(gmsgid), ap);\n   fprintf (stderr, \"\\n\");\n   va_end(ap);\n }"}, {"sha": "5118871ac2de5d0db02d5b21570cac75700331df", "filename": "gcc/config/c4x/c4x-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -57,7 +57,7 @@ static int c4x_parse_pragma (const char *, tree *, tree *);\n    the STRING_CST node of the string.  If SECT is null, then this\n    pragma doesn't take a section string.  Returns 0 for a good pragma,\n    -1 for a malformed pragma.  */\n-#define BAD(msgid, arg) do { warning (0, msgid, arg); return -1; } while (0)\n+#define BAD(gmsgid, arg) do { warning (0, gmsgid, arg); return -1; } while (0)\n \n static int\n c4x_parse_pragma (name, func, sect)"}, {"sha": "6eb8d2ba405e0dbc123ded91082bd8d2a548ae69", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Pragmas.  */\n \n-#define BAD(msgid) do { warning (0, msgid); return; } while (0)\n+#define BAD(gmsgid) do { warning (0, gmsgid); return; } while (0)\n \n static bool using_frameworks = false;\n "}, {"sha": "748269183496d0fb7d02c8338c1e525b8a4dc7c2", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -50,8 +50,8 @@ static tree altivec_resolve_overloaded_builtin (tree, tree);\n    whether or not new function declarations receive a longcall\n    attribute by default.  */\n \n-#define SYNTAX_ERROR(msgid) do {\t\t\t\\\n-  warning (0, msgid);\t\t\t\t\t\\\n+#define SYNTAX_ERROR(gmsgid) do {\t\t\t\\\n+  warning (0, gmsgid);\t\t\t\t\t\\\n   warning (0, \"ignoring malformed #pragma longcall\");\t\\\n   return;\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "cbfe76499368748a22a36a87cf3e0907c734b76e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1,3 +1,9 @@\n+2005-06-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* error.c (locate_error): Use gmsgid instead of msgid for argument\n+\tname.\n+\t(cp_error_at, cp_warning_at, cp_pedwarn_at): Likewise.\n+\n 2005-06-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR 21903"}, {"sha": "71b7173945eaf642991a160f09d0b0f271b4e4e7", "filename": "gcc/cp/error.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -2319,13 +2319,13 @@ cp_printer (pretty_printer *pp, text_info *text)\n    behavior of cp_*_at.  */\n \n static tree\n-locate_error (const char *msgid, va_list ap)\n+locate_error (const char *gmsgid, va_list ap)\n {\n   tree here = 0, t;\n   int plus = 0;\n   const char *f;\n \n-  for (f = msgid; *f; f++)\n+  for (f = gmsgid; *f; f++)\n     {\n       plus = 0;\n       if (*f == '%')\n@@ -2381,57 +2381,57 @@ locate_error (const char *msgid, va_list ap)\n \n \n void\n-cp_error_at (const char *msgid, ...)\n+cp_error_at (const char *gmsgid, ...)\n {\n   tree here;\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  here = locate_error (msgid, ap);\n+  va_start (ap, gmsgid);\n+  here = locate_error (gmsgid, ap);\n   va_end (ap);\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap,\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap,\n                        input_location, DK_ERROR);\n   cp_diagnostic_starter (global_dc, &diagnostic);\n-  diagnostic_set_info (&diagnostic, msgid, &ap,\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap,\n                        location_of (here), DK_ERROR);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n \n void\n-cp_warning_at (const char *msgid, ...)\n+cp_warning_at (const char *gmsgid, ...)\n {\n   tree here;\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  here = locate_error (msgid, ap);\n+  va_start (ap, gmsgid);\n+  here = locate_error (gmsgid, ap);\n   va_end (ap);\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap,\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap,\n                        location_of (here), DK_WARNING);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n \n void\n-cp_pedwarn_at (const char *msgid, ...)\n+cp_pedwarn_at (const char *gmsgid, ...)\n {\n   tree here;\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  here = locate_error (msgid, ap);\n+  va_start (ap, gmsgid);\n+  here = locate_error (gmsgid, ap);\n   va_end (ap);\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap,\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap,\n                        location_of (here), pedantic_error_kind());\n   report_diagnostic (&diagnostic);\n   va_end (ap);"}, {"sha": "35bce25d97fc307c60a1b8101281324b9f4c8afe", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -113,13 +113,13 @@ diagnostic_initialize (diagnostic_context *context)\n }\n \n void\n-diagnostic_set_info (diagnostic_info *diagnostic, const char *msgid,\n+diagnostic_set_info (diagnostic_info *diagnostic, const char *gmsgid,\n \t\t     va_list *args, location_t location,\n \t\t     diagnostic_t kind)\n {\n   diagnostic->message.err_no = errno;\n   diagnostic->message.args_ptr = args;\n-  diagnostic->message.format_spec = _(msgid);\n+  diagnostic->message.format_spec = _(gmsgid);\n   diagnostic->location = location;\n   diagnostic->kind = kind;\n   diagnostic->option_index = 0;\n@@ -396,15 +396,15 @@ trim_filename (const char *name)\n /* Text to be emitted verbatim to the error message stream; this\n    produces no prefix and disables line-wrapping.  Use rarely.  */\n void\n-verbatim (const char *msgid, ...)\n+verbatim (const char *gmsgid, ...)\n {\n   text_info text;\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n   text.err_no = errno;\n   text.args_ptr = &ap;\n-  text.format_spec = _(msgid);\n+  text.format_spec = _(gmsgid);\n   pp_format_verbatim (global_dc->printer, &text);\n   pp_flush (global_dc->printer);\n   va_end (ap);\n@@ -413,41 +413,41 @@ verbatim (const char *msgid, ...)\n /* An informative note.  Use this for additional details on an error\n    message.  */\n void\n-inform (const char *msgid, ...)\n+inform (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_NOTE);\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_NOTE);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n \n /* A warning.  Use this for code which is correct according to the\n    relevant language specification but is likely to be buggy anyway.  */\n void\n-warning (int opt, const char *msgid, ...)\n+warning (int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_WARNING);\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_WARNING);\n   diagnostic.option_index = opt;\n \n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n \n void\n-warning0 (const char *msgid, ...)\n+warning0 (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_WARNING);\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_WARNING);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n@@ -461,13 +461,13 @@ warning0 (const char *msgid, ...)\n    of the -pedantic command-line switch.  To get a warning enabled\n    only with that switch, write \"if (pedantic) pedwarn (...);\"  */\n void\n-pedwarn (const char *msgid, ...)\n+pedwarn (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location,\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n \t\t       pedantic_error_kind ());\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n@@ -476,13 +476,13 @@ pedwarn (const char *msgid, ...)\n /* A hard error: the code is definitely ill-formed, and an object file\n    will not be produced.  */\n void\n-error (const char *msgid, ...)\n+error (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_ERROR);\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_ERROR);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n@@ -491,13 +491,13 @@ error (const char *msgid, ...)\n    required by the relevant specification but not implemented by GCC.\n    An object file will not be produced.  */\n void\n-sorry (const char *msgid, ...)\n+sorry (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_SORRY);\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_SORRY);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n@@ -506,13 +506,13 @@ sorry (const char *msgid, ...)\n    continue.  Do not use this for internal consistency checks; that's\n    internal_error.  Use of this function should be rare.  */\n void\n-fatal_error (const char *msgid, ...)\n+fatal_error (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_FATAL);\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_FATAL);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n \n@@ -524,13 +524,13 @@ fatal_error (const char *msgid, ...)\n    a more specific message, or some other good reason, you should use\n    abort () instead of calling this function directly.  */\n void\n-internal_error (const char *msgid, ...)\n+internal_error (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_ICE);\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_ICE);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n \n@@ -543,12 +543,12 @@ internal_error (const char *msgid, ...)\n /* Print a diagnostic MSGID on FILE.  This is just fprintf, except it\n    runs its second argument through gettext.  */\n void\n-fnotice (FILE *file, const char *msgid, ...)\n+fnotice (FILE *file, const char *cmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  vfprintf (file, _(msgid), ap);\n+  va_start (ap, cmsgid);\n+  vfprintf (file, _(cmsgid), ap);\n   va_end (ap);\n }\n "}, {"sha": "d4c9a027e738f8f1edb8742df7b3ebb83895acb5", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -328,7 +328,7 @@ the 1.9.x series, which is currently 1.9.3.  When regenerating a directory\n to a newer version, please update all the directories using an older 1.9.x\n to the latest released version.\n \n-@item gettext version 0.12 (or later)\n+@item gettext version 0.14.5 (or later)\n \n Needed to regenerate @file{gcc.pot}.\n "}, {"sha": "5b7ac3cb5bfb6f28b945abe456a2c2e8b3566d0e", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -2753,17 +2753,17 @@ alter_cond (rtx cond)\n    In an `asm', it's the user's fault; otherwise, the compiler's fault.  */\n \n void\n-output_operand_lossage (const char *msgid, ...)\n+output_operand_lossage (const char *cmsgid, ...)\n {\n   char *fmt_string;\n   char *new_message;\n   const char *pfx_str;\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, cmsgid);\n \n   pfx_str = this_is_asm_operands ? _(\"invalid 'asm': \") : \"output_operand: \";\n-  asprintf (&fmt_string, \"%s%s\", pfx_str, _(msgid));\n+  asprintf (&fmt_string, \"%s%s\", pfx_str, _(cmsgid));\n   vasprintf (&new_message, fmt_string, ap);\n \n   if (this_is_asm_operands)"}, {"sha": "9be4a293371a2d23e3e912f0bdbf86992747d01f", "filename": "gcc/gcc.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -6716,40 +6716,46 @@ fancy_abort (const char *file, int line, const char *func)\n /* Output an error message and exit.  */\n \n void\n-fatal (const char *msgid, ...)\n+fatal (const char *cmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, cmsgid);\n \n   fprintf (stderr, \"%s: \", programname);\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(cmsgid), ap);\n   va_end (ap);\n   fprintf (stderr, \"\\n\");\n   delete_temp_files ();\n   exit (1);\n }\n \n+/* The argument is actually c-format, not gcc-internal-format,\n+   but because functions with identical names are used through\n+   the rest of the compiler with gcc-internal-format, we just\n+   need to hope all users of these functions use the common\n+   subset between c-format and gcc-internal-format.  */\n+\n void\n-error (const char *msgid, ...)\n+error (const char *gmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n   fprintf (stderr, \"%s: \", programname);\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(gmsgid), ap);\n   va_end (ap);\n \n   fprintf (stderr, \"\\n\");\n }\n \n static void\n-notice (const char *msgid, ...)\n+notice (const char *cmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  vfprintf (stderr, _(msgid), ap);\n+  va_start (ap, cmsgid);\n+  vfprintf (stderr, _(cmsgid), ap);\n   va_end (ap);\n }\n \f"}, {"sha": "9803672dc41a9ab68f38c26d29be400c51d6619d", "filename": "gcc/gcov.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -367,12 +367,12 @@ main (int argc, char **argv)\n }\n \n static void\n-fnotice (FILE *file, const char *msgid, ...)\n+fnotice (FILE *file, const char *cmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  vfprintf (file, _(msgid), ap);\n+  va_start (ap, cmsgid);\n+  vfprintf (file, _(cmsgid), ap);\n   va_end (ap);\n }\n \f"}, {"sha": "cca596d984d135a4f6b7371bfb468016d21c7776", "filename": "gcc/intl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fintl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fintl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl.h?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -51,6 +51,10 @@ extern size_t gcc_gettext_width (const char *);\n # define N_(msgid) msgid\n #endif\n \n+#ifndef G_\n+# define G_(gmsgid) gmsgid\n+#endif\n+\n extern const char *open_quote;\n extern const char *close_quote;\n "}, {"sha": "aaca59db0eb5fadc321f5fe09106892c76ef2123", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1,3 +1,12 @@\n+2005-06-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* jv-scan.c (fatal_error, warning, warning0): Use gmsgid instead of\n+\tmsgid for argument name.\n+\t* gjavah.c (error): Likewise.\n+\t* java-tree.h (parse_error_context): Likewise.\n+\t* parse.y (parse_error_context, parse_warning_context,\n+\tissue_warning_error_from_context): Likewise.\n+\n 2005-06-01  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/21722:"}, {"sha": "5b36dae34bcef1c268913d3bf125304db8f1b18d", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -164,7 +164,7 @@ static const unsigned char *\n   decode_signature_piece (FILE *, const unsigned char *,\n \t\t\t  const unsigned char *, int *);\n static void print_class_decls (FILE *, JCF *, int);\n-static void error (const char *msgid, ...);\n+static void error (const char *gmsgid, ...);\n static void usage (void) ATTRIBUTE_NORETURN;\n static void help (void) ATTRIBUTE_NORETURN;\n static void version (void) ATTRIBUTE_NORETURN;\n@@ -266,16 +266,19 @@ static int decompiled = 0;\n \n #include \"jcf-reader.c\"\n \n-/* Print an error message and set found_error.  */\n+/* Print an error message and set found_error.\n+   Not really gcc-internal-format message, but as error elsewhere\n+   uses it, assume all users will use intersection between\n+   c-format and gcc-internal-format.  */\n static void\n-error (const char *msgid, ...)\n+error (const char *gmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n \n   fprintf (stderr, TOOLNAME \": \");\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(gmsgid), ap);\n   va_end (ap);\n   fprintf (stderr, \"\\n\");\n   found_error = 1;"}, {"sha": "53e9cfd1a47937bd0729c569dd7f0cd37e679322", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1305,7 +1305,7 @@ extern tree emit_symbol_table (tree, tree, tree, tree, tree, int);\n extern void lang_init_source (int);\n extern void write_classfile (tree);\n extern char *print_int_node (tree);\n-extern void parse_error_context (tree cl, const char *msgid, ...);\n+extern void parse_error_context (tree cl, const char *gmsgid, ...);\n extern void finish_class (void);\n extern void java_layout_seen_class_methods (void);\n extern void check_for_initialization (tree, tree);"}, {"sha": "0f09e91d2ea22b02e01ff4b4f171575f0b1b58a7", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -40,10 +40,10 @@ Boston, MA 02111-1307, USA.  */\n \n #include <getopt.h>\n \n-extern void fatal_error (const char *msgid, ...)\n+extern void fatal_error (const char *gmsgid, ...)\n      ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void warning (int opt, const char *msgid, ...) ATTRIBUTE_PRINTF_2;\n-void warning0 (const char *msgid, ...) ATTRIBUTE_PRINTF_1;\n+void warning (int opt, const char *gmsgid, ...) ATTRIBUTE_PRINTF_2;\n+void warning0 (const char *gmsgid, ...) ATTRIBUTE_PRINTF_1;\n void report (void);\n \n static void usage (void) ATTRIBUTE_NORETURN;\n@@ -245,38 +245,40 @@ main (int argc, char **argv)\n \f\n \n /* Error report, memory, obstack initialization and other utility\n-   functions */\n+   functions.  Use actually c-format msgid, but as functions with\n+   the same name elsewhere use gcc-internal-format, assume all users\n+   here use intersection between c-format and gcc-internal-format.  */\n \n void\n-fatal_error (const char *msgid, ...)\n+fatal_error (const char *gmsgid, ...)\n {\n   va_list ap;\n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n   fprintf (stderr, _(\"%s: error: \"), exec_name);\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(gmsgid), ap);\n   fputc ('\\n', stderr);\n   va_end (ap);\n   exit (1);\n }\n \n void\n-warning (int opt ATTRIBUTE_UNUSED, const char *msgid, ...)\n+warning (int opt ATTRIBUTE_UNUSED, const char *gmsgid, ...)\n {\n   va_list ap;\n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n   fprintf (stderr, _(\"%s: warning: \"), exec_name);\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(gmsgid), ap);\n   fputc ('\\n', stderr);\n   va_end (ap);\n }\n \n void\n-warning0 (const char *msgid, ...)\n+warning0 (const char *gmsgid, ...)\n {\n   va_list ap;\n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n   fprintf (stderr, _(\"%s: warning: \"), exec_name);\n-  vfprintf (stderr, _(msgid), ap);\n+  vfprintf (stderr, _(gmsgid), ap);\n   fputc ('\\n', stderr);\n   va_end (ap);\n }"}, {"sha": "632b7ec43fc1abfe477e3e3fb140abc32ac73ae4", "filename": "gcc/java/parse.y", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -96,13 +96,13 @@ static tree lookup_java_method2 (tree, tree, int);\n static tree method_header (int, tree, tree, tree);\n static void fix_method_argument_names (tree ,tree);\n static tree method_declarator (tree, tree);\n-static void parse_warning_context (tree cl, const char *msgid, ...);\n+static void parse_warning_context (tree cl, const char *gmsgid, ...);\n #ifdef USE_MAPPED_LOCATION\n static void issue_warning_error_from_context\n-  (source_location, const char *msgid, va_list *);\n+  (source_location, const char *gmsgid, va_list *);\n #else\n static void issue_warning_error_from_context\n-  (tree, const char *msgid, va_list *);\n+  (tree, const char *gmsgid, va_list *);\n #endif\n static void parse_ctor_invocation_error (void);\n static tree parse_jdk1_1_error (const char *);\n@@ -3126,7 +3126,7 @@ issue_warning_error_from_context (\n #else\n \t\t\t\t  tree cl,\n #endif\n-\t\t\t\t  const char *msgid, va_list *ap)\n+\t\t\t\t  const char *gmsgid, va_list *ap)\n {\n #ifdef USE_MAPPED_LOCATION\n   source_location saved_location = input_location;\n@@ -3140,7 +3140,7 @@ issue_warning_error_from_context (\n \n   text.err_no = errno;\n   text.args_ptr = ap;\n-  text.format_spec = msgid;\n+  text.format_spec = gmsgid;\n   pp_format_text (global_dc->printer, &text);\n   strncpy (buffer, pp_formatted_text (global_dc->printer), sizeof (buffer) - 1);\n   buffer[sizeof (buffer) - 1] = '\\0';\n@@ -3182,14 +3182,14 @@ issue_warning_error_from_context (\n    FUTURE/FIXME:  change cl to be a source_location. */\n \n void\n-parse_error_context (tree cl, const char *msgid, ...)\n+parse_error_context (tree cl, const char *gmsgid, ...)\n {\n   va_list ap;\n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n #ifdef USE_MAPPED_LOCATION\n-  issue_warning_error_from_context (EXPR_LOCATION (cl), msgid, &ap);\n+  issue_warning_error_from_context (EXPR_LOCATION (cl), gmsgid, &ap);\n #else\n-  issue_warning_error_from_context (cl, msgid, &ap);\n+  issue_warning_error_from_context (cl, gmsgid, &ap);\n #endif\n   va_end (ap);\n }\n@@ -3198,16 +3198,16 @@ parse_error_context (tree cl, const char *msgid, ...)\n    FUTURE/FIXME:  change cl to be a source_location. */\n \n static void\n-parse_warning_context (tree cl, const char *msgid, ...)\n+parse_warning_context (tree cl, const char *gmsgid, ...)\n {\n   va_list ap;\n-  va_start (ap, msgid);\n+  va_start (ap, gmsgid);\n \n   do_warning = 1;\n #ifdef USE_MAPPED_LOCATION\n-  issue_warning_error_from_context (EXPR_LOCATION (cl), msgid, &ap);\n+  issue_warning_error_from_context (EXPR_LOCATION (cl), gmsgid, &ap);\n #else\n-  issue_warning_error_from_context (cl, msgid, &ap);\n+  issue_warning_error_from_context (cl, gmsgid, &ap);\n #endif\n   do_warning = 0;\n   va_end (ap);"}, {"sha": "1a0df14db125101674657907969ca56f87a73a09", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1,3 +1,11 @@\n+2005-06-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* exgettext: Handle gmsgid and cmsgid arguments specially,\n+\tas gcc-internal-format and c-format.  Because of xgettext\n+\tbug, invoke xgettext once with --language=c, once with\n+\t--language=GCC-source and then merge together.  Fail if\n+\txgettext is not 0.14.5 or later.\n+\n 2005-05-31  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "40c646390cf8fb61b04a56bea7d8fa4740aa7fbe", "filename": "gcc/po/exgettext", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fpo%2Fexgettext", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fpo%2Fexgettext", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fexgettext?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -43,6 +43,12 @@ xgettext=$1\n package=$2\n srcdir=$3\n \n+case `$xgettext --version | sed -e 1q | sed -e 's/^\\([^0-9]*\\)//'` in\n+  0.14.[5-9]* | 0.14.[1-9][0-9]* | 0.1[5-9]* | 0.[2-9][0-9]* | [1-9].*) : ;;\n+  *) echo \"$xgettext is too old.  GNU xgettext 0.14.5 is required\"\n+     exit 1 ;;\n+esac\n+\n nl='\n '\n \n@@ -55,8 +61,12 @@ trap \"rm -r $T\" 0\n \n pwd=`${PWDCMD-pwd}`\n kopt=$pwd/$T/keyword-options\n+kopt2=$pwd/$T/keyword2-options\n emsg=$pwd/$T/emsgids.c\n posr=$pwd/$T/po-sources\n+pottmp1=$pwd/$T/tmp1.pot\n+pottmp2=$pwd/$T/tmp2.pot\n+pottmp=$pwd/$T/tmp.pot\n \n # Locate files to scan, and generate the list.  All .c, .h, and .def files\n # in $srcdir are examined, likewise $srcdir/config and $srcdir/config/*\n@@ -81,7 +91,7 @@ echo \"scanning for keywords and %e strings...\" >&2\n         done\n     done;\n   } | tr ' ' \"$nl\" | grep -v '\\*' |\n-  $AWK -v excl=po/EXCLUDES -v posr=$posr -v kopt=$kopt -v emsg=$emsg '\n+  $AWK -v excl=po/EXCLUDES -v posr=$posr -v kopt=$kopt -v kopt2=$kopt2 -v emsg=$emsg '\n function keyword_option(line) {\n     paren_index = index(line, \"(\")\n     name = substr(line, 1, paren_index - 1)\n@@ -95,12 +105,28 @@ function keyword_option(line) {\n     for (n = 1; sub(/^[^,]*,/, \"\", args); n++) {\n \tcontinue\n     }\n+    format=\"\"\n+    if (args ~ /g$/)\n+    \tformat=\"gcc-internal-format\"\n+    else if (args ~ /c$/)\n+    \tformat=\"c-format\"\n+\n+    if (n == 1) { keyword = \"--keyword=\" name }\n+    else { keyword = \"--keyword=\" name \":\" n }\n+    if (format) {\n+        keyword=keyword \"\\n--flag=\" name \":\" n \":\" format\n+    }\n \n-    if (n == 1) { keyword = name }\n-    else        { keyword = name \":\" n }\n-\n-    if (! keyword_seen[keyword]++) {\n-\tprint \"--keyword=\" keyword > kopt\n+    if (! keyword_seen[name]) {\n+\tif (format == \"gcc-internal-format\")\n+\t\tprint keyword > kopt2\n+\telse\n+\t\tprint keyword > kopt\n+    \tkeyword_seen[name] = keyword\n+    } else if (keyword_seen[name] != keyword) {\n+\tprintf(\"%s used incompatibly as both %s and %s\\n\",\n+\t       name, keyword_seen[name], keyword)\n+\texit (1)\n     }\n }\n \n@@ -155,7 +181,7 @@ END {\n     }\n     print emsg > posr\n }'\n-)\n+) || exit\n \n echo \"scanning option files...\" >&2\n \n@@ -186,7 +212,16 @@ $xgettext --default-domain=$package --directory=$srcdir \\\n \t  --add-comments `cat $kopt` --files-from=$posr \\\n \t  --copyright-holder=\"Free Software Foundation, Inc.\" \\\n \t  --msgid-bugs-address=\"http://gcc.gnu.org/bugs.html\" \\\n-\t  --language=c -o po/$package.pot.tmp\n+\t  --language=c -o $pottmp1\n+$xgettext --default-domain=$package --directory=$srcdir \\\n+\t  --add-comments --keyword= `cat $kopt2` --files-from=$posr \\\n+\t  --copyright-holder=\"Free Software Foundation, Inc.\" \\\n+\t  --msgid-bugs-address=\"http://gcc.gnu.org/bugs.html\" \\\n+\t  --language=GCC-source -o $pottmp2\n+$xgettext --default-domain=$package \\\n+\t  --add-comments $pottmp1 $pottmp2 \\\n+\t  --copyright-holder=\"Free Software Foundation, Inc.\" \\\n+\t  --msgid-bugs-address=\"http://gcc.gnu.org/bugs.html\" \\\n+\t  --language=PO -o $pottmp\n # Remove local paths from .pot file.\n-sed \"s:$srcdir/::g;s:$pwd/::g;\" <po/$package.pot.tmp >po/$package.pot\n-rm po/$package.pot.tmp\n+sed \"s:$srcdir/::g;s:$pwd/::g;\" <$pottmp >po/$package.pot"}, {"sha": "e9f177ea73fb37b579757075a44104f46bafd558", "filename": "gcc/protoize.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -505,12 +505,12 @@ static char * saved_repl_write_ptr;\n \f\n /* Translate and output an error message.  */\n static void\n-notice (const char *msgid, ...)\n+notice (const char *cmsgid, ...)\n {\n   va_list ap;\n   \n-  va_start (ap, msgid);\n-  vfprintf (stderr, _(msgid), ap);\n+  va_start (ap, cmsgid);\n+  vfprintf (stderr, _(cmsgid), ap);\n   va_end (ap);\n }\n "}, {"sha": "3521c1d361ae074604a63b341b155eccc32816c1", "filename": "gcc/rtl-error.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Frtl-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Frtl-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-error.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -87,22 +87,22 @@ diagnostic_for_asm (rtx insn, const char *msg, va_list *args_ptr,\n }\n \n void\n-error_for_asm (rtx insn, const char *msgid, ...)\n+error_for_asm (rtx insn, const char *gmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_for_asm (insn, msgid, &ap, DK_ERROR);\n+  va_start (ap, gmsgid);\n+  diagnostic_for_asm (insn, gmsgid, &ap, DK_ERROR);\n   va_end (ap);\n }\n \n void\n-warning_for_asm (rtx insn, const char *msgid, ...)\n+warning_for_asm (rtx insn, const char *gmsgid, ...)\n {\n   va_list ap;\n \n-  va_start (ap, msgid);\n-  diagnostic_for_asm (insn, msgid, &ap, DK_WARNING);\n+  va_start (ap, gmsgid);\n+  diagnostic_for_asm (insn, gmsgid, &ap, DK_WARNING);\n   va_end (ap);\n }\n "}, {"sha": "6d2ef06eb27d6887d55eb4f4e371014a3bd64000", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1299,7 +1299,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  && !lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)))\n \t{\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction %qF can never be inlined because it uses \"\n+\t    = G_(\"%Jfunction %qF can never be inlined because it uses \"\n \t\t \"alloca (override using the always_inline attribute)\");\n \t  return node;\n \t}\n@@ -1311,7 +1311,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n       if (setjmp_call_p (t))\n \t{\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction %qF can never be inlined because it uses setjmp\");\n+\t    = G_(\"%Jfunction %qF can never be inlined because it uses setjmp\");\n \t  return node;\n \t}\n \n@@ -1325,7 +1325,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  case BUILT_IN_NEXT_ARG:\n \t  case BUILT_IN_VA_END:\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction %qF can never be inlined because it \"\n+\t      = G_(\"%Jfunction %qF can never be inlined because it \"\n \t\t   \"uses variable argument lists\");\n \t    return node;\n \n@@ -1336,14 +1336,14 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t       function calling __builtin_longjmp to be inlined into the\n \t       function calling __builtin_setjmp, Things will Go Awry.  */\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction %qF can never be inlined because \"\n+\t      = G_(\"%Jfunction %qF can never be inlined because \"\n \t\t   \"it uses setjmp-longjmp exception handling\");\n \t    return node;\n \n \t  case BUILT_IN_NONLOCAL_GOTO:\n \t    /* Similarly.  */\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction %qF can never be inlined because \"\n+\t      = G_(\"%Jfunction %qF can never be inlined because \"\n \t\t   \"it uses non-local goto\");\n \t    return node;\n \n@@ -1354,7 +1354,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t       been inlined into.  Similarly __builtin_return would\n \t       return from the function the inline has been inlined into.  */\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction %qF can never be inlined because \"\n+\t      = G_(\"%Jfunction %qF can never be inlined because \"\n \t\t   \"it uses __builtin_return or __builtin_apply_args\");\n \t    return node;\n \n@@ -1373,7 +1373,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n       if (TREE_CODE (t) != LABEL_DECL)\n \t{\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction %qF can never be inlined \"\n+\t    = G_(\"%Jfunction %qF can never be inlined \"\n \t\t \"because it contains a computed goto\");\n \t  return node;\n \t}\n@@ -1387,7 +1387,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t     because we cannot remap the destination label used in the\n \t     function that is performing the non-local goto.  */\n \t  inline_forbidden_reason\n-\t    = N_(\"%Jfunction %qF can never be inlined \"\n+\t    = G_(\"%Jfunction %qF can never be inlined \"\n \t\t \"because it receives a non-local goto\");\n \t  return node;\n \t}\n@@ -1412,7 +1412,7 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \tif (variably_modified_type_p (TREE_TYPE (t), NULL))\n \t  {\n \t    inline_forbidden_reason\n-\t      = N_(\"%Jfunction %qF can never be inlined \"\n+\t      = G_(\"%Jfunction %qF can never be inlined \"\n \t\t   \"because it uses variable sized variables\");\n \t    return node;\n \t  }"}, {"sha": "03e39a5ee552e60c323dd92c52b1a2209c6b94ff", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b794eaf73ef8df7689d1e9de146e00398f2d1fd/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "patch": "@@ -1079,7 +1079,7 @@ walk_use_def_chains (tree var, walk_use_def_chains_fn fn, void *data,\n    warning text is in MSGID and LOCUS may contain a location or be null.  */\n \n static void\n-warn_uninit (tree t, const char *msgid, void *data)\n+warn_uninit (tree t, const char *gmsgid, void *data)\n {\n   tree var = SSA_NAME_VAR (t);\n   tree def = SSA_NAME_DEF_STMT (t);\n@@ -1107,7 +1107,7 @@ warn_uninit (tree t, const char *msgid, void *data)\n   locus = (context != NULL && EXPR_HAS_LOCATION (context)\n \t   ? EXPR_LOCUS (context)\n \t   : &DECL_SOURCE_LOCATION (var));\n-  warning (0, msgid, locus, var);\n+  warning (0, gmsgid, locus, var);\n   TREE_NO_WARNING (var) = 1;\n }\n    "}]}