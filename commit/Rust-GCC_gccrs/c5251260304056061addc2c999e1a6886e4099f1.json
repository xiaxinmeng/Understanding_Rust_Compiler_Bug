{"sha": "c5251260304056061addc2c999e1a6886e4099f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyNTEyNjAzMDQwNTYwNjFhZGRjMmM5OTllMWE2ODg2ZTQwOTlmMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-18T06:49:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-18T06:49:34Z"}, "message": "c-common.c (check_format_info_main): Minor cleanup...\n\n\t* c-common.c (check_format_info_main): Minor cleanup: move\n\tvariables into inner scopes; initialize declarations where\n\tappropriate; don't hardcode \"scanf\" name on warning for zero\n\twidth.\n\nFrom-SVN: r36929", "tree": {"sha": "fee70d81f793a80fd6466146ed13ef11ad54ce31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee70d81f793a80fd6466146ed13ef11ad54ce31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5251260304056061addc2c999e1a6886e4099f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5251260304056061addc2c999e1a6886e4099f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5251260304056061addc2c999e1a6886e4099f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5251260304056061addc2c999e1a6886e4099f1/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67673f5c5ba19b0012c518faa7aa7e3fc0a494b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67673f5c5ba19b0012c518faa7aa7e3fc0a494b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67673f5c5ba19b0012c518faa7aa7e3fc0a494b8"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "524109c2e056fdfd27b27600d889419f3a004a3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5251260304056061addc2c999e1a6886e4099f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5251260304056061addc2c999e1a6886e4099f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5251260304056061addc2c999e1a6886e4099f1", "patch": "@@ -1,3 +1,10 @@\n+2000-10-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (check_format_info_main): Minor cleanup: move\n+\tvariables into inner scopes; initialize declarations where\n+\tappropriate; don't hardcode \"scanf\" name on warning for zero\n+\twidth.\n+\n 2000-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.c (back_end_hook): New variable."}, {"sha": "221f4ebd44601245f70a51a905ed82a5993d9f96", "filename": "gcc/c-common.c", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5251260304056061addc2c999e1a6886e4099f1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5251260304056061addc2c999e1a6886e4099f1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c5251260304056061addc2c999e1a6886e4099f1", "patch": "@@ -2471,45 +2471,42 @@ check_format_info_main (status, res, info, format_chars, format_length,\n      tree params;\n      int arg_num;\n {\n-  int i;\n-  int suppressed;\n-  const char *length_chars = NULL;\n-  enum format_lengths length_chars_val = FMT_LEN_none;\n-  enum format_std_version length_chars_std = STD_C89;\n-  int format_char;\n   const char *orig_format_chars = format_chars;\n-  tree cur_param;\n-  tree wanted_type;\n-  int main_arg_num;\n-  tree main_arg_params;\n-  enum format_std_version wanted_type_std;\n-  const char *wanted_type_name;\n-  format_wanted_type width_wanted_type;\n-  format_wanted_type precision_wanted_type;\n-  format_wanted_type main_wanted_type;\n-  format_wanted_type *first_wanted_type;\n-  format_wanted_type *last_wanted_type;\n-  tree first_fillin_param;\n-  const format_kind_info *fki = NULL;\n-  const format_flag_spec *flag_specs = NULL;\n-  const format_flag_pair *bad_flag_pairs = NULL;\n-  const format_length_info *fli = NULL;\n-  const format_char_info *fci = NULL;\n-  char flag_chars[256];\n+  tree first_fillin_param = params;\n+\n+  const format_kind_info *fki = &format_types[info->format_type];\n+  const format_flag_spec *flag_specs = fki->flag_specs;\n+  const format_flag_pair *bad_flag_pairs = fki->bad_flag_pairs;\n+\n   /* -1 if no conversions taking an operand have been found; 0 if one has\n      and it didn't use $; 1 if $ formats are in use.  */\n   int has_operand_number = -1;\n \n-  first_fillin_param = params;\n   init_dollar_format_checking (info->first_arg_num, first_fillin_param);\n-  fki = &format_types[info->format_type];\n-  flag_specs = fki->flag_specs;\n-  bad_flag_pairs = fki->bad_flag_pairs;\n+\n   while (1)\n     {\n-      int aflag;\n-      first_wanted_type = NULL;\n-      last_wanted_type = NULL;\n+      int i;\n+      int suppressed = FALSE;\n+      const char *length_chars = NULL;\n+      enum format_lengths length_chars_val = FMT_LEN_none;\n+      enum format_std_version length_chars_std = STD_C89;\n+      int format_char;\n+      tree cur_param;\n+      tree wanted_type;\n+      int main_arg_num = 0;\n+      tree main_arg_params = 0;\n+      enum format_std_version wanted_type_std;\n+      const char *wanted_type_name;\n+      format_wanted_type width_wanted_type;\n+      format_wanted_type precision_wanted_type;\n+      format_wanted_type main_wanted_type;\n+      format_wanted_type *first_wanted_type = NULL;\n+      format_wanted_type *last_wanted_type = NULL;\n+      const format_length_info *fli = NULL;\n+      const format_char_info *fci = NULL;\n+      char flag_chars[256];\n+      int aflag = 0;\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - orig_format_chars != format_length)\n@@ -2537,9 +2534,6 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t  continue;\n \t}\n       flag_chars[0] = 0;\n-      suppressed = FALSE;\n-      main_arg_num = 0;\n-      main_arg_params = 0;\n \n       if ((fki->flags & FMT_FLAG_ARG_CONVERT) && has_operand_number != 0)\n \t{\n@@ -2653,7 +2647,8 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t\t  ++format_chars;\n \t\t}\n \t      if (found_width && !non_zero_width_char)\n-\t\tstatus_warning (status, \"zero width in scanf format\");\n+\t\tstatus_warning (status, \"zero width in %s format\",\n+\t\t\t\tfki->name);\n \t      if (found_width)\n \t\t{\n \t\t  i = strlen (flag_chars);\n@@ -2888,7 +2883,6 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \tflag_chars[i - d] = 0;\n       }\n \n-      aflag = 0;\n       if ((fki->flags & FMT_FLAG_SCANF_A_KLUDGE)\n \t  && index (flag_chars, 'a') != 0)\n \taflag = 1;"}]}