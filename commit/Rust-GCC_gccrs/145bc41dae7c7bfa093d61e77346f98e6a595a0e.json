{"sha": "145bc41dae7c7bfa093d61e77346f98e6a595a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1YmM0MWRhZTdjN2JmYTA5M2Q2MWU3NzM0NmY5OGU2YTU5NWEwZQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-29T15:22:28Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-30T19:10:49Z"}, "message": "Handle constants in wi_fold for trunc_mod.\n\nHandle const % const, as wi_fold_in_parts may now provide this.  Before this\n[10, 10] % [4, 4] would produce [0, 3] instead of [2, 2].\n\n\tgcc/\n\t* range-op.cc (operator_trunc_mod::wi_fold): Fold constants.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/pr61839_2.c: Adjust.  Add new const fold test.", "tree": {"sha": "b6aa0a6a9a985dabf305c65bd12a2d9a82f19493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6aa0a6a9a985dabf305c65bd12a2d9a82f19493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/145bc41dae7c7bfa093d61e77346f98e6a595a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145bc41dae7c7bfa093d61e77346f98e6a595a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/145bc41dae7c7bfa093d61e77346f98e6a595a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145bc41dae7c7bfa093d61e77346f98e6a595a0e/comments", "author": null, "committer": null, "parents": [{"sha": "ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebbcdd7fae1f802763850e4afedfdfa09cf10e1a"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "eb66e12677fe0c7c66b1d2b0a38e597a0b5f9580", "filename": "gcc/range-op.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145bc41dae7c7bfa093d61e77346f98e6a595a0e/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145bc41dae7c7bfa093d61e77346f98e6a595a0e/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=145bc41dae7c7bfa093d61e77346f98e6a595a0e", "patch": "@@ -3240,6 +3240,18 @@ operator_trunc_mod::wi_fold (irange &r, tree type,\n       return;\n     }\n \n+  // Check for constant and try to fold.\n+  if (lh_lb == lh_ub && rh_lb == rh_ub)\n+    {\n+      wi::overflow_type ov = wi::OVF_NONE;\n+      tmp = wi::mod_trunc (lh_lb, rh_lb, sign, &ov);\n+      if (ov == wi::OVF_NONE)\n+\t{\n+\t  r = int_range<2> (type, tmp, tmp);\n+\t  return;\n+\t}\n+    }\n+\n   // ABS (A % B) < ABS (B) and either 0 <= A % B <= A or A <= A % B <= 0.\n   new_ub = rh_ub - 1;\n   if (sign == SIGNED)"}, {"sha": "0e0f4c02113163b76147189264c8cb93ed8b029d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_2.c", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145bc41dae7c7bfa093d61e77346f98e6a595a0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145bc41dae7c7bfa093d61e77346f98e6a595a0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c?ref=145bc41dae7c7bfa093d61e77346f98e6a595a0e", "patch": "@@ -45,9 +45,40 @@ int bar2 ()\n   return 0;\n }\n \n-/* Dont optimize 972195717 / 0 in function foo.  */\n+/* Ensure we are folding modulus sub-ranges properly.  */\n+__attribute__ ((noinline))\n+int mod (int a, int b)\n+{\n+  int v1, v2;\n+  v1 = (a < 10) ? 12 : 24;\n+  v2 = (b > 20) ? 3 : 6;\n+\n+  if (a > 20)\n+    v1 = v1 * 2;\n+  if (b > 20)\n+    v2 = v2 * 2;\n+\n+  if (a == b)\n+    v2 = 0;\n+    \n+  /* v1 == 12, 24, or 48.  v2 == 0, 3, 6, or 12. */\n+  int c = v1 % v2;\n+  if (c == 0)\n+    ;\n+  else\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* EVRP now makes transformations in all functions, leaving a single\n+ * builtin_abort call in bar2. */\n+/* { dg-final { scan-tree-dump-times \"__builtin_abort\" 1 \"evrp\" } } */\n+\n+/* Make sure to optimize 972195717 / 0 in function foo.  */\n /* { dg-final { scan-tree-dump-times \"972195717 / \" 0  \"evrp\" } } */\n-/* Dont optimize 972195717 % 0 in function bar.  */\n-/* { dg-final { scan-tree-dump-times \"972195717 % \" 1 \"evrp\" } } */\n-/* May optimize in function bar2, but EVRP doesn't perform this yet.  */\n+/* Make sure  to optimize 972195717 % 0 in function bar.  */\n+/* { dg-final { scan-tree-dump-times \"972195717 % \" 0 \"evrp\" } } */\n+/* Make sure to optimize 972195717 % [1,2] function bar2.  */\n /* { dg-final { scan-tree-dump-times \"972195715 % \" 0 \"evrp\" } } */\n+/* [12,12][24,24][48,48] % [0,0][3,3][6,6][12,12] == [0,0] */\n+/* { dg-final { scan-tree-dump-times \"%\" 0 \"evrp\" } } */"}]}