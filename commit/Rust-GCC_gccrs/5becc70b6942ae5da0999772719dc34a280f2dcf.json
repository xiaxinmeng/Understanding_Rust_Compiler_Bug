{"sha": "5becc70b6942ae5da0999772719dc34a280f2dcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlY2M3MGI2OTQyYWU1ZGEwOTk5NzcyNzE5ZGMzNGEyODBmMmRjZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-15T06:25:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-15T06:25:38Z"}, "message": "Check for errors when converting array index to GENERIC.\n\nFrom-SVN: r167846", "tree": {"sha": "efa2ebb957f393790c526fc63fde160edcb2e5bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efa2ebb957f393790c526fc63fde160edcb2e5bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5becc70b6942ae5da0999772719dc34a280f2dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5becc70b6942ae5da0999772719dc34a280f2dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5becc70b6942ae5da0999772719dc34a280f2dcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5becc70b6942ae5da0999772719dc34a280f2dcf/comments", "author": null, "committer": null, "parents": [{"sha": "5c5ea553a72393408e66679dfbae8051f1cb36c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5ea553a72393408e66679dfbae8051f1cb36c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5ea553a72393408e66679dfbae8051f1cb36c0"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "2bbb11e6c3f24534c5ebc6a1a4cec5772edcb0e7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5becc70b6942ae5da0999772719dc34a280f2dcf/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5becc70b6942ae5da0999772719dc34a280f2dcf/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=5becc70b6942ae5da0999772719dc34a280f2dcf", "patch": "@@ -8977,6 +8977,8 @@ Array_index_expression::do_get_tree(Translate_context* context)\n   gcc_assert(array_type != NULL);\n \n   tree type_tree = array_type->get_tree(gogo);\n+  if (type_tree == error_mark_node)\n+    return error_mark_node;\n \n   tree array_tree = this->array_->get_tree(context);\n   if (array_tree == error_mark_node)\n@@ -8985,6 +8987,8 @@ Array_index_expression::do_get_tree(Translate_context* context)\n   if (array_type->length() == NULL && !DECL_P(array_tree))\n     array_tree = save_expr(array_tree);\n   tree length_tree = array_type->length_tree(gogo, array_tree);\n+  if (length_tree == error_mark_node)\n+    return error_mark_node;\n   length_tree = save_expr(length_tree);\n   tree length_type = TREE_TYPE(length_tree);\n \n@@ -9040,6 +9044,8 @@ Array_index_expression::do_get_tree(Translate_context* context)\n \t  // Open array.\n \t  tree values = array_type->value_pointer_tree(gogo, array_tree);\n \t  tree element_type_tree = array_type->element_type()->get_tree(gogo);\n+\t  if (element_type_tree == error_mark_node)\n+\t    return error_mark_node;\n \t  tree element_size = TYPE_SIZE_UNIT(element_type_tree);\n \t  tree offset = fold_build2_loc(loc, MULT_EXPR, sizetype,\n \t\t\t\t\tstart_tree, element_size);\n@@ -9052,6 +9058,8 @@ Array_index_expression::do_get_tree(Translate_context* context)\n   // Array slice.\n \n   tree capacity_tree = array_type->capacity_tree(gogo, array_tree);\n+  if (capacity_tree == error_mark_node)\n+    return error_mark_node;\n   capacity_tree = fold_convert_loc(loc, length_type, capacity_tree);\n \n   tree end_tree;\n@@ -9085,13 +9093,17 @@ Array_index_expression::do_get_tree(Translate_context* context)\n     }\n \n   tree element_type_tree = array_type->element_type()->get_tree(gogo);\n+  if (element_type_tree == error_mark_node)\n+    return error_mark_node;\n   tree element_size = TYPE_SIZE_UNIT(element_type_tree);\n \n   tree offset = fold_build2_loc(loc, MULT_EXPR, sizetype,\n \t\t\t\tfold_convert_loc(loc, sizetype, start_tree),\n \t\t\t\telement_size);\n \n   tree value_pointer = array_type->value_pointer_tree(gogo, array_tree);\n+  if (value_pointer == error_mark_node)\n+    return error_mark_node;\n \n   value_pointer = fold_build2_loc(loc, POINTER_PLUS_EXPR,\n \t\t\t\t  TREE_TYPE(value_pointer),"}]}