{"sha": "3f833dc291c4ece5b7419e9dacf08b0831782693", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4MzNkYzI5MWM0ZWNlNWI3NDE5ZTlkYWNmMDhiMDgzMTc4MjY5Mw==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-07-10T08:59:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-10T08:59:38Z"}, "message": "[Ada] Minor reformatting\n\n2019-07-10  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.adb: Reformatting and a typo fix.\n\nFrom-SVN: r273325", "tree": {"sha": "446fa50ea712509480d75804663bed320026bae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/446fa50ea712509480d75804663bed320026bae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f833dc291c4ece5b7419e9dacf08b0831782693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f833dc291c4ece5b7419e9dacf08b0831782693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f833dc291c4ece5b7419e9dacf08b0831782693", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f833dc291c4ece5b7419e9dacf08b0831782693/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9427de1bf3eb46ba1651a8fd2ce1feb7e8d63f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9427de1bf3eb46ba1651a8fd2ce1feb7e8d63f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9427de1bf3eb46ba1651a8fd2ce1feb7e8d63f1"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "4aa59b67f31154516207c59eab36a2ea41818c3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f833dc291c4ece5b7419e9dacf08b0831782693/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f833dc291c4ece5b7419e9dacf08b0831782693/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3f833dc291c4ece5b7419e9dacf08b0831782693", "patch": "@@ -1,3 +1,7 @@\n+2019-07-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb: Reformatting and a typo fix.\n+\n 2019-07-10  Yannick Moy  <moy@adacore.com>\n \n \t* exp_util.adb (Remove_Side_Effects): Prefer renamings for"}, {"sha": "e4fbd8b19f870a6b8f4f5ecf5a90db3c28a85948", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f833dc291c4ece5b7419e9dacf08b0831782693/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f833dc291c4ece5b7419e9dacf08b0831782693/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3f833dc291c4ece5b7419e9dacf08b0831782693", "patch": "@@ -343,7 +343,7 @@ package body Exp_Util is\n             return;\n          end if;\n \n-         --  Case of zero/non-zero semantics or non-standard enumeration\n+         --  Case of zero/nonzero semantics or nonstandard enumeration\n          --  representation. In each case, we rewrite the node as:\n \n          --      ityp!(N) /= False'Enum_Rep\n@@ -5618,7 +5618,7 @@ package body Exp_Util is\n          --  We can retrieve primitive operations by name if it is an internal\n          --  name. For equality we must check that both of its operands have\n          --  the same type, to avoid confusion with user-defined equalities\n-         --  than may have a non-symmetric signature.\n+         --  than may have a asymmetric signature.\n \n          exit when Chars (Op) = Name\n            and then\n@@ -6822,8 +6822,8 @@ package body Exp_Util is\n          N := Assoc_Node;\n          P := Parent (Assoc_Node);\n \n-      --  Non-subexpression case. Note that N is initially Empty in this case\n-      --  (N is only guaranteed Non-Empty in the subexpr case).\n+      --  Nonsubexpression case. Note that N is initially Empty in this case\n+      --  (N is only guaranteed non-Empty in the subexpr case).\n \n       else\n          N := Empty;\n@@ -8345,7 +8345,7 @@ package body Exp_Util is\n             S : Nat;\n \n          begin\n-            --  If component reference is for an array with non-static bounds,\n+            --  If component reference is for an array with nonstatic bounds,\n             --  then it is always aligned: we can only process unaligned arrays\n             --  with static bounds (more precisely compile time known bounds).\n \n@@ -9067,7 +9067,7 @@ package body Exp_Util is\n       then\n          Constr_Root := Root_Typ;\n \n-         --  At this point in the expansion, non-limited view of the type\n+         --  At this point in the expansion, nonlimited view of the type\n          --  must be available, otherwise the error will be reported later.\n \n          if From_Limited_With (Constr_Root)\n@@ -9840,7 +9840,7 @@ package body Exp_Util is\n       --  in the derivation chain starting from parent type Par_Typ leading to\n       --  derived type Deriv_Typ. The returned value is one of the following:\n       --\n-      --    * An entity which is either a discriminant or a non-discriminant\n+      --    * An entity which is either a discriminant or a nondiscriminant\n       --      name, and renames/constraints Discr.\n       --\n       --    * An expression which constraints Discr\n@@ -11336,8 +11336,8 @@ package body Exp_Util is\n          --  In GNATprove mode, we prefer to use renamings for intermediate\n          --  variables to definition of constants, due to the implicit move\n          --  operation that such a constant definition causes as part of the\n-         --  support in GNATprove for ownership pointers. Hence we generate\n-         --  a renaming for a reference to an object of a non-scalar type.\n+         --  support in GNATprove for ownership pointers. Hence, we generate\n+         --  a renaming for a reference to an object of a nonscalar type.\n \n          if Renaming_Req\n            or else (GNATprove_Mode\n@@ -11465,7 +11465,7 @@ package body Exp_Util is\n \n       --  For expressions that denote names, we can use a renaming scheme.\n       --  This is needed for correctness in the case of a volatile object of\n-      --  a non-volatile type because the Make_Reference call of the \"default\"\n+      --  a nonvolatile type because the Make_Reference call of the \"default\"\n       --  approach would generate an illegal access value (an access value\n       --  cannot designate such an object - see Analyze_Reference).\n \n@@ -11487,7 +11487,7 @@ package body Exp_Util is\n              Name                => Relocate_Node (Exp)));\n \n          --  If this is a packed reference, or a selected component with\n-         --  a non-standard representation, a reference to the temporary\n+         --  a nonstandard representation, a reference to the temporary\n          --  will be replaced by a copy of the original expression (see\n          --  Exp_Ch2.Expand_Renaming). Otherwise the temporary must be\n          --  elaborated by gigi, and is of course not to be replaced in-line\n@@ -12097,7 +12097,7 @@ package body Exp_Util is\n                          and then Nkind_In (N, N_Package_Body,\n                                                N_Package_Specification);\n       --  N is at the library level if the top-most context is a package and\n-      --  the path taken to reach N does not inlcude non-package constructs.\n+      --  the path taken to reach N does not include nonpackage constructs.\n \n    begin\n       case Nkind (N) is\n@@ -12784,7 +12784,7 @@ package body Exp_Util is\n \n             --  Mark the assignment statement as elaboration code. This allows\n             --  the early call region mechanism (see Sem_Elab) to properly\n-            --  ignore such assignments even though they are non-preelaborable\n+            --  ignore such assignments even though they are nonpreelaborable\n             --  code.\n \n             Set_Is_Elaboration_Code (Asn);"}]}