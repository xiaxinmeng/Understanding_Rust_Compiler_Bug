{"sha": "b21d8148ff0bed1e92ace175384ba4371999082d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxZDgxNDhmZjBiZWQxZTkyYWNlMTc1Mzg0YmE0MzcxOTk5MDgyZA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2015-02-05T13:55:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-05T13:55:03Z"}, "message": "sem_prag.adb, [...]: Minor code clean up.\n\n2015-02-05  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb, par-prag.adb: Minor code clean up.\n\nFrom-SVN: r220448", "tree": {"sha": "f860db127600c062aa47a78a8ed9c64b4abc4bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f860db127600c062aa47a78a8ed9c64b4abc4bac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b21d8148ff0bed1e92ace175384ba4371999082d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21d8148ff0bed1e92ace175384ba4371999082d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21d8148ff0bed1e92ace175384ba4371999082d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21d8148ff0bed1e92ace175384ba4371999082d/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d13d38e28cf50b9ad29ab2cae058e18afbc457e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d13d38e28cf50b9ad29ab2cae058e18afbc457e"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "69fa5f6eaabf846d06f77887ce7128b1ffba5cb6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21d8148ff0bed1e92ace175384ba4371999082d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21d8148ff0bed1e92ace175384ba4371999082d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b21d8148ff0bed1e92ace175384ba4371999082d", "patch": "@@ -1,3 +1,7 @@\n+2015-02-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb, par-prag.adb: Minor code clean up.\n+\n 2015-02-05  Yannick Moy  <moy@adacore.com>\n \n \t* par-prag.adb (Pragma_Warnings): Update for extended form"}, {"sha": "8456177d28f2021d9a46829dafb39c0afb12fe12", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21d8148ff0bed1e92ace175384ba4371999082d/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21d8148ff0bed1e92ace175384ba4371999082d/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=b21d8148ff0bed1e92ace175384ba4371999082d", "patch": "@@ -1047,14 +1047,21 @@ begin\n       -- Warnings (GNAT) --\n       ---------------------\n \n-      --  pragma Warnings ([TOOL_NAME,] On | Off [,REASON]);\n-      --  pragma Warnings ([TOOL_NAME,] On | Off, LOCAL_NAME [,REASON]);\n-      --  pragma Warnings ([TOOL_NAME,] static_string_EXPRESSION [,REASON]);\n-      --  pragma Warnings ([TOOL_NAME,] On | Off,\n-      --                                static_string_EXPRESSION [,REASON]);\n+      --  pragma Warnings ([TOOL_NAME,] DETAILS [, REASON]);\n+\n+      --  DETAILS ::= On | Off\n+      --  DETAILS ::= On | Off, local_NAME\n+      --  DETAILS ::= static_string_EXPRESSION\n+      --  DETAILS ::= On | Off, static_string_EXPRESSION\n+\n+      --  TOOL_NAME ::= GNAT | GNATProve\n \n       --  REASON ::= Reason => STRING_LITERAL {& STRING_LITERAL}\n \n+      --  Note: If the first argument matches an allowed tool name, it is\n+      --  always considered to be a tool name, even if there is a string\n+      --  variable of that name.\n+\n       --  The one argument ON/OFF case is processed by the parser, since it may\n       --  control parser warnings as well as semantic warnings, and in any case\n       --  we want to be absolutely sure that the range in the warnings table is\n@@ -1065,8 +1072,6 @@ begin\n       --  arguments if the first one is a tool name, and/or the last one is a\n       --  reason argument.\n \n-      --  Need documentation and syntax for TOOL_NAME ???\n-\n       when Pragma_Warnings => Warnings : declare\n          function First_Arg_Is_Matching_Tool_Name return Boolean;\n          --  Returns True if the first argument is a tool name matching the\n@@ -1087,14 +1092,20 @@ begin\n          -- First_Arg_Is_Matching_Tool_Name --\n          -------------------------------------\n \n-         --  Comments needed for these complex conditionals ???\n-\n          function First_Arg_Is_Matching_Tool_Name return Boolean is\n          begin\n             return Nkind (Arg1) = N_Identifier\n+\n+              --  Return True if the tool name is GNAT, and we're not in\n+              --  GNATprove or CodePeer or ASIS mode...\n+\n               and then ((Chars (Arg1) = Name_Gnat\n                           and then not\n                             (CodePeer_Mode or GNATprove_Mode or ASIS_Mode))\n+\n+              --  or if the tool name is GNATprove, and we're in GNATprove\n+              --  mode.\n+\n                         or else\n                         (Chars (Arg1) = Name_Gnatprove\n                           and then GNATprove_Mode));"}, {"sha": "232d53de8cc0cb490e6aaf3379b802d03761dbc2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21d8148ff0bed1e92ace175384ba4371999082d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21d8148ff0bed1e92ace175384ba4371999082d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b21d8148ff0bed1e92ace175384ba4371999082d", "patch": "@@ -3109,7 +3109,9 @@ package body Sem_Prag is\n       --  Analyzes the argument, and determines if it is a static string\n       --  expression, returns True if so, False if non-static or not String.\n       --  A special case is that a string literal returns True in Ada 83 mode\n-      --  (which has no such thing as static string expressions).\n+      --  (which has no such thing as static string expressions). Note that\n+      --  the call analyzes its argument, so this cannot be used for the case\n+      --  where an identifier might not be declared.\n \n       procedure Pragma_Misplaced;\n       pragma No_Return (Pragma_Misplaced);\n@@ -21323,18 +21325,20 @@ package body Sem_Prag is\n          -- Warnings --\n          --------------\n \n-         --  pragma Warnings ([TOOL_NAME,] On | Off [,REASON]);\n-         --  pragma Warnings ([TOOL_NAME,] On | Off, LOCAL_NAME [,REASON]);\n-         --  pragma Warnings ([TOOL_NAME,] static_string_EXPRESSION [,REASON]);\n-         --  pragma Warnings ([TOOL_NAME,] On | Off,\n-         --                                static_string_EXPRESSION [,REASON]);\n+         --  pragma Warnings ([TOOL_NAME,] DETAILS [, REASON]);\n+\n+         --  DETAILS ::= On | Off\n+         --  DETAILS ::= On | Off, local_NAME\n+         --  DETAILS ::= static_string_EXPRESSION\n+         --  DETAILS ::= On | Off, static_string_EXPRESSION\n+\n+         --  TOOL_NAME ::= GNAT | GNATProve\n \n          --  REASON ::= Reason => STRING_LITERAL {& STRING_LITERAL}\n \n-         --  If present, TOOL_NAME refers to a tool, currently either GNAT\n-         --  or GNATprove. If an identifier is a static string expression,\n-         --  the form of pragma Warnings that starts with a static string\n-         --  expression is used.\n+         --  Note: If the first argument matches an allowed tool name, it is\n+         --  always considered to be a tool name, even if there is a string\n+         --  variable of that name.\n \n          when Pragma_Warnings => Warnings : declare\n             Reason : String_Id;\n@@ -21396,9 +21400,7 @@ package body Sem_Prag is\n                --  was given otherwise, by shifting the arguments.\n \n                if Nkind (Argx) = N_Identifier\n-                 and then not Nam_In (Chars (Argx), Name_On, Name_Off)\n-                 and then not Is_Static_String_Expression (Arg1)\n-                 --  How can this possibly work e.g. for GNATprove???\n+                 and then Nam_In (Chars (Argx), Name_Gnat, Name_Gnatprove)\n                then\n                   if Chars (Argx) = Name_Gnat then\n                      if CodePeer_Mode or GNATprove_Mode or ASIS_Mode then\n@@ -21415,9 +21417,7 @@ package body Sem_Prag is\n                      end if;\n \n                   else\n-                     Error_Pragma_Arg\n-                       (\"argument of pragma% must be On/Off or tool name \"\n-                        & \"or static string expression\", Arg1);\n+                     raise Program_Error;\n                   end if;\n \n                   --  At this point, the pragma Warnings applies to the tool,"}]}