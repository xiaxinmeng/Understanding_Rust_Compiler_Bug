{"sha": "7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1ZTVjYzdjNGY3NWI0NjVlMWJjYjBlNGU1MDM3Mjk3YzVjZTM4ZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-03-26T07:43:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:43:59Z"}, "message": "tbuild.ads, [...] (N_Pragma): Chars field removed, use Chars (Pragma_Identifier (..\n\n2008-03-26  Robert Dewar  <dewar@adacore.com>\n\n\t* tbuild.ads, tbuild.adb, trans.c, sprint.adb, exp_prag.adb, decl.c,\n\tpar-ch2.adb, sem_elab.adb, sem_util.ads (N_Pragma): Chars field\n\tremoved, use Chars (Pragma_Identifier (..  instead, adjustments\n\tthroughout to accomodate this change.\n\n\t* s-pooglo.ads, s-pooloc.ads: Minor comment updates\n\n\t* exp_dbug.adb: Use Sem_Util.Set_Debug_Info_Needed (not\n\tEinfo.Set_Needs_Debug_Info)\n\nFrom-SVN: r133587", "tree": {"sha": "6950f932ec7e2043a54a277a6f82a9c5c322856a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6950f932ec7e2043a54a277a6f82a9c5c322856a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/comments", "author": null, "committer": null, "parents": [{"sha": "bc9bb02d4ec4130e7e6ffdbb29f6fc57b4137a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9bb02d4ec4130e7e6ffdbb29f6fc57b4137a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9bb02d4ec4130e7e6ffdbb29f6fc57b4137a6c"}], "stats": {"total": 164, "additions": 92, "deletions": 72}, "files": [{"sha": "0db79b576464fdf09a3cad9bb0c4d010c7212d19", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -5035,7 +5035,7 @@ prepend_attributes (Entity_Id gnat_entity, struct attrib ** attr_list)\n \t\t\t\t\t\t  (First (gnat_assoc)))))));\n \t  }\n \n-\tswitch (Get_Pragma_Id (Chars (gnat_temp)))\n+\tswitch (Get_Pragma_Id (Pragma_Identifier (Chars (gnat_temp))))\n \t  {\n \t  case Pragma_Machine_Attribute:\n \t    etype = ATTR_MACHINE_ATTRIBUTE;\n@@ -7068,10 +7068,11 @@ check_ok_for_atomic (tree object, Entity_Id gnat_entity, bool comp_p)\n        gnat_node = Next_Rep_Item (gnat_node))\n     {\n       if (!comp_p && Nkind (gnat_node) == N_Pragma\n-\t  && Get_Pragma_Id (Chars (gnat_node)) == Pragma_Atomic)\n+\t  && (Get_Pragma_Id (Chars (Pragma_Identifier (gnat_node)))\n+              == Pragma_Atomic))\n \tgnat_error_point = First (Pragma_Argument_Associations (gnat_node));\n       else if (comp_p && Nkind (gnat_node) == N_Pragma\n-\t       && (Get_Pragma_Id (Chars (gnat_node))\n+\t       && (Get_Pragma_Id (Chars (Pragma_Identifier (gnat_node)))\n \t\t   == Pragma_Atomic_Components))\n \tgnat_error_point = First (Pragma_Argument_Associations (gnat_node));\n     }"}, {"sha": "39e5bde840061c30806c40ed8dcf0a11c142bcf4", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -464,7 +464,7 @@ package body Exp_Dbug is\n \n       Set_Debug_Renaming_Link (Obj, Entity (Ren));\n \n-      Set_Needs_Debug_Info (Obj);\n+      Set_Debug_Info_Needed (Obj);\n \n       --  Mark the object as internal so that it won't be initialized when\n       --  pragma Initialize_Scalars or Normalize_Scalars is in use."}, {"sha": "deabc2d27bdc57f503fc59414c5c174b29a51826", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -116,12 +116,14 @@ package body Exp_Prag is\n    ---------------------\n \n    procedure Expand_N_Pragma (N : Node_Id) is\n+      Pname : constant Name_Id := Pragma_Name (N);\n+\n    begin\n-      --  Note: we may have a pragma whose chars field is not a\n+      --  Note: we may have a pragma whose Pragma_Identifier field is not a\n       --  recognized pragma, and we must ignore it at this stage.\n \n-      if Is_Pragma_Name (Chars (N)) then\n-         case Get_Pragma_Id (Chars (N)) is\n+      if Is_Pragma_Name (Pname) then\n+         case Get_Pragma_Id (Pname) is\n \n             --  Pragmas requiring special expander action\n \n@@ -350,6 +352,8 @@ package body Exp_Prag is\n \n    --  For now we do nothing with the size attribute ???\n \n+   --  Note: Psect_Object shares this processing\n+\n    procedure Expand_Pragma_Common_Object (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n \n@@ -392,7 +396,6 @@ package body Exp_Prag is\n       --  Insert the pragma\n \n       Insert_After_And_Analyze (N,\n-\n          Make_Pragma (Loc,\n            Chars => Name_Machine_Attribute,\n            Pragma_Argument_Associations => New_List (\n@@ -731,10 +734,7 @@ package body Exp_Prag is\n \n    --  Convert to Common_Object, and expand the resulting pragma\n \n-   procedure Expand_Pragma_Psect_Object (N : Node_Id) is\n-   begin\n-      Set_Chars (N, Name_Common_Object);\n-      Expand_Pragma_Common_Object (N);\n-   end Expand_Pragma_Psect_Object;\n+   procedure Expand_Pragma_Psect_Object (N : Node_Id)\n+     renames Expand_Pragma_Common_Object;\n \n end Exp_Prag;"}, {"sha": "718afcc6a12a088a38a6be156846b90596ad2cdc", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -241,8 +241,8 @@ package body Ch2 is\n       --  Set True if an identifier is encountered for a pragma argument. Used\n       --  to check that there are no more arguments without identifiers.\n \n-      Pragma_Node   : Node_Id;\n-      Pragma_Name   : Name_Id;\n+      Prag_Node     : Node_Id;\n+      Prag_Name     : Name_Id;\n       Semicolon_Loc : Source_Ptr;\n       Ident_Node    : Node_Id;\n       Assoc_Node    : Node_Id;\n@@ -280,9 +280,9 @@ package body Ch2 is\n    --  Start of processing for P_Pragma\n \n    begin\n-      Pragma_Node := New_Node (N_Pragma, Token_Ptr);\n+      Prag_Node := New_Node (N_Pragma, Token_Ptr);\n       Scan; -- past PRAGMA\n-      Pragma_Name := Token_Name;\n+      Prag_Name := Token_Name;\n \n       if Style_Check then\n          Style.Check_Pragma_Name;\n@@ -294,21 +294,20 @@ package body Ch2 is\n       if Ada_Version >= Ada_05\n         and then Token = Tok_Interface\n       then\n-         Pragma_Name := Name_Interface;\n+         Prag_Name := Name_Interface;\n          Ident_Node  := Make_Identifier (Token_Ptr, Name_Interface);\n          Scan; -- past INTERFACE\n       else\n          Ident_Node := P_Identifier;\n       end if;\n \n-      Set_Chars (Pragma_Node, Pragma_Name);\n-      Set_Pragma_Identifier (Pragma_Node, Ident_Node);\n+      Set_Pragma_Identifier (Prag_Node, Ident_Node);\n \n       --  See if special INTERFACE/IMPORT check is required\n \n       if SIS_Entry_Active then\n-         Interface_Check_Required := (Pragma_Name = Name_Interface);\n-         Import_Check_Required    := (Pragma_Name = Name_Import);\n+         Interface_Check_Required := (Prag_Name = Name_Interface);\n+         Import_Check_Required    := (Prag_Name = Name_Import);\n       else\n          Interface_Check_Required := False;\n          Import_Check_Required    := False;\n@@ -322,7 +321,7 @@ package body Ch2 is\n         or else (Token /= Tok_Semicolon\n                    and then not Token_Is_At_Start_Of_Line)\n       then\n-         Set_Pragma_Argument_Associations (Pragma_Node, New_List);\n+         Set_Pragma_Argument_Associations (Prag_Node, New_List);\n          T_Left_Paren;\n \n          loop\n@@ -342,7 +341,7 @@ package body Ch2 is\n                end if;\n             end if;\n \n-            Append (Assoc_Node, Pragma_Argument_Associations (Pragma_Node));\n+            Append (Assoc_Node, Pragma_Argument_Associations (Prag_Node));\n             exit when Token /= Tok_Comma;\n             Scan; -- past comma\n          end loop;\n@@ -352,7 +351,7 @@ package body Ch2 is\n          --  statement, and an assignment statement is the most likely\n          --  candidate for this error)\n \n-         if Token = Tok_Colon_Equal and then Pragma_Name = Name_Debug then\n+         if Token = Tok_Colon_Equal and then Prag_Name = Name_Debug then\n             Error_Msg_SC (\"argument for pragma Debug must be procedure call\");\n             Resync_To_Semicolon;\n \n@@ -378,13 +377,13 @@ package body Ch2 is\n       --  case of pragma Source_File_Name, which assume the semicolon\n       --  is already scanned out.\n \n-      if Chars (Pragma_Node) = Name_Style_Checks then\n-         Result := Par.Prag (Pragma_Node, Semicolon_Loc);\n+      if Prag_Name = Name_Style_Checks then\n+         Result := Par.Prag (Prag_Node, Semicolon_Loc);\n          Skip_Pragma_Semicolon;\n          return Result;\n       else\n          Skip_Pragma_Semicolon;\n-         return Par.Prag (Pragma_Node, Semicolon_Loc);\n+         return Par.Prag (Prag_Node, Semicolon_Loc);\n       end if;\n \n    exception\n@@ -434,14 +433,18 @@ package body Ch2 is\n    --  Error recovery: Cannot raise Error_Resync\n \n    procedure P_Pragmas_Opt (List : List_Id) is\n-      P : Node_Id;\n+      P     : Node_Id;\n \n    begin\n       while Token = Tok_Pragma loop\n          P := P_Pragma;\n \n-         if Chars (P) = Name_Assert or else Chars (P) = Name_Debug then\n-            Error_Msg_Name_1 := Chars (P);\n+         if Nkind (P) /= N_Error\n+          and then (Pragma_Name (P) = Name_Assert\n+                      or else\n+                    Pragma_Name (P) = Name_Debug)\n+         then\n+            Error_Msg_Name_1 := Pragma_Name (P);\n             Error_Msg_N\n               (\"pragma% must be in declaration/statement context\", P);\n          else"}, {"sha": "0cb0396754b425b90190fa9e1e8c6d5a9663a886", "filename": "gcc/ada/s-pooglo.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fs-pooglo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fs-pooglo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooglo.ads?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2005 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Storage pool corresponding to default global storage pool used for\n+--  types for which no storage pool is specified.\n+\n with System;\n with System.Storage_Pools;\n with System.Storage_Elements;"}, {"sha": "e9a975a59c9044499d12d40a4d1b53ed65ffb3a2", "filename": "gcc/ada/s-pooloc.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fs-pooloc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fs-pooloc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooloc.ads?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Storage pool for use with local objects with automatic reclaim\n+\n with System.Storage_Elements;\n with System.Pool_Global;\n "}, {"sha": "922a16d53ae8efc74a4d68fb56619ca77a65f440", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1654,12 +1654,6 @@ package body Sem_Elab is\n             return;\n          end if;\n \n-         --  All OK if warnings suppressed on the entity\n-\n-         if Warnings_Off (Ent) then\n-            return;\n-         end if;\n-\n          --  All OK if all warnings suppressed\n \n          if Warning_Mode = Suppress then\n@@ -1691,16 +1685,20 @@ package body Sem_Elab is\n \n          --  Here is where we give the warning\n \n-         Error_Msg_Sloc := Sloc (Ent);\n+                  --  All OK if warnings suppressed on the entity\n \n-         Error_Msg_NE\n-           (\"?elaboration code may access& before it is initialized\",\n-            N, Ent);\n-         Error_Msg_NE\n-           (\"\\?suggest adding pragma Elaborate_Body to spec of &\",\n-            N, Scop);\n-         Error_Msg_N\n-           (\"\\?or an explicit initialization could be added #\", N);\n+         if not Has_Warnings_Off (Ent) then\n+            Error_Msg_Sloc := Sloc (Ent);\n+\n+            Error_Msg_NE\n+              (\"?elaboration code may access& before it is initialized\",\n+               N, Ent);\n+            Error_Msg_NE\n+              (\"\\?suggest adding pragma Elaborate_Body to spec of &\",\n+               N, Scop);\n+            Error_Msg_N\n+              (\"\\?or an explicit initialization could be added #\", N);\n+         end if;\n \n          if not All_Errors_Mode then\n             Set_Suppress_Elaboration_Warnings (Ent);\n@@ -3109,7 +3107,7 @@ package body Sem_Elab is\n       Item := First (Context_Items (Cunit (Current_Sem_Unit)));\n       while Present (Item) loop\n          if Nkind (Item) = N_Pragma\n-           and then Get_Pragma_Id (Chars (Item)) = Pragma_Elaborate_All\n+           and then Pragma_Name (Item) = Name_Elaborate_All\n          then\n             --  Return if some previous error on the pragma itself\n "}, {"sha": "b48c8a954463fbdf08cb79110827ea08c062486e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -440,6 +440,15 @@ package Sem_Util is\n    --  which is the innermost visible entity with the given name. See the\n    --  body of Sem_Ch8 for further details on handling of entity visibility.\n \n+   function Get_Pragma_Id (N : Node_Id) return Pragma_Id;\n+   pragma Inline (Get_Pragma_Id);\n+   --  Obtains the Pragma_Id from the Chars field of Pragma_Identifier (N)\n+\n+   function Get_Referenced_Object (N : Node_Id) return Node_Id;\n+   --  Given a node, return the renamed object if the node represents a renamed\n+   --  object, otherwise return the node unchanged. The node may represent an\n+   --  arbitrary expression.\n+\n    function Get_Renamed_Entity (E : Entity_Id) return Entity_Id;\n    --  Given an entity for an exception, package, subprogram or generic unit,\n    --  returns the ultimately renamed entity if this is a renaming. If this is\n@@ -452,11 +461,6 @@ package Sem_Util is\n    --  related subprogram or entry and returns it, or if no subprogram can\n    --  be found, returns Empty.\n \n-   function Get_Referenced_Object (N : Node_Id) return Node_Id;\n-   --  Given a node, return the renamed object if the node represents\n-   --  a renamed object, otherwise return the node unchanged. The node\n-   --  may represent an arbitrary expression.\n-\n    function Get_Subprogram_Body (E : Entity_Id) return Node_Id;\n    --  Given the entity for a subprogram (E_Function or E_Procedure),\n    --  return the corresponding N_Subprogram_Body node. If the corresponding\n@@ -476,17 +480,18 @@ package Sem_Util is\n    --  T contains access values (happens for generic formals in some\n    --  cases), then False is returned.\n \n+   function Has_Abstract_Interfaces\n+     (T             : Entity_Id;\n+      Use_Full_View : Boolean := True) return Boolean;\n+   --  Where T is a concurrent type or a record type, returns true if T covers\n+   --  any abstract interface types. In case of private types the argument\n+   --  Use_Full_View controls if the check is done using its full view (if\n+   --  available).\n+\n    type Alignment_Result is (Known_Compatible, Unknown, Known_Incompatible);\n    --  Result of Has_Compatible_Alignment test, description found below. Note\n    --  that the values are arranged in increasing order of problematicness.\n \n-   function Has_Abstract_Interfaces\n-     (Tagged_Type   : Entity_Id;\n-      Use_Full_View : Boolean := True) return Boolean;\n-   --  Returns true if Tagged_Type implements some abstract interface. In case\n-   --  private types the argument Use_Full_View controls if the check is done\n-   --  using its full view (if available).\n-\n    function Has_Compatible_Alignment\n      (Obj  : Entity_Id;\n       Expr : Node_Id) return Alignment_Result;\n@@ -1028,6 +1033,14 @@ package Sem_Util is\n    --  Establish the entity E as the currently visible definition of its\n    --  associated name (i.e. the Node_Id associated with its name)\n \n+   procedure Set_Debug_Info_Needed (T : Entity_Id);\n+   --  Sets the Debug_Info_Needed flag on entity T , and also on any entities\n+   --  that are needed by T (for an object, the type of the object is needed,\n+   --  and for a type, various subsidiary types are needed -- see body for\n+   --  details). Never has any effect on T if the Debug_Info_Off flag is set.\n+   --  This routine should always be used instead of Set_Needs_Debug_Info to\n+   --  ensure that subsidiary entities are properly handled.\n+\n    procedure Set_Entity_With_Style_Check (N : Node_Id; Val : Entity_Id);\n    --  This procedure has the same calling sequence as Set_Entity, but\n    --  if Style_Check is set, then it calls a style checking routine which"}, {"sha": "7db69e479f4bcaafdb30e4771235dc3a71b59cde", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2387,7 +2387,7 @@ package body Sprint is\n \n          when N_Pragma =>\n             Write_Indent_Str_Sloc (\"pragma \");\n-            Write_Name_With_Col_Check (Chars (Node));\n+            Write_Name_With_Col_Check (Pragma_Name (Node));\n \n             if Present (Pragma_Argument_Associations (Node)) then\n                Sprint_Opt_Paren_Comma_List"}, {"sha": "b3ddd631946479e8e0727702e78c69366db50108", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -360,7 +360,6 @@ package body Tbuild is\n    begin\n       return\n         Make_Pragma (Sloc,\n-          Chars                        => Chars,\n           Pragma_Argument_Associations => Pragma_Argument_Associations,\n           Debug_Statement              => Debug_Statement,\n           Pragma_Identifier            => Make_Identifier (Sloc, Chars));"}, {"sha": "17be6272f7a3d21d269f7cb69d01d8fe4960a834", "filename": "gcc/ada/tbuild.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Ftbuild.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Ftbuild.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.ads?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "8bf93d2e7115be33e9e2ffa0b1d396c9b5ab1074", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=7e5e5cc7c4f75b465e1bcb0e4e5037297c5ce38e", "patch": "@@ -687,10 +687,11 @@ Pragma_to_gnu (Node_Id gnat_node)\n \n   /* Check for (and ignore) unrecognized pragma and do nothing if we are just\n      annotating types.  */\n-  if (type_annotate_only || !Is_Pragma_Name (Chars (gnat_node)))\n+  if (type_annotate_only\n+      || !Is_Pragma_Name (Chars (Pragma_Identifier (gnat_node))))\n     return gnu_result;\n \n-  switch (Get_Pragma_Id (Chars (gnat_node)))\n+  switch (Get_Pragma_Id (Pragma_Identifier (Chars (gnat_node))))\n     {\n     case Pragma_Inspection_Point:\n       /* Do nothing at top level: all such variables are already viewable.  */"}]}