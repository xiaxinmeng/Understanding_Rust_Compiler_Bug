{"sha": "5352b89f604b3be2f9e7d33e748e82391d49cf90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1MmI4OWY2MDRiM2JlMmY5ZTdkMzNlNzQ4ZTgyMzkxZDQ5Y2Y5MA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-01-16T12:51:04Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-01-16T12:51:04Z"}, "message": "re PR fortran/19168 (Mismatched KINDs in SELECT CASE constucts is not handled correctly)\n\n2005-01-16  Steven G. Kargl  <kargls@comcast.net>\n\n\tPR 19168\n\t* resolve.c (check_case_overlap): Typo in comment.\n\t(validate_case_label_expr):  Fix up kinds of case values\n\t(resolve_select): Properly handle kind mismatches.\ntestsuite/\n\t* gfortran.dg/select_5.f90: New test.\n\nFrom-SVN: r93725", "tree": {"sha": "7791c2bd2538ee127f03f062b5e9877d4f464da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7791c2bd2538ee127f03f062b5e9877d4f464da5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5352b89f604b3be2f9e7d33e748e82391d49cf90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5352b89f604b3be2f9e7d33e748e82391d49cf90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5352b89f604b3be2f9e7d33e748e82391d49cf90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5352b89f604b3be2f9e7d33e748e82391d49cf90/comments", "author": null, "committer": null, "parents": [{"sha": "36c028f675622046a0f0261cc62c70f58e9a3b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c028f675622046a0f0261cc62c70f58e9a3b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c028f675622046a0f0261cc62c70f58e9a3b4b"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "190a68a71cdcc7e4971bbebd4456b03c5d7a01e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5352b89f604b3be2f9e7d33e748e82391d49cf90", "patch": "@@ -1,3 +1,10 @@\n+2005-01-16  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR 19168\n+\t* resolve.c (check_case_overlap): Typo in comment.\n+\t(validate_case_label_expr):  Fix up kinds of case values\n+\t(resolve_select): Properly handle kind mismatches.\n+\n 2004-01-16  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/17675"}, {"sha": "cd3eb177d173750a18b49c5c729c84882ee799cf", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5352b89f604b3be2f9e7d33e748e82391d49cf90", "patch": "@@ -2579,7 +2579,7 @@ check_case_overlap (gfc_case * list)\n \t  /* Count this merge.  */\n \t  nmerges++;\n \n-\t  /* Cut the list in two pieces by steppin INSIZE places\n+\t  /* Cut the list in two pieces by stepping INSIZE places\n              forward in the list, starting from P.  */\n \t  psize = 0;\n \t  q = p;\n@@ -2676,32 +2676,38 @@ check_case_overlap (gfc_case * list)\n }\n \n \n-/* Check to see if an expression is suitable for use in a CASE\n-   statement.  Makes sure that all case expressions are scalar\n-   constants of the same type/kind.  Return FAILURE if anything\n-   is wrong.  */\n+/* Check to see if an expression is suitable for use in a CASE statement.\n+   Makes sure that all case expressions are scalar constants of the same\n+   type.  Return FAILURE if anything is wrong.  */\n \n static try\n validate_case_label_expr (gfc_expr * e, gfc_expr * case_expr)\n {\n-  gfc_typespec case_ts = case_expr->ts;\n-\n   if (e == NULL) return SUCCESS;\n \n-  if (e->ts.type != case_ts.type)\n+  if (e->ts.type != case_expr->ts.type)\n     {\n       gfc_error (\"Expression in CASE statement at %L must be of type %s\",\n-\t\t &e->where, gfc_basic_typename (case_ts.type));\n+\t\t &e->where, gfc_basic_typename (case_expr->ts.type));\n       return FAILURE;\n     }\n \n-  if (e->ts.kind != case_ts.kind)\n+  /* C805 (R808) For a given case-construct, each case-value shall be of\n+     the same type as case-expr.  For character type, length differences\n+     are allowed, but the kind type parameters shall be the same.  */\n+\n+  if (case_expr->ts.type == BT_CHARACTER && e->ts.kind != case_expr->ts.kind)\n     {\n       gfc_error(\"Expression in CASE statement at %L must be kind %d\",\n-                &e->where, case_ts.kind);\n+                &e->where, case_expr->ts.kind);\n       return FAILURE;\n     }\n \n+  /* Convert the case value kind to that of case expression kind, if needed.\n+     FIXME:  Should a warning be issued?  */\n+  if (e->ts.kind != case_expr->ts.kind)\n+    gfc_convert_type_warn (e, &case_expr->ts, 2, 0);\n+\n   if (e->rank != 0)\n     {\n       gfc_error (\"Expression in CASE statement at %L must be scalar\",\n@@ -2784,6 +2790,40 @@ resolve_select (gfc_code * code)\n       return;\n     }\n \n+  /* PR 19168 has a long discussion concerning a mismatch of the kinds\n+     of the SELECT CASE expression and its CASE values.  Walk the lists\n+     of case values, and if we find a mismatch, promote case_expr to\n+     the appropriate kind.  */\n+\n+  if (type == BT_LOGICAL || type == BT_INTEGER)\n+    {\n+      for (body = code->block; body; body = body->block)\n+\t{\n+\t  /* Walk the case label list.  */\n+\t  for (cp = body->ext.case_list; cp; cp = cp->next)\n+\t    {\n+\t      /* Intercept the DEFAULT case.  It does not have a kind.  */\n+\t      if (cp->low == NULL && cp->high == NULL)\n+\t\tcontinue;\n+\n+\t      /* Unreachable case ranges are discarded, so ignore.  */\t\n+\t      if (cp->low != NULL && cp->high != NULL\n+\t\t  && cp->low != cp->high\n+\t\t  && gfc_compare_expr (cp->low, cp->high) > 0)\n+\t\tcontinue;\n+\n+\t      /* FIXME: Should a warning be issued?  */\n+\t      if (cp->low != NULL\n+\t\t  && case_expr->ts.kind != gfc_kind_max(case_expr, cp->low))\n+\t\tgfc_convert_type_warn (case_expr, &cp->low->ts, 2, 0);\n+\n+\t      if (cp->high != NULL\n+\t\t  && case_expr->ts.kind != gfc_kind_max(case_expr, cp->high))\n+ \t\tgfc_convert_type_warn (case_expr, &cp->high->ts, 2, 0);\n+\t    }\n+\t }\n+    }\n+\n   /* Assume there is no DEFAULT case.  */\n   default_case = NULL;\n   head = tail = NULL;"}, {"sha": "ba894d92ecf568609bb4f85df2ee10578f67c684", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5352b89f604b3be2f9e7d33e748e82391d49cf90", "patch": "@@ -1,3 +1,8 @@\n+2005-01-16  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR 19168\n+\t* gfortran.dg/select_5.f90: New test.\n+\n 2004-01-16  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/common_4.f90: New test."}, {"sha": "b1478e6e2bb2fb4881dc9318a9a187024438c597", "filename": "gcc/testsuite/gfortran.dg/select_5.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5352b89f604b3be2f9e7d33e748e82391d49cf90/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_5.f90?ref=5352b89f604b3be2f9e7d33e748e82391d49cf90", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+! Test mismatched type kinds in a select statement.\n+program select_5\n+  integer*1 i          ! kind = 1, -128 <= i < 127\n+  do i = 1, 3\n+    select case (i)     \n+    case (1_4)         ! kind = 4, reachable\n+      if (i /=  1_4) call abort\n+    case (2_8)         ! kind = 8, reachable\n+      if (i /= 2_8) call abort\n+    case (200)         ! kind = 4, unreachable because of range of i\n+      call abort\n+    case default\n+      if (i /= 3) call abort\n+    end select\n+  end do\n+end program select_5"}]}