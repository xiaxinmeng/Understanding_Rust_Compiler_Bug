{"sha": "5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhYjE5NDhmNjI2MTJlODNjN2I2MTI4ZmUxZTFmNGZlODliZmUwYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-01-05T17:23:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-01-05T17:23:34Z"}, "message": "natMethod.cc (get_ffi_type): Test size of jboolean and select correct ffi type on that basis.\n\n\t* java/lang/reflect/natMethod.cc (get_ffi_type): Test size of\n\tjboolean and select correct ffi type on that basis.\n\t(_Jv_CallNonvirtualMethodA): Handle `void' return type.\n\tConstructor call always has `void' return type.\n\nFrom-SVN: r31242", "tree": {"sha": "30e3bb54b112b657fa09ac2a74cb664fa19f6867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e3bb54b112b657fa09ac2a74cb664fa19f6867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b/comments", "author": null, "committer": null, "parents": [{"sha": "95c6cc0ab5c348a6eaa5bb595d44f03d830c3863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c6cc0ab5c348a6eaa5bb595d44f03d830c3863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c6cc0ab5c348a6eaa5bb595d44f03d830c3863"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "2683e1ada5e4a6408f605a55a7efcc73b20bee67", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b", "patch": "@@ -1,3 +1,10 @@\n+2000-01-05  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/lang/reflect/natMethod.cc (get_ffi_type): Test size of\n+\tjboolean and select correct ffi type on that basis.\n+\t(_Jv_CallNonvirtualMethodA): Handle `void' return type.\n+\tConstructor call always has `void' return type.\n+\n 2000-01-04  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/Class.h (getSignature): Updated."}, {"sha": "62f0ab9f22d5e9bddb429619a269e49e53406c7f", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=5dab1948f62612e83c7b6128fe1e1f4fe89bfe0b", "patch": "@@ -131,8 +131,14 @@ get_ffi_type (jclass klass)\n     r = &ffi_type_double;\n   else if (klass == JvPrimClass (boolean))\n     {\n-      // FIXME.\n-      r = &ffi_type_sint8;\n+      // On some platforms a bool is a byte, on others an int.\n+      if (sizeof (jboolean) == sizeof (jbyte))\n+\tr = &ffi_type_sint8;\n+      else\n+\t{\n+\t  JvAssert (sizeof (jboolean) == sizeof (jint));\n+\t  r = &ffi_type_sint32;\n+\t}\n     }\n   else if (klass == JvPrimClass (char))\n     r = &ffi_type_uint16;\n@@ -333,7 +339,12 @@ _Jv_CallNonvirtualMethodA (jobject obj,\n   if (needs_this)\n     ++param_count;\n \n-  ffi_type *rtype = get_ffi_type (return_type);\n+  ffi_type *rtype;\n+  // A constructor itself always returns void.\n+  if (is_constructor || return_type == JvPrimClass (void))\n+    rtype = &ffi_type_void;\n+  else\n+    rtype = get_ffi_type (return_type);\n   ffi_type **argtypes = (ffi_type **) alloca (param_count\n \t\t\t\t\t      * sizeof (ffi_type *));\n \n@@ -451,7 +462,9 @@ _Jv_CallNonvirtualMethodA (jobject obj,\n \n   jobject r;\n #define VAL(Wrapper, Type)  (new Wrapper (* (Type *) &ret_value))\n-  if (return_type == JvPrimClass (byte))\n+  if (is_constructor)\n+    r = obj;\n+  else if (return_type == JvPrimClass (byte))\n     r = VAL (java::lang::Byte, jbyte);\n   else if (return_type == JvPrimClass (short))\n     r = VAL (java::lang::Short, jshort);"}]}