{"sha": "b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "node_id": "C_kwDOANBUbNoAKGIzYzk4ZDZhNTlhNmRjZDViMGI1MmJkNTY3NmI1ODZlZjRmZTc4NWY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-18T16:20:14Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-19T19:27:56Z"}, "message": "c++: Mitigate -Wuseless-cast with classes [PR85043]\n\n-Wuseless-cast (not part of -Wall/-Wextra) warns here:\n\n  struct S { };\n  void g (S&&);\n  void f (S&& arg)\n  {\n    g (S(arg)); // warning: useless cast to type 'struct S'\n  }\n\nwhich is wrong: the code will not compile without the cast because\n\"arg\" is an lvalue which cannot bind to S&&.\n\nThis patch disables the warning when an object that isn't a prvalue\nis cast to a non-reference type.  Therefore we still warn about the\nuseless cast in \"X(X{})\".\n\n\tPR c++/85043\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (maybe_warn_about_useless_cast): Don't warn when\n\ta glvalue is cast to a non-reference type.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Update documentation of -Wuseless-cast.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wuseless-cast.C: Remove dg-warning.\n\t* g++.dg/warn/Wuseless-cast3.C: New test.", "tree": {"sha": "8f9a87dcd0a886370934e88cff686d89d84c7d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9a87dcd0a886370934e88cff686d89d84c7d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d38dd46e6b07e5a90ab25df1438eb0918eb475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d38dd46e6b07e5a90ab25df1438eb0918eb475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d38dd46e6b07e5a90ab25df1438eb0918eb475"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "16e7d85793d52901759e8237caa8f8abf113f3fc", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "patch": "@@ -8104,11 +8104,13 @@ maybe_warn_about_useless_cast (location_t loc, tree type, tree expr,\n   if (warn_useless_cast\n       && complain & tf_warning)\n     {\n-      if ((TYPE_REF_P (type)\n-\t   && (TYPE_REF_IS_RVALUE (type)\n-\t       ? xvalue_p (expr) : lvalue_p (expr))\n-\t   && same_type_p (TREE_TYPE (expr), TREE_TYPE (type)))\n-\t  || same_type_p (TREE_TYPE (expr), type))\n+      if (TYPE_REF_P (type)\n+\t  ? ((TYPE_REF_IS_RVALUE (type)\n+\t      ? xvalue_p (expr) : lvalue_p (expr))\n+\t     && same_type_p (TREE_TYPE (expr), TREE_TYPE (type)))\n+\t  /* Don't warn when converting a class object to a non-reference type,\n+\t     because that's a common way to create a temporary.  */\n+\t  : (!glvalue_p (expr) && same_type_p (TREE_TYPE (expr), type)))\n \twarning_at (loc, OPT_Wuseless_cast,\n \t\t    \"useless cast to type %q#T\", type);\n     }"}, {"sha": "cd4d3c1d72ce605618d78cabb6bce7431b53092c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "patch": "@@ -4551,7 +4551,18 @@ pointers after reallocation.\n @item -Wuseless-cast @r{(C++ and Objective-C++ only)}\n @opindex Wuseless-cast\n @opindex Wno-useless-cast\n-Warn when an expression is casted to its own type.\n+Warn when an expression is cast to its own type.  This warning does not\n+occur when a class object is converted to a non-reference type as that\n+is a way to create a temporary:\n+\n+@smallexample\n+struct S @{ @};\n+void g (S&&);\n+void f (S&& arg)\n+@{\n+  g (S(arg)); // make arg prvalue so that it can bind to S&&\n+@}\n+@end smallexample\n \n @item -Wno-conversion-null @r{(C++ and Objective-C++ only)}\n @opindex Wconversion-null"}, {"sha": "d7cb89930a6ffb72ee2a6e9e50ff561cc0239394", "filename": "gcc/testsuite/g++.dg/warn/Wuseless-cast.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C?ref=b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "patch": "@@ -62,11 +62,11 @@ A prvalue();\n \n void f()\n {\n-  int n; \n+  int n;\n \n-  (int)(n);                    // { dg-warning \"3:useless cast\" }\n-  static_cast<int>(n);         // { dg-warning \"3:useless cast\" }\n-  reinterpret_cast<int>(n);    // { dg-warning \"3:useless cast\" }\n+  (int)(n);\n+  static_cast<int>(n);\n+  reinterpret_cast<int>(n);\n \n   (int*)(&n);                  // { dg-warning \"3:useless cast\" }\n   const_cast<int*>(&n);        // { dg-warning \"3:useless cast\" }\n@@ -100,8 +100,8 @@ void f()\n \n   A a;\n \n-  (A)(a);                     // { dg-warning \"3:useless cast\" }\n-  static_cast<A>(a);          // { dg-warning \"3:useless cast\" }\n+  (A)(a);\n+  static_cast<A>(a);\n \n   (A*)(&a);                   // { dg-warning \"3:useless cast\" }\n   const_cast<A*>(&a);         // { dg-warning \"3:useless cast\" }"}, {"sha": "43dd2ebfaeaf1ff2380d2a156a3174eb4cf1b56d", "filename": "gcc/testsuite/g++.dg/warn/Wuseless-cast3.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast3.C?ref=b3c98d6a59a6dcd5b0b52bd5676b586ef4fe785f", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/85043\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wuseless-cast\" }\n+\n+struct S { int s; void bump () { s++; } };\n+\n+void\n+foo ()\n+{\n+  S s = { 1 };\n+  s.bump ();\n+  S (s).bump (); // { dg-bogus \"useless\" }\n+  ((S) s).bump (); // { dg-bogus \"useless\" }\n+  static_cast<S> (s).bump (); // { dg-bogus \"useless\" }\n+}\n+\n+struct X { };\n+void g(X&&);\n+\n+void\n+f (X&& arg)\n+{\n+  g(X(arg)); // { dg-bogus \"useless\" }\n+  g(X(X{})); // { dg-warning \"useless\" }\n+  g(static_cast<X&&>(arg));\n+\n+  int i = (int) 1; // { dg-warning \"useless\" }\n+  const int &r = (int) i; // { dg-bogus \"useless\" }\n+}"}]}