{"sha": "c7a99fc66328d85bcda9eb1625143e8e7b20e533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdhOTlmYzY2MzI4ZDg1YmNkYTllYjE2MjUxNDNlOGU3YjIwZTUzMw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-04-29T23:57:33Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-04-29T23:57:33Z"}, "message": "ira.c tidies: validate_equiv_mem_from_store\n\n\t* ira.c (struct equiv_mem_data): New.\n\t(equiv_mem, equiv_mem_modified): Delete static vars.\n\t(validate_equiv_mem_from_store): Use \"data\" param to communicate..\n\t(validate_equiv_mem): ..from here.\n\nFrom-SVN: r235658", "tree": {"sha": "a28fcd00e8f553dbb4aed1a2f486b8b99186e2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28fcd00e8f553dbb4aed1a2f486b8b99186e2f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7a99fc66328d85bcda9eb1625143e8e7b20e533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a99fc66328d85bcda9eb1625143e8e7b20e533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a99fc66328d85bcda9eb1625143e8e7b20e533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a99fc66328d85bcda9eb1625143e8e7b20e533/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42ae0d7fad6d089f8a14028e09e517342547cc44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ae0d7fad6d089f8a14028e09e517342547cc44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ae0d7fad6d089f8a14028e09e517342547cc44"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "47b86f1b0794cad11fed128051e20c10a41be25d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a99fc66328d85bcda9eb1625143e8e7b20e533/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a99fc66328d85bcda9eb1625143e8e7b20e533/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7a99fc66328d85bcda9eb1625143e8e7b20e533", "patch": "@@ -1,3 +1,10 @@\n+2016-04-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* ira.c (struct equiv_mem_data): New.\n+\t(equiv_mem, equiv_mem_modified): Delete static vars.\n+\t(validate_equiv_mem_from_store): Use \"data\" param to communicate..\n+\t(validate_equiv_mem): ..from here.\n+\n 2016-04-30  Alan Modra  <amodra@gmail.com>\n \n \t* ira.c (add_store_equivs, combine_and_move_insns): New functions,"}, {"sha": "8ef780a335468fc7077e697b9b179774615e8a42", "filename": "gcc/ira.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a99fc66328d85bcda9eb1625143e8e7b20e533/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a99fc66328d85bcda9eb1625143e8e7b20e533/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=c7a99fc66328d85bcda9eb1625143e8e7b20e533", "patch": "@@ -2926,24 +2926,29 @@ struct equivalence\n    structure for that register.  */\n static struct equivalence *reg_equiv;\n \n-/* Used for communication between the following two functions: contains\n-   a MEM that we wish to ensure remains unchanged.  */\n-static rtx equiv_mem;\n+/* Used for communication between the following two functions.  */\n+struct equiv_mem_data\n+{\n+  /* A MEM that we wish to ensure remains unchanged.  */\n+  rtx equiv_mem;\n \n-/* Set nonzero if EQUIV_MEM is modified.  */\n-static int equiv_mem_modified;\n+  /* Set true if EQUIV_MEM is modified.  */\n+  bool equiv_mem_modified;\n+};\n \n /* If EQUIV_MEM is modified by modifying DEST, indicate that it is modified.\n    Called via note_stores.  */\n static void\n validate_equiv_mem_from_store (rtx dest, const_rtx set ATTRIBUTE_UNUSED,\n-\t\t\t       void *data ATTRIBUTE_UNUSED)\n+\t\t\t       void *data)\n {\n+  struct equiv_mem_data *info = (struct equiv_mem_data *) data;\n+\n   if ((REG_P (dest)\n-       && reg_overlap_mentioned_p (dest, equiv_mem))\n+       && reg_overlap_mentioned_p (dest, info->equiv_mem))\n       || (MEM_P (dest)\n-\t  && anti_dependence (equiv_mem, dest)))\n-    equiv_mem_modified = 1;\n+\t  && anti_dependence (info->equiv_mem, dest)))\n+    info->equiv_mem_modified = true;\n }\n \n /* Verify that no store between START and the death of REG invalidates\n@@ -2957,16 +2962,14 @@ validate_equiv_mem (rtx_insn *start, rtx reg, rtx memref)\n {\n   rtx_insn *insn;\n   rtx note;\n-\n-  equiv_mem = memref;\n-  equiv_mem_modified = 0;\n+  struct equiv_mem_data info = { memref, false };\n \n   /* If the memory reference has side effects or is volatile, it isn't a\n      valid equivalence.  */\n   if (side_effects_p (memref))\n     return 0;\n \n-  for (insn = start; insn && ! equiv_mem_modified; insn = NEXT_INSN (insn))\n+  for (insn = start; insn; insn = NEXT_INSN (insn))\n     {\n       if (! INSN_P (insn))\n \tcontinue;\n@@ -2982,7 +2985,9 @@ validate_equiv_mem (rtx_insn *start, rtx reg, rtx memref)\n       if (CALL_P (insn))\n \treturn 0;\n \n-      note_stores (PATTERN (insn), validate_equiv_mem_from_store, NULL);\n+      note_stores (PATTERN (insn), validate_equiv_mem_from_store, &info);\n+      if (info.equiv_mem_modified)\n+\treturn 0;\n \n       /* If a register mentioned in MEMREF is modified via an\n \t auto-increment, we lose the equivalence.  Do the same if one"}]}