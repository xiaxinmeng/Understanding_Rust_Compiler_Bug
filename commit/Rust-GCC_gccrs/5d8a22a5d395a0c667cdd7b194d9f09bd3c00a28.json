{"sha": "5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ4YTIyYTVkMzk1YTBjNjY3Y2RkN2IxOTRkOWYwOWJkM2MwMGEyOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T15:26:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T15:26:01Z"}, "message": "config/aarch64/aarch64.c: Use rtx_insn\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately):\n\tStrengthen local \"insns\" from rtx to rtx_insn *.\n\t(aarch64_set_frame_expr): Likewise for local \"insn\".\n\t(aarch64_save_or_restore_fprs): Likewise.\n\t(aarch64_save_or_restore_callee_save_registers): Likewise.\n\t(aarch64_expand_prologue): Likewise.\n\t(aarch64_expand_epilogue): Likewise.\n\t(aarch64_output_mi_thunk): Likewise.\n\t(aarch64_split_compare_and_swap): Strengthen locals \"label1\" and\n\t\"label2\" from rtx to rtx_code_label *.\n\t(aarch64_split_atomic_op): Likewise for local \"label\".\n\nFrom-SVN: r214428", "tree": {"sha": "3cf7dc1fdf9497950bbd60c6c72904e548056613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cf7dc1fdf9497950bbd60c6c72904e548056613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dafb85c8e6ade82adc591fe97c116b193f8bb0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dafb85c8e6ade82adc591fe97c116b193f8bb0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dafb85c8e6ade82adc591fe97c116b193f8bb0d"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "7743325e378fec340a0847f322ca7fddc41608c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28", "patch": "@@ -1,3 +1,17 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately):\n+\tStrengthen local \"insns\" from rtx to rtx_insn *.\n+\t(aarch64_set_frame_expr): Likewise for local \"insn\".\n+\t(aarch64_save_or_restore_fprs): Likewise.\n+\t(aarch64_save_or_restore_callee_save_registers): Likewise.\n+\t(aarch64_expand_prologue): Likewise.\n+\t(aarch64_expand_epilogue): Likewise.\n+\t(aarch64_output_mi_thunk): Likewise.\n+\t(aarch64_split_compare_and_swap): Strengthen locals \"label1\" and\n+\t\"label2\" from rtx to rtx_code_label *.\n+\t(aarch64_split_atomic_op): Likewise for local \"label\".\n+\n 2014-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.h (symtab_node):"}, {"sha": "d809d4c604bd73c57f6708f61fd521fa282e4e29", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5d8a22a5d395a0c667cdd7b194d9f09bd3c00a28", "patch": "@@ -691,7 +691,7 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \n     case SYMBOL_SMALL_TLSGD:\n       {\n-\trtx insns;\n+\trtx_insn *insns;\n \trtx result = gen_rtx_REG (Pmode, R0_REGNUM);\n \n \tstart_sequence ();\n@@ -1924,7 +1924,7 @@ aarch64_layout_frame (void)\n static void\n aarch64_set_frame_expr (rtx frame_pattern)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   insn = get_last_insn ();\n   RTX_FRAME_RELATED_P (insn) = 1;\n@@ -2004,7 +2004,7 @@ static void\n aarch64_pushwb_pair_reg (enum machine_mode mode, unsigned regno1,\n \t\t\t unsigned regno2, HOST_WIDE_INT adjustment)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   rtx reg1 = gen_rtx_REG (mode, regno1);\n   rtx reg2 = gen_rtx_REG (mode, regno2);\n \n@@ -2095,7 +2095,7 @@ static void\n aarch64_save_callee_saves (enum machine_mode mode, HOST_WIDE_INT start_offset,\n \t\t\t   unsigned start, unsigned limit, bool skip_wb)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   rtx (*gen_mem_ref) (enum machine_mode, rtx) = (frame_pointer_needed\n \t\t\t\t\t\t ? gen_frame_mem : gen_rtx_MEM);\n   unsigned regno;\n@@ -2263,7 +2263,7 @@ aarch64_expand_prologue (void)\n   */\n   HOST_WIDE_INT frame_size, offset;\n   HOST_WIDE_INT fp_offset;\t\t/* Offset from hard FP to SP.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   aarch64_layout_frame ();\n \n@@ -2417,7 +2417,7 @@ aarch64_expand_epilogue (bool for_sibcall)\n {\n   HOST_WIDE_INT frame_size, offset;\n   HOST_WIDE_INT fp_offset;\n-  rtx insn;\n+  rtx_insn *insn;\n   rtx cfa_reg;\n \n   aarch64_layout_frame ();\n@@ -2758,7 +2758,8 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n      to return a pointer to an aggregate.  On AArch64 a result value\n      pointer will be in x8.  */\n   int this_regno = R0_REGNUM;\n-  rtx this_rtx, temp0, temp1, addr, insn, funexp;\n+  rtx this_rtx, temp0, temp1, addr, funexp;\n+  rtx_insn *insn;\n \n   reload_completed = 1;\n   emit_note (NOTE_INSN_PROLOGUE_END);\n@@ -8543,7 +8544,8 @@ aarch64_split_compare_and_swap (rtx operands[])\n   rtx rval, mem, oldval, newval, scratch;\n   enum machine_mode mode;\n   bool is_weak;\n-  rtx label1, label2, x, cond;\n+  rtx_code_label *label1, *label2;\n+  rtx x, cond;\n \n   rval = operands[0];\n   mem = operands[1];\n@@ -8553,7 +8555,7 @@ aarch64_split_compare_and_swap (rtx operands[])\n   scratch = operands[7];\n   mode = GET_MODE (mem);\n \n-  label1 = NULL_RTX;\n+  label1 = NULL;\n   if (!is_weak)\n     {\n       label1 = gen_label_rtx ();\n@@ -8596,7 +8598,8 @@ aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n {\n   enum machine_mode mode = GET_MODE (mem);\n   enum machine_mode wmode = (mode == DImode ? DImode : SImode);\n-  rtx label, x;\n+  rtx_code_label *label;\n+  rtx x;\n \n   label = gen_label_rtx ();\n   emit_label (label);"}]}