{"sha": "342cfb3e736afcc7397b4199a4c96fb602f5d68b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyY2ZiM2U3MzZhZmNjNzM5N2I0MTk5YTRjOTZmYjYwMmY1ZDY4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-06T21:17:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-06T21:17:44Z"}, "message": "Implement P0258R2 - helper for C++17 std::has_unique_object_representations trait c-family/\n\n\tImplement P0258R2 - helper for C++17\n\tstd::has_unique_object_representations trait\nc-family/\n\t* c-common.h (enum rid): Add RID_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n\t* c-common.c (c_common_reswords): Add\n\t__has_unique_object_representations.\ncp/\n\t* cp-tree.h (enum cp_trait_kind): Add\n\tCPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n\t(struct lang_type_class): Add unique_obj_representations\n\tand unique_obj_representations_set bitfields.\n\t(CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS,\n\tCLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS_SET): Define.\n\t(type_has_unique_obj_representations): Declare.\n\t* parser.c (cp_parser_primary_expression): Handle\n\tRID_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n\t(cp_parser_trait_expr): Likewise.  Formatting fix.\n\t* semantics.c (trait_expr_value, finish_trait_expr): Handle\n\tCPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n\t* tree.c (type_has_unique_obj_representations): New function.\n\t(record_has_unique_obj_representations): New function.\n\t* cxx-pretty-print.c (pp_cxx_trait_expression): Handle\n\tCPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS.\ntestsuite/\n\t* g++.dg/cpp1z/has-unique-obj-representations1.C: New test.\n\t* g++.dg/cpp1z/has-unique-obj-representations2.C: New test.\n\nFrom-SVN: r240843", "tree": {"sha": "929fde67393ba802b4a3a959513ec79e9a076407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/929fde67393ba802b4a3a959513ec79e9a076407"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/342cfb3e736afcc7397b4199a4c96fb602f5d68b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342cfb3e736afcc7397b4199a4c96fb602f5d68b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342cfb3e736afcc7397b4199a4c96fb602f5d68b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342cfb3e736afcc7397b4199a4c96fb602f5d68b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "480570898d36d1d8e29d2adb35bc7eb46b876092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/480570898d36d1d8e29d2adb35bc7eb46b876092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/480570898d36d1d8e29d2adb35bc7eb46b876092"}], "stats": {"total": 267, "additions": 264, "deletions": 3}, "files": [{"sha": "7881233f94cd2898397920f104be75b3b4f47606", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -1,3 +1,11 @@\n+2016-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement P0258R2 - helper for C++17\n+\tstd::has_unique_object_representations trait\n+\t* c-common.h (enum rid): Add RID_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n+\t* c-common.c (c_common_reswords): Add\n+\t__has_unique_object_representations.\n+\n 2016-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/66343"}, {"sha": "f518c20797f53923fa4a0b68e0d29a63f5277203", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -486,6 +486,8 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__has_trivial_constructor\", RID_HAS_TRIVIAL_CONSTRUCTOR, D_CXXONLY },\n   { \"__has_trivial_copy\", RID_HAS_TRIVIAL_COPY, D_CXXONLY },\n   { \"__has_trivial_destructor\", RID_HAS_TRIVIAL_DESTRUCTOR, D_CXXONLY },\n+  { \"__has_unique_object_representations\", RID_HAS_UNIQUE_OBJ_REPRESENTATIONS,\n+\t\t\t\t\tD_CXXONLY },\n   { \"__has_virtual_destructor\", RID_HAS_VIRTUAL_DESTRUCTOR, D_CXXONLY },\n   { \"__imag\",\t\tRID_IMAGPART,\t0 },\n   { \"__imag__\",\t\tRID_IMAGPART,\t0 },"}, {"sha": "f9ebb5bca2f02df218bd3368fc5d942a783d4224", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -150,7 +150,8 @@ enum rid\n   RID_HAS_NOTHROW_ASSIGN,      RID_HAS_NOTHROW_CONSTRUCTOR,\n   RID_HAS_NOTHROW_COPY,        RID_HAS_TRIVIAL_ASSIGN,\n   RID_HAS_TRIVIAL_CONSTRUCTOR, RID_HAS_TRIVIAL_COPY,\n-  RID_HAS_TRIVIAL_DESTRUCTOR,  RID_HAS_VIRTUAL_DESTRUCTOR,\n+  RID_HAS_TRIVIAL_DESTRUCTOR,  RID_HAS_UNIQUE_OBJ_REPRESENTATIONS,\n+  RID_HAS_VIRTUAL_DESTRUCTOR,\n   RID_IS_ABSTRACT,             RID_IS_BASE_OF,\n   RID_IS_CLASS,\n   RID_IS_EMPTY,                RID_IS_ENUM,"}, {"sha": "008d6461acffe56c2214dd780654b43b867156f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -1,3 +1,24 @@\n+2016-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement P0258R2 - helper for C++17\n+\tstd::has_unique_object_representations trait\n+\t* cp-tree.h (enum cp_trait_kind): Add\n+\tCPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n+\t(struct lang_type_class): Add unique_obj_representations\n+\tand unique_obj_representations_set bitfields.\n+\t(CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS,\n+\tCLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS_SET): Define.\n+\t(type_has_unique_obj_representations): Declare.\n+\t* parser.c (cp_parser_primary_expression): Handle\n+\tRID_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n+\t(cp_parser_trait_expr): Likewise.  Formatting fix.\n+\t* semantics.c (trait_expr_value, finish_trait_expr): Handle\n+\tCPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n+\t* tree.c (type_has_unique_obj_representations): New function.\n+\t(record_has_unique_obj_representations): New function.\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression): Handle\n+\tCPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS.\n+\n 2016-10-05  Jason Merrill  <jason@redhat.com>\n \n \tImplement P0135R1, Guaranteed copy elision."}, {"sha": "49cbdf26fcfa6924cec41784b7e8fa8045621558", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -723,6 +723,7 @@ enum cp_trait_kind\n   CPTK_HAS_TRIVIAL_CONSTRUCTOR,\n   CPTK_HAS_TRIVIAL_COPY,\n   CPTK_HAS_TRIVIAL_DESTRUCTOR,\n+  CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS,\n   CPTK_HAS_VIRTUAL_DESTRUCTOR,\n   CPTK_IS_ABSTRACT,\n   CPTK_IS_BASE_OF,\n@@ -1713,6 +1714,8 @@ struct GTY(()) lang_type_class {\n   unsigned has_complex_move_ctor : 1;\n   unsigned has_complex_move_assign : 1;\n   unsigned has_constexpr_ctor : 1;\n+  unsigned unique_obj_representations : 1;\n+  unsigned unique_obj_representations_set : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1721,7 +1724,7 @@ struct GTY(()) lang_type_class {\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 4;\n+  unsigned dummy : 2;\n \n   tree primary_base;\n   vec<tree_pair_s, va_gc> *vcall_indices;\n@@ -2010,6 +2013,16 @@ struct GTY(()) lang_type {\n #define CLASSTYPE_NON_STD_LAYOUT(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->non_std_layout)\n \n+/* Nonzero means that this class type does have unique object\n+   representations.  */\n+#define CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->unique_obj_representations)\n+\n+/* Nonzero means that this class type has\n+   CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS computed.  */\n+#define CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS_SET(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->unique_obj_representations_set)\n+\n /* Nonzero means that this class contains pod types whose default\n    initialization is not a zero initialization (namely, pointers to\n    data members).  */\n@@ -6480,6 +6493,7 @@ extern bool layout_pod_type_p\t\t\t(const_tree);\n extern bool std_layout_type_p\t\t\t(const_tree);\n extern bool trivial_type_p\t\t\t(const_tree);\n extern bool trivially_copyable_p\t\t(const_tree);\n+extern bool type_has_unique_obj_representations (const_tree);\n extern bool scalarish_type_p\t\t\t(const_tree);\n extern bool type_has_nontrivial_default_init\t(const_tree);\n extern bool type_has_nontrivial_copy_init\t(const_tree);"}, {"sha": "68dcf58ea1ceaf264bcf61013ae61f39e382599f", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -2561,6 +2561,9 @@ pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n     case CPTK_HAS_TRIVIAL_DESTRUCTOR:\n       pp_cxx_ws_string (pp, \"__has_trivial_destructor\");\n       break;\n+    case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n+      pp_cxx_ws_string (pp, \"__has_unique_object_representations\");\n+      break;\n     case CPTK_HAS_VIRTUAL_DESTRUCTOR:\n       pp_cxx_ws_string (pp, \"__has_virtual_destructor\");\n       break;"}, {"sha": "c2bd4421e14ec638ca3b2f7991b00f6b571f3c48", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -5110,6 +5110,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_HAS_TRIVIAL_CONSTRUCTOR:\n \tcase RID_HAS_TRIVIAL_COPY:\t  \n \tcase RID_HAS_TRIVIAL_DESTRUCTOR:\n+\tcase RID_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n \tcase RID_HAS_VIRTUAL_DESTRUCTOR:\n \tcase RID_IS_ABSTRACT:\n \tcase RID_IS_BASE_OF:\n@@ -9521,6 +9522,9 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case RID_HAS_TRIVIAL_DESTRUCTOR:\n       kind = CPTK_HAS_TRIVIAL_DESTRUCTOR;\n       break;\n+    case RID_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n+      kind = CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS;\n+      break;\n     case RID_HAS_VIRTUAL_DESTRUCTOR:\n       kind = CPTK_HAS_VIRTUAL_DESTRUCTOR;\n       break;\n@@ -9635,7 +9639,7 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n \n   /* Complete the trait expression, which may mean either processing\n      the trait expr now or saving it for template instantiation.  */\n-  switch(kind)\n+  switch (kind)\n     {\n     case CPTK_UNDERLYING_TYPE:\n       return finish_underlying_type (type1);"}, {"sha": "968f88b3c04bf1dbb22e37c5faaebadc4fed3b69", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -9092,6 +9092,9 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_HAS_VIRTUAL_DESTRUCTOR:\n       return type_has_virtual_destructor (type1);\n \n+    case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n+      return type_has_unique_obj_representations (type1);\n+\n     case CPTK_IS_ABSTRACT:\n       return (ABSTRACT_CLASS_TYPE_P (type1));\n \n@@ -9199,6 +9202,7 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_HAS_NOTHROW_COPY:\n     case CPTK_HAS_TRIVIAL_COPY:\n     case CPTK_HAS_TRIVIAL_DESTRUCTOR:\n+    case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n     case CPTK_HAS_VIRTUAL_DESTRUCTOR:\n     case CPTK_IS_ABSTRACT:\n     case CPTK_IS_EMPTY:"}, {"sha": "03eef0030d07d29f5854c85faf452e566c94c794", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -3575,6 +3575,150 @@ std_layout_type_p (const_tree t)\n     return scalarish_type_p (t);\n }\n \n+static bool record_has_unique_obj_representations (const_tree, const_tree);\n+\n+/* Returns true iff T satisfies std::has_unique_object_representations<T>,\n+   as defined in [meta.unary.prop].  */\n+\n+bool\n+type_has_unique_obj_representations (const_tree t)\n+{\n+  bool ret;\n+\n+  t = strip_array_types (CONST_CAST_TREE (t));\n+\n+  if (!trivially_copyable_p (t))\n+    return false;\n+\n+  if (CLASS_TYPE_P (t) && CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS_SET (t))\n+    return CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS (t);\n+\n+  switch (TREE_CODE (t))\n+    {\n+    case INTEGER_TYPE:\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n+      /* If some backend has any paddings in these types, we should add\n+\t a target hook for this and handle it there.  */\n+      return true;\n+\n+    case BOOLEAN_TYPE:\n+      /* For bool values other than 0 and 1 should only appear with\n+\t undefined behavior.  */\n+      return true;\n+\n+    case ENUMERAL_TYPE:\n+      return type_has_unique_obj_representations (ENUM_UNDERLYING_TYPE (t));\n+\n+    case REAL_TYPE:\n+      /* XFmode certainly contains padding on x86, which the CPU doesn't store\n+\t when storing long double values, so for that we have to return false.\n+\t Other kinds of floating point values are questionable due to +.0/-.0\n+\t and NaNs, let's play safe for now.  */\n+      return false;\n+\n+    case FIXED_POINT_TYPE:\n+      return false;\n+\n+    case OFFSET_TYPE:\n+      return true;\n+\n+    case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n+      return type_has_unique_obj_representations (TREE_TYPE (t));\n+\n+    case RECORD_TYPE:\n+      ret = record_has_unique_obj_representations (t, TYPE_SIZE (t));\n+      if (CLASS_TYPE_P (t))\n+\t{\n+\t  CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS_SET (t) = 1;\n+\t  CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS (t) = ret;\n+\t}\n+      return ret;\n+\n+    case UNION_TYPE:\n+      ret = true;\n+      bool any_fields;\n+      any_fields = false;\n+      for (tree field = TYPE_FIELDS (t); field; field = DECL_CHAIN (field))\n+\tif (TREE_CODE (field) == FIELD_DECL)\n+\t  {\n+\t    any_fields = true;\n+\t    if (!type_has_unique_obj_representations (TREE_TYPE (field))\n+\t\t|| simple_cst_equal (DECL_SIZE (field), TYPE_SIZE (t)) != 1)\n+\t      {\n+\t\tret = false;\n+\t\tbreak;\n+\t      }\n+\t  }\n+      if (!any_fields && !integer_zerop (TYPE_SIZE (t)))\n+\tret = false;\n+      if (CLASS_TYPE_P (t))\n+\t{\n+\t  CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS_SET (t) = 1;\n+\t  CLASSTYPE_UNIQUE_OBJ_REPRESENTATIONS (t) = ret;\n+\t}\n+      return ret;\n+\n+    case NULLPTR_TYPE:\n+      return false;\n+\n+    case ERROR_MARK:\n+      return false;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/* Helper function for type_has_unique_obj_representations.  */\n+\n+static bool\n+record_has_unique_obj_representations (const_tree t, const_tree sz)\n+{\n+  for (tree field = TYPE_FIELDS (t); field; field = DECL_CHAIN (field))\n+    if (TREE_CODE (field) != FIELD_DECL)\n+      ;\n+    /* For bases, can't use type_has_unique_obj_representations here, as in\n+\tstruct S { int i : 24; S (); };\n+\tstruct T : public S { int j : 8; T (); };\n+\tS doesn't have unique obj representations, but T does.  */\n+    else if (DECL_FIELD_IS_BASE (field))\n+      {\n+\tif (!record_has_unique_obj_representations (TREE_TYPE (field),\n+\t\t\t\t\t\t    DECL_SIZE (field)))\n+\t  return false;\n+      }\n+    else if (DECL_C_BIT_FIELD (field))\n+      {\n+\ttree btype = DECL_BIT_FIELD_TYPE (field);\n+\tif (!type_has_unique_obj_representations (btype))\n+\t  return false;\n+      }\n+    else if (!type_has_unique_obj_representations (TREE_TYPE (field)))\n+      return false;\n+\n+  offset_int cur = 0;\n+  for (tree field = TYPE_FIELDS (t); field; field = DECL_CHAIN (field))\n+    if (TREE_CODE (field) == FIELD_DECL)\n+      {\n+\toffset_int fld = wi::to_offset (DECL_FIELD_OFFSET (field));\n+\toffset_int bitpos = wi::to_offset (DECL_FIELD_BIT_OFFSET (field));\n+\tfld = fld * BITS_PER_UNIT + bitpos;\n+\tif (cur != fld)\n+\t  return false;\n+\tif (DECL_SIZE (field))\n+\t  {\n+\t    offset_int size = wi::to_offset (DECL_SIZE (field));\n+\t    cur += size;\n+\t  }\n+      }\n+  if (cur != wi::to_offset (sz))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Nonzero iff type T is a class template implicit specialization.  */\n \n bool"}, {"sha": "9aee1b289eac8c19d9f805007a5f2cee07d3f108", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -1,3 +1,8 @@\n+2016-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp1z/has-unique-obj-representations1.C: New test.\n+\t* g++.dg/cpp1z/has-unique-obj-representations2.C: New test.\n+\n 2016-10-06  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR tree-optimization/77862"}, {"sha": "73d80bfc6916f3beda5acdbb2a0225de6b1cc166", "filename": "gcc/testsuite/g++.dg/cpp1z/has-unique-obj-representations1.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations1.C?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile { target c++11 } }\n+\n+#define INTB (__SIZEOF_INT__ * __CHAR_BIT__)\n+struct S { int i : INTB * 3 / 4; S (); };\n+struct T : public S { int j : INTB / 4; T (); };\n+struct U { int i : INTB * 3 / 4; int j : INTB / 4; };\n+struct V { int i : INTB * 3 / 4; int j : INTB / 4 + 1; };\n+struct W {};\n+struct X : public W { int i; void bar (); };\n+struct Y { char a[3]; char b[]; };\n+struct Z { int a; float b; };\n+struct A { int i : INTB * 2; int j; };\t\t\t// { dg-warning \"exceeds its type\" }\n+union B { long a; unsigned long b; };\n+union C { int a; int b : INTB - 1; };\n+struct D { int a : INTB + 1; int b : INTB - 1; };\t// { dg-warning \"exceeds its type\" }\n+static_assert (__has_unique_object_representations (char) == true, \"\");\n+static_assert (__has_unique_object_representations (unsigned char) == true, \"\");\n+static_assert (__has_unique_object_representations (int) == true, \"\");\n+static_assert (__has_unique_object_representations (unsigned int) == true, \"\");\n+static_assert (__has_unique_object_representations (bool) == true, \"\");\n+static_assert (sizeof (S) != sizeof (int) || __has_unique_object_representations (S) == false, \"\");\n+static_assert (sizeof (T) != sizeof (int) || __has_unique_object_representations (T) == true, \"\");\n+static_assert (sizeof (U) != sizeof (int) || __has_unique_object_representations (U) == true, \"\");\n+static_assert (__has_unique_object_representations (V) == false, \"\");\n+static_assert (__has_unique_object_representations (W) == false, \"\");\n+static_assert (sizeof (X) != sizeof (int) || __has_unique_object_representations (X) == true, \"\");\n+static_assert (__has_unique_object_representations (float) == false, \"\");\n+static_assert (__has_unique_object_representations (double) == false, \"\");\n+static_assert (__has_unique_object_representations (long double) == false, \"\");\n+static_assert (__has_unique_object_representations (void) == false, \"\");\n+static_assert (__has_unique_object_representations (_Complex int) == true, \"\");\n+static_assert (__has_unique_object_representations (_Complex float) == false, \"\");\n+static_assert (__has_unique_object_representations (_Complex double) == false, \"\");\n+static_assert (__has_unique_object_representations (_Complex long double) == false, \"\");\n+static_assert (__has_unique_object_representations (int __attribute__((vector_size (16)))) == true, \"\");\n+static_assert (__has_unique_object_representations (float __attribute__((vector_size (16)))) == false, \"\");\n+static_assert (__has_unique_object_representations (int X::*) == true, \"\");\n+static_assert (__has_unique_object_representations (void (X::*) ()) == true, \"\");\n+static_assert (__has_unique_object_representations (int *) == true, \"\");\n+static_assert (__has_unique_object_representations (int (*) ()) == true, \"\");\n+static_assert (__has_unique_object_representations (decltype (nullptr)) == false, \"\");\n+static_assert (__has_unique_object_representations (Y) == (sizeof (Y) == 3 * sizeof (char)), \"\");\n+static_assert (__has_unique_object_representations (Z) == false, \"\");\n+static_assert (__has_unique_object_representations (A) == false, \"\");\n+static_assert (sizeof (B) != sizeof (long) || __has_unique_object_representations (B) == true, \"\");\n+static_assert (__has_unique_object_representations (C) == false, \"\");\n+static_assert (__has_unique_object_representations (D) == false, \"\");"}, {"sha": "c4ae555a92e36b971319c9e3bdce095cffbfe7bb", "filename": "gcc/testsuite/g++.dg/cpp1z/has-unique-obj-representations2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342cfb3e736afcc7397b4199a4c96fb602f5d68b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C?ref=342cfb3e736afcc7397b4199a4c96fb602f5d68b", "patch": "@@ -0,0 +1,8 @@\n+struct S;\n+struct T { S t; };\t\t\t\t\t// { dg-error \"incomplete type\" }\n+struct U { int u[sizeof (S)]; };\t\t\t// { dg-error \"incomplete type\" }\n+union V { char c; char d[]; };\t\t\t\t// { dg-error \"flexible array member in union\" }\n+bool a = __has_unique_object_representations (S);\t// { dg-error \"incomplete type\" }\n+bool b = __has_unique_object_representations (T);\n+bool c = __has_unique_object_representations (U);\n+bool d = __has_unique_object_representations (V);"}]}