{"sha": "19dbbf3697cff8c0eb50b5ada203860c623f2cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkYmJmMzY5N2NmZjhjMGViNTBiNWFkYTIwMzg2MGM2MjNmMmNkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-26T05:23:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-26T05:23:48Z"}, "message": "re PR middle-end/22028 (ICE after invalid struct declaration)\n\n\tPR middle-end/22028\n\t* gimplify.c (gimplify_type_sizes): Check for type == error_mark_node\n\tearlier in the function.\n\n\t* gcc.dg/20050620-1.c: New test.\n\nFrom-SVN: r101332", "tree": {"sha": "a6622769868a44a89a7d8e275cb48301a392ef54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6622769868a44a89a7d8e275cb48301a392ef54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19dbbf3697cff8c0eb50b5ada203860c623f2cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dbbf3697cff8c0eb50b5ada203860c623f2cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dbbf3697cff8c0eb50b5ada203860c623f2cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dbbf3697cff8c0eb50b5ada203860c623f2cde/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a1df4e2d7d4c30d2fce7557ae13e23deb910f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1df4e2d7d4c30d2fce7557ae13e23deb910f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1df4e2d7d4c30d2fce7557ae13e23deb910f20"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "751cc708ee6348a9da394397264644689eb0bb0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19dbbf3697cff8c0eb50b5ada203860c623f2cde", "patch": "@@ -1,5 +1,9 @@\n 2005-06-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/22028\n+\t* gimplify.c (gimplify_type_sizes): Check for type == error_mark_node\n+\tearlier in the function.\n+\n \t* regrename.c (copy_value): Don't replace fixed or global\n \tregs with older regs.\n "}, {"sha": "8bc790877747b50e46b5c45607f2955b6756e583", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=19dbbf3697cff8c0eb50b5ada203860c623f2cde", "patch": "@@ -4524,15 +4524,14 @@ gimplify_type_sizes (tree type, tree *list_p)\n {\n   tree field, t;\n \n-  if (type == NULL)\n+  if (type == NULL || type == error_mark_node)\n     return;\n \n   /* We first do the main variant, then copy into any other variants.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n   /* Avoid infinite recursion.  */\n-  if (TYPE_SIZES_GIMPLIFIED (type)\n-      || type == error_mark_node)\n+  if (TYPE_SIZES_GIMPLIFIED (type))\n     return;\n \n   TYPE_SIZES_GIMPLIFIED (type) = 1;"}, {"sha": "a8ca329b3267bc295f6068d7b2d9d0ab4c5a99c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19dbbf3697cff8c0eb50b5ada203860c623f2cde", "patch": "@@ -1,3 +1,8 @@\n+2005-06-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/22028\n+\t* gcc.dg/20050620-1.c: New test.\n+\n 2005-06-26  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR tree-optimization/22026"}, {"sha": "befdd9636500cfc8fe7db1bd4f67bee5796ed922", "filename": "gcc/testsuite/gcc.dg/20050620-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2Ftestsuite%2Fgcc.dg%2F20050620-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dbbf3697cff8c0eb50b5ada203860c623f2cde/gcc%2Ftestsuite%2Fgcc.dg%2F20050620-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050620-1.c?ref=19dbbf3697cff8c0eb50b5ada203860c623f2cde", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/22028 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void\n+foo (void)\n+{\n+  struct { int i[]; } u;\t/* { dg-error \"flexible array member\" } */\n+}\n+\n+void\n+bar (void)\n+{\n+  struct { struct a b; } c;\t/* { dg-error \"has incomplete type\" } */\n+}"}]}