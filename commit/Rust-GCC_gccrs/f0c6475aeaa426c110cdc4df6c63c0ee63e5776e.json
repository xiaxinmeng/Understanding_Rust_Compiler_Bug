{"sha": "f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjNjQ3NWFlYWE0MjZjMTEwY2RjNGRmNmM2M2MwZWU2M2U1Nzc2ZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-04-16T10:04:15Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-04-16T10:04:15Z"}, "message": "re PR target/40603 (unnecessary conversion from unsigned byte load to signed byte load)\n\n\tPR target/40603\n\t* config/arm/arm.md (cbranchqi4): New pattern.\n\t* config/arm/predicates.md (const0_operand,\n\tcbranchqi4_comparison_operator): New predicates.\n\n\tPR target/40603\n\t* gcc.target/arm/thumb-cbranchqi.c: New test.\n\nFrom-SVN: r158407", "tree": {"sha": "58e64b6f4d47d1ac2e1c03c2e4596978affabf70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58e64b6f4d47d1ac2e1c03c2e4596978affabf70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/comments", "author": null, "committer": null, "parents": [{"sha": "f010714542825d385d6b06313c72a64ae1184800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f010714542825d385d6b06313c72a64ae1184800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f010714542825d385d6b06313c72a64ae1184800"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "38952fc0aa0110e987eb24d50d1fa2e10920fde3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "patch": "@@ -1,9 +1,16 @@\n+2010-04-16  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/40603\n+\t* config/arm/arm.md (cbranchqi4): New pattern.\n+\t* config/arm/predicates.md (const0_operand,\n+\tcbranchqi4_comparison_operator): New predicates.\n+\n 2010-04-16  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple-pretty-print.c (dump_gimple_phi): Dump alias info.\n \t(dump_gimple_stmt): Likewise.\n \n-2010-04-16  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-04-16  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* recog.h (struct recog_data): New field is_operator.\n \t(struct insn_operand_data): New field is_operator.\n@@ -178,7 +185,7 @@\n \tdiv_and_round_double): Move prototypes ...\n \t* double-int.h: ... here.\n \n-2010-04-15  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-04-15  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/43742\n \t* config/sh/sh.md (doloop_end_split, dect): Undo previous patch.  Use\n@@ -206,7 +213,7 @@\n \tcomment.\n \t* expmed.c (mask_rtx, lshift_value): (Ditto.).\n \n-2010-04-14  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-04-14  Bernd Schmidt  <bernds@codesourcery.com>\n \t\n \tPR target/21803\n \t* ifcvt.c (cond_exec_process_if_block): Look for identical sequences\n@@ -790,7 +797,7 @@\n \t(arm_output_addr_const_extra): Output expression for new pattern.\n \t* config/arm/arm.md (UNSPEC_SYMBOL_OFFSET): New unspec symbol.\n \n-2010-04-10  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-04-10  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* ira-costs.c (record_reg_classes): Ignore alternatives that are\n \tnot enabled.\n@@ -820,7 +827,7 @@\n \t* ipa-prop.c (ipa_print_node_jump_functions): Likewise.\n \n 2010-04-09  Eric Botcazou  <ebotcazou@adacore.com>\n-\t    Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+\t    Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* loop-invariant.c (replace_uses): New static function.\n \t(move_invariant_reg): Use it to ensure we can replace the uses.\n@@ -2354,7 +2361,7 @@\n \t* c-decl.c (grokparms): Set arg_types to NULL_TREE if there was\n \tan error.\n \n-2010-03-19  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-03-19  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/42258\n \t* ira-lives.c (check_and_make_def_conflict): Ignore conflict for a"}, {"sha": "fb9c02429d5589c37a9597e65db45301b3de7132", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "patch": "@@ -6668,6 +6668,30 @@\n     operands[2] = force_reg (SImode, operands[2]);\n   \")\n \n+;; A pattern to recognize a special situation and optimize for it.\n+;; On the thumb, zero-extension from memory is preferrable to sign-extension\n+;; due to the available addressing modes.  Hence, convert a signed comparison\n+;; with zero into an unsigned comparison with 127 if possible.\n+(define_expand \"cbranchqi4\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 0 \"lt_ge_comparison_operator\"\n+\t       [(match_operand:QI 1 \"memory_operand\" \"\")\n+\t        (match_operand:QI 2 \"const0_operand\" \"\")])\n+\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t      (pc)))]\n+  \"TARGET_THUMB1\"\n+{\n+  rtx xops[3];\n+  xops[1] = gen_reg_rtx (SImode);\n+  emit_insn (gen_zero_extendqisi2 (xops[1], operands[1]));\n+  xops[2] = GEN_INT (127);\n+  xops[0] = gen_rtx_fmt_ee (GET_CODE (operands[0]) == GE ? LEU : GTU,\n+\t\t\t    VOIDmode, xops[1], xops[2]);\n+  xops[3] = operands[3];\n+  emit_insn (gen_cbranchsi4 (xops[0], xops[1], xops[2], xops[3]));\n+  DONE;\n+})\n+\n (define_expand \"cbranchsf4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"arm_comparison_operator\""}, {"sha": "a60da9a327171596ab67c7c19a073af7392b33d5", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "patch": "@@ -94,6 +94,10 @@\n   (and (match_code \"const_int\")\n        (match_test \"const_ok_for_arm (~INTVAL (op))\")))\n \n+(define_predicate \"const0_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 0\")))\n+\n ;; Something valid on the RHS of an ARM data-processing instruction\n (define_predicate \"arm_rhs_operand\"\n   (ior (match_operand 0 \"s_register_operand\")\n@@ -203,6 +207,9 @@\n \t\t\t && (TARGET_FPA || TARGET_VFP)\")\n             (match_code \"unordered,ordered,unlt,unle,unge,ungt\"))))\n \n+(define_special_predicate \"lt_ge_comparison_operator\"\n+  (match_code \"lt,ge\"))\n+\n (define_special_predicate \"minmax_operator\"\n   (and (match_code \"smin,smax,umin,umax\")\n        (match_test \"mode == GET_MODE (op)\")))"}, {"sha": "450aa4f0e440b88472d88043286c74e04670043b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "patch": "@@ -1,7 +1,10 @@\n-2010-04-16  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-04-16  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/41514\n-\tgcc.target/arm/thumb-comparisons.c: New test.\n+\t* gcc.target/arm/thumb-comparisons.c: New test.\n+\n+\tPR target/40603\n+\t* gcc.target/arm/thumb-cbranchqi.c: New test.\n \n 2010-04-16  Christian Bruel  <christian.bruel@st.com>\n \n@@ -30,7 +33,7 @@\n \t* gcc.dg/torture/ipa-pta-2.c: Likewise.\n \t* gcc.dg/torture/ipa-pta-1.c: Adjust.\n \n-2010-04-14  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-04-14  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/21803\n \t* gcc.target/arm/pr42496.c: New test.\n@@ -1217,7 +1220,7 @@\n \t* gcc.dg/pr43211.c: New test.\n \t* gcc.dg/pr18809-1.c: Don't expect an error when calling foo.\n \n-2010-03-19  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n+2010-03-19  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/42258\n \t* gcc.target/arm/thumb1-mul-moves.c: New test."}, {"sha": "ad28e7f54b8ff03c0a3aa66cd8490e43aa426aea", "filename": "gcc/testsuite/gcc.target/arm/thumb-cbranchqi.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-cbranchqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c6475aeaa426c110cdc4df6c63c0ee63e5776e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-cbranchqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-cbranchqi.c?ref=f0c6475aeaa426c110cdc4df6c63c0ee63e5776e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mthumb -Os\" }  */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+\n+int ldrb(unsigned char* p)\n+{\n+  if (p[8] <= 0x7F)\n+    return 2;\n+  else\n+    return 5;\n+}\n+\n+\n+/* { dg-final { scan-assembler \"127\" } } */\n+/* { dg-final { scan-assembler \"bhi\" } } */"}]}