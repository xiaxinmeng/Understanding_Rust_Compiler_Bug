{"sha": "e64690af46891cab31d2e9cad88b848fc39f947e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0NjkwYWY0Njg5MWNhYjMxZDJlOWNhZDg4Yjg0OGZjMzlmOTQ3ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-10-11T20:18:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-10-11T20:18:36Z"}, "message": "re PR libstdc++/29426 (static __recursive_mutex init  vs  __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION)\n\n2006-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/29426\n\t* libsupc++/guard.cc (get_static_mutex): New. \n\t(mutex_wrapper::mutex_wrapper): Use it to get properly initialized\n\trecursive mutex without ordering issues.\n\n\t* src/locale_init.cc (__get_locale_mutex): No need to\n\tuglify. Change to get_locale_mutex.\n\nFrom-SVN: r117643", "tree": {"sha": "e2b3b8e33dd65cd353d4b4190f2cbe268011ec8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2b3b8e33dd65cd353d4b4190f2cbe268011ec8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e64690af46891cab31d2e9cad88b848fc39f947e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64690af46891cab31d2e9cad88b848fc39f947e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64690af46891cab31d2e9cad88b848fc39f947e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64690af46891cab31d2e9cad88b848fc39f947e/comments", "author": null, "committer": null, "parents": [{"sha": "7a1af5508c8bc036ef409b3e0dd6634bf3d8a546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1af5508c8bc036ef409b3e0dd6634bf3d8a546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1af5508c8bc036ef409b3e0dd6634bf3d8a546"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "edb15979bb27edf86707ca31d887125f1d351ed6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64690af46891cab31d2e9cad88b848fc39f947e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64690af46891cab31d2e9cad88b848fc39f947e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e64690af46891cab31d2e9cad88b848fc39f947e", "patch": "@@ -1,3 +1,13 @@\n+2006-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/29426\n+\t* libsupc++/guard.cc (get_static_mutex): New. \n+\t(mutex_wrapper::mutex_wrapper): Use it to get properly initialized\n+\trecursive mutex without ordering issues.\n+\n+\t* src/locale_init.cc (__get_locale_mutex): No need to\n+\tuglify. Change to get_locale_mutex.\n+\t\n 2006-10-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/22_locale/num_put/put/char/11.cc: New."}, {"sha": "eb6421689b3ab9076e6b651033ba08dddc9fbc4a", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64690af46891cab31d2e9cad88b848fc39f947e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64690af46891cab31d2e9cad88b848fc39f947e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=e64690af46891cab31d2e9cad88b848fc39f947e", "patch": "@@ -32,6 +32,7 @@\n #include <bits/c++config.h>\n #include <cxxabi.h>\n #include <exception>\n+#include <new>\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n \n@@ -43,7 +44,22 @@\n namespace\n {\n   // A single mutex controlling all static initializations.\n-  __gnu_cxx::__recursive_mutex static_mutex;\n+  static __gnu_cxx::__recursive_mutex* static_mutex;  \n+\n+  typedef char fake_recursive_mutex[sizeof(__gnu_cxx::__recursive_mutex)]\n+  __attribute__ ((aligned(__alignof__(__gnu_cxx::__recursive_mutex))));\n+  fake_recursive_mutex fake_mutex;\n+\n+  static void init()\n+  { static_mutex =  new (&fake_mutex) __gnu_cxx::__recursive_mutex(); }\n+\n+  __gnu_cxx::__recursive_mutex&\n+  get_static_mutex()\n+  {\n+    static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n+    __gthread_once(&once, init);\n+    return *static_mutex;\n+  }\n }\n \n #ifndef _GLIBCXX_GUARD_TEST_AND_ACQUIRE\n@@ -98,18 +114,14 @@ namespace __cxxabiv1\n {\n   static inline int\n   recursion_push (__guard* g)\n-  {\n-    return ((char *)g)[1]++;\n-  }\n+  { return ((char *)g)[1]++; }\n \n   static inline void\n   recursion_pop (__guard* g)\n-  {\n-    --((char *)g)[1];\n-  }\n+  { --((char *)g)[1]; }\n \n   static int\n-  acquire_1 (__guard *g)\n+  acquire (__guard *g)\n   {\n     if (_GLIBCXX_GUARD_TEST (g))\n       return 0;\n@@ -142,18 +154,18 @@ namespace __cxxabiv1\n \tstruct mutex_wrapper\n \t{\n \t  bool unlock;\n-\t  mutex_wrapper (): unlock(true)\n-\t  {\n-\t    static_mutex.lock();\n-\t  }\n-\t  ~mutex_wrapper ()\n+\t  mutex_wrapper() : unlock(true)\n+\t  { get_static_mutex().lock(); }\n+\n+\t  ~mutex_wrapper()\n \t  {\n \t    if (unlock)\n-\t      static_mutex.unlock();\n+\t      static_mutex->unlock();\n \t  }\n-\t} mw;\n+\t};\n \n-\tif (acquire_1 (g))\n+\tmutex_wrapper mw;\n+\tif (acquire (g))\n \t  {\n \t    mw.unlock = false;\n \t    return 1;\n@@ -163,7 +175,7 @@ namespace __cxxabiv1\n       }\n #endif\n \n-    return acquire_1 (g);\n+    return acquire (g);\n   }\n \n   extern \"C\"\n@@ -172,7 +184,7 @@ namespace __cxxabiv1\n     recursion_pop (g);\n #ifdef __GTHREADS\n     if (__gthread_active_p ())\n-      static_mutex.unlock();\n+      static_mutex->unlock();\n #endif\n   }\n \n@@ -183,7 +195,7 @@ namespace __cxxabiv1\n     _GLIBCXX_GUARD_SET_AND_RELEASE (g);\n #ifdef __GTHREADS\n     if (__gthread_active_p ())\n-      static_mutex.unlock();\n+      static_mutex->unlock();\n #endif\n   }\n }"}, {"sha": "28ee484112f80d1a4c2f3e47ed67657f101f755c", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64690af46891cab31d2e9cad88b848fc39f947e/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64690af46891cab31d2e9cad88b848fc39f947e/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=e64690af46891cab31d2e9cad88b848fc39f947e", "patch": "@@ -37,7 +37,7 @@\n namespace \n {\n   __gnu_cxx::__mutex&\n-  __get_locale_mutex()\n+  get_locale_mutex()\n   {\n     static __gnu_cxx::__mutex locale_mutex;\n     return locale_mutex;\n@@ -212,7 +212,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::locale() throw() : _M_impl(0)\n   { \n     _S_initialize();\n-    __gnu_cxx::__scoped_lock sentry(__get_locale_mutex());\n+    __gnu_cxx::__scoped_lock sentry(get_locale_mutex());\n     _S_global->_M_add_reference();\n     _M_impl = _S_global;\n   }\n@@ -223,7 +223,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _S_initialize();\n     _Impl* __old;\n     {\n-      __gnu_cxx::__scoped_lock sentry(__get_locale_mutex());\n+      __gnu_cxx::__scoped_lock sentry(get_locale_mutex());\n       __old = _S_global;\n       __other._M_impl->_M_add_reference();\n       _S_global = __other._M_impl;"}]}