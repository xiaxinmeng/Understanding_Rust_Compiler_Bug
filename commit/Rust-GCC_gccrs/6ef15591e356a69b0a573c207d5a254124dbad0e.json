{"sha": "6ef15591e356a69b0a573c207d5a254124dbad0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmMTU1OTFlMzU2YTY5YjBhNTczYzIwN2Q1YTI1NDEyNGRiYWQwZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-17T16:51:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-17T16:51:52Z"}, "message": "re PR c++/67576 (expression of typeid( expression ) is evaluated twice)\n\n\tPR c++/67576\n\n\tPR c++/25466\n\t* rtti.c (build_typeid): Use save_expr, not stabilize_reference.\n\nFrom-SVN: r231776", "tree": {"sha": "43e5b108e146dfd273927d08848340f3e7ec0f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43e5b108e146dfd273927d08848340f3e7ec0f3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ef15591e356a69b0a573c207d5a254124dbad0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef15591e356a69b0a573c207d5a254124dbad0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef15591e356a69b0a573c207d5a254124dbad0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef15591e356a69b0a573c207d5a254124dbad0e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ad2439beab4d872ca51fe46858a673e51fb8c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad2439beab4d872ca51fe46858a673e51fb8c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad2439beab4d872ca51fe46858a673e51fb8c0a"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "73906f3cb12bb7993c39062562d34d9d083378d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef15591e356a69b0a573c207d5a254124dbad0e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef15591e356a69b0a573c207d5a254124dbad0e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6ef15591e356a69b0a573c207d5a254124dbad0e", "patch": "@@ -1,3 +1,9 @@\n+2015-12-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67576\n+\tPR c++/25466\n+\t* rtti.c (build_typeid): Use save_expr, not stabilize_reference.\n+\n 2015-12-16  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/16333"}, {"sha": "f42b1cbf9225ae2308a09de928e7d5f3c61eea0a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef15591e356a69b0a573c207d5a254124dbad0e/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef15591e356a69b0a573c207d5a254124dbad0e/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=6ef15591e356a69b0a573c207d5a254124dbad0e", "patch": "@@ -332,7 +332,7 @@ build_typeid (tree exp, tsubst_flags_t complain)\n       /* So we need to look into the vtable of the type of exp.\n          Make sure it isn't a null lvalue.  */\n       exp = cp_build_addr_expr (exp, complain);\n-      exp = stabilize_reference (exp);\n+      exp = save_expr (exp);\n       cond = cp_convert (boolean_type_node, exp, complain);\n       exp = cp_build_indirect_ref (exp, RO_NULL, complain);\n     }"}, {"sha": "384b0f417054e2bca3524345f26fd0dfe900117c", "filename": "gcc/testsuite/g++.dg/rtti/typeid11.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef15591e356a69b0a573c207d5a254124dbad0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef15591e356a69b0a573c207d5a254124dbad0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid11.C?ref=6ef15591e356a69b0a573c207d5a254124dbad0e", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do run }\n+\n+#include <typeinfo>\n+\n+struct Base { virtual void foo() {} }; // polymorphic\n+\n+int main()\n+{\n+  Base b;\n+  Base *ary[] = { &b, &b, &b};\n+\n+  int iter = 0;\n+  typeid(*ary[iter++]);\n+  if (iter != 1)\t// should be 1\n+    __builtin_abort();\t// but 2\n+}"}]}