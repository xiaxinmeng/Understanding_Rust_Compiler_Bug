{"sha": "94f24ddce6d75529a8865f365df4b08c871c2c41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmMjRkZGNlNmQ3NTUyOWE4ODY1ZjM2NWRmNGIwOGM4NzFjMmM0MQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-04-05T15:57:40Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-04-05T15:57:40Z"}, "message": "alias.c (find_base_term): Export.\n\n\t* alias.c (find_base_term): Export.\n\t* rtl.h (find_base_term): Declare.\n\t* gcse.c (find_moveable_store): Test for flag_non_call_exceptions\n\tinstead of flag_exceptions.  Move test for parameter passing ...\n\t(store_killed_in_insn): ... here.\n\nFrom-SVN: r65272", "tree": {"sha": "127d24f867f773943f7024a7efa531258e061912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/127d24f867f773943f7024a7efa531258e061912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f24ddce6d75529a8865f365df4b08c871c2c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f24ddce6d75529a8865f365df4b08c871c2c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f24ddce6d75529a8865f365df4b08c871c2c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f24ddce6d75529a8865f365df4b08c871c2c41/comments", "author": null, "committer": null, "parents": [{"sha": "92441f839f6959476991c26bca3db09802dbcf6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92441f839f6959476991c26bca3db09802dbcf6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92441f839f6959476991c26bca3db09802dbcf6a"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "8e3c2295ff1259f532e37c41a2d942173efc1622", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94f24ddce6d75529a8865f365df4b08c871c2c41", "patch": "@@ -1,3 +1,11 @@\n+2003-04-05  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* alias.c (find_base_term): Export.\n+\t* rtl.h (find_base_term): Declare.\n+\t* gcse.c (find_moveable_store): Test for flag_non_call_exceptions\n+\tinstead of flag_exceptions.  Move test for parameter passing ...\n+\t(store_killed_in_insn): ... here.\n+\n 2003-04-05  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \tPR bootstrap/10267"}, {"sha": "49b53c9b5d79c1845855f25d32f290aa2152b2c7", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=94f24ddce6d75529a8865f365df4b08c871c2c41", "patch": "@@ -98,7 +98,6 @@ rtx get_addr\t\t\t\tPARAMS ((rtx));\n static int memrefs_conflict_p\t\tPARAMS ((int, rtx, int, rtx,\n \t\t\t\t\t\t HOST_WIDE_INT));\n static void record_set\t\t\tPARAMS ((rtx, rtx, void *));\n-static rtx find_base_term\t\tPARAMS ((rtx));\n static int base_alias_check\t\tPARAMS ((rtx, rtx, enum machine_mode,\n \t\t\t\t\t\t enum machine_mode));\n static rtx find_base_value\t\tPARAMS ((rtx));\n@@ -1299,7 +1298,7 @@ find_symbolic_term (x)\n   return 0;\n }\n \n-static rtx\n+rtx\n find_base_term (x)\n      rtx x;\n {"}, {"sha": "3460a0c7cecb353e07e92e79758efb48b179638e", "filename": "gcc/gcse.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=94f24ddce6d75529a8865f365df4b08c871c2c41", "patch": "@@ -7148,19 +7148,9 @@ find_moveable_store (insn, regs_set_before, regs_set_after)\n   /* If we are handling exceptions, we must be careful with memory references\n      that may trap. If we are not, the behavior is undefined, so we may just\n      continue.  */\n-  if (flag_exceptions && may_trap_p (dest))\n+  if (flag_non_call_exceptions && may_trap_p (dest))\n     return;\n     \n-  /* Do not consider MEMs that mention stack pointer; in the following\n-     we rely on that constant functions do not read memory, which of course\n-     does not include their arguments if passed on stack.\n-     \n-     Note that this is not quite correct -- we may use other registers\n-     to address stack.  See store_killed_in_insn for handling of this\n-     case.  */\n-  if (reg_mentioned_p (stack_pointer_rtx, dest))\n-    return;\n-\n   ptr = ldst_entry (dest);\n   if (!ptr->pattern_regs)\n     ptr->pattern_regs = extract_mentioned_regs (dest);\n@@ -7411,6 +7401,8 @@ static bool\n store_killed_in_insn (x, x_regs, insn)\n      rtx x, x_regs, insn;\n {\n+  rtx reg, base;\n+\n   if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n     return false;\n \n@@ -7421,11 +7413,17 @@ store_killed_in_insn (x, x_regs, insn)\n       if (! CONST_OR_PURE_CALL_P (insn) || pure_call_p (insn))\n \treturn true;\n \n-      /* But even a const call reads its parameters.  It is not trivial\n-\t check that base of the mem is not related to stack pointer,\n-\t so unless it contains no registers, just assume it may.  */\n-      if (x_regs)\n-\treturn true;\n+      /* But even a const call reads its parameters.  Check whether the\n+\t base of some of registers used in mem is stack pointer.  */\n+      for (reg = x_regs; reg; reg = XEXP (reg, 1))\n+\t{\n+\t  base = find_base_term (reg);\n+\t  if (!base\n+\t      || (GET_CODE (base) == ADDRESS\n+\t\t  && GET_MODE (base) == Pmode\n+\t\t  && XEXP (base, 0) == stack_pointer_rtx))\n+\t    return true;\n+\t}\n \n       return false;\n     }"}, {"sha": "b874d6410fe2512003984219cef42b3e05b22ddc", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f24ddce6d75529a8865f365df4b08c871c2c41/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=94f24ddce6d75529a8865f365df4b08c871c2c41", "patch": "@@ -2282,6 +2282,7 @@ extern void init_alias_analysis\t\tPARAMS ((void));\n extern void end_alias_analysis\t\tPARAMS ((void));\n extern rtx addr_side_effect_eval\tPARAMS ((rtx, int, int));\n extern bool memory_modified_in_insn_p\tPARAMS ((rtx, rtx));\n+extern rtx find_base_term\t\tPARAMS ((rtx));\n \n /* In sibcall.c */\n typedef enum {"}]}