{"sha": "f573d35147ca8433c102e1721d8c99fc432cb44b", "node_id": "C_kwDOANBUbNoAKGY1NzNkMzUxNDdjYTg0MzNjMTAyZTE3MjFkOGM5OWZjNDMyY2I0NGI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-18T20:23:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-19T20:25:27Z"}, "message": "analyzer: fix false leak due to overeager state merging [PR103217]\n\nPR analyzer/103217 reports a false positive from -Wanalyzer-malloc-leak.\n\nThe root cause is due to overzealous state merger, where the\nstate-merging code decided to merge these two states by merging\nthe stores:\n\nstate A:\n  clusters within frame: \u2018main\u2019@1\n    cluster for: one_3: CONJURED(val_4 = strdup (src_2(D));, val_4)\n    cluster for: two_4: UNKNOWN(char *)\n    cluster for: one_21: CONJURED(val_4 = strdup (src_2(D));, val_4)\n\nstate B:\n  clusters within frame: \u2018main\u2019@1\n    cluster for: one_3: UNKNOWN(char *)\n    cluster for: two_4: CONJURED(val_4 = strdup (src_2(D));, val_4)\n    cluster for: two_18: CONJURED(val_4 = strdup (src_2(D));, val_4)\n\ninto:\n  clusters within frame: \u2018main\u2019@1\n    cluster for: one_3: UNKNOWN(char *)\n    cluster for: two_4: UNKNOWN(char *)\n    cluster for: one_21: UNKNOWN(char *)\n    cluster for: two_18: UNKNOWN(char *)\n\ndespite \"CONJURED(val_4 = strdup (src_2(D));, val_4)\" having sm-state,\nin this case malloc:nonnull ({free}), thus leading to both references\nto the conjured svalue being lost at merger.\n\nThis patch tweaks the state merger code so that it will not consider\nmerging two different svalues for the value of a region if either svalue\nhas non-purgable sm-state (in the above example, malloc:nonnull).  This\nfixes the false leak report above.\n\nDoing so uncovered an issue with explode-2a.c in which the warnings\nmoved from the correct location to the \"while\" stmt.  This turned out\nto be a missing call to detect_leaks in phi-handling, which the patch\nalso fixes (in the PK_BEFORE_SUPERNODE case in\nexploded_graph::process_node).  Doing this fixed the regression in\nexplode-2a.c and also fixed the location of the leak warning in\nexplode-1.c.\n\nThe other side effect of the change is that pr94858-1.c now emits\na -Wanalyzer-too-complex warning, since pertinent state is no longer\nbeing thrown away.  There doesn't seem to be a good way of avoiding\nthis, so the patch also adds -Wno-analyzer-too-complex to that test\ncase (restoring the default).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/103217\n\t* engine.cc (exploded_graph::get_or_create_node): Pass in\n\tm_ext_state to program_state::can_merge_with_p.\n\t(exploded_graph::process_worklist): Likewise.\n\t(exploded_graph::maybe_process_run_of_before_supernode_enodes):\n\tLikewise.\n\t(exploded_graph::process_node): Add missing call to detect_leaks\n\twhen handling phi nodes.\n\t* program-state.cc (program_state::can_merge_with_p): Add\n\t\"ext_state\" param.  Pass it and state ptrs to\n\tregion_model::can_merge_with_p.\n\t(selftest::test_program_state_merging): Update for new ext_state\n\tparam of program_state::can_merge_with_p.\n\t(selftest::test_program_state_merging_2): Likewise.\n\t* program-state.h (program_state::can_purge_p): Make const.\n\t(program_state::can_merge_with_p): Add \"ext_state\" param.\n\t* region-model.cc: Include \"analyzer/program-state.h\".\n\t(region_model::can_merge_with_p): Add params \"ext_state\",\n\t\"state_a\", and \"state_b\", use them when creating model_merger\n\tobject.\n\t(model_merger::mergeable_svalue_p): New.\n\t* region-model.h (region_model::can_merge_with_p): Add params\n\t\"ext_state\", \"state_a\", and \"state_b\".\n\t(model_merger::model_merger) Likewise, initializing new fields.\n\t(model_merger::mergeable_svalue_p): New decl.\n\t(model_merger::m_ext_state): New field.\n\t(model_merger::m_state_a): New field.\n\t(model_merger::m_state_b): New field.\n\t* svalue.cc (svalue::can_merge_p): Call\n\tmodel_merger::mergeable_svalue_p on both states and reject the\n\tmerger accordingly.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/103217\n\t* gcc.dg/analyzer/explode-1.c: Update for improvement to location\n\tof leak warning.\n\t* gcc.dg/analyzer/pr103217.c: New test.\n\t* gcc.dg/analyzer/pr94858-1.c: Add -Wno-analyzer-too-complex.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "4001b588d5e8bbcf86baaf55157b805326e9131f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4001b588d5e8bbcf86baaf55157b805326e9131f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f573d35147ca8433c102e1721d8c99fc432cb44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f573d35147ca8433c102e1721d8c99fc432cb44b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f573d35147ca8433c102e1721d8c99fc432cb44b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f573d35147ca8433c102e1721d8c99fc432cb44b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be08d573177b2004706759eedfdd4113f69e4c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be08d573177b2004706759eedfdd4113f69e4c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be08d573177b2004706759eedfdd4113f69e4c5c"}], "stats": {"total": 131, "additions": 117, "deletions": 14}, "files": [{"sha": "e8a7cca0f8cdfbc23558d25a331b0c446c40045f", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -2417,7 +2417,7 @@ exploded_graph::get_or_create_node (const program_point &point,\n \t  /* This merges successfully within the loop.  */\n \n \t  program_state merged_state (m_ext_state);\n-\t  if (pruned_state.can_merge_with_p (existing_state, point,\n+\t  if (pruned_state.can_merge_with_p (existing_state, m_ext_state, point,\n \t\t\t\t\t     &merged_state))\n \t    {\n \t      merged_state.validate (m_ext_state);\n@@ -2717,7 +2717,8 @@ exploded_graph::process_worklist ()\n \t\tgcc_assert (state != state_2);\n \n \t\tprogram_state merged_state (m_ext_state);\n-\t\tif (state.can_merge_with_p (state_2, point, &merged_state))\n+\t\tif (state.can_merge_with_p (state_2, m_ext_state,\n+\t\t\t\t\t    point, &merged_state))\n \t\t  {\n \t\t    if (logger)\n \t\t      logger->log (\"merging EN: %i and EN: %i\",\n@@ -2973,7 +2974,8 @@ maybe_process_run_of_before_supernode_enodes (exploded_node *enode)\n \t{\n \t  merged_state->validate (m_ext_state);\n \t  program_state merge (m_ext_state);\n-\t  if (it_state.can_merge_with_p (*merged_state, next_point, &merge))\n+\t  if (it_state.can_merge_with_p (*merged_state, m_ext_state,\n+\t\t\t\t\t next_point, &merge))\n \t    {\n \t      *merged_state = merge;\n \t      merged_state->validate (m_ext_state);\n@@ -3305,6 +3307,8 @@ exploded_graph::process_node (exploded_node *node)\n \t\t(node->get_supernode (),\n \t\t last_cfg_superedge,\n \t\t &ctxt);\n+\t    program_state::detect_leaks (state, next_state, NULL,\n+\t\t\t\t\t get_ext_state (), &ctxt);\n \t  }\n \n \tprogram_point next_point (point.get_next ());"}, {"sha": "47e4eca06d0dffb7c794724471f841653cc4345b", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -1197,6 +1197,7 @@ program_state::get_representative_tree (const svalue *sval) const\n \n bool\n program_state::can_merge_with_p (const program_state &other,\n+\t\t\t\t const extrinsic_state &ext_state,\n \t\t\t\t const program_point &point,\n \t\t\t\t program_state *out) const\n {\n@@ -1213,7 +1214,9 @@ program_state::can_merge_with_p (const program_state &other,\n   /* Attempt to merge the region_models.  */\n   if (!m_region_model->can_merge_with_p (*other.m_region_model,\n \t\t\t\t\t  point,\n-\t\t\t\t\t  out->m_region_model))\n+\t\t\t\t\t out->m_region_model,\n+\t\t\t\t\t &ext_state,\n+\t\t\t\t\t this, &other))\n     return false;\n \n   /* Copy m_checker_states to OUT.  */\n@@ -1645,7 +1648,7 @@ test_program_state_merging ()\n      with the given sm-state.\n      They ought to be mergeable, preserving the sm-state.  */\n   program_state merged (ext_state);\n-  ASSERT_TRUE (s0.can_merge_with_p (s1, point, &merged));\n+  ASSERT_TRUE (s0.can_merge_with_p (s1, ext_state, point, &merged));\n   merged.validate (ext_state);\n \n   /* Verify that the merged state has the sm-state for \"p\".  */\n@@ -1703,7 +1706,7 @@ test_program_state_merging_2 ()\n \n   /* They ought to not be mergeable.  */\n   program_state merged (ext_state);\n-  ASSERT_FALSE (s0.can_merge_with_p (s1, point, &merged));\n+  ASSERT_FALSE (s0.can_merge_with_p (s1, ext_state, point, &merged));\n }\n \n /* Run all of the selftests within this file.  */"}, {"sha": "4579e2a6822a2c80d6ea79964ba2dfa6d631b0d5", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -242,7 +242,7 @@ class program_state\n   tree get_representative_tree (const svalue *sval) const;\n \n   bool can_purge_p (const extrinsic_state &ext_state,\n-\t\t    const svalue *sval)\n+\t\t    const svalue *sval) const\n   {\n     /* Don't purge vars that have non-purgeable sm state, to avoid\n        generating false \"leak\" complaints.  */\n@@ -258,6 +258,7 @@ class program_state\n   }\n \n   bool can_merge_with_p (const program_state &other,\n+\t\t\t const extrinsic_state &ext_state,\n \t\t\t const program_point &point,\n \t\t\t program_state *out) const;\n "}, {"sha": "dccf9024a14843e19083313f7214d84b50b6d46b", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/pending-diagnostic.h\"\n #include \"analyzer/region-model-reachability.h\"\n #include \"analyzer/analyzer-selftests.h\"\n+#include \"analyzer/program-state.h\"\n #include \"stor-layout.h\"\n #include \"attribs.h\"\n #include \"tree-object-size.h\"\n@@ -3683,7 +3684,10 @@ region_model::poison_any_pointers_to_descendents (const region *reg,\n bool\n region_model::can_merge_with_p (const region_model &other_model,\n \t\t\t\tconst program_point &point,\n-\t\t\t\tregion_model *out_model) const\n+\t\t\t\tregion_model *out_model,\n+\t\t\t\tconst extrinsic_state *ext_state,\n+\t\t\t\tconst program_state *state_a,\n+\t\t\t\tconst program_state *state_b) const\n {\n   gcc_assert (out_model);\n   gcc_assert (m_mgr == other_model.m_mgr);\n@@ -3693,7 +3697,8 @@ region_model::can_merge_with_p (const region_model &other_model,\n     return false;\n   out_model->m_current_frame = m_current_frame;\n \n-  model_merger m (this, &other_model, point, out_model);\n+  model_merger m (this, &other_model, point, out_model,\n+\t\t  ext_state, state_a, state_b);\n \n   if (!store::can_merge_p (&m_store, &other_model.m_store,\n \t\t\t   &out_model->m_store, m_mgr->get_store_manager (),\n@@ -3897,6 +3902,30 @@ model_merger::dump (bool simple) const\n   dump (stderr, simple);\n }\n \n+/* Return true if it's OK to merge SVAL with other svalues.  */\n+\n+bool\n+model_merger::mergeable_svalue_p (const svalue *sval) const\n+{\n+  if (m_ext_state)\n+    {\n+      /* Reject merging svalues that have non-purgable sm-state,\n+\t to avoid falsely reporting memory leaks by merging them\n+\t with something else.  For example, given a local var \"p\",\n+\t reject the merger of a:\n+\t   store_a mapping \"p\" to a malloc-ed ptr\n+\t with:\n+\t   store_b mapping \"p\" to a NULL ptr.  */\n+      if (m_state_a)\n+\tif (!m_state_a->can_purge_p (*m_ext_state, sval))\n+\t  return false;\n+      if (m_state_b)\n+\tif (!m_state_b->can_purge_p (*m_ext_state, sval))\n+\t  return false;\n+    }\n+  return true;\n+}\n+\n } // namespace ana\n \n /* Dump RMODEL fully to stderr (i.e. without summarization).  */"}, {"sha": "bffbdf24bca381aa9cacdb48e1b4d3ddb4a06aad", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -721,7 +721,10 @@ class region_model\n \n   bool can_merge_with_p (const region_model &other_model,\n \t\t\t const program_point &point,\n-\t\t\t region_model *out_model) const;\n+\t\t\t region_model *out_model,\n+\t\t\t const extrinsic_state *ext_state = NULL,\n+\t\t\t const program_state *state_a = NULL,\n+\t\t\t const program_state *state_b = NULL) const;\n \n   tree get_fndecl_for_call (const gcall *call,\n \t\t\t    region_model_context *ctxt);\n@@ -987,10 +990,15 @@ struct model_merger\n   model_merger (const region_model *model_a,\n \t\tconst region_model *model_b,\n \t\tconst program_point &point,\n-\t\tregion_model *merged_model)\n+\t\tregion_model *merged_model,\n+\t\tconst extrinsic_state *ext_state,\n+\t\tconst program_state *state_a,\n+\t\tconst program_state *state_b)\n   : m_model_a (model_a), m_model_b (model_b),\n     m_point (point),\n-    m_merged_model (merged_model)\n+    m_merged_model (merged_model),\n+    m_ext_state (ext_state),\n+    m_state_a (state_a), m_state_b (state_b)\n   {\n   }\n \n@@ -1003,10 +1011,16 @@ struct model_merger\n     return m_model_a->get_manager ();\n   }\n \n+  bool mergeable_svalue_p (const svalue *) const;\n+\n   const region_model *m_model_a;\n   const region_model *m_model_b;\n   const program_point &m_point;\n   region_model *m_merged_model;\n+\n+  const extrinsic_state *m_ext_state;\n+  const program_state *m_state_a;\n+  const program_state *m_state_b;\n };\n \n /* A record that can (optionally) be written out when"}, {"sha": "7cbcf0c9cb668582f72441be033f1196216f8363", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -193,6 +193,14 @@ svalue::can_merge_p (const svalue *other,\n \treturn NULL;\n     }\n \n+  /* Reject merging svalues that have non-purgable sm-state,\n+     to avoid falsely reporting memory leaks by merging them\n+     with something else.  */\n+  if (!merger->mergeable_svalue_p (this))\n+    return NULL;\n+  if (!merger->mergeable_svalue_p (other))\n+    return NULL;\n+\n   /* Widening.  */\n   /* Merge: (new_cst, existing_cst) -> widen (existing, new).  */\n   if (maybe_get_constant () && other->maybe_get_constant ())"}, {"sha": "9b95afd9a031aad10ea7ed89d74790ecab2a85ac", "filename": "gcc/testsuite/gcc.dg/analyzer/explode-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-1.c?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -12,7 +12,7 @@ void test (void)\n {\n   void *p0, *p1, *p2, *p3, *p4, *p5, *p6, *p7, *p8;\n   void **pp;\n-  while (get ()) /* { dg-warning \"leak\" } */\n+  while (get ())\n     {\n       switch (get ())\n \t{\n@@ -47,7 +47,7 @@ void test (void)\n \t{\n \tdefault:\n \tcase 0:\n-\t  *pp = malloc (16);\n+\t  *pp = malloc (16); /* { dg-warning \"leak\" } */\n \t  break;\n \tcase 1:\n \t  free (*pp);"}, {"sha": "a0ef8bf3210ed0a854a0b3c1c48c7e5c0a7fee01", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103217.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217.c?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -0,0 +1,42 @@\n+extern char *strdup (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n+\n+extern void abort (void)\n+  __attribute__ ((__nothrow__ , __leaf__, __noreturn__));\n+\n+extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)\n+  __attribute__ ((__nothrow__ , __leaf__, __nonnull__ (2, 3)));\n+extern char *optarg;\n+\n+extern void free (void *__ptr)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+\n+#define NULL ((void *)0)\n+\n+char *xstrdup(const char *src) {\n+\tchar *val = strdup(src);\n+\tif (!val)\n+\t\tabort();\n+\treturn val;\n+}\n+\n+int main(int argc, char *argv[]) {\n+\tchar *one = NULL, *two = NULL;\n+\tint rc;\n+\n+\twhile ((rc = getopt(argc, argv, \"a:b:\")) != -1) {\n+\t\tswitch (rc) {\n+\t\tcase 'a':\n+\t\t\tfree(one);\n+\t\t\tone = xstrdup(optarg);\n+\t\t\tbreak;\n+\t\tcase 'b':\n+\t\t\tfree(two);\n+\t\t\ttwo = xstrdup(optarg);\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\tfree(one);\n+\tfree(two);\n+\treturn 0;\n+}"}, {"sha": "d33c17495f9660761129475bd54dbc9248a37b02", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94858-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f573d35147ca8433c102e1721d8c99fc432cb44b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94858-1.c?ref=f573d35147ca8433c102e1721d8c99fc432cb44b", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n+\n #include <stdlib.h>\n \n typedef short hashNx;"}]}