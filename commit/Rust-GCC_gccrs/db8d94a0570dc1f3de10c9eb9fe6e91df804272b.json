{"sha": "db8d94a0570dc1f3de10c9eb9fe6e91df804272b", "node_id": "C_kwDOANBUbNoAKGRiOGQ5NGEwNTcwZGMxZjNkZTEwYzllYjlmZTZlOTFkZjgwNDI3MmI", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-01-11T19:24:59Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-01-11T19:24:59Z"}, "message": "ira: Fix old-reload targets [PR103974]\n\nThe new IRA heuristics would need more work on old-reload targets,\nsince flattening needs to be able to undo the cost propagation.\nIt's doable, but hardly seems worth it.\n\nThis patch therefore makes all the new calls to\nira_subloop_allocnos_can_differ_p return false if !ira_use_lra_p.\nThe color_pass code that predated the new function (and that was\nthe source of ira_subloop_allocnos_can_differ_p) continues to\nbehave as before.\n\nIt's a hack, but at least it has the advantage that the new parameter\nwould become obviously unused if reload and (!)ira_use_lra_p were\nremoved.  The hack should therefore disappear alongside reload.\n\ngcc/\n\tPR rtl-optimization/103974\n\t* ira-int.h (ira_subloop_allocnos_can_differ_p): Take an\n\textra argument, default true, that says whether old-reload\n\ttargets should be excluded.\n\t* ira-color.c (color_pass): Pass false.", "tree": {"sha": "e0feb9c63c02498aa510c36e85ce7bb40238901a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0feb9c63c02498aa510c36e85ce7bb40238901a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db8d94a0570dc1f3de10c9eb9fe6e91df804272b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8d94a0570dc1f3de10c9eb9fe6e91df804272b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8d94a0570dc1f3de10c9eb9fe6e91df804272b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8d94a0570dc1f3de10c9eb9fe6e91df804272b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b35f02ed599a70cce752e3cb544a7c9f808fce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b35f02ed599a70cce752e3cb544a7c9f808fce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b35f02ed599a70cce752e3cb544a7c9f808fce8"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "59d978fe9b3539bcdc805bb37d394daf51fa0f04", "filename": "gcc/ira-color.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8d94a0570dc1f3de10c9eb9fe6e91df804272b/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8d94a0570dc1f3de10c9eb9fe6e91df804272b/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=db8d94a0570dc1f3de10c9eb9fe6e91df804272b", "patch": "@@ -3664,7 +3664,8 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n \t  ira_assert (bitmap_bit_p (subloop_node->all_allocnos,\n \t\t\t\t    ALLOCNO_NUM (subloop_allocno)));\n \t  if (ira_single_region_allocno_p (a, subloop_allocno)\n-\t      || !ira_subloop_allocnos_can_differ_p (a, hard_regno >= 0))\n+\t      || !ira_subloop_allocnos_can_differ_p (a, hard_regno >= 0,\n+\t\t\t\t\t\t     false))\n \t    {\n \t      gcc_assert (!ALLOCNO_MIGHT_CONFLICT_WITH_PARENT_P\n \t\t\t  (subloop_allocno));"}, {"sha": "e80fdeb03282976e1b2bb580179c70546f5389dc", "filename": "gcc/ira-int.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8d94a0570dc1f3de10c9eb9fe6e91df804272b/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8d94a0570dc1f3de10c9eb9fe6e91df804272b/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=db8d94a0570dc1f3de10c9eb9fe6e91df804272b", "patch": "@@ -1607,10 +1607,16 @@ ira_loop_border_costs::move_between_loops_cost () const\n \n /* Return true if subloops that contain allocnos for A's register can\n    use a different assignment from A.  ALLOCATED_P is true for the case\n-   in which allocation succeeded for A.  */\n+   in which allocation succeeded for A.  EXCLUDE_OLD_RELOAD is true if\n+   we should always return false for non-LRA targets.  (This is a hack\n+   and should be removed along with old reload.)  */\n inline bool\n-ira_subloop_allocnos_can_differ_p (ira_allocno_t a, bool allocated_p = true)\n+ira_subloop_allocnos_can_differ_p (ira_allocno_t a, bool allocated_p = true,\n+\t\t\t\t   bool exclude_old_reload = true)\n {\n+  if (exclude_old_reload && !ira_use_lra_p)\n+    return false;\n+\n   auto regno = ALLOCNO_REGNO (a);\n \n   if (pic_offset_table_rtx != NULL"}]}