{"sha": "d5d23425d06d209ff5366e7d0768c12b8d6419b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkMjM0MjVkMDZkMjA5ZmY1MzY2ZTdkMDc2OGMxMmI4ZDY0MTliNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-28T12:59:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-28T12:59:07Z"}, "message": "Filename change in latest g77 update.\n\nFrom-SVN: r14988", "tree": {"sha": "681e2643415d6e449d5539ed0bd49d3c46d59f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/681e2643415d6e449d5539ed0bd49d3c46d59f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d23425d06d209ff5366e7d0768c12b8d6419b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d23425d06d209ff5366e7d0768c12b8d6419b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d23425d06d209ff5366e7d0768c12b8d6419b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d23425d06d209ff5366e7d0768c12b8d6419b5/comments", "author": null, "committer": null, "parents": [{"sha": "e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482"}], "stats": {"total": 2375, "additions": 2375, "deletions": 0}, "files": [{"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/f/intdoc.h", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Ff%2Fintdoc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5eb27e51fe9f28375a7ae5a8a9ed5719968b482/gcc%2Ff%2Fintdoc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.h?ref=e5eb27e51fe9f28375a7ae5a8a9ed5719968b482"}, {"sha": "eabb2e7e4e644a58171149bc545cfc9e0a9b203e", "filename": "gcc/f/intdoc.in", "status": "added", "additions": 2375, "deletions": 0, "changes": 2375, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d23425d06d209ff5366e7d0768c12b8d6419b5/gcc%2Ff%2Fintdoc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d23425d06d209ff5366e7d0768c12b8d6419b5/gcc%2Ff%2Fintdoc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.in?ref=d5d23425d06d209ff5366e7d0768c12b8d6419b5", "patch": "@@ -0,0 +1,2375 @@\n+/* Copyright (C) 1997 Free Software Foundation, Inc.\n+ * This is part of the G77 manual.\n+ * For copying conditions, see the file g77.texi. */\n+\n+/* This is the file containing the verbage for the\n+   intrinsics.  It consists of a data base built up\n+   via DEFDOC macros of the form:\n+\n+   DEFDOC (IMP, SUMMARY, DESCRIPTION)\n+\n+   IMP is the implementation keyword used in the intrin module.\n+   SUMMARY is the short summary to go in the \"* Menu:\" section\n+   of the Info document.  DESCRIPTION is the longer description\n+   to go in the documentation itself.\n+\n+   Note that IMP is leveraged across multiple intrinsic names.\n+\n+   To make for more accurate and consistent documentation,\n+   the translation made by intdoc.c of the text in SUMMARY\n+   and DESCRIPTION includes the special sequence\n+\n+   @ARGNO@\n+\n+   where ARGNO is a series of digits forming a number that\n+   is substituted by intdoc.c as follows:\n+\n+   0     The initial-caps form of the intrinsic name (e.g. Float).\n+   1-98  The initial-caps form of the ARGNO'th argument.\n+   99    (SUMMARY only) a newline plus the appropriate # of spaces.\n+\n+   Hope this info is enough to encourage people to feel free to\n+   add documentation to this file!\n+\n+*/\n+\n+#define ARCHAIC(upper,mixed) \\\n+  \"Archaic form of @code{\" #upper \"()} that is specific\\n\\\n+to one type for @var{@1@}.\\n\\\n+@xref{\" #mixed \" Intrinsic}.\\n\"\n+\n+#define ARCHAIC_2nd(upper,mixed) \\\n+  \"Archaic form of @code{\" #upper \"()} that is specific\\n\\\n+to one type for @var{@2@}.\\n\\\n+@xref{\" #mixed \" Intrinsic}.\\n\"\n+\n+#define ARCHAIC_2(upper,mixed) \\\n+  \"Archaic form of @code{\" #upper \"()} that is specific\\n\\\n+to one type for @var{@1@} and @var{@2@}.\\n\\\n+@xref{\" #mixed \" Intrinsic}.\\n\"\n+\n+DEFDOC (ABS, \"Absolute value.\", \"\\\n+Returns the absolute value of @var{@1@}.\n+\n+If @var{@1@} is type @code{COMPLEX}, the absolute\n+value is computed as:\n+\n+@example\n+SQRT(REALPART(@var{@1@})**2, IMAGPART(@var{@1@})**2)\n+@end example\n+\n+@noindent\n+Otherwise, it is computed by negating the @var{@1@} if\n+it is negative, or returning @var{@1@}.\n+\n+@xref{Sign Intrinsic}, for how to explicitly\n+compute the positive or negative form of the absolute\n+value of an expression.\n+\")\n+\n+DEFDOC (CABS, \"Absolute value (archaic).\", ARCHAIC (ABS, Abs))\n+\n+DEFDOC (DABS, \"Absolute value (archaic).\", ARCHAIC (ABS, Abs))\n+\n+DEFDOC (IABS, \"Absolute value (archaic).\", ARCHAIC (ABS, Abs))\n+\n+DEFDOC (CDABS, \"Absolute value (archaic).\", ARCHAIC (ABS, Abs))\n+\n+DEFDOC (ACHAR, \"ASCII character from code.\", \"\\\n+Returns the ASCII character corresponding to the\n+code specified by @var{@1@}.\n+\n+@xref{IAChar Intrinsic}, for the inverse of this function.\n+\n+@xref{Char Intrinsic}, for the function corresponding\n+to the system's native character set.\n+\")\n+\n+DEFDOC (IACHAR, \"ASCII code for character.\", \"\\\n+Returns the code for the ASCII character in the\n+first character position of @var{@1@}.\n+\n+@xref{AChar Intrinsic}, for the inverse of this function.\n+\n+@xref{IChar Intrinsic}, for the function corresponding\n+to the system's native character set.\n+\")\n+\n+DEFDOC (CHAR, \"Character from code.\", \"\\\n+Returns the character corresponding to the\n+code specified by @var{@1@}, using the system's\n+native character set.\n+\n+Because the system's native character set is used,\n+the correspondence between character and their codes\n+is not necessarily the same between GNU Fortran\n+implementations.\n+\n+Note that no intrinsic exists to convert a numerical\n+value to a printable character string.\n+For example, there is no intrinsic that, given\n+an @code{INTEGER} or @code{REAL} argument with the\n+value @samp{154}, returns the @code{CHARACTER}\n+result @samp{'154'}.\n+\n+Instead, you can use internal-file I/O to do this kind\n+of conversion.\n+For example:\n+\n+@smallexample\n+INTEGER VALUE\n+CHARACTER*10 STRING\n+VALUE = 154\n+WRITE (STRING, '(I10)'), VALUE\n+PRINT *, STRING\n+END\n+@end smallexample\n+\n+The above program, when run, prints:\n+\n+@smallexample\n+        154\n+@end smallexample\n+\n+@xref{IChar Intrinsic}, for the inverse of the @code{@0@} function.\n+\n+@xref{AChar Intrinsic}, for the function corresponding\n+to the ASCII character set.\n+\")\n+\n+DEFDOC (ICHAR, \"Code for character.\", \"\\\n+Returns the code for the character in the\n+first character position of @var{@1@}.\n+\n+Because the system's native character set is used,\n+the correspondence between character and their codes\n+is not necessarily the same between GNU Fortran\n+implementations.\n+\n+Note that no intrinsic exists to convert a printable\n+character string to a numerical value.\n+For example, there is no intrinsic that, given\n+the @code{CHARACTER} value @samp{'154'}, returns an\n+@code{INTEGER} or @code{REAL} value with the value @samp{154}.\n+\n+Instead, you can use internal-file I/O to do this kind\n+of conversion.\n+For example:\n+\n+@smallexample\n+INTEGER VALUE\n+CHARACTER*10 STRING\n+STRING = '154'\n+READ (STRING, '(I10)'), VALUE\n+PRINT *, VALUE\n+END\n+@end smallexample\n+\n+The above program, when run, prints:\n+\n+@smallexample\n+ 154\n+@end smallexample\n+\n+@xref{Char Intrinsic}, for the inverse of the @code{@0@} function.\n+\n+@xref{IAChar Intrinsic}, for the function corresponding\n+to the ASCII character set.\n+\")\n+\n+DEFDOC (ACOS, \"Arc cosine.\", \"\\\n+Returns the arc-cosine (inverse cosine) of @var{@1@}\n+in radians.\n+\n+@xref{Cos Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (DACOS, \"Arc cosine (archaic).\", ARCHAIC (ACOS, ACos))\n+\n+DEFDOC (AIMAG, \"Convert/extract imaginary part of complex.\", \"\\\n+Returns the (possibly converted) imaginary part of @var{@1@}.\n+\n+Use of @code{@0@()} with an argument of a type\n+other than @code{COMPLEX(KIND=1)} is restricted to the following case:\n+\n+@example\n+REAL(AIMAG(@1@))\n+@end example\n+\n+@noindent\n+This expression converts the imaginary part of @1@ to\n+@code{REAL(KIND=1)}.\n+\n+@xref{REAL() and AIMAG() of Complex}, for more information.\n+\")\n+\n+DEFDOC (DIMAG, \"Convert/extract imaginary part of complex (archaic).\", ARCHAIC (AIMAG, AImag))\n+\n+DEFDOC (AINT, \"Truncate to whole number.\", \"\\\n+Returns @var{@1@} with the fractional portion of its\n+magnitude truncated and its sign preserved.\n+(Also called ``truncation towards zero''.)\n+\n+@xref{ANInt Intrinsic}, for how to round to nearest\n+whole number.\n+\n+@xref{Int Intrinsic}, for how to truncate and then convert\n+number to @code{INTEGER}.\n+\")\n+\n+DEFDOC (DINT, \"Truncate to whole number (archaic).\", ARCHAIC (AINT, AInt))\n+\n+DEFDOC (INT, \"Convert to @code{INTEGER} value truncated@99@to whole number.\", \"\\\n+Returns @var{@1@} with the fractional portion of its\n+magnitude truncated and its sign preserved, converted\n+to type @code{INTEGER(KIND=1)}.\n+\n+If @var{@1@} is type @code{COMPLEX}, its real part is\n+truncated and converted, and its imaginary part is disregarded.\n+\n+@xref{NInt Intrinsic}, for how to convert, rounded to nearest\n+whole number.\n+\n+@xref{AInt Intrinsic}, for how to truncate to whole number\n+without converting.\n+\")\n+\n+DEFDOC (IDINT, \"Convert to @code{INTEGER} value truncated@99@to whole number (archaic).\", ARCHAIC (INT, Int))\n+\n+DEFDOC (ANINT, \"Round to nearest whole number.\", \"\\\n+Returns @var{@1@} with the fractional portion of its\n+magnitude eliminated by rounding to the nearest whole\n+number and with its sign preserved.\n+\n+A fractional portion exactly equal to\n+@samp{.5} is rounded to the whole number that\n+is larger in magnitude.\n+(Also called ``Fortran round''.)\n+\n+@xref{AInt Intrinsic}, for how to truncate to\n+whole number.\n+\n+@xref{NInt Intrinsic}, for how to round and then convert\n+number to @code{INTEGER}.\n+\")\n+\n+DEFDOC (DNINT, \"Round to nearest whole number (archaic).\", ARCHAIC (ANINT, ANInt))\n+\n+DEFDOC (NINT, \"Convert to @code{INTEGER} value rounded@99@to nearest whole number.\", \"\\\n+Returns @var{@1@} with the fractional portion of its\n+magnitude eliminated by rounding to the nearest whole\n+number and with its sign preserved, converted\n+to type @code{INTEGER(KIND=1)}.\n+\n+If @var{@1@} is type @code{COMPLEX}, its real part is\n+rounded and converted.\n+\n+A fractional portion exactly equal to\n+@samp{.5} is rounded to the whole number that\n+is larger in magnitude.\n+(Also called ``Fortran round''.)\n+\n+@xref{Int Intrinsic}, for how to convert, truncate to\n+whole number.\n+\n+@xref{ANInt Intrinsic}, for how to round to nearest whole number\n+without converting.\n+\")\n+\n+DEFDOC (IDNINT, \"Convert to @code{INTEGER} value rounded@99@to nearest whole number (archaic).\", ARCHAIC (NINT, NInt))\n+\n+DEFDOC (LOG, \"Natural logarithm.\", \"\\\n+Returns the natural logarithm of @var{@1@}, which must\n+be greater than zero or, if type @code{COMPLEX}, must not\n+be zero.\n+\n+@xref{Exp Intrinsic}, for the inverse of this function.\n+\n+@xref{Log10 Intrinsic}, for the base-10 logarithm function.\n+\")\n+\n+DEFDOC (ALOG, \"Natural logarithm (archaic).\", ARCHAIC (LOG, Log))\n+\n+DEFDOC (CLOG, \"Natural logarithm (archaic).\", ARCHAIC (LOG, Log))\n+\n+DEFDOC (DLOG, \"Natural logarithm (archaic).\", ARCHAIC (LOG, Log))\n+\n+DEFDOC (CDLOG, \"Natural logarithm (archaic).\", ARCHAIC (LOG, Log))\n+\n+DEFDOC (LOG10, \"Natural logarithm.\", \"\\\n+Returns the natural logarithm of @var{@1@}, which must\n+be greater than zero or, if type @code{COMPLEX}, must not\n+be zero.\n+\n+The inverse of this function is @samp{10. ** LOG10(@var{@1@})}.\n+\n+@xref{Log Intrinsic}, for the natural logarithm function.\n+\")\n+\n+DEFDOC (ALOG10, \"Natural logarithm (archaic).\", ARCHAIC (LOG10, Log10))\n+\n+DEFDOC (DLOG10, \"Natural logarithm (archaic).\", ARCHAIC (LOG10, Log10))\n+\n+DEFDOC (MAX, \"Maximum value.\", \"\\\n+Returns the argument with the largest value.\n+\n+@xref{Min Intrinsic}, for the opposite function.\n+\")\n+\n+DEFDOC (AMAX0, \"Maximum value (archaic).\", \"\\\n+Archaic form of @code{MAX()} that is specific\n+to one type for @var{@1@} and a different return type.\n+@xref{Max Intrinsic}.\n+\")\n+\n+DEFDOC (AMAX1, \"Maximum value (archaic).\", ARCHAIC (MAX, Max))\n+\n+DEFDOC (DMAX1, \"Maximum value (archaic).\", ARCHAIC (MAX, Max))\n+\n+DEFDOC (MAX0, \"Maximum value (archaic).\", ARCHAIC (MAX, Max))\n+\n+DEFDOC (MAX1, \"Maximum value (archaic).\", \"\\\n+Archaic form of @code{MAX()} that is specific\n+to one type for @var{@1@} and a different return type.\n+@xref{Max Intrinsic}.\n+\")\n+\n+DEFDOC (MIN, \"Minimum value.\", \"\\\n+Returns the argument with the smallest value.\n+\n+@xref{Max Intrinsic}, for the opposite function.\n+\")\n+\n+DEFDOC (AMIN0, \"Minimum value (archaic).\", \"\\\n+Archaic form of @code{MIN()} that is specific\n+to one type for @var{@1@} and a different return type.\n+@xref{Min Intrinsic}.\n+\")\n+\n+DEFDOC (AMIN1, \"Minimum value (archaic).\", ARCHAIC (MIN, Min))\n+\n+DEFDOC (DMIN1, \"Minimum value (archaic).\", ARCHAIC (MIN, Min))\n+\n+DEFDOC (MIN0, \"Minimum value (archaic).\", ARCHAIC (MIN, Min))\n+\n+DEFDOC (MIN1, \"Minimum value (archaic).\", \"\\\n+Archaic form of @code{MIN()} that is specific\n+to one type for @var{@1@} and a different return type.\n+@xref{Min Intrinsic}.\n+\")\n+\n+DEFDOC (MOD, \"Remainder.\", \"\\\n+Returns remainder calculated as:\n+\n+@smallexample\n+@var{@1@} - (INT(@var{@1@} / @var{@2@}) * @var{@2@})\n+@end smallexample\n+\n+@var{@2@} must not be zero.\n+\")\n+\n+DEFDOC (AMOD, \"Remainder (archaic).\", ARCHAIC (MOD, Mod))\n+\n+DEFDOC (DMOD, \"Remainder (archaic).\", ARCHAIC (MOD, Mod))\n+\n+DEFDOC (AND, \"Boolean AND.\", \"\\\n+Returns value resulting from boolean AND of\n+pair of bits in each of @var{@1@} and @var{@2@}.\n+\")\n+\n+DEFDOC (IAND, \"Boolean AND.\", \"\\\n+Returns value resulting from boolean AND of\n+pair of bits in each of @var{@1@} and @var{@2@}.\n+\")\n+\n+DEFDOC (OR, \"Boolean OR.\", \"\\\n+Returns value resulting from boolean OR of\n+pair of bits in each of @var{@1@} and @var{@2@}.\n+\")\n+\n+DEFDOC (IOR, \"Boolean OR.\", \"\\\n+Returns value resulting from boolean OR of\n+pair of bits in each of @var{@1@} and @var{@2@}.\n+\")\n+\n+DEFDOC (XOR, \"Boolean XOR.\", \"\\\n+Returns value resulting from boolean exclusive-OR of\n+pair of bits in each of @var{@1@} and @var{@2@}.\n+\")\n+\n+DEFDOC (IEOR, \"Boolean XOR.\", \"\\\n+Returns value resulting from boolean exclusive-OR of\n+pair of bits in each of @var{@1@} and @var{@2@}.\n+\")\n+\n+DEFDOC (NOT, \"Boolean NOT.\", \"\\\n+Returns value resulting from boolean NOT of each bit\n+in @var{@1@}.\n+\")\n+\n+DEFDOC (ASIN, \"Arc sine.\", \"\\\n+Returns the arc-sine (inverse sine) of @var{@1@}\n+in radians.\n+\n+@xref{Sin Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (DASIN, \"Arc sine (archaic).\", ARCHAIC (ASIN, ASin))\n+\n+DEFDOC (ATAN, \"Arc tangent.\", \"\\\n+Returns the arc-tangent (inverse tangent) of @var{@1@}\n+in radians.\n+\n+@xref{Tan Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (DATAN, \"Arc tangent (archaic).\", ARCHAIC (ATAN, ATan))\n+\n+DEFDOC (ATAN2, \"Arc tangent.\", \"\\\n+Returns the arc-tangent (inverse tangent) of the complex\n+number (@var{@1@}, @var{@2@}) in radians.\n+\n+@xref{Tan Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (DATAN2, \"Arc tangent (archaic).\", ARCHAIC_2 (ATAN2, ATan2))\n+\n+DEFDOC (BIT_SIZE, \"Number of bits in argument's type.\", \"\\\n+Returns the number of bits (integer precision plus sign bit)\n+represented by the type for @var{@1@}.\n+\n+@xref{BTest Intrinsic}, for how to test the value of a\n+bit in a variable or array.\n+\n+@xref{IBSet Intrinsic}, for how to set a bit in a variable to 1.\n+\n+@xref{IBClr Intrinsic}, for how to set a bit in a variable to 0.\n+\n+\")\n+\n+DEFDOC (BTEST, \"Test bit.\", \"\\\n+Returns @code{.TRUE.} if bit @var{@2@} in @var{@1@} is\n+1, @code{.FALSE.} otherwise.\n+\n+(Bit 0 is the low-order (rightmost) bit, adding the value \n+@ifinfo\n+2**0,\n+@end ifinfo\n+@iftex\n+@tex\n+$2^0$,\n+@end tex\n+@end iftex\n+or 1,\n+to the number if set to 1;\n+bit 1 is the next-higher-order bit, adding \n+@ifinfo\n+2**1,\n+@end ifinfo\n+@iftex\n+@tex\n+$2^1$,\n+@end tex\n+@end iftex\n+or 2;\n+bit 2 adds \n+@ifinfo\n+2**2,\n+@end ifinfo\n+@iftex\n+@tex\n+$2^2$,\n+@end tex\n+@end iftex\n+or 4; and so on.)\n+\n+@xref{Bit_Size Intrinsic}, for how to obtain the number of bits\n+in a type.\n+The leftmost bit of @var{@1@} is @samp{BIT_SIZE(@var{@1@}-1)}.\n+\")\n+\n+DEFDOC (CMPLX, \"Construct @code{COMPLEX(KIND=1)} value.\", \"\\\n+If @var{@1@} is not type @code{COMPLEX},\n+constructs a value of type @code{COMPLEX(KIND=1)} from the\n+real and imaginary values specified by @var{@1@} and\n+@var{@2@}, respectively.\n+If @var{@2@} is omitted, @samp{0.} is assumed.\n+\n+If @var{@1@} is type @code{COMPLEX},\n+converts it to type @code{COMPLEX(KIND=1)}.\n+\n+@xref{Complex Intrinsic}, for information on easily constructing\n+a @code{COMPLEX} value of arbitrary precision from @code{REAL}\n+arguments.\n+\")\n+\n+DEFDOC (DCMPLX, \"Construct @code{COMPLEX(KIND=2)} value.\", \"\\\n+If @var{@1@} is not type @code{COMPLEX},\n+constructs a value of type @code{COMPLEX(KIND=2)} from the\n+real and imaginary values specified by @var{@1@} and\n+@var{@2@}, respectively.\n+If @var{@2@} is omitted, @samp{0D0} is assumed.\n+\n+If @var{@1@} is type @code{COMPLEX},\n+converts it to type @code{COMPLEX(KIND=2)}.\n+\n+Although this intrinsic is not standard Fortran,\n+it is a popular extension offered by many compilers\n+that support @code{DOUBLE COMPLEX}, since it offers\n+the easiest way to convert to @code{DOUBLE COMPLEX}\n+without using Fortran 90 features (such as the @samp{KIND=}\n+argument to the @code{CMPLX()} intrinsic).\n+\n+(@samp{CMPLX(0D0, 0D0)} returns a single-precision\n+@code{COMPLEX} result, as required by standard FORTRAN 77.\n+That's why so many compilers provide @code{DCMPLX()}, since\n+@samp{DCMPLX(0D0, 0D0)} returns a @code{DOUBLE COMPLEX}\n+result.\n+Still, @code{DCMPLX()} converts even @code{REAL*16} arguments\n+to their @code{REAL*8} equivalents in most dialects of\n+Fortran, so neither it nor @code{CMPLX()} allow easy\n+construction of arbitrary-precision values without\n+potentially forcing a conversion involving extending or\n+reducing precision.\n+GNU Fortran provides such an intrinsic, called @code{COMPLEX()}.)\n+\n+@xref{Complex Intrinsic}, for information on easily constructing\n+a @code{COMPLEX} value of arbitrary precision from @code{REAL}\n+arguments.\n+\")\n+\n+DEFDOC (CONJG, \"Complex conjugate.\", \"\\\n+Returns the complex conjugate:\n+\n+@example\n+COMPLEX(REALPART(@var{@1@}), -IMAGPART(@var{@1@}))\n+@end example\n+\")\n+\n+DEFDOC (DCONJG, \"Complex conjugate (archaic).\", ARCHAIC (CONJG, Conjg))\n+\n+DEFDOC (COS, \"Cosine.\", \"\\\n+Returns the cosine of @var{@1@}, an angle measured\n+in radians.\n+\n+@xref{ACos Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (CCOS, \"Cosine (archaic).\", ARCHAIC (COS, Cos))\n+\n+DEFDOC (DCOS, \"Cosine (archaic).\", ARCHAIC (COS, Cos))\n+\n+DEFDOC (CDCOS, \"Cosine (archaic).\", ARCHAIC (COS, Cos))\n+\n+DEFDOC (COSH, \"Hyperbolic cosine.\", \"\\\n+Returns the hyperbolic cosine of @var{@1@}.\n+\")\n+\n+DEFDOC (DCOSH, \"Hyperbolic cosine (archaic).\", ARCHAIC (COSH, CosH))\n+\n+DEFDOC (SQRT, \"Square root.\", \"\\\n+Returns the square root of @var{@1@}, which must\n+not be negative.\n+\n+To calculate and represent the square root of a negative\n+number, complex arithmetic must be used.\n+For example, @samp{SQRT(COMPLEX(@var{@1@}))}.\n+\n+The inverse of this function is @samp{SQRT(@var{@1@}) * SQRT(@var{@1@})}.\n+\")\n+\n+DEFDOC (CSQRT, \"Square root (archaic).\", ARCHAIC (SQRT, SqRt))\n+\n+DEFDOC (DSQRT, \"Square root (archaic).\", ARCHAIC (SQRT, SqRt))\n+\n+DEFDOC (CDSQRT, \"Square root (archaic).\", ARCHAIC (SQRT, SqRt))\n+\n+DEFDOC (DBLE, \"Convert to double precision.\", \"\\\n+Returns @var{@1@} converted to double precision\n+(@code{REAL(KIND=2)}).\n+If @var{@1@} is @code{COMPLEX}, the real part of\n+@var{@1@} is used for the conversion\n+and the imaginary part disregarded.\n+\n+@xref{Sngl Intrinsic}, for the function that converts\n+to single precision.\n+\n+@xref{Int Intrinsic}, for the function that converts\n+to @code{INTEGER}.\n+\n+@xref{Complex Intrinsic}, for the function that converts\n+to @code{COMPLEX}.\n+\")\n+\n+DEFDOC (DIM, \"Difference magnitude (non-negative subtract).\", \"\\\n+Returns @samp{@var{@1@}-@var{@2@}} if @var{@1@} is greater than\n+@var{@2@}; otherwise returns zero.\n+\")\n+\n+DEFDOC (DDIM, \"Difference magnitude (archaic).\", ARCHAIC_2 (DIM, DiM))\n+DEFDOC (IDIM, \"Difference magnitude (archaic).\", ARCHAIC_2 (DIM, DiM))\n+\n+DEFDOC (DPROD, \"Double-precision product.\", \"\\\n+Returns @samp{DBLE(@var{@1@})*DBLE(@var{@2@})}.\n+\")\n+\n+DEFDOC (EXP, \"Exponential.\", \"\\\n+Returns @samp{@var{e}**@var{@1@}}, where\n+@var{e} is approximately 2.7182818.\n+\n+@xref{Log Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (CEXP, \"Exponential (archaic).\", ARCHAIC (EXP, Exp))\n+\n+DEFDOC (DEXP, \"Exponential (archaic).\", ARCHAIC (EXP, Exp))\n+\n+DEFDOC (CDEXP, \"Exponential (archaic).\", ARCHAIC (EXP, Exp))\n+\n+DEFDOC (FLOAT, \"Conversion (archaic).\", ARCHAIC (REAL, Real))\n+DEFDOC (DFLOAT, \"Conversion (archaic).\", ARCHAIC (REAL, Real))\n+\n+DEFDOC (IFIX, \"Conversion (archaic).\", ARCHAIC (INT, Int))\n+\n+DEFDOC (LONG, \"Conversion to @code{INTEGER(KIND=1)} (archaic).\", \"\\\n+Archaic form of @code{INT()} that is specific\n+to one type for @var{@1@}.\n+@xref{Int Intrinsic}.\n+\n+The precise meaning of this intrinsic might change\n+in a future version of the GNU Fortran language,\n+as more is learned about how it is used.\n+\")\n+\n+DEFDOC (SHORT, \"Convert to @code{INTEGER(KIND=6)} value@99@truncated to whole number.\", \"\\\n+Returns @var{@1@} with the fractional portion of its\n+magnitude truncated and its sign preserved, converted\n+to type @code{INTEGER(KIND=6)}.\n+\n+If @var{@1@} is type @code{COMPLEX}, its real part\n+is truncated and converted, and its imaginary part is disgregarded.\n+\n+@xref{Int Intrinsic}.\n+\n+The precise meaning of this intrinsic might change\n+in a future version of the GNU Fortran language,\n+as more is learned about how it is used.\n+\")\n+\n+DEFDOC (INT2, \"Convert to @code{INTEGER(KIND=6)} value@99@truncated to whole number.\", \"\\\n+Returns @var{@1@} with the fractional portion of its\n+magnitude truncated and its sign preserved, converted\n+to type @code{INTEGER(KIND=6)}.\n+\n+If @var{@1@} is type @code{COMPLEX}, its real part\n+is truncated and converted, and its imaginary part is disgregarded.\n+\n+@xref{Int Intrinsic}.\n+\n+The precise meaning of this intrinsic might change\n+in a future version of the GNU Fortran language,\n+as more is learned about how it is used.\n+\")\n+\n+DEFDOC (INT8, \"Convert to @code{INTEGER(KIND=2)} value@99@truncated to whole number.\", \"\\\n+Returns @var{@1@} with the fractional portion of its\n+magnitude truncated and its sign preserved, converted\n+to type @code{INTEGER(KIND=2)}.\n+\n+If @var{@1@} is type @code{COMPLEX}, its real part\n+is truncated and converted, and its imaginary part is disgregarded.\n+\n+@xref{Int Intrinsic}.\n+\n+The precise meaning of this intrinsic might change\n+in a future version of the GNU Fortran language,\n+as more is learned about how it is used.\n+\")\n+\n+DEFDOC (LEN, \"Length of character entity.\", \"\\\n+Returns the length of @var{@1@}.\n+\n+If @var{@1@} is an array, the length of an element\n+of @var{@1@} is returned.\n+\n+Note that @var{@1@} need not be defined when this\n+intrinsic is invoked, since only the length, not\n+the content, of @var{@1@} is needed.\n+\n+@xref{Bit_Size Intrinsic}, for the function that determines\n+the size of its argument in bits.\n+\")\n+\n+DEFDOC (TAN, \"Tangent.\", \"\\\n+Returns the tangent of @var{@1@}, an angle measured\n+in radians.\n+\n+@xref{ATan Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (DTAN, \"Tangent (archaic).\", ARCHAIC (TAN, Tan))\n+\n+DEFDOC (TANH, \"Hyperbolic tangent.\", \"\\\n+Returns the hyperbolic tangent of @var{@1@}.\n+\")\n+\n+DEFDOC (DTANH, \"Hyperbolic tangent (archaic).\", ARCHAIC (TANH, TanH))\n+\n+DEFDOC (SNGL, \"Convert (archaic).\", ARCHAIC (REAL, Real))\n+\n+DEFDOC (SIN, \"Sine.\", \"\\\n+Returns the sine of @var{@1@}, an angle measured\n+in radians.\n+\n+@xref{ASin Intrinsic}, for the inverse of this function.\n+\")\n+\n+DEFDOC (CSIN, \"Sine (archaic).\", ARCHAIC (SIN, Sin))\n+\n+DEFDOC (DSIN, \"Sine (archaic).\", ARCHAIC (SIN, Sin))\n+\n+DEFDOC (CDSIN, \"Sine (archaic).\", ARCHAIC (SIN, Sin))\n+\n+DEFDOC (SINH, \"Hyperbolic sine.\", \"\\\n+Returns the hyperbolic sine of @var{@1@}.\n+\")\n+\n+DEFDOC (DSINH, \"Hyperbolic sine (archaic).\", ARCHAIC (SINH, SinH))\n+\n+DEFDOC (LSHIFT, \"Left-shift bits.\", \"\\\n+Returns @var{@1@} shifted to the left\n+@var{@2@} bits.\n+\n+Although similar to the expression\n+@samp{@var{@1@}*(2**@var{@2@})}, there\n+are important differences.\n+For example, the sign of the result is\n+not necessarily the same as the sign of\n+@var{@1@}.\n+\n+Currently this intrinsic is defined assuming\n+the underlying representation of @var{@1@}\n+is as a two's-complement integer.\n+It is unclear at this point whether that\n+definition will apply when a different\n+representation is involved.\n+\n+@xref{LShift Intrinsic}, for the inverse of this function.\n+\n+@xref{IShft Intrinsic}, for information\n+on a more widely available left-shifting\n+intrinsic that is also more precisely defined.\n+\")\n+\n+DEFDOC (RSHIFT, \"Right-shift bits.\", \"\\\n+Returns @var{@1@} shifted to the right\n+@var{@2@} bits.\n+\n+Although similar to the expression\n+@samp{@var{@1@}/(2**@var{@2@})}, there\n+are important differences.\n+For example, the sign of the result is\n+undefined.\n+\n+Currently this intrinsic is defined assuming\n+the underlying representation of @var{@1@}\n+is as a two's-complement integer.\n+It is unclear at this point whether that\n+definition will apply when a different\n+representation is involved.\n+\n+@xref{RShift Intrinsic}, for the inverse of this function.\n+\n+@xref{IShft Intrinsic}, for information\n+on a more widely available right-shifting\n+intrinsic that is also more precisely defined.\n+\")\n+\n+DEFDOC (LGE, \"Lexically greater than or equal.\", \"\\\n+Returns @samp{.TRUE.} if @samp{@var{@1@}.GE.@var{@2@}},\n+@samp{.FALSE.} otherwise.\n+@var{@1@} and @var{@2@} are interpreted as containing\n+ASCII character codes.\n+If either value contains a character not in the ASCII\n+character set, the result is processor dependent.\n+\n+If the @var{@1@} and @var{@2@} are not the same length,\n+the shorter is compared as if spaces were appended to\n+it to form a value that has the same length as the longer.\n+\n+The lexical comparison intrinsics @code{LGe}, @code{LGt},\n+@code{LLe}, and @code{LLt} differ from the corresponding\n+intrinsic operators @code{.GE.}, @code{.GT.},\n+@code{.LE.}, @code{.LT.}.\n+Because the ASCII collating sequence is assumed,\n+the following expressions always return @samp{.TRUE.}:\n+\n+@smallexample\n+LGE ('0', ' ')\n+LGE ('A', '0')\n+LGE ('a', 'A')\n+@end smallexample\n+\n+The following related expressions do @emph{not} always\n+return @samp{.TRUE.}, as they are not necessarily evaluated\n+assuming the arguments use ASCII encoding:\n+\n+@smallexample\n+'0' .GE. ' '\n+'A' .GE. '0'\n+'a' .GE. 'A'\n+@end smallexample\n+\n+The same difference exists\n+between @code{LGt} and @code{.GT.};\n+between @code{LLe} and @code{.LE.}; and\n+between @code{LLt} and @code{.LT.}.\n+\")\n+\n+DEFDOC (LGT, \"Lexically greater than.\", \"\\\n+Returns @samp{.TRUE.} if @samp{@var{@1@}.GT.@var{@2@}},\n+@samp{.FALSE.} otherwise.\n+@var{@1@} and @var{@2@} are interpreted as containing\n+ASCII character codes.\n+If either value contains a character not in the ASCII\n+character set, the result is processor dependent.\n+\n+If the @var{@1@} and @var{@2@} are not the same length,\n+the shorter is compared as if spaces were appended to\n+it to form a value that has the same length as the longer.\n+\n+@xref{LGe Intrinsic}, for information on the distinction\n+between the @code{@0@} intrinsic and the @code{.GT.}\n+operator.\n+\")\n+\n+DEFDOC (LLE, \"Lexically less than or equal.\", \"\\\n+Returns @samp{.TRUE.} if @samp{@var{@1@}.LE.@var{@2@}},\n+@samp{.FALSE.} otherwise.\n+@var{@1@} and @var{@2@} are interpreted as containing\n+ASCII character codes.\n+If either value contains a character not in the ASCII\n+character set, the result is processor dependent.\n+\n+If the @var{@1@} and @var{@2@} are not the same length,\n+the shorter is compared as if spaces were appended to\n+it to form a value that has the same length as the longer.\n+\n+@xref{LGe Intrinsic}, for information on the distinction\n+between the @code{@0@} intrinsic and the @code{.LE.}\n+operator.\n+\")\n+\n+DEFDOC (LLT, \"Lexically less than.\", \"\\\n+Returns @samp{.TRUE.} if @samp{@var{@1@}.LT.@var{@2@}},\n+@samp{.FALSE.} otherwise.\n+@var{@1@} and @var{@2@} are interpreted as containing\n+ASCII character codes.\n+If either value contains a character not in the ASCII\n+character set, the result is processor dependent.\n+\n+If the @var{@1@} and @var{@2@} are not the same length,\n+the shorter is compared as if spaces were appended to\n+it to form a value that has the same length as the longer.\n+\n+@xref{LGe Intrinsic}, for information on the distinction\n+between the @code{@0@} intrinsic and the @code{.LT.}\n+operator.\n+\")\n+\n+DEFDOC (SIGN, \"Apply sign to magnitude.\", \"\\\n+Returns @samp{ABS(@var{@1@})*@var{s}}, where\n+@var{s} is +1 if @samp{@var{@2@}.GE.0},\n+-1 otherwise.\n+\n+@xref{Abs Intrinsic}, for the function that returns\n+the magnitude of a value.\n+\")\n+\n+DEFDOC (DSIGN, \"Apply sign to magnitude (archaic).\", ARCHAIC_2 (SIGN, Sign))\n+DEFDOC (ISIGN, \"Apply sign to magnitude (archaic).\", ARCHAIC_2 (SIGN, Sign))\n+\n+DEFDOC (REAL, \"Convert value to type @code{REAL(KIND=1)}.\", \"\\\n+Converts @var{@1@} to @code{REAL(KIND=1)}.\n+\n+Use of @code{@0@()} with a @code{COMPLEX} argument\n+(other than @code{COMPLEX(KIND=1)}) is restricted to the following case:\n+\n+@example\n+REAL(REAL(@1@))\n+@end example\n+\n+@noindent\n+This expression converts the real part of @1@ to\n+@code{REAL(KIND=1)}.\n+\n+@xref{RealPart Intrinsic}, for information on a GNU Fortran\n+intrinsic that extracts the real part of an arbitrary\n+@code{COMPLEX} value.\n+\n+@xref{REAL() and AIMAG() of Complex}, for more information.\n+\")\n+\n+DEFDOC (DREAL, \"Convert value to type @code{REAL(KIND=2)}.\", \"\\\n+Converts @var{@1@} to @code{REAL(KIND=2)}.\n+\n+If @var{@1@} is type @code{COMPLEX}, its real part\n+is converted (if necessary) to @code{REAL(KIND=2)},\n+and its imaginary part is disregarded.\n+\n+Although this intrinsic is not standard Fortran,\n+it is a popular extension offered by many compilers\n+that support @code{DOUBLE COMPLEX}, since it offers\n+the easiest way to extract the real part of a @code{DOUBLE COMPLEX}\n+value without using the Fortran 90 @code{REAL()} intrinsic\n+in a way that produces a return value inconsistent with\n+the way many FORTRAN 77 compilers handle @code{REAL()} of\n+a @code{DOUBLE COMPLEX} value.\n+\n+@xref{RealPart Intrinsic}, for information on a GNU Fortran\n+intrinsic that avoids these areas of confusion.\n+\n+@xref{Dble Intrinsic}, for information on the standard FORTRAN 77\n+replacement for @code{DREAL()}.\n+\n+@xref{REAL() and AIMAG() of Complex}, for more information on\n+this issue.\n+\")\n+\n+DEFDOC (IMAGPART, \"Extract imaginary part of complex.\", \"\\\n+The imaginary part of @var{@1@} is returned, without conversion.\n+\n+@emph{Note:} The way to do this in standard Fortran 90\n+is @samp{AIMAG(@var{@1@})}.\n+However, when, for example, @var{@1@} is @code{DOUBLE COMPLEX},\n+@samp{AIMAG(@var{@1@})} means something different for some compilers\n+that are not true Fortran 90 compilers but offer some\n+extensions standardized by Fortran 90 (such as the\n+@code{DOUBLE COMPLEX} type, also known as @code{COMPLEX(KIND=2)}).\n+\n+The advantage of @code{@0@()} is that, while not necessarily\n+more or less portable than @code{AIMAG()}, it is more likely to\n+cause a compiler that doesn't support it to produce a diagnostic\n+than generate incorrect code.\n+\n+@xref{REAL() and AIMAG() of Complex}, for more information.\n+\")\n+\n+DEFDOC (COMPLEX, \"Build complex value from real and@99@imaginary parts.\", \"\\\n+Returns a @code{COMPLEX} value that has @samp{@1@} and @samp{@2@} as its\n+real and imaginary parts, respectively.\n+\n+If @var{@1@} and @var{@2@} are the same type, and that type is not\n+@code{INTEGER}, no data conversion is performed, and the type of\n+the resulting value has the same kind value as the types\n+of @var{@1@} and @var{@2@}.\n+\n+If @var{@1@} and @var{@2@} are not the same type, the usual type-promotion\n+rules are applied to both, converting either or both to the\n+appropriate @code{REAL} type.\n+The type of the resulting value has the same kind value as the\n+type to which both @var{@1@} and @var{@2@} were converted, in this case.\n+\n+If @var{@1@} and @var{@2@} are both @code{INTEGER}, they are both converted\n+to @code{REAL(KIND=1)}, and the result of the @code{@0@()}\n+invocation is type @code{COMPLEX(KIND=1)}.\n+\n+@emph{Note:} The way to do this in standard Fortran 90\n+is too hairy to describe here, but it is important to\n+note that @samp{CMPLX(D1,D2)} returns a @code{COMPLEX(KIND=1)}\n+result even if @samp{D1} and @samp{D2} are type @code{REAL(KIND=2)}.\n+Hence the availability of @code{COMPLEX()} in GNU Fortran.\n+\")\n+\n+DEFDOC (LOC, \"Address of entity in core.\", \"\\\n+The @code{LOC()} intrinsic works the\n+same way as the @code{%LOC()} construct.\n+@xref{%LOC(),,The @code{%LOC()} Construct}, for\n+more information.\n+\")\n+\n+DEFDOC (REALPART, \"Extract real part of complex.\", \"\\\n+The real part of @var{@1@} is returned, without conversion.\n+\n+@emph{Note:} The way to do this in standard Fortran 90\n+is @samp{REAL(@var{@1@})}.\n+However, when, for example, @var{@1@} is @code{COMPLEX(KIND=2)},\n+@samp{REAL(@var{@1@})} means something different for some compilers\n+that are not true Fortran 90 compilers but offer some\n+extensions standardized by Fortran 90 (such as the\n+@code{DOUBLE COMPLEX} type, also known as @code{COMPLEX(KIND=2)}).\n+\n+The advantage of @code{@0@()} is that, while not necessarily\n+more or less portable than @code{REAL()}, it is more likely to\n+cause a compiler that doesn't support it to produce a diagnostic\n+than generate incorrect code.\n+\n+@xref{REAL() and AIMAG() of Complex}, for more information.\n+\")\n+\n+DEFDOC (GETARG, \"Obtain command-line argument.\", \"\\\n+Sets @var{@2@} to the @var{@1@}-th command-line argument (or to all\n+blanks if there are fewer than @var{@2@} command-line arguments);\n+@code{CALL @0@(0, @var{value})} sets @var{value} to the name of the\n+program (on systems that support this feature).\n+\n+@xref{IArgC Intrinsic}, for information on how to get the number\n+of arguments.\n+\")\n+\n+DEFDOC (ABORT, \"Abort the program.\", \"\\\n+Prints a message and potentially causes a core dump via @code{abort(3)}.\n+\")\n+\n+DEFDOC (EXIT, \"Terminate the program.\", \"\\\n+Exit the program with status @var{@1@} after closing open Fortran\n+I/O units and otherwise behaving as @code{exit(2)}.\n+If @var{@1@} is omitted the canonical `success' value\n+will be returned to the system.\n+\")\n+\n+DEFDOC (IARGC, \"Obtain count of command-line arguments.\", \"\\\n+Returns the number of command-line arguments.\n+\n+This count does not include the specification of the program\n+name itself.\n+\")\n+\n+DEFDOC (CTIME_func, \"Convert time to Day Mon dd hh:mm:ss yyyy.\", \"\\\n+Converts @var{@1@}, a system time value, such as returned by\n+@code{TIME8()}, to a string of the form @samp{Sat Aug 19 18:13:14 1995},\n+and returns that string as the function value.\n+\n+@xref{Time8 Intrinsic}.\n+\")\n+\n+DEFDOC (CTIME_subr, \"Convert time to Day Mon dd hh:mm:ss yyyy.\", \"\\\n+Converts @var{@2@}, a system time value, such as returned by\n+@code{TIME8()}, to a string of the form @samp{Sat Aug 19 18:13:14 1995},\n+and returns that string in @var{@1@}.\n+\n+@xref{Time8 Intrinsic}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine.\n+\")\n+\n+DEFDOC (DATE, \"Get current date as dd-Mon-yy.\", \"\\\n+Returns @var{@1@} in the form @samp{@var{dd}-@var{mmm}-@var{yy}},\n+representing the numeric day of the month @var{dd}, a three-character\n+abbreviation of the month name @var{mmm} and the last two digits of\n+the year @var{yy}, e.g.@ @samp{25-Nov-96}.\n+\n+This intrinsic is not recommended, due to the year 2000 approaching.\n+@xref{CTime Intrinsic (subroutine)}, for information on obtaining more digits\n+for the current (or any) date.\n+\")\n+\n+DEFDOC (DTIME_func, \"Get elapsed time since last time.\", \"\\\n+Initially, return the number of seconds of runtime\n+since the start of the process's execution\n+as the function value,\n+and the user and system components of this in @samp{@var{@1@}(1)}\n+and @samp{@var{@1@}(2)} respectively.\n+The functions' value is equal to @samp{@var{@1@}(1) + @var{@1@}(2)}.\n+\n+Subsequent invocations of @samp{@0@()} return values accumulated since the\n+previous invocation.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (DTIME_subr, \"Get elapsed time since last time.\", \"\\\n+Initially, return the number of seconds of runtime\n+since the start of the process's execution\n+in @var{@1@},\n+and the user and system components of this in @samp{@var{@2@}(1)}\n+and @samp{@var{@2@}(2)} respectively.\n+The value of @var{@1@} is equal to @samp{@var{@2@}(1) + @var{@2@}(2)}.\n+\n+Subsequent invocations of @samp{@0@()} set values based on accumulations\n+since the previous invocation.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine.\n+\")\n+\n+DEFDOC (ETIME_func, \"Get elapsed time for process.\", \"\\\n+Return the number of seconds of runtime\n+since the start of the process's execution\n+as the function value,\n+and the user and system components of this in @samp{@var{@1@}(1)}\n+and @samp{@var{@1@}(2)} respectively.\n+The functions' value is equal to @samp{@var{@1@}(1) + @var{@1@}(2)}.\n+\")\n+\n+DEFDOC (ETIME_subr, \"Get elapsed time for process.\", \"\\\n+Return the number of seconds of runtime\n+since the start of the process's execution\n+in @var{@1@},\n+and the user and system components of this in @samp{@var{@2@}(1)}\n+and @samp{@var{@2@}(2)} respectively.\n+The value of @var{@1@} is equal to @samp{@var{@2@}(1) + @var{@2@}(2)}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine.\n+\")\n+\n+DEFDOC (FDATE_func, \"Get current time as Day Mon dd hh:mm:ss yyyy.\", \"\\\n+Returns the current date (using the same format as @code{CTIME()}).\n+\n+Equivalent to:\n+\n+@example\n+CTIME(TIME8())\n+@end example\n+\n+@xref{CTime Intrinsic (function)}.\n+\")\n+\n+DEFDOC (FDATE_subr, \"Get current time as Day Mon dd hh:mm:ss yyyy.\", \"\\\n+Returns the current date (using the same format as @code{CTIME()})\n+in @var{@1@}.\n+\n+Equivalent to:\n+\n+@example\n+CALL CTIME(@var{@1@}, TIME8())\n+@end example\n+\n+@xref{CTime Intrinsic (subroutine)}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine.\n+\")\n+\n+DEFDOC (GMTIME, \"Convert time to GMT time info.\", \"\\\n+Given a system time value @var{@1@}, fills @var{@2@} with values\n+extracted from it appropriate to the GMT time zone using\n+@code{gmtime(3)}.\n+\n+The array elements are as follows:\n+\n+@enumerate\n+@item\n+Seconds after the minute, range 0--59 or 0--61 to allow for leap\n+seconds\n+\n+@item\n+Minutes after the hour, range 0--59\n+\n+@item\n+Hours past midnight, range 0--23\n+\n+@item\n+Day of month, range 0--31\n+\n+@item\n+Number of months since January, range 0--12\n+\n+@item\n+Years since 1900\n+\n+@item\n+Number of days since Sunday, range 0--6\n+\n+@item\n+Days since January 1\n+\n+@item\n+Daylight savings indicator: positive if daylight savings is in effect,\n+zero if not, and negative if the information isn't available.\n+@end enumerate\n+\")\n+\n+DEFDOC (LTIME, \"Convert time to local time info.\", \"\\\n+Given a system time value @var{@1@}, fills @var{@2@} with values\n+extracted from it appropriate to the GMT time zone using\n+@code{localtime(3)}.\n+\n+The array elements are as follows:\n+\n+@enumerate\n+@item\n+Seconds after the minute, range 0--59 or 0--61 to allow for leap\n+seconds\n+\n+@item\n+Minutes after the hour, range 0--59\n+\n+@item\n+Hours past midnight, range 0--23\n+\n+@item\n+Day of month, range 0--31\n+\n+@item\n+Number of months since January, range 0--12\n+\n+@item\n+Years since 1900\n+\n+@item\n+Number of days since Sunday, range 0--6\n+\n+@item\n+Days since January 1\n+\n+@item\n+Daylight savings indicator: positive if daylight savings is in effect,\n+zero if not, and negative if the information isn't available.\n+@end enumerate\n+\")\n+\n+DEFDOC (IDATE_unix, \"Get local time info.\", \"\\\n+Fills @var{@1@} with the numerical values at the current local time\n+of day, month (in the range 1--12), and year in elements 1, 2, and 3,\n+respectively.\n+The year has four significant digits.\n+\")\n+\n+DEFDOC (IDATE_vxt, \"Get local time info (VAX/VMS).\", \"\\\n+Returns the numerical values of the current local time.\n+The month (in the range 1--12) is returned in @var{@1@},\n+the day (in the range 1--7) in @var{@2@},\n+and the year in @var{@3@} (in the range 0--99).\n+\n+This intrinsic is not recommended, due to the year 2000 approaching.\n+\")\n+\n+DEFDOC (ITIME, \"Get local time of day.\", \"\\\n+Returns the current local time hour, minutes, and seconds in elements\n+1, 2, and 3 of @var{@1@}, respectively.\n+\")\n+\n+DEFDOC (MCLOCK, \"Get number of clock ticks for process.\", \"\\\n+Returns the number of clock ticks since the start of the process.\n+Supported on systems with @code{clock(3)} (q.v.).\n+\n+This intrinsic is not fully portable, such as to systems\n+with 32-bit @code{INTEGER} types but supporting times\n+wider than 32 bits.\n+@xref{MClock8 Intrinsic}, for information on a\n+similar intrinsic that might be portable to more\n+GNU Fortran implementations, though to fewer\n+Fortran compilers.\n+\n+If the system does not support @code{clock(3)},\n+-1 is returned.\n+\")\n+\n+DEFDOC (MCLOCK8, \"Get number of clock ticks for process.\", \"\\\n+Returns the number of clock ticks since the start of the process.\n+Supported on systems with @code{clock(3)} (q.v.).\n+\n+No Fortran implementations other than GNU Fortran are\n+known to support this intrinsic at the time of this\n+writing.\n+@xref{MClock Intrinsic}, for information on a\n+similar intrinsic that might be portable to more Fortran\n+compilers, though to fewer GNU Fortran implementations.\n+\n+If the system does not support @code{clock(3)},\n+-1 is returned.\n+\")\n+\n+DEFDOC (SECNDS, \"Get local time offset since midnight.\", \"\\\n+Returns the local time in seconds since midnight minus the value\n+@var{@1@}.\n+\")\n+\n+DEFDOC (SECOND_func, \"Get CPU time for process in seconds.\", \"\\\n+Returns the process's runtime in seconds---the same value as the\n+UNIX function @code{etime} returns.\n+\n+This routine is known from Cray Fortran.\n+\")\n+\n+DEFDOC (SECOND_subr, \"Get CPU time for process@99@in seconds.\", \"\\\n+Returns the process's runtime in seconds in @var{@1@}---the same value\n+as the UNIX function @code{etime} returns.\n+\n+This routine is known from Cray Fortran.  @xref{Cpu_Time Intrinsic}\n+for a standard equivalent.\n+\")\n+\n+DEFDOC (SYSTEM_CLOCK, \"Get current system clock value.\", \"\\\n+Returns in @var{@1@} the current value of the system clock; this is\n+the value returned by the UNIX function @code{times(2)}\n+in this implementation, but\n+isn't in general.\n+@var{@2@} is the number of clock ticks per second and\n+@var{@3@} is the maximum value this can take, which isn't very useful\n+in this implementation since it's just the maximum C @code{unsigned\n+int} value.\n+\")\n+\n+DEFDOC (CPU_TIME, \"Get current CPU time.\", \"\\\n+Returns in @var{@1@} the current value of the system time.\n+This implementation of the Fortran 95 intrinsic is just an alias for\n+@code{second} @xref{Second Intrinsic (subroutine)}.\n+\")\n+\n+DEFDOC (TIME8, \"Get current time as time value.\", \"\\\n+Returns the current time encoded as a long integer\n+(in the manner of the UNIX function @code{time(3)}).\n+This value is suitable for passing to @code{CTIME},\n+@code{GMTIME}, and @code{LTIME}.\n+\n+No Fortran implementations other than GNU Fortran are\n+known to support this intrinsic at the time of this\n+writing.\n+@xref{Time Intrinsic (UNIX)}, for information on a\n+similar intrinsic that might be portable to more Fortran\n+compilers, though to fewer GNU Fortran implementations.\n+\")\n+\n+DEFDOC (TIME_unix, \"Get current time as time value.\", \"\\\n+Returns the current time encoded as an integer\n+(in the manner of the UNIX function @code{time(3)}).\n+This value is suitable for passing to @code{CTIME},\n+@code{GMTIME}, and @code{LTIME}.\n+\n+This intrinsic is not fully portable, such as to systems\n+with 32-bit @code{INTEGER} types but supporting times\n+wider than 32 bits.\n+@xref{Time8 Intrinsic}, for information on a\n+similar intrinsic that might be portable to more\n+GNU Fortran implementations, though to fewer\n+Fortran compilers.\n+\")\n+\n+#define BES(num,n,val) \"\\\n+Calculates the Bessel function of the \" #num \" kind of \\\n+order \" #n \" of @var{@\" #val \"@}.\\n\\\n+See @code{bessel(3m)}, on whose implementation the \\\n+function depends.\\\n+\"\n+\n+DEFDOC (BESJ0, \"Bessel function.\", BES (first, 0, 1))\n+DEFDOC (BESJ1, \"Bessel function.\", BES (first, 1, 1))\n+DEFDOC (BESJN, \"Bessel function.\", BES (first, @var{N}, 2))\n+DEFDOC (BESY0, \"Bessel function.\", BES (second, 0, 1))\n+DEFDOC (BESY1, \"Bessel function.\", BES (second, 1, 1))\n+DEFDOC (BESYN, \"Bessel function.\", BES (second, @var{N}, 2))\n+DEFDOC (DBESJ0, \"Bessel function (archaic).\", ARCHAIC (BESJ0, BesJ0))\n+DEFDOC (DBESJ1, \"Bessel function (archaic).\", ARCHAIC (BESJ1, BesJ1))\n+DEFDOC (DBESJN, \"Bessel function (archaic).\", ARCHAIC_2nd (BESJN, BesJN))\n+DEFDOC (DBESY0, \"Bessel function (archaic).\", ARCHAIC (BESY0, BesY0))\n+DEFDOC (DBESY1, \"Bessel function (archaic).\", ARCHAIC (BESY1, BesY1))\n+DEFDOC (DBESYN, \"Bessel function (archaic).\", ARCHAIC_2nd (BESYN, BesYN))\n+\n+DEFDOC (ERF, \"Error function.\", \"\\\n+Returns the error function of @var{@1@}.\n+See @code{erf(3m)}, which provides the implementation.\n+\")\n+\n+DEFDOC (ERFC, \"Complementary error function.\", \"\\\n+Returns the complementary error function of @var{@1@}:\n+@samp{ERFC(R) = 1 - ERF(R)} (except that the result may be more\n+accurate than explicitly evaluating that formulae would give).\n+See @code{erfc(3m)}, which provides the implementation.\n+\")\n+\n+DEFDOC (DERF, \"Error function (archaic).\", ARCHAIC (ERF, ErF))\n+DEFDOC (DERFC, \"Complementary error function (archaic).\", ARCHAIC (ERFC, ErFC))\n+\n+DEFDOC (IRAND, \"Random number.\", \"\\\n+Returns a uniform quasi-random number up to a system-dependent limit.\n+If @var{@1@} is 0, the next number in sequence is returned; if\n+@var{@1@} is 1, the generator is restarted by calling the UNIX function\n+@samp{srand(0)}; if @var{@1@} has any other value,\n+it is used as a new seed with @code{srand()}.\n+\n+@xref{SRand Intrinsic}.\n+\n+@emph{Note:} As typically implemented (by the routine of the same\n+name in the C library), this random number generator is a very poor\n+one, though the BSD and GNU libraries provide a much better\n+implementation than the `traditional' one.\n+On a different system you almost certainly want to use something better.\n+\")\n+\n+DEFDOC (RAND, \"Random number.\", \"\\\n+Returns a uniform quasi-random number between 0 and 1.\n+If @var{@1@} is 0, the next number in sequence is returned; if\n+@var{@1@} is 1, the generator is restarted by calling @samp{srand(0)};\n+if @var{@1@} has any other value, it is used as a new seed with\n+@code{srand}.\n+\n+@xref{SRand Intrinsic}.\n+\n+@emph{Note:} As typically implemented (by the routine of the same\n+name in the C library), this random number generator is a very poor\n+one, though the BSD and GNU libraries provide a much better\n+implementation than the `traditional' one.\n+On a different system you\n+almost certainly want to use something better.\n+\")\n+\n+DEFDOC (SRAND, \"Random seed.\", \"\\\n+Reinitialises the generator with the seed in @var{@1@}.\n+@xref{IRand Intrinsic}.\n+@xref{Rand Intrinsic}.\n+\")\n+\n+DEFDOC (ACCESS, \"Check file accessibility.\", \"\\\n+Checks file @var{@1@} for accessibility in the mode specified by @var{@2@} and\n+returns 0 if the file is accessible in that mode, otherwise an error\n+code if the file is inaccessible or @var{@2@} is invalid.\n+See @code{access(2)}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+@var{@2@} may be a concatenation of any of the following characters:\n+\n+@table @samp\n+@item r\n+Read permission\n+\n+@item w\n+Write permission\n+\n+@item x\n+Execute permission\n+\n+@item @kbd{SPC}\n+Existence\n+@end table\n+\")\n+\n+DEFDOC (CHDIR_subr, \"Change directory.\", \"\\\n+Sets the current working directory to be @var{@1@}.\n+If the @var{@2@} argument is supplied, it contains 0\n+on success or a non-zero error code otherwise upon return.\n+See @code{chdir(3)}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@2@} argument.\n+\")\n+\n+DEFDOC (CHDIR_func, \"Change directory.\", \"\\\n+Sets the current working directory to be @var{@1@}.\n+Returns 0 on success or a non-zero error code.\n+See @code{chdir(3)}.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (CHMOD_func, \"Change file modes.\", \"\\\n+Changes the access mode of file @var{@1@} according to the\n+specification @var{@2@}, which is given in the format of\n+@code{chmod(1)}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+Currently, @var{@1@} must not contain the single quote\n+character.\n+\n+Returns 0 on success or a non-zero error code otherwise.\n+\n+Note that this currently works\n+by actually invoking @code{/bin/chmod} (or the @code{chmod} found when\n+the library was configured) and so may fail in some circumstances and\n+will, anyway, be slow.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (CHMOD_subr, \"Change file modes.\", \"\\\n+Changes the access mode of file @var{@1@} according to the\n+specification @var{@2@}, which is given in the format of\n+@code{chmod(1)}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+Currently, @var{@1@} must not contain the single quote\n+character.\n+\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return.\n+\n+Note that this currently works\n+by actually invoking @code{/bin/chmod} (or the @code{chmod} found when\n+the library was configured) and so may fail in some circumstances and\n+will, anyway, be slow.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (GETCWD_func, \"Get current working directory.\", \"\\\n+Places the current working directory in @var{@1@}.\n+Returns 0 on\n+success, otherwise a non-zero error code\n+(@code{ENOSYS} if the system does not provide @code{getcwd(3)}\n+or @code{getwd(3)}).\n+\")\n+\n+DEFDOC (GETCWD_subr, \"Get current working directory.\", \"\\\n+Places the current working directory in @var{@1@}.\n+If the @var{@2@} argument is supplied, it contains 0\n+success or a non-zero error code upon return\n+(@code{ENOSYS} if the system does not provide @code{getcwd(3)}\n+or @code{getwd(3)}).\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@2@} argument.\n+\")\n+\n+DEFDOC (FSTAT_func, \"Get file information.\", \"\\\n+Obtains data about the file open on Fortran I/O unit @var{@1@} and\n+places them in the array @var{@2@}.\n+The values in this array are\n+extracted from the @code{stat} structure as returned by\n+@code{fstat(2)} q.v., as follows:\n+\n+@enumerate\n+@item\n+File mode\n+\n+@item\n+Inode number\n+\n+@item\n+ID of device containing directory entry for file\n+\n+@item\n+Device id (if relevant)\n+\n+@item\n+Number of links\n+\n+@item\n+Owner's uid\n+\n+@item\n+Owner's gid\n+\n+@item\n+File size (bytes)\n+\n+@item\n+Last access time\n+\n+@item\n+Last modification time\n+\n+@item\n+Last file status change time\n+\n+@item\n+Preferred I/O block size\n+\n+@item\n+Number of blocks allocated\n+@end enumerate\n+\n+Not all these elements are relevant on all systems.\n+If an element is not relevant, it is returned as 0.\n+\n+Returns 0 on success or a non-zero error code.\n+\")\n+\n+DEFDOC (FSTAT_subr, \"Get file information.\", \"\\\n+Obtains data about the file open on Fortran I/O unit @var{@1@} and\n+places them in the array @var{@2@}.\n+The values in this array are\n+extracted from the @code{stat} structure as returned by\n+@code{fstat(2)} q.v., as follows:\n+\n+@enumerate\n+@item\n+File mode\n+\n+@item\n+Inode number\n+\n+@item\n+ID of device containing directory entry for file\n+\n+@item\n+Device id (if relevant)\n+\n+@item\n+Number of links\n+\n+@item\n+Owner's uid\n+\n+@item\n+Owner's gid\n+\n+@item\n+File size (bytes)\n+\n+@item\n+Last access time\n+\n+@item\n+Last modification time\n+\n+@item\n+Last file status change time\n+\n+@item\n+Preferred I/O block size\n+\n+@item\n+Number of blocks allocated\n+@end enumerate\n+\n+Not all these elements are relevant on all systems.\n+If an element is not relevant, it is returned as 0.\n+\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (LSTAT_func, \"Get file information.\", \"\\\n+Obtains data about the given file @var{@1@} and places them in the array\n+@var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+If @var{@1@} is a symbolic link it returns data on the\n+link itself, so the routine is available only on systems that support\n+symbolic links.\n+The values in this array are extracted from the\n+@code{stat} structure as returned by @code{fstat(2)} q.v., as follows:\n+\n+@enumerate\n+@item\n+File mode\n+\n+@item\n+Inode number\n+\n+@item\n+ID of device containing directory entry for file\n+\n+@item\n+Device id (if relevant)\n+\n+@item\n+Number of links\n+\n+@item\n+Owner's uid\n+\n+@item\n+Owner's gid\n+\n+@item\n+File size (bytes)\n+\n+@item\n+Last access time\n+\n+@item\n+Last modification time\n+\n+@item\n+Last file status change time\n+\n+@item\n+Preferred I/O block size\n+\n+@item\n+Number of blocks allocated\n+@end enumerate\n+\n+Not all these elements are relevant on all systems.\n+If an element is not relevant, it is returned as 0.\n+\n+Returns 0 on success or a non-zero error code\n+(@code{ENOSYS} if the system does not provide @code{lstat(2)}).\n+\")\n+\n+DEFDOC (LSTAT_subr, \"Get file information.\", \"\\\n+Obtains data about the given file @var{@1@} and places them in the array\n+@var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+If @var{@1@} is a symbolic link it returns data on the\n+link itself, so the routine is available only on systems that support\n+symbolic links.\n+The values in this array are extracted from the\n+@code{stat} structure as returned by @code{fstat(2)} q.v., as follows:\n+\n+@enumerate\n+@item\n+File mode\n+\n+@item\n+Inode number\n+\n+@item\n+ID of device containing directory entry for file\n+\n+@item\n+Device id (if relevant)\n+\n+@item\n+Number of links\n+\n+@item\n+Owner's uid\n+\n+@item\n+Owner's gid\n+\n+@item\n+File size (bytes)\n+\n+@item\n+Last access time\n+\n+@item\n+Last modification time\n+\n+@item\n+Last file status change time\n+\n+@item\n+Preferred I/O block size\n+\n+@item\n+Number of blocks allocated\n+@end enumerate\n+\n+Not all these elements are relevant on all systems.\n+If an element is not relevant, it is returned as 0.\n+\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return\n+(@code{ENOSYS} if the system does not provide @code{lstat(2)}).\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (STAT_func, \"Get file information.\", \"\\\n+Obtains data about the given file @var{@1@} and places them in the array\n+@var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+The values in this array are extracted from the\n+@code{stat} structure as returned by @code{fstat(2)} q.v., as follows:\n+\n+@enumerate\n+@item\n+File mode\n+\n+@item\n+Inode number\n+\n+@item\n+ID of device containing directory entry for file\n+\n+@item\n+Device id (if relevant)\n+\n+@item\n+Number of links\n+\n+@item\n+Owner's uid\n+\n+@item\n+Owner's gid\n+\n+@item\n+File size (bytes)\n+\n+@item\n+Last access time\n+\n+@item\n+Last modification time\n+\n+@item\n+Last file status change time\n+\n+@item\n+Preferred I/O block size\n+\n+@item\n+Number of blocks allocated\n+@end enumerate\n+\n+Not all these elements are relevant on all systems.\n+If an element is not relevant, it is returned as 0.\n+\n+Returns 0 on success or a non-zero error code.\n+\")\n+\n+DEFDOC (STAT_subr, \"Get file information.\", \"\\\n+Obtains data about the given file @var{@1@} and places them in the array\n+@var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+The values in this array are extracted from the\n+@code{stat} structure as returned by @code{fstat(2)} q.v., as follows:\n+\n+@enumerate\n+@item\n+File mode\n+\n+@item\n+Inode number\n+\n+@item\n+ID of device containing directory entry for file\n+\n+@item\n+Device id (if relevant)\n+\n+@item\n+Number of links\n+\n+@item\n+Owner's uid\n+\n+@item\n+Owner's gid\n+\n+@item\n+File size (bytes)\n+\n+@item\n+Last access time\n+\n+@item\n+Last modification time\n+\n+@item\n+Last file status change time\n+\n+@item\n+Preferred I/O block size\n+\n+@item\n+Number of blocks allocated\n+@end enumerate\n+\n+Not all these elements are relevant on all systems.\n+If an element is not relevant, it is returned as 0.\n+\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (LINK_subr, \"Make hard link in file system.\", \"\\\n+Makes a (hard) link from file @var{@1@} to @var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the names in @var{@1@} and @var{@2@}---otherwise,\n+trailing blanks in @var{@1@} and @var{@2@} are ignored.\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return.\n+See @code{link(2)}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (LINK_func, \"Make hard link in file system.\", \"\\\n+Makes a (hard) link from file @var{@1@} to @var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the names in @var{@1@} and @var{@2@}---otherwise,\n+trailing blanks in @var{@1@} and @var{@2@} are ignored.\n+Returns 0 on success or a non-zero error code.\n+See @code{link(2)}.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (SYMLNK_subr, \"Make symbolic link in file system.\", \"\\\n+Makes a symbolic link from file @var{@1@} to @var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the names in @var{@1@} and @var{@2@}---otherwise,\n+trailing blanks in @var{@1@} and @var{@2@} are ignored.\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return\n+(@code{ENOSYS} if the system does not provide @code{symlink(2)}).\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (SYMLNK_func, \"Make symbolic link in file system.\", \"\\\n+Makes a symbolic link from file @var{@1@} to @var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the names in @var{@1@} and @var{@2@}---otherwise,\n+trailing blanks in @var{@1@} and @var{@2@} are ignored.\n+Returns 0 on success or a non-zero error code\n+(@code{ENOSYS} if the system does not provide @code{symlink(2)}).\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (RENAME_subr, \"Rename file.\", \"\\\n+Renames the file @var{@1@} to @var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the names in @var{@1@} and @var{@2@}---otherwise,\n+trailing blanks in @var{@1@} and @var{@2@} are ignored.\n+See @code{rename(2)}.\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (RENAME_func, \"Rename file.\", \"\\\n+Renames the file @var{@1@} to @var{@2@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the names in @var{@1@} and @var{@2@}---otherwise,\n+trailing blanks in @var{@1@} and @var{@2@} are ignored.\n+See @code{rename(2)}.\n+Returns 0 on success or a non-zero error code.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (UMASK_subr, \"Set file creation permissions mask.\", \"\\\n+Sets the file creation mask to @var{@1@} and returns the old value in\n+argument @var{@2@} if it is supplied.\n+See @code{umask(2)}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine.\n+\")\n+\n+DEFDOC (UMASK_func, \"Set file creation permissions mask.\", \"\\\n+Sets the file creation mask to @var{@1@} and returns the old value.\n+See @code{umask(2)}.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (UNLINK_subr, \"Unlink file.\", \"\\\n+Unlink the file @var{@1@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+If the @var{@2@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return.\n+See @code{unlink(2)}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@2@} argument.\n+\")\n+\n+DEFDOC (UNLINK_func, \"Unlink file.\", \"\\\n+Unlink the file @var{@1@}.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+Returns 0 on success or a non-zero error code.\n+See @code{unlink(2)}.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (GERROR, \"Get error message for last error.\", \"\\\n+Returns the system error message corresponding to the last system\n+error (C @code{errno}).\n+\")\n+\n+DEFDOC (IERRNO, \"Get error number for last error.\", \"\\\n+Returns the last system error number (corresponding to the C\n+@code{errno}).\n+\")\n+\n+DEFDOC (PERROR, \"Print error message for last error.\", \"\\\n+Prints (on the C @code{stderr} stream) a newline-terminated error\n+message corresponding to the last system error.\n+This is prefixed by @var{@1@}, a colon and a space.\n+See @code{perror(3)}.\n+\")\n+ \n+DEFDOC (GETGID, \"Get process group id.\", \"\\\n+Returns the group id for the current process.\n+\")\n+ \n+DEFDOC (GETUID, \"Get process user id.\", \"\\\n+Returns the user id for the current process.\n+\")\n+ \n+DEFDOC (GETPID, \"Get process id.\", \"\\\n+Returns the process id for the current process.\n+\")\n+\n+DEFDOC (GETENV, \"Get environment variable.\", \"\\\n+Sets @var{@2@} to the value of environment variable given by the\n+value of @var{@1@} (@code{$name} in shell terms) or to blanks if\n+@code{$name} has not been set.\n+A null character (@samp{CHAR(0)}) marks the end of\n+the name in @var{@1@}---otherwise,\n+trailing blanks in @var{@1@} are ignored.\n+\")\n+\n+DEFDOC (GETLOG, \"Get login name.\", \"\\\n+Returns the login name for the process in @var{@1@}.\n+\")\n+\n+DEFDOC (HOSTNM_func, \"Get host name.\", \"\\\n+Fills @var{@1@} with the system's host name returned by\n+@code{gethostname(2)}, returning 0 on success or a non-zero error code\n+(@code{ENOSYS} if the system does not provide @code{gethostname(2)}).\n+\")\n+\n+DEFDOC (HOSTNM_subr, \"Get host name.\", \"\\\n+Fills @var{@1@} with the system's host name returned by\n+@code{gethostname(2)}.\n+If the @var{@2@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return\n+(@code{ENOSYS} if the system does not provide @code{gethostname(2)}).\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@2@} argument.\n+\")\n+\n+/* Fixme: stream I/O */\n+\n+DEFDOC (FLUSH, \"Flush buffered output.\", \"\\\n+Flushes Fortran unit(s) currently open for output.\n+Without the optional argument, all such units are flushed,\n+otherwise just the unit specified by @var{@1@}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic\n+as a library procedure that might or might not support the\n+(optional) @var{@1@} argument.\n+\")\n+\n+DEFDOC (FNUM, \"Get file descriptor from Fortran unit number.\", \"\\\n+Returns the Unix file descriptor number corresponding to the open\n+Fortran I/O unit @var{@1@}.\n+This could be passed to an interface to C I/O routines.\n+\")\n+\n+#define IOWARN \"\n+Stream I/O should not be mixed with normal record-oriented (formatted or\n+unformatted) I/O on the same unit; the results are unpredictable.\n+\"\n+\n+DEFDOC (FGET_func, \"Read a character from unit 5 stream-wise.\", \"\\\n+Reads a single character into @var{@1@} in stream mode from unit 5\n+(by-passing normal formatted input) using @code{getc(3)}.\n+Returns 0 on\n+success, @minus{}1 on end-of-file, and the error code from\n+@code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FGET_subr, \"Read a character from unit 5 stream-wise.\", \"\\\n+Reads a single character into @var{@1@} in stream mode from unit 5\n+(by-passing normal formatted output) using @code{getc(3)}.\n+Returns in\n+@var{@2@} 0 on success, @minus{}1 on end-of-file, and the error code\n+from @code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FGETC_func, \"Read a character stream-wise.\", \"\\\n+Reads a single character into @var{@2@} in stream mode from unit @var{@1@}\n+(by-passing normal formatted output) using @code{getc(3)}.\n+Returns 0 on\n+success, @minus{}1 on end-of-file, and the error code from\n+@code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FGETC_subr, \"Read a character stream-wise.\", \"\\\n+Reads a single character into @var{@2@} in stream mode from unit @var{@1@}\n+(by-passing normal formatted output) using @code{getc(3)}.\n+Returns in\n+@var{@3@} 0 on success, @minus{}1 on end-of-file, and the error code from\n+@code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FPUT_func, \"Write a character to unit 6 stream-wise.\", \"\\\n+Writes the single character @var{@1@} in stream mode to unit 6\n+(by-passing normal formatted output) using @code{getc(3)}.\n+Returns 0 on\n+success, the error code from @code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FPUT_subr, \"Write a character to unit 6 stream-wise.\", \"\\\n+Writes the single character @var{@1@} in stream mode to unit 6\n+(by-passing normal formatted output) using @code{putc(3)}.\n+Returns in\n+@var{@2@} 0 on success, the error code from @code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FPUTC_func, \"Write a character stream-wise.\", \"\\\n+Writes the single character @var{@2@} in stream mode to unit @var{@1@}\n+(by-passing normal formatted output) using @code{putc(3)}.\n+Returns 0 on\n+success, the error code from @code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FPUTC_subr, \"Write a character stream-wise.\", \"\\\n+Writes the single character @var{@1@} in stream mode to unit 6\n+(by-passing normal formatted output) using @code{putc(3)}.\n+Returns in\n+@var{@2@} 0 on success, the error code from @code{ferror(3)} otherwise.\n+\" IOWARN)\n+\n+DEFDOC (FSEEK, \"Position file (low-level).\", \"\\\n+Attempts to move Fortran unit @var{@1@} to the specified\n+@var{Offset}: absolute offset if @var{@2@}=0; relative to the\n+current offset if @var{@2@}=1; relative to the end of the file if\n+@var{@2@}=2.\n+It branches to label @var{@3@} if @var{@1@} is\n+not open or if the call otherwise fails.\n+\")\n+\n+DEFDOC (FTELL_func, \"Get file position (low-level).\", \"\\\n+Returns the current offset of Fortran unit @var{@1@}\n+(or @minus{}1 if @var{@1@} is not open).\n+\")\n+\n+DEFDOC (FTELL_subr, \"Get file position (low-level).\", \"\\\n+Sets @var{@2@} to the current offset of Fortran unit @var{@1@}\n+(or to @minus{}1 if @var{@1@} is not open).\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine.\n+\")\n+\n+DEFDOC (ISATTY, \"Is unit connected to a terminal?\", \"\\\n+Returns @code{.TRUE.} if and only if the Fortran I/O unit\n+specified by @var{@1@} is connected\n+to a terminal device.\n+See @code{isatty(3)}.\n+\")\n+\n+DEFDOC (TTYNAM_func, \"Get name of terminal device for unit.\", \"\\\n+Returns the name of the terminal device open on logical unit\n+@var{@1@} or a blank string if @var{@1@} is not connected to a\n+terminal.\n+\")\n+\n+DEFDOC (TTYNAM_subr, \"Get name of terminal device for unit.\", \"\\\n+Sets @var{@1@} to the name of the terminal device open on logical unit\n+@var{@2@} or a blank string if @var{@2@} is not connected to a\n+terminal.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine.\n+\")\n+\n+DEFDOC (SIGNAL_subr, \"Muck with signal handling.\", \"\\\n+If @var{@2@} is a an @code{EXTERNAL} routine, arranges for it to be\n+invoked with a single integer argument (of system-dependent length)\n+when signal @var{@1@} occurs.\n+If @var{@1@} is an integer, it can be\n+used to turn off handling of signal @var{@2@} or revert to its default\n+action.\n+See @code{signal(2)}.\n+\n+Note that @var{@2@} will be called using C conventions, so its value in\n+Fortran terms is obtained by applying @code{%LOC()} (or @var{LOC()}) to it.\n+\n+The value returned by @code{signal(2)} is written to @var{@3@}, if\n+that argument is supplied.\n+Otherwise the return value is ignored.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (SIGNAL_func, \"Muck with signal handling.\", \"\\\n+If @var{@2@} is a an @code{EXTERNAL} routine, arranges for it to be\n+invoked with a single integer argument (of system-dependent length)\n+when signal @var{@1@} occurs.\n+If @var{@1@} is an integer, it can be\n+used to turn off handling of signal @var{@2@} or revert to its default\n+action.\n+See @code{signal(2)}.\n+\n+Note that @var{@2@} will be called using C conventions, so its value in\n+Fortran terms is obtained by applying @code{%LOC()} (or @var{LOC()}) to it.\n+\n+The value returned by @code{signal(2)} is returned.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (KILL_func, \"Signal a process.\", \"\\\n+Sends the signal specified by @var{@2@} to the process @var{@1@}.\n+Returns 0 on success or a non-zero error code.\n+See @code{kill(2)}.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+\")\n+\n+DEFDOC (KILL_subr, \"Signal a process.\", \"\\\n+Sends the signal specified by @var{@2@} to the process @var{@1@}.\n+If the @var{@3@} argument is supplied, it contains\n+0 on success or a non-zero error code upon return.\n+See @code{kill(2)}.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@3@} argument.\n+\")\n+\n+DEFDOC (LNBLNK, \"Get last non-blank character in string.\", \"\\\n+Returns the index of the last non-blank character in @var{@1@}.\n+@code{LNBLNK} and @code{LEN_TRIM} are equivalent.\n+\")\n+\n+DEFDOC (SLEEP, \"Sleep for a specified time.\", \"\\\n+Causes the process to pause for @var{@1@} seconds.\n+See @code{sleep(2)}.\n+\")\n+\n+DEFDOC (SYSTEM_subr, \"Invoke shell (system) command.\", \"\\\n+Passes the command @var{@1@} to a shell (see @code{system(3)}).\n+If argument @var{@2@} is present, it contains the value returned by\n+@code{system(3)}, presumably 0 if the shell command succeeded.\n+Note that which shell is used to invoke the command is system-dependent\n+and environment-dependent.\n+\n+Some non-GNU implementations of Fortran provide this intrinsic as\n+only a function, not as a subroutine, or do not support the\n+(optional) @var{@2@} argument.\n+\")\n+\n+DEFDOC (SYSTEM_func, \"Invoke shell (system) command.\", \"\\\n+Passes the command @var{@1@} to a shell (see @code{system(3)}).\n+Returns the value returned by\n+@code{system(3)}, presumably 0 if the shell command succeeded.\n+Note that which shell is used to invoke the command is system-dependent\n+and environment-dependent.\n+\n+Due to the side effects performed by this intrinsic, the function\n+form is not recommended.\n+However, the function form can be valid in cases where the\n+actual side effects performed by the call are unimportant to\n+the application.\n+\n+For example, on a UNIX system, @samp{SAME = SYSTEM('cmp a b')}\n+does not perform any side effects likely to be important to the\n+program, so the programmer would not care if the actual system\n+call (and invocation of @code{cmp}) was optimized away in a situation\n+where the return value could be determined otherwise, or was not\n+actually needed (@samp{SAME} not actually referenced after the\n+sample assignment statement).\n+\")\n+\n+DEFDOC (TIME_vxt, \"Get the time as a character value.\", \"\\\n+Returns in @var{@1@} a character representation of the current time as\n+obtained from @code{ctime(3)}.\n+\n+@xref{Fdate Intrinsic (subroutine)} for an equivalent routine.\n+\")\n+\n+DEFDOC (IBCLR, \"Clear a bit.\", \"\\\n+Returns the value of @var{@1@} with bit @var{@2@} cleared (set to\n+zero).\n+@xref{BTest Intrinsic} for information on bit positions.\n+\")\n+\n+DEFDOC (IBSET, \"Set a bit.\", \"\\\n+Returns the value of @var{@1@} with bit @var{@2@} set (to one).\n+@xref{BTest Intrinsic} for information on bit positions.\n+\")\n+\n+DEFDOC (IBITS, \"Extract a bit subfield of a variable.\", \"\\\n+Extracts a subfield of length @var{@3@} from @var{@1@}, starting from\n+bit position @var{@2@} and extending left for @var{@3@} bits.\n+The result is right-justified and the remaining bits are zeroed.\n+The value\n+of @samp{@var{@2@}+@var{@3@}} must be less than or equal to the value\n+@samp{BIT_SIZE(@var{@1@})}.\n+@xref{Bit_Size Intrinsic}.\n+\")\n+\n+DEFDOC (ISHFT, \"Logical bit shift.\", \"\\\n+All bits representing @var{@1@} are shifted @var{@2@} places.\n+@samp{@var{@2@}.GT.0} indicates a left shift, @samp{@var{@2@}.EQ.0}\n+indicates no shift and @samp{@var{@2@}.LT.0} indicates a right shift.\n+If the absolute value of the shift count is greater than\n+@samp{BIT_SIZE(@var{@1@})}, the result is undefined.\n+Bits shifted out from the left end or the right end, as the case may be,\n+are lost.\n+Zeros are shifted in from the opposite end.\n+\n+@xref{IShftC Intrinsic} for the circular-shift equivalent.\n+\")\n+\n+DEFDOC (ISHFTC, \"Circular bit shift.\", \"\\\n+The rightmost @var{@3@} bits of the argument @var{@1@}\n+are shifted circularly @var{@2@}\n+places, i.e.@ the bits shifted out of one end are shifted into \n+the opposite end.\n+No bits are lost.\n+The unshifted bits of the result are the same as\n+the unshifted bits of @var{@1@}.\n+The  absolute value of the argument @var{@2@}\n+must be less than or equal to @var{@3@}.  \n+The value of @var{@3@} must be greater than or equal to one and less than \n+or equal to @samp{BIT_SIZE(@var{@1@})}.\n+\n+@xref{IShft Intrinsic} for the logical shift equivalent.\n+\")\n+\n+DEFDOC (MVBITS, \"Moving a bit field.\", \"\\\n+Moves @var{@3@} bits from positions @var{@2@} through\n+@samp{@var{@2@}+@var{@3@}-1} of @var{@1@} to positions @var{@5@} through\n+@samp{@var{@2@}+@var{@3@}-1} of @var{@4@}.  The portion of argument\n+@var{@4@} not affected by the movement of bits is unchanged.  Arguments\n+@var{@1@} and @var{@4@} are permitted to be the same numeric storage\n+unit.  The values of @samp{@var{@2@}+@var{@3@}} and\n+@samp{@var{@5@}+@var{@3@}} must be less than or equal to\n+@samp{BIT_SIZE(@var{@1@})}.\n+\")\n+\n+DEFDOC (INDEX, \"Locate a CHARACTER substring.\", \"\\\n+Returns the position of the start of the first occurrence of string\n+@var{@2@} as a substring in @var{@1@}, counting from one.\n+If @var{@2@} doesn't occur in @var{@1@}, zero is returned.\n+\")\n+\n+DEFDOC (ALARM, \"Execute a routine after a given delay.\", \"\\\n+Causes external subroutine @var{@2@} to be executed after a delay of\n+@var{@1@} seconds by using @code{alarm(1)} to set up a signal and\n+@code{signal(2)} to catch it.\n+If @var{@3@} is supplied, it will be\n+returned with the the number of seconds remaining until any previously\n+scheduled alarm was due to be delivered, or zero if there was no\n+previously scheduled alarm.\n+@xref{Signal Intrinsic (subroutine)}.\n+\")"}]}