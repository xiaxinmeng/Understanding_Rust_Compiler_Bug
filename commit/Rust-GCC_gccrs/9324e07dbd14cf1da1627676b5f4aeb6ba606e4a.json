{"sha": "9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyNGUwN2RiZDE0Y2YxZGExNjI3Njc2YjVmNGFlYjZiYTYwNmU0YQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-03-18T22:46:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:51Z"}, "message": "[Ada] Remove AAMP from compiler sources\n\ngcc/ada/\n\n\t* ada_get_targ.adb, aspects.ads, checks.adb, cstand.adb,\n\teinfo.ads, exp_attr.adb, freeze.adb, get_targ.adb,\n\tlibgnat/a-textio.ads, libgnat/g-memdum.ads,\n\tlibgnat/s-scaval__128.adb, libgnat/s-scaval.adb, make.adb,\n\tosint.ads, par-prag.adb, sem_ch13.adb, sem_prag.adb,\n\tsem_prag.ads, set_targ.adb, set_targ.ads, snames.ads-tmpl,\n\ttargparm.ads, types.ads: Remove AAMP-specific code.\n\t* switch.ads: Minor reformatting.\n\t* gen_il-fields.ads, gen_il-gen.adb,\n\tgen_il-gen-gen_entities.adb, gen_il-types.ads, einfo-utils.adb,\n\teinfo-utils.ads: Package Types now contains \"type Float_Rep_Kind\n\tis (IEEE_Binary);\", which used to also have an enumeral AAMP.\n\tGen_IL can't handle fields of this type, which would be zero\n\tsized. Therefore, we move the Float_Rep field into Einfo.Utils\n\tas a synthesized attribute. (We do not delete the field\n\taltogether, in case we want new floating-point representations\n\tin the future.)\n\t* doc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_rm/implementation_defined_aspects.rst,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n\tdoc/gnat_ugn/the_gnat_compilation_model.rst: Remove\n\tAAMP-specific documentation.\n\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.", "tree": {"sha": "7b9fe5e2b551778b3212ca37735e8ada974a3990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9fe5e2b551778b3212ca37735e8ada974a3990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f44441d80fa8523a2e1b294b8563180202879727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44441d80fa8523a2e1b294b8563180202879727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44441d80fa8523a2e1b294b8563180202879727"}], "stats": {"total": 2064, "additions": 912, "deletions": 1152}, "files": [{"sha": "609847810fcc5844a1a4f2e866996d8a80ee6a6e", "filename": "gcc/ada/ada_get_targ.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fada_get_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fada_get_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada_get_targ.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -214,7 +214,7 @@ package body Get_Targ is\n \n    function Get_Max_Unaligned_Field return Pos is\n    begin\n-      return 64;  -- Can be different on some targets (e.g., AAMP)\n+      return 64;  -- Can be different on some targets\n    end Get_Max_Unaligned_Field;\n \n    -----------------------------"}, {"sha": "2cbb2da353e50d1e703da189aa46c6163414e04e", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -173,7 +173,6 @@ package Aspects is\n       Aspect_Remote_Call_Interface,\n       Aspect_Remote_Types,\n       Aspect_Shared_Passive,\n-      Aspect_Universal_Data,                -- GNAT\n \n       --  Remaining aspects have a static boolean value that turns the aspect\n       --  on or off. They all correspond to pragmas, but are only converted to\n@@ -292,7 +291,6 @@ package Aspects is\n       Aspect_Thread_Local_Storage       => True,\n       Aspect_Test_Case                  => True,\n       Aspect_Universal_Aliasing         => True,\n-      Aspect_Universal_Data             => True,\n       Aspect_Unmodified                 => True,\n       Aspect_Unreferenced               => True,\n       Aspect_Unreferenced_Objects       => True,\n@@ -330,7 +328,7 @@ package Aspects is\n    --  the occurrence of the aspect.\n \n    subtype Library_Unit_Aspects is\n-     Aspect_Id range Aspect_All_Calls_Remote .. Aspect_Universal_Data;\n+     Aspect_Id range Aspect_All_Calls_Remote .. Aspect_Shared_Passive;\n \n    --  The following subtype defines aspects accepting an optional static\n    --  boolean parameter indicating if the aspect should be active or\n@@ -734,7 +732,6 @@ package Aspects is\n       Aspect_Unchecked_Union              => Name_Unchecked_Union,\n       Aspect_Unimplemented                => Name_Unimplemented,\n       Aspect_Universal_Aliasing           => Name_Universal_Aliasing,\n-      Aspect_Universal_Data               => Name_Universal_Data,\n       Aspect_Unmodified                   => Name_Unmodified,\n       Aspect_Unreferenced                 => Name_Unreferenced,\n       Aspect_Unreferenced_Objects         => Name_Unreferenced_Objects,\n@@ -935,7 +932,6 @@ package Aspects is\n       Aspect_Type_Invariant               => Always_Delay,\n       Aspect_Unchecked_Union              => Always_Delay,\n       Aspect_Universal_Aliasing           => Always_Delay,\n-      Aspect_Universal_Data               => Always_Delay,\n       Aspect_Unmodified                   => Always_Delay,\n       Aspect_Unreferenced                 => Always_Delay,\n       Aspect_Unreferenced_Objects         => Always_Delay,"}, {"sha": "bdaae5985c3e41b659c1d08ff54aac60d051c7ae", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -5615,6 +5615,10 @@ package body Checks is\n \n       --  If type is not defined, we can't determine its range\n \n+      pragma Warnings (Off, \"condition can only be True if invalid\");\n+      --  Otherwise the compiler warns on the check of Float_Rep below, because\n+      --  there is only one value (see types.ads).\n+\n       if No (Typ)\n \n         --  We don't deal with anything except IEEE floating-point types\n@@ -5628,6 +5632,7 @@ package body Checks is\n \n         or else Error_Posted (N) or else Error_Posted (Typ)\n       then\n+         pragma Warnings (On, \"condition can only be True if invalid\");\n          OK := False;\n          return;\n       end if;"}, {"sha": "44cb69c8ccaf3b8c74d0a4e8f15e2d628ba6b7cf", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -916,9 +916,9 @@ package body CStand is\n       Set_Alignment       (Standard_String, Uint_1);\n       Pack_String_Type    (Standard_String);\n \n-      --  On targets where a storage unit is larger than a byte (such as AAMP),\n-      --  pragma Pack has a real effect on the representation of type String,\n-      --  and the type must be marked as having a nonstandard representation.\n+      --  On targets where a storage unit is larger than a byte, pragma Pack\n+      --  has a real effect on the representation of type String, and the type\n+      --  must be marked as having a nonstandard representation.\n \n       if System_Storage_Unit > Uint_8 then\n          Set_Has_Non_Standard_Rep (Standard_String);"}, {"sha": "b09a4bb07960244dabef7dab8f34fed9e9f79e72", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -561,12 +561,6 @@ Aspect Universal_Aliasing\n \n This boolean aspect is equivalent to :ref:`pragma Universal_Aliasing<Pragma-Universal_Aliasing>`.\n \n-Aspect Universal_Data\n-=====================\n-.. index:: Universal_Data\n-\n-This aspect is equivalent to :ref:`pragma Universal_Data<Pragma-Universal_Data>`.\n-\n Aspect Unmodified\n =================\n .. index:: Unmodified"}, {"sha": "6668dffcc0ca5528ccc908531762bf28ea4111fd", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -2062,27 +2062,6 @@ string or a static string expressions that evaluates to the null\n string. In this case, no external name is generated. This form\n still allows the specification of parameter mechanisms.\n \n-Pragma Export_Value\n-===================\n-\n-Syntax:\n-\n-\n-::\n-\n-  pragma Export_Value (\n-    [Value     =>] static_integer_EXPRESSION,\n-    [Link_Name =>] static_string_EXPRESSION);\n-\n-\n-This pragma serves to export a static integer value for external use.\n-The first argument specifies the value to be exported. The Link_Name\n-argument specifies the symbolic name to be associated with the integer\n-value. This pragma is useful for defining a named static value in Ada\n-that can be referenced in assembly language units to be linked with\n-the application. This pragma is currently supported only for the\n-AAMP target and is ignored for other targets.\n-\n Pragma Export_Valued_Procedure\n ==============================\n \n@@ -3244,13 +3223,7 @@ Syntax:\n \n \n This program unit pragma is supported for parameterless protected procedures\n-as described in Annex C of the Ada Reference Manual. On the AAMP target\n-the pragma can also be specified for nonprotected parameterless procedures\n-that are declared at the library level (which includes procedures\n-declared at the top level of a library package). In the case of AAMP,\n-when this pragma is applied to a nonprotected procedure, the instruction\n-``IERET`` is generated for returns from the procedure, enabling\n-maskable interrupts, in place of the normal return instruction.\n+as described in Annex C of the Ada Reference Manual.\n \n Pragma Interrupt_State\n ======================\n@@ -7044,32 +7017,6 @@ For a detailed description of the strict aliasing optimization, and the\n situations in which it must be suppressed, see the section on\n ``Optimization and Strict Aliasing`` in the :title:`GNAT User's Guide`.\n \n-.. _Pragma-Universal_Data:\n-\n-Pragma Universal_Data\n-=====================\n-\n-Syntax:\n-\n-\n-::\n-\n-  pragma Universal_Data [(library_unit_Name)];\n-\n-\n-This pragma is supported only for the AAMP target and is ignored for\n-other targets. The pragma specifies that all library-level objects\n-(Counter 0 data) associated with the library unit are to be accessed\n-and updated using universal addressing (24-bit addresses for AAMP5)\n-rather than the default of 16-bit Data Environment (DENV) addressing.\n-Use of this pragma will generally result in less efficient code for\n-references to global data associated with the library unit, but\n-allows such data to be located anywhere in memory. This pragma is\n-a library unit pragma, but can also be used as a configuration pragma\n-(including use in the :file:`gnat.adc` file). The functionality\n-of this pragma is also available by applying the -univ switch on the\n-compilations of units where universal addressing of the data is desired.\n-\n .. _Pragma-Unmodified:\n \n Pragma Unmodified"}, {"sha": "07c38df6fa07ae34d4d47809777b3e9619e8492d", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -1748,8 +1748,7 @@ Alphabetical List of All Switches\n   in bits.`\n \n   ``Max_Unaligned_Field`` is the maximum size for unaligned bit field, which is\n-  64 for the majority of GCC targets (but can be different on some targets like\n-  AAMP).\n+  64 for the majority of GCC targets (but can be different on some targets).\n \n   ``Strict_Alignment`` is the equivalent of GCC macro ``STRICT_ALIGNMENT``\n   documented as follows: `Define this macro to be the value 1 if instructions\n@@ -1788,8 +1787,9 @@ Alphabetical List of All Switches\n   where ``name`` is the string name of the type (which can have\n   single spaces embedded in the name (e.g. long double), ``digs`` is\n   the number of digits for the floating-point type, ``float_rep`` is\n-  the float representation (I/V/A for IEEE-754-Binary, Vax_Native,\n-  AAMP), ``size`` is the size in bits, ``alignment`` is the\n+  the float representation (I for IEEE-754-Binary, which is\n+  the only one supported at this time),\n+  ``size`` is the size in bits, ``alignment`` is the\n   alignment in bits. The name is followed by at least two blanks, fields\n   are separated by at least one blank, and a LF character immediately\n   follows the alignment field.\n@@ -2010,8 +2010,7 @@ Alphabetical List of All Switches\n   by the front end and will be visible in the\n   :switch:`-gnatG` output.\n \n-  When using a gcc-based back end (in practice this means using any version\n-  of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n+  When using a gcc-based back end, then the use of\n   :switch:`-gnatN` is deprecated, and the use of :switch:`-gnatn` is preferred.\n   Historically front end inlining was more extensive than the gcc back end\n   inlining, but that is no longer the case.\n@@ -5694,8 +5693,7 @@ Subprogram Inlining Control\n   This switch activates front-end inlining which also\n   generates additional dependencies.\n \n-  When using a gcc-based back end (in practice this means using any version\n-  of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n+  When using a gcc-based back end, then the use of\n   :switch:`-gnatN` is deprecated, and the use of :switch:`-gnatn` is preferred.\n   Historically front end inlining was more extensive than the gcc back end\n   inlining, but that is no longer the case."}, {"sha": "39b9ca1cb09405439766152a06893a40e61948aa", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -1672,8 +1672,7 @@ additional source files as follows:\n   not require that the code generation be optimized. Like :switch:`-gnatn`,\n   the use of this switch generates additional dependencies.\n \n-  When using a gcc-based back end (in practice this means using any version\n-  of GNAT other than for the JVM, .NET or GNAAMP platforms), then the use of\n+  When using a gcc-based back end, then the use of\n   :switch:`-gnatN` is deprecated, and the use of :switch:`-gnatn` is preferred.\n   Historically front end inlining was more extensive than the gcc back end\n   inlining, but that is no longer the case."}, {"sha": "0641862b73cac694b5cda688400f07c3ea066bf7", "filename": "gcc/ada/einfo-utils.adb", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Feinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Feinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -913,6 +913,22 @@ package body Einfo.Utils is\n       end if;\n    end First_Formal_With_Extras;\n \n+   ---------------\n+   -- Float_Rep --\n+   ---------------\n+\n+   function Float_Rep (N : Entity_Id) return Float_Rep_Kind is\n+      pragma Unreferenced (N);\n+      pragma Assert (Float_Rep_Kind'First = Float_Rep_Kind'Last);\n+\n+      --  There is only one value, so we don't need to store it, see types.ads.\n+\n+      Val : constant Float_Rep_Kind := IEEE_Binary;\n+\n+   begin\n+      return Val;\n+   end Float_Rep;\n+\n    -------------------------------------\n    -- Get_Attribute_Definition_Clause --\n    -------------------------------------\n@@ -1835,9 +1851,6 @@ package body Einfo.Utils is\n                when 16 .. 33 => return 2**14;\n                when others   => return No_Uint;\n             end case;\n-\n-         when AAMP =>\n-            return Uint_2 ** Uint_7 - Uint_1;\n       end case;\n    end Machine_Emax_Value;\n \n@@ -1849,7 +1862,6 @@ package body Einfo.Utils is\n    begin\n       case Float_Rep (Id) is\n          when IEEE_Binary => return Uint_3 - Machine_Emax_Value (Id);\n-         when AAMP        => return -Machine_Emax_Value (Id);\n       end case;\n    end Machine_Emin_Value;\n \n@@ -1870,13 +1882,6 @@ package body Einfo.Utils is\n                when 19 .. 33 => return UI_From_Int (113);\n                when others   => return No_Uint;\n             end case;\n-\n-         when AAMP =>\n-            case Digs is\n-               when  1 ..  6 => return Uint_24;\n-               when  7 ..  9 => return UI_From_Int (40);\n-               when others   => return No_Uint;\n-            end case;\n       end case;\n    end Machine_Mantissa_Value;\n \n@@ -1887,9 +1892,7 @@ package body Einfo.Utils is\n    function Machine_Radix_Value (Id : E) return U is\n    begin\n       case Float_Rep (Id) is\n-         when AAMP\n-            | IEEE_Binary\n-         =>\n+         when IEEE_Binary =>\n             return Uint_2;\n       end case;\n    end Machine_Radix_Value;\n@@ -2767,6 +2770,18 @@ package body Einfo.Utils is\n       Set_DIC_Procedure (Id, V);\n    end Set_Partial_DIC_Procedure;\n \n+   -------------------\n+   -- Set_Float_Rep --\n+   -------------------\n+\n+   procedure Set_Float_Rep\n+     (Ignore_N : Entity_Id; Ignore_Val : Float_Rep_Kind) is\n+   begin\n+      pragma Assert (Float_Rep_Kind'First = Float_Rep_Kind'Last);\n+      --  There is only one value, so we don't need to store it (see\n+      --  types.ads).\n+   end Set_Float_Rep;\n+\n    -----------------------------\n    -- Set_Invariant_Procedure --\n    -----------------------------"}, {"sha": "f65dbfabca230a6e23f93d72d983b1ee8369ff9c", "filename": "gcc/ada/einfo-utils.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Feinfo-utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Feinfo-utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -196,6 +196,16 @@ package Einfo.Utils is\n    function First_Component_Or_Discriminant     (Id : E) return E;\n    function First_Formal                        (Id : E) return E;\n    function First_Formal_With_Extras            (Id : E) return E;\n+\n+   function Float_Rep\n+     (N : Entity_Id) return F with Inline, Pre =>\n+      N in E_Void_Id\n+         | Float_Kind_Id;\n+   procedure Set_Float_Rep\n+     (Ignore_N : Entity_Id; Ignore_Val : F) with Inline, Pre =>\n+      Ignore_N in E_Void_Id\n+         | Float_Kind_Id;\n+\n    function Has_Attach_Handler                  (Id : E) return B;\n    function Has_DIC                             (Id : E) return B;\n    function Has_Entries                         (Id : E) return B;"}, {"sha": "97f430a1bc57955b9ddcf400bfef0413c3ace0e5", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -2799,8 +2799,8 @@ package Einfo is\n \n --    Is_Interrupt_Handler\n --       Defined in procedures. Set if a pragma Interrupt_Handler applies\n---       to the procedure. The procedure must be parameterless, and on all\n---       targets except AAMP it must be a protected procedure.\n+--       to the procedure. The procedure must be a parameterless protected\n+--       procedure.\n \n --    Is_Intrinsic_Subprogram\n --       Defined in functions and procedures. It is set if a valid pragma"}, {"sha": "a103060fd6582dbbee329d26bb68b30b724f7bcf", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -7092,9 +7092,9 @@ package body Exp_Attr is\n             --  Start of processing for Float_Valid\n \n             begin\n-               --  The C and AAMP back-ends handle Valid for fpt types\n+               --  The C back end handles Valid for floating-point types\n \n-               if Modify_Tree_For_C or else Float_Rep (PBtyp) = AAMP then\n+               if Modify_Tree_For_C then\n                   Analyze_And_Resolve (Pref, Ptyp);\n                   Set_Etype (N, Standard_Boolean);\n                   Set_Analyzed (N);"}, {"sha": "b539e59ae4ce34286a7dbe1f8d53f86b5905f559", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -4317,8 +4317,7 @@ package body Freeze is\n \n            and then Convention (E) /= Convention_Intrinsic\n \n-           --  Assume that ASM interface knows what it is doing. This deals\n-           --  with e.g. unsigned.ads in the AAMP back end.\n+           --  Assume that ASM interface knows what it is doing\n \n            and then Convention (E) /= Convention_Assembler\n          then"}, {"sha": "0160826d97d4eaa32abc095a1e7bb931a1f63b83", "filename": "gcc/ada/gen_il-fields.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-fields.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-fields.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-fields.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -547,7 +547,6 @@ package Gen_IL.Fields is\n       First_Literal,\n       First_Private_Entity,\n       First_Rep_Item,\n-      Float_Rep,\n       Freeze_Node,\n       From_Limited_With,\n       Full_View,"}, {"sha": "ec91ef0710d659f4c8c097d4d3dc632ffa4c02f5", "filename": "gcc/ada/gen_il-gen-gen_entities.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_entities.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -280,7 +280,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (RM_Size, Uint),\n         Sm (Extra_Formal, Node_Id),\n         Sm (First_Entity, Node_Id),\n-        Sm (Float_Rep, Float_Rep_Kind, Base_Type_Only),\n         Sm (Generic_Homonym, Node_Id),\n         Sm (Generic_Renamings, Elist_Id),\n         Sm (Handler_Records, List_Id),\n@@ -659,8 +658,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        --  first named subtype).\n \n    Ab (Float_Kind, Real_Kind,\n-       (Sm (Digits_Value, Uint),\n-        Sm (Float_Rep, Float_Rep_Kind, Base_Type_Only)));\n+       (Sm (Digits_Value, Uint)));\n \n    Cc (E_Floating_Point_Type, Float_Kind);\n        --  Floating point type, used for the anonymous base type of the"}, {"sha": "61d464c9ce0a20a684d3198dcad3c9ff26fd2fbd", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -831,7 +831,7 @@ package body Gen_IL.Gen is\n \n       function Field_Size (T : Type_Enum) return Bit_Offset is\n         (case T is\n-          when Flag | Float_Rep_Kind => 1,\n+          when Flag => 1,\n \n           when Small_Paren_Count_Type | Component_Alignment_Kind => 2,\n "}, {"sha": "96231e9312f291140e70807a85aa1a8cd2b71664", "filename": "gcc/ada/gen_il-types.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-types.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgen_il-types.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-types.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -65,7 +65,6 @@ package Gen_IL.Types is\n       Convention_Id,\n \n       Component_Alignment_Kind,\n-      Float_Rep_Kind,\n       Mechanism_Type,\n \n       Between_Special_And_Abstract_Node_Types,"}, {"sha": "cd2aed28675f2b1f2662db2e70739f536c2addb8", "filename": "gcc/ada/get_targ.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fget_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fget_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -284,7 +284,7 @@ package body Get_Targ is\n \n    function Get_Max_Unaligned_Field return Pos is\n    begin\n-      return 64;  -- Can be different on some targets (e.g., AAMP)\n+      return 64;  -- Can be different on some targets\n    end Get_Max_Unaligned_Field;\n \n    -----------------------------"}, {"sha": "5c229956a17f03603d729dffb1705bf0dbc5198d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 773, "deletions": 839, "changes": 1612, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a"}, {"sha": "ef68b82829394a8771486781da86e150414f5109", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -3107,8 +3107,7 @@ that is performed by the front end of the compiler. This inlining does\n not require that the code generation be optimized. Like @code{-gnatn},\n the use of this switch generates additional dependencies.\n \n-When using a gcc-based back end (in practice this means using any version\n-of GNAT other than for the JVM, .NET or GNAAMP platforms), then the use of\n+When using a gcc-based back end, then the use of\n @code{-gnatN} is deprecated, and the use of @code{-gnatn} is preferred.\n Historically front end inlining was more extensive than the gcc back end\n inlining, but that is no longer the case.\n@@ -9287,8 +9286,7 @@ be specified in GNAT. It is computed for GCC backends as @code{BIGGEST_ALIGNMENT\n follows: @cite{Biggest alignment that any data type can require on this machine@comma{} in bits.}\n \n @code{Max_Unaligned_Field} is the maximum size for unaligned bit field, which is\n-64 for the majority of GCC targets (but can be different on some targets like\n-AAMP).\n+64 for the majority of GCC targets (but can be different on some targets).\n \n @code{Strict_Alignment} is the equivalent of GCC macro @code{STRICT_ALIGNMENT}\n documented as follows: @cite{Define this macro to be the value 1 if instructions will fail to work if given data not on the nominal alignment. If instructions will merely go slower in that case@comma{} define this macro as 0.}\n@@ -9321,8 +9319,9 @@ name  digs float_rep size alignment\n where @code{name} is the string name of the type (which can have\n single spaces embedded in the name (e.g. long double), @code{digs} is\n the number of digits for the floating-point type, @code{float_rep} is\n-the float representation (I/V/A for IEEE-754-Binary, Vax_Native,\n-AAMP), @code{size} is the size in bits, @code{alignment} is the\n+the float representation (I for IEEE-754-Binary, which is\n+the only one supported at this time),\n+@code{size} is the size in bits, @code{alignment} is the\n alignment in bits. The name is followed by at least two blanks, fields\n are separated by at least one blank, and a LF character immediately\n follows the alignment field.\n@@ -9646,8 +9645,7 @@ pragma @code{Inline} is specified. This inlining is performed\n by the front end and will be visible in the\n @code{-gnatG} output.\n \n-When using a gcc-based back end (in practice this means using any version\n-of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n+When using a gcc-based back end, then the use of\n @code{-gnatN} is deprecated, and the use of @code{-gnatn} is preferred.\n Historically front end inlining was more extensive than the gcc back end\n inlining, but that is no longer the case.\n@@ -14703,8 +14701,7 @@ see @ref{100,,Inlining of Subprograms}.\n This switch activates front-end inlining which also\n generates additional dependencies.\n \n-When using a gcc-based back end (in practice this means using any version\n-of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n+When using a gcc-based back end, then the use of\n @code{-gnatN} is deprecated, and the use of @code{-gnatn} is preferred.\n Historically front end inlining was more extensive than the gcc back end\n inlining, but that is no longer the case."}, {"sha": "a06a35c50591d5800555387b8bdc1e3a310f37c6", "filename": "gcc/ada/libgnat/a-textio.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fa-textio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fa-textio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-textio.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -715,7 +715,7 @@ private\n    --  Returns the system-specific character indicating the end of a text file.\n    --  This is exported for use by child packages such as Enumeration_Aux to\n    --  eliminate their needing to depend directly on Interfaces.C_Streams,\n-   --  which is not available in certain target environments (such as AAMP).\n+   --  which might not be available in certain target environments.\n \n    procedure Initialize_Standard_Files;\n    --  Initializes the file control blocks for the standard files. Called from"}, {"sha": "be745888652375e780cff247c4534975d84b0cbf", "filename": "gcc/ada/libgnat/g-memdum.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fg-memdum.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fg-memdum.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-memdum.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -46,9 +46,9 @@ package GNAT.Memory_Dump is\n    --  Dumps indicated number (Count) of bytes, starting at the address given\n    --  by Addr. The coding of this routine in its current form assumes the case\n    --  of a byte addressable machine (and is therefore inapplicable to machines\n-   --  like the AAMP, where the storage unit is not 8 bits). The output is one\n-   --  or more lines in the following format, which is for the case of 32-bit\n-   --  addresses (64-bit addresses are handled appropriately):\n+   --  where the storage unit is not 8 bits). The output is one or more lines\n+   --  in the following format, which is for the case of 32-bit addresses\n+   --  (64-bit addresses are handled appropriately):\n    --\n    --    0234_3368: 66 67 68 . . .  73 74 75 \"fghijklmnopqstuv\"\n    --"}, {"sha": "81394aff74ef3d8c69ef32e0e9c5636638c614b3", "filename": "gcc/ada/libgnat/s-scaval.adb", "status": "modified", "additions": 16, "deletions": 50, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fs-scaval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fs-scaval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-scaval.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -60,26 +60,17 @@ package body System.Scalar_Values is\n       EFloat : constant Boolean := Long_Long_Float'Size > Long_Float'Size;\n       --  Set True if we are on an x86 with 96-bit floats for extended\n \n-      AFloat : constant Boolean :=\n-                 Long_Float'Size = 48 and then Long_Long_Float'Size = 48;\n-      --  Set True if we are on an AAMP with 48-bit extended floating point\n-\n-      type ByteLF is array (0 .. 7 - 2 * Boolean'Pos (AFloat)) of Byte1;\n+      type ByteLF is array (0 .. 7) of Byte1;\n \n       for ByteLF'Component_Size use 8;\n \n-      --  Type used to hold Long_Float values on all targets and to initialize\n-      --  48-bit Long_Float values used on AAMP. On AAMP, this type is 6 bytes.\n-      --  On other targets the type is 8 bytes, and type Byte8 is used for\n-      --  values that are then converted to ByteLF.\n+      --  Type used to hold Long_Float values on all targets. On most targets\n+      --  the type is 8 bytes, and type Byte8 is used for values that are then\n+      --  converted to ByteLF.\n \n-      pragma Warnings (Off); --  why ???\n       function To_ByteLF is new Ada.Unchecked_Conversion (Byte8, ByteLF);\n-      pragma Warnings (On);\n \n-      type ByteLLF is\n-        array (0 .. 7 + 4 * Boolean'Pos (EFloat) - 2 * Boolean'Pos (AFloat))\n-          of Byte1;\n+      type ByteLLF is array (0 .. 7 + 4 * Boolean'Pos (EFloat)) of Byte1;\n \n       for ByteLLF'Component_Size use 8;\n \n@@ -186,16 +177,9 @@ package body System.Scalar_Values is\n          IS_Iz4 := 16#0000_0000#;\n          IS_Iz8 := 16#0000_0000_0000_0000#;\n \n-         if AFloat then\n-            IV_Isf := 16#FFFF_FF00#;\n-            IV_Ifl := 16#FFFF_FF00#;\n-            IV_Ilf := (0, 16#FF#, 16#FF#, 16#FF#, 16#FF#, 16#FF#);\n-\n-         else\n-            IV_Isf := IS_Iu4;\n-            IV_Ifl := IS_Iu4;\n-            IV_Ilf := To_ByteLF (IS_Iu8);\n-         end if;\n+         IV_Isf := IS_Iu4;\n+         IV_Ifl := IS_Iu4;\n+         IV_Ilf := To_ByteLF (IS_Iu8);\n \n          if EFloat then\n             IV_Ill := (0, 0, 0, 0, 0, 0, 0, 16#C0#, 16#FF#, 16#FF#, 0, 0);\n@@ -219,16 +203,9 @@ package body System.Scalar_Values is\n          IS_Iz4 := 16#0000_0000#;\n          IS_Iz8 := 16#0000_0000_0000_0000#;\n \n-         if AFloat then\n-            IV_Isf := 16#0000_0001#;\n-            IV_Ifl := 16#0000_0001#;\n-            IV_Ilf := (1, 0, 0, 0, 0, 0);\n-\n-         else\n-            IV_Isf := 16#FF80_0000#;\n-            IV_Ifl := 16#FF80_0000#;\n-            IV_Ilf := To_ByteLF (16#FFF0_0000_0000_0000#);\n-         end if;\n+         IV_Isf := 16#FF80_0000#;\n+         IV_Ifl := 16#FF80_0000#;\n+         IV_Ilf := To_ByteLF (16#FFF0_0000_0000_0000#);\n \n          if EFloat then\n             IV_Ill := (0, 0, 0, 0, 0, 0, 0, 16#80#, 16#FF#, 16#FF#, 0, 0);\n@@ -252,16 +229,9 @@ package body System.Scalar_Values is\n          IS_Iz4 := 16#FFFF_FFFF#;\n          IS_Iz8 := 16#FFFF_FFFF_FFFF_FFFF#;\n \n-         if AFloat then\n-            IV_Isf := 16#7FFF_FFFF#;\n-            IV_Ifl := 16#7FFF_FFFF#;\n-            IV_Ilf := (16#FF#, 16#FF#, 16#FF#, 16#FF#, 16#FF#, 16#7F#);\n-\n-         else\n-            IV_Isf := 16#7F80_0000#;\n-            IV_Ifl := 16#7F80_0000#;\n-            IV_Ilf := To_ByteLF (16#7FF0_0000_0000_0000#);\n-         end if;\n+         IV_Isf := 16#7F80_0000#;\n+         IV_Ifl := 16#7F80_0000#;\n+         IV_Ilf := To_ByteLF (16#7FF0_0000_0000_0000#);\n \n          if EFloat then\n             IV_Ill := (0, 0, 0, 0, 0, 0, 0, 16#80#, 16#FF#, 16#7F#, 0, 0);\n@@ -301,11 +271,7 @@ package body System.Scalar_Values is\n          IV_Isf := IS_Is4;\n          IV_Ifl := IS_Is4;\n \n-         if AFloat then\n-            IV_Ill := (B, B, B, B, B, B);\n-         else\n-            IV_Ilf := To_ByteLF (IS_Is8);\n-         end if;\n+         IV_Ilf := To_ByteLF (IS_Is8);\n \n          if EFloat then\n             IV_Ill := (B, B, B, B, B, B, B, B, B, B, B, B);\n@@ -317,7 +283,7 @@ package body System.Scalar_Values is\n \n       if not EFloat then\n          declare\n-            pragma Warnings (Off);  -- why???\n+            pragma Warnings (Off); -- because sizes don't match\n             function To_ByteLLF is\n               new Ada.Unchecked_Conversion (ByteLF, ByteLLF);\n             pragma Warnings (On);"}, {"sha": "7bb5696a2cfa23038546cd8a587da8555f8ef118", "filename": "gcc/ada/libgnat/s-scaval__128.adb", "status": "modified", "additions": 13, "deletions": 52, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fs-scaval__128.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Flibgnat%2Fs-scaval__128.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-scaval__128.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -60,26 +60,12 @@ package body System.Scalar_Values is\n       EFloat : constant Boolean := Long_Long_Float'Size > Long_Float'Size;\n       --  Set True if we are on an x86 with 96-bit floats for extended\n \n-      AFloat : constant Boolean :=\n-                 Long_Float'Size = 48 and then Long_Long_Float'Size = 48;\n-      --  Set True if we are on an AAMP with 48-bit extended floating point\n-\n-      type ByteLF is array (0 .. 7 - 2 * Boolean'Pos (AFloat)) of Byte1;\n+      type ByteLF is array (0 .. 7) of Byte1;\n \n       for ByteLF'Component_Size use 8;\n-\n-      --  Type used to hold Long_Float values on all targets and to initialize\n-      --  48-bit Long_Float values used on AAMP. On AAMP, this type is 6 bytes.\n-      --  On other targets the type is 8 bytes, and type Byte8 is used for\n-      --  values that are then converted to ByteLF.\n-\n-      pragma Warnings (Off); --  why ???\n       function To_ByteLF is new Ada.Unchecked_Conversion (Byte8, ByteLF);\n-      pragma Warnings (On);\n \n-      type ByteLLF is\n-        array (0 .. 7 + 4 * Boolean'Pos (EFloat) - 2 * Boolean'Pos (AFloat))\n-          of Byte1;\n+      type ByteLLF is array (0 .. 7 + 4 * Boolean'Pos (EFloat)) of Byte1;\n \n       for ByteLLF'Component_Size use 8;\n \n@@ -189,16 +175,9 @@ package body System.Scalar_Values is\n          IS_Iz8  := 16#0000_0000_0000_0000#;\n          IS_Iz16 := 16#0000_0000_0000_0000_0000_0000_0000_0000#;\n \n-         if AFloat then\n-            IV_Isf := 16#FFFF_FF00#;\n-            IV_Ifl := 16#FFFF_FF00#;\n-            IV_Ilf := (0, 16#FF#, 16#FF#, 16#FF#, 16#FF#, 16#FF#);\n-\n-         else\n-            IV_Isf := IS_Iu4;\n-            IV_Ifl := IS_Iu4;\n-            IV_Ilf := To_ByteLF (IS_Iu8);\n-         end if;\n+         IV_Isf := IS_Iu4;\n+         IV_Ifl := IS_Iu4;\n+         IV_Ilf := To_ByteLF (IS_Iu8);\n \n          if EFloat then\n             IV_Ill := (0, 0, 0, 0, 0, 0, 0, 16#C0#, 16#FF#, 16#FF#, 0, 0);\n@@ -225,16 +204,9 @@ package body System.Scalar_Values is\n          IS_Iz8  := 16#0000_0000_0000_0000#;\n          IS_Iz16 := 16#0000_0000_0000_0000_0000_0000_0000_0000#;\n \n-         if AFloat then\n-            IV_Isf := 16#0000_0001#;\n-            IV_Ifl := 16#0000_0001#;\n-            IV_Ilf := (1, 0, 0, 0, 0, 0);\n-\n-         else\n-            IV_Isf := 16#FF80_0000#;\n-            IV_Ifl := 16#FF80_0000#;\n-            IV_Ilf := To_ByteLF (16#FFF0_0000_0000_0000#);\n-         end if;\n+         IV_Isf := 16#FF80_0000#;\n+         IV_Ifl := 16#FF80_0000#;\n+         IV_Ilf := To_ByteLF (16#FFF0_0000_0000_0000#);\n \n          if EFloat then\n             IV_Ill := (0, 0, 0, 0, 0, 0, 0, 16#80#, 16#FF#, 16#FF#, 0, 0);\n@@ -261,16 +233,9 @@ package body System.Scalar_Values is\n          IS_Iz8  := 16#FFFF_FFFF_FFFF_FFFF#;\n          IS_Iz16 := 16#FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF#;\n \n-         if AFloat then\n-            IV_Isf := 16#7FFF_FFFF#;\n-            IV_Ifl := 16#7FFF_FFFF#;\n-            IV_Ilf := (16#FF#, 16#FF#, 16#FF#, 16#FF#, 16#FF#, 16#7F#);\n-\n-         else\n-            IV_Isf := 16#7F80_0000#;\n-            IV_Ifl := 16#7F80_0000#;\n-            IV_Ilf := To_ByteLF (16#7FF0_0000_0000_0000#);\n-         end if;\n+         IV_Isf := 16#7F80_0000#;\n+         IV_Ifl := 16#7F80_0000#;\n+         IV_Ilf := To_ByteLF (16#7FF0_0000_0000_0000#);\n \n          if EFloat then\n             IV_Ill := (0, 0, 0, 0, 0, 0, 0, 16#80#, 16#FF#, 16#7F#, 0, 0);\n@@ -313,11 +278,7 @@ package body System.Scalar_Values is\n          IV_Isf := IS_Is4;\n          IV_Ifl := IS_Is4;\n \n-         if AFloat then\n-            IV_Ill := (B, B, B, B, B, B);\n-         else\n-            IV_Ilf := To_ByteLF (IS_Is8);\n-         end if;\n+         IV_Ilf := To_ByteLF (IS_Is8);\n \n          if EFloat then\n             IV_Ill := (B, B, B, B, B, B, B, B, B, B, B, B);\n@@ -329,7 +290,7 @@ package body System.Scalar_Values is\n \n       if not EFloat then\n          declare\n-            pragma Warnings (Off);  -- why???\n+            pragma Warnings (Off); -- because sizes don't match\n             function To_ByteLLF is\n               new Ada.Unchecked_Conversion (ByteLF, ByteLLF);\n             pragma Warnings (On);"}, {"sha": "f7f166ccfed390dc9697b7659492701e6844296f", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -4594,18 +4594,6 @@ package body Make is\n             Add_Switch\n               (\"-aO\" & Argv (4 .. Argv'Last), Binder);\n \n-         --  -aamp_target=...\n-\n-         elsif Argv'Length >= 13 and then Argv (2 .. 13) = \"aamp_target=\" then\n-            Add_Switch (Argv, Compiler);\n-\n-            --  Set the aamp_target environment variable so that the binder and\n-            --  linker will use the proper target library. This is consistent\n-            --  with how things work when -aamp_target is passed on the command\n-            --  line to gnaampmake.\n-\n-            Setenv (\"aamp_target\", Argv (14 .. Argv'Last));\n-\n          --  -Adir (to gnatbind this is like a -aO switch, to gcc like a -I)\n \n          elsif Argv (2) = 'A' then"}, {"sha": "f481812bddd2b709af4b47671cd3c318e7137127", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -140,14 +140,12 @@ package Osint is\n    --  path) in Name_Buffer, with the length in Name_Len.\n \n    function Program_Name (Nam : String; Prog : String) return String_Access;\n-   --  In the native compilation case, Create a string containing Nam. In the\n+   --  In the native compilation case, creates a string containing Nam. In the\n    --  cross compilation case, looks at the prefix of the current program being\n-   --  run and prepend it to Nam. For instance if the program being run is\n+   --  run and prepends it to Nam. For instance if the program being run is\n    --  <target>-gnatmake and Nam is \"gcc\", the returned value will be a pointer\n-   --  to \"<target>-gcc\". In the specific case where AAMP_On_Target is set, the\n-   --  name \"gcc\" is mapped to \"gnaamp\", and names of the form \"gnat*\" are\n-   --  mapped to \"gnaamp*\". This function clobbers Name_Buffer and Name_Len.\n-   --  Also look at any suffix, e.g. gnatmake-4.1 -> \"gcc-4.1\". Prog is the\n+   --  to \"<target>-gcc\". This function clobbers Name_Buffer and Name_Len.\n+   --  Also looks at any suffix, e.g. gnatmake-4.1 -> \"gcc-4.1\". Prog is the\n    --  default name of the current program being executed, e.g. \"gnatmake\",\n    --  \"gnatlink\".\n "}, {"sha": "d701c2ccd155c14ac9fb9df7fbc51570ed5f5869", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -1379,7 +1379,6 @@ begin\n          | Pragma_Export_Function\n          | Pragma_Export_Object\n          | Pragma_Export_Procedure\n-         | Pragma_Export_Value\n          | Pragma_Export_Valued_Procedure\n          | Pragma_Extend_System\n          | Pragma_Extensions_Visible\n@@ -1523,7 +1522,6 @@ begin\n          | Pragma_Unevaluated_Use_Of_Old\n          | Pragma_Unimplemented_Unit\n          | Pragma_Universal_Aliasing\n-         | Pragma_Universal_Data\n          | Pragma_Unmodified\n          | Pragma_Unreferenced\n          | Pragma_Unreferenced_Objects"}, {"sha": "22eb168d41344c952480f1f0a561f37efe966b97", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -13591,7 +13591,8 @@ package body Sem_Ch13 is\n       Address_Clause_Checks.Init;\n       Unchecked_Conversions.Init;\n \n-      --  ??? Might be needed in the future for some non GCC back-ends\n+      --  The following might be needed in the future for some non-GCC back\n+      --  ends:\n       --  if AAMP_On_Target then\n       --     Independence_Checks.Init;\n       --  end if;"}, {"sha": "ea0a5bb5bceff0bd061f4b4d3b58a8bb0b9d82ba", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -10884,8 +10884,8 @@ package body Sem_Prag is\n       procedure Record_Independence_Check (N : Node_Id; E : Entity_Id) is\n          pragma Unreferenced (N, E);\n       begin\n-         --  For GCC back ends the validation is done a priori\n-         --  ??? This code is dead, might be useful in the future\n+         --  For GCC back ends the validation is done a priori. This code is\n+         --  dead, but might be useful in the future.\n \n          --  if not AAMP_On_Target then\n          --     return;\n@@ -16334,25 +16334,6 @@ package body Sem_Prag is\n               Arg_Mechanism       => Mechanism);\n          end Export_Procedure;\n \n-         ------------------\n-         -- Export_Value --\n-         ------------------\n-\n-         --  pragma Export_Value (\n-         --     [Value     =>] static_integer_EXPRESSION,\n-         --     [Link_Name =>] static_string_EXPRESSION);\n-\n-         when Pragma_Export_Value =>\n-            GNAT_Pragma;\n-            Check_Arg_Order ((Name_Value, Name_Link_Name));\n-            Check_Arg_Count (2);\n-\n-            Check_Optional_Identifier (Arg1, Name_Value);\n-            Check_Arg_Is_OK_Static_Expression (Arg1, Any_Integer);\n-\n-            Check_Optional_Identifier (Arg2, Name_Link_Name);\n-            Check_Arg_Is_OK_Static_Expression (Arg2, Standard_String);\n-\n          -----------------------------\n          -- Export_Valued_Procedure --\n          -----------------------------\n@@ -24977,16 +24958,6 @@ package body Sem_Prag is\n             Record_Rep_Item (E, N);\n          end Universal_Alias;\n \n-         --------------------\n-         -- Universal_Data --\n-         --------------------\n-\n-         --  pragma Universal_Data [(library_unit_NAME)];\n-\n-         when Pragma_Universal_Data =>\n-            GNAT_Pragma;\n-            Error_Pragma (\"??pragma% ignored (applies only to AAMP)\");\n-\n          ----------------\n          -- Unmodified --\n          ----------------\n@@ -31258,7 +31229,6 @@ package body Sem_Prag is\n       Pragma_Export_Function                => -1,\n       Pragma_Export_Object                  => -1,\n       Pragma_Export_Procedure               => -1,\n-      Pragma_Export_Value                   => -1,\n       Pragma_Export_Valued_Procedure        => -1,\n       Pragma_Extend_System                  => -1,\n       Pragma_Extensions_Allowed             =>  0,\n@@ -31413,7 +31383,6 @@ package body Sem_Prag is\n       Pragma_Unevaluated_Use_Of_Old         =>  0,\n       Pragma_Unimplemented_Unit             =>  0,\n       Pragma_Universal_Aliasing             =>  0,\n-      Pragma_Universal_Data                 =>  0,\n       Pragma_Unmodified                     =>  0,\n       Pragma_Unreferenced                   =>  0,\n       Pragma_Unreferenced_Objects           =>  0,"}, {"sha": "c620bebc3f5396f9e05140af9dc2e7adf9da5060", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -115,7 +115,6 @@ package Sem_Prag is\n       Pragma_Type_Invariant               => True,\n       Pragma_Unchecked_Union              => True,\n       Pragma_Universal_Aliasing           => True,\n-      Pragma_Universal_Data               => True,\n       Pragma_Unmodified                   => True,\n       Pragma_Unreferenced                 => True,\n       Pragma_Unreferenced_Objects         => True,"}, {"sha": "5af7f1ab70a4278962ef62c66f461cb8a2fab132", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -309,7 +309,6 @@ package body Set_Targ is\n             Write_Str (\"pragma Float_Representation (\");\n \n             case Float_Rep is\n-               when AAMP        => Write_Str (\"AAMP\");\n                when IEEE_Binary => Write_Str (\"IEEE\");\n             end case;\n \n@@ -532,7 +531,6 @@ package body Set_Targ is\n             AddC (' ');\n \n             case E.FLOAT_REP is\n-               when AAMP        => AddC ('A');\n                when IEEE_Binary => AddC ('I');\n             end case;\n \n@@ -795,9 +793,6 @@ package body Set_Targ is\n                when 'I'    =>\n                   E.FLOAT_REP := IEEE_Binary;\n \n-               when 'A'    =>\n-                  E.FLOAT_REP := AAMP;\n-\n                when others =>\n                   FailN (\"bad float rep field for\");\n             end case;\n@@ -880,7 +875,7 @@ begin\n          argv := save_argv;\n          argc := save_argc;\n       else\n-         --  Case of a non gcc compiler, e.g. gnat2why or gnat2scil\n+         --  Case of a non-GCC compiler, e.g. gnat2why or gnat2scil\n          argv := gnat_argv;\n          argc := gnat_argc;\n       end if;"}, {"sha": "4afd7b016afd44dd87d54e4342b36c12ed467060", "filename": "gcc/ada/set_targ.ads", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fset_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fset_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -143,12 +143,14 @@ package Set_Targ is\n    --\n    --       name  digs float_rep precision alignment\n    --\n-   --     where name is the string name of the type (which can have single\n-   --     spaces embedded in the name (e.g. long double). The name is followed\n-   --     by at least two blanks. The following fields are as described above\n-   --     for a Mode_Entry (where float_rep is I/V/A for IEEE-754-Binary,\n-   --     Vax_Native, AAMP), fields are separated by at least one blank, and\n-   --     a LF character immediately follows the alignment field.\n+   --     where name is the string name of the type (which can have\n+   --     single spaces embedded in the name (e.g. long double). The\n+   --     name is followed by at least two blanks. The following fields\n+   --     are as described above for a Mode_Entry (where float_rep is\n+   --     I for IEEE-754-Binary, which is the only Float_Rep_Kind\n+   --     currently supported), fields are separated by at least one\n+   --     blank, and a LF character immediately follows the alignment\n+   --     field.\n    --\n    --     ??? We do not write the size for backward compatibility reasons,\n    --     which means that target.atp will not be a complete description for"}, {"sha": "e5a019fc08713e7b38fd300b68d3b48314bcb1f2", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -387,10 +387,6 @@ package Snames is\n    --  Ada 83, Ada 95, and Ada 2005 mode as well, where they are technically\n    --  considered to be implementation dependent pragmas.\n \n-   --  The entries marked AAMP are AAMP specific pragmas that are recognized\n-   --  only in GNAT for the AAMP. They are ignored in other versions with\n-   --  appropriate warnings.\n-\n    First_Pragma_Name                   : constant Name_Id := N + $;\n \n    --  Configuration pragmas are grouped at start. Note that there is a list\n@@ -482,7 +478,6 @@ package Snames is\n    Name_Suppress_Exception_Locations   : constant Name_Id := N + $; -- GNAT\n    Name_Task_Dispatching_Policy        : constant Name_Id := N + $;\n    Name_Unevaluated_Use_Of_Old         : constant Name_Id := N + $; -- GNAT\n-   Name_Universal_Data                 : constant Name_Id := N + $; -- AAMP\n    Name_Unsuppress                     : constant Name_Id := N + $; -- Ada 05\n    Name_Use_VADS_Size                  : constant Name_Id := N + $; -- GNAT\n    Name_Validity_Checks                : constant Name_Id := N + $; -- GNAT\n@@ -547,7 +542,6 @@ package Snames is\n    Name_Export_Function                : constant Name_Id := N + $; -- GNAT\n    Name_Export_Object                  : constant Name_Id := N + $; -- GNAT\n    Name_Export_Procedure               : constant Name_Id := N + $; -- GNAT\n-   Name_Export_Value                   : constant Name_Id := N + $; -- GNAT\n    Name_Export_Valued_Procedure        : constant Name_Id := N + $; -- GNAT\n    Name_Extensions_Visible             : constant Name_Id := N + $; -- GNAT\n    Name_External                       : constant Name_Id := N + $; -- GNAT\n@@ -1811,7 +1805,6 @@ package Snames is\n       Pragma_Suppress_Exception_Locations,\n       Pragma_Task_Dispatching_Policy,\n       Pragma_Unevaluated_Use_Of_Old,\n-      Pragma_Universal_Data,\n       Pragma_Unsuppress,\n       Pragma_Use_VADS_Size,\n       Pragma_Validity_Checks,\n@@ -1862,7 +1855,6 @@ package Snames is\n       Pragma_Export_Function,\n       Pragma_Export_Object,\n       Pragma_Export_Procedure,\n-      Pragma_Export_Value,\n       Pragma_Export_Valued_Procedure,\n       Pragma_Extensions_Visible,\n       Pragma_External,"}, {"sha": "8ea9c272e83d257bdce74c48eef8724c89586972", "filename": "gcc/ada/switch.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fswitch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Fswitch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -79,7 +79,7 @@ package Switch is\n    --  Returns True iff Switch_Chars represents an internal GCC switch to be\n    --  followed by a single argument, such as -dumpbase, or --param.\n    --  Even though passed by the \"gcc\" driver, these need not be stored in ALI\n-   --  files and may safely be ignored by non GCC back-ends.\n+   --  files and may safely be ignored by non-GCC back ends.\n \n    function Switch_Last (Switch_Chars : String) return Natural;\n    --  Index in Switch_Chars of the last relevant character for later string"}, {"sha": "28465ea6c7e7bba0c4081d887ec1c8feb830f652", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -177,12 +177,12 @@ package Targparm is\n    --  The default values here are used if no value is found in system.ads.\n    --  This should normally happen if the special version of system.ads used\n    --  by the compiler itself is in use or if the value is only relevant to a\n-   --  particular target (e.g. AAMP). The default values are suitable for use\n-   --  in normal environments. This approach allows the possibility of new\n-   --  versions of the compiler (possibly with new system parameters added)\n-   --  being used to compile older versions of the compiler sources, as well as\n-   --  avoiding duplicating values in all system-*.ads files for flags that are\n-   --  used on a few platforms only.\n+   --  particular target. The default values are suitable for use in normal\n+   --  environments. This approach allows the possibility of new versions of\n+   --  the compiler (possibly with new system parameters added) being used to\n+   --  compile older versions of the compiler sources, as well as avoiding\n+   --  duplicating values in all system-*.ads files for flags that are used on\n+   --  a few platforms only.\n \n    --  All these parameters should be regarded as read only by all clients\n    --  of the package. The only way they get modified is by calling the\n@@ -469,19 +469,19 @@ package Targparm is\n    -- Command Line Arguments --\n    ----------------------------\n \n-   --  For most ports of GNAT, command line arguments are supported. The\n-   --  following flag is set to False for targets that do not support\n-   --  command line arguments (VxWorks and AAMP). Note that support of\n-   --  command line arguments is not required on such targets (RM A.15(13)).\n+   --  Command line arguments are supported on most targets. The following flag\n+   --  is set to False for targets that do not support command line arguments\n+   --  (i.e. VxWorks). Note that support for command line arguments is not\n+   --  required on such targets (RM A.15(13)).\n \n    Command_Line_Args_On_Target : Boolean := True;\n    --  Set False if no command line arguments on target. Note that if this\n    --  is False in with Configurable_Run_Time_On_Target set to True, then\n    --  this causes suppression of generation of the argv/argc variables\n    --  used to record command line arguments.\n \n-   --  Similarly, most ports support the use of an exit status, but AAMP\n-   --  is an exception (as allowed by RM A.15(18-20))\n+   --  Similarly, most targets support the use of an exit status, but other\n+   --  targets might not, as allowed by RM A.15(18-20).\n \n    Exit_Status_Supported_On_Target : Boolean := True;\n    --  Set False if returning of an exit status is not supported on target."}, {"sha": "a74bfb607de514e93041162f166dd969e37767d4", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9324e07dbd14cf1da1627676b5f4aeb6ba606e4a/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=9324e07dbd14cf1da1627676b5f4aeb6ba606e4a", "patch": "@@ -837,9 +837,10 @@ package Types is\n    -- Floating Point Representation --\n    -----------------------------------\n \n-   type Float_Rep_Kind is (\n-      IEEE_Binary,  -- IEEE 754p conforming binary format\n-      AAMP);        -- AAMP format\n+   type Float_Rep_Kind is (IEEE_Binary);\n+   --  The only one supported now is IEEE 754p conforming binary format, but\n+   --  other formats were supported in the past, and could conceivably be\n+   --  supported in the future, so we keep this singleton enumeration type.\n \n    ----------------------------\n    -- Small_Paren_Count_Type --"}]}