{"sha": "0026dd0a639f02445d2019be7873a17313af0c16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyNmRkMGE2MzlmMDI0NDVkMjAxOWJlNzg3M2ExNzMxM2FmMGMxNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-12T12:57:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-12T12:57:23Z"}, "message": "[multiple changes]\n\n2016-10-12  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch10.adb (Remove_Limited_With_Clause): Add a check to\n\tdetect accidental visibility.\n\n2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_Allocator): If the expression is a qualified\n\texpression, add a predicate check after the constraint check.\n\t* sem_res.adb (Resolve_Qualified_Expression): If context is an\n\tallocator, do not apply predicate check, as it will be done when\n\tallocator is expanded.\n\nFrom-SVN: r241040", "tree": {"sha": "fc043b3f21db42e44f808b03a55cc39939085f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc043b3f21db42e44f808b03a55cc39939085f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0026dd0a639f02445d2019be7873a17313af0c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0026dd0a639f02445d2019be7873a17313af0c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0026dd0a639f02445d2019be7873a17313af0c16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0026dd0a639f02445d2019be7873a17313af0c16/comments", "author": null, "committer": null, "parents": [{"sha": "84a62ce88b6b105f923130d6c55f8a01b38a43a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a62ce88b6b105f923130d6c55f8a01b38a43a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a62ce88b6b105f923130d6c55f8a01b38a43a2"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "33383e7b55e8304ea02d3e22ce41fd44521b5b33", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0026dd0a639f02445d2019be7873a17313af0c16", "patch": "@@ -1,3 +1,16 @@\n+2016-10-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch10.adb (Remove_Limited_With_Clause): Add a check to\n+\tdetect accidental visibility.\n+\n+2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator): If the expression is a qualified\n+\texpression, add a predicate check after the constraint check.\n+\t* sem_res.adb (Resolve_Qualified_Expression): If context is an\n+\tallocator, do not apply predicate check, as it will be done when\n+\tallocator is expanded.\n+\n 2016-10-12  Bob Duff  <duff@adacore.com>\n \n \t* xref_lib.adb: Use renamings-of-slices to ensure"}, {"sha": "77b70127b5076b89ccd9948e04130aabe6bdee83", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=0026dd0a639f02445d2019be7873a17313af0c16", "patch": "@@ -4279,8 +4279,13 @@ package body Exp_Ch4 is\n       --  in the aggregate might not match the subtype mark in the allocator.\n \n       if Nkind (Expression (N)) = N_Qualified_Expression then\n-         Apply_Constraint_Check\n-           (Expression (Expression (N)), Etype (Expression (N)));\n+         declare\n+            Exp : constant Node_Id := Expression (Expression (N));\n+            Typ : constant Entity_Id := Etype (Expression (N));\n+         begin\n+            Apply_Constraint_Check (Exp, Typ);\n+            Apply_Predicate_Check  (Exp, Typ);\n+         end;\n \n          Expand_Allocator_Expression (N);\n          return;"}, {"sha": "115b2dd1e7765b2f66ee806dd793af61a34a26d7", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=0026dd0a639f02445d2019be7873a17313af0c16", "patch": "@@ -6377,6 +6377,13 @@ package body Sem_Ch10 is\n       --  Limited_Withed_Unit.\n \n       else\n+         --  If the limited_with_clause is in some other unit in the context\n+         --  then it is not visible in the main unit.\n+\n+         if not In_Extended_Main_Source_Unit (N) then\n+            Set_Is_Immediately_Visible (P, False);\n+         end if;\n+\n          --  Real entities that are type or subtype declarations were hidden\n          --  from visibility at the point of installation of the limited-view.\n          --  Now we recover the previous value of the hidden attribute."}, {"sha": "86691d9e9a5a8c96de6bb745177499ca7986991b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0026dd0a639f02445d2019be7873a17313af0c16/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=0026dd0a639f02445d2019be7873a17313af0c16", "patch": "@@ -9495,7 +9495,12 @@ package body Sem_Res is\n          then\n             null;\n \n-         elsif Nkind (N) = N_Qualified_Expression then\n+         --  In the case of a qualified expression in an allocator, the check\n+         --  is applied when expanding the allocator, so avoid redundant check.\n+\n+         elsif Nkind (N) = N_Qualified_Expression\n+           and then Nkind (Parent (N)) /= N_Allocator\n+         then\n             Apply_Predicate_Check (N, Target_Typ);\n          end if;\n       end if;"}]}