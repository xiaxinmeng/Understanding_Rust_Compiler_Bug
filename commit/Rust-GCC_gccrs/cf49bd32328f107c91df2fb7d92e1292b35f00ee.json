{"sha": "cf49bd32328f107c91df2fb7d92e1292b35f00ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0OWJkMzIzMjhmMTA3YzkxZGYyZmI3ZDkyZTEyOTJiMzVmMDBlZQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2010-06-22T07:22:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T07:22:17Z"}, "message": "sem_util.adb (Build_Actual_Subtype): Record original expression in Related_Expression attribute of the constructed...\n\n2010-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb (Build_Actual_Subtype): Record original expression in\n\tRelated_Expression attribute of the constructed subtype.\n\t* einfo.adb, einfo.ads (Underlying_View): Move to Node28 to free up\n\tNode24 on types for...\n\t(Related_Expression): Make attribute available on types as well.\n\nFrom-SVN: r161138", "tree": {"sha": "8b04c8d5ad7275531f7e225f5ffa357f54c8acd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b04c8d5ad7275531f7e225f5ffa357f54c8acd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf49bd32328f107c91df2fb7d92e1292b35f00ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf49bd32328f107c91df2fb7d92e1292b35f00ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf49bd32328f107c91df2fb7d92e1292b35f00ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf49bd32328f107c91df2fb7d92e1292b35f00ee/comments", "author": null, "committer": null, "parents": [{"sha": "841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841dd0f5e68139c1a695c983b6f3372a4c5c7bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841dd0f5e68139c1a695c983b6f3372a4c5c7bad"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "76c3f151827b1f2324a7f767d838473272689f5c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cf49bd32328f107c91df2fb7d92e1292b35f00ee", "patch": "@@ -1,3 +1,11 @@\n+2010-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb (Build_Actual_Subtype): Record original expression in\n+\tRelated_Expression attribute of the constructed subtype.\n+\t* einfo.adb, einfo.ads (Underlying_View): Move to Node28 to free up\n+\tNode24 on types for...\n+\t(Related_Expression): Make attribute available on types as well.\n+\n 2010-06-22  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_util.adb (Find_Interface_ADT): Retrieve Designated_Type instead of"}, {"sha": "8686a87aa71fbdd60706e9527dd3c527f19f9b79", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=cf49bd32328f107c91df2fb7d92e1292b35f00ee", "patch": "@@ -208,7 +208,6 @@ package body Einfo is\n \n    --    Related_Expression              Node24\n    --    Spec_PPC_List                   Node24\n-   --    Underlying_Record_View          Node24\n \n    --    Interface_Alias                 Node25\n    --    Interfaces                      Elist25\n@@ -228,6 +227,7 @@ package body Einfo is\n    --    Wrapped_Entity                  Node27\n \n    --    Extra_Formals                   Node28\n+   --    Underlying_Record_View          Node28\n \n    ---------------------------------------------\n    -- Usage of Flags in Defining Entity Nodes --\n@@ -2434,7 +2434,8 @@ package body Einfo is\n \n    function Related_Expression (Id : E) return N is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      pragma Assert (Is_Type (Id)\n+                       or else Ekind_In (Id, E_Constant, E_Variable));\n       return Node24 (Id);\n    end Related_Expression;\n \n@@ -2656,7 +2657,7 @@ package body Einfo is\n \n    function Underlying_Record_View (Id : E) return E is\n    begin\n-      return Node24 (Id);\n+      return Node28 (Id);\n    end Underlying_Record_View;\n \n    function Universal_Aliasing (Id : E) return B is\n@@ -2938,6 +2939,12 @@ package body Einfo is\n    -- Attribute Set Procedures --\n    ------------------------------\n \n+   --  Note: in many of these set procedures an \"obvious\" assertion is missing.\n+   --  The reason for this is that in many cases, a field is set before the\n+   --  Ekind field is set, so that the field is set when Ekind = E_Void. It\n+   --  it is possible to add assertions that specifically include the E_Void\n+   --  possibility, but in some cases, we just omit the assertions.\n+\n    procedure Set_Accept_Address (Id : E; V : L) is\n    begin\n       Set_Elist21 (Id, V);\n@@ -5114,7 +5121,7 @@ package body Einfo is\n    procedure Set_Underlying_Record_View (Id : E; V : E) is\n    begin\n       pragma Assert (Ekind (Id) = E_Record_Type);\n-      Set_Node24 (Id, V);\n+      Set_Node28 (Id, V);\n    end Set_Underlying_Record_View;\n \n    procedure Set_Universal_Aliasing (Id : E; V : B := True) is\n@@ -7894,14 +7901,11 @@ package body Einfo is\n          when Subprogram_Kind                              =>\n             Write_Str (\"Spec_PPC_List\");\n \n-         when E_Record_Type                                =>\n-            Write_Str (\"Underlying_Record_View\");\n-\n-         when E_Variable | E_Constant                      =>\n+         when E_Variable | E_Constant | Type_Kind          =>\n             Write_Str (\"Related_Expression\");\n \n          when others                                       =>\n-            Write_Str (\"???\");\n+            Write_Str (\"Field24???\");\n       end case;\n    end Write_Field24_Name;\n \n@@ -8005,6 +8009,9 @@ package body Einfo is\n          when E_Procedure | E_Function | E_Entry           =>\n             Write_Str (\"Extra_Formals\");\n \n+         when E_Record_Type =>\n+            Write_Str (\"Underlying_Record_View\");\n+\n          when others                                       =>\n             Write_Str (\"Field28??\");\n       end case;"}, {"sha": "3eb35288fb17fb86ba104087aff5259d3f899570", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=cf49bd32328f107c91df2fb7d92e1292b35f00ee", "patch": "@@ -3244,9 +3244,13 @@ package Einfo is\n --       only for type-related error messages.\n \n --    Related_Expression (Node24)\n---       Present in variables generated internally. Denotes the source\n---       expression whose elaboration created the variable declaration.\n---       Used for clearer messages from CodePeer.\n+--       Present in variables and types. Set only for internally generated\n+--       entities, where it may be used to denote the source expression whose\n+--       elaboration created the variable declaration. If set, it is used\n+--       for generating clearer messages from CodePeer.\n+--\n+--       Shouldn't it also be used for the same purpose in errout? It seems\n+--       odd to have two mechanisms here???\n \n --    Related_Instance (Node15)\n --       Present in the wrapper packages created for subprogram instances.\n@@ -3539,12 +3543,13 @@ package Einfo is\n --       value may be passed around, and if used, may clobber a local variable.\n \n --    Task_Body_Procedure (Node25)\n---       Present in task types and subtypes. Points to the entity for\n---       the task body procedure (as further described in Exp_Ch9, task\n---       bodies are expanded into procedures). A convenient function to\n---       retrieve this field is Sem_Util.Get_Task_Body_Procedure.\n---       The last sentence is odd ??? Why not have Task_Body_Procedure\n---       go to the Underlying_Type of the Root_Type???\n+--       Present in task types and subtypes. Points to the entity for the task\n+--       task body procedure (as further described in Exp_Ch9, task bodies are\n+--       expanded into procedures). A convenient function to retrieve this\n+--       field is Sem_Util.Get_Task_Body_Procedure.\n+--\n+--       The last sentence is odd??? Why not have Task_Body_Procedure go to the\n+--       Underlying_Type of the Root_Type???\n \n --    Treat_As_Volatile (Flag41)\n --       Present in all type entities, and also in constants, components and\n@@ -3591,7 +3596,7 @@ package Einfo is\n --       private completion. If Td is already constrained, then its full view\n --       can serve directly as the full view of T.\n \n---    Underlying_Record_View (Node24)\n+--    Underlying_Record_View (Node28)\n --       Present in record types. Set for record types that are extensions of\n --       types with unknown discriminants, and also set for internally built\n --       underlying record views to reference its original record type. Record\n@@ -4599,6 +4604,7 @@ package Einfo is\n    --    Esize                               (Uint12)\n    --    RM_Size                             (Uint13)\n    --    Alignment                           (Uint14)\n+   --    Related_Expression                  (Node24)\n \n    --    Depends_On_Private                  (Flag14)\n    --    Discard_Names                       (Flag88)\n@@ -5290,8 +5296,8 @@ package Einfo is\n    --    Discriminant_Constraint             (Elist21)\n    --    Corresponding_Remote_Type           (Node22)\n    --    Stored_Constraint                   (Elist23)\n-   --    Underlying_Record_View              (Node24)   (base type only)\n    --    Interfaces                          (Elist25)\n+   --    Underlying_Record_View              (Node28)   (base type only)\n    --    Component_Alignment                 (special)  (base type only)\n    --    C_Pass_By_Copy                      (Flag125)  (base type only)\n    --    Has_Dispatch_Table                  (Flag220)  (base tagged type only)"}, {"sha": "df56bc5e0c2d54d9b2e7bf018ed87d8bc865b8fe", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf49bd32328f107c91df2fb7d92e1292b35f00ee/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cf49bd32328f107c91df2fb7d92e1292b35f00ee", "patch": "@@ -398,7 +398,7 @@ package body Sem_Util is\n          end loop;\n       end if;\n \n-      Subt := Make_Temporary (Loc, 'S');\n+      Subt := Make_Temporary (Loc, 'S', Related_Node => N);\n       Set_Is_Internal (Subt);\n \n       Decl :="}]}