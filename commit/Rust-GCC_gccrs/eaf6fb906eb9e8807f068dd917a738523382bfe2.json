{"sha": "eaf6fb906eb9e8807f068dd917a738523382bfe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFmNmZiOTA2ZWI5ZTg4MDdmMDY4ZGQ5MTdhNzM4NTIzMzgyYmZlMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-05-19T16:04:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-05-19T16:04:22Z"}, "message": "re PR c++/26433 (Syntax error using __FUNCTION__ in catch handler)\n\n\tPR c++/26433\n\t* cp-tree.h (begin_function_try_block): Change prototype.\n\t(finish_function_handler_sequence): Likewise.\n\t* parser.c (cp_parser_function_try_block): Adjust calls.\n\t* pt.c (tsubst_expr): Adjust calls.\n\t* semantics.c (begin_function_try_block): Create an artificial\n\touter scope.\n\t(finish_function_handler_sequence): Close it.\n\tPR c++/26433\n\t* g++.dg/template/fntry1.C: New test.\n\nFrom-SVN: r113911", "tree": {"sha": "87a70819ab712edee728af13b2ec95fe70702bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87a70819ab712edee728af13b2ec95fe70702bdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaf6fb906eb9e8807f068dd917a738523382bfe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf6fb906eb9e8807f068dd917a738523382bfe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf6fb906eb9e8807f068dd917a738523382bfe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf6fb906eb9e8807f068dd917a738523382bfe2/comments", "author": null, "committer": null, "parents": [{"sha": "affaef6e07c544cef985d95e213b6942fe1988da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/affaef6e07c544cef985d95e213b6942fe1988da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/affaef6e07c544cef985d95e213b6942fe1988da"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "4308862680fa8d486304eab92336c286da4b6077", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eaf6fb906eb9e8807f068dd917a738523382bfe2", "patch": "@@ -1,3 +1,14 @@\n+2006-05-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/26433\n+\t* cp-tree.h (begin_function_try_block): Change prototype.\n+\t(finish_function_handler_sequence): Likewise.\n+\t* parser.c (cp_parser_function_try_block): Adjust calls.\n+\t* pt.c (tsubst_expr): Adjust calls.\n+\t* semantics.c (begin_function_try_block): Create an artificial\n+\touter scope.\n+\t(finish_function_handler_sequence): Close it.\n+\n 2006-05-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27471"}, {"sha": "ed5c330a5586f992445c3c92471e5decd3f72b7a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eaf6fb906eb9e8807f068dd917a738523382bfe2", "patch": "@@ -4190,9 +4190,9 @@ extern void finish_try_block\t\t\t(tree);\n extern tree begin_eh_spec_block\t\t\t(void);\n extern void finish_eh_spec_block\t\t(tree, tree);\n extern void finish_handler_sequence\t\t(tree);\n-extern tree begin_function_try_block\t\t(void);\n+extern tree begin_function_try_block\t\t(tree *);\n extern void finish_function_try_block\t\t(tree);\n-extern void finish_function_handler_sequence    (tree);\n+extern void finish_function_handler_sequence    (tree, tree);\n extern void finish_cleanup_try_block\t\t(tree);\n extern tree begin_handler\t\t\t(void);\n extern void finish_handler_parms\t\t(tree, tree);"}, {"sha": "74934fbcc31ad64cbbc56769ff777c07fbf7f23d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=eaf6fb906eb9e8807f068dd917a738523382bfe2", "patch": "@@ -14225,14 +14225,15 @@ cp_parser_try_block (cp_parser* parser)\n static bool\n cp_parser_function_try_block (cp_parser* parser)\n {\n+  tree compound_stmt;\n   tree try_block;\n   bool ctor_initializer_p;\n \n   /* Look for the `try' keyword.  */\n   if (!cp_parser_require_keyword (parser, RID_TRY, \"`try'\"))\n     return false;\n   /* Let the rest of the front-end know where we are.  */\n-  try_block = begin_function_try_block ();\n+  try_block = begin_function_try_block (&compound_stmt);\n   /* Parse the function-body.  */\n   ctor_initializer_p\n     = cp_parser_ctor_initializer_opt_and_function_body (parser);\n@@ -14241,7 +14242,7 @@ cp_parser_function_try_block (cp_parser* parser)\n   /* Parse the handlers.  */\n   cp_parser_handler_seq (parser);\n   /* We're done with the handlers.  */\n-  finish_function_handler_sequence (try_block);\n+  finish_function_handler_sequence (try_block, compound_stmt);\n \n   return ctor_initializer_p;\n }"}, {"sha": "8db24ca039c1834cb16e788604e00b7eb59f646a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eaf6fb906eb9e8807f068dd917a738523382bfe2", "patch": "@@ -8405,8 +8405,10 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t}\n       else\n \t{\n+\t  tree compound_stmt = NULL_TREE;\n+\n \t  if (FN_TRY_BLOCK_P (t))\n-\t    stmt = begin_function_try_block ();\n+\t    stmt = begin_function_try_block (&compound_stmt);\n \t  else\n \t    stmt = begin_try_block ();\n \n@@ -8419,7 +8421,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n \t  tsubst_expr (TRY_HANDLERS (t), args, complain, in_decl);\n \t  if (FN_TRY_BLOCK_P (t))\n-\t    finish_function_handler_sequence (stmt);\n+\t    finish_function_handler_sequence (stmt, compound_stmt);\n \t  else\n \t    finish_handler_sequence (stmt);\n \t}"}, {"sha": "6af4564b95a9345c45bf77ac7c64e8c752f75d79", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=eaf6fb906eb9e8807f068dd917a738523382bfe2", "patch": "@@ -975,12 +975,18 @@ begin_try_block (void)\n   return r;\n }\n \n-/* Likewise, for a function-try-block.  */\n+/* Likewise, for a function-try-block.  The block returned in\n+   *COMPOUND_STMT is an artificial outer scope, containing the\n+   function-try-block.  */\n \n tree\n-begin_function_try_block (void)\n+begin_function_try_block (tree *compound_stmt)\n {\n-  tree r = begin_try_block ();\n+  tree r;\n+  /* This outer scope does not exist in the C++ standard, but we need\n+     a place to put __FUNCTION__ and similar variables.  */\n+  *compound_stmt = begin_compound_stmt (0);\n+  r = begin_try_block ();\n   FN_TRY_BLOCK_P (r) = 1;\n   return r;\n }\n@@ -1034,13 +1040,16 @@ finish_handler_sequence (tree try_block)\n   check_handlers (TRY_HANDLERS (try_block));\n }\n \n-/* Likewise, for a function-try-block.  */\n+/* Finish the handler-seq for a function-try-block, given by\n+   TRY_BLOCK.  COMPOUND_STMT is the outer block created by\n+   begin_function_try_block.  */\n \n void\n-finish_function_handler_sequence (tree try_block)\n+finish_function_handler_sequence (tree try_block, tree compound_stmt)\n {\n   in_function_try_handler = 0;\n   finish_handler_sequence (try_block);\n+  finish_compound_stmt (compound_stmt);\n }\n \n /* Begin a handler.  Returns a HANDLER if appropriate.  */"}, {"sha": "78025fcecf33c81f8def37f490285233f94c4cbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eaf6fb906eb9e8807f068dd917a738523382bfe2", "patch": "@@ -1,3 +1,8 @@\n+2006-05-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/26433\n+\t* g++.dg/template/fntry1.C: New test.\n+\n 2006-05-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27471"}, {"sha": "80b2affa86a396dba9bb6f293eb38b94514f5f67", "filename": "gcc/testsuite/g++.dg/template/fntry1.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffntry1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf6fb906eb9e8807f068dd917a738523382bfe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffntry1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffntry1.C?ref=eaf6fb906eb9e8807f068dd917a738523382bfe2", "patch": "@@ -0,0 +1,42 @@\n+// PR c++/26433\n+\n+int get_int()\n+{\n+  throw 1;\n+\n+  return 0;\n+}\n+\n+template <class _T> class Test\n+{\n+public:\n+  Test()\n+        try\n+\t: i(get_int())\n+  {\n+    i++;\n+  }\n+  catch(...)\n+  {\n+    // Syntax error caused by undefined __FUNCTION__.\n+    const char* ptr = __FUNCTION__;\n+  }\n+\n+private:\n+  int i;\n+  _T t;\n+};\n+\n+int main()\n+{\n+    try\n+      {\n+        Test<int> test;\n+      }\n+    catch(...)\n+      {\n+        return 1;\n+      }\n+\n+    return 0;\n+}"}]}