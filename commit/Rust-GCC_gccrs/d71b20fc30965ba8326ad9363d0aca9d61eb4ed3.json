{"sha": "d71b20fc30965ba8326ad9363d0aca9d61eb4ed3", "node_id": "C_kwDOANBUbNoAKGQ3MWIyMGZjMzA5NjViYTgzMjZhZDkzNjNkMGFjYTlkNjFlYjRlZDM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-25T12:05:56Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-12-09T09:18:56Z"}, "message": "i386: fix assert (__builtin_cpu_supports (\"x86-64\") >= 0)\n\nSimilar story as PR103661, we again return a negative number\nfor __builtin_cpu_supports:\n\nDocumentation says:\n\nint __builtin_cpu_supports(const char *feature)\nThis function returns a positive integer if the run-time CPU supports feature and returns 0 otherwise.\nwhile we return -2147483648.\n\nMoreover, I noticed \"x86-64\" is not a valid option for __builtin_cpu_is,\nbut for __builtin_cpu_supports.\n\nPR target/107551\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtins.cc (fold_builtin_cpu): Use same path\n\tas for PR103661.\n\t* doc/extend.texi: Fix \"x86-64\" use.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/builtin_target.c: Add more checks.", "tree": {"sha": "470e936d054bb69971ad67434cd4345f5108bfa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/470e936d054bb69971ad67434cd4345f5108bfa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e4b8dc477c12f303171ec7f0394c97494095545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4b8dc477c12f303171ec7f0394c97494095545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4b8dc477c12f303171ec7f0394c97494095545"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "01192ef4259a2f082d6889edfca90b6cab3b3506", "filename": "gcc/config/i386/i386-builtins.cc", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc?ref=d71b20fc30965ba8326ad9363d0aca9d61eb4ed3", "patch": "@@ -2181,18 +2181,14 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t      varpool_node::add (ix86_cpu_features2_var);\n \t    }\n \n+\t  /* Skip __cpu_features[0].  */\n \t  feature -= INT_TYPE_SIZE;\n-\t  field_val = 1U << (feature % INT_TYPE_SIZE);\n \t  tree index = size_int (feature / INT_TYPE_SIZE);\n+\t  feature = feature % INT_TYPE_SIZE;\n \t  array_elt = build4 (ARRAY_REF, unsigned_type_node,\n \t\t\t      ix86_cpu_features2_var,\n \t\t\t      index, NULL_TREE, NULL_TREE);\n \t  /* Return __cpu_features2[index] & field_val  */\n-\t  final = build2 (BIT_AND_EXPR, unsigned_type_node,\n-\t\t\t  array_elt,\n-\t\t\t  build_int_cstu (unsigned_type_node,\n-\t\t\t\t\t  field_val));\n-\t  return build1 (NOP_EXPR, integer_type_node, final);\n \t}\n       else\n \t{\n@@ -2209,16 +2205,17 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t  array_elt = build4 (ARRAY_REF, unsigned_type_node, ref,\n \t\t\t      integer_zero_node, NULL_TREE, NULL_TREE);\n \n-\t  field_val = (1U << feature);\n \t  /* Return __cpu_model.__cpu_features[0] & field_val  */\n-\t  final = build2 (BIT_AND_EXPR, unsigned_type_node, array_elt,\n-\t\t\t  build_int_cstu (unsigned_type_node, field_val));\n-\t  if (feature == (INT_TYPE_SIZE - 1))\n-\t    return build2 (NE_EXPR, integer_type_node, final,\n-\t\t\t   build_int_cst (unsigned_type_node, 0));\n-\t  else\n-\t    return build1 (NOP_EXPR, integer_type_node, final);\n \t}\n+\n+      field_val = 1U << feature;\n+      final = build2 (BIT_AND_EXPR, unsigned_type_node, array_elt,\n+\t\t      build_int_cstu (unsigned_type_node, field_val));\n+      if (feature == INT_TYPE_SIZE - 1)\n+\treturn build2 (NE_EXPR, integer_type_node, final,\n+\t\t       build_int_cst (unsigned_type_node, 0));\n+      else\n+\treturn build1 (NOP_EXPR, integer_type_node, final);\n     }\n   gcc_unreachable ();\n }"}, {"sha": "d3812fa55b0711a2dfc684570656d50cf2567d40", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d71b20fc30965ba8326ad9363d0aca9d61eb4ed3", "patch": "@@ -21897,18 +21897,6 @@ AMD Family 19h Zen version 3.\n \n @item znver4\n AMD Family 19h Zen version 4.\n-\n-@item x86-64\n-Baseline x86-64 microarchitecture level (as defined in x86-64 psABI).\n-\n-@item x86-64-v2\n-x86-64-v2 microarchitecture level.\n-\n-@item x86-64-v3\n-x86-64-v3 microarchitecture level.\n-\n-@item x86-64-v4\n-x86-64-v4 microarchitecture level.\n @end table\n \n Here is an example:\n@@ -22002,6 +21990,16 @@ VPCLMULQDQ instructions.\n AVX512VNNI instructions.\n @item avx512bitalg\n AVX512BITALG instructions.\n+@item x86-64\n+Baseline x86-64 microarchitecture level (as defined in x86-64 psABI).\n+@item x86-64-v2\n+x86-64-v2 microarchitecture level.\n+@item x86-64-v3\n+x86-64-v3 microarchitecture level.\n+@item x86-64-v4\n+x86-64-v4 microarchitecture level.\n+\n+\n @end table\n \n Here is an example:"}, {"sha": "fff643c13b0038e31a1bef03a9932759159ccbe4", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b20fc30965ba8326ad9363d0aca9d61eb4ed3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=d71b20fc30965ba8326ad9363d0aca9d61eb4ed3", "patch": "@@ -95,6 +95,11 @@ quick_check ()\n \n   assert (__builtin_cpu_supports (\"avx512vpopcntdq\") >= 0);\n \n+  assert (__builtin_cpu_supports (\"x86-64\") >= 0);\n+  assert (__builtin_cpu_supports (\"x86-64-v2\") >= 0);\n+  assert (__builtin_cpu_supports (\"x86-64-v3\") >= 0);\n+  assert (__builtin_cpu_supports (\"x86-64-v4\") >= 0);\n+\n   /* Check CPU type.  */\n   assert (__builtin_cpu_is (\"amd\") >= 0);\n "}]}