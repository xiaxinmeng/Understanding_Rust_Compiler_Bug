{"sha": "61218d193a20df95d34fa975b296448d382416a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyMThkMTkzYTIwZGY5NWQzNGZhOTc1YjI5NjQ0OGQzODI0MTZhOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-04-14T14:32:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-04-14T14:32:55Z"}, "message": "builtins.c (fold_builtin_isdigit): New.\n\n\t* builtins.c (fold_builtin_isdigit): New.\n\t(fold_builtin): Handle BUILT_IN_ISDIGIT.\n\t* defaults.h: Add TARGET_DIGIT0 and sort.\n\t* doc/tm.texi: Add TARGET_BS and TARGET_DIGIT0.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-ctype-2.c: Test builtin isdigit.\n\nFrom-SVN: r80681", "tree": {"sha": "b2e6c7ae95cb2b492212b0a6b74fce0105912227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2e6c7ae95cb2b492212b0a6b74fce0105912227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61218d193a20df95d34fa975b296448d382416a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61218d193a20df95d34fa975b296448d382416a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61218d193a20df95d34fa975b296448d382416a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61218d193a20df95d34fa975b296448d382416a8/comments", "author": null, "committer": null, "parents": [{"sha": "a69934e07eb54b76012e32a6aee54fe6af1faaa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69934e07eb54b76012e32a6aee54fe6af1faaa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a69934e07eb54b76012e32a6aee54fe6af1faaa9"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "0312f28019968a915087e9cba803edf92e1ec8b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61218d193a20df95d34fa975b296448d382416a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61218d193a20df95d34fa975b296448d382416a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61218d193a20df95d34fa975b296448d382416a8", "patch": "@@ -1,3 +1,10 @@\n+2004-04-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_isdigit): New.\n+\t(fold_builtin): Handle BUILT_IN_ISDIGIT.\n+\t* defaults.h: Add TARGET_DIGIT0 and sort.\n+\t* doc/tm.texi: Add TARGET_BS and TARGET_DIGIT0.\n+\n 2004-04-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (fold_builtin_cabs, fold_builtin): Use"}, {"sha": "e1ba8586a1cb9e6048d88b9d6f2b7e684a7a48f9", "filename": "gcc/builtins.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61218d193a20df95d34fa975b296448d382416a8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61218d193a20df95d34fa975b296448d382416a8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=61218d193a20df95d34fa975b296448d382416a8", "patch": "@@ -6767,6 +6767,28 @@ fold_builtin_toascii (tree arglist)\n     }\n }\n \n+/* Fold a call to builtin isdigit.  */\n+\n+static tree\n+fold_builtin_isdigit (tree arglist)\n+{\n+  if (! validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+  else\n+    {\n+      /* Transform isdigit(c) -> (unsigned)(c) - '0' <= 9.  */\n+      /* According to the C standard, isdigit is unaffected by locale.  */\n+      tree arg = TREE_VALUE (arglist);\n+      arg = build1 (NOP_EXPR, unsigned_type_node, arg);\n+      arg = build (MINUS_EXPR, unsigned_type_node, arg,\n+\t\t   fold (build1 (NOP_EXPR, unsigned_type_node,\n+\t\t\t\t build_int_2 (TARGET_DIGIT0, 0))));\n+      arg = build (LE_EXPR, integer_type_node, arg,\n+\t\t   fold (build1 (NOP_EXPR, unsigned_type_node,\n+\t\t\t\t build_int_2 (9, 0))));\n+      return fold (arg);\n+    }\n+}\n \n /* Used by constant folding to eliminate some builtin calls early.  EXP is\n    the CALL_EXPR of a call to a builtin function.  */\n@@ -7257,6 +7279,9 @@ fold_builtin (tree exp)\n     case BUILT_IN_TOASCII:\n       return fold_builtin_toascii (arglist);\n \n+    case BUILT_IN_ISDIGIT:\n+      return fold_builtin_isdigit (arglist);\n+\n     default:\n       break;\n     }"}, {"sha": "b2384090849547da745c35705b8c68385cdbf8c3", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61218d193a20df95d34fa975b296448d382416a8/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61218d193a20df95d34fa975b296448d382416a8/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=61218d193a20df95d34fa975b296448d382416a8", "patch": "@@ -39,12 +39,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef TARGET_BELL\n #  define TARGET_BELL 007\n #  define TARGET_BS 010\n-#  define TARGET_TAB 011\n-#  define TARGET_NEWLINE 012\n-#  define TARGET_VT 013\n-#  define TARGET_FF 014\n #  define TARGET_CR 015\n+#  define TARGET_DIGIT0 060\n #  define TARGET_ESC 033\n+#  define TARGET_FF 014\n+#  define TARGET_NEWLINE 012\n+#  define TARGET_TAB 011\n+#  define TARGET_VT 013\n #endif\n \n /* Store in OUTPUT a string (made with alloca) containing an"}, {"sha": "85515bf0b3c63e392708b122b252243655728894", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61218d193a20df95d34fa975b296448d382416a8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61218d193a20df95d34fa975b296448d382416a8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=61218d193a20df95d34fa975b296448d382416a8", "patch": "@@ -1787,13 +1787,16 @@ of words in each data entry.\n @section Target Character Escape Sequences\n @cindex escape sequences\n \n-By default, GCC assumes that the C character escape sequences take on\n-their ASCII values for the target.  If this is not correct, you must\n-explicitly define all of the macros below.  All of them must evaluate\n-to constants; they are used in @code{case} statements.\n+By default, GCC assumes that the C character escape sequences and other\n+characters take on their ASCII values for the target.  If this is not\n+correct, you must explicitly define all of the macros below.  All of\n+them must evaluate to constants; they are used in @code{case}\n+statements.\n \n @findex TARGET_BELL\n+@findex TARGET_BS\n @findex TARGET_CR\n+@findex TARGET_DIGIT0\n @findex TARGET_ESC\n @findex TARGET_FF\n @findex TARGET_NEWLINE\n@@ -1802,7 +1805,9 @@ to constants; they are used in @code{case} statements.\n @multitable {@code{TARGET_NEWLINE}} {Escape} {ASCII character}\n @item Macro                 @tab Escape             @tab ASCII character\n @item @code{TARGET_BELL}    @tab @kbd{\\a}           @tab @code{07}, @code{BEL}\n+@item @code{TARGET_BS}      @tab @kbd{\\b}           @tab @code{08}, @code{BS}\n @item @code{TARGET_CR}      @tab @kbd{\\r}           @tab @code{0D}, @code{CR}\n+@item @code{TARGET_DIGIT0}  @tab @kbd{0}            @tab @code{30}, @code{ZERO}\n @item @code{TARGET_ESC}     @tab @kbd{\\e}, @kbd{\\E} @tab @code{1B}, @code{ESC}\n @item @code{TARGET_FF}      @tab @kbd{\\f}           @tab @code{0C}, @code{FF}\n @item @code{TARGET_NEWLINE} @tab @kbd{\\n}           @tab @code{0A}, @code{LF}"}, {"sha": "47f20116f35766861a187c2d973b65ab5106e0f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61218d193a20df95d34fa975b296448d382416a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61218d193a20df95d34fa975b296448d382416a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61218d193a20df95d34fa975b296448d382416a8", "patch": "@@ -1,3 +1,7 @@\n+2004-04-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-ctype-2.c: Test builtin isdigit.\n+\n 2004-04-13  Uros Bizjak  <uros@kss-loka.si>:\n \n \t* gcc.dg/i386-387-1.c: Add new test for __builtin_tan."}, {"sha": "7046aad65625c4ba4b40f87d0d4f5338bc4152e0", "filename": "gcc/testsuite/gcc.dg/torture/builtin-ctype-2.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61218d193a20df95d34fa975b296448d382416a8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61218d193a20df95d34fa975b296448d382416a8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-2.c?ref=61218d193a20df95d34fa975b296448d382416a8", "patch": "@@ -75,6 +75,29 @@ void test(int i)\n   if (toascii(i) != (i & 0x7f))\n     link_failure_var();\n \n+  TEST_CTYPE_CST_TRUE (isdigit, '0');\n+  TEST_CTYPE_CST_TRUE (isdigit, '1');\n+  TEST_CTYPE_CST_TRUE (isdigit, '2');\n+  TEST_CTYPE_CST_TRUE (isdigit, '3');\n+  TEST_CTYPE_CST_TRUE (isdigit, '4');\n+  TEST_CTYPE_CST_TRUE (isdigit, '5');\n+  TEST_CTYPE_CST_TRUE (isdigit, '6');\n+  TEST_CTYPE_CST_TRUE (isdigit, '7');\n+  TEST_CTYPE_CST_TRUE (isdigit, '8');\n+  TEST_CTYPE_CST_TRUE (isdigit, '9');\n+\n+  TEST_CTYPE_CST_FALSE (isdigit, '0'-1);\n+  TEST_CTYPE_CST_FALSE (isdigit, '9'+1);\n+  TEST_CTYPE_CST_FALSE (isdigit, -1);\n+  TEST_CTYPE_CST_FALSE (isdigit, 0);\n+  TEST_CTYPE_CST_FALSE (isdigit, 255);\n+  TEST_CTYPE_CST_FALSE (isdigit, 256);\n+  TEST_CTYPE_CST_FALSE (isdigit, 10000);\n+  TEST_CTYPE_CST_FALSE (isdigit, __INT_MAX__);\n+  \n+  /* This ctype call should transform into another expression.  */\n+  if (isdigit(i) != ((unsigned)i - '0' <= 9))\n+    link_failure_var();\n #endif /* __OPTIMIZE__ */\n }\n "}]}