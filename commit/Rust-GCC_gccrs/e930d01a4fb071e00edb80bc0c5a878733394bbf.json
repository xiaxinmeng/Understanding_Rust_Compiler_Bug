{"sha": "e930d01a4fb071e00edb80bc0c5a878733394bbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzMGQwMWE0ZmIwNzFlMDBlZGI4MGJjMGM1YTg3ODczMzM5NGJiZg==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-22T07:02:26Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-22T07:02:26Z"}, "message": "[multiple changes]\n\n2004-04-22  Jeroen Frijters <jeroen@sumatra.nl>\n\n\t* java/net/URLStreamHandler.java\n\t(parseURL): Convert the file path to using '/' instead of native\n\tfile separator.\n\n2004-04-22  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/net/URL.java\n\t(userInfo): New field.\n\t(URL): Set authority to the right value.\n\t(setURL): Fixed authority and file initialization.\n\t* java/net/URLStreamHandler.java\n\t(parseURL): Take care of the query tag. Build authority.\n\t(toExternalForm): Fixed URL building using authority.\n\nFrom-SVN: r81006", "tree": {"sha": "f41e95314a0b8cd69db84e7e7c3823e647e7bd42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f41e95314a0b8cd69db84e7e7c3823e647e7bd42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e930d01a4fb071e00edb80bc0c5a878733394bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e930d01a4fb071e00edb80bc0c5a878733394bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e930d01a4fb071e00edb80bc0c5a878733394bbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e930d01a4fb071e00edb80bc0c5a878733394bbf/comments", "author": null, "committer": null, "parents": [{"sha": "5d79367d7af65892dff13ab3d0e0747d71ddd6e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d79367d7af65892dff13ab3d0e0747d71ddd6e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d79367d7af65892dff13ab3d0e0747d71ddd6e8"}], "stats": {"total": 107, "additions": 64, "deletions": 43}, "files": [{"sha": "230e0ae66e5914049e7cc6d76ada55e8eb1c1e1d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e930d01a4fb071e00edb80bc0c5a878733394bbf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e930d01a4fb071e00edb80bc0c5a878733394bbf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e930d01a4fb071e00edb80bc0c5a878733394bbf", "patch": "@@ -1,3 +1,19 @@\n+2004-04-22  Jeroen Frijters <jeroen@sumatra.nl>\n+\n+\t* java/net/URLStreamHandler.java\n+\t(parseURL): Convert the file path to using '/' instead of native\n+\tfile separator.\n+\n+2004-04-22  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* java/net/URL.java\n+\t(userInfo): New field.\n+\t(URL): Set authority to the right value.\n+\t(setURL): Fixed authority and file initialization.\n+\t* java/net/URLStreamHandler.java\n+\t(parseURL): Take care of the query tag. Build authority.\n+\t(toExternalForm): Fixed URL building using authority.\n+\n 2004-04-22  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/Socket.java"}, {"sha": "39fbd32ec2812707fce6a47ae13bba55dc778f07", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e930d01a4fb071e00edb80bc0c5a878733394bbf/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e930d01a4fb071e00edb80bc0c5a878733394bbf/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=e930d01a4fb071e00edb80bc0c5a878733394bbf", "patch": "@@ -108,7 +108,7 @@\n    * This is the default value that will be used to determine whether or\n    * not user interaction should be allowed.\n    */\n-  private static boolean defaultAllowUserInteraction = false;\n+  private static boolean defaultAllowUserInteraction;\n \n   /**\n    * This is the default flag indicating whether or not to use caches to\n@@ -126,7 +126,7 @@\n    * Indicates whether or not a connection has been established to the\n    * destination specified in the URL\n    */\n-  protected boolean connected = false;\n+  protected boolean connected;\n \n   /**\n    * Indicates whether or not input can be read from this URL\n@@ -136,7 +136,7 @@\n   /**\n    * Indicates whether or not output can be sent to this URL\n    */\n-  protected boolean doOutput = false;\n+  protected boolean doOutput;\n \n   /**\n    * If this flag is set, the protocol is allowed to cache data whenever\n@@ -157,16 +157,18 @@\n    * modified more recently than the date set in this variable.  That date\n    * should be specified as the number of seconds since 1/1/1970 GMT.\n    */\n-  protected long ifModifiedSince = 0L;\n+  protected long ifModifiedSince;\n \n   /**\n    * This is the URL associated with this connection\n    */\n   protected URL url;\n \n   private static Hashtable handlers = new Hashtable();\n-  private static SimpleDateFormat dateFormat1, dateFormat2, dateFormat3;\n-  private static boolean dateformats_initialized = false;\n+  private static SimpleDateFormat dateFormat1;\n+  private static SimpleDateFormat dateFormat2;\n+  private static SimpleDateFormat dateFormat3;\n+  private static boolean dateformats_initialized;\n \n   /**\n    * Creates a URL connection to a given URL. A real connection is not made.\n@@ -430,10 +432,10 @@ public Object getContent() throws IOException\n     String type = getContentType();\n     ContentHandler ch = setContentHandler(type);\n \n-    if (ch == null)\n-      return getInputStream();\n+    if (ch != null)\n+      return ch.getContent(this);\n \n-    return ch.getContent(this);\n+    return getInputStream();\n   }\n \n   /**"}, {"sha": "509e7f415866820bf10eb2b5c46e2cb51ea37550", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e930d01a4fb071e00edb80bc0c5a878733394bbf/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e930d01a4fb071e00edb80bc0c5a878733394bbf/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=e930d01a4fb071e00edb80bc0c5a878733394bbf", "patch": "@@ -126,6 +126,13 @@ protected void parseURL(URL url, String spec, int start, int end)\n     int port = url.getPort();\n     String file = url.getFile();\n     String ref = url.getRef();\n+    String userInfo = url.getUserInfo();\n+    String authority = url.getAuthority();\n+    String query = null;\n+    \n+    // On Windows we need to change \\ to / for file URLs\n+    if (url.getProtocol().equals(\"file\"))\n+      spec = spec.replace(File.separatorChar, '/');\n \n     if (spec.regionMatches(start, \"//\", 0, 2))\n       {\n@@ -141,14 +148,17 @@ protected void parseURL(URL url, String spec, int start, int end)\n \telse\n \t  hostEnd = end;\n \n-\thost = spec.substring(start, hostEnd);\n+\tauthority = host = spec.substring(start, hostEnd);\n \n \t// We first need a genuine host name (with userinfo).\n \t// So we check for '@': if it's present check the port in the\n \t// section after '@' in the other case check it in the full string.\n \t// P.S.: We don't care having '@' at the beginning of the string.\n \tif ((at_host = host.indexOf('@')) >= 0)\n-\t  genuineHost = host.substring(at_host);\n+\t  {\n+\t    genuineHost = host.substring(at_host);\n+\t    userInfo = host.substring(0, at_host);\n+\t  }\n \telse\n \t  genuineHost = host;\n \n@@ -193,18 +203,10 @@ else if (host == null)\n     else if (start < end)\n       {\n \t// Context is available, but only override it if there is a new file.\n-\tchar sepChar = '/';\n-\tint lastSlash = file.lastIndexOf(sepChar);\n-\tif (lastSlash < 0 && File.separatorChar != sepChar\n-\t    && url.getProtocol().equals(\"file\"))\n-\t  {\n-\t    // On Windows, even '\\' is allowed in a \"file\" URL.\n-\t    sepChar = File.separatorChar;\n-\t    lastSlash = file.lastIndexOf(sepChar);\n-\t  }\n+\tint lastSlash = file.lastIndexOf('/');\n \n \tfile =\n-\t  file.substring(0, lastSlash) + sepChar + spec.substring(start, end);\n+\t  file.substring(0, lastSlash) + '/' + spec.substring(start, end);\n \n \tif (url.getProtocol().equals(\"file\"))\n \t  {\n@@ -214,6 +216,7 @@ else if (start < end)\n \t      {\n \t\tboolean endsWithSlash = file.charAt(file.length() - 1) == '/';\n \t\tfile = new File(file).getCanonicalPath();\n+\t\tfile = file.replace(File.separatorChar, '/');\n \t\tif (endsWithSlash && file.charAt(file.length() - 1) != '/')\n \t\t  file += '/';\n \t      }\n@@ -238,10 +241,21 @@ else if (start < end)\n \t  }\n       }\n \n+    // We care about the query tag only if there is no reference at all.\n+    if (ref == null)\n+      {\n+\t  int queryTag = file.indexOf('?');\n+\t  if (queryTag != -1)\n+\t    {\n+\t      query = file.substring(queryTag + 1);\n+\t      file = file.substring(0, queryTag);\n+\t    }\n+      }\n+\n     // XXX - Classpath used to call PlatformHelper.toCanonicalForm() on\n     // the file part. It seems like overhead, but supposedly there is some\n     // benefit in windows based systems (it also lowercased the string).\n-    setURL(url, url.getProtocol(), host, port, file, ref);\n+    setURL(url, url.getProtocol(), host, port, authority, userInfo, file, query, ref);\n   }\n \n   /*\n@@ -492,42 +506,31 @@ protected String toExternalForm(URL url)\n     String file;\n     String ref;\n     String user;\n+    String authority;\n     int port;\n \n     protocol = url.getProtocol();\n-\n-    // JDK 1.2 online doc infers that host could be null because it\n-    // explicitly states that file cannot be null, but is silent on host.\n-    host = url.getHost();\n-    if (host == null)\n-      host = \"\";\n-\n-    port = url.getPort();\n+    authority = url.getAuthority();\n+    if (authority == null)\n+      authority = \"\";\n+    \n     file = url.getFile();\n     ref = url.getRef();\n-    user = url.getUserInfo();\n \n     // Guess a reasonable size for the string buffer so we have to resize\n     // at most once.\n-    int size = protocol.length() + host.length() + file.length() + 24;\n+    int size = protocol.length() + authority.length() + file.length() + 24;\n     StringBuffer sb = new StringBuffer(size);\n \n-    if (protocol.length() != 0)\n+    if (protocol != null && protocol.length() > 0)\n       {\n \tsb.append(protocol);\n \tsb.append(\":\");\n       }\n-\n-    if (host.length() != 0)\n+    \n+    if (authority.length() != 0)\n       {\n-\tsb.append(\"//\");\n-\tif (user != null && ! \"\".equals(user))\n-\t  sb.append(user).append('@');\n-\tsb.append(host);\n-\n-\t// Append port if port was in URL spec.\n-\tif (port >= 0)\n-\t  sb.append(':').append(port);\n+\tsb.append(\"//\").append(authority);\n       }\n \n     sb.append(file);"}]}