{"sha": "3c5cb3e4f314652d18b57c0581fa0949384faeae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1Y2IzZTRmMzE0NjUyZDE4YjU3YzA1ODFmYTA5NDkzODRmYWVhZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-16T23:29:22Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-16T23:29:22Z"}, "message": "i386-protos.h: Add a prototype for ix86_reverse_condition.\n\n\t* config/i386/i386-protos.h: Add a prototype for\n\tix86_reverse_condition.\n\t* config/i386/i386.c (ix86_reverse_condition): New.\n\t* config/i386/i386.h (REVERSE_CONDITION): Use\n\tix86_reverse_condition.\n\t* config/i386/i386.md: Use ix86_reverse_condition instead of\n\tREVERSE_CONDITION.\n\nFrom-SVN: r79556", "tree": {"sha": "e79656377a44699b02f309c7a33ea590d52f37b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e79656377a44699b02f309c7a33ea590d52f37b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5cb3e4f314652d18b57c0581fa0949384faeae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5cb3e4f314652d18b57c0581fa0949384faeae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5cb3e4f314652d18b57c0581fa0949384faeae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5cb3e4f314652d18b57c0581fa0949384faeae/comments", "author": null, "committer": null, "parents": [{"sha": "e4b27b12b017e0cf3639a92f3e64cff482421584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b27b12b017e0cf3639a92f3e64cff482421584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b27b12b017e0cf3639a92f3e64cff482421584"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "4cb106842fe4927a9d03d43a43bd68480fdcbad3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c5cb3e4f314652d18b57c0581fa0949384faeae", "patch": "@@ -1,3 +1,13 @@\n+2004-03-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/i386/i386-protos.h: Add a prototype for\n+\tix86_reverse_condition.\n+\t* config/i386/i386.c (ix86_reverse_condition): New.\n+\t* config/i386/i386.h (REVERSE_CONDITION): Use\n+\tix86_reverse_condition.\n+\t* config/i386/i386.md: Use ix86_reverse_condition instead of\n+\tREVERSE_CONDITION.\n+\n 2004-03-16  J. Brobecker  <brobecker@gnat.com>\n \n \t* dwarf2out.c (loc_descriptor_from_tree): Add handling for MIN_EXPR."}, {"sha": "947f15d615cdeeb899bc7150db8fbcae0a3244a3", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3c5cb3e4f314652d18b57c0581fa0949384faeae", "patch": "@@ -182,6 +182,7 @@ extern void x86_order_regs_for_local_alloc (void);\n extern void x86_function_profiler (FILE *, int);\n extern void x86_emit_floatuns (rtx [2]);\n \n+extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "ff4d4bf6482d2f8ebfdc67b544bd8e18cdf3f580", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3c5cb3e4f314652d18b57c0581fa0949384faeae", "patch": "@@ -15851,4 +15851,14 @@ ix86_md_asm_clobbers (tree clobbers)\n   return clobbers;\n }\n \n+/* Worker function for REVERSE_CONDITION.  */\n+\n+enum rtx_code\n+ix86_reverse_condition (enum rtx_code code, enum machine_mode mode)\n+{\n+  return (mode != CCFPmode && mode != CCFPUmode\n+\t  ? reverse_condition (code)\n+\t  : reverse_condition_maybe_unordered (code));\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "ba98806ff3f668eca75a49217c82e40b48a4d94a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3c5cb3e4f314652d18b57c0581fa0949384faeae", "patch": "@@ -2660,9 +2660,7 @@ do {\t\t\t\t\t\t\t\\\n \n /* A C expression whose value is reversed condition code of the CODE for\n    comparison done in CC_MODE mode.  */\n-#define REVERSE_CONDITION(CODE, MODE) \\\n-  ((MODE) != CCFPmode && (MODE) != CCFPUmode ? reverse_condition (CODE) \\\n-   : reverse_condition_maybe_unordered (CODE))\n+#define REVERSE_CONDITION(CODE, MODE) ix86_reverse_condition ((CODE), (MODE))\n \n \f\n /* Control the assembler format that we output, to the extent"}, {"sha": "781b0cad07dfbabef9a364dde217e89bd9553f88", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5cb3e4f314652d18b57c0581fa0949384faeae/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3c5cb3e4f314652d18b57c0581fa0949384faeae", "patch": "@@ -12813,8 +12813,8 @@\n   rtx new_op1 = copy_rtx (operands[1]);\n   operands[1] = new_op1;\n   PUT_MODE (new_op1, QImode);\n-  PUT_CODE (new_op1, REVERSE_CONDITION (GET_CODE (new_op1),\n-\t\t\t\t\tGET_MODE (XEXP (new_op1, 0))));\n+  PUT_CODE (new_op1, ix86_reverse_condition (GET_CODE (new_op1),\n+\t\t\t\t\t     GET_MODE (XEXP (new_op1, 0))));\n \n   /* Make sure that (a) the CCmode we have for the flags is strong\n      enough for the reversed compare or (b) we have a valid FP compare.  */\n@@ -12833,8 +12833,8 @@\n   rtx new_op1 = copy_rtx (operands[1]);\n   operands[1] = new_op1;\n   PUT_MODE (new_op1, QImode);\n-  PUT_CODE (new_op1, REVERSE_CONDITION (GET_CODE (new_op1),\n-\t\t\t\t\tGET_MODE (XEXP (new_op1, 0))));\n+  PUT_CODE (new_op1, ix86_reverse_condition (GET_CODE (new_op1),\n+\t\t\t\t\t     GET_MODE (XEXP (new_op1, 0))));\n \n   /* Make sure that (a) the CCmode we have for the flags is strong\n      enough for the reversed compare or (b) we have a valid FP compare.  */\n@@ -13096,8 +13096,8 @@\n   rtx new_op0 = copy_rtx (operands[0]);\n   operands[0] = new_op0;\n   PUT_MODE (new_op0, VOIDmode);\n-  PUT_CODE (new_op0, REVERSE_CONDITION (GET_CODE (new_op0),\n-\t\t\t\t\tGET_MODE (XEXP (new_op0, 0))));\n+  PUT_CODE (new_op0, ix86_reverse_condition (GET_CODE (new_op0),\n+\t\t\t\t\t     GET_MODE (XEXP (new_op0, 0))));\n \n   /* Make sure that (a) the CCmode we have for the flags is strong\n      enough for the reversed compare or (b) we have a valid FP compare.  */"}]}