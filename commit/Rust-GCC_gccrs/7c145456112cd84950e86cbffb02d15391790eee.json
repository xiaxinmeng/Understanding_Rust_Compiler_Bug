{"sha": "7c145456112cd84950e86cbffb02d15391790eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxNDU0NTYxMTJjZDg0OTUwZTg2Y2JmZmIwMmQxNTM5MTc5MGVlZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2017-04-25T13:05:22Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2017-04-25T13:05:22Z"}, "message": "017-04-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-common.c (c_type_hasher, type_hash_table): Remove.\n        (c_common_get_alias_set): Remove unreachable code.\n        * c-opts.c (c_common_post_options): Make sure cc1 takes only one file.\n\nFrom-SVN: r247222", "tree": {"sha": "d6406d99b4c3b270dbe8f91ce4cd905d31a6c894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6406d99b4c3b270dbe8f91ce4cd905d31a6c894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c145456112cd84950e86cbffb02d15391790eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c145456112cd84950e86cbffb02d15391790eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c145456112cd84950e86cbffb02d15391790eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c145456112cd84950e86cbffb02d15391790eee/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f70c47f8a074151222103aa69b16375584d24a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f70c47f8a074151222103aa69b16375584d24a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f70c47f8a074151222103aa69b16375584d24a0"}], "stats": {"total": 129, "additions": 10, "deletions": 119}, "files": [{"sha": "58f554961b606e413dd43b8de06c5e5e50ed9b3e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c145456112cd84950e86cbffb02d15391790eee/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c145456112cd84950e86cbffb02d15391790eee/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7c145456112cd84950e86cbffb02d15391790eee", "patch": "@@ -1,3 +1,9 @@\n+2017-04-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-common.c (c_type_hasher, type_hash_table): Remove.\n+\t(c_common_get_alias_set): Remove unreachable code.\n+\t* c-opts.c (c_common_post_options): Make sure cc1 takes only one file.\n+\n 2017-04-20  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* c.opt (Wextra-semi): New C++ warning flag."}, {"sha": "9691da75239d8beff2bb0726d25ab17e511571ed", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c145456112cd84950e86cbffb02d15391790eee/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c145456112cd84950e86cbffb02d15391790eee/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7c145456112cd84950e86cbffb02d15391790eee", "patch": "@@ -3508,67 +3508,6 @@ c_apply_type_quals_to_decl (int type_quals, tree decl)\n     }\n }\n \n-struct c_type_hasher : ggc_ptr_hash<tree_node>\n-{\n-  static hashval_t hash (tree);\n-  static bool equal (tree, tree);\n-};\n-\n-/* Hash function for the problem of multiple type definitions in\n-   different files.  This must hash all types that will compare\n-   equal via comptypes to the same value.  In practice it hashes\n-   on some of the simple stuff and leaves the details to comptypes.  */\n-\n-hashval_t\n-c_type_hasher::hash (tree t)\n-{\n-  int n_elements;\n-  int shift, size;\n-  tree t2;\n-  switch (TREE_CODE (t))\n-    {\n-    /* For pointers, hash on pointee type plus some swizzling.  */\n-    case POINTER_TYPE:\n-      return hash (TREE_TYPE (t)) ^ 0x3003003;\n-    /* Hash on number of elements and total size.  */\n-    case ENUMERAL_TYPE:\n-      shift = 3;\n-      t2 = TYPE_VALUES (t);\n-      break;\n-    case RECORD_TYPE:\n-      shift = 0;\n-      t2 = TYPE_FIELDS (t);\n-      break;\n-    case QUAL_UNION_TYPE:\n-      shift = 1;\n-      t2 = TYPE_FIELDS (t);\n-      break;\n-    case UNION_TYPE:\n-      shift = 2;\n-      t2 = TYPE_FIELDS (t);\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-  /* FIXME: We want to use a DECL_CHAIN iteration method here, but\n-     TYPE_VALUES of ENUMERAL_TYPEs is stored as a TREE_LIST.  */\n-  n_elements = list_length (t2);\n-  /* We might have a VLA here.  */\n-  if (TREE_CODE (TYPE_SIZE (t)) != INTEGER_CST)\n-    size = 0;\n-  else\n-    size = TREE_INT_CST_LOW (TYPE_SIZE (t));\n-  return ((size << 24) | (n_elements << shift));\n-}\n-\n-bool\n-c_type_hasher::equal (tree t1, tree t2)\n-{\n-  return lang_hooks.types_compatible_p (t1, t2);\n-}\n-\n-static GTY(()) hash_table<c_type_hasher> *type_hash_table;\n-\n /* Return the typed-based alias set for T, which may be an expression\n    or a type.  Return -1 if we don't do anything special.  */\n \n@@ -3607,60 +3546,6 @@ c_common_get_alias_set (tree t)\n \treturn get_alias_set (t1);\n     }\n \n-  /* Handle the case of multiple type nodes referring to \"the same\" type,\n-     which occurs with IMA.  These share an alias set.  FIXME:  Currently only\n-     C90 is handled.  (In C99 type compatibility is not transitive, which\n-     complicates things mightily. The alias set splay trees can theoretically\n-     represent this, but insertion is tricky when you consider all the\n-     different orders things might arrive in.) */\n-\n-  if (c_language != clk_c || flag_isoc99)\n-    return -1;\n-\n-  /* Save time if there's only one input file.  */\n-  if (num_in_fnames == 1)\n-    return -1;\n-\n-  /* Pointers need special handling if they point to any type that\n-     needs special handling (below).  */\n-  if (TREE_CODE (t) == POINTER_TYPE)\n-    {\n-      tree t2;\n-      /* Find bottom type under any nested POINTERs.  */\n-      for (t2 = TREE_TYPE (t);\n-\t   TREE_CODE (t2) == POINTER_TYPE;\n-\t   t2 = TREE_TYPE (t2))\n-\t;\n-      if (!RECORD_OR_UNION_TYPE_P (t2)\n-\t  && TREE_CODE (t2) != ENUMERAL_TYPE)\n-\treturn -1;\n-      if (TYPE_SIZE (t2) == 0)\n-\treturn -1;\n-    }\n-  /* These are the only cases that need special handling.  */\n-  if (!RECORD_OR_UNION_TYPE_P (t)\n-      && TREE_CODE (t) != ENUMERAL_TYPE\n-      && TREE_CODE (t) != POINTER_TYPE)\n-    return -1;\n-  /* Undefined? */\n-  if (TYPE_SIZE (t) == 0)\n-    return -1;\n-\n-  /* Look up t in hash table.  Only one of the compatible types within each\n-     alias set is recorded in the table.  */\n-  if (!type_hash_table)\n-    type_hash_table = hash_table<c_type_hasher>::create_ggc (1021);\n-  tree *slot = type_hash_table->find_slot (t, INSERT);\n-  if (*slot != NULL)\n-    {\n-      TYPE_ALIAS_SET (t) = TYPE_ALIAS_SET ((tree)*slot);\n-      return TYPE_ALIAS_SET ((tree)*slot);\n-    }\n-  else\n-    /* Our caller will assign and record (in t) a new alias set; all we need\n-       to do is remember t in the hash table.  */\n-    *slot = t;\n-\n   return -1;\n }\n \f"}, {"sha": "ea0e01b101c9b7b57f5db1fb4387b5628baa570c", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c145456112cd84950e86cbffb02d15391790eee/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c145456112cd84950e86cbffb02d15391790eee/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=7c145456112cd84950e86cbffb02d15391790eee", "patch": "@@ -971,6 +971,10 @@ c_common_post_options (const char **pfilename)\n #endif\n     }\n \n+  if (num_in_fnames > 1)\n+    error (\"too many filenames given.  Type %s --help for usage\",\n+\t   progname);\n+\n   if (flag_preprocess_only)\n     {\n       /* Open the output now.  We must do so even if flag_no_output is\n@@ -987,10 +991,6 @@ c_common_post_options (const char **pfilename)\n \t  return false;\n \t}\n \n-      if (num_in_fnames > 1)\n-\terror (\"too many filenames given.  Type %s --help for usage\",\n-\t       progname);\n-\n       init_pp_output (out_stream);\n     }\n   else"}]}