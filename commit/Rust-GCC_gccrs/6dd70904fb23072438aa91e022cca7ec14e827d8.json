{"sha": "6dd70904fb23072438aa91e022cca7ec14e827d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkNzA5MDRmYjIzMDcyNDM4YWE5MWUwMjJjY2E3ZWMxNGU4MjdkOA==", "commit": {"author": {"name": "Andrew John Hughes", "email": "gnu_andrew@member.fsf.org", "date": "2004-11-07T11:17:46Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-11-07T11:17:46Z"}, "message": "2004-11-07  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n       * java/util/Date.java\n       Added missing documentation.\n\nFrom-SVN: r90225", "tree": {"sha": "c832927b52f2eb2ce5e167e613480fa3418c4aee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c832927b52f2eb2ce5e167e613480fa3418c4aee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dd70904fb23072438aa91e022cca7ec14e827d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd70904fb23072438aa91e022cca7ec14e827d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd70904fb23072438aa91e022cca7ec14e827d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd70904fb23072438aa91e022cca7ec14e827d8/comments", "author": {"login": "gnu-andrew", "id": 962817, "node_id": "MDQ6VXNlcjk2MjgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/962817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnu-andrew", "html_url": "https://github.com/gnu-andrew", "followers_url": "https://api.github.com/users/gnu-andrew/followers", "following_url": "https://api.github.com/users/gnu-andrew/following{/other_user}", "gists_url": "https://api.github.com/users/gnu-andrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnu-andrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnu-andrew/subscriptions", "organizations_url": "https://api.github.com/users/gnu-andrew/orgs", "repos_url": "https://api.github.com/users/gnu-andrew/repos", "events_url": "https://api.github.com/users/gnu-andrew/events{/privacy}", "received_events_url": "https://api.github.com/users/gnu-andrew/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "426e7d289b652a9df4d5ba81f7b290ce3993ee7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426e7d289b652a9df4d5ba81f7b290ce3993ee7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/426e7d289b652a9df4d5ba81f7b290ce3993ee7b"}], "stats": {"total": 601, "additions": 548, "deletions": 53}, "files": [{"sha": "d5842df9303dc5d017d7af4458e8220bc955786d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd70904fb23072438aa91e022cca7ec14e827d8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd70904fb23072438aa91e022cca7ec14e827d8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6dd70904fb23072438aa91e022cca7ec14e827d8", "patch": "@@ -1,3 +1,8 @@\n+2004-11-07  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* java/util/Date.java\n+\tAdded missing documentation.\n+\n 2004-11-06  Michael Koch  <konqueror@gmx.de>\n \n \t* java/util/zip/CheckedInputStream.java,"}, {"sha": "f2700e4887327c9f59bd936f93084290cad2aad2", "filename": "libjava/java/util/Date.java", "status": "modified", "additions": 543, "deletions": 53, "changes": 596, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd70904fb23072438aa91e022cca7ec14e827d8/libjava%2Fjava%2Futil%2FDate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd70904fb23072438aa91e022cca7ec14e827d8/libjava%2Fjava%2Futil%2FDate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FDate.java?ref=6dd70904fb23072438aa91e022cca7ec14e827d8", "patch": "@@ -35,32 +35,82 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.util;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n /**\n+ * <p>\n  * This class represents a specific time in milliseconds since the epoch.\n  * The epoch is 1970, January 1 00:00:00.0000 UTC.  \n+ * </p>\n+ * <p>\n+ * <code>Date</code> is intended to reflect universal time coordinate (UTC),\n+ * but this depends on the underlying host environment.  Most operating systems \n+ * don't handle the leap second, which occurs about once every year or\n+ * so.  The leap second is added to the last minute of the day on either\n+ * the 30th of June or the 31st of December, creating a minute 61 seconds\n+ * in length.\n+ * </p>\n+ * <p>\n+ * The representations of the date fields are as follows:\n+ * <ul>\n+ * <li>\n+ * Years are specified as the difference between the year\n+ * and 1900.  Thus, the final year used is equal to\n+ * 1900 + y, where y is the input value.\n+ * </li>\n+ * <li>\n+ * Months are represented using zero-based indexing,\n+ * making 0 January and 11 December.\n+ * </li>\n+ * <li>\n+ * Dates are represented with the usual values of\n+ * 1 through to 31.\n+ * </li>\n+ * <li>\n+ * Hours are represented in the twenty-four hour clock,\n+ * with integer values from 0 to 23.  12am is 0, and\n+ * 12pm is 12.\n+ * </li>\n+ * <li>\n+ * Minutes are again as usual, with values from 0 to 59.\n+ * </li>\n+ * <li>\n+ * Seconds are represented with the values 0 through to 61,\n+ * with 60 and 61 being leap seconds (as per the ISO C standard).\n+ * </li>\n+ * </ul>\n+ * </p>\n+ * <p>\n+ * Prior to JDK 1.1, this class was the sole class handling date and time\n+ * related functionality.  However, this particular solution was not\n+ * amenable to internationalization.  The new <code>Calendar</code>\n+ * class should now be used to handle dates and times, with <code>Date</code>\n+ * being used only for values in milliseconds since the epoch.  The\n+ * <code>Calendar</code> class, and its concrete implementations, handle\n+ * the interpretation of these values into minutes, hours, days, months\n+ * and years.  The formatting and parsing of dates is left to the\n+ * <code>DateFormat</code> class, which is able to handle the different\n+ * types of date format which occur in different locales.\n+ * </p>\n  *\n- * Date is intended to reflect universal time coordinate (UTC), but doesn't\n- * handle the leap seconds.\n- *\n- * Prior to jdk 1.1 this class was the sole Time class and had also \n- * calendar functionality.  But this can't be localized, so a new Calendar\n- * class was created, that you should use instead.  The functions which\n- * get or return a year, month, day etc. are all deprecated and shouldn't be\n- * used.  Use Calendar instead.\n- * \n  * @see Calendar\n  * @see GregorianCalendar\n  * @see java.text.DateFormat\n  * @author Jochen Hoenicke\n- * @author Per Bothner <bothner@cygnus.com>\n+ * @author Per Bothner (bothner@cygnus.com)\n+ * @author Andrew John Hughes (gnu_andrew@member.fsf.org)\n  */\n-public class Date implements Cloneable, Comparable, java.io.Serializable\n+public class Date\n+    implements Cloneable, Comparable, Serializable\n {\n   /**\n    * This is the serialization UID for this class\n+   * for compatability with Sun's JDK.\n    */\n   private static final long serialVersionUID = 7523967970034938905L;\n \n@@ -69,6 +119,17 @@ public class Date implements Cloneable, Comparable, java.io.Serializable\n    */\n   private transient long time;\n \n+  /**\n+   * An array of week names used to map names to integer values.\n+   */\n+  private static final String[] weekNames = { \"Sun\", \"Mon\", \"Tue\", \"Wed\",\n+\t\t\t\t\t      \"Thu\", \"Fri\", \"Sat\" };\n+  /**\n+   * An array of month names used to map names to integer values.\n+   */\n+  private static final String[] monthNames = { \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n+\t\t\t\t\t       \"May\", \"Jun\", \"Jul\", \"Aug\",\n+\t\t\t\t\t       \"Sep\", \"Oct\", \"Nov\", \"Dec\" };\n   /**\n    * Creates a new Date Object representing the current time.\n    */\n@@ -79,6 +140,7 @@ public Date()\n \n   /**\n    * Creates a new Date Object representing the given time.\n+   *\n    * @param time the time in milliseconds since the epoch.\n    */\n   public Date(long time)\n@@ -88,8 +150,12 @@ public Date(long time)\n \n   /**\n    * Creates a new Date Object representing the given time.\n+   *\n    * @deprecated use <code>new GregorianCalendar(year+1900, month,\n-   * day)</code> instead.  \n+   * day)</code> instead.\n+   * @param year the difference between the required year and 1900.\n+   * @param month the month as a value between 0 and 11.\n+   * @param day the day as a value between 0 and 31.\n    */\n   public Date(int year, int month, int day)\n   {\n@@ -98,8 +164,15 @@ public Date(int year, int month, int day)\n \n   /**\n    * Creates a new Date Object representing the given time.\n+   *\n    * @deprecated use <code>new GregorianCalendar(year+1900, month,\n-   * day, hour, min)</code> instead.  \n+   * day, hour, min)</code> instead.\n+   * @param year the difference between the required year and 1900.\n+   * @param month the month as a value between 0 and 11.\n+   * @param day the day as a value between 0 and 31.\n+   * @param hour the hour as a value between 0 and 23, in 24-hour\n+   *        clock notation.\n+   * @param min the minute as a value between 0 and 59.\n    */\n   public Date(int year, int month, int day, int hour, int min)\n   {\n@@ -110,8 +183,17 @@ public Date(int year, int month, int day, int hour, int min)\n \n   /**\n    * Creates a new Date Object representing the given time.\n+   *\n    * @deprecated use <code>new GregorianCalendar(year+1900, month,\n-   * day)</code> instead.  \n+   * day, hour, min, sec)</code> instead. \n+   * @param year the difference between the required year and 1900.\n+   * @param month the month as a value between 0 and 11.\n+   * @param day the day as a value between 0 and 31.\n+   * @param hour the hour as a value between 0 and 23, in 24-hour\n+   *        clock notation.\n+   * @param min the minute as a value between 0 and 59.\n+   * @param sec the second as a value between 0 and 61 (with 60\n+   *        and 61 being leap seconds).\n    */\n   public Date(int year, int month, int day, int hour, int min, int sec)\n   {\n@@ -131,6 +213,13 @@ public Date(String s)\n     time = parse(s);\n   }\n \n+  /**\n+   * Returns a copy of this <code>Date</code> object.\n+   *\n+   * @return a copy, or null if the object couldn't be\n+   *         cloned.\n+   * @see Object#clone()\n+   */\n   public Object clone()\n   {\n     try\n@@ -144,8 +233,22 @@ public Object clone()\n   }\n \n   /**\n-   * @deprecated Use Calendar with a UTC TimeZone instead.\n-   * @return the time in millis since the epoch.\n+   * Returns the number of milliseconds since the epoch\n+   * specified by the given arguments.  The arguments are\n+   * interpreted relative to UTC rather than the local\n+   * time zone.\n+   *\n+   * @deprecated Use <code>Calendar</code> with a UTC\n+   *             <code>TimeZone</code> instead.\n+   * @param year the difference between the required year and 1900.\n+   * @param month the month as a value between 0 and 11.\n+   * @param day the day as a value between 0 and 31.\n+   * @param hour the hour as a value between 0 and 23, in 24-hour\n+   *        clock notation.\n+   * @param min the minute as a value between 0 and 59.\n+   * @param sec the second as a value between 0 and 61 (with 60\n+   *        and 61 being leap seconds).\n+   * @return the time in milliseconds since the epoch.\n    */\n   public static long UTC(int year, int month, int date,\n \t\t\t int hrs, int min, int sec)\n@@ -158,7 +261,8 @@ public static long UTC(int year, int month, int date,\n   }\n \n   /**\n-   * Gets the time represented by this Object\n+   * Gets the time represented by this object.\n+   *\n    * @return the time in milliseconds since the epoch.\n    */\n   public long getTime()\n@@ -167,8 +271,14 @@ public long getTime()\n   }\n \n   /**\n+   * Returns the number of minutes offset used with UTC to give the time\n+   * represented by this object in the current time zone.  The date information\n+   * from this object is also used to determine whether or not daylight savings\n+   * time is in effect.  For example, the offset for the UK would be 0 if the\n+   * month of the date object was January, and 1 if the month was August.\n+   * \n    * @deprecated use\n-   * Calendar.get(Calendar.ZONE_OFFSET)+Calendar.get(Calendar.DST_OFFSET)\n+   * <code>Calendar.get(Calendar.ZONE_OFFSET)+Calendar.get(Calendar.DST_OFFSET)</code>\n    * instead.\n    * @return The time zone offset in minutes of the local time zone\n    * relative to UTC.  The time represented by this object is used to\n@@ -183,17 +293,20 @@ public int getTimezoneOffset()\n   }\n \n   /**\n-   * Sets the time which this Object should represented.\n-   * @param time the time in milliseconds since the epoch.  */\n+   * Sets the time which this object should represent.\n+   *\n+   * @param time the time in milliseconds since the epoch.  \n+   */\n   public void setTime(long time)\n   {\n     this.time = time;\n   }\n \n   /**\n    * Tests if this date is after the specified date.\n+   *\n    * @param when the other date\n-   * @return true, if the date represented by this Object is\n+   * @return true, if the date represented by this object is\n    * strictly later than the time represented by when.  \n    */\n   public boolean after(Date when)\n@@ -203,6 +316,7 @@ public boolean after(Date when)\n \n   /**\n    * Tests if this date is before the specified date.\n+   *\n    * @param when the other date\n    * @return true, if the date represented by when is strictly later\n    * than the time represented by this object.\n@@ -214,8 +328,9 @@ public boolean before(Date when)\n \n   /**\n    * Compares two dates for equality.\n+   *\n    * @param obj the object to compare.\n-   * @return true, if obj is a Date object and the date represented\n+   * @return true, if obj is a Date object and the time represented\n    * by obj is exactly the same as the time represented by this\n    * object.  \n    */\n@@ -226,6 +341,7 @@ public boolean equals(Object obj)\n \n   /**\n    * Compares two dates.\n+   *\n    * @param when the other date.\n    * @return 0, if the date represented\n    * by obj is exactly the same as the time represented by this\n@@ -238,9 +354,11 @@ public int compareTo(Date when)\n   }\n \n   /**\n-   * Compares this Date to another.  This behaves like\n-   * <code>compareTo(Date)</code>, but it may throw a\n-   * <code>ClassCastException</code>\n+   * Compares this Date to another object.  This behaves like\n+   * <code>compareTo(Date)</code>, but it takes a generic object\n+   * and throws a <code>ClassCastException</code> if obj is\n+   * not a <code>Date</code>.\n+   * \n    * @param obj the other date.\n    * @return 0, if the date represented\n    * by obj is exactly the same as the time represented by this\n@@ -253,18 +371,73 @@ public int compareTo(Object obj)\n     return compareTo((Date) obj);\n   }\n \n+  /**\n+   * Computes the hash code of this <code>Date</code> as the\n+   * XOR of the most significant and the least significant\n+   * 32 bits of the 64 bit milliseconds value.\n+   *\n+   * @return the hash code.\n+   */\n   public int hashCode()\n   {\n     return (int) time ^ (int) (time >>> 32);\n   }\n \n-  private static final String[] weekNames = { \"Sun\", \"Mon\", \"Tue\", \"Wed\",\n-\t\t\t\t\t      \"Thu\", \"Fri\", \"Sat\" };\n-\n-  private static final String[] monthNames = { \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n-\t\t\t\t\t       \"May\", \"Jun\", \"Jul\", \"Aug\",\n-\t\t\t\t\t       \"Sep\", \"Oct\", \"Nov\", \"Dec\" };\n-\n+  /**\n+   * <p>\n+   * Returns a string representation of this date using\n+   * the following date format:\n+   * </p>\n+   * <p>\n+   * <code>day mon dd hh:mm:ss zz yyyy</code>\n+   * </p>\n+   * <p>where the fields used here are:\n+   * <ul>\n+   * <li>\n+   * <code>day</code> -- the day of the week\n+   * (Sunday through to Saturday).\n+   * </li>\n+   * <li>\n+   * <code>mon</code> -- the month (Jan to Dec).\n+   * </li>\n+   * <li>\n+   * <code>dd</code> -- the day of the month\n+   * as two decimal digits (01 to 31).\n+   * </li>\n+   * <li>\n+   * <code>hh</code> -- the hour of the day\n+   * as two decimal digits in 24-hour clock notation\n+   * (01 to 23).\n+   * </li>\n+   * <li>\n+   * <code>mm</code> -- the minute of the day\n+   * as two decimal digits (01 to 59).\n+   * </li>\n+   * <li>\n+   * <code>ss</code> -- the second of the day\n+   * as two decimal digits (01 to 61).\n+   * </li>\n+   * <li>\n+   * <code>zz</code> -- the time zone information if available.\n+   * The possible time zones used include the abbreviations\n+   * recognised by <code>parse()</code> (e.g. GMT, CET, etc.)\n+   * and may reflect the fact that daylight savings time is in\n+   * effect.  The empty string is used if there is no time zone\n+   * information.\n+   * </li>\n+   * <li>\n+   * <code>yyyy</code> -- the year as four decimal digits.\n+   * </li>\n+   * </ul>\n+   * <p>\n+   * The <code>DateFormat</code> class should now be \n+   * preferred over using this method.\n+   * </p>\n+   *\n+   * @return A string of the form 'day mon dd hh:mm:ss zz yyyy'\n+   * @see #parse(String)\n+   * @see DateFormat\n+   */\n   public String toString()\n   {\n     Calendar cal = Calendar.getInstance();\n@@ -286,16 +459,66 @@ public String toString()\n       year.substring(year.length() - 4);\n   }\n \n-  /** Format this object in a locale-specific way.\n+  /** \n+   * Returns a locale-dependent string representation of this\n+   * <code>Date</code> object.\n+   *\n    * @deprecated Use DateFormat.format(Date)\n+   * @return A locale-dependent string representation.\n+   * @see #parse(String)\n+   * @see DateFormat\n    */\n   public String toLocaleString()\n   {\n     return java.text.DateFormat.getInstance().format(this);\n   }\n \n-  /** Format this object in a standard format in the GMT timezone.\n+  /** \n+   * <p>\n+   * Returns a string representation of this <code>Date</code>\n+   * object using GMT rather than the local timezone.\n+   * The following date format is used:\n+   * </p>\n+   * <p>\n+   * <code>d mon yyyy hh:mm:ss GMT</code>\n+   * </p>\n+   * <p>where the fields used here are:\n+   * <ul>\n+   * <li>\n+   * <code>d</code> -- the day of the month\n+   * as one or two decimal digits (1 to 31).\n+   * </li>\n+   * <li>\n+   * <code>mon</code> -- the month (Jan to Dec).\n+   * </li>\n+   * <li>\n+   * <code>yyyy</code> -- the year as four decimal digits.\n+   * </li>\n+   * <li>\n+   * <code>hh</code> -- the hour of the day\n+   * as two decimal digits in 24-hour clock notation\n+   * (01 to 23).\n+   * </li>\n+   * <li>\n+   * <code>mm</code> -- the minute of the day\n+   * as two decimal digits (01 to 59).\n+   * </li>\n+   * <li>\n+   * <code>ss</code> -- the second of the day\n+   * as two decimal digits (01 to 61).\n+   * </li>\n+   * <li>\n+   * <code>GMT</code> -- the literal string \"GMT\"\n+   * indicating Greenwich Mean Time as opposed to\n+   * the local timezone.\n+   * </li>\n+   * </ul>\n+   * \n    * @deprecated Use DateFormat.format(Date) with a GMT TimeZone.\n+   * @return A string of the form 'd mon yyyy hh:mm:ss GMT' using\n+   *         GMT as opposed to the local timezone.\n+   * @see #parse(String)\n+   * @see DateFormat\n    */\n   public String toGMTString()\n   {\n@@ -304,6 +527,14 @@ public String toGMTString()\n     return format.format(this);\n   }\n \n+  /**\n+   * Parses the time zone string.\n+   *\n+   * @param tok The token containing the time zone.\n+   * @param sign The sign (+ or -) used by the time zone.\n+   * @return An integer representing the number of minutes offset\n+   *         from GMT for the time zone.\n+   */\n   private static int parseTz(String tok, char sign)\n     throws IllegalArgumentException\n   {\n@@ -328,6 +559,14 @@ private static int parseTz(String tok, char sign)\n     return sign == '-' ? -num : num;\n   }\n \n+  /**\n+   * Parses the month string.\n+   *\n+   * @param tok the token containing the month.\n+   * @return An integer between 0 and 11, representing\n+   *         a month from January (0) to December (11),\n+   *         or -1 if parsing failed.\n+   */\n   private static int parseMonth(String tok)\n   {\n     // Initialize strings for month names.\n@@ -346,6 +585,12 @@ private static int parseMonth(String tok)\n     return -1;\n   }\n \n+  /**\n+   * Parses the day of the week string.\n+   *\n+   * @param tok the token containing the day of the week.\n+   * @return true if the token was parsed successfully.\n+   */\n   private static boolean parseDayOfWeek(String tok)\n   {\n     // Initialize strings for days of the week names.\n@@ -362,9 +607,124 @@ private static boolean parseDayOfWeek(String tok)\n     return false;\n   }\n \n-  /** Parse a String and return the time it represents.\n+  /** \n+   * <p>\n+   * Parses a String and returns the time, in milliseconds since the\n+   * epoch, it represents.  Most syntaxes are handled, including\n+   * the IETF date standard \"day, dd mon yyyy hh:mm:ss zz\" (see\n+   * <code>toString()</code> for definitions of these fields).\n+   * Standard U.S. time zone abbreviations are recognised, in\n+   * addition to time zone offsets in positive or negative minutes.\n+   * If a time zone is specified, the specified time is assumed to\n+   * be in UTC and the appropriate conversion is applied, following\n+   * parsing, to convert this to the local time zone.  If no zone\n+   * is specified, the time is assumed to already be in the local\n+   * time zone.\n+   * </p>\n+   * <p>\n+   * The method parses the string progressively from left to right.\n+   * At the end of the parsing process, either a time is returned\n+   * or an <code>IllegalArgumentException</code> is thrown to signify\n+   * failure.  The ASCII characters A-Z, a-z, 0-9, and ',', '+', '-',\n+   * ':' and '/' are the only characters permitted within the string,\n+   * besides whitespace and characters enclosed within parantheses\n+   * '(' and ')'.  \n+   * </p>\n+   * <p>\n+   * A sequence of consecutive digits are recognised as a number,\n+   * and interpreted as follows:\n+   * <ul>\n+   * <li>\n+   * A number preceded by a sign (+ or -) is taken to be a time zone\n+   * offset.  The time zone offset can be specified in either hours\n+   * or minutes.  The former is assumed if the number is less than 24.\n+   * Otherwise, the offset is assumed to be in minutes.  A - indicates\n+   * a time zone west of GMT, while a + represents a time zone to the\n+   * east of GMT.  The time zones are always assumed to be relative\n+   * to GMT, and a (redundant) specification of this can be included\n+   * with the time zone.  For example, '-9', 'utc-9' and 'GMT-9' all\n+   * represent a time zone nine hours west of GMT.  Similarly,\n+   * '+4', 'ut+4' and 'UTC+4' all give 4 hours east of GMT.\n+   * </li>\n+   * <li>\n+   * A number equal to or greater than 70 is regarded as a year specification.\n+   * Values lower than 70 are only assumed to indicate a year if both the\n+   * day of the month and the month itself have already been recognised.\n+   * Year values less than 100 are interpreted as being relative to the current\n+   * century when the <code>Date</code> class is initialised..  Given a century,\n+   * x, the year is assumed to be within the range x - 80 to x + 19.  The value\n+   * itself is then used as a match against the two last digits of one of these\n+   * years.  For example, take x to be 2004.  A two-digit year is assumed to fall\n+   * within the range x - 80 (1924) and x + 19 (2023).  Thus, any intepreted value\n+   * between 0 and 23 is assumed to be 2000 to 2023 and values between 24 and 99\n+   * are taken as being 1924 to 1999.  This only applies for the case of 2004.\n+   * With a different year, the values will be interpreted differently. 2005\n+   * will used 0 to 24 as 2000 to 2024 and 25 to 99 as 1925 to 1999, for example.\n+   * This behaviour differs from that of <code>SimpleDateFormat</code> and is\n+   * time-dependent (a two-digit year will be interpreted differently depending\n+   * on the time the code is run).\n+   * </li>\n+   * <li>\n+   * Numbers followed by a colon are interpreted by first an hour, and then\n+   * as a minute, once an hour has been found.\n+   * </li>\n+   * <li>\n+   * <li>\n+   * Numbers followed by a slash are regarded first as a month, and then as\n+   * a day of the month once the month has been found.  This follows the\n+   * U.S. date format of mm/dd, rather than the European dd/mm.  Months\n+   * are converted to the recognised value - 1 before storage, in order\n+   * to put the number within the range 0 to 11.\n+   * </li>\n+   * <li>\n+   * Numbers followed by commas, whitespace, hyphens or the end of the string\n+   * are interpreted in the following order: hour, minute, second, day of month.\n+   * The first type not already recognised in the current string being parsed is\n+   * assumed.\n+   * </li>\n+   * </ul>\n+   * </p>\n+   * <p>\n+   * A sequence of consecutive alphabetic characters is recognised as a word,\n+   * and interpreted as follows, in a case-insentive fashion:\n+   * <li>\n+   * The characters 'AM' or 'PM' restrict the hour value to a value between 0\n+   * and 12.  In the latter case, 12 is added to the hour value before storage.\n+   * </li>\n+   * <li>\n+   * Any words which match any prefix of one of the days of the week ('Monday',\n+   * 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' and 'Sunday'),\n+   * are simply ignored.\n+   * </li>\n+   * <li>\n+   * Any words which match any prefix of one of the months of the year ('January',\n+   * 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n+   * 'October', 'November', 'December') are recognised and interpreted as the\n+   * appropriate value between 0 and 11.  The first match made against a\n+   * month is the one used, in the order specified here.  For example, 'Ma' is\n+   * intepreted as 'March' (2) and not as 'May' (4).  Similarly, 'Ju' is 'June',\n+   * and not 'July'.\n+   * </li>\n+   * <li>\n+   * The words 'GMT', 'UT' and 'UTC' are interpreted as specifying UTC as the\n+   * time zone in use for this date.\n+   * </li>\n+   * <li>\n+   * The word pairs 'EST'/'EDT', 'CST'/'CDT', 'MST'/'MDT' and 'PST'/'PDT' are\n+   * interpreted as the appropriate U.S. time zone abbreviation.  Each pair\n+   * is the standard and daylight savings time zone specification, respectively,\n+   * for each zone within the U.S, these being Eastern Standard/Daylight Time\n+   * (-5), Central Standard/Daylight Time (-6), Mountain Standard/Daylight Time\n+   * (-7) and Pacific Standard/Daylight Time (-8).\n+   * </li>\n+   * </ul>\n+   *\n    * @param s The String to parse.\n+   * @return The time in milliseconds since the epoch.\n+   * @throws IllegalArgumentException if the string fails to parse.\n    * @deprecated Use DateFormat.parse(String)\n+   * @see #toString()\n+   * @see SimpleDateFormat\n    */\n   public static long parse(String string)\n   {\n@@ -578,9 +938,14 @@ else if (tok.charAt(1) != 'S')\n   }\n \n   /**\n+   * Returns the difference between the year represented by this\n+   * <code>Date</code> object and 1900.\n+   *\n    * @return the year minus 1900 represented by this date object.\n    * @deprecated Use Calendar instead of Date, and use get(Calendar.YEAR)\n-   * instead.  Note about the 1900 difference in year.\n+   * instead.  Note the 1900 difference in the year.\n+   * @see Calendar\n+   * @see #setYear(int)\n    */\n   public int getYear()\n   {\n@@ -590,11 +955,25 @@ public int getYear()\n   }\n \n   /**\n-   * Sets the year to year minus 1900, not changing the other fields.\n+   * Sets the year to the specified year, plus 1900.  The other\n+   * fields are only altered as required to match the same date\n+   * and time in the new year.  Usually, this will mean that\n+   * the fields are not changed at all, but in the case of\n+   * a leap day or leap second, the fields will change in\n+   * relation to the existence of such an event in the new year.\n+   * For example, if the date specifies February the 29th, 2000,\n+   * then this will become March the 1st if the year is changed\n+   * to 2001, as 2001 is not a leap year.  Similarly, a seconds\n+   * value of 60 or 61 may result in the seconds becoming 0 and\n+   * the minute increasing by 1, if the new time does not include\n+   * a leap second.\n+   *\n    * @param year the year minus 1900.\n    * @deprecated Use Calendar instead of Date, and use\n    * set(Calendar.YEAR, year) instead.  Note about the 1900\n    * difference in year.  \n+   * @see #getYear()\n+   * @see Calendar\n    */\n   public void setYear(int year)\n   {\n@@ -605,9 +984,14 @@ public void setYear(int year)\n   }\n \n   /**\n+   * Returns the month represented by this <code>Date</code> object,\n+   * as a value between 0 (January) and 11 (December).\n+   *\n    * @return the month represented by this date object (zero based).\n    * @deprecated Use Calendar instead of Date, and use get(Calendar.MONTH)\n    * instead.\n+   * @see #setMonth(int)\n+   * @see Calendar\n    */\n   public int getMonth()\n   {\n@@ -617,10 +1001,26 @@ public int getMonth()\n   }\n \n   /**\n-   * Sets the month to the given value, not changing the other fields.\n-   * @param month the month, zero based.\n+   * Sets the month to the given value.  The other\n+   * fields are only altered as necessary to match\n+   * the same date and time in the new month.  In most\n+   * cases, the other fields won't change at all.  However,\n+   * in the case of a shorter month or a leap second, values\n+   * may be adjusted.  For example, if the day of the month\n+   * is currently 31, and the month value is changed from\n+   * January (0) to September (8), the date will become\n+   * October the 1st, as September only has 30 days.  Similarly,\n+   * a seconds value of 60 or 61 (a leap second) may result\n+   * in the seconds value being reset to 0 and the minutes\n+   * value being incremented by 1, if the new time does\n+   * not include a leap second.\n+   * \n+   * @param month the month, with a zero-based index\n+   *        from January.\n    * @deprecated Use Calendar instead of Date, and use\n-   * set(Calendar.MONTH, month) instead. \n+   * set(Calendar.MONTH, month) instead.\n+   * @see #getMonth()\n+   * @see Calendar \n    */\n   public void setMonth(int month)\n   {\n@@ -631,9 +1031,14 @@ public void setMonth(int month)\n   }\n \n   /**\n+   * Returns the day of the month of this <code>Date</code>\n+   * object, as a value between 0 and 31.\n+   *\n    * @return the day of month represented by this date object.\n    * @deprecated Use Calendar instead of Date, and use get(Calendar.DATE)\n    * instead.\n+   * @see Calendar\n+   * @see #setDate(int)\n    */\n   public int getDate()\n   {\n@@ -643,10 +1048,26 @@ public int getDate()\n   }\n \n   /**\n-   * Sets the date to the given value, not changing the other fields.\n+   * Sets the date to the given value. The other\n+   * fields are only altered as necessary to match\n+   * the same date and time on the new day of the month.  In most\n+   * cases, the other fields won't change at all.  However,\n+   * in the case of a leap second or the day being out of\n+   * the range of the current month, values\n+   * may be adjusted.  For example, if the day of the month\n+   * is currently 30 and the month is June, a new day of the\n+   * month value of 31 will cause the month to change to July,\n+   * as June only has 30 days .  Similarly,\n+   * a seconds value of 60 or 61 (a leap second) may result\n+   * in the seconds value being reset to 0 and the minutes\n+   * value being incremented by 1, if the new time does\n+   * not include a leap second.\n+   *\n    * @param date the date.\n    * @deprecated Use Calendar instead of Date, and use\n    * set(Calendar.DATE, date) instead. \n+   * @see Calendar\n+   * @see #getDate()\n    */\n   public void setDate(int date)\n   {\n@@ -657,9 +1078,13 @@ public void setDate(int date)\n   }\n \n   /**\n+   * Returns the day represented by this <code>Date</code>\n+   * object as an integer between 0 (Sunday) and 6 (Saturday).\n+   *\n    * @return the day represented by this date object.\n    * @deprecated Use Calendar instead of Date, and use get(Calendar.DAY_OF_WEEK)\n    * instead.\n+   * @see Calendar\n    */\n   public int getDay()\n   {\n@@ -670,9 +1095,14 @@ public int getDay()\n   }\n \n   /**\n+   * Returns the hours represented by this <code>Date</code>\n+   * object as an integer between 0 and 23.\n+   *\n    * @return the hours represented by this date object.\n    * @deprecated Use Calendar instead of Date, and use get(Calendar.HOUR_OF_DAY)\n    * instead.\n+   * @see Calendar\n+   * @see #setHours(int)\n    */\n   public int getHours()\n   {\n@@ -682,10 +1112,22 @@ public int getHours()\n   }\n \n   /**\n-   * Sets the hours to the given value, not changing the other fields.\n+   * Sets the hours to the given value.  The other\n+   * fields are only altered as necessary to match\n+   * the same date and time in the new hour.  In most\n+   * cases, the other fields won't change at all.  However,\n+   * in the case of a leap second, values\n+   * may be adjusted.  For example,\n+   * a seconds value of 60 or 61 (a leap second) may result\n+   * in the seconds value being reset to 0 and the minutes\n+   * value being incremented by 1 if the new hour does\n+   * not contain a leap second.\n+   *\n    * @param hours the hours.\n    * @deprecated Use Calendar instead of Date, and use\n-   * set(Calendar.HOUR_OF_DAY, hours) instead. \n+   * set(Calendar.HOUR_OF_DAY, hours) instead.\n+   * @see Calendar\n+   * @see #getHours() \n    */\n   public void setHours(int hours)\n   {\n@@ -696,9 +1138,14 @@ public void setHours(int hours)\n   }\n \n   /**\n+   * Returns the number of minutes represented by the <code>Date</code>\n+   * object, as an integer between 0 and 59.\n+   *\n    * @return the minutes represented by this date object.\n    * @deprecated Use Calendar instead of Date, and use get(Calendar.MINUTE)\n    * instead.\n+   * @see Calendar\n+   * @see #setMinutes(int)\n    */\n   public int getMinutes()\n   {\n@@ -708,10 +1155,22 @@ public int getMinutes()\n   }\n \n   /**\n-   * Sets the minutes to the given value, not changing the other fields.\n+   * Sets the minutes to the given value.  The other\n+   * fields are only altered as necessary to match\n+   * the same date and time in the new minute.  In most\n+   * cases, the other fields won't change at all.  However,\n+   * in the case of a leap second, values\n+   * may be adjusted.  For example,\n+   * a seconds value of 60 or 61 (a leap second) may result\n+   * in the seconds value being reset to 0 and the minutes\n+   * value being incremented by 1 if the new minute does\n+   * not contain a leap second.\n+   *\n    * @param minutes the minutes.\n    * @deprecated Use Calendar instead of Date, and use\n    * set(Calendar.MINUTE, minutes) instead. \n+   * @see Calendar\n+   * @see #getMinutes()\n    */\n   public void setMinutes(int minutes)\n   {\n@@ -722,9 +1181,14 @@ public void setMinutes(int minutes)\n   }\n \n   /**\n+   * Returns the number of seconds represented by the <code>Date</code>\n+   * object, as an integer between 0 and 61 (60 and 61 being leap seconds).\n+   *\n    * @return the seconds represented by this date object.\n    * @deprecated Use Calendar instead of Date, and use get(Calendar.SECOND)\n    * instead.\n+   * @see Calendar\n+   * @see #setSeconds(int)\n    */\n   public int getSeconds()\n   {\n@@ -734,10 +1198,22 @@ public int getSeconds()\n   }\n \n   /**\n-   * Sets the seconds to the given value, not changing the other fields.\n+   * Sets the seconds to the given value.  The other\n+   * fields are only altered as necessary to match\n+   * the same date and time in the new minute.  In most\n+   * cases, the other fields won't change at all.  However,\n+   * in the case of a leap second, values\n+   * may be adjusted.  For example, setting the\n+   * seconds value to 60 or 61 (a leap second) may result\n+   * in the seconds value being reset to 0 and the minutes\n+   * value being incremented by 1, if the current time does\n+   * not contain a leap second.\n+   *\n    * @param seconds the seconds.\n    * @deprecated Use Calendar instead of Date, and use\n-   * set(Calendar.SECOND, seconds) instead. \n+   * set(Calendar.SECOND, seconds) instead.\n+   * @see Calendar\n+   * @see #getSeconds() \n    */\n   public void setSeconds(int seconds)\n   {\n@@ -748,25 +1224,39 @@ public void setSeconds(int seconds)\n   }\n \n   /**\n-   * Reads an Object from the stream.\n+   * Deserializes a <code>Date</code> object from an\n+   * input stream, setting the time (in milliseconds\n+   * since the epoch) to the long value read from the\n+   * stream.\n+   *\n+   * @param input the input stream.\n+   * @throws IOException if an I/O error occurs in the stream.\n+   * @throws ClassNotFoundException if the class of the\n+   *         serialized object could not be found.\n    */\n-  private void readObject(java.io.ObjectInputStream input)\n-    throws java.io.IOException, ClassNotFoundException\n+  private void readObject(ObjectInputStream input)\n+    throws IOException, ClassNotFoundException\n   {\n     input.defaultReadObject();\n     time = input.readLong();\n   }\n \n   /**\n-   * Writes an Object to the stream.\n+   * Serializes a <code>Date</code> object to an output stream,\n+   * storing the time (in milliseconds since the epoch) as a long\n+   * value in the stream.\n+   *\n    * @serialdata A long value representing the offset from the epoch\n    * in milliseconds.  This is the same value that is returned by the\n    * method getTime().\n+   * @param output the output stream.\n+   * @throws IOException if an I/O error occurs in the stream.\n    */\n-  private void writeObject(java.io.ObjectOutputStream output)\n-    throws java.io.IOException\n+  private void writeObject(ObjectOutputStream output)\n+    throws IOException\n   {\n     output.defaultWriteObject();\n     output.writeLong(time);\n   }\n+\n }"}]}