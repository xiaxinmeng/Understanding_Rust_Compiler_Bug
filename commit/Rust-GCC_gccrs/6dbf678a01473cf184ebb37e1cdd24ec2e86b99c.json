{"sha": "6dbf678a01473cf184ebb37e1cdd24ec2e86b99c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiZjY3OGEwMTQ3M2NmMTg0ZWJiMzdlMWNkZDI0ZWMyZTg2Yjk5Yw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-17T20:16:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-17T20:16:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1002", "tree": {"sha": "e48e6434c00824ccb974e781dbbad22faca05cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e48e6434c00824ccb974e781dbbad22faca05cab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c/comments", "author": null, "committer": null, "parents": [{"sha": "64309441e0685d95ea54f896d9eb91332afcac10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64309441e0685d95ea54f896d9eb91332afcac10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64309441e0685d95ea54f896d9eb91332afcac10"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "725815774b3eb9af897a1becd78c86e338306346", "filename": "gcc/c-lex.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=6dbf678a01473cf184ebb37e1cdd24ec2e86b99c", "patch": "@@ -1069,6 +1069,18 @@ yylex ()\n \n \t  if (lastiddecl != 0 && TREE_CODE (lastiddecl) == TYPE_DECL)\n \t    value = TYPENAME;\n+\t  /* A user-invisible read-only initialized variable\n+\t     should be replaced by its value.\n+\t     We handle only strings since that's the only case used in C.  */\n+\t  else if (lastiddecl != 0 && TREE_CODE (lastiddecl) == VAR_DECL\n+\t\t   && DECL_IGNORED_P (lastiddecl)\n+\t\t   && TREE_READONLY (lastiddecl)\n+\t\t   && DECL_INITIAL (lastiddecl) != 0\n+\t\t   && TREE_CODE (DECL_INITIAL (lastiddecl)) == STRING_CST)\n+\t    {\n+\t      yylval.ttype = DECL_INITIAL (lastiddecl);\n+\t      value = STRING;\n+\t    }\n           else if (doing_objc_thang)\n             {\n \t      tree objc_interface_decl = lookup_interface (yylval.ttype);"}, {"sha": "248f4079bc7278f3ba7ba1900ad8699a2dab1ece", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbf678a01473cf184ebb37e1cdd24ec2e86b99c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6dbf678a01473cf184ebb37e1cdd24ec2e86b99c", "patch": "@@ -1906,13 +1906,19 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n     TIMEVAR (varconst_time,\n \t     {\n \t       make_decl_rtl (decl, asmspec, top_level);\n-\t       /* Don't output anything\n-\t\t  when a tentative file-scope definition is seen.\n-\t\t  But at end of compilation, do output code for them.  */\n-\t       if (! (! at_end && top_level\n-\t\t      && (DECL_INITIAL (decl) == 0\n-\t\t\t  || DECL_INITIAL (decl) == error_mark_node)))\n-\t\t assemble_variable (decl, top_level, at_end);\n+\t       /* For a user-invisible decl that should be replaced\n+\t\t  by its value when used, don't output anything.  */\n+\t       if (! (TREE_CODE (decl) == VAR_DECL\n+\t\t      && DECL_IGNORED_P (decl) && TREE_READONLY (decl)\n+\t\t      && DECL_INITIAL (decl) != 0))\n+\t\t /* Don't output anything\n+\t\t    when a tentative file-scope definition is seen.\n+\t\t    But at end of compilation, do output code for them.  */\n+\t\t if (! (! at_end && top_level\n+\t\t\t&& (DECL_INITIAL (decl) == 0\n+\t\t\t    || DECL_INITIAL (decl) == error_mark_node\n+\t\t\t    || DECL_IGNORED_P (decl))))\n+\t\t   assemble_variable (decl, top_level, at_end);\n \t     });\n   else if (TREE_REGDECL (decl) && asmspec != 0)\n     {"}]}