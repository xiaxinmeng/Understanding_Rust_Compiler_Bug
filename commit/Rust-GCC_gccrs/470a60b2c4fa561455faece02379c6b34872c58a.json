{"sha": "470a60b2c4fa561455faece02379c6b34872c58a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcwYTYwYjJjNGZhNTYxNDU1ZmFlY2UwMjM3OWM2YjM0ODcyYzU4YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-12-12T17:37:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-12-12T17:37:48Z"}, "message": "re PR preprocessor/78680 (ICE in get_substring_ranges_for_loc, at input.c:1398)\n\nFix for PR preprocessor/78680\n\nPR preprocessor/78680 identifies a crash when attempting to issue\na -Wformat warning, where the format string includes a string token\nsplit across multiple physical source lines via backslash-continued\nlines.\n\nThe issue is that libcpp is generating bogus range information for\nsuch tokens.\n\nFor example, in:\n\nvoid fn1() {\n  __builtin_printf(\"\\\n     %ld.\\n\\\n        2\\n\"); };\n\nthe range of the string token is printed as:\n\n   __builtin_printf(\"\\\n                    ^~\n\nwhereas the range ought to be:\n\n  __builtin_printf(\"\\\n                   ^~\n     %ld.\\n\\\n     ~~~~~~~\n        2\\n\"); };\n        ~~~~\n\nThe root cause is that the line notes expressing the update\nof the buffer in lex.c aren't yet updated when the end-point of\nthe token is computed\n\n3095\t    tok_range.m_finish\n3096\t      = linemap_position_for_column (pfile->line_table,\n3097\t\t\t\t\t     CPP_BUF_COLUMN (buffer, buffer->cur));\n\nso that the physical line is still regarded as that of the start\nof the token, and, where CPP_BUF_COLUMN uses (BUF)->line_base,\nline_base is still the location of the first physical line in the\nand hence the column information is too large (as if it were the\noffset in the *logical* line).\n\n(the printed range is somewhat misleading; the actual buggy range\nextends beyond the \"\\ in the line, but within diagnostic-show-locus.c\nlayout::print_annotation_line only prints up to the xbound set by\nlayout::print_source_line and so truncates most of the buggy range).\n\nThe fix is to ensure that line notes are handled before calculating\nthe end-point of the token range.\n\nThis leads to the range for the string token being correctly\ncomputed, as:\n\n  __builtin_printf(\"\\\n                   ^~\n     %ld.\\n\\\n     ~~~~~~~\n        2\\n\"); };\n        ~~~~\n\nand this leads to get_substring_ranges_for_loc failing gracefully,\nrather than crashing.\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/78680\n\t* gcc.dg/format/pr78680.c: New test case.\n\t* gcc.dg/plugin/diagnostic-test-expressions-1.c\n\t(test_multiline_token): New function.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n\t(test_backslash_continued_logical_lines): New function.\n\nlibcpp/ChangeLog:\n\tPR preprocessor/78680\n\t* lex.c (_cpp_lex_direct): Ensure line notes are processed before\n\tcomputing the end-point of the token.\n\nFrom-SVN: r243567", "tree": {"sha": "a32a794c4f95428a405af91cfcb1f30cff277778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32a794c4f95428a405af91cfcb1f30cff277778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/470a60b2c4fa561455faece02379c6b34872c58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470a60b2c4fa561455faece02379c6b34872c58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470a60b2c4fa561455faece02379c6b34872c58a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470a60b2c4fa561455faece02379c6b34872c58a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e09a726e62c6ade9ea25e1f1a9269141ce73e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e09a726e62c6ade9ea25e1f1a9269141ce73e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e09a726e62c6ade9ea25e1f1a9269141ce73e81"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "f1f518411db54709784313988a3c987c2d8ec926", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=470a60b2c4fa561455faece02379c6b34872c58a", "patch": "@@ -1,3 +1,12 @@\n+2016-12-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/78680\n+\t* gcc.dg/format/pr78680.c: New test case.\n+\t* gcc.dg/plugin/diagnostic-test-expressions-1.c\n+\t(test_multiline_token): New function.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n+\t(test_backslash_continued_logical_lines): New function.\n+\n 2016-12-12  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/78252"}, {"sha": "0c599f37b6fd3f1dc057996174c904996bdada24", "filename": "gcc/testsuite/gcc.dg/format/pr78680.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78680.c?ref=470a60b2c4fa561455faece02379c6b34872c58a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall -Wextra -fdiagnostics-show-caret\" } */\n+\n+void fn1() {\n+  __builtin_printf(\"\\\n+     %ld.\\n\\\n+        2\\n\"); };\n+/* { dg-warning \"expects a matching\" \"\" { target *-*-* } .-3 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __builtin_printf(\"\\\n+                    ^~\n+      %ld.\\n\\\n+      ~~~~~~~        \n+         2\\n\"); };\n+         ~~~~        \n+   { dg-end-multiline-output \"\" } */"}, {"sha": "afbe0f734a25da33d9a2a4041884b5b5ea09899f", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-expressions-1.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c?ref=470a60b2c4fa561455faece02379c6b34872c58a", "patch": "@@ -689,3 +689,22 @@ void test_multiple_ordinary_maps (void)\n         ~~                      \n    { dg-end-multiline-output \"\" } */\n }\n+\n+/* Verify that we correctly handle a token that spans multiple\n+   physical lines.  */\n+\n+const char *test_multiline_token (void)\n+{\n+  __emit_expression_range (0, \"foo\\\n+bar\\\n+baz\");\n+/* { dg-warning \"range\" \"\" { target *-*-* } .-3 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, \"foo\\\n+                               ^~~~~\n+ bar\\\n+ ~~~~                           \n+ baz\");\n+ ~~~~                           \n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "03f042abf7b61b6de8d49e62efdd4668299f2c53", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a60b2c4fa561455faece02379c6b34872c58a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=470a60b2c4fa561455faece02379c6b34872c58a", "patch": "@@ -272,3 +272,23 @@ test_terminator_location (void)\n                                            ^\n    { dg-end-multiline-output \"\" } */\n }\n+\n+/* Verify that we fail gracefully when a string literal token is split\n+   across multiple physical lines.  */\n+\n+void\n+test_backslash_continued_logical_lines (void)\n+{\n+  __emit_string_literal_range (\"\\\n+01234\\\n+56789\", 6, 6, 7);\n+  /* { dg-error \"unable to read substring location: range endpoints are on different lines\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __emit_string_literal_range (\"\\\n+                                ^~\n+ 01234\\\n+ ~~~~~~                          \n+ 56789\", 6, 6, 7);\n+ ~~~~~~                          \n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "63681220187ffd6a8c0815063f630a783aace4b1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a60b2c4fa561455faece02379c6b34872c58a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a60b2c4fa561455faece02379c6b34872c58a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=470a60b2c4fa561455faece02379c6b34872c58a", "patch": "@@ -1,3 +1,9 @@\n+2016-12-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/78680\n+\t* lex.c (_cpp_lex_direct): Ensure line notes are processed before\n+\tcomputing the end-point of the token.\n+\n 2016-11-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* include/cpplib.h (struct cpp_options): Add new member"}, {"sha": "ae458926b7541e317ff29da54de55199413a9dc4", "filename": "libcpp/lex.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a60b2c4fa561455faece02379c6b34872c58a/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a60b2c4fa561455faece02379c6b34872c58a/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=470a60b2c4fa561455faece02379c6b34872c58a", "patch": "@@ -3089,6 +3089,13 @@ _cpp_lex_direct (cpp_reader *pfile)\n       break;\n     }\n \n+  /* Ensure that any line notes are processed, so that we have the\n+     correct physical line/column for the end-point of the token even\n+     when a logical line is split via one or more backslashes.  */\n+  if (buffer->cur >= buffer->notes[buffer->cur_note].pos\n+      && !pfile->overlaid_buffer)\n+    _cpp_process_line_notes (pfile, false);\n+\n   source_range tok_range;\n   tok_range.m_start = result->src_loc;\n   if (result->src_loc >= RESERVED_LOCATION_COUNT)"}]}