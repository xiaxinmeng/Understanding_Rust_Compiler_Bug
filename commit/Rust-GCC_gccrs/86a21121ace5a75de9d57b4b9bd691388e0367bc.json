{"sha": "86a21121ace5a75de9d57b4b9bd691388e0367bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZhMjExMjFhY2U1YTc1ZGU5ZDU3YjRiOWJkNjkxMzg4ZTAzNjdiYw==", "commit": {"author": {"name": "Pip Cet", "email": "pipcet@gmail.com", "date": "2016-11-17T16:16:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-11-17T16:16:38Z"}, "message": "re PR rtl-optimization/78355 (LRA generates unaligned accesses when SLOW_UNALIGNED_ACCESS is 1)\n\n\tPR rtl-optimization/78355\n\t* doc/tm.texi.in (SLOW_UNALIGNED_ACCESS): Document that the macro only\n\tneeds to deal with unaligned accesses.\n\t* doc/tm.texi: Regenerate.\n\t* lra-constraints.c (simplify_operand_subreg): Only invoke\n\tSLOW_UNALIGNED_ACCESS on innermode if the MEM is not aligned enough.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r242554", "tree": {"sha": "8a67841dfc46ed98537f8cc1ed7522c6ee4a7d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a67841dfc46ed98537f8cc1ed7522c6ee4a7d5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86a21121ace5a75de9d57b4b9bd691388e0367bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86a21121ace5a75de9d57b4b9bd691388e0367bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86a21121ace5a75de9d57b4b9bd691388e0367bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86a21121ace5a75de9d57b4b9bd691388e0367bc/comments", "author": {"login": "pipcet", "id": 4129208, "node_id": "MDQ6VXNlcjQxMjkyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4129208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pipcet", "html_url": "https://github.com/pipcet", "followers_url": "https://api.github.com/users/pipcet/followers", "following_url": "https://api.github.com/users/pipcet/following{/other_user}", "gists_url": "https://api.github.com/users/pipcet/gists{/gist_id}", "starred_url": "https://api.github.com/users/pipcet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pipcet/subscriptions", "organizations_url": "https://api.github.com/users/pipcet/orgs", "repos_url": "https://api.github.com/users/pipcet/repos", "events_url": "https://api.github.com/users/pipcet/events{/privacy}", "received_events_url": "https://api.github.com/users/pipcet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc4aa6592b3822043ab5d6b1fad958b9bc21acbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4aa6592b3822043ab5d6b1fad958b9bc21acbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4aa6592b3822043ab5d6b1fad958b9bc21acbd"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "bc2b86c5070b2545d7374a175e7a4643001ec259", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86a21121ace5a75de9d57b4b9bd691388e0367bc", "patch": "@@ -1,3 +1,13 @@\n+2016-11-17  Pip Cet  <pipcet@gmail.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/78355\n+\t* doc/tm.texi.in (SLOW_UNALIGNED_ACCESS): Document that the macro only\n+\tneeds to deal with unaligned accesses.\n+\t* doc/tm.texi: Regenerate.\n+\t* lra-constraints.c (simplify_operand_subreg): Only invoke\n+\tSLOW_UNALIGNED_ACCESS on innermode if the MEM is not aligned enough.\n+\n 2016-11-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.c (selftest::test_lexer_string_locations_long_line): New"}, {"sha": "7bf09d1544f79a343d183037573355e1d0b29a36", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=86a21121ace5a75de9d57b4b9bd691388e0367bc", "patch": "@@ -6368,7 +6368,8 @@ other fields in the same word of the structure, but to different bytes.\n Define this macro to be the value 1 if memory accesses described by the\n @var{mode} and @var{alignment} parameters have a cost many times greater\n than aligned accesses, for example if they are emulated in a trap\n-handler.\n+handler.  This macro is invoked only for unaligned accesses, i.e. when\n+@code{@var{alignment} < GET_MODE_ALIGNMENT (@var{mode})}.\n \n When this macro is nonzero, the compiler will act as if\n @code{STRICT_ALIGNMENT} were nonzero when generating code for block"}, {"sha": "58d1e638aff7adc3046309a32d97ae7c2610c34d", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=86a21121ace5a75de9d57b4b9bd691388e0367bc", "patch": "@@ -4656,7 +4656,8 @@ other fields in the same word of the structure, but to different bytes.\n Define this macro to be the value 1 if memory accesses described by the\n @var{mode} and @var{alignment} parameters have a cost many times greater\n than aligned accesses, for example if they are emulated in a trap\n-handler.\n+handler.  This macro is invoked only for unaligned accesses, i.e. when\n+@code{@var{alignment} < GET_MODE_ALIGNMENT (@var{mode})}.\n \n When this macro is nonzero, the compiler will act as if\n @code{STRICT_ALIGNMENT} were nonzero when generating code for block"}, {"sha": "56b65ef81af79e4ccea6d9072ee4e9bc2fe24b21", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86a21121ace5a75de9d57b4b9bd691388e0367bc/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=86a21121ace5a75de9d57b4b9bd691388e0367bc", "patch": "@@ -1486,9 +1486,10 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t     equivalences in function lra_constraints) and because for spilled\n \t     pseudos we allocate stack memory enough for the biggest\n \t     corresponding paradoxical subreg.  */\n-\t  if (!SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (reg))\n-\t      || SLOW_UNALIGNED_ACCESS (innermode, MEM_ALIGN (reg))\n-\t      || MEM_ALIGN (reg) >= GET_MODE_ALIGNMENT (mode))\n+\t  if (!(MEM_ALIGN (reg) < GET_MODE_ALIGNMENT (mode)\n+\t\t&& SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (reg)))\n+\t      || (MEM_ALIGN (reg) < GET_MODE_ALIGNMENT (innermode)\n+\t\t  && SLOW_UNALIGNED_ACCESS (innermode, MEM_ALIGN (reg))))\n \t    return true;\n \n \t  /* INNERMODE is fast, MODE slow.  Reload the mem in INNERMODE.  */"}]}