{"sha": "782cbcdee4047e47ed122d082f51c37db9fdeda2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgyY2JjZGVlNDA0N2U0N2VkMTIyZDA4MmY1MWMzN2RiOWZkZWRhMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-08T14:01:38Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-08T14:01:38Z"}, "message": "Keep track of the ABI in function types\n\nWe need to know the specified ABI in order to determine the linkage, it\nmight be a plain old rust function, an extern C function or a compiler\nintrinsic and each of these needed to be handled differently.", "tree": {"sha": "4feb3f809c7527598f672fe1da2aa3a2b34464bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4feb3f809c7527598f672fe1da2aa3a2b34464bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/782cbcdee4047e47ed122d082f51c37db9fdeda2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782cbcdee4047e47ed122d082f51c37db9fdeda2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782cbcdee4047e47ed122d082f51c37db9fdeda2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782cbcdee4047e47ed122d082f51c37db9fdeda2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9271e1921d0eac46bda889da6508cf94d32682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9271e1921d0eac46bda889da6508cf94d32682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9271e1921d0eac46bda889da6508cf94d32682"}], "stats": {"total": 121, "additions": 87, "deletions": 34}, "files": [{"sha": "b1eb2e39a219a043b137c19aca189f52468b23a5", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=782cbcdee4047e47ed122d082f51c37db9fdeda2", "patch": "@@ -33,9 +33,9 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n   using Rust::Resolver::TypeCheckBase::visit;\n \n public:\n-  static void Resolve (HIR::ExternalItem *item)\n+  static void Resolve (HIR::ExternalItem *item, const HIR::ExternBlock &parent)\n   {\n-    TypeCheckTopLevelExternItem resolver;\n+    TypeCheckTopLevelExternItem resolver (parent);\n     item->accept_vis (resolver);\n   }\n \n@@ -115,16 +115,21 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n     if (function.is_variadic ())\n       flags |= FNTYPE_IS_VARADIC_FLAG;\n \n-    auto fnType\n-      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t  function.get_mappings ().get_defid (),\n-\t\t\t  function.get_item_name (), flags, std::move (params),\n-\t\t\t  ret_type, std::move (substitutions));\n+    auto fnType = new TyTy::FnType (\n+      function.get_mappings ().get_hirid (),\n+      function.get_mappings ().get_defid (), function.get_item_name (), flags,\n+      TyTy::FnType::get_abi_from_string (parent.get_abi (),\n+\t\t\t\t\t parent.get_locus ()),\n+      std::move (params), ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n \n private:\n-  TypeCheckTopLevelExternItem () : TypeCheckBase () {}\n+  TypeCheckTopLevelExternItem (const HIR::ExternBlock &parent)\n+    : TypeCheckBase (), parent (parent)\n+  {}\n+\n+  const HIR::ExternBlock &parent;\n };\n \n class TypeCheckTopLevelImplItem : public TypeCheckBase\n@@ -233,11 +238,14 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (\n-      function.get_mappings ().get_hirid (),\n-      function.get_mappings ().get_defid (), function.get_function_name (),\n-      function.is_method () ? FNTYPE_IS_METHOD_FLAG : FNTYPE_DEFAULT_FLAGS,\n-      std::move (params), ret_type, std::move (substitutions));\n+    auto fnType\n+      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t  function.get_mappings ().get_defid (),\n+\t\t\t  function.get_function_name (),\n+\t\t\t  function.is_method () ? FNTYPE_IS_METHOD_FLAG\n+\t\t\t\t\t\t: FNTYPE_DEFAULT_FLAGS,\n+\t\t\t  TyTy::FnType::ABI::RUST, std::move (params), ret_type,\n+\t\t\t  std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n "}, {"sha": "54280e800beb4b19fd86f455590992f072e6f17b", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=782cbcdee4047e47ed122d082f51c37db9fdeda2", "patch": "@@ -329,11 +329,12 @@ class TypeCheckStmt : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    function.get_mappings ().get_defid (),\n-\t\t\t\t    function.get_function_name (), false,\n-\t\t\t\t    std::move (params), ret_type,\n-\t\t\t\t    std::move (substitutions));\n+    auto fnType\n+      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t  function.get_mappings ().get_defid (),\n+\t\t\t  function.get_function_name (), FNTYPE_DEFAULT_FLAGS,\n+\t\t\t  TyTy::FnType::ABI::RUST, std::move (params), ret_type,\n+\t\t\t  std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n \n     TyTy::FnType *resolved_fn_type = fnType;"}, {"sha": "6ec17a9178ca88232d292bfea2c2501b430a4b92", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=782cbcdee4047e47ed122d082f51c37db9fdeda2", "patch": "@@ -287,11 +287,12 @@ class TypeCheckTopLevel : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    function.get_mappings ().get_defid (),\n-\t\t\t\t    function.get_function_name (),\n-\t\t\t\t    FNTYPE_DEFAULT_FLAGS, std::move (params),\n-\t\t\t\t    ret_type, std::move (substitutions));\n+    auto fnType\n+      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t  function.get_mappings ().get_defid (),\n+\t\t\t  function.get_function_name (), FNTYPE_DEFAULT_FLAGS,\n+\t\t\t  TyTy::FnType::ABI::RUST, std::move (params), ret_type,\n+\t\t\t  std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n \n@@ -337,7 +338,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n   {\n     for (auto &item : extern_block.get_extern_items ())\n       {\n-\tTypeCheckTopLevelExternItem::Resolve (item.get ());\n+\tTypeCheckTopLevelExternItem::Resolve (item.get (), extern_block);\n       }\n   }\n "}, {"sha": "bee27487c42a860ae81c8b25cd99c78eafaad65d", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=782cbcdee4047e47ed122d082f51c37db9fdeda2", "patch": "@@ -546,11 +546,12 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n       context->insert_type (param.get_mappings (), param_tyty);\n     }\n \n-  auto resolved\n-    = new TyTy::FnType (fn.get_mappings ().get_hirid (),\n-\t\t\tfn.get_mappings ().get_defid (),\n-\t\t\tfunction.get_function_name (), function.is_method (),\n-\t\t\tstd::move (params), ret_type, substitutions);\n+  auto resolved = new TyTy::FnType (\n+    fn.get_mappings ().get_hirid (), fn.get_mappings ().get_defid (),\n+    function.get_function_name (),\n+    function.is_method () ? FNTYPE_IS_METHOD_FLAG : FNTYPE_DEFAULT_FLAGS,\n+    TyTy::FnType::ABI::RUST, std::move (params), ret_type, substitutions);\n+\n   context->insert_type (fn.get_mappings (), resolved);\n   return resolved;\n }"}, {"sha": "316caeac69614cb430feea0598c1be73ae941838", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=782cbcdee4047e47ed122d082f51c37db9fdeda2", "patch": "@@ -882,7 +882,7 @@ FnType::clone () const\n       std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n \n   return new FnType (get_ref (), get_ty_ref (), get_id (), get_identifier (),\n-\t\t     flags, std::move (cloned_params),\n+\t\t     flags, abi, std::move (cloned_params),\n \t\t     get_return_type ()->clone (), clone_substs (),\n \t\t     get_combined_refs ());\n }"}, {"sha": "7f149a9956a128e1c0c5dbc0e0a3ed6c9de05b6a", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782cbcdee4047e47ed122d082f51c37db9fdeda2/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=782cbcdee4047e47ed122d082f51c37db9fdeda2", "patch": "@@ -1071,35 +1071,74 @@ class ADTType : public BaseType, public SubstitutionRef\n class FnType : public BaseType, public SubstitutionRef\n {\n public:\n+  // FIXME these could be constants\n #define FNTYPE_DEFAULT_FLAGS 0x00\n #define FNTYPE_IS_METHOD_FLAG 0x01\n #define FNTYPE_IS_EXTERN_FLAG 0x02\n #define FNTYPE_IS_VARADIC_FLAG 0X04\n \n-  FnType (HirId ref, DefId id, std::string identifier, uint8_t flags,\n+  enum ABI\n+  {\n+    UNKNOWN,\n+    RUST,\n+    INTRINSIC,\n+    C,\n+  };\n+\n+  static ABI get_abi_from_string (const std::string &abi, Location locus)\n+  {\n+    if (abi.compare (\"rust\") == 0)\n+      return ABI::C;\n+    else if (abi.compare (\"rust-intrinsic\") == 0)\n+      return ABI::INTRINSIC;\n+    else if (abi.compare (\"C\") == 0)\n+      return ABI::C;\n+\n+    rust_error_at (locus, \"unknown abi specified\");\n+    return ABI::UNKNOWN;\n+  }\n+\n+  static std::string get_string_from_abi (ABI abi)\n+  {\n+    switch (abi)\n+      {\n+      case ABI::RUST:\n+\treturn \"rust\";\n+      case ABI::INTRINSIC:\n+\treturn \"rust-intrinsic\";\n+      case ABI::C:\n+\treturn \"C\";\n+\n+      case ABI::UNKNOWN:\n+\treturn \"unknown\";\n+      }\n+    return \"unknown\";\n+  }\n+\n+  FnType (HirId ref, DefId id, std::string identifier, uint8_t flags, ABI abi,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *>> params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n       params (std::move (params)), type (type), flags (flags),\n-      identifier (identifier), id (id)\n+      identifier (identifier), id (id), abi (abi)\n   {\n     LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n   }\n \n   FnType (HirId ref, HirId ty_ref, DefId id, std::string identifier,\n-\t  uint8_t flags,\n+\t  uint8_t flags, ABI abi,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *>> params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n       params (params), type (type), flags (flags), identifier (identifier),\n-      id (id)\n+      id (id), abi (abi)\n   {\n     LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n@@ -1184,12 +1223,15 @@ class FnType : public BaseType, public SubstitutionRef\n   FnType *\n   handle_substitions (SubstitutionArgumentMappings mappings) override final;\n \n+  ABI get_abi () const { return abi; }\n+\n private:\n   std::vector<std::pair<HIR::Pattern *, BaseType *>> params;\n   BaseType *type;\n   uint8_t flags;\n   std::string identifier;\n   DefId id;\n+  ABI abi;\n };\n \n class FnPtr : public BaseType"}]}