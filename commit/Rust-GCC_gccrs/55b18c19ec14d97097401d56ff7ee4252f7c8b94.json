{"sha": "55b18c19ec14d97097401d56ff7ee4252f7c8b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTViMThjMTllYzE0ZDk3MDk3NDAxZDU2ZmY3ZWU0MjUyZjdjOGI5NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-14T19:12:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-14T19:12:14Z"}, "message": "* cfgbuild.c: Update comments.\n\nFrom-SVN: r96442", "tree": {"sha": "128b154b204f606f48899b39cbbbc37c66888e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128b154b204f606f48899b39cbbbc37c66888e65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55b18c19ec14d97097401d56ff7ee4252f7c8b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b18c19ec14d97097401d56ff7ee4252f7c8b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b18c19ec14d97097401d56ff7ee4252f7c8b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b18c19ec14d97097401d56ff7ee4252f7c8b94/comments", "author": null, "committer": null, "parents": [{"sha": "f927760badd161592135b6ba58b5f418b19dcec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f927760badd161592135b6ba58b5f418b19dcec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f927760badd161592135b6ba58b5f418b19dcec5"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "54c0d11485993ef9ad01a14345ea25425a45b4f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b18c19ec14d97097401d56ff7ee4252f7c8b94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b18c19ec14d97097401d56ff7ee4252f7c8b94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55b18c19ec14d97097401d56ff7ee4252f7c8b94", "patch": "@@ -1,3 +1,7 @@\n+2005-03-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cfgbuild.c: Update comments.\n+\n 2005-03-14  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/17236"}, {"sha": "98910232b5cd13c449ee0f65bd51646476088206", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b18c19ec14d97097401d56ff7ee4252f7c8b94/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b18c19ec14d97097401d56ff7ee4252f7c8b94/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=55b18c19ec14d97097401d56ff7ee4252f7c8b94", "patch": "@@ -211,8 +211,24 @@ rtl_make_eh_edge (sbitmap edge_cache, basic_block src, rtx insn)\n   free_INSN_LIST_list (&handlers);\n }\n \n-/* State of basic block as seen by find_many_sub_basic_blocks.  */\n-enum state {BLOCK_NEW = 0, BLOCK_ORIGINAL, BLOCK_TO_SPLIT};\n+/* States of basic block as seen by find_many_sub_basic_blocks.  */\n+enum state {\n+  /* Basic blocks created via split_block belong to this state.\n+     make_edges will examine these basic blocks to see if we need to\n+     create edges going out of them.  */\n+  BLOCK_NEW = 0,\n+\n+  /* Basic blocks that do not need examining belong to this state.\n+     These blocks will be left intact.  In particular, make_edges will\n+     not create edges going out of these basic blocks.  */\n+  BLOCK_ORIGINAL,\n+\n+  /* Basic blocks that may need splitting (due to a label appearing in\n+     the middle, etc) belong to this state.  After splitting them,\n+     make_edges will create create edges going out of them as\n+     needed.  */\n+  BLOCK_TO_SPLIT\n+};\n \n #define STATE(BB) (enum state) ((size_t) (BB)->aux)\n #define SET_STATE(BB, STATE) ((BB)->aux = (void *) (size_t) (STATE))\n@@ -221,13 +237,12 @@ enum state {BLOCK_NEW = 0, BLOCK_ORIGINAL, BLOCK_TO_SPLIT};\n #define BLOCK_USED_BY_TABLEJUMP\t\t32\n #define FULL_STATE(BB) ((size_t) (BB)->aux)\n \n-/* Identify the edges between basic blocks MIN to MAX.\n+/* Identify the edges going out of basic blocks between MIN and MAX,\n+   inclusive, that have their states set to BLOCK_NEW or\n+   BLOCK_TO_SPLIT.\n \n-   NONLOCAL_LABEL_LIST is a list of non-local labels in the function.  Blocks\n-   that are otherwise unreachable may be reachable with a non-local goto.\n-\n-   BB_EH_END is an array indexed by basic block number in which we record\n-   the list of exception regions active at the end of the basic block.  */\n+   UPDATE_P should be nonzero if we are updating CFG and zero if we\n+   are building CFG from scratch.  */\n \n static void\n make_edges (basic_block min, basic_block max, int update_p)\n@@ -533,6 +548,7 @@ find_basic_blocks (rtx f)\n \n   profile_status = PROFILE_ABSENT;\n \n+  /* Tell make_edges to examine every block for out-going edges.  */\n   FOR_EACH_BB (bb)\n     SET_STATE (bb, BLOCK_NEW);\n \n@@ -717,8 +733,9 @@ compute_outgoing_frequencies (basic_block b)\n \t\t  / REG_BR_PROB_BASE);\n }\n \n-/* Assume that someone emitted code with control flow instructions to the\n-   basic block.  Update the data structure.  */\n+/* Assume that some pass has inserted labels or control flow\n+   instructions within a basic block.  Split basic blocks as needed\n+   and create edges.  */\n \n void\n find_many_sub_basic_blocks (sbitmap blocks)"}]}