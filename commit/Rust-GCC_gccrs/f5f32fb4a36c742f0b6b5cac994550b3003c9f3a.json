{"sha": "f5f32fb4a36c742f0b6b5cac994550b3003c9f3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmMzJmYjRhMzZjNzQyZjBiNmI1Y2FjOTk0NTUwYjMwMDNjOWYzYQ==", "commit": {"author": {"name": "YizhePKU", "email": "yizhe@pku.edu.cn", "date": "2021-04-13T07:28:36Z"}, "committer": {"name": "YizhePKU", "email": "yizhe@pku.edu.cn", "date": "2021-04-13T12:58:41Z"}, "message": "Implement the inline visitor", "tree": {"sha": "cfe9ad3311fa6fddc1e9261fc790d5bc39b42ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe9ad3311fa6fddc1e9261fc790d5bc39b42ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc4a9549145861a2e71c552f06e53c860e39d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc4a9549145861a2e71c552f06e53c860e39d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc4a9549145861a2e71c552f06e53c860e39d9a"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "2addc8d786410a2309ce88d90d70b319b580827b", "filename": "gcc/rust/util/rust-inline-visitor.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a/gcc%2Frust%2Futil%2Frust-inline-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a/gcc%2Frust%2Futil%2Frust-inline-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-inline-visitor.h?ref=f5f32fb4a36c742f0b6b5cac994550b3003c9f3a", "patch": "@@ -0,0 +1,95 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// An improved implementation of the inline visitor.\n+// Original idea from https://members.accu.org/index.php/articles/2021\n+\n+#ifndef RUST_INLINE_VISITOR\n+#define RUST_INLINE_VISITOR\n+\n+#include <utility>\n+#include <type_traits>\n+\n+namespace Rust {\n+\n+// Wrapper for the target Visitor we're matching against.\n+// Consumes the final nullptr of the _args linked list.\n+template <typename TargetVisitor> struct EmptyVisitor : TargetVisitor\n+{\n+  EmptyVisitor (std::nullptr_t ptr) {}\n+\n+  using TargetVisitor::visit;\n+};\n+\n+// Wrapper for a (possibly incomplete) Visitor.\n+template <typename BaseVisitor, typename Args> struct VisitorWrapper\n+{\n+  // Lambdas are stored in _args as a linked list and passed to the actual\n+  // visitor when end_visitor() is called.\n+  Args _args;\n+\n+  // The actual visitor being created.\n+  // Each visitor inherits from the last one and implements one more visit().\n+  template <typename T, typename F> struct Visitor : BaseVisitor\n+  {\n+    F _f;\n+\n+    Visitor (std::pair<F, Args> &&args)\n+      : BaseVisitor (std::move (args.second)), _f (std::move (args.first))\n+    {}\n+\n+    using BaseVisitor::visit;\n+    virtual void visit (T &t) final override { _f (t); }\n+  };\n+\n+  VisitorWrapper (Args &&args) : _args (std::move (args)) {}\n+\n+  // Add another visit() method to the visitor.\n+  // _args will be moved over, so don't keep the old wrapper around.\n+  template <typename T, typename F>\n+  VisitorWrapper<Visitor<T, F>, std::pair<F, Args>> on (F &&f)\n+  {\n+    return VisitorWrapper<Visitor<T, F>, std::pair<F, Args>> (\n+      std::make_pair (std::move (f), std::move (_args)));\n+  }\n+\n+  // Returns the finished visitor.\n+  // NOTE: The reference implementation has a bug that exposes this method even\n+  // when BaseVisitor is still an abstract class. The C++11 standard states that\n+  // \"An abstract class shall not be used [...] as a function return type\". GCC\n+  // rejects the buggy code as expected, but Clang accepts the code as long as\n+  // the method is not actually called. Maybe this is a bug in Clang?\n+  template <typename T = BaseVisitor>\n+  typename std::enable_if<std::is_constructible<T, Args>::value, T>::type\n+  end_visitor ()\n+  {\n+    return T (std::move (_args));\n+  }\n+};\n+\n+// The entry point.\n+template <typename TargetVisitor>\n+VisitorWrapper<EmptyVisitor<TargetVisitor>, std::nullptr_t>\n+begin_visitor ()\n+{\n+  return VisitorWrapper<EmptyVisitor<TargetVisitor>, std::nullptr_t> (nullptr);\n+}\n+\n+} // namespace Rust\n+\n+#endif"}]}