{"sha": "26b5ace7ea8aff21431d0070377f24031b60aa24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiNWFjZTdlYThhZmYyMTQzMWQwMDcwMzc3ZjI0MDMxYjYwYWEyNA==", "commit": {"author": {"name": "Daniel Kruegler", "email": "daniel.kruegler@gmail.com", "date": "2016-01-12T21:19:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-01-12T21:19:58Z"}, "message": "libstdc++/68877 Reimplement std::__is_swappable\n\n2016-01-12  Daniel Kruegler  <daniel.kruegler@gmail.com>\n\n\tPR libstdc++/68877\n\t* include/std/type_traits: Following N4511, reimplement __is_swappable\n\tand __is_nothrow_swappable. Move __is_swappable to namespace std,\n\tadjust callers. Use __is_nothrow_swappable in swap.\n\t* include/bits/move.h: Use __is_nothrow_swappable in swap.\n\t* testsuite/20_util/is_nothrow_swappable/value.cc: Extend; remove\n\t__is_swappable related tests.\n\t* testsuite/20_util/is_swappable/value.cc: New.\n\t* testsuite/20_util/is_swappable/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/is_swappable/requirements/typedefs.cc: New.\n\t* testsuite/25_algorithms/swap/68877.cc: New.\n\nFrom-SVN: r232296", "tree": {"sha": "f43c510143e6877bb163e4aefc633110dadaa085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f43c510143e6877bb163e4aefc633110dadaa085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b5ace7ea8aff21431d0070377f24031b60aa24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b5ace7ea8aff21431d0070377f24031b60aa24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b5ace7ea8aff21431d0070377f24031b60aa24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b5ace7ea8aff21431d0070377f24031b60aa24/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd285a8bdbfc7ec391886b7c8433fb4aed1b66eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd285a8bdbfc7ec391886b7c8433fb4aed1b66eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd285a8bdbfc7ec391886b7c8433fb4aed1b66eb"}], "stats": {"total": 546, "additions": 512, "deletions": 34}, "files": [{"sha": "95dbb439d81602872a13759114b93081b47d2d07", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -1,3 +1,18 @@\n+2016-01-12  Daniel Kruegler  <daniel.kruegler@gmail.com>\n+\n+\tPR libstdc++/68877\n+\t* include/std/type_traits: Following N4511, reimplement __is_swappable\n+\tand __is_nothrow_swappable. Move __is_swappable to namespace std,\n+\tadjust callers. Use __is_nothrow_swappable in swap.\n+\t* include/bits/move.h: Use __is_nothrow_swappable in swap.\n+\t* testsuite/20_util/is_nothrow_swappable/value.cc: Extend; remove\n+\t__is_swappable related tests.\n+\t* testsuite/20_util/is_swappable/value.cc: New.\n+\t* testsuite/20_util/is_swappable/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/is_swappable/requirements/typedefs.cc: New.\n+\t* testsuite/25_algorithms/swap/68877.cc: New.\n+\n 2016-01-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/function/68995.cc: Test reference_wrapper cases."}, {"sha": "afcea2d8468083ade21ef9afd40403a963f73ba5", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -198,9 +198,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, size_t _Nm>\n     inline\n #if __cplusplus >= 201103L\n-    typename enable_if<__is_swappable_impl::__is_swappable<_Tp>::value>::type\n+    typename enable_if<__is_swappable<_Tp>::value>::type\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n-    noexcept(noexcept(swap(*__a, *__b)))\n+    noexcept(__is_nothrow_swappable<_Tp>::value)\n #else\n     void\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])"}, {"sha": "3a2b546b22f4fa36eaf22920e656a2f73c0f29eb", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -2587,12 +2587,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : true_type\t\t\t\t\t\t\t\t\\\n     { };\n \n+  template <typename _Tp>\n+    struct __is_swappable;\n \n-   namespace __is_swappable_impl {\n-     template <typename _Tp, typename=void>\n-     struct __is_swappable : public false_type\n-     { };\n-   }\n+  template <typename _Tp>\n+    struct __is_nothrow_swappable;\n \n   template<typename _Tp>\n     inline\n@@ -2604,33 +2603,58 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, size_t _Nm>\n     inline\n-    typename enable_if<__is_swappable_impl::__is_swappable<_Tp>::value>::type\n+    typename enable_if<__is_swappable<_Tp>::value>::type\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n-    noexcept(noexcept(swap(*__a, *__b)));\n+    noexcept(__is_nothrow_swappable<_Tp>::value);\n \n-  namespace __is_swappable_impl {\n+  namespace __swappable_details {\n     using std::swap;\n \n-    template <typename _Tp>\n-    struct __is_swappable<_Tp, __void_t<decltype(swap(declval<_Tp&>(),\n-                                                      declval<_Tp&>()))>>\n-    : public true_type\n-    { };\n+    struct __do_is_swappable_impl\n+    {\n+      template<typename _Tp, typename\n+               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>\n+        static true_type __test(int);\n+\n+      template<typename>\n+        static false_type __test(...);\n+    };\n+\n+    struct __do_is_nothrow_swappable_impl\n+    {\n+      template<typename _Tp>\n+        static __bool_constant<\n+          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))\n+        > __test(int);\n+\n+      template<typename>\n+        static false_type __test(...);\n+    };\n+\n   }\n \n-  template <bool, typename _Tp>\n+  template<typename _Tp>\n+    struct __is_swappable_impl\n+    : public __swappable_details::__do_is_swappable_impl\n+    {\n+      typedef decltype(__test<_Tp>(0)) type;\n+    };\n+\n+  template<typename _Tp>\n     struct __is_nothrow_swappable_impl\n-    : public __bool_constant<noexcept(swap(declval<_Tp&>(), declval<_Tp&>()))>\n-    { };\n+    : public __swappable_details::__do_is_nothrow_swappable_impl\n+    {\n+      typedef decltype(__test<_Tp>(0)) type;\n+    };\n \n-  template <typename _Tp>\n-    struct __is_nothrow_swappable_impl<false, _Tp> : public false_type\n+  template<typename _Tp>\n+    struct __is_swappable\n+    : public __is_swappable_impl<_Tp>::type\n     { };\n \n-  template <typename _Tp>\n+  template<typename _Tp>\n     struct __is_nothrow_swappable\n-    : public __is_nothrow_swappable_impl<\n-               __is_swappable_impl::__is_swappable<_Tp>::value, _Tp>\n+    : public __is_nothrow_swappable_impl<_Tp>::type\n     { };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "5f93891b8a50cf9da4270bba32f1ea65a9267d59", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/value.cc", "status": "modified", "additions": 174, "deletions": 11, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -29,32 +29,195 @@\n namespace funny {\n   struct F {};\n   void swap(F&, F&) = delete;\n+  void swap(F(&)[5], F(&)[5]) noexcept;\n+  void swap(F(&)[6], F(&)[6]);\n+  struct A {};\n+  void swap(A&, A&) noexcept(false);\n+}\n+namespace std {\n+  template<>\n+  void swap<funny::A>(funny::A&, funny::A&) noexcept\n+  {\n+  }\n+\n+  template<>\n+  void swap<funny::A>(funny::A(&)[3], funny::A(&)[3]) noexcept(false)\n+  {\n+  }\n+}\n+namespace ns1 {\n+  struct SwapThrow {};\n+  void swap(SwapThrow&, SwapThrow&);\n+  void swap(SwapThrow(&)[3], SwapThrow(&)[3]) noexcept;\n+}\n+\n+namespace ns2 {\n+  struct SwapThrow {\n+    SwapThrow() noexcept = default;\n+    SwapThrow(const SwapThrow&) noexcept(false);\n+    SwapThrow& operator=(const SwapThrow&) noexcept(false);\n+  };\n+}\n+\n+namespace ns3 {\n+  struct SwapNoThrow {\n+    SwapNoThrow() noexcept = default;\n+    SwapNoThrow(const SwapNoThrow&) noexcept(false);\n+    SwapNoThrow& operator =(const SwapNoThrow&) noexcept(false);\n+  };\n+  void swap(SwapNoThrow&, SwapNoThrow&) noexcept;\n+}\n+\n+namespace ns4 {\n+  struct SwapNoThrow {};\n+}\n+\n+namespace ns5 {\n+  struct SwapThrow {\n+    SwapThrow() noexcept = default;\n+    SwapThrow(SwapThrow&&) noexcept;\n+    SwapThrow& operator=(const SwapThrow&) noexcept(false);\n+  };\n }\n void test01()\n {\n   using std::__is_nothrow_swappable;\n-  using std::__is_swappable_impl::__is_swappable;\n   using namespace __gnu_test;\n   // Positive tests.\n-  static_assert(test_property<__is_swappable, int>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable, int>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, bool>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    decltype(nullptr)>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int&>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int&&>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable, int[1]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int[1][2]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, funny::F[5]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, EnumType>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, PODType>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, UnionType>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    construct::SE>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    construct::Empty>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, void*>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, void(*)()>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int const*>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, ClassType*>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    int ClassType::*>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    void (ClassType::*)()>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    int (ClassType::*)() const volatile>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns1::SwapThrow[3]>(true), \"\");\n+  static_assert(!noexcept(std::swap(std::declval<ns1::SwapThrow(&)[3]>(),\n+                                    std::declval<ns1::SwapThrow(&)[3]>())),\n+                                    \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns3::SwapNoThrow>(true), \"\");\n+  static_assert(!noexcept(std::swap(std::declval<ns3::SwapNoThrow&>(),\n+                                    std::declval<ns3::SwapNoThrow&>())), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns3::SwapNoThrow[1]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns3::SwapNoThrow[3]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns3::SwapNoThrow[2][3][4]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns4::SwapNoThrow>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns4::SwapNoThrow[1]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns4::SwapNoThrow[3]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        ns4::SwapNoThrow[2][3][4]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        std::pair<int, int>>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::pair<int, int>>(true), \"\");\n+        std::pair<int, int>[1]>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::tuple<int>>(true), \"\");\n+        std::pair<int, int>[1][2]>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::array<int, 1>>(true), \"\");\n+        std::tuple<int>>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::queue<int>>(true), \"\");\n+        std::tuple<int>[1]>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::priority_queue<int>>(true), \"\");\n+        std::tuple<int>[1][2]>(true), \"\");\n   static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::stack<int>>(true), \"\");\n+        std::tuple<>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        std::tuple<>[1]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        std::tuple<>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        std::array<int, 1>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        std::queue<int>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        std::priority_queue<int>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+        std::stack<int>>(true), \"\");\n   // Negative tests.\n-  static_assert(test_property<__is_swappable, construct::DelCopy>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F[1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, void>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, const void>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, void()>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    void() const>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    void() volatile>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    void() const volatile>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, const int>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, const bool>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    const int[1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    const int[1][2]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    const int[1][2][3]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int[]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, const int[]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int[][1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    const funny::F[5]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    construct::Abstract>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    construct::DelCopy>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, funny::F>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, funny::F[1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    funny::F[1][2]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    funny::F[1][2][3]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, funny::F[6]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, funny::A>(false), \"\");\n+  static_assert(noexcept(std::swap(std::declval<funny::A&>(),\n+                                   std::declval<funny::A&>())), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, funny::A[3]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns1::SwapThrow>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns1::SwapThrow[1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns1::SwapThrow[3][2]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns1::SwapThrow[2][3][4]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns2::SwapThrow>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns2::SwapThrow[1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns2::SwapThrow[2][3][4]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns5::SwapThrow>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns5::SwapThrow[1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+    ns5::SwapThrow[2][3][4]>(false), \"\");\n   static_assert(test_property<__is_nothrow_swappable,\n \t\tThrowCopyConsClass>(false), \"\");\n   static_assert(test_property<__is_nothrow_swappable,"}, {"sha": "c3f93435290ef840902657734040388ebb87af8d", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/requirements/explicit_instantiation.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation.cc?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct std::__is_swappable<test_type>;\n+}"}, {"sha": "a1e289bb01fa9a0b6977e19b3bd9641d8eb5b433", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/requirements/typedefs.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs.cc?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::__is_swappable<int>          test_type;\n+  typedef test_type::value_type             value_type;\n+  typedef test_type::type                   type;\n+  typedef test_type::type::value_type       type_value_type;\n+  typedef test_type::type::type             type_type;\n+}"}, {"sha": "d594cf652a58925ea2941b97f89c45b1aee7d84f", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/value.cc", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.cc?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -0,0 +1,185 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+#include <utility>\n+#include <array>\n+#include <tuple>\n+#include <queue>\n+#include <stack>\n+\n+namespace funny {\n+  struct F {};\n+  void swap(F&, F&) = delete;\n+  void swap(F(&)[5], F(&)[5]);\n+\n+  struct F2\n+  {\n+    friend void swap(F2&, F2&) = delete;\n+  };\n+\n+  struct F3\n+  {\n+    friend void swap(F3&, F3) {}\n+  };\n+}\n+void test01()\n+{\n+  using std::__is_swappable;\n+  using namespace __gnu_test;\n+  // Positive tests.\n+  static_assert(test_property<__is_swappable, int>(true), \"\");\n+  static_assert(test_property<__is_swappable, bool>(true), \"\");\n+  static_assert(test_property<__is_swappable, decltype(nullptr)>(true), \"\");\n+  static_assert(test_property<__is_swappable, int&>(true), \"\");\n+  static_assert(test_property<__is_swappable, int&&>(true), \"\");\n+  static_assert(test_property<__is_swappable, int[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable, int[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable, int[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable, int(&)[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable, funny::F[5]>(true), \"\");\n+  static_assert(test_property<__is_swappable, funny::F3>(true), \"\");\n+  static_assert(test_property<__is_swappable, funny::F3[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable, funny::F3[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable, funny::F3[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+    ThrowCopyConsClass>(true), \"\");\n+  static_assert(test_property<__is_swappable, EnumType>(true), \"\");\n+  static_assert(test_property<__is_swappable, PODType>(true), \"\");\n+  static_assert(test_property<__is_swappable, UnionType>(true), \"\");\n+  static_assert(test_property<__is_swappable, construct::SE>(true), \"\");\n+  static_assert(test_property<__is_swappable, construct::Empty>(true), \"\");\n+  static_assert(test_property<__is_swappable, void*>(true), \"\");\n+  static_assert(test_property<__is_swappable, int const*>(true), \"\");\n+  static_assert(test_property<__is_swappable, ClassType*>(true), \"\");\n+  static_assert(test_property<__is_swappable, int ClassType::*>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+    void (ClassType::*)()>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+    construct::Nontrivial>(true), \"\");\n+  static_assert(test_property<__is_swappable, construct::Any>(true), \"\");\n+  static_assert(test_property<__is_swappable, construct::nAny>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::pair<int, int>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::pair<int, int>[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::pair<int, int>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::pair<int, int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::pair<construct::Nontrivial, construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<int>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<int>[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<int>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<>[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<>[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::tuple<construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::array<int, 1>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::array<int, 1>[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::array<int, 1>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::array<int, 1>[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::array<construct::Nontrivial, 1>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::queue<int>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::queue<int>[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::queue<int>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::queue<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::queue<construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::priority_queue<int>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::priority_queue<int>[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::priority_queue<int>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::priority_queue<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::priority_queue<construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::stack<int>>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::stack<int>[1]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::stack<int>[1][2]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::stack<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<__is_swappable,\n+\t\tstd::stack<construct::Nontrivial>>(true), \"\");\n+  // Negative tests.\n+  static_assert(test_property<__is_swappable, void>(false), \"\");\n+  static_assert(test_property<__is_swappable, const void>(false), \"\");\n+  static_assert(test_property<__is_swappable, void()>(false), \"\");\n+  static_assert(test_property<__is_swappable, void() const>(false), \"\");\n+  static_assert(test_property<__is_swappable, void() volatile>(false), \"\");\n+  static_assert(test_property<__is_swappable,\n+    void() const volatile>(false), \"\");\n+  static_assert(test_property<__is_swappable, const int>(false), \"\");\n+  static_assert(test_property<__is_swappable, const bool>(false), \"\");\n+  static_assert(test_property<__is_swappable, int[]>(false), \"\");\n+  static_assert(test_property<__is_swappable, const int[]>(false), \"\");\n+  static_assert(test_property<__is_swappable, int[][1]>(false), \"\");\n+  static_assert(test_property<__is_swappable, const int[1]>(false), \"\");\n+  static_assert(test_property<__is_swappable, const int[1][2]>(false), \"\");\n+  static_assert(test_property<__is_swappable, const int[1][2][3]>(false), \"\");\n+  static_assert(test_property<__is_swappable, construct::DelCopy>(false), \"\");\n+  static_assert(test_property<__is_swappable,\n+    construct::Abstract>(false), \"\");\n+  static_assert(test_property<__is_swappable,\n+    construct::NontrivialUnion>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F[1]>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F[1][2]>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F[1][2][3]>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F[4]>(false), \"\");\n+  static_assert(test_property<__is_swappable, construct::DelCopy>(false), \"\");\n+  static_assert(test_property<__is_swappable,\n+     DeletedCopyAssignClass>(false), \"\");\n+  static_assert(test_property<__is_swappable,\n+     DeletedMoveAssignClass>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F2>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F2[1]>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F2[1][2]>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F2[1][2][3]>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F2[4]>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F2[5]>(false), \"\");\n+}"}, {"sha": "dd5aa8c6f7d043eac17e98df4e14872db6c9b595", "filename": "libstdc++-v3/testsuite/25_algorithms/swap/68877.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap%2F68877.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b5ace7ea8aff21431d0070377f24031b60aa24/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap%2F68877.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap%2F68877.cc?ref=26b5ace7ea8aff21431d0070377f24031b60aa24", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+// libstdc++/68877\n+void test01()\n+{\n+  int x[2][3];\n+  int y[2][3];\n+\n+  std::swap(x, y);\n+\n+  using std::swap;\n+  swap(x, y);\n+}"}]}