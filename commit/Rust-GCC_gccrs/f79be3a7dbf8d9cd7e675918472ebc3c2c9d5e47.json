{"sha": "f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc5YmUzYTdkYmY4ZDljZDdlNjc1OTE4NDcyZWJjM2MyYzlkNWU0Nw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-02T19:54:02Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-02T19:54:02Z"}, "message": "re PR fortran/91589 (ICE in gfc_conv_component_ref, at fortran/trans-expr.c:2447)\n\n2019-09-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91589\n\t* primary.c (gfc_match_varspec): Return MATCH_NO on an apparent\n\tcomponent ref, when the primary type is intrinsic.\n\n2019-09-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91589\n\t* gfortran.dg/pr91589.f90 : New test.\n\nFrom-SVN: r275324", "tree": {"sha": "3f6eca872afdd100b6f5cdc66112fd9b896ea9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f6eca872afdd100b6f5cdc66112fd9b896ea9a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/comments", "author": null, "committer": null, "parents": [{"sha": "be0fb5484a64414878c31a1606b07175b54ecb90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0fb5484a64414878c31a1606b07175b54ecb90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0fb5484a64414878c31a1606b07175b54ecb90"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "065099a62d9c421ca231518f78032c2ad5c2e567", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "patch": "@@ -1,3 +1,9 @@\n+2019-09-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91589\n+\t* primary.c (gfc_match_varspec): Return MATCH_NO on an apparent\n+\tcomponent ref, when the primary type is intrinsic.\n+\n 2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>\n \n \tPR fortran/91552"}, {"sha": "e94ea821ba77a89ac2123efa11216325521de6b4", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "patch": "@@ -2028,6 +2028,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n   match m;\n   bool unknown;\n   bool inquiry;\n+  bool intrinsic;\n   locus old_loc;\n   char sep;\n \n@@ -2232,11 +2233,15 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n       if (m != MATCH_YES)\n \treturn MATCH_ERROR;\n \n+      intrinsic = false;\n       if (primary->ts.type != BT_CLASS && primary->ts.type != BT_DERIVED)\n \t{\n \t  inquiry = is_inquiry_ref (name, &tmp);\n \t  if (inquiry)\n \t    sym = NULL;\n+\n+\t  if (sep == '%' && primary->ts.type != BT_UNKNOWN)\n+\t    intrinsic = true;\n \t}\n       else\n \tinquiry = false;\n@@ -2296,12 +2301,16 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  break;\n \t}\n \n-      if (!inquiry)\n+      if (!inquiry && !intrinsic)\n \tcomponent = gfc_find_component (sym, name, false, false, &tmp);\n       else\n \tcomponent = NULL;\n \n-      if (component == NULL && !inquiry)\n+      /* In some cases, returning MATCH_NO gives a better error message. Most\n+\t cases return \"Unclassifiable statement at...\"  */\n+      if (intrinsic && !inquiry)\n+\treturn MATCH_NO;\n+      else if (component == NULL && !inquiry)\n \treturn MATCH_ERROR;\n \n       /* Extend the reference chain determined by gfc_find_component or\n@@ -2598,7 +2607,7 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n \n \t  case AR_UNKNOWN:\n \t    /* For standard conforming code, AR_UNKNOWN should not happen.\n-\t       For nonconforming code, gfortran can end up here.  Treat it \n+\t       For nonconforming code, gfortran can end up here.  Treat it\n \t       as a no-op.  */\n \t    break;\n \t  }"}, {"sha": "2f93d91dcac9b289c7ffa8e9d3833434cd9528fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "patch": "@@ -1,3 +1,8 @@\n+2019-09-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91589\n+\t* gfortran.dg/pr91589.f90 : New test.\n+\n 2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>\n \n \tPR fortran/91552"}, {"sha": "d02cb64bfc281854e58819ec7a0ba7295511a487", "filename": "gcc/testsuite/gfortran.dg/pr91589.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91589.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91589.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91589.f90?ref=f79be3a7dbf8d9cd7e675918472ebc3c2c9d5e47", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! Check the fix for PR91589, in which the invalid expression caused an ICE.\n+! Other statements using this invalid expression cause \"Unclassifiable statement at...\"\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   type t\n+      integer :: a\n+   end type\n+   type(t) :: x = t(1)\n+   call sub (x%a%a)   ! { dg-error \"Syntax error in argument list\" }\n+end\n+"}]}