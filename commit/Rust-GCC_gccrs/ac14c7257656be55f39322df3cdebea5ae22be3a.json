{"sha": "ac14c7257656be55f39322df3cdebea5ae22be3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxNGM3MjU3NjU2YmU1NWYzOTMyMmRmM2NkZWJlYTVhZTIyYmUzYQ==", "commit": {"author": {"name": "Ian Dall", "email": "ian@sibyl.beware.dropbear.id.au", "date": "2002-08-01T21:21:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-08-01T21:21:52Z"}, "message": "ns32k.h (TARGET_IEEE_COMPARE): Correct earlier patch.\n\n        * config/ns32k/ns32k.h (TARGET_IEEE_COMPARE): Correct earlier patch.\n        (RETURN_ADDR_RTX): Cannot determine return address for FRAME > 0\n        when there is no frame pointer.\n        (INITIAL_FRAME_POINTER_OFFSET): Count stack space for saved fp\n        registers properly.\n        * config/ns32k/__unorddf2.c: New file.\n        * config/ns32k/__unordsf2.c: New file.\n        * config/ns32k/t-ns32k: New file.\n        * config.gcc (ns32k-*-netbsd*): Use it.\n\nFrom-SVN: r55949", "tree": {"sha": "81d7d9afc536c5288382782250fe8d2d9e7a7176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81d7d9afc536c5288382782250fe8d2d9e7a7176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac14c7257656be55f39322df3cdebea5ae22be3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac14c7257656be55f39322df3cdebea5ae22be3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac14c7257656be55f39322df3cdebea5ae22be3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac14c7257656be55f39322df3cdebea5ae22be3a/comments", "author": null, "committer": null, "parents": [{"sha": "170727320274e08e7ee320ee3bf68304799879d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170727320274e08e7ee320ee3bf68304799879d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/170727320274e08e7ee320ee3bf68304799879d5"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "99e8404ce346ccc2d466f4052ba0c682022907ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac14c7257656be55f39322df3cdebea5ae22be3a", "patch": "@@ -1,3 +1,15 @@\n+2002-08-01  Ian Dall  <ian@sibyl.beware.dropbear.id.au>\n+\n+\t* config/ns32k/ns32k.h (TARGET_IEEE_COMPARE): Correct earlier patch.\n+\t(RETURN_ADDR_RTX): Cannot determine return address for FRAME > 0\n+\twhen there is no frame pointer.\n+\t(INITIAL_FRAME_POINTER_OFFSET): Count stack space for saved fp\n+\tregisters properly.\n+\t* config/ns32k/__unorddf2.c: New file.\n+\t* config/ns32k/__unordsf2.c: New file.\n+\t* config/ns32k/t-ns32k: New file.\n+\t* config.gcc (ns32k-*-netbsd*): Use it.\n+\n 2002-08-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.h (SPU_CONST_OFFSET_OK): Change to 0xff."}, {"sha": "9540a0d2c970031291c4b3ab5345477a731ed8e5", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ac14c7257656be55f39322df3cdebea5ae22be3a", "patch": "@@ -1970,7 +1970,7 @@ ns32k-*-netbsdelf*)\n ns32k-*-netbsd*)\n \ttm_file=\"${tm_file} netbsd.h netbsd-aout.h ns32k/netbsd.h\"\n \t# On NetBSD, the headers are already okay, except for math.h.\n-\ttmake_file=t-netbsd\n+\ttmake_file=\"t-netbsd ns32k/t-ns32k\"\n \tuse_collect2=yes\n \t;;\n pdp11-*-bsd)"}, {"sha": "aa82aaa61219826172b885a4f8b211487ecc9ff2", "filename": "gcc/config/ns32k/__unorddf2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2F__unorddf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2F__unorddf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2F__unorddf2.c?ref=ac14c7257656be55f39322df3cdebea5ae22be3a", "patch": "@@ -0,0 +1,34 @@\n+/* Lightweight function to test for ieee unordered comparison\n+   Copyright (C) 2002\n+   Free Software Foundation, Inc.\n+   Contributed by Ian Dall <ian@beware.dropbear.id.au>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+# define ISNAN(x) (\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    union u { double d; unsigned int i[2]; } *t = (union u *)&(x);\t\\\n+    ((t->i[1] & 0x7ff00000) == 0x7ff00000) &&\t\t\t\t\\\n+    (t->i[0] != 0 || (t->i[1] & 0xfffff) != 0);\t\t\t\t\\\n+  })\n+\n+int __unorddf2 (double, double);\n+int __unorddf2 (double a, double b)\n+{\n+  return ISNAN(a) || ISNAN(b);\n+}"}, {"sha": "3f0e0b27174bdbebd5f2de79b696883fa49e4b4d", "filename": "gcc/config/ns32k/__unordsf2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2F__unordsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2F__unordsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2F__unordsf2.c?ref=ac14c7257656be55f39322df3cdebea5ae22be3a", "patch": "@@ -0,0 +1,34 @@\n+/* Lightweight function to test for ieee unordered comparison\n+   Copyright (C) 2002\n+   Free Software Foundation, Inc.\n+   Contributed by Ian Dall <ian@beware.dropbear.id.au>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+# define ISNAN(x) (\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union u { float f; unsigned int i; } *t = (union u *)&(x);\t\\\n+    ((t->i & 0x7f800000) == 0x7f800000) &&\t\t\t\\\n+    ((t->i & 0x7fffff) != 0);\t\t\t\t\t\\\n+  })\n+\n+int __unordsf2 ( float, float);\n+int __unordsf2 ( float a, float b)\n+{\n+  return ISNAN(a) || ISNAN(b);\n+}"}, {"sha": "2b7727e3cee5963ea3e1831ede5aaabc9c459d49", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=ac14c7257656be55f39322df3cdebea5ae22be3a", "patch": "@@ -129,7 +129,7 @@ extern int target_flags;\n /* Compile using bitfield insns.  */\n #define TARGET_BITFIELD ((target_flags & MASK_NO_BITFIELD) == 0)\n \n-#define TARGET_IEEE_FP (target_flags & MASK_IEEE_COMPARE)\n+#define TARGET_IEEE_COMPARE (target_flags & MASK_IEEE_COMPARE)\n \n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n@@ -578,7 +578,8 @@ enum reg_class\n    After the prologue, RA is at 4(fp) in the current frame.  */\n \n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\\\n-  (gen_rtx (MEM, Pmode, gen_rtx (PLUS, Pmode, (FRAME), GEN_INT(4))))\n+  ((COUNT> 0 && flag_omit_frame_pointer)? NULL_RTX\t\t\t\\\n+   : gen_rtx (MEM, Pmode, gen_rtx (PLUS, Pmode, (FRAME), GEN_INT(4))))\n \n /* A C expression whose value is an integer giving the offset, in\n    bytes, from the value of the stack pointer register to the top of\n@@ -743,12 +744,9 @@ enum reg_class\n {\t\t\t\t\t\t\t\t\\\n   int regno;\t\t\t\t\t\t\t\\\n   int offset = -4;\t\t\t\t\t\t\\\n-  for (regno = 0; regno < L1_REGNUM; regno++)\t\t\t\\\n+  for (regno = 0; regno < FRAME_POINTER_REGNUM; regno++)\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n       offset += 4;\t\t\t\t\t\t\\\n-  for (; regno < FRAME_POINTER_REGNUM; regno++)\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      offset += 8;\t\t\t\t\t\t\\\n   if (flag_pic && current_function_uses_pic_offset_table)\t\\\n     offset += 4;\t\t\t\t\t\t\\\n   (DEPTH) = (offset + get_frame_size ()\t\t\t\t\\"}, {"sha": "a8b6329d47ff7a5f2dda2af3c0c9a01c86e13300", "filename": "gcc/config/ns32k/t-ns32k", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2Ft-ns32k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac14c7257656be55f39322df3cdebea5ae22be3a/gcc%2Fconfig%2Fns32k%2Ft-ns32k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Ft-ns32k?ref=ac14c7257656be55f39322df3cdebea5ae22be3a", "patch": "@@ -0,0 +1,4 @@\n+# We want fine grained libraries, so use the new code to build the\n+# floating point emulation libraries.\n+LIB2FUNCS_EXTRA = $(srcdir)/config/ns32k/__unorddf2.c \\\n+                  $(srcdir)/config/ns32k/__unordsf2.c"}]}