{"sha": "8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYzZjVhYzA4OWY4ODUwZjY0ZGFkMjUzYmM1NGUzMWY0NTBlOWRkZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-08-07T16:18:09Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-08-07T16:18:09Z"}, "message": "Add alternative_mask to ira_implicitly_set_insn_hard_regs\n\nSince ira_implicitly_set_insn_hard_regs may be called outside of\nira-lives.c, it can't use the local variable, preferred_alternatives.\nThis patch adds an alternative_mask argument to\nira_implicitly_set_insn_hard_regs.\n\ngcc/\n\n\tPR rtl-optimization/67029\n\t* ira-color.c: Include \"recog.h\" before including \"ira-int.h\".\n\t* target-globals.c: Likewise.\n\t* ira-lives.c (ira_implicitly_set_insn_hard_regs): Add an\n\tadds an alternative_mask argument and use it instead of\n\tpreferred_alternatives.\n\t* ira.h (ira_implicitly_set_insn_hard_regs): Moved to ...\n\t* ira-int.h (ira_implicitly_set_insn_hard_regs): Here.\n\t* sched-deps.c: Include \"ira-int.h\" after including \"ira.h\".\n\t(sched_analyze_insn): Update call to\n\tira_implicitly_set_insn_hard_regs.\n\t* sel-sched.c: Include \"ira-int.h\" after including \"ira.h\".\n\t(implicit_clobber_conflict_p): Update call to\n\tira_implicitly_set_insn_hard_regs.\n\ngcc/testsuite/\n\n\tPR rtl-optimization/67029\n\t* gcc.dg/pr67029.c: New test.\n\nFrom-SVN: r226724", "tree": {"sha": "e6b6eb42328572e63f292ea0725c48ed8916349c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6b6eb42328572e63f292ea0725c48ed8916349c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e360db97091f31bf8a16ec50e99b31ebe6c52e1"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "a92a707db321eb73260a3d012ecd88b5a6ec3dfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -1,3 +1,20 @@\n+2015-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/67029\n+\t* ira-color.c: Include \"recog.h\" before including \"ira-int.h\".\n+\t* target-globals.c: Likewise.\n+\t* ira-lives.c (ira_implicitly_set_insn_hard_regs): Add an\n+\tadds an alternative_mask argument and use it instead of\n+\tpreferred_alternatives.\n+\t* ira.h (ira_implicitly_set_insn_hard_regs): Moved to ...\n+\t* ira-int.h (ira_implicitly_set_insn_hard_regs): Here.\n+\t* sched-deps.c: Include \"ira-int.h\" after including \"ira.h\".\n+\t(sched_analyze_insn): Update call to\n+\tira_implicitly_set_insn_hard_regs.\n+\t* sel-sched.c: Include \"ira-int.h\" after including \"ira.h\".\n+\t(implicit_clobber_conflict_p): Update call to\n+\tira_implicitly_set_insn_hard_regs.\n+\n 2015-08-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* Makefile.in (.INTERMEDIATE): Add gpl.pod."}, {"sha": "c8f33ed8d06460443d76a47d70395f1988fb8c8d", "filename": "gcc/ira-color.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"ira.h\"\n #include \"alloc-pool.h\"\n+#include \"recog.h\"\n #include \"ira-int.h\"\n \n typedef struct allocno_hard_regs *allocno_hard_regs_t;"}, {"sha": "a993dfcb81e1dad123dbe70672b97fe8471c51fb", "filename": "gcc/ira-int.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -1041,6 +1041,8 @@ extern void ira_debug_live_ranges (void);\n extern void ira_create_allocno_live_ranges (void);\n extern void ira_compress_allocno_live_ranges (void);\n extern void ira_finish_allocno_live_ranges (void);\n+extern void ira_implicitly_set_insn_hard_regs (HARD_REG_SET *,\n+\t\t\t\t\t       alternative_mask);\n \n /* ira-conflicts.c */\n extern void ira_debug_conflicts (bool);"}, {"sha": "011d5136492dd3981fed7b19b673437a40d0fa96", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -831,7 +831,8 @@ single_reg_operand_class (int op_num)\n    might be used by insn reloads because the constraints are too\n    strict.  */\n void\n-ira_implicitly_set_insn_hard_regs (HARD_REG_SET *set)\n+ira_implicitly_set_insn_hard_regs (HARD_REG_SET *set,\n+\t\t\t\t   alternative_mask preferred)\n {\n   int i, c, regno = 0;\n   enum reg_class cl;\n@@ -854,7 +855,6 @@ ira_implicitly_set_insn_hard_regs (HARD_REG_SET *set)\n \t  mode = (GET_CODE (op) == SCRATCH\n \t\t  ? GET_MODE (op) : PSEUDO_REGNO_MODE (regno));\n \t  cl = NO_REGS;\n-\t  alternative_mask preferred = preferred_alternatives;\n \t  for (; (c = *p); p += CONSTRAINT_LEN (c, p))\n \t    if (c == '#')\n \t      preferred &= ~ALTERNATIVE_BIT (0);"}, {"sha": "881674b37f2954128fe546c333ce7929d86ae904", "filename": "gcc/ira.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fira.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.h?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -192,7 +192,6 @@ extern void ira_init (void);\n extern void ira_setup_eliminable_regset (void);\n extern rtx ira_eliminate_regs (rtx, machine_mode);\n extern void ira_set_pseudo_classes (bool, FILE *);\n-extern void ira_implicitly_set_insn_hard_regs (HARD_REG_SET *);\n extern void ira_expand_reg_equiv (void);\n extern void ira_update_equiv_info_by_shuffle_insn (int, int, rtx_insn *);\n "}, {"sha": "0a8dcb00af94e2550d64a5f66297046c8d3994b0", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"ira.h\"\n+#include \"ira-int.h\"\n #include \"target.h\"\n \n #ifdef INSN_SCHEDULING\n@@ -2891,7 +2892,8 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx_insn *insn)\n \n       extract_insn (insn);\n       preprocess_constraints (insn);\n-      ira_implicitly_set_insn_hard_regs (&temp);\n+      alternative_mask prefrred = get_preferred_alternatives (insn);\n+      ira_implicitly_set_insn_hard_regs (&temp, prefrred);\n       AND_COMPL_HARD_REG_SET (temp, ira_no_alloc_regs);\n       IOR_HARD_REG_SET (implicit_reg_pending_clobbers, temp);\n     }"}, {"sha": "18604444b15f2c37db87faca340fbaeeb71e5d6c", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtlhooks-def.h\"\n #include \"emit-rtl.h\"\n #include \"ira.h\"\n+#include \"ira-int.h\"\n #include \"rtl-iter.h\"\n \n #ifdef INSN_SCHEDULING\n@@ -2104,7 +2105,8 @@ implicit_clobber_conflict_p (insn_t through_insn, expr_t expr)\n   /* Calculate implicit clobbers.  */\n   extract_insn (insn);\n   preprocess_constraints (insn);\n-  ira_implicitly_set_insn_hard_regs (&temp);\n+  alternative_mask prefrred = get_preferred_alternatives (insn);\n+  ira_implicitly_set_insn_hard_regs (&temp, prefrred);\n   AND_COMPL_HARD_REG_SET (temp, ira_no_alloc_regs);\n \n   /* If any implicit clobber registers intersect with regular ones in"}, {"sha": "8bc44ca1310be00424623069642feb34c17b3d15", "filename": "gcc/target-globals.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"ira.h\"\n #include \"alloc-pool.h\"\n+#include \"recog.h\"\n #include \"ira-int.h\"\n #include \"builtins.h\"\n #include \"gcse.h\""}, {"sha": "8aba7c0351d496d4274cc47f3891350106df7e4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -1,3 +1,8 @@\n+2015-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/67029\n+\t* gcc.dg/pr67029.c: New test.\n+\n 2015-08-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/64104"}, {"sha": "f0023e524e9382bff7c66e2bf78cfaec28a3b8f0", "filename": "gcc/testsuite/gcc.dg/pr67029.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67029.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f3f5ac089f8850f64dad253bc54e31f450e9ddf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67029.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67029.c?ref=8f3f5ac089f8850f64dad253bc54e31f450e9ddf", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { int128 && scheduling } } } */\n+/* { dg-options \"-O2 -fschedule-insns\" } */\n+/* { dg-additional-options \"-fstack-protector\" { target fstack_protector } } */\n+\n+extern void fn2 (char *);\n+__int128 a, b;\n+int\n+fn1 (void)\n+{\n+  char e[32];\n+  fn2 (e);\n+  b = 9 * (a >> 1);\n+  return 0;\n+}"}]}