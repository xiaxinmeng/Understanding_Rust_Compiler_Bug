{"sha": "8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0YjliN2FkM2QxYmJjMTY1MTZhNWE3M2E2YmEzYzNjMjFkMTgyMg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-11-28T20:24:48Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-28T20:24:48Z"}, "message": "* pa.md (reload shift-add patterns): Remove.\n\nFrom-SVN: r30688", "tree": {"sha": "52b7fb8406c23eb66376c44906b44098482d0c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b7fb8406c23eb66376c44906b44098482d0c7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822/comments", "author": null, "committer": null, "parents": [{"sha": "2e02044af4bc83dd1bfcaf0c8f881eb6d9f73ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e02044af4bc83dd1bfcaf0c8f881eb6d9f73ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e02044af4bc83dd1bfcaf0c8f881eb6d9f73ded"}], "stats": {"total": 45, "additions": 4, "deletions": 41}, "files": [{"sha": "f4f058e9c67fa57e1768f5aa31d80c7257485657", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "patch": "@@ -1,3 +1,7 @@\n+Sun Nov 28 13:21:00 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.md (reload shift-add patterns): Remove.\n+\n 1999-11-28 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n \t* reorg.c (dbr_schedule) Print more statistics. Corrected"}, {"sha": "d342764348c20f89cbc72517a0574d8da5dd8978", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "patch": "@@ -3118,25 +3118,6 @@\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4\")])\n \n-;; Disgusting kludge to work around reload bugs with frame pointer\n-;; elimination.  Similar to other magic reload patterns in the\n-;; indexed memory operations.\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(plus:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-\t\t\t  (match_operand:SI 2 \"register_operand\" \"r\"))\n-\t\t (match_operand:SI 3 \"const_int_operand\" \"rL\")))]\n-  \"reload_in_progress\"\n-  \"*\n-{\n-  if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"ldo %3(%2),%0\\;{addl|add,l} %1,%0,%0\\\";\n-  else\n-    return \\\"{addl|add,l} %3,%2,%0\\;{addl|add,l} %1,%0,%0\\\";\n-}\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_expand \"subdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n@@ -4223,28 +4204,6 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n-;; This variant of the above insn can occur if the first operand\n-;; is the frame pointer.  This is a kludge, but there doesn't\n-;; seem to be a way around it.  Only recognize it while reloading.\n-;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n-;; has constraints allowing a register.  I don't know how this works,\n-;; but it somehow makes sure that out-of-range constants are placed\n-;; in a register which somehow magically is a \"const_int_operand\".\n-;; (this was stolen from alpha.md, I'm not going to try and change it.\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r,r\")\n-\t(plus:SI (plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r,r\")\n-\t\t\t\t   (match_operand:SI 4 \"shadd_operand\" \"\"))\n-\t\t\t  (match_operand:SI 1 \"register_operand\" \"r,r\"))\n-\t\t (match_operand:SI 3 \"const_int_operand\" \"r,J\")))]\n-  \"reload_in_progress\"\n-  \"@\n-   {sh%O4addl %2,%1,%0|shladd,l %2,%O4,%1,%0}\\;{addl|add,l} %3,%0,%0\n-   {sh%O4addl %2,%1,%0|shladd,l %2,%O4,%1,%0}\\;ldo %3(%0),%0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"8\")])\n-\n ;; This anonymous pattern and splitter wins because it reduces the latency\n ;; of the shadd sequence without increasing the latency of the shift.\n ;;"}]}