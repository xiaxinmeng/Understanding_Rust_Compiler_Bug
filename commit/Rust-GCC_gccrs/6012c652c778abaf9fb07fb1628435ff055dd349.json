{"sha": "6012c652c778abaf9fb07fb1628435ff055dd349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxMmM2NTJjNzc4YWJhZjlmYjA3ZmIxNjI4NDM1ZmYwNTVkZDM0OQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2018-01-02T22:56:45Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-01-02T22:56:45Z"}, "message": "rs6000-p8swap.c (swap_feeds_both_load_and_store): New function.\n\n2018-01-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-p8swap.c (swap_feeds_both_load_and_store):\n\tNew function.\n\t(rs6000_analyze_swaps): Mark a web unoptimizable if it contains a\n\tswap associated with both a load and a store.\n\nFrom-SVN: r256111", "tree": {"sha": "9c7959f41fe324a28bdfa3591a853985afeee38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c7959f41fe324a28bdfa3591a853985afeee38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6012c652c778abaf9fb07fb1628435ff055dd349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6012c652c778abaf9fb07fb1628435ff055dd349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6012c652c778abaf9fb07fb1628435ff055dd349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6012c652c778abaf9fb07fb1628435ff055dd349/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1bdc63a898f2fa164e79528c03e96a21a779e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bdc63a898f2fa164e79528c03e96a21a779e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1bdc63a898f2fa164e79528c03e96a21a779e82"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "bdf32da0aebd03608aad7137b79a92d2ba2e4a35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6012c652c778abaf9fb07fb1628435ff055dd349/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6012c652c778abaf9fb07fb1628435ff055dd349/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6012c652c778abaf9fb07fb1628435ff055dd349", "patch": "@@ -1,3 +1,10 @@\n+2018-01-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-p8swap.c (swap_feeds_both_load_and_store):\n+\tNew function.\n+\t(rs6000_analyze_swaps): Mark a web unoptimizable if it contains a\n+\tswap associated with both a load and a store.\n+\n 2018-01-02  Andrew Waterman  <andrew@sifive.com>\n \n \t* config/riscv/linux.h (ICACHE_FLUSH_FUNC): New."}, {"sha": "5a9711681a60e3b18e2570543b2d6d9fa72d07c3", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6012c652c778abaf9fb07fb1628435ff055dd349/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6012c652c778abaf9fb07fb1628435ff055dd349/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=6012c652c778abaf9fb07fb1628435ff055dd349", "patch": "@@ -328,6 +328,38 @@ insn_is_swap_p (rtx insn)\n   return 1;\n }\n \n+/* Return 1 iff UID, known to reference a swap, is both fed by a load\n+   and a feeder of a store.  */\n+static unsigned int\n+swap_feeds_both_load_and_store (swap_web_entry *insn_entry)\n+{\n+  rtx insn = insn_entry->insn;\n+  struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n+  df_ref def, use;\n+  struct df_link *link = 0;\n+  rtx_insn *load = 0, *store = 0;\n+  bool fed_by_load = 0;\n+  bool feeds_store = 0;\n+\n+  FOR_EACH_INSN_INFO_USE (use, insn_info)\n+    {\n+      link = DF_REF_CHAIN (use);\n+      load = DF_REF_INSN (link->ref);\n+      if (insn_is_load_p (load) && insn_is_swap_p (load))\n+\tfed_by_load = 1;\n+    }\n+\n+  FOR_EACH_INSN_INFO_DEF (def, insn_info)\n+    {\n+      link = DF_REF_CHAIN (def);\n+      store = DF_REF_INSN (link->ref);\n+      if (insn_is_store_p (store) && insn_is_swap_p (store))\n+\tfeeds_store = 1;\n+    }\n+\n+  return fed_by_load && feeds_store;\n+}\n+\n /* Return TRUE if insn is a swap fed by a load from the constant pool.  */\n static bool\n const_load_sequence_p (swap_web_entry *insn_entry, rtx insn)\n@@ -2030,6 +2062,14 @@ rs6000_analyze_swaps (function *fun)\n \t  && !insn_entry[i].is_swap && !insn_entry[i].is_swappable)\n \troot->web_not_optimizable = 1;\n \n+      /* If we have a swap that is both fed by a permuting load\n+\t and a feeder of a permuting store, then the optimization\n+\t isn't appropriate.  (Consider vec_xl followed by vec_xst_be.)  */\n+      else if (insn_entry[i].is_swap && !insn_entry[i].is_load\n+\t       && !insn_entry[i].is_store\n+\t       && swap_feeds_both_load_and_store (&insn_entry[i]))\n+\troot->web_not_optimizable = 1;\n+\n       /* If we have permuting loads or stores that are not accompanied\n \t by a register swap, the optimization isn't appropriate.  */\n       else if (insn_entry[i].is_load && insn_entry[i].is_swap)"}]}