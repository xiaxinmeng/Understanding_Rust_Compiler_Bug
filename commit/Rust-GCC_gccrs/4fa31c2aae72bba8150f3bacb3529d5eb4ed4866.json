{"sha": "4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZhMzFjMmFhZTcyYmJhODE1MGYzYmFjYjM1MjlkNWViNGVkNDg2Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-23T06:22:05Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-23T06:22:05Z"}, "message": "defaults.h (obstack_chunk_alloc, [...]): Default definition.\n\n\t* defaults.h (obstack_chunk_alloc, obstack_chunk_free):\n\tDefault definition.\n\t* gcse.c: Don't define obstack_chunk_free.\n\t* collect2.c, conflict.c, df.c, diagnostic.c, fix-header.c,\n\tflow.c, gcc.c, genattrtab.c, genautomata.c, genflags.c, gensupport.c,\n\tintegrate.c, loop.c, ra.c, read-rtl.c, regrename.c, reload1.c,\n\treorg.c, tlink.c, tree.c, config/arm/arm.c, objc/objc-act.c:\n\tDon't define obstack macros.\ncp:\n\t* class.c, method.c, pt.c, search.c: Similarly.\n\nFrom-SVN: r55665", "tree": {"sha": "d9f5137d155815ae95eb8edac101fd2d075fbe73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f5137d155815ae95eb8edac101fd2d075fbe73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e75abdabb2c3e7a31dfbe7a29022a038e3f2ecc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75abdabb2c3e7a31dfbe7a29022a038e3f2ecc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75abdabb2c3e7a31dfbe7a29022a038e3f2ecc1"}], "stats": {"total": 101, "additions": 21, "deletions": 80}, "files": [{"sha": "94cc6a5773bd2457ed7a47e84c8d33752d9dfb79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -1,3 +1,14 @@\n+2002-07-23  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* defaults.h (obstack_chunk_alloc, obstack_chunk_free):\n+\tDefault definition.\n+\t* gcse.c: Don't define obstack_chunk_free.\n+\t* collect2.c, conflict.c, df.c, diagnostic.c, fix-header.c,\n+\tflow.c, gcc.c, genattrtab.c, genautomata.c, genflags.c, gensupport.c,\n+\tintegrate.c, loop.c, ra.c, read-rtl.c, regrename.c, reload1.c,\n+\treorg.c, tlink.c, tree.c, config/arm/arm.c, objc/objc-act.c:\n+\tDon't define obstack macros.\n+\n 2002-07-22  Stephane Carrez  <stcarrez@nerim.fr>\n \n \tPR target/6744"}, {"sha": "ea888e48fb6b387f5ee1b90b790b2d373ee2ec6e", "filename": "gcc/collect2.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -57,10 +57,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"obstack.h\"\n #include \"intl.h\"\n #include \"version.h\"\n-\n-/* Obstack allocation and deallocation routines.  */\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n \f\n /* On certain systems, we have code that works by scanning the object file\n    directly.  But this code uses system-specific header files and library"}, {"sha": "b4b747e34520539e44ea56f31531a1c32476639e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -187,9 +187,6 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n static struct obstack minipool_obstack;\n static char *         minipool_startobj;\n \n-#define obstack_chunk_alloc   xmalloc\n-#define obstack_chunk_free    free\n-\n /* The maximum number of insns skipped which\n    will be conditionalised if possible.  */\n static int max_insns_skipped = 5;"}, {"sha": "9851fade3de21648d0b532cc37559ffd4eb20aff", "filename": "gcc/conflict.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -33,10 +33,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n \n-/* Use malloc to allocate obstack chunks.  */\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* A register conflict graph is an undirected graph containing nodes\n    for some or all of the regs used in a function.  Arcs represent\n    conflicts, i.e. two nodes are connected by an arc if there is a"}, {"sha": "4a63bc6939288c71bb18952d09e02bf4f753ae7c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -1,3 +1,7 @@\n+2002-07-23  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* class.c, method.c, pt.c, search.c: Don't define obstack macros.\n+\n 2002-07-22  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/7347, c++/7348"}, {"sha": "d56be69e53bbfc96234a43ed7eed48b7caa0ca46", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -36,8 +36,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n \n #include \"obstack.h\"\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n \n /* The number of nested classes being processed.  If we are not in the\n    scope of any class, this is zero.  */"}, {"sha": "73cdd40b8eb289e47a4f0198500c15408b3fac23", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -54,9 +54,6 @@ enum mangling_flags\n \n typedef enum mangling_flags mangling_flags;\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n static void do_build_assign_ref PARAMS ((tree));\n static void do_build_copy_constructor PARAMS ((tree));\n static tree synthesize_exception_spec PARAMS ((tree, tree (*) (tree, void *), void *));"}, {"sha": "565b75fdfed28366bcad4fee8fadf04fb5f29cf0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -73,9 +73,6 @@ static GTY(()) tree current_tinst_level;\n    local variables.  */\n static htab_t local_specializations;\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n #define UNIFY_ALLOW_NONE 0\n #define UNIFY_ALLOW_MORE_CV_QUAL 1\n #define UNIFY_ALLOW_LESS_CV_QUAL 2"}, {"sha": "692a0e3ac0ac205f3f8139c35073ee9ab0f13cb0", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -33,10 +33,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"ggc.h\"\n #include \"toplev.h\"\n-\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n #include \"stack.h\"\n \n /* Obstack used for remembering decision points of breadth-first.  */"}, {"sha": "6d12e095565a8168cf01bef1527982fd4831eab8", "filename": "gcc/defaults.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -27,6 +27,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GET_ENVIRONMENT(VALUE, NAME) do { (VALUE) = getenv (NAME); } while (0)\n #endif\n \n+#define obstack_chunk_alloc xmalloc\n+#define obstack_chunk_free free\n+\n /* Define default standard character escape sequences.  */\n #ifndef TARGET_BELL\n #  define TARGET_BELL 007"}, {"sha": "150778045e95a9bfed66a3c2760ef703564e0d84", "filename": "gcc/df.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -189,9 +189,6 @@ do {                                                            \\\n   EXECUTE_IF_SET_IN_SBITMAP (BITMAP, MIN, node_,                \\\n     {(BB) = BASIC_BLOCK (node_); CODE;});} while (0)\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n static struct obstack df_ref_obstack;\n static struct df *ddf;\n "}, {"sha": "89130cc169a3538d4b0c558dcc7c68a83bbf22a7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -37,9 +37,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free  free\n-\n #define output_formatted_integer(BUFFER, FORMAT, INTEGER)\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "24c2070d61fe1f733c939fa47601f039c2c57766", "filename": "gcc/fix-header.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -372,8 +372,6 @@ int seen_errno = 0;\n /* The following are only used when handling stdlib.h */\n int seen_EXIT_FAILURE = 0, seen_EXIT_SUCCESS = 0;\n \f\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n struct obstack scan_file_obstack;\n \n /* NOTE:  If you edit this, also edit gen-protos.c !! */"}, {"sha": "3a7326ac5fae5cfb73613facabb56f9d105623bf", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -140,9 +140,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"obstack.h\"\n #include \"splay-tree.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "9499c037f71c0371daff5586eb41aaadc335e4cf", "filename": "gcc/gcc.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -122,9 +122,6 @@ extern int getrusage PARAMS ((int, struct rusage *));\n \n static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* Most every one is fine with LIBRARY_PATH.  For some, it conflicts.  */\n #ifndef LIBRARY_PATH_ENV\n #define LIBRARY_PATH_ENV \"LIBRARY_PATH\""}, {"sha": "37fa2d610a17a13528cfa68c730ed4b0c4ab691f", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -165,8 +165,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cselib.h\"\n \n #include \"obstack.h\"\n+\n+/* We don't want to use xmalloc.  */\n+#undef obstack_chunk_alloc\n #define obstack_chunk_alloc gmalloc\n-#define obstack_chunk_free free\n \n /* Propagate flow information through back edges and thus enable PRE's\n    moving loop invariant calculations out of loops."}, {"sha": "07b300c2cb320653cbf789f340ad9d58097f8a89", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -121,9 +121,6 @@ static struct obstack obstack1, obstack2;\n struct obstack *hash_obstack = &obstack1;\n struct obstack *temp_obstack = &obstack2;\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* enough space to reserve for printing out ints */\n #define MAX_DIGITS (HOST_BITS_PER_INT * 3 / 10 + 3)\n "}, {"sha": "a43b9834ec255b18c1e189c23c72e5a8bc42a7b9", "filename": "gcc/genautomata.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -116,9 +116,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"genattrtab.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* Positions in machine description file.  Now they are not used.  But\n    they could be used in the future for better diagnostic messages.  */\n typedef int pos_t;"}, {"sha": "114b98b837e211a14c87197081e3b03bf0be09cd", "filename": "gcc/genflags.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -29,10 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"errors.h\"\n #include \"gensupport.h\"\n \n-\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* Obstack to remember insns with.  */\n static struct obstack obstack;\n "}, {"sha": "9e3d0bbcb1fa8a747da362045c4fbd9b1579cbf8", "filename": "gcc/gensupport.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -32,9 +32,6 @@ int target_flags;\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n static int sequence_num;\n static int errors;\n "}, {"sha": "c7eb5069b1c1dce07fc428a622bcffedf8fce71c", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -46,8 +46,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n \n #include \"obstack.h\"\n-#define\tobstack_chunk_alloc\txmalloc\n-#define\tobstack_chunk_free\tfree\n \n extern struct obstack *function_maybepermanent_obstack;\n "}, {"sha": "595955210cba7ca235c671a370c24ca0571a17f0", "filename": "gcc/loop.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -194,9 +194,6 @@ unsigned int max_reg_before_loop;\n \n /* The value to pass to the next call of reg_scan_update.  */\n static int loop_max_reg;\n-\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n \f\n /* During the analysis of a loop, a chain of `struct movable's\n    is made to record all the movable insns found."}, {"sha": "14bddd83c98a70a622870aa39771128a3a188431", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -90,9 +90,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"obstack.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* This obstack is used to accumulate the encoding of a data type.  */\n static struct obstack util_obstack;\n /* This points to the beginning of obstack contents,"}, {"sha": "dbfce942dda93cdd374c4d3857c66bc985493207", "filename": "gcc/ra.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -38,9 +38,6 @@\n #include \"flags.h\"\n #include \"ra.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* This is the toplevel file of a graph coloring register allocator.\n    It is able to act like a George & Appel allocator, i.e. with iterative\n    coalescing plus spill coalescing/propagation."}, {"sha": "8c378d96abb53e89ee64a149858dcc81ef1b9b93", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -25,9 +25,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"obstack.h\"\n #include \"hashtab.h\"\n \n-#define\tobstack_chunk_alloc\txmalloc\n-#define\tobstack_chunk_free\tfree\n-\n static htab_t md_constants;\n \n static void fatal_with_file_and_line PARAMS ((FILE *, const char *, ...))"}, {"sha": "6d7da30f2ece17fce8b5970422a35750aa8234b2", "filename": "gcc/regrename.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -36,9 +36,6 @@\n #include \"toplev.h\"\n #include \"obstack.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n #ifndef REGNO_MODE_OK_FOR_BASE_P\n #define REGNO_MODE_OK_FOR_BASE_P(REGNO, MODE) REGNO_OK_FOR_BASE_P (REGNO)\n #endif"}, {"sha": "0c23c24ee9de16c55453ff31ca0ab14bd4284aea", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -280,9 +280,6 @@ char *reload_firstobj;\n    Used to quickly free all memory after processing one insn.  */\n static char *reload_insn_firstobj;\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* List of insn_chain instructions, one for every insn that reload needs to\n    examine.  */\n struct insn_chain *reload_insn_chain;"}, {"sha": "f62e3ca9df22eeecfe9f4be533b362f05c2ccb8b", "filename": "gcc/reorg.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -143,9 +143,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #ifdef DELAY_SLOTS\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n #ifndef ANNUL_IFTRUE_SLOTS\n #define eligible_for_annul_true(INSN, SLOTS, TRIAL, FLAGS) 0\n #endif"}, {"sha": "555deb65b032fe8d935b23e3b9ef4ab73133e8bb", "filename": "gcc/tlink.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -31,10 +31,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #define MAX_ITERATIONS 17\n \n-/* Obstack allocation and deallocation routines.  */\n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n /* Defined in the automatically-generated underscore.c.  */\n extern int prepends_underscore;\n "}, {"sha": "1353f3288c7bbdbd2ad957a85face5755fa84ead", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa31c2aae72bba8150f3bacb3529d5eb4ed4866/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4fa31c2aae72bba8150f3bacb3529d5eb4ed4866", "patch": "@@ -48,8 +48,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"langhooks.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n /* obstack.[ch] explicitly declined to prototype this.  */\n extern int _obstack_allocated_p PARAMS ((struct obstack *h, PTR obj));\n "}]}