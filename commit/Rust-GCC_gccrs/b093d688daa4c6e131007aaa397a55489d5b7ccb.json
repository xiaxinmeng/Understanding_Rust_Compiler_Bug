{"sha": "b093d688daa4c6e131007aaa397a55489d5b7ccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5M2Q2ODhkYWE0YzZlMTMxMDA3YWFhMzk3YTU1NDg5ZDViN2NjYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-01T14:27:17Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-01T14:27:17Z"}, "message": "re PR fortran/65677 (Incomplete assignment on deferred-length character variable)\n\n2018-10-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/65677\n\t* trans-expr.c (gfc_trans_assignment_1): Set the 'identical'\n\tflag in the call to gfc_check_dependency.\n\n\n2018-10-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/65677\n\t* gfortran.dg/dependency_52.f90 : Expand the test to check both\n\tthe call to adjustl and direct assignment of the substring.\n\nFrom-SVN: r264759", "tree": {"sha": "b9b1105ae05aabb4969bf2181c1660462e1e125f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9b1105ae05aabb4969bf2181c1660462e1e125f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b093d688daa4c6e131007aaa397a55489d5b7ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b093d688daa4c6e131007aaa397a55489d5b7ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b093d688daa4c6e131007aaa397a55489d5b7ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b093d688daa4c6e131007aaa397a55489d5b7ccb/comments", "author": null, "committer": null, "parents": [{"sha": "fd5c626c681266845dbec0e84836823a5de3a45b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5c626c681266845dbec0e84836823a5de3a45b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5c626c681266845dbec0e84836823a5de3a45b"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "d513f2a0c6a3457113b6506581fd99ee8bdeeb3a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b093d688daa4c6e131007aaa397a55489d5b7ccb", "patch": "@@ -1,3 +1,9 @@\n+2018-10-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/65677\n+\t* trans-expr.c (gfc_trans_assignment_1): Set the 'identical'\n+\tflag in the call to gfc_check_dependency.\n+\n 2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/87359\n@@ -33,7 +39,7 @@\n \n 2018-09-29  Paul Thomas  <pault@gcc.gnu.org>\n \n-\tPR fortran/65667\n+\tPR fortran/65677\n \t* trans-expr.c (gfc_trans_assignment_1): If there is dependency\n \tfix the rse stringlength.\n "}, {"sha": "86359e5967edece5a542c6ea2f6a7910b2dee765", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=b093d688daa4c6e131007aaa397a55489d5b7ccb", "patch": "@@ -240,7 +240,7 @@ gfc_dep_compare_functions (gfc_expr *e1, gfc_expr *e2, bool impure_ok)\n \t      /* Special case: String arguments which compare equal can have\n \t\t different lengths, which makes them different in calls to\n \t\t procedures.  */\n-\t      \n+\n \t      if (e1->expr_type == EXPR_CONSTANT\n \t\t  && e1->ts.type == BT_CHARACTER\n \t\t  && e2->expr_type == EXPR_CONSTANT\n@@ -1907,7 +1907,7 @@ dummy_intent_not_in (gfc_expr **ep)\n /* Determine if an array ref, usually an array section specifies the\n    entire array.  In addition, if the second, pointer argument is\n    provided, the function will return true if the reference is\n-   contiguous; eg. (:, 1) gives true but (1,:) gives false. \n+   contiguous; eg. (:, 1) gives true but (1,:) gives false.\n    If one of the bounds depends on a dummy variable which is\n    not INTENT(IN), also return false, because the user may\n    have changed the variable.  */"}, {"sha": "37052b612d43cd36ee290a7e478559545205232f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b093d688daa4c6e131007aaa397a55489d5b7ccb", "patch": "@@ -5281,7 +5281,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t/* See PR 41453.  */\n \t\t\t&& !e->symtree->n.sym->attr.dummy\n \t\t\t/* FIXME - PR 87395 and PR 41453  */\n-\t\t\t&& e->symtree->n.sym->attr.save == SAVE_NONE \n+\t\t\t&& e->symtree->n.sym->attr.save == SAVE_NONE\n \t\t\t&& !e->symtree->n.sym->attr.associate_var\n \t\t\t&& e->ts.type != BT_CHARACTER && e->ts.type != BT_DERIVED\n \t\t\t&& e->ts.type != BT_CLASS && !sym->attr.elemental;\n@@ -10208,7 +10208,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n     string_length = gfc_evaluate_now (rse.string_length, &rse.pre);\n   else if (expr2->ts.type == BT_CHARACTER)\n     {\n-      if (expr1->ts.deferred && gfc_check_dependency (expr1, expr2, false))\n+      if (expr1->ts.deferred && gfc_check_dependency (expr1, expr2, true))\n \trse.string_length = gfc_evaluate_now (rse.string_length, &rse.pre);\n       string_length = rse.string_length;\n     }"}, {"sha": "a8ed4780d248c077900b59f8759f1eb952042885", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b093d688daa4c6e131007aaa397a55489d5b7ccb", "patch": "@@ -1,3 +1,9 @@\n+2018-10-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/65677\n+\t* gfortran.dg/dependency_52.f90 : Expand the test to check both\n+\tthe call to adjustl and direct assignment of the substring.\n+\n 2018-10-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87465"}, {"sha": "c176fd99f3e5c810e9ce5a1bdd1476803a859a50", "filename": "gcc/testsuite/gfortran.dg/dependency_52.f90", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_52.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b093d688daa4c6e131007aaa397a55489d5b7ccb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_52.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_52.f90?ref=b093d688daa4c6e131007aaa397a55489d5b7ccb", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do run }\n !\n-! Test the fix for PR65667, in which the dependency was missed and\n+! Test the fix for PR65677, in which the dependency was missed and\n ! the string length of 'text' was decremented twice. The rhs string\n ! length is now fixed after the function call so that the dependency\n ! on the length of 'text' is removed for later evaluations.\n@@ -10,16 +10,21 @@\n module mod1\n     implicit none\n contains\n-    subroutine getKeyword(string, keyword, rest)\n+    subroutine getKeyword(string, keyword, rest, use_adjustl)\n         character(:), allocatable, intent(IN) :: string\n         character(:), allocatable, intent(OUT) :: keyword, rest\n         integer :: idx\n         character(:), allocatable :: text\n+        logical :: use_adjustl\n \n         keyword = ''\n         rest = ''\n         text = string\n-        text = ADJUSTL(text(2:))    ! Note dependency.\n+        if (use_adjustl) then\n+          text = ADJUSTL(text(2:))    ! Note dependency.\n+        else\n+          text = text(2:)             ! Check the old workaround.\n+        endif\n         idx = INDEX(text, ' ')\n \n         if (idx == 0) then\n@@ -38,8 +43,17 @@ end module mod1\n \n     line = '@HERE    IT IS'\n \n-    call getKeyword(line, keyword, rest)\n+    call getKeyword(line, keyword, rest, use_adjustl = .true.)\n \n     if (keyword .ne. 'HERE') stop 1\n     if (rest .ne. 'IT IS') stop 2\n+    deallocate (line, keyword, rest)\n+\n+    line = '@HERE    IT IS'\n+\n+    call getKeyword(line, keyword, rest, use_adjustl = .false.)\n+\n+    if (keyword .ne. 'HERE') stop 3\n+    if (rest .ne. 'IT IS') stop 4\n+    deallocate (line, keyword, rest)\n end"}]}