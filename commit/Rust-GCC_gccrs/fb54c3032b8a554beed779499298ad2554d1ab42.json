{"sha": "fb54c3032b8a554beed779499298ad2554d1ab42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1NGMzMDMyYjhhNTU0YmVlZDc3OTQ5OTI5OGFkMjU1NGQxYWI0Mg==", "commit": {"author": {"name": "hongyuw1", "email": "hongyuw1@intel.com", "date": "2020-11-06T07:08:10Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-10T02:23:00Z"}, "message": "Adjust Keylocker regex pattern for darwin, and add missing aesenc256kl test.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/keylocker-aesdec128kl.c: Adjust regex patterns.\n\t* gcc.target/i386/keylocker-aesdec256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesdecwide128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesdecwide256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesenc128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesencwide128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesencwide256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-encodekey128.c: Likewise.\n\t* gcc.target/i386/keylocker-encodekey256.c: Likewise.\n\t* gcc.target/i386/keylocker-aesenc256kl.c: New test.", "tree": {"sha": "a1e675ba03792f07117193cead4c2c9a16dc4d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1e675ba03792f07117193cead4c2c9a16dc4d17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb54c3032b8a554beed779499298ad2554d1ab42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb54c3032b8a554beed779499298ad2554d1ab42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb54c3032b8a554beed779499298ad2554d1ab42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb54c3032b8a554beed779499298ad2554d1ab42/comments", "author": null, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d26a337bfa1135d95caa3c213e82f2a97f18a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d26a337bfa1135d95caa3c213e82f2a97f18a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d26a337bfa1135d95caa3c213e82f2a97f18a01"}], "stats": {"total": 203, "additions": 110, "deletions": 93}, "files": [{"sha": "d134612beea43acf932ab30ce85cf79e0ffaf63f", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdec128kl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mkl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"aesdec128kl\\[ \\\\t\\]+\\[^\\n\\]*h1\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"aesdec128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*k1\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "34736d2d61a9c9059bd2a4545f47cc5f03563301", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdec256kl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mkl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"aesdec256kl\\[ \\\\t\\]+\\[^\\n\\]*h1\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"aesdec256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*k1\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "d23cf4b65177223007f8610f21ac1437f47ec72c", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdecwide128kl.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,23 +1,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-mwidekl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n-/* { dg-final { scan-assembler \"aesdecwide128kl\\[ \\\\t\\]+\\[^\\n\\]*h1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesdecwide128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm2,\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm3,\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm4,\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "44c3252ab4713b5dd7b585b7a2708069d57bdc9a", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdecwide256kl.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,23 +1,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-mwidekl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n-/* { dg-final { scan-assembler \"aesdecwide256kl\\[ \\\\t\\]+\\[^\\n\\]*h1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesdecwide256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm2,\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm3,\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm4,\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "9ff483656fda4af9b6e0a9f95a3c187bc5ad1ab9", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesenc128kl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mkl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"aesenc128kl\\[ \\\\t\\]+\\[^\\n\\]*h1\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"aesenc128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*k1\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "1c5e0765c0727cbed8b4455f05111892cbf04ff8", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesenc256kl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc256kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mkl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"aesenc256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i k1, k2;\n+const char h1[48];\n+\n+unsigned char\n+test_keylocker_4 (void)\n+{\n+  return _mm_aesenc256kl_u8 (&k1, k2, h1);\n+}"}, {"sha": "9fb9c49314ff19c19d85e052ce8d7bd10a7acdec", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesencwide128kl.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,23 +1,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-mwidekl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n-/* { dg-final { scan-assembler \"aesencwide128kl\\[ \\\\t\\]+\\[^\\n\\]*h1(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesencwide128kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm2,\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm3,\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm4,\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "125a787dcd9cef8a3766fffb61df9a3a9905a9b5", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesencwide256kl.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,23 +1,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-mwidekl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n-/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n-/* { dg-final { scan-assembler \"aesencwide256kl\\[ \\\\t\\]+\\[^\\n\\]*h1(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*, %xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesencwide256kl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*\" } } */\n /* { dg-final { scan-assembler \"sete\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm2,\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm3,\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm4,\\[^\\\\n\\\\r\\]*64\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm5,\\[^\\\\n\\\\r\\]*80\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm6,\\[^\\\\n\\\\r\\]*96\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*%xmm7,\\[^\\\\n\\\\r\\]*112\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "805e06286732f822771accb5c36906a3301fa7fd", "filename": "gcc/testsuite/gcc.target/i386/keylocker-encodekey128.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey128.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-mkl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k1(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+\\[^\\n\\]*ctrl(\\\\(%rip\\\\))?\\[^\\n\\r]*%eax\" } } */\n-/* { dg-final { scan-assembler \"encodekey128\\[ \\\\t\\]+\\[^\\n\\]*%eax\\[^\\n\\r]*%eax\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*h2(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*h2\\\\+16(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*h2\\\\+32(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqa|movaps)\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[4-6\\]\\[^\\n\\r]*k2(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %eax\" } } */\n+/* { dg-final { scan-assembler \"encodekey128\\[ \\\\t\\]+\\[^\\\\n\\]*%eax\\[^\\\\n\\\\r\\]*%eax\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm2,\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqa|movaps)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm\\[4-6\\],\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}, {"sha": "26f04dcf014c9c139827733e158b666d33cd04d0", "filename": "gcc/testsuite/gcc.target/i386/keylocker-encodekey256.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb54c3032b8a554beed779499298ad2554d1ab42/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey256.c?ref=fb54c3032b8a554beed779499298ad2554d1ab42", "patch": "@@ -1,14 +1,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-mkl -O2\" } */\n-/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k1(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n-/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+\\[^\\n\\]*ctrl(\\\\(%rip\\\\))?\\[^\\n\\r]*%eax\" } } */\n-/* { dg-final { scan-assembler \"encodekey256\\[ \\\\t\\]+\\[^\\n\\]*%eax\\[^\\n\\r]*%eax\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*h2(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*h2\\\\+16(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*h2\\\\+32(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*h2\\\\+48(\\\\(%rip\\\\))?\" } } */\n-/* { dg-final { scan-assembler \"(?:movdqa|movaps)\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[4-6\\]\\[^\\n\\r]*k3(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+\\[^\\\\n\\\\r\\]*, %eax\" } } */\n+/* { dg-final { scan-assembler \"encodekey256\\[ \\\\t\\]+\\[^\\\\n\\]*%eax\\[^\\\\n\\\\r\\]*%eax\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm0,\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm1,\\[^\\\\n\\\\r\\]*16\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm2,\\[^\\\\n\\\\r\\]*32\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm3,\\[^\\\\n\\\\r\\]*48\\[^\\\\n\\\\r\\]*\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqa|movaps)\\[ \\\\t\\]+\\[^\\\\n\\]*%xmm\\[4-6\\],\\[^\\\\n\\\\r\\]*\" } } */\n \n #include <immintrin.h>\n "}]}