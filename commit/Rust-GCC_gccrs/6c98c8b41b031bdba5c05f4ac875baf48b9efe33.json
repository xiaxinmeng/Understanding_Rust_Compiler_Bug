{"sha": "6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "node_id": "C_kwDOANBUbNoAKDZjOThjOGI0MWIwMzFiZGJhNWMwNWY0YWM4NzViYWY0OGI5ZWZlMzM", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-01-11T23:18:13Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-01-11T23:18:13Z"}, "message": "Change the 3rd parameter of function .DEFERRED_INIT from IS_VLA to decl name.\n\nCurrently, the 3rd parameter of function .DEFERRED_INIT is IS_VLA, which is\nnot needed at all;\n\nIn this patch, we change the 3rd parameter from IS_VLA to the name of the var\ndecl for the following purposes:\n\n1. Fix (or work around) PR103720:\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=103720\n\nAs confirmed in PR103720, with the current definition of .DEFERRED_INIT,\n\nDom transformed:\n  c$a$0_6 = .DEFERRED_INIT (8, 2, 0);\n  _1 = .DEFERRED_INIT (8, 2, 0);\n\ninto:\n  c$a$0_6 = .DEFERRED_INIT (8, 2, 0);\n  _1 = c$a$0_6;\n\nwhich is incorrectly done due to Dom treating the two calls to const function\n.DEFERRED_INIT as the same call since all actual parameters are the same.\n\nThe same issue has been exposed in PR102608 due to a different optimization VN,\nthe fix for PR102608 is to specially handle call to .DEFERRED_INIT in VN to\nexclude it from CSE.\n\nTo fix PR103720, we could do the same as the fix to PR102608 to specially\nhandle call to .DEFERRED_INIT in Dom to exclude it from being optimized.\n\nHowever, in addition to Dom and VN, there should be other optimizations that\nhave the same issue as PR103720 or PR102608 (As I built Linux kernel with\n-ftrivial-auto-var-init=zero -Werror, I noticed a bunch of bugos warnings).\n\nOther than identifying all the optimizations and specially handling call to\n.DEFERRED_INIT in all these optimizations, changing the 3rd parameter of the\nfunction .DEFERRED_INIT from IS_VLA to the name string of the var decl might\nbe a better workaround (or a fix). After this change, since the 3rd actual\nparameter is the name string of the variable, different calls for different\nvariables will have different name strings as the 3rd actual, As a result, the\noptimization that previously treated the different calls to .DEFERRED_INIT as\nthe same will be prevented.\n\n2. Prepare for enabling -Wuninitialized + -ftrivail-auto-var-init for address\ntaken variables.\n\nAs discussion in the following thread:\n\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-August/577431.html\n\nWith the current implemenation of -ftrivial-auto-var-init and uninitialized\nwarning analysis, the uninitialized warning for an address taken auto variable\nmight be missed since the variable is completely eliminated by optimization and\nreplaced with a temporary variable in all the uses.\n\nIn order to improve such situation, changing the 3rd parameter of the function\n.DEFERRED_INIT to the name string of the variable will provide necessary\ninformation to uninitialized warning analysis to make the missing warning\npossible.\n\ngcc/ChangeLog:\n\n2022-01-11  qing zhao  <qing.zhao@oracle.com>\n\n\t* gimplify.c (gimple_add_init_for_auto_var): Delete the 3rd argument.\n\tChange the 3rd argument of function .DEFERRED_INIT to the name of the\n\tdecl.\n\t(gimplify_decl_expr): Delete the 3rd argument when call\n\tgimple_add_init_for_auto_var.\n\t* internal-fn.c (expand_DEFERRED_INIT): Update comments to reflect\n\tthe 3rd argument change of function .DEFERRED_INIT.\n\t* tree-cfg.c (verify_gimple_call): Update comments and verification\n\tto reflect the 3rd argument change of function .DEFERRED_INIT.\n\t* tree-sra.c (generate_subtree_deferred_init): Delete the 3rd argument.\n\t(sra_modify_deferred_init): Change the 3rd argument of function\n\t.DEFERRED_INIT to the name of the decl.\n\ngcc/testsuite/ChangeLog:\n\n2022-01-11  qing zhao  <qing.zhao@oracle.com>\n\n\t* c-c++-common/auto-init-1.c: Adjust testcase to reflect the 3rd\n\targument change of function .DEFERRED_INIT.\n\t* c-c++-common/auto-init-10.c: Likewise.\n\t* c-c++-common/auto-init-11.c: Likewise.\n\t* c-c++-common/auto-init-12.c: Likewise.\n\t* c-c++-common/auto-init-13.c: Likewise.\n\t* c-c++-common/auto-init-14.c: Likewise.\n\t* c-c++-common/auto-init-15.c: Likewise.\n\t* c-c++-common/auto-init-16.c: Likewise.\n\t* c-c++-common/auto-init-2.c: Likewise.\n\t* c-c++-common/auto-init-3.c: Likewise.\n\t* c-c++-common/auto-init-4.c: Likewise.\n\t* c-c++-common/auto-init-5.c: Likewise.\n\t* c-c++-common/auto-init-6.c: Likewise.\n\t* c-c++-common/auto-init-7.c: Likewise.\n\t* c-c++-common/auto-init-8.c: Likewise.\n\t* c-c++-common/auto-init-9.c: Likewise.\n\t* c-c++-common/auto-init-esra.c: Likewise.\n\t* c-c++-common/auto-init-padding-1.c: Likewise.\n\t* gcc.target/aarch64/auto-init-2.c: Likewise.", "tree": {"sha": "a56aeb5396a1106e1c04fe36e1529fce470621c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a56aeb5396a1106e1c04fe36e1529fce470621c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01be2f3095dc91a6999d4abb3e6c96c58bc5561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01be2f3095dc91a6999d4abb3e6c96c58bc5561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01be2f3095dc91a6999d4abb3e6c96c58bc5561"}], "stats": {"total": 201, "additions": 93, "deletions": 108}, "files": [{"sha": "d64d9c447ce8009436f8ce4766051b0b044d557b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -1748,16 +1748,13 @@ force_labels_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n    Build a call to internal const function DEFERRED_INIT:\n    1st argument: SIZE of the DECL;\n    2nd argument: INIT_TYPE;\n-   3rd argument: IS_VLA, 0 NO, 1 YES;\n+   3rd argument: NAME of the DECL;\n+\n+   as LHS = DEFERRED_INIT (SIZE of the DECL, INIT_TYPE, NAME of the DECL).  */\n \n-   as LHS = DEFERRED_INIT (SIZE of the DECL, INIT_TYPE, IS_VLA)\n-   if IS_VLA is false, the LHS is the DECL itself,\n-   if IS_VLA is true, the LHS is a MEM_REF whose address is the pointer\n-   to this DECL.  */\n static void\n gimple_add_init_for_auto_var (tree decl,\n \t\t\t      enum auto_init_type init_type,\n-\t\t\t      bool is_vla,\n \t\t\t      gimple_seq *seq_p)\n {\n   gcc_assert (auto_var_p (decl));\n@@ -1767,13 +1764,25 @@ gimple_add_init_for_auto_var (tree decl,\n \n   tree init_type_node\n     = build_int_cst (integer_type_node, (int) init_type);\n-  tree is_vla_node\n-    = build_int_cst (integer_type_node, (int) is_vla);\n+\n+  tree decl_name = NULL_TREE;\n+  if (DECL_NAME (decl))\n+\n+    decl_name = build_string_literal (IDENTIFIER_LENGTH (DECL_NAME (decl)) + 1,\n+\t\t\t\t      IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\n+  else\n+    {\n+      char *decl_name_anonymous = xasprintf (\"D.%u\", DECL_UID (decl));\n+      decl_name = build_string_literal (strlen (decl_name_anonymous) + 1,\n+\t\t\t\t\tdecl_name_anonymous);\n+      free (decl_name_anonymous);\n+    }\n \n   tree call = build_call_expr_internal_loc (loc, IFN_DEFERRED_INIT,\n \t\t \t\t\t    TREE_TYPE (decl), 3,\n \t\t\t\t\t    decl_size, init_type_node,\n-\t\t\t\t\t    is_vla_node);\n+\t\t\t\t\t    decl_name);\n \n   gimplify_assign (decl, call, seq_p);\n }\n@@ -1947,7 +1956,6 @@ gimplify_decl_expr (tree *stmt_p, gimple_seq *seq_p)\n \t{\n \t  gimple_add_init_for_auto_var (decl,\n \t\t\t\t\tflag_auto_var_init,\n-\t\t\t\t\tis_vla,\n \t\t\t\t\tseq_p);\n \t  /* The expanding of a call to the above .DEFERRED_INIT will apply\n \t     block initialization to the whole space covered by this variable."}, {"sha": "db16179c9f83341e5643af6e824cde3c98f5148f", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -3011,11 +3011,7 @@ expand_UNIQUE (internal_fn, gcall *stmt)\n }\n \n /* Expand the IFN_DEFERRED_INIT function:\n-   LHS = DEFERRED_INIT (SIZE of the DECL, INIT_TYPE, IS_VLA);\n-\n-   if IS_VLA is false, the LHS is the DECL itself,\n-   if IS_VLA is true, the LHS is a MEM_REF whose address is the pointer\n-   to this DECL.\n+   LHS = DEFERRED_INIT (SIZE of the DECL, INIT_TYPE, NAME of the DECL);\n \n    Initialize the LHS with zero/pattern according to its second argument\n    INIT_TYPE:\n@@ -3071,8 +3067,8 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n \n   if (!reg_lhs)\n     {\n-      /* If this is a VLA or the variable is not in register,\n-\t expand to a memset to initialize it.  */\n+      /* If the variable is not in register, expand to a memset\n+\t to initialize it.  */\n       mark_addressable (lhs);\n       tree var_addr = build_fold_addr_expr (lhs);\n "}, {"sha": "df04358728bab7e998c74572143785b3535a3e35", "filename": "gcc/testsuite/c-c++-common/auto-init-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-1.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -29,13 +29,13 @@ void foo()\n   return;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(1, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(2, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n-/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" { target lp64 } } } */\n-/* { dg-final { scan-tree-dump \"temp6 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n-/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" { target lp64 } } } */\n-/* { dg-final { scan-tree-dump \"temp8 = .DEFERRED_INIT \\\\(1, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(1, 2, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(2, 2, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(4, 2, \\&\\\"temp3\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(4, 2, \\&\\\"temp4\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(4, 2, \\&\\\"temp5\\\"\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 2, \\&\\\"temp5\\\"\" \"gimple\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \"temp6 = .DEFERRED_INIT \\\\(8, 2, \\&\\\"temp6\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(4, 2, \\&\\\"temp7\\\"\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 2, \\&\\\"temp7\\\"\" \"gimple\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \"temp8 = .DEFERRED_INIT \\\\(1, 2, \\&\\\"temp8\\\"\" \"gimple\" } } */"}, {"sha": "dda7ea1e0324288378c5526f9a65ebd38d7522fd", "filename": "gcc/testsuite/c-c++-common/auto-init-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-10.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -18,5 +18,5 @@ void foo()\n   return;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(2, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(2, 1, \\&\\\"temp1\\\"\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump-not \"temp2 = .DEFERRED_INIT \\\\(\" \"gimple\" } } */"}, {"sha": "6eb468785ce14a4eded0035039951e07e2c57d40", "filename": "gcc/testsuite/c-c++-common/auto-init-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-11.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -11,4 +11,4 @@ void foo(int n)\n   return;\n }\n \n-/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 2, 1\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 2, \\&\\\"arr\\\"\" \"gimple\" } } */"}, {"sha": "964291c5bd9498905dc83c5b490d520e8796cdd5", "filename": "gcc/testsuite/c-c++-common/auto-init-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-12.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -11,4 +11,4 @@ void foo(int n)\n   return;\n }\n \n-/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 1, 1\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 1, \\&\\\"arr\\\"\" \"gimple\" } } */"}, {"sha": "aa5883af770f86d6d198d8488d2b90030ffa67e0", "filename": "gcc/testsuite/c-c++-common/auto-init-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-13.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -19,5 +19,5 @@ int foo()\n   return d.b + var.bar.b;\n }\n \n-/* { dg-final { scan-tree-dump \"d = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"var = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"d = .DEFERRED_INIT \\\\(4, 1, \\&\\\"d\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"var = .DEFERRED_INIT \\\\(4, 1, \\&\\\"var\\\"\" \"gimple\" } } */"}, {"sha": "dd1ff3e339d2a256f7ea7e766828722ff38f2bc5", "filename": "gcc/testsuite/c-c++-common/auto-init-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-14.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -19,5 +19,5 @@ int foo()\n   return d.b + var.bar.b;\n }\n \n-/* { dg-final { scan-tree-dump \"d = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"var = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"d = .DEFERRED_INIT \\\\(4, 2, \\&\\\"d\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"var = .DEFERRED_INIT \\\\(4, 2, \\&\\\"var\\\"\" \"gimple\" } } */"}, {"sha": "5857287ecbef3af061c1dcd6e5efae80e0ce160f", "filename": "gcc/testsuite/c-c++-common/auto-init-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-15.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -10,4 +10,4 @@ void foo(int a)\n   g(x);\n }\n \n-/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 2, 1\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 2, \\&\\\"x\\\"\" \"gimple\" } } */"}, {"sha": "1e309959fc5c1a268b9508b6a8cbcf016f116d00", "filename": "gcc/testsuite/c-c++-common/auto-init-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-16.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -10,4 +10,4 @@ void foo(int a)\n   g(x);\n }\n \n-/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 1, 1\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(D.\\\\d*, 1, \\&\\\"x\\\"\" \"gimple\" } } */"}, {"sha": "6ac63bb1ddac1dcac53ed43adee23e942a0c5f5c", "filename": "gcc/testsuite/c-c++-common/auto-init-2.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-2.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -29,13 +29,13 @@ void foo()\n   return;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(1, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(2, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n-/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" { target lp64 } } } */\n-/* { dg-final { scan-tree-dump \"temp6 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n-/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" { target lp64 } } } */\n-/* { dg-final { scan-tree-dump \"temp8 = .DEFERRED_INIT \\\\(1, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(1, 1, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(2, 1, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(4, 1, \\&\\\"temp3\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(4, 1, \\&\\\"temp4\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(4, 1, \\&\\\"temp5\\\"\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 1, \\&\\\"temp5\\\"\" \"gimple\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \"temp6 = .DEFERRED_INIT \\\\(8, 1, \\&\\\"temp6\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(4, 1, \\&\\\"temp7\\\"\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 1, \\&\\\"temp7\\\"\" \"gimple\" { target lp64 } } } */\n+/* { dg-final { scan-tree-dump \"temp8 = .DEFERRED_INIT \\\\(1, 1, \\&\\\"temp8\\\"\" \"gimple\" } } */"}, {"sha": "9d9c86d8dd08d276ce6597961caae3fc845e462b", "filename": "gcc/testsuite/c-c++-common/auto-init-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-3.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -14,6 +14,6 @@ long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((8|12|16), 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(4, 2, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(8, 2, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((8|12|16), 2, \\&\\\"temp3\\\"\" \"gimple\" } } */"}, {"sha": "848df2a0e26497c058a6118c7da700eda774aa03", "filename": "gcc/testsuite/c-c++-common/auto-init-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-4.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -14,6 +14,6 @@ long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((8|12|16), 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(4, 1, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(8, 1, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((8|12|16), 1, \\&\\\"temp3\\\"\" \"gimple\" } } */"}, {"sha": "9c4de6121826ac8226dc17c666413c45b5d64087", "filename": "gcc/testsuite/c-c++-common/auto-init-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-5.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -15,7 +15,7 @@ _Complex long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(16, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((16|24|32), 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(8, 2, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(16, 2, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((16|24|32), 2, \\&\\\"temp3\\\"\" \"gimple\" } } */\n "}, {"sha": "6a406447f3d99e7e05aa909f8ca200392b2e7b4b", "filename": "gcc/testsuite/c-c++-common/auto-init-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-6.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -15,7 +15,7 @@ _Complex long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(16, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((16|24|32), 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(8, 1, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(16, 1, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((16|24|32), 1, \\&\\\"temp3\\\"\" \"gimple\" } } */\n "}, {"sha": "b44dd5e68ed19c73353fb3154c7a76571d78bea7", "filename": "gcc/testsuite/c-c++-common/auto-init-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-7.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -29,7 +29,7 @@ double foo()\n   return result;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(12, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(24, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(28, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(12, 2, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(24, 2, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(28, 2, \\&\\\"temp3\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(8, 2, \\&\\\"temp4\\\"\" \"gimple\" } } */"}, {"sha": "739ac02893157bf9d38ed5b30f672a0c96a6890a", "filename": "gcc/testsuite/c-c++-common/auto-init-8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-8.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -29,7 +29,7 @@ double foo()\n   return result;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(12, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(24, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(28, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(12, 1, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(24, 1, \\&\\\"temp2\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(28, 1, \\&\\\"temp3\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(8, 1, \\&\\\"temp4\\\"\" \"gimple\" } } */"}, {"sha": "113107ffd5c04d957a373352650e7436e6f7578e", "filename": "gcc/testsuite/c-c++-common/auto-init-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-9.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -16,5 +16,5 @@ void foo()\n   return;\n }\n \n-/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(2, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump-not \"temp2 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(2, 2, \\&\\\"temp1\\\"\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-not \"temp2 = .DEFERRED_INIT \\\\(8, 2, \\&\\\"temp2\\\"\" \"gimple\" } } */"}, {"sha": "ce6779f20fcd4d24cf1cbe9cea79adf2ccb9fa25", "filename": "gcc/testsuite/c-c++-common/auto-init-esra.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-esra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-esra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-esra.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -1,6 +1,6 @@\n /* Verify the strength reduction adjustment for -ftrivial-auto-var-init.  */ \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftrivial-auto-var-init=zero -fdump-tree-gimple -fdump-tree-esra\" } */\n+/* { dg-options \"-O2 -ftrivial-auto-var-init=zero -fno-PIC -fdump-tree-gimple -fdump-tree-esra\" } */\n \n \n typedef double VECTOR[3];\n@@ -31,5 +31,5 @@ void VCross(VECTOR a, const VECTOR b, const VECTOR c)\n  Assign_Vector(a, tmp);\n }\n \n-/* { dg-final { scan-tree-dump-times \"tmp = .DEFERRED_INIT \\\\(24, 2, 0\\\\)\" 1 \"gimple\" } } */\n-/* { dg-final { scan-tree-dump-times \".DEFERRED_INIT \\\\(8, 2, 0\\\\)\" 3 \"esra\" } } */\n+/* { dg-final { scan-tree-dump-times \"tmp = .DEFERRED_INIT \\\\(24, 2, \\&\\\"tmp\\\"\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \".DEFERRED_INIT \\\\(8, 2, \\&\\\"tmp\\\"\" 3 \"esra\" } } */"}, {"sha": "d2e322717f0e1efa7c71ec3170e5774091c0d5d8", "filename": "gcc/testsuite/c-c++-common/auto-init-padding-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-padding-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-padding-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-padding-1.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -19,5 +19,5 @@ void foo(int a)\n   g(s);\n }\n \n-/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(24, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \".DEFERRED_INIT \\\\(24, 1, \\&\\\"s\\\"\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"__builtin_clear_padding\" \"gimple\" } } */"}, {"sha": "375befd325b0519896a71e1418b43dcc4d0e5023", "filename": "gcc/testsuite/gcc.target/aarch64/auto-init-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fauto-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fauto-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fauto-init-2.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -32,4 +32,4 @@ void foo()\n /* { dg-final { scan-rtl-dump-times \"0xfe\\\\\\]\" 1 \"expand\" } } */\n /* { dg-final { scan-rtl-dump-times \"0xfffffffffffffefe\" 1 \"expand\" } } */\n /* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 2 \"expand\" } } */\n-/* { dg-final { scan-rtl-dump-times \"0xfefefefefefefefe\" 2 \"expand\" } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfefefefefefefefe\" 3 \"expand\" } } */"}, {"sha": "b7fe313b70c394c395bd0175bf589727e6415455", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -3455,19 +3455,14 @@ verify_gimple_call (gcall *stmt)\n     }\n \n   /* For a call to .DEFERRED_INIT,\n-     LHS = DEFERRED_INIT (SIZE of the DECL, INIT_TYPE, IS_VLA)\n-     we should guarantee that the 1st and the 3rd arguments are consistent:\n-     1st argument: SIZE of the DECL;\n-     3rd argument: IS_VLA, 0 NO, 1 YES;\n+     LHS = DEFERRED_INIT (SIZE of the DECL, INIT_TYPE, NAME of the DECL)\n+     we should guarantee that when the 1st argument is a constant, it should\n+     be the same as the size of the LHS.  */\n \n-     if IS_VLA is false, the 1st argument should be a constant and the same as\n-     the size of the LHS.  */\n   if (gimple_call_internal_p (stmt, IFN_DEFERRED_INIT))\n     {\n       tree size_of_arg0 = gimple_call_arg (stmt, 0);\n       tree size_of_lhs = TYPE_SIZE_UNIT (TREE_TYPE (lhs));\n-      tree is_vla_node = gimple_call_arg (stmt, 2);\n-      bool is_vla = (bool) TREE_INT_CST_LOW (is_vla_node);\n \n       if (TREE_CODE (lhs) == SSA_NAME)\n \tlhs = SSA_NAME_VAR (lhs);\n@@ -3477,27 +3472,13 @@ verify_gimple_call (gcall *stmt)\n \t\t\t\t\t\t    &size_from_arg0);\n       bool is_constant_size_lhs = poly_int_tree_p (size_of_lhs,\n \t\t\t\t\t\t   &size_from_lhs);\n-      if (!is_vla)\n-\t{\n-\t  if (!is_constant_size_arg0)\n-\t    {\n-\t      error (\"%<DEFFERED_INIT%> calls for non-VLA should have \"\n-\t\t     \"constant size for the first argument\");\n-\t      return true;\n-\t    }\n-\t  else if (!is_constant_size_lhs)\n-\t    {\n-\t      error (\"%<DEFFERED_INIT%> calls for non-VLA should have \"\n-\t\t     \"constant size for the LHS\");\n-\t      return true;\n-\t    }\n-\t  else if (maybe_ne (size_from_arg0, size_from_lhs))\n-\t    {\n-\t      error (\"%<DEFFERED_INIT%> calls for non-VLA should have same \"\n-\t\t     \"constant size for the first argument and LHS\");\n-\t      return true;\n-\t    }\n-\t}\n+      if (is_constant_size_arg0 && is_constant_size_lhs)\n+\tif (maybe_ne (size_from_arg0, size_from_lhs))\n+\t  {\n+\t    error (\"%<DEFFERED_INIT%> calls should have same \"\n+\t\t   \"constant size for the first argument and LHS\");\n+\t    return true;\n+\t  }\n     }\n \n   /* ???  The C frontend passes unpromoted arguments in case it"}, {"sha": "e0ea2c7b308485570731f35b2223d44fe20f7604", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c98c8b41b031bdba5c05f4ac875baf48b9efe33/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=6c98c8b41b031bdba5c05f4ac875baf48b9efe33", "patch": "@@ -4123,7 +4123,7 @@ get_repl_default_def_ssa_name (struct access *racc, tree reg_type)\n static void\n generate_subtree_deferred_init (struct access *access,\n \t\t\t\ttree init_type,\n-\t\t\t\ttree is_vla,\n+\t\t\t\ttree decl_name,\n \t\t\t\tgimple_stmt_iterator *gsi,\n \t\t\t\tlocation_t loc)\n {\n@@ -4135,7 +4135,7 @@ generate_subtree_deferred_init (struct access *access,\n \t  gimple *call\n \t    = gimple_build_call_internal (IFN_DEFERRED_INIT, 3,\n \t\t\t\t\t  TYPE_SIZE_UNIT (TREE_TYPE (repl)),\n-\t\t\t\t\t  init_type, is_vla);\n+\t\t\t\t\t  init_type, decl_name);\n \t  gimple_call_set_lhs (call, repl);\n \t  gsi_insert_before (gsi, call, GSI_SAME_STMT);\n \t  update_stmt (call);\n@@ -4144,15 +4144,15 @@ generate_subtree_deferred_init (struct access *access,\n \t}\n       if (access->first_child)\n \tgenerate_subtree_deferred_init (access->first_child, init_type,\n-\t\t\t\t\tis_vla, gsi, loc);\n+\t\t\t\t\tdecl_name, gsi, loc);\n \n       access = access ->next_sibling;\n     }\n   while (access);\n }\n \n /* For a call to .DEFERRED_INIT:\n-   var = .DEFERRED_INIT (size_of_var, init_type, is_vla);\n+   var = .DEFERRED_INIT (size_of_var, init_type, name_of_var);\n    examine the LHS variable VAR and replace it with a scalar replacement if\n    there is one, also replace the RHS call to a call to .DEFERRED_INIT of\n    the corresponding scalar relacement variable.  Examine the subtree and\n@@ -4164,7 +4164,7 @@ sra_modify_deferred_init (gimple *stmt, gimple_stmt_iterator *gsi)\n {\n   tree lhs = gimple_call_lhs (stmt);\n   tree init_type = gimple_call_arg (stmt, 1);\n-  tree is_vla = gimple_call_arg (stmt, 2);\n+  tree decl_name = gimple_call_arg (stmt, 2);\n \n   struct access *lhs_access = get_access_for_expr (lhs);\n   if (!lhs_access)\n@@ -4185,7 +4185,7 @@ sra_modify_deferred_init (gimple *stmt, gimple_stmt_iterator *gsi)\n \n   if (lhs_access->first_child)\n     generate_subtree_deferred_init (lhs_access->first_child,\n-\t\t\t\t    init_type, is_vla, gsi, loc);\n+\t\t\t\t    init_type, decl_name, gsi, loc);\n   if (lhs_access->grp_covered)\n     {\n       unlink_stmt_vdef (stmt);"}]}