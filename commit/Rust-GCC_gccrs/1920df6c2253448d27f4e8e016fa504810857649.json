{"sha": "1920df6c2253448d27f4e8e016fa504810857649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyMGRmNmMyMjUzNDQ4ZDI3ZjRlOGUwMTZmYTUwNDgxMDg1NzY0OQ==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-05-15T22:58:03Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-05-15T22:58:03Z"}, "message": "cgraph.h (compute_inline_parameters): Made public.\n\n2008-05-15  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* cgraph.h (compute_inline_parameters): Made public.\n\t* tree-pass.h (ipa_opt_pass): Removed function_generate_summary,\n\tvariable_generate_summary, function_write_summary,\n\tvariable_write_summary, variable_read_summary.  Added \n\tgenerate_summary, write_summary, read_summary.\n\t* cgraphunit.c (cgraph_process_new_functions): Changed call from\n\tpass_ipa_inline.function_generate_summary, to\n\tcompute_inline_parameters. \n\t* ipa-inline.c (compute_inline_parameters): Made public and added\n\tnode parameter.\n\t(compute_inline_parameters_for_current): New function.\n\t(pass_inline_param): Now calls\n\tcompute_inline_parameters_for_current.\n\t(inline_generate_summary): Removed parameter and made to loop over\n\tall cgraph nodes.\n\t(pass_ipa_inline): Updated for new IPA_PASS structure.\n\t* passes.c (execute_ipa_summary_passes): Now is called once per\n\tpass rather than once per node*pass.\n\nFrom-SVN: r135401", "tree": {"sha": "2c6ab8e53e59d94a67a634900e3ca0f68350582a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c6ab8e53e59d94a67a634900e3ca0f68350582a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1920df6c2253448d27f4e8e016fa504810857649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1920df6c2253448d27f4e8e016fa504810857649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1920df6c2253448d27f4e8e016fa504810857649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1920df6c2253448d27f4e8e016fa504810857649/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be95b3555aa82872565a1e1ea85ff826a20c8e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be95b3555aa82872565a1e1ea85ff826a20c8e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be95b3555aa82872565a1e1ea85ff826a20c8e2e"}], "stats": {"total": 117, "additions": 83, "deletions": 34}, "files": [{"sha": "6d9adc3cef9706fae7073ead2ca8fcf75bbd53d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1920df6c2253448d27f4e8e016fa504810857649/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1920df6c2253448d27f4e8e016fa504810857649/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1920df6c2253448d27f4e8e016fa504810857649", "patch": "@@ -1,3 +1,24 @@\n+2008-05-15  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* cgraph.h (compute_inline_parameters): Made public.\n+\t* tree-pass.h (ipa_opt_pass): Removed function_generate_summary,\n+\tvariable_generate_summary, function_write_summary,\n+\tvariable_write_summary, variable_read_summary.  Added \n+\tgenerate_summary, write_summary, read_summary.\n+\t* cgraphunit.c (cgraph_process_new_functions): Changed call from\n+\tpass_ipa_inline.function_generate_summary, to\n+\tcompute_inline_parameters. \n+\t* ipa-inline.c (compute_inline_parameters): Made public and added\n+\tnode parameter.\n+\t(compute_inline_parameters_for_current): New function.\n+\t(pass_inline_param): Now calls\n+\tcompute_inline_parameters_for_current.\n+\t(inline_generate_summary): Removed parameter and made to loop over\n+\tall cgraph nodes.\n+\t(pass_ipa_inline): Updated for new IPA_PASS structure.\n+\t* passes.c (execute_ipa_summary_passes): Now is called once per\n+\tpass rather than once per node*pass.\n+\t\n 2008-05-15  Anatoly Sokolov <aesok@post.ru>\n \n \t* config/avr/avr.c (avr_base_arch_macro, avr_have_movw_lpmx_p, "}, {"sha": "b537cb5785bd81853a879aa55e0c9e77bdcf35c8", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=1920df6c2253448d27f4e8e016fa504810857649", "patch": "@@ -418,6 +418,7 @@ varpool_next_static_initializer (struct varpool_node *node)\n void cgraph_clone_inlined_nodes (struct cgraph_edge *, bool, bool);\n void cgraph_mark_inline_edge (struct cgraph_edge *, bool);\n bool cgraph_default_inline_p (struct cgraph_node *, const char **);\n+unsigned int compute_inline_parameters (struct cgraph_node *);\n \n \n /* Create a new static variable of type TYPE.  */"}, {"sha": "9f6ea72be80302aaeb7cd8b418e56419a20dc5ca", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1920df6c2253448d27f4e8e016fa504810857649", "patch": "@@ -460,7 +460,7 @@ cgraph_process_new_functions (void)\n \t    cgraph_analyze_function (node);\n \t  push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n \t  current_function_decl = fndecl;\n-\t  pass_ipa_inline.function_generate_summary (node);\n+\t  compute_inline_parameters (node);\n \t  if ((cgraph_state == CGRAPH_STATE_IPA_SSA\n \t      && !gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n \t      /* When not optimizing, be sure we run early local passes anyway"}, {"sha": "c3e58f33301c4a7a27e6184297731c00a5703a00", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=1920df6c2253448d27f4e8e016fa504810857649", "patch": "@@ -1519,11 +1519,9 @@ struct simple_ipa_opt_pass pass_ipa_early_inline =\n };\n \n /* Compute parameters of functions used by inliner.  */\n-static unsigned int\n-compute_inline_parameters (void)\n+unsigned int\n+compute_inline_parameters (struct cgraph_node *node)\n {\n-  struct cgraph_node *node = cgraph_node (current_function_decl);\n-\n   gcc_assert (!node->global.inlined_to);\n   inline_summary (node)->estimated_self_stack_size\n     = estimated_stack_frame_size ();\n@@ -1543,6 +1541,16 @@ compute_inline_parameters (void)\n   return 0;\n }\n \n+\n+/* Compute parameters of functions used by inliner using\n+   current_function_decl.  */\n+static unsigned int\n+compute_inline_parameters_for_current (void)\n+{\n+  compute_inline_parameters (cgraph_node (current_function_decl));\n+  return 0;\n+}\n+\n /* When inlining shall be performed.  */\n static bool\n gate_inline_passes (void)\n@@ -1556,7 +1564,7 @@ struct gimple_opt_pass pass_inline_parameters =\n   GIMPLE_PASS,\n   NULL,\t \t\t\t\t/* name */\n   gate_inline_passes,\t\t\t/* gate */\n-  compute_inline_parameters,\t\t/* execute */\n+  compute_inline_parameters_for_current,/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n@@ -1571,9 +1579,30 @@ struct gimple_opt_pass pass_inline_parameters =\n \n /* Note function body size.  */\n static void\n-inline_generate_summary (struct cgraph_node *node ATTRIBUTE_UNUSED)\n+inline_generate_summary (void)\n {\n-  compute_inline_parameters ();\n+  struct cgraph_node **order =\n+    XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n+  int nnodes = cgraph_postorder (order);\n+  int i;\n+\n+  for (i = nnodes - 1; i >= 0; i--)\n+    {\n+      struct cgraph_node *node = order[i];\n+      \n+      /* Allow possibly removed nodes to be garbage collected.  */\n+      order[i] = NULL;\n+      if (node->analyzed && (node->needed || node->reachable))\n+\t{\n+\t  push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n+\t  current_function_decl = node->decl;\n+\t  compute_inline_parameters (node);\n+\t  pop_cfun ();\n+\t}\n+    }\n+  \n+  current_function_decl = NULL;\n+  free (order);\n   return;\n }\n \n@@ -1619,12 +1648,10 @@ struct ipa_opt_pass pass_ipa_inline =\n   TODO_dump_cgraph | TODO_dump_func\n   | TODO_remove_functions\t\t/* todo_flags_finish */\n  },\n- inline_generate_summary,\t\t/* function_generate_summary */\n- NULL,\t\t\t\t\t/* variable_generate_summary */\n- NULL,\t\t\t\t\t/* function_write_summary */\n- NULL,\t\t\t\t\t/* variable_write_summary */\n+ inline_generate_summary,\t\t/* generate_summary */\n+ NULL,\t\t\t\t\t/* write_summary */\n+ NULL,\t\t\t\t\t/* read_summary */\n  NULL,\t\t\t\t\t/* function_read_summary */\n- NULL,\t\t\t\t\t/* variable_read_summary */\n  0,\t\t\t\t\t/* TODOs */\n  inline_transform,\t\t\t/* function_transform */\n  NULL,\t\t\t\t\t/* variable_transform */"}, {"sha": "fa74d0fe0b18aca360138f19398203ecf2e0fb9c", "filename": "gcc/passes.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1920df6c2253448d27f4e8e016fa504810857649", "patch": "@@ -1157,21 +1157,21 @@ add_ipa_transform_pass (void *data)\n   VEC_safe_push (ipa_opt_pass, heap, cfun->ipa_transforms_to_apply, ipa_pass);\n }\n \n-/* Execute IPA pass function summary generation. DATA is pointer to\n-   pass list to execute.  */\n+/* Execute summary generation for all of the passes in IPA_PASS.  */\n \n static void\n-execute_ipa_summary_passes (void *data)\n+execute_ipa_summary_passes (struct ipa_opt_pass *ipa_pass)\n {\n-  struct ipa_opt_pass *ipa_pass = (struct ipa_opt_pass *)data;\n-  struct cgraph_node *node = cgraph_node (cfun->decl);\n-  while (ipa_pass && ipa_pass->pass.type == IPA_PASS)\n+  while (ipa_pass)\n     {\n       struct opt_pass *pass = &ipa_pass->pass;\n-      if (!pass->gate || pass->gate ())\n+\n+      /* Execute all of the IPA_PASSes in the list.  */\n+      if (ipa_pass->pass.type == IPA_PASS \n+\t  && (!pass->gate || pass->gate ()))\n \t{\n \t  pass_init_dump_file (pass);\n-\t  ipa_pass->function_generate_summary (node);\n+\t  ipa_pass->generate_summary ();\n \t  pass_fini_dump_file (pass);\n \t}\n       ipa_pass = (struct ipa_opt_pass *)ipa_pass->pass.next;\n@@ -1356,7 +1356,7 @@ execute_ipa_pass_list (struct opt_pass *pass)\n \t    {\n \t      if (!quiet_flag && !cfun)\n \t\tfprintf (stderr, \" <summary generate>\");\n-\t      do_per_function_toporder (execute_ipa_summary_passes, pass);\n+\t      execute_ipa_summary_passes ((struct ipa_opt_pass *) pass);\n \t    }\n \t  summaries_generated = true;\n \t}"}, {"sha": "8ec46e87939db8ecadb075765c59a862a50a7b8e", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1920df6c2253448d27f4e8e016fa504810857649/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=1920df6c2253448d27f4e8e016fa504810857649", "patch": "@@ -155,24 +155,24 @@ struct ipa_opt_pass\n {\n   struct opt_pass pass;\n \n-  /* IPA passes can analyze function body and variable initializers using this\n-      hook and produce summary.  */\n-  void (*function_generate_summary) (struct cgraph_node *);\n-  void (*variable_generate_summary) (struct varpool_node *);\n-\n-  /* These hooks will be used to serialize IPA summaries on disk.  For a moment\n-      they are just placeholders.  */\n-  void (*function_write_summary) (struct cgraph_node *); \n-  void (*variable_write_summary) (struct varpool_node *);\n-  void (*function_read_summary) (struct cgraph_node *);\n-  void (*variable_read_summary) (struct varpool_node *);\n+  /* IPA passes can analyze function body and variable initializers\n+      using this hook and produce summary.  */\n+  void (*generate_summary) (void);\n+\n+  /* This hook is used to serialize IPA summaries on disk.  */\n+  void (*write_summary) (void);\n \n+  /* For most ipa passes, the information can only be deserialized in\n+     one chunk.  However, function bodies are read function at a time\n+     as needed so both calls are necessary.  */\n+  void (*read_summary) (void);\n+  void (*function_read_summary) (struct cgraph_node *);\n+  \n   /* Results of interprocedural propagation of an IPA pass is applied to\n      function body via this hook.  */\n   unsigned int function_transform_todo_flags_start;\n   unsigned int (*function_transform) (struct cgraph_node *);\n   void (*variable_transform) (struct varpool_node *);\n-\n };\n \n /* Description of simple IPA pass.  Simple IPA passes have just one execute"}]}