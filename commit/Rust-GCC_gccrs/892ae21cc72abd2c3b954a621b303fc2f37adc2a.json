{"sha": "892ae21cc72abd2c3b954a621b303fc2f37adc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyYWUyMWNjNzJhYmQyYzNiOTU0YTYyMWIzMDNmYzJmMzdhZGMyYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-10-26T18:34:03Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-10-26T18:34:03Z"}, "message": "ipa.c (cgraph_externally_visible_p, [...]): Use info provided by linker plugin.\n\n\t* ipa.c (cgraph_externally_visible_p, varpool_externally_visible_p):\n\tUse info provided by linker plugin.\n\nFrom-SVN: r165978", "tree": {"sha": "39f363028e131d86bf27f53db160c2cb47409c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f363028e131d86bf27f53db160c2cb47409c98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892ae21cc72abd2c3b954a621b303fc2f37adc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892ae21cc72abd2c3b954a621b303fc2f37adc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892ae21cc72abd2c3b954a621b303fc2f37adc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892ae21cc72abd2c3b954a621b303fc2f37adc2a/comments", "author": null, "committer": null, "parents": [{"sha": "0e0f02ff9237738aabcb7466953d62641b9ab1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0f02ff9237738aabcb7466953d62641b9ab1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0f02ff9237738aabcb7466953d62641b9ab1d5"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "6fa3e6aa8d5bb665db8b5cd14891196cda3ed900", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892ae21cc72abd2c3b954a621b303fc2f37adc2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892ae21cc72abd2c3b954a621b303fc2f37adc2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=892ae21cc72abd2c3b954a621b303fc2f37adc2a", "patch": "@@ -1,3 +1,8 @@\n+2010-10-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa.c (cgraph_externally_visible_p, varpool_externally_visible_p):\n+\tUse info provided by linker plugin.\n+\n 2010-10-26  Jason Merrill  <jason@redhat.com>\n \n \t* varasm.c (constructor_static_from_elts_p): Don't require a"}, {"sha": "c318b65fd923da5a9cc4db413ff27eb17c56d190", "filename": "gcc/ipa.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892ae21cc72abd2c3b954a621b303fc2f37adc2a/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892ae21cc72abd2c3b954a621b303fc2f37adc2a/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=892ae21cc72abd2c3b954a621b303fc2f37adc2a", "patch": "@@ -603,6 +603,7 @@ ipa_discover_readonly_nonaddressable_vars (void)\n static bool\n cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program, bool aliased)\n {\n+  struct cgraph_node *alias;\n   if (!node->local.finalized)\n     return false;\n   if (!DECL_COMDAT (node->decl)\n@@ -622,6 +623,18 @@ cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program, bool\n   if (lookup_attribute (\"externally_visible\", DECL_ATTRIBUTES (node->decl)))\n     return true;\n \n+  /* See if we have linker information about symbol not being used or\n+     if we need to make guess based on the declaration.\n+\n+     Even if the linker clams the symbol is unused, never bring internal\n+     symbols that are declared by user as used or externally visible.\n+     This is needed for i.e. references from asm statements.   */\n+  for (alias = node->same_body; alias; alias = alias->next)\n+    if (alias->resolution != LDPR_PREVAILING_DEF_IRONLY)\n+      break;\n+  if (!alias && node->resolution == LDPR_PREVAILING_DEF_IRONLY)\n+    return false;\n+\n   /* When doing link time optimizations, hidden symbols become local.  */\n   if (in_lto_p\n       && (DECL_VISIBILITY (node->decl) == VISIBILITY_HIDDEN\n@@ -665,6 +678,7 @@ cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program, bool\n static bool\n varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n {\n+  struct varpool_node *alias;\n   if (!DECL_COMDAT (vnode->decl) && !TREE_PUBLIC (vnode->decl))\n     return false;\n \n@@ -691,6 +705,11 @@ varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n      This is needed for i.e. references from asm statements.   */\n   if (varpool_used_from_object_file_p (vnode))\n     return true;\n+  for (alias = vnode->extra_name; alias; alias = alias->next)\n+    if (alias->resolution != LDPR_PREVAILING_DEF_IRONLY)\n+      break;\n+  if (!alias && vnode->resolution == LDPR_PREVAILING_DEF_IRONLY)\n+    return false;\n \n   /* When doing link time optimizations, hidden symbols become local.  */\n   if (in_lto_p"}]}