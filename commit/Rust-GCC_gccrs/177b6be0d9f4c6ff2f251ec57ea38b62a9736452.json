{"sha": "177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3YjZiZTBkOWY0YzZmZjJmMjUxZWM1N2VhMzhiNjJhOTczNjQ1Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-04-29T07:04:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-04-29T07:04:49Z"}, "message": "xtensa.c (gen_int_relational): Use gcc_assert and gcc_unreachable as appropriate.\n\n\t* config/xtensa/xtensa.c (gen_int_relational): Use gcc_assert and\n\tgcc_unreachable as appropriate.\n\t(gen_conditional_move, xtensa_split_operand_pair,\n\txtensa_split_operand_pair, xtensa_copy_incoming_a7,\n\txtensa_copy_incoming_a7, xtensa_copy_incoming_a7,\n\txtensa_copy_incoming_a7, xtensa_output_literal,\n\txtensa_output_literal, xtensa_output_literal): Likewise.\n\t* config/xtensa/xtensa.h (INITIAL_ELIMINATION_OFFSET): Likewise.\n\t* config/xtensa/xtensa.md (*btrue, *bfalse, *ubtrue, *ubfalse,\n\t*bittrue, *bitfalse, *masktrue, *maskfalse, movsicc_internal0,\n\tmovsicc_internal1, movsfcc_internal0,\n\tmovsfcc_internal1): Likewise.\n\nFrom-SVN: r98979", "tree": {"sha": "a0e76f0c512c802629ce71338c1f26cf05cdfa2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e76f0c512c802629ce71338c1f26cf05cdfa2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/comments", "author": null, "committer": null, "parents": [{"sha": "542f0c729112a46e5f2e04864d175436859dc169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542f0c729112a46e5f2e04864d175436859dc169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/542f0c729112a46e5f2e04864d175436859dc169"}], "stats": {"total": 175, "additions": 91, "deletions": 84}, "files": [{"sha": "fc060a723fc3a7f2374da5c1523eb6b068a976e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "patch": "@@ -1,3 +1,18 @@\n+2005-04-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/xtensa/xtensa.c (gen_int_relational): Use gcc_assert and\n+\tgcc_unreachable as appropriate.\n+\t(gen_conditional_move, xtensa_split_operand_pair,\n+\txtensa_split_operand_pair, xtensa_copy_incoming_a7,\n+\txtensa_copy_incoming_a7, xtensa_copy_incoming_a7,\n+\txtensa_copy_incoming_a7, xtensa_output_literal,\n+\txtensa_output_literal, xtensa_output_literal): Likewise.\n+\t* config/xtensa/xtensa.h (INITIAL_ELIMINATION_OFFSET): Likewise.\n+\t* config/xtensa/xtensa.md (*btrue, *bfalse, *ubtrue, *ubfalse,\n+\t*bittrue, *bitfalse, *masktrue, *maskfalse, movsicc_internal0,\n+\tmovsicc_internal1, movsfcc_internal0,\n+\tmovsfcc_internal1): Likewise.\n+\n 2005-04-28  James E Wilson  <wilson@specifixinc.com>\n \n \t* config/i386/i386.h (HI_REGISTER_NAMES): Fix typos in comment."}, {"sha": "a45c886e3c13cd01ae8f2df44675455028b3ebce", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "patch": "@@ -667,8 +667,7 @@ gen_int_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n   struct cmp_info *p_info;\n \n   test = map_test_to_internal_test (test_code);\n-  if (test == ITEST_MAX)\n-    abort ();\n+  gcc_assert (test != ITEST_MAX);\n \n   p_info = &info[ (int)test ];\n \n@@ -864,7 +863,7 @@ gen_conditional_move (rtx cmp)\n \t\t{\n \t\tcase LT: code = GE; break;\n \t\tcase GE: code = LT; break;\n-\t\tdefault: abort ();\n+\t\tdefault: gcc_unreachable ();\n \t\t}\n \t    }\n \n@@ -956,7 +955,7 @@ xtensa_split_operand_pair (rtx operands[4], enum machine_mode mode)\n       break;\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n \n   switch (GET_CODE (operands[0]))\n@@ -972,7 +971,7 @@ xtensa_split_operand_pair (rtx operands[4], enum machine_mode mode)\n       break;\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n \n@@ -1076,8 +1075,7 @@ xtensa_copy_incoming_a7 (rtx opnd)\n     return opnd;\n \n   /* This function should never be called again once a7 has been copied.  */\n-  if (cfun->machine->set_frame_ptr_insn)\n-    abort ();\n+  gcc_assert (!cfun->machine->set_frame_ptr_insn);\n \n   mode = GET_MODE (opnd);\n \n@@ -1086,8 +1084,7 @@ xtensa_copy_incoming_a7 (rtx opnd)\n   reg = opnd;\n   if (GET_CODE (reg) == SUBREG)\n     {\n-      if (SUBREG_BYTE (reg) != 0)\n-\tabort ();\n+      gcc_assert (SUBREG_BYTE (reg) == 0);\n       reg = SUBREG_REG (reg);\n     }\n   if (GET_CODE (reg) != REG\n@@ -1096,8 +1093,7 @@ xtensa_copy_incoming_a7 (rtx opnd)\n     return opnd;\n \n   /* 1-word args will always be in a7; 2-word args in a6/a7.  */\n-  if (REGNO (reg) + HARD_REGNO_NREGS (A7_REG, mode) - 1 != A7_REG)\n-    abort ();\n+  gcc_assert (REGNO (reg) + HARD_REGNO_NREGS (A7_REG, mode) - 1 == A7_REG);\n \n   cfun->machine->need_a7_copy = false;\n \n@@ -1129,7 +1125,7 @@ xtensa_copy_incoming_a7 (rtx opnd)\n       emit_insn (gen_movqi_internal (tmp, gen_raw_REG (mode, A7_REG)));\n       break;\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n \n   cfun->machine->set_frame_ptr_insn = emit_insn (gen_set_frame_ptr ());\n@@ -1838,8 +1834,7 @@ xtensa_output_literal (FILE *file, rtx x, enum machine_mode mode, int labelno)\n   switch (GET_MODE_CLASS (mode))\n     {\n     case MODE_FLOAT:\n-      if (GET_CODE (x) != CONST_DOUBLE)\n-\tabort ();\n+      gcc_assert (GET_CODE (x) == CONST_DOUBLE);\n \n       REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n       switch (mode)\n@@ -1856,32 +1851,35 @@ xtensa_output_literal (FILE *file, rtx x, enum machine_mode mode, int labelno)\n \t  break;\n \n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n \n       break;\n \n     case MODE_INT:\n     case MODE_PARTIAL_INT:\n       size = GET_MODE_SIZE (mode);\n-      if (size == 4)\n+      switch (size)\n \t{\n+\tcase 4:\n \t  output_addr_const (file, x);\n \t  fputs (\"\\n\", file);\n-\t}\n-      else if (size == 8)\n-\t{\n+\t  break;\n+\n+\tcase 8:\n \t  output_addr_const (file, operand_subword (x, 0, 0, DImode));\n \t  fputs (\", \", file);\n \t  output_addr_const (file, operand_subword (x, 1, 0, DImode));\n \t  fputs (\"\\n\", file);\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n-      else\n-\tabort ();\n       break;\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n "}, {"sha": "9f2f7d63399dd099420273da2fbec7559a295c0a", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "patch": "@@ -588,12 +588,17 @@ extern enum reg_class xtensa_char_to_class[256];\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     compute_frame_size (get_frame_size ());\t\t\t\t\\\n-    if ((FROM) == FRAME_POINTER_REGNUM)\t\t\t\t\t\\\n-      (OFFSET) = 0;\t\t\t\t\t\t\t\\\n-    else if ((FROM) == ARG_POINTER_REGNUM)\t\t\t\t\\\n-      (OFFSET) = xtensa_current_frame_size;\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      abort ();\t\t\t\t\t\t\t\t\\\n+    switch (FROM)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+      case FRAME_POINTER_REGNUM:\t\t\t\t\t\\\n+        (OFFSET) = 0;\t\t\t\t\t\t\t\\\n+\tbreak;\t\t\t\t\t\t\t\t\\\n+      case ARG_POINTER_REGNUM:\t\t\t\t\t\t\\\n+        (OFFSET) = xtensa_current_frame_size;\t\t\t\t\\\n+\tbreak;\t\t\t\t\t\t\t\t\\\n+      default:\t\t\t\t\t\t\t\t\\\n+\tgcc_unreachable ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n /* If defined, the maximum amount of space required for outgoing"}, {"sha": "cd08f7633a62e437037e8095c813150a02ee2a10", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 45, "deletions": 56, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177b6be0d9f4c6ff2f251ec57ea38b62a9736452/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=177b6be0d9f4c6ff2f251ec57ea38b62a9736452", "patch": "@@ -1326,7 +1326,7 @@\n \tcase NE:\treturn \"bne\\t%0, %1, %2\";\n \tcase LT:\treturn \"blt\\t%0, %1, %2\";\n \tcase GE:\treturn \"bge\\t%0, %1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else if (INTVAL (operands[1]) == 0)\n@@ -1341,7 +1341,7 @@\n \t\t\t\t: \"bnez\\t%0, %2\");\n \tcase LT:\treturn \"bltz\\t%0, %2\";\n \tcase GE:\treturn \"bgez\\t%0, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n@@ -1352,11 +1352,10 @@\n \tcase NE:\treturn \"bnei\\t%0, %d1, %2\";\n \tcase LT:\treturn \"blti\\t%0, %d1, %2\";\n \tcase GE:\treturn \"bgei\\t%0, %d1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1379,7 +1378,7 @@\n \tcase NE:\treturn \"beq\\t%0, %1, %2\";\n \tcase LT:\treturn \"bge\\t%0, %1, %2\";\n \tcase GE:\treturn \"blt\\t%0, %1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else if (INTVAL (operands[1]) == 0)\n@@ -1394,7 +1393,7 @@\n \t\t\t\t: \"beqz\\t%0, %2\");\n \tcase LT:\treturn \"bgez\\t%0, %2\";\n \tcase GE:\treturn \"bltz\\t%0, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n@@ -1405,11 +1404,10 @@\n \tcase NE:\treturn \"beqi\\t%0, %d1, %2\";\n \tcase LT:\treturn \"bgei\\t%0, %d1, %2\";\n \tcase GE:\treturn \"blti\\t%0, %d1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1430,7 +1428,7 @@\n \t{\n \tcase LTU:\treturn \"bltu\\t%0, %1, %2\";\n \tcase GEU:\treturn \"bgeu\\t%0, %1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n@@ -1439,11 +1437,10 @@\n \t{\n \tcase LTU:\treturn \"bltui\\t%0, %d1, %2\";\n \tcase GEU:\treturn \"bgeui\\t%0, %d1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1464,7 +1461,7 @@\n \t{\n \tcase LTU:\treturn \"bgeu\\t%0, %1, %2\";\n \tcase GEU:\treturn \"bltu\\t%0, %1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n@@ -1473,11 +1470,10 @@\n \t{\n \tcase LTU:\treturn \"bgeui\\t%0, %d1, %2\";\n \tcase GEU:\treturn \"bltui\\t%0, %d1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1505,7 +1501,7 @@\n \t{\n \tcase EQ:\treturn \"bbci\\t%0, %d1, %2\";\n \tcase NE:\treturn \"bbsi\\t%0, %d1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n@@ -1514,11 +1510,10 @@\n \t{\n \tcase EQ:\treturn \"bbc\\t%0, %1, %2\";\n \tcase NE:\treturn \"bbs\\t%0, %1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1544,7 +1539,7 @@\n \t{\n \tcase EQ:\treturn \"bbsi\\t%0, %d1, %2\";\n \tcase NE:\treturn \"bbci\\t%0, %d1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n@@ -1553,11 +1548,10 @@\n \t{\n \tcase EQ:\treturn \"bbs\\t%0, %1, %2\";\n \tcase NE:\treturn \"bbc\\t%0, %1, %2\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1577,10 +1571,8 @@\n     {\n     case EQ:\t\treturn \"bnone\\t%0, %1, %2\";\n     case NE:\t\treturn \"bany\\t%0, %1, %2\";\n-    default:\t\tbreak;\n+    default:\t\tgcc_unreachable ();\n     }\n-  abort ();\n-  return \"\";\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1600,10 +1592,8 @@\n     {\n     case EQ:\t\treturn \"bany\\t%0, %1, %2\";\n     case NE:\t\treturn \"bnone\\t%0, %1, %2\";\n-    default:\t\tbreak;\n+    default:\t\tgcc_unreachable ();\n     }\n-  abort ();\n-  return \"\";\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1758,7 +1748,7 @@\n \tcase NE:\treturn \"movnez\\t%0, %2, %1\";\n \tcase LT:\treturn \"movltz\\t%0, %2, %1\";\n \tcase GE:\treturn \"movgez\\t%0, %2, %1\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n@@ -1769,11 +1759,10 @@\n \tcase NE:\treturn \"moveqz\\t%0, %3, %1\";\n \tcase LT:\treturn \"movgez\\t%0, %3, %1\";\n \tcase GE:\treturn \"movltz\\t%0, %3, %1\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"move,move\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -1797,9 +1786,9 @@\n     case 1:\n       if (isEq) return \"movt\\t%0, %3, %1\";\n       return \"movf\\t%0, %3, %1\";\n+    default:\n+      gcc_unreachable ();\n     }\n-  abort ();\n-  return \"\";\n }\n   [(set_attr \"type\"\t\"move,move\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -1814,52 +1803,52 @@\n \t\t\t (match_operand:SF 3 \"register_operand\" \"0,r,0,f\")))]\n   \"\"\n {\n-  if (which_alternative == 0)\n+  switch (which_alternative)\n     {\n+    case 0:\n       switch (GET_CODE (operands[4]))\n \t{\n \tcase EQ:\treturn \"moveqz\\t%0, %2, %1\";\n \tcase NE:\treturn \"movnez\\t%0, %2, %1\";\n \tcase LT:\treturn \"movltz\\t%0, %2, %1\";\n \tcase GE:\treturn \"movgez\\t%0, %2, %1\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n-    }\n-  else if (which_alternative == 1)\n-    {\n+      break;\n+    case 1:\n       switch (GET_CODE (operands[4]))\n \t{\n \tcase EQ:\treturn \"movnez\\t%0, %3, %1\";\n \tcase NE:\treturn \"moveqz\\t%0, %3, %1\";\n \tcase LT:\treturn \"movgez\\t%0, %3, %1\";\n \tcase GE:\treturn \"movltz\\t%0, %3, %1\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n-    }\n-  else if (which_alternative == 2)\n-    {\n+      break;\n+    case 2:\n       switch (GET_CODE (operands[4]))\n \t{\n \tcase EQ:\treturn \"moveqz.s %0, %2, %1\";\n \tcase NE:\treturn \"movnez.s %0, %2, %1\";\n \tcase LT:\treturn \"movltz.s %0, %2, %1\";\n \tcase GE:\treturn \"movgez.s %0, %2, %1\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n-    }\n-  else if (which_alternative == 3)\n-    {\n+      break;\n+    case 3:\n       switch (GET_CODE (operands[4]))\n \t{\n \tcase EQ:\treturn \"movnez.s %0, %3, %1\";\n \tcase NE:\treturn \"moveqz.s %0, %3, %1\";\n \tcase LT:\treturn \"movgez.s %0, %3, %1\";\n \tcase GE:\treturn \"movltz.s %0, %3, %1\";\n-\tdefault:\tbreak;\n+\tdefault:\tgcc_unreachable ();\n \t}\n+      break;\n+    default:\n+      gcc_unreachable ();\n     }\n-  abort ();\n-  return \"\";\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\"\t\"move,move,move,move\")\n    (set_attr \"mode\"\t\"SF\")\n@@ -1889,9 +1878,9 @@\n     case 3:\n       if (isEq) return \"movt.s\\t%0, %3, %1\";\n       return \"movf.s\\t%0, %3, %1\";\n+    default:\n+      gcc_unreachable ();\n     }\n-  abort ();\n-  return \"\";\n }\n   [(set_attr \"type\"\t\"move,move,move,move\")\n    (set_attr \"mode\"\t\"SF\")"}]}