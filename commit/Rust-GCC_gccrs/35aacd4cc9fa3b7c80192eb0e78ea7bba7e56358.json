{"sha": "35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhYWNkNGNjOWZhM2I3YzgwMTkyZWIwZTc4ZWE3YmJhN2U1NjM1OA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-11-11T20:56:19Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-11-11T20:56:19Z"}, "message": "tree-ssa-alias.c (stmt_kills_ref_p_1): Use ao_ref_init_from_ptr_and_size for builtins.\n\n2013-11-11  Marc Glisse  <marc.glisse@inria.fr>\n\t    Jeff Law  <law@redhat.com>\n\ngcc/\n\t* tree-ssa-alias.c (stmt_kills_ref_p_1): Use\n\tao_ref_init_from_ptr_and_size for builtins.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/alias-27.c: New testcase.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r204686", "tree": {"sha": "725f8580c1989d7c136bae9bd4336c7c2c24ab47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/725f8580c1989d7c136bae9bd4336c7c2c24ab47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5783ad0ea7403304e4ea9c06818373a3bc7e62b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5783ad0ea7403304e4ea9c06818373a3bc7e62b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5783ad0ea7403304e4ea9c06818373a3bc7e62b1"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "bc418fea7abc3bb60a2e34b39f23f4f0a066c80a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "patch": "@@ -1,3 +1,9 @@\n+2013-11-11  Marc Glisse  <marc.glisse@inria.fr>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-alias.c (stmt_kills_ref_p_1): Use\n+\tao_ref_init_from_ptr_and_size for builtins.\n+\n 2013-11-11  Uros Bizjak  <ubizjak@gmail.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "9a527e020508a47d0437710154c5301fc23e83ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "patch": "@@ -1,3 +1,8 @@\n+2013-11-11  Marc Glisse  <marc.glisse@inria.fr>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/alias-27.c: New testcase.\n+\n 2013-11-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/58853"}, {"sha": "91c737eae25a45275f2cf3055a577c6940ad8dda", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-27.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-27.c?ref=35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+void f (long *p) {\n+  *p = 42;\n+  p[4] = 42;\n+  __builtin_memset (p, 0, 100);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"= 42\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "161a66a8b74aadd7117725ae48c4092aa4f0b442", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=35aacd4cc9fa3b7c80192eb0e78ea7bba7e56358", "patch": "@@ -2008,9 +2008,10 @@ static bool\n stmt_kills_ref_p_1 (gimple stmt, ao_ref *ref)\n {\n   /* For a must-alias check we need to be able to constrain\n-     the access properly.  */\n-  ao_ref_base (ref);\n-  if (ref->max_size == -1)\n+     the access properly.\n+     FIXME: except for BUILTIN_FREE.  */\n+  if (!ao_ref_base (ref)\n+      || ref->max_size == -1)\n     return false;\n \n   if (gimple_has_lhs (stmt)\n@@ -2097,23 +2098,33 @@ stmt_kills_ref_p_1 (gimple stmt, ao_ref *ref)\n \t    {\n \t      tree dest = gimple_call_arg (stmt, 0);\n \t      tree len = gimple_call_arg (stmt, 2);\n-\t      tree base = NULL_TREE;\n-\t      HOST_WIDE_INT offset = 0;\n \t      if (!host_integerp (len, 0))\n \t\treturn false;\n-\t      if (TREE_CODE (dest) == ADDR_EXPR)\n-\t\tbase = get_addr_base_and_unit_offset (TREE_OPERAND (dest, 0),\n-\t\t\t\t\t\t      &offset);\n-\t      else if (TREE_CODE (dest) == SSA_NAME)\n-\t\tbase = dest;\n-\t      if (base\n-\t\t  && base == ao_ref_base (ref))\n+\t      tree rbase = ref->base;\n+\t      double_int roffset = double_int::from_shwi (ref->offset);\n+\t      ao_ref dref;\n+\t      ao_ref_init_from_ptr_and_size (&dref, dest, len);\n+\t      tree base = ao_ref_base (&dref);\n+\t      double_int offset = double_int::from_shwi (dref.offset);\n+\t      double_int bpu = double_int::from_uhwi (BITS_PER_UNIT);\n+\t      if (!base || dref.size == -1)\n+\t\treturn false;\n+\t      if (TREE_CODE (base) == MEM_REF)\n+\t\t{\n+\t\t  if (TREE_CODE (rbase) != MEM_REF)\n+\t\t    return false;\n+\t\t  // Compare pointers.\n+\t\t  offset += bpu * mem_ref_offset (base);\n+\t\t  roffset += bpu * mem_ref_offset (rbase);\n+\t\t  base = TREE_OPERAND (base, 0);\n+\t\t  rbase = TREE_OPERAND (rbase, 0);\n+\t\t}\n+\t      if (base == rbase)\n \t\t{\n-\t\t  HOST_WIDE_INT size = TREE_INT_CST_LOW (len);\n-\t\t  if (offset <= ref->offset / BITS_PER_UNIT\n-\t\t      && (offset + size\n-\t\t          >= ((ref->offset + ref->max_size + BITS_PER_UNIT - 1)\n-\t\t\t      / BITS_PER_UNIT)))\n+\t\t  double_int size = bpu * tree_to_double_int (len);\n+\t\t  double_int rsize = double_int::from_uhwi (ref->max_size);\n+\t\t  if (offset.sle (roffset)\n+\t\t      && (roffset + rsize).sle (offset + size))\n \t\t    return true;\n \t\t}\n \t      break;"}]}