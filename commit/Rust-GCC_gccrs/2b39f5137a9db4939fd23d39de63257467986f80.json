{"sha": "2b39f5137a9db4939fd23d39de63257467986f80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIzOWY1MTM3YTlkYjQ5MzlmZDIzZDM5ZGU2MzI1NzQ2Nzk4NmY4MA==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "message": "VAX: Fix predicates for widening multiply and multiply-add insns\n\nIt makes no sense for insn operand predicates, as long as they accept a\nregister operand, to be more restrictive than the set of the associated\nconstraints, because expand will choose the insn based on the relevant\noperand being a pseudo register then and reload will keep it happily as\nan immediate if a constraint permits it.  So the restriction posed by\nsuch a predicate will be happily ignored, and moreover if a splitter is\nadded, such as required for MODE_CC support, the new instructions will\nreject the original operands supplied, causing an ICE like below:\n\n.../gcc/testsuite/gfortran.dg/graphite/PR67518.f90:44:0: Error: could not split insn\n(insn 90 662 663 (set (reg:DI 10 %r10 [orig:97 _235 ] [97])\n        (mult:DI (sign_extend:DI (mem/c:SI (plus:SI (reg/f:SI 13 %fp)\n                        (const_int -800 [0xfffffffffffffce0])) [14 %sfp+-800 S4 A32]))\n            (sign_extend:DI (const_int -51 [0xffffffffffffffcd])))) 299 {mulsidi3}\n     (expr_list:REG_EQUAL (mult:DI (sign_extend:DI (subreg:SI (mem/c:DI (plus:SI (reg/f:SI 13 %fp)\n                            (const_int -800 [0xfffffffffffffce0])) [14 %sfp+-800 S8 A32]) 0))\n            (const_int -51 [0xffffffffffffffcd]))\n        (nil)))\nduring RTL pass: final\n.../gcc/testsuite/gfortran.dg/graphite/PR67518.f90:44:0: internal compiler error: in final_scan_insn_1, at final.c:3073\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee <https://gcc.gnu.org/bugs/> for instructions.\n\nChange the predicates used with the widening multiply and multiply-add\ninsns to allow immediates then, just as the constraints and the machine\ninstructions produced permit.\n\nAlso give the insns names, for easier reference here and elsewhere.\n\n\tgcc/\n\t* config/vax/vax.md (mulsidi3): Fix the multiplicand predicates.\n\t(*maddsidi4, *maddsidi4_const): Likewise.  Name insns.", "tree": {"sha": "07d01cdf38f1bf762e6322f79be9284d4a1b9076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07d01cdf38f1bf762e6322f79be9284d4a1b9076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b39f5137a9db4939fd23d39de63257467986f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b39f5137a9db4939fd23d39de63257467986f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b39f5137a9db4939fd23d39de63257467986f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b39f5137a9db4939fd23d39de63257467986f80/comments", "author": null, "committer": null, "parents": [{"sha": "d38f8441bed01127358d46196aea2a2f55d0c949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38f8441bed01127358d46196aea2a2f55d0c949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38f8441bed01127358d46196aea2a2f55d0c949"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "2f6643abe5ce9cf3005e2e6d82779d97b26c0daa", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b39f5137a9db4939fd23d39de63257467986f80/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b39f5137a9db4939fd23d39de63257467986f80/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=2b39f5137a9db4939fd23d39de63257467986f80", "patch": "@@ -445,35 +445,32 @@\n \n (define_insn \"mulsidi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=g\")\n-\t(mult:DI (sign_extend:DI\n-\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"nrmT\"))\n-\t\t (sign_extend:DI\n-\t\t  (match_operand:SI 2 \"nonimmediate_operand\" \"nrmT\"))))]\n+\t(mult:DI\n+\t  (sign_extend:DI (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n+\t  (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"nrmT\"))))]\n   \"\"\n   \"emul %1,%2,$0,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*maddsidi4\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=g\")\n \t(plus:DI\n-\t (mult:DI (sign_extend:DI\n-\t\t   (match_operand:SI 1 \"nonimmediate_operand\" \"nrmT\"))\n-\t\t  (sign_extend:DI\n-\t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"nrmT\")))\n-\t (sign_extend:DI (match_operand:SI 3 \"nonimmediate_operand\" \"g\"))))]\n+\t  (mult:DI\n+\t    (sign_extend:DI (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n+\t    (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"nrmT\")))\n+\t  (sign_extend:DI (match_operand:SI 3 \"general_operand\" \"g\"))))]\n   \"\"\n   \"emul %1,%2,%3,%0\")\n \n ;; 'F' constraint means type CONST_DOUBLE\n-(define_insn \"\"\n+(define_insn \"*maddsidi4_const\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=g\")\n \t(plus:DI\n-\t (mult:DI (sign_extend:DI\n-\t\t   (match_operand:SI 1 \"nonimmediate_operand\" \"nrmT\"))\n-\t\t  (sign_extend:DI\n-\t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"nrmT\")))\n-\t (match_operand:DI 3 \"immediate_operand\" \"F\")))]\n+\t  (mult:DI\n+\t    (sign_extend:DI (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n+\t    (sign_extend:DI (match_operand:SI 2 \"general_operand\" \"nrmT\")))\n+\t  (match_operand:DI 3 \"immediate_operand\" \"F\")))]\n   \"GET_CODE (operands[3]) == CONST_DOUBLE\n-    && CONST_DOUBLE_HIGH (operands[3]) == (CONST_DOUBLE_LOW (operands[3]) >> 31)\"\n+   && CONST_DOUBLE_HIGH (operands[3]) == (CONST_DOUBLE_LOW (operands[3]) >> 31)\"\n   \"*\n {\n   if (CONST_DOUBLE_HIGH (operands[3]))"}]}