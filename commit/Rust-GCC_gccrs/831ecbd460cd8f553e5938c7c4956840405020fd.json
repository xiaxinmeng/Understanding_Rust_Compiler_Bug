{"sha": "831ecbd460cd8f553e5938c7c4956840405020fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxZWNiZDQ2MGNkOGY1NTNlNTkzOGM3YzQ5NTY4NDA0MDUwMjBmZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-19T18:04:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-19T18:04:23Z"}, "message": "alias.c (rtx_equal_for_memref_p, [...]): Don't assume args are REG.\n\n\t* alias.c (rtx_equal_for_memref_p, case ADDRESSOF): Don't assume\n\targs are REG.\n\t* expr.c (store_constructor): Don't look at MEM_ALIAS_SET unless MEM.\n\t* function.c (assign_parms): Use INTVAL for a CONST_INT.\n\nFrom-SVN: r39139", "tree": {"sha": "e80931f772afec5f17a75f9ec443c9bd0f3019a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80931f772afec5f17a75f9ec443c9bd0f3019a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/831ecbd460cd8f553e5938c7c4956840405020fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831ecbd460cd8f553e5938c7c4956840405020fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831ecbd460cd8f553e5938c7c4956840405020fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831ecbd460cd8f553e5938c7c4956840405020fd/comments", "author": null, "committer": null, "parents": [{"sha": "fa7aa1feb6fde728a03c5275bacde8073d6e50eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7aa1feb6fde728a03c5275bacde8073d6e50eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7aa1feb6fde728a03c5275bacde8073d6e50eb"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "c288232b92f14a0ed0b52e1eaf94ab0968584ca5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=831ecbd460cd8f553e5938c7c4956840405020fd", "patch": "@@ -1,9 +1,17 @@\n+Fri Jan 19 13:02:56 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* alias.c (rtx_equal_for_memref_p, case ADDRESSOF): Don't assume\n+\targs are REG.\n+\t* expr.c (store_constructor): Don't look at MEM_ALIAS_SET unless MEM.\n+\t* function.c (assign_parms): Use INTVAL for a CONST_INT.\n+\n 2001-01-19  Jason Merrill  <jason@redhat.com>\n \n \t* dwarf2out.c (gen_subprogram_die): Don't reuse the in-class decl\n \tfor the abstract instance of an inline function.\n \n-Fri Jan 19 14:31:35 2001  Alexandre Oliva  <aoliva@redhat.com>, J\"orn Rennecke <amylaar@redhat.com>\n+Fri Jan 19 14:31:35 2001  Alexandre Oliva  <aoliva@redhat.com>\n+\t\t\t  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* reload1.c (move2add_note_store): Treat all registers directly or\n \tindirectly derived from a base register as members of the same set\n@@ -19,7 +27,7 @@ Fri Jan 19 09:18:42 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n Thu Jan 18 06:43:04 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n-\t* flow.c (mark_set_1, case PARALLEL): Now case; rework to allow\n+\t* flow.c (mark_set_1, case PARALLEL): New case; rework to allow\n \tentry to be EXPR_LIST.\n \t* rtlanal.c (reg_overlap_mentioned_p): Allow PARALLEL in SET to\n \tbe an EXPR_LIST (but not null, which other code doesn't allow)."}, {"sha": "6e92533a0989bb09543733489332adfe4555adde", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=831ecbd460cd8f553e5938c7c4956840405020fd", "patch": "@@ -1007,8 +1007,8 @@ rtx_equal_for_memref_p (x, y)\n       return 0;\n \n     case ADDRESSOF:\n-      return (REGNO (XEXP (x, 0)) == REGNO (XEXP (y, 0))\n-\t      && XINT (x, 1) == XINT (y, 1));\n+      return (XINT (x, 1) == XINT (y, 1)\n+\t      && rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0)));\n \n     default:\n       break;"}, {"sha": "a78be1b132b4b67beb57931d65d13c3fa72830ff", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=831ecbd460cd8f553e5938c7c4956840405020fd", "patch": "@@ -4785,6 +4785,7 @@ store_constructor (exp, target, align, cleared, size)\n \t      store_constructor_field (target, bitsize, bitpos, mode, value,\n \t\t\t\t       type, align, cleared,\n \t\t\t\t       TYPE_NONALIASED_COMPONENT (type)\n+\t\t\t\t       && GET_CODE (target) == MEM\n \t\t\t\t       ? MEM_ALIAS_SET (target) :\n \t\t\t\t       get_alias_set (elttype));\n "}, {"sha": "22a5a74dea0c4b17717dc917a8a6f7fcbd5740a8", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831ecbd460cd8f553e5938c7c4956840405020fd/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=831ecbd460cd8f553e5938c7c4956840405020fd", "patch": "@@ -4564,7 +4564,7 @@ assign_parms (fndecl)\n \t\t&& GET_CODE (XEXP (XVECEXP (entry_parm, 0, i), 0)) == REG\n \t\t&& (GET_MODE (XEXP (XVECEXP (entry_parm, 0, i), 0))\n \t\t    == passed_mode)\n-\t\t&& XINT (XEXP (XVECEXP (entry_parm, 0, i), 1), 0) == 0)\n+\t\t&& INTVAL (XEXP (XVECEXP (entry_parm, 0, i), 1)) == 0)\n \t      {\n \t\tentry_parm = XEXP (XVECEXP (entry_parm, 0, i), 0);\n \t\tDECL_INCOMING_RTL (parm) = entry_parm;"}]}