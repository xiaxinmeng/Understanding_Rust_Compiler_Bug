{"sha": "2caa0ddfc92ef326520e9e2467297435ecdf99e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhYTBkZGZjOTJlZjMyNjUyMGU5ZTI0NjcyOTc0MzVlY2RmOTllNQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-01-23T03:52:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-01-23T03:52:54Z"}, "message": "pa.md (return_internal): Add a USE of the PIC register to ensure it is restored after each call.\n\n        * pa.md (return_internal): Add a USE of the PIC register to ensure\n        it is restored after each call.\n        (return expander): Corresponding changes.\n\nFrom-SVN: r39193", "tree": {"sha": "b0d0613cf68b8d6029558ad39c21fc1d01dcd1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d0613cf68b8d6029558ad39c21fc1d01dcd1fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2caa0ddfc92ef326520e9e2467297435ecdf99e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2caa0ddfc92ef326520e9e2467297435ecdf99e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2caa0ddfc92ef326520e9e2467297435ecdf99e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2caa0ddfc92ef326520e9e2467297435ecdf99e5/comments", "author": null, "committer": null, "parents": [{"sha": "152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152353171a4a5d3cd21f375f372fcbbfcfaa06e6"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "7ab2abcf79e5e8bd74b57baca2e9ad221e293c03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2caa0ddfc92ef326520e9e2467297435ecdf99e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2caa0ddfc92ef326520e9e2467297435ecdf99e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2caa0ddfc92ef326520e9e2467297435ecdf99e5", "patch": "@@ -1,3 +1,9 @@\n+Mon Jan 22 20:53:47 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.md (return_internal): Add a USE of the PIC register to ensure\n+\tit is restored after each call.\n+\t(return expander): Corresponding changes.\n+\n 2001-01-22  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* rs6000.h (INIT_EXPANDERS): Delete."}, {"sha": "2d71c7f76b13e896a3ec6bdb3527a5d39bfde701", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2caa0ddfc92ef326520e9e2467297435ecdf99e5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2caa0ddfc92ef326520e9e2467297435ecdf99e5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=2caa0ddfc92ef326520e9e2467297435ecdf99e5", "patch": "@@ -5466,6 +5466,8 @@\n \f\n ;; Unconditional and other jump instructions.\n \n+;; This can only be used in a leaf function, so we do\n+;; not need to use the PIC register.\n (define_insn \"return\"\n   [(return)\n    (use (reg:SI 2))\n@@ -5482,11 +5484,16 @@\n \n ;; Use a different pattern for functions which have non-trivial\n ;; epilogues so as not to confuse jump and reorg.\n+;;\n+;; We use the PIC register to ensure it's restored after a\n+;; call in PIC mode.  This can be non-optimal for non-PIC\n+;; code but the real world cost should be unmeasurable.\n (define_insn \"return_internal\"\n   [(return)\n+   (use (match_operand:SI 0 \"register_operand\" \"r\"))\n    (use (reg:SI 2))\n    (const_int 1)]\n-  \"\"\n+  \"true_regnum (operands[0]) == PIC_OFFSET_TABLE_REGNUM\"\n   \"*\n {\n   if (TARGET_PA_20)\n@@ -5521,8 +5528,12 @@\n    emit_jump_insn (gen_return ());\n   else\n     {\n+      rtx x;\n+\n       hppa_expand_epilogue ();\n-      emit_jump_insn (gen_return_internal ());\n+      x = gen_return_internal (gen_rtx_REG (word_mode,\n+\t\t\t\t\t    PIC_OFFSET_TABLE_REGNUM));\n+      emit_jump_insn (x);\n     }\n   DONE;\n }\")"}]}