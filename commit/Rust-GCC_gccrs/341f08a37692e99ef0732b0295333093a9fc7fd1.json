{"sha": "341f08a37692e99ef0732b0295333093a9fc7fd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxZjA4YTM3NjkyZTk5ZWYwNzMyYjAyOTUzMzMwOTNhOWZjN2ZkMQ==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2007-10-10T03:32:43Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2007-10-10T03:32:43Z"}, "message": "re PR rtl-optimization/33669 (Revision 128957 miscompiles 481.wrf)\n\n2007-10-07  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\tPR middle-end/33669\n\t* ra-conflict.c (record_one_conflict_between_regnos, \n\tset_conflicts_for_earlyclobber, global_conflicts): Improved logging.\n\t(global_conflicts): Enhanced incorrect check.\n\nFrom-SVN: r129193", "tree": {"sha": "c81f34fbe275d4e8c68d7eae5d0b05c87d9dd4d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c81f34fbe275d4e8c68d7eae5d0b05c87d9dd4d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341f08a37692e99ef0732b0295333093a9fc7fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341f08a37692e99ef0732b0295333093a9fc7fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341f08a37692e99ef0732b0295333093a9fc7fd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341f08a37692e99ef0732b0295333093a9fc7fd1/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69ccae8140cdd00ad1780ec300757acc4d91fc7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ccae8140cdd00ad1780ec300757acc4d91fc7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ccae8140cdd00ad1780ec300757acc4d91fc7e"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "548053e3721221bd703c9a9177fca05d2290cb45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341f08a37692e99ef0732b0295333093a9fc7fd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341f08a37692e99ef0732b0295333093a9fc7fd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=341f08a37692e99ef0732b0295333093a9fc7fd1", "patch": "@@ -1,3 +1,10 @@\n+2007-10-07  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\tPR middle-end/33669\n+\t* ra-conflict.c (record_one_conflict_between_regnos, \n+\tset_conflicts_for_earlyclobber, global_conflicts): Improved logging.\n+\t(global_conflicts): Enhanced incorrect check.\n+\t\n 2007-10-09  Geoffrey Keating  <geoffk@apple.com>\n \n \t* dwarf2out.c (output_call_frame_info): FDEs are always emitted"}, {"sha": "8f35afde465ece178b6a14cfd1a76c7b32e6c5c2", "filename": "gcc/ra-conflict.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341f08a37692e99ef0732b0295333093a9fc7fd1/gcc%2Fra-conflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341f08a37692e99ef0732b0295333093a9fc7fd1/gcc%2Fra-conflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-conflict.c?ref=341f08a37692e99ef0732b0295333093a9fc7fd1", "patch": "@@ -196,7 +196,7 @@ record_one_conflict_between_regnos (enum machine_mode mode1, int r1,\n   int allocno2 = reg_allocno[r2];\n \n   if (dump_file)\n-    fprintf (dump_file, \"  rocbr adding %d<=>%d\\n\", r1, r2);\n+    fprintf (dump_file, \"    rocbr adding %d<=>%d\\n\", r1, r2);\n \n   if (allocno1 >= 0 && allocno2 >= 0)\n     set_conflict (allocno1, allocno2);\n@@ -401,9 +401,6 @@ set_conflicts_for_earlyclobber (rtx insn)\n \t\t\t\t\t\t    recog_data.operand[use + 1]);\n \t\t}\n \t}\n-\n-  if (dump_file) \n-    fprintf (dump_file, \"  finished early clobber conflicts.\\n\");\n }\n \n \n@@ -983,12 +980,12 @@ global_conflicts (void)\n \t\t\tset_renumbers_live (&renumbers_live, live_subregs, live_subregs_used, \n \t\t\t\t\t    allocnum, renumber);\n \t\t    }\n-\t\t  \n-\t\t  else if (!sparseset_bit_p (allocnos_live, allocnum))\n+\t\t  else if (live_subregs_used[allocnum] > 0\n+\t\t\t   || !sparseset_bit_p (allocnos_live, allocnum))\n \t\t    {\n \t\t      if (dump_file)\n-\t\t\tfprintf (dump_file, \"    dying pseudo\\n\");\n-\t\t      \n+\t\t\tfprintf (dump_file, \"    %sdying pseudo\\n\", \n+\t\t\t\t (live_subregs_used[allocnum] > 0) ? \"partially \": \"\");\n \t\t      /* Resetting the live_subregs_used is\n \t\t\t effectively saying do not use the subregs\n \t\t\t because we are reading the whole pseudo.  */\n@@ -1071,6 +1068,8 @@ global_conflicts (void)\n \t\t FIXME: We should consider either adding a new kind of\n \t\t clobber, or adding a flag to the clobber distinguish\n \t\t these two cases.  */\n+\t      if (dump_file && VEC_length (df_ref_t, clobbers))\n+\t\tfprintf (dump_file, \"  clobber conflicts\\n\");\n \t      for (k = VEC_length (df_ref_t, clobbers) - 1; k >= 0; k--)\n \t\t{\n \t\t  struct df_ref *def = VEC_index (df_ref_t, clobbers, k);\n@@ -1132,6 +1131,8 @@ global_conflicts (void)\n \t      if (GET_CODE (PATTERN (insn)) == PARALLEL && multiple_sets (insn))\n \t\t{ \n \t\t  int j;\n+\t\t  if (dump_file)\n+\t\t    fprintf (dump_file, \"  multiple sets\\n\");\n \t\t  for (j = VEC_length (df_ref_t, dying_regs) - 1; j >= 0; j--)\n \t\t    {\n \t\t      int used_in_output = 0;\n@@ -1166,7 +1167,7 @@ global_conflicts (void)\n \t    }\n \t}\n \n-\t    /* Add the renumbers live to the hard_regs_live for the next few\n+      /* Add the renumbers live to the hard_regs_live for the next few\n \t calls.  All of this gets recomputed at the top of the loop so\n \t there is no harm.  */\n       IOR_HARD_REG_SET (hard_regs_live, renumbers_live);"}]}