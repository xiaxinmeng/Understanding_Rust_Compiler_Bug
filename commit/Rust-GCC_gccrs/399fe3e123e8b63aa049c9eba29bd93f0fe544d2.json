{"sha": "399fe3e123e8b63aa049c9eba29bd93f0fe544d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk5ZmUzZTEyM2U4YjYzYWEwNDljOWViYTI5YmQ5M2YwZmU1NDRkMg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2008-03-04T23:30:47Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2008-03-04T23:30:47Z"}, "message": "re PR target/35222 (EH output contains procedure label without P' selector)\n\n\tPR target/35222\n\t* configure.ac (CONFIG_SJLJ_EXCEPTIONS): Force SJLJ exceptions\n\ton hpux10.\n\t* configure: Rebuilt.\n\nFrom-SVN: r132876", "tree": {"sha": "10bca34846e5b90e8d43be8fd37ad78d0c931db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10bca34846e5b90e8d43be8fd37ad78d0c931db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/399fe3e123e8b63aa049c9eba29bd93f0fe544d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399fe3e123e8b63aa049c9eba29bd93f0fe544d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/399fe3e123e8b63aa049c9eba29bd93f0fe544d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399fe3e123e8b63aa049c9eba29bd93f0fe544d2/comments", "author": null, "committer": null, "parents": [{"sha": "e918a58a835bf5e8c36ffff29d619fa778c2a347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e918a58a835bf5e8c36ffff29d619fa778c2a347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e918a58a835bf5e8c36ffff29d619fa778c2a347"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "2efa4be90713bb70218753130b68d1831c8b819a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399fe3e123e8b63aa049c9eba29bd93f0fe544d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399fe3e123e8b63aa049c9eba29bd93f0fe544d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=399fe3e123e8b63aa049c9eba29bd93f0fe544d2", "patch": "@@ -1,3 +1,10 @@\n+2008-03-04  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/35222\n+\t* configure.ac (CONFIG_SJLJ_EXCEPTIONS): Force SJLJ exceptions\n+\ton hpux10.\n+\t* configure: Rebuilt.\n+\n 2008-03-04  Rafael Espindola  <espindola@google.com>\n \n \t* fold-const.c (tree_simple_nonnegative_warnv_p): New."}, {"sha": "454e71a974dcfc91379498aaf4c98ee749bdaf83", "filename": "gcc/configure", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399fe3e123e8b63aa049c9eba29bd93f0fe544d2/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399fe3e123e8b63aa049c9eba29bd93f0fe544d2/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=399fe3e123e8b63aa049c9eba29bd93f0fe544d2", "patch": "@@ -12200,13 +12200,35 @@ objext='.o'\n # Check whether --enable-sjlj-exceptions or --disable-sjlj-exceptions was given.\n if test \"${enable_sjlj_exceptions+set}\" = set; then\n   enableval=\"$enable_sjlj_exceptions\"\n+  case $target in\n+  *-*-hpux10*)\n+    if test $enableval != yes; then\n+      { echo \"$as_me:$LINENO: WARNING: dwarf2 exceptions not supported, sjlj exceptions forced\" >&5\n+echo \"$as_me: WARNING: dwarf2 exceptions not supported, sjlj exceptions forced\" >&2;}\n+      enableval=yes\n+    fi\n+    ;;\n+esac\n+force_sjlj_exceptions=yes\n+else\n+  case $target in\n+  *-*-hpux10*)\n+    force_sjlj_exceptions=yes\n+    enableval=yes\n+    ;;\n+  *)\n+    force_sjlj_exceptions=no\n+    ;;\n+esac\n+fi;\n+if test $force_sjlj_exceptions = yes; then\n   sjlj=`if test $enableval = yes; then echo 1; else echo 0; fi`\n \n cat >>confdefs.h <<_ACEOF\n #define CONFIG_SJLJ_EXCEPTIONS $sjlj\n _ACEOF\n \n-fi;\n+fi\n \n # For platforms with the unwind ABI which includes an unwind library,\n # libunwind, we can choose to use the system libunwind."}, {"sha": "2b3b4ea8c9c96d2b102c811caada574922997204", "filename": "gcc/configure.ac", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399fe3e123e8b63aa049c9eba29bd93f0fe544d2/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399fe3e123e8b63aa049c9eba29bd93f0fe544d2/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=399fe3e123e8b63aa049c9eba29bd93f0fe544d2", "patch": "@@ -1163,9 +1163,29 @@ AC_SUBST(objext)\n AC_ARG_ENABLE(sjlj-exceptions,\n [  --enable-sjlj-exceptions\n                           arrange to use setjmp/longjmp exception handling],\n-[sjlj=`if test $enableval = yes; then echo 1; else echo 0; fi`\n-AC_DEFINE_UNQUOTED(CONFIG_SJLJ_EXCEPTIONS, $sjlj,\n-  [Define 0/1 to force the choice for exception handling model.])])\n+[case $target in\n+  *-*-hpux10*)\n+    if test $enableval != yes; then\n+      AC_MSG_WARN([dwarf2 exceptions not supported, sjlj exceptions forced])\n+      enableval=yes\n+    fi\n+    ;;\n+esac\n+force_sjlj_exceptions=yes],\n+[case $target in\n+  *-*-hpux10*)\n+    force_sjlj_exceptions=yes\n+    enableval=yes\n+    ;;\n+  *)\n+    force_sjlj_exceptions=no\n+    ;;\n+esac])\n+if test $force_sjlj_exceptions = yes; then\n+  sjlj=`if test $enableval = yes; then echo 1; else echo 0; fi`\n+  AC_DEFINE_UNQUOTED(CONFIG_SJLJ_EXCEPTIONS, $sjlj,\n+    [Define 0/1 to force the choice for exception handling model.])\n+fi\n \n # For platforms with the unwind ABI which includes an unwind library,\n # libunwind, we can choose to use the system libunwind."}]}