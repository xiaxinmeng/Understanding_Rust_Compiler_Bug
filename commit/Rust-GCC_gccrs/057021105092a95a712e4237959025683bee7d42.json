{"sha": "057021105092a95a712e4237959025683bee7d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU3MDIxMTA1MDkyYTk1YTcxMmU0MjM3OTU5MDI1NjgzYmVlN2Q0Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-05-19T14:49:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-05-19T14:49:35Z"}, "message": "S/390 Fix secondary reload issue with store/load relative operands.\n\nWe need a scratch register for loading from or storing to a symbolic\nmemory reference where we cannot use the load/store relative\ninstructions for.  However, the check currently fails to handle\nfloating point modes in GPRs correctly.\n\ngcc/\n\t* config/s390/s390.c (s390_secondary_reload): Fix check for\n          load/store relative.\n\nFrom-SVN: r223368", "tree": {"sha": "084d6a7c2fc2a62838a7266fa9e6d26ca16f3e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/084d6a7c2fc2a62838a7266fa9e6d26ca16f3e10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/057021105092a95a712e4237959025683bee7d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057021105092a95a712e4237959025683bee7d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/057021105092a95a712e4237959025683bee7d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057021105092a95a712e4237959025683bee7d42/comments", "author": null, "committer": null, "parents": [{"sha": "376ee136dd082f25ecd608143e59fb4f24899812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376ee136dd082f25ecd608143e59fb4f24899812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376ee136dd082f25ecd608143e59fb4f24899812"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "8ae08e6dc70d4e1c29dccec49ff9e3347cb931c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/057021105092a95a712e4237959025683bee7d42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/057021105092a95a712e4237959025683bee7d42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=057021105092a95a712e4237959025683bee7d42", "patch": "@@ -1,3 +1,8 @@\n+2015-05-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_secondary_reload): Fix check for\n+\tload/store relative.\n+\n 2015-05-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* recog.h: Increase MAX_RECOG_ALTERNATIVES.  Change type of"}, {"sha": "2c83c00582d6e8f78dd5a288c5daadd703c88533", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/057021105092a95a712e4237959025683bee7d42/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/057021105092a95a712e4237959025683bee7d42/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=057021105092a95a712e4237959025683bee7d42", "patch": "@@ -3141,17 +3141,15 @@ s390_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n \tsri->icode = ((mode == DImode) ? CODE_FOR_reloaddi_larl_odd_addend_z10\n \t\t      : CODE_FOR_reloadsi_larl_odd_addend_z10);\n \n-      /* On z10 we need a scratch register when moving QI, TI or floating\n-\t point mode values from or to a memory location with a SYMBOL_REF\n-\t or if the symref addend of a SI or DI move is not aligned to the\n-\t width of the access.  */\n+      /* Handle all the (mem (symref)) accesses we cannot use the z10\n+\t instructions for.  */\n       if (MEM_P (x)\n \t  && s390_loadrelative_operand_p (XEXP (x, 0), NULL, NULL)\n-\t  && (mode == QImode || mode == TImode || FLOAT_MODE_P (mode)\n-\t      || (!TARGET_ZARCH && mode == DImode)\n-\t      || ((mode == HImode || mode == SImode || mode == DImode)\n-\t\t  && (!s390_check_symref_alignment (XEXP (x, 0),\n-\t\t\t\t\t\t    GET_MODE_SIZE (mode))))))\n+\t  && (mode == QImode\n+\t      || !reg_classes_intersect_p (GENERAL_REGS, rclass)\n+\t      || GET_MODE_SIZE (mode) > UNITS_PER_WORD\n+\t      || !s390_check_symref_alignment (XEXP (x, 0),\n+\t\t\t\t\t       GET_MODE_SIZE (mode))))\n \t{\n #define __SECONDARY_RELOAD_CASE(M,m)\t\t\t\t\t\\\n \t  case M##mode:\t\t\t\t\t\t\t\\"}]}