{"sha": "6e9e35e127fe5d487d5be35dd740da9ec79595ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5ZTM1ZTEyN2ZlNWQ0ODdkNWJlMzVkZDc0MGRhOWVjNzk1OTVmZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T11:55:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T11:55:04Z"}, "message": "[multiple changes]\n\n2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* ghost.adb (Mark_Ghost_Clause): New routine.\n\t(Prune_Node): Do not prune compilation unit nodes.\n\t(Remove_Ignored_Ghost_Code): Prune the compilation unit node directly.\n\tThis does not touch the node itself, but does prune all its fields.\n\t* ghost.ads (Mark_Ghost_Clause): New routine.\n\t* sem_ch8.adb (Analyze_Use_Package): Emit an error when a use\n\tpackage clause mentions Ghost and non-Ghost packages. Mark a\n\tuse package clause as Ghost when it mentions a Ghost package.\n\t(Analyze_Use_Type): Emit an error when a use type clause mentions\n\tGhost and non-Ghost types. Mark a use type clause as Ghost when\n\tit mentions a Ghost type.\n\t* sem_ch10.adb (Analyze_With_Clause): Mark a with clause as\n\tGhost when it withs a Ghost unit.\n\n2017-01-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): If a function call\n\treturns a limited view of a type and at the point of the call the\n\tfunction is not declared in the extended main unit then replace\n\tit with the non-limited view, which must be available. If the\n\tcalled function is in the extended main unit then no action is\n\tneeded since the back-end handles this case.\n\n2017-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch7.adb (Contains_Subp_Or_Const_Refs): Rename into...\n\t(Contains_Subprograms_Refs): ...this.  Adjust comment\n\tfor constants.\t(Is_Subp_Or_Const_Ref): Rename into...\n\t(Is_Subprogram_Ref): ...this.\n\t(Has_Referencer): Rename Has_Non_Subp_Const_Referencer variable into\n\tHas_Non_Subprograms_Referencer and adjust comment.  Remove\n\tincorrect shortcut for package declarations and bodies.\n\n2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Complete_Private_Subtype): If the scope of the\n\tbase type differs from that of the completion and the private\n\tsubtype is an itype (created for a constraint on an access\n\ttype e.g.), set Delayed_Freeze on both to prevent out-of-scope\n\tanomalies in gigi.\n\n2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n\tWhen inheriting the SPARK_Mode of a prior expression function,\n\tlook at the properly resolved entity rather than the initial\n\tcandidate which may denote a homonym.\n\n2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Rewrite_Assertion_Kind): If the name is\n\tPrecondition or Postcondition, and the context is pragma\n\tCheck_Policy, indicate that this Pre-Ada2012 usage is deprecated\n\tand suggest the standard names Assertion_Policy /Pre /Post\n\tinstead.\n\nFrom-SVN: r244704", "tree": {"sha": "da102fe9f9156f672b115c146a4812824f6a4ba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da102fe9f9156f672b115c146a4812824f6a4ba3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e9e35e127fe5d487d5be35dd740da9ec79595ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9e35e127fe5d487d5be35dd740da9ec79595ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9e35e127fe5d487d5be35dd740da9ec79595ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9e35e127fe5d487d5be35dd740da9ec79595ff/comments", "author": null, "committer": null, "parents": [{"sha": "7124d1a50ed62e7ef6703d01d8fd122a50e27ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7124d1a50ed62e7ef6703d01d8fd122a50e27ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7124d1a50ed62e7ef6703d01d8fd122a50e27ccc"}], "stats": {"total": 341, "additions": 275, "deletions": 66}, "files": [{"sha": "4db5a7d96e518ccb976763f2e2b4f774ee305275", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -1,3 +1,61 @@\n+2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* ghost.adb (Mark_Ghost_Clause): New routine.\n+\t(Prune_Node): Do not prune compilation unit nodes.\n+\t(Remove_Ignored_Ghost_Code): Prune the compilation unit node directly.\n+\tThis does not touch the node itself, but does prune all its fields.\n+\t* ghost.ads (Mark_Ghost_Clause): New routine.\n+\t* sem_ch8.adb (Analyze_Use_Package): Emit an error when a use\n+\tpackage clause mentions Ghost and non-Ghost packages. Mark a\n+\tuse package clause as Ghost when it mentions a Ghost package.\n+\t(Analyze_Use_Type): Emit an error when a use type clause mentions\n+\tGhost and non-Ghost types. Mark a use type clause as Ghost when\n+\tit mentions a Ghost type.\n+\t* sem_ch10.adb (Analyze_With_Clause): Mark a with clause as\n+\tGhost when it withs a Ghost unit.\n+\n+2017-01-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): If a function call\n+\treturns a limited view of a type and at the point of the call the\n+\tfunction is not declared in the extended main unit then replace\n+\tit with the non-limited view, which must be available. If the\n+\tcalled function is in the extended main unit then no action is\n+\tneeded since the back-end handles this case.\n+\n+2017-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch7.adb (Contains_Subp_Or_Const_Refs): Rename into...\n+\t(Contains_Subprograms_Refs): ...this.  Adjust comment\n+\tfor constants.\t(Is_Subp_Or_Const_Ref): Rename into...\n+\t(Is_Subprogram_Ref): ...this.\n+\t(Has_Referencer): Rename Has_Non_Subp_Const_Referencer variable into\n+\tHas_Non_Subprograms_Referencer and adjust comment.  Remove\n+\tincorrect shortcut for package declarations and bodies.\n+\n+2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Complete_Private_Subtype): If the scope of the\n+\tbase type differs from that of the completion and the private\n+\tsubtype is an itype (created for a constraint on an access\n+\ttype e.g.), set Delayed_Freeze on both to prevent out-of-scope\n+\tanomalies in gigi.\n+\n+2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n+\tWhen inheriting the SPARK_Mode of a prior expression function,\n+\tlook at the properly resolved entity rather than the initial\n+\tcandidate which may denote a homonym.\n+\n+2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Rewrite_Assertion_Kind): If the name is\n+\tPrecondition or Postcondition, and the context is pragma\n+\tCheck_Policy, indicate that this Pre-Ada2012 usage is deprecated\n+\tand suggest the standard names Assertion_Policy /Pre /Post\n+\tinstead.\n+\n 2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch10.adb, sem_cat.adb: Minor reformatting."}, {"sha": "f40e8ea55f4d048b59d44be45112c144345c6beb", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -1429,6 +1429,34 @@ package body Ghost is\n       end if;\n    end Mark_Ghost_Declaration_Or_Body;\n \n+   -----------------------\n+   -- Mark_Ghost_Clause --\n+   -----------------------\n+\n+   procedure Mark_Ghost_Clause (N : Node_Id) is\n+      Nam : Node_Id := Empty;\n+\n+   begin\n+      if Nkind (N) = N_Use_Package_Clause then\n+         Nam := First (Names (N));\n+\n+      elsif Nkind (N) = N_Use_Type_Clause then\n+         Nam := First (Subtype_Marks (N));\n+\n+      elsif Nkind (N) = N_With_Clause then\n+         Nam := Name (N);\n+      end if;\n+\n+      if Present (Nam)\n+        and then Is_Entity_Name (Nam)\n+        and then Present (Entity (Nam))\n+        and then Is_Ignored_Ghost_Entity (Entity (Nam))\n+      then\n+         Set_Is_Ignored_Ghost_Node (N);\n+         Propagate_Ignored_Ghost_Code (N);\n+      end if;\n+   end Mark_Ghost_Clause;\n+\n    -----------------------\n    -- Mark_Ghost_Pragma --\n    -----------------------\n@@ -1574,10 +1602,17 @@ package body Ghost is\n             Id : Entity_Id;\n \n          begin\n+            --  Do not prune compilation unit nodes because many mechanisms\n+            --  depend on their presence. Note that context items must still\n+            --  be processed.\n+\n+            if Nkind (N) = N_Compilation_Unit then\n+               return OK;\n+\n             --  The node is either declared as ignored Ghost or is a byproduct\n             --  of expansion. Destroy it and stop the traversal on this branch.\n \n-            if Is_Ignored_Ghost_Node (N) then\n+            elsif Is_Ignored_Ghost_Node (N) then\n                Prune (N);\n                return Skip;\n \n@@ -1628,7 +1663,7 @@ package body Ghost is\n \n    begin\n       for Index in Ignored_Ghost_Units.First .. Ignored_Ghost_Units.Last loop\n-         Prune_Tree (Unit (Ignored_Ghost_Units.Table (Index)));\n+         Prune_Tree (Ignored_Ghost_Units.Table (Index));\n       end loop;\n    end Remove_Ignored_Ghost_Code;\n "}, {"sha": "1e57183322afc8f05c7c05ce7ff1921340deeb82", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -183,6 +183,11 @@ package Ghost is\n    --  prior to processing the procedure call. This routine starts a Ghost\n    --  region and must be used in conjunction with Restore_Ghost_Mode.\n \n+   procedure Mark_Ghost_Clause (N : Node_Id);\n+   --  Mark use package, use type, or with clause N as Ghost when:\n+   --\n+   --    * The clause mentions a Ghost entity\n+\n    procedure Mark_Ghost_Pragma\n      (N  : Node_Id;\n       Id : Entity_Id);"}, {"sha": "f168f537449358da25ead028c88ecf78fc67105f", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -34,6 +34,7 @@ with Elists;    use Elists;\n with Fname;     use Fname;\n with Fname.UF;  use Fname.UF;\n with Freeze;    use Freeze;\n+with Ghost;     use Ghost;\n with Impunit;   use Impunit;\n with Inline;    use Inline;\n with Lib;       use Lib;\n@@ -2826,6 +2827,8 @@ package body Sem_Ch10 is\n                Set_Fatal_Error (Current_Sem_Unit, Error_Ignored);\n             end if;\n       end case;\n+\n+      Mark_Ghost_Clause (N);\n    end Analyze_With_Clause;\n \n    ------------------------------"}, {"sha": "7ee02bc1f7e52a81bf9c1ec82c75b5a47808dfc8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -11929,12 +11929,22 @@ package body Sem_Ch3 is\n       --  already frozen. We skip this processing if the type is an anonymous\n       --  subtype of a record component, or is the corresponding record of a\n       --  protected type, since these are processed when the enclosing type\n-      --  is frozen.\n+      --  is frozen. If the parent type is declared in a nested package then\n+      --  the freezing of the private and full views also happens later.\n \n       if not Is_Type (Scope (Full)) then\n-         Set_Has_Delayed_Freeze (Full,\n-           Has_Delayed_Freeze (Full_Base)\n-             and then (not Is_Frozen (Full_Base)));\n+         if Is_Itype (Priv)\n+           and then In_Same_Source_Unit (Full, Full_Base)\n+           and then Scope (Full_Base) /= Scope (Full)\n+         then\n+            Set_Has_Delayed_Freeze (Full);\n+            Set_Has_Delayed_Freeze (Priv);\n+\n+         else\n+            Set_Has_Delayed_Freeze (Full,\n+              Has_Delayed_Freeze (Full_Base)\n+                and then (not Is_Frozen (Full_Base)));\n+         end if;\n       end if;\n \n       Set_Freeze_Node (Full, Empty);"}, {"sha": "05631b307ac399c3abc24d4d20111f2b8a827c42", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -3843,12 +3843,12 @@ package body Sem_Ch6 is\n       --    end P;                                      --    mode is ON\n \n       elsif not Comes_From_Source (N)\n-        and then Present (Prev_Id)\n-        and then Is_Expression_Function (Prev_Id)\n+        and then Present (Spec_Id)\n+        and then Is_Expression_Function (Spec_Id)\n       then\n-         Set_SPARK_Pragma (Body_Id, SPARK_Pragma (Prev_Id));\n+         Set_SPARK_Pragma (Body_Id, SPARK_Pragma (Spec_Id));\n          Set_SPARK_Pragma_Inherited\n-           (Body_Id, SPARK_Pragma_Inherited (Prev_Id));\n+           (Body_Id, SPARK_Pragma_Inherited (Spec_Id));\n \n       --  Set the SPARK_Mode from the current context (may be overwritten later\n       --  with explicit pragma). Exclude the case where the SPARK_Mode appears"}, {"sha": "c400fa80fff3140c4e1045a384178d8869f03ab7", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -214,9 +214,9 @@ package body Sem_Ch7 is\n       --------------------------\n \n       procedure Hide_Public_Entities (Decls : List_Id) is\n-         function Contains_Subp_Or_Const_Refs (N : Node_Id) return Boolean;\n+         function Contains_Subprograms_Refs (N : Node_Id) return Boolean;\n          --  Subsidiary to routine Has_Referencer. Determine whether a node\n-         --  contains a reference to a subprogram or a non-static constant.\n+         --  contains a reference to a subprogram.\n          --  WARNING: this is a very expensive routine as it performs a full\n          --  tree traversal.\n \n@@ -229,23 +229,21 @@ package body Sem_Ch7 is\n          --  in the range Last (Decls) .. Referencer are hidden from external\n          --  visibility.\n \n-         ---------------------------------\n-         -- Contains_Subp_Or_Const_Refs --\n-         ---------------------------------\n+         -------------------------------\n+         -- Contains_Subprograms_Refs --\n+         -------------------------------\n \n-         function Contains_Subp_Or_Const_Refs (N : Node_Id) return Boolean is\n+         function Contains_Subprograms_Refs (N : Node_Id) return Boolean is\n             Reference_Seen : Boolean := False;\n \n-            function Is_Subp_Or_Const_Ref\n-              (N : Node_Id) return Traverse_Result;\n-            --  Determine whether a node denotes a reference to a subprogram or\n-            --  a non-static constant.\n+            function Is_Subprogram_Ref (N : Node_Id) return Traverse_Result;\n+            --  Determine whether a node denotes a reference to a subprogram\n \n-            --------------------------\n-            -- Is_Subp_Or_Const_Ref --\n-            --------------------------\n+            -----------------------\n+            -- Is_Subprogram_Ref --\n+            -----------------------\n \n-            function Is_Subp_Or_Const_Ref\n+            function Is_Subprogram_Ref\n               (N : Node_Id) return Traverse_Result\n             is\n                Val : Node_Id;\n@@ -271,7 +269,8 @@ package body Sem_Ch7 is\n                   Reference_Seen := True;\n                   return Abandon;\n \n-               --  Detect the use of a non-static constant\n+               --  Constants can be substituted by their value in gigi, which\n+               --  may contain a reference, so be conservative for them.\n \n                elsif Is_Entity_Name (N)\n                  and then Present (Entity (N))\n@@ -288,18 +287,18 @@ package body Sem_Ch7 is\n                end if;\n \n                return OK;\n-            end Is_Subp_Or_Const_Ref;\n+            end Is_Subprogram_Ref;\n \n-            procedure Find_Subp_Or_Const_Ref is\n-              new Traverse_Proc (Is_Subp_Or_Const_Ref);\n+            procedure Find_Subprograms_Ref is\n+              new Traverse_Proc (Is_Subprogram_Ref);\n \n-         --  Start of processing for Contains_Subp_Or_Const_Refs\n+         --  Start of processing for Contains_Subprograms_Refs\n \n          begin\n-            Find_Subp_Or_Const_Ref (N);\n+            Find_Subprograms_Ref (N);\n \n             return Reference_Seen;\n-         end Contains_Subp_Or_Const_Refs;\n+         end Contains_Subprograms_Refs;\n \n          --------------------\n          -- Has_Referencer --\n@@ -313,9 +312,11 @@ package body Sem_Ch7 is\n             Decl_Id : Entity_Id;\n             Spec    : Node_Id;\n \n-            Has_Non_Subp_Const_Referencer : Boolean := False;\n-            --  Flag set for inlined subprogram bodies that do not contain\n-            --  references to other subprograms or non-static constants.\n+            Has_Non_Subprograms_Referencer : Boolean := False;\n+            --  Flag set if a subprogram body was detected as a referencer but\n+            --  does not contain references to other subprograms. In this case,\n+            --  if we still are top level, we do not return True immediately,\n+            --  but keep hiding subprograms from external visibility.\n \n          begin\n             if No (Decls) then\n@@ -336,9 +337,7 @@ package body Sem_Ch7 is\n \n                --  Package declaration\n \n-               elsif Nkind (Decl) = N_Package_Declaration\n-                 and then not Has_Non_Subp_Const_Referencer\n-               then\n+               elsif Nkind (Decl) = N_Package_Declaration then\n                   Spec := Specification (Decl);\n \n                   --  Inspect the declarations of a non-generic package to try\n@@ -375,9 +374,7 @@ package body Sem_Ch7 is\n                   --  Inspect the declarations of a non-generic package body to\n                   --  try and hide more entities from external visibility.\n \n-                  elsif not Has_Non_Subp_Const_Referencer\n-                    and then Has_Referencer (Declarations (Decl))\n-                  then\n+                  elsif Has_Referencer (Declarations (Decl)) then\n                      return True;\n                   end if;\n \n@@ -400,12 +397,12 @@ package body Sem_Ch7 is\n                      then\n                         --  Inspect the statements of the subprogram body\n                         --  to determine whether the body references other\n-                        --  subprograms and/or non-static constants.\n+                        --  subprograms.\n \n                         if Top_Level\n-                          and then not Contains_Subp_Or_Const_Refs (Decl)\n+                          and then not Contains_Subprograms_Refs (Decl)\n                         then\n-                           Has_Non_Subp_Const_Referencer := True;\n+                           Has_Non_Subprograms_Referencer := True;\n                         else\n                            return True;\n                         end if;\n@@ -429,9 +426,9 @@ package body Sem_Ch7 is\n \n                      if Has_Pragma_Inline (Decl_Id) then\n                         if Top_Level\n-                          and then not Contains_Subp_Or_Const_Refs (Decl)\n+                          and then not Contains_Subprograms_Refs (Decl)\n                         then\n-                           Has_Non_Subp_Const_Referencer := True;\n+                           Has_Non_Subprograms_Referencer := True;\n                         else\n                            return True;\n                         end if;\n@@ -444,6 +441,9 @@ package body Sem_Ch7 is\n                --  if they are not followed by a construct which can reference\n                --  and export them. The Is_Public flag is reset on top level\n                --  entities only as anything nested is local to its context.\n+               --  Likewise for subprograms, but we work harder for them as\n+               --  their visibility can have a significant impact on inlining\n+               --  decisions in the back end.\n \n                elsif Nkind_In (Decl, N_Exception_Declaration,\n                                      N_Object_Declaration,\n@@ -458,7 +458,7 @@ package body Sem_Ch7 is\n                     and then not Is_Exported (Decl_Id)\n                     and then No (Interface_Name (Decl_Id))\n                     and then\n-                      (not Has_Non_Subp_Const_Referencer\n+                      (not Has_Non_Subprograms_Referencer\n                         or else Nkind (Decl) = N_Subprogram_Declaration)\n                   then\n                      Set_Is_Public (Decl_Id, False);\n@@ -468,7 +468,7 @@ package body Sem_Ch7 is\n                Prev (Decl);\n             end loop;\n \n-            return Has_Non_Subp_Const_Referencer;\n+            return Has_Non_Subprograms_Referencer;\n          end Has_Referencer;\n \n          --  Local variables"}, {"sha": "d8794920f8b2ee495ae746981175662716149fea", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 74, "deletions": 9, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -3616,10 +3616,10 @@ package body Sem_Ch8 is\n    --  within the package itself, ignore it.\n \n    procedure Analyze_Use_Package (N : Node_Id) is\n-      Pack_Name : Node_Id;\n+      Ghost_Id  : Entity_Id := Empty;\n+      Living_Id : Entity_Id := Empty;\n       Pack      : Entity_Id;\n-\n-   --  Start of processing for Analyze_Use_Package\n+      Pack_Name : Node_Id;\n \n    begin\n       Check_SPARK_05_Restriction (\"use clause is not allowed\", N);\n@@ -3664,17 +3664,17 @@ package body Sem_Ch8 is\n \n                if Entity (Pref) = Standard_Standard then\n                   Error_Msg_N\n-                   (\"predefined package Standard cannot appear\"\n-                     & \" in a context clause\", Pref);\n+                    (\"predefined package Standard cannot appear in a context \"\n+                     & \"clause\", Pref);\n                end if;\n             end;\n          end if;\n \n          Next (Pack_Name);\n       end loop;\n \n-      --  Loop through package names to mark all entities as potentially\n-      --  use visible.\n+      --  Loop through package names to mark all entities as potentially use\n+      --  visible.\n \n       Pack_Name := First (Names (N));\n       while Present (Pack_Name) loop\n@@ -3710,6 +3710,21 @@ package body Sem_Ch8 is\n                if Applicable_Use (Pack_Name) then\n                   Use_One_Package (Pack, N);\n                end if;\n+\n+               --  Capture the first Ghost package and the first living package\n+\n+               if Is_Entity_Name (Pack_Name) then\n+                  Pack := Entity (Pack_Name);\n+\n+                  if Is_Ghost_Entity (Pack) then\n+                     if No (Ghost_Id) then\n+                        Ghost_Id := Pack;\n+                     end if;\n+\n+                  elsif No (Living_Id) then\n+                     Living_Id := Pack;\n+                  end if;\n+               end if;\n             end if;\n \n          --  Report error because name denotes something other than a package\n@@ -3720,15 +3735,36 @@ package body Sem_Ch8 is\n \n          Next (Pack_Name);\n       end loop;\n+\n+      --  Detect a mixture of Ghost packages and living packages within the\n+      --  same use package clause. Ideally one would split a use package clause\n+      --  with multiple names into multiple use package clauses with a single\n+      --  name, however clients of the front end would have to adapt to this\n+      --  change.\n+\n+      if Present (Ghost_Id) and then Present (Living_Id) then\n+         Error_Msg_N\n+           (\"use clause cannot mention ghost and non-ghost ghost units\", N);\n+\n+         Error_Msg_Sloc := Sloc (Ghost_Id);\n+         Error_Msg_NE (\"\\& # declared as ghost\", N, Ghost_Id);\n+\n+         Error_Msg_Sloc := Sloc (Living_Id);\n+         Error_Msg_NE (\"\\& # declared as non-ghost\", N, Living_Id);\n+      end if;\n+\n+      Mark_Ghost_Clause (N);\n    end Analyze_Use_Package;\n \n    ----------------------\n    -- Analyze_Use_Type --\n    ----------------------\n \n    procedure Analyze_Use_Type (N : Node_Id) is\n-      E  : Entity_Id;\n-      Id : Node_Id;\n+      E         : Entity_Id;\n+      Ghost_Id  : Entity_Id := Empty;\n+      Id        : Node_Id;\n+      Living_Id : Entity_Id := Empty;\n \n    begin\n       Set_Hidden_By_Use_Clause (N, No_Elist);\n@@ -3834,8 +3870,37 @@ package body Sem_Ch8 is\n             end if;\n          end if;\n \n+         --  Capture the first Ghost type and the first living type\n+\n+         if Is_Ghost_Entity (E) then\n+            if No (Ghost_Id) then\n+               Ghost_Id := E;\n+            end if;\n+\n+         elsif No (Living_Id) then\n+            Living_Id := E;\n+         end if;\n+\n          Next (Id);\n       end loop;\n+\n+      --  Detect a mixture of Ghost types and living types within the same use\n+      --  type clause. Ideally one would split a use type clause with multiple\n+      --  marks into multiple use type clauses with a single mark, however\n+      --  clients of the front end will have to adapt to this change.\n+\n+      if Present (Ghost_Id) and then Present (Living_Id) then\n+         Error_Msg_N\n+           (\"use clause cannot mention ghost and non-ghost ghost types\", N);\n+\n+         Error_Msg_Sloc := Sloc (Ghost_Id);\n+         Error_Msg_NE (\"\\& # declared as ghost\", N, Ghost_Id);\n+\n+         Error_Msg_Sloc := Sloc (Living_Id);\n+         Error_Msg_NE (\"\\& # declared as non-ghost\", N, Living_Id);\n+      end if;\n+\n+      Mark_Ghost_Clause (N);\n    end Analyze_Use_Type;\n \n    --------------------"}, {"sha": "f1520d54d9e35b4d3d725a0b516fbaaed1990e67", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -282,11 +282,16 @@ package body Sem_Prag is\n    --  function, this routine finds the corresponding state and sets the entity\n    --  of N to that of the state.\n \n-   procedure Rewrite_Assertion_Kind (N : Node_Id);\n+   procedure Rewrite_Assertion_Kind\n+     (N           : Node_Id;\n+      From_Policy : Boolean := False);\n    --  If N is Pre'Class, Post'Class, Invariant'Class, or Type_Invariant'Class,\n    --  then it is rewritten as an identifier with the corresponding special\n    --  name _Pre, _Post, _Invariant, or _Type_Invariant. Used by pragmas Check\n-   --  and Check_Policy.\n+   --  and Check_Policy. If the names are Precondition or Postcondition, this\n+   --  combination is deprecated in favor of Assertion_Policy and Ada2012\n+   --  Aspect names. The parameter From_Policy indicates that the pragma\n+   --  is the old non-standard Check_Policy and not a rewritten pragma.\n \n    procedure Set_Elab_Unit_Name (N : Node_Id; With_Item : Node_Id);\n    --  Place semantic information on the argument of an Elaborate/Elaborate_All\n@@ -12807,7 +12812,8 @@ package body Sem_Prag is\n                Check_Arg_Count (2);\n                Check_Optional_Identifier (Arg1, Name_Name);\n                Kind := Get_Pragma_Arg (Arg1);\n-               Rewrite_Assertion_Kind (Kind);\n+               Rewrite_Assertion_Kind (Kind,\n+                 From_Policy => Comes_From_Source (N));\n                Check_Arg_Is_Identifier (Arg1);\n \n                --  Check forbidden check kind\n@@ -29448,10 +29454,14 @@ package body Sem_Prag is\n    -- Rewrite_Assertion_Kind --\n    ----------------------------\n \n-   procedure Rewrite_Assertion_Kind (N : Node_Id) is\n+   procedure Rewrite_Assertion_Kind\n+     (N           : Node_Id;\n+      From_Policy : Boolean := False)\n+   is\n       Nam : Name_Id;\n \n    begin\n+      Nam := No_Name;\n       if Nkind (N) = N_Attribute_Reference\n         and then Attribute_Name (N) = Name_Class\n         and then Nkind (Prefix (N)) = N_Identifier\n@@ -29473,6 +29483,25 @@ package body Sem_Prag is\n                return;\n          end case;\n \n+      --  Recommend standard use of aspect names Pre/Post\n+\n+      elsif Nkind (N) = N_Identifier\n+        and then From_Policy\n+        and then Serious_Errors_Detected = 0\n+        and then not ASIS_Mode\n+      then\n+         if Chars (N) = Name_Precondition\n+          or else Chars (N) = Name_Postcondition\n+         then\n+            Error_Msg_N (\" Check_Policy is a non-standard pragma??\", N);\n+            Error_Msg_N\n+              (\" \\use Assertion_Policy and aspect names Pre/Post\"\n+                & \" for Ada2012 conformance?\", N);\n+         end if;\n+         return;\n+      end if;\n+\n+      if Nam /= No_Name then\n          Rewrite (N, Make_Identifier (Sloc (N), Chars => Nam));\n       end if;\n    end Rewrite_Assertion_Kind;"}, {"sha": "1b91211ea04751c73c4e618b050e13e8b3e1aea9", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9e35e127fe5d487d5be35dd740da9ec79595ff/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6e9e35e127fe5d487d5be35dd740da9ec79595ff", "patch": "@@ -6061,12 +6061,16 @@ package body Sem_Res is\n          end;\n \n       else\n-         --  If the function returns the limited view of type, the call must\n-         --  appear in a context in which the non-limited view is available.\n-         --  As is done in Try_Object_Operation, use the available view to\n-         --  prevent back-end confusion.\n-\n-         if From_Limited_With (Etype (Nam)) then\n+         --  If the called function is not declared in the main unit and it\n+         --  returns the limited view of type then use the available view (as\n+         --  is done in Try_Object_Operation) to prevent back-end confusion;\n+         --  the call must appear in a context where the nonlimited view is\n+         --  available. If the called function is in the extended main unit\n+         --  then no action is needed, because the back end handles this case.\n+\n+         if not In_Extended_Main_Code_Unit (Nam)\n+           and then From_Limited_With (Etype (Nam))\n+         then\n             Set_Etype (Nam, Available_View (Etype (Nam)));\n          end if;\n "}]}