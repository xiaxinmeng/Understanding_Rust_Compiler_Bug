{"sha": "5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "node_id": "C_kwDOANBUbNoAKDUwMTNjM2JiM2VhZDljMjdhZGI5MDE1MjExNWNhMWQ2MDZjYmYyZGM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-15T00:17:49Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-15T00:17:49Z"}, "message": "Daily bump.", "tree": {"sha": "62940c2c05856fc012580281a243a764c53e3e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62940c2c05856fc012580281a243a764c53e3e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/comments", "author": null, "committer": null, "parents": [{"sha": "523e8716a452978a7972478d8cdbbe0d1a794a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523e8716a452978a7972478d8cdbbe0d1a794a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/523e8716a452978a7972478d8cdbbe0d1a794a74"}], "stats": {"total": 483, "additions": 482, "deletions": 1}, "files": [{"sha": "87e7dfb2dc8169279cb5a0ea318af92473034265", "filename": "gcc/ChangeLog", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,115 @@\n+2023-01-14  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa-protos.h (order_regs_for_local_alloc):\n+\tRename to xtensa_adjust_reg_alloc_order.\n+\t* config/xtensa/xtensa.cc (xtensa_adjust_reg_alloc_order):\n+\tDitto.  And also remove code to reorder register numbers for\n+\tleaf functions, rename the tables, and adjust the allocation\n+\torder for the call0 ABI to use register A0 more.\n+\t(xtensa_leaf_regs): Remove.\n+\t* config/xtensa/xtensa.h (REG_ALLOC_ORDER): Cosmetics.\n+\t(order_regs_for_local_alloc): Rename as the above.\n+\t(LEAF_REGISTERS, LEAF_REG_REMAP, leaf_function): Remove.\n+\n+2023-01-14  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (aarch64_vec_duplicate_vq<mode>_le):\n+\tChange to define_insn_and_split to fold ldr+dup to ld1rq.\n+\t* config/aarch64/predicates.md (aarch64_sve_dup_ld1rq_operand): New.\n+\n+2023-01-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* hash-table.h (is_deleted): Precheck !is_empty.\n+\t(mark_deleted): Postcheck !is_empty.\n+\t(copy constructor): Test is_empty before is_deleted.\n+\n+2023-01-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/40457\n+\t* config/arm/arm.md (movmisaligndi): Prefer aligned SImode\n+\tmoves.\n+\n+2023-01-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/108274\n+\t* function.cc (thread_prologue_and_epilogue_insns): Also update the\n+\tDF information for calls in a few more cases.\n+\n+2023-01-13  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa-linux.h (TARGET_SYNC_LIBCALL): Delete define.\n+\t* config/pa/pa.cc (pa_init_libfuncs): Use MAX_SYNC_LIBFUNC_SIZE\n+\tdefine.\n+\t* config/pa/pa.h (TARGET_SYNC_LIBCALLS): Use flag_sync_libcalls.\n+\t(MAX_SYNC_LIBFUNC_SIZE): Define.\n+\t(TARGET_CPU_CPP_BUILTINS): Define __SOFTFP__ when soft float is\n+\tenabled.\n+\t* config/pa/pa.md (atomic_storeqi): Emit __atomic_exchange_1\n+\tlibcall when sync libcalls are disabled.\n+\t(atomic_storehi, atomic_storesi, atomic_storedi): Likewise.\n+\t(atomic_loaddi): Emit __atomic_load_8 libcall when sync libcalls\n+\tare disabled on 32-bit target.\n+\t* config/pa/pa.opt (matomic-libcalls): New option.\n+\t* doc/invoke.texi (HPPA Options): Update.\n+\n+2023-01-13  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/108117\n+\tPR rtl-optimization/108132\n+\t* sched-deps.cc (deps_analyze_insn): Do not schedule across\n+\tcalls before reload.\n+\n+2023-01-13  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* common/config/arm/arm-common.cc (arm_canon_arch_option_1): Ignore cde\n+\toptions for -mlibarch.\n+\t* config/arm/arm-cpus.in (begin cpu cortex-m55): Add cde options.\n+\t* doc/invoke.texi (CDE): Document options for Cortex-M55 CPU.\n+\n+2023-01-13  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* attribs.cc (strict_flex_array_level_of): Move this function to ...\n+\t* attribs.h (strict_flex_array_level_of): Remove the declaration.\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_array_ref):\n+\treplace the referece to strict_flex_array_level_of with\n+\tDECL_NOT_FLEXARRAY.\n+\t* tree.cc (component_ref_size): Likewise.\n+\n+2023-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/arm/linux-eabi.h (ENDFILE_SPEC): Don't add\n+\tcrtfastmath.o for -shared.\n+\t* config/arm/unknown-elf.h (STARTFILE_SPEC): Likewise.\n+\n+2023-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/aarch64/aarch64-elf-raw.h (ENDFILE_SPEC): Don't add\n+\tcrtfastmath.o for -shared.\n+\t* config/aarch64/aarch64-freebsd.h (GNU_USER_TARGET_MATHFILE_SPEC):\n+\tLikewise.\n+\t* config/aarch64/aarch64-linux.h (GNU_USER_TARGET_MATHFILE_SPEC):\n+\tLikewise.\n+\n+2023-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_dwarf_frame_reg_mode): New\n+\tfunction.\n+\t(TARGET_DWARF_FRAME_REG_MODE): Define.\n+\n+2023-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/107209\n+\t* config/aarch64/aarch64.cc (aarch64_gimple_fold_builtin): Don't\n+\tupdate EH info on the fly.\n+\n+2023-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108387\n+\t* tree-ssa-sccvn.cc (visit_nary_op): Check for SSA_NAME\n+\tvalue before inserting expression into the tables.\n+\n 2023-01-12  Andrew Pinski  <apinski@marvell.com>\n \t    Roger Sayle  <roger@nextmovesoftware.com>\n "}, {"sha": "dbdecdf7fc79336efaa78a537ed6f5acf90ca9d8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1 +1 @@\n-20230113\n+20230115"}, {"sha": "959464a15e461487bd41454d26ce937e65f6b5db", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,22 @@\n+2023-01-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105273\n+\t* region-model.cc (has_nondefault_case_for_value_p): New.\n+\t(has_nondefault_cases_for_all_enum_values_p): New.\n+\t(region_model::apply_constraints_for_gswitch): Skip\n+\timplicitly-created \"default\" when switching on an enum\n+\tand all enum values have non-default cases.\n+\t(rejected_default_case::dump_to_pp): New.\n+\t* region-model.h (region_model_context::possibly_tainted_p): New\n+\tdecl.\n+\t(class rejected_default_case): New.\n+\t* sm-taint.cc (region_model_context::possibly_tainted_p): New.\n+\t* supergraph.cc (switch_cfg_superedge::dump_label_to_pp): Dump\n+\twhen implicitly_created_default_p.\n+\t(switch_cfg_superedge::implicitly_created_default_p): New.\n+\t* supergraph.h\n+\t(switch_cfg_superedge::implicitly_created_default_p): New decl.\n+\n 2023-01-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108252"}, {"sha": "2e8804ab305c3410a18aa7ba8e745b5e2d04cd1e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,15 @@\n+2023-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108365\n+\t* c-common.h (may_shorten_divmod): New static inline function.\n+\n+2023-01-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.cc (is_float32): New function.\n+\t(is_float64): Likewise.\n+\t(is_float128): Tweak.\n+\t(dump_ada_node) <REAL_TYPE>: Call them to recognize more types.\n+\n 2023-01-12  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/108244"}, {"sha": "0a10d163325be9657f0305b6b12c0c785b716f4a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,13 @@\n+2023-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108365\n+\t* c-typeck.cc (build_binary_op): Use may_shorten_divmod for integral\n+\tdivision or modulo.\n+\n+2023-01-13  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* c-decl.cc (strict_flex_array_level_of): ... here.\n+\n 2023-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/105972"}, {"sha": "5c91d4bc91bfff8dee934c1beb45f0e07fc56a18", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,19 @@\n+2023-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108365\n+\t* typeck.cc (cp_build_binary_op): Use may_shorten_divmod for integral\n+\tdivision or modulo.\n+\n+2023-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108285\n+\t* cvt.cc (cp_convert_and_check): For EXCESS_PRECISION_EXPR\n+\tuse its operand except that for warning purposes use the original\n+\tEXCESS_PRECISION_EXPR.\n+\t* call.cc (convert_like_internal): Only look through\n+\tEXCESS_PRECISION_EXPR when calling cp_convert, not when calling\n+\tcp_convert_and_check.\n+\n 2023-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/105838"}, {"sha": "e399204bfdebac96ad6e62ab42f6ed368486ec33", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,8 @@\n+2023-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-lang.cc (lto_type_for_mode): Sync with\n+\tc_common_type_for_mode.\n+\n 2023-01-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-partition.cc (may_need_named_section_p): Clones with no body"}, {"sha": "c12b37a917aca9b7106af887d89ad147b4fc0a3e", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,15 @@\n+2023-01-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gm2-gcc/m2options.h (M2Options_SetVerbose): Export the\n+\tfunction.\n+\t* gm2-lang.cc: Handle OPT_v, passing it to the compiler.\n+\t* lang-specs.h: Pass -v to cc1gm2.\n+\n+2023-01-13  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* mc-boot-ch/GRTco.c (RTco_select): Add return 0.\n+\t* pge-boot/GRTco.c (RTco_select): Add return 0.\n+\n 2023-01-10  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* Make-lang.in (m2/mc-boot/$(SRC_PREFIX)%.o): Add"}, {"sha": "a57ad0d28cb13d2738919a75eaf1bd78fa46fba5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,117 @@\n+2023-01-14  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/acle/general/pr96463-2.c: Adjust.\n+\n+2023-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108365\n+\t* c-c++-common/pr108365.c: New test.\n+\t* g++.dg/opt/pr108365.C: New test.\n+\t* g++.dg/warn/pr108365.C: New test.\n+\n+2023-01-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/42093\n+\t* gcc.target/arm/pr42093.c: Disable tree-dce.\n+\n+2023-01-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105273\n+\t* gcc.dg/analyzer/switch-enum-1.c: New test.\n+\t* gcc.dg/analyzer/switch-enum-2.c: New test.\n+\t* gcc.dg/analyzer/switch-enum-pr105273-git-vreportf-2.c: New test.\n+\t* gcc.dg/analyzer/switch-enum-taint-1.c: New test.\n+\t* gcc.dg/analyzer/switch-wrong-enum.c: New test.\n+\t* gcc.dg/analyzer/torture/switch-enum-pr105273-doom-p_floor.c: New\n+\ttest.\n+\t* gcc.dg/analyzer/torture/switch-enum-pr105273-doom-p_maputl.c:\n+\tNew test.\n+\t* gcc.dg/analyzer/torture/switch-enum-pr105273-git-vreportf-1.c:\n+\tNew test.\n+\n+2023-01-13  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/108117\n+\tPR rtl-optimization/108132\n+\t* gcc.dg/pr108117.c: New test.\n+\n+2023-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108285\n+\t* g++.dg/warn/pr108285.C: New test.\n+\n+2023-01-13  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2/examples/map/pass/examples-map-pass.exp:\n+\tCall gm2_push_timeout 30 before foreach testcase.\n+\tCall gm2_pop_timeout after the foreach statement.\n+\t* gm2/pimlib/base/run/pass/pimlib-base-run-pass.exp:\n+\tCall gm2_push_timeout 20 before foreach testcase.\n+\tCall gm2_pop_timeout after the foreach statement.\n+\n+2023-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107131\n+\t* gcc.c-torture/execute/pr107131.c: New test.\n+\n+2023-01-13  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp: Add multilib tests for Cortex-M55 CPU.\n+\n+2023-01-13  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* gcc.dg/Warray-bounds-flex-arrays-1.c: Delete the level information\n+\tfrom the message issued by -Wstrict-flex-arrays.\n+\t* gcc.dg/Warray-bounds-flex-arrays-2.c: Likewise.\n+\t* gcc.dg/Warray-bounds-flex-arrays-3.c: Likewise.\n+\t* gcc.dg/Warray-bounds-flex-arrays-4.c: Likewise.\n+\t* gcc.dg/Warray-bounds-flex-arrays-5.c: Likewise.\n+\t* gcc.dg/Warray-bounds-flex-arrays-6.c: Likewise.\n+\t* gcc.dg/Wstrict-flex-arrays-2.c: Likewise.\n+\t* gcc.dg/Wstrict-flex-arrays-3.c: Likewise.\n+\t* gcc.dg/Wstrict-flex-arrays.c: Likewise.\n+\n+2023-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107131\n+\t* gcc.dg/pr107131.c: New test.\n+\n+2023-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/dwarf_reg_size_1.c: New test.\n+\t* gcc.target/aarch64/dwarf_reg_size_2.c: Likewise.\n+\n+2023-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/aarch64/pr107209.c: New test.\n+\n+2023-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108387\n+\t* gcc.dg/pr108387.c: New testcase.\n+\n+2023-01-13  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2/coroutines/pim/run/pass/coroutines-pim-run-pass.exp\n+\t(timeout-dg.exp): Load.\n+\tCall gm2_push_timeout 15.\n+\tCall gm2_pop_timeout at the end.\n+\t* gm2/link/min/pass/link-min-pass.exp: Set path\n+\targument to \"\".\n+\t* gm2/switches/whole-program/pass/run/switches-whole-program-pass-run.exp:\n+\tCall gm2_push_timeout 60.\n+\tCall gm2_pop_timeout at the end.\n+\t* lib/gm2-torture.exp (gm2_previous_timeout): Set to 10 or\n+\tindividual_timeout.\n+\tConfigure dejagnu to timeout for 10 seconds.\n+\t(gm2_push_timeout): New proc.\n+\t(gm2_pop_timeout): New proc.\n+\t* lib/gm2.exp (gm2_previous_timeout): Set to 10 or\n+\tindividual_timeout.\n+\tConfigure dejagnu to timeout for 10 seconds.\n+\t(gm2_push_timeout): New proc.\n+\t(gm2_pop_timeout): New proc.\n+\n 2023-01-12  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* lib/gm2.exp: Use timeout.exp."}, {"sha": "5ae6d309bf594185c8a3359418c8bc43f12e2b3a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,32 @@\n+2023-01-13  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config.host (hppa*64*-*-linux*): Adjust tmake_file to use\n+\tpa/t-pa64-linux.\n+\t(hppa*64*-*-hpux11*): Adjust tmake_file to use pa/t-pa64-hpux\n+\tinstead of pa/t-hpux and pa/t-pa64.\n+\t* config/pa/linux-atomic.c: Define u32 type.\n+\t(ATOMIC_LOAD): Define new macro to implement atomic_load_1,\n+\tatomic_load_2, atomic_load_4 and atomic_load_8.  Update sync\n+\tdefines to use atomic_load calls for type.\n+\t(SYNC_LOCK_LOAD_2): New macro to implement __sync_lock_load_8.\n+\t* config/pa/sync-libfuncs.c: New file.\n+\t* config/pa/t-netbsd (LIB2ADD_ST): Define.\n+\t* config/pa/t-openbsd (LIB2ADD_ST): Define.\n+\t* config/pa/t-pa64-hpux: New file.\n+\t* config/pa/t-pa64-linux: New file.\n+\n+2023-01-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108331\n+\t* config/i386/gthr-win32.h (__gthr_win32_legacy_mutex_t): New\n+\tstruct matching the previous __gthread_mutex_t struct.\n+\t(__GTHREAD_LEGACY_MUTEX_T): Define.\n+\n+2023-01-13  Seija Kijin  <doremylover456@gmail.com>\n+\n+\t* config/arm/lib1funcs.S (clear_cache): Use SVC to conform to\n+\tunified syntax.\n+\n 2023-01-07  LIU Hao  <lh_mouse@126.com>\n \n \tPR middle-end/108300"}, {"sha": "6a0ddd40d865d346f55aed8bb6d22a1d77cb6fe7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5013c3bb3ead9c27adb90152115ca1d606cbf2dc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5013c3bb3ead9c27adb90152115ca1d606cbf2dc", "patch": "@@ -1,3 +1,155 @@\n+2023-01-14  Bj\u00f6rn Sch\u00e4pers  <bjoern@hazardy.de>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_BACKTRACE): Add check for\n+\twindows.h. Add pecoff as FORMAT_FILE.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/libbacktrace/Makefile.am: Regenerate.\n+\t* src/libbacktrace/Makefile.in: Add pecoff.c as FORMAT_FILE.\n+\n+2023-01-14  Bj\u00f6rn Sch\u00e4pers  <bjoern@hazardy.de>\n+\n+\t* include/std/stacktrace (stacktrace_entry::_S_demangle): Use\n+\traw __name if __cxa_demangle could not demangle it.\n+\n+2023-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108409\n+\t* src/c++20/tzdb.cc (current_zone()) [_AIX]: Use TZ environment\n+\tvariable.\n+\n+2023-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdb.cc (TZDB_DISABLED): Disable all code for\n+\tloading tzdb.\n+\t* testsuite/std/time/tzdb/leap_seconds.cc: Require tzdb\n+\teffective target.\n+\t* testsuite/std/time/tzdb_list/1.cc: Likewise.\n+\n+2023-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ZONEINFO_DIR): Replace the\n+\t--with-libstdcxx-zoneinfo-dir configure option with\n+\t--with-libstdcxx-zoneinfo with yes/no/static choices as well as\n+\ta directory.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* doc/xml/manual/configure.xml: Document configure option.\n+\t* doc/html/manual/configure.html: Regenerate.\n+\t* src/c++20/Makefile.am: Generate tzdata.zi.h header.\n+\t* src/c++20/Makefile.in: Regenerate.\n+\t* src/c++20/tzdb.cc (__gnu_cxx::zoneinfo_dir_override): Return a\n+\tnull pointer if no directory is configured.\n+\t(zoneinfo_dir): Replace with ...\n+\t(zoneinfo_file): New function.\n+\t(tzdata_stream): New istream class.\n+\t(remote_version, reload_tzdb): Use tzdata_stream.\n+\t* testsuite/lib/libstdc++.exp (check_effective_target_tzdb):\n+\tCheck new _GLIBCXX_STATIC_TZDATA macro and ignore presence of\n+\ttzdata.zi file in default location.\n+\t* src/c++20/tzdata.zi: New file.\n+\n+2023-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/chrono_io.h (operator<<): Fix syntax errors.\n+\t* testsuite/std/time/month_day/io.cc: New test.\n+\t* testsuite/std/time/month_day_last/io.cc: New test.\n+\t* testsuite/std/time/month_weekday/io.cc: New test.\n+\t* testsuite/std/time/month_weekday_last/io.cc: New test.\n+\t* testsuite/std/time/weekday_indexed/io.cc: New test.\n+\t* testsuite/std/time/weekday_last/io.cc: New test.\n+\t* testsuite/std/time/year_month/io.cc: New test.\n+\t* testsuite/std/time/year_month_day_last/io.cc: New test.\n+\t* testsuite/std/time/year_month_weekday/io.cc: New test.\n+\t* testsuite/std/time/year_month_weekday_last/io.cc: New test.\n+\n+2023-01-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/std/format [_GLIBCXX_INLINE_VERSION](to_chars): Adapt __asm symbol\n+\tspecifications.\n+\t* config/abi/pre/gnu-versioned-namespace.ver: Add to_chars/from_chars symbols\n+\texport.\n+\n+2023-01-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_mutex.h: Include <errno.h>.\n+\n+2023-01-13  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* testsuite/20_util/to_chars/version.cc: Mark hosted-only.\n+\t* testsuite/20_util/uses_allocator/lwg3677.cc: Ditto.\n+\t* testsuite/20_util/weak_ptr/cons/self_move.cc: Ditto.\n+\t* testsuite/std/ranges/adaptors/as_rvalue/1.cc: Replace usage of\n+\tstd::make_unique with a freestanding-compatible wrapper around\n+\tunique_ptr.\n+\t* testsuite/21_strings/basic_string_view/operations/contains/char.cc:\n+\tDon't test for presence of __cpp_lib_string_contains on !HOSTED.\n+\t* testsuite/21_strings/basic_string_view/operations/contains/char/2.cc:\n+\tDitto.\n+\t* testsuite/std/ranges/version_c++23.cc: Don't test for presence\n+\tof __cpp_lib_ranges in !HOSTED.\n+\n+2023-01-13  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* include/Makefile.am: Install bits/char_traits.h,\n+\tstd/string_view\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/char_traits.h: Gate hosted-only, wchar-only and\n+\tmbstate-only bits behind appropriate #ifs.\n+\t* include/std/string_view: Gate <iostream> functionality behind\n+\tHOSTED.\n+\t* include/std/version: Enable __cpp_lib_constexpr_string_view\n+\tand __cpp_lib_starts_ends_with in !HOSTED.\n+\t* include/std/ranges: Re-enable __is_basic_string_view on\n+\tfreestanding, include <string_view> directly.\n+\t* include/precompiled/stdc++.h: Include <string_view> when\n+\t!HOSTED too.\n+\t* testsuite/20_util/function_objects/searchers.cc: Skip testing\n+\tboyer_moore searchers on freestanding\n+\t* testsuite/21_strings/basic_string_view/capacity/1.cc: Guard\n+\t<string>-related tests behind __STDC_HOSTED__.\n+\t* testsuite/21_strings/basic_string_view/cons/char/1.cc: Ditto.\n+\t* testsuite/21_strings/basic_string_view/cons/char/2.cc: Remove\n+\tunused <stdexcept> include.\n+\t* testsuite/21_strings/basic_string_view/cons/char/3.cc: Remove\n+\tunused <vector> include.\n+\t* testsuite/21_strings/basic_string_view/cons/char/range.cc:\n+\tGuard <string> related testing behind __STDC_HOSTED__.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/1.cc:\n+\tGuard <stdexcept> related tests behind __STDC_HOSTED__.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/1.cc:\n+\tDitto.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc:\n+\tGuard <stdexcept> tests behind __STDC_HOSTED__.\n+\t* testsuite/21_strings/basic_string_view/operations/contains/char/2.cc:\n+\tEnable test on freestanding, guard <stdexcept> bits behind\n+\t__STDC_HOSTED__.\n+\t* testsuite/21_strings/basic_string_view/operations/substr/char.cc:\n+\tGuard <stdexcept> bits behind __STDC_HOSTED__.\n+\t* testsuite/21_strings/basic_string_view/operations/substr/wchar_t.cc:\n+\tDitto.\n+\n+2023-01-13  Dimitrij Mijoski  <dmjpp@hotmail.com>\n+\n+\tPR libstdc++/86419\n+\t* src/c++11/codecvt.cc (read_utf8_code_point): Correctly detect\n+\terrors in incomplete multibyte sequences.\n+\t(utf16_in): Remove surrogates parameter. Fix conditions for\n+\treturning partial.\n+\t(utf16_out): Fix condition for returning partial.\n+\t(ucs2_in): Do not pass surrogates argument to utf16_in.\n+\t* testsuite/22_locale/codecvt/codecvt_unicode.cc: New test.\n+\t* testsuite/22_locale/codecvt/codecvt_unicode.h: New header for\n+\ttests.\n+\t* testsuite/22_locale/codecvt/codecvt_unicode_wchar_t.cc: New\n+\ttest.\n+\n+2023-01-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108331\n+\t* config/io/c_io_stdio.h (__c_lock): Define as a typedef for\n+\t__GTHREAD_LEGACY_MUTEX_T if defined.\n+\n 2023-01-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/108327"}]}