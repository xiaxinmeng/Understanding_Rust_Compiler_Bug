{"sha": "71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwMTdhN2I3ODM3YTRlZWIxZDFjMGIyYjE1NWM2NTY3ZjRmM2Q5NQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2016-03-10T12:19:45Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2016-03-10T12:19:45Z"}, "message": "Add -funconstrained-commons to work around PR/69368 (and others) in SPEC2006\n\ngcc/:\n\n        * common.opt (funconstrained-commons, flag_unconstrained_commons): New.\n        * tree.c (array_at_struct_end_p): Do not limit to size of decl for\n        DECL_COMMONS if flag_unconstrained_commons is set.\n        * tree-dfa.c (get_ref_base_and_extent): Likewise.\n        * doc/invoke.texi (Optimize Options): Add -funconstrained-commons.\n        (funconstrained-commons): Document.\n\ngcc/testsuite:\n\n\t* gfortran.dg/unconstrained_commons.f: New.\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r234106", "tree": {"sha": "53a07b60bfba985927686a3c1f4608c6205aaca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53a07b60bfba985927686a3c1f4608c6205aaca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/comments", "author": null, "committer": null, "parents": [{"sha": "4b2066179084192b65d8e56e51c29bccaef4cfe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2066179084192b65d8e56e51c29bccaef4cfe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2066179084192b65d8e56e51c29bccaef4cfe9"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "b6db5dec92e4c814b47b0230b37c9537407b76d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "patch": "@@ -1,3 +1,13 @@\n+2016-03-10  Alan Lawrence  <alan.lawrence@arm.com>\n+\tJakub Jelinek <jakub@redhat.com>\n+\n+\t* common.opt (funconstrained-commons, flag_unconstrained_commons): New.\n+\t* tree.c (array_at_struct_end_p): Do not limit to size of decl for\n+\tDECL_COMMONS if flag_unconstrained_commons is set.\n+\t* tree-dfa.c (get_ref_base_and_extent): Likewise.\n+\t* doc/invoke.texi (Optimize Options): Add -funconstrained-commons.\n+\t(funconstrained-commons): Document.\n+\n 2016-03-10  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* config/aarch64/t-aarch64 (OPTIONS_H_EXTRA): Add"}, {"sha": "1c8cc8ede8f38e0f8a359e45caddf6efc68c9ed8", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "patch": "@@ -2458,6 +2458,11 @@ fsplit-paths\n Common Report Var(flag_split_paths) Init(0) Optimization\n Split paths leading to loop backedges.\n \n+funconstrained-commons\n+Common Var(flag_unconstrained_commons) Optimization\n+Assume common declarations may be overridden with ones with a larger\n+trailing array.\n+\n funit-at-a-time\n Common Report Var(flag_unit_at_a_time) Init(1)\n Compile whole compilation unit at a time."}, {"sha": "99ac11b771408c6751c1ddbdabdb4eeb9ec0306a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "patch": "@@ -408,7 +408,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-parallelize-loops=@var{n} -ftree-pre -ftree-partial-pre -ftree-pta @gol\n -ftree-reassoc -ftree-sink -ftree-slsr -ftree-sra @gol\n -ftree-switch-conversion -ftree-tail-merge -ftree-ter @gol\n--ftree-vectorize -ftree-vrp @gol\n+-ftree-vectorize -ftree-vrp -funconstrained-commons @gol\n -funit-at-a-time -funroll-all-loops -funroll-loops @gol\n -funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops @gol\n -fipa-ra -fvariable-expansion-in-unroller -fvect-cost-model -fvpt @gol\n@@ -6699,6 +6699,12 @@ the loop optimizer itself cannot prove that these assumptions are valid.\n If you use @option{-Wunsafe-loop-optimizations}, the compiler warns you\n if it finds this kind of loop.\n \n+@item -funconstrained-commons\n+@opindex funconstrained-commons\n+This option tells the compiler that variables declared in common blocks\n+(e.g. Fortran) may later be overridden with longer trailing arrays. This\n+prevents certain optimizations that depend on knowing the array bounds.\n+\n @item -fcrossjumping\n @opindex fcrossjumping\n Perform cross-jumping transformation."}, {"sha": "f2ed2aba119a15627bcb6549cec63d44e0525c1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "patch": "@@ -1,3 +1,7 @@\n+2016-03-10  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gfortran.dg/unconstrained_commons.f: New.\n+\n 2016-03-10  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.dg/pr69195.c: New."}, {"sha": "f9fc471e55ad4113519bafd16c1a3e348bf3d4c3", "filename": "gcc/testsuite/gfortran.dg/unconstrained_commons.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftestsuite%2Fgfortran.dg%2Funconstrained_commons.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftestsuite%2Fgfortran.dg%2Funconstrained_commons.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funconstrained_commons.f?ref=71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -funconstrained-commons -fdump-tree-dom2-details\" }\n+\n+! Test for PR69368: a single-element array in a common block, which will be\n+! overridden with a larger size at link time (contrary to language spec).\n+! Dominator opts considers accesses to differently-computed elements of X as\n+! equivalent, unless -funconstrained-commons is passed in.\n+      SUBROUTINE FOO\n+      IMPLICIT DOUBLE PRECISION (X)\n+      INTEGER J\n+      COMMON /MYCOMMON / X(1)\n+      DO 10 J=1,1024\n+         X(J+1)=X(J+7)\n+  10  CONTINUE\n+      RETURN\n+      END\n+! { dg-final { scan-tree-dump-not \"FIND\" \"dom2\" } }\n+! We should retain both a read and write of mycommon.x.\n+! { dg-final { scan-tree-dump-times \"  _\\[0-9\\]+ = mycommon\\\\.x\\\\\\[_\\[0-9\\]+\\\\\\];\" 1 \"dom2\" } }\n+! { dg-final { scan-tree-dump-times \"  mycommon\\\\.x\\\\\\[_\\[0-9\\]+\\\\\\] = _\\[0-9\\]+;\" 1 \"dom2\" } }"}, {"sha": "f133abc79bda1d1fbb317019d3af6a1f6a6ee98e", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "patch": "@@ -612,9 +612,22 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \n   if (DECL_P (exp))\n     {\n+      if (flag_unconstrained_commons\n+\t  && TREE_CODE (exp) == VAR_DECL && DECL_COMMON (exp))\n+\t{\n+\t  tree sz_tree = TYPE_SIZE (TREE_TYPE (exp));\n+\t  /* If size is unknown, or we have read to the end, assume there\n+\t     may be more to the structure than we are told.  */\n+\t  if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n+\t      || (seen_variable_array_ref\n+\t\t  && (sz_tree == NULL_TREE\n+\t\t      || TREE_CODE (sz_tree) != INTEGER_CST\n+\t\t      || (bit_offset + maxsize == wi::to_offset (sz_tree)))))\n+\t    maxsize = -1;\n+\t}\n       /* If maxsize is unknown adjust it according to the size of the\n          base decl.  */\n-      if (maxsize == -1\n+      else if (maxsize == -1\n \t  && DECL_SIZE (exp)\n \t  && TREE_CODE (DECL_SIZE (exp)) == INTEGER_CST)\n \tmaxsize = wi::to_offset (DECL_SIZE (exp)) - bit_offset;"}, {"sha": "7d0cb035b233b880ad3245910eeb1277d5b42dba", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "patch": "@@ -12952,8 +12952,10 @@ array_at_struct_end_p (tree ref)\n     }\n \n   /* If the reference is based on a declared entity, the size of the array\n-     is constrained by its given domain.  */\n-  if (DECL_P (ref))\n+     is constrained by its given domain.  (Do not trust commons PR/69368).  */\n+  if (DECL_P (ref)\n+      && !(flag_unconstrained_commons\n+\t   && TREE_CODE (ref) == VAR_DECL && DECL_COMMON (ref)))\n     return false;\n \n   return true;"}]}