{"sha": "83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNlNzMxNWI1ZmFlN2ZjMTdiM2RkY2FlMmI2YjE4MzU2MjBiM2JjNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-08-28T00:03:35Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-08-28T00:03:35Z"}, "message": "Activatable.java, [...]: RMI implementation from Kaffe.\n\n\t* java/rmi/activation/Activatable.java,\n\tjava/rmi/activation/ActivateFailedException.java,\n\tjava/rmi/activation/ActivationDesc.java,\n\tjava/rmi/activation/ActivationException.java,\n\tjava/rmi/activation/ActivationGroup.java,\n\tjava/rmi/activation/ActivationGroupDesc.java,\n\tjava/rmi/activation/ActivationGroupID.java,\n\tjava/rmi/activation/ActivationID.java,\n\tjava/rmi/activation/ActivationInstantiator.java,\n\tjava/rmi/activation/ActivationMonitor.java,\n\tjava/rmi/activation/ActivationSystem.java,\n\tjava/rmi/activation/Activator.java,\n\tjava/rmi/activation/UnknownGroupException.java,\n\tjava/rmi/activation/UnknownObjectException.java,\n\tjava/rmi/AccessException.java,\n\tjava/rmi/AlreadyBoundException.java,\n\tjava/rmi/ConnectException.java, java/rmi/ConnectIOException.java,\n\tjava/rmi/MarshalException.java, java/rmi/MarshalledObject.java,\n\tjava/rmi/Naming.java, java/rmi/NoSuchObjectException.java,\n\tjava/rmi/NotBoundException.java,\n\tjava/rmi/RMISecurityException.java,\n\tjava/rmi/RMISecurityManager.java, java/rmi/Remote.java,\n\tjava/rmi/RemoteException.java, java/rmi/ServerError.java,\n\tjava/rmi/ServerException.java,\n\tjava/rmi/ServerRuntimeException.java,\n\tjava/rmi/StubNotFoundException.java,\n\tjava/rmi/UnexpectedException.java,\n\tjava/rmi/UnknownHostException.java,\n\tjava/rmi/UnmarshalException.java, java/rmi/dgc/DGC.java,\n\tjava/rmi/dgc/Lease.java, java/rmi/dgc/VMID.java,\n\tjava/rmi/registry/LocateRegistry.java,\n\tjava/rmi/registry/Registry.java,\n\tjava/rmi/registry/RegistryHandler.java,\n\tjava/rmi/server/ExportException.java,\n\tjava/rmi/server/LoaderHandler.java,\n\tjava/rmi/server/LogStream.java, java/rmi/server/ObjID.java,\n\tjava/rmi/server/Operation.java,\n\tjava/rmi/server/RMIClassLoader.java,\n\tjava/rmi/server/RMIClientSocketFactory.java,\n\tjava/rmi/server/RMIFailureHandler.java,\n\tjava/rmi/server/RMIServerSocketFactory.java,\n\tjava/rmi/server/RMISocketFactory.java,\n\tjava/rmi/server/RemoteCall.java,\n\tjava/rmi/server/RemoteObject.java, java/rmi/server/RemoteRef.java,\n\tjava/rmi/server/RemoteServer.java,\n\tjava/rmi/server/RemoteStub.java,\n\tjava/rmi/server/ServerCloneException.java,\n\tjava/rmi/server/ServerNotActiveException.java,\n\tjava/rmi/server/ServerRef.java, java/rmi/server/Skeleton.java,\n\tjava/rmi/server/SkeletonMismatchException.java,\n\tjava/rmi/server/SkeletonNotFoundException.java,\n\tjava/rmi/server/SocketSecurityException.java,\n\tjava/rmi/server/UID.java,\n\tjava/rmi/server/UnicastRemoteObject.java,\n\tjava/rmi/server/Unreferenced.java, gnu/java/rmi/dgc/DGCImpl.java,\n\tgnu/java/rmi/dgc/DGCImpl_Skel.java,\n\tgnu/java/rmi/dgc/DGCImpl_Stub.java,\n\tgnu/java/rmi/registry/RegistryImpl.java,\n\tgnu/java/rmi/registry/RegistryImpl_Skel.java,\n\tgnu/java/rmi/registry/RegistryImpl_Stub.java,\n\tgnu/java/rmi/rmic/RMIC.java, gnu/java/rmi/rmic/TabbedWriter.java,\n\tgnu/java/rmi/server/ProtocolConstants.java,\n\tgnu/java/rmi/server/RMIDefaultSocketFactory.java,\n\tgnu/java/rmi/server/RMIHashes.java,\n\tgnu/java/rmi/server/RMIObjectInputStream.java,\n\tgnu/java/rmi/server/RMIObjectOutputStream.java,\n\tgnu/java/rmi/server/UnicastConnection.java,\n\tgnu/java/rmi/server/UnicastConnectionManager.java,\n\tgnu/java/rmi/server/UnicastRef.java,\n\tgnu/java/rmi/server/UnicastRemoteCall.java,\n\tgnu/java/rmi/server/UnicastRemoteStub.java,\n\tgnu/java/rmi/server/UnicastServer.java,\n\tgnu/java/rmi/server/UnicastServerRef.java: RMI implementation from\n\tKaffe.  Relabelled classes to fit into Classpath tree.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (rmi_java_source_files): New macro.\n\t(ordinary_java_source_files): Reference it.\n\t(bin_PROGRAMS): Added rmic and rmiregistry.\n\t(rmic_SOURCES): New macro.\n\t(EXTRA_rmic_SOURCES): Likewise.\n\t(rmic_LDFLAGS): Likewise.\n\t(rmic_LINK): Likewise.\n\t(rmic_LDADD): Likewise.\n\t(rmic_DEPENDENCIES): Likewise.\n\t(rmiregistry_SOURCES): New macro.\n\t(EXTRA_rmiregistry_SOURCES): Likewise.\n\t(rmiregistry_LDFLAGS): Likewise.\n\t(rmiregistry_LINK): Likewise.\n\t(rmiregistry_LDADD): Likewise.\n\t(rmiregistry_DEPENDENCIES): Likewise.\n\nFrom-SVN: r45218", "tree": {"sha": "0524f17b5bc6a9ba62b7ab93c70f5b39e858a828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0524f17b5bc6a9ba62b7ab93c70f5b39e858a828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/comments", "author": null, "committer": null, "parents": [{"sha": "c5bb59c118038f25b2479b2513c36626a8df6cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bb59c118038f25b2479b2513c36626a8df6cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5bb59c118038f25b2479b2513c36626a8df6cb3"}], "stats": {"total": 8654, "additions": 8594, "deletions": 60}, "files": [{"sha": "350efc02b08181b85ce070bdd16282e4a49eba05", "filename": "libjava/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -1,3 +1,96 @@\n+2001-08-27  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/rmi/activation/Activatable.java,\n+\tjava/rmi/activation/ActivateFailedException.java,\n+\tjava/rmi/activation/ActivationDesc.java,\n+\tjava/rmi/activation/ActivationException.java,\n+\tjava/rmi/activation/ActivationGroup.java,\n+\tjava/rmi/activation/ActivationGroupDesc.java,\n+\tjava/rmi/activation/ActivationGroupID.java,\n+\tjava/rmi/activation/ActivationID.java,\n+\tjava/rmi/activation/ActivationInstantiator.java,\n+\tjava/rmi/activation/ActivationMonitor.java,\n+\tjava/rmi/activation/ActivationSystem.java,\n+\tjava/rmi/activation/Activator.java,\n+\tjava/rmi/activation/UnknownGroupException.java,\n+\tjava/rmi/activation/UnknownObjectException.java,\n+\tjava/rmi/AccessException.java,\n+\tjava/rmi/AlreadyBoundException.java,\n+\tjava/rmi/ConnectException.java, java/rmi/ConnectIOException.java,\n+\tjava/rmi/MarshalException.java, java/rmi/MarshalledObject.java,\n+\tjava/rmi/Naming.java, java/rmi/NoSuchObjectException.java,\n+\tjava/rmi/NotBoundException.java,\n+\tjava/rmi/RMISecurityException.java,\n+\tjava/rmi/RMISecurityManager.java, java/rmi/Remote.java,\n+\tjava/rmi/RemoteException.java, java/rmi/ServerError.java,\n+\tjava/rmi/ServerException.java,\n+\tjava/rmi/ServerRuntimeException.java,\n+\tjava/rmi/StubNotFoundException.java,\n+\tjava/rmi/UnexpectedException.java,\n+\tjava/rmi/UnknownHostException.java,\n+\tjava/rmi/UnmarshalException.java, java/rmi/dgc/DGC.java,\n+\tjava/rmi/dgc/Lease.java, java/rmi/dgc/VMID.java,\n+\tjava/rmi/registry/LocateRegistry.java,\n+\tjava/rmi/registry/Registry.java,\n+\tjava/rmi/registry/RegistryHandler.java,\n+\tjava/rmi/server/ExportException.java,\n+\tjava/rmi/server/LoaderHandler.java,\n+\tjava/rmi/server/LogStream.java, java/rmi/server/ObjID.java,\n+\tjava/rmi/server/Operation.java,\n+\tjava/rmi/server/RMIClassLoader.java,\n+\tjava/rmi/server/RMIClientSocketFactory.java,\n+\tjava/rmi/server/RMIFailureHandler.java,\n+\tjava/rmi/server/RMIServerSocketFactory.java,\n+\tjava/rmi/server/RMISocketFactory.java,\n+\tjava/rmi/server/RemoteCall.java,\n+\tjava/rmi/server/RemoteObject.java, java/rmi/server/RemoteRef.java,\n+\tjava/rmi/server/RemoteServer.java,\n+\tjava/rmi/server/RemoteStub.java,\n+\tjava/rmi/server/ServerCloneException.java,\n+\tjava/rmi/server/ServerNotActiveException.java,\n+\tjava/rmi/server/ServerRef.java, java/rmi/server/Skeleton.java,\n+\tjava/rmi/server/SkeletonMismatchException.java,\n+\tjava/rmi/server/SkeletonNotFoundException.java,\n+\tjava/rmi/server/SocketSecurityException.java,\n+\tjava/rmi/server/UID.java,\n+\tjava/rmi/server/UnicastRemoteObject.java,\n+\tjava/rmi/server/Unreferenced.java, gnu/java/rmi/dgc/DGCImpl.java,\n+\tgnu/java/rmi/dgc/DGCImpl_Skel.java,\n+\tgnu/java/rmi/dgc/DGCImpl_Stub.java,\n+\tgnu/java/rmi/registry/RegistryImpl.java,\n+\tgnu/java/rmi/registry/RegistryImpl_Skel.java,\n+\tgnu/java/rmi/registry/RegistryImpl_Stub.java,\n+\tgnu/java/rmi/rmic/RMIC.java, gnu/java/rmi/rmic/TabbedWriter.java,\n+\tgnu/java/rmi/server/ProtocolConstants.java,\n+\tgnu/java/rmi/server/RMIDefaultSocketFactory.java,\n+\tgnu/java/rmi/server/RMIHashes.java,\n+\tgnu/java/rmi/server/RMIObjectInputStream.java,\n+\tgnu/java/rmi/server/RMIObjectOutputStream.java,\n+\tgnu/java/rmi/server/UnicastConnection.java,\n+\tgnu/java/rmi/server/UnicastConnectionManager.java,\n+\tgnu/java/rmi/server/UnicastRef.java,\n+\tgnu/java/rmi/server/UnicastRemoteCall.java,\n+\tgnu/java/rmi/server/UnicastRemoteStub.java,\n+\tgnu/java/rmi/server/UnicastServer.java,\n+\tgnu/java/rmi/server/UnicastServerRef.java: RMI implementation from\n+\tKaffe.  Relabelled classes to fit into Classpath tree.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (rmi_java_source_files): New macro.\n+\t(ordinary_java_source_files): Reference it.\n+\t(bin_PROGRAMS): Added rmic and rmiregistry.\n+\t(rmic_SOURCES): New macro.\n+\t(EXTRA_rmic_SOURCES): Likewise.\n+\t(rmic_LDFLAGS): Likewise.\n+\t(rmic_LINK): Likewise.\n+\t(rmic_LDADD): Likewise.\n+\t(rmic_DEPENDENCIES): Likewise.\n+\t(rmiregistry_SOURCES): New macro.\n+\t(EXTRA_rmiregistry_SOURCES): Likewise.\n+\t(rmiregistry_LDFLAGS): Likewise.\n+\t(rmiregistry_LINK): Likewise.\n+\t(rmiregistry_LDADD): Likewise.\n+\t(rmiregistry_DEPENDENCIES): Likewise.\n+\n 2001-08-26  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* name-finder.cc (lookup): Ignore a null dli_fname from dladdr."}, {"sha": "bcff10a1d205e93964a56d75e92862a239e866c4", "filename": "libjava/Makefile.am", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -35,7 +35,7 @@ data_DATA = libgcj.jar\n \n ## For now, only on native systems.  FIXME.\n if NATIVE\n-bin_PROGRAMS = jv-convert gij\n+bin_PROGRAMS = jv-convert gij rmic rmiregistry\n endif\n \n bin_SCRIPTS = addr2name.awk\n@@ -435,6 +435,38 @@ gij_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n ## linking this program.\n gij_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n+rmic_SOURCES =\n+## This is a dummy definition.\n+EXTRA_rmic_SOURCES = $(rmi_java_source_files)\n+rmic_LDFLAGS = --main=gnu.java.rmi.rmic.RMIC \\\n+\t-rpath $(toolexeclibdir) -shared-libgcc\n+rmic_LINK = $(GCJLINK)\n+## We explicitly link in the libraries we need.  This way we don't\n+## need -nodefaultlibs, so we can still rely on gcj picking up the\n+## system libraries we need (via the specs file).\n+## We need the -L so that gcj can find libgcj with `-lgcj'.\n+## FIXME: should be _libs on some systems.\n+rmic_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n+## Depend on the spec file to make sure it is up to date before\n+## linking this program.\n+rmic_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n+\n+rmiregistry_SOURCES =\n+## This is a dummy definition.\n+EXTRA_rmiregistry_SOURCES = $(rmi_java_source_files)\n+rmiregistry_LDFLAGS = --main=gnu.java.rmi.registry.RegistryImpl \\\n+\t-rpath $(toolexeclibdir) -shared-libgcc\n+rmiregistry_LINK = $(GCJLINK)\n+## We explicitly link in the libraries we need.  This way we don't\n+## need -nodefaultlibs, so we can still rely on gcj picking up the\n+## system libraries we need (via the specs file).\n+## We need the -L so that gcj can find libgcj with `-lgcj'.\n+## FIXME: should be _libs on some systems.\n+rmiregistry_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n+## Depend on the spec file to make sure it is up to date before\n+## linking this program.\n+rmiregistry_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n+\n # The Unicode consortium does not permit re-distributing the file JIS0201.TXT.\n # You can get it from ftp://ftp.unicode.org/Public/MAPPINGS/EASTASIA/JIS/.\n \n@@ -769,6 +801,93 @@ java/beans/VetoableChangeListener.java \\\n java/beans/VetoableChangeSupport.java \\\n java/beans/Visibility.java\n \n+rmi_java_source_files =\t\\\n+java/rmi/activation/Activatable.java \\\n+java/rmi/activation/ActivateFailedException.java \\\n+java/rmi/activation/ActivationDesc.java\t\\\n+java/rmi/activation/ActivationException.java \\\n+java/rmi/activation/ActivationGroup.java \\\n+java/rmi/activation/ActivationGroupDesc.java \\\n+java/rmi/activation/ActivationGroupID.java \\\n+java/rmi/activation/ActivationID.java \\\n+java/rmi/activation/ActivationInstantiator.java\t\\\n+java/rmi/activation/ActivationMonitor.java \\\n+java/rmi/activation/ActivationSystem.java \\\n+java/rmi/activation/Activator.java \\\n+java/rmi/activation/UnknownGroupException.java \\\n+java/rmi/activation/UnknownObjectException.java\t\\\n+java/rmi/AccessException.java \\\n+java/rmi/AlreadyBoundException.java \\\n+java/rmi/ConnectException.java \\\n+java/rmi/ConnectIOException.java \\\n+java/rmi/MarshalException.java \\\n+java/rmi/MarshalledObject.java \\\n+java/rmi/Naming.java \\\n+java/rmi/NoSuchObjectException.java \\\n+java/rmi/NotBoundException.java\t\\\n+java/rmi/RMISecurityException.java \\\n+java/rmi/RMISecurityManager.java \\\n+java/rmi/Remote.java \\\n+java/rmi/RemoteException.java \\\n+java/rmi/ServerError.java \\\n+java/rmi/ServerException.java \\\n+java/rmi/ServerRuntimeException.java \\\n+java/rmi/StubNotFoundException.java \\\n+java/rmi/UnexpectedException.java \\\n+java/rmi/UnknownHostException.java \\\n+java/rmi/UnmarshalException.java \\\n+java/rmi/dgc/DGC.java \\\n+java/rmi/dgc/Lease.java\t\\\n+java/rmi/dgc/VMID.java \\\n+java/rmi/registry/LocateRegistry.java \\\n+java/rmi/registry/Registry.java\t\\\n+java/rmi/registry/RegistryHandler.java \\\n+java/rmi/server/ExportException.java \\\n+java/rmi/server/LoaderHandler.java \\\n+java/rmi/server/LogStream.java \\\n+java/rmi/server/ObjID.java \\\n+java/rmi/server/Operation.java \\\n+java/rmi/server/RMIClassLoader.java \\\n+java/rmi/server/RMIClientSocketFactory.java \\\n+java/rmi/server/RMIFailureHandler.java \\\n+java/rmi/server/RMIServerSocketFactory.java \\\n+java/rmi/server/RMISocketFactory.java \\\n+java/rmi/server/RemoteCall.java\t\\\n+java/rmi/server/RemoteObject.java \\\n+java/rmi/server/RemoteRef.java \\\n+java/rmi/server/RemoteServer.java \\\n+java/rmi/server/RemoteStub.java\t\\\n+java/rmi/server/ServerCloneException.java \\\n+java/rmi/server/ServerNotActiveException.java \\\n+java/rmi/server/ServerRef.java \\\n+java/rmi/server/Skeleton.java \\\n+java/rmi/server/SkeletonMismatchException.java \\\n+java/rmi/server/SkeletonNotFoundException.java \\\n+java/rmi/server/SocketSecurityException.java \\\n+java/rmi/server/UID.java \\\n+java/rmi/server/UnicastRemoteObject.java \\\n+java/rmi/server/Unreferenced.java \\\n+gnu/java/rmi/dgc/DGCImpl.java \\\n+gnu/java/rmi/dgc/DGCImpl_Skel.java \\\n+gnu/java/rmi/dgc/DGCImpl_Stub.java \\\n+gnu/java/rmi/registry/RegistryImpl.java\t\\\n+gnu/java/rmi/registry/RegistryImpl_Skel.java \\\n+gnu/java/rmi/registry/RegistryImpl_Stub.java \\\n+gnu/java/rmi/rmic/RMIC.java \\\n+gnu/java/rmi/rmic/TabbedWriter.java \\\n+gnu/java/rmi/server/ProtocolConstants.java \\\n+gnu/java/rmi/server/RMIDefaultSocketFactory.java \\\n+gnu/java/rmi/server/RMIHashes.java \\\n+gnu/java/rmi/server/RMIObjectInputStream.java \\\n+gnu/java/rmi/server/RMIObjectOutputStream.java \\\n+gnu/java/rmi/server/UnicastConnection.java \\\n+gnu/java/rmi/server/UnicastConnectionManager.java \\\n+gnu/java/rmi/server/UnicastRef.java \\\n+gnu/java/rmi/server/UnicastRemoteCall.java \\\n+gnu/java/rmi/server/UnicastRemoteStub.java \\\n+gnu/java/rmi/server/UnicastServer.java \\\n+gnu/java/rmi/server/UnicastServerRef.java\n+\n ## Java files which are created by configure and thus are in the build\n ## directory.\n built_java_source_files = java/lang/ConcreteProcess.java \\\n@@ -1309,6 +1428,7 @@ org/xml/sax/SAXNotSupportedException.java \\\n org/xml/sax/SAXParseException.java \\\n org/xml/sax/XMLFilter.java \\\n org/xml/sax/XMLReader.java \\\n+$(rmi_java_source_files) \\\n $(awt_java_source_files) \\\n $(convert_source_files)\n "}, {"sha": "38aa7f120044c9f16be1abeafdd2eaf01a0a1da3", "filename": "libjava/Makefile.in", "status": "modified", "additions": 1202, "deletions": 59, "changes": 1261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p1 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -123,26 +123,38 @@ libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = $(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = $(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \n+@TESTSUBDIR_TRUE@SUBDIRS = \\\n+@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = \\\n+@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = \\\n+@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = \\\n+@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = \\\n+@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n+@XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NATIVE_TRUE@bin_PROGRAMS = jv-convert gij\n+@NATIVE_TRUE@bin_PROGRAMS = \\\n+@NATIVE_TRUE@jv-convert gij rmic rmiregistry\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = jar\n-@CANADIAN_FALSE@ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = gcjh\n-@CANADIAN_FALSE@GCJH = $(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n+@CANADIAN_FALSE@ZIP = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = \\\n+@CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -157,46 +169,62 @@ JAVAC = $(GCJ_WITH_FLAGS) -C\n GCC_UNWIND_INCLUDE = @GCC_UNWIND_INCLUDE@\n \n WARNINGS = -W -Wall\n-AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \t-fdollars-in-identifiers \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \t-DPREFIX=\"\\\"$(prefix)\\\"\"\n+AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \\\n+\t-fdollars-in-identifiers \\\n+\t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \\\n+\t-DPREFIX=\"\\\"$(prefix)\\\"\"\n \n-@USING_GCC_TRUE@AM_CFLAGS = @LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = @LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = \\\n+@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = \\\n+@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n \n LIBFFIINCS = @LIBFFIINCS@\n \n-INCLUDES = -I$(top_srcdir) -Iinclude -I$(top_srcdir)/include \t$(GCINCS) $(THREADINCS) $(INCLTDL) \t$(GCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n+INCLUDES = -I$(top_srcdir) -Iinclude -I$(top_srcdir)/include \\\n+\t$(GCINCS) $(THREADINCS) $(INCLTDL) \\\n+\t$(GCC_UNWIND_INCLUDE) $(ZINCS) $(LIBFFIINCS)\n \n \n nat_files = $(nat_source_files:.cc=.lo)\n x_nat_files = $(x_nat_source_files:.cc=.lo)\n c_files = $(c_source_files:.c=.lo)\n-javao_files = $(java_source_files:.java=.lo) \t$(built_java_source_files:.java=.lo)\n+javao_files = $(java_source_files:.java=.lo) \\\n+\t$(built_java_source_files:.java=.lo)\n \n x_javao_files = $(x_java_source_files:.java=.lo)\n \n-libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \tresolve.cc defineclass.cc interpret.cc name-finder.cc \t$(nat_source_files)\n+libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n+\tresolve.cc defineclass.cc interpret.cc name-finder.cc \\\n+\t$(nat_source_files)\n \n-EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \t$(c_source_files) $(java_source_files) $(built_java_source_files)\n+EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \\\n+\t$(c_source_files) $(java_source_files) $(built_java_source_files)\n \n-libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \t$(c_files) $(GCOBJS) $(THREADOBJS) $(LIBLTDL)\n+libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \\\n+\t$(c_files) $(GCOBJS) $(THREADOBJS) $(LIBLTDL)\n \n \n-libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \t$(THREADOBJS)\n+libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \\\n+\t$(THREADOBJS)\n \n # Include THREADLIBS here to ensure that the correct version of\n # certain linuxthread functions get linked:\n-libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n+libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLIBS) $(LIBLTDL) \\\n+\t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n libgcj_la_LINK = $(LIBLINK)\n \n libgcjx_la_SOURCES = $(x_nat_source_files)\n EXTRA_libgcjx_la_SOURCES = $(x_java_source_files)\n libgcjx_la_DEPENDENCIES = libgcj.jar $(x_javao_files)\n libgcjx_la_LIBADD = $(x_javao_files)\n-libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@         -rpath $(toolexeclibdir)         -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n+libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@ \\\n+        -rpath $(toolexeclibdir) \\\n+        -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n libgcjx_la_LINK = $(LIBLINK)\n \n@@ -205,7 +233,10 @@ CLEANFILES = tmp-list libgcj.jar\n \n SUFFIXES = .class .java .h\n \n-nat_headers = $(ordinary_java_source_files:.java=.h) \t$(built_java_source_files:.java=.h) \tjava/io/ObjectOutputStream$$PutField.h \tjava/io/ObjectInputStream$$GetField.h\n+nat_headers = $(ordinary_java_source_files:.java=.h) \\\n+\t$(built_java_source_files:.java=.h) \\\n+\tjava/io/ObjectOutputStream$$PutField.h \\\n+\tjava/io/ObjectInputStream$$GetField.h\n \n \n x_nat_headers = $(x_java_source_files:.java=.h)\n@@ -214,18 +245,22 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n jv_convert_SOURCES = \n EXTRA_jv_convert_SOURCES = $(convert_source_files)\n-jv_convert_LDFLAGS = --main=gnu.gcj.convert.Convert \t-rpath $(toolexeclibdir) -shared-libgcc\n+jv_convert_LDFLAGS = --main=gnu.gcj.convert.Convert \\\n+\t-rpath $(toolexeclibdir) -shared-libgcc\n \n jv_convert_LINK = $(GCJLINK)\n-jv_convert_LDADD = $(convert_source_files:.java=.lo) libgcj.la \t$(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n+jv_convert_LDADD = $(convert_source_files:.java=.lo) libgcj.la \\\n+\t$(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n \n-jv_convert_DEPENDENCIES = $(convert_source_files:.java=.lo) \t$(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n+jv_convert_DEPENDENCIES = $(convert_source_files:.java=.lo) \\\n+\t$(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n \n gij_SOURCES = gij.cc\n@@ -234,50 +269,1078 @@ gij_LINK = $(GCJLINK)\n gij_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n gij_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n-gen_from_JIS_SOURCES = \n-EXTRA_gen_from_JIS_SOURCES = $(srcdir)/$(CONVERT_DIR)/gen-from-JIS.c \t\t$(srcdir)/$(CONVERT_DIR)/make-trie.c \t\t$(srcdir)/$(CONVERT_DIR)/JIS0201.h \t\t$(srcdir)/$(CONVERT_DIR)/JIS0208.h \t\t$(srcdir)/$(CONVERT_DIR)/JIS0212.h\n-\n-gen_from_JIS_LDADD = $(CONVERT_DIR)/gen-from-JIS.o $(CONVERT_DIR)/make-trie.o\n-gen_from_JIS_DEPENDENCIES = $(CONVERT_DIR)/gen-from-JIS.o \t\t$(CONVERT_DIR)/make-trie.o\n-\n-\n-convert_source_files =  gnu/gcj/convert/BytesToUnicode.java gnu/gcj/convert/Convert.java gnu/gcj/convert/Input_8859_1.java gnu/gcj/convert/Input_ASCII.java gnu/gcj/convert/Input_EUCJIS.java gnu/gcj/convert/Input_JavaSrc.java gnu/gcj/convert/Input_SJIS.java gnu/gcj/convert/Input_UTF8.java\tgnu/gcj/convert/Input_iconv.java gnu/gcj/convert/IOConverter.java gnu/gcj/convert/Output_8859_1.java gnu/gcj/convert/Output_ASCII.java gnu/gcj/convert/Output_EUCJIS.java gnu/gcj/convert/Output_JavaSrc.java gnu/gcj/convert/Output_SJIS.java gnu/gcj/convert/Output_UTF8.java gnu/gcj/convert/Output_iconv.java gnu/gcj/convert/UnicodeToBytes.java\n+rmic_SOURCES = \n+EXTRA_rmic_SOURCES = $(rmi_java_source_files)\n+rmic_LDFLAGS = --main=gnu.java.rmi.rmic.RMIC \\\n+\t-rpath $(toolexeclibdir) -shared-libgcc\n \n+rmic_LINK = $(GCJLINK)\n+rmic_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n+rmic_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n-special_java_source_files = java/lang/Class.java java/lang/Object.java\n-\n-awt_java_source_files =  gnu/awt/LightweightRedirector.java gnu/awt/j2d/AbstractGraphicsState.java gnu/awt/j2d/DirectRasterGraphics.java gnu/awt/j2d/Graphics2DImpl.java gnu/awt/j2d/IntegerGraphicsState.java gnu/awt/j2d/MappedRaster.java gnu/gcj/awt/BitMaskExtent.java gnu/gcj/awt/Buffers.java gnu/gcj/awt/ComponentDataBlitOp.java gnu/gcj/awt/GLightweightPeer.java gnu/java/beans/editors/ColorEditor.java\tgnu/java/beans/editors/FontEditor.java gnu/java/beans/editors/NativeBooleanEditor.java\tgnu/java/beans/editors/NativeByteEditor.java gnu/java/beans/editors/NativeDoubleEditor.java gnu/java/beans/editors/NativeFloatEditor.java gnu/java/beans/editors/NativeIntEditor.java gnu/java/beans/editors/NativeLongEditor.java gnu/java/beans/editors/NativeShortEditor.java gnu/java/beans/editors/StringEditor.java gnu/java/beans/info/ComponentBeanInfo.java gnu/java/beans/BeanInfoEmbryo.java gnu/java/beans/EmptyBeanInfo.java gnu/java/beans/ExplicitBeanInfo.java gnu/java/beans/IntrospectionIncubator.java java/applet/Applet.java java/applet/AppletStub.java java/applet/AppletContext.java java/applet/AudioClip.java java/awt/AWTError.java java/awt/AWTEvent.java java/awt/AWTEventMulticaster.java java/awt/AWTException.java java/awt/AWTPermission.java java/awt/ActiveEvent.java java/awt/Adjustable.java java/awt/BorderLayout.java java/awt/Button.java java/awt/Canvas.java java/awt/CardLayout.java java/awt/Checkbox.java java/awt/CheckboxGroup.java java/awt/CheckboxMenuItem.java java/awt/Choice.java java/awt/Color.java java/awt/Component.java\tjava/awt/ComponentOrientation.java java/awt/Container.java\tjava/awt/Cursor.java java/awt/Dialog.java java/awt/Dimension.java\tjava/awt/Event.java java/awt/EventDispatchThread.java java/awt/EventQueue.java java/awt/FileDialog.java java/awt/FlowLayout.java java/awt/Font.java java/awt/FontMetrics.java java/awt/Frame.java java/awt/Graphics.java java/awt/Graphics2D.java java/awt/GraphicsConfiguration.java java/awt/GridBagConstraints.java java/awt/GridLayout.java java/awt/IllegalComponentStateException.java java/awt/Image.java java/awt/Insets.java java/awt/ItemSelectable.java java/awt/Label.java java/awt/LayoutManager.java java/awt/LayoutManager2.java java/awt/List.java java/awt/Menu.java java/awt/MenuBar.java java/awt/MenuComponent.java java/awt/MenuContainer.java java/awt/MenuItem.java java/awt/MenuShortcut.java java/awt/Paint.java java/awt/PaintContext.java java/awt/Panel.java java/awt/Point.java java/awt/Polygon.java java/awt/PopupMenu.java\tjava/awt/Rectangle.java\tjava/awt/RenderingHints.java java/awt/ScrollPane.java java/awt/Scrollbar.java\tjava/awt/Shape.java java/awt/SystemColor.java java/awt/TextArea.java java/awt/TextComponent.java java/awt/TextField.java\tjava/awt/Toolkit.java java/awt/Transparency.java java/awt/Window.java java/awt/color/ColorSpace.java java/awt/color/ICC_ColorSpace.java java/awt/color/ICC_Profile.java\tjava/awt/datatransfer/Clipboard.java java/awt/event/AWTEventListener.java java/awt/event/ActionEvent.java\tjava/awt/event/ActionListener.java java/awt/event/AdjustmentEvent.java java/awt/event/AdjustmentListener.java java/awt/event/ComponentAdapter.java java/awt/event/ComponentEvent.java java/awt/event/ComponentListener.java java/awt/event/ContainerAdapter.java java/awt/event/ContainerEvent.java java/awt/event/ContainerListener.java java/awt/event/FocusAdapter.java java/awt/event/FocusEvent.java java/awt/event/FocusListener.java java/awt/event/HierarchyBoundsAdapter.java java/awt/event/HierarchyBoundsListener.java java/awt/event/HierarchyEvent.java java/awt/event/HierarchyListener.java java/awt/event/InputEvent.java java/awt/event/InputMethodEvent.java java/awt/event/InputMethodListener.java\tjava/awt/event/InvocationEvent.java java/awt/event/ItemEvent.java java/awt/event/ItemListener.java java/awt/event/KeyAdapter.java java/awt/event/KeyEvent.java java/awt/event/KeyListener.java\tjava/awt/event/MouseAdapter.java java/awt/event/MouseEvent.java java/awt/event/MouseListener.java java/awt/event/MouseMotionAdapter.java java/awt/event/MouseMotionListener.java\tjava/awt/event/PaintEvent.java java/awt/event/TextEvent.java java/awt/event/TextListener.java java/awt/event/WindowAdapter.java java/awt/event/WindowEvent.java\tjava/awt/event/WindowListener.java java/awt/geom/AffineTransform.java java/awt/geom/Dimension2D.java java/awt/geom/Ellipse2D.java java/awt/geom/IllegalPathStateException.java java/awt/geom/Line2D.java java/awt/geom/NoninvertibleTransformException.java java/awt/geom/PathIterator.java\tjava/awt/geom/Point2D.java java/awt/geom/Rectangle2D.java java/awt/geom/RectangularShape.java java/awt/geom/RoundRectangle2D.java java/awt/image/BufferedImage.java java/awt/image/ColorModel.java java/awt/image/ComponentColorModel.java\tjava/awt/image/ComponentSampleModel.java java/awt/image/DataBuffer.java java/awt/image/DataBufferByte.java java/awt/image/DataBufferInt.java java/awt/image/DataBufferUShort.java java/awt/image/DirectColorModel.java java/awt/image/ImageConsumer.java java/awt/image/ImageObserver.java java/awt/image/ImageProducer.java java/awt/image/IndexColorModel.java java/awt/image/PackedColorModel.java java/awt/image/Raster.java java/awt/image/RasterOp.java java/awt/image/SampleModel.java\tjava/awt/image/SinglePixelPackedSampleModel.java java/awt/image/WritableRaster.java java/awt/peer/ButtonPeer.java java/awt/peer/CanvasPeer.java java/awt/peer/CheckboxMenuItemPeer.java\tjava/awt/peer/CheckboxPeer.java\tjava/awt/peer/ChoicePeer.java java/awt/peer/ComponentPeer.java java/awt/peer/ContainerPeer.java java/awt/peer/DialogPeer.java java/awt/peer/FileDialogPeer.java java/awt/peer/FontPeer.java java/awt/peer/FramePeer.java java/awt/peer/LabelPeer.java java/awt/peer/LightweightPeer.java java/awt/peer/ListPeer.java java/awt/peer/MenuBarPeer.java java/awt/peer/MenuComponentPeer.java java/awt/peer/MenuItemPeer.java\tjava/awt/peer/MenuPeer.java java/awt/peer/PanelPeer.java java/awt/peer/PopupMenuPeer.java java/awt/peer/ScrollPanePeer.java java/awt/peer/ScrollbarPeer.java java/awt/peer/TextAreaPeer.java\tjava/awt/peer/TextComponentPeer.java java/awt/peer/TextFieldPeer.java java/awt/peer/WindowPeer.java java/beans/beancontext/BeanContext.java\tjava/beans/beancontext/BeanContextChild.java java/beans/beancontext/BeanContextChildComponentProxy.java java/beans/beancontext/BeanContextChildSupport.java java/beans/beancontext/BeanContextContainerProxy.java java/beans/beancontext/BeanContextEvent.java java/beans/beancontext/BeanContextMembershipEvent.java java/beans/beancontext/BeanContextMembershipListener.java java/beans/beancontext/BeanContextProxy.java java/beans/beancontext/BeanContextServiceAvailableEvent.java java/beans/beancontext/BeanContextServiceProvider.java java/beans/beancontext/BeanContextServiceProviderBeanInfo.java java/beans/beancontext/BeanContextServiceRevokedEvent.java java/beans/beancontext/BeanContextServiceRevokedListener.java java/beans/beancontext/BeanContextServices.java\tjava/beans/beancontext/BeanContextServicesListener.java\tjava/beans/BeanDescriptor.java java/beans/BeanInfo.java java/beans/Beans.java java/beans/Customizer.java java/beans/DesignMode.java java/beans/EventSetDescriptor.java java/beans/FeatureDescriptor.java java/beans/IndexedPropertyDescriptor.java java/beans/IntrospectionException.java java/beans/Introspector.java java/beans/MethodDescriptor.java java/beans/ParameterDescriptor.java java/beans/PropertyChangeEvent.java java/beans/PropertyChangeListener.java java/beans/PropertyChangeSupport.java java/beans/PropertyDescriptor.java java/beans/PropertyEditor.java java/beans/PropertyEditorManager.java java/beans/PropertyEditorSupport.java java/beans/PropertyVetoException.java java/beans/SimpleBeanInfo.java java/beans/VetoableChangeListener.java java/beans/VetoableChangeSupport.java java/beans/Visibility.java\n+rmiregistry_SOURCES = \n+EXTRA_rmiregistry_SOURCES = $(rmi_java_source_files)\n+rmiregistry_LDFLAGS = --main=gnu.java.rmi.registry.RegistryImpl \\\n+\t-rpath $(toolexeclibdir) -shared-libgcc\n \n+rmiregistry_LINK = $(GCJLINK)\n+rmiregistry_LDADD = libgcj.la $(GCLIBS) $(THREADLIBS) $(ZLIBS) -L$(here)/.libs\n+rmiregistry_DEPENDENCIES = $(GCDEPS) $(THREADDEPS) $(ZDEPS) libgcj.la libgcj.spec\n \n-built_java_source_files = java/lang/ConcreteProcess.java                           gnu/classpath/Configuration.java\n+gen_from_JIS_SOURCES = \n+EXTRA_gen_from_JIS_SOURCES = $(srcdir)/$(CONVERT_DIR)/gen-from-JIS.c \\\n+\t\t$(srcdir)/$(CONVERT_DIR)/make-trie.c \\\n+\t\t$(srcdir)/$(CONVERT_DIR)/JIS0201.h \\\n+\t\t$(srcdir)/$(CONVERT_DIR)/JIS0208.h \\\n+\t\t$(srcdir)/$(CONVERT_DIR)/JIS0212.h\n \n+gen_from_JIS_LDADD = $(CONVERT_DIR)/gen-from-JIS.o $(CONVERT_DIR)/make-trie.o\n+gen_from_JIS_DEPENDENCIES = $(CONVERT_DIR)/gen-from-JIS.o \\\n+\t\t$(CONVERT_DIR)/make-trie.o\n+\n+\n+convert_source_files = \\\n+gnu/gcj/convert/BytesToUnicode.java \\\n+gnu/gcj/convert/Convert.java \\\n+gnu/gcj/convert/Input_8859_1.java \\\n+gnu/gcj/convert/Input_ASCII.java \\\n+gnu/gcj/convert/Input_EUCJIS.java \\\n+gnu/gcj/convert/Input_JavaSrc.java \\\n+gnu/gcj/convert/Input_SJIS.java \\\n+gnu/gcj/convert/Input_UTF8.java\t\\\n+gnu/gcj/convert/Input_iconv.java \\\n+gnu/gcj/convert/IOConverter.java \\\n+gnu/gcj/convert/Output_8859_1.java \\\n+gnu/gcj/convert/Output_ASCII.java \\\n+gnu/gcj/convert/Output_EUCJIS.java \\\n+gnu/gcj/convert/Output_JavaSrc.java \\\n+gnu/gcj/convert/Output_SJIS.java \\\n+gnu/gcj/convert/Output_UTF8.java \\\n+gnu/gcj/convert/Output_iconv.java \\\n+gnu/gcj/convert/UnicodeToBytes.java\n \n-core_java_source_files =  java/lang/AbstractMethodError.java java/lang/ArithmeticException.java java/lang/ArrayIndexOutOfBoundsException.java java/lang/ArrayStoreException.java java/lang/Boolean.java java/lang/Byte.java java/lang/Character.java java/lang/ClassCastException.java java/lang/ClassCircularityError.java java/lang/ClassFormatError.java\tjava/lang/ClassLoader.java java/lang/ClassNotFoundException.java java/lang/CloneNotSupportedException.java java/lang/Cloneable.java java/lang/Comparable.java java/lang/Compiler.java\tjava/lang/Double.java java/lang/Error.java java/lang/Exception.java java/lang/ExceptionInInitializerError.java java/lang/Float.java java/lang/IllegalAccessError.java java/lang/IllegalAccessException.java java/lang/IllegalArgumentException.java\tjava/lang/IllegalMonitorStateException.java java/lang/IllegalStateException.java java/lang/IllegalThreadStateException.java java/lang/IncompatibleClassChangeError.java java/lang/IndexOutOfBoundsException.java java/lang/InstantiationError.java java/lang/InstantiationException.java java/lang/Integer.java java/lang/InternalError.java java/lang/InterruptedException.java java/lang/LinkageError.java java/lang/Long.java java/lang/Math.java java/lang/NegativeArraySizeException.java java/lang/NoClassDefFoundError.java java/lang/NoSuchFieldError.java\tjava/lang/NoSuchFieldException.java java/lang/NoSuchMethodError.java java/lang/NoSuchMethodException.java java/lang/NullPointerException.java java/lang/Number.java java/lang/NumberFormatException.java java/lang/OutOfMemoryError.java\tjava/lang/Package.java java/lang/Process.java java/lang/Runnable.java\tjava/lang/Runtime.java java/lang/RuntimeException.java\tjava/lang/RuntimePermission.java java/lang/SecurityException.java java/lang/SecurityManager.java java/lang/Short.java java/lang/StackOverflowError.java java/lang/String.java java/lang/StringBuffer.java java/lang/StringIndexOutOfBoundsException.java java/lang/System.java java/lang/Thread.java java/lang/ThreadDeath.java java/lang/ThreadGroup.java java/lang/ThreadLocal.java java/lang/Throwable.java java/lang/UnknownError.java java/lang/UnsatisfiedLinkError.java java/lang/UnsupportedOperationException.java java/lang/VerifyError.java java/lang/VirtualMachineError.java java/lang/VMClassLoader.java java/lang/Void.java java/io/BufferedInputStream.java java/io/BufferedOutputStream.java java/io/BufferedReader.java java/io/BufferedWriter.java java/io/ByteArrayInputStream.java java/io/ByteArrayOutputStream.java java/io/CharArrayReader.java java/io/CharArrayWriter.java java/io/CharConversionException.java java/io/DataInput.java java/io/DataInputStream.java java/io/DataOutput.java\tjava/io/DataOutputStream.java java/io/EOFException.java java/io/Externalizable.java java/io/File.java java/io/FileDescriptor.java java/io/FileFilter.java java/io/FileInputStream.java java/io/FileNotFoundException.java java/io/FileOutputStream.java java/io/FilePermission.java java/io/FileReader.java\tjava/io/FileWriter.java\tjava/io/FilenameFilter.java java/io/FilterInputStream.java java/io/FilterOutputStream.java\tjava/io/FilterReader.java java/io/FilterWriter.java java/io/IOException.java java/io/InputStream.java java/io/InputStreamReader.java java/io/InterruptedIOException.java java/io/InvalidClassException.java java/io/InvalidObjectException.java java/io/LineNumberInputStream.java java/io/LineNumberReader.java java/io/NotActiveException.java\tjava/io/NotSerializableException.java java/io/ObjectInput.java java/io/ObjectInputStream.java java/io/ObjectInputValidation.java java/io/ObjectOutput.java java/io/ObjectOutputStream.java\tjava/io/ObjectStreamClass.java java/io/ObjectStreamConstants.java java/io/ObjectStreamException.java java/io/ObjectStreamField.java java/io/OptionalDataException.java java/io/OutputStream.java java/io/OutputStreamWriter.java\tjava/io/PipedInputStream.java java/io/PipedOutputStream.java java/io/PipedReader.java java/io/PipedWriter.java java/io/PrintStream.java java/io/PrintWriter.java java/io/PushbackInputStream.java java/io/PushbackReader.java java/io/RandomAccessFile.java java/io/Reader.java java/io/SequenceInputStream.java java/io/Serializable.java java/io/SerializablePermission.java java/io/StreamCorruptedException.java java/io/StreamTokenizer.java java/io/StringBufferInputStream.java java/io/StringReader.java java/io/StringWriter.java java/io/SyncFailedException.java java/io/UTFDataFormatException.java java/io/UnsupportedEncodingException.java java/io/WriteAbortedException.java java/io/Writer.java java/util/AbstractCollection.java java/util/AbstractList.java java/util/AbstractMap.java java/util/AbstractSequentialList.java java/util/AbstractSet.java java/util/ArrayList.java java/util/Arrays.java java/util/BasicMapEntry.java java/util/BitSet.java java/util/Calendar.java\tjava/util/Collection.java java/util/Collections.java java/util/Comparator.java java/util/ConcurrentModificationException.java java/util/Date.java java/util/Dictionary.java java/util/EmptyStackException.java java/util/Enumeration.java java/util/EventListener.java java/util/EventObject.java java/util/GregorianCalendar.java java/util/HashMap.java java/util/HashSet.java java/util/Hashtable.java java/util/IdentityHashMap.java java/util/Iterator.java\tjava/util/LinkedList.java java/util/List.java java/util/ListIterator.java java/util/ListResourceBundle.java java/util/Locale.java java/util/Map.java java/util/MissingResourceException.java\tjava/util/NoSuchElementException.java java/util/Observable.java java/util/Observer.java\tjava/util/Properties.java java/util/PropertyPermission.java java/util/PropertyResourceBundle.java java/util/Random.java java/util/ResourceBundle.java java/util/Set.java java/util/SimpleTimeZone.java java/util/SortedMap.java java/util/SortedSet.java java/util/Stack.java java/util/StringTokenizer.java java/util/TimeZone.java\tjava/util/Timer.java java/util/TimerTask.java java/util/TreeMap.java java/util/TreeSet.java java/util/TooManyListenersException.java java/util/Vector.java java/util/WeakHashMap.java\n \n+special_java_source_files = java/lang/Class.java java/lang/Object.java\n \n-ordinary_java_source_files = $(core_java_source_files) gnu/gcj/RawData.java gnu/gcj/io/DefaultMimeTypes.java gnu/gcj/io/MimeTypes.java gnu/gcj/io/SimpleSHSStream.java\tgnu/gcj/math/MPN.java gnu/gcj/protocol/file/Connection.java gnu/gcj/protocol/file/Handler.java gnu/gcj/protocol/http/Connection.java gnu/gcj/protocol/http/Handler.java gnu/gcj/protocol/jar/Connection.java gnu/gcj/protocol/jar/Handler.java gnu/gcj/runtime/FileDeleter.java gnu/gcj/runtime/FirstThread.java gnu/gcj/runtime/VMClassLoader.java gnu/gcj/text/BaseBreakIterator.java gnu/gcj/text/CharacterBreakIterator.java gnu/gcj/text/LineBreakIterator.java gnu/gcj/text/LocaleData_en.java\tgnu/gcj/text/LocaleData_en_US.java gnu/gcj/text/SentenceBreakIterator.java\tgnu/gcj/text/WordBreakIterator.java gnu/gcj/util/EnumerationChain.java gnu/java/io/ClassLoaderObjectInputStream.java gnu/java/io/NullOutputStream.java gnu/java/io/ObjectIdentityWrapper.java gnu/java/lang/ArrayHelper.java gnu/java/lang/ClassHelper.java gnu/java/lang/reflect/TypeSignature.java gnu/java/locale/Calendar.java gnu/java/locale/Calendar_de.java gnu/java/locale/Calendar_en.java gnu/java/locale/Calendar_nl.java gnu/java/security/provider/DefaultPolicy.java gnu/java/security/provider/Gnu.java gnu/java/security/provider/SHA.java gnu/java/security/provider/SHA1PRNG.java java/lang/ref/PhantomReference.java java/lang/ref/Reference.java java/lang/ref/ReferenceQueue.java java/lang/ref/SoftReference.java java/lang/ref/WeakReference.java java/lang/reflect/AccessibleObject.java\tjava/lang/reflect/Array.java java/lang/reflect/Constructor.java java/lang/reflect/Field.java java/lang/reflect/InvocationTargetException.java java/lang/reflect/Member.java java/lang/reflect/Method.java java/lang/reflect/Modifier.java\tjava/lang/reflect/ReflectPermission.java java/math/BigDecimal.java java/math/BigInteger.java java/net/BindException.java java/net/ConnectException.java java/net/ContentHandler.java java/net/ContentHandlerFactory.java java/net/DatagramPacket.java java/net/DatagramSocket.java java/net/DatagramSocketImpl.java java/net/FileNameMap.java java/net/HttpURLConnection.java\tjava/net/InetAddress.java java/net/JarURLConnection.java java/net/MalformedURLException.java java/net/MulticastSocket.java java/net/NetPermission.java java/net/NoRouteToHostException.java java/net/PlainDatagramSocketImpl.java java/net/PlainSocketImpl.java java/net/ProtocolException.java\tjava/net/ServerSocket.java java/net/Socket.java java/net/SocketException.java java/net/SocketImpl.java java/net/SocketImplFactory.java\tjava/net/SocketOptions.java java/net/SocketPermission.java java/net/URL.java java/net/URLClassLoader.java java/net/URLConnection.java java/net/URLDecoder.java java/net/URLEncoder.java java/net/URLStreamHandler.java java/net/URLStreamHandlerFactory.java java/net/UnknownHostException.java java/net/UnknownServiceException.java java/security/AccessControlContext.java java/security/AccessControlException.java java/security/AccessController.java java/security/AlgorithmParameterGenerator.java java/security/AlgorithmParameters.java java/security/AlgorithmParameterGeneratorSpi.java java/security/AlgorithmParametersSpi.java java/security/AllPermission.java java/security/BasicPermission.java java/security/Certificate.java java/security/CodeSource.java java/security/DigestException.java java/security/DigestOutputStream.java java/security/DummyKeyPairGenerator.java java/security/DummySignature.java java/security/DigestInputStream.java java/security/DomainCombiner.java java/security/DummyMessageDigest.java java/security/GeneralSecurityException.java java/security/Guard.java java/security/GuardedObject.java java/security/Identity.java java/security/IdentityScope.java java/security/InvalidAlgorithmParameterException.java java/security/InvalidKeyException.java java/security/InvalidParameterException.java java/security/Key.java java/security/KeyFactorySpi.java java/security/KeyPairGenerator.java java/security/KeyStoreException.java java/security/KeyException.java java/security/KeyManagementException.java java/security/KeyPairGeneratorSpi.java java/security/KeyStoreSpi.java java/security/KeyFactory.java java/security/KeyPair.java java/security/KeyStore.java java/security/MessageDigest.java java/security/MessageDigestSpi.java java/security/NoSuchAlgorithmException.java java/security/NoSuchProviderException.java java/security/Permission.java java/security/Principal.java java/security/PrivilegedExceptionAction.java java/security/PublicKey.java java/security/PermissionCollection.java java/security/PrivateKey.java java/security/ProtectionDomain.java java/security/Permissions.java java/security/PrivilegedAction.java java/security/Provider.java java/security/Policy.java java/security/PrivilegedActionException.java java/security/ProviderException.java java/security/SecureClassLoader.java java/security/SecureRandomSpi.java java/security/SecurityPermission.java java/security/SignatureException.java java/security/SignedObject.java java/security/SecureRandom.java java/security/Security.java java/security/Signature.java java/security/SignatureSpi.java java/security/Signer.java java/security/UnrecoverableKeyException.java java/security/UnresolvedPermission.java java/security/acl/Acl.java java/security/acl/AclNotFoundException.java java/security/acl/LastOwnerException.java java/security/acl/Owner.java java/security/acl/AclEntry.java java/security/acl/Group.java java/security/acl/NotOwnerException.java java/security/acl/Permission.java java/security/cert/CRL.java java/security/cert/CRLException.java java/security/cert/Certificate.java java/security/cert/CertificateEncodingException.java java/security/cert/CertificateException.java java/security/cert/CertificateExpiredException.java java/security/cert/CertificateFactory.java java/security/cert/CertificateFactorySpi.java java/security/cert/CertificateNotYetValidException.java java/security/cert/CertificateParsingException.java java/security/cert/X509CRL.java java/security/cert/X509CRLEntry.java java/security/cert/X509Certificate.java java/security/cert/X509Extension.java java/security/interfaces/DSAKey.java java/security/interfaces/DSAKeyPairGenerator.java java/security/interfaces/DSAParams.java java/security/interfaces/DSAPrivateKey.java java/security/interfaces/DSAPublicKey.java java/security/interfaces/RSAKey.java java/security/interfaces/RSAPrivateCrtKey.java java/security/interfaces/RSAPrivateKey.java java/security/interfaces/RSAPublicKey.java java/security/spec/AlgorithmParameterSpec.java java/security/spec/DSAParameterSpec.java java/security/spec/DSAPrivateKeySpec.java java/security/spec/DSAPublicKeySpec.java java/security/spec/EncodedKeySpec.java java/security/spec/InvalidKeySpecException.java java/security/spec/InvalidParameterSpecException.java java/security/spec/KeySpec.java java/security/spec/PKCS8EncodedKeySpec.java java/security/spec/RSAKeyGenParameterSpec.java java/security/spec/RSAPrivateCrtKeySpec.java java/security/spec/RSAPrivateKeySpec.java java/security/spec/RSAPublicKeySpec.java java/security/spec/X509EncodedKeySpec.java java/sql/Array.java java/sql/BatchUpdateException.java java/sql/Blob.java java/sql/CallableStatement.java\tjava/sql/Clob.java java/sql/Connection.java java/sql/DataTruncation.java java/sql/DatabaseMetaData.java java/sql/Date.java java/sql/Driver.java java/sql/DriverManager.java java/sql/DriverPropertyInfo.java java/sql/PreparedStatement.java\tjava/sql/Ref.java java/sql/ResultSet.java\tjava/sql/ResultSetMetaData.java\tjava/sql/SQLData.java java/sql/SQLException.java java/sql/SQLInput.java java/sql/SQLOutput.java java/sql/SQLWarning.java java/sql/Statement.java\tjava/sql/Struct.java\tjava/sql/Time.java java/sql/Timestamp.java\tjava/sql/Types.java java/text/BreakIterator.java java/text/CharacterIterator.java java/text/ChoiceFormat.java java/text/CollationElementIterator.java\tjava/text/CollationKey.java java/text/Collator.java\tjava/text/DateFormat.java java/text/DateFormatSymbols.java java/text/DecimalFormat.java java/text/DecimalFormatSymbols.java java/text/FieldPosition.java java/text/Format.java java/text/MessageFormat.java java/text/NumberFormat.java java/text/ParseException.java java/text/ParsePosition.java java/text/RuleBasedCollator.java java/text/SimpleDateFormat.java\tjava/text/StringCharacterIterator.java java/util/jar/Attributes.java java/util/jar/JarEntry.java java/util/jar/JarException.java java/util/jar/JarFile.java java/util/jar/JarInputStream.java java/util/jar/JarOutputStream.java java/util/jar/Manifest.java java/util/zip/Adler32.java java/util/zip/CRC32.java java/util/zip/CheckedInputStream.java java/util/zip/CheckedOutputStream.java java/util/zip/Checksum.java java/util/zip/DataFormatException.java java/util/zip/Deflater.java java/util/zip/DeflaterOutputStream.java\tjava/util/zip/GZIPInputStream.java java/util/zip/GZIPOutputStream.java java/util/zip/Inflater.java java/util/zip/InflaterInputStream.java java/util/zip/ZipConstants.java\tjava/util/zip/ZipEntry.java java/util/zip/ZipException.java\tjava/util/zip/ZipFile.java java/util/zip/ZipInputStream.java java/util/zip/ZipOutputStream.java org/w3c/dom/Attr.java org/w3c/dom/CDATASection.java org/w3c/dom/CharacterData.java org/w3c/dom/Comment.java org/w3c/dom/DOMException.java org/w3c/dom/DOMImplementation.java org/w3c/dom/Document.java org/w3c/dom/DocumentFragment.java org/w3c/dom/DocumentType.java org/w3c/dom/Element.java org/w3c/dom/Entity.java org/w3c/dom/EntityReference.java org/w3c/dom/NamedNodeMap.java org/w3c/dom/Node.java org/w3c/dom/NodeList.java org/w3c/dom/Notation.java org/w3c/dom/ProcessingInstruction.java org/w3c/dom/Text.java org/w3c/dom/ranges/DocumentRange.java org/w3c/dom/ranges/Range.java org/w3c/dom/ranges/RangeException.java org/w3c/dom/traversal/DocumentTraversal.java org/w3c/dom/traversal/NodeFilter.java org/w3c/dom/traversal/NodeIterator.java org/w3c/dom/traversal/TreeWalker.java org/xml/sax/ext/DeclHandler.java org/xml/sax/ext/LexicalHandler.java org/xml/sax/helpers/AttributeListImpl.java org/xml/sax/helpers/AttributesImpl.java org/xml/sax/helpers/DefaultHandler.java org/xml/sax/helpers/LocatorImpl.java org/xml/sax/helpers/NamespaceSupport.java org/xml/sax/helpers/ParserAdapter.java org/xml/sax/helpers/ParserFactory.java org/xml/sax/helpers/XMLFilterImpl.java org/xml/sax/helpers/XMLReaderAdapter.java org/xml/sax/helpers/XMLReaderFactory.java org/xml/sax/AttributeList.java org/xml/sax/Attributes.java org/xml/sax/ContentHandler.java org/xml/sax/DTDHandler.java org/xml/sax/DocumentHandler.java org/xml/sax/EntityResolver.java org/xml/sax/ErrorHandler.java org/xml/sax/HandlerBase.java org/xml/sax/InputSource.java org/xml/sax/Locator.java org/xml/sax/Parser.java org/xml/sax/SAXException.java org/xml/sax/SAXNotRecognizedException.java org/xml/sax/SAXNotSupportedException.java org/xml/sax/SAXParseException.java org/xml/sax/XMLFilter.java org/xml/sax/XMLReader.java $(awt_java_source_files) $(convert_source_files)\n+awt_java_source_files = \\\n+gnu/awt/LightweightRedirector.java \\\n+gnu/awt/j2d/AbstractGraphicsState.java \\\n+gnu/awt/j2d/DirectRasterGraphics.java \\\n+gnu/awt/j2d/Graphics2DImpl.java \\\n+gnu/awt/j2d/IntegerGraphicsState.java \\\n+gnu/awt/j2d/MappedRaster.java \\\n+gnu/gcj/awt/BitMaskExtent.java \\\n+gnu/gcj/awt/Buffers.java \\\n+gnu/gcj/awt/ComponentDataBlitOp.java \\\n+gnu/gcj/awt/GLightweightPeer.java \\\n+gnu/java/beans/editors/ColorEditor.java\t\\\n+gnu/java/beans/editors/FontEditor.java \\\n+gnu/java/beans/editors/NativeBooleanEditor.java\t\\\n+gnu/java/beans/editors/NativeByteEditor.java \\\n+gnu/java/beans/editors/NativeDoubleEditor.java \\\n+gnu/java/beans/editors/NativeFloatEditor.java \\\n+gnu/java/beans/editors/NativeIntEditor.java \\\n+gnu/java/beans/editors/NativeLongEditor.java \\\n+gnu/java/beans/editors/NativeShortEditor.java \\\n+gnu/java/beans/editors/StringEditor.java \\\n+gnu/java/beans/info/ComponentBeanInfo.java \\\n+gnu/java/beans/BeanInfoEmbryo.java \\\n+gnu/java/beans/EmptyBeanInfo.java \\\n+gnu/java/beans/ExplicitBeanInfo.java \\\n+gnu/java/beans/IntrospectionIncubator.java \\\n+java/applet/Applet.java \\\n+java/applet/AppletStub.java \\\n+java/applet/AppletContext.java \\\n+java/applet/AudioClip.java \\\n+java/awt/AWTError.java \\\n+java/awt/AWTEvent.java \\\n+java/awt/AWTEventMulticaster.java \\\n+java/awt/AWTException.java \\\n+java/awt/AWTPermission.java \\\n+java/awt/ActiveEvent.java \\\n+java/awt/Adjustable.java \\\n+java/awt/BorderLayout.java \\\n+java/awt/Button.java \\\n+java/awt/Canvas.java \\\n+java/awt/CardLayout.java \\\n+java/awt/Checkbox.java \\\n+java/awt/CheckboxGroup.java \\\n+java/awt/CheckboxMenuItem.java \\\n+java/awt/Choice.java \\\n+java/awt/Color.java \\\n+java/awt/Component.java\t\\\n+java/awt/ComponentOrientation.java \\\n+java/awt/Container.java\t\\\n+java/awt/Cursor.java \\\n+java/awt/Dialog.java \\\n+java/awt/Dimension.java\t\\\n+java/awt/Event.java \\\n+java/awt/EventDispatchThread.java \\\n+java/awt/EventQueue.java \\\n+java/awt/FileDialog.java \\\n+java/awt/FlowLayout.java \\\n+java/awt/Font.java \\\n+java/awt/FontMetrics.java \\\n+java/awt/Frame.java \\\n+java/awt/Graphics.java \\\n+java/awt/Graphics2D.java \\\n+java/awt/GraphicsConfiguration.java \\\n+java/awt/GridBagConstraints.java \\\n+java/awt/GridLayout.java \\\n+java/awt/IllegalComponentStateException.java \\\n+java/awt/Image.java \\\n+java/awt/Insets.java \\\n+java/awt/ItemSelectable.java \\\n+java/awt/Label.java \\\n+java/awt/LayoutManager.java \\\n+java/awt/LayoutManager2.java \\\n+java/awt/List.java \\\n+java/awt/Menu.java \\\n+java/awt/MenuBar.java \\\n+java/awt/MenuComponent.java \\\n+java/awt/MenuContainer.java \\\n+java/awt/MenuItem.java \\\n+java/awt/MenuShortcut.java \\\n+java/awt/Paint.java \\\n+java/awt/PaintContext.java \\\n+java/awt/Panel.java \\\n+java/awt/Point.java \\\n+java/awt/Polygon.java \\\n+java/awt/PopupMenu.java\t\\\n+java/awt/Rectangle.java\t\\\n+java/awt/RenderingHints.java \\\n+java/awt/ScrollPane.java \\\n+java/awt/Scrollbar.java\t\\\n+java/awt/Shape.java \\\n+java/awt/SystemColor.java \\\n+java/awt/TextArea.java \\\n+java/awt/TextComponent.java \\\n+java/awt/TextField.java\t\\\n+java/awt/Toolkit.java \\\n+java/awt/Transparency.java \\\n+java/awt/Window.java \\\n+java/awt/color/ColorSpace.java \\\n+java/awt/color/ICC_ColorSpace.java \\\n+java/awt/color/ICC_Profile.java\t\\\n+java/awt/datatransfer/Clipboard.java \\\n+java/awt/event/AWTEventListener.java \\\n+java/awt/event/ActionEvent.java\t\\\n+java/awt/event/ActionListener.java \\\n+java/awt/event/AdjustmentEvent.java \\\n+java/awt/event/AdjustmentListener.java \\\n+java/awt/event/ComponentAdapter.java \\\n+java/awt/event/ComponentEvent.java \\\n+java/awt/event/ComponentListener.java \\\n+java/awt/event/ContainerAdapter.java \\\n+java/awt/event/ContainerEvent.java \\\n+java/awt/event/ContainerListener.java \\\n+java/awt/event/FocusAdapter.java \\\n+java/awt/event/FocusEvent.java \\\n+java/awt/event/FocusListener.java \\\n+java/awt/event/HierarchyBoundsAdapter.java \\\n+java/awt/event/HierarchyBoundsListener.java \\\n+java/awt/event/HierarchyEvent.java \\\n+java/awt/event/HierarchyListener.java \\\n+java/awt/event/InputEvent.java \\\n+java/awt/event/InputMethodEvent.java \\\n+java/awt/event/InputMethodListener.java\t\\\n+java/awt/event/InvocationEvent.java \\\n+java/awt/event/ItemEvent.java \\\n+java/awt/event/ItemListener.java \\\n+java/awt/event/KeyAdapter.java \\\n+java/awt/event/KeyEvent.java \\\n+java/awt/event/KeyListener.java\t\\\n+java/awt/event/MouseAdapter.java \\\n+java/awt/event/MouseEvent.java \\\n+java/awt/event/MouseListener.java \\\n+java/awt/event/MouseMotionAdapter.java \\\n+java/awt/event/MouseMotionListener.java\t\\\n+java/awt/event/PaintEvent.java \\\n+java/awt/event/TextEvent.java \\\n+java/awt/event/TextListener.java \\\n+java/awt/event/WindowAdapter.java \\\n+java/awt/event/WindowEvent.java\t\\\n+java/awt/event/WindowListener.java \\\n+java/awt/geom/AffineTransform.java \\\n+java/awt/geom/Dimension2D.java \\\n+java/awt/geom/Ellipse2D.java \\\n+java/awt/geom/IllegalPathStateException.java \\\n+java/awt/geom/Line2D.java \\\n+java/awt/geom/NoninvertibleTransformException.java \\\n+java/awt/geom/PathIterator.java\t\\\n+java/awt/geom/Point2D.java \\\n+java/awt/geom/Rectangle2D.java \\\n+java/awt/geom/RectangularShape.java \\\n+java/awt/geom/RoundRectangle2D.java \\\n+java/awt/image/BufferedImage.java \\\n+java/awt/image/ColorModel.java \\\n+java/awt/image/ComponentColorModel.java\t\\\n+java/awt/image/ComponentSampleModel.java \\\n+java/awt/image/DataBuffer.java \\\n+java/awt/image/DataBufferByte.java \\\n+java/awt/image/DataBufferInt.java \\\n+java/awt/image/DataBufferUShort.java \\\n+java/awt/image/DirectColorModel.java \\\n+java/awt/image/ImageConsumer.java \\\n+java/awt/image/ImageObserver.java \\\n+java/awt/image/ImageProducer.java \\\n+java/awt/image/IndexColorModel.java \\\n+java/awt/image/PackedColorModel.java \\\n+java/awt/image/Raster.java \\\n+java/awt/image/RasterOp.java \\\n+java/awt/image/SampleModel.java\t\\\n+java/awt/image/SinglePixelPackedSampleModel.java \\\n+java/awt/image/WritableRaster.java \\\n+java/awt/peer/ButtonPeer.java \\\n+java/awt/peer/CanvasPeer.java \\\n+java/awt/peer/CheckboxMenuItemPeer.java\t\\\n+java/awt/peer/CheckboxPeer.java\t\\\n+java/awt/peer/ChoicePeer.java \\\n+java/awt/peer/ComponentPeer.java \\\n+java/awt/peer/ContainerPeer.java \\\n+java/awt/peer/DialogPeer.java \\\n+java/awt/peer/FileDialogPeer.java \\\n+java/awt/peer/FontPeer.java \\\n+java/awt/peer/FramePeer.java \\\n+java/awt/peer/LabelPeer.java \\\n+java/awt/peer/LightweightPeer.java \\\n+java/awt/peer/ListPeer.java \\\n+java/awt/peer/MenuBarPeer.java \\\n+java/awt/peer/MenuComponentPeer.java \\\n+java/awt/peer/MenuItemPeer.java\t\\\n+java/awt/peer/MenuPeer.java \\\n+java/awt/peer/PanelPeer.java \\\n+java/awt/peer/PopupMenuPeer.java \\\n+java/awt/peer/ScrollPanePeer.java \\\n+java/awt/peer/ScrollbarPeer.java \\\n+java/awt/peer/TextAreaPeer.java\t\\\n+java/awt/peer/TextComponentPeer.java \\\n+java/awt/peer/TextFieldPeer.java \\\n+java/awt/peer/WindowPeer.java \\\n+java/beans/beancontext/BeanContext.java\t\\\n+java/beans/beancontext/BeanContextChild.java \\\n+java/beans/beancontext/BeanContextChildComponentProxy.java \\\n+java/beans/beancontext/BeanContextChildSupport.java \\\n+java/beans/beancontext/BeanContextContainerProxy.java \\\n+java/beans/beancontext/BeanContextEvent.java \\\n+java/beans/beancontext/BeanContextMembershipEvent.java \\\n+java/beans/beancontext/BeanContextMembershipListener.java \\\n+java/beans/beancontext/BeanContextProxy.java \\\n+java/beans/beancontext/BeanContextServiceAvailableEvent.java \\\n+java/beans/beancontext/BeanContextServiceProvider.java \\\n+java/beans/beancontext/BeanContextServiceProviderBeanInfo.java \\\n+java/beans/beancontext/BeanContextServiceRevokedEvent.java \\\n+java/beans/beancontext/BeanContextServiceRevokedListener.java \\\n+java/beans/beancontext/BeanContextServices.java\t\\\n+java/beans/beancontext/BeanContextServicesListener.java\t\\\n+java/beans/BeanDescriptor.java \\\n+java/beans/BeanInfo.java \\\n+java/beans/Beans.java \\\n+java/beans/Customizer.java \\\n+java/beans/DesignMode.java \\\n+java/beans/EventSetDescriptor.java \\\n+java/beans/FeatureDescriptor.java \\\n+java/beans/IndexedPropertyDescriptor.java \\\n+java/beans/IntrospectionException.java \\\n+java/beans/Introspector.java \\\n+java/beans/MethodDescriptor.java \\\n+java/beans/ParameterDescriptor.java \\\n+java/beans/PropertyChangeEvent.java \\\n+java/beans/PropertyChangeListener.java \\\n+java/beans/PropertyChangeSupport.java \\\n+java/beans/PropertyDescriptor.java \\\n+java/beans/PropertyEditor.java \\\n+java/beans/PropertyEditorManager.java \\\n+java/beans/PropertyEditorSupport.java \\\n+java/beans/PropertyVetoException.java \\\n+java/beans/SimpleBeanInfo.java \\\n+java/beans/VetoableChangeListener.java \\\n+java/beans/VetoableChangeSupport.java \\\n+java/beans/Visibility.java\n+\n+\n+rmi_java_source_files = \\\n+java/rmi/activation/Activatable.java \\\n+java/rmi/activation/ActivateFailedException.java \\\n+java/rmi/activation/ActivationDesc.java\t\\\n+java/rmi/activation/ActivationException.java \\\n+java/rmi/activation/ActivationGroup.java \\\n+java/rmi/activation/ActivationGroupDesc.java \\\n+java/rmi/activation/ActivationGroupID.java \\\n+java/rmi/activation/ActivationID.java \\\n+java/rmi/activation/ActivationInstantiator.java\t\\\n+java/rmi/activation/ActivationMonitor.java \\\n+java/rmi/activation/ActivationSystem.java \\\n+java/rmi/activation/Activator.java \\\n+java/rmi/activation/UnknownGroupException.java \\\n+java/rmi/activation/UnknownObjectException.java\t\\\n+java/rmi/AccessException.java \\\n+java/rmi/AlreadyBoundException.java \\\n+java/rmi/ConnectException.java \\\n+java/rmi/ConnectIOException.java \\\n+java/rmi/MarshalException.java \\\n+java/rmi/MarshalledObject.java \\\n+java/rmi/Naming.java \\\n+java/rmi/NoSuchObjectException.java \\\n+java/rmi/NotBoundException.java\t\\\n+java/rmi/RMISecurityException.java \\\n+java/rmi/RMISecurityManager.java \\\n+java/rmi/Remote.java \\\n+java/rmi/RemoteException.java \\\n+java/rmi/ServerError.java \\\n+java/rmi/ServerException.java \\\n+java/rmi/ServerRuntimeException.java \\\n+java/rmi/StubNotFoundException.java \\\n+java/rmi/UnexpectedException.java \\\n+java/rmi/UnknownHostException.java \\\n+java/rmi/UnmarshalException.java \\\n+java/rmi/dgc/DGC.java \\\n+java/rmi/dgc/Lease.java\t\\\n+java/rmi/dgc/VMID.java \\\n+java/rmi/registry/LocateRegistry.java \\\n+java/rmi/registry/Registry.java\t\\\n+java/rmi/registry/RegistryHandler.java \\\n+java/rmi/server/ExportException.java \\\n+java/rmi/server/LoaderHandler.java \\\n+java/rmi/server/LogStream.java \\\n+java/rmi/server/ObjID.java \\\n+java/rmi/server/Operation.java \\\n+java/rmi/server/RMIClassLoader.java \\\n+java/rmi/server/RMIClientSocketFactory.java \\\n+java/rmi/server/RMIFailureHandler.java \\\n+java/rmi/server/RMIServerSocketFactory.java \\\n+java/rmi/server/RMISocketFactory.java \\\n+java/rmi/server/RemoteCall.java\t\\\n+java/rmi/server/RemoteObject.java \\\n+java/rmi/server/RemoteRef.java \\\n+java/rmi/server/RemoteServer.java \\\n+java/rmi/server/RemoteStub.java\t\\\n+java/rmi/server/ServerCloneException.java \\\n+java/rmi/server/ServerNotActiveException.java \\\n+java/rmi/server/ServerRef.java \\\n+java/rmi/server/Skeleton.java \\\n+java/rmi/server/SkeletonMismatchException.java \\\n+java/rmi/server/SkeletonNotFoundException.java \\\n+java/rmi/server/SocketSecurityException.java \\\n+java/rmi/server/UID.java \\\n+java/rmi/server/UnicastRemoteObject.java \\\n+java/rmi/server/Unreferenced.java \\\n+gnu/java/rmi/dgc/DGCImpl.java \\\n+gnu/java/rmi/dgc/DGCImpl_Skel.java \\\n+gnu/java/rmi/dgc/DGCImpl_Stub.java \\\n+gnu/java/rmi/registry/RegistryImpl.java\t\\\n+gnu/java/rmi/registry/RegistryImpl_Skel.java \\\n+gnu/java/rmi/registry/RegistryImpl_Stub.java \\\n+gnu/java/rmi/rmic/RMIC.java \\\n+gnu/java/rmi/rmic/TabbedWriter.java \\\n+gnu/java/rmi/server/ProtocolConstants.java \\\n+gnu/java/rmi/server/RMIDefaultSocketFactory.java \\\n+gnu/java/rmi/server/RMIHashes.java \\\n+gnu/java/rmi/server/RMIObjectInputStream.java \\\n+gnu/java/rmi/server/RMIObjectOutputStream.java \\\n+gnu/java/rmi/server/UnicastConnection.java \\\n+gnu/java/rmi/server/UnicastConnectionManager.java \\\n+gnu/java/rmi/server/UnicastRef.java \\\n+gnu/java/rmi/server/UnicastRemoteCall.java \\\n+gnu/java/rmi/server/UnicastRemoteStub.java \\\n+gnu/java/rmi/server/UnicastServer.java \\\n+gnu/java/rmi/server/UnicastServerRef.java\n+\n+\n+built_java_source_files = java/lang/ConcreteProcess.java \\\n+                          gnu/classpath/Configuration.java\n+\n+\n+core_java_source_files = \\\n+java/lang/AbstractMethodError.java \\\n+java/lang/ArithmeticException.java \\\n+java/lang/ArrayIndexOutOfBoundsException.java \\\n+java/lang/ArrayStoreException.java \\\n+java/lang/Boolean.java \\\n+java/lang/Byte.java \\\n+java/lang/Character.java \\\n+java/lang/ClassCastException.java \\\n+java/lang/ClassCircularityError.java \\\n+java/lang/ClassFormatError.java\t\\\n+java/lang/ClassLoader.java \\\n+java/lang/ClassNotFoundException.java \\\n+java/lang/CloneNotSupportedException.java \\\n+java/lang/Cloneable.java \\\n+java/lang/Comparable.java \\\n+java/lang/Compiler.java\t\\\n+java/lang/Double.java \\\n+java/lang/Error.java \\\n+java/lang/Exception.java \\\n+java/lang/ExceptionInInitializerError.java \\\n+java/lang/Float.java \\\n+java/lang/IllegalAccessError.java \\\n+java/lang/IllegalAccessException.java \\\n+java/lang/IllegalArgumentException.java\t\\\n+java/lang/IllegalMonitorStateException.java \\\n+java/lang/IllegalStateException.java \\\n+java/lang/IllegalThreadStateException.java \\\n+java/lang/IncompatibleClassChangeError.java \\\n+java/lang/IndexOutOfBoundsException.java \\\n+java/lang/InstantiationError.java \\\n+java/lang/InstantiationException.java \\\n+java/lang/Integer.java \\\n+java/lang/InternalError.java \\\n+java/lang/InterruptedException.java \\\n+java/lang/LinkageError.java \\\n+java/lang/Long.java \\\n+java/lang/Math.java \\\n+java/lang/NegativeArraySizeException.java \\\n+java/lang/NoClassDefFoundError.java \\\n+java/lang/NoSuchFieldError.java\t\\\n+java/lang/NoSuchFieldException.java \\\n+java/lang/NoSuchMethodError.java \\\n+java/lang/NoSuchMethodException.java \\\n+java/lang/NullPointerException.java \\\n+java/lang/Number.java \\\n+java/lang/NumberFormatException.java \\\n+java/lang/OutOfMemoryError.java\t\\\n+java/lang/Package.java \\\n+java/lang/Process.java \\\n+java/lang/Runnable.java\t\\\n+java/lang/Runtime.java \\\n+java/lang/RuntimeException.java\t\\\n+java/lang/RuntimePermission.java \\\n+java/lang/SecurityException.java \\\n+java/lang/SecurityManager.java \\\n+java/lang/Short.java \\\n+java/lang/StackOverflowError.java \\\n+java/lang/String.java \\\n+java/lang/StringBuffer.java \\\n+java/lang/StringIndexOutOfBoundsException.java \\\n+java/lang/System.java \\\n+java/lang/Thread.java \\\n+java/lang/ThreadDeath.java \\\n+java/lang/ThreadGroup.java \\\n+java/lang/ThreadLocal.java \\\n+java/lang/Throwable.java \\\n+java/lang/UnknownError.java \\\n+java/lang/UnsatisfiedLinkError.java \\\n+java/lang/UnsupportedOperationException.java \\\n+java/lang/VerifyError.java \\\n+java/lang/VirtualMachineError.java \\\n+java/lang/VMClassLoader.java \\\n+java/lang/Void.java \\\n+java/io/BufferedInputStream.java \\\n+java/io/BufferedOutputStream.java \\\n+java/io/BufferedReader.java \\\n+java/io/BufferedWriter.java \\\n+java/io/ByteArrayInputStream.java \\\n+java/io/ByteArrayOutputStream.java \\\n+java/io/CharArrayReader.java \\\n+java/io/CharArrayWriter.java \\\n+java/io/CharConversionException.java \\\n+java/io/DataInput.java \\\n+java/io/DataInputStream.java \\\n+java/io/DataOutput.java\t\\\n+java/io/DataOutputStream.java \\\n+java/io/EOFException.java \\\n+java/io/Externalizable.java \\\n+java/io/File.java \\\n+java/io/FileDescriptor.java \\\n+java/io/FileFilter.java \\\n+java/io/FileInputStream.java \\\n+java/io/FileNotFoundException.java \\\n+java/io/FileOutputStream.java \\\n+java/io/FilePermission.java \\\n+java/io/FileReader.java\t\\\n+java/io/FileWriter.java\t\\\n+java/io/FilenameFilter.java \\\n+java/io/FilterInputStream.java \\\n+java/io/FilterOutputStream.java\t\\\n+java/io/FilterReader.java \\\n+java/io/FilterWriter.java \\\n+java/io/IOException.java \\\n+java/io/InputStream.java \\\n+java/io/InputStreamReader.java \\\n+java/io/InterruptedIOException.java \\\n+java/io/InvalidClassException.java \\\n+java/io/InvalidObjectException.java \\\n+java/io/LineNumberInputStream.java \\\n+java/io/LineNumberReader.java \\\n+java/io/NotActiveException.java\t\\\n+java/io/NotSerializableException.java \\\n+java/io/ObjectInput.java \\\n+java/io/ObjectInputStream.java \\\n+java/io/ObjectInputValidation.java \\\n+java/io/ObjectOutput.java \\\n+java/io/ObjectOutputStream.java\t\\\n+java/io/ObjectStreamClass.java \\\n+java/io/ObjectStreamConstants.java \\\n+java/io/ObjectStreamException.java \\\n+java/io/ObjectStreamField.java \\\n+java/io/OptionalDataException.java \\\n+java/io/OutputStream.java \\\n+java/io/OutputStreamWriter.java\t\\\n+java/io/PipedInputStream.java \\\n+java/io/PipedOutputStream.java \\\n+java/io/PipedReader.java \\\n+java/io/PipedWriter.java \\\n+java/io/PrintStream.java \\\n+java/io/PrintWriter.java \\\n+java/io/PushbackInputStream.java \\\n+java/io/PushbackReader.java \\\n+java/io/RandomAccessFile.java \\\n+java/io/Reader.java \\\n+java/io/SequenceInputStream.java \\\n+java/io/Serializable.java \\\n+java/io/SerializablePermission.java \\\n+java/io/StreamCorruptedException.java \\\n+java/io/StreamTokenizer.java \\\n+java/io/StringBufferInputStream.java \\\n+java/io/StringReader.java \\\n+java/io/StringWriter.java \\\n+java/io/SyncFailedException.java \\\n+java/io/UTFDataFormatException.java \\\n+java/io/UnsupportedEncodingException.java \\\n+java/io/WriteAbortedException.java \\\n+java/io/Writer.java \\\n+java/util/AbstractCollection.java \\\n+java/util/AbstractList.java \\\n+java/util/AbstractMap.java \\\n+java/util/AbstractSequentialList.java \\\n+java/util/AbstractSet.java \\\n+java/util/ArrayList.java \\\n+java/util/Arrays.java \\\n+java/util/BasicMapEntry.java \\\n+java/util/BitSet.java \\\n+java/util/Calendar.java\t\\\n+java/util/Collection.java \\\n+java/util/Collections.java \\\n+java/util/Comparator.java \\\n+java/util/ConcurrentModificationException.java \\\n+java/util/Date.java \\\n+java/util/Dictionary.java \\\n+java/util/EmptyStackException.java \\\n+java/util/Enumeration.java \\\n+java/util/EventListener.java \\\n+java/util/EventObject.java \\\n+java/util/GregorianCalendar.java \\\n+java/util/HashMap.java \\\n+java/util/HashSet.java \\\n+java/util/Hashtable.java \\\n+java/util/IdentityHashMap.java \\\n+java/util/Iterator.java\t\\\n+java/util/LinkedList.java \\\n+java/util/List.java \\\n+java/util/ListIterator.java \\\n+java/util/ListResourceBundle.java \\\n+java/util/Locale.java \\\n+java/util/Map.java \\\n+java/util/MissingResourceException.java\t\\\n+java/util/NoSuchElementException.java \\\n+java/util/Observable.java \\\n+java/util/Observer.java\t\\\n+java/util/Properties.java \\\n+java/util/PropertyPermission.java \\\n+java/util/PropertyResourceBundle.java \\\n+java/util/Random.java \\\n+java/util/ResourceBundle.java \\\n+java/util/Set.java \\\n+java/util/SimpleTimeZone.java \\\n+java/util/SortedMap.java \\\n+java/util/SortedSet.java \\\n+java/util/Stack.java \\\n+java/util/StringTokenizer.java \\\n+java/util/TimeZone.java\t\\\n+java/util/Timer.java \\\n+java/util/TimerTask.java \\\n+java/util/TreeMap.java \\\n+java/util/TreeSet.java \\\n+java/util/TooManyListenersException.java \\\n+java/util/Vector.java \\\n+java/util/WeakHashMap.java\n+\n+\n+ordinary_java_source_files = $(core_java_source_files) \\\n+gnu/gcj/RawData.java \\\n+gnu/gcj/io/DefaultMimeTypes.java \\\n+gnu/gcj/io/MimeTypes.java \\\n+gnu/gcj/io/SimpleSHSStream.java\t\\\n+gnu/gcj/math/MPN.java \\\n+gnu/gcj/protocol/file/Connection.java \\\n+gnu/gcj/protocol/file/Handler.java \\\n+gnu/gcj/protocol/http/Connection.java \\\n+gnu/gcj/protocol/http/Handler.java \\\n+gnu/gcj/protocol/jar/Connection.java \\\n+gnu/gcj/protocol/jar/Handler.java \\\n+gnu/gcj/runtime/FileDeleter.java \\\n+gnu/gcj/runtime/FirstThread.java \\\n+gnu/gcj/runtime/VMClassLoader.java \\\n+gnu/gcj/text/BaseBreakIterator.java \\\n+gnu/gcj/text/CharacterBreakIterator.java \\\n+gnu/gcj/text/LineBreakIterator.java \\\n+gnu/gcj/text/LocaleData_en.java\t\\\n+gnu/gcj/text/LocaleData_en_US.java \\\n+gnu/gcj/text/SentenceBreakIterator.java\t\\\n+gnu/gcj/text/WordBreakIterator.java \\\n+gnu/gcj/util/EnumerationChain.java \\\n+gnu/java/io/ClassLoaderObjectInputStream.java \\\n+gnu/java/io/NullOutputStream.java \\\n+gnu/java/io/ObjectIdentityWrapper.java \\\n+gnu/java/lang/ArrayHelper.java \\\n+gnu/java/lang/ClassHelper.java \\\n+gnu/java/lang/reflect/TypeSignature.java \\\n+gnu/java/locale/Calendar.java \\\n+gnu/java/locale/Calendar_de.java \\\n+gnu/java/locale/Calendar_en.java \\\n+gnu/java/locale/Calendar_nl.java \\\n+gnu/java/security/provider/DefaultPolicy.java \\\n+gnu/java/security/provider/Gnu.java \\\n+gnu/java/security/provider/SHA.java \\\n+gnu/java/security/provider/SHA1PRNG.java \\\n+java/lang/ref/PhantomReference.java \\\n+java/lang/ref/Reference.java \\\n+java/lang/ref/ReferenceQueue.java \\\n+java/lang/ref/SoftReference.java \\\n+java/lang/ref/WeakReference.java \\\n+java/lang/reflect/AccessibleObject.java\t\\\n+java/lang/reflect/Array.java \\\n+java/lang/reflect/Constructor.java \\\n+java/lang/reflect/Field.java \\\n+java/lang/reflect/InvocationTargetException.java \\\n+java/lang/reflect/Member.java \\\n+java/lang/reflect/Method.java \\\n+java/lang/reflect/Modifier.java\t\\\n+java/lang/reflect/ReflectPermission.java \\\n+java/math/BigDecimal.java \\\n+java/math/BigInteger.java \\\n+java/net/BindException.java \\\n+java/net/ConnectException.java \\\n+java/net/ContentHandler.java \\\n+java/net/ContentHandlerFactory.java \\\n+java/net/DatagramPacket.java \\\n+java/net/DatagramSocket.java \\\n+java/net/DatagramSocketImpl.java \\\n+java/net/FileNameMap.java \\\n+java/net/HttpURLConnection.java\t\\\n+java/net/InetAddress.java \\\n+java/net/JarURLConnection.java \\\n+java/net/MalformedURLException.java \\\n+java/net/MulticastSocket.java \\\n+java/net/NetPermission.java \\\n+java/net/NoRouteToHostException.java \\\n+java/net/PlainDatagramSocketImpl.java \\\n+java/net/PlainSocketImpl.java \\\n+java/net/ProtocolException.java\t\\\n+java/net/ServerSocket.java \\\n+java/net/Socket.java \\\n+java/net/SocketException.java \\\n+java/net/SocketImpl.java \\\n+java/net/SocketImplFactory.java\t\\\n+java/net/SocketOptions.java \\\n+java/net/SocketPermission.java \\\n+java/net/URL.java \\\n+java/net/URLClassLoader.java \\\n+java/net/URLConnection.java \\\n+java/net/URLDecoder.java \\\n+java/net/URLEncoder.java \\\n+java/net/URLStreamHandler.java \\\n+java/net/URLStreamHandlerFactory.java \\\n+java/net/UnknownHostException.java \\\n+java/net/UnknownServiceException.java \\\n+java/security/AccessControlContext.java \\\n+java/security/AccessControlException.java \\\n+java/security/AccessController.java \\\n+java/security/AlgorithmParameterGenerator.java \\\n+java/security/AlgorithmParameters.java \\\n+java/security/AlgorithmParameterGeneratorSpi.java \\\n+java/security/AlgorithmParametersSpi.java \\\n+java/security/AllPermission.java \\\n+java/security/BasicPermission.java \\\n+java/security/Certificate.java \\\n+java/security/CodeSource.java \\\n+java/security/DigestException.java \\\n+java/security/DigestOutputStream.java \\\n+java/security/DummyKeyPairGenerator.java \\\n+java/security/DummySignature.java \\\n+java/security/DigestInputStream.java \\\n+java/security/DomainCombiner.java \\\n+java/security/DummyMessageDigest.java \\\n+java/security/GeneralSecurityException.java \\\n+java/security/Guard.java \\\n+java/security/GuardedObject.java \\\n+java/security/Identity.java \\\n+java/security/IdentityScope.java \\\n+java/security/InvalidAlgorithmParameterException.java \\\n+java/security/InvalidKeyException.java \\\n+java/security/InvalidParameterException.java \\\n+java/security/Key.java \\\n+java/security/KeyFactorySpi.java \\\n+java/security/KeyPairGenerator.java \\\n+java/security/KeyStoreException.java \\\n+java/security/KeyException.java \\\n+java/security/KeyManagementException.java \\\n+java/security/KeyPairGeneratorSpi.java \\\n+java/security/KeyStoreSpi.java \\\n+java/security/KeyFactory.java \\\n+java/security/KeyPair.java \\\n+java/security/KeyStore.java \\\n+java/security/MessageDigest.java \\\n+java/security/MessageDigestSpi.java \\\n+java/security/NoSuchAlgorithmException.java \\\n+java/security/NoSuchProviderException.java \\\n+java/security/Permission.java \\\n+java/security/Principal.java \\\n+java/security/PrivilegedExceptionAction.java \\\n+java/security/PublicKey.java \\\n+java/security/PermissionCollection.java \\\n+java/security/PrivateKey.java \\\n+java/security/ProtectionDomain.java \\\n+java/security/Permissions.java \\\n+java/security/PrivilegedAction.java \\\n+java/security/Provider.java \\\n+java/security/Policy.java \\\n+java/security/PrivilegedActionException.java \\\n+java/security/ProviderException.java \\\n+java/security/SecureClassLoader.java \\\n+java/security/SecureRandomSpi.java \\\n+java/security/SecurityPermission.java \\\n+java/security/SignatureException.java \\\n+java/security/SignedObject.java \\\n+java/security/SecureRandom.java \\\n+java/security/Security.java \\\n+java/security/Signature.java \\\n+java/security/SignatureSpi.java \\\n+java/security/Signer.java \\\n+java/security/UnrecoverableKeyException.java \\\n+java/security/UnresolvedPermission.java \\\n+java/security/acl/Acl.java \\\n+java/security/acl/AclNotFoundException.java \\\n+java/security/acl/LastOwnerException.java \\\n+java/security/acl/Owner.java \\\n+java/security/acl/AclEntry.java \\\n+java/security/acl/Group.java \\\n+java/security/acl/NotOwnerException.java \\\n+java/security/acl/Permission.java \\\n+java/security/cert/CRL.java \\\n+java/security/cert/CRLException.java \\\n+java/security/cert/Certificate.java \\\n+java/security/cert/CertificateEncodingException.java \\\n+java/security/cert/CertificateException.java \\\n+java/security/cert/CertificateExpiredException.java \\\n+java/security/cert/CertificateFactory.java \\\n+java/security/cert/CertificateFactorySpi.java \\\n+java/security/cert/CertificateNotYetValidException.java \\\n+java/security/cert/CertificateParsingException.java \\\n+java/security/cert/X509CRL.java \\\n+java/security/cert/X509CRLEntry.java \\\n+java/security/cert/X509Certificate.java \\\n+java/security/cert/X509Extension.java \\\n+java/security/interfaces/DSAKey.java \\\n+java/security/interfaces/DSAKeyPairGenerator.java \\\n+java/security/interfaces/DSAParams.java \\\n+java/security/interfaces/DSAPrivateKey.java \\\n+java/security/interfaces/DSAPublicKey.java \\\n+java/security/interfaces/RSAKey.java \\\n+java/security/interfaces/RSAPrivateCrtKey.java \\\n+java/security/interfaces/RSAPrivateKey.java \\\n+java/security/interfaces/RSAPublicKey.java \\\n+java/security/spec/AlgorithmParameterSpec.java \\\n+java/security/spec/DSAParameterSpec.java \\\n+java/security/spec/DSAPrivateKeySpec.java \\\n+java/security/spec/DSAPublicKeySpec.java \\\n+java/security/spec/EncodedKeySpec.java \\\n+java/security/spec/InvalidKeySpecException.java \\\n+java/security/spec/InvalidParameterSpecException.java \\\n+java/security/spec/KeySpec.java \\\n+java/security/spec/PKCS8EncodedKeySpec.java \\\n+java/security/spec/RSAKeyGenParameterSpec.java \\\n+java/security/spec/RSAPrivateCrtKeySpec.java \\\n+java/security/spec/RSAPrivateKeySpec.java \\\n+java/security/spec/RSAPublicKeySpec.java \\\n+java/security/spec/X509EncodedKeySpec.java \\\n+java/sql/Array.java \\\n+java/sql/BatchUpdateException.java \\\n+java/sql/Blob.java \\\n+java/sql/CallableStatement.java\t\\\n+java/sql/Clob.java \\\n+java/sql/Connection.java \\\n+java/sql/DataTruncation.java \\\n+java/sql/DatabaseMetaData.java \\\n+java/sql/Date.java \\\n+java/sql/Driver.java \\\n+java/sql/DriverManager.java \\\n+java/sql/DriverPropertyInfo.java \\\n+java/sql/PreparedStatement.java\t\\\n+java/sql/Ref.java \\\n+java/sql/ResultSet.java\t\\\n+java/sql/ResultSetMetaData.java\t\\\n+java/sql/SQLData.java \\\n+java/sql/SQLException.java \\\n+java/sql/SQLInput.java \\\n+java/sql/SQLOutput.java \\\n+java/sql/SQLWarning.java \\\n+java/sql/Statement.java\t\\\n+java/sql/Struct.java\t\\\n+java/sql/Time.java \\\n+java/sql/Timestamp.java\t\\\n+java/sql/Types.java \\\n+java/text/BreakIterator.java \\\n+java/text/CharacterIterator.java \\\n+java/text/ChoiceFormat.java \\\n+java/text/CollationElementIterator.java\t\\\n+java/text/CollationKey.java \\\n+java/text/Collator.java\t\\\n+java/text/DateFormat.java \\\n+java/text/DateFormatSymbols.java \\\n+java/text/DecimalFormat.java \\\n+java/text/DecimalFormatSymbols.java \\\n+java/text/FieldPosition.java \\\n+java/text/Format.java \\\n+java/text/MessageFormat.java \\\n+java/text/NumberFormat.java \\\n+java/text/ParseException.java \\\n+java/text/ParsePosition.java \\\n+java/text/RuleBasedCollator.java \\\n+java/text/SimpleDateFormat.java\t\\\n+java/text/StringCharacterIterator.java \\\n+java/util/jar/Attributes.java \\\n+java/util/jar/JarEntry.java \\\n+java/util/jar/JarException.java \\\n+java/util/jar/JarFile.java \\\n+java/util/jar/JarInputStream.java \\\n+java/util/jar/JarOutputStream.java \\\n+java/util/jar/Manifest.java \\\n+java/util/zip/Adler32.java \\\n+java/util/zip/CRC32.java \\\n+java/util/zip/CheckedInputStream.java \\\n+java/util/zip/CheckedOutputStream.java \\\n+java/util/zip/Checksum.java \\\n+java/util/zip/DataFormatException.java \\\n+java/util/zip/Deflater.java \\\n+java/util/zip/DeflaterOutputStream.java\t\\\n+java/util/zip/GZIPInputStream.java \\\n+java/util/zip/GZIPOutputStream.java \\\n+java/util/zip/Inflater.java \\\n+java/util/zip/InflaterInputStream.java \\\n+java/util/zip/ZipConstants.java\t\\\n+java/util/zip/ZipEntry.java \\\n+java/util/zip/ZipException.java\t\\\n+java/util/zip/ZipFile.java \\\n+java/util/zip/ZipInputStream.java \\\n+java/util/zip/ZipOutputStream.java \\\n+org/w3c/dom/Attr.java \\\n+org/w3c/dom/CDATASection.java \\\n+org/w3c/dom/CharacterData.java \\\n+org/w3c/dom/Comment.java \\\n+org/w3c/dom/DOMException.java \\\n+org/w3c/dom/DOMImplementation.java \\\n+org/w3c/dom/Document.java \\\n+org/w3c/dom/DocumentFragment.java \\\n+org/w3c/dom/DocumentType.java \\\n+org/w3c/dom/Element.java \\\n+org/w3c/dom/Entity.java \\\n+org/w3c/dom/EntityReference.java \\\n+org/w3c/dom/NamedNodeMap.java \\\n+org/w3c/dom/Node.java \\\n+org/w3c/dom/NodeList.java \\\n+org/w3c/dom/Notation.java \\\n+org/w3c/dom/ProcessingInstruction.java \\\n+org/w3c/dom/Text.java \\\n+org/w3c/dom/ranges/DocumentRange.java \\\n+org/w3c/dom/ranges/Range.java \\\n+org/w3c/dom/ranges/RangeException.java \\\n+org/w3c/dom/traversal/DocumentTraversal.java \\\n+org/w3c/dom/traversal/NodeFilter.java \\\n+org/w3c/dom/traversal/NodeIterator.java \\\n+org/w3c/dom/traversal/TreeWalker.java \\\n+org/xml/sax/ext/DeclHandler.java \\\n+org/xml/sax/ext/LexicalHandler.java \\\n+org/xml/sax/helpers/AttributeListImpl.java \\\n+org/xml/sax/helpers/AttributesImpl.java \\\n+org/xml/sax/helpers/DefaultHandler.java \\\n+org/xml/sax/helpers/LocatorImpl.java \\\n+org/xml/sax/helpers/NamespaceSupport.java \\\n+org/xml/sax/helpers/ParserAdapter.java \\\n+org/xml/sax/helpers/ParserFactory.java \\\n+org/xml/sax/helpers/XMLFilterImpl.java \\\n+org/xml/sax/helpers/XMLReaderAdapter.java \\\n+org/xml/sax/helpers/XMLReaderFactory.java \\\n+org/xml/sax/AttributeList.java \\\n+org/xml/sax/Attributes.java \\\n+org/xml/sax/ContentHandler.java \\\n+org/xml/sax/DTDHandler.java \\\n+org/xml/sax/DocumentHandler.java \\\n+org/xml/sax/EntityResolver.java \\\n+org/xml/sax/ErrorHandler.java \\\n+org/xml/sax/HandlerBase.java \\\n+org/xml/sax/InputSource.java \\\n+org/xml/sax/Locator.java \\\n+org/xml/sax/Parser.java \\\n+org/xml/sax/SAXException.java \\\n+org/xml/sax/SAXNotRecognizedException.java \\\n+org/xml/sax/SAXNotSupportedException.java \\\n+org/xml/sax/SAXParseException.java \\\n+org/xml/sax/XMLFilter.java \\\n+org/xml/sax/XMLReader.java \\\n+$(rmi_java_source_files) \\\n+$(awt_java_source_files) \\\n+$(convert_source_files)\n \n \n java_source_files = $(special_java_source_files) $(ordinary_java_source_files)\n \n-c_source_files =    java/lang/dtoa.c        java/lang/k_rem_pio2.c  java/lang/s_tan.c         java/lang/e_acos.c      java/lang/k_sin.c       java/lang/strtod.c        java/lang/e_asin.c      java/lang/k_tan.c       java/lang/w_acos.c        java/lang/e_atan2.c     java/lang/mprec.c       java/lang/w_asin.c        java/lang/e_exp.c       java/lang/s_atan.c      java/lang/w_atan2.c       java/lang/e_fmod.c      java/lang/s_ceil.c      java/lang/w_exp.c         java/lang/e_log.c       java/lang/s_copysign.c  java/lang/w_fmod.c        java/lang/e_pow.c       java/lang/s_cos.c       java/lang/w_log.c         java/lang/e_rem_pio2.c  java/lang/s_fabs.c      java/lang/w_pow.c         java/lang/e_remainder.c java/lang/s_floor.c     java/lang/w_remainder.c   java/lang/e_scalb.c     java/lang/s_rint.c      java/lang/w_sqrt.c        java/lang/e_sqrt.c      java/lang/s_scalbn.c    java/lang/sf_rint.c       java/lang/k_cos.c       java/lang/s_sin.c       java/lang/sf_fabs.c\n+c_source_files = \\\n+  java/lang/dtoa.c        java/lang/k_rem_pio2.c  java/lang/s_tan.c       \\\n+  java/lang/e_acos.c      java/lang/k_sin.c       java/lang/strtod.c      \\\n+  java/lang/e_asin.c      java/lang/k_tan.c       java/lang/w_acos.c      \\\n+  java/lang/e_atan2.c     java/lang/mprec.c       java/lang/w_asin.c      \\\n+  java/lang/e_exp.c       java/lang/s_atan.c      java/lang/w_atan2.c     \\\n+  java/lang/e_fmod.c      java/lang/s_ceil.c      java/lang/w_exp.c       \\\n+  java/lang/e_log.c       java/lang/s_copysign.c  java/lang/w_fmod.c      \\\n+  java/lang/e_pow.c       java/lang/s_cos.c       java/lang/w_log.c       \\\n+  java/lang/e_rem_pio2.c  java/lang/s_fabs.c      java/lang/w_pow.c       \\\n+  java/lang/e_remainder.c java/lang/s_floor.c     java/lang/w_remainder.c \\\n+  java/lang/e_scalb.c     java/lang/s_rint.c      java/lang/w_sqrt.c      \\\n+  java/lang/e_sqrt.c      java/lang/s_scalbn.c    java/lang/sf_rint.c     \\\n+  java/lang/k_cos.c       java/lang/s_sin.c       java/lang/sf_fabs.c\n \n \n #java/awt/natToolkit.cc\n \n-nat_source_files =  gnu/gcj/convert/JIS0208_to_Unicode.cc gnu/gcj/convert/JIS0212_to_Unicode.cc gnu/gcj/convert/Unicode_to_JIS.cc gnu/gcj/convert/natIconv.cc gnu/gcj/convert/natInput_EUCJIS.cc gnu/gcj/convert/natInput_SJIS.cc gnu/gcj/convert/natOutput_EUCJIS.cc gnu/gcj/convert/natOutput_SJIS.cc gnu/gcj/io/natSimpleSHSStream.cc gnu/gcj/io/shs.cc gnu/gcj/runtime/natFirstThread.cc java/io/natFile.cc java/io/natFileDescriptor.cc java/io/natObjectInputStream.cc java/io/natObjectOutputStream.cc java/lang/natCharacter.cc java/lang/natClass.cc java/lang/natClassLoader.cc java/lang/natConcreteProcess.cc java/lang/natDouble.cc java/lang/natFloat.cc java/lang/natMath.cc java/lang/natObject.cc java/lang/natRuntime.cc\tjava/lang/natString.cc java/lang/natStringBuffer.cc java/lang/natSystem.cc java/lang/natThread.cc java/lang/natThrowable.cc java/lang/reflect/natArray.cc java/lang/reflect/natConstructor.cc java/lang/reflect/natField.cc java/lang/reflect/natMethod.cc java/net/natInetAddress.cc java/net/natPlainDatagramSocketImpl.cc java/net/natPlainSocketImpl.cc java/text/natCollator.cc java/util/zip/natDeflater.cc java/util/zip/natInflater.cc\n-\n-\n-x_java_source_files =  gnu/gcj/xlib/Clip.java gnu/gcj/xlib/Colormap.java gnu/gcj/xlib/Display.java gnu/gcj/xlib/Drawable.java gnu/gcj/xlib/Font.java gnu/gcj/xlib/GC.java gnu/gcj/xlib/Pixmap.java gnu/gcj/xlib/Screen.java gnu/gcj/xlib/Visual.java gnu/gcj/xlib/WMSizeHints.java gnu/gcj/xlib/Window.java gnu/gcj/xlib/WindowAttributes.java gnu/gcj/xlib/XAnyEvent.java gnu/gcj/xlib/XButtonEvent.java gnu/gcj/xlib/XColor.java gnu/gcj/xlib/XConfigureEvent.java gnu/gcj/xlib/XConnectException.java gnu/gcj/xlib/XEvent.java gnu/gcj/xlib/XException.java gnu/gcj/xlib/XExposeEvent.java gnu/gcj/xlib/XID.java gnu/gcj/xlib/XImage.java gnu/gcj/xlib/XUnmapEvent.java gnu/awt/xlib/XCanvasPeer.java gnu/awt/xlib/XEventLoop.java gnu/awt/xlib/XEventQueue.java gnu/awt/xlib/XFontMetrics.java gnu/awt/xlib/XFramePeer.java gnu/awt/xlib/XGraphics.java gnu/awt/xlib/XGraphicsConfiguration.java gnu/awt/xlib/XPanelPeer.java gnu/awt/xlib/XToolkit.java\n-\n-\n-x_nat_source_files =  gnu/gcj/xlib/natClip.cc gnu/gcj/xlib/natColormap.cc gnu/gcj/xlib/natDisplay.cc gnu/gcj/xlib/natDrawable.cc gnu/gcj/xlib/natFont.cc gnu/gcj/xlib/natGC.cc gnu/gcj/xlib/natPixmap.cc gnu/gcj/xlib/natScreen.cc gnu/gcj/xlib/natVisual.cc gnu/gcj/xlib/natWMSizeHints.cc gnu/gcj/xlib/natWindow.cc gnu/gcj/xlib/natWindowAttributes.cc gnu/gcj/xlib/natXAnyEvent.cc gnu/gcj/xlib/natXButtonEvent.cc gnu/gcj/xlib/natXColor.cc gnu/gcj/xlib/natXConfigureEvent.cc gnu/gcj/xlib/natXException.cc gnu/gcj/xlib/natXExposeEvent.cc gnu/gcj/xlib/natXImage.cc gnu/gcj/xlib/natXUnmapEvent.cc\n+nat_source_files = \\\n+gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n+gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n+gnu/gcj/convert/Unicode_to_JIS.cc \\\n+gnu/gcj/convert/natIconv.cc \\\n+gnu/gcj/convert/natInput_EUCJIS.cc \\\n+gnu/gcj/convert/natInput_SJIS.cc \\\n+gnu/gcj/convert/natOutput_EUCJIS.cc \\\n+gnu/gcj/convert/natOutput_SJIS.cc \\\n+gnu/gcj/io/natSimpleSHSStream.cc \\\n+gnu/gcj/io/shs.cc \\\n+gnu/gcj/runtime/natFirstThread.cc \\\n+java/io/natFile.cc \\\n+java/io/natFileDescriptor.cc \\\n+java/io/natObjectInputStream.cc \\\n+java/io/natObjectOutputStream.cc \\\n+java/lang/natCharacter.cc \\\n+java/lang/natClass.cc \\\n+java/lang/natClassLoader.cc \\\n+java/lang/natConcreteProcess.cc \\\n+java/lang/natDouble.cc \\\n+java/lang/natFloat.cc \\\n+java/lang/natMath.cc \\\n+java/lang/natObject.cc \\\n+java/lang/natRuntime.cc\t\\\n+java/lang/natString.cc \\\n+java/lang/natStringBuffer.cc \\\n+java/lang/natSystem.cc \\\n+java/lang/natThread.cc \\\n+java/lang/natThrowable.cc \\\n+java/lang/reflect/natArray.cc \\\n+java/lang/reflect/natConstructor.cc \\\n+java/lang/reflect/natField.cc \\\n+java/lang/reflect/natMethod.cc \\\n+java/net/natInetAddress.cc \\\n+java/net/natPlainDatagramSocketImpl.cc \\\n+java/net/natPlainSocketImpl.cc \\\n+java/text/natCollator.cc \\\n+java/util/zip/natDeflater.cc \\\n+java/util/zip/natInflater.cc\n+\n+\n+x_java_source_files = \\\n+gnu/gcj/xlib/Clip.java \\\n+gnu/gcj/xlib/Colormap.java \\\n+gnu/gcj/xlib/Display.java \\\n+gnu/gcj/xlib/Drawable.java \\\n+gnu/gcj/xlib/Font.java \\\n+gnu/gcj/xlib/GC.java \\\n+gnu/gcj/xlib/Pixmap.java \\\n+gnu/gcj/xlib/Screen.java \\\n+gnu/gcj/xlib/Visual.java \\\n+gnu/gcj/xlib/WMSizeHints.java \\\n+gnu/gcj/xlib/Window.java \\\n+gnu/gcj/xlib/WindowAttributes.java \\\n+gnu/gcj/xlib/XAnyEvent.java \\\n+gnu/gcj/xlib/XButtonEvent.java \\\n+gnu/gcj/xlib/XColor.java \\\n+gnu/gcj/xlib/XConfigureEvent.java \\\n+gnu/gcj/xlib/XConnectException.java \\\n+gnu/gcj/xlib/XEvent.java \\\n+gnu/gcj/xlib/XException.java \\\n+gnu/gcj/xlib/XExposeEvent.java \\\n+gnu/gcj/xlib/XID.java \\\n+gnu/gcj/xlib/XImage.java \\\n+gnu/gcj/xlib/XUnmapEvent.java \\\n+gnu/awt/xlib/XCanvasPeer.java \\\n+gnu/awt/xlib/XEventLoop.java \\\n+gnu/awt/xlib/XEventQueue.java \\\n+gnu/awt/xlib/XFontMetrics.java \\\n+gnu/awt/xlib/XFramePeer.java \\\n+gnu/awt/xlib/XGraphics.java \\\n+gnu/awt/xlib/XGraphicsConfiguration.java \\\n+gnu/awt/xlib/XPanelPeer.java \\\n+gnu/awt/xlib/XToolkit.java\n+\n+\n+x_nat_source_files = \\\n+gnu/gcj/xlib/natClip.cc \\\n+gnu/gcj/xlib/natColormap.cc \\\n+gnu/gcj/xlib/natDisplay.cc \\\n+gnu/gcj/xlib/natDrawable.cc \\\n+gnu/gcj/xlib/natFont.cc \\\n+gnu/gcj/xlib/natGC.cc \\\n+gnu/gcj/xlib/natPixmap.cc \\\n+gnu/gcj/xlib/natScreen.cc \\\n+gnu/gcj/xlib/natVisual.cc \\\n+gnu/gcj/xlib/natWMSizeHints.cc \\\n+gnu/gcj/xlib/natWindow.cc \\\n+gnu/gcj/xlib/natWindowAttributes.cc \\\n+gnu/gcj/xlib/natXAnyEvent.cc \\\n+gnu/gcj/xlib/natXButtonEvent.cc \\\n+gnu/gcj/xlib/natXColor.cc \\\n+gnu/gcj/xlib/natXConfigureEvent.cc \\\n+gnu/gcj/xlib/natXException.cc \\\n+gnu/gcj/xlib/natXExposeEvent.cc \\\n+gnu/gcj/xlib/natXImage.cc \\\n+gnu/gcj/xlib/natXUnmapEvent.cc\n \n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"JC1FLAGS=$(JC1FLAGS)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"prefix=$(prefix)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"NM=$(NM)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"DESTDIR=$(DESTDIR)\"\n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"JC1FLAGS=$(JC1FLAGS)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"DESTDIR=$(DESTDIR)\"\n \n \n CONFIG_STATUS_DEPENDENCIES = $(srcdir)/configure.host\n@@ -337,13 +1400,16 @@ gnu/gcj/xlib/natXButtonEvent.lo gnu/gcj/xlib/natXColor.lo \\\n gnu/gcj/xlib/natXConfigureEvent.lo gnu/gcj/xlib/natXException.lo \\\n gnu/gcj/xlib/natXExposeEvent.lo gnu/gcj/xlib/natXImage.lo \\\n gnu/gcj/xlib/natXUnmapEvent.lo\n-@NATIVE_TRUE@bin_PROGRAMS =  jv-convert$(EXEEXT) gij$(EXEEXT)\n+@NATIVE_TRUE@bin_PROGRAMS =  jv-convert$(EXEEXT) gij$(EXEEXT) \\\n+@NATIVE_TRUE@rmic$(EXEEXT) rmiregistry$(EXEEXT)\n @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS =  \\\n @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS$(EXEEXT)\n PROGRAMS =  $(bin_PROGRAMS) $(noinst_PROGRAMS)\n \n jv_convert_OBJECTS = \n gij_OBJECTS =  gij.$(OBJEXT)\n+rmic_OBJECTS = \n+rmiregistry_OBJECTS = \n gen_from_JIS_OBJECTS = \n gen_from_JIS_LDFLAGS = \n SCRIPTS =  $(bin_SCRIPTS)\n@@ -366,7 +1432,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -473,6 +1539,24 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/lang/reflect/TypeSignature.P \\\n .deps/gnu/java/locale/Calendar.P .deps/gnu/java/locale/Calendar_de.P \\\n .deps/gnu/java/locale/Calendar_en.P .deps/gnu/java/locale/Calendar_nl.P \\\n+.deps/gnu/java/rmi/dgc/DGCImpl.P .deps/gnu/java/rmi/dgc/DGCImpl_Skel.P \\\n+.deps/gnu/java/rmi/dgc/DGCImpl_Stub.P \\\n+.deps/gnu/java/rmi/registry/RegistryImpl.P \\\n+.deps/gnu/java/rmi/registry/RegistryImpl_Skel.P \\\n+.deps/gnu/java/rmi/registry/RegistryImpl_Stub.P \\\n+.deps/gnu/java/rmi/rmic/RMIC.P .deps/gnu/java/rmi/rmic/TabbedWriter.P \\\n+.deps/gnu/java/rmi/server/ProtocolConstants.P \\\n+.deps/gnu/java/rmi/server/RMIDefaultSocketFactory.P \\\n+.deps/gnu/java/rmi/server/RMIHashes.P \\\n+.deps/gnu/java/rmi/server/RMIObjectInputStream.P \\\n+.deps/gnu/java/rmi/server/RMIObjectOutputStream.P \\\n+.deps/gnu/java/rmi/server/UnicastConnection.P \\\n+.deps/gnu/java/rmi/server/UnicastConnectionManager.P \\\n+.deps/gnu/java/rmi/server/UnicastRef.P \\\n+.deps/gnu/java/rmi/server/UnicastRemoteCall.P \\\n+.deps/gnu/java/rmi/server/UnicastRemoteStub.P \\\n+.deps/gnu/java/rmi/server/UnicastServer.P \\\n+.deps/gnu/java/rmi/server/UnicastServerRef.P \\\n .deps/gnu/java/security/provider/DefaultPolicy.P \\\n .deps/gnu/java/security/provider/Gnu.P \\\n .deps/gnu/java/security/provider/SHA.P \\\n@@ -777,7 +1861,58 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/UnknownServiceException.P \\\n .deps/java/net/natInetAddress.P \\\n .deps/java/net/natPlainDatagramSocketImpl.P \\\n-.deps/java/net/natPlainSocketImpl.P \\\n+.deps/java/net/natPlainSocketImpl.P .deps/java/rmi/AccessException.P \\\n+.deps/java/rmi/AlreadyBoundException.P \\\n+.deps/java/rmi/ConnectException.P .deps/java/rmi/ConnectIOException.P \\\n+.deps/java/rmi/MarshalException.P .deps/java/rmi/MarshalledObject.P \\\n+.deps/java/rmi/Naming.P .deps/java/rmi/NoSuchObjectException.P \\\n+.deps/java/rmi/NotBoundException.P \\\n+.deps/java/rmi/RMISecurityException.P \\\n+.deps/java/rmi/RMISecurityManager.P .deps/java/rmi/Remote.P \\\n+.deps/java/rmi/RemoteException.P .deps/java/rmi/ServerError.P \\\n+.deps/java/rmi/ServerException.P \\\n+.deps/java/rmi/ServerRuntimeException.P \\\n+.deps/java/rmi/StubNotFoundException.P \\\n+.deps/java/rmi/UnexpectedException.P \\\n+.deps/java/rmi/UnknownHostException.P \\\n+.deps/java/rmi/UnmarshalException.P \\\n+.deps/java/rmi/activation/Activatable.P \\\n+.deps/java/rmi/activation/ActivateFailedException.P \\\n+.deps/java/rmi/activation/ActivationDesc.P \\\n+.deps/java/rmi/activation/ActivationException.P \\\n+.deps/java/rmi/activation/ActivationGroup.P \\\n+.deps/java/rmi/activation/ActivationGroupDesc.P \\\n+.deps/java/rmi/activation/ActivationGroupID.P \\\n+.deps/java/rmi/activation/ActivationID.P \\\n+.deps/java/rmi/activation/ActivationInstantiator.P \\\n+.deps/java/rmi/activation/ActivationMonitor.P \\\n+.deps/java/rmi/activation/ActivationSystem.P \\\n+.deps/java/rmi/activation/Activator.P \\\n+.deps/java/rmi/activation/UnknownGroupException.P \\\n+.deps/java/rmi/activation/UnknownObjectException.P \\\n+.deps/java/rmi/dgc/DGC.P .deps/java/rmi/dgc/Lease.P \\\n+.deps/java/rmi/dgc/VMID.P .deps/java/rmi/registry/LocateRegistry.P \\\n+.deps/java/rmi/registry/Registry.P \\\n+.deps/java/rmi/registry/RegistryHandler.P \\\n+.deps/java/rmi/server/ExportException.P \\\n+.deps/java/rmi/server/LoaderHandler.P .deps/java/rmi/server/LogStream.P \\\n+.deps/java/rmi/server/ObjID.P .deps/java/rmi/server/Operation.P \\\n+.deps/java/rmi/server/RMIClassLoader.P \\\n+.deps/java/rmi/server/RMIClientSocketFactory.P \\\n+.deps/java/rmi/server/RMIFailureHandler.P \\\n+.deps/java/rmi/server/RMIServerSocketFactory.P \\\n+.deps/java/rmi/server/RMISocketFactory.P \\\n+.deps/java/rmi/server/RemoteCall.P .deps/java/rmi/server/RemoteObject.P \\\n+.deps/java/rmi/server/RemoteRef.P .deps/java/rmi/server/RemoteServer.P \\\n+.deps/java/rmi/server/RemoteStub.P \\\n+.deps/java/rmi/server/ServerCloneException.P \\\n+.deps/java/rmi/server/ServerNotActiveException.P \\\n+.deps/java/rmi/server/ServerRef.P .deps/java/rmi/server/Skeleton.P \\\n+.deps/java/rmi/server/SkeletonMismatchException.P \\\n+.deps/java/rmi/server/SkeletonNotFoundException.P \\\n+.deps/java/rmi/server/SocketSecurityException.P \\\n+.deps/java/rmi/server/UID.P .deps/java/rmi/server/UnicastRemoteObject.P \\\n+.deps/java/rmi/server/Unreferenced.P \\\n .deps/java/security/AccessControlContext.P \\\n .deps/java/security/AccessControlException.P \\\n .deps/java/security/AccessController.P \\\n@@ -980,8 +2115,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/org/xml/sax/helpers/XMLReaderAdapter.P \\\n .deps/org/xml/sax/helpers/XMLReaderFactory.P .deps/posix-threads.P \\\n .deps/posix.P .deps/prims.P .deps/resolve.P\n-SOURCES = $(libgcj_la_SOURCES) $(EXTRA_libgcj_la_SOURCES) $(libgcjx_la_SOURCES) $(EXTRA_libgcjx_la_SOURCES) $(jv_convert_SOURCES) $(EXTRA_jv_convert_SOURCES) $(gij_SOURCES) $(gen_from_JIS_SOURCES) $(EXTRA_gen_from_JIS_SOURCES)\n-OBJECTS = $(libgcj_la_OBJECTS) $(libgcjx_la_OBJECTS) $(jv_convert_OBJECTS) $(gij_OBJECTS) $(gen_from_JIS_OBJECTS)\n+SOURCES = $(libgcj_la_SOURCES) $(EXTRA_libgcj_la_SOURCES) $(libgcjx_la_SOURCES) $(EXTRA_libgcjx_la_SOURCES) $(jv_convert_SOURCES) $(EXTRA_jv_convert_SOURCES) $(gij_SOURCES) $(rmic_SOURCES) $(EXTRA_rmic_SOURCES) $(rmiregistry_SOURCES) $(EXTRA_rmiregistry_SOURCES) $(gen_from_JIS_SOURCES) $(EXTRA_gen_from_JIS_SOURCES)\n+OBJECTS = $(libgcj_la_OBJECTS) $(libgcjx_la_OBJECTS) $(jv_convert_OBJECTS) $(gij_OBJECTS) $(rmic_OBJECTS) $(rmiregistry_OBJECTS) $(gen_from_JIS_OBJECTS)\n \n all: all-redirect\n .SUFFIXES:\n@@ -1110,6 +2245,14 @@ gij$(EXEEXT): $(gij_OBJECTS) $(gij_DEPENDENCIES)\n \t@rm -f gij$(EXEEXT)\n \t$(gij_LINK) $(gij_LDFLAGS) $(gij_OBJECTS) $(gij_LDADD) $(LIBS)\n \n+rmic$(EXEEXT): $(rmic_OBJECTS) $(rmic_DEPENDENCIES)\n+\t@rm -f rmic$(EXEEXT)\n+\t$(rmic_LINK) $(rmic_LDFLAGS) $(rmic_OBJECTS) $(rmic_LDADD) $(LIBS)\n+\n+rmiregistry$(EXEEXT): $(rmiregistry_OBJECTS) $(rmiregistry_DEPENDENCIES)\n+\t@rm -f rmiregistry$(EXEEXT)\n+\t$(rmiregistry_LINK) $(rmiregistry_LDFLAGS) $(rmiregistry_OBJECTS) $(rmiregistry_LDADD) $(LIBS)\n+\n gen-from-JIS$(EXEEXT): $(gen_from_JIS_OBJECTS) $(gen_from_JIS_DEPENDENCIES)\n \t@rm -f gen-from-JIS$(EXEEXT)\n \t$(LINK) $(gen_from_JIS_LDFLAGS) $(gen_from_JIS_OBJECTS) $(gen_from_JIS_LDADD) $(LIBS)\n@@ -1312,7 +2455,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "2c07c143f55207811f46bd0597de987b998f5c43", "filename": "libjava/gnu/java/rmi/dgc/DGCImpl.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,55 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.dgc;\n+\n+import java.rmi.dgc.DGC;\n+import java.rmi.dgc.Lease;\n+import java.rmi.dgc.VMID;\n+import java.rmi.server.ObjID;\n+import java.rmi.RemoteException;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.rmi.server.RMISocketFactory;\n+import gnu.java.rmi.server.UnicastServerRef;\n+\n+public class DGCImpl\n+\textends UnicastRemoteObject implements DGC {\n+\n+public DGCImpl() throws RemoteException {\n+\tsuper(new UnicastServerRef(new ObjID(ObjID.DGC_ID), 0, RMISocketFactory.getSocketFactory()));\n+}\n+\n+public Lease dirty(ObjID[] ids, long sequenceNum, Lease lease) throws RemoteException {\n+\tSystem.out.println(\"DGCImpl.dirty - not implemented\");\n+\treturn (lease);\n+}\n+\n+public void clean(ObjID[] ids, long sequenceNum, VMID vmid, boolean strong) throws RemoteException {\n+\tSystem.out.println(\"DGCImpl.clean - not implemented\");\n+}\n+\n+}"}, {"sha": "fd0f2eec80384857dbf777ab48a3f7e5ba29a5db", "filename": "libjava/gnu/java/rmi/dgc/DGCImpl_Skel.java", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl_Skel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl_Skel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl_Skel.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,106 @@\n+// Skel class generated by rmic - DO NOT EDIT!\n+\n+package gnu.java.rmi.dgc;\n+\n+public final class DGCImpl_Skel\n+    implements java.rmi.server.Skeleton\n+{\n+    private static final long interfaceHash = -669196253586618813L;\n+    \n+    private static final java.rmi.server.Operation[] operations = {\n+        new java.rmi.server.Operation(\"void clean(java.rmi.server.ObjID[], long, java.rmi.dgc.VMID, boolean\"),\n+        new java.rmi.server.Operation(\"java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[], long, java.rmi.dgc.Lease\")\n+    };\n+    \n+    public java.rmi.server.Operation[] getOperations() {\n+        return ((java.rmi.server.Operation[]) operations.clone());\n+    }\n+    \n+    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash) throws java.lang.Exception {\n+        if (opnum < 0) {\n+            if (hash == -5803803475088455571L) {\n+                opnum = 0;\n+            }\n+            else if (hash == -8139341527526761862L) {\n+                opnum = 1;\n+            }\n+            else {\n+                throw new java.rmi.server.SkeletonMismatchException(\"interface hash mismatch\");\n+            }\n+        }\n+        else if (hash != interfaceHash) {\n+            throw new java.rmi.server.SkeletonMismatchException(\"interface hash mismatch\");\n+        }\n+        \n+        gnu.java.rmi.dgc.DGCImpl server = (gnu.java.rmi.dgc.DGCImpl)obj;\n+        switch (opnum) {\n+        case 0:\n+        {\n+            java.rmi.server.ObjID[] $param_0;\n+            long $param_1;\n+            java.rmi.dgc.VMID $param_2;\n+            boolean $param_3;\n+            try {\n+                java.io.ObjectInput in = call.getInputStream();\n+                $param_0 = (java.rmi.server.ObjID[])in.readObject();\n+                $param_1 = (long)in.readLong();\n+                $param_2 = (java.rmi.dgc.VMID)in.readObject();\n+                $param_3 = (boolean)in.readBoolean();\n+                \n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            catch (java.lang.ClassCastException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            finally {\n+                call.releaseInputStream();\n+            }\n+            server.clean($param_0, $param_1, $param_2, $param_3);\n+            try {\n+                java.io.ObjectOutput out = call.getResultStream(true);\n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.MarshalException(\"error marshalling return\", e);\n+            }\n+            break;\n+        }\n+        \n+        case 1:\n+        {\n+            java.rmi.server.ObjID[] $param_0;\n+            long $param_1;\n+            java.rmi.dgc.Lease $param_2;\n+            try {\n+                java.io.ObjectInput in = call.getInputStream();\n+                $param_0 = (java.rmi.server.ObjID[])in.readObject();\n+                $param_1 = (long)in.readLong();\n+                $param_2 = (java.rmi.dgc.Lease)in.readObject();\n+                \n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            catch (java.lang.ClassCastException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            finally {\n+                call.releaseInputStream();\n+            }\n+            java.rmi.dgc.Lease $result = server.dirty($param_0, $param_1, $param_2);\n+            try {\n+                java.io.ObjectOutput out = call.getResultStream(true);\n+                out.writeObject($result);\n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.MarshalException(\"error marshalling return\", e);\n+            }\n+            break;\n+        }\n+        \n+        default:\n+            throw new java.rmi.UnmarshalException(\"invalid method number\");\n+        }\n+    }\n+}"}, {"sha": "e611fb227ebce3ede7a4f719d39fe5a9bf7aed44", "filename": "libjava/gnu/java/rmi/dgc/DGCImpl_Stub.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl_Stub.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl_Stub.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fdgc%2FDGCImpl_Stub.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,120 @@\n+// Stub class generated by rmic - DO NOT EDIT!\n+\n+package gnu.java.rmi.dgc;\n+\n+public final class DGCImpl_Stub\n+    extends java.rmi.server.RemoteStub\n+    implements java.rmi.dgc.DGC\n+{\n+    private static final long serialVersionUID = 2L;\n+    \n+    private static final long interfaceHash = -669196253586618813L;\n+    \n+    private static boolean useNewInvoke;\n+    \n+    private static final java.rmi.server.Operation[] operations = {\n+        new java.rmi.server.Operation(\"void clean(java.rmi.server.ObjID[], long, java.rmi.dgc.VMID, boolean)\"),\n+        new java.rmi.server.Operation(\"java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[], long, java.rmi.dgc.Lease)\")\n+    };\n+    \n+    private static java.lang.reflect.Method $method_clean_0;\n+    private static java.lang.reflect.Method $method_dirty_1;\n+    \n+    static {\n+        try {\n+            java.rmi.server.RemoteRef.class.getMethod(\"invoke\", new java.lang.Class[] { java.rmi.Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class });\n+            useNewInvoke = true;\n+            $method_clean_0 = gnu.java.rmi.dgc.DGCImpl.class.getMethod(\"clean\", new java.lang.Class[] {java.rmi.server.ObjID[].class, long.class, java.rmi.dgc.VMID.class, boolean.class});\n+            $method_dirty_1 = gnu.java.rmi.dgc.DGCImpl.class.getMethod(\"dirty\", new java.lang.Class[] {java.rmi.server.ObjID[].class, long.class, java.rmi.dgc.Lease.class});\n+            \n+        }\n+        catch (java.lang.NoSuchMethodException e) {\n+            useNewInvoke = false;\n+        }\n+    }\n+    \n+    public DGCImpl_Stub() {\n+        super();\n+    }\n+    public DGCImpl_Stub(java.rmi.server.RemoteRef ref) {\n+        super(ref);\n+    }\n+    \n+    public void clean(java.rmi.server.ObjID[] $param_0, long $param_1, java.rmi.dgc.VMID $param_2, boolean $param_3) throws java.rmi.RemoteException {\n+        try {\n+            if (useNewInvoke) {\n+                ref.invoke(this, $method_clean_0, new java.lang.Object[] {$param_0, new java.lang.Long($param_1), $param_2, new java.lang.Boolean($param_3)}, -5803803475088455571L);\n+            }\n+            else {\n+                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 0, interfaceHash);\n+                try {\n+                    java.io.ObjectOutput out = call.getOutputStream();\n+                    out.writeObject($param_0);\n+                    out.writeLong($param_1);\n+                    out.writeObject($param_2);\n+                    out.writeBoolean($param_3);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n+                }\n+                ref.invoke(call);\n+                try {\n+                    java.io.ObjectInput in = call.getInputStream();\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);\n+                }\n+                finally {\n+                    ref.done(call);\n+                }\n+            }\n+        }\n+        catch (java.rmi.RemoteException e) {\n+            throw e;\n+        }\n+        catch (java.lang.Exception e) {\n+            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n+        }\n+    }\n+    \n+    public java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[] $param_0, long $param_1, java.rmi.dgc.Lease $param_2) throws java.rmi.RemoteException {\n+        try {\n+            if (useNewInvoke) {\n+                java.lang.Object $result = ref.invoke(this, $method_dirty_1, new java.lang.Object[] {$param_0, new java.lang.Long($param_1), $param_2}, -8139341527526761862L);\n+                return ((java.rmi.dgc.Lease)$result);\n+            }\n+            else {\n+                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 1, interfaceHash);\n+                try {\n+                    java.io.ObjectOutput out = call.getOutputStream();\n+                    out.writeObject($param_0);\n+                    out.writeLong($param_1);\n+                    out.writeObject($param_2);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n+                }\n+                ref.invoke(call);\n+                java.rmi.dgc.Lease $result;\n+                try {\n+                    java.io.ObjectInput in = call.getInputStream();\n+                    $result = (java.rmi.dgc.Lease)in.readObject();\n+                    return ($result);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);\n+                }\n+                finally {\n+                    ref.done(call);\n+                }\n+            }\n+        }\n+        catch (java.rmi.RemoteException e) {\n+            throw e;\n+        }\n+        catch (java.lang.Exception e) {\n+            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n+        }\n+    }\n+    \n+}"}, {"sha": "1dab766b53c76cfce9faa2ef76df4e72488ef34e", "filename": "libjava/gnu/java/rmi/registry/RegistryImpl.java", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,115 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.registry;\n+\n+import java.rmi.registry.Registry;\n+import java.rmi.registry.LocateRegistry;\n+import java.rmi.RemoteException;\n+import java.rmi.NotBoundException;\n+import java.rmi.AccessException;\n+import java.rmi.AlreadyBoundException;\n+import java.rmi.Remote;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.rmi.server.ObjID;\n+import java.util.Hashtable;\n+import java.util.Enumeration;\n+import java.rmi.server.RMISocketFactory;\n+import java.rmi.server.RMIClientSocketFactory;\n+import java.rmi.server.RMIServerSocketFactory;\n+import gnu.java.rmi.server.UnicastServerRef;\n+\n+public class RegistryImpl\n+\textends UnicastRemoteObject implements Registry {\n+\n+private Hashtable bindings = new Hashtable();\n+\n+public RegistryImpl(int port) throws RemoteException {\n+\tthis(port, RMISocketFactory.getSocketFactory(), RMISocketFactory.getSocketFactory());\n+}\n+\n+public RegistryImpl(int port, RMIClientSocketFactory cf, RMIServerSocketFactory sf) throws RemoteException {\n+\tsuper(new UnicastServerRef(new ObjID(ObjID.REGISTRY_ID), port, sf));\n+\t((UnicastServerRef)getRef()).exportObject(this);\n+}\n+\n+public Remote lookup(String name) throws RemoteException, NotBoundException, AccessException {\n+\tObject obj = bindings.get(name);\n+\tif (obj == null) {\n+\t\tthrow new NotBoundException(name);\n+\t}\n+\treturn ((Remote)obj);\n+}\n+\n+public void bind(String name, Remote obj) throws RemoteException, AlreadyBoundException, AccessException {\n+\tif (bindings.containsKey(name)) {\n+\t\tthrow new AlreadyBoundException(name);\n+\t}\n+\tbindings.put(name, obj);\n+}\n+\n+public void unbind(String name) throws RemoteException, NotBoundException, AccessException {\n+\tObject obj = bindings.remove(name);\n+\tif (obj == null) {\n+\t\tthrow new NotBoundException(name);\n+\t}\n+}\n+\n+public void rebind(String name, Remote obj) throws RemoteException, AccessException {\n+\tbindings.put(name, obj);\n+}\n+\n+public String[] list() throws RemoteException, AccessException {\n+\tint size = bindings.size();\n+\tString[] strings = new String[size];\n+\tEnumeration e = bindings.keys();\n+\tfor (int i = 0; i < size; i++) {\n+\t\tstrings[i] = (String)e.nextElement();\n+\t}\n+\treturn (strings);\n+}\n+\n+public static void main(String[] args) {\n+\tint port = Registry.REGISTRY_PORT;\n+\tif (args.length > 0) {\n+\t\ttry {\n+\t\t\tport = Integer.parseInt(args[0]);\n+\t\t}\n+\t\tcatch (NumberFormatException _) {\n+\t\t\tSystem.err.println(\"Bad port number - using default\");\n+\t\t}\n+\t}\n+\n+\ttry {\n+\t\tRegistry impl = LocateRegistry.createRegistry(port);\n+\t}\n+\tcatch (RemoteException _) {\n+\t\tSystem.err.println(\"Registry failed\");\n+\t}\n+}\n+\n+}"}, {"sha": "7ba41c389cbfb3f555e5af8e0ba0a66d4d5f0da0", "filename": "libjava/gnu/java/rmi/registry/RegistryImpl_Skel.java", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl_Skel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl_Skel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl_Skel.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,189 @@\n+// Skel class generated by rmic - DO NOT EDIT!\n+\n+package gnu.java.rmi.registry;\n+\n+public final class RegistryImpl_Skel\n+    implements java.rmi.server.Skeleton\n+{\n+    private static final long interfaceHash = 4905912898345647071L;\n+    \n+    private static final java.rmi.server.Operation[] operations = {\n+        new java.rmi.server.Operation(\"void bind(java.lang.String, java.rmi.Remote\"),\n+        new java.rmi.server.Operation(\"java.lang.String[] list(\"),\n+        new java.rmi.server.Operation(\"java.rmi.Remote lookup(java.lang.String\"),\n+        new java.rmi.server.Operation(\"void rebind(java.lang.String, java.rmi.Remote\"),\n+        new java.rmi.server.Operation(\"void unbind(java.lang.String\")\n+    };\n+    \n+    public java.rmi.server.Operation[] getOperations() {\n+        return ((java.rmi.server.Operation[]) operations.clone());\n+    }\n+    \n+    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash) throws java.lang.Exception {\n+        if (opnum < 0) {\n+            if (hash == 7583982177005850366L) {\n+                opnum = 0;\n+            }\n+            else if (hash == 2571371476350237748L) {\n+                opnum = 1;\n+            }\n+            else if (hash == -7538657168040752697L) {\n+                opnum = 2;\n+            }\n+            else if (hash == -8381844669958460146L) {\n+                opnum = 3;\n+            }\n+            else if (hash == 7305022919901907578L) {\n+                opnum = 4;\n+            }\n+            else {\n+                throw new java.rmi.server.SkeletonMismatchException(\"interface hash mismatch\");\n+            }\n+        }\n+        else if (hash != interfaceHash) {\n+            throw new java.rmi.server.SkeletonMismatchException(\"interface hash mismatch\");\n+        }\n+        \n+        gnu.java.rmi.registry.RegistryImpl server = (gnu.java.rmi.registry.RegistryImpl)obj;\n+        switch (opnum) {\n+        case 0:\n+        {\n+            java.lang.String $param_0;\n+            java.rmi.Remote $param_1;\n+            try {\n+                java.io.ObjectInput in = call.getInputStream();\n+                $param_0 = (java.lang.String)in.readObject();\n+                $param_1 = (java.rmi.Remote)in.readObject();\n+                \n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            catch (java.lang.ClassCastException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            finally {\n+                call.releaseInputStream();\n+            }\n+            server.bind($param_0, $param_1);\n+            try {\n+                java.io.ObjectOutput out = call.getResultStream(true);\n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.MarshalException(\"error marshalling return\", e);\n+            }\n+            break;\n+        }\n+        \n+        case 1:\n+        {\n+            try {\n+                java.io.ObjectInput in = call.getInputStream();\n+                \n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            finally {\n+                call.releaseInputStream();\n+            }\n+            java.lang.String[] $result = server.list();\n+            try {\n+                java.io.ObjectOutput out = call.getResultStream(true);\n+                out.writeObject($result);\n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.MarshalException(\"error marshalling return\", e);\n+            }\n+            break;\n+        }\n+        \n+        case 2:\n+        {\n+            java.lang.String $param_0;\n+            try {\n+                java.io.ObjectInput in = call.getInputStream();\n+                $param_0 = (java.lang.String)in.readObject();\n+                \n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            catch (java.lang.ClassCastException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            finally {\n+                call.releaseInputStream();\n+            }\n+            java.rmi.Remote $result = server.lookup($param_0);\n+            try {\n+                java.io.ObjectOutput out = call.getResultStream(true);\n+                out.writeObject($result);\n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.MarshalException(\"error marshalling return\", e);\n+            }\n+            break;\n+        }\n+        \n+        case 3:\n+        {\n+            java.lang.String $param_0;\n+            java.rmi.Remote $param_1;\n+            try {\n+                java.io.ObjectInput in = call.getInputStream();\n+                $param_0 = (java.lang.String)in.readObject();\n+                $param_1 = (java.rmi.Remote)in.readObject();\n+                \n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            catch (java.lang.ClassCastException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            finally {\n+                call.releaseInputStream();\n+            }\n+            server.rebind($param_0, $param_1);\n+            try {\n+                java.io.ObjectOutput out = call.getResultStream(true);\n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.MarshalException(\"error marshalling return\", e);\n+            }\n+            break;\n+        }\n+        \n+        case 4:\n+        {\n+            java.lang.String $param_0;\n+            try {\n+                java.io.ObjectInput in = call.getInputStream();\n+                $param_0 = (java.lang.String)in.readObject();\n+                \n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            catch (java.lang.ClassCastException e) {\n+                throw new java.rmi.UnmarshalException(\"error unmarshalling arguments\", e);\n+            }\n+            finally {\n+                call.releaseInputStream();\n+            }\n+            server.unbind($param_0);\n+            try {\n+                java.io.ObjectOutput out = call.getResultStream(true);\n+            }\n+            catch (java.io.IOException e) {\n+                throw new java.rmi.MarshalException(\"error marshalling return\", e);\n+            }\n+            break;\n+        }\n+        \n+        default:\n+            throw new java.rmi.UnmarshalException(\"invalid method number\");\n+        }\n+    }\n+}"}, {"sha": "bfa755c3fdb578f0a76c3c4cdffa1e0f2007e5b6", "filename": "libjava/gnu/java/rmi/registry/RegistryImpl_Stub.java", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl_Stub.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl_Stub.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fregistry%2FRegistryImpl_Stub.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,255 @@\n+// Stub class generated by rmic - DO NOT EDIT!\n+\n+package gnu.java.rmi.registry;\n+\n+public final class RegistryImpl_Stub\n+    extends java.rmi.server.RemoteStub\n+    implements java.rmi.registry.Registry\n+{\n+    private static final long serialVersionUID = 2L;\n+    \n+    private static final long interfaceHash = 4905912898345647071L;\n+    \n+    private static boolean useNewInvoke;\n+    \n+    private static final java.rmi.server.Operation[] operations = {\n+        new java.rmi.server.Operation(\"void bind(java.lang.String, java.rmi.Remote)\"),\n+        new java.rmi.server.Operation(\"java.lang.String[] list()\"),\n+        new java.rmi.server.Operation(\"java.rmi.Remote lookup(java.lang.String)\"),\n+        new java.rmi.server.Operation(\"void rebind(java.lang.String, java.rmi.Remote)\"),\n+        new java.rmi.server.Operation(\"void unbind(java.lang.String)\")\n+    };\n+    \n+    private static java.lang.reflect.Method $method_bind_0;\n+    private static java.lang.reflect.Method $method_list_1;\n+    private static java.lang.reflect.Method $method_lookup_2;\n+    private static java.lang.reflect.Method $method_rebind_3;\n+    private static java.lang.reflect.Method $method_unbind_4;\n+    \n+    static {\n+        try {\n+            java.rmi.server.RemoteRef.class.getMethod(\"invoke\", new java.lang.Class[] { java.rmi.Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class });\n+            useNewInvoke = true;\n+            $method_bind_0 = gnu.java.rmi.registry.RegistryImpl.class.getMethod(\"bind\", new java.lang.Class[] {java.lang.String.class, java.rmi.Remote.class});\n+            $method_list_1 = gnu.java.rmi.registry.RegistryImpl.class.getMethod(\"list\", new java.lang.Class[] {});\n+            $method_lookup_2 = gnu.java.rmi.registry.RegistryImpl.class.getMethod(\"lookup\", new java.lang.Class[] {java.lang.String.class});\n+            $method_rebind_3 = gnu.java.rmi.registry.RegistryImpl.class.getMethod(\"rebind\", new java.lang.Class[] {java.lang.String.class, java.rmi.Remote.class});\n+            $method_unbind_4 = gnu.java.rmi.registry.RegistryImpl.class.getMethod(\"unbind\", new java.lang.Class[] {java.lang.String.class});\n+            \n+        }\n+        catch (java.lang.NoSuchMethodException e) {\n+            useNewInvoke = false;\n+        }\n+    }\n+    \n+    public RegistryImpl_Stub() {\n+        super();\n+    }\n+    public RegistryImpl_Stub(java.rmi.server.RemoteRef ref) {\n+        super(ref);\n+    }\n+    \n+    public void bind(java.lang.String $param_0, java.rmi.Remote $param_1) throws java.rmi.AccessException, java.rmi.AlreadyBoundException, java.rmi.RemoteException {\n+        try {\n+            if (useNewInvoke) {\n+                ref.invoke(this, $method_bind_0, new java.lang.Object[] {$param_0, $param_1}, 7583982177005850366L);\n+            }\n+            else {\n+                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 0, interfaceHash);\n+                try {\n+                    java.io.ObjectOutput out = call.getOutputStream();\n+                    out.writeObject($param_0);\n+                    out.writeObject($param_1);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n+                }\n+                ref.invoke(call);\n+                try {\n+                    java.io.ObjectInput in = call.getInputStream();\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);\n+                }\n+                finally {\n+                    ref.done(call);\n+                }\n+            }\n+        }\n+        catch (java.rmi.AccessException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.AlreadyBoundException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.RemoteException e) {\n+            throw e;\n+        }\n+        catch (java.lang.Exception e) {\n+            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n+        }\n+    }\n+    \n+    public java.lang.String[] list() throws java.rmi.AccessException, java.rmi.RemoteException {\n+        try {\n+            if (useNewInvoke) {\n+                java.lang.Object $result = ref.invoke(this, $method_list_1, null, 2571371476350237748L);\n+                return ((java.lang.String[])$result);\n+            }\n+            else {\n+                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 1, interfaceHash);\n+                try {\n+                    java.io.ObjectOutput out = call.getOutputStream();\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n+                }\n+                ref.invoke(call);\n+                java.lang.String[] $result;\n+                try {\n+                    java.io.ObjectInput in = call.getInputStream();\n+                    $result = (java.lang.String[])in.readObject();\n+                    return ($result);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);\n+                }\n+                finally {\n+                    ref.done(call);\n+                }\n+            }\n+        }\n+        catch (java.rmi.AccessException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.RemoteException e) {\n+            throw e;\n+        }\n+        catch (java.lang.Exception e) {\n+            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n+        }\n+    }\n+    \n+    public java.rmi.Remote lookup(java.lang.String $param_0) throws java.rmi.AccessException, java.rmi.NotBoundException, java.rmi.RemoteException {\n+        try {\n+            if (useNewInvoke) {\n+                java.lang.Object $result = ref.invoke(this, $method_lookup_2, new java.lang.Object[] {$param_0}, -7538657168040752697L);\n+                return ((java.rmi.Remote)$result);\n+            }\n+            else {\n+                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 2, interfaceHash);\n+                try {\n+                    java.io.ObjectOutput out = call.getOutputStream();\n+                    out.writeObject($param_0);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n+                }\n+                ref.invoke(call);\n+                java.rmi.Remote $result;\n+                try {\n+                    java.io.ObjectInput in = call.getInputStream();\n+                    $result = (java.rmi.Remote)in.readObject();\n+                    return ($result);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);\n+                }\n+                finally {\n+                    ref.done(call);\n+                }\n+            }\n+        }\n+        catch (java.rmi.AccessException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.NotBoundException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.RemoteException e) {\n+            throw e;\n+        }\n+        catch (java.lang.Exception e) {\n+            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n+        }\n+    }\n+    \n+    public void rebind(java.lang.String $param_0, java.rmi.Remote $param_1) throws java.rmi.AccessException, java.rmi.RemoteException {\n+        try {\n+            if (useNewInvoke) {\n+                ref.invoke(this, $method_rebind_3, new java.lang.Object[] {$param_0, $param_1}, -8381844669958460146L);\n+            }\n+            else {\n+                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 3, interfaceHash);\n+                try {\n+                    java.io.ObjectOutput out = call.getOutputStream();\n+                    out.writeObject($param_0);\n+                    out.writeObject($param_1);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n+                }\n+                ref.invoke(call);\n+                try {\n+                    java.io.ObjectInput in = call.getInputStream();\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);\n+                }\n+                finally {\n+                    ref.done(call);\n+                }\n+            }\n+        }\n+        catch (java.rmi.AccessException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.RemoteException e) {\n+            throw e;\n+        }\n+        catch (java.lang.Exception e) {\n+            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n+        }\n+    }\n+    \n+    public void unbind(java.lang.String $param_0) throws java.rmi.AccessException, java.rmi.NotBoundException, java.rmi.RemoteException {\n+        try {\n+            if (useNewInvoke) {\n+                ref.invoke(this, $method_unbind_4, new java.lang.Object[] {$param_0}, 7305022919901907578L);\n+            }\n+            else {\n+                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 4, interfaceHash);\n+                try {\n+                    java.io.ObjectOutput out = call.getOutputStream();\n+                    out.writeObject($param_0);\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n+                }\n+                ref.invoke(call);\n+                try {\n+                    java.io.ObjectInput in = call.getInputStream();\n+                }\n+                catch (java.io.IOException e) {\n+                    throw new java.rmi.UnmarshalException(\"error unmarshalling return\", e);\n+                }\n+                finally {\n+                    ref.done(call);\n+                }\n+            }\n+        }\n+        catch (java.rmi.AccessException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.NotBoundException e) {\n+            throw e;\n+        }\n+        catch (java.rmi.RemoteException e) {\n+            throw e;\n+        }\n+        catch (java.lang.Exception e) {\n+            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n+        }\n+    }\n+    \n+}"}, {"sha": "84681e24bca496dc53b7d8374fc4359b8f161b7e", "filename": "libjava/gnu/java/rmi/rmic/RMIC.java", "status": "added", "additions": 982, "deletions": 0, "changes": 982, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FRMIC.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FRMIC.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FRMIC.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,982 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.rmic;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.PrintWriter;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Arrays;\n+import java.lang.Comparable;\n+import gnu.java.rmi.server.RMIHashes;\n+// import kaffe.tools.compiler.Compiler;\n+\n+public class RMIC {\n+\n+private String[] args;\n+private int next;\n+private Exception exception;\n+\n+private boolean keep = false;\n+private boolean need11Stubs = true;\n+private boolean need12Stubs = true;\n+private boolean compile = true;\n+private boolean verbose;\n+private String destination;\n+\n+private PrintWriter out;\n+private TabbedWriter ctrl;\n+\n+private Class clazz;\n+private String classname;\n+private String fullclassname;\n+private MethodRef[] remotemethods;\n+private String stubname;\n+private String skelname;\n+\n+public RMIC(String[] a) {\n+\targs = a;\n+}\n+\n+public static void main(String args[]) {\n+\tRMIC r = new RMIC(args);\n+\tif (r.run() == false) {\n+\t\tException exception = r.getException();\n+\t\tif (exception != null) {\n+\t\t\texception.printStackTrace();\n+\t\t}\n+\t\telse {\n+\t\t\tusage();\n+\t\t}\n+\t}\n+}\n+\n+public boolean run() {\n+\tparseOptions();\n+\tif (next >= args.length) {\n+\t\treturn (false);\n+\t}\n+\tfor (int i = next; i < args.length; i++) {\n+\t\ttry {\n+\t\t\tif (verbose) {\n+\t\t\t\tSystem.out.println(\"[Processing class \" + args[i] + \".class]\");\n+\t\t\t}\n+\t\t\tprocessClass(args[i]);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\texception = e;\n+\t\t\treturn (false);\n+\t\t}\n+\t}\n+\treturn (true);\n+}\n+\n+private boolean processClass(String classname) throws Exception {\n+\tanalyzeClass(classname);\n+\tgenerateStub();\n+\tif (need11Stubs) {\n+\t\tgenerateSkel();\n+\t}\n+\tif (compile) {\n+\t\tcompile(stubname + \".java\");\n+\t\tif (need11Stubs) {\n+\t\t\tcompile(skelname + \".java\");\n+\t\t}\n+\t}\n+\tif (!keep) {\n+\t\t(new File(stubname + \".java\")).delete();\n+\t\tif (need11Stubs) {\n+\t\t\t(new File(skelname + \".java\")).delete();\n+\t\t}\n+\t}\n+\treturn (true);\n+}\n+\n+private void analyzeClass(String cname) throws Exception {\n+\tint p = cname.lastIndexOf('.');\n+\tif (p != -1) {\n+\t\tclassname = cname.substring(p+1);\n+\t}\n+\telse {\n+\t\tclassname = cname;\n+\t}\n+\tfullclassname = cname;\n+\n+\tHashSet rmeths = new HashSet();\n+\tfindClass();\n+\tfor (Class cls = clazz; cls != null; cls = cls.getSuperclass()) {\n+\t\t// Keep going down the inheritence tree until we hit the system\n+\t\tif (cls.getName().startsWith(\"java.\")) {\n+\t\t\tbreak;\n+\t\t}\n+\n+\t\tMethod[] meths = cls.getDeclaredMethods();\n+\t\tfor (int i = 0; i < meths.length; i++) {\n+\t\t\t// Only include public methods\n+\t\t\tint mods = meths[i].getModifiers();\n+\t\t\tif (Modifier.isPublic(mods) && !Modifier.isStatic(mods)) {\n+\t\t\t\t// Should check exceptions here. - XXX\n+\n+\t\t\t\t// Add this one in.\n+\t\t\t\trmeths.add(meths[i]);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t// Convert into a MethodRef array and sort them\n+\tremotemethods = new MethodRef[rmeths.size()];\n+\tint c = 0;\n+\tfor (Iterator i = rmeths.iterator(); i.hasNext(); ) {\n+\t\tremotemethods[c++] = new MethodRef((Method)i.next());\n+\t}\n+\tArrays.sort(remotemethods);\n+}\n+\n+public Exception getException() {\n+\treturn (exception);\n+}\n+\n+private void findClass() throws ClassNotFoundException {\n+\tclazz = Class.forName(fullclassname);\n+}\n+\n+private void generateStub() throws IOException {\n+\tstubname = classname + \"_Stub\";\n+\tctrl = new TabbedWriter(new FileWriter(stubname + \".java\"));\n+\tout = new PrintWriter(ctrl);\n+\n+\tif (verbose) {\n+\t\tSystem.out.println(\"[Generating class \" + stubname + \".java]\");\n+\t}\n+\n+\tout.println(\"// Stub class generated by rmic - DO NOT EDIT!\");\n+\tout.println();\n+\tif (fullclassname != classname) {\n+\t\tString pname = fullclassname.substring(0, fullclassname.lastIndexOf('.'));\n+\t\tout.println(\"package \" + pname + \";\");\n+\t\tout.println();\n+\t}\n+\n+\tout.print(\"public final class \" + stubname);\n+\tctrl.indent();\n+\tout.println(\"extends java.rmi.server.RemoteStub\");\n+\t\n+\t// Output interfaces we implement\n+\tout.print(\"implements \");\n+\tClass[] ifaces = clazz.getInterfaces(); \n+\tfor (int i = 0; i < ifaces.length; i++) {\n+\t\tout.print(ifaces[i].getName());\n+\t\tif (i+1 < ifaces.length) {\n+\t\t\tout.print(\", \");\n+\t\t}\n+\t}\n+\n+\tctrl.unindent();\n+\tout.print(\"{\");\n+\tctrl.indent();\n+\n+\t// UID\n+\tif (need12Stubs) {\n+\t\tout.println(\"private static final long serialVersionUID = 2L;\");\n+\t\tout.println();\n+\t}\n+\n+\t// InterfaceHash - don't know how to calculate this - XXX\n+\tif (need11Stubs) {\n+\t\tout.println(\"private static final long interfaceHash = \" + RMIHashes.getInterfaceHash(clazz) + \"L;\");\n+\t\tout.println();\n+\t\tif (need12Stubs) {\n+\t\t\tout.println(\"private static boolean useNewInvoke;\");\n+\t\t\tout.println();\n+\t\t}\n+\n+\t\t// Operation table\n+\t\tout.print(\"private static final java.rmi.server.Operation[] operations = {\");\n+\n+\t\tctrl.indent();\n+\t\tfor (int i = 0; i < remotemethods.length; i++) {\n+\t\t\tMethod m = remotemethods[i].meth;\n+\t\t\tout.print(\"new java.rmi.server.Operation(\\\"\");\n+\t\t\tout.print(getPrettyName(m.getReturnType()) + \" \");\n+\t\t\tout.print(m.getName() + \"(\");\n+\t\t\t// Output signature\n+\t\t\tClass[] sig = m.getParameterTypes();\n+\t\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\t\tout.print(getPrettyName(sig[j]));\n+\t\t\t\tif (j+1 < sig.length) {\n+\t\t\t\t\tout.print(\", \");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tout.print(\")\\\")\");\n+\t\t\tif (i + 1 < remotemethods.length) {\n+\t\t\t\tout.println(\",\");\n+\t\t\t}\n+\t\t}\n+\t\tctrl.unindent();\n+\t\tout.println(\"};\");\n+\t\tout.println();\n+\t}\n+\n+\t// Set of method references.\n+\tif (need12Stubs) {\n+\t\tfor (int i = 0; i < remotemethods.length; i++) {\n+\t\t\tMethod m = remotemethods[i].meth;\n+\t\t\tout.println(\"private static java.lang.reflect.Method $method_\" + m.getName() + \"_\" + i + \";\");\n+\t\t}\n+\n+\t\t// Initialize the methods references.\n+\t\tout.println();\n+\t\tout.print(\"static {\");\n+\t\tctrl.indent();\n+\n+\t\tout.print(\"try {\");\n+\t\tctrl.indent();\n+\n+\t\tif (need11Stubs) {\n+\t\t\tout.println(\"java.rmi.server.RemoteRef.class.getMethod(\\\"invoke\\\", new java.lang.Class[] { java.rmi.Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class });\");\n+\t\t\tout.println(\"useNewInvoke = true;\");\n+\t\t}\n+\n+\t\tfor (int i = 0; i < remotemethods.length; i++) {\n+\t\t\tMethod m = remotemethods[i].meth;\n+\t\t\tout.print(\"$method_\" + m.getName() + \"_\" + i + \" = \");\n+\t\t\tout.print(fullclassname + \".class.getMethod(\\\"\" + m.getName() + \"\\\"\");\n+\t\t\tout.print(\", new java.lang.Class[] {\");\n+\t\t\t// Output signature\n+\t\t\tClass[] sig = m.getParameterTypes();\n+\t\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\t\tout.print(getPrettyName(sig[j]) + \".class\");\n+\t\t\t\tif (j+1 < sig.length) {\n+\t\t\t\t\tout.print(\", \");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tout.println(\"});\");\n+\t\t}\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tout.print(\"catch (java.lang.NoSuchMethodException e) {\");\n+\t\tctrl.indent();\n+\t\tif (need11Stubs) {\n+\t\t\tout.print(\"useNewInvoke = false;\");\n+\t\t}\n+\t\telse {\n+\t\t\tout.print(\"throw new java.lang.NoSuchMethodError(\\\"stub class initialization failed\\\");\");\n+\t\t}\n+\n+\t\tctrl.unindent();\n+\t\tout.print(\"}\");\n+\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tout.println();\n+\t}\n+\n+\t// Constructors\n+\tif (need11Stubs) {\n+\t\tout.print(\"public \" + stubname + \"() {\");\n+\t\tctrl.indent();\n+\t\tout.print(\"super();\");\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t}\n+\n+\tif (need12Stubs) {\n+\t\tout.print(\"public \" + stubname + \"(java.rmi.server.RemoteRef ref) {\");\n+\t\tctrl.indent();\n+\t\tout.print(\"super(ref);\");\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t}\n+\n+\t// Method implementations\n+\tfor (int i = 0; i < remotemethods.length; i++) {\n+\t\tMethod m = remotemethods[i].meth;\n+\t\tClass[] sig = m.getParameterTypes();\n+\t\tClass returntype = m.getReturnType();\n+\t\tClass[] except = sortExceptions(m.getExceptionTypes());\n+\n+\t\tout.println();\n+\t\tout.print(\"public \" + getPrettyName(returntype) + \" \" + m.getName() + \"(\");\n+\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\tout.print(getPrettyName(sig[j]));\n+\t\t\tout.print(\" $param_\" + j);\n+\t\t\tif (j+1 < sig.length) {\n+\t\t\t\tout.print(\", \");\n+\t\t\t}\n+\t\t}\n+\t\tout.print(\") \");\n+\t\tout.print(\"throws \");\n+\t\tfor (int j = 0; j < except.length; j++) {\n+\t\t\tout.print(getPrettyName(except[j]));\n+\t\t\tif (j+1 < except.length) {\n+\t\t\t\tout.print(\", \");\n+\t\t\t}\n+\t\t}\n+\t\tout.print(\" {\");\n+\t\tctrl.indent();\n+\n+\t\tout.print(\"try {\");\n+\t\tctrl.indent();\n+\n+\t\tif (need12Stubs) {\n+\t\t\tif (need11Stubs) {\n+\t\t\t\tout.print(\"if (useNewInvoke) {\");\n+\t\t\t\tctrl.indent();\n+\t\t\t}\n+\t\t\tif (returntype != Void.TYPE) {\n+\t\t\t\tout.print(\"java.lang.Object $result = \");\n+\t\t\t}\n+\t\t\tout.print(\"ref.invoke(this, $method_\" + m.getName() + \"_\" + i + \", \");\n+\t\t\tif (sig.length == 0) {\n+\t\t\t\tout.print(\"null, \");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tout.print(\"new java.lang.Object[] {\");\n+\t\t\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\t\t\tif (sig[j] == Boolean.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Boolean($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (sig[j] == Byte.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Byte($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (sig[j] == Character.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Character($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (sig[j] == Short.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Short($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (sig[j] == Integer.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Integer($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (sig[j] == Long.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Long($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (sig[j] == Float.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Float($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (sig[j] == Double.TYPE) {\n+\t\t\t\t\t\tout.print(\"new java.lang.Double($param_\" + j + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tout.print(\"$param_\" + j);\n+\t\t\t\t\t}\n+\t\t\t\t\tif (j+1 < sig.length) {\n+\t\t\t\t\t\tout.print(\", \");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tout.print(\"}, \");\n+\t\t\t}\n+\t\t\tout.print(Long.toString(remotemethods[i].hash) + \"L\");\n+\t\t\tout.print(\");\");\n+\n+\t\t\tif (returntype != Void.TYPE) {\n+\t\t\t\tout.println();\n+\t\t\t\tout.print(\"return (\");\n+\t\t\t\tif (returntype == Boolean.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Boolean)$result).booleanValue()\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Byte.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Byte)$result).byteValue()\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Character.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Character)$result).charValue()\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Short.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Short)$result).shortValue()\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Integer.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Integer)$result).intValue()\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Long.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Long)$result).longValue()\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Float.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Float)$result).floatValue()\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Double.TYPE) {\n+\t\t\t\t\tout.print(\"((java.lang.Double)$result).doubleValue()\");\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tout.print(\"(\" + getPrettyName(returntype) + \")$result\");\n+\t\t\t\t}\n+\t\t\t\tout.print(\");\");\n+\t\t\t}\n+\n+\t\t\tif (need11Stubs) {\n+\t\t\t\tctrl.unindent();\n+\t\t\t\tout.println(\"}\");\n+\t\t\t\tout.print(\"else {\");\n+\t\t\t\tctrl.indent();\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (need11Stubs) {\n+\t\t\tout.println(\"java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, \" + i + \", interfaceHash);\");\n+\t\t\tout.print(\"try {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"java.io.ObjectOutput out = call.getOutputStream();\");\n+\t\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\t\tout.println();\n+\t\t\t\tif (sig[j] == Boolean.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeBoolean(\");\n+\t\t\t\t}\n+\t\t\t\telse if (sig[j] == Byte.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeByte(\");\n+\t\t\t\t}\n+\t\t\t\telse if (sig[j] == Character.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeChar(\");\n+\t\t\t\t}\n+\t\t\t\telse if (sig[j] == Short.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeShort(\");\n+\t\t\t\t}\n+\t\t\t\telse if (sig[j] == Integer.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeInt(\");\n+\t\t\t\t}\n+\t\t\t\telse if (sig[j] == Long.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeLong(\");\n+\t\t\t\t}\n+\t\t\t\telse if (sig[j] == Float.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeFloat(\");\n+\t\t\t\t}\n+\t\t\t\telse if (sig[j] == Double.TYPE) {\n+\t\t\t\t\tout.print(\"out.writeDouble(\");\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tout.print(\"out.writeObject(\");\n+\t\t\t\t}\n+\t\t\t\tout.print(\"$param_\" + j + \");\");\n+\t\t\t}\n+\t\t\tctrl.unindent();\n+\t\t\tout.println(\"}\");\n+\t\t\tout.print(\"catch (java.io.IOException e) {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"throw new java.rmi.MarshalException(\\\"error marshalling arguments\\\", e);\");\n+\t\t\tctrl.unindent();\n+\t\t\tout.println(\"}\");\n+\t\t\tout.println(\"ref.invoke(call);\");\n+\t\t\tif (returntype != Void.TYPE) {\n+\t\t\t\tout.println(getPrettyName(returntype) + \" $result;\");\n+\t\t\t}\n+\t\t\tout.print(\"try {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"java.io.ObjectInput in = call.getInputStream();\");\n+\t\t\tboolean needcastcheck = false;\n+\t\t\tif (returntype != Void.TYPE) {\n+\t\t\t\tout.println();\n+\t\t\t\tout.print(\"$result = \");\n+\t\t\t\tif (returntype == Boolean.TYPE) {\n+\t\t\t\t\tout.print(\"in.readBoolean();\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Byte.TYPE) {\n+\t\t\t\t\tout.print(\"in.readByte();\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Character.TYPE) {\n+\t\t\t\t\tout.print(\"in.readChar();\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Short.TYPE) {\n+\t\t\t\t\tout.print(\"in.readShort();\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Integer.TYPE) {\n+\t\t\t\t\tout.print(\"in.readInt();\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Long.TYPE) {\n+\t\t\t\t\tout.print(\"in.readLong();\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Float.TYPE) {\n+\t\t\t\t\tout.print(\"in.readFloat();\");\n+\t\t\t\t}\n+\t\t\t\telse if (returntype == Double.TYPE) {\n+\t\t\t\t\tout.print(\"in.readDouble();\");\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tif (returntype != Object.class) {\n+\t\t\t\t\t\tout.print(\"(\" + getPrettyName(returntype) + \")\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tneedcastcheck = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tout.print(\"in.readObject();\");\n+\t\t\t\t}\n+\t\t\t\tout.println();\n+\t\t\t\tout.print(\"return ($result);\");\n+\t\t\t}\n+\t\t\tctrl.unindent();\n+\t\t\tout.println(\"}\");\n+\t\t\tout.print(\"catch (java.io.IOException e) {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"throw new java.rmi.UnmarshalException(\\\"error unmarshalling return\\\", e);\");\n+\t\t\tctrl.unindent();\n+\t\t\tout.println(\"}\");\n+\t\t\tif (needcastcheck) {\n+\t\t\t\tout.print(\"catch (java.lang.ClassNotFoundException e) {\");\n+\t\t\t\tctrl.indent();\n+\t\t\t\tout.print(\"throw new java.rmi.UnmarshalException(\\\"error unmarshalling return\\\", e);\");\n+\t\t\t\tctrl.unindent();\n+\t\t\t\tout.println(\"}\");\n+\t\t\t}\n+\t\t\tout.print(\"finally {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"ref.done(call);\");\n+\t\t\tctrl.unindent();\n+\t\t\tout.print(\"}\");\n+\n+\t\t\tif (need12Stubs && need11Stubs) {\n+\t\t\t\tctrl.unindent();\n+\t\t\t\tout.print(\"}\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tctrl.unindent();\n+\t\tout.print(\"}\");\n+\n+\t\tboolean needgeneral = true;\n+\t\tfor (int j = 0; j < except.length; j++) {\n+\t\t\tout.println();\n+\t\t\tout.print(\"catch (\" + getPrettyName(except[j]) + \" e) {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"throw e;\");\n+\t\t\tctrl.unindent();\n+\t\t\tout.print(\"}\");\n+\t\t\tif (except[j] == Exception.class) {\n+\t\t\t\tneedgeneral = false;\n+\t\t\t}\n+\t\t}\n+\t\tif (needgeneral) {\n+\t\t\tout.println();\n+\t\t\tout.print(\"catch (java.lang.Exception e) {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"throw new java.rmi.UnexpectedException(\\\"undeclared checked exception\\\", e);\");\n+\t\t\tctrl.unindent();\n+\t\t\tout.print(\"}\");\n+\t\t}\n+\n+\t\tctrl.unindent();\n+\t\tout.print(\"}\");\n+\t\tout.println();\n+\t}\n+\n+\tctrl.unindent();\n+\tout.println(\"}\");\n+\n+\tout.close();\n+}\n+\n+private void generateSkel() throws IOException {\n+\tskelname = classname + \"_Skel\";\n+\tctrl = new TabbedWriter(new FileWriter(skelname + \".java\"));\n+\tout = new PrintWriter(ctrl);\n+\n+\tif (verbose) {\n+\t\tSystem.out.println(\"[Generating class \" + skelname + \".java]\");\n+\t}\n+\n+\tout.println(\"// Skel class generated by rmic - DO NOT EDIT!\");\n+\tout.println();\n+\tif (fullclassname != classname) {\n+\t\tString pname = fullclassname.substring(0, fullclassname.lastIndexOf('.'));\n+\t\tout.println(\"package \" + pname + \";\");\n+\t\tout.println();\n+\t}\n+\n+\tout.print(\"public final class \" + skelname);\n+\tctrl.indent();\n+\t\n+\t// Output interfaces we implement\n+\tout.print(\"implements java.rmi.server.Skeleton\");\n+\n+\tctrl.unindent();\n+\tout.print(\"{\");\n+\tctrl.indent();\n+\n+\t// Interface hash - don't know how to calculate this - XXX\n+\tout.println(\"private static final long interfaceHash = \" + RMIHashes.getInterfaceHash(clazz) + \"L;\");\n+\tout.println();\n+\n+\t// Operation table\n+\tout.print(\"private static final java.rmi.server.Operation[] operations = {\");\n+\n+\tctrl.indent();\n+\tfor (int i = 0; i < remotemethods.length; i++) {\n+\t\tMethod m = remotemethods[i].meth;\n+\t\tout.print(\"new java.rmi.server.Operation(\\\"\");\n+\t\tout.print(getPrettyName(m.getReturnType()) + \" \");\n+\t\tout.print(m.getName() + \"(\");\n+\t\t// Output signature\n+\t\tClass[] sig = m.getParameterTypes();\n+\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\tout.print(getPrettyName(sig[j]));\n+\t\t\tif (j+1 < sig.length) {\n+\t\t\t\tout.print(\", \");\n+\t\t\t}\n+\t\t}\n+\t\tout.print(\"\\\")\");\n+\t\tif (i + 1 < remotemethods.length) {\n+\t\t\tout.println(\",\");\n+\t\t}\n+\t}\n+\tctrl.unindent();\n+\tout.println(\"};\");\n+\n+\tout.println();\n+\n+\t// getOpertions method\n+\tout.print(\"public java.rmi.server.Operation[] getOperations() {\");\n+\tctrl.indent();\n+\tout.print(\"return ((java.rmi.server.Operation[]) operations.clone());\");\n+\tctrl.unindent();\n+\tout.println(\"}\");\n+\n+\tout.println();\n+\n+\t// Dispatch method\n+\tout.print(\"public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash) throws java.lang.Exception {\");\n+\tctrl.indent();\n+\n+\tout.print(\"if (opnum < 0) {\");\n+\tctrl.indent();\n+\n+\tfor (int i = 0; i < remotemethods.length; i++) {\n+\t\tout.print(\"if (hash == \" + Long.toString(remotemethods[i].hash) + \"L) {\");\n+\t\tctrl.indent();\n+\t\tout.print(\"opnum = \" + i + \";\");\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tout.print(\"else \");\n+\t}\n+\tout.print(\"{\");\n+\tctrl.indent();\n+\tout.print(\"throw new java.rmi.server.SkeletonMismatchException(\\\"interface hash mismatch\\\");\");\n+\tctrl.unindent();\n+\tout.print(\"}\");\n+\n+\tctrl.unindent();\n+\tout.println(\"}\");\n+\tout.print(\"else if (hash != interfaceHash) {\");\n+\tctrl.indent();\n+\tout.print(\"throw new java.rmi.server.SkeletonMismatchException(\\\"interface hash mismatch\\\");\");\n+\tctrl.unindent();\n+\tout.println(\"}\");\n+\n+\tout.println();\n+\n+\tout.println(fullclassname + \" server = (\" + fullclassname + \")obj;\");\n+\tout.println(\"switch (opnum) {\");\n+\n+\t// Method dispatch\n+\tfor (int i = 0; i < remotemethods.length; i++) {\n+\t\tMethod m = remotemethods[i].meth;\n+\t\tout.println(\"case \" + i + \":\");\n+\t\tout.print(\"{\");\n+\t\tctrl.indent();\n+\n+\t\tClass[] sig = m.getParameterTypes();\n+\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\tout.print(getPrettyName(sig[j]));\n+\t\t\tout.println(\" $param_\" + j + \";\");\n+\t\t}\n+\n+\t\tout.print(\"try {\");\n+\t\tboolean needcastcheck = false;\n+\t\tctrl.indent();\n+\t\tout.println(\"java.io.ObjectInput in = call.getInputStream();\");\n+\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\tout.print(\"$param_\" + j + \" = \");\n+\t\t\tif (sig[j] == Boolean.TYPE) {\n+\t\t\t\tout.print(\"in.readBoolean();\");\n+\t\t\t}\n+\t\t\telse if (sig[j] == Byte.TYPE) {\n+\t\t\t\tout.print(\"in.readByte();\");\n+\t\t\t}\n+\t\t\telse if (sig[j] == Character.TYPE) {\n+\t\t\t\tout.print(\"in.readChar();\");\n+\t\t\t}\n+\t\t\telse if (sig[j] == Short.TYPE) {\n+\t\t\t\tout.print(\"in.readShort();\");\n+\t\t\t}\n+\t\t\telse if (sig[j] == Integer.TYPE) {\n+\t\t\t\tout.print(\"in.readInt();\");\n+\t\t\t}\n+\t\t\telse if (sig[j] == Long.TYPE) {\n+\t\t\t\tout.print(\"in.readLong();\");\n+\t\t\t}\n+\t\t\telse if (sig[j] == Float.TYPE) {\n+\t\t\t\tout.print(\"in.readFloat();\");\n+\t\t\t}\n+\t\t\telse if (sig[j] == Double.TYPE) {\n+\t\t\t\tout.print(\"in.readDouble();\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tif (sig[j] != Object.class) {\n+\t\t\t\t\tout.print(\"(\" + getPrettyName(sig[j]) + \")\");\n+\t\t\t\t\tneedcastcheck = true;\n+\t\t\t\t}\n+\t\t\t\tout.print(\"in.readObject();\");\n+\t\t\t}\n+\t\t\tout.println();\n+\t\t}\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tout.print(\"catch (java.io.IOException e) {\");\n+\t\tctrl.indent();\n+\t\tout.print(\"throw new java.rmi.UnmarshalException(\\\"error unmarshalling arguments\\\", e);\");\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tif (needcastcheck) {\n+\t\t\tout.print(\"catch (java.lang.ClassCastException e) {\");\n+\t\t\tctrl.indent();\n+\t\t\tout.print(\"throw new java.rmi.UnmarshalException(\\\"error unmarshalling arguments\\\", e);\");\n+\t\t\tctrl.unindent();\n+\t\t\tout.println(\"}\");\n+\t\t}\n+\t\tout.print(\"finally {\");\n+\t\tctrl.indent();\n+\t\tout.print(\"call.releaseInputStream();\");\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\n+\t\tClass returntype = m.getReturnType();\n+\t\tif (returntype != Void.TYPE) {\n+\t\t\tout.print(getPrettyName(returntype) + \" $result = \");\n+\t\t}\n+\t\tout.print(\"server.\" + m.getName() + \"(\");\n+\t\tfor (int j = 0; j < sig.length; j++) {\n+\t\t\tout.print(\"$param_\" + j);\n+\t\t\tif (j + 1 < sig.length) {\n+\t\t\t\tout.print(\", \");\n+\t\t\t}\n+\t\t}\n+\t\tout.println(\");\");\n+\n+\t\tout.print(\"try {\");\n+\t\tctrl.indent();\n+\t\tout.print(\"java.io.ObjectOutput out = call.getResultStream(true);\");\n+\t\tif (returntype != Void.TYPE) {\n+\t\t\tout.println();\n+\t\t\tif (returntype == Boolean.TYPE) {\n+\t\t\t\tout.print(\"out.writeBoolean($result);\");\n+\t\t\t}\n+\t\t\telse if (returntype == Byte.TYPE) {\n+\t\t\t\tout.print(\"out.writeByte($result);\");\n+\t\t\t}\n+\t\t\telse if (returntype == Character.TYPE) {\n+\t\t\t\tout.print(\"out.writeChar($result);\");\n+\t\t\t}\n+\t\t\telse if (returntype == Short.TYPE) {\n+\t\t\t\tout.print(\"out.writeShort($result);\");\n+\t\t\t}\n+\t\t\telse if (returntype == Integer.TYPE) {\n+\t\t\t\tout.print(\"out.writeInt($result);\");\n+\t\t\t}\n+\t\t\telse if (returntype == Long.TYPE) {\n+\t\t\t\tout.print(\"out.writeLong($result);\");\n+\t\t\t}\n+\t\t\telse if (returntype == Float.TYPE) {\n+\t\t\t\tout.print(\"out.writeFloat($result);\");\n+\t\t\t}\n+\t\t\telse if (returntype == Double.TYPE) {\n+\t\t\t\tout.print(\"out.writeDouble($result);\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tout.print(\"out.writeObject($result);\");\n+\t\t\t}\n+\t\t}\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tout.print(\"catch (java.io.IOException e) {\");\n+\t\tctrl.indent();\n+\t\tout.print(\"throw new java.rmi.MarshalException(\\\"error marshalling return\\\", e);\");\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tout.print(\"break;\");\n+\n+\t\tctrl.unindent();\n+\t\tout.println(\"}\");\n+\t\tout.println();\n+\t}\n+\n+\tout.print(\"default:\");\n+\tctrl.indent();\n+\tout.print(\"throw new java.rmi.UnmarshalException(\\\"invalid method number\\\");\");\n+\tctrl.unindent();\n+\tout.print(\"}\");\n+\n+\tctrl.unindent();\n+\tout.print(\"}\");\n+\n+\tctrl.unindent();\n+\tout.println(\"}\");\n+\n+\tout.close();\n+}\n+\n+private void compile(String name) throws Exception {\n+\tthrow new Error (\"Not implemented\");\n+//  \tCompiler comp = Compiler.getInstance();\n+//  \tif (verbose) {\n+//  \t\tSystem.out.println(\"[Compiling class \" + name + \"]\");\n+//  \t}\n+//  \tcomp.setDestination(destination);\n+//  \tboolean result = comp.compile(name);\n+//  \tif (result == false) {\n+//  \t\tthrow comp.getException();\n+//  \t}\n+}\n+\n+private static String getPrettyName(Class cls) {\n+        StringBuffer str = new StringBuffer();\n+        for (int count = 0;; count++) {\n+                if (!cls.isArray()) {\n+                        str.append(cls.getName());\n+                        for (; count > 0; count--) {\n+                                str.append(\"[]\");\n+                        }\n+                        return (str.toString());\n+                }\n+                cls = cls.getComponentType();\n+        }\n+}\n+\n+/**\n+ * Sort exceptions so the most general go last.\n+ */\n+private Class[] sortExceptions(Class[] except) {\n+\tfor (int i = 0; i < except.length; i++) {\n+\t\tfor (int j = i+1; j < except.length; j++) {\n+\t\t\tif (except[i].isAssignableFrom(except[j])) {\n+\t\t\t\tClass tmp = except[i];\n+\t\t\t\texcept[i] = except[j];\n+\t\t\t\texcept[j] = tmp;\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn (except);\n+}\n+\n+/**\n+ * Process the options until we find the first argument.\n+ */\n+private void parseOptions() {\n+\tfor (;;) {\n+\t\tif (next >= args.length || args[next].charAt(0) != '-') {\n+\t\t\tbreak;\n+\t\t}\n+\t\tString arg = args[next];\n+\t\tnext++;\n+\n+\t\tif (arg.equals(\"-keep\")) {\n+\t\t\tkeep = true;\n+\t\t}\n+\t\telse if (arg.equals(\"-keepgenerated\")) {\n+\t\t\tkeep = true;\n+\t\t}\n+\t\telse if (arg.equals(\"-v1.1\")) {\n+\t\t\tneed11Stubs = true;\n+\t\t\tneed12Stubs = false;\n+\t\t}\n+\t\telse if (arg.equals(\"-vcompat\")) {\n+\t\t\tneed11Stubs = true;\n+\t\t\tneed12Stubs = true;\n+\t\t}\n+\t\telse if (arg.equals(\"-v1.2\")) {\n+\t\t\tneed11Stubs = false;\n+\t\t\tneed12Stubs = true;\n+\t\t}\n+\t\telse if (arg.equals(\"-g\")) {\n+\t\t}\n+\t\telse if (arg.equals(\"-depend\")) {\n+\t\t}\n+\t\telse if (arg.equals(\"-nowarn\")) {\n+\t\t}\n+\t\telse if (arg.equals(\"-verbose\")) {\n+\t\t\tverbose = true;\n+\t\t}\n+\t\telse if (arg.equals(\"-nocompile\")) {\n+\t\t\tcompile = false;\n+\t\t}\n+\t\telse if (arg.equals(\"-classpath\")) {\n+\t\t\tnext++;\n+\t\t}\n+\t\telse if (arg.equals(\"-d\")) {\n+\t\t\tdestination = args[next];\n+\t\t\tnext++;\n+\t\t}\n+\t\telse if (arg.charAt(1) == 'J') {\n+\t\t}\n+\t\telse {\n+\t\t\tSystem.err.println(\"Unknown option: \" + arg);\n+\t\t}\n+\t}\n+}\n+\n+private static void usage() {\n+\tSystem.out.println(\n+\"usage: rmic [-options] classes\\n\" +\n+\"Options are:\\n\" +\n+\"\t-keep \t\t\tDon't delete any intermediate files\\n\" +\n+\"\t-keepgenerated \t\tSame as -keep\\n\" +\n+\"\t-v1.1\t\t\tJava 1.1 style stubs only\\n\" +\n+\"\t-vcompat\t\tJava 1.1 & Java 1.2 stubs\\n\" +\n+\"\t-v1.2\t\t\tJava 1.2 style stubs only\\n\" +\n+\"\t-g *\t\t\tGenerated debugging information\\n\" +\n+\"\t-depend *\t\tRecompile out-of-date files\\n\" +\n+\"\t-nowarn\t*\t\tSuppress warning messages\\n\" +\n+\"\t-nocompile\t\tDon't compile the generated files\\n\" +\n+\"\t-verbose \t\tOutput what's going on\\n\" +\n+\"\t-classpath <path> *\tUse given path as classpath\\n\" +\n+\"\t-d <directory> \t\tSpecify where to place generated classes\\n\" +\n+\"\t-J<flag> *\t\tPass flag to Java\\n\" +\n+\"  * Option currently ignored\"\n+\t);\n+}\n+\n+static class MethodRef\n+\timplements Comparable {\n+\n+Method meth;\n+String sig;\n+long hash;\n+\n+MethodRef(Method m) {\n+\tmeth = m;\n+\t// We match on the name - but what about overloading? - XXX\n+\tsig = m.getName();\n+\thash = RMIHashes.getMethodHash(m);\n+}\n+\n+public int compareTo(Object obj) {\n+\tMethodRef that = (MethodRef)obj;\n+\treturn (this.sig.compareTo(that.sig));\n+}\n+\n+}\n+\n+}"}, {"sha": "c2e668ca5ea4a956806d6e481a3de50015df0b59", "filename": "libjava/gnu/java/rmi/rmic/TabbedWriter.java", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FTabbedWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FTabbedWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FTabbedWriter.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,90 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.rmic;\n+\n+import java.io.FilterWriter;\n+import java.io.Writer;\n+import java.io.IOException;\n+\n+public class TabbedWriter\n+\textends FilterWriter {\n+\n+private static final String defaultTabstring = \"    \";\n+private char[] tabstring; \n+private int tabs;\n+\n+public TabbedWriter(Writer o) {\n+\tthis(o, defaultTabstring);\n+}\n+\n+public TabbedWriter(Writer o, String str) {\n+\tsuper(o);\n+\ttabs = 0;\n+\ttabstring = str.toCharArray();\n+}\n+\n+public void write(int c) throws IOException {\n+\tout.write(c);\n+\tif (c == '\\n') {\n+\t\tfor (int i = 0; i < tabs; i++) {\n+\t\t\tout.write(tabstring, 0, tabstring.length);\n+\t\t}\n+\t}\n+}\n+\n+public void write(char cbuf[], int off, int len) throws IOException {\n+\tfor (int i = 0; i < len; i++) {\n+\t\twrite((int)cbuf[i+off]);\n+\t}\n+}\n+\n+public void write(String str, int off, int len) throws IOException {\n+\twrite(str.toCharArray(), off, len);\n+}\n+\n+public void unindent() throws IOException {\n+\tunindent(1);\n+}\n+\n+public void unindent(int nr) throws IOException {\n+\tindent(-nr);\n+}\n+\n+public void indent() throws IOException {\n+\tindent(1);\n+}\n+\n+public void indent(int nr) throws IOException {\n+\ttabs += nr;\n+\tif (tabs < 0) {\n+\t\ttabs = 0;\n+\t}\n+\twrite((int)'\\n');\n+}\n+\n+}"}, {"sha": "431a6999aab19b7a2283743ebb6671e00efd5ca7", "filename": "libjava/gnu/java/rmi/server/ProtocolConstants.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FProtocolConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FProtocolConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FProtocolConstants.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,53 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+public interface ProtocolConstants {\n+\n+final public static int PROTOCOL_HEADER = 0x4a524d49; // JRMI\n+final public static int PROTOCOL_VERSION = 2;\n+\n+final public static int STREAM_PROTOCOL = 0x4b;\n+final public static int SINGLE_OP_PROTOCOL = 0x4c;\n+final public static int MULTIPLEX_PROTOCOL = 0x4d;\n+\n+final public static int PROTOCOL_ACK = 0x4e;\n+final public static int PROTOCOL_NACK = 0x4f;\n+\n+final public static int MESSAGE_CALL = 0x50;\n+final public static int MESSAGE_CALL_ACK = 0x51;\n+final public static int MESSAGE_PING = 0x52;\n+final public static int MESSAGE_PING_ACK = 0x53;\n+final public static int MESSAGE_DGCACK = 0x54;\n+\n+final public static int RETURN_ACK = 0x01;\n+final public static int RETURN_NACK = 0x02;\n+\n+final public static int DEFAULT_PROTOCOL = STREAM_PROTOCOL;\n+\n+};"}, {"sha": "610c3a73bfe5f5e6e054e147f40aca3ba9ed23e8", "filename": "libjava/gnu/java/rmi/server/RMIDefaultSocketFactory.java", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIDefaultSocketFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIDefaultSocketFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIDefaultSocketFactory.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,49 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.rmi.server.RMISocketFactory;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.net.ServerSocket;\n+\n+public class RMIDefaultSocketFactory\n+\textends RMISocketFactory {\n+\n+public RMIDefaultSocketFactory() {\n+}\n+\n+public Socket createSocket(String host, int port) throws IOException {\n+\treturn (new Socket(host, port));\n+}\n+\n+public ServerSocket createServerSocket(int port) throws IOException {\n+\treturn (new ServerSocket(port));\n+}\n+\n+}"}, {"sha": "dc00276de7fd398a4c4ff486e095628db7df66eb", "filename": "libjava/gnu/java/rmi/server/RMIHashes.java", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIHashes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIHashes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIHashes.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,45 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.lang.reflect.Method;\n+import java.lang.Class;\n+import gnu.java.security.provider.SHA;\n+\n+public class RMIHashes\n+{\n+  public static long getMethodHash(Method meth)\n+  {\n+    return meth.hashCode ();\n+  }\n+\n+  public static long getInterfaceHash(Class clazz)\n+  {\n+    return clazz.hashCode ();\n+  }\n+}"}, {"sha": "b6efbf0b8d835a67c7f91981f117f0d320bea49c", "filename": "libjava/gnu/java/rmi/server/RMIObjectInputStream.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIObjectInputStream.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,65 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.io.ObjectStreamClass;\n+import java.io.ObjectInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.MalformedURLException;\n+import java.rmi.server.RMIClassLoader;\n+\n+public class RMIObjectInputStream\n+\textends ObjectInputStream {\n+\n+UnicastConnectionManager manager;\n+\n+public RMIObjectInputStream(InputStream strm, UnicastConnectionManager man) throws IOException {\n+\tsuper(strm);\n+\tmanager = man;\n+\tenableResolveObject(true);\n+}\n+\n+protected Class resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+//System.out.println(\"Resolving class: \" + desc.getName());\n+\tString annotation = (String)readObject();\n+\tif (annotation == null) {\n+\t\treturn (super.resolveClass(desc));\n+\t}\n+\telse {\n+\t\ttry {\n+\t\t\treturn (RMIClassLoader.loadClass(new URL(annotation), desc.getName()));\n+\t\t}\n+\t\tcatch (MalformedURLException _) {\n+\t\t\tthrow new ClassNotFoundException(desc.getName());\n+\t\t}\n+\t}\n+}\n+\n+}"}, {"sha": "960252b6477880a1d1dcfc048e0991f8106851ad", "filename": "libjava/gnu/java/rmi/server/RMIObjectOutputStream.java", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIObjectOutputStream.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,47 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.IOException;\n+import java.rmi.server.RMIClassLoader;\n+\n+public class RMIObjectOutputStream\n+\textends ObjectOutputStream {\n+\n+public RMIObjectOutputStream(OutputStream strm) throws IOException {\n+\tsuper(strm);\n+}\n+\n+protected void annotateClass(Class cls) throws IOException {\n+//System.out.println(\"Annotating class: \" + cls);\n+\twriteObject(RMIClassLoader.getClassAnnotation(cls));\n+}\n+\n+}"}, {"sha": "04d18bedc512f8302c8ae9d5150f4af83603e1e1", "filename": "libjava/gnu/java/rmi/server/UnicastConnection.java", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnection.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,162 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.lang.Runnable;\n+import java.net.Socket;\n+import java.net.ServerSocket;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectOutput;\n+import java.io.ObjectInput;\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+\n+public class UnicastConnection \n+\timplements Runnable, ProtocolConstants {\n+\n+UnicastConnectionManager manager;\n+Socket sock;\n+DataInputStream din;\n+DataOutputStream dout;\n+ObjectInputStream oin;\n+ObjectOutputStream oout;\n+\n+UnicastConnection(UnicastConnectionManager man, Socket sock) {\n+\tthis.manager = man;\n+\tthis.sock = sock;\n+}\n+\n+void acceptConnection() throws IOException {\n+//System.out.println(\"Accepting connection on \" + lport);\n+\tdin = new DataInputStream(sock.getInputStream());\n+\tdout = new DataOutputStream(sock.getOutputStream());\n+\n+\tint sig = din.readInt();\n+\tif (sig != PROTOCOL_HEADER) {\n+\t\tthrow new IOException(\"bad protocol header\");\n+\t}\n+\tshort ver = din.readShort();\n+\tif (ver != PROTOCOL_VERSION) {\n+\t\tthrow new IOException(\"bad protocol version\");\n+\t}\n+\tint protocol = din.readUnsignedByte();\n+\tif (protocol != SINGLE_OP_PROTOCOL) {\n+\t\t// Send an ACK\n+\t\tdout.writeByte(PROTOCOL_ACK);\n+\n+\t\t// Send my hostname and port\n+\t\tdout.writeUTF(manager.serverName);\n+\t\tdout.writeInt(manager.serverPort);\n+\n+\t\t// Read their hostname and port\n+\t\tString rhost = din.readUTF();\n+\t\tint rport = din.readInt();\n+\t}\n+\t// Okay, ready to roll ...\n+}\n+\n+void makeConnection(int protocol) throws IOException {\n+\tdout = new DataOutputStream(sock.getOutputStream());\n+\tdin = new DataInputStream(sock.getInputStream());\n+\n+\t// Send header\n+\tdout.writeInt(PROTOCOL_HEADER);\n+\tdout.writeShort(PROTOCOL_VERSION);\n+\tdout.writeByte(protocol);\n+\tdout.flush();\n+\n+\tif (protocol != SINGLE_OP_PROTOCOL) {\n+\t\t// Get back ack.\n+\t\tint ack = din.readUnsignedByte();\n+\t\tif (ack != PROTOCOL_ACK) {\n+\t\t\tthrow new RemoteException(\"Unsupported protocol\");\n+\t\t}\n+\n+\t\t// Read in host and port\n+\t\tString dicard_rhost = din.readUTF();\n+\t\tint discard_rport = din.readInt();\n+\n+\t\t// Send them my endpoint\n+\t\tdout.writeUTF(manager.serverName);\n+\t\tdout.writeInt(manager.serverPort);\n+\t}\n+\t// Okay, ready to roll ...\n+}\n+\n+DataInputStream getDataInputStream() throws IOException {\n+\treturn (din);\n+}\n+\n+DataOutputStream getDataOutputStream() throws IOException {\n+\treturn (dout);\n+}\n+\n+ObjectInputStream getObjectInputStream() throws IOException {\n+\tif (oin == null) {\n+\t\toin = new RMIObjectInputStream(din, manager);\n+\t}\n+\treturn (oin);\n+}\n+\n+ObjectOutputStream getObjectOutputStream() throws IOException {\n+\tif (oout == null) {\n+\t\toout = new RMIObjectOutputStream(dout);\n+\t}\n+\treturn (oout);\n+}\n+\n+void disconnect() {\n+\toin = null;\n+\toout = null;\n+\ttry {\n+\t\tsock.close();\n+\t}\n+\tcatch (IOException _) {\n+\t}\n+\tdin = null;\n+\tdout = null;\n+\tsock = null;\n+}\n+\n+/**\n+ * We run connects on the server. Dispatch it then discard it.\n+ */\n+public void run() {\n+\ttry {\n+\t\tUnicastServer.dispatch(this);\n+\t\tmanager.discardConnection(this);\n+\t}\n+\tcatch (Exception e) {\n+\t\te.printStackTrace();\n+\t}\n+}\n+\n+}"}, {"sha": "84152bd880b9f18abb2d30a9ade0ecad2405e6e1", "filename": "libjava/gnu/java/rmi/server/UnicastConnectionManager.java", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,262 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.rmi.server.RMISocketFactory;\n+import java.rmi.server.RMIServerSocketFactory;\n+import java.rmi.server.RMIClientSocketFactory;\n+import java.rmi.RemoteException;\n+import gnu.java.rmi.server.UnicastConnection;\n+import java.util.Hashtable;\n+import java.net.Socket;\n+import java.net.ServerSocket;\n+import java.io.IOException;\n+import java.io.ObjectOutput;\n+import java.io.ObjectInput;\n+import java.lang.Thread;\n+import java.lang.Runnable;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+public class UnicastConnectionManager\n+\timplements Runnable, ProtocolConstants {\n+\n+private static String localhost;\n+private static Hashtable servers = new Hashtable();\n+\n+private Thread serverThread;\n+private ServerSocket ssock;\n+String serverName;\n+int serverPort;\n+private RMIServerSocketFactory serverFactory;\n+private RMIClientSocketFactory clientFactory;\n+\n+static {\n+        try {\n+                localhost = InetAddress.getLocalHost().getHostName();\n+        }\n+        catch (UnknownHostException _) {\n+                localhost = \"localhost\";\n+        }\n+}\n+\n+private UnicastConnectionManager(String host, int port, RMIClientSocketFactory csf) {\n+\tssock = null;\n+\tserverName = host;\n+\tserverPort = port;\n+\tserverFactory = null;\n+\tclientFactory = csf;\n+}\n+\n+private UnicastConnectionManager(int port, RMIServerSocketFactory ssf) {\n+\ttry {\n+\t\tssock = ssf.createServerSocket(port);\n+\t\tserverPort = ssock.getLocalPort();\n+\t}\n+\tcatch (IOException _) {\n+\t\ttry {\n+\t\t\tssock = ssf.createServerSocket(0);\n+\t\t\tserverPort = ssock.getLocalPort();\n+\t\t}\n+\t\tcatch (IOException __) {\n+\t\t\tssock = null;\n+\t\t\tserverPort = 0;\n+\t\t}\n+\t}\n+\tserverName = localhost;\n+\tserverFactory = ssf;\n+\tclientFactory = null;\n+}\n+\n+/**\n+ * Return a client connection manager which will connect to the given\n+ * host/port.\n+ */\n+public static synchronized UnicastConnectionManager getInstance(String host, int port, RMIClientSocketFactory csf) {\n+//System.out.println(\"getInstance: \" + host + \",\" + port + \",\" + csf);\n+\tif (csf == null) {\n+\t\tcsf = RMISocketFactory.getSocketFactory();\n+\t}\n+\tTripleKey key = new TripleKey(host, port, csf);\n+\tUnicastConnectionManager man = (UnicastConnectionManager)servers.get(key);\n+\tif (man == null) {\n+\t\tman = new UnicastConnectionManager(host, port, csf);\n+\t\tservers.put(key, man);\n+\t}\n+\treturn (man);\n+}\n+\n+/**\n+ * Return a server connection manager which will accept connection on the\n+ * given port.\n+ */\n+public static synchronized UnicastConnectionManager getInstance(int port, RMIServerSocketFactory ssf) {\n+//System.out.println(\"getInstance: \" + port + \",\" + ssf);\n+\tif (ssf == null) {\n+\t\tssf = RMISocketFactory.getSocketFactory();\n+\t}\n+\tTripleKey key = new TripleKey(localhost, port, ssf);\n+\tUnicastConnectionManager man = (UnicastConnectionManager)servers.get(key);\n+\tif (man == null) {\n+\t\tman = new UnicastConnectionManager(port, ssf);\n+\t\t// The provided port might not be the set port.\n+\t\tkey.port = man.serverPort;\n+\t\tservers.put(key, man);\n+\t}\n+\treturn (man);\n+}\n+\n+/**\n+ * Get a connection from this manager.\n+ */\n+public UnicastConnection getConnection() throws IOException {\n+\tif (ssock == null) {\n+\t\treturn (getClientConnection());\n+\t}\n+\telse {\n+\t\treturn (getServerConnection());\n+\t}\n+}\n+\n+/**\n+ * Accept a connection to this server.\n+ */\n+private UnicastConnection getServerConnection() throws IOException {\n+\tSocket sock = ssock.accept();\n+\tUnicastConnection conn = new UnicastConnection(this, sock);\n+\tconn.acceptConnection();\n+//System.out.println(\"Server connection \" + conn);\n+\treturn (conn);\n+}\n+\n+/**\n+ * Make a conection from this client to the server.\n+ */\n+private UnicastConnection getClientConnection() throws IOException {\n+\tSocket sock = clientFactory.createSocket(serverName, serverPort);\n+\tUnicastConnection conn = new UnicastConnection(this, sock);\n+\tconn.makeConnection(DEFAULT_PROTOCOL);\n+//System.out.println(\"Client connection \" + conn);\n+\treturn (conn);\n+}\n+\n+/**\n+ * Discard a connection when we're done with it - maybe it can be\n+ * recycled.\n+ */\n+public void discardConnection(UnicastConnection conn) {\n+//System.out.println(\"Discarding connection \" + conn);\n+\tconn.disconnect();\n+}\n+\n+/**\n+ * Start a server on this manager if it's a server socket and we've not\n+ * already got one running.\n+ */\n+public void startServer() {\n+\tsynchronized(this) {\n+\t\tif (ssock == null || serverThread != null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tserverThread = new Thread(this);\n+\t}\n+\tserverThread.start();\n+}\n+\n+/**\n+ * Server thread for connection manager.\n+ */\n+public void run() {\n+\tfor (;;) {\n+\t\ttry {\n+//System.out.println(\"Waiting for connection on \" + serverPort);\n+\t\t\tUnicastConnection conn = getServerConnection();\n+\t\t\t(new Thread(conn)).start();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+}\n+\n+/**\n+ * Serialization routine.\n+ */\n+void write(ObjectOutput out) throws IOException {\n+        out.writeUTF(serverName);\n+        out.writeInt(serverPort);\n+}\n+\n+/**\n+ * Serialization routine.\n+ */\n+static UnicastConnectionManager read(ObjectInput in) throws IOException {\n+        String host = in.readUTF();\n+        int port = in.readInt();\n+\tRMIClientSocketFactory csf = ((RMIObjectInputStream)in).manager.clientFactory;\n+        return (getInstance(host, port, csf));\n+}\n+\n+}\n+\n+/**\n+ * This is use as the hashkey for the client/server connections.\n+ */\n+class TripleKey {\n+\n+String host;\n+int port;\n+Object other;\n+\n+TripleKey(String host, int port, Object other) {\n+\tthis.host = host;\n+\tthis.port = port;\n+\tthis.other = other;\n+}\n+\n+/**\n+ * Hash code just include the host and other - we ignore the port since\n+ * this has unusual matching behaviour.\n+ */\n+public int hashCode() {\n+\treturn (host.hashCode() ^ other.hashCode());\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (obj instanceof TripleKey) {\n+\t\tTripleKey other = (TripleKey)obj;\n+\t\tif (this.host.equals(other.host) &&\n+\t\t    this.other == other.other &&\n+\t\t    (this.port == other.port || this.port == 0 || other.port == 0)) {\n+\t\t\treturn (true);\n+\t\t}\n+\t}\n+\treturn (false);\n+}\n+\n+}"}, {"sha": "837e6e4e975b3a4e711f7aa5773fb17767efe83a", "filename": "libjava/gnu/java/rmi/server/UnicastRef.java", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,219 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.server.RemoteRef;\n+import java.rmi.server.RMISocketFactory;\n+import java.rmi.server.RMIClientSocketFactory;\n+import java.rmi.server.RMIServerSocketFactory;\n+import java.rmi.server.RemoteObject;\n+import java.rmi.server.RemoteCall;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.rmi.server.Operation;\n+import java.rmi.server.ObjID;\n+import java.rmi.server.UID;\n+import java.lang.reflect.Method;\n+import java.io.ObjectOutput;\n+import java.io.ObjectInput;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.net.InetAddress;\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+\n+public class UnicastRef\n+\timplements RemoteRef, ProtocolConstants {\n+\n+public ObjID objid;\n+UnicastConnectionManager manager;\n+\n+/**\n+ * Used by serialization.\n+ */\n+private UnicastRef() {\n+}\n+\n+public UnicastRef(ObjID objid, String host, int port, RMIClientSocketFactory csf) {\n+\tthis(objid);\n+\tmanager = UnicastConnectionManager.getInstance(host, port, csf);\n+}\n+\n+public UnicastRef(ObjID objid) {\n+\tthis.objid = objid;\n+}\n+\n+public Object invoke(Remote obj, Method method, Object[] params, long opnum) throws Exception {\n+\treturn (invokeCommon(obj, method, params, -1, opnum));\n+}\n+\n+private Object invokeCommon(Remote obj, Method method, Object[] params, int opnum, long hash) throws Exception {\n+\tUnicastConnection conn;\n+\ttry {\n+\t\tconn = manager.getConnection();\n+\t}\n+\tcatch (IOException e1) {\n+\t\tthrow new RemoteException(\"connection failed to host: \" + manager.serverName, e1);\n+\t}\n+\n+\tObjectOutputStream out;\n+\tDataOutputStream dout;\n+\ttry {\n+\t\tdout = conn.getDataOutputStream();\n+\t\tdout.writeByte(MESSAGE_CALL);\n+\n+\t\tout = conn.getObjectOutputStream();\n+\t\t\n+\t\tobjid.write(out);\n+\t\tout.writeInt(opnum);\n+\t\tout.writeLong(hash);\n+\t\tif (params != null) {\n+\t\t\tfor (int i = 0; i < params.length; i++) {\n+\t\t\t\tif (params[i] instanceof UnicastRemoteObject) {\n+\t\t\t\t\tout.writeObject(UnicastRemoteObject.exportObject((UnicastRemoteObject)params[i]));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tout.writeObject(params[i]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tout.flush();\n+\t}\n+\tcatch (IOException e2) {\n+\t\tthrow new RemoteException(\"call failed: \", e2);\n+\t}\n+\n+\tint returncode;\n+\tObject returnval;\n+\tDataInputStream din;\n+\tObjectInputStream in;\n+\tUID ack;\n+\ttry {\n+\t\tdin = conn.getDataInputStream();\n+\t\tif (din.readUnsignedByte() != MESSAGE_CALL_ACK) {\n+\t\t\tthrow new RemoteException(\"Call not acked\");\n+\t\t}\n+\n+\t\tin = conn.getObjectInputStream();\n+\n+\t\treturncode = in.readUnsignedByte();\n+\t\tack = UID.read(in);\n+\t\treturnval = in.readObject();\n+\t}\n+\tcatch (IOException e3) {\n+\t\tthrow new RemoteException(\"call return failed: \", e3);\n+\t}\n+\n+\tmanager.discardConnection(conn);\n+\n+\tif (returncode != RETURN_ACK) {\n+\t\tthrow (Exception)returnval;\n+\t}\n+\n+\treturn (returnval);\n+}\n+\n+/**\n+ * @deprecated\n+ */\n+public RemoteCall newCall(RemoteObject obj, Operation[] op, int opnum, long hash) throws RemoteException {\n+\treturn (new UnicastRemoteCall(obj, opnum, hash));\n+}\n+\n+/**\n+ * @deprecated\n+ */\n+public void invoke(RemoteCall call) throws Exception {\n+\tUnicastRemoteCall c = (UnicastRemoteCall)call;\n+\tObject ret = invokeCommon((Remote)c.getObject(), (Method)null, c.getArguments(), c.getOpnum(), c.getHash());\n+\tc.setReturnValue(ret);\n+}\n+\n+/**\n+ * @deprecated\n+ */\n+public void done(RemoteCall call) throws RemoteException {\n+\t/* Does nothing */\n+}\n+\n+public void writeExternal(ObjectOutput out) throws IOException {\n+\tif (manager == null) {\n+\t\tthrow new IOException(\"no connection\");\n+\t}\n+\tmanager.write(out);\n+\tobjid.write(out);\n+\tout.writeByte(RETURN_ACK);\n+}\n+\n+public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n+\tmanager = UnicastConnectionManager.read(in);\n+\tobjid = ObjID.read(in);\n+\tif (in.readByte() != RETURN_ACK) {\n+\t\tthrow new IOException(\"no ack found\");\n+\t}\n+}\n+\n+public boolean remoteEquals(RemoteRef ref) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public int remoteHashCode() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public String getRefClass(ObjectOutput out) {\n+\treturn (\"UnicastRef\");\n+}\n+\n+public String remoteToString() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public void dump(UnicastConnection conn) {\n+\ttry {\n+\t\tDataInputStream din = conn.getDataInputStream();\n+\t\tfor (;;) {\n+\t\t\tint b = din.readUnsignedByte();\n+\t\t\tSystem.out.print(Integer.toHexString(b));\n+\t\t\tif (b >= 32 && b < 128) {\n+\t\t\t\tSystem.out.print(\": \" + (char)b);\n+\t\t\t}\n+\t\t\tSystem.out.println();\n+\t\t}\n+\t}\n+\tcatch (IOException _) {\n+\t}\n+}\n+\n+}"}, {"sha": "42759e70a67ba4400f12b4783d6aff153d618a0a", "filename": "libjava/gnu/java/rmi/server/UnicastRemoteCall.java", "status": "added", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,301 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.lang.Exception;\n+import java.io.IOException;\n+import java.io.ObjectOutput;\n+import java.io.ObjectInput;\n+import java.io.StreamCorruptedException;\n+import java.rmi.server.RemoteCall;\n+import java.util.Vector;\n+\n+public class UnicastRemoteCall\n+\timplements RemoteCall {\n+\n+private UnicastConnection conn;\n+private Object result;\n+private Object object;\n+private int opnum;\n+private long hash;\n+private Vector vec;\n+private int ptr;\n+\n+/**\n+ * Incoming call.\n+ */\n+UnicastRemoteCall(UnicastConnection conn) {\n+\tthis.conn = conn;\n+}\n+\n+/**\n+ * Outgoing call.\n+ */\n+UnicastRemoteCall(Object obj, int opnum, long hash) {\n+\tthis.object = obj;\n+\tthis.opnum = opnum;\n+\tthis.hash = hash;\n+}\n+\n+public ObjectOutput getOutputStream() throws IOException {\n+\tvec = new Vector();\n+\treturn (new DummyObjectOutputStream());\n+}\n+\n+public void releaseOutputStream() throws IOException {\n+\t// Does nothing.\n+}\n+\n+public ObjectInput getInputStream() throws IOException {\n+\tif (conn != null) {\n+\t\treturn (conn.getObjectInputStream());\n+\t}\n+\telse {\n+\t\tptr = 0;\n+\t\treturn (new DummyObjectInputStream());\n+\t}\n+}\n+\n+public void releaseInputStream() throws IOException {\n+\t// Does nothing.\n+}\n+\n+public ObjectOutput getResultStream(boolean success) throws IOException, StreamCorruptedException {\n+\tvec = new Vector();\n+\treturn (new DummyObjectOutputStream());\n+}\n+\n+public void executeCall() throws Exception {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public void done() throws IOException {\n+\t/* Does nothing */\n+}\n+\n+Object returnValue() {\n+\treturn (vec.elementAt(0));\n+}\n+\n+Object[] getArguments() {\n+\treturn (vec.toArray());\n+}\n+\n+Object getObject() {\n+\treturn (object);\n+}\n+\n+int getOpnum() {\n+\treturn (opnum);\n+}\n+\n+long getHash() {\n+\treturn (hash);\n+}\n+\n+void setReturnValue(Object obj) {\n+\tvec.removeAllElements();\n+\tvec.addElement(obj);\n+}\n+\n+/**\n+ * Dummy object output class.\n+ */\n+private class DummyObjectOutputStream implements ObjectOutput {\n+\n+public void writeBoolean(boolean v) throws IOException {\n+\tvec.addElement(new Boolean(v));\n+}\n+\n+public void writeByte(int v) throws IOException {\n+\tvec.addElement(new Byte((byte)v));\n+}\n+\n+public void writeChar(int v) throws IOException {\n+\tvec.addElement(new Character((char)v));\n+}\n+\n+public void writeDouble(double v) throws IOException {\n+\tvec.addElement(new Double(v));\n+}\n+\n+public void writeFloat(float v) throws IOException {\n+\tvec.addElement(new Float(v));\n+}\n+\n+public void writeInt(int v) throws IOException {\n+\tvec.addElement(new Integer(v));\n+}\n+\n+public void writeLong(long v) throws IOException {\n+\tvec.addElement(new Long(v));\n+}\n+\n+public void writeShort(int v) throws IOException {\n+\tvec.addElement(new Short((short)v));\n+}\n+\n+public void writeObject(Object obj) throws IOException {\n+\tvec.addElement(obj);\n+}\n+\n+public void write(byte b[]) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void write(byte b[], int off, int len) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void write(int b) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void writeBytes(String s) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void writeChars(String s) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void writeUTF(String str) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void flush() throws IOException {\n+}\n+\n+public void close() throws IOException {\n+}\n+\n+}\n+\n+/**\n+ * Dummy object input class.\n+ */\n+private class DummyObjectInputStream implements ObjectInput {\n+\n+public boolean readBoolean() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Boolean)obj).booleanValue());\n+}\n+\n+public byte readByte() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Byte)obj).byteValue());\n+}\n+\n+public char readChar() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Character)obj).charValue());\n+}\n+\n+public double readDouble() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Double)obj).doubleValue());\n+}\n+\n+public float readFloat() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Float)obj).floatValue());\n+}\n+\n+public int readInt() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Integer)obj).intValue());\n+}\n+\n+public long readLong() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Long)obj).longValue());\n+}\n+\n+public short readShort() throws IOException {\n+\tObject obj = vec.elementAt(ptr++);\n+\treturn (((Short)obj).shortValue());\n+}\n+\n+public Object readObject() throws IOException {\n+\treturn (vec.elementAt(ptr++));\n+}\n+\n+public int read(byte b[]) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public int read(byte b[], int off, int len) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public int read() throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public long skip(long n) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public int available() throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void readFully(byte b[]) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void readFully(byte b[], int off, int len) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public String readLine() throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public String readUTF() throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public int readUnsignedByte() throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public int readUnsignedShort() throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public int skipBytes(int n) throws IOException {\n+\tthrow new IOException(\"not required\");\n+}\n+\n+public void close() throws IOException {\n+}\n+\n+}\n+\n+}"}, {"sha": "244e7a8aa5cefe8b604c3aa5042248f7e0b0100f", "filename": "libjava/gnu/java/rmi/server/UnicastRemoteStub.java", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteStub.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteStub.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteStub.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,40 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.rmi.server.RemoteStub;\n+import java.rmi.server.RemoteRef;\n+\n+public class UnicastRemoteStub\n+\textends RemoteStub {\n+\n+public static void setStubRef(RemoteStub stub, RemoteRef ref) {\n+\tsetRef(stub, ref);\n+}\n+\n+}"}, {"sha": "d2cc7dc40cedea917b67437cdebe58c0893f25de", "filename": "libjava/gnu/java/rmi/server/UnicastServer.java", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,119 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.Hashtable;\n+import java.net.UnknownHostException;\n+import java.rmi.server.ObjID;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.rmi.server.UID;\n+import java.rmi.server.RemoteRef;\n+import java.rmi.RemoteException;\n+import java.rmi.NoSuchObjectException;\n+import gnu.java.rmi.dgc.DGCImpl;\n+\n+public class UnicastServer\n+\timplements ProtocolConstants {\n+\n+static private Hashtable objects = new Hashtable();\n+static private DGCImpl dgc;\n+\n+public static void exportObject(UnicastServerRef obj) {\n+\tstartDGC();\n+\tobjects.put(obj.objid, obj);\n+\tobj.manager.startServer();\n+}\n+\n+private static synchronized void startDGC() {\n+\tif (dgc == null) {\n+\t\ttry {\n+\t\t\tdgc = new DGCImpl();\n+\t\t\t((UnicastServerRef)dgc.getRef()).exportObject(dgc);\n+\t\t}\n+\t\tcatch (RemoteException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+}\n+\n+public static void dispatch(UnicastConnection conn) throws Exception {\n+\tswitch (conn.getDataInputStream().readUnsignedByte()) {\n+\tcase MESSAGE_CALL:\n+\t\tincomingMessageCall(conn);\n+\t\tbreak;\n+\tdefault:\n+\t\tthrow new Exception(\"bad method type\");\n+\t}\n+}\n+\n+private static void incomingMessageCall(UnicastConnection conn) throws IOException {\n+\tObjectInputStream in = conn.getObjectInputStream();\n+\n+\tObjID objid = ObjID.read(in);\n+\tint method = in.readInt();\n+\tlong hash = in.readLong();\n+\n+//System.out.println(\"ObjID: \" + objid + \", method: \" + method + \", hash: \" + hash);\n+\n+\t// Use the objid to locate the relevant UnicastServerRef\n+\tUnicastServerRef uref = (UnicastServerRef)objects.get(objid);\n+\tObject returnval;\n+\tint returncode = RETURN_ACK;\n+\tif (uref != null) {\n+\t\ttry {\n+\t\t\t// Dispatch the call to it.\n+\t\t\treturnval = uref.incomingMessageCall(conn, method, hash);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\treturnval = e;\n+\t\t\treturncode = RETURN_NACK;\n+\t\t}\n+\t}\n+\telse {\n+\t\treturnval = new NoSuchObjectException(\"\");\n+\t\treturncode = RETURN_NACK;\n+\t}\n+\n+\tconn.getDataOutputStream().writeByte(MESSAGE_CALL_ACK);\n+\n+\tObjectOutputStream out = conn.getObjectOutputStream();\n+\n+\tout.writeByte(returncode);\n+\t(new UID()).write(out);\n+\tout.writeObject(returnval);\n+\n+\tout.flush();\n+}\n+\n+}"}, {"sha": "290ea09e6405f6259d17783d6391c1938845983b", "filename": "libjava/gnu/java/rmi/server/UnicastServerRef.java", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,198 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package gnu.java.rmi.server;\n+\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.server.RemoteStub;\n+import java.rmi.server.ObjID;\n+import java.rmi.server.ServerRef;\n+import java.rmi.server.RemoteRef;\n+import java.rmi.server.ServerNotActiveException;\n+import java.rmi.server.RMIClientSocketFactory;\n+import java.rmi.server.RMIServerSocketFactory;\n+import java.rmi.server.UID;\n+import java.rmi.server.Skeleton;\n+import java.rmi.server.RemoteCall;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.Thread;\n+import java.lang.Exception;\n+import java.io.IOException;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Hashtable;\n+\n+public class UnicastServerRef\n+\textends UnicastRef {\n+\n+final static private Class[] stubprototype = new Class[] { RemoteRef.class };\n+\n+Remote myself;\n+private Skeleton skel;\n+private RemoteStub stub;\n+private Hashtable methods;\n+\n+public UnicastServerRef(ObjID id, int port, RMIServerSocketFactory ssf) {\n+\tsuper(id);\n+\tmanager = UnicastConnectionManager.getInstance(port, ssf);\n+}\n+\n+public RemoteStub exportObject(Remote obj) throws RemoteException {\n+\tif (myself == null) {\n+\t\tmyself = obj;\n+\n+\t\t// Find and install the stub\n+\t\tClass cls = obj.getClass();\n+\t\tstub = (RemoteStub)getHelperClass(cls, \"_Stub\");\n+\t\tif (stub == null) {\n+\t\t\tthrow new RemoteException(\"failed to export: \" + cls);\n+\t\t}\n+\n+\t\t// Find and install the skeleton (if there is one)\n+\t\tskel = (Skeleton)getHelperClass(cls, \"_Skel\");\n+\n+\t\t// Build hash of methods which may be called.\n+\t\tbuildMethodHash(obj.getClass());\n+\n+\t\t// Export it.\n+\t\tUnicastServer.exportObject(this);\n+\t}\n+\n+\treturn (stub);\n+}\n+\n+private Object getHelperClass(Class cls, String type) {\n+\ttry {   \n+\t\tString classname = cls.getName();\n+\t\tClass scls = Class.forName(classname + type);\n+\t\tif (type.equals(\"_Stub\")) {\n+\t\t\ttry {\n+\t\t\t\t// JDK 1.2 stubs\n+\t\t\t\tConstructor con = scls.getConstructor(stubprototype);\n+\t\t\t\treturn (con.newInstance(new Object[]{this}));\n+\t\t\t}\n+\t\t\tcatch (NoSuchMethodException e) {\n+\t\t\t}\n+\t\t\tcatch (InstantiationException e) {\n+\t\t\t}\n+\t\t\tcatch (IllegalAccessException e) {\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException e) {\n+\t\t\t}\n+\t\t\tcatch (InvocationTargetException e) {\n+\t\t\t}\n+\t\t\t// JDK 1.1 stubs\n+\t\t\tRemoteStub stub = (RemoteStub)scls.newInstance();\n+\t\t\tUnicastRemoteStub.setStubRef(stub, this);\n+\t\t\treturn (stub);\n+\t\t}\n+\t\telse {\n+\t\t\t// JDK 1.1 skel\n+\t\t\treturn (scls.newInstance());\n+\t\t}\n+\t}\n+\tcatch (ClassNotFoundException e) {\n+\t}\n+\tcatch (InstantiationException e) {\n+\t}\n+\tcatch (IllegalAccessException e) {\n+\t}\n+\treturn (null);\n+}\n+\n+public String getClientHost() throws ServerNotActiveException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+private void buildMethodHash(Class cls) {\n+\tmethods = new Hashtable();\n+\tMethod[] meths = cls.getMethods();\n+\tfor (int i = 0; i < meths.length; i++) {\n+\t\t/* Don't need to include any java.xxx related stuff */\n+\t\tif (meths[i].getDeclaringClass().getName().startsWith(\"java.\")) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tlong hash = RMIHashes.getMethodHash(meths[i]);\n+\t\tmethods.put(new Long (hash), meths[i]);\n+//System.out.println(\"meth = \" + meths[i] + \", hash = \" + hash);\n+\t}\n+}\n+\n+public Object incomingMessageCall(UnicastConnection conn, int method, long hash) throws Exception {\n+//System.out.println(\"method = \" + method + \", hash = \" + hash);\n+\t// If method is -1 then this is JDK 1.2 RMI - so use the hash\n+\t// to locate the method\n+\tif (method == -1) {\n+\t\tMethod meth = (Method)methods.get(new Long (hash));\n+//System.out.println(\"class = \" + myself.getClass() + \", meth = \" + meth);\n+\t\tif (meth == null) {\n+\t\t\tthrow new NoSuchMethodException();\n+\t\t}\n+\n+\t\tObjectInputStream in = conn.getObjectInputStream();\n+\t\tint nrargs = meth.getParameterTypes().length;\n+\t\tObject[] args = new Object[nrargs];\n+\t\tfor (int i = 0; i < nrargs; i++) {\n+\t\t\t/** \n+\t\t\t * For debugging purposes - we don't handle CodeBases\n+\t\t\t * quite right so we don't always find the stubs.  This\n+\t\t\t * lets us know that.\n+\t\t\t */\n+\t\t\ttry {\n+\t\t\t\targs[i] = in.readObject();\n+\t\t\t}\n+\t\t\tcatch (Exception t) {\n+\t\t\t\tt.printStackTrace();\n+\t\t\t\tthrow t;\n+\t\t\t}\n+\t\t}\n+\t\treturn (meth.invoke(myself, args));\n+\t}\n+\t// Otherwise this is JDK 1.1 style RMI - we find the skeleton\n+\t// and invoke it using the method number.  We wrap up our\n+\t// connection system in a UnicastRemoteCall so it appears in a\n+\t// way the Skeleton can handle.\n+\telse {\n+\t\tif (skel == null) {\n+\t\t\tthrow new NoSuchMethodException();\n+\t\t}\n+\t\tUnicastRemoteCall call = new UnicastRemoteCall(conn);\n+\t\tskel.dispatch(myself, call, method, hash);\n+\t\treturn (call.returnValue());\n+\t}\n+}\n+\n+}"}, {"sha": "91d66b2187b3f88b4fea51fdb9ab08ffd96d9068", "filename": "libjava/java/rmi/AccessException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FAccessException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FAccessException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FAccessException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class AccessException \n+\textends RemoteException {\n+\n+public static final long serialVersionUID = 6314925228044966088l;\n+\n+public AccessException(String s) {\n+\tsuper(s);\n+}\n+\n+public AccessException(String s, Exception e) {\n+\tsuper (s, e);\n+}\n+\n+}"}, {"sha": "ef0c166c5a2baad127ff53241301aaaeb5998407", "filename": "libjava/java/rmi/AlreadyBoundException.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FAlreadyBoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FAlreadyBoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FAlreadyBoundException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,41 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class AlreadyBoundException \n+\textends Exception {\n+\n+public AlreadyBoundException() {\n+\tsuper();\n+}\n+\n+public AlreadyBoundException(String s) {\n+\tsuper (s);\n+}\n+\n+}"}, {"sha": "e55a274e8eeabdccb9d75eb1f7def87530b914e9", "filename": "libjava/java/rmi/ConnectException.java", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FConnectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FConnectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FConnectException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,42 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class ConnectException \n+\textends RemoteException {\n+\n+\n+public ConnectException(String s) {\n+\tsuper(s);\n+}\n+\n+public ConnectException(String s, Exception e) {\n+\tsuper (s, e);\n+}\n+\n+}"}, {"sha": "bb7e298f004f751d973e61ec887046f3b2fbf9f5", "filename": "libjava/java/rmi/ConnectIOException.java", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FConnectIOException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FConnectIOException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FConnectIOException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,42 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class ConnectIOException \n+\textends RemoteException {\n+\n+\n+public ConnectIOException(String s) {\n+\tsuper(s);\n+}\n+\n+public ConnectIOException(String s, Exception e) {\n+\tsuper (s, e);\n+}\n+\n+}"}, {"sha": "988ec479e0e81b892a482c601c0a487cb30bba55", "filename": "libjava/java/rmi/MarshalException.java", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FMarshalException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FMarshalException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FMarshalException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,42 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class MarshalException \n+\textends RemoteException {\n+\n+\n+public MarshalException(String s) {\n+\tsuper(s);\n+}\n+\n+public MarshalException(String s, Exception e) {\n+\tsuper (s, e);\n+}\n+\n+}"}, {"sha": "87e696339532ee6e0eb4f4eabb429e2212f1e694", "filename": "libjava/java/rmi/MarshalledObject.java", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FMarshalledObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FMarshalledObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FMarshalledObject.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,51 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+import java.io.Serializable;\n+\n+public final class MarshalledObject\n+\textends Object implements Serializable {\n+\n+public MarshalledObject(Object obj) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public boolean equals(Object obj) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public Object get() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public int hashCode() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+}"}, {"sha": "76464773938a94c3d3221c1aabf73488d17af710", "filename": "libjava/java/rmi/Naming.java", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FNaming.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FNaming.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FNaming.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,70 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.rmi.registry.Registry;\n+import java.rmi.registry.LocateRegistry;\n+\n+public final class Naming {\n+\n+public static Remote lookup(String name) throws NotBoundException, MalformedURLException, RemoteException {\n+\tURL u = new URL(\"http:\" + name);\n+\treturn (getRegistry(u).lookup(u.getFile().substring(1)));\n+}\n+\n+public static void bind(String name, Remote obj) throws AlreadyBoundException, MalformedURLException, RemoteException {\n+\tURL u = new URL(\"http:\" + name);\n+\tgetRegistry(u).bind(u.getFile().substring(1), obj);\n+}\n+\n+public static void unbind(String name) throws RemoteException, NotBoundException, MalformedURLException {\n+\tURL u = new URL(\"http:\" + name);\n+\tgetRegistry(u).unbind(u.getFile().substring(1));\n+}\n+\n+public static void rebind(String name, Remote obj) throws RemoteException, MalformedURLException {\n+\tURL u = new URL(\"http:\" + name);\n+\tgetRegistry(u).rebind(u.getFile().substring(1), obj);\n+}\n+\n+public static String[] list(String name) throws RemoteException, MalformedURLException {\n+\treturn (getRegistry(new URL(\"http:\" + name)).list());\n+}\n+\n+private static Registry getRegistry(URL u) throws RemoteException {\n+\tif (u.getPort() == -1) {\n+\t\treturn (LocateRegistry.getRegistry(u.getHost()));\n+\t}\n+\telse {\n+\t\treturn (LocateRegistry.getRegistry(u.getHost(), u.getPort()));\n+\t}\n+}\n+\n+}"}, {"sha": "7608fd9a21c2d15948b0bfe44e03af9aa8be2219", "filename": "libjava/java/rmi/NoSuchObjectException.java", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FNoSuchObjectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FNoSuchObjectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FNoSuchObjectException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,39 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class NoSuchObjectException\n+\textends RemoteException {\n+\n+public static final long serialVersionUID = 6619395951570472985L;\n+\n+public NoSuchObjectException(String s) {\n+\tsuper(s);\n+}\n+\n+}"}, {"sha": "f28ee6adff6e9bbb9618264c3df3571cc4c6c269", "filename": "libjava/java/rmi/NotBoundException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FNotBoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FNotBoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FNotBoundException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class NotBoundException \n+\textends Exception {\n+\n+public static final long serialVersionUID = -1857741824849069317l;\n+\n+public NotBoundException() {\n+\tsuper();\n+}\n+\n+public NotBoundException(String s) {\n+\tsuper (s);\n+}\n+\n+}"}, {"sha": "cbfbed29fced46d407f7f529cbccf9ee99fa1fcc", "filename": "libjava/java/rmi/RMISecurityException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRMISecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRMISecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FRMISecurityException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+import java.lang.SecurityException;\n+\n+public class RMISecurityException\n+\textends SecurityException {\n+\n+public RMISecurityException(String n) {\n+\tsuper(n);\n+}\n+\n+public RMISecurityException(String n, String a) {\n+\tsuper(n);\n+}\n+\n+}"}, {"sha": "d63d9698b08d988152b0ecb5c9e66f72f8707cd3", "filename": "libjava/java/rmi/RMISecurityManager.java", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRMISecurityManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRMISecurityManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FRMISecurityManager.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,139 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+import java.io.FileDescriptor;\n+import java.lang.Thread;\n+import java.lang.Class;\n+import java.lang.SecurityManager;\n+import java.net.InetAddress;\n+import java.security.Permission;\n+\n+public class RMISecurityManager extends SecurityManager {\n+\n+public RMISecurityManager() {\n+}\n+\n+public void checkAccept(String host, int port) {\n+}\n+\n+public void checkAccess(Thread g) {\n+}\n+\n+public void checkAccess(ThreadGroup g) {\n+}\n+\n+public void checkAwtEventQueueAccess() {\n+}\n+\n+public void checkConnect(String host, int port) {\n+}\n+\n+public void checkConnect(String host, int port, Object context) {\n+}\n+\n+public void checkCreateClassLoader() {\n+}\n+\n+public void checkDelete(String file) {\n+}\n+\n+public void checkExec(String cmd) {\n+}\n+\n+public void checkExit(int status) {\n+}\n+\n+public void checkLink(String lib) {\n+}\n+\n+public void checkListen(int port) {\n+}\n+\n+public void checkMemberAccess ( Class clazz, int which ) {\n+}\n+\n+public void checkMulticast(InetAddress maddr) {\n+}\n+\n+public void checkMulticast(InetAddress maddr, byte ttl) {\n+}\n+\n+public void checkPackageAccess(String pkg) {\n+}\n+\n+public void checkPackageDefinition(String pkg) {\n+}\n+\n+public void checkPermission(Permission perm) {\n+}\n+\n+public void checkPermission(Permission perm, Object context) {\n+}\n+\n+public void checkPrintJobAccess() {\n+}\n+\n+public void checkPropertiesAccess() {\n+}\n+\n+public void checkPropertyAccess(String key) {\n+}\n+\n+/* public void checkPropertyAccess(String key, String def) {\n+}*/\n+\n+public void checkRead(FileDescriptor fd) {\n+}\n+\n+public void checkRead(String file) {\n+}\n+\n+public void checkRead(String file, Object context) {\n+}\n+\n+public void checkSecurityAccess(String action) {\n+}\n+\n+public void checkSetFactory() {\n+}\n+\n+public void checkSystemClipboardAccess() {\n+}\n+\n+public boolean checkTopLevelWindow(Object window) {\n+\treturn (true);\n+}\n+\n+public void checkWrite(FileDescriptor fd) {\n+}\n+\n+public void checkWrite(String file) {\n+}\n+\n+}"}, {"sha": "f9aab0bf479bc3682f7e1188bc05eb0b2bd05b2b", "filename": "libjava/java/rmi/Remote.java", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRemote.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRemote.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FRemote.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,31 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public interface Remote {\n+}"}, {"sha": "5127a5a997f7bb23be056fa035824fce3d1d8fc7", "filename": "libjava/java/rmi/RemoteException.java", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRemoteException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FRemoteException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FRemoteException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,85 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+import java.lang.Throwable;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+\n+public class RemoteException \n+\textends IOException {\n+\n+public static final long serialVersionUID = -5148567311918794206l;\n+\n+public Throwable detail;\n+\n+public RemoteException() {\n+\tsuper();\n+\tdetail = null;\n+}\n+\n+public RemoteException(String s) {\n+\tsuper(s);\n+\tdetail = null;\n+}\n+\n+public RemoteException(String s, Throwable e) {\n+\tsuper(s);\n+\tdetail = e;\n+}\n+\n+public String getMessage() {\n+\tif (detail == null) {\n+\t\treturn (super.getMessage());\n+\t}\n+\telse {\n+\t\treturn (super.getMessage() + \"; nested exception is: \" + detail.getMessage());\n+\t}\n+}\n+\n+public void printStackTrace(PrintStream s) {\n+\tif (detail != null) {\n+\t\tdetail.printStackTrace(s);\n+\t}\n+\tsuper.printStackTrace(s);\n+}\n+\n+public void printStackTrace(PrintWriter s) {\n+\tif (detail != null) {\n+\t\tdetail.printStackTrace(s);\n+\t}\n+\tsuper.printStackTrace(s);\n+}\n+\n+public void printStackTrace() {\n+\tprintStackTrace(System.err);\n+}\n+\n+}"}, {"sha": "71e2d06e2e1eae3e98c2f4b54eb032d75aa08549", "filename": "libjava/java/rmi/ServerError.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FServerError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FServerError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FServerError.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,37 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class ServerError\n+\textends RemoteException {\n+\n+public ServerError(String s, Error e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "f7ec303d01b921215c575e63b98d4720051708d6", "filename": "libjava/java/rmi/ServerException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FServerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FServerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FServerException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class ServerException\n+\textends RemoteException {\n+\n+public static final long serialVersionUID = -4775845313121906682l;\n+\n+public ServerException(String s) {\n+\tsuper(s);\n+}\n+\n+public ServerException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "9f76f61aaead238d4321a23a1cfd44aceae3957c", "filename": "libjava/java/rmi/ServerRuntimeException.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FServerRuntimeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FServerRuntimeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FServerRuntimeException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,37 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class ServerRuntimeException\n+\textends RemoteException {\n+\n+public ServerRuntimeException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "c6d70cfbbf13b57cf9a8f7705a6ab005fe5b76a7", "filename": "libjava/java/rmi/StubNotFoundException.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FStubNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FStubNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FStubNotFoundException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,41 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class StubNotFoundException\n+\textends RemoteException {\n+\n+public StubNotFoundException(String s) {\n+\tsuper(s);\n+}\n+\n+public StubNotFoundException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "b65d661459e0891779a6a8fbf18f68755a31c87f", "filename": "libjava/java/rmi/UnexpectedException.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FUnexpectedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FUnexpectedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FUnexpectedException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,41 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class UnexpectedException\n+\textends RemoteException {\n+\n+public UnexpectedException(String s) {\n+\tsuper(s);\n+}\n+\n+public UnexpectedException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "06263b29a2383da42323b62341245264910a3b8f", "filename": "libjava/java/rmi/UnknownHostException.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FUnknownHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FUnknownHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FUnknownHostException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,41 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class UnknownHostException\n+\textends RemoteException {\n+\n+public UnknownHostException(String s) {\n+\tsuper(s);\n+}\n+\n+public UnknownHostException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "68adfdf48be2317e540caca9d1ef9ebcd9c449b8", "filename": "libjava/java/rmi/UnmarshalException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FUnmarshalException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2FUnmarshalException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FUnmarshalException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi;\n+\n+public class UnmarshalException\n+\textends RemoteException {\n+\n+public static final long serialVersionUID = 594380845140740218l;\n+\n+public UnmarshalException(String s) {\n+\tsuper(s);\n+}\n+\n+public UnmarshalException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "a3e712f4fd56e5d3f88ac1524d3279c0e5784539", "filename": "libjava/java/rmi/activation/Activatable.java", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivatable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivatable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivatable.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,93 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.rmi.server.RemoteServer;\n+import java.rmi.server.RMIClientSocketFactory;\n+import java.rmi.server.RMIServerSocketFactory;\n+import java.rmi.RemoteException;\n+import java.rmi.Remote;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.MarshalledObject;\n+\n+public abstract class Activatable\n+\textends RemoteServer {\n+\n+protected Activatable(String location, MarshalledObject data, boolean restart, int port) throws ActivationException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+protected Activatable(String location, MarshalledObject data, boolean restart, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws ActivationException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+protected Activatable(ActivationID id, int port) throws RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+protected Activatable(ActivationID id, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+protected ActivationID getID() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static Remote register(ActivationDesc desc) throws UnknownGroupException, ActivationException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static boolean inactive(ActivationID id) throws UnknownObjectException, ActivationException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static void unregister(ActivationID id) throws UnknownObjectException, ActivationException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static ActivationID exportObject(Remote obj, String location, MarshalledObject data, boolean restart, int port) throws ActivationException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static ActivationID exportObject(Remote obj, String location, MarshalledObject data, boolean restart, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws ActivationException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static Remote exportObject(Remote obj, ActivationID id, int port) throws RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static Remote exportObject(Remote obj, ActivationID id, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static boolean unexportObject(Remote obj, boolean force) throws NoSuchObjectException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+}"}, {"sha": "035281784a923b543a2f29e9c9f909c2dbfa8b9d", "filename": "libjava/java/rmi/activation/ActivateFailedException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivateFailedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivateFailedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivateFailedException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.rmi.RemoteException;\n+\n+public class ActivateFailedException\n+\textends RemoteException {\n+\n+public ActivateFailedException(String s) {\n+\tsuper(s);\n+}\n+\n+public ActivateFailedException(String s, Exception ex) {\n+\tsuper(s, ex);\n+}\n+\n+}"}, {"sha": "192fb5cbdc09ab70e656dd386d64c34e9bf02487", "filename": "libjava/java/rmi/activation/ActivationDesc.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationDesc.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationDesc.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationDesc.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,102 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.io.Serializable;\n+import java.rmi.MarshalledObject;\n+\n+public final class ActivationDesc\n+\timplements Serializable {\n+\n+private ActivationGroupID groupid;\n+private String classname;\n+private String location;\n+private MarshalledObject data;\n+private boolean restart;\n+\n+public ActivationDesc(String className, String location, MarshalledObject data) throws ActivationException {\n+\tthis(ActivationGroup.currentGroupID(), className, location, data, false);\n+}\n+\n+public ActivationDesc(String className, String location, MarshalledObject data, boolean restart) throws ActivationException {\n+\tthis(ActivationGroup.currentGroupID(), className, location, data, restart);\n+}\n+\n+public ActivationDesc(ActivationGroupID groupID, String className, String location, MarshalledObject data) {\n+\tthis(groupID, className, location, data, false);\n+}\n+\n+public ActivationDesc(ActivationGroupID groupID, String className, String location, MarshalledObject data, boolean restart) {\n+\tthis.groupid = groupID;\n+\tthis.classname = className;\n+\tthis.location = location;\n+\tthis.data = data;\n+\tthis.restart = restart;\n+}\n+\n+public ActivationGroupID getGroupID() {\n+\treturn (groupid);\n+}\n+\n+public String getClassName() {\n+\treturn (classname);\n+}\n+\n+public String getLocation() {\n+\treturn (location);\n+}\n+\n+public MarshalledObject getData() {\n+\treturn (data);\n+}\n+\n+public boolean getRestartMode() {\n+\treturn (restart);\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (!(obj instanceof ActivationDesc)) {\n+\t\treturn (false);\n+\t}\n+\tActivationDesc that = (ActivationDesc)obj;\n+\n+\tif (this.groupid.equals(that.groupid) &&\n+\t    this.classname.equals(that.classname) &&\n+\t    this.location.equals(that.location) &&\n+\t    this.data.equals(that.data) &&\n+\t    this.restart == that.restart) {\n+\t\treturn (true);\n+\t}\n+\treturn (false);\n+}\n+\n+public int hashCode() {\n+\treturn (groupid.hashCode() ^ classname.hashCode() ^ location.hashCode() ^ data.hashCode());\n+}\n+\n+}"}, {"sha": "d72e1a664eaf45752e2e6f0bbe92ec2f779f89cb", "filename": "libjava/java/rmi/activation/ActivationException.java", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,78 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+public class ActivationException\n+\textends Exception {\n+\n+public Throwable detail;\n+\n+public ActivationException() {\n+\tsuper();\n+}\n+\n+public ActivationException(String s) {\n+\tsuper(s);\n+}\n+\n+public ActivationException(String s, Throwable ex) {\n+\tsuper(s);\n+\tdetail = ex;\n+}\n+\n+public String getMessage() {\n+\tif (detail == null) {\n+\t\treturn (super.getMessage());\n+\t}\n+\telse {\n+\t\treturn (super.getMessage() + \":\" + detail.getMessage());\n+\t}\n+}\n+\n+public void printStackTrace(PrintStream s) {\n+        if (detail != null) {\n+                detail.printStackTrace(s);\n+        }\n+        super.printStackTrace(s);\n+}\n+\n+public void printStackTrace() {\n+\tprintStackTrace(System.err);\n+}\n+\n+public void printStackTrace(PrintWriter s) {\n+        if (detail != null) {\n+                detail.printStackTrace(s);\n+        }\n+        super.printStackTrace(s);\n+}\n+\n+}"}, {"sha": "40316c0690c78158845bf8bc32dcb645b59c70b3", "filename": "libjava/java/rmi/activation/ActivationGroup.java", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroup.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,73 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.rmi.server.UnicastRemoteObject;\n+import java.rmi.RemoteException;\n+import java.rmi.Remote;\n+import java.rmi.MarshalledObject;\n+\n+public abstract class ActivationGroup\n+\textends UnicastRemoteObject\n+\timplements ActivationInstantiator {\n+\n+protected ActivationGroup(ActivationGroupID groupID) throws RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public boolean inactiveObject(ActivationID id) throws ActivationException, UnknownObjectException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public abstract void activeObject(ActivationID id, Remote obj) throws ActivationException, UnknownObjectException, RemoteException;\n+\n+public static ActivationGroup createGroup(ActivationGroupID id, ActivationGroupDesc desc, long incarnation) throws ActivationException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static ActivationGroupID currentGroupID() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static void setSystem(ActivationSystem system) throws ActivationException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static ActivationSystem getSystem() throws ActivationException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+protected void activeObject(ActivationID id, MarshalledObject mobj) throws ActivationException, UnknownObjectException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+protected void inactiveGroup() throws UnknownGroupException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+}"}, {"sha": "1dd90e63636ae848d594e449076916fa047e20b1", "filename": "libjava/java/rmi/activation/ActivationGroupDesc.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroupDesc.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroupDesc.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroupDesc.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,120 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.io.Serializable;\n+import java.util.Properties;\n+import java.rmi.MarshalledObject;\n+\n+public final class ActivationGroupDesc\n+\timplements Serializable {\n+\n+public static class CommandEnvironment\n+\timplements Serializable {\n+\n+private String cmdpath;\n+private String[] argv;\n+\n+public CommandEnvironment(String cmdpath, String[] argv) {\n+\tthis.cmdpath = cmdpath;\n+\tthis.argv = argv;\n+}\n+\n+public String getCommandPath() {\n+\treturn (cmdpath);\n+}\n+\n+public String[] getCommandOptions() {\n+\treturn (argv);\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (!(obj instanceof CommandEnvironment)) {\n+\t\treturn (false);\n+\t}\n+\tCommandEnvironment that = (CommandEnvironment)obj;\n+\t\n+\tif (!this.cmdpath.equals(that.cmdpath)) {\n+\t\treturn (false);\n+\t}\n+\n+\tint len = this.argv.length;\n+\tif (len != that.argv.length) {\n+\t\treturn (false);\n+\t}\n+\tfor (int i = 0; i < len; i++) {\n+\t\tif (!this.argv[i].equals(that.argv[i])) {\n+\t\t\treturn (false);\n+\t\t}\n+\t}\n+\treturn (true);\n+}\n+\n+public int hashCode() {\n+\treturn (cmdpath.hashCode()); // Not a very good hash code.\n+}\n+\n+}\n+\n+public ActivationGroupDesc(Properties overrides, ActivationGroupDesc.CommandEnvironment cmd) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public ActivationGroupDesc(String className, String location, MarshalledObject data, Properties overrides, ActivationGroupDesc.CommandEnvironment cmd) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public String getClassName() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public String getLocation() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public MarshalledObject getData() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public Properties getPropertyOverrides() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public ActivationGroupDesc.CommandEnvironment getCommandEnvironment() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public boolean equals(Object obj) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public int hashCode() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+}"}, {"sha": "e0e5592d9e3fbdba794b02640a9a75fdd99e8ec3", "filename": "libjava/java/rmi/activation/ActivationGroupID.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroupID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroupID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationGroupID.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,59 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.io.Serializable;\n+\n+public class ActivationGroupID\n+\timplements Serializable {\n+\n+private ActivationSystem system;\n+\n+public ActivationGroupID(ActivationSystem system) {\n+\tthis.system = system;\n+}\n+\n+public ActivationSystem getSystem() {\n+\treturn (system);\n+}\n+\n+public int hashCode() {\n+\treturn (system.hashCode());\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (obj instanceof ActivationGroupID) {\n+\t\tActivationGroupID that = (ActivationGroupID)obj;\n+\t\tif (this.system.equals(that.system)) {\n+\t\t\treturn (true);\n+\t\t}\n+\t}\n+\treturn (false);\n+}\n+\n+}"}, {"sha": "750f6cb06bd84c4e8adff682931c6d86d19bf84e", "filename": "libjava/java/rmi/activation/ActivationID.java", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationID.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,61 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.io.Serializable;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+\n+public class ActivationID\n+\timplements Serializable {\n+\n+private Activator activator;\n+\n+public ActivationID(Activator activator) {\n+\tthis.activator = activator;\n+}\n+\n+public Remote activate(boolean force) throws ActivationException, UnknownObjectException, RemoteException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public int hashCode() {\n+\treturn (activator.hashCode());\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (obj instanceof ActivationID) {\n+\t\tActivationID that = (ActivationID)obj;\n+\t\tif (this.activator.equals(that.activator)) {\n+\t\t\treturn (true);\n+\t\t}\n+\t}\n+\treturn (false);\n+}\n+\n+}"}, {"sha": "71cd7998f5ef54e0d12bcf7deed9185e03abeb27", "filename": "libjava/java/rmi/activation/ActivationInstantiator.java", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationInstantiator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationInstantiator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationInstantiator.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,39 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.MarshalledObject;\n+\n+public interface ActivationInstantiator\n+\textends Remote {\n+\n+public MarshalledObject newInstance(ActivationID id, ActivationDesc desc) throws ActivationException, RemoteException;\n+\n+}"}, {"sha": "21d269ad30169ad312a0a26e5db35d26c0aa4884", "filename": "libjava/java/rmi/activation/ActivationMonitor.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationMonitor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationMonitor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationMonitor.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,41 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.MarshalledObject;\n+\n+public interface ActivationMonitor\n+\textends Remote {\n+\n+public void inactiveObject(ActivationID id) throws UnknownObjectException, RemoteException;\n+public void activeObject(ActivationID id, MarshalledObject obj) throws UnknownObjectException, RemoteException;\n+public void inactiveGroup(ActivationGroupID id, long incarnation) throws UnknownGroupException, RemoteException;\n+\n+}"}, {"sha": "c937da4ed8a96476295be55849c4df022e5bbc28", "filename": "libjava/java/rmi/activation/ActivationSystem.java", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivationSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationSystem.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,49 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+\n+public interface ActivationSystem\n+\textends Remote {\n+\n+public static final int SYSTEM_PORT = 0; // XXX\n+\n+public ActivationID registerObject(ActivationDesc desc) throws ActivationException, UnknownGroupException, RemoteException;\n+public void unregisterObject(ActivationID id) throws ActivationException, UnknownObjectException, RemoteException;\n+public ActivationGroupID registerGroup(ActivationGroupDesc desc) throws ActivationException, RemoteException;\n+public ActivationMonitor activeGroup(ActivationGroupID id, ActivationInstantiator group, long incarnation) throws UnknownGroupException, ActivationException, RemoteException;\n+public void unregisterGroup(ActivationGroupID id) throws ActivationException, UnknownGroupException, RemoteException;\n+public void shutdown() throws RemoteException;\n+public ActivationDesc setActivationDesc(ActivationID id, ActivationDesc desc) throws ActivationException, UnknownObjectException, UnknownGroupException, RemoteException;\n+public ActivationGroupDesc setActivationGroupDesc(ActivationGroupID id, ActivationGroupDesc desc) throws ActivationException, UnknownGroupException, RemoteException;\n+public ActivationDesc getActivationDesc(ActivationID id) throws ActivationException, UnknownObjectException, RemoteException;\n+public ActivationGroupDesc getActivationGroupDesc(ActivationGroupID id) throws ActivationException, UnknownGroupException, RemoteException;\n+\n+}"}, {"sha": "82dbc6091ae013c201b62482ffc025a73010102c", "filename": "libjava/java/rmi/activation/Activator.java", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FActivator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivator.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,39 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.MarshalledObject;\n+\n+public interface Activator\n+\textends Remote {\n+\n+public MarshalledObject activate(ActivationID id, boolean force) throws ActivationException, UnknownObjectException, RemoteException;\n+\n+}"}, {"sha": "655f2c61144106564e5e9c4edd6bb1f08ce42f8d", "filename": "libjava/java/rmi/activation/UnknownGroupException.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FUnknownGroupException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FUnknownGroupException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FUnknownGroupException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,37 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+public class UnknownGroupException\n+\textends ActivationException {\n+\n+public UnknownGroupException(String s) {\n+\tsuper(s);\n+}\n+\n+}"}, {"sha": "b28bfaaddeb6b0df83be4bc1b30578682fb55f55", "filename": "libjava/java/rmi/activation/UnknownObjectException.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FUnknownObjectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Factivation%2FUnknownObjectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FUnknownObjectException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,37 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.activation;\n+\n+public class UnknownObjectException\n+\textends ActivationException {\n+\n+public UnknownObjectException(String s) {\n+\tsuper(s);\n+}\n+\n+}"}, {"sha": "3fd1bb6f15e1dcf6d79128d6a2a3309ce0ee9fe3", "filename": "libjava/java/rmi/dgc/DGC.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fdgc%2FDGC.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fdgc%2FDGC.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fdgc%2FDGC.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,41 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.dgc;\n+\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.server.ObjID;\n+\n+public interface DGC\n+\textends Remote {\n+\n+public Lease dirty(ObjID[] ids, long sequenceNum, Lease lease) throws RemoteException;\n+\n+public void clean(ObjID[] ids, long sequenceNum, VMID vmid, boolean strong) throws RemoteException;\n+\n+}"}, {"sha": "98dfb2dfffd6ec25d757125c0418500f53341c84", "filename": "libjava/java/rmi/dgc/Lease.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fdgc%2FLease.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fdgc%2FLease.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fdgc%2FLease.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,58 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.dgc;\n+\n+import java.io.Serializable;\n+import java.rmi.dgc.VMID;\n+\n+public final class Lease\n+\timplements Serializable {\n+\n+static final long serialVersionUID = -5713411624328831948L;\n+\n+private VMID vmid;\n+private long value;\n+\n+public Lease(VMID id, long duration) {\n+\tvmid = id;\n+\tvalue = duration;\n+}\n+\n+public VMID getVMID() {\n+\treturn (vmid);\n+}\n+\n+public long getValue() {\n+\treturn (value);\n+}\n+\n+public String toString() {\n+\treturn (\"[\" + vmid.toString() + \", \" + Long.toString(value) + \"]\");\n+}\n+\n+}"}, {"sha": "d264752ef2bf25b7a45b2cae7bde10a19e3371bd", "filename": "libjava/java/rmi/dgc/VMID.java", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fdgc%2FVMID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fdgc%2FVMID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fdgc%2FVMID.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,106 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.dgc;\n+\n+import java.io.Serializable;\n+import java.rmi.server.UID;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+public final class VMID\n+\timplements Serializable {\n+\n+static final long serialVersionUID = -538642295484486218L;\n+static final boolean areWeUnique;\n+static byte[] localAddr;\n+\n+private byte[] addr;\n+private UID uid;\n+\n+static {\n+\tbyte[] addr;\n+\tboolean awu = true;\n+\ttry {\n+\t\taddr = InetAddress.getLocalHost().getAddress();\n+\t\tif (addr[0] == 127 && addr[1] == 0 && addr[2] == 0 && addr[3] == 1) {\n+\t\t\tawu = false;\n+\t\t}\n+\t}\n+\tcatch (UnknownHostException _) {\n+\t\taddr = new byte[]{ 127, 0, 0, 1 };\n+\t\tawu = false;\n+\t}\n+\tlocalAddr = addr;\n+\tareWeUnique = awu;\n+}\n+\n+public VMID() {\n+\taddr = localAddr;\n+\tuid = new UID();\n+}\n+\n+public static boolean isUnique() {\n+\treturn (areWeUnique);\n+}\n+\n+public int hashCode() {\n+\treturn (super.hashCode());\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (!(obj instanceof VMID)) {\n+\t\treturn (false);\n+\t}\n+\tVMID other = (VMID)obj;\n+\tif (addr.length != other.addr.length) {\n+\t\treturn (false);\n+\t}\n+\tfor (int i = addr.length - 1; i >= 0; i--) {\n+\t\tif (addr[i] != other.addr[i]) {\n+\t\t\treturn (false);\n+\t\t}\n+\t}\n+\treturn (uid.equals(other.uid));\n+}\n+\n+public String toString() {\n+\tStringBuffer buf = new StringBuffer(\"[VMID: \");\n+\tfor (int i = 0; i < addr.length; i++) {\n+\t\tif (i > 0) {\n+\t\t\tbuf.append(\".\");\n+\t\t}\n+\t\tbuf.append(Integer.toString(addr[i]));\n+\t}\n+\tbuf.append(\" \");\n+\tbuf.append(uid.toString());\n+\tbuf.append(\"]\");\n+\n+\treturn (buf.toString());\n+}\n+\n+}"}, {"sha": "269049d5972c65afaf120c002d5ddca1187fb23d", "filename": "libjava/java/rmi/registry/LocateRegistry.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fregistry%2FLocateRegistry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fregistry%2FLocateRegistry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fregistry%2FLocateRegistry.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,75 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.registry;\n+\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.rmi.server.RMIClientSocketFactory;\n+import java.rmi.server.RMIServerSocketFactory;\n+import java.rmi.server.RMISocketFactory;\n+import java.rmi.server.RemoteRef;\n+import java.rmi.server.ObjID;\n+import java.net.Socket;\n+\n+import gnu.java.rmi.server.UnicastRef;\n+import gnu.java.rmi.server.UnicastServerRef;\n+import gnu.java.rmi.registry.RegistryImpl;\n+import gnu.java.rmi.registry.RegistryImpl_Stub;\n+\n+public final class LocateRegistry {\n+\n+public static Registry getRegistry() throws RemoteException {\n+\treturn (getRegistry(\"localhost\", Registry.REGISTRY_PORT));\n+}\n+\n+public static Registry getRegistry(int port) throws RemoteException {\n+\treturn (getRegistry(\"localhost\", port));\n+}\n+\n+public static Registry getRegistry(String host) throws RemoteException {\n+\treturn (getRegistry(host, Registry.REGISTRY_PORT));\n+}\n+\n+public static Registry getRegistry(String host, int port) throws RemoteException {\n+\treturn (getRegistry(host, port, RMISocketFactory.getSocketFactory()));\n+}\n+\n+public static Registry getRegistry(String host, int port, RMIClientSocketFactory csf) throws RemoteException {\n+\tRemoteRef ref = new UnicastRef(new ObjID(ObjID.REGISTRY_ID), host, port, csf);\n+\treturn (new RegistryImpl_Stub(ref));\n+}\n+\n+public static Registry createRegistry(int port) throws RemoteException {\n+\treturn (createRegistry(port, RMISocketFactory.getSocketFactory(), RMISocketFactory.getSocketFactory()));\n+}\n+\n+public static Registry createRegistry(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {\n+\treturn (new RegistryImpl(port, csf, ssf));\n+}\n+\n+}"}, {"sha": "2a67f35c5825865b71a0057f4ef93a9dfa734eac", "filename": "libjava/java/rmi/registry/Registry.java", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fregistry%2FRegistry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fregistry%2FRegistry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fregistry%2FRegistry.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,51 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.registry;\n+\n+import java.rmi.RemoteException;\n+import java.rmi.NotBoundException;\n+import java.rmi.AccessException;\n+import java.rmi.AlreadyBoundException;\n+import java.rmi.Remote;\n+\n+public interface Registry\n+\textends Remote {\n+\n+public static int REGISTRY_PORT = 1099;\n+\n+public Remote lookup(String name) throws RemoteException, NotBoundException, AccessException;\n+\n+public void bind(String name, Remote obj) throws RemoteException, AlreadyBoundException, AccessException;\n+\n+public void unbind(String name) throws RemoteException, NotBoundException, AccessException;\n+\n+public void rebind(String name, Remote obj) throws RemoteException, AccessException;\n+\n+public String[] list() throws RemoteException, AccessException;\n+\n+}"}, {"sha": "d867a45b700e0f7995cdf0bd6dd9c939d860378a", "filename": "libjava/java/rmi/registry/RegistryHandler.java", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fregistry%2FRegistryHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fregistry%2FRegistryHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fregistry%2FRegistryHandler.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,39 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.registry;\n+\n+import java.rmi.RemoteException;\n+import java.rmi.UnknownHostException;\n+\n+public interface RegistryHandler {\n+\n+public Registry registryStub(String host, int port) throws RemoteException, UnknownHostException;\n+\n+public Registry registryImpl(int port) throws RemoteException;\n+\n+}"}, {"sha": "a3a2793e93e6ff64686d0ad90ef5358c00c59fd0", "filename": "libjava/java/rmi/server/ExportException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FExportException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FExportException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FExportException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.rmi.RemoteException;\n+\n+public class ExportException\n+\textends RemoteException {\n+\n+public ExportException(String s) {\n+\tsuper(s);\n+}\n+\n+public ExportException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "e96cf2c0c2cafa4e304efe8749c23e2c3cd003fb", "filename": "libjava/java/rmi/server/LoaderHandler.java", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FLoaderHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FLoaderHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FLoaderHandler.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,44 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+\n+public interface LoaderHandler {\n+\n+public static final String packagePrefix = \"\";\n+\n+public Class loadClass(String name) throws MalformedURLException, ClassNotFoundException;\n+\n+public Class loadClass(URL codebase, String name) throws MalformedURLException, ClassNotFoundException;\n+\n+public Object getSecurityContext(ClassLoader loader);\n+\n+}"}, {"sha": "e5e11838a0a892a6facf4d84c1d286a023c885cb", "filename": "libjava/java/rmi/server/LogStream.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,92 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.io.PrintStream;\n+import java.io.OutputStream;\n+import java.io.IOException;\n+\n+public class LogStream\n+\textends PrintStream {\n+\n+public static final int SILENT = 0;\n+public static final int BRIEF = 1;\n+public static final int VERBOSE = 2;\n+\n+private static PrintStream defStream;\n+\n+private LogStream(OutputStream s) {\n+\tsuper(s);\n+}\n+\n+public static LogStream log(String name) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static PrintStream getDefaultStream() {\n+\treturn (defStream);\n+}\n+\n+public static void setDefaultStream(PrintStream s) {\n+\tdefStream = s;\n+}\n+\n+public OutputStream getOutputStream() {\n+\treturn (out);\n+}\n+\n+public void setOutputStream(OutputStream s) {\n+\tout = s;\n+}\n+\n+public void write(int b) {\n+\tsuper.write(b);\n+}\n+\n+public void write(byte[] b, int off, int len) {\n+\tsuper.write(b, off, len);\n+}\n+\n+public String toString() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static int parseLevel(String s) {\n+\tif (s.equalsIgnoreCase(\"silent\")) {\n+\t\treturn (SILENT);\n+\t}\n+\tif (s.equalsIgnoreCase(\"brief\")) {\n+\t\treturn (BRIEF);\n+\t}\n+\tif (s.equalsIgnoreCase(\"verbose\")) {\n+\t\treturn (VERBOSE);\n+\t}\n+\treturn (SILENT);\n+}\n+\n+}"}, {"sha": "038e3f96e56a7d6b06bb855b6e013a3d381b9cf7", "filename": "libjava/java/rmi/server/ObjID.java", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FObjID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FObjID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FObjID.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,95 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.io.Serializable;\n+import java.io.ObjectOutput;\n+import java.io.ObjectInput;\n+import java.io.IOException;\n+import java.lang.Math;\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.util.Random;\n+\n+public final class ObjID\n+\timplements Serializable {\n+\n+static final long serialVersionUID = -6386392263968365220L;\n+\n+private static long next = 0x8000000000000000L;\n+private static final Object lock = ObjID.class;\n+\n+public static final int REGISTRY_ID = 0;\n+public static final int ACTIVATOR_ID = 1;\n+public static final int DGC_ID = 2;\n+\n+private long objNum;\n+private UID space;\n+\n+public ObjID() {\n+\tsynchronized (lock) {\n+\t\tobjNum = next++;\n+\t}\n+\tspace = new UID();\n+}\n+\n+public ObjID(int num) {\n+\tobjNum = (long)num;\n+\tspace = new UID((short)0);\n+}\n+\n+public void write(ObjectOutput out) throws IOException {\n+\tDataOutput dout = (DataOutput)out;\n+\tdout.writeLong(objNum);\n+\tspace.write(dout);\n+}\n+\n+public static ObjID read(ObjectInput in) throws IOException {\n+\tDataInput din = (DataInput)in;\n+\tObjID id = new ObjID();\n+\tid.objNum = din.readLong();\n+\tid.space = UID.read(din);\n+\treturn (id);\n+}\n+\n+public int hashCode() {\n+\treturn ((int)objNum);\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (obj instanceof ObjID && this.objNum == ((ObjID)obj).objNum) {\n+\t\treturn (true);\n+\t}\n+\treturn (false);\n+}\n+\n+public String toString() {\n+\treturn (\"[objNum: \" + objNum + \", \" + space + \"]\");\n+}\n+\n+}"}, {"sha": "c75fec48c62df001de017cf58a95c96f23a4bacf", "filename": "libjava/java/rmi/server/Operation.java", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FOperation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FOperation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FOperation.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,46 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+public class Operation {\n+\n+private String operation;\n+\n+public Operation(String op) {\n+\toperation = op;\n+}\n+\n+public String getOperation() {\n+\treturn (operation);\n+}\n+\n+public String toString() {\n+\treturn (operation);\n+}\n+\n+}"}, {"sha": "76b48b7ef66fd1cc9e366189c21d3e4da6571ab8", "filename": "libjava/java/rmi/server/RMIClassLoader.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,92 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.io.IOException;\n+import java.io.DataInputStream;\n+import java.net.MalformedURLException;\n+import java.util.StringTokenizer;\n+\n+public class RMIClassLoader {\n+\n+static private class MyClassLoader extends ClassLoader {\n+\n+Class defineClass(String name, byte[] data) {\n+\treturn (defineClass(name, data, 0, data.length));\n+}\n+}\n+static private MyClassLoader loader = new MyClassLoader();\n+\n+/**\n+ * @deprecated\n+ */\n+public static Class loadClass(String name) throws MalformedURLException, ClassNotFoundException {\n+\treturn (loadClass(System.getProperty(\"java.rmi.server.codebase\"), name));\n+}\n+\n+public static Class loadClass(URL codebase, String name) throws MalformedURLException, ClassNotFoundException {\n+\tURL u = new URL(codebase, name + \".class\");\n+\ttry {\n+\t\tURLConnection conn = u.openConnection();\n+\t\tDataInputStream strm = new DataInputStream(conn.getInputStream());\n+\t\tbyte data[] = new byte[conn.getContentLength()];\n+\t\tstrm.readFully(data);\n+\t\treturn (loader.defineClass(name, data));\n+\t}\n+\tcatch (IOException _) {\n+\t\tthrow new ClassNotFoundException(name);\n+\t}\n+}\n+\n+public static Class loadClass(String codebase, String name) throws MalformedURLException, ClassNotFoundException {\n+\tStringTokenizer tok = new StringTokenizer(codebase, \":\");\n+\twhile (tok.hasMoreTokens()) {\n+\t\ttry {\n+\t\t\treturn (loadClass(new URL(tok.nextToken()), name));\n+\t\t}\n+\t\tcatch (ClassNotFoundException _) {\n+\t\t\t// Ignore - try the next one.\n+\t\t}\n+\t}\n+\tthrow new ClassNotFoundException(name);\n+}\n+\n+public static String getClassAnnotation(Class cl) {\n+\treturn (null);\t// We don't yet do this.\n+}\n+\n+/**\n+ * @deprecated\n+ */\n+public static Object getSecurityContext(ClassLoader loader) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+}"}, {"sha": "1eda8da9e17b681cef4c1640d1aaeb4af687ea70", "filename": "libjava/java/rmi/server/RMIClientSocketFactory.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIClientSocketFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIClientSocketFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIClientSocketFactory.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,37 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.net.Socket;\n+import java.io.IOException;\n+\n+public interface RMIClientSocketFactory {\n+\n+public Socket createSocket(String host, int port) throws IOException;\n+\n+}"}, {"sha": "e7295934c45a7af7e28fc11304ec3af445486c66", "filename": "libjava/java/rmi/server/RMIFailureHandler.java", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIFailureHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIFailureHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIFailureHandler.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,34 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+public interface RMIFailureHandler {\n+\n+public boolean failure(Exception ex);\n+\n+}"}, {"sha": "46245bd03c70f2e000acb42f8bc480d2207d2614", "filename": "libjava/java/rmi/server/RMIServerSocketFactory.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIServerSocketFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMIServerSocketFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIServerSocketFactory.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,37 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.net.ServerSocket;\n+import java.io.IOException;\n+\n+public interface RMIServerSocketFactory {\n+\n+public ServerSocket createServerSocket(int port) throws IOException;\n+\n+}"}, {"sha": "bc7f8c35f457707458cc1c584814274a117926af", "filename": "libjava/java/rmi/server/RMISocketFactory.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMISocketFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRMISocketFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMISocketFactory.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,74 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.net.Socket;\n+import java.net.ServerSocket;\n+import java.io.IOException;\n+import gnu.java.rmi.server.RMIDefaultSocketFactory;\n+\n+public abstract class RMISocketFactory\n+\timplements RMIClientSocketFactory, RMIServerSocketFactory {\n+\n+static private RMISocketFactory defaultFactory;\n+static private RMISocketFactory currentFactory;\n+static private RMIFailureHandler currentHandler;\n+\n+static {\n+\tdefaultFactory = new RMIDefaultSocketFactory();\n+\tcurrentFactory = defaultFactory;\n+}\n+\n+public RMISocketFactory() {\n+}\n+\n+public abstract Socket createSocket(String host, int port) throws IOException;\n+\n+public abstract ServerSocket createServerSocket(int port) throws IOException;\n+\n+public static void setSocketFactory(RMISocketFactory fac) throws IOException {\n+\tcurrentFactory = fac;\n+}\n+\n+public static RMISocketFactory getSocketFactory() {\n+\treturn (currentFactory);\n+}\n+\n+public static RMISocketFactory getDefaultSocketFactory() {\n+\treturn (defaultFactory);\n+}\n+\n+public static void setFailureHandler(RMIFailureHandler fh) {\n+\tcurrentHandler = fh;\n+}\n+\n+public static RMIFailureHandler getFailureHandler() {\n+\treturn (currentHandler);\n+}\n+\n+}"}, {"sha": "ceb8abe0faa2df4e6af5543d9b2192a78b510c77", "filename": "libjava/java/rmi/server/RemoteCall.java", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteCall.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteCall.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteCall.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,46 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.lang.Exception;\n+import java.io.IOException;\n+import java.io.ObjectOutput;\n+import java.io.ObjectInput;\n+import java.io.StreamCorruptedException;\n+\n+public interface RemoteCall {\n+\n+public ObjectOutput getOutputStream() throws IOException;\n+public void releaseOutputStream() throws IOException;\n+public ObjectInput getInputStream() throws IOException;\n+public void releaseInputStream() throws IOException;\n+public ObjectOutput getResultStream(boolean success) throws IOException, StreamCorruptedException;\n+public void executeCall() throws Exception;\n+public void done() throws IOException;\n+\n+}"}, {"sha": "6f12866919145a1dc75499881e3aae035d336036", "filename": "libjava/java/rmi/server/RemoteObject.java", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,119 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.io.Serializable;\n+import java.rmi.Remote;\n+import java.rmi.NoSuchObjectException;\n+import java.rmi.UnmarshalException;\n+import java.rmi.server.RemoteRef;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.IOException;\n+import java.lang.ClassNotFoundException;\n+import java.lang.InstantiationException;\n+import java.lang.IllegalAccessException;\n+\n+public abstract class RemoteObject\n+\timplements Remote, Serializable {\n+\n+public static final long serialVersionUID = -3215090123894869218l;\n+\n+protected transient RemoteRef ref;\n+\n+protected RemoteObject() {\n+\tthis(null);\n+}\n+\n+protected RemoteObject(RemoteRef newref) {\n+\tref = newref;\n+}\n+\n+public RemoteRef getRef() {\n+\treturn (ref);\n+}\n+\n+public static Remote toStub(Remote obj) throws NoSuchObjectException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public int hashCode() {\n+\tif (ref == null) {\n+\t\treturn (0);\n+\t}\n+\telse {\n+\t\treturn (ref.hashCode());\n+\t}\n+}\n+\n+public boolean equals(Object obj) {\n+\t// We only compare references.\n+\treturn (this == obj);\n+}\n+\n+public String toString() {\n+\treturn (ref.toString());\n+}\n+\n+private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+\tString cname = in.readUTF();\n+\tif (!cname.equals(\"\")) {\n+\t\tcname = RemoteRef.packagePrefix + '.' + cname;\n+\t\ttry {\n+\t\t\tClass cls = Class.forName(cname);\n+\t\t\tref = (RemoteRef)cls.newInstance();\n+\t\t}\n+\t\tcatch (InstantiationException e1) {\n+\t\t\tthrow new UnmarshalException(\"failed to create ref\");\n+\t\t}\n+\t\tcatch (IllegalAccessException e2) {\n+\t\t\tthrow new UnmarshalException(\"failed to create ref\");\n+\t\t}\n+\t\tref.readExternal(in);\n+\t}\n+\telse {\n+\t\tref = (RemoteRef)in.readObject();\n+\t}\n+}\n+\n+private void writeObject(ObjectOutputStream out) throws IOException, ClassNotFoundException {\n+\tif (ref == null) {\n+\t\tthrow new UnmarshalException(\"no ref to serialize\");\n+\t}\n+\tString cname = ref.getRefClass(out);\n+\tif (cname != null && cname.length() > 0) {\n+\t\tout.writeUTF(cname);\n+\t\tref.writeExternal(out);\n+\t}\n+\telse {\n+\t\tout.writeUTF(\"\");\n+\t\tout.writeObject(ref);\n+\t}\n+}\n+\n+}"}, {"sha": "f9e57ceba76b200600f72ef7bce9dad80ce6504f", "filename": "libjava/java/rmi/server/RemoteRef.java", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteRef.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,51 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.lang.reflect.Method;\n+import java.io.Externalizable;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.io.ObjectOutput;\n+\n+public interface RemoteRef\n+\textends Externalizable {\n+\n+public static final long serialVersionUID = 0;\n+public static final String packagePrefix = \"gnu.java.rmi.server\";\n+\n+public void invoke(RemoteCall call) throws Exception;\n+public Object invoke(Remote obj, Method method, Object[] params, long opnum) throws Exception;\n+public RemoteCall newCall(RemoteObject obj, Operation[] op, int opnum, long hash) throws RemoteException;\n+public void done(RemoteCall call) throws RemoteException;\n+public boolean remoteEquals(RemoteRef ref);\n+public int remoteHashCode();\n+public String getRefClass(ObjectOutput out);\n+public String remoteToString();\n+\n+}"}, {"sha": "24a564a05834ac2895985ecbdc34b62854da18ad", "filename": "libjava/java/rmi/server/RemoteServer.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,56 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+\n+public abstract class RemoteServer\n+\textends RemoteObject {\n+\n+protected RemoteServer() {\n+\tsuper();\n+}\n+\n+protected RemoteServer(RemoteRef ref) {\n+\tsuper(ref);\n+}\n+\n+public static String getClientHost() throws ServerNotActiveException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static void setLog(OutputStream out) {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static PrintStream getLog() {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+}"}, {"sha": "c364cd871b5a19c45bf41360029e4f8356a1c72b", "filename": "libjava/java/rmi/server/RemoteStub.java", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteStub.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FRemoteStub.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteStub.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,47 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+public abstract class RemoteStub\n+\textends RemoteObject {\n+\n+public static final long serialVersionUID = -1585587260594494182l;\n+\n+protected RemoteStub() {\n+\tsuper();\n+}\n+\n+protected RemoteStub(RemoteRef ref) {\n+\tsuper(ref);\n+}\n+\n+protected static void setRef(RemoteStub stub, RemoteRef ref) {\n+\tstub.ref = ref;\n+}\n+\n+}"}, {"sha": "3912168b56d5fccf75249d72dbfe004cd5fdb4a9", "filename": "libjava/java/rmi/server/ServerCloneException.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FServerCloneException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FServerCloneException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FServerCloneException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,76 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.lang.CloneNotSupportedException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+public class ServerCloneException\n+\textends CloneNotSupportedException {\n+\n+public Exception detail;\n+\n+public ServerCloneException(String s) {\n+\tsuper(s);\n+\tdetail = null;\n+}\n+\n+public ServerCloneException(String s, Exception e) {\n+\tsuper(s);\n+\tdetail = e;\n+}\n+\n+public String getMessage() {\n+\tif (detail != null) {\n+\t\treturn (super.getMessage() + \":\" + detail.getMessage());\n+\t}\n+\telse {\n+\t\treturn (super.getMessage());\n+\t}\n+}\n+\n+public void printStackTrace(PrintStream s) {\n+\tif (detail != null) {\n+\t\tdetail.printStackTrace(s);\n+\t}\n+\tsuper.printStackTrace(s);\n+}\n+\n+public void printStackTrace() {\n+\tprintStackTrace(System.err);\n+}\n+\n+public void printStackTrace(PrintWriter s) {\n+\tif (detail != null) {\n+\t\tdetail.printStackTrace(s);\n+\t}\n+\tsuper.printStackTrace(s);\n+}\n+\n+}"}, {"sha": "90747f79999f3c3c3fcfb84ea997677d407777a4", "filename": "libjava/java/rmi/server/ServerNotActiveException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FServerNotActiveException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FServerNotActiveException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FServerNotActiveException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.lang.Exception;\n+\n+public class ServerNotActiveException\n+\textends Exception {\n+\n+public ServerNotActiveException() {\n+\tsuper();\n+}\n+\n+public ServerNotActiveException(String s) {\n+\tsuper(s);\n+}\n+\n+}"}, {"sha": "fc75669d30cbbbd3ab7a7bd5f662a45465c6ac44", "filename": "libjava/java/rmi/server/ServerRef.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FServerRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FServerRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FServerRef.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.rmi.server.RemoteStub;\n+import java.rmi.Remote;\n+import java.rmi.RemoteException;\n+import java.rmi.server.ServerNotActiveException;\n+\n+public interface ServerRef\n+\textends RemoteRef {\n+\n+public static final long serialVersionUID = 0;\n+\n+public RemoteStub exportObject(Remote obj, Object data) throws RemoteException;\n+public String getClientHost() throws ServerNotActiveException;\n+\n+}"}, {"sha": "99339d5c14777c820d6544bf6d273afe930baec7", "filename": "libjava/java/rmi/server/Skeleton.java", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSkeleton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSkeleton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FSkeleton.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,39 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.rmi.Remote;\n+import java.lang.Exception;\n+import java.rmi.server.RemoteCall;\n+\n+public interface Skeleton {\n+\n+public void dispatch(Remote obj, RemoteCall theCall, int opnum, long hash) throws Exception;\n+public Operation[] getOperations();\n+\n+}"}, {"sha": "e74ae515ab16adeca06cb104903cd3cb2835624e", "filename": "libjava/java/rmi/server/SkeletonMismatchException.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonMismatchException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonMismatchException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonMismatchException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,41 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.rmi.RemoteException;\n+\n+public class SkeletonMismatchException\n+\textends RemoteException {\n+\n+public static final long serialVersionUID = -7780460454818859281l;\n+\n+public SkeletonMismatchException(String s) {\n+\tsuper(s);\n+}\n+\n+}"}, {"sha": "26dfe88e66c108fe7aca08b1b37ad28a845864c2", "filename": "libjava/java/rmi/server/SkeletonNotFoundException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonNotFoundException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.rmi.RemoteException;\n+\n+public class SkeletonNotFoundException\n+\textends RemoteException {\n+\n+public SkeletonNotFoundException(String s) {\n+\tsuper(s);\n+}\n+\n+public SkeletonNotFoundException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "10b0b80546f75f0c4b330512bfb0476f9e2a5a9a", "filename": "libjava/java/rmi/server/SocketSecurityException.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSocketSecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FSocketSecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FSocketSecurityException.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,43 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.rmi.server.ExportException;\n+\n+public class SocketSecurityException\n+\textends ExportException {\n+\n+public SocketSecurityException(String s) {\n+\tsuper(s);\n+}\n+\n+public SocketSecurityException(String s, Exception e) {\n+\tsuper(s, e);\n+}\n+\n+}"}, {"sha": "49d256e0a8e2efbc944fb54578ee9aecd8b812fc", "filename": "libjava/java/rmi/server/UID.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FUID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FUID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FUID.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,120 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.io.Serializable;\n+import java.io.DataOutput;\n+import java.io.DataInput;\n+import java.io.IOException;\n+import java.util.Random;\n+import java.lang.Thread;\n+import java.lang.InterruptedException;\n+\n+public final class UID\n+\timplements Serializable {\n+\n+public static final long serialVersionUID = 1086053664494604050L;\n+\n+private static final Object lock = UID.class;\n+private static long baseTime = System.currentTimeMillis();\n+private static short nextCount = Short.MIN_VALUE;\n+// This is sun's algorithm - don't ask me why ...\n+private static final int uniqueNr = (new Object()).hashCode();\n+\n+private int unique;\n+private long time;\n+private short count;\n+\n+/**\n+ * This is sun's algorithm - don't ask me why ...\n+ */\n+public UID() {\n+\tsynchronized (lock) {\n+\t\tif (count == Short.MAX_VALUE) {\n+\t\t\tlong newtime;\n+\t\t\tfor (;;) {\n+\t\t\t\tnewtime = System.currentTimeMillis();\n+\t\t\t\tif (newtime - baseTime > 1000) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\tThread.sleep(1000);\n+\t\t\t\t}\n+\t\t\t\tcatch (InterruptedException _) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tbaseTime = newtime;\n+\t\t\tnextCount = Short.MIN_VALUE;\n+\t\t}\n+\t\tcount = nextCount++;\n+\t\tunique = uniqueNr;\n+\t\ttime = baseTime;\n+\t}\n+}\n+\n+public UID(short num) {\n+\tunique = (int)num;\n+\ttime = 0;\n+\tcount = 0;\n+}\n+\n+public int hashCode() {\n+\treturn (unique);\n+}\n+\n+public boolean equals(Object obj) {\n+\tif (obj instanceof UID) {\n+\t\tUID uid = (UID)obj;\n+\t\tif (this.unique == uid.unique &&\n+\t\t    this.time == uid.time &&\n+\t\t    this.count == uid.count) {\n+\t\t\treturn (true);\n+\t\t}\n+\t}\n+\treturn (false);\n+}\n+\n+public String toString() {\n+\treturn (\"[UID: \" + unique + \",\" + time + \",\" + count + \"]\");\n+}\n+\n+public void write(DataOutput out) throws IOException {\n+\tout.writeInt(unique);\n+\tout.writeLong(time);\n+\tout.writeShort(count);\n+}\n+\n+public static UID read(DataInput in) throws IOException {\n+\tUID id = new UID();\n+\tid.unique = in.readInt();\n+\tid.time = in.readLong();\n+\tid.count = in.readShort();\n+\treturn (id);\n+}\n+\n+}"}, {"sha": "3f78893c0803cdec20848fa6807d2ee5fa45d696", "filename": "libjava/java/rmi/server/UnicastRemoteObject.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FUnicastRemoteObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FUnicastRemoteObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FUnicastRemoteObject.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,76 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+import java.rmi.RemoteException;\n+import java.rmi.Remote;\n+import java.rmi.server.RemoteRef;\n+import java.rmi.NoSuchObjectException;\n+import gnu.java.rmi.server.UnicastServerRef;\n+\n+public class UnicastRemoteObject\n+\textends RemoteServer {\n+\n+protected UnicastRemoteObject() throws RemoteException {\n+\tthis(0);\n+}\n+\n+protected UnicastRemoteObject(int port) throws RemoteException {\n+\tthis(port, RMISocketFactory.getSocketFactory(), RMISocketFactory.getSocketFactory());\n+}\n+\n+protected UnicastRemoteObject(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {\n+\tsuper(new UnicastServerRef(new ObjID(), port, ssf));\n+}\n+\n+protected UnicastRemoteObject(RemoteRef ref) throws RemoteException {\n+\tsuper((UnicastServerRef)ref);\n+}\n+\n+public Object clone() throws CloneNotSupportedException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+public static RemoteStub exportObject(Remote obj) throws RemoteException {\n+\tUnicastServerRef sref = (UnicastServerRef)((RemoteObject)obj).getRef();\n+\treturn (sref.exportObject(obj));\n+}\n+\n+public static Remote exportObject(Remote obj, int port) throws RemoteException {\n+\treturn (exportObject(obj));\n+}\n+\n+public static Remote exportObject(Remote obj, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {\n+\treturn (exportObject(obj));\n+}\n+\n+public static boolean unexportObject(Remote obj, boolean force) throws NoSuchObjectException {\n+\tthrow new Error(\"Not implemented\");\n+}\n+\n+}"}, {"sha": "20678d18649c65b952813eb3fd74eb49c6c695eb", "filename": "libjava/java/rmi/server/Unreferenced.java", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FUnreferenced.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5/libjava%2Fjava%2Frmi%2Fserver%2FUnreferenced.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FUnreferenced.java?ref=83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "patch": "@@ -0,0 +1,34 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License.\n+ */\n+\n+package java.rmi.server;\n+\n+public interface Unreferenced {\n+\n+public void unreferenced();\n+\n+}"}]}