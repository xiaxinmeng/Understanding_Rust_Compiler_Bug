{"sha": "209b636eddd6602c55b4a65237578953b7d80225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5YjYzNmVkZGQ2NjAyYzU1YjRhNjUyMzc1Nzg5NTNiN2Q4MDIyNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-06T12:51:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-06T12:51:01Z"}, "message": "re PR tree-optimization/77479 (Compile time hog w/ -O2 (-Os))\n\n2016-09-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/77479\n\t* tree-vrp.c (update_value_range): Extend overflow handling to\n\tVARYING.\n\n\t* gcc.dg/torture/pr77479.c: New testcase.\n\nFrom-SVN: r240007", "tree": {"sha": "ff3dd354dbee4aa86f09a20f3bd1562184e07dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff3dd354dbee4aa86f09a20f3bd1562184e07dd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/209b636eddd6602c55b4a65237578953b7d80225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209b636eddd6602c55b4a65237578953b7d80225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209b636eddd6602c55b4a65237578953b7d80225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209b636eddd6602c55b4a65237578953b7d80225/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b772a56562fa8272a188d39a38492d52bdc797fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b772a56562fa8272a188d39a38492d52bdc797fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b772a56562fa8272a188d39a38492d52bdc797fd"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "87910e442016a7a2af47fc18f8c1008aa3c29943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209b636eddd6602c55b4a65237578953b7d80225/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209b636eddd6602c55b4a65237578953b7d80225/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=209b636eddd6602c55b4a65237578953b7d80225", "patch": "@@ -1,3 +1,9 @@\n+2016-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77479\n+\t* tree-vrp.c (update_value_range): Extend overflow handling to\n+\tVARYING.\n+\n 2016-09-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/77476"}, {"sha": "9fcda6e77a08f127328490552873886c738f721c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209b636eddd6602c55b4a65237578953b7d80225/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209b636eddd6602c55b4a65237578953b7d80225/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=209b636eddd6602c55b4a65237578953b7d80225", "patch": "@@ -1,3 +1,8 @@\n+2016-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77479\n+\t* gcc.dg/torture/pr77479.c: New testcase.\n+\n 2016-09-06  Richard Biener  <rguenther@suse.de>\n \n \tPR c/77450"}, {"sha": "354ae5986ce7427689e8fd75abfa5c2d1ed039e7", "filename": "gcc/testsuite/gcc.dg/torture/pr77479.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209b636eddd6602c55b4a65237578953b7d80225/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77479.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209b636eddd6602c55b4a65237578953b7d80225/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77479.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77479.c?ref=209b636eddd6602c55b4a65237578953b7d80225", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fstrict-overflow -ftree-vrp\" } */\n+\n+void\n+vr (int of, unsigned char bw)\n+{\n+  int d1;\n+  int lm = 0;\n+\n+  for (d1 = 0; d1 < 3; ++d1)\n+    {\n+      const int vl = 2;\n+\n+      while (bw < vl)\n+\t{\n+\t}\n+      if (bw != vl)\n+\tlm -= vl;\n+    }\n+  while (++of < 1)\n+    {\n+      lm /= bw;\n+      of += lm;\n+    }\n+}"}, {"sha": "e7067ab8e6ecc9950f3f8de2653fd32af9454171", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209b636eddd6602c55b4a65237578953b7d80225/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209b636eddd6602c55b4a65237578953b7d80225/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=209b636eddd6602c55b4a65237578953b7d80225", "patch": "@@ -744,23 +744,29 @@ update_value_range (const_tree var, value_range *new_vr)\n       value_range_type rtype = get_range_info (var, &min, &max);\n       if (rtype == VR_RANGE || rtype == VR_ANTI_RANGE)\n \t{\n-\t  value_range nr;\n-\t  nr.type = rtype;\n+\t  tree nr_min, nr_max;\n \t  /* Range info on SSA names doesn't carry overflow information\n \t     so make sure to preserve the overflow bit on the lattice.  */\n-\t  if (new_vr->type == VR_RANGE\n-\t      && is_negative_overflow_infinity (new_vr->min)\n-\t      && wi::eq_p (new_vr->min, min))\n-\t    nr.min = new_vr->min;\n+\t  if (rtype == VR_RANGE\n+\t      && needs_overflow_infinity (TREE_TYPE (var))\n+\t      && (new_vr->type == VR_VARYING\n+\t\t  || (new_vr->type == VR_RANGE\n+\t\t      && is_negative_overflow_infinity (new_vr->min)))\n+\t      && wi::eq_p (vrp_val_min (TREE_TYPE (var)), min))\n+\t    nr_min = negative_overflow_infinity (TREE_TYPE (var));\n \t  else\n-\t    nr.min = wide_int_to_tree (TREE_TYPE (var), min);\n-\t  if (new_vr->type == VR_RANGE\n-\t      && is_positive_overflow_infinity (new_vr->max)\n-\t      && wi::eq_p (new_vr->max, max))\n-\t    nr.max = new_vr->max;\n+\t    nr_min = wide_int_to_tree (TREE_TYPE (var), min);\n+\t  if (rtype == VR_RANGE\n+\t      && needs_overflow_infinity (TREE_TYPE (var))\n+\t      && (new_vr->type == VR_VARYING\n+\t\t  || (new_vr->type == VR_RANGE\n+\t\t      && is_positive_overflow_infinity (new_vr->max)))\n+\t      && wi::eq_p (vrp_val_max (TREE_TYPE (var)), max))\n+\t    nr_max = positive_overflow_infinity (TREE_TYPE (var));\n \t  else\n-\t    nr.max = wide_int_to_tree (TREE_TYPE (var), max);\n-\t  nr.equiv = NULL;\n+\t    nr_max = wide_int_to_tree (TREE_TYPE (var), max);\n+\t  value_range nr = VR_INITIALIZER;\n+\t  set_and_canonicalize_value_range (&nr, rtype, nr_min, nr_max, NULL);\n \t  vrp_intersect_ranges (new_vr, &nr);\n \t}\n     }"}]}