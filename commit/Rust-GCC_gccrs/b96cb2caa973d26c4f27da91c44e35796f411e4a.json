{"sha": "b96cb2caa973d26c4f27da91c44e35796f411e4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk2Y2IyY2FhOTczZDI2YzRmMjdkYTkxYzQ0ZTM1Nzk2ZjQxMWU0YQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-01-24T00:06:48Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T06:59:30Z"}, "message": "AVX512FP16: Add vmaxph/vminph/vmaxsh/vminsh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h: (_mm512_max_ph): New intrinsic.\n\t(_mm512_mask_max_ph): Likewise.\n\t(_mm512_maskz_max_ph): Likewise.\n\t(_mm512_min_ph): Likewise.\n\t(_mm512_mask_min_ph): Likewise.\n\t(_mm512_maskz_min_ph): Likewise.\n\t(_mm512_max_round_ph): Likewise.\n\t(_mm512_mask_max_round_ph): Likewise.\n\t(_mm512_maskz_max_round_ph): Likewise.\n\t(_mm512_min_round_ph): Likewise.\n\t(_mm512_mask_min_round_ph): Likewise.\n\t(_mm512_maskz_min_round_ph): Likewise.\n\t(_mm_max_sh): Likewise.\n\t(_mm_mask_max_sh): Likewise.\n\t(_mm_maskz_max_sh): Likewise.\n\t(_mm_min_sh): Likewise.\n\t(_mm_mask_min_sh): Likewise.\n\t(_mm_maskz_min_sh): Likewise.\n\t(_mm_max_round_sh): Likewise.\n\t(_mm_mask_max_round_sh): Likewise.\n\t(_mm_maskz_max_round_sh): Likewise.\n\t(_mm_min_round_sh): Likewise.\n\t(_mm_mask_min_round_sh): Likewise.\n\t(_mm_maskz_min_round_sh): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_max_ph): New intrinsic.\n\t(_mm256_max_ph): Likewise.\n\t(_mm_mask_max_ph): Likewise.\n\t(_mm256_mask_max_ph): Likewise.\n\t(_mm_maskz_max_ph): Likewise.\n\t(_mm256_maskz_max_ph): Likewise.\n\t(_mm_min_ph): Likewise.\n\t(_mm256_min_ph): Likewise.\n\t(_mm_mask_min_ph): Likewise.\n\t(_mm256_mask_min_ph): Likewise.\n\t(_mm_maskz_min_ph): Likewise.\n\t(_mm256_maskz_min_ph): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_args_builtin): Handle new builtin types.\n\t* config/i386/sse.md\n\t(<code><mode>3<mask_name><round_saeonly_name>): Adjust to\n\tsupport HF vector modes.\n\t(*<code><mode>3<mask_name><round_saeonly_name>): Likewise.\n\t(ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>):\n\tLikewise.\n\t(<sse>_vm<code><mode>3<mask_scalar_name><round_saeonly_scalar_name>):\n\tLikewise.\n\t* config/i386/subst.md (round_saeonly_mode512bit_condition):\n\tAdjust for HF vector modes.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "bfdbbea7b2fd15b0df8269d74a2ef168a07194d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfdbbea7b2fd15b0df8269d74a2ef168a07194d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b96cb2caa973d26c4f27da91c44e35796f411e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96cb2caa973d26c4f27da91c44e35796f411e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96cb2caa973d26c4f27da91c44e35796f411e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96cb2caa973d26c4f27da91c44e35796f411e4a/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58"}], "stats": {"total": 459, "additions": 438, "deletions": 21}, "files": [{"sha": "c232419b4dba5d0f87d4061c90bce5381ba03554", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -722,6 +722,269 @@ _mm_maskz_div_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n \t\t\t\t\t\t   (A), (D)))\n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsic vmaxph vminph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_max_ph (__m512h __A, __m512h __B)\n+{\n+  return __builtin_ia32_vmaxph_v32hf_mask (__A, __B,\n+\t\t\t\t\t   _mm512_setzero_ph (),\n+\t\t\t\t\t   (__mmask32) -1);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_max_ph (__m512h __A, __mmask32 __B, __m512h __C, __m512h __D)\n+{\n+  return __builtin_ia32_vmaxph_v32hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_max_ph (__mmask32 __A, __m512h __B, __m512h __C)\n+{\n+  return __builtin_ia32_vmaxph_v32hf_mask (__B, __C,\n+\t\t\t\t\t   _mm512_setzero_ph (), __A);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_min_ph (__m512h __A, __m512h __B)\n+{\n+  return __builtin_ia32_vminph_v32hf_mask (__A, __B,\n+\t\t\t\t\t   _mm512_setzero_ph (),\n+\t\t\t\t\t   (__mmask32) -1);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_min_ph (__m512h __A, __mmask32 __B, __m512h __C, __m512h __D)\n+{\n+  return __builtin_ia32_vminph_v32hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_min_ph (__mmask32 __A, __m512h __B, __m512h __C)\n+{\n+  return __builtin_ia32_vminph_v32hf_mask (__B, __C,\n+\t\t\t\t\t   _mm512_setzero_ph (), __A);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_max_round_ph (__m512h __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vmaxph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_max_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t  __m512h __D, const int __E)\n+{\n+  return __builtin_ia32_vmaxph_v32hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_max_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vmaxph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A, __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_min_round_ph (__m512h __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vminph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_min_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t  __m512h __D, const int __E)\n+{\n+  return __builtin_ia32_vminph_v32hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_min_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vminph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A, __D);\n+}\n+\n+#else\n+#define _mm512_max_round_ph(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vmaxph_v32hf_mask_round ((A), (B),\t\t\t\\\n+\t\t\t\t\t   _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t   (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_max_round_ph(A, B, C, D, E)\t\t\t\t\\\n+  (__builtin_ia32_vmaxph_v32hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_max_round_ph(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vmaxph_v32hf_mask_round ((B), (C),\t\t\t\\\n+\t\t\t\t\t   _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t   (A), (D)))\n+\n+#define _mm512_min_round_ph(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vminph_v32hf_mask_round ((A), (B),\t\t\t\\\n+\t\t\t\t\t   _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t   (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_min_round_ph(A, B, C, D, E)\t\t\t\t\\\n+  (__builtin_ia32_vminph_v32hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_min_round_ph(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vminph_v32hf_mask_round ((B), (C),\t\t\t\\\n+\t\t\t\t\t   _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t   (A), (D)))\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsic vmaxsh vminsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_sh (__m128h __A, __m128h __B)\n+{\n+  __A[0] = __A[0] > __B[0] ? __A[0] : __B[0];\n+  return __A;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_max_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vmaxsh_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_max_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vmaxsh_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_sh (__m128h __A, __m128h __B)\n+{\n+  __A[0] = __A[0] < __B[0] ? __A[0] : __B[0];\n+  return __A;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_min_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vminsh_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_min_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vminsh_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vmaxsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t(__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_max_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t       __m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vmaxsh_v8hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_max_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\tconst int __D)\n+{\n+  return __builtin_ia32_vmaxsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t__A, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vminsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t(__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_min_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t       __m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vminsh_v8hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_min_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\tconst int __D)\n+{\n+  return __builtin_ia32_vminsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t__A, __D);\n+}\n+\n+#else\n+#define _mm_max_round_sh(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vmaxsh_v8hf_mask_round ((A), (B),\t\t\t\\\n+\t\t\t\t\t  _mm_setzero_ph (),\t\t\\\n+\t\t\t\t\t  (__mmask8)-1, (C)))\n+\n+#define _mm_mask_max_round_sh(A, B, C, D, E)\t\t\t\t\\\n+  (__builtin_ia32_vmaxsh_v8hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm_maskz_max_round_sh(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vmaxsh_v8hf_mask_round ((B), (C),\t\t\t\\\n+\t\t\t\t\t  _mm_setzero_ph (),\t\t\\\n+\t\t\t\t\t  (A), (D)))\n+\n+#define _mm_min_round_sh(A, B, C)\t\t\t\t\t\\\n+  (__builtin_ia32_vminsh_v8hf_mask_round ((A), (B),\t\t\t\\\n+\t\t\t\t\t  _mm_setzero_ph (),\t\t\\\n+\t\t\t\t\t  (__mmask8)-1, (C)))\n+\n+#define _mm_mask_min_round_sh(A, B, C, D, E)\t\t\t\t\\\n+  (__builtin_ia32_vminsh_v8hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm_maskz_min_round_sh(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vminsh_v8hf_mask_round ((B), (C),\t\t\t\\\n+\t\t\t\t\t  _mm_setzero_ph (),\t\t\\\n+\t\t\t\t\t  (A), (D)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "bd60b4cd4ca839b3bdd4264bc00c633d070daa6f", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -211,6 +211,103 @@ _mm256_maskz_div_ph (__mmask16 __A, __m256h __B, __m256h __C)\n \t\t\t\t\t   _mm256_setzero_ph (), __A);\n }\n \n+/* Intrinsics v[max,min]ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_ph (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vmaxph_v8hf_mask (__A, __B,\n+\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t  (__mmask8) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_max_ph (__m256h __A, __m256h __B)\n+{\n+  return __builtin_ia32_vmaxph_v16hf_mask (__A, __B,\n+\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t  (__mmask16) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_max_ph (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vmaxph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_max_ph (__m256h __A, __mmask16 __B, __m256h __C, __m256h __D)\n+{\n+  return __builtin_ia32_vmaxph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_max_ph (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vmaxph_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_max_ph (__mmask16 __A, __m256h __B, __m256h __C)\n+{\n+  return __builtin_ia32_vmaxph_v16hf_mask (__B, __C,\n+\t\t\t\t\t   _mm256_setzero_ph (), __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_ph (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vminph_v8hf_mask (__A, __B,\n+\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t  (__mmask8) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_min_ph (__m256h __A, __m256h __B)\n+{\n+  return __builtin_ia32_vminph_v16hf_mask (__A, __B,\n+\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t  (__mmask16) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_min_ph (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vminph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_min_ph (__m256h __A, __mmask16 __B, __m256h __C, __m256h __D)\n+{\n+  return __builtin_ia32_vminph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_min_ph (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vminph_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_min_ph (__mmask16 __A, __m256h __B, __m256h __C)\n+{\n+  return __builtin_ia32_vminph_v16hf_mask (__B, __C,\n+\t\t\t\t\t   _mm256_setzero_ph (), __A);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "658fb69e943f3d90a01202626f2f94a5659245a8", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -1304,9 +1304,11 @@ DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n \n # FP16 builtins\n DEF_FUNCTION_TYPE (V8HF, V8HI)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n+DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)"}, {"sha": "df134d6c136cf5dec705eaceed6afa3c46879e63", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -2791,6 +2791,14 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmaddv8hf3_mask, \"__b\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsubv8hf3_mask, \"__builtin_ia32_vsubsh_v8hf_mask\", IX86_BUILTIN_VSUBSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmmulv8hf3_mask, \"__builtin_ia32_vmulsh_v8hf_mask\", IX86_BUILTIN_VMULSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmdivv8hf3_mask, \"__builtin_ia32_vdivsh_v8hf_mask\", IX86_BUILTIN_VDIVSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_smaxv8hf3_mask, \"__builtin_ia32_vmaxph_v8hf_mask\", IX86_BUILTIN_VMAXPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_smaxv16hf3_mask, \"__builtin_ia32_vmaxph_v16hf_mask\", IX86_BUILTIN_VMAXPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_smaxv32hf3_mask, \"__builtin_ia32_vmaxph_v32hf_mask\", IX86_BUILTIN_VMAXPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_sminv8hf3_mask, \"__builtin_ia32_vminph_v8hf_mask\", IX86_BUILTIN_VMINPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_sminv16hf3_mask, \"__builtin_ia32_vminph_v16hf_mask\", IX86_BUILTIN_VMINPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_sminv32hf3_mask, \"__builtin_ia32_vminph_v32hf_mask\", IX86_BUILTIN_VMINPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsmaxv8hf3_mask, \"__builtin_ia32_vmaxsh_v8hf_mask\", IX86_BUILTIN_VMAXSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsminv8hf3_mask, \"__builtin_ia32_vminsh_v8hf_mask\", IX86_BUILTIN_VMINSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3000,6 +3008,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmaddv8hf3_mask_round\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsubv8hf3_mask_round, \"__builtin_ia32_vsubsh_v8hf_mask_round\", IX86_BUILTIN_VSUBSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmmulv8hf3_mask_round, \"__builtin_ia32_vmulsh_v8hf_mask_round\", IX86_BUILTIN_VMULSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmdivv8hf3_mask_round, \"__builtin_ia32_vdivsh_v8hf_mask_round\", IX86_BUILTIN_VDIVSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_smaxv32hf3_mask_round, \"__builtin_ia32_vmaxph_v32hf_mask_round\", IX86_BUILTIN_VMAXPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_sminv32hf3_mask_round, \"__builtin_ia32_vminph_v32hf_mask_round\", IX86_BUILTIN_VMINPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsmaxv8hf3_mask_round, \"__builtin_ia32_vmaxsh_v8hf_mask_round\", IX86_BUILTIN_VMAXSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsminv8hf3_mask_round, \"__builtin_ia32_vminsh_v8hf_mask_round\", IX86_BUILTIN_VMINSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "9b6648ddfbea1e84daac30f601eababf3557e4a9", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -9527,12 +9527,14 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case FLOAT128_FTYPE_FLOAT128_FLOAT128:\n     case V16QI_FTYPE_V16QI_V16QI:\n     case V16QI_FTYPE_V8HI_V8HI:\n+    case V16HF_FTYPE_V16HF_V16HF:\n     case V16SF_FTYPE_V16SF_V16SF:\n     case V8QI_FTYPE_V8QI_V8QI:\n     case V8QI_FTYPE_V4HI_V4HI:\n     case V8HI_FTYPE_V8HI_V8HI:\n     case V8HI_FTYPE_V16QI_V16QI:\n     case V8HI_FTYPE_V4SI_V4SI:\n+    case V8HF_FTYPE_V8HF_V8HF:\n     case V8SF_FTYPE_V8SF_V8SF:\n     case V8SF_FTYPE_V8SF_V8SI:\n     case V8DF_FTYPE_V8DF_V8DF:"}, {"sha": "1aab06db3fe4af6b8e59084e1ce01d516b6a2355", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -2545,11 +2545,12 @@\n })\n \n (define_expand \"<code><mode>3<mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(smaxmin:VF\n-\t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\")\n-\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\")))]\n-  \"TARGET_SSE && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(smaxmin:VFH\n+\t  (match_operand:VFH 1 \"<round_saeonly_nimm_predicate>\")\n+\t  (match_operand:VFH 2 \"<round_saeonly_nimm_predicate>\")))]\n+  \"TARGET_SSE && <mask_mode512bit_condition>\n+   && <round_saeonly_mode512bit_condition>\"\n {\n   if (!flag_finite_math_only || flag_signed_zeros)\n     {\n@@ -2570,13 +2571,14 @@\n ;; are undefined in this condition, we're certain this is correct.\n \n (define_insn \"*<code><mode>3<mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(smaxmin:VF\n-\t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\" \"%0,v\")\n-\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")))]\n+  [(set (match_operand:VFH 0 \"register_operand\" \"=x,v\")\n+\t(smaxmin:VFH\n+\t  (match_operand:VFH 1 \"<round_saeonly_nimm_predicate>\" \"%0,v\")\n+\t  (match_operand:VFH 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")))]\n   \"TARGET_SSE\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n-   && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n+   && <mask_mode512bit_condition>\n+   && <round_saeonly_mode512bit_condition>\"\n   \"@\n    <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n    v<maxmin_float><ssemodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_saeonly_mask_op3>}\"\n@@ -2593,13 +2595,14 @@\n ;; presence of -0.0 and NaN.\n \n (define_insn \"ieee_<ieee_maxmin><mode>3<mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(unspec:VF\n-\t  [(match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t   (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")]\n+  [(set (match_operand:VFH 0 \"register_operand\" \"=x,v\")\n+\t(unspec:VFH\n+\t  [(match_operand:VFH 1 \"register_operand\" \"0,v\")\n+\t   (match_operand:VFH 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")]\n \t  IEEE_MAXMIN))]\n   \"TARGET_SSE\n-   && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n+   && <mask_mode512bit_condition>\n+   && <round_saeonly_mode512bit_condition>\"\n   \"@\n    <ieee_maxmin><ssemodesuffix>\\t{%2, %0|%0, %2}\n    v<ieee_maxmin><ssemodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_saeonly_mask_op3>}\"\n@@ -2643,11 +2646,11 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<sse>_vm<code><mode>3<mask_scalar_name><round_saeonly_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n-\t(vec_merge:VF_128\n-\t  (smaxmin:VF_128\n-\t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_saeonly_scalar_constraint>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VFH_128\n+\t  (smaxmin:VFH_128\n+\t    (match_operand:VFH_128 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:VFH_128 2 \"nonimmediate_operand\" \"xm,<round_saeonly_scalar_constraint>\"))\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"TARGET_SSE\""}, {"sha": "717561adb1ddcf14dea88b99cd518c8354eb1c1b", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -208,7 +208,9 @@\n (define_subst_attr \"round_saeonly_mode512bit_condition\" \"round_saeonly\" \"1\" \"(<MODE>mode == V16SFmode\n \t\t\t\t\t\t\t\t\t      || <MODE>mode == V8DFmode\n \t\t\t\t\t\t\t\t\t      || <MODE>mode == V8DImode\n-\t\t\t\t\t\t\t\t\t      || <MODE>mode == V16SImode)\")\n+\t\t\t\t\t\t\t\t\t      || <MODE>mode == V16SImode\n+\t\t\t\t\t\t\t\t\t      || <MODE>mode == V32HFmode)\")\n+\n (define_subst_attr \"round_saeonly_modev8sf_condition\" \"round_saeonly\" \"1\" \"(<MODE>mode == V8SFmode)\")\n \n (define_subst \"round_saeonly\""}, {"sha": "7106076b2a38901cc487cb0651c3179274d9ded0", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -694,6 +694,10 @@\n #define __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmaxph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "1732b50be6bfd0f0943b3285065380ed052523e7", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -711,6 +711,10 @@\n #define __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmaxph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "135b44639412869ca442d74b7da7ea11f54ba652", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -676,6 +676,10 @@ test_2 (_mm_add_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_sub_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_mul_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_div_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm512_max_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_min_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_max_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_min_round_sh, __m128h, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -684,6 +688,10 @@ test_3 (_mm_maskz_add_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n test_3 (_mm_maskz_sub_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n test_3 (_mm_maskz_mul_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n test_3 (_mm_maskz_div_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_3 (_mm512_maskz_max_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_min_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm_maskz_max_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -692,6 +700,10 @@ test_4 (_mm_mask_add_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n test_4 (_mm_mask_sub_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n test_4 (_mm_mask_mul_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n test_4 (_mm_mask_div_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_4 (_mm512_mask_max_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)"}, {"sha": "da3f56062074881bfd7073e409c8354fa25ffb00", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -781,6 +781,10 @@ test_2 (_mm_add_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_sub_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_mul_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_div_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm512_max_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_min_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_max_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_min_round_sh, __m128h, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -789,6 +793,10 @@ test_3 (_mm_maskz_add_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm_maskz_sub_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm_maskz_mul_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm_maskz_div_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm512_maskz_max_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_min_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm_maskz_max_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -797,6 +805,10 @@ test_4 (_mm_mask_add_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_sub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_mul_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_div_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm512_mask_max_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)"}, {"sha": "c3fee6552888e37b7df7fe037b4040083fc1330c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96cb2caa973d26c4f27da91c44e35796f411e4a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=b96cb2caa973d26c4f27da91c44e35796f411e4a", "patch": "@@ -712,6 +712,10 @@\n #define __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmaxph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}]}