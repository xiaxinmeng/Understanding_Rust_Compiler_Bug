{"sha": "f9329c35d72509053c31a8cf6938aa665f1352c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzMjljMzVkNzI1MDkwNTNjMzFhOGNmNjkzOGFhNjY1ZjEzNTJjMQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-08-31T21:48:04Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-08-31T21:48:04Z"}, "message": "Emit DWARF for template parameters (PR debug/30161)\n\nChangeLog:\n\tPR debug/30161\n\t* include/dwarf2.h (enum dwarf_tag): Added\n\tDW_TAG_GNU_template_template_param\n\t(enum dwarf_attribute): Added DW_AT_GNU_template_name.\n\ngcc/ChangeLog:\n\tPR debug/30161\n\t* cgraph.h (cgraph_get_node): Declare ...\n\t* cgraph.c (cgraph_get_node): ... new function.\n\t* dwarf2out.c (gen_generic_params_dies,\n\tgeneric_parameter_die, tree_add_const_value_attribute_for_decl,\n\tmake_ith_pack_parameter_name,\n\tappend_entry_to_tmpl_value_parm_die_table,\n\tgen_remaining_tmpl_value_param_die_attribute): New functions.\n\t(gen_subprogram_die): Generate debug info for template parameters\n\tif debug info level is higher than DINFO_LEVEL_TERSE.\n\tUse tree_add_const_value_attribute_for_decl instead of\n\ttree_add_const_value_attribute.\n\t(gen_const_die): Use tree_add_const_value_attribute_for_decl\n\tinstead of tree_add_const_value_attribute.\n\t(gen_struct_or_union_type_die): Generate debug\n\tinfo for template parameters if debug info level is higher than\n\tDINFO_LEVEL_TERSE.\n\t(tree_add_const_value_attribute): Handle integral and pointer\n\tconstants. Update comment.\n\t(dwarf_tag_name): Support DW_TAG_GNU_template_template_param.\n\t(dwarf_attr_name): Support DW_AT_GNU_template_name.\n\t(reference_to_unused): Fix thinko. Remove redundant predicates from\n\ttests.\n\t(tree_add_const_value_attribute): Make this work for constant\n\texpressions only.\n\ttree_add_const_value_attribute_for_decl is to be used for variable\n\tDECLs now.\n\t(add_location_or_const_value_attribute): Use\n\ttree_add_const_value_attribute_for_decl now.\n\t(dwarf2out_finish): Emit the DW_AT_const_value attribute of\n\tDW_TAG_template_value_param DIEs after function DIEs have been\n\temitted.\n\t* langhooks.h (lang_hooks_for_types): Add\n\tget_argument_pack_elems.\n\t(lang_hooks_for_decls): Add generic_generic_parameter_decl_p.\n\t(lang_hooks): Added get_innermost_generic_parms,\n\tget_innermost_generic_args.\n\t* langhooks-def.h (LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS,\n\tLANG_HOOKS_GET_INNERMOST_GENERIC_ARGS,\n\tLANG_HOOKS_GET_ARGUMENT_PACK_ELEMS,\n\tLANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P): New language hooks.\n\ngcc/cp/ChangeLog:\n\tPR debug/30161\n\t* cp-tree.h (get_template_info): Parameter should be const.\n\t(CLASSTYPE_SPECIALIZATION_OF_PRIMARY_TEMPLATE_P): Fix typo.\n\t(get_template_argument_pack_elems,\n\tget_primary_template_innermost_parameters,\n\tget_template_innermost_arguments, template_template_parameter_p):\n\tDeclare ...\n\t* pt.c (get_template_argument_pack_elems,\n\tget_template_innermost_parameters, get_template_innermost_arguments,\n\ttemplate_template_parameter_p):\n\t... New C++ front end implementation of new language hooks.\n\t(primary_template_instantiation_p): New private helper.\n\t(make_ith_pack_parameter_name): Use snprintf and strnlen instead of\n\tprintf and strlen.\n\t(get_template_info): Const-ify parameter.\n\t* cp-lang.c (LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS,\n\tLANG_HOOKS_GET_INNERMOST_GENERIC_ARGS,\n\tLANG_HOOKS_GET_ARGUMENT_PACK_ELEMS,\n\tLANG_HOOKS_GENERIC_TYPE_PARAMETER_DECL_P): Initialize these\n\tinterfaces for the C++ front-end.\n\ngcc/testsuite/ChangeLog:\n\tPR debug/30161\n\t* g++.dg/debug/dwarf2/template-params-1.C: New test.\n\t* g++.dg/debug/dwarf2/template-params-2.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-params-3.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-params-4.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-params-5.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-params-6.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-func-params-1.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-func-params-2.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-func-params-3.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-func-params-4.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-func-params-5.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-func-params-6.C: Likewise.\n\t* g++.dg/debug/dwarf2/template-func-params-7.C: Likewise.\n\nFrom-SVN: r151249", "tree": {"sha": "e200e788bb350c1d9043fd4bea07ad60134978d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e200e788bb350c1d9043fd4bea07ad60134978d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9329c35d72509053c31a8cf6938aa665f1352c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9329c35d72509053c31a8cf6938aa665f1352c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9329c35d72509053c31a8cf6938aa665f1352c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9329c35d72509053c31a8cf6938aa665f1352c1/comments", "author": null, "committer": null, "parents": [{"sha": "e756464b1f73a6d9ecc9477e45ce28589f7ef041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e756464b1f73a6d9ecc9477e45ce28589f7ef041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e756464b1f73a6d9ecc9477e45ce28589f7ef041"}], "stats": {"total": 963, "additions": 935, "deletions": 28}, "files": [{"sha": "971e402144a52ee940bd4bb6cf1399d5d2d94cce", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -1,3 +1,10 @@\n+2009-08-31  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/30161\n+\t* include/dwarf2.h (enum dwarf_tag): Added\n+\tDW_TAG_GNU_template_template_param\n+\t(enum dwarf_attribute): Added DW_AT_GNU_template_name.\n+\n 2009-08-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.tpl (AWK): Fix typo."}, {"sha": "7acb781f7dbb0c062d7e98d814d2b3aec2c82129", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -1,3 +1,47 @@\n+2009-08-31  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/30161\n+\t* cgraph.h (cgraph_get_node): Declare ...\n+\t* cgraph.c (cgraph_get_node): ... new function.\n+\t* dwarf2out.c (gen_generic_params_dies,\n+\tgeneric_parameter_die, tree_add_const_value_attribute_for_decl,\n+\tmake_ith_pack_parameter_name,\n+\tappend_entry_to_tmpl_value_parm_die_table,\n+\tgen_remaining_tmpl_value_param_die_attribute): New functions.\n+\t(gen_subprogram_die): Generate debug info for template parameters\n+\tif debug info level is higher than DINFO_LEVEL_TERSE.\n+\tUse tree_add_const_value_attribute_for_decl instead of\n+\ttree_add_const_value_attribute.\n+\t(gen_const_die): Use tree_add_const_value_attribute_for_decl\n+\tinstead of tree_add_const_value_attribute.\n+\t(gen_struct_or_union_type_die): Generate debug\n+\tinfo for template parameters if debug info level is higher than\n+\tDINFO_LEVEL_TERSE.\n+\t(tree_add_const_value_attribute): Handle integral and pointer\n+\tconstants. Update comment.\n+\t(dwarf_tag_name): Support DW_TAG_GNU_template_template_param.\n+\t(dwarf_attr_name): Support DW_AT_GNU_template_name.\n+\t(reference_to_unused): Fix thinko. Remove redundant predicates from\n+\ttests.\n+\t(tree_add_const_value_attribute): Make this work for constant\n+\texpressions only.\n+\ttree_add_const_value_attribute_for_decl is to be used for variable\n+\tDECLs now.\n+\t(add_location_or_const_value_attribute): Use\n+\ttree_add_const_value_attribute_for_decl now.\n+\t(dwarf2out_finish): Emit the DW_AT_const_value attribute of\n+\tDW_TAG_template_value_param DIEs after function DIEs have been\n+\temitted.\n+\t* langhooks.h (lang_hooks_for_types): Add\n+\tget_argument_pack_elems.\n+\t(lang_hooks_for_decls): Add generic_generic_parameter_decl_p.\n+\t(lang_hooks): Added get_innermost_generic_parms,\n+\tget_innermost_generic_args.\n+\t* langhooks-def.h (LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS,\n+\tLANG_HOOKS_GET_INNERMOST_GENERIC_ARGS,\n+\tLANG_HOOKS_GET_ARGUMENT_PACK_ELEMS,\n+\tLANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P): New language hooks.\n+\n 2009-08-31  DJ Delorie  <dj@redhat.com>\n \n \t* config/mep/mep.c (machine_function): Add frame_locked flag.  Set\n@@ -11,6 +55,7 @@\n \t(mep_return_in_memory): Zero-sized objects are passed in memory.\n \t(mep_reorg_noframe): Make sure we have accurate REG_DEAD notes.\n \n+\n 2009-08-31  Richard Guenther  <rguenther@suse.de>\n \n \t* builtins.c (fold_builtin_memory_op): Use the alias oracle"}, {"sha": "f7a0f96245fd8267769d15b12db6c0a4adfce5ef", "filename": "gcc/cgraph.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -493,6 +493,29 @@ cgraph_node (tree decl)\n   return node;\n }\n \n+/* Returns the cgraph node assigned to DECL or NULL if no cgraph node\n+   is assigned.  */\n+\n+struct cgraph_node *\n+cgraph_get_node (tree decl)\n+{\n+  struct cgraph_node key, *node = NULL, **slot;\n+\n+  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+\n+  if (!cgraph_hash)\n+    cgraph_hash = htab_create_ggc (10, hash_node, eq_node, NULL);\n+\n+  key.decl = decl;\n+\n+  slot = (struct cgraph_node **) htab_find_slot (cgraph_hash, &key,\n+\t\t\t\t\t\t NO_INSERT);\n+\n+  if (slot && *slot)\n+    node = *slot;\n+  return node;\n+}\n+\n /* Insert already constructed node into hashtable.  */\n \n void"}, {"sha": "6eadc27f23047bd80c343b2a63614c478cce479b", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -388,6 +388,8 @@ void cgraph_node_remove_callees (struct cgraph_node *node);\n struct cgraph_edge *cgraph_create_edge (struct cgraph_node *,\n \t\t\t\t\tstruct cgraph_node *,\n \t\t\t\t\tgimple, gcov_type, int, int);\n+\n+struct cgraph_node * cgraph_get_node (tree);\n struct cgraph_node *cgraph_node (tree);\n struct cgraph_node *cgraph_node_for_asm (tree asmname);\n struct cgraph_edge *cgraph_edge (struct cgraph_node *, gimple);"}, {"sha": "fa5bc97ba0a70c9ab859a84160d6a3eb3af09452", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -1,3 +1,26 @@\n+2009-08-31  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/30161\n+\t* cp-tree.h (get_template_info): Parameter should be const.\n+\t(CLASSTYPE_SPECIALIZATION_OF_PRIMARY_TEMPLATE_P): Fix typo.\n+\t(get_template_argument_pack_elems,\n+\tget_primary_template_innermost_parameters,\n+\tget_template_innermost_arguments, template_template_parameter_p):\n+\tDeclare ...\n+\t* pt.c (get_template_argument_pack_elems,\n+\tget_template_innermost_parameters, get_template_innermost_arguments,\n+\ttemplate_template_parameter_p):\n+\t... New C++ front end implementation of new language hooks.\n+\t(primary_template_instantiation_p): New private helper.\n+\t(make_ith_pack_parameter_name): Use snprintf and strnlen instead of\n+\tprintf and strlen.\n+\t(get_template_info): Const-ify parameter.\n+\t* cp-lang.c (LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS,\n+\tLANG_HOOKS_GET_INNERMOST_GENERIC_ARGS,\n+\tLANG_HOOKS_GET_ARGUMENT_PACK_ELEMS,\n+\tLANG_HOOKS_GENERIC_TYPE_PARAMETER_DECL_P): Initialize these\n+\tinterfaces for the C++ front-end.\n+\n 2009-08-31  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41127"}, {"sha": "bd35a65c031c9d53edade32d8b3a43b9b1f6f67c", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -49,6 +49,20 @@ static enum classify_record cp_classify_record (tree type);\n #define LANG_HOOKS_CLASSIFY_RECORD cp_classify_record\n #undef LANG_HOOKS_GENERIC_TYPE_P\n #define LANG_HOOKS_GENERIC_TYPE_P class_tmpl_impl_spec_p\n+\n+#undef LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS\n+#define LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS \\\n+\tget_primary_template_innermost_parameters\n+#undef LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS\n+#define LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS \\\n+\tget_template_innermost_arguments\n+#undef LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS\n+#define LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS \\\n+\tget_template_argument_pack_elems\n+#undef LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P\n+#define LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P \\\n+\ttemplate_template_parameter_p\n+\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n #undef LANG_HOOKS_DWARF_NAME"}, {"sha": "44801032dcf9c1649c24229aef0baca364f848e7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -3283,7 +3283,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define CLASSTYPE_SPECIALIZATION_OF_PRIMARY_TEMPLATE_P(NODE)\t\\\n   (CLASS_TYPE_P (NODE)\t\t\t\t\t\t\\\n    && CLASSTYPE_USE_TEMPLATE (NODE)\t\t\t\t\\\n-   && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (arg)))  \n+   && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE)))\n \n #define DECL_TEMPLATE_INSTANTIATION(NODE) (DECL_USE_TEMPLATE (NODE) & 1)\n #define CLASSTYPE_TEMPLATE_INSTANTIATION(NODE) \\\n@@ -4638,7 +4638,7 @@ extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);\n extern tree make_pack_expansion                 (tree);\n extern bool check_for_bare_parameter_packs      (tree);\n-extern tree get_template_info\t\t\t(tree);\n+extern tree get_template_info\t\t\t(const_tree);\n extern tree get_types_needing_access_check\t(tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);\n@@ -4680,6 +4680,10 @@ extern bool explicit_class_specialization_p     (tree);\n extern struct tinst_level *outermost_tinst_level(void);\n extern bool parameter_of_template_p\t\t(tree, tree);\n extern void init_template_processing\t\t(void);\n+bool template_template_parameter_p\t\t(const_tree);\n+extern tree get_primary_template_innermost_parameters\t(const_tree);\n+extern tree get_template_innermost_arguments\t(const_tree);\n+extern tree get_template_argument_pack_elems\t(const_tree);\n \n /* in repo.c */\n extern void init_repo\t\t\t\t(void);"}, {"sha": "03b89fa35a58c2a2b9ea94ef9a19f9dc034cde85", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 82, "deletions": 6, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -191,6 +191,7 @@ static tree tsubst_decl (tree, tree, tsubst_flags_t);\n static void perform_typedefs_access_check (tree tmpl, tree targs);\n static void append_type_to_template_for_access_check_1 (tree, tree, tree);\n static hashval_t iterative_hash_template_arg (tree arg, hashval_t val);\n+static bool primary_template_instantiation_p (const_tree);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n@@ -287,7 +288,7 @@ finish_member_template_decl (tree decl)\n /* Return the template info node corresponding to T, whatever T is.  */\n \n tree\n-get_template_info (tree t)\n+get_template_info (const_tree t)\n {\n   tree tinfo = NULL_TREE;\n \n@@ -2660,15 +2661,90 @@ static tree\n make_ith_pack_parameter_name (tree name, int i)\n {\n   /* Munge the name to include the parameter index.  */\n-  char numbuf[128];\n+#define NUMBUF_LEN 128\n+  char numbuf[NUMBUF_LEN];\n   char* newname;\n-  \n-  sprintf(numbuf, \"%i\", i);\n-  newname = (char*)alloca (IDENTIFIER_LENGTH (name) + strlen(numbuf) + 2);\n-  sprintf(newname, \"%s#%i\", IDENTIFIER_POINTER (name), i);\n+  int newname_len;\n+\n+  snprintf (numbuf, NUMBUF_LEN, \"%i\", i);\n+  newname_len = IDENTIFIER_LENGTH (name)\n+\t        + strnlen (numbuf, NUMBUF_LEN) + 2;\n+  newname = (char*)alloca (newname_len);\n+  snprintf (newname, newname_len,\n+\t    \"%s#%i\", IDENTIFIER_POINTER (name), i);\n   return get_identifier (newname);\n }\n \n+/* Return true if T is a primary function\n+   or class template instantiation.  */\n+\n+static bool\n+primary_template_instantiation_p (const_tree t)\n+{\n+  if (!t)\n+    return false;\n+\n+  if (TREE_CODE (t) == FUNCTION_DECL)\n+    return DECL_LANG_SPECIFIC (t)\n+\t   && DECL_TEMPLATE_INSTANTIATION (t)\n+\t   && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (t));\n+  else if (CLASS_TYPE_P (t))\n+    return CLASSTYPE_TEMPLATE_INSTANTIATION (t)\n+\t   && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t));\n+  return false;\n+}\n+\n+/* Return true if PARM is a template template parameter.  */\n+\n+bool\n+template_template_parameter_p (const_tree parm)\n+{\n+  return DECL_TEMPLATE_TEMPLATE_PARM_P (parm);\n+}\n+\n+/* Return the template parameters of T if T is a\n+   primary template instantiation, NULL otherwise.  */\n+\n+tree\n+get_primary_template_innermost_parameters (const_tree t)\n+{\n+  tree parms = NULL, template_info = NULL;\n+\n+  if ((template_info = get_template_info (t))\n+      && primary_template_instantiation_p (t))\n+    parms = INNERMOST_TEMPLATE_PARMS\n+\t(DECL_TEMPLATE_PARMS (TI_TEMPLATE (template_info)));\n+\n+  return parms;\n+}\n+\n+/* Returns the template arguments of T if T is a template instantiation,\n+   NULL otherwise.  */\n+\n+tree\n+get_template_innermost_arguments (const_tree t)\n+{\n+  tree args = NULL, template_info = NULL;\n+\n+  if ((template_info = get_template_info (t))\n+      && TI_ARGS (template_info))\n+    args = INNERMOST_TEMPLATE_ARGS (TI_ARGS (template_info));\n+\n+  return args;\n+}\n+\n+/* Return the arguments pack of T if T is a template, NULL otherwise.  */\n+\n+tree\n+get_template_argument_pack_elems (const_tree t)\n+{\n+  if (TREE_CODE (t) != TYPE_ARGUMENT_PACK\n+      && TREE_CODE (t) != NONTYPE_ARGUMENT_PACK)\n+    return NULL;\n+\n+  return ARGUMENT_PACK_ARGS (t);\n+}\n+\n /* Structure used to track the progress of find_parameter_packs_r.  */\n struct find_parameter_pack_data \n {"}, {"sha": "c9c0188b4d19dacf97cfbf0962cb3cc4380548aa", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 300, "deletions": 20, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -5551,6 +5551,14 @@ static GTY ((param_is (struct die_struct))) htab_t decl_die_table;\n    The key is DECL_UID() ^ die_parent.  */\n static GTY ((param_is (struct die_struct))) htab_t common_block_die_table;\n \n+typedef struct GTY(()) die_arg_entry_struct {\n+    dw_die_ref die;\n+    tree arg;\n+} die_arg_entry;\n+\n+DEF_VEC_O(die_arg_entry);\n+DEF_VEC_ALLOC_O(die_arg_entry,gc);\n+\n /* Node of the variable location list.  */\n struct GTY ((chain_next (\"%h.next\"))) var_loc_node {\n   rtx GTY (()) var_loc_note;\n@@ -5691,6 +5699,8 @@ static GTY(()) struct dwarf_file_data * file_table_last_lookup;\n    within the current function.  */\n static HOST_WIDE_INT frame_pointer_fb_offset;\n \n+static GTY(()) VEC(die_arg_entry,gc) *tmpl_value_parm_die_table;\n+\n /* Forward declarations for functions defined in this file.  */\n \n static int is_pseudo_reg (const_rtx);\n@@ -5826,6 +5836,7 @@ static dw_die_ref base_type_die (tree);\n static int is_base_type (tree);\n static dw_die_ref subrange_type_die (tree, tree, tree, dw_die_ref);\n static dw_die_ref modified_type_die (tree, int, int, dw_die_ref);\n+static dw_die_ref generic_parameter_die (tree, tree, dw_die_ref, int);\n static int type_is_enum (const_tree);\n static unsigned int dbx_reg_number (const_rtx);\n static void add_loc_descr_op_piece (dw_loc_descr_ref *, int);\n@@ -5861,6 +5872,7 @@ static rtx rtl_for_decl_location (tree);\n static void add_location_or_const_value_attribute (dw_die_ref, tree,\n \t\t\t\t\t\t   enum dwarf_attribute);\n static void tree_add_const_value_attribute (dw_die_ref, tree);\n+static void tree_add_const_value_attribute_for_decl (dw_die_ref, tree);\n static void add_name_attribute (dw_die_ref, const char *);\n static void add_comp_dir_attribute (dw_die_ref);\n static void add_bound_info (dw_die_ref, enum dwarf_attribute, tree);\n@@ -5924,6 +5936,8 @@ static dw_die_ref declare_in_namespace (tree, dw_die_ref);\n static struct dwarf_file_data * lookup_filename (const char *);\n static void retry_incomplete_types (void);\n static void gen_type_die_for_member (tree, tree, dw_die_ref);\n+static tree make_ith_pack_parameter_name (tree, int);\n+static void gen_generic_params_dies (tree);\n static void splice_child_die (dw_die_ref, dw_die_ref);\n static int file_info_cmp (const void *, const void *);\n static dw_loc_list_ref new_loc_list (dw_loc_descr_ref, const char *,\n@@ -5941,6 +5955,8 @@ static void prune_unused_types_walk_attribs (dw_die_ref);\n static void prune_unused_types_prune (dw_die_ref);\n static void prune_unused_types (void);\n static int maybe_emit_file (struct dwarf_file_data *fd);\n+static void append_entry_to_tmpl_value_parm_die_table (dw_die_ref, tree);\n+static void gen_remaining_tmpl_value_param_die_attribute (void);\n \n /* Section names used to hold DWARF debugging information.  */\n #ifndef DEBUG_INFO_SECTION\n@@ -6237,6 +6253,8 @@ dwarf_tag_name (unsigned int tag)\n       return \"DW_TAG_GNU_BINCL\";\n     case DW_TAG_GNU_EINCL:\n       return \"DW_TAG_GNU_EINCL\";\n+    case DW_TAG_GNU_template_template_param:\n+      return \"DW_TAG_GNU_template_template_param\";\n     default:\n       return \"DW_TAG_<unknown>\";\n     }\n@@ -6438,6 +6456,8 @@ dwarf_attr_name (unsigned int attr)\n       return \"DW_AT_body_end\";\n     case DW_AT_GNU_vector:\n       return \"DW_AT_GNU_vector\";\n+    case DW_AT_GNU_template_name:\n+      return \"DW_AT_GNU_template_name\";\n \n     case DW_AT_VMS_rtnbeg_pd_address:\n       return \"DW_AT_VMS_rtnbeg_pd_address\";\n@@ -10353,6 +10373,189 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n   return mod_type_die;\n }\n \n+/* Generate a new name for the parameter pack name NAME (an\n+   IDENTIFIER_NODE) that incorporates its */\n+\n+static tree\n+make_ith_pack_parameter_name (tree name, int i)\n+{\n+  /* Munge the name to include the parameter index.  */\n+#define NUMBUF_LEN 128\n+  char numbuf[NUMBUF_LEN];\n+  char* newname;\n+  int newname_len;\n+\n+  snprintf (numbuf, NUMBUF_LEN, \"%i\", i);\n+  newname_len = IDENTIFIER_LENGTH (name)\n+\t        + strnlen (numbuf, NUMBUF_LEN) + 2;\n+  newname = (char*) alloca (newname_len);\n+  snprintf (newname, newname_len,\n+\t    \"%s#%i\", IDENTIFIER_POINTER (name), i);\n+  return get_identifier (newname);\n+}\n+\n+/* Generate DIEs for the generic parameters of T.\n+   T must be either a generic type or a generic function.\n+   See http://gcc.gnu.org/wiki/TemplateParmsDwarf for more.  */\n+\n+static void\n+gen_generic_params_dies (tree t)\n+{\n+  tree parms, args;\n+  int parms_num, i;\n+  dw_die_ref die = NULL;\n+\n+  if (!t || (TYPE_P (t) && !COMPLETE_TYPE_P (t)))\n+    return;\n+\n+  if (TYPE_P (t))\n+    die = lookup_type_die (t);\n+  else if (DECL_P (t))\n+    die = lookup_decl_die (t);\n+\n+  gcc_assert (die);\n+\n+  parms = lang_hooks.get_innermost_generic_parms (t);\n+  if (!parms)\n+    /* T has no generic parameter. It means T is neither a generic type\n+       or function. End of story.  */\n+    return;\n+\n+  parms_num = TREE_VEC_LENGTH (parms);\n+  args = lang_hooks.get_innermost_generic_args (t);\n+  for (i = 0; i < parms_num; i++)\n+    {\n+      tree parm, arg;\n+\n+      parm = TREE_VEC_ELT (parms, i);\n+      arg = TREE_VEC_ELT (args, i);\n+      if (parm && TREE_VALUE (parm) && arg)\n+\t{\n+\t  tree pack_elems =\n+\t    lang_hooks.types.get_argument_pack_elems (arg);\n+\t  if (pack_elems)\n+\t    {\n+\t      /* So ARG is an argument pack and the elements of that pack\n+\t         are stored in PACK_ELEMS.  */\n+\t      int i, len;\n+\n+\t      len = TREE_VEC_LENGTH (pack_elems);\n+\t      for (i = 0; i < len; i++)\n+\t\tgeneric_parameter_die (TREE_VALUE (parm),\n+\t\t\t\t       TREE_VEC_ELT (pack_elems, i),\n+\t\t\t\t       die, i);\n+\t    }\n+\t  else /* Arg is not an argument pack.  */\n+\t    generic_parameter_die (TREE_VALUE (parm),\n+\t\t\t\t   arg, die,\n+\t\t\t\t   -1/* Not a param pack.  */);\n+\t}\n+    }\n+}\n+\n+/* Create and return a DIE for PARM which should be\n+   the representation of a generic type parameter.\n+   For instance, in the C++ front end, PARM would be a template parameter.\n+   ARG is the argument to PARM.\n+   PARENT_DIE is the parent DIE which the new created DIE should be added to,\n+   as a child node.\n+   PACK_ELEM_INDEX is >= 0 if PARM is a generic parameter pack, and if ARG\n+   is one of the unpacked elements of the parameter PACK. In that case,\n+   PACK_ELEM_INDEX is the index of ARG in the parameter pack.  */\n+\n+static dw_die_ref\n+generic_parameter_die (tree parm, tree arg, dw_die_ref parent_die,\n+\t\t       int pack_elem_index)\n+{\n+  dw_die_ref tmpl_die = NULL;\n+  const char *name = NULL;\n+\n+  if (!parm || !DECL_NAME (parm) || !arg)\n+    return NULL;\n+\n+  /* We support non-type generic parameters and arguments,\n+     type generic parameters and arguments, as well as\n+     generic generic parameters (a.k.a. template template parameters in C++)\n+     and arguments.  */\n+  if (TREE_CODE (parm) == PARM_DECL)\n+    /* PARM is a nontype generic parameter  */\n+    tmpl_die = new_die (DW_TAG_template_value_param, parent_die, parm);\n+  else if (TREE_CODE (parm) == TYPE_DECL)\n+    /* PARM is a type generic parameter.  */\n+    tmpl_die = new_die (DW_TAG_template_type_param, parent_die, parm);\n+  else if (lang_hooks.decls.generic_generic_parameter_decl_p (parm))\n+    /* PARM is a generic generic parameter.\n+       Its DIE is a GNU extension. It shall have a\n+       DW_AT_name attribute to represent the name of the template template\n+       parameter, and a DW_AT_GNU_template_name attribute to represent the\n+       name of the template template argument.  */\n+    tmpl_die = new_die (DW_TAG_GNU_template_template_param,\n+\t\t\tparent_die, parm);\n+  else\n+    gcc_unreachable ();\n+\n+  if (tmpl_die)\n+    {\n+      tree tmpl_type;\n+\n+      if (pack_elem_index >= 0)\n+\t{\n+\t  /* PARM is an element of a parameter pack.\n+\t     Generate a name for it.  */\n+\t  tree identifier = make_ith_pack_parameter_name (DECL_NAME (parm),\n+\t\t\t\t\t\t\t  pack_elem_index);\n+\t  if (identifier)\n+\t    name = IDENTIFIER_POINTER (identifier);\n+\t}\n+      else\n+\tname = IDENTIFIER_POINTER (DECL_NAME (parm));\n+\n+      gcc_assert (name);\n+      add_AT_string (tmpl_die, DW_AT_name, name);\n+\n+      if (!lang_hooks.decls.generic_generic_parameter_decl_p (parm))\n+\t{\n+\t  /* DWARF3, 5.6.8 says if PARM is a non-type generic parameter\n+\t     TMPL_DIE should have a child DW_AT_type attribute that is set\n+\t     to the type of the argument to PARM, which is ARG.\n+\t     If PARM is a type generic parameter, TMPL_DIE should have a\n+\t     child DW_AT_type that is set to ARG.  */\n+\t  tmpl_type = TYPE_P (arg) ? arg : TREE_TYPE (arg);\n+\t  add_type_attribute (tmpl_die, tmpl_type, 0,\n+\t\t\t      TREE_THIS_VOLATILE (tmpl_type),\n+\t\t\t      parent_die);\n+\t}\n+      else\n+\t{\n+\t  /* So TMPL_DIE is a DIE representing a\n+\t     a generic generic template parameter, a.k.a template template\n+\t     parameter in C++ and arg is a template.  */\n+\n+\t  /* The DW_AT_GNU_template_name attribute of the DIE must be set\n+\t     to the name of the argument.  */\n+\t  name = dwarf2_name (TYPE_P (arg) ? TYPE_NAME (arg) : arg, 1);\n+\t  add_AT_string (tmpl_die, DW_AT_GNU_template_name, name);\n+\t}\n+\n+      if (TREE_CODE (parm) == PARM_DECL)\n+\t/* So PARM is a non-type generic parameter.\n+\t   DWARF3 5.6.8 says we must set a DW_AT_const_value child\n+\t   attribute of TMPL_DIE which value represents the value\n+\t   of ARG.\n+\t   We must be careful here:\n+\t   The value of ARG might reference some function decls.\n+\t   We might currently be emitting debug info for a generic\n+\t   type and types are emitted before function decls, we don't\n+\t   know if the function decls referenced by ARG will actually be\n+\t   emitted after cgraph computations.\n+\t   So must defer the generation of the DW_AT_const_value to\n+\t   after cgraph is ready.  */\n+\tappend_entry_to_tmpl_value_parm_die_table (tmpl_die, arg);\n+    }\n+\n+  return tmpl_die;\n+}\n+\n /* Given a pointer to an arbitrary ..._TYPE tree node, return true if it is\n    an enumerated type.  */\n \n@@ -12057,17 +12260,20 @@ reference_to_unused (tree * tp, int * walk_subtrees,\n   else if (!cgraph_global_info_ready\n \t   && (TREE_CODE (*tp) == VAR_DECL || TREE_CODE (*tp) == FUNCTION_DECL))\n     return *tp;\n-  else if (DECL_P (*tp) && TREE_CODE (*tp) == VAR_DECL)\n+  else if (TREE_CODE (*tp) == VAR_DECL)\n     {\n       struct varpool_node *node = varpool_node (*tp);\n       if (!node->needed)\n \treturn *tp;\n     }\n-  else if (DECL_P (*tp) && TREE_CODE (*tp) == FUNCTION_DECL\n+  else if (TREE_CODE (*tp) == FUNCTION_DECL\n \t   && (!DECL_EXTERNAL (*tp) || DECL_DECLARED_INLINE_P (*tp)))\n     {\n-      struct cgraph_node *node = cgraph_node (*tp);\n-      if (node->process || TREE_ASM_WRITTEN (*tp))\n+      /* The call graph machinery must have finished analyzing,\n+         optimizing and gimplifying the CU by now.\n+\t So if *TP has no call graph node associated\n+\t to it, it means *TP will not be emitted.  */\n+      if (!cgraph_get_node (*tp))\n \treturn *tp;\n     }\n   else if (TREE_CODE (*tp) == STRING_CST && !TREE_ASM_WRITTEN (*tp))\n@@ -12639,7 +12845,7 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl,\n     }\n   /* None of that worked, so it must not really have a location;\n      try adding a constant value attribute from the DECL_INITIAL.  */\n-  tree_add_const_value_attribute (die, decl);\n+  tree_add_const_value_attribute_for_decl (die, decl);\n }\n \n /* Add VARIABLE and DIE into deferred locations list.  */\n@@ -12800,29 +13006,25 @@ native_encode_initializer (tree init, unsigned char *array, int size)\n     }\n }\n \n-/* If we don't have a copy of this variable in memory for some reason (such\n-   as a C++ member constant that doesn't have an out-of-line definition),\n-   we should tell the debugger about the constant value.  */\n+/* Attach a DW_AT_const_value attribute to DIE. The value of the\n+   attribute is the const value T.  */\n \n static void\n-tree_add_const_value_attribute (dw_die_ref var_die, tree decl)\n+tree_add_const_value_attribute (dw_die_ref die, tree t)\n {\n   tree init;\n-  tree type = TREE_TYPE (decl);\n+  tree type = TREE_TYPE (t);\n   rtx rtl;\n \n-  if (TREE_CODE (decl) != VAR_DECL && TREE_CODE (decl) != CONST_DECL)\n+  if (!t || !TREE_TYPE (t) || TREE_TYPE (t) == error_mark_node)\n     return;\n \n-  init = DECL_INITIAL (decl);\n-  if (TREE_READONLY (decl) && ! TREE_THIS_VOLATILE (decl) && init)\n-    /* OK */;\n-  else\n-    return;\n+  init = t;\n+  gcc_assert (!DECL_P (init));\n \n   rtl = rtl_for_decl_init (init, type);\n   if (rtl)\n-    add_const_value_attribute (var_die, rtl);\n+    add_const_value_attribute (die, rtl);\n   /* If the host and target are sane, try harder.  */\n   else if (CHAR_BIT == 8 && BITS_PER_UNIT == 8\n \t   && initializer_constant_valid_p (init, type))\n@@ -12833,11 +13035,35 @@ tree_add_const_value_attribute (dw_die_ref var_die, tree decl)\n \t  unsigned char *array = GGC_CNEWVEC (unsigned char, size);\n \n \t  if (native_encode_initializer (init, array, size))\n-\t    add_AT_vec (var_die, DW_AT_const_value, size, 1, array);\n+\t    add_AT_vec (die, DW_AT_const_value, size, 1, array);\n \t}\n     }\n }\n \n+/* Attach a DW_AT_const_value attribute to VAR_DIE. The value of the\n+   attribute is the const value of T, where T is an integral constant\n+   variable with static storage duration\n+   (so it can't be a PARM_DECL or a RESULT_DECL).  */\n+\n+static void\n+tree_add_const_value_attribute_for_decl (dw_die_ref var_die, tree decl)\n+{\n+\n+  if (!decl\n+      || (TREE_CODE (decl) != VAR_DECL\n+\t  && TREE_CODE (decl) != CONST_DECL))\n+    return;\n+\n+    if (TREE_READONLY (decl)\n+\t&& ! TREE_THIS_VOLATILE (decl)\n+\t&& DECL_INITIAL (decl))\n+      /* OK */;\n+    else\n+      return;\n+\n+    tree_add_const_value_attribute (var_die, DECL_INITIAL (decl));\n+}\n+\n /* Convert the CFI instructions for the current function into a\n    location list.  This is used for DW_AT_frame_base when we targeting\n    a dwarf2 consumer that does not support the dwarf3\n@@ -14534,6 +14760,10 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t loc_descriptor_from_tree (cfun->static_chain_decl));\n     }\n \n+  /* Generate child dies for template paramaters.  */\n+  if (debug_info_level > DINFO_LEVEL_TERSE)\n+    gen_generic_params_dies (decl);\n+\n   /* Now output descriptions of the arguments for this function. This gets\n      (unnecessarily?) complex because of the fact that the DECL_ARGUMENT list\n      for a FUNCTION_DECL doesn't indicate cases where there was a trailing\n@@ -14895,7 +15125,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n       add_pubname (decl_or_origin, var_die);\n     }\n   else\n-    tree_add_const_value_attribute (var_die, decl_or_origin);\n+    tree_add_const_value_attribute_for_decl (var_die, decl_or_origin);\n }\n \n /* Generate a DIE to represent a named constant.  */\n@@ -14913,7 +15143,7 @@ gen_const_die (tree decl, dw_die_ref context_die)\n     add_AT_flag (const_die, DW_AT_external, 1);\n   if (DECL_ARTIFICIAL (decl))\n     add_AT_flag (const_die, DW_AT_artificial, 1);\n-  tree_add_const_value_attribute (const_die, decl);\n+  tree_add_const_value_attribute_for_decl (const_die, decl);\n }\n \n /* Generate a DIE to represent a label identifier.  */\n@@ -15332,6 +15562,11 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n   else\n     remove_AT (type_die, DW_AT_declaration);\n \n+  /* Generate child dies for template paramaters.  */\n+  if (debug_info_level > DINFO_LEVEL_TERSE\n+      && COMPLETE_TYPE_P (type))\n+    gen_generic_params_dies (type);\n+\n   /* If this type has been completed, then give it a byte_size attribute and\n      then give a list of members.  */\n   if (complete && !ns_decl)\n@@ -16587,6 +16822,49 @@ maybe_emit_file (struct dwarf_file_data * fd)\n   return fd->emitted_number;\n }\n \n+/* Schedule generation of a DW_AT_const_value attribute to DIE.\n+   That generation should happen after function debug info has been\n+   generated. The value of the attribute is the constant value of ARG.  */\n+\n+static void\n+append_entry_to_tmpl_value_parm_die_table (dw_die_ref die, tree arg)\n+{\n+  die_arg_entry entry;\n+\n+  if (!die || !arg)\n+    return;\n+\n+  if (!tmpl_value_parm_die_table)\n+    tmpl_value_parm_die_table\n+      = VEC_alloc (die_arg_entry, gc, 32);\n+\n+  entry.die = die;\n+  entry.arg = arg;\n+  VEC_safe_push (die_arg_entry, gc,\n+\t\t tmpl_value_parm_die_table,\n+\t\t &entry);\n+}\n+\n+/* Add a DW_AT_const_value attribute to DIEs that were scheduled\n+   by append_entry_to_tmpl_value_parm_die_table. This function must\n+   be called after function DIEs have been generated.  */\n+\n+static void\n+gen_remaining_tmpl_value_param_die_attribute (void)\n+{\n+  if (tmpl_value_parm_die_table)\n+    {\n+      unsigned i;\n+      die_arg_entry *e;\n+\n+      for (i = 0;\n+           VEC_iterate (die_arg_entry, tmpl_value_parm_die_table, i, e);\n+           i++)\n+\ttree_add_const_value_attribute (e->die, e->arg);\n+    }\n+}\n+\n+\n /* Replace DW_AT_name for the decl with name.  */\n  \n static void\n@@ -17346,6 +17624,8 @@ dwarf2out_finish (const char *filename)\n   dw_die_ref die = 0;\n   unsigned int i;\n \n+  gen_remaining_tmpl_value_param_die_attribute ();\n+\n   /* Add the name for the main input file now.  We delayed this from\n      dwarf2out_init to avoid complications with PCH.  */\n   add_name_attribute (comp_unit_die, remap_debug_filename (filename));"}, {"sha": "25d96e92fa2458dbc00cbdf2959681d6d4514a40", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -153,6 +153,10 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_CLASSIFY_RECORD\tNULL\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n #define LANG_HOOKS_GENERIC_TYPE_P\thook_bool_const_tree_false\n+#define LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS hook_tree_const_tree_null\n+#define LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS hook_tree_const_tree_null\n+#define LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS hook_tree_const_tree_null\n+#define LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P hook_bool_const_tree_false\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE lhd_register_builtin_type\n #define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_const_tree\n@@ -170,6 +174,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_TYPE_FOR_MODE, \\\n   LANG_HOOKS_TYPE_FOR_SIZE, \\\n   LANG_HOOKS_GENERIC_TYPE_P, \\\n+  LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS, \\\n   LANG_HOOKS_TYPE_PROMOTES_TO, \\\n   LANG_HOOKS_REGISTER_BUILTIN_TYPE, \\\n   LANG_HOOKS_INCOMPLETE_TYPE_ERROR, \\\n@@ -206,6 +211,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n   LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P, \\\n+  LANG_HOOKS_GENERIC_GENERIC_PARAMETER_DECL_P, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_DECL_OK_FOR_SIBCALL, \\\n@@ -259,6 +265,8 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_TREE_DUMP_INITIALIZER, \\\n   LANG_HOOKS_DECLS, \\\n   LANG_HOOKS_FOR_TYPES_INITIALIZER, \\\n+  LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS, \\\n+  LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS, \\\n   LANG_HOOKS_GIMPLIFY_EXPR, \\\n   LANG_HOOKS_FOLD_OBJ_TYPE_REF, \\\n   LANG_HOOKS_BUILTIN_FUNCTION, \\"}, {"sha": "d708bb2f8675a0b103f7b5954e4c5c049570e06b", "filename": "gcc/langhooks.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -91,6 +91,9 @@ struct lang_hooks_for_types\n      e.g. C++ template implicit specializations.  */\n   bool (*generic_p) (const_tree);\n \n+  /* Returns the TREE_VEC of elements of a given generic argument pack.  */\n+  tree (*get_argument_pack_elems) (const_tree);\n+\n   /* Given a type, apply default promotions to unnamed function\n      arguments and return the new type.  Return the same type if no\n      change.  Required by any language that supports variadic\n@@ -165,6 +168,10 @@ struct lang_hooks_for_decls\n   /* Returns true if DECL is explicit member function.  */\n   bool (*function_decl_explicit_p) (tree);\n \n+  /* Returns True if the parameter is a generic parameter decl\n+     of a generic type, e.g a template template parameter for the C++ FE.  */\n+  bool (*generic_generic_parameter_decl_p) (const_tree);\n+\n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n   bool (*warn_unused_global) (const_tree);\n@@ -380,6 +387,14 @@ struct lang_hooks\n \n   struct lang_hooks_for_types types;\n \n+  /* Retuns the generic parameters of an instantiation of\n+     a generic type or decl, e.g. C++ template instantiation.  */\n+  tree (*get_innermost_generic_parms) (const_tree);\n+\n+  /* Returns the TREE_VEC of arguments of an instantiation\n+     of a generic type of decl, e.g. C++ template instantiation.  */\n+  tree (*get_innermost_generic_args) (const_tree);\n+\n   /* Perform language-specific gimplification on the argument.  Returns an\n      enum gimplify_status, though we can't see that type here.  */\n   int (*gimplify_expr) (tree *, gimple_seq *, gimple_seq *);"}, {"sha": "ff0259480420a574f4221b7530557318b8ad82ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -1,3 +1,20 @@\n+2009-08-31  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/30161\n+\t* g++.dg/debug/dwarf2/template-params-1.C: New test.\n+\t* g++.dg/debug/dwarf2/template-params-2.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-params-3.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-params-4.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-params-5.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-params-6.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-func-params-1.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-func-params-2.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-func-params-3.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-func-params-4.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-func-params-5.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-func-params-6.C: Likewise.\n+\t* g++.dg/debug/dwarf2/template-func-params-7.C: Likewise.\n+\n 2009-08-31  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41127"}, {"sha": "3a43d9fa5713196cff95fed7870766b2ca52e061", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-1.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,16 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n+// { dg-final { scan-assembler \"U.*DW_AT_name\" } }\n+\n+template <class U>\n+U\n+func(U m)\n+{\n+    return m;\n+}\n+\n+int i = func<int>(2);\n+"}, {"sha": "27c68d796438dbe00afe715240a24f0c24e54805", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-2.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,22 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler \"DW_TAG_template_value_param\" } }\n+// { dg-final { scan-assembler \"i.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"3.*DW_AT_const_value\" } }\n+\n+\n+template <int i>\n+int\n+func()\n+{\n+    int j = i;\n+    return j;\n+}\n+\n+const int foo = 1;\n+const int bar = 2;\n+\n+int h = func<foo+bar>();\n+"}, {"sha": "9f3dc8c287032f6d0db7b583c684657877053336", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-3.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,24 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler \"DW_TAG_template_value_param\" } }\n+// { dg-final { scan-assembler \"f.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"_Z4blehv.*DW_AT_const_value\" } }\n+\n+typedef void (*func_ptr)();\n+\n+template <func_ptr f>\n+int\n+func()\n+{\n+    f();\n+    return 0;\n+}\n+\n+void\n+bleh()\n+{\n+}\n+\n+int c = func<bleh>();\n+"}, {"sha": "0eb0fe5f13817c334c70957654c50439880c3e04", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-4.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-4.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,32 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-std=c++0x -g -dA\" }\n+// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n+// { dg-final { scan-assembler \"DW_AT_name.*P#0\" } }\n+// { dg-final { scan-assembler \"DW_AT_name.*P#1\" } }\n+// { dg-final { scan-assembler \"DW_AT_name.*P#2\" } }\n+\n+\n+template <typename... Args> struct count;\n+\n+template <>\n+struct count<>\n+{\n+  static const int value = 0;\n+};\n+\n+template <typename T, typename... Args>\n+struct count<T, Args...>\n+{\n+  static const int value = 1 + count<Args...>::value;\n+};\n+\n+template<typename... P>\n+int\n+do_count()\n+{\n+  return count<P...>::value;\n+}\n+\n+int c = do_count<int, char, long>();\n+"}, {"sha": "c4fd8dc3e7702debadb48e23a08281cb4b09b2da", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-5.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-5.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,28 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n+// { dg-final { scan-assembler \"T.*DW_AT_name\" } }\n+\n+template <class T>\n+struct vector\n+{\n+  int size;\n+\n+  vector () : size (0)\n+  {\n+  }\n+};\n+\n+\n+template<template <class T> class U>\n+int\n+bar()\n+{\n+    U<int> u;\n+    return u.size;\n+}\n+\n+vector<int> v;\n+int j = bar<vector>();\n+"}, {"sha": "155add48ef4c3eb5ea30f5994ecd72762b2131c3", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-6.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-6.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,38 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler-times \"DW_TAG_GNU_template_template_param\" 2 } }\n+// { dg-final { scan-assembler-times \"DW_AT_GNU_template_name: \\\"vector\\\"\" 1 } }\n+// { dg-final { scan-assembler-times \".ascii \\\"U.0\\\".*?DW_AT_name\" 1 } }\n+\n+template <class T>\n+struct vector_base\n+{\n+\n+    static int get_sizeof_t()\n+    {\n+      return 0;\n+    }\n+};\n+\n+template <class T>\n+struct vector : public vector_base<T>\n+{\n+    static int get_sizeof_t()\n+    {\n+        return sizeof (T);\n+    }\n+    T member1;\n+    T member2;\n+};\n+\n+template <template <class T> class U>\n+int\n+bar()\n+{\n+    return U<int>::get_sizeof_t();\n+}\n+\n+int i = bar<vector>();\n+\n+"}, {"sha": "07aece6917fb9c342ee02a63a59d2e136ccd2926", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-func-params-7.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-func-params-7.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,61 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-g -dA -std=c++0x\" }\n+// { dg-do compile }\n+\n+// There must be 5 subprograms generated:\n+// printf(const char*), printf<int, char, int>,\n+// printf<char, int>, printf<int> and foo().\n+// { dg-final {scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_subprogram\" 5 } }\n+\n+// That makes 6 template type parameters.\n+// { dg-final {scan-assembler-times \"DIE \\\\(0x.*?\\\\) DW_TAG_template_type_param\" 6 } }\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"printf<int, char, int>\\\"\" 1 } }\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"printf<char, int>\\\"\" 1 } }\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"printf<int>\\\"\" 1 } }\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"printf\\\"\" 1 } }\n+\n+// printf<int, char, int> and printf<char, int> have a pack expansion as\n+// function parameters. In the former, the elements of the parameter pack\n+// expansion are PackTypes#0, PackTypes#1 and the arguments are args#0 and\n+// args#1. In the later, the element of the parameter pack expansion\n+// is PackTypes#0 and the argument is args#0.\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"PackTypes#0\\\"\" 2 } }\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"args#0\\\"\" 2 } }\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"PackTypes#1\\\"\" 1 } }\n+// { dg-final {scan-assembler-times \"DW_AT_name: \\\"args#1\\\"\" 1 } }\n+\n+// { dg_final {scan-assembler-times \"\\.ascii \\\"T.0\\\"\\[\\t \\]+.*?DW_AT_name\" 3 } }\n+\n+void\n+printf(const char* s)\n+{\n+  /* Commented this to not pull std::cout into what should be\n+     a simple test.\n+  while (*s)\n+    std::cout << *s++;\n+  */\n+}\n+\n+template<typename T, typename... PackTypes>\n+void\n+printf(const char* s,\n+       T value,\n+       PackTypes... args)\n+{\n+  while (*s)\n+    {\n+      if (*s == '%' && *++s != '%')\n+\t{\n+\t  /* std::cout << value; */\n+\t  return printf(++s, args...);\n+\t}\n+    }\n+}\n+\n+void\n+foo ()\n+{\n+  int x;\n+  printf(\"%c %d\", x, 'x', 3);\n+}"}, {"sha": "e28297b55916969eb6f204ef08647f1fc05adedb", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-1.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,15 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n+// { dg-final { scan-assembler \"U.*DW_AT_name\" } }\n+\n+template <class U>\n+class A\n+{\n+    U m;\n+};\n+\n+A<int> a;\n+"}, {"sha": "ce5fbab74b03dba6f4f0f16bae8dba3ceff9c543", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-2.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,23 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler \"DW_TAG_template_value_param\" } }\n+// { dg-final { scan-assembler \"i.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"3.*DW_AT_const_value\" } }\n+\n+template <int i>\n+struct A\n+{\n+    int m;\n+    A ()\n+    {\n+        m = i;\n+    }\n+};\n+\n+const int foo = 1;\n+const int bar = 2;\n+\n+A<foo+bar> a;\n+"}, {"sha": "06b0e2b821a08785d62585ac1720249ba6fd71e0", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-3.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,25 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler \"DW_TAG_template_value_param\" } }\n+// { dg-final { scan-assembler \"f.*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"_Z4blehv.*DW_AT_const_value\" } }\n+\n+typedef void (*func_ptr) ();\n+\n+template <func_ptr f>\n+struct A\n+{\n+  A ()\n+  {\n+      f ();\n+  }\n+};\n+\n+void\n+bleh ()\n+{\n+}\n+\n+A<bleh> a;\n+"}, {"sha": "09d1d95de6be41c355012a23179462f17e229a11", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-4.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-4.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,30 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-std=c++0x -g -dA\" }\n+// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n+// { dg-final { scan-assembler \"DW_AT_name.*Args#0\" } }\n+// { dg-final { scan-assembler \"DW_AT_name.*Args#1\" } }\n+// { dg-final { scan-assembler \"DW_AT_name.*Args#2\" } }\n+\n+template <typename... Args> struct count;\n+\n+template <>\n+struct count<>\n+{\n+  static const int value = 0;\n+};\n+\n+template <typename T, typename... Args>\n+struct count<T, Args...>\n+{\n+  static const int value = 1 + count<Args...>::value;\n+};\n+\n+int\n+foo ()\n+{\n+  count<int, char, long> c;\n+  int nb = count<int, char, long>::value;\n+  return nb;\n+}\n+"}, {"sha": "f36eac5f334c3c4a9ba9d5610ce08ecc6c90e8f6", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-5.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-5.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,29 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler \"DW_TAG_template_type_param\" } }\n+// { dg-final { scan-assembler \"T.*DW_AT_name\" } }\n+\n+template <class T>\n+struct vector\n+{\n+  int size;\n+\n+  vector () : size (0)\n+  {\n+  }\n+};\n+\n+template<template <class T> class U>\n+struct bar\n+{\n+  U<int> u;\n+  int m;\n+  bar () :  m (u.size)\n+  {\n+  }\n+};\n+\n+vector<int> v;\n+bar<vector> b;\n+"}, {"sha": "dc401fa06e750ff3c990aa31375c94ab762c4a28", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-6.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-6.C?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -0,0 +1,44 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR debug/30161\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler-times \"DW_TAG_GNU_template_template_param\" 2 } }\n+// { dg-final { scan-assembler-times \"DW_AT_GNU_template_name: \\\"vector\\\"\" 1 } }\n+// { dg-final { scan-assembler-times \".ascii \\\"U.0\\\".*?DW_AT_name\" 1 } }\n+\n+template <class T>\n+struct vector_base\n+{\n+    T tab[3 + 1];\n+    static int get_sizeof_t()\n+    {\n+      return sizeof (tab);\n+    }\n+};\n+\n+template <class T>\n+struct vector : public vector_base<T>\n+{\n+    static int get_sizeof_t()\n+    {\n+        return sizeof (T);\n+    }\n+    T member1;\n+    T member2;\n+};\n+\n+template <template <class T> class U>\n+struct bar\n+{\n+  int foo()\n+  {\n+      return U<int>::get_sizeof_t ();\n+  }\n+};\n+\n+\n+int\n+foo_func ()\n+{\n+  bar<vector> b;\n+  return b.foo ();\n+}"}, {"sha": "befaceb7ebe419fbd352efc25126e7c63cc28700", "filename": "include/dwarf2.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9329c35d72509053c31a8cf6938aa665f1352c1/include%2Fdwarf2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9329c35d72509053c31a8cf6938aa665f1352c1/include%2Fdwarf2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.h?ref=f9329c35d72509053c31a8cf6938aa665f1352c1", "patch": "@@ -210,6 +210,9 @@ enum dwarf_tag\n     DW_TAG_class_template = 0x4103,\t/* For C++.  */\n     DW_TAG_GNU_BINCL = 0x4104,\n     DW_TAG_GNU_EINCL = 0x4105,\n+    /* Template template parameter.\n+       See http://gcc.gnu.org/wiki/TemplateParmsDwarf .  */\n+    DW_TAG_GNU_template_template_param = 0x4106,\n     /* Extensions for UPC.  See: http://upc.gwu.edu/~upc.  */\n     DW_TAG_upc_shared_type = 0x8765,\n     DW_TAG_upc_strict_type = 0x8766,\n@@ -390,6 +393,9 @@ enum dwarf_attribute\n     DW_AT_body_begin = 0x2105,\n     DW_AT_body_end   = 0x2106,\n     DW_AT_GNU_vector = 0x2107,\n+    /* Template template argument name.\n+       See http://gcc.gnu.org/wiki/TemplateParmsDwarf .  */\n+    DW_AT_GNU_template_name = 0x2110,\n     /* VMS extensions.  */\n     DW_AT_VMS_rtnbeg_pd_address = 0x2201,\n     /* UPC extension.  */"}]}