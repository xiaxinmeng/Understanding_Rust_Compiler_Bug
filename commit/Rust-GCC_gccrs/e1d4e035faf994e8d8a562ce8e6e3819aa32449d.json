{"sha": "e1d4e035faf994e8d8a562ce8e6e3819aa32449d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkNGUwMzVmYWY5OTRlOGQ4YTU2MmNlOGU2ZTM4MTlhYTMyNDQ5ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-18T17:28:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-18T17:28:15Z"}, "message": "re PR libstdc++/45866 ([C++0x] std::ratio_add, ratio_sub, ratio_multiply, ratio_divide do not have num and den members.)\n\n2010-10-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/45866\n\t* include/std/ratio (ratio<>::type): Add.\n\t(ratio_add<>::num, ratio_add<>::den,\n\tratio_subtract<>::num, ratio_subtract<>::den,\n\tratio_multiply<>::num, ratio_multiply<>::den,\n\tratio_divide<>::num, ratio_divide<>::den): Likewise.\n\t* testsuite/20_util/ratio/operations/45866.cc: New.\n\nFrom-SVN: r165649", "tree": {"sha": "6600abf67124665fde84486837197b6e09618876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6600abf67124665fde84486837197b6e09618876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d4e035faf994e8d8a562ce8e6e3819aa32449d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d4e035faf994e8d8a562ce8e6e3819aa32449d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d4e035faf994e8d8a562ce8e6e3819aa32449d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d4e035faf994e8d8a562ce8e6e3819aa32449d/comments", "author": null, "committer": null, "parents": [{"sha": "30fd588162ce3286f388ae2f0e09a7a3637a9a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fd588162ce3286f388ae2f0e09a7a3637a9a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fd588162ce3286f388ae2f0e09a7a3637a9a23"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "58ec1c9d48ab861e9ff849cad9e106f3a085c579", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4e035faf994e8d8a562ce8e6e3819aa32449d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4e035faf994e8d8a562ce8e6e3819aa32449d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e1d4e035faf994e8d8a562ce8e6e3819aa32449d", "patch": "@@ -1,3 +1,13 @@\n+2010-10-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/45866\n+\t* include/std/ratio (ratio<>::type): Add.\n+\t(ratio_add<>::num, ratio_add<>::den,\n+\tratio_subtract<>::num, ratio_subtract<>::den,\n+\tratio_multiply<>::num, ratio_multiply<>::den,\n+\tratio_divide<>::num, ratio_divide<>::den): Likewise.\n+\t* testsuite/20_util/ratio/operations/45866.cc: New.\n+\n 2010-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h (forward_list<>::erase_after): Return"}, {"sha": "b999e31a56fd59f11136701fb2a0c28d3873fe73", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4e035faf994e8d8a562ce8e6e3819aa32449d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4e035faf994e8d8a562ce8e6e3819aa32449d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=e1d4e035faf994e8d8a562ce8e6e3819aa32449d", "patch": "@@ -160,6 +160,8 @@ namespace std\n \n       static const intmax_t den =\n         __static_abs<_Den>::value / __static_gcd<_Num, _Den>::value;\n+\n+      typedef ratio<num, den> type;\n     };\n \n   template<intmax_t _Num, intmax_t _Den>\n@@ -182,17 +184,35 @@ namespace std\n           __safe_multiply<_R1::num, (_R2::den / __gcd)>::value,\n           __safe_multiply<_R2::num, (_R1::den / __gcd)>::value>::value,\n         __safe_multiply<_R1::den, (_R2::den / __gcd)>::value> type;\n+\n+      static const intmax_t num = type::num;\n+      static const intmax_t den = type::den;\n     };\n \n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_add<_R1, _R2>::num;\n+\n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_add<_R1, _R2>::den;\n+\n   /// ratio_subtract\n   template<typename _R1, typename _R2>\n     struct ratio_subtract\n     {\n       typedef typename ratio_add<\n         _R1,\n         ratio<-_R2::num, _R2::den>>::type type;\n+\n+      static const intmax_t num = type::num;\n+      static const intmax_t den = type::den;\n     };\n \n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_subtract<_R1, _R2>::num;\n+\n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_subtract<_R1, _R2>::den;\n+\n   /// ratio_multiply\n   template<typename _R1, typename _R2>\n     struct ratio_multiply\n@@ -209,8 +229,17 @@ namespace std\n                         (_R2::num / __gcd2)>::value,\n         __safe_multiply<(_R1::den / __gcd2),\n                         (_R2::den / __gcd1)>::value> type;\n+\n+      static const intmax_t num = type::num;\n+      static const intmax_t den = type::den;\n     };\n \n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_multiply<_R1, _R2>::num;\n+\n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_multiply<_R1, _R2>::den;\n+\n   /// ratio_divide\n   template<typename _R1, typename _R2>\n     struct ratio_divide\n@@ -220,8 +249,17 @@ namespace std\n       typedef typename ratio_multiply<\n         _R1,\n         ratio<_R2::den, _R2::num>>::type type;\n+\n+      static const intmax_t num = type::num;\n+      static const intmax_t den = type::den;\n     };\n \n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_divide<_R1, _R2>::num;\n+\n+  template<typename _R1, typename _R2>\n+    const intmax_t ratio_divide<_R1, _R2>::den;\n+\n   /// ratio_equal\n   template<typename _R1, typename _R2>\n     struct ratio_equal"}, {"sha": "19735fc3e1367ff50451df21653a7d46a87709d4", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/45866.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d4e035faf994e8d8a562ce8e6e3819aa32449d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2F45866.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d4e035faf994e8d8a562ce8e6e3819aa32449d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2F45866.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2F45866.cc?ref=e1d4e035faf994e8d8a562ce8e6e3819aa32449d", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// 2010-10-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/45866\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::ratio<1, 4>::type r_type1;\n+  typedef std::ratio<3, 2>::type r_type2;\n+\n+  typedef std::ratio_add<r_type1, r_type2> ra_type;\n+\n+  VERIFY( ra_type::num == ra_type::type::num );\n+  VERIFY( ra_type::den == ra_type::type::den );\n+  VERIFY( ra_type::num == 7 );\n+  VERIFY( ra_type::den == 4 );\n+\n+  typedef std::ratio_subtract<r_type1, r_type2> rs_type;\n+\n+  VERIFY( rs_type::num == rs_type::type::num );\n+  VERIFY( rs_type::den == rs_type::type::den );\n+  VERIFY( rs_type::num == -5 );\n+  VERIFY( rs_type::den == 4 );\n+\n+  typedef std::ratio_multiply<r_type1, r_type2> rm_type;\n+\n+  VERIFY( rm_type::num == rm_type::type::num );\n+  VERIFY( rm_type::den == rm_type::type::den );\n+  VERIFY( rm_type::num == 3 );\n+  VERIFY( rm_type::den == 8 );\n+\n+  typedef std::ratio_divide<r_type1, r_type2> rd_type;\n+\n+  VERIFY( rd_type::num == rd_type::type::num );\n+  VERIFY( rd_type::den == rd_type::type::den );\n+  VERIFY( rd_type::num == 1 );\n+  VERIFY( rd_type::den == 6 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}