{"sha": "e075a6ccbf3d92136e918661bb8dde5add99c9a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3NWE2Y2NiZjNkOTIxMzZlOTE4NjYxYmI4ZGRlNWFkZDk5YzlhMg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-06-07T15:22:33Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-06-07T15:22:33Z"}, "message": "rs6000: Remove TARGET_SPE and TARGET_SPE_ABI and friends\n\n\n\t* config/rs6000/rs6000-common.c (rs6000_handle_option): Remove\n\tSPE ABI handling.\n\t* config/rs6000/paired.md (paired_negv2sf2): Rename to negv2sf2.\n\t(paired_absv2sf2, paired_addv2sf3, paired_subv2sf3, paired_mulv2sf3,\n\tpaired_divv2sf3): Similar.\n\t* config/rs6000/predicates.md: Replace TARGET_SPE, TARGET_SPE_ABI,\n\tSPE_VECTOR_MODE and SPE_HIGH_REGNO_P by 0; simplify.\n\t* config/rs6000/rs6000-builtin.def: Delete RS6000_BUILTIN_E and\n\tRS6000_BUILTIN_S.\n\tDelete BU_SPE_1, BU_SPE_2, BU_SPE_3, BU_SPE_E, BU_SPE_P, and BU_SPE_X.\n\tRename the paired_* instruction patterns.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Do not\n\tdefine __SPE__.\n\t* config/rs6000/rs6000-protos.h (invalid_e500_subreg): Delete.\n\t* config/rs6000/rs6000.c: Delete RS6000_BUILTIN_E and RS6000_BUILTIN_S.\n\t(struct rs6000_stack): Delete fields spe_gp_save_offset, spe_gp_size,\n\tspe_padding_size, and spe_64bit_regs_used.  Replace TARGET_SPE and\n\tTARGET_SPE_ABI with 0, simplify.  Replace SPE_VECTOR_MODE with\n\tPAIRED_VECTOR_MODE.\n\t(struct machine_function): Delete field spe_insn_chain_scanned_p.\n\t(spe_func_has_64bit_regs_p): Delete.\n\t(spe_expand_predicate_builtin): Delete.\n\t(spe_expand_evsel_builtin): Delete.\n\t(TARGET_DWARF_REGISTER_SPAN): Do not define.\n\t(TARGET_MEMBER_TYPE_FORCES_BLK): Do not define.\n\t(invalid_e500_subreg): Delete.\n\t(rs6000_legitimize_address): Always force_reg op2 as well, for\n\tpaired single memory accesses.\n\t(rs6000_member_type_forces_blk): Delete.\n\t(rs6000_spe_function_arg): Delete.\n\t(rs6000_expand_unop_builtin): Delete SPE handling.\n\t(rs6000_expand_binop_builtin): Ditto.\n\t(spe_expand_stv_builtin): Delete.\n\t(bdesc_2arg_spe): Delete.\n\t(spe_expand_builtin): Delete.\n\t(spe_expand_predicate_builtin): Delete.\n\t(spe_expand_evsel_builtin): Delete.\n\t(rs6000_invalid_builtin): Remove RS6000_BTM_SPE handling.\n\t(spe_init_builtins): Delete.\n\t(spe_func_has_64bit_regs_p): Delete.\n\t(savres_routine_name): Delete \"info\" parameter.  Adjust callers.\n\t(rs6000_emit_stack_reset): Ditto.\n\t(rs6000_dwarf_register_span): Delete.\n\t* config/rs6000/rs6000.h (TARGET_SPE_ABI, TARGET_SPE,\n\tUNITS_PER_SPE_WORD, SPE_HIGH_REGNO_P, SPE_SIMD_REGNO_P,\n\tSPE_VECTOR_MODE, RS6000_BTM_SPE, RS6000_BUILTIN_E, RS6000_BUILTIN_S):\n\tDelete.\n\t* config/rs6000/rs6000.md (FIRST_SPE_HIGH_REGNO, LAST_SPE_HIGH_REGNO):\n\tDelete.\n\t* config/rs6000/rs6000.opt (-mabi=spe, -mabi=no-spe): Delete.\n\t* config/rs6000/spe.md: Delete every pattern that uses TARGET_SPE.\n\t* config/rs6000/vector.md (absv2sf2, negv2sf2, addv2sf3, subv2sf3,\n\tmulv2sf3, divv2sf3): Delete expanders.\n\nFrom-SVN: r248980", "tree": {"sha": "9c4d5fe2631b03066e4687da20b6832dbe1f87d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c4d5fe2631b03066e4687da20b6832dbe1f87d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e075a6ccbf3d92136e918661bb8dde5add99c9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e075a6ccbf3d92136e918661bb8dde5add99c9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e075a6ccbf3d92136e918661bb8dde5add99c9a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e075a6ccbf3d92136e918661bb8dde5add99c9a2/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "beaca945bb589e4f4219f66069e96e4c83a0e0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beaca945bb589e4f4219f66069e96e4c83a0e0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beaca945bb589e4f4219f66069e96e4c83a0e0a8"}], "stats": {"total": 4777, "additions": 123, "deletions": 4654}, "files": [{"sha": "444ffb9c8246e81792da7df9b99bf8958b55031d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -1,3 +1,59 @@\n+2017-06-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000-common.c (rs6000_handle_option): Remove\n+\tSPE ABI handling.\n+\t* config/rs6000/paired.md (paired_negv2sf2): Rename to negv2sf2.\n+\t(paired_absv2sf2, paired_addv2sf3, paired_subv2sf3, paired_mulv2sf3,\n+\tpaired_divv2sf3): Similar.\n+\t* config/rs6000/predicates.md: Replace TARGET_SPE, TARGET_SPE_ABI,\n+\tSPE_VECTOR_MODE and SPE_HIGH_REGNO_P by 0; simplify.\n+\t* config/rs6000/rs6000-builtin.def: Delete RS6000_BUILTIN_E and\n+\tRS6000_BUILTIN_S.\n+\tDelete BU_SPE_1, BU_SPE_2, BU_SPE_3, BU_SPE_E, BU_SPE_P, and BU_SPE_X.\n+\tRename the paired_* instruction patterns.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Do not\n+\tdefine __SPE__.\n+\t* config/rs6000/rs6000-protos.h (invalid_e500_subreg): Delete.\n+\t* config/rs6000/rs6000.c: Delete RS6000_BUILTIN_E and RS6000_BUILTIN_S.\n+\t(struct rs6000_stack): Delete fields spe_gp_save_offset, spe_gp_size,\n+\tspe_padding_size, and spe_64bit_regs_used.  Replace TARGET_SPE and\n+\tTARGET_SPE_ABI with 0, simplify.  Replace SPE_VECTOR_MODE with\n+\tPAIRED_VECTOR_MODE.\n+\t(struct machine_function): Delete field spe_insn_chain_scanned_p.\n+\t(spe_func_has_64bit_regs_p): Delete.\n+\t(spe_expand_predicate_builtin): Delete.\n+\t(spe_expand_evsel_builtin): Delete.\n+\t(TARGET_DWARF_REGISTER_SPAN): Do not define.\n+\t(TARGET_MEMBER_TYPE_FORCES_BLK): Do not define.\n+\t(invalid_e500_subreg): Delete.\n+\t(rs6000_legitimize_address): Always force_reg op2 as well, for\n+\tpaired single memory accesses.\n+\t(rs6000_member_type_forces_blk): Delete.\n+\t(rs6000_spe_function_arg): Delete.\n+\t(rs6000_expand_unop_builtin): Delete SPE handling.\n+\t(rs6000_expand_binop_builtin): Ditto.\n+\t(spe_expand_stv_builtin): Delete.\n+\t(bdesc_2arg_spe): Delete.\n+\t(spe_expand_builtin): Delete.\n+\t(spe_expand_predicate_builtin): Delete.\n+\t(spe_expand_evsel_builtin): Delete.\n+\t(rs6000_invalid_builtin): Remove RS6000_BTM_SPE handling.\n+\t(spe_init_builtins): Delete.\n+\t(spe_func_has_64bit_regs_p): Delete.\n+\t(savres_routine_name): Delete \"info\" parameter.  Adjust callers.\n+\t(rs6000_emit_stack_reset): Ditto.\n+\t(rs6000_dwarf_register_span): Delete.\n+\t* config/rs6000/rs6000.h (TARGET_SPE_ABI, TARGET_SPE,\n+\tUNITS_PER_SPE_WORD, SPE_HIGH_REGNO_P, SPE_SIMD_REGNO_P,\n+\tSPE_VECTOR_MODE, RS6000_BTM_SPE, RS6000_BUILTIN_E, RS6000_BUILTIN_S):\n+\tDelete.\n+\t* config/rs6000/rs6000.md (FIRST_SPE_HIGH_REGNO, LAST_SPE_HIGH_REGNO):\n+\tDelete.\n+\t* config/rs6000/rs6000.opt (-mabi=spe, -mabi=no-spe): Delete.\n+\t* config/rs6000/spe.md: Delete every pattern that uses TARGET_SPE.\n+\t* config/rs6000/vector.md (absv2sf2, negv2sf2, addv2sf3, subv2sf3,\n+\tmulv2sf3, divv2sf3): Delete expanders.\n+\n 2017-06-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tconfig/rs6000/rs6000.md (UNSPEC_MV_CR_GT): Delete."}, {"sha": "07537543ddcc40d1ab820ccd9671224129d83241", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -207,15 +207,6 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n       break;\n #endif\n \n-    case OPT_mabi_altivec:\n-      /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n-      opts->x_rs6000_spe_abi = 0;\n-      break;\n-\n-    case OPT_mabi_spe:\n-      opts->x_rs6000_altivec_abi = 0;\n-      break;\n-\n     case OPT_mlong_double_:\n       if (value != 64 && value != 128)\n \t{"}, {"sha": "c9f95867c0f5d183467ceb092023dc032fb0b0fa", "filename": "gcc/config/rs6000/paired.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -26,7 +26,7 @@\n    UNSPEC_EXTODD_V2SF\n   ])\n \n-(define_insn \"paired_negv2sf2\"\n+(define_insn \"negv2sf2\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_PAIRED_FLOAT\"\n@@ -40,7 +40,7 @@\n   \"ps_rsqrte %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_absv2sf2\"\n+(define_insn \"absv2sf2\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_PAIRED_FLOAT\"\n@@ -54,23 +54,23 @@\n   \"ps_nabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_addv2sf3\"\n+(define_insn \"addv2sf3\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_PAIRED_FLOAT\"\n   \"ps_add %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_subv2sf3\"\n+(define_insn \"subv2sf3\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n         (minus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n                     (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_PAIRED_FLOAT\"\n   \"ps_sub %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_mulv2sf3\"\n+(define_insn \"mulv2sf3\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n@@ -85,7 +85,7 @@\n   \"ps_res %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_divv2sf3\"\n+(define_insn \"divv2sf3\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]"}, {"sha": "4edfdbbe0d9e0bc71a6a1605b783441cd35f8b77", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -299,9 +299,6 @@\n (define_predicate \"gpc_reg_operand\"\n   (match_operand 0 \"register_operand\")\n {\n-  if (TARGET_SPE && invalid_e500_subreg (op, mode))\n-    return 0;\n-\n   if (GET_CODE (op) == SUBREG)\n     {\n       if (TARGET_NO_SF_SUBREG && sf_subreg_operand (op, mode))\n@@ -331,9 +328,6 @@\n (define_predicate \"int_reg_operand\"\n   (match_operand 0 \"register_operand\")\n {\n-  if (TARGET_SPE && invalid_e500_subreg (op, mode))\n-    return 0;\n-\n   if (GET_CODE (op) == SUBREG)\n     {\n       if (TARGET_NO_SF_SUBREG && sf_subreg_operand (op, mode))\n@@ -357,9 +351,6 @@\n (define_predicate \"int_reg_operand_not_pseudo\"\n   (match_operand 0 \"register_operand\")\n {\n-  if (TARGET_SPE && invalid_e500_subreg (op, mode))\n-    return 0;\n-\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n \n@@ -711,32 +702,6 @@\n       return easy_altivec_constant (op, mode);\n     }\n \n-  if (SPE_VECTOR_MODE (mode))\n-    {\n-      int cst, cst2;\n-      if (zero_constant (op, mode))\n-\treturn true;\n-      if (GET_MODE_CLASS (mode) != MODE_VECTOR_INT)\n-        return false;\n-\n-      /* Limit SPE vectors to 15 bits signed.  These we can generate with:\n-\t   li r0, CONSTANT1\n-\t   evmergelo r0, r0, r0\n-\t   li r0, CONSTANT2\n-\n-\t I don't know how efficient it would be to allow bigger constants,\n-\t considering we'll have an extra 'ori' for every 'li'.  I doubt 5\n-\t instructions is better than a 64-bit memory load, but I don't\n-\t have the e500 timing specs.  */\n-      if (mode == V2SImode)\n-\t{\n-\t  cst  = INTVAL (CONST_VECTOR_ELT (op, 0));\n-\t  cst2 = INTVAL (CONST_VECTOR_ELT (op, 1));\n-\t  return cst  >= -0x7fff && cst <= 0x7fff\n-\t         && cst2 >= -0x7fff && cst2 <= 0x7fff;\n-\t}\n-    }\n-\n   return false;\n })\n \n@@ -1135,12 +1100,6 @@\n       && easy_vector_constant (op, mode))\n     return 1;\n \n-  /* Do not allow invalid E500 subregs.  */\n-  if (TARGET_SPE\n-      && GET_CODE (op) == SUBREG\n-      && invalid_e500_subreg (op, mode))\n-    return 0;\n-\n   /* For floating-point or multi-word mode, the only remaining valid type\n      is a register.  */\n   if (SCALAR_FLOAT_MODE_P (mode)\n@@ -1199,16 +1158,10 @@\n   return gpc_reg_operand (op, mode);\n })\n \n-;; Return true if OP is a non-immediate operand and not an invalid\n-;; SUBREG operation on the e500.\n+;; Return true if OP is a non-immediate operand.\n (define_predicate \"rs6000_nonimmediate_operand\"\n   (match_code \"reg,subreg,mem\")\n {\n-  if (TARGET_SPE\n-      && GET_CODE (op) == SUBREG\n-      && invalid_e500_subreg (op, mode))\n-    return 0;\n-\n   return nonimmediate_operand (op, mode);\n })\n "}, {"sha": "241c4395ce918a8446bad28f97e0918eda81a49a", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 6, "deletions": 307, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -30,11 +30,9 @@\n    RS6000_BUILTIN_3 -- 3 arg builtins\n    RS6000_BUILTIN_A -- ABS builtins\n    RS6000_BUILTIN_D -- DST builtins\n-   RS6000_BUILTIN_E -- SPE EVSEL builtins.\n    RS6000_BUILTIN_H -- HTM builtins\n    RS6000_BUILTIN_P -- Altivec, VSX, ISA 2.07 vector predicate builtins\n    RS6000_BUILTIN_Q -- Paired floating point VSX predicate builtins\n-   RS6000_BUILTIN_S -- SPE predicate builtins\n    RS6000_BUILTIN_X -- special builtins\n \n    Each of the above macros takes 4 arguments:\n@@ -68,10 +66,6 @@\n   #error \"RS6000_BUILTIN_D is not defined.\"\n #endif\n \n-#ifndef RS6000_BUILTIN_E\n-  #error \"RS6000_BUILTIN_E is not defined.\"\n-#endif\n-\n #ifndef RS6000_BUILTIN_H\n   #error \"RS6000_BUILTIN_H is not defined.\"\n #endif\n@@ -84,10 +78,6 @@\n   #error \"RS6000_BUILTIN_Q is not defined.\"\n #endif\n \n-#ifndef RS6000_BUILTIN_S\n-  #error \"RS6000_BUILTIN_S is not defined.\"\n-#endif\n-\n #ifndef RS6000_BUILTIN_X\n   #error \"RS6000_BUILTIN_X is not defined.\"\n #endif\n@@ -551,55 +541,6 @@\n \t\t     | RS6000_BTC_VOID),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-/* SPE convenience macros.  */\n-#define BU_SPE_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n-  RS6000_BUILTIN_1 (SPE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_spe_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_SPE,\t\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n-\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n-\n-#define BU_SPE_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n-  RS6000_BUILTIN_2 (SPE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_spe_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_SPE,\t\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n-\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n-\n-#define BU_SPE_3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n-  RS6000_BUILTIN_3 (SPE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_spe_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_SPE,\t\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n-\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n-\n-#define BU_SPE_E(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n-  RS6000_BUILTIN_E (SPE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_spe_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_SPE,\t\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_EVSEL),\t\t\t\t\\\n-\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n-\n-#define BU_SPE_P(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n-  RS6000_BUILTIN_S (SPE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_spe_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_SPE,\t\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_PREDICATE),\t\t\t\t\\\n-\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n-\n-#define BU_SPE_X(ENUM, NAME, ATTR)\t\t\t\t\t\\\n-  RS6000_BUILTIN_X (SPE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_spe_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_SPE,\t\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n-\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n-\n /* Paired floating point convenience macros.  */\n #define BU_PAIRED_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_1 (PAIRED_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n@@ -2370,10 +2311,10 @@ BU_PAIRED_3 (SUM1,            \"sum1\",           FP, \tpaired_sum1)\n BU_PAIRED_3 (SELV2SF4,        \"selv2sf4\",       CONST, \tselv2sf4)\n \n /* 2 argument paired floating point builtins.  */\n-BU_PAIRED_2 (DIVV2SF3,\t      \"divv2sf3\",\tFP,\tpaired_divv2sf3)\n-BU_PAIRED_2 (ADDV2SF3,\t      \"addv2sf3\",\tFP,\tpaired_addv2sf3)\n-BU_PAIRED_2 (SUBV2SF3,\t      \"subv2sf3\",\tFP,\tpaired_subv2sf3)\n-BU_PAIRED_2 (MULV2SF3,\t      \"mulv2sf3\",\tFP,\tpaired_mulv2sf3)\n+BU_PAIRED_2 (DIVV2SF3,\t      \"divv2sf3\",\tFP,\tdivv2sf3)\n+BU_PAIRED_2 (ADDV2SF3,\t      \"addv2sf3\",\tFP,\taddv2sf3)\n+BU_PAIRED_2 (SUBV2SF3,\t      \"subv2sf3\",\tFP,\tsubv2sf3)\n+BU_PAIRED_2 (MULV2SF3,\t      \"mulv2sf3\",\tFP,\tmulv2sf3)\n BU_PAIRED_2 (MULS0,\t      \"muls0\",\t\tFP,\tpaired_muls0)\n BU_PAIRED_2 (MULS1,\t      \"muls1\",\t\tFP,\tpaired_muls1)\n BU_PAIRED_2 (MERGE00,\t      \"merge00\",\tCONST,\tpaired_merge00)\n@@ -2382,9 +2323,9 @@ BU_PAIRED_2 (MERGE10,\t      \"merge10\",\tCONST,\tpaired_merge10)\n BU_PAIRED_2 (MERGE11,\t      \"merge11\",\tCONST,\tpaired_merge11)\n \n /* 1 argument paired floating point builtin functions.  */\n-BU_PAIRED_1 (ABSV2SF2,\t      \"absv2sf2\",\tCONST,\tpaired_absv2sf2)\n+BU_PAIRED_1 (ABSV2SF2,\t      \"absv2sf2\",\tCONST,\tabsv2sf2)\n BU_PAIRED_1 (NABSV2SF2,\t      \"nabsv2sf2\",\tCONST,\tnabsv2sf2)\n-BU_PAIRED_1 (NEGV2SF2,\t      \"negv2sf2\",\tCONST,\tpaired_negv2sf2)\n+BU_PAIRED_1 (NEGV2SF2,\t      \"negv2sf2\",\tCONST,\tnegv2sf2)\n BU_PAIRED_1 (SQRTV2SF2,\t      \"sqrtv2sf2\",\tFP,\tsqrtv2sf2)\n BU_PAIRED_1 (RESV2SF,\t      \"resv2sf2\",\tFP,\tresv2sf2)\n \n@@ -2395,248 +2336,6 @@ BU_PAIRED_X (LX,\t      \"lx\",\t\tMISC)\n /* Paired predicates.  */\n BU_PAIRED_P (CMPU0,\t\"cmpu0\",\tCONST,\tpaired_cmpu0)\n BU_PAIRED_P (CMPU1,\t\"cmpu1\",\tCONST,\tpaired_cmpu1)\n-\f\n-/* PowerPC E500 builtins (SPE).  */\n-\n-BU_SPE_2 (EVADDW,\t\"evaddw\",\tMISC,\taddv2si3)\n-BU_SPE_2 (EVAND,\t\"evand\",\tMISC,\tandv2si3)\n-BU_SPE_2 (EVANDC,\t\"evandc\",\tMISC,\tspe_evandc)\n-BU_SPE_2 (EVDIVWS,\t\"evdivws\",\tMISC,\tdivv2si3)\n-BU_SPE_2 (EVDIVWU,\t\"evdivwu\",\tMISC,\tspe_evdivwu)\n-BU_SPE_2 (EVEQV,\t\"eveqv\",\tMISC,\tspe_eveqv)\n-BU_SPE_2 (EVFSADD,\t\"evfsadd\",\tMISC,\tspe_evfsadd)\n-BU_SPE_2 (EVFSDIV,\t\"evfsdiv\",\tMISC,\tspe_evfsdiv)\n-BU_SPE_2 (EVFSMUL,\t\"evfsmul\",\tMISC,\tspe_evfsmul)\n-BU_SPE_2 (EVFSSUB,\t\"evfssub\",\tMISC,\tspe_evfssub)\n-BU_SPE_2 (EVMERGEHI,\t\"evmergehi\",\tMISC,\tspe_evmergehi)\n-BU_SPE_2 (EVMERGEHILO,\t\"evmergehilo\",\tMISC,\tspe_evmergehilo)\n-BU_SPE_2 (EVMERGELO,\t\"evmergelo\",\tMISC,\tspe_evmergelo)\n-BU_SPE_2 (EVMERGELOHI,\t\"evmergelohi\",\tMISC,\tspe_evmergelohi)\n-BU_SPE_2 (EVMHEGSMFAA,\t\"evmhegsmfaa\",\tMISC,\tspe_evmhegsmfaa)\n-BU_SPE_2 (EVMHEGSMFAN,\t\"evmhegsmfan\",\tMISC,\tspe_evmhegsmfan)\n-BU_SPE_2 (EVMHEGSMIAA,\t\"evmhegsmiaa\",\tMISC,\tspe_evmhegsmiaa)\n-BU_SPE_2 (EVMHEGSMIAN,\t\"evmhegsmian\",\tMISC,\tspe_evmhegsmian)\n-BU_SPE_2 (EVMHEGUMIAA,\t\"evmhegumiaa\",\tMISC,\tspe_evmhegumiaa)\n-BU_SPE_2 (EVMHEGUMIAN,\t\"evmhegumian\",\tMISC,\tspe_evmhegumian)\n-BU_SPE_2 (EVMHESMF,\t\"evmhesmf\",\tMISC,\tspe_evmhesmf)\n-BU_SPE_2 (EVMHESMFA,\t\"evmhesmfa\",\tMISC,\tspe_evmhesmfa)\n-BU_SPE_2 (EVMHESMFAAW,\t\"evmhesmfaaw\",\tMISC,\tspe_evmhesmfaaw)\n-BU_SPE_2 (EVMHESMFANW,\t\"evmhesmfanw\",\tMISC,\tspe_evmhesmfanw)\n-BU_SPE_2 (EVMHESMI,\t\"evmhesmi\",\tMISC,\tspe_evmhesmi)\n-BU_SPE_2 (EVMHESMIA,\t\"evmhesmia\",\tMISC,\tspe_evmhesmia)\n-BU_SPE_2 (EVMHESMIAAW,\t\"evmhesmiaaw\",\tMISC,\tspe_evmhesmiaaw)\n-BU_SPE_2 (EVMHESMIANW,\t\"evmhesmianw\",\tMISC,\tspe_evmhesmianw)\n-BU_SPE_2 (EVMHESSF,\t\"evmhessf\",\tMISC,\tspe_evmhessf)\n-BU_SPE_2 (EVMHESSFA,\t\"evmhessfa\",\tMISC,\tspe_evmhessfa)\n-BU_SPE_2 (EVMHESSFAAW,\t\"evmhessfaaw\",\tMISC,\tspe_evmhessfaaw)\n-BU_SPE_2 (EVMHESSFANW,\t\"evmhessfanw\",\tMISC,\tspe_evmhessfanw)\n-BU_SPE_2 (EVMHESSIAAW,\t\"evmhessiaaw\",\tMISC,\tspe_evmhessiaaw)\n-BU_SPE_2 (EVMHESSIANW,\t\"evmhessianw\",\tMISC,\tspe_evmhessianw)\n-BU_SPE_2 (EVMHEUMI,\t\"evmheumi\",\tMISC,\tspe_evmheumi)\n-BU_SPE_2 (EVMHEUMIA,\t\"evmheumia\",\tMISC,\tspe_evmheumia)\n-BU_SPE_2 (EVMHEUMIAAW,\t\"evmheumiaaw\",\tMISC,\tspe_evmheumiaaw)\n-BU_SPE_2 (EVMHEUMIANW,\t\"evmheumianw\",\tMISC,\tspe_evmheumianw)\n-BU_SPE_2 (EVMHEUSIAAW,\t\"evmheusiaaw\",\tMISC,\tspe_evmheusiaaw)\n-BU_SPE_2 (EVMHEUSIANW,\t\"evmheusianw\",\tMISC,\tspe_evmheusianw)\n-BU_SPE_2 (EVMHOGSMFAA,\t\"evmhogsmfaa\",\tMISC,\tspe_evmhogsmfaa)\n-BU_SPE_2 (EVMHOGSMFAN,\t\"evmhogsmfan\",\tMISC,\tspe_evmhogsmfan)\n-BU_SPE_2 (EVMHOGSMIAA,\t\"evmhogsmiaa\",\tMISC,\tspe_evmhogsmiaa)\n-BU_SPE_2 (EVMHOGSMIAN,\t\"evmhogsmian\",\tMISC,\tspe_evmhogsmian)\n-BU_SPE_2 (EVMHOGUMIAA,\t\"evmhogumiaa\",\tMISC,\tspe_evmhogumiaa)\n-BU_SPE_2 (EVMHOGUMIAN,\t\"evmhogumian\",\tMISC,\tspe_evmhogumian)\n-BU_SPE_2 (EVMHOSMF,\t\"evmhosmf\",\tMISC,\tspe_evmhosmf)\n-BU_SPE_2 (EVMHOSMFA,\t\"evmhosmfa\",\tMISC,\tspe_evmhosmfa)\n-BU_SPE_2 (EVMHOSMFAAW,\t\"evmhosmfaaw\",\tMISC,\tspe_evmhosmfaaw)\n-BU_SPE_2 (EVMHOSMFANW,\t\"evmhosmfanw\",\tMISC,\tspe_evmhosmfanw)\n-BU_SPE_2 (EVMHOSMI,\t\"evmhosmi\",\tMISC,\tspe_evmhosmi)\n-BU_SPE_2 (EVMHOSMIA,\t\"evmhosmia\",\tMISC,\tspe_evmhosmia)\n-BU_SPE_2 (EVMHOSMIAAW,\t\"evmhosmiaaw\",\tMISC,\tspe_evmhosmiaaw)\n-BU_SPE_2 (EVMHOSMIANW,\t\"evmhosmianw\",\tMISC,\tspe_evmhosmianw)\n-BU_SPE_2 (EVMHOSSF,\t\"evmhossf\",\tMISC,\tspe_evmhossf)\n-BU_SPE_2 (EVMHOSSFA,\t\"evmhossfa\",\tMISC,\tspe_evmhossfa)\n-BU_SPE_2 (EVMHOSSFAAW,\t\"evmhossfaaw\",\tMISC,\tspe_evmhossfaaw)\n-BU_SPE_2 (EVMHOSSFANW,\t\"evmhossfanw\",\tMISC,\tspe_evmhossfanw)\n-BU_SPE_2 (EVMHOSSIAAW,\t\"evmhossiaaw\",\tMISC,\tspe_evmhossiaaw)\n-BU_SPE_2 (EVMHOSSIANW,\t\"evmhossianw\",\tMISC,\tspe_evmhossianw)\n-BU_SPE_2 (EVMHOUMI,\t\"evmhoumi\",\tMISC,\tspe_evmhoumi)\n-BU_SPE_2 (EVMHOUMIA,\t\"evmhoumia\",\tMISC,\tspe_evmhoumia)\n-BU_SPE_2 (EVMHOUMIAAW,\t\"evmhoumiaaw\",\tMISC,\tspe_evmhoumiaaw)\n-BU_SPE_2 (EVMHOUMIANW,\t\"evmhoumianw\",\tMISC,\tspe_evmhoumianw)\n-BU_SPE_2 (EVMHOUSIAAW,\t\"evmhousiaaw\",\tMISC,\tspe_evmhousiaaw)\n-BU_SPE_2 (EVMHOUSIANW,\t\"evmhousianw\",\tMISC,\tspe_evmhousianw)\n-BU_SPE_2 (EVMWHSMF,\t\"evmwhsmf\",\tMISC,\tspe_evmwhsmf)\n-BU_SPE_2 (EVMWHSMFA,\t\"evmwhsmfa\",\tMISC,\tspe_evmwhsmfa)\n-BU_SPE_2 (EVMWHSMI,\t\"evmwhsmi\",\tMISC,\tspe_evmwhsmi)\n-BU_SPE_2 (EVMWHSMIA,\t\"evmwhsmia\",\tMISC,\tspe_evmwhsmia)\n-BU_SPE_2 (EVMWHSSF,\t\"evmwhssf\",\tMISC,\tspe_evmwhssf)\n-BU_SPE_2 (EVMWHSSFA,\t\"evmwhssfa\",\tMISC,\tspe_evmwhssfa)\n-BU_SPE_2 (EVMWHUMI,\t\"evmwhumi\",\tMISC,\tspe_evmwhumi)\n-BU_SPE_2 (EVMWHUMIA,\t\"evmwhumia\",\tMISC,\tspe_evmwhumia)\n-BU_SPE_2 (EVMWLSMIAAW,\t\"evmwlsmiaaw\",\tMISC,\tspe_evmwlsmiaaw)\n-BU_SPE_2 (EVMWLSMIANW,\t\"evmwlsmianw\",\tMISC,\tspe_evmwlsmianw)\n-BU_SPE_2 (EVMWLSSIAAW,\t\"evmwlssiaaw\",\tMISC,\tspe_evmwlssiaaw)\n-BU_SPE_2 (EVMWLSSIANW,\t\"evmwlssianw\",\tMISC,\tspe_evmwlssianw)\n-BU_SPE_2 (EVMWLUMI,\t\"evmwlumi\",\tMISC,\tspe_evmwlumi)\n-BU_SPE_2 (EVMWLUMIA,\t\"evmwlumia\",\tMISC,\tspe_evmwlumia)\n-BU_SPE_2 (EVMWLUMIAAW,\t\"evmwlumiaaw\",\tMISC,\tspe_evmwlumiaaw)\n-BU_SPE_2 (EVMWLUMIANW,\t\"evmwlumianw\",\tMISC,\tspe_evmwlumianw)\n-BU_SPE_2 (EVMWLUSIAAW,\t\"evmwlusiaaw\",\tMISC,\tspe_evmwlusiaaw)\n-BU_SPE_2 (EVMWLUSIANW,\t\"evmwlusianw\",\tMISC,\tspe_evmwlusianw)\n-BU_SPE_2 (EVMWSMF,\t\"evmwsmf\",\tMISC,\tspe_evmwsmf)\n-BU_SPE_2 (EVMWSMFA,\t\"evmwsmfa\",\tMISC,\tspe_evmwsmfa)\n-BU_SPE_2 (EVMWSMFAA,\t\"evmwsmfaa\",\tMISC,\tspe_evmwsmfaa)\n-BU_SPE_2 (EVMWSMFAN,\t\"evmwsmfan\",\tMISC,\tspe_evmwsmfan)\n-BU_SPE_2 (EVMWSMI,\t\"evmwsmi\",\tMISC,\tspe_evmwsmi)\n-BU_SPE_2 (EVMWSMIA,\t\"evmwsmia\",\tMISC,\tspe_evmwsmia)\n-BU_SPE_2 (EVMWSMIAA,\t\"evmwsmiaa\",\tMISC,\tspe_evmwsmiaa)\n-BU_SPE_2 (EVMWSMIAN,\t\"evmwsmian\",\tMISC,\tspe_evmwsmian)\n-BU_SPE_2 (EVMWSSF,\t\"evmwssf\",\tMISC,\tspe_evmwssf)\n-BU_SPE_2 (EVMWSSFA,\t\"evmwssfa\",\tMISC,\tspe_evmwssfa)\n-BU_SPE_2 (EVMWSSFAA,\t\"evmwssfaa\",\tMISC,\tspe_evmwssfaa)\n-BU_SPE_2 (EVMWSSFAN,\t\"evmwssfan\",\tMISC,\tspe_evmwssfan)\n-BU_SPE_2 (EVMWUMI,\t\"evmwumi\",\tMISC,\tspe_evmwumi)\n-BU_SPE_2 (EVMWUMIA,\t\"evmwumia\",\tMISC,\tspe_evmwumia)\n-BU_SPE_2 (EVMWUMIAA,\t\"evmwumiaa\",\tMISC,\tspe_evmwumiaa)\n-BU_SPE_2 (EVMWUMIAN,\t\"evmwumian\",\tMISC,\tspe_evmwumian)\n-BU_SPE_2 (EVNAND,\t\"evnand\",\tMISC,\tspe_evnand)\n-BU_SPE_2 (EVNOR,\t\"evnor\",\tMISC,\tspe_evnor)\n-BU_SPE_2 (EVOR,\t\t\"evor\",\t\tMISC,\tspe_evor)\n-BU_SPE_2 (EVORC,\t\"evorc\",\tMISC,\tspe_evorc)\n-BU_SPE_2 (EVRLW,\t\"evrlw\",\tMISC,\tspe_evrlw)\n-BU_SPE_2 (EVSLW,\t\"evslw\",\tMISC,\tspe_evslw)\n-BU_SPE_2 (EVSRWS,\t\"evsrws\",\tMISC,\tspe_evsrws)\n-BU_SPE_2 (EVSRWU,\t\"evsrwu\",\tMISC,\tspe_evsrwu)\n-BU_SPE_2 (EVSUBFW,\t\"evsubfw\",\tMISC,\tsubv2si3)\n-\n-/* SPE binary operations expecting a 5-bit unsigned literal.  */\n-BU_SPE_2 (EVADDIW,\t\"evaddiw\",\tMISC,\tspe_evaddiw)\n-\n-BU_SPE_2 (EVRLWI,\t\"evrlwi\",\tMISC,\tspe_evrlwi)\n-BU_SPE_2 (EVSLWI,\t\"evslwi\",\tMISC,\tspe_evslwi)\n-BU_SPE_2 (EVSRWIS,\t\"evsrwis\",\tMISC,\tspe_evsrwis)\n-BU_SPE_2 (EVSRWIU,\t\"evsrwiu\",\tMISC,\tspe_evsrwiu)\n-BU_SPE_2 (EVSUBIFW,\t\"evsubifw\",\tMISC,\tspe_evsubifw)\n-BU_SPE_2 (EVMWHSSFAA,\t\"evmwhssfaa\",\tMISC,\tspe_evmwhssfaa)\n-BU_SPE_2 (EVMWHSSMAA,\t\"evmwhssmaa\",\tMISC,\tspe_evmwhssmaa)\n-BU_SPE_2 (EVMWHSMFAA,\t\"evmwhsmfaa\",\tMISC,\tspe_evmwhsmfaa)\n-BU_SPE_2 (EVMWHSMIAA,\t\"evmwhsmiaa\",\tMISC,\tspe_evmwhsmiaa)\n-BU_SPE_2 (EVMWHUSIAA,\t\"evmwhusiaa\",\tMISC,\tspe_evmwhusiaa)\n-BU_SPE_2 (EVMWHUMIAA,\t\"evmwhumiaa\",\tMISC,\tspe_evmwhumiaa)\n-BU_SPE_2 (EVMWHSSFAN,\t\"evmwhssfan\",\tMISC,\tspe_evmwhssfan)\n-BU_SPE_2 (EVMWHSSIAN,\t\"evmwhssian\",\tMISC,\tspe_evmwhssian)\n-BU_SPE_2 (EVMWHSMFAN,\t\"evmwhsmfan\",\tMISC,\tspe_evmwhsmfan)\n-BU_SPE_2 (EVMWHSMIAN,\t\"evmwhsmian\",\tMISC,\tspe_evmwhsmian)\n-BU_SPE_2 (EVMWHUSIAN,\t\"evmwhusian\",\tMISC,\tspe_evmwhusian)\n-BU_SPE_2 (EVMWHUMIAN,\t\"evmwhumian\",\tMISC,\tspe_evmwhumian)\n-BU_SPE_2 (EVMWHGSSFAA,\t\"evmwhgssfaa\",\tMISC,\tspe_evmwhgssfaa)\n-BU_SPE_2 (EVMWHGSMFAA,\t\"evmwhgsmfaa\",\tMISC,\tspe_evmwhgsmfaa)\n-BU_SPE_2 (EVMWHGSMIAA,\t\"evmwhgsmiaa\",\tMISC,\tspe_evmwhgsmiaa)\n-BU_SPE_2 (EVMWHGUMIAA,\t\"evmwhgumiaa\",\tMISC,\tspe_evmwhgumiaa)\n-BU_SPE_2 (EVMWHGSSFAN,\t\"evmwhgssfan\",\tMISC,\tspe_evmwhgssfan)\n-BU_SPE_2 (EVMWHGSMFAN,\t\"evmwhgsmfan\",\tMISC,\tspe_evmwhgsmfan)\n-BU_SPE_2 (EVMWHGSMIAN,\t\"evmwhgsmian\",\tMISC,\tspe_evmwhgsmian)\n-BU_SPE_2 (EVMWHGUMIAN,\t\"evmwhgumian\",\tMISC,\tspe_evmwhgumian)\n-BU_SPE_2 (BRINC,\t\"brinc\",\tMISC,\tspe_brinc)\n-BU_SPE_2 (EVXOR,\t\"evxor\",\tMISC,\txorv2si3)\n-\n-/* SPE predicate builtins.  */\n-BU_SPE_P (EVCMPEQ,\t\"evcmpeq\",\tMISC,\tspe_evcmpeq)\n-BU_SPE_P (EVCMPGTS,\t\"evcmpgts\",\tMISC,\tspe_evcmpgts)\n-BU_SPE_P (EVCMPGTU,\t\"evcmpgtu\",\tMISC,\tspe_evcmpgtu)\n-BU_SPE_P (EVCMPLTS,\t\"evcmplts\",\tMISC,\tspe_evcmplts)\n-BU_SPE_P (EVCMPLTU,\t\"evcmpltu\",\tMISC,\tspe_evcmpltu)\n-BU_SPE_P (EVFSCMPEQ,\t\"evfscmpeq\",\tMISC,\tspe_evfscmpeq)\n-BU_SPE_P (EVFSCMPGT,\t\"evfscmpgt\",\tMISC,\tspe_evfscmpgt)\n-BU_SPE_P (EVFSCMPLT,\t\"evfscmplt\",\tMISC,\tspe_evfscmplt)\n-BU_SPE_P (EVFSTSTEQ,\t\"evfststeq\",\tMISC,\tspe_evfststeq)\n-BU_SPE_P (EVFSTSTGT,\t\"evfststgt\",\tMISC,\tspe_evfststgt)\n-BU_SPE_P (EVFSTSTLT,\t\"evfststlt\",\tMISC,\tspe_evfststlt)\n-\n-/* SPE evsel builtins.  */\n-BU_SPE_E (EVSEL_CMPGTS,\t \"evsel_gts\",\t  MISC,\tspe_evcmpgts)\n-BU_SPE_E (EVSEL_CMPGTU,\t \"evsel_gtu\",\t  MISC,\tspe_evcmpgtu)\n-BU_SPE_E (EVSEL_CMPLTS,\t \"evsel_lts\",\t  MISC,\tspe_evcmplts)\n-BU_SPE_E (EVSEL_CMPLTU,\t \"evsel_ltu\",\t  MISC,\tspe_evcmpltu)\n-BU_SPE_E (EVSEL_CMPEQ,\t \"evsel_eq\",\t  MISC,\tspe_evcmpeq)\n-BU_SPE_E (EVSEL_FSCMPGT, \"evsel_fsgt\",\t  MISC,\tspe_evfscmpgt)\n-BU_SPE_E (EVSEL_FSCMPLT, \"evsel_fslt\",\t  MISC,\tspe_evfscmplt)\n-BU_SPE_E (EVSEL_FSCMPEQ, \"evsel_fseq\",\t  MISC,\tspe_evfscmpeq)\n-BU_SPE_E (EVSEL_FSTSTGT, \"evsel_fststgt\", MISC,\tspe_evfststgt)\n-BU_SPE_E (EVSEL_FSTSTLT, \"evsel_fststlt\", MISC,\tspe_evfststlt)\n-BU_SPE_E (EVSEL_FSTSTEQ, \"evsel_fststeq\", MISC,\tspe_evfststeq)\n-\n-BU_SPE_1 (EVABS,\t\"evabs\",\tCONST,\tabsv2si2)\n-BU_SPE_1 (EVADDSMIAAW,\t\"evaddsmiaaw\",\tCONST,\tspe_evaddsmiaaw)\n-BU_SPE_1 (EVADDSSIAAW,\t\"evaddssiaaw\",\tCONST,\tspe_evaddssiaaw)\n-BU_SPE_1 (EVADDUMIAAW,\t\"evaddumiaaw\",\tCONST,\tspe_evaddumiaaw)\n-BU_SPE_1 (EVADDUSIAAW,\t\"evaddusiaaw\",\tCONST,\tspe_evaddusiaaw)\n-BU_SPE_1 (EVCNTLSW,\t\"evcntlsw\",\tCONST,\tspe_evcntlsw)\n-BU_SPE_1 (EVCNTLZW,\t\"evcntlzw\",\tCONST,\tspe_evcntlzw)\n-BU_SPE_1 (EVEXTSB,\t\"evextsb\",\tCONST,\tspe_evextsb)\n-BU_SPE_1 (EVEXTSH,\t\"evextsh\",\tCONST,\tspe_evextsh)\n-BU_SPE_1 (EVFSABS,\t\"evfsabs\",\tCONST,\tspe_evfsabs)\n-BU_SPE_1 (EVFSCFSF,\t\"evfscfsf\",\tCONST,\tspe_evfscfsf)\n-BU_SPE_1 (EVFSCFSI,\t\"evfscfsi\",\tCONST,\tspe_evfscfsi)\n-BU_SPE_1 (EVFSCFUF,\t\"evfscfuf\",\tCONST,\tspe_evfscfuf)\n-BU_SPE_1 (EVFSCFUI,\t\"evfscfui\",\tCONST,\tspe_evfscfui)\n-BU_SPE_1 (EVFSCTSF,\t\"evfsctsf\",\tCONST,\tspe_evfsctsf)\n-BU_SPE_1 (EVFSCTSI,\t\"evfsctsi\",\tCONST,\tspe_evfsctsi)\n-BU_SPE_1 (EVFSCTSIZ,\t\"evfsctsiz\",\tCONST,\tspe_evfsctsiz)\n-BU_SPE_1 (EVFSCTUF,\t\"evfsctuf\",\tCONST,\tspe_evfsctuf)\n-BU_SPE_1 (EVFSCTUI,\t\"evfsctui\",\tCONST,\tspe_evfsctui)\n-BU_SPE_1 (EVFSCTUIZ,\t\"evfsctuiz\",\tCONST,\tspe_evfsctuiz)\n-BU_SPE_1 (EVFSNABS,\t\"evfsnabs\",\tCONST,\tspe_evfsnabs)\n-BU_SPE_1 (EVFSNEG,\t\"evfsneg\",\tCONST,\tspe_evfsneg)\n-BU_SPE_1 (EVMRA,\t\"evmra\",\tCONST,\tspe_evmra)\n-BU_SPE_1 (EVNEG,\t\"evneg\",\tCONST,\tnegv2si2)\n-BU_SPE_1 (EVRNDW,\t\"evrndw\",\tCONST,\tspe_evrndw)\n-BU_SPE_1 (EVSUBFSMIAAW,\t\"evsubfsmiaaw\",\tCONST,\tspe_evsubfsmiaaw)\n-BU_SPE_1 (EVSUBFSSIAAW,\t\"evsubfssiaaw\",\tCONST,\tspe_evsubfssiaaw)\n-BU_SPE_1 (EVSUBFUMIAAW,\t\"evsubfumiaaw\",\tCONST,\tspe_evsubfumiaaw)\n-BU_SPE_1 (EVSUBFUSIAAW,\t\"evsubfusiaaw\",\tCONST,\tspe_evsubfusiaaw)\n-\n-/* SPE builtins that are handled as special cases.  */\n-BU_SPE_X (EVLDD,\t      \"evldd\",\t\tMISC)\n-BU_SPE_X (EVLDDX,\t      \"evlddx\",\t\tMISC)\n-BU_SPE_X (EVLDH,\t      \"evldh\",\t\tMISC)\n-BU_SPE_X (EVLDHX,\t      \"evldhx\",\t\tMISC)\n-BU_SPE_X (EVLDW,\t      \"evldw\",\t\tMISC)\n-BU_SPE_X (EVLDWX,\t      \"evldwx\",\t\tMISC)\n-BU_SPE_X (EVLHHESPLAT,\t      \"evlhhesplat\",\tMISC)\n-BU_SPE_X (EVLHHESPLATX,\t      \"evlhhesplatx\",\tMISC)\n-BU_SPE_X (EVLHHOSSPLAT,\t      \"evlhhossplat\",\tMISC)\n-BU_SPE_X (EVLHHOSSPLATX,      \"evlhhossplatx\",\tMISC)\n-BU_SPE_X (EVLHHOUSPLAT,\t      \"evlhhousplat\",\tMISC)\n-BU_SPE_X (EVLHHOUSPLATX,      \"evlhhousplatx\",\tMISC)\n-BU_SPE_X (EVLWHE,\t      \"evlwhe\",\t\tMISC)\n-BU_SPE_X (EVLWHEX,\t      \"evlwhex\",\tMISC)\n-BU_SPE_X (EVLWHOS,\t      \"evlwhos\",\tMISC)\n-BU_SPE_X (EVLWHOSX,\t      \"evlwhosx\",\tMISC)\n-BU_SPE_X (EVLWHOU,\t      \"evlwhou\",\tMISC)\n-BU_SPE_X (EVLWHOUX,\t      \"evlwhoux\",\tMISC)\n-BU_SPE_X (EVLWHSPLAT,\t      \"evlwhsplat\",\tMISC)\n-BU_SPE_X (EVLWHSPLATX,\t      \"evlwhsplatx\",\tMISC)\n-BU_SPE_X (EVLWWSPLAT,\t      \"evlwwsplat\",\tMISC)\n-BU_SPE_X (EVLWWSPLATX,\t      \"evlwwsplatx\",\tMISC)\n-BU_SPE_X (EVSPLATFI,\t      \"evsplatfi\",\tMISC)\n-BU_SPE_X (EVSPLATI,\t      \"evsplati\",\tMISC)\n-BU_SPE_X (EVSTDD,\t      \"evstdd\",\t\tMISC)\n-BU_SPE_X (EVSTDDX,\t      \"evstddx\",\tMISC)\n-BU_SPE_X (EVSTDH,\t      \"evstdh\",\t\tMISC)\n-BU_SPE_X (EVSTDHX,\t      \"evstdhx\",\tMISC)\n-BU_SPE_X (EVSTDW,\t      \"evstdw\",\t\tMISC)\n-BU_SPE_X (EVSTDWX,\t      \"evstdwx\",\tMISC)\n-BU_SPE_X (EVSTWHE,\t      \"evstwhe\",\tMISC)\n-BU_SPE_X (EVSTWHEX,\t      \"evstwhex\",\tMISC)\n-BU_SPE_X (EVSTWHO,\t      \"evstwho\",\tMISC)\n-BU_SPE_X (EVSTWHOX,\t      \"evstwhox\",\tMISC)\n-BU_SPE_X (EVSTWWE,\t      \"evstwwe\",\tMISC)\n-BU_SPE_X (EVSTWWEX,\t      \"evstwwex\",\tMISC)\n-BU_SPE_X (EVSTWWO,\t      \"evstwwo\",\tMISC)\n-BU_SPE_X (EVSTWWOX,\t      \"evstwwox\",\tMISC)\n-BU_SPE_X (MFSPEFSCR,\t      \"mfspefscr\",\tMISC)\n-BU_SPE_X (MTSPEFSCR,\t      \"mtspefscr\",\tMISC)\n-\n \f\n /* Power7 builtins, that aren't VSX instructions.  */\n BU_SPECIAL_X (POWER7_BUILTIN_BPERMD, \"__builtin_bpermd\", RS6000_BTM_POPCNTD,"}, {"sha": "230c2b4d3114cf2ffcfb42eca8beae2a8e96210f", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -611,10 +611,6 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"__UPPER_REGS_SF__\");\n \n   /* options from the builtin masks.  */\n-  /* Note that RS6000_BTM_SPE is enabled only if TARGET_SPE\n-     (e.g. -mspe).  */\n-  if ((bu_mask & RS6000_BTM_SPE) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"__SPE__\");\n   /* Note that RS6000_BTM_PAIRED is enabled only if\n      TARGET_PAIRED_FLOAT is enabled (e.g. -mpaired).  */\n   if ((bu_mask & RS6000_BTM_PAIRED) != 0)"}, {"sha": "8a231f5166c7045f02f84534697f36590edaaf75", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -41,7 +41,6 @@ extern int small_data_operand (rtx, machine_mode);\n extern bool mem_operand_gpr (rtx, machine_mode);\n extern bool mem_operand_ds_form (rtx, machine_mode);\n extern bool toc_relative_expr_p (const_rtx, bool);\n-extern bool invalid_e500_subreg (rtx, machine_mode);\n extern void validate_condition_mode (enum rtx_code, machine_mode);\n extern bool legitimate_constant_pool_address_p (const_rtx, machine_mode,\n \t\t\t\t\t\tbool);"}, {"sha": "ac5e2de5398b1916135198d4b91ac0467cc808bc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 45, "deletions": 1372, "changes": 1417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -108,7 +108,6 @@ typedef struct rs6000_stack {\n   int lr_save_offset;\t\t/* offset to save LR from initial SP */\n   int cr_save_offset;\t\t/* offset to save CR from initial SP */\n   int vrsave_save_offset;\t/* offset to save VRSAVE from initial SP */\n-  int spe_gp_save_offset;\t/* offset to save spe 64-bit gprs  */\n   int varargs_save_offset;\t/* offset to save the varargs registers */\n   int ehrd_offset;\t\t/* offset to EH return data */\n   int ehcr_offset;\t\t/* offset to EH CR field data */\n@@ -123,19 +122,14 @@ typedef struct rs6000_stack {\n   int cr_size;\t\t\t/* size to hold CR if not in fixed area */\n   int vrsave_size;\t\t/* size to hold VRSAVE */\n   int altivec_padding_size;\t/* size of altivec alignment padding */\n-  int spe_gp_size;\t\t/* size of 64-bit GPR save size for SPE */\n-  int spe_padding_size;\n   HOST_WIDE_INT total_size;\t/* total bytes allocated for stack */\n-  int spe_64bit_regs_used;\n   int savres_strategy;\n } rs6000_stack_t;\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n typedef struct GTY(()) machine_function\n {\n-  /* Whether the instruction chain has been scanned already.  */\n-  int spe_insn_chain_scanned_p;\n   /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n   int ra_needs_full_frame;\n   /* Flags if __builtin_return_address (0) was used.  */\n@@ -1278,11 +1272,9 @@ struct processor_costs ppca2_cost = {\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE) \\\n@@ -1303,9 +1295,6 @@ struct processor_costs ppca2_cost = {\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)  \\\n   { NAME, ICODE, MASK, ATTR },\n \n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)  \\\n-  { NAME, ICODE, MASK, ATTR },\n-\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)  \\\n   { NAME, ICODE, MASK, ATTR },\n \n@@ -1315,9 +1304,6 @@ struct processor_costs ppca2_cost = {\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)  \\\n   { NAME, ICODE, MASK, ATTR },\n \n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)  \\\n-  { NAME, ICODE, MASK, ATTR },\n-\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)  \\\n   { NAME, ICODE, MASK, ATTR },\n \n@@ -1339,19 +1325,16 @@ static const struct rs6000_builtin_info_type rs6000_builtin_info[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n /* Support for -mveclibabi=<xxx> to control which vector library to use.  */\n static tree (*rs6000_veclib_handler) (combined_fn, tree, tree);\n \n \f\n static bool rs6000_debug_legitimate_address_p (machine_mode, rtx, bool);\n-static bool spe_func_has_64bit_regs_p (void);\n static struct machine_function * rs6000_init_machine_status (void);\n static int rs6000_ra_ever_killed (void);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n@@ -1381,10 +1364,7 @@ static tree builtin_function_type (machine_mode, machine_mode,\n static void rs6000_common_init_builtins (void);\n static void paired_init_builtins (void);\n static rtx paired_expand_predicate_builtin (enum insn_code, tree, rtx);\n-static void spe_init_builtins (void);\n static void htm_init_builtins (void);\n-static rtx spe_expand_predicate_builtin (enum insn_code, tree, rtx);\n-static rtx spe_expand_evsel_builtin (enum insn_code, tree, rtx);\n static int rs6000_emit_int_cmove (rtx, rtx, rtx, rtx);\n static rs6000_stack_t *rs6000_stack_info (void);\n static void is_altivec_return_reg (rtx, void *);\n@@ -1799,15 +1779,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n-#undef TARGET_DWARF_REGISTER_SPAN\n-#define TARGET_DWARF_REGISTER_SPAN rs6000_dwarf_register_span\n-\n #undef TARGET_INIT_DWARF_REG_SIZES_EXTRA\n #define TARGET_INIT_DWARF_REG_SIZES_EXTRA rs6000_init_dwarf_reg_sizes_extra\n \n-#undef TARGET_MEMBER_TYPE_FORCES_BLK\n-#define TARGET_MEMBER_TYPE_FORCES_BLK rs6000_member_type_forces_blk\n-\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE rs6000_promote_function_mode\n \n@@ -2076,9 +2050,6 @@ rs6000_hard_regno_nregs_internal (int regno, machine_mode mode)\n \t\t? UNITS_PER_VSX_WORD\n \t\t: UNITS_PER_FP_WORD);\n \n-  else if (SPE_SIMD_REGNO_P (regno) && TARGET_SPE && SPE_VECTOR_MODE (mode))\n-    reg_size = UNITS_PER_SPE_WORD;\n-\n   else if (ALTIVEC_REGNO_P (regno))\n     reg_size = UNITS_PER_ALTIVEC_WORD;\n \n@@ -2181,10 +2152,6 @@ rs6000_hard_regno_mode_ok (int regno, machine_mode mode)\n     return (VECTOR_MEM_ALTIVEC_OR_VSX_P (mode)\n \t    || mode == V1TImode);\n \n-  /* ...but GPRs can hold SIMD data on the SPE in one register.  */\n-  if (SPE_SIMD_REGNO_P (regno) && TARGET_SPE && SPE_VECTOR_MODE (mode))\n-    return 1;\n-\n   /* We cannot put non-VSX TImode or PTImode anywhere except general register\n      and it must be able to fit within the register set.  */\n \n@@ -2835,9 +2802,6 @@ rs6000_debug_reg_global (void)\n   if (rs6000_altivec_abi)\n     fprintf (stderr, DEBUG_FMT_S, \"altivec_abi\", \"true\");\n \n-  if (rs6000_spe_abi)\n-    fprintf (stderr, DEBUG_FMT_S, \"spe_abi\", \"true\");\n-\n   if (rs6000_darwin64_abi)\n     fprintf (stderr, DEBUG_FMT_S, \"darwin64_abi\", \"true\");\n \n@@ -3897,7 +3861,6 @@ rs6000_builtin_mask_calculate (void)\n   return (((TARGET_ALTIVEC)\t\t    ? RS6000_BTM_ALTIVEC   : 0)\n \t  | ((TARGET_CMPB)\t\t    ? RS6000_BTM_CMPB\t   : 0)\n \t  | ((TARGET_VSX)\t\t    ? RS6000_BTM_VSX\t   : 0)\n-\t  | ((TARGET_SPE)\t\t    ? RS6000_BTM_SPE\t   : 0)\n \t  | ((TARGET_PAIRED_FLOAT)\t    ? RS6000_BTM_PAIRED\t   : 0)\n \t  | ((TARGET_FRE)\t\t    ? RS6000_BTM_FRE\t   : 0)\n \t  | ((TARGET_FRES)\t\t    ? RS6000_BTM_FRES\t   : 0)\n@@ -4234,26 +4197,15 @@ rs6000_option_override_internal (bool global_init_p)\n       (rs6000_cpu == PROCESSOR_PPC8540\n        || rs6000_cpu == PROCESSOR_PPC8548);\n \n-    if (!global_options_set.x_rs6000_spe_abi)\n-      rs6000_spe_abi = spe_capable_cpu;\n-\n     if (!global_options_set.x_rs6000_spe)\n       rs6000_spe = spe_capable_cpu;\n   }\n \n-  if (global_options_set.x_rs6000_spe_abi\n-      && rs6000_spe_abi\n-      && !TARGET_SPE_ABI)\n-    error (\"not configured for SPE ABI\");\n-\n-  if (global_options_set.x_rs6000_spe\n-      && rs6000_spe\n-      && !TARGET_SPE)\n+  if (global_options_set.x_rs6000_spe && rs6000_spe)\n     error (\"not configured for SPE instruction set\");\n \n   if (main_target_opt != NULL\n-      && ((main_target_opt->x_rs6000_spe_abi != rs6000_spe_abi)\n-          || (main_target_opt->x_rs6000_spe != rs6000_spe)))\n+      && main_target_opt->x_rs6000_spe != rs6000_spe)\n     error (\"target attribute or pragma changes SPE ABI\");\n \n   if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3\n@@ -4262,13 +4214,6 @@ rs6000_option_override_internal (bool global_init_p)\n     {\n       if (TARGET_ALTIVEC)\n \terror (\"AltiVec not supported in this target\");\n-      if (TARGET_SPE)\n-\terror (\"SPE not supported in this target\");\n-    }\n-  if (rs6000_cpu == PROCESSOR_PPCE6500)\n-    {\n-      if (TARGET_SPE)\n-\terror (\"SPE not supported in this target\");\n     }\n \n   /* If we are optimizing big endian systems for space, use the load/store\n@@ -5902,15 +5847,6 @@ rs6000_preferred_simd_mode (machine_mode mode)\n \treturn V16QImode;\n       default:;\n       }\n-  if (TARGET_SPE)\n-    switch (mode)\n-      {\n-      case SFmode:\n-\treturn V2SFmode;\n-      case SImode:\n-\treturn V2SImode;\n-      default:;\n-      }\n   if (TARGET_PAIRED_FLOAT\n       && mode == SFmode)\n     return V2SFmode;\n@@ -7015,7 +6951,7 @@ xxspltib_constant_p (rtx op,\n const char *\n output_vec_const_move (rtx *operands)\n {\n-  int cst, cst2, shift;\n+  int shift;\n   machine_mode mode;\n   rtx dest, vec;\n \n@@ -7107,23 +7043,7 @@ output_vec_const_move (rtx *operands)\n \t}\n     }\n \n-  gcc_assert (TARGET_SPE);\n-\n-  /* Vector constant 0 is handled as a splitter of V2SI, and in the\n-     pattern of V1DI, V4HI, and V2SF.\n-\n-     FIXME: We should probably return # and add post reload\n-     splitters for these, but this way is so easy ;-).  */\n-  cst = INTVAL (CONST_VECTOR_ELT (vec, 0));\n-  cst2 = INTVAL (CONST_VECTOR_ELT (vec, 1));\n-  operands[1] = CONST_VECTOR_ELT (vec, 0);\n-  operands[2] = CONST_VECTOR_ELT (vec, 1);\n-  if (cst == cst2)\n-    return \"li %0,%1\\n\\tevmergelo %0,%0,%0\";\n-  else if (WORDS_BIG_ENDIAN)\n-    return \"li %0,%1\\n\\tevmergelo %0,%0,%0\\n\\tli %0,%2\";\n-  else\n-    return \"li %0,%2\\n\\tevmergelo %0,%0,%0\\n\\tli %0,%1\";\n+  gcc_unreachable ();\n }\n \n /* Initialize TARGET of vector PAIRED to VALS.  */\n@@ -8195,21 +8115,6 @@ rs6000_split_v4si_init (rtx operands[])\n     gcc_unreachable ();\n }\n \n-/* Return TRUE if OP is an invalid SUBREG operation on the e500.  */\n-\n-bool\n-invalid_e500_subreg (rtx op, machine_mode mode)\n-{\n-  if (TARGET_SPE\n-      && GET_CODE (op) == SUBREG\n-      && mode == SImode\n-      && REG_P (SUBREG_REG (op))\n-      && SPE_VECTOR_MODE (GET_MODE (SUBREG_REG (op))))\n-    return true;\n-\n-  return false;\n-}\n-\n /* Return alignment of TYPE.  Existing alignment is ALIGN.  HOW\n    selects whether the alignment is abi mandated, optional, or\n    both abi and optional alignment.  */\n@@ -8221,8 +8126,7 @@ rs6000_data_alignment (tree type, unsigned int align, enum data_align how)\n     {\n       if (TREE_CODE (type) == VECTOR_TYPE)\n \t{\n-\t  if ((TARGET_SPE && SPE_VECTOR_MODE (TYPE_MODE (type)))\n-\t      || (TARGET_PAIRED_FLOAT && PAIRED_VECTOR_MODE (TYPE_MODE (type))))\n+\t  if (TARGET_PAIRED_FLOAT && PAIRED_VECTOR_MODE (TYPE_MODE (type)))\n \t    {\n \t      if (align < 64)\n \t\talign = 64;\n@@ -8347,13 +8251,6 @@ small_data_operand (rtx op ATTRIBUTE_UNUSED,\n   if (DEFAULT_ABI != ABI_V4)\n     return 0;\n \n-  /* Vector and float memory instructions have a limited offset on the\n-     SPE, so using a vector or float variable directly as an operand is\n-     not useful.  */\n-  if (TARGET_SPE\n-      && (SPE_VECTOR_MODE (mode) || FLOAT_MODE_P (mode)))\n-    return 0;\n-\n   if (GET_CODE (op) == SYMBOL_REF)\n     sym_ref = op;\n \n@@ -9106,7 +9003,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       && GET_CODE (XEXP (x, 1)) == CONST_INT\n       && ((unsigned HOST_WIDE_INT) (INTVAL (XEXP (x, 1)) + 0x8000)\n \t  >= 0x10000 - extra)\n-      && !SPE_VECTOR_MODE (mode))\n+      && !PAIRED_VECTOR_MODE (mode))\n     {\n       HOST_WIDE_INT high_int, low_int;\n       rtx sum;\n@@ -9131,11 +9028,11 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       return gen_rtx_PLUS (Pmode, XEXP (x, 0),\n \t\t\t   force_reg (Pmode, force_operand (XEXP (x, 1), 0)));\n     }\n-  else if (SPE_VECTOR_MODE (mode))\n+  else if (PAIRED_VECTOR_MODE (mode))\n     {\n       if (mode == DImode)\n \treturn x;\n-      /* We accept [reg + reg] and [reg + OFFSET].  */\n+      /* We accept [reg + reg].  */\n \n       if (GET_CODE (x) == PLUS)\n        {\n@@ -9144,13 +9041,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n          rtx y;\n \n          op1 = force_reg (Pmode, op1);\n-\n-         if (GET_CODE (op2) != REG\n-             && (GET_CODE (op2) != CONST_INT\n-                 || !SPE_CONST_OFFSET_OK (INTVAL (op2))\n-                 || (GET_MODE_SIZE (mode) > 8\n-                     && !SPE_CONST_OFFSET_OK (INTVAL (op2) + 8))))\n-           op2 = force_reg (Pmode, op2);\n+         op2 = force_reg (Pmode, op2);\n \n          /* We can't always do [reg + reg] for these, because [reg +\n             reg + offset] is not a legitimate addressing mode.  */\n@@ -9894,7 +9785,7 @@ rs6000_legitimize_reload_address (rtx x, machine_mode mode,\n       && INT_REG_OK_FOR_BASE_P (XEXP (x, 0), 1)\n       && CONST_INT_P (XEXP (x, 1))\n       && reg_offset_p\n-      && !SPE_VECTOR_MODE (mode)\n+      && !PAIRED_VECTOR_MODE (mode)\n       && (quad_offset_p || !VECTOR_MODE_P (mode) || VECTOR_MEM_NONE_P (mode)))\n     {\n       HOST_WIDE_INT val = INTVAL (XEXP (x, 1));\n@@ -9935,7 +9826,7 @@ rs6000_legitimize_reload_address (rtx x, machine_mode mode,\n       && reg_offset_p\n       && !quad_offset_p\n       && (!VECTOR_MODE_P (mode) || VECTOR_MEM_NONE_P (mode))\n-      && !SPE_VECTOR_MODE (mode)\n+      && !PAIRED_VECTOR_MODE (mode)\n #if TARGET_MACHO\n       && DEFAULT_ABI == ABI_DARWIN\n       && (flag_pic || MACHO_DYNAMIC_NO_PIC_P)\n@@ -10409,20 +10300,6 @@ rs6000_conditional_register_usage (void)\n     fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n       = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n \n-  if (TARGET_SPE)\n-    {\n-      global_regs[SPEFSCR_REGNO] = 1;\n-      /* We used to use r14 as FIXED_SCRATCH to address SPE 64-bit\n-         registers in prologues and epilogues.  We no longer use r14\n-         for FIXED_SCRATCH, but we're keeping r14 out of the allocation\n-         pool for link-compatibility with older versions of GCC.  Once\n-         \"old\" code has died out, we can return r14 to the allocation\n-         pool.  */\n-      fixed_regs[14]\n-\t= call_used_regs[14]\n-\t= call_really_used_regs[14] = 1;\n-    }\n-\n   if (!TARGET_ALTIVEC && !TARGET_VSX)\n     {\n       for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\n@@ -11326,25 +11203,6 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n  emit_set:\n   emit_insn (gen_rtx_SET (operands[0], operands[1]));\n }\n-\n-/* Return true if a structure, union or array containing FIELD should be\n-   accessed using `BLKMODE'.\n-\n-   For the SPE, simd types are V2SI, and gcc can be tempted to put the\n-   entire thing in a DI and use subregs to access the internals.\n-   store_bit_field() will force (subreg:DI (reg:V2SI x))'s to the\n-   back-end.  Because a single GPR can hold a V2SI, but not a DI, the\n-   best thing to do is set structs to BLKmode and avoid Severe Tire\n-   Damage.\n-\n-   On e500 v2, DF and DI modes suffer from the same anomaly.  DF can\n-   fit into 1, whereas DI still needs two.  */\n-\n-static bool\n-rs6000_member_type_forces_blk (const_tree field, machine_mode)\n-{\n-  return (TARGET_SPE && TREE_CODE (TREE_TYPE (field)) == VECTOR_TYPE);\n-}\n \f\n /* Nonzero if we can use a floating-point register to pass this arg.  */\n #define USE_FP_FOR_ARG_P(CUM,MODE)\t\t\\\n@@ -11803,7 +11661,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t\trs6000_passes_long_double = true;\n \t    }\n \t  if (ALTIVEC_OR_VSX_VECTOR_MODE (return_mode)\n-\t      || SPE_VECTOR_MODE (return_mode))\n+\t      || PAIRED_VECTOR_MODE (return_mode))\n \t    rs6000_passes_vector = true;\n \t}\n     }\n@@ -11981,7 +11839,7 @@ rs6000_function_arg_boundary (machine_mode mode, const_tree type)\n     return 64;\n   else if (FLOAT128_VECTOR_P (mode))\n     return 128;\n-  else if (SPE_VECTOR_MODE (mode)\n+  else if (PAIRED_VECTOR_MODE (mode)\n \t   || (type && TREE_CODE (type) == VECTOR_TYPE\n \t       && int_size_in_bytes (type) >= 8\n \t       && int_size_in_bytes (type) < 16))\n@@ -12263,7 +12121,7 @@ rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \t    rs6000_passes_long_double = true;\n \t}\n       if ((named && ALTIVEC_OR_VSX_VECTOR_MODE (mode))\n-\t  || (SPE_VECTOR_MODE (mode)\n+\t  || (PAIRED_VECTOR_MODE (mode)\n \t      && !cum->stdarg\n \t      && cum->sysv_gregno <= GP_ARG_MAX_REG))\n \trs6000_passes_vector = true;\n@@ -12322,11 +12180,6 @@ rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \t    }\n \t}\n     }\n-  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode)\n-\t   && !cum->stdarg\n-\t   && cum->sysv_gregno <= GP_ARG_MAX_REG)\n-    cum->sysv_gregno++;\n-\n   else if (TARGET_MACHO && rs6000_darwin64_struct_check_p (mode, type))\n     {\n       int size = int_size_in_bytes (type);\n@@ -12458,44 +12311,6 @@ rs6000_function_arg_advance (cumulative_args_t cum, machine_mode mode,\n \t\t\t\t 0);\n }\n \n-/* Determine where to put a SIMD argument on the SPE.  */\n-static rtx\n-rs6000_spe_function_arg (const CUMULATIVE_ARGS *cum, machine_mode mode,\n-\t\t\t const_tree type)\n-{\n-  int gregno = cum->sysv_gregno;\n-\n-  if (cum->stdarg)\n-    {\n-      int n_words = rs6000_arg_size (mode, type);\n-\n-      /* SPE vectors are put in odd registers.  */\n-      if (n_words == 2 && (gregno & 1) == 0)\n-\tgregno += 1;\n-\n-      if (gregno + n_words - 1 <= GP_ARG_MAX_REG)\n-\t{\n-\t  rtx r1, r2;\n-\t  machine_mode m = SImode;\n-\n-\t  r1 = gen_rtx_REG (m, gregno);\n-\t  r1 = gen_rtx_EXPR_LIST (m, r1, const0_rtx);\n-\t  r2 = gen_rtx_REG (m, gregno + 1);\n-\t  r2 = gen_rtx_EXPR_LIST (m, r2, GEN_INT (4));\n-\t  return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n-\t}\n-      else\n-\treturn NULL_RTX;\n-    }\n-  else\n-    {\n-      if (gregno <= GP_ARG_MAX_REG)\n-\treturn gen_rtx_REG (mode, gregno);\n-      else\n-\treturn NULL_RTX;\n-    }\n-}\n-\n /* A subroutine of rs6000_darwin64_record_arg.  Assign the bits of the\n    structure between cum->intoffset and bitpos to integer registers.  */\n \n@@ -12862,17 +12677,12 @@ rs6000_function_arg (cumulative_args_t cum_v, machine_mode mode,\n \t  && (cum->call_cookie & CALL_LIBCALL) == 0\n \t  && (cum->stdarg\n \t      || (cum->nargs_prototype < 0\n-\t\t  && (cum->prototype || TARGET_NO_PROTOTYPE))))\n-\t{\n-\t  /* For the SPE, we need to crxor CR6 always.  */\n-\t  if (TARGET_SPE_ABI)\n-\t    return GEN_INT (cum->call_cookie | CALL_V4_SET_FP_ARGS);\n-\t  else if (TARGET_HARD_FLOAT)\n-\t    return GEN_INT (cum->call_cookie\n-\t\t\t    | ((cum->fregno == FP_ARG_MIN_REG)\n-\t\t\t       ? CALL_V4_SET_FP_ARGS\n-\t\t\t       : CALL_V4_CLEAR_FP_ARGS));\n-\t}\n+\t\t  && (cum->prototype || TARGET_NO_PROTOTYPE)))\n+\t  && TARGET_HARD_FLOAT)\n+\treturn GEN_INT (cum->call_cookie\n+\t\t\t| ((cum->fregno == FP_ARG_MIN_REG)\n+\t\t\t   ? CALL_V4_SET_FP_ARGS\n+\t\t\t   : CALL_V4_CLEAR_FP_ARGS));\n \n       return GEN_INT (cum->call_cookie & ~CALL_LIBCALL);\n     }\n@@ -12957,8 +12767,6 @@ rs6000_function_arg (cumulative_args_t cum_v, machine_mode mode,\n \t  return gen_rtx_REG (part_mode, GP_ARG_MIN_REG + align_words);\n \t}\n     }\n-  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))\n-    return rs6000_spe_function_arg (cum, mode, type);\n \n   else if (abi == ABI_V4)\n     {\n@@ -14100,11 +13908,9 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14115,11 +13921,9 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n \n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_3arg[] =\n@@ -14135,11 +13939,9 @@ static const struct builtin_description bdesc_3arg[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14150,11 +13952,9 @@ static const struct builtin_description bdesc_3arg[] =\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n \n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_dst[] =\n@@ -14170,11 +13970,9 @@ static const struct builtin_description bdesc_dst[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14185,11 +13983,9 @@ static const struct builtin_description bdesc_dst[] =\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_2arg[] =\n@@ -14203,11 +13999,9 @@ static const struct builtin_description bdesc_2arg[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14216,13 +14010,11 @@ static const struct builtin_description bdesc_2arg[] =\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n \n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n /* AltiVec predicates.  */\n@@ -14232,86 +14024,16 @@ static const struct builtin_description bdesc_altivec_preds[] =\n #include \"rs6000-builtin.def\"\n };\n \n-/* SPE predicates.  */\n-#undef RS6000_BUILTIN_0\n-#undef RS6000_BUILTIN_1\n-#undef RS6000_BUILTIN_2\n-#undef RS6000_BUILTIN_3\n-#undef RS6000_BUILTIN_A\n-#undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n-#undef RS6000_BUILTIN_H\n-#undef RS6000_BUILTIN_P\n-#undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n-#undef RS6000_BUILTIN_X\n-\n-#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE) \\\n-  { MASK, ICODE, NAME, ENUM },\n-\n-#define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n-\n-static const struct builtin_description bdesc_spe_predicates[] =\n-{\n-#include \"rs6000-builtin.def\"\n-};\n-\n-/* SPE evsel predicates.  */\n-#undef RS6000_BUILTIN_0\n-#undef RS6000_BUILTIN_1\n-#undef RS6000_BUILTIN_2\n-#undef RS6000_BUILTIN_3\n-#undef RS6000_BUILTIN_A\n-#undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n-#undef RS6000_BUILTIN_H\n-#undef RS6000_BUILTIN_P\n-#undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n-#undef RS6000_BUILTIN_X\n-\n-#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE) \\\n-  { MASK, ICODE, NAME, ENUM },\n-\n-#define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n-\n-static const struct builtin_description bdesc_spe_evsel[] =\n-{\n-#include \"rs6000-builtin.def\"\n-};\n-\n /* PAIRED predicates.  */\n #undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14320,13 +14042,11 @@ static const struct builtin_description bdesc_spe_evsel[] =\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n \n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_paired_preds[] =\n@@ -14342,11 +14062,9 @@ static const struct builtin_description bdesc_paired_preds[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14357,11 +14075,9 @@ static const struct builtin_description bdesc_paired_preds[] =\n   { MASK, ICODE, NAME, ENUM },\n \n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_abs[] =\n@@ -14378,11 +14094,9 @@ static const struct builtin_description bdesc_abs[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14393,11 +14107,9 @@ static const struct builtin_description bdesc_abs[] =\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_1arg[] =\n@@ -14413,11 +14125,9 @@ static const struct builtin_description bdesc_1arg[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE) \\\n@@ -14428,11 +14138,9 @@ static const struct builtin_description bdesc_1arg[] =\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_0arg[] =\n@@ -14447,11 +14155,9 @@ static const struct builtin_description bdesc_0arg[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -14460,13 +14166,11 @@ static const struct builtin_description bdesc_0arg[] =\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n \n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n \n static const struct builtin_description bdesc_htm[] =\n@@ -14480,11 +14184,9 @@ static const struct builtin_description bdesc_htm[] =\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n \n /* Return true if a builtin function is overloaded.  */\n bool\n@@ -14584,9 +14286,7 @@ rs6000_expand_unop_builtin (enum insn_code icode, tree exp, rtx target)\n \n   if (icode == CODE_FOR_altivec_vspltisb\n       || icode == CODE_FOR_altivec_vspltish\n-      || icode == CODE_FOR_altivec_vspltisw\n-      || icode == CODE_FOR_spe_evsplatfi\n-      || icode == CODE_FOR_spe_evsplati)\n+      || icode == CODE_FOR_altivec_vspltisw)\n     {\n       /* Only allow 5-bit *signed* literals.  */\n       if (GET_CODE (op0) != CONST_INT\n@@ -14672,24 +14372,7 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n       || icode == CODE_FOR_altivec_vctuxs\n       || icode == CODE_FOR_altivec_vspltb\n       || icode == CODE_FOR_altivec_vsplth\n-      || icode == CODE_FOR_altivec_vspltw\n-      || icode == CODE_FOR_spe_evaddiw\n-      || icode == CODE_FOR_spe_evldd\n-      || icode == CODE_FOR_spe_evldh\n-      || icode == CODE_FOR_spe_evldw\n-      || icode == CODE_FOR_spe_evlhhesplat\n-      || icode == CODE_FOR_spe_evlhhossplat\n-      || icode == CODE_FOR_spe_evlhhousplat\n-      || icode == CODE_FOR_spe_evlwhe\n-      || icode == CODE_FOR_spe_evlwhos\n-      || icode == CODE_FOR_spe_evlwhou\n-      || icode == CODE_FOR_spe_evlwhsplat\n-      || icode == CODE_FOR_spe_evlwwsplat\n-      || icode == CODE_FOR_spe_evrlwi\n-      || icode == CODE_FOR_spe_evslwi\n-      || icode == CODE_FOR_spe_evsrwis\n-      || icode == CODE_FOR_spe_evsubifw\n-      || icode == CODE_FOR_spe_evsrwiu)\n+      || icode == CODE_FOR_altivec_vspltw)\n     {\n       /* Only allow 5-bit unsigned literals.  */\n       STRIP_NOPS (arg1);\n@@ -15054,39 +14737,6 @@ altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n   return target;\n }\n \n-static rtx\n-spe_expand_stv_builtin (enum insn_code icode, tree exp)\n-{\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  tree arg2 = CALL_EXPR_ARG (exp, 2);\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-  rtx op2 = expand_normal (arg2);\n-  rtx pat;\n-  machine_mode mode0 = insn_data[icode].operand[0].mode;\n-  machine_mode mode1 = insn_data[icode].operand[1].mode;\n-  machine_mode mode2 = insn_data[icode].operand[2].mode;\n-\n-  /* Invalid arguments.  Bail before doing anything stoopid!  */\n-  if (arg0 == error_mark_node\n-      || arg1 == error_mark_node\n-      || arg2 == error_mark_node)\n-    return const0_rtx;\n-\n-  if (! (*insn_data[icode].operand[2].predicate) (op0, mode2))\n-    op0 = copy_to_mode_reg (mode2, op0);\n-  if (! (*insn_data[icode].operand[0].predicate) (op1, mode0))\n-    op1 = copy_to_mode_reg (mode0, op1);\n-  if (! (*insn_data[icode].operand[1].predicate) (op2, mode1))\n-    op2 = copy_to_mode_reg (mode1, op2);\n-\n-  pat = GEN_FCN (icode) (op1, op2, op0);\n-  if (pat)\n-    emit_insn (pat);\n-  return NULL_RTX;\n-}\n-\n static rtx\n paired_expand_stv_builtin (enum insn_code icode, tree exp)\n {\n@@ -16511,171 +16161,6 @@ paired_expand_builtin (tree exp, rtx target, bool * expandedp)\n   return NULL_RTX;\n }\n \n-/* Binops that need to be initialized manually, but can be expanded\n-   automagically by rs6000_expand_binop_builtin.  */\n-static const struct builtin_description bdesc_2arg_spe[] =\n-{\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlddx, \"__builtin_spe_evlddx\", SPE_BUILTIN_EVLDDX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evldwx, \"__builtin_spe_evldwx\", SPE_BUILTIN_EVLDWX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evldhx, \"__builtin_spe_evldhx\", SPE_BUILTIN_EVLDHX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhex, \"__builtin_spe_evlwhex\", SPE_BUILTIN_EVLWHEX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhoux, \"__builtin_spe_evlwhoux\", SPE_BUILTIN_EVLWHOUX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhosx, \"__builtin_spe_evlwhosx\", SPE_BUILTIN_EVLWHOSX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwwsplatx, \"__builtin_spe_evlwwsplatx\", SPE_BUILTIN_EVLWWSPLATX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhsplatx, \"__builtin_spe_evlwhsplatx\", SPE_BUILTIN_EVLWHSPLATX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlhhesplatx, \"__builtin_spe_evlhhesplatx\", SPE_BUILTIN_EVLHHESPLATX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlhhousplatx, \"__builtin_spe_evlhhousplatx\", SPE_BUILTIN_EVLHHOUSPLATX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlhhossplatx, \"__builtin_spe_evlhhossplatx\", SPE_BUILTIN_EVLHHOSSPLATX },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evldd, \"__builtin_spe_evldd\", SPE_BUILTIN_EVLDD },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evldw, \"__builtin_spe_evldw\", SPE_BUILTIN_EVLDW },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evldh, \"__builtin_spe_evldh\", SPE_BUILTIN_EVLDH },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhe, \"__builtin_spe_evlwhe\", SPE_BUILTIN_EVLWHE },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhou, \"__builtin_spe_evlwhou\", SPE_BUILTIN_EVLWHOU },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhos, \"__builtin_spe_evlwhos\", SPE_BUILTIN_EVLWHOS },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwwsplat, \"__builtin_spe_evlwwsplat\", SPE_BUILTIN_EVLWWSPLAT },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlwhsplat, \"__builtin_spe_evlwhsplat\", SPE_BUILTIN_EVLWHSPLAT },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlhhesplat, \"__builtin_spe_evlhhesplat\", SPE_BUILTIN_EVLHHESPLAT },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlhhousplat, \"__builtin_spe_evlhhousplat\", SPE_BUILTIN_EVLHHOUSPLAT },\n-  { RS6000_BTM_SPE, CODE_FOR_spe_evlhhossplat, \"__builtin_spe_evlhhossplat\", SPE_BUILTIN_EVLHHOSSPLAT }\n-};\n-\n-/* Expand the builtin in EXP and store the result in TARGET.  Store\n-   true in *EXPANDEDP if we found a builtin to expand.\n-\n-   This expands the SPE builtins that are not simple unary and binary\n-   operations.  */\n-static rtx\n-spe_expand_builtin (tree exp, rtx target, bool *expandedp)\n-{\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  tree arg1, arg0;\n-  enum rs6000_builtins fcode = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n-  enum insn_code icode;\n-  machine_mode tmode, mode0;\n-  rtx pat, op0;\n-  const struct builtin_description *d;\n-  size_t i;\n-\n-  *expandedp = true;\n-\n-  /* Syntax check for a 5-bit unsigned immediate.  */\n-  switch (fcode)\n-    {\n-    case SPE_BUILTIN_EVSTDD:\n-    case SPE_BUILTIN_EVSTDH:\n-    case SPE_BUILTIN_EVSTDW:\n-    case SPE_BUILTIN_EVSTWHE:\n-    case SPE_BUILTIN_EVSTWHO:\n-    case SPE_BUILTIN_EVSTWWE:\n-    case SPE_BUILTIN_EVSTWWO:\n-      arg1 = CALL_EXPR_ARG (exp, 2);\n-      if (TREE_CODE (arg1) != INTEGER_CST\n-\t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n-\t{\n-\t  error (\"argument 2 must be a 5-bit unsigned literal\");\n-\t  return const0_rtx;\n-\t}\n-      break;\n-    default:\n-      break;\n-    }\n-\n-  /* The evsplat*i instructions are not quite generic.  */\n-  switch (fcode)\n-    {\n-    case SPE_BUILTIN_EVSPLATFI:\n-      return rs6000_expand_unop_builtin (CODE_FOR_spe_evsplatfi,\n-\t\t\t\t\t exp, target);\n-    case SPE_BUILTIN_EVSPLATI:\n-      return rs6000_expand_unop_builtin (CODE_FOR_spe_evsplati,\n-\t\t\t\t\t exp, target);\n-    default:\n-      break;\n-    }\n-\n-  d = bdesc_2arg_spe;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_2arg_spe); ++i, ++d)\n-    if (d->code == fcode)\n-      return rs6000_expand_binop_builtin (d->icode, exp, target);\n-\n-  d = bdesc_spe_predicates;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_spe_predicates); ++i, ++d)\n-    if (d->code == fcode)\n-      return spe_expand_predicate_builtin (d->icode, exp, target);\n-\n-  d = bdesc_spe_evsel;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_spe_evsel); ++i, ++d)\n-    if (d->code == fcode)\n-      return spe_expand_evsel_builtin (d->icode, exp, target);\n-\n-  switch (fcode)\n-    {\n-    case SPE_BUILTIN_EVSTDDX:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstddx, exp);\n-    case SPE_BUILTIN_EVSTDHX:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstdhx, exp);\n-    case SPE_BUILTIN_EVSTDWX:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstdwx, exp);\n-    case SPE_BUILTIN_EVSTWHEX:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwhex, exp);\n-    case SPE_BUILTIN_EVSTWHOX:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwhox, exp);\n-    case SPE_BUILTIN_EVSTWWEX:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwwex, exp);\n-    case SPE_BUILTIN_EVSTWWOX:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwwox, exp);\n-    case SPE_BUILTIN_EVSTDD:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstdd, exp);\n-    case SPE_BUILTIN_EVSTDH:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstdh, exp);\n-    case SPE_BUILTIN_EVSTDW:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstdw, exp);\n-    case SPE_BUILTIN_EVSTWHE:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwhe, exp);\n-    case SPE_BUILTIN_EVSTWHO:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwho, exp);\n-    case SPE_BUILTIN_EVSTWWE:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwwe, exp);\n-    case SPE_BUILTIN_EVSTWWO:\n-      return spe_expand_stv_builtin (CODE_FOR_spe_evstwwo, exp);\n-    case SPE_BUILTIN_MFSPEFSCR:\n-      icode = CODE_FOR_spe_mfspefscr;\n-      tmode = insn_data[icode].operand[0].mode;\n-\n-      if (target == 0\n-\t  || GET_MODE (target) != tmode\n-\t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-\ttarget = gen_reg_rtx (tmode);\n-\n-      pat = GEN_FCN (icode) (target);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n-    case SPE_BUILTIN_MTSPEFSCR:\n-      icode = CODE_FOR_spe_mtspefscr;\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      op0 = expand_normal (arg0);\n-      mode0 = insn_data[icode].operand[0].mode;\n-\n-      if (arg0 == error_mark_node)\n-\treturn const0_rtx;\n-\n-      if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n-\top0 = copy_to_mode_reg (mode0, op0);\n-\n-      pat = GEN_FCN (icode) (op0);\n-      if (pat)\n-\temit_insn (pat);\n-      return NULL_RTX;\n-    default:\n-      break;\n-    }\n-\n-  *expandedp = false;\n-  return NULL_RTX;\n-}\n-\n static rtx\n paired_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n {\n@@ -16748,164 +16233,6 @@ paired_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n-static rtx\n-spe_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n-{\n-  rtx pat, scratch, tmp;\n-  tree form = CALL_EXPR_ARG (exp, 0);\n-  tree arg0 = CALL_EXPR_ARG (exp, 1);\n-  tree arg1 = CALL_EXPR_ARG (exp, 2);\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-  machine_mode mode0 = insn_data[icode].operand[1].mode;\n-  machine_mode mode1 = insn_data[icode].operand[2].mode;\n-  int form_int;\n-  enum rtx_code code;\n-\n-  if (TREE_CODE (form) != INTEGER_CST)\n-    {\n-      error (\"argument 1 of __builtin_spe_predicate must be a constant\");\n-      return const0_rtx;\n-    }\n-  else\n-    form_int = TREE_INT_CST_LOW (form);\n-\n-  gcc_assert (mode0 == mode1);\n-\n-  if (arg0 == error_mark_node || arg1 == error_mark_node)\n-    return const0_rtx;\n-\n-  if (target == 0\n-      || GET_MODE (target) != SImode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, SImode))\n-    target = gen_reg_rtx (SImode);\n-\n-  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n-    op0 = copy_to_mode_reg (mode0, op0);\n-  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n-    op1 = copy_to_mode_reg (mode1, op1);\n-\n-  scratch = gen_reg_rtx (CCmode);\n-\n-  pat = GEN_FCN (icode) (scratch, op0, op1);\n-  if (! pat)\n-    return const0_rtx;\n-  emit_insn (pat);\n-\n-  /* There are 4 variants for each predicate: _any_, _all_, _upper_,\n-     _lower_.  We use one compare, but look in different bits of the\n-     CR for each variant.\n-\n-     There are 2 elements in each SPE simd type (upper/lower).  The CR\n-     bits are set as follows:\n-\n-     BIT0  | BIT 1  | BIT 2   | BIT 3\n-     U     |   L    | (U | L) | (U & L)\n-\n-     So, for an \"all\" relationship, BIT 3 would be set.\n-     For an \"any\" relationship, BIT 2 would be set.  Etc.\n-\n-     Following traditional nomenclature, these bits map to:\n-\n-     BIT0  | BIT 1  | BIT 2   | BIT 3\n-     LT    | GT     | EQ      | OV\n-\n-     Later, we will generate rtl to look in the LT/EQ/EQ/OV bits.\n-  */\n-\n-  switch (form_int)\n-    {\n-      /* All variant.  OV bit.  */\n-    case 0:\n-      /* We need to get to the OV bit, which is the ORDERED bit.  We\n-\t could generate (ordered:SI (reg:CC xx) (const_int 0)), but\n-\t that's ugly and will make validate_condition_mode die.\n-\t So let's just use another pattern.  */\n-      emit_insn (gen_move_from_CR_ov_bit (target, scratch));\n-      return target;\n-      /* Any variant.  EQ bit.  */\n-    case 1:\n-      code = EQ;\n-      break;\n-      /* Upper variant.  LT bit.  */\n-    case 2:\n-      code = LT;\n-      break;\n-      /* Lower variant.  GT bit.  */\n-    case 3:\n-      code = GT;\n-      break;\n-    default:\n-      error (\"argument 1 of __builtin_spe_predicate is out of range\");\n-      return const0_rtx;\n-    }\n-\n-  tmp = gen_rtx_fmt_ee (code, SImode, scratch, const0_rtx);\n-  emit_move_insn (target, tmp);\n-\n-  return target;\n-}\n-\n-/* The evsel builtins look like this:\n-\n-     e = __builtin_spe_evsel_OP (a, b, c, d);\n-\n-   and work like this:\n-\n-     e[upper] = a[upper] *OP* b[upper] ? c[upper] : d[upper];\n-     e[lower] = a[lower] *OP* b[lower] ? c[lower] : d[lower];\n-*/\n-\n-static rtx\n-spe_expand_evsel_builtin (enum insn_code icode, tree exp, rtx target)\n-{\n-  rtx pat, scratch;\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  tree arg2 = CALL_EXPR_ARG (exp, 2);\n-  tree arg3 = CALL_EXPR_ARG (exp, 3);\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-  rtx op2 = expand_normal (arg2);\n-  rtx op3 = expand_normal (arg3);\n-  machine_mode mode0 = insn_data[icode].operand[1].mode;\n-  machine_mode mode1 = insn_data[icode].operand[2].mode;\n-\n-  gcc_assert (mode0 == mode1);\n-\n-  if (arg0 == error_mark_node || arg1 == error_mark_node\n-      || arg2 == error_mark_node || arg3 == error_mark_node)\n-    return const0_rtx;\n-\n-  if (target == 0\n-      || GET_MODE (target) != mode0\n-      || ! (*insn_data[icode].operand[0].predicate) (target, mode0))\n-    target = gen_reg_rtx (mode0);\n-\n-  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n-    op0 = copy_to_mode_reg (mode0, op0);\n-  if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n-    op1 = copy_to_mode_reg (mode0, op1);\n-  if (! (*insn_data[icode].operand[1].predicate) (op2, mode1))\n-    op2 = copy_to_mode_reg (mode0, op2);\n-  if (! (*insn_data[icode].operand[1].predicate) (op3, mode1))\n-    op3 = copy_to_mode_reg (mode0, op3);\n-\n-  /* Generate the compare.  */\n-  scratch = gen_reg_rtx (CCmode);\n-  pat = GEN_FCN (icode) (scratch, op0, op1);\n-  if (! pat)\n-    return const0_rtx;\n-  emit_insn (pat);\n-\n-  if (mode0 == V2SImode)\n-    emit_insn (gen_spe_evsel (target, op2, op3, scratch));\n-  else\n-    emit_insn (gen_spe_evsel_fs (target, op2, op3, scratch));\n-\n-  return target;\n-}\n-\n /* Raise an error message for a builtin function that is called without the\n    appropriate target options being set.  */\n \n@@ -16927,8 +16254,6 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n     error (\"Builtin function %s requires the -maltivec option\", name);\n   else if ((fnmask & RS6000_BTM_PAIRED) != 0)\n     error (\"Builtin function %s requires the -mpaired option\", name);\n-  else if ((fnmask & RS6000_BTM_SPE) != 0)\n-    error (\"Builtin function %s requires the -mspe option\", name);\n   else if ((fnmask & (RS6000_BTM_DFP | RS6000_BTM_P8_VECTOR))\n \t   == (RS6000_BTM_DFP | RS6000_BTM_P8_VECTOR))\n     error (\"Builtin function %s requires the -mhard-dfp and\"\n@@ -17451,13 +16776,6 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     {\n       ret = altivec_expand_builtin (exp, target, &success);\n \n-      if (success)\n-\treturn ret;\n-    }\n-  if (TARGET_SPE)\n-    {\n-      ret = spe_expand_builtin (exp, target, &success);\n-\n       if (success)\n \treturn ret;\n     }\n@@ -17534,9 +16852,8 @@ rs6000_init_builtins (void)\n   machine_mode mode;\n \n   if (TARGET_DEBUG_BUILTIN)\n-    fprintf (stderr, \"rs6000_init_builtins%s%s%s%s\\n\",\n+    fprintf (stderr, \"rs6000_init_builtins%s%s%s\\n\",\n \t     (TARGET_PAIRED_FLOAT) ? \", paired\"\t : \"\",\n-\t     (TARGET_SPE)\t   ? \", spe\"\t : \"\",\n \t     (TARGET_ALTIVEC)\t   ? \", altivec\" : \"\",\n \t     (TARGET_VSX)\t   ? \", vsx\"\t : \"\");\n \n@@ -17735,14 +17052,12 @@ rs6000_init_builtins (void)\n      use of the target attribute.  */\n   if (TARGET_PAIRED_FLOAT)\n     paired_init_builtins ();\n-  if (TARGET_SPE)\n-    spe_init_builtins ();\n   if (TARGET_EXTRA_BUILTINS)\n     altivec_init_builtins ();\n   if (TARGET_HTM)\n     htm_init_builtins ();\n \n-  if (TARGET_EXTRA_BUILTINS || TARGET_SPE || TARGET_PAIRED_FLOAT)\n+  if (TARGET_EXTRA_BUILTINS || TARGET_PAIRED_FLOAT)\n     rs6000_common_init_builtins ();\n \n   ftype = build_function_type_list (ieee128_float_type_node,\n@@ -17833,214 +17148,6 @@ rs6000_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n   return rs6000_builtin_decls[code];\n }\n \n-static void\n-spe_init_builtins (void)\n-{\n-  tree puint_type_node = build_pointer_type (unsigned_type_node);\n-  tree pushort_type_node = build_pointer_type (short_unsigned_type_node);\n-  const struct builtin_description *d;\n-  size_t i;\n-  HOST_WIDE_INT builtin_mask = rs6000_builtin_mask;\n-\n-  tree v2si_ftype_4_v2si\n-    = build_function_type_list (opaque_V2SI_type_node,\n-                                opaque_V2SI_type_node,\n-                                opaque_V2SI_type_node,\n-                                opaque_V2SI_type_node,\n-                                opaque_V2SI_type_node,\n-                                NULL_TREE);\n-\n-  tree v2sf_ftype_4_v2sf\n-    = build_function_type_list (opaque_V2SF_type_node,\n-                                opaque_V2SF_type_node,\n-                                opaque_V2SF_type_node,\n-                                opaque_V2SF_type_node,\n-                                opaque_V2SF_type_node,\n-                                NULL_TREE);\n-\n-  tree int_ftype_int_v2si_v2si\n-    = build_function_type_list (integer_type_node,\n-                                integer_type_node,\n-                                opaque_V2SI_type_node,\n-                                opaque_V2SI_type_node,\n-                                NULL_TREE);\n-\n-  tree int_ftype_int_v2sf_v2sf\n-    = build_function_type_list (integer_type_node,\n-                                integer_type_node,\n-                                opaque_V2SF_type_node,\n-                                opaque_V2SF_type_node,\n-                                NULL_TREE);\n-\n-  tree void_ftype_v2si_puint_int\n-    = build_function_type_list (void_type_node,\n-                                opaque_V2SI_type_node,\n-                                puint_type_node,\n-                                integer_type_node,\n-                                NULL_TREE);\n-\n-  tree void_ftype_v2si_puint_char\n-    = build_function_type_list (void_type_node,\n-                                opaque_V2SI_type_node,\n-                                puint_type_node,\n-                                char_type_node,\n-                                NULL_TREE);\n-\n-  tree void_ftype_v2si_pv2si_int\n-    = build_function_type_list (void_type_node,\n-                                opaque_V2SI_type_node,\n-                                opaque_p_V2SI_type_node,\n-                                integer_type_node,\n-                                NULL_TREE);\n-\n-  tree void_ftype_v2si_pv2si_char\n-    = build_function_type_list (void_type_node,\n-                                opaque_V2SI_type_node,\n-                                opaque_p_V2SI_type_node,\n-                                char_type_node,\n-                                NULL_TREE);\n-\n-  tree void_ftype_int\n-    = build_function_type_list (void_type_node, integer_type_node, NULL_TREE);\n-\n-  tree int_ftype_void\n-    = build_function_type_list (integer_type_node, NULL_TREE);\n-\n-  tree v2si_ftype_pv2si_int\n-    = build_function_type_list (opaque_V2SI_type_node,\n-                                opaque_p_V2SI_type_node,\n-                                integer_type_node,\n-                                NULL_TREE);\n-\n-  tree v2si_ftype_puint_int\n-    = build_function_type_list (opaque_V2SI_type_node,\n-                                puint_type_node,\n-                                integer_type_node,\n-                                NULL_TREE);\n-\n-  tree v2si_ftype_pushort_int\n-    = build_function_type_list (opaque_V2SI_type_node,\n-                                pushort_type_node,\n-                                integer_type_node,\n-                                NULL_TREE);\n-\n-  tree v2si_ftype_signed_char\n-    = build_function_type_list (opaque_V2SI_type_node,\n-                                signed_char_type_node,\n-                                NULL_TREE);\n-\n-  add_builtin_type (\"__ev64_opaque__\", opaque_V2SI_type_node);\n-\n-  /* Initialize irregular SPE builtins.  */\n-\n-  def_builtin (\"__builtin_spe_mtspefscr\", void_ftype_int, SPE_BUILTIN_MTSPEFSCR);\n-  def_builtin (\"__builtin_spe_mfspefscr\", int_ftype_void, SPE_BUILTIN_MFSPEFSCR);\n-  def_builtin (\"__builtin_spe_evstddx\", void_ftype_v2si_pv2si_int, SPE_BUILTIN_EVSTDDX);\n-  def_builtin (\"__builtin_spe_evstdhx\", void_ftype_v2si_pv2si_int, SPE_BUILTIN_EVSTDHX);\n-  def_builtin (\"__builtin_spe_evstdwx\", void_ftype_v2si_pv2si_int, SPE_BUILTIN_EVSTDWX);\n-  def_builtin (\"__builtin_spe_evstwhex\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWHEX);\n-  def_builtin (\"__builtin_spe_evstwhox\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWHOX);\n-  def_builtin (\"__builtin_spe_evstwwex\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWWEX);\n-  def_builtin (\"__builtin_spe_evstwwox\", void_ftype_v2si_puint_int, SPE_BUILTIN_EVSTWWOX);\n-  def_builtin (\"__builtin_spe_evstdd\", void_ftype_v2si_pv2si_char, SPE_BUILTIN_EVSTDD);\n-  def_builtin (\"__builtin_spe_evstdh\", void_ftype_v2si_pv2si_char, SPE_BUILTIN_EVSTDH);\n-  def_builtin (\"__builtin_spe_evstdw\", void_ftype_v2si_pv2si_char, SPE_BUILTIN_EVSTDW);\n-  def_builtin (\"__builtin_spe_evstwhe\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWHE);\n-  def_builtin (\"__builtin_spe_evstwho\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWHO);\n-  def_builtin (\"__builtin_spe_evstwwe\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWWE);\n-  def_builtin (\"__builtin_spe_evstwwo\", void_ftype_v2si_puint_char, SPE_BUILTIN_EVSTWWO);\n-  def_builtin (\"__builtin_spe_evsplatfi\", v2si_ftype_signed_char, SPE_BUILTIN_EVSPLATFI);\n-  def_builtin (\"__builtin_spe_evsplati\", v2si_ftype_signed_char, SPE_BUILTIN_EVSPLATI);\n-\n-  /* Loads.  */\n-  def_builtin (\"__builtin_spe_evlddx\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDDX);\n-  def_builtin (\"__builtin_spe_evldwx\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDWX);\n-  def_builtin (\"__builtin_spe_evldhx\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDHX);\n-  def_builtin (\"__builtin_spe_evlwhex\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHEX);\n-  def_builtin (\"__builtin_spe_evlwhoux\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOUX);\n-  def_builtin (\"__builtin_spe_evlwhosx\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOSX);\n-  def_builtin (\"__builtin_spe_evlwwsplatx\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWWSPLATX);\n-  def_builtin (\"__builtin_spe_evlwhsplatx\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHSPLATX);\n-  def_builtin (\"__builtin_spe_evlhhesplatx\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHESPLATX);\n-  def_builtin (\"__builtin_spe_evlhhousplatx\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOUSPLATX);\n-  def_builtin (\"__builtin_spe_evlhhossplatx\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOSSPLATX);\n-  def_builtin (\"__builtin_spe_evldd\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDD);\n-  def_builtin (\"__builtin_spe_evldw\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDW);\n-  def_builtin (\"__builtin_spe_evldh\", v2si_ftype_pv2si_int, SPE_BUILTIN_EVLDH);\n-  def_builtin (\"__builtin_spe_evlhhesplat\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHESPLAT);\n-  def_builtin (\"__builtin_spe_evlhhossplat\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOSSPLAT);\n-  def_builtin (\"__builtin_spe_evlhhousplat\", v2si_ftype_pushort_int, SPE_BUILTIN_EVLHHOUSPLAT);\n-  def_builtin (\"__builtin_spe_evlwhe\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHE);\n-  def_builtin (\"__builtin_spe_evlwhos\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOS);\n-  def_builtin (\"__builtin_spe_evlwhou\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHOU);\n-  def_builtin (\"__builtin_spe_evlwhsplat\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWHSPLAT);\n-  def_builtin (\"__builtin_spe_evlwwsplat\", v2si_ftype_puint_int, SPE_BUILTIN_EVLWWSPLAT);\n-\n-  /* Predicates.  */\n-  d = bdesc_spe_predicates;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_spe_predicates); ++i, d++)\n-    {\n-      tree type;\n-      HOST_WIDE_INT mask = d->mask;\n-\n-      if ((mask & builtin_mask) != mask)\n-\t{\n-\t  if (TARGET_DEBUG_BUILTIN)\n-\t    fprintf (stderr, \"spe_init_builtins, skip predicate %s\\n\",\n-\t\t     d->name);\n-\t  continue;\n-\t}\n-\n-      /* Cannot define builtin if the instruction is disabled.  */\n-      gcc_assert (d->icode != CODE_FOR_nothing);\n-      switch (insn_data[d->icode].operand[1].mode)\n-\t{\n-\tcase V2SImode:\n-\t  type = int_ftype_int_v2si_v2si;\n-\t  break;\n-\tcase V2SFmode:\n-\t  type = int_ftype_int_v2sf_v2sf;\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-\n-      def_builtin (d->name, type, d->code);\n-    }\n-\n-  /* Evsel predicates.  */\n-  d = bdesc_spe_evsel;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_spe_evsel); ++i, d++)\n-    {\n-      tree type;\n-      HOST_WIDE_INT mask = d->mask;\n-\n-      if ((mask & builtin_mask) != mask)\n-\t{\n-\t  if (TARGET_DEBUG_BUILTIN)\n-\t    fprintf (stderr, \"spe_init_builtins, skip evsel %s\\n\",\n-\t\t     d->name);\n-\t  continue;\n-\t}\n-\n-      /* Cannot define builtin if the instruction is disabled.  */\n-      gcc_assert (d->icode != CODE_FOR_nothing);\n-      switch (insn_data[d->icode].operand[1].mode)\n-\t{\n-\tcase V2SImode:\n-\t  type = v2si_ftype_4_v2si;\n-\t  break;\n-\tcase V2SFmode:\n-\t  type = v2sf_ftype_4_v2sf;\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-\n-      def_builtin (d->name, type, d->code);\n-    }\n-}\n-\n static void\n paired_init_builtins (void)\n {\n@@ -19558,8 +18665,6 @@ expand_block_clear (rtx operands[])\n     clear_step = 16;\n   else if (TARGET_POWERPC64 && (align >= 64 || !STRICT_ALIGNMENT))\n     clear_step = 8;\n-  else if (TARGET_SPE && align >= 64)\n-    clear_step = 8;\n   else\n     clear_step = 4;\n \n@@ -19578,11 +18683,6 @@ expand_block_clear (rtx operands[])\n \t  clear_bytes = 16;\n \t  mode = V4SImode;\n \t}\n-      else if (bytes >= 8 && TARGET_SPE && align >= 64)\n-        {\n-          clear_bytes = 8;\n-          mode = V2SImode;\n-        }\n       else if (bytes >= 8 && TARGET_POWERPC64\n \t       && (align >= 64 || !STRICT_ALIGNMENT))\n \t{\n@@ -20790,12 +19890,6 @@ expand_block_move (rtx operands[])\n \t  mode = V4SImode;\n \t  gen_func.mov = gen_movv4si;\n \t}\n-      else if (TARGET_SPE && bytes >= 8 && align >= 64)\n-        {\n-          move_bytes = 8;\n-          mode = V2SImode;\n-          gen_func.mov = gen_movv2si;\n-        }\n       else if (TARGET_STRING\n \t  && bytes > 24\t\t/* move up to 32 bytes at a time */\n \t  && ! fixed_regs[5]\n@@ -23223,10 +22317,6 @@ rs6000_cannot_change_mode_class (machine_mode from,\n       && (ALTIVEC_VECTOR_MODE (from) + ALTIVEC_VECTOR_MODE (to)) == 1)\n     return true;\n \n-  if (TARGET_SPE && (SPE_VECTOR_MODE (from) + SPE_VECTOR_MODE (to)) == 1\n-      && reg_classes_intersect_p (GENERAL_REGS, rclass))\n-    return true;\n-\n   return false;\n }\n \n@@ -24062,34 +23152,6 @@ print_operand (FILE *file, rtx x, int code)\n \n \ttmp = XEXP (x, 0);\n \n-\t/* Ugly hack because %y is overloaded.  */\n-\tif (TARGET_SPE\n-\t    && (GET_MODE_SIZE (GET_MODE (x)) == 8\n-\t\t|| FLOAT128_2REG_P (GET_MODE (x))\n-\t\t|| GET_MODE (x) == TImode\n-\t\t|| GET_MODE (x) == PTImode))\n-\t  {\n-\t    /* Handle [reg].  */\n-\t    if (REG_P (tmp))\n-\t      {\n-\t\tfprintf (file, \"0(%s)\", reg_names[REGNO (tmp)]);\n-\t\tbreak;\n-\t      }\n-\t    /* Handle [reg+UIMM].  */\n-\t    else if (GET_CODE (tmp) == PLUS &&\n-\t\t     GET_CODE (XEXP (tmp, 1)) == CONST_INT)\n-\t      {\n-\t\tint x;\n-\n-\t\tgcc_assert (REG_P (XEXP (tmp, 0)));\n-\n-\t\tx = INTVAL (XEXP (tmp, 1));\n-\t\tfprintf (file, \"%d(%s)\", x, reg_names[REGNO (XEXP (tmp, 0))]);\n-\t\tbreak;\n-\t      }\n-\n-\t    /* Fall through.  Must be [reg+reg].  */\n-\t  }\n \tif (VECTOR_MEM_ALTIVEC_P (GET_MODE (x))\n \t    && GET_CODE (tmp) == AND\n \t    && GET_CODE (XEXP (tmp, 1)) == CONST_INT\n@@ -26922,13 +25984,6 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n \t\t | SAVE_INLINE_GPRS\n \t\t | SAVE_INLINE_VRS);\n \n-  /* Saving CR interferes with the exit routines used on the SPE, so\n-     just punt here.  */\n-  if (TARGET_SPE_ABI\n-      && info->spe_64bit_regs_used\n-      && info->cr_save_p)\n-    strategy |= REST_INLINE_GPRS;\n-\n   /* We can only use the out-of-line routines to restore fprs if we've\n      saved all the registers from first_fp_reg_save in the prologue.\n      Otherwise, we risk loading garbage.  Of course, if we have saved\n@@ -26971,7 +26026,6 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n \n   if (TARGET_MULTIPLE\n       && !TARGET_POWERPC64\n-      && !(TARGET_SPE_ABI && info->spe_64bit_regs_used)\n       && info->first_gp_reg_save < 31\n       && !(flag_shrink_wrap\n \t   && flag_shrink_wrap_separate\n@@ -27190,15 +26244,6 @@ rs6000_stack_info (void)\n   memset (info, 0, sizeof (*info));\n   info->reload_completed = reload_completed;\n \n-  if (TARGET_SPE)\n-    {\n-      /* Cache value so we don't rescan instruction chain over and over.  */\n-      if (cfun->machine->spe_insn_chain_scanned_p == 0)\n-\tcfun->machine->spe_insn_chain_scanned_p\n-\t  = spe_func_has_64bit_regs_p () + 1;\n-      info->spe_64bit_regs_used = cfun->machine->spe_insn_chain_scanned_p - 1;\n-    }\n-\n   /* Select which calling sequence.  */\n   info->abi = DEFAULT_ABI;\n \n@@ -27219,21 +26264,6 @@ rs6000_stack_info (void)\n \n   info->gp_size = reg_size * (32 - first_gp);\n \n-  /* For the SPE, we have an additional upper 32-bits on each GPR.\n-     Ideally we should save the entire 64-bits only when the upper\n-     half is used in SIMD instructions.  Since we only record\n-     registers live (not the size they are used in), this proves\n-     difficult because we'd have to traverse the instruction chain at\n-     the right time, taking reload into account.  This is a real pain,\n-     so we opt to save the GPRs in 64-bits always if but one register\n-     gets used in 64-bits.  Otherwise, all the registers in the frame\n-     get saved in 32-bits.\n-\n-     So... since when we save all GPRs (except the SP) in 64-bits, the\n-     traditional GP save area will be empty.  */\n-  if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n-    info->gp_size = 0;\n-\n   info->first_fp_reg_save = first_fp_reg_to_save ();\n   info->fp_size = 8 * (64 - info->first_fp_reg_save);\n \n@@ -27263,9 +26293,7 @@ rs6000_stack_info (void)\n       for (i = 0; EH_RETURN_DATA_REGNO (i) != INVALID_REGNUM; ++i)\n \tcontinue;\n \n-      /* SPE saves EH registers in 64-bits.  */\n-      ehrd_size = i * (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0\n-\t\t       ? UNITS_PER_SPE_WORD : UNITS_PER_WORD);\n+      ehrd_size = i * UNITS_PER_WORD;\n     }\n   else\n     ehrd_size = 0;\n@@ -27299,9 +26327,6 @@ rs6000_stack_info (void)\n \t\t       ABI_STACK_BOUNDARY / BITS_PER_UNIT)\n \t - (info->fixed_size + info->vars_size + info->parm_size);\n \n-  if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n-    info->spe_gp_size = 8 * (32 - first_gp);\n-\n   if (TARGET_ALTIVEC_ABI)\n     info->vrsave_mask = compute_vrsave_mask ();\n \n@@ -27354,23 +26379,7 @@ rs6000_stack_info (void)\n       info->gp_save_offset = info->fp_save_offset - info->gp_size;\n       info->cr_save_offset = info->gp_save_offset - info->cr_size;\n \n-      if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n-\t{\n-\t  /* Align stack so SPE GPR save area is aligned on a\n-\t     double-word boundary.  */\n-\t  if (info->spe_gp_size != 0 && info->cr_save_offset != 0)\n-\t    info->spe_padding_size = 8 - (-info->cr_save_offset % 8);\n-\t  else\n-\t    info->spe_padding_size = 0;\n-\n-\t  info->spe_gp_save_offset = info->cr_save_offset\n-\t\t\t\t     - info->spe_padding_size\n-\t\t\t\t     - info->spe_gp_size;\n-\n-\t  /* Adjust for SPE case.  */\n-\t  info->ehrd_offset = info->spe_gp_save_offset;\n-\t}\n-      else if (TARGET_ALTIVEC_ABI)\n+      if (TARGET_ALTIVEC_ABI)\n \t{\n \t  info->vrsave_save_offset = info->cr_save_offset - info->vrsave_size;\n \n@@ -27397,8 +26406,6 @@ rs6000_stack_info (void)\n \t\t\t\t  + info->gp_size\n \t\t\t\t  + info->altivec_size\n \t\t\t\t  + info->altivec_padding_size\n-\t\t\t\t  + info->spe_gp_size\n-\t\t\t\t  + info->spe_padding_size\n \t\t\t\t  + ehrd_size\n \t\t\t\t  + ehcr_size\n \t\t\t\t  + info->cr_size\n@@ -27470,50 +26477,6 @@ rs6000_stack_info (void)\n   return info;\n }\n \n-/* Return true if the current function uses any GPRs in 64-bit SIMD\n-   mode.  */\n-\n-static bool\n-spe_func_has_64bit_regs_p (void)\n-{\n-  rtx_insn *insns, *insn;\n-\n-  /* Functions that save and restore all the call-saved registers will\n-     need to save/restore the registers in 64-bits.  */\n-  if (crtl->calls_eh_return\n-      || cfun->calls_setjmp\n-      || crtl->has_nonlocal_goto)\n-    return true;\n-\n-  insns = get_insns ();\n-\n-  for (insn = NEXT_INSN (insns); insn != NULL_RTX; insn = NEXT_INSN (insn))\n-    {\n-      if (INSN_P (insn))\n-\t{\n-\t  rtx i;\n-\n-\t  /* FIXME: This should be implemented with attributes...\n-\n-\t         (set_attr \"spe64\" \"true\")....then,\n-\t         if (get_spe64(insn)) return true;\n-\n-\t     It's the only reliable way to do the stuff below.  */\n-\n-\t  i = PATTERN (insn);\n-\t  if (GET_CODE (i) == SET)\n-\t    {\n-\t      machine_mode mode = GET_MODE (SET_SRC (i));\n-\n-\t      if (SPE_VECTOR_MODE (mode))\n-\t\treturn true;\n-\t    }\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n static void\n debug_stack_info (rs6000_stack_t *info)\n {\n@@ -27542,9 +26505,6 @@ debug_stack_info (rs6000_stack_t *info)\n   if (TARGET_ALTIVEC_ABI)\n     fprintf (stderr, \"\\tALTIVEC ABI extensions enabled.\\n\");\n \n-  if (TARGET_SPE_ABI)\n-    fprintf (stderr, \"\\tSPE ABI extensions enabled.\\n\");\n-\n   if (info->first_gp_reg_save != 32)\n     fprintf (stderr, \"\\tfirst_gp_reg_save   = %5d\\n\", info->first_gp_reg_save);\n \n@@ -27580,10 +26540,6 @@ debug_stack_info (rs6000_stack_t *info)\n     fprintf (stderr, \"\\taltivec_save_offset = %5d\\n\",\n \t     info->altivec_save_offset);\n \n-  if (info->spe_gp_size)\n-    fprintf (stderr, \"\\tspe_gp_save_offset  = %5d\\n\",\n-\t     info->spe_gp_save_offset);\n-\n   if (info->vrsave_size)\n     fprintf (stderr, \"\\tvrsave_save_offset  = %5d\\n\",\n \t     info->vrsave_save_offset);\n@@ -27614,9 +26570,6 @@ debug_stack_info (rs6000_stack_t *info)\n   if (info->gp_size)\n     fprintf (stderr, \"\\tgp_size             = %5d\\n\", info->gp_size);\n \n-  if (info->spe_gp_size)\n-    fprintf (stderr, \"\\tspe_gp_size         = %5d\\n\", info->spe_gp_size);\n-\n   if (info->fp_size)\n     fprintf (stderr, \"\\tfp_size             = %5d\\n\", info->fp_size);\n \n@@ -27630,10 +26583,6 @@ debug_stack_info (rs6000_stack_t *info)\n     fprintf (stderr, \"\\taltivec_padding_size= %5d\\n\",\n \t     info->altivec_padding_size);\n \n-  if (info->spe_padding_size)\n-    fprintf (stderr, \"\\tspe_padding_size    = %5d\\n\",\n-\t     info->spe_padding_size);\n-\n   if (info->cr_size)\n     fprintf (stderr, \"\\tcr_size             = %5d\\n\", info->cr_size);\n \n@@ -28453,11 +27402,8 @@ emit_frame_save (rtx frame_reg, machine_mode mode,\n   rtx reg;\n \n   /* Some cases that need register indexed addressing.  */\n-  gcc_checking_assert (!((TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n-\t\t\t || (TARGET_VSX && ALTIVEC_OR_VSX_VECTOR_MODE (mode))\n-\t\t\t || (TARGET_SPE_ABI\n-\t\t\t     && SPE_VECTOR_MODE (mode)\n-\t\t\t     && !SPE_CONST_OFFSET_OK (offset))));\n+  gcc_checking_assert (!(TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+\t\t\t || (TARGET_VSX && ALTIVEC_OR_VSX_VECTOR_MODE (mode)));\n \n   reg = gen_rtx_REG (mode, regno);\n   rtx_insn *insn = emit_insn (gen_frame_store (reg, frame_reg, offset));\n@@ -28471,19 +27417,7 @@ emit_frame_save (rtx frame_reg, machine_mode mode,\n static rtx\n gen_frame_mem_offset (machine_mode mode, rtx reg, int offset)\n {\n-  rtx int_rtx, offset_rtx;\n-\n-  int_rtx = GEN_INT (offset);\n-\n-  if (TARGET_SPE_ABI && SPE_VECTOR_MODE (mode) && !SPE_CONST_OFFSET_OK (offset))\n-    {\n-      offset_rtx = gen_rtx_REG (Pmode, FIXED_SCRATCH);\n-      emit_move_insn (offset_rtx, int_rtx);\n-    }\n-  else\n-    offset_rtx = int_rtx;\n-\n-  return gen_frame_mem (mode, gen_rtx_PLUS (Pmode, reg, offset_rtx));\n+  return gen_frame_mem (mode, gen_rtx_PLUS (Pmode, reg, GEN_INT (offset)));\n }\n \n #ifndef TARGET_FIX_AND_CONTINUE\n@@ -28514,7 +27448,7 @@ static char savres_routine_name[30];\n    We are saving/restoring GPRs if GPR is true.  */\n \n static char *\n-rs6000_savres_routine_name (rs6000_stack_t *info, int regno, int sel)\n+rs6000_savres_routine_name (int regno, int sel)\n {\n   const char *prefix = \"\";\n   const char *suffix = \"\";\n@@ -28530,9 +27464,6 @@ rs6000_savres_routine_name (rs6000_stack_t *info, int regno, int sel)\n \n      - ELF targets have save/restore routines for GPRs.\n \n-     - SPE targets use different prefixes for 32/64-bit registers, and\n-       neither of them fit neatly in the FOO_{PREFIX,SUFFIX} regimen.\n-\n      - PPC64 ELF targets have routines for save/restore of GPRs that\n        differ in what they do with the link register, so having a set\n        prefix doesn't work.  (We only use one of the save routines at\n@@ -28547,20 +27478,7 @@ rs6000_savres_routine_name (rs6000_stack_t *info, int regno, int sel)\n \n      We deal with all this by synthesizing our own prefix/suffix and\n      using that for the simple sprintf call shown above.  */\n-  if (TARGET_SPE)\n-    {\n-      /* No floating point saves on the SPE.  */\n-      gcc_assert ((sel & SAVRES_REG) == SAVRES_GPR);\n-\n-      if ((sel & SAVRES_SAVE))\n-\tprefix = info->spe_64bit_regs_used ? \"_save64gpr_\" : \"_save32gpr_\";\n-      else\n-\tprefix = info->spe_64bit_regs_used ? \"_rest64gpr_\" : \"_rest32gpr_\";\n-\n-      if ((sel & SAVRES_LR))\n-\tsuffix = \"_x\";\n-    }\n-  else if (DEFAULT_ABI == ABI_V4)\n+  if (DEFAULT_ABI == ABI_V4)\n     {\n       if (TARGET_64BIT)\n \tgoto aix_names;\n@@ -28650,12 +27568,6 @@ rs6000_savres_routine_sym (rs6000_stack_t *info, int sel)\n   rtx sym;\n   int select = sel;\n \n-  /* On the SPE, we never have any FPRs, but we do have 32/64-bit\n-     versions of the gpr routines.  */\n-  if (TARGET_SPE_ABI && (sel & SAVRES_REG) == SAVRES_GPR\n-      && info->spe_64bit_regs_used)\n-    select ^= SAVRES_FPR ^ SAVRES_GPR;\n-\n   /* Don't generate bogus routine names.  */\n   gcc_assert (FIRST_SAVRES_REGISTER <= regno\n \t      && regno <= LAST_SAVRES_REGISTER\n@@ -28667,7 +27579,7 @@ rs6000_savres_routine_sym (rs6000_stack_t *info, int sel)\n     {\n       char *name;\n \n-      name = rs6000_savres_routine_name (info, regno, sel);\n+      name = rs6000_savres_routine_name (regno, sel);\n \n       sym = savres_routine_syms[regno-FIRST_SAVRES_REGISTER][select]\n \t= gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n@@ -28683,8 +27595,7 @@ rs6000_savres_routine_sym (rs6000_stack_t *info, int sel)\n    reg UPDT_REGNO for use by out-of-line register restore routines.  */\n \n static rtx\n-rs6000_emit_stack_reset (rs6000_stack_t *info,\n-\t\t\t rtx frame_reg_rtx, HOST_WIDE_INT frame_off,\n+rs6000_emit_stack_reset (rtx frame_reg_rtx, HOST_WIDE_INT frame_off,\n \t\t\t unsigned updt_regno)\n {\n   /* If there is nothing to do, don't do anything.  */\n@@ -28695,10 +27606,7 @@ rs6000_emit_stack_reset (rs6000_stack_t *info,\n \n   /* This blockage is needed so that sched doesn't decide to move\n      the sp change before the register restores.  */\n-  if (DEFAULT_ABI == ABI_V4\n-      || (TARGET_SPE_ABI\n-\t  && info->spe_64bit_regs_used != 0\n-\t  && info->first_gp_reg_save != 32))\n+  if (DEFAULT_ABI == ABI_V4)\n     return emit_insn (gen_stack_restore_tie (updt_reg_rtx, frame_reg_rtx,\n \t\t\t\t\t     GEN_INT (frame_off)));\n \n@@ -28920,9 +27828,6 @@ rs6000_get_separate_components (void)\n   if (WORLD_SAVE_P (info))\n     return NULL;\n \n-  if (TARGET_SPE_ABI)\n-    return NULL;\n-\n   gcc_assert (!(info->savres_strategy & SAVE_MULTIPLE)\n \t      && !(info->savres_strategy & REST_MULTIPLE));\n \n@@ -29318,12 +28223,6 @@ rs6000_emit_prologue (void)\n       emit_insn (gen_nop ());\n     }\n \n-  if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n-    {\n-      reg_mode = V2SImode;\n-      reg_size = 8;\n-    }\n-\n   /* Handle world saves specially here.  */\n   if (WORLD_SAVE_P (info))\n     {\n@@ -29424,12 +28323,9 @@ rs6000_emit_prologue (void)\n       && (DEFAULT_ABI == ABI_V4\n \t  || crtl->calls_eh_return))\n     {\n-      bool need_r11 = (TARGET_SPE\n-\t\t       ? (!(strategy & SAVE_INLINE_GPRS)\n-\t\t\t  && info->spe_64bit_regs_used == 0)\n-\t\t       : (!(strategy & SAVE_INLINE_FPRS)\n-\t\t\t  || !(strategy & SAVE_INLINE_GPRS)\n-\t\t\t  || !(strategy & SAVE_INLINE_VRS)));\n+      bool need_r11 = (!(strategy & SAVE_INLINE_FPRS)\n+\t\t       || !(strategy & SAVE_INLINE_GPRS)\n+\t\t       || !(strategy & SAVE_INLINE_VRS));\n       int ptr_regno = -1;\n       rtx ptr_reg = NULL_RTX;\n       int ptr_off = 0;\n@@ -29566,94 +28462,7 @@ rs6000_emit_prologue (void)\n \n   /* Save GPRs.  This is done as a PARALLEL if we are using\n      the store-multiple instructions.  */\n-  if (!WORLD_SAVE_P (info)\n-      && TARGET_SPE_ABI\n-      && info->spe_64bit_regs_used != 0\n-      && info->first_gp_reg_save != 32)\n-    {\n-      int i;\n-      rtx spe_save_area_ptr;\n-      HOST_WIDE_INT save_off;\n-      int ool_adjust = 0;\n-\n-      /* Determine whether we can address all of the registers that need\n-\t to be saved with an offset from frame_reg_rtx that fits in\n-\t the small const field for SPE memory instructions.  */\n-      int spe_regs_addressable\n-\t= (SPE_CONST_OFFSET_OK (info->spe_gp_save_offset + frame_off\n-\t\t\t\t+ reg_size * (32 - info->first_gp_reg_save - 1))\n-\t   && (strategy & SAVE_INLINE_GPRS));\n-\n-      if (spe_regs_addressable)\n-\t{\n-\t  spe_save_area_ptr = frame_reg_rtx;\n-\t  save_off = frame_off;\n-\t}\n-      else\n-\t{\n-\t  /* Make r11 point to the start of the SPE save area.  We need\n-\t     to be careful here if r11 is holding the static chain.  If\n-\t     it is, then temporarily save it in r0.  */\n-\t  HOST_WIDE_INT offset;\n-\n-\t  if (!(strategy & SAVE_INLINE_GPRS))\n-\t    ool_adjust = 8 * (info->first_gp_reg_save - FIRST_SAVED_GP_REGNO);\n-\t  offset = info->spe_gp_save_offset + frame_off - ool_adjust;\n-\t  spe_save_area_ptr = gen_rtx_REG (Pmode, 11);\n-\t  save_off = frame_off - offset;\n-\n-\t  if (using_static_chain_p)\n-\t    {\n-\t      rtx r0 = gen_rtx_REG (Pmode, 0);\n-\n-\t      START_USE (0);\n-\t      gcc_assert (info->first_gp_reg_save > 11);\n-\n-\t      emit_move_insn (r0, spe_save_area_ptr);\n-\t    }\n-\t  else if (REGNO (frame_reg_rtx) != 11)\n-\t    START_USE (11);\n-\n-\t  emit_insn (gen_addsi3 (spe_save_area_ptr,\n-\t\t\t\t frame_reg_rtx, GEN_INT (offset)));\n-\t  if (!using_static_chain_p && REGNO (frame_reg_rtx) == 11)\n-\t    frame_off = -info->spe_gp_save_offset + ool_adjust;\n-\t}\n-\n-      if ((strategy & SAVE_INLINE_GPRS))\n-\t{\n-\t  for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n-\t    if (rs6000_reg_live_or_pic_offset_p (info->first_gp_reg_save + i))\n-\t      emit_frame_save (spe_save_area_ptr, reg_mode,\n-\t\t\t       info->first_gp_reg_save + i,\n-\t\t\t       (info->spe_gp_save_offset + save_off\n-\t\t\t\t+ reg_size * i),\n-\t\t\t       sp_off - save_off);\n-\t}\n-      else\n-\t{\n-\t  insn = rs6000_emit_savres_rtx (info, spe_save_area_ptr,\n-\t\t\t\t\t info->spe_gp_save_offset + save_off,\n-\t\t\t\t\t 0, reg_mode,\n-\t\t\t\t\t SAVRES_SAVE | SAVRES_GPR);\n-\n-\t  rs6000_frame_related (insn, spe_save_area_ptr, sp_off - save_off,\n-\t\t\t\tNULL_RTX, NULL_RTX);\n-\t}\n-\n-      /* Move the static chain pointer back.  */\n-      if (!spe_regs_addressable)\n-\t{\n-\t  if (using_static_chain_p)\n-\t    {\n-\t      emit_move_insn (spe_save_area_ptr, gen_rtx_REG (Pmode, 0));\n-\t      END_USE (0);\n-\t    }\n-\t  else if (REGNO (frame_reg_rtx) != 11)\n-\t    END_USE (11);\n-\t}\n-    }\n-  else if (!WORLD_SAVE_P (info) && !(strategy & SAVE_INLINE_GPRS))\n+  if (!WORLD_SAVE_P (info) && !(strategy & SAVE_INLINE_GPRS))\n     {\n       bool lr = (strategy & SAVE_NOINLINE_GPRS_SAVES_LR) != 0;\n       int sel = SAVRES_SAVE | SAVRES_GPR | (lr ? SAVRES_LR : 0);\n@@ -30280,15 +29089,15 @@ rs6000_output_savres_externs (FILE *file)\n \t{\n \t  bool lr = (info->savres_strategy & SAVE_NOINLINE_FPRS_SAVES_LR) != 0;\n \t  int sel = SAVRES_SAVE | SAVRES_FPR | (lr ? SAVRES_LR : 0);\n-\t  name = rs6000_savres_routine_name (info, regno, sel);\n+\t  name = rs6000_savres_routine_name (regno, sel);\n \t  fprintf (file, \"\\t.extern %s\\n\", name);\n \t}\n       if ((info->savres_strategy & REST_INLINE_FPRS) == 0)\n \t{\n \t  bool lr = (info->savres_strategy\n \t\t     & REST_NOINLINE_FPRS_DOESNT_RESTORE_LR) == 0;\n \t  int sel = SAVRES_FPR | (lr ? SAVRES_LR : 0);\n-\t  name = rs6000_savres_routine_name (info, regno, sel);\n+\t  name = rs6000_savres_routine_name (regno, sel);\n \t  fprintf (file, \"\\t.extern %s\\n\", name);\n \t}\n     }\n@@ -30619,12 +29428,6 @@ rs6000_emit_epilogue (int sibcall)\n \n   info = rs6000_stack_info ();\n \n-  if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n-    {\n-      reg_mode = V2SImode;\n-      reg_size = 8;\n-    }\n-\n   strategy = info->savres_strategy;\n   using_load_multiple = strategy & REST_MULTIPLE;\n   restoring_FPRs_inline = sibcall || (strategy & REST_INLINE_FPRS);\n@@ -31179,68 +29982,7 @@ rs6000_emit_epilogue (int sibcall)\n \n   /* Restore GPRs.  This is done as a PARALLEL if we are using\n      the load-multiple instructions.  */\n-  if (TARGET_SPE_ABI\n-      && info->spe_64bit_regs_used\n-      && info->first_gp_reg_save != 32)\n-    {\n-      /* Determine whether we can address all of the registers that need\n-\t to be saved with an offset from frame_reg_rtx that fits in\n-\t the small const field for SPE memory instructions.  */\n-      int spe_regs_addressable\n-\t= (SPE_CONST_OFFSET_OK (info->spe_gp_save_offset + frame_off\n-\t\t\t\t+ reg_size * (32 - info->first_gp_reg_save - 1))\n-\t   && restoring_GPRs_inline);\n-\n-      if (!spe_regs_addressable)\n-\t{\n-\t  int ool_adjust = 0;\n-\t  rtx old_frame_reg_rtx = frame_reg_rtx;\n-\t  /* Make r11 point to the start of the SPE save area.  We worried about\n-\t     not clobbering it when we were saving registers in the prologue.\n-\t     There's no need to worry here because the static chain is passed\n-\t     anew to every function.  */\n-\n-\t  if (!restoring_GPRs_inline)\n-\t    ool_adjust = 8 * (info->first_gp_reg_save - FIRST_SAVED_GP_REGNO);\n-\t  frame_reg_rtx = gen_rtx_REG (Pmode, 11);\n-\t  emit_insn (gen_addsi3 (frame_reg_rtx, old_frame_reg_rtx,\n-\t\t\t\t GEN_INT (info->spe_gp_save_offset\n-\t\t\t\t\t  + frame_off\n-\t\t\t\t\t  - ool_adjust)));\n-\t  /* Keep the invariant that frame_reg_rtx + frame_off points\n-\t     at the top of the stack frame.  */\n-\t  frame_off = -info->spe_gp_save_offset + ool_adjust;\n-\t}\n-\n-      if (restoring_GPRs_inline)\n-\t{\n-\t  HOST_WIDE_INT spe_offset = info->spe_gp_save_offset + frame_off;\n-\n-\t  for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n-\t    if (rs6000_reg_live_or_pic_offset_p (info->first_gp_reg_save + i))\n-\t      {\n-\t\trtx offset, addr, mem, reg;\n-\n-\t\t/* We're doing all this to ensure that the immediate offset\n-\t\t   fits into the immediate field of 'evldd'.  */\n-\t\tgcc_assert (SPE_CONST_OFFSET_OK (spe_offset + reg_size * i));\n-\n-\t\toffset = GEN_INT (spe_offset + reg_size * i);\n-\t\taddr = gen_rtx_PLUS (Pmode, frame_reg_rtx, offset);\n-\t\tmem = gen_rtx_MEM (V2SImode, addr);\n-\t\treg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n-\n-\t\temit_move_insn (reg, mem);\n-\t      }\n-\t}\n-      else\n-\trs6000_emit_savres_rtx (info, frame_reg_rtx,\n-\t\t\t\tinfo->spe_gp_save_offset + frame_off,\n-\t\t\t\tinfo->lr_save_offset + frame_off,\n-\t\t\t\treg_mode,\n-\t\t\t\tSAVRES_GPR | SAVRES_LR);\n-    }\n-  else if (!restoring_GPRs_inline)\n+  if (!restoring_GPRs_inline)\n     {\n       /* We are jumping to an out-of-line function.  */\n       rtx ptr_reg;\n@@ -31253,7 +29995,7 @@ rs6000_emit_epilogue (int sibcall)\n       ptr_regno = ptr_regno_for_savres (sel);\n       ptr_reg = gen_rtx_REG (Pmode, ptr_regno);\n       if (can_use_exit)\n-\trs6000_emit_stack_reset (info, frame_reg_rtx, frame_off, ptr_regno);\n+\trs6000_emit_stack_reset (frame_reg_rtx, frame_off, ptr_regno);\n       else if (end_save + frame_off != 0)\n \temit_insn (gen_add3_insn (ptr_reg, frame_reg_rtx,\n \t\t\t\t  GEN_INT (end_save + frame_off)));\n@@ -31391,7 +30133,7 @@ rs6000_emit_epilogue (int sibcall)\n       ptr_regno = ptr_regno_for_savres (sel);\n     }\n \n-  insn = rs6000_emit_stack_reset (info, frame_reg_rtx, frame_off, ptr_regno);\n+  insn = rs6000_emit_stack_reset (frame_reg_rtx, frame_off, ptr_regno);\n   if (REGNO (frame_reg_rtx) == ptr_regno)\n     frame_off = 0;\n \n@@ -36252,9 +34994,7 @@ rs6000_elf_file_end (void)\n     {\n       if (rs6000_passes_vector)\n \tfprintf (asm_out_file, \"\\t.gnu_attribute 8, %d\\n\",\n-\t\t (TARGET_ALTIVEC_ABI ? 2\n-\t\t  : TARGET_SPE_ABI ? 3\n-\t\t  : 1));\n+\t\t (TARGET_ALTIVEC_ABI ? 2 : 1));\n       if (rs6000_returns_struct)\n \tfprintf (asm_out_file, \"\\t.gnu_attribute 12, %d\\n\",\n \t\t aix_struct_return ? 2 : 1);\n@@ -38343,8 +37083,7 @@ rs6000_vectorize_vec_perm_const_ok (machine_mode vmode,\n     return true;\n \n   /* Check for ps_merge* or evmerge* insns.  */\n-  if ((TARGET_PAIRED_FLOAT && vmode == V2SFmode)\n-      || (TARGET_SPE && vmode == V2SImode))\n+  if (TARGET_PAIRED_FLOAT && vmode == V2SFmode)\n     {\n       rtx op0 = gen_raw_REG (vmode, LAST_VIRTUAL_REGISTER + 1);\n       rtx op1 = gen_raw_REG (vmode, LAST_VIRTUAL_REGISTER + 2);\n@@ -38704,68 +37443,11 @@ rs6000_initial_elimination_offset (int from, int to)\n   return offset;\n }\n \n-static rtx\n-rs6000_dwarf_register_span (rtx reg)\n-{\n-  rtx parts[8];\n-  int i, words;\n-  unsigned regno = REGNO (reg);\n-  machine_mode mode = GET_MODE (reg);\n-\n-  if (TARGET_SPE\n-      && regno < 32\n-      && SPE_VECTOR_MODE (GET_MODE (reg)))\n-    ;\n-  else\n-    return NULL_RTX;\n-\n-  regno = REGNO (reg);\n-\n-  /* The duality of the SPE register size wreaks all kinds of havoc.\n-     This is a way of distinguishing r0 in 32-bits from r0 in\n-     64-bits.  */\n-  words = (GET_MODE_SIZE (mode) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD;\n-  gcc_assert (words <= 4);\n-  for (i = 0; i < words; i++, regno++)\n-    {\n-      if (BYTES_BIG_ENDIAN)\n-\t{\n-\t  parts[2 * i] = gen_rtx_REG (SImode, regno + FIRST_SPE_HIGH_REGNO);\n-\t  parts[2 * i + 1] = gen_rtx_REG (SImode, regno);\n-\t}\n-      else\n-\t{\n-\t  parts[2 * i] = gen_rtx_REG (SImode, regno);\n-\t  parts[2 * i + 1] = gen_rtx_REG (SImode, regno + FIRST_SPE_HIGH_REGNO);\n-\t}\n-    }\n-\n-  return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (words * 2, parts));\n-}\n-\n /* Fill in sizes for SPE register high parts in table used by unwinder.  */\n \n static void\n rs6000_init_dwarf_reg_sizes_extra (tree address)\n {\n-  if (TARGET_SPE)\n-    {\n-      int i;\n-      machine_mode mode = TYPE_MODE (char_type_node);\n-      rtx addr = expand_expr (address, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n-      rtx mem = gen_rtx_MEM (BLKmode, addr);\n-      rtx value = gen_int_mode (4, mode);\n-\n-      for (i = FIRST_SPE_HIGH_REGNO; i < LAST_SPE_HIGH_REGNO+1; i++)\n-\t{\n-\t  int column = DWARF_REG_TO_UNWIND_COLUMN\n-\t\t(DWARF2_FRAME_REG_OUT (DWARF_FRAME_REGNUM (i), true));\n-\t  HOST_WIDE_INT offset = column * GET_MODE_SIZE (mode);\n-\n-\t  emit_move_insn (adjust_address (mem, mode, offset), value);\n-\t}\n-    }\n-\n   if (TARGET_MACHO && ! TARGET_ALTIVEC)\n     {\n       int i;\n@@ -38797,11 +37479,6 @@ rs6000_init_dwarf_reg_sizes_extra (tree address)\n unsigned int\n rs6000_dbx_register_number (unsigned int regno, unsigned int format)\n {\n-  /* We never use the GCC internal number for SPE high registers.\n-     Those are mapped to the 1200..1231 range for all debug formats.  */\n-  if (SPE_HIGH_REGNO_P (regno))\n-    return regno - FIRST_SPE_HIGH_REGNO + 1200;\n-\n   /* Except for the above, we use the internal number for non-DWARF\n      debug information, and also for .eh_frame.  */\n   if ((format == 0 && write_symbols != DWARF2_DEBUG) || format == 2)\n@@ -38875,9 +37552,6 @@ rs6000_vector_mode_supported_p (machine_mode mode)\n   if (TARGET_PAIRED_FLOAT && PAIRED_VECTOR_MODE (mode))\n     return true;\n \n-  if (TARGET_SPE && SPE_VECTOR_MODE (mode))\n-    return true;\n-\n   /* There is no vector form for IEEE 128-bit.  If we return true for IEEE\n      128-bit, the compiler might try to widen IEEE 128-bit to IBM\n      double-double.  */\n@@ -39083,7 +37757,6 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n {\n   { \"altivec\",\t\t RS6000_BTM_ALTIVEC,\tfalse, false },\n   { \"vsx\",\t\t RS6000_BTM_VSX,\tfalse, false },\n-  { \"spe\",\t\t RS6000_BTM_SPE,\tfalse, false },\n   { \"paired\",\t\t RS6000_BTM_PAIRED,\tfalse, false },\n   { \"fre\",\t\t RS6000_BTM_FRE,\tfalse, false },\n   { \"fres\",\t\t RS6000_BTM_FRES,\tfalse, false },"}, {"sha": "da3b8777a54bc6f7906073582af9f284ca365465", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -569,8 +569,6 @@ extern int rs6000_vector_align[];\n #define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n #define TARGET_LDBRX (TARGET_POPCNTD || rs6000_cpu == PROCESSOR_CELL)\n \n-#define TARGET_SPE_ABI 0\n-#define TARGET_SPE 0\n #define TARGET_ISEL64 (TARGET_ISEL && TARGET_POWERPC64)\n \n /* ISA 2.01 allowed FCFID to be done in 32-bit, previously it was 64-bit only.\n@@ -704,7 +702,7 @@ extern int rs6000_vector_align[];\n    the compiler for those builtins, and those machines don't support altivec or\n    VSX.  */\n \n-#define TARGET_EXTRA_BUILTINS\t(!TARGET_SPE && !TARGET_PAIRED_FLOAT\t \\\n+#define TARGET_EXTRA_BUILTINS\t(!TARGET_PAIRED_FLOAT\t\t\t \\\n \t\t\t\t && ((TARGET_POWERPC64\t\t\t \\\n \t\t\t\t      || TARGET_PPC_GPOPT /* 970/power4 */ \\\n \t\t\t\t      || TARGET_POPCNTB\t  /* ISA 2.02 */ \\\n@@ -869,7 +867,6 @@ extern unsigned char rs6000_recip_bits[];\n #define UNITS_PER_FP_WORD 8\n #define UNITS_PER_ALTIVEC_WORD 16\n #define UNITS_PER_VSX_WORD 16\n-#define UNITS_PER_SPE_WORD 8\n #define UNITS_PER_PAIRED_WORD 8\n \n /* Type used for ptrdiff_t, as a string used in a declaration.  */\n@@ -971,8 +968,7 @@ enum data_align { align_abi, align_opt, align_both };\n #define DATA_ALIGNMENT(TYPE, ALIGN) \\\n   rs6000_data_alignment (TYPE, ALIGN, align_opt)\n \n-/* Align vectors to 128 bits.  Align SPE vectors and E500 v2 doubles to\n-   64 bits.  */\n+/* Align vectors to 128 bits.  */\n #define DATA_ABI_ALIGNMENT(TYPE, ALIGN) \\\n   rs6000_data_alignment (TYPE, ALIGN, align_abi)\n \n@@ -983,9 +979,8 @@ enum data_align { align_abi, align_opt, align_both };\n /* Define this macro to be the value 1 if unaligned accesses have a cost\n    many times greater than aligned accesses, for example if they are\n    emulated in a trap handler.  */\n-/* Altivec vector memory instructions simply ignore the low bits; SPE vector\n-   memory instructions trap on unaligned accesses; VSX memory instructions are\n-   aligned to 4 or 8 bytes.  */\n+/* Altivec vector memory instructions simply ignore the low bits; VSX memory\n+   instructions are aligned to 4 or 8 bytes.  */\n #define SLOW_UNALIGNED_ACCESS(MODE, ALIGN)\t\t\t\t\\\n   (STRICT_ALIGNMENT\t\t\t\t\t\t\t\\\n    || (!TARGET_EFFICIENT_UNALIGNED_VSX\t\t\t\t\t\\\n@@ -1027,12 +1022,7 @@ enum data_align { align_abi, align_opt, align_both };\n /* This must be included for pre gcc 3.0 glibc compatibility.  */\n #define PRE_GCC3_DWARF_FRAME_REGISTERS 77\n \n-/* True if register is an SPE High register.  */\n-#define SPE_HIGH_REGNO_P(N) \\\n-  ((N) >= FIRST_SPE_HIGH_REGNO && (N) <= LAST_SPE_HIGH_REGNO)\n-\n-/* SPE high registers added as hard regs.\n-   The sfp register and 3 HTM registers\n+/* The sfp register and 3 HTM registers\n    aren't included in DWARF_FRAME_REGISTERS.  */\n #define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER - 4)\n \n@@ -1227,9 +1217,6 @@ enum data_align { align_abi, align_opt, align_both };\n #define INT_REGNO_P(N) \\\n   ((N) <= 31 || (N) == ARG_POINTER_REGNUM || (N) == FRAME_POINTER_REGNUM)\n \n-/* SPE SIMD registers are just the GPRs.  */\n-#define SPE_SIMD_REGNO_P(N) ((N) <= 31)\n-\n /* PAIRED SIMD registers are just the FPRs.  */\n #define PAIRED_SIMD_REGNO_P(N) ((N) >= 32 && (N) <= 63)\n \n@@ -1305,12 +1292,6 @@ enum data_align { align_abi, align_opt, align_both };\n   (ALTIVEC_VECTOR_MODE (MODE) || VSX_VECTOR_MODE (MODE)\t\t\t\\\n    || (MODE) == V2DImode || (MODE) == V1TImode)\n \n-#define SPE_VECTOR_MODE(MODE)\t\t\\\n-\t((MODE) == V4HImode          \t\\\n-         || (MODE) == V2SFmode          \\\n-         || (MODE) == V1DImode          \\\n-         || (MODE) == V2SImode)\n-\n #define PAIRED_VECTOR_MODE(MODE)        \\\n          ((MODE) == V2SFmode)            \n \n@@ -1347,9 +1328,9 @@ enum data_align { align_abi, align_opt, align_both };\n    ? GET_MODE_CLASS (MODE2) == MODE_CC\t\t\\\n    : GET_MODE_CLASS (MODE2) == MODE_CC\t\t\\\n    ? 0\t\t\t\t\t\t\\\n-   : SPE_VECTOR_MODE (MODE1)\t\t\t\\\n-   ? SPE_VECTOR_MODE (MODE2)\t\t\t\\\n-   : SPE_VECTOR_MODE (MODE2)\t\t\t\\\n+   : PAIRED_VECTOR_MODE (MODE1)\t\t\t\\\n+   ? PAIRED_VECTOR_MODE (MODE2)\t\t\t\\\n+   : PAIRED_VECTOR_MODE (MODE2)\t\t\t\\\n    ? 0\t\t\t\t\t\t\\\n    : 1)\n \n@@ -2684,7 +2665,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTC_SAT\t\tRS6000_BTC_MISC\t/* saturate sets VSCR.  */\n \n /* Builtin targets.  For now, we reuse the masks for those options that are in\n-   target flags, and pick three random bits for SPE, paired and ldbl128 which\n+   target flags, and pick two random bits for paired and ldbl128, which\n    aren't in target_flags.  */\n #define RS6000_BTM_ALWAYS\t0\t\t/* Always enabled.  */\n #define RS6000_BTM_ALTIVEC\tMASK_ALTIVEC\t/* VMX/altivec vectors.  */\n@@ -2695,7 +2676,6 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_P9_MISC\tMASK_P9_MISC\t/* ISA 3.0 misc. non-vector */\n #define RS6000_BTM_CRYPTO\tMASK_CRYPTO\t/* crypto funcs.  */\n #define RS6000_BTM_HTM\t\tMASK_HTM\t/* hardware TM funcs.  */\n-#define RS6000_BTM_SPE\t\tMASK_STRING\t/* E500 */\n #define RS6000_BTM_PAIRED\tMASK_MULHW\t/* 750CL paired insns.  */\n #define RS6000_BTM_FRE\t\tMASK_POPCNTB\t/* FRE instruction.  */\n #define RS6000_BTM_FRES\t\tMASK_PPC_GFXOPT\t/* FRES instruction.  */\n@@ -2736,11 +2716,9 @@ extern int frame_pointer_needed;\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n@@ -2749,11 +2727,9 @@ extern int frame_pointer_needed;\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n-#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n-#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n \n enum rs6000_builtins\n@@ -2769,11 +2745,9 @@ enum rs6000_builtins\n #undef RS6000_BUILTIN_3\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n-#undef RS6000_BUILTIN_E\n #undef RS6000_BUILTIN_H\n #undef RS6000_BUILTIN_P\n #undef RS6000_BUILTIN_Q\n-#undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n enum rs6000_builtin_type_index"}, {"sha": "3fea231665ddbe9f82e1447199cfc1c23bf49168", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -56,8 +56,6 @@\n    (TFHAR_REGNO\t\t\t114)\n    (TFIAR_REGNO\t\t\t115)\n    (TEXASR_REGNO\t\t116)\n-   (FIRST_SPE_HIGH_REGNO\t117)\n-   (LAST_SPE_HIGH_REGNO\t\t148)\n   ])\n \n ;;"}, {"sha": "a1a775389da0ed9c3752edf6f14d875be1766793", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -381,14 +381,6 @@ mabi=no-altivec\n Target RejectNegative Var(rs6000_altivec_abi, 0)\n Do not use the AltiVec ABI extensions.\n \n-mabi=spe\n-Target RejectNegative Var(rs6000_spe_abi) Save\n-Use the SPE ABI extensions.\n-\n-mabi=no-spe\n-Target RejectNegative Var(rs6000_spe_abi, 0)\n-Do not use the SPE ABI extensions.\n-\n mabi=elfv1\n Target RejectNegative Var(rs6000_elf_abi, 1) Save\n Use the ELFv1 ABI."}, {"sha": "372e1901759c669e91416bb739f3a92c7877b21d", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 0, "deletions": 2767, "changes": 2767, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -26,2770 +26,3 @@\n \n ;; DImode and TImode.\n (define_mode_iterator DITI [DI TI])\n-\n-;; SPE SIMD instructions\n-\n-(define_insn \"absv2si2\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(abs:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evabs %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evandc\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (not:V2SI (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_SPE\"\n-  \"evandc %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"andv2si3\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evand %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; Vector compare instructions\n-\n-(define_insn \"spe_evcmpeq\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-\t(unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 500))]\n-  \"TARGET_SPE\"\n-  \"evcmpeq %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evcmpgts\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 501))]\n-  \"TARGET_SPE\"\n-  \"evcmpgts %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evcmpgtu\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 502))]\n-  \"TARGET_SPE\"\n-  \"evcmpgtu %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evcmplts\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 503))]\n-  \"TARGET_SPE\"\n-  \"evcmplts %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evcmpltu\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 504))]\n-  \"TARGET_SPE\"\n-  \"evcmpltu %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; Floating point vector compare instructions\n-\n-(define_insn \"spe_evfscmpeq\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 538))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evfscmpeq %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfscmpgt\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 539))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evfscmpgt %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfscmplt\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 540))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evfscmplt %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfststeq\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 541))]\n-  \"TARGET_SPE\"\n-  \"evfststeq %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfststgt\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 542))]\n-  \"TARGET_SPE\"\n-  \"evfststgt %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfststlt\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-        (unspec:CC [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")] 543))]\n-  \"TARGET_SPE\"\n-  \"evfststlt %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; End of vector compare instructions\n-\n-(define_insn \"spe_evcntlsw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 505))]\n-  \"TARGET_SPE\"\n-  \"evcntlsw %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evcntlzw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 506))]\n-  \"TARGET_SPE\"\n-  \"evcntlzw %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_eveqv\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (not:V2SI (xor:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_SPE\"\n-  \"eveqv %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evextsb\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 507))]\n-  \"TARGET_SPE\"\n-  \"evextsb %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evextsh\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 508))]\n-  \"TARGET_SPE\"\n-  \"evextsh %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlhhesplat\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\"  \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\"   \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 509)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlhhesplat %0,%2*2(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlhhesplatx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 510)]\n-  \"TARGET_SPE\"\n-  \"evlhhesplatx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlhhossplat\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 511)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlhhossplat %0,%2*2(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlhhossplatx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 512)]\n-  \"TARGET_SPE\"\n-  \"evlhhossplatx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlhhousplat\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 513)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlhhousplat %0,%2*2(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlhhousplatx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 514)]\n-  \"TARGET_SPE\"\n-  \"evlhhousplatx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhsplat\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 515)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlwhsplat %0,%2*4(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhsplatx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 516)]\n-  \"TARGET_SPE\"\n-  \"evlwhsplatx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwwsplat\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 517)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlwwsplat %0,%2*4(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwwsplatx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 518)]\n-  \"TARGET_SPE\"\n-  \"evlwwsplatx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; Integer vector permutation instructions.  The pairs of digits in the\n-;; names of these instructions indicate the indices, in the memory vector\n-;; element ordering, of the vector elements permuted to the output vector\n-;; from the first and the second input vector respectively.\n-\n-(define_insn \"vec_perm00_v2si\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_select:V2SI\n-\t  (vec_concat:V4SI\n-\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-\t  (parallel [(const_int 0) (const_int 2)])))]\n-  \"TARGET_SPE\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    return \"evmergehi %0,%1,%2\";\n-  else\n-    return \"evmergelo %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"vec_perm01_v2si\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_select:V2SI\n-\t  (vec_concat:V4SI\n-\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-\t  (parallel [(const_int 0) (const_int 3)])))]\n-  \"TARGET_SPE\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    return \"evmergehilo %0,%1,%2\";\n-  else\n-    return \"evmergehilo %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"vec_perm11_v2si\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_select:V2SI\n-\t  (vec_concat:V4SI\n-\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-\t  (parallel [(const_int 1) (const_int 3)])))]\n-  \"TARGET_SPE\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    return \"evmergelo %0,%1,%2\";\n-  else\n-    return \"evmergehi %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"vec_perm10_v2si\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(vec_select:V2SI\n-\t  (vec_concat:V4SI\n-\t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-\t  (parallel [(const_int 1) (const_int 2)])))]\n-  \"TARGET_SPE\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    return \"evmergelohi %0,%1,%2\";\n-  else\n-    return \"evmergelohi %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_expand \"vec_perm_constv2si\"\n-  [(match_operand:V2SI 0 \"gpc_reg_operand\" \"\")\n-   (match_operand:V2SI 1 \"gpc_reg_operand\" \"\")\n-   (match_operand:V2SI 2 \"gpc_reg_operand\" \"\")\n-   (match_operand:V2SI 3 \"\" \"\")]\n-  \"TARGET_SPE\"\n-{\n-  if (rs6000_expand_vec_perm_const (operands))\n-    DONE;\n-  else\n-    FAIL;\n-})\n-\n-(define_expand \"spe_evmergehi\"\n-  [(match_operand:V2SI 0 \"register_operand\" \"\")\n-   (match_operand:V2SI 1 \"register_operand\" \"\")\n-   (match_operand:V2SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SPE\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vec_perm00_v2si (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_vec_perm11_v2si (operands[0], operands[2], operands[1]));\n-  DONE;\n-})\n-\n-(define_expand \"spe_evmergehilo\"\n-  [(match_operand:V2SI 0 \"register_operand\" \"\")\n-   (match_operand:V2SI 1 \"register_operand\" \"\")\n-   (match_operand:V2SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SPE\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vec_perm01_v2si (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_vec_perm01_v2si (operands[0], operands[2], operands[1]));\n-  DONE;\n-})\n-\n-(define_expand \"spe_evmergelo\"\n-  [(match_operand:V2SI 0 \"register_operand\" \"\")\n-   (match_operand:V2SI 1 \"register_operand\" \"\")\n-   (match_operand:V2SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SPE\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vec_perm11_v2si (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_vec_perm00_v2si (operands[0], operands[2], operands[1]));\n-  DONE;\n-})\n-\n-(define_expand \"spe_evmergelohi\"\n-  [(match_operand:V2SI 0 \"register_operand\" \"\")\n-   (match_operand:V2SI 1 \"register_operand\" \"\")\n-   (match_operand:V2SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SPE\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vec_perm10_v2si (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_vec_perm10_v2si (operands[0], operands[2], operands[1]));\n-  DONE;\n-})\n-\n-;; End of integer vector permutation instructions.\n-\n-(define_insn \"spe_evnand\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (not:V2SI (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                            (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_SPE\"\n-  \"evnand %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"negv2si2\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (neg:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evneg %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evnor\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (not:V2SI  (ior:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                             (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_SPE\"\n-  \"evnor %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evorc\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (ior:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (not:V2SI (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_SPE\"\n-  \"evorc %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evor\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (ior:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evor %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evrlwi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")] 519))]\n-  \"TARGET_SPE\"\n-  \"evrlwi %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evrlw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 520))]\n-  \"TARGET_SPE\"\n-  \"evrlw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evrndw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 521))]\n-  \"TARGET_SPE\"\n-  \"evrndw %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsel\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:CC 3 \"cc_reg_operand\" \"y\")] 522))]\n-  \"TARGET_SPE\"\n-  \"evsel %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"spe_evsel_fs\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:CC 3 \"cc_reg_operand\" \"y\")] 725))]\n-  \"TARGET_SPE\"\n-  \"evsel %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"veccmp\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"spe_evslwi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")]\n-\t\t     523))]\n-  \"TARGET_SPE\"\n-  \"evslwi %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evslw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 524))]\n-  \"TARGET_SPE\"\n-  \"evslw %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsrwis\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")]\n-\t\t     525))]\n-  \"TARGET_SPE\"\n-  \"evsrwis %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsrwiu\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")]\n-\t\t     526))]\n-  \"TARGET_SPE\"\n-  \"evsrwiu %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsrws\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 527))]\n-  \"TARGET_SPE\"\n-  \"evsrws %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsrwu\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 528))]\n-  \"TARGET_SPE\"\n-  \"evsrwu %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; vector xors\n-\n-(define_insn \"xorv2si3\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (xor:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evxor %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"xorv4hi3\"\n-  [(set (match_operand:V4HI 0 \"gpc_reg_operand\" \"=r\")\n-        (xor:V4HI (match_operand:V4HI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:V4HI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evxor %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"xorv1di3\"\n-  [(set (match_operand:V1DI 0 \"gpc_reg_operand\" \"=r\")\n-        (xor:V1DI (match_operand:V1DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:V1DI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evxor %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; end of vector xors\n-\n-(define_insn \"spe_evfsabs\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evfsabs %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsadd\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (plus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evfsadd %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfscfsf\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 529))]\n-  \"TARGET_SPE\"\n-  \"evfscfsf %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfscfsi\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (float:V2SF (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evfscfsi %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfscfuf\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 530))]\n-  \"TARGET_SPE\"\n-  \"evfscfuf %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfscfui\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SF [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")] 701))]\n-  \"TARGET_SPE\"\n-  \"evfscfui %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsctsf\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 531))]\n-  \"TARGET_SPE\"\n-  \"evfsctsf %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsctsi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 532))]\n-  \"TARGET_SPE\"\n-  \"evfsctsi %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsctsiz\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 533))]\n-  \"TARGET_SPE\"\n-  \"evfsctsiz %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsctuf\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 534))]\n-  \"TARGET_SPE\"\n-  \"evfsctuf %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsctui\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 535))]\n-  \"TARGET_SPE\"\n-  \"evfsctui %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsctuiz\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 536))]\n-  \"TARGET_SPE\"\n-  \"evfsctuiz %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsdiv\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (div:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evfsdiv %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfdiv\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsmul\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evfsmul %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsnabs\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")] 537))]\n-  \"TARGET_SPE\"\n-  \"evfsnabs %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfsneg\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (neg:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evfsneg %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evfssub\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=r\")\n-        (minus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evfssub %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; SPE SIMD load instructions.\n-\n-;; Only the hardware engineer who designed the SPE understands the\n-;; plethora of load and store instructions ;-).  We have no way of\n-;; differentiating between them with RTL so use an unspec of const_int 0 \n-;; to avoid identical RTL.\n-\n-(define_insn \"spe_evldd\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 544)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evldd %0,%2*8(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlddx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 545)]\n-  \"TARGET_SPE\"\n-  \"evlddx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evldh\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 546)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evldh %0,%2*8(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evldhx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 547)]\n-  \"TARGET_SPE\"\n-  \"evldhx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evldw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 548)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evldw %0,%2*8(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evldwx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 549)]\n-  \"TARGET_SPE\"\n-  \"evldwx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhe\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 550)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlwhe %0,%2*4(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhex\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 551)]\n-  \"TARGET_SPE\"\n-  \"evlwhex %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhos\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 552)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlwhos %0,%2*4(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhosx\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 553)]\n-  \"TARGET_SPE\"\n-  \"evlwhosx %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhou\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"i\"))))\n-   (unspec [(const_int 0)] 554)]\n-  \"TARGET_SPE && INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 31\"\n-  \"evlwhou %0,%2*4(%1)\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evlwhoux\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mem:V2SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (unspec [(const_int 0)] 555)]\n-  \"TARGET_SPE\"\n-  \"evlwhoux %0,%1,%2\"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_brinc\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:SI [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r\")] 556))]\n-  \"TARGET_SPE\"\n-  \"brinc %0,%1,%2\"\n-  [(set_attr \"type\" \"brinc\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhegsmfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 557))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhegsmfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhegsmfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 558))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhegsmfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhegsmiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 559))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhegsmiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhegsmian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 560))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhegsmian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhegumiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 561))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhegumiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhegumian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 562))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhegumian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmfaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 563))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhesmfaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmfanw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 564))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhesmfanw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 565))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhesmfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 566))]\n-  \"TARGET_SPE\"\n-  \"evmhesmf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 567))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhesmiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 568))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhesmianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 569))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhesmia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhesmi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 570))]\n-  \"TARGET_SPE\"\n-  \"evmhesmi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhessfaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 571))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhessfaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhessfanw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 572))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhessfanw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhessfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 573))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhessfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhessf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 574))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evmhessf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhessiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 575))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhessiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhessianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 576))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhessianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmheumiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 577))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmheumiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmheumianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 578))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmheumianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmheumia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 579))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmheumia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmheumi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 580))]\n-  \"TARGET_SPE\"\n-  \"evmheumi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmheusiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 581))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmheusiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmheusianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 582))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmheusianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhogsmfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 583))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhogsmfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhogsmfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 584))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhogsmfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhogsmiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 585))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhogsmiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhogsmian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 586))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhogsmian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhogumiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 587))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhogumiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhogumian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 588))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhogumian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmfaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 589))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhosmfaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmfanw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 590))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhosmfanw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 591))]\n-  \"TARGET_SPE\"\n-  \"evmhosmfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 592))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhosmf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 593))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhosmiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 594))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhosmianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 595))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhosmia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhosmi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 596))]\n-  \"TARGET_SPE\"\n-  \"evmhosmi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhossfaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 597))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhossfaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhossfanw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 598))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhossfanw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhossfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 599))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhossfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhossf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 600))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evmhossf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhossiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 601))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhossiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhossianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 602))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhossianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhoumiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 603))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhoumiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhoumianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 604))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhoumianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhoumia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 605))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhoumia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhoumi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 606))]\n-  \"TARGET_SPE\"\n-  \"evmhoumi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhousiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 607))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhousiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmhousianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 608))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmhousianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmmlssfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 609))]\n-  \"TARGET_SPE\"\n-  \"evmmlssfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmmlssf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 610))]\n-  \"TARGET_SPE\"\n-  \"evmmlssf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 611))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 612))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 613))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 614))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhssfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 615))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhssfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhusian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 626))]\n-  \"TARGET_SPE\"\n-  \"evmwhusian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhssf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 628))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evmwhssf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhumia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 629))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhumia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhumi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 630))]\n-  \"TARGET_SPE\"\n-  \"evmwhumi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlsmiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 635))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlsmiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlsmianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 636))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlsmianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlssiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 641))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlssiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlssianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 642))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlssianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlumiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 643))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlumiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlumianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 644))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlumianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlumia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 645))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlumia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlumi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 646))]\n-  \"TARGET_SPE\"\n-  \"evmwlumi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlusiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 647))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlusiaaw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwlusianw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 648))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwlusianw %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 649))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwsmfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 650))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwsmfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 651))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwsmfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 652))]\n-  \"TARGET_SPE\"\n-  \"evmwsmf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 653))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwsmiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 654))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwsmian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 655))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwsmia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwsmi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 656))]\n-  \"TARGET_SPE\"\n-  \"evmwsmi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwssfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 657))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwssfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwssfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 658))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwssfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwssfa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 659))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwssfa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwssf\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 660))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evmwssf %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwumiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 661))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwumiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwumian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 662))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwumian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwumia\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 663))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwumia %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwumi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 664))]\n-  \"TARGET_SPE\"\n-  \"evmwumi %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"addv2si3\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (plus:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evaddw %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evaddusiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 673))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evaddusiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evaddumiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 674))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evaddumiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evaddssiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 675))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evaddssiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evaddsmiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 676))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evaddsmiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evaddiw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")] 677))]\n-  \"TARGET_SPE\"\n-  \"evaddiw %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsubifw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"immediate_operand\" \"i\")] 678))]\n-  \"TARGET_SPE\"\n-  \"evsubifw %0,%2,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"subv2si3\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (minus:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_SPE\"\n-  \"evsubfw %0,%2,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsubfusiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 679))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evsubfusiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsubfumiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 680))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evsubfumiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsubfssiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 681))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evsubfssiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsubfsmiaaw\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t      (reg:V2SI SPE_ACC_REGNO)] 682))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evsubfsmiaaw %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmra\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\"))\n-   (set (reg:V2SI SPE_ACC_REGNO)\n-\t(unspec:V2SI [(match_dup 1)] 726))]\n-  \"TARGET_SPE\"\n-  \"evmra %0,%1\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"divv2si3\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (div:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evdivws %0,%1,%2\"\n-  [(set_attr \"type\" \"vecdiv\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evdivwu\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (udiv:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")))\n-      (clobber (reg:SI SPEFSCR_REGNO))]\n-  \"TARGET_SPE\"\n-  \"evdivwu %0,%1,%2\"\n-  [(set_attr \"type\" \"vecdiv\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsplatfi\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:QI 1 \"immediate_operand\" \"i\")] 684))]\n-  \"TARGET_SPE\"\n-  \"evsplatfi %0,%1\"\n-  [(set_attr \"type\" \"vecperm\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evsplati\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:QI 1 \"immediate_operand\" \"i\")] 685))]\n-  \"TARGET_SPE\"\n-  \"evsplati %0,%1\"\n-  [(set_attr \"type\" \"vecperm\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstdd\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 686)]\n-  \"TARGET_SPE && INTVAL (operands[1]) >= 0 && INTVAL (operands[1]) <= 31\"\n-  \"evstdd %2,%1*8(%0)\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstddx\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 687)]\n-  \"TARGET_SPE\"\n-  \"evstddx %2,%0,%1\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstdh\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 688)]\n-  \"TARGET_SPE && INTVAL (operands[1]) >= 0 && INTVAL (operands[1]) <= 31\"\n-  \"evstdh %2,%1*8(%0)\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstdhx\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 689)]\n-  \"TARGET_SPE\"\n-  \"evstdhx %2,%0,%1\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstdw\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 690)]\n-  \"TARGET_SPE && INTVAL (operands[1]) >= 0 && INTVAL (operands[1]) <= 31\"\n-  \"evstdw %2,%1*8(%0)\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstdwx\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 691)]\n-  \"TARGET_SPE\"\n-  \"evstdwx %2,%0,%1\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwhe\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 692)]\n-  \"TARGET_SPE && INTVAL (operands[1]) >= 0 && INTVAL (operands[1]) <= 31\"\n-  \"evstwhe %2,%1*4(%0)\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwhex\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 693)]\n-  \"TARGET_SPE\"\n-  \"evstwhex %2,%0,%1\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwho\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 694)]\n-  \"TARGET_SPE && INTVAL (operands[1]) >= 0 && INTVAL (operands[1]) <= 31\"\n-  \"evstwho %2,%1*4(%0)\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwhox\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 695)]\n-  \"TARGET_SPE\"\n-  \"evstwhox %2,%0,%1\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwwe\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 696)]\n-  \"TARGET_SPE && INTVAL (operands[1]) >= 0 && INTVAL (operands[1]) <= 31\"\n-  \"evstwwe %2,%1*4(%0)\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwwex\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 697)]\n-  \"TARGET_SPE\"\n-  \"evstwwex %2,%0,%1\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwwo\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:QI 1 \"immediate_operand\" \"i\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 698)]\n-  \"TARGET_SPE && INTVAL (operands[1]) >= 0 && INTVAL (operands[1]) <= 31\"\n-  \"evstwwo %2,%1*4(%0)\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evstwwox\"\n-  [(set (mem:V2SI (plus:SI (match_operand:SI 0 \"gpc_reg_operand\" \"b\")\n-\t\t\t   (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-\t(match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n-   (unspec [(const_int 0)] 699)]\n-  \"TARGET_SPE\"\n-  \"evstwwox %2,%0,%1\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr  \"length\" \"4\")])\n-\n-;; Double-precision floating point instructions.\n-\n-;; FIXME: Add o=r option.\n-(define_insn \"*frob_<SPE64:mode>_<DITI:mode>\"\n-  [(set (match_operand:SPE64 0 \"nonimmediate_operand\" \"=r,r\")\n-        (subreg:SPE64 (match_operand:DITI 1 \"input_operand\" \"r,m\") 0))]\n-  \"TARGET_SPE && <SPE64:MODE>mode != DFmode\"\n-{\n-  switch (which_alternative)\n-    {\n-    default:\n-      gcc_unreachable ();\n-    case 0:\n-      if (WORDS_BIG_ENDIAN)\n-\treturn \"evmergelo %0,%1,%L1\";\n-      else\n-\treturn \"evmergelo %0,%L1,%1\";\n-    case 1:\n-      return \"evldd%X1 %0,%y1\";\n-    }\n-})\n-\n-(define_insn \"*frob_<SPE64:mode>_ti_8\"\n-  [(set (match_operand:SPE64 0 \"nonimmediate_operand\" \"=r\")\n-        (subreg:SPE64 (match_operand:TI 1 \"input_operand\" \"r\") 8))]\n-  \"TARGET_SPE && <SPE64:MODE>mode != DFmode\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    return \"evmergelo %0,%Y1,%Z1\";\n-  else\n-    return \"evmergelo %0,%Z1,%Y1\";\n-})\n-\n-(define_insn \"*frob_<mode>_di_2\"\n-  [(set (subreg:DI (match_operand:SPE64TF 0 \"nonimmediate_operand\" \"+&r,r\") 0)\n-        (match_operand:DI 1 \"input_operand\" \"r,m\"))]\n-  \"TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-{\n-  switch (which_alternative)\n-    {\n-    default:\n-      gcc_unreachable ();\n-    case 0:\n-      if (WORDS_BIG_ENDIAN)\n-\treturn \"evmergelo %0,%1,%L1\";\n-      else\n-\treturn \"evmergelo %0,%L1,%1\";\n-    case 1:\n-      return \"evldd%X1 %0,%y1\";\n-    }\n-})\n-\n-(define_insn \"*frob_di_<mode>\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r\")\n-        (subreg:DI (match_operand:SPE64TF 1 \"input_operand\" \"r\") 0))]\n-  \"TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    return \"evmergehi %0,%1,%1\\;mr %L0,%1\";\n-  else\n-    return \"evmergehi %L0,%1,%1\\;mr %0,%1\";\n-}\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"*frob_<DITI:mode>_<SPE64:mode>_2\"\n-  [(set (subreg:SPE64 (match_operand:DITI 0 \"register_operand\" \"+&r,r\") 0)\n-\t(match_operand:SPE64 1 \"input_operand\" \"r,m\"))]\n-  \"TARGET_SPE && <SPE64:MODE>mode != DFmode\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    default: \n-      gcc_unreachable ();\n-    case 0:\n-      if (WORDS_BIG_ENDIAN)\n-\treturn \\\"evmergehi %0,%1,%1\\;mr %L0,%1\\\";\n-      else\n-\treturn \\\"evmergehi %L0,%1,%1\\;mr %0,%1\\\";\n-    case 1:\n-      /* If the address is not offsettable we need to load the whole\n-\t doubleword into a 64-bit register and then copy the high word\n-\t to form the correct output layout.  */\n-      if (!offsettable_nonstrict_memref_p (operands[1]))\n-\t{\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    return \\\"evldd%X1 %L0,%y1\\;evmergehi %0,%L0,%L0\\\";\n-\t  else\n-\t    return \\\"evldd%X1 %0,%y1\\;evmergehi %L0,%0,%0\\\";\n-\t}\n-      /* If the low-address word is used in the address, we must load\n-\tit last.  Otherwise, load it first.  Note that we cannot have\n-\tauto-increment in that case since the address register is\n-\tknown to be dead.  */\n-      if (refers_to_regno_p (REGNO (operands[0]), operands[1]))\n-\t{\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    return \\\"lwz %L0,%L1\\;lwz %0,%1\\\";\n-\t  else\n-\t    return \\\"lwz %0,%1\\;lwz %L0,%L1\\\";\n-\t}\n-      else\n-\t{\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    return \\\"lwz%U1%X1 %0,%1\\;lwz %L0,%L1\\\";\n-\t  else\n-\t    return \\\"lwz%U1%X1 %L0,%L1\\;lwz %0,%1\\\";\n-\t}\n-    }\n-}\"\n-  [(set_attr \"length\" \"8,8\")])\n-\n-; As the above, but TImode at offset 8.\n-(define_insn \"*frob_ti_<mode>_8_2\"\n-  [(set (subreg:SPE64 (match_operand:TI 0 \"register_operand\" \"+&r,r\") 8)\n-\t(match_operand:SPE64 1 \"input_operand\" \"r,m\"))]\n-  \"TARGET_SPE && <MODE>mode != DFmode\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    default: \n-      gcc_unreachable ();\n-    case 0:\n-      if (WORDS_BIG_ENDIAN)\n-\treturn \\\"evmergehi %Y0,%1,%1\\;mr %Z0,%1\\\";\n-      else\n-\treturn \\\"evmergehi %Z0,%1,%1\\;mr %Y0,%1\\\";\n-    case 1:\n-      if (!offsettable_nonstrict_memref_p (operands[1]))\n-\t{\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    return \\\"evldd%X1 %Z0,%y1\\;evmergehi %Y0,%Z0,%Z0\\\";\n-\t  else\n-\t    return \\\"evldd%X1 %Y0,%y1\\;evmergehi %Z0,%Y0,%Y0\\\";\n-\t}\n-      if (refers_to_regno_p (REGNO (operands[0]), operands[1]))\n-\t{\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    return \\\"lwz %Z0,%L1\\;lwz %Y0,%1\\\";\n-\t  else\n-\t    return \\\"lwz %Y0,%1\\;lwz %Z0,%L1\\\";\n-\t}\n-      else\n-\t{\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    return \\\"lwz%U1%X1 %Y0,%1\\;lwz %Z0,%L1\\\";\n-\t  else\n-\t    return \\\"lwz%U1%X1 %Z0,%L1\\;lwz %Y0,%1\\\";\n-\t}\n-    }\n-}\"\n-  [(set_attr \"length\" \"8,8\")])\n-\n-(define_insn \"mov_si<mode>_e500_subreg0_be\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,&r\") 0)\n-\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"WORDS_BIG_ENDIAN\n-   && (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n-  \"@\n-   evmergelo %0,%1,%0\n-   evmergelohi %0,%0,%0\\;lwz%U1%X1 %0,%1\\;evmergelohi %0,%0,%0\"\n-  [(set_attr \"length\" \"4,12\")])\n-\n-(define_insn \"*mov_si<mode>_e500_subreg0_le\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,r\") 0)\n-\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"!WORDS_BIG_ENDIAN\n-   && (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n-  \"@\n-   mr %0,%1\n-   lwz%U1%X1 %0,%1\")\n-\n-(define_insn_and_split \"*mov_si<mode>_e500_subreg0_elf_low_be\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 0)\n-\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t   (match_operand 2 \"\" \"\")))]\n-  \"WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\n-   && TARGET_ELF && !TARGET_64BIT && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(pc)]\n-{\n-  rtx tmp = gen_reg_rtx (SImode);\n-  emit_insn (gen_elf_low (tmp, operands[1], operands[2]));\n-  emit_insn (gen_mov_si<mode>_e500_subreg0_be (operands[0], tmp));\n-  DONE;\n-}\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"*mov_si<mode>_e500_subreg0_elf_low_le\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 0)\n-\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t   (match_operand 2 \"\" \"\")))]\n-  \"!WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\n-   && TARGET_ELF && !TARGET_64BIT\"\n-  \"addi %0,%1,%K2\")\n-\n-;; ??? Could use evstwwe for memory stores in some cases, depending on\n-;; the offset.\n-(define_insn \"*mov_si<mode>_e500_subreg0_2_be\"\n-  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"=r,m\")\n-\t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"+r,&r\") 0))]\n-  \"WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-  \"@\n-   evmergelohi %0,%1,%1\n-   evmergelohi %1,%1,%1\\;stw%U0%X0 %1,%0\"\n-  [(set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*mov_si<mode>_e500_subreg0_2_le\"\n-  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"=r,m\")\n-\t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"r,r\") 0))]\n-  \"!WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-  \"@\n-   mr %0,%1\n-   stw%U0%X0 %1,%0\")\n-\n-(define_insn \"*mov_si<mode>_e500_subreg4_be\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,r\") 4)\n-\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-  \"@\n-   mr %0,%1\n-   lwz%U1%X1 %0,%1\")\n-\n-(define_insn \"mov_si<mode>_e500_subreg4_le\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,&r\") 4)\n-\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"!WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-  \"@\n-   evmergelo %0,%1,%0\n-   evmergelohi %0,%0,%0\\;lwz%U1%X1 %0,%1\\;evmergelohi %0,%0,%0\"\n-  [(set_attr \"length\" \"4,12\")])\n-\n-(define_insn \"*mov_si<mode>_e500_subreg4_elf_low_be\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 4)\n-\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t   (match_operand 2 \"\" \"\")))]\n-  \"WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\n-   && TARGET_ELF && !TARGET_64BIT\"\n-  \"addi %0,%1,%K2\")\n-\n-(define_insn_and_split \"*mov_si<mode>_e500_subreg4_elf_low_le\"\n-  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 4)\n-\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-\t\t   (match_operand 2 \"\" \"\")))]\n-  \"!WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\n-   && TARGET_ELF && !TARGET_64BIT && can_create_pseudo_p ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(pc)]\n-{\n-  rtx tmp = gen_reg_rtx (SImode);\n-  emit_insn (gen_elf_low (tmp, operands[1], operands[2]));\n-  emit_insn (gen_mov_si<mode>_e500_subreg4_le (operands[0], tmp));\n-  DONE;\n-}\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"*mov_si<mode>_e500_subreg4_2_be\"\n-  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"=r,m\")\n-\t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"r,r\") 4))]\n-  \"WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-  \"@\n-   mr %0,%1\n-   stw%U0%X0 %1,%0\")\n-\n-(define_insn \"*mov_si<mode>_e500_subreg4_2_le\"\n-  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"=r,m\")\n-\t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"+r,&r\") 4))]\n-  \"!WORDS_BIG_ENDIAN\n-   && TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode\"\n-  \"@\n-   evmergelohi %0,%1,%1\n-   evmergelohi %1,%1,%1\\;stw%U0%X0 %1,%0\"\n-  [(set_attr \"length\" \"4,8\")])\n-\n-;; Vector move instructions.\n-\n-(define_expand \"movv2si\"\n-  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2SI 1 \"any_operand\" \"\"))]\n-  \"TARGET_SPE\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V2SImode); DONE; }\")\n-\n-(define_insn \"*movv2si_internal\"\n-  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"=m,r,r,r\")\n-\t(match_operand:V2SI 1 \"input_operand\" \"r,m,r,W\"))]\n-  \"TARGET_SPE\n-   && (gpc_reg_operand (operands[0], V2SImode)\n-       || gpc_reg_operand (operands[1], V2SImode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    case 0: return \\\"evstdd%X0 %1,%y0\\\";\n-    case 1: return \\\"evldd%X1 %0,%y1\\\";\n-    case 2: return \\\"evor %0,%1,%1\\\";\n-    case 3: return output_vec_const_move (operands);\n-    default: gcc_unreachable ();\n-    }\n-}\"\n-  [(set_attr \"type\" \"vecload,vecstore,*,*\")\n-   (set_attr \"length\" \"*,*,*,12\")])\n-\n-(define_split\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"\")\n-\t(match_operand:V2SI 1 \"zero_constant\" \"\"))]\n-  \"TARGET_SPE && reload_completed\"\n-  [(set (match_dup 0)\n-\t(xor:V2SI (match_dup 0) (match_dup 0)))]\n-  \"\")\n-\n-(define_expand \"movv1di\"\n-  [(set (match_operand:V1DI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V1DI 1 \"any_operand\" \"\"))]\n-  \"TARGET_SPE\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V1DImode); DONE; }\")\n-\n-(define_insn \"*movv1di_internal\"\n-  [(set (match_operand:V1DI 0 \"nonimmediate_operand\" \"=m,r,r,r\")\n-\t(match_operand:V1DI 1 \"input_operand\" \"r,m,r,W\"))]\n-  \"TARGET_SPE\n-   && (gpc_reg_operand (operands[0], V1DImode)\n-       || gpc_reg_operand (operands[1], V1DImode))\"\n-  \"@\n-   evstdd%X0 %1,%y0\n-   evldd%X1 %0,%y1\n-   evor %0,%1,%1\n-   evxor %0,%0,%0\"\n-  [(set_attr \"type\" \"vecload,vecstore,*,*\")\n-   (set_attr \"length\" \"*,*,*,*\")])\n-\n-(define_expand \"movv4hi\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V4HI 1 \"any_operand\" \"\"))]\n-  \"TARGET_SPE\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V4HImode); DONE; }\")\n-\n-(define_insn \"*movv4hi_internal\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"=m,r,r,r\")\n-\t(match_operand:V4HI 1 \"input_operand\" \"r,m,r,W\"))]\n-  \"TARGET_SPE\n-   && (gpc_reg_operand (operands[0], V4HImode)\n-       || gpc_reg_operand (operands[1], V4HImode))\"\n-  \"@\n-   evstdd%X0 %1,%y0\n-   evldd%X1 %0,%y1\n-   evor %0,%1,%1\n-   evxor %0,%0,%0\"\n-  [(set_attr \"type\" \"vecload\")])\n-\n-(define_expand \"movv2sf\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2SF 1 \"any_operand\" \"\"))]\n-  \"TARGET_SPE || TARGET_PAIRED_FLOAT\"\n-  \"{ rs6000_emit_move (operands[0], operands[1], V2SFmode); DONE; }\")\n-\n-(define_insn \"*movv2sf_internal\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=m,r,r,r\")\n-\t(match_operand:V2SF 1 \"input_operand\" \"r,m,r,W\"))]\n-  \"TARGET_SPE\n-   && (gpc_reg_operand (operands[0], V2SFmode)\n-       || gpc_reg_operand (operands[1], V2SFmode))\"\n-  \"@\n-   evstdd%X0 %1,%y0\n-   evldd%X1 %0,%y1\n-   evor %0,%1,%1\n-   evxor %0,%0,%0\"\n-  [(set_attr \"type\" \"vecload,vecstore,*,*\")\n-   (set_attr \"length\" \"*,*,*,*\")])\n-\n-;; End of vector move instructions.\n-\n-(define_insn \"spe_evmwhssfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 702))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhssfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhssmaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 703))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhssmaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 704))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 705))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhusiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 706))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhusiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhumiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 707))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhumiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhssfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 708))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhssfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhssian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 709))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhssian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 710))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhsmian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 711))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhsmian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhumian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 713))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhumian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgssfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 714))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgssfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgsmfaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 715))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgsmfaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgsmiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 716))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgsmiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgumiaa\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 717))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgumiaa %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgssfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 718))\n-   (clobber (reg:SI SPEFSCR_REGNO))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgssfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgsmfan\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 719))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgsmfan %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgsmian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 720))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgsmian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_evmwhgumian\"\n-  [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:V2SI [(match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n-                      (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\")] 721))\n-   (set (reg:V2SI SPE_ACC_REGNO) (unspec:V2SI  [(const_int 0)] 0))]\n-  \"TARGET_SPE\"\n-  \"evmwhgumian %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")\n-   (set_attr  \"length\" \"4\")])\n-\n-(define_insn \"spe_mtspefscr\"\n-  [(set (reg:SI SPEFSCR_REGNO)\n-\t(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")]\n-\t\t\t    722))]\n-  \"TARGET_SPE\"\n-  \"mtspefscr %0\"\n-  [(set_attr \"type\" \"vecsimple\")])\n-\n-(define_insn \"spe_mfspefscr\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:SI [(reg:SI SPEFSCR_REGNO)] 723))]\n-  \"TARGET_SPE\"\n-  \"mfspefscr %0\"\n-  [(set_attr \"type\" \"vecsimple\")])\n-\n-;; MPC8540 single-precision FP instructions on GPRs.\n-;; We have 2 variants for each.  One for IEEE compliant math and one\n-;; for non IEEE compliant math.\n-\n-;; Out-of-line prologues and epilogues.\n-(define_insn \"*save_gpregs_spe\"\n-  [(match_parallel 0 \"any_parallel_operand\"\n-\t\t   [(clobber (reg:P LR_REGNO))\n-\t\t    (use (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n-\t\t    (use (reg:P 11))\n-\t\t    (set (match_operand:V2SI 2 \"memory_operand\" \"=m\")\n-\t\t\t (match_operand:V2SI 3 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_SPE_ABI\"\n-  \"bl %z1\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*restore_gpregs_spe\"\n- [(match_parallel 0 \"any_parallel_operand\"\n-\t\t  [(clobber (reg:P LR_REGNO))\n-\t\t   (use (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n-\t\t   (use (reg:P 11))\n-\t\t   (set (match_operand:V2SI 2 \"gpc_reg_operand\" \"=r\")\n-\t\t\t(match_operand:V2SI 3 \"memory_operand\" \"m\"))])]\n- \"TARGET_SPE_ABI\"\n- \"bl %z1\"\n- [(set_attr \"type\" \"branch\")\n-  (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*return_and_restore_gpregs_spe\"\n- [(match_parallel 0 \"any_parallel_operand\"\n-\t\t  [(return)\n-\t\t   (clobber (reg:P LR_REGNO))\n-\t\t   (use (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n-\t\t   (use (reg:P 11))\n-\t\t   (set (match_operand:V2SI 2 \"gpc_reg_operand\" \"=r\")\n-\t\t\t(match_operand:V2SI 3 \"memory_operand\" \"m\"))])]\n- \"TARGET_SPE_ABI\"\n- \"b %z1\"\n- [(set_attr \"type\" \"branch\")\n-  (set_attr \"length\" \"4\")])"}, {"sha": "a3d53e7f439229bb7933e6986b01d4bb648b6f7a", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e075a6ccbf3d92136e918661bb8dde5add99c9a2/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=e075a6ccbf3d92136e918661bb8dde5add99c9a2", "patch": "@@ -1309,98 +1309,3 @@\n     emit_insn (gen_vsx_extract_<VEC_F:mode> (operand0, vec, elt));\n     DONE;\n   })\n-\n-\f\n-;;; Expanders for vector insn patterns shared between the SPE and TARGET_PAIRED systems.\n-\n-(define_expand \"absv2sf2\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n-\t(abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PAIRED_FLOAT || TARGET_SPE\"\n-  \"\")\n-\n-(define_expand \"negv2sf2\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n-\t(neg:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PAIRED_FLOAT || TARGET_SPE\"\n-  \"\")\n-\n-(define_expand \"addv2sf3\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n-\t(plus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")\n-\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PAIRED_FLOAT || TARGET_SPE\"\n-  \"\n-{\n-  if (TARGET_SPE)\n-    {\n-      /* We need to make a note that we clobber SPEFSCR.  */\n-      rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n-\n-      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n-                                         gen_rtx_PLUS (V2SFmode, operands[1], operands[2]));\n-      XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n-      emit_insn (par);\n-      DONE;\n-    }\n-}\")\n-\n-(define_expand \"subv2sf3\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n-\t(minus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")\n-\t\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PAIRED_FLOAT || TARGET_SPE\"\n-  \"\n-{\n-  if (TARGET_SPE)\n-    {\n-      /* We need to make a note that we clobber SPEFSCR.  */\n-      rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n-\n-      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n-                                         gen_rtx_MINUS (V2SFmode, operands[1], operands[2]));\n-      XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n-      emit_insn (par);\n-      DONE;\n-    }\n-}\")\n-\n-(define_expand \"mulv2sf3\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n-\t(mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")\n-\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PAIRED_FLOAT || TARGET_SPE\"\n-  \"\n-{\n-  if (TARGET_SPE)\n-    {\n-      /* We need to make a note that we clobber SPEFSCR.  */\n-      rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n-\n-      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n-                                         gen_rtx_MULT (V2SFmode, operands[1], operands[2]));\n-      XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n-      emit_insn (par);\n-      DONE;\n-    }\n-}\")\n-\n-(define_expand \"divv2sf3\"\n-  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n-\t(div:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")\n-\t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PAIRED_FLOAT || TARGET_SPE\"\n-  \"\n-{\n-  if (TARGET_SPE)\n-    {\n-      /* We need to make a note that we clobber SPEFSCR.  */\n-      rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n-\n-      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n-                                         gen_rtx_DIV (V2SFmode, operands[1], operands[2]));\n-      XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n-      emit_insn (par);\n-      DONE;\n-    }\n-}\")"}]}