{"sha": "04a8ee2ff6a807f01302ae8539802d4f0df7f7ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhOGVlMmZmNmE4MDdmMDEzMDJhZTg1Mzk4MDJkNGYwZGY3ZjdlYQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-10-21T22:18:56Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-10-21T22:18:56Z"}, "message": "(emit_store_flag_force): New function.\n\nFrom-SVN: r12987", "tree": {"sha": "204ba1e05f08b39161251ee6c056fe481ea68ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204ba1e05f08b39161251ee6c056fe481ea68ace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a8ee2ff6a807f01302ae8539802d4f0df7f7ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a8ee2ff6a807f01302ae8539802d4f0df7f7ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a8ee2ff6a807f01302ae8539802d4f0df7f7ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a8ee2ff6a807f01302ae8539802d4f0df7f7ea/comments", "author": null, "committer": null, "parents": [{"sha": "17964a96fae4be2704714f768b709d1eeffa6bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17964a96fae4be2704714f768b709d1eeffa6bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17964a96fae4be2704714f768b709d1eeffa6bb8"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "8bd8d3fe996f6296564b819ddc33c5b896e3b561", "filename": "gcc/expmed.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a8ee2ff6a807f01302ae8539802d4f0df7f7ea/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a8ee2ff6a807f01302ae8539802d4f0df7f7ea/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=04a8ee2ff6a807f01302ae8539802d4f0df7f7ea", "patch": "@@ -4260,6 +4260,43 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \n   return tem;\n }\n+\n+/* Like emit_store_flag, but always succeeds.  */\n+\n+rtx\n+emit_store_flag_force (target, code, op0, op1, mode, unsignedp, normalizep)\n+     rtx target;\n+     enum rtx_code code;\n+     rtx op0, op1;\n+     enum machine_mode mode;\n+     int unsignedp;\n+     int normalizep;\n+{\n+  rtx tem, label;\n+\n+  /* First see if emit_store_flag can do the job.  */\n+  tem = emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep);\n+  if (tem != 0)\n+    return tem;\n+\n+  if (normalizep == 0)\n+    normalizep = 1;\n+\n+  /* If this failed, we have to do this with set/compare/jump/set code.  */\n+\n+  if (GET_CODE (target) != REG\n+      || reg_mentioned_p (target, op0) || reg_mentioned_p (target, op1))\n+    target = gen_reg_rtx (GET_MODE (target));\n+\n+  emit_move_insn (target, const0_rtx);\n+  tem = compare_from_rtx (op0, op1, code, unsignedp, mode, NULL_RTX, 0);\n+  if (GET_CODE (tem) == CONST_INT)\n+    return tem;\n+\n+  label = gen_label_rtx ();\n+  if (bcc_gen_fctn[(int) code] == 0)\n+    abort ();\n+\n   emit_jump_insn ((*bcc_gen_fctn[(int) code]) (label));\n   emit_move_insn (target, const1_rtx);\n   emit_label (label);"}]}