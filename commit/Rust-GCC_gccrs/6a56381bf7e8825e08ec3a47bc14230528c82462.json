{"sha": "6a56381bf7e8825e08ec3a47bc14230528c82462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE1NjM4MWJmN2U4ODI1ZTA4ZWMzYTQ3YmMxNDIzMDUyOGM4MjQ2Mg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-07-29T14:44:03Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-07-29T14:44:03Z"}, "message": "re PR fortran/31211 (wrong code generated for pointer returning function as actual argument)\n\n2007-07-29  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31211\n\t* trans-expr.c (gfc_conv_expr_reference): Add block for case of\n\tscalar pointer functions so that NULL result is correctly\n\thandled.\n\n\tPR fortran/32682\n\t*trans-array.c (gfc_trans_array_constructor): On detecting a\n\tmulti-dimensional parameter array, set the loop limits.\n\n2007-07-29  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31211\n\t* gfortran.dg/actual_pointer_function_1.f90: New test.\n\n\tPR fortran/32682\n\t* gfortran.dg/scalarize_parameter_array_1.f90: New test.\n\nFrom-SVN: r127044", "tree": {"sha": "b1baf655fd48fd016a7f4e4a7691ae4277de5174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1baf655fd48fd016a7f4e4a7691ae4277de5174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a56381bf7e8825e08ec3a47bc14230528c82462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a56381bf7e8825e08ec3a47bc14230528c82462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a56381bf7e8825e08ec3a47bc14230528c82462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a56381bf7e8825e08ec3a47bc14230528c82462/comments", "author": null, "committer": null, "parents": [{"sha": "c317bc4076ec88beb910e6cdf0fcd067035361fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c317bc4076ec88beb910e6cdf0fcd067035361fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c317bc4076ec88beb910e6cdf0fcd067035361fb"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "5f90ebc83cff7269009030bc2dc0c4dc863b4a8c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6a56381bf7e8825e08ec3a47bc14230528c82462", "patch": "@@ -1,3 +1,14 @@\n+2007-07-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31211\n+\t* trans-expr.c (gfc_conv_expr_reference): Add block for case of\n+\tscalar pointer functions so that NULL result is correctly\n+\thandled.\n+\n+\tPR fortran/32682\n+\t*trans-array.c (gfc_trans_array_constructor): On detecting a\n+\tmulti-dimensional parameter array, set the loop limits.\n+\n 2007-07-29  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/32906"}, {"sha": "63a1ea08fbcf866d19fbc93df797f72005297ec9", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=6a56381bf7e8825e08ec3a47bc14230528c82462", "patch": "@@ -1656,6 +1656,21 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n \n   /* See if the constructor determines the loop bounds.  */\n   dynamic = false;\n+\n+  if (ss->expr->shape && loop->dimen > 1 && loop->to[0] == NULL_TREE)\n+    {\n+      /* We have a multidimensional parameter.  */\n+      int n;\n+      for (n = 0; n < ss->expr->rank; n++)\n+      {\n+\tloop->from[n] = gfc_index_zero_node;\n+\tloop->to[n] = gfc_conv_mpz_to_tree (ss->expr->shape [n],\n+\t\t\t\t\t    gfc_index_integer_kind);\n+\tloop->to[n] = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n+\t\t\t\t   loop->to[n], gfc_index_one_node);\n+      }\n+    }\n+\n   if (loop->to[0] == NULL_TREE)\n     {\n       mpz_t size;"}, {"sha": "20ccdcc92d23216032d339fc1be8c13d693ee8c5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6a56381bf7e8825e08ec3a47bc14230528c82462", "patch": "@@ -3342,6 +3342,19 @@ gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr)\n       return;\n     }\n \n+  if (expr->expr_type == EXPR_FUNCTION\n+\t&& expr->symtree->n.sym->attr.pointer\n+\t&& !expr->symtree->n.sym->attr.dimension)\n+    {\n+      se->want_pointer = 1;\n+      gfc_conv_expr (se, expr);\n+      var = gfc_create_var (TREE_TYPE (se->expr), NULL);\n+      gfc_add_modify_expr (&se->pre, var, se->expr);\n+      se->expr = var;\n+      return;\n+    }\n+\n+\n   gfc_conv_expr (se, expr);\n \n   /* Create a temporary var to hold the value.  */"}, {"sha": "1954fb0de5f244149b39cb6b5a1425c7902a2488", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a56381bf7e8825e08ec3a47bc14230528c82462", "patch": "@@ -1,3 +1,11 @@\n+2007-07-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31211\n+\t* gfortran.dg/actual_pointer_function_1.f90: New test.\n+\n+\tPR fortran/32682\n+\t* gfortran.dg/scalarize_parameter_array_1.f90: New test.\n+\n 2007-07-29  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/32906"}, {"sha": "8fa882d93156c5d283378d8285e720f5ff80f5a0", "filename": "gcc/testsuite/gfortran.dg/actual_pointer_function_1.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90?ref=6a56381bf7e8825e08ec3a47bc14230528c82462", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\r\n+! Tests the fix for PR31211, in which the value of the result for\r\n+! cp_get_default_logger was stored as a temporary, rather than the\r\n+! pointer itself.  This caused a segfault when the result was\r\n+! nullified.\r\n+!\r\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\r\n+!\r\n+  TYPE cp_logger_type\r\n+    INTEGER :: a\r\n+  END TYPE cp_logger_type\r\n+\r\n+  if (cp_logger_log(cp_get_default_logger (0))) call abort ()\r\n+  if (.not. cp_logger_log(cp_get_default_logger (42))) call abort ()\r\n+\r\n+CONTAINS\r\n+\r\n+  logical function cp_logger_log(logger)\r\n+    TYPE(cp_logger_type), POINTER ::logger\r\n+    cp_logger_log = associated (logger) .and. (logger%a .eq. 42)\r\n+  END function\r\n+\r\n+  FUNCTION cp_get_default_logger(v) RESULT(res)\r\n+    TYPE(cp_logger_type), POINTER ::res\r\n+    integer :: v\r\n+    if (v .eq. 0) then\r\n+      NULLIFY(RES)\r\n+    else\r\n+      allocate(RES)\r\n+      res%a = v\r\n+    end if\r\n+  END FUNCTION cp_get_default_logger\r\n+END\r"}, {"sha": "86bc92df47ae30ec9b95b75015c3c3193f94b0ad", "filename": "gcc/testsuite/gfortran.dg/scalarize_parameter_array_1.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ftestsuite%2Fgfortran.dg%2Fscalarize_parameter_array_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a56381bf7e8825e08ec3a47bc14230528c82462/gcc%2Ftestsuite%2Fgfortran.dg%2Fscalarize_parameter_array_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fscalarize_parameter_array_1.f90?ref=6a56381bf7e8825e08ec3a47bc14230528c82462", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! Tests the fix for pr32682, in which the scalarization loop variables\n+! were not being determined when 'c' came first in an expression.\n+!\n+! Contributed by Janus Weil <jaydub66@gmail.com>\n+!\n+program matrix\n+\n+  implicit none\n+  real,dimension(2,2),parameter::c=reshape((/1,2,3,4/),(/2,2/))\n+  real,dimension(2,2)::m, n\n+\n+  m=f()+c\n+  if (any (m .ne. reshape((/2,3,4,5/),(/2,2/)))) call abort ()\n+  m=c+f()\n+  if (any (m .ne. reshape((/2,3,4,5/),(/2,2/)))) call abort ()\n+  call sub(m+f())\n+  if (any (n .ne. reshape((/3,4,5,6/),(/2,2/)))) call abort ()\n+  call sub(c+m)\n+  if (any (n .ne. reshape((/3,5,7,9/),(/2,2/)))) call abort ()\n+  call sub(f()+c)\n+  if (any (n .ne. reshape((/2,3,4,5/),(/2,2/)))) call abort ()\n+  call sub(c+f())\n+  if (any (n .ne. reshape((/2,3,4,5/),(/2,2/)))) call abort ()\n+\n+contains\n+\n+  function f()    \n+    implicit none\n+    real, dimension(2,2)::f\n+    f=1\n+  end function f\n+\n+  subroutine sub(a)\n+    implicit none\n+    real, dimension(2,2)::a\n+    n = a\n+  end subroutine sub\n+\n+end program matrix"}]}