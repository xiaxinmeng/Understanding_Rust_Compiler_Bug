{"sha": "20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwMDNjM2NjMzFiZjRlZjQwYTBlMDNiNGYyMzc2OThlM2UxYjBlYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-03-09T13:29:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-03-09T13:29:39Z"}, "message": "re PR tree-optimization/84775 (ICE on valid code at -O3: in check_loop_closed_ssa_def, at tree-ssa-loop-manip.c:709)\n\n2018-03-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84775\n\t* tree-if-conv.c (add_bb_predicate_gimplified_stmts): Delink\n\timmediate uses of predicate stmts and mark them modified.\n\n\tRevert\n\tPR tree-optimization/84178\n\t* tree-if-conv.c (combine_blocks): Move insert_gimplified_predicates\n\tto caller.\n\t(version_loop_for_if_conversion): Delay update_ssa call.\n\t(tree_if_conversion): Delay update_ssa until after predicate\n\tinsertion.\n\n\t* gcc.dg/torture/pr84775.c: New testcase.\n\nFrom-SVN: r258387", "tree": {"sha": "4c0479fbf827cfa5555c085313420f1d53b9511d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c0479fbf827cfa5555c085313420f1d53b9511d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4c6bd0821099f6b8c0f64a96ffd9d01a025c413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c6bd0821099f6b8c0f64a96ffd9d01a025c413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c6bd0821099f6b8c0f64a96ffd9d01a025c413"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "5b2f59bfd780c7916c5b92c160ff4068457cdf3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "patch": "@@ -1,3 +1,17 @@\n+2018-03-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84775\n+\t* tree-if-conv.c (add_bb_predicate_gimplified_stmts): Delink\n+\timmediate uses of predicate stmts and mark them modified.\n+\n+\tRevert\n+\tPR tree-optimization/84178\n+\t* tree-if-conv.c (combine_blocks): Move insert_gimplified_predicates\n+\tto caller.\n+\t(version_loop_for_if_conversion): Delay update_ssa call.\n+\t(tree_if_conversion): Delay update_ssa until after predicate\n+\tinsertion.\n+\n 2018-03-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/84763"}, {"sha": "de8b13f6598f593abd1f920de3e92a9905da6c59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "patch": "@@ -1,3 +1,8 @@\n+2018-03-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84775\n+\t* gcc.dg/torture/pr84775.c: New testcase.\n+\n 2018-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/84404"}, {"sha": "bb9466b3e2ba75e41e2e212768588de9b8b7f314", "filename": "gcc/testsuite/gcc.dg/torture/pr84775.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84775.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84775.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84775.c?ref=20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+int a, b, c, d, e, f;\n+\n+void fn1 ()\n+{\n+  while (e)\n+    for (f = 0; f < 4; f++)\n+      {\n+\tint h[1];\n+\tfor (; c; c++)\n+\t  if (a)\n+\t    break;\n+\td = a - 4;\n+\tif (d)\n+\t  b = h[0];\n+      }\n+}"}, {"sha": "c68a0c72d988a79f63c42419e1fb2a6b62c700af", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=20003c3cc31bf4ef40a0e03b4f237698e3e1b0ec", "patch": "@@ -257,6 +257,19 @@ set_bb_predicate_gimplified_stmts (basic_block bb, gimple_seq stmts)\n static inline void\n add_bb_predicate_gimplified_stmts (basic_block bb, gimple_seq stmts)\n {\n+  /* We might have updated some stmts in STMTS via force_gimple_operand\n+     calling fold_stmt and that producing multiple stmts.  Delink immediate\n+     uses so update_ssa after loop versioning doesn't get confused for\n+     the not yet inserted predicates.\n+     ???  This should go away once we reliably avoid updating stmts\n+     not in any BB.  */\n+  for (gimple_stmt_iterator gsi = gsi_start (stmts);\n+       !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      delink_stmt_imm_use (stmt);\n+      gimple_set_modified (stmt, true);\n+    }\n   gimple_seq_add_seq_without_update\n     (&(((struct bb_predicate *) bb->aux)->predicate_gimplified_stmts), stmts);\n }\n@@ -2371,6 +2384,7 @@ combine_blocks (struct loop *loop)\n   edge_iterator ei;\n \n   remove_conditions_and_labels (loop);\n+  insert_gimplified_predicates (loop);\n   predicate_all_scalar_phis (loop);\n \n   if (any_pred_load_store)\n@@ -2592,6 +2606,7 @@ version_loop_for_if_conversion (struct loop *loop)\n   gsi = gsi_last_bb (cond_bb);\n   gimple_call_set_arg (g, 1, build_int_cst (integer_type_node, new_loop->num));\n   gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+  update_ssa (TODO_update_ssa);\n   return new_loop;\n }\n \n@@ -2809,7 +2824,6 @@ tree_if_conversion (struct loop *loop)\n   unsigned int todo = 0;\n   bool aggressive_if_conv;\n   struct loop *rloop;\n-  bool need_update_ssa = false;\n \n  again:\n   rloop = NULL;\n@@ -2855,7 +2869,6 @@ tree_if_conversion (struct loop *loop)\n       struct loop *nloop = version_loop_for_if_conversion (vloop);\n       if (nloop == NULL)\n \tgoto cleanup;\n-      need_update_ssa = true;\n       if (vloop != loop)\n \t{\n \t  /* If versionable_outer_loop_p decided to version the\n@@ -2880,13 +2893,6 @@ tree_if_conversion (struct loop *loop)\n \t}\n     }\n \n-  /* Due to hard to fix issues we end up with immediate uses recorded\n-     for not yet inserted predicates which will confuse SSA update so\n-     we delayed this from after versioning to after predicate insertion.  */\n-  insert_gimplified_predicates (loop);\n-  if (need_update_ssa)\n-    update_ssa (TODO_update_ssa);\n-\n   /* Now all statements are if-convertible.  Combine all the basic\n      blocks into one huge basic block doing the if-conversion\n      on-the-fly.  */"}]}