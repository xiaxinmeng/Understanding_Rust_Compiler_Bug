{"sha": "7002a33d1ba81e4577d965fb9daaee146b31faa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwMmEzM2QxYmE4MWU0NTc3ZDk2NWZiOWRhYWVlMTQ2YjMxZmFhOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-04T11:08:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-04T12:02:09Z"}, "message": "tree-optimization/98855 - fix some vectorizer cost issues\n\nThis fixes us not costing vectorized bswap for SLP as well as\navoiding biasing to the vectorized side when costing single-argument\nPHIs.  Instead we assume coalescing here and cost them with zero cost\nfor both the scalar and vectorized code.\n\nThis doesn't fix the PR on its own.\n\n2021-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98855\n\t* tree-vect-loop.c (vectorizable_phi): Do not cost\n\tsingle-argument PHIs.\n\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Likewise.\n\t* tree-vect-stmts.c (vectorizable_bswap): Also perform\n\tcosting for SLP operation.", "tree": {"sha": "75b50e60b8279147077ef320209b7bd1ac11358f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75b50e60b8279147077ef320209b7bd1ac11358f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7002a33d1ba81e4577d965fb9daaee146b31faa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7002a33d1ba81e4577d965fb9daaee146b31faa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7002a33d1ba81e4577d965fb9daaee146b31faa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7002a33d1ba81e4577d965fb9daaee146b31faa8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e618faeb619ec02dabbef203a5575fca44a7f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e618faeb619ec02dabbef203a5575fca44a7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e618faeb619ec02dabbef203a5575fca44a7f7"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "f1f16e3b1b96eecc85bd94ab6ada1ff9e057ba1b", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7002a33d1ba81e4577d965fb9daaee146b31faa8/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7002a33d1ba81e4577d965fb9daaee146b31faa8/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=7002a33d1ba81e4577d965fb9daaee146b31faa8", "patch": "@@ -7777,8 +7777,12 @@ vectorizable_phi (vec_info *,\n \t\t\t       \"incompatible vector types for invariants\\n\");\n \t    return false;\n \t  }\n-      record_stmt_cost (cost_vec, SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node),\n-\t\t\tvector_stmt, stmt_info, vectype, 0, vect_body);\n+      /* For single-argument PHIs assume coalescing which means zero cost\n+\t for the scalar and the vector PHIs.  This avoids artificially\n+\t favoring the vector path (but may pessimize it in some cases).  */\n+      if (gimple_phi_num_args (as_a <gphi *> (stmt_info->stmt)) > 1)\n+\trecord_stmt_cost (cost_vec, SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node),\n+\t\t\t  vector_stmt, stmt_info, vectype, 0, vect_body);\n       STMT_VINFO_TYPE (stmt_info) = phi_info_type;\n       return true;\n     }"}, {"sha": "2305bbdec3ae8d69dea906c8b1f23e18620ac263", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7002a33d1ba81e4577d965fb9daaee146b31faa8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7002a33d1ba81e4577d965fb9daaee146b31faa8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=7002a33d1ba81e4577d965fb9daaee146b31faa8", "patch": "@@ -4297,6 +4297,13 @@ vect_bb_slp_scalar_cost (vec_info *vinfo,\n \t}\n       else if (vect_nop_conversion_p (orig_stmt_info))\n \tcontinue;\n+      /* For single-argument PHIs assume coalescing which means zero cost\n+\t for the scalar and the vector PHIs.  This avoids artificially\n+\t favoring the vector path (but may pessimize it in some cases).  */\n+      else if (is_a <gphi *> (orig_stmt_info->stmt)\n+\t       && gimple_phi_num_args\n+\t\t    (as_a <gphi *> (orig_stmt_info->stmt)) == 1)\n+\tcontinue;\n       else\n \tkind = scalar_stmt;\n       record_stmt_cost (cost_vec, 1, kind, orig_stmt_info,"}, {"sha": "0bc1cb1c5b4f6c1f0447241b4d31434bf7cca1a4", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7002a33d1ba81e4577d965fb9daaee146b31faa8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7002a33d1ba81e4577d965fb9daaee146b31faa8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7002a33d1ba81e4577d965fb9daaee146b31faa8", "patch": "@@ -3002,13 +3002,12 @@ vectorizable_bswap (vec_info *vinfo,\n \n       STMT_VINFO_TYPE (stmt_info) = call_vec_info_type;\n       DUMP_VECT_SCOPE (\"vectorizable_bswap\");\n-      if (! slp_node)\n-\t{\n-\t  record_stmt_cost (cost_vec,\n-\t\t\t    1, vector_stmt, stmt_info, 0, vect_prologue);\n-\t  record_stmt_cost (cost_vec,\n-\t\t\t    ncopies, vec_perm, stmt_info, 0, vect_body);\n-\t}\n+      record_stmt_cost (cost_vec,\n+\t\t\t1, vector_stmt, stmt_info, 0, vect_prologue);\n+      record_stmt_cost (cost_vec,\n+\t\t\tslp_node\n+\t\t\t? SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node) : ncopies,\n+\t\t\tvec_perm, stmt_info, 0, vect_body);\n       return true;\n     }\n "}]}