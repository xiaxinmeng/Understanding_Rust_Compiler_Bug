{"sha": "edf0c3ffb59d75c11e05bc722432dc554e275c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRmMGMzZmZiNTlkNzVjMTFlMDViYzcyMjQzMmRjNTU0ZTI3NWM3Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-21T13:17:22Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-21T13:17:45Z"}, "message": "contrib/mklog.py: Improve PR handling\n\nCo-authored-by: Martin Sebor <msebor@redhat.com>\n\ncontrib/ChangeLog:\n\n\t* mklog.py (bugzilla_url): Fetch also component.\n\t(pr_filename_regex): New.\n\t(get_pr_titles): Update PR string with correct format and component.\n\t(generate_changelog): Take additional PRs; extract PR from the\n\tfilename.\n\t(__main__): Add -b/--pr-numbers argument.\n\t* test_mklog.py (EXPECTED4): Update to expect a PR for the new file.", "tree": {"sha": "ff9d8e377cbeb0b16e22d2b3605c9629e559e231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff9d8e377cbeb0b16e22d2b3605c9629e559e231"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edf0c3ffb59d75c11e05bc722432dc554e275c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf0c3ffb59d75c11e05bc722432dc554e275c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf0c3ffb59d75c11e05bc722432dc554e275c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf0c3ffb59d75c11e05bc722432dc554e275c72/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad9c7087ef3904da89f2db6007b6d28b116087f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad9c7087ef3904da89f2db6007b6d28b116087f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad9c7087ef3904da89f2db6007b6d28b116087f"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "0b434f67971fdbf2c1bfd4819761e625802dee24", "filename": "contrib/mklog.py", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf0c3ffb59d75c11e05bc722432dc554e275c72/contrib%2Fmklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf0c3ffb59d75c11e05bc722432dc554e275c72/contrib%2Fmklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog.py?ref=edf0c3ffb59d75c11e05bc722432dc554e275c72", "patch": "@@ -42,6 +42,7 @@\n prnum_regex = re.compile(r'PR (?P<comp>[a-z+-]+)/(?P<num>[0-9]+)')\n dr_regex = re.compile(r'(\\/(\\/|\\*)|[Cc*!])\\s+(?P<dr>DR [0-9]+)')\n dg_regex = re.compile(r'{\\s+dg-(error|warning)')\n+pr_filename_regex = re.compile(r'(^|[\\W_])[Pp][Rr](?P<pr>\\d{4,})')\n identifier_regex = re.compile(r'^([a-zA-Z0-9_#].*)')\n comment_regex = re.compile(r'^\\/\\*')\n struct_regex = re.compile(r'^(class|struct|union|enum)\\s+'\n@@ -52,7 +53,7 @@\n template_and_param_regex = re.compile(r'<[^<>]*>')\n md_def_regex = re.compile(r'\\(define.*\\s+\"(.*)\"')\n bugzilla_url = 'https://gcc.gnu.org/bugzilla/rest.cgi/bug?id=%s&' \\\n-               'include_fields=summary'\n+               'include_fields=summary,component'\n \n function_extensions = {'.c', '.cpp', '.C', '.cc', '.h', '.inc', '.def', '.md'}\n \n@@ -118,27 +119,32 @@ def sort_changelog_files(changed_file):\n \n \n def get_pr_titles(prs):\n-    output = ''\n-    for pr in prs:\n+    output = []\n+    for idx, pr in enumerate(prs):\n         pr_id = pr.split('/')[-1]\n         r = requests.get(bugzilla_url % pr_id)\n         bugs = r.json()['bugs']\n         if len(bugs) == 1:\n-            output += '%s - %s\\n' % (pr, bugs[0]['summary'])\n-            print(output)\n+            prs[idx] = 'PR %s/%s' % (bugs[0]['component'], pr_id)\n+            out = '%s - %s\\n' % (prs[idx], bugs[0]['summary'])\n+            if out not in output:\n+                output.append(out)\n     if output:\n-        output += '\\n'\n-    return output\n+        output.append('')\n+    return '\\n'.join(output)\n \n \n-def generate_changelog(data, no_functions=False, fill_pr_titles=False):\n+def generate_changelog(data, no_functions=False, fill_pr_titles=False,\n+                       additional_prs=None):\n     changelogs = {}\n     changelog_list = []\n     prs = []\n     out = ''\n     diff = PatchSet(data)\n     global firstpr\n \n+    if additional_prs:\n+        prs = [pr for pr in additional_prs if pr not in prs]\n     for file in diff:\n         # skip files that can't be parsed\n         if file.path == '/dev/null':\n@@ -154,21 +160,32 @@ def generate_changelog(data, no_functions=False, fill_pr_titles=False):\n             # Only search first ten lines as later lines may\n             # contains commented code which a note that it\n             # has not been tested due to a certain PR or DR.\n+            this_file_prs = []\n             for line in list(file)[0][0:10]:\n                 m = pr_regex.search(line.value)\n                 if m:\n                     pr = m.group('pr')\n                     if pr not in prs:\n                         prs.append(pr)\n+                        this_file_prs.append(pr.split('/')[-1])\n                 else:\n                     m = dr_regex.search(line.value)\n                     if m:\n                         dr = m.group('dr')\n                         if dr not in prs:\n                             prs.append(dr)\n+                            this_file_prs.append(dr.split('/')[-1])\n                     elif dg_regex.search(line.value):\n                         # Found dg-warning/dg-error line\n                         break\n+            # PR number in the file name\n+            fname = os.path.basename(file.path)\n+            m = pr_filename_regex.search(fname)\n+            if m:\n+                pr = m.group('pr')\n+                pr2 = 'PR ' + pr\n+                if pr not in this_file_prs and pr2 not in prs:\n+                    prs.append(pr2)\n \n     if prs:\n         firstpr = prs[0]\n@@ -286,6 +303,9 @@ def update_copyright(data):\n     parser = argparse.ArgumentParser(description=help_message)\n     parser.add_argument('input', nargs='?',\n                         help='Patch file (or missing, read standard input)')\n+    parser.add_argument('-b', '--pr-numbers', action='store',\n+                        type=lambda arg: arg.split(','), nargs=\"?\",\n+                        help='Add the specified PRs (comma separated)')\n     parser.add_argument('-s', '--no-functions', action='store_true',\n                         help='Do not generate function names in ChangeLogs')\n     parser.add_argument('-p', '--fill-up-bug-titles', action='store_true',\n@@ -309,7 +329,7 @@ def update_copyright(data):\n         update_copyright(data)\n     else:\n         output = generate_changelog(data, args.no_functions,\n-                                    args.fill_up_bug_titles)\n+                                    args.fill_up_bug_titles, args.pr_numbers)\n         if args.changelog:\n             lines = open(args.changelog).read().split('\\n')\n             start = list(takewhile(lambda l: not l.startswith('#'), lines))"}, {"sha": "f5e9ecd577c8e95532f8508ca94d31d8358256ba", "filename": "contrib/test_mklog.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf0c3ffb59d75c11e05bc722432dc554e275c72/contrib%2Ftest_mklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf0c3ffb59d75c11e05bc722432dc554e275c72/contrib%2Ftest_mklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftest_mklog.py?ref=edf0c3ffb59d75c11e05bc722432dc554e275c72", "patch": "@@ -240,6 +240,9 @@\n '''\n \n EXPECTED4 = '''\\\n+\n+\tPR 50209\n+\n gcc/ChangeLog:\n \n \t* ipa-icf.c:"}]}