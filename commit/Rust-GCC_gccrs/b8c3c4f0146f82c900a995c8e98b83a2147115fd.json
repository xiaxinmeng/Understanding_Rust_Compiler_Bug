{"sha": "b8c3c4f0146f82c900a995c8e98b83a2147115fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjM2M0ZjAxNDZmODJjOTAwYTk5NWM4ZTk4YjgzYTIxNDcxMTVmZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-10-22T19:43:41Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-10-22T19:43:41Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (java/lang/ClassLoader.h): New target.\n\t* java/lang/natClassLoader.cc (_Jv_FindClass): Removed reference\n\tto `redirect'.\n\n\t* include/java-props.h (_Jv_Compiler_Properties): Changed\n\tdeclaration.\n\t* gcj/array.h (JvRunMain, _Jv_RunMain): Don't declare.\n\t* include/jvm.h (_Jv_GCSetInitialHeapSize,\n\t_Jv_GCSetMaximumHeapSize): Declare.\n\t(JvRunMain, _Jv_RunMain): Declare.\n\t(_Jv_SetMaximumHeapSize, _Jv_SetInitialHeapSize): Declare.\n\t* nogc.cc (_Jv_GCSetInitialHeapSize): New function.\n\t(_Jv_GCSetMaximumHeapSize): Likewise.\n\t* boehm.cc (_Jv_GCSetInitialHeapSize): New function.\n\t(_Jv_GCSetMaximumHeapSize): Likewise.\n\t* prims.cc (parse_heap_size): New function.\n\t(_Jv_SetInitialHeapSize): Likewise.\n\t(_Jv_SetMaximumHeapSize): Likewise.\n\t(_Jv_Compiler_Properties): New global.\n\t* gij.cc (help): New function.\n\t(version): Likewise.\n\t(heap_size): Likewise.\n\t(heap_max_size): Likewise.\n\t(main): Parse arguments.  Set _Jv_Compiler_Properties.\n\tInclude <config.h>, <java-props.h>.\n\t(_Jv_Compiler_Properties): Removed.\n\nFrom-SVN: r30133", "tree": {"sha": "5b2911a12a79d2934e95d0632e658c09f9826b4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b2911a12a79d2934e95d0632e658c09f9826b4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8c3c4f0146f82c900a995c8e98b83a2147115fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c3c4f0146f82c900a995c8e98b83a2147115fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c3c4f0146f82c900a995c8e98b83a2147115fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c3c4f0146f82c900a995c8e98b83a2147115fd/comments", "author": null, "committer": null, "parents": [{"sha": "2fca54beb25b7aea46d0d7077df92ee7e3e051f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fca54beb25b7aea46d0d7077df92ee7e3e051f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fca54beb25b7aea46d0d7077df92ee7e3e051f6"}], "stats": {"total": 255, "additions": 229, "deletions": 26}, "files": [{"sha": "0d5c0302984377c2800e3e684a566372ed98bd79", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -1,3 +1,33 @@\n+1999-10-22  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (java/lang/ClassLoader.h): New target.\n+\t* java/lang/natClassLoader.cc (_Jv_FindClass): Removed reference\n+\tto `redirect'.\n+\n+\t* include/java-props.h (_Jv_Compiler_Properties): Changed\n+\tdeclaration.\n+\t* gcj/array.h (JvRunMain, _Jv_RunMain): Don't declare.\n+\t* include/jvm.h (_Jv_GCSetInitialHeapSize,\n+\t_Jv_GCSetMaximumHeapSize): Declare.\n+\t(JvRunMain, _Jv_RunMain): Declare.\n+\t(_Jv_SetMaximumHeapSize, _Jv_SetInitialHeapSize): Declare.\n+\t* nogc.cc (_Jv_GCSetInitialHeapSize): New function.\n+\t(_Jv_GCSetMaximumHeapSize): Likewise.\n+\t* boehm.cc (_Jv_GCSetInitialHeapSize): New function.\n+\t(_Jv_GCSetMaximumHeapSize): Likewise.\n+\t* prims.cc (parse_heap_size): New function.\n+\t(_Jv_SetInitialHeapSize): Likewise.\n+\t(_Jv_SetMaximumHeapSize): Likewise.\n+\t(_Jv_Compiler_Properties): New global.\n+\t* gij.cc (help): New function.\n+\t(version): Likewise.\n+\t(heap_size): Likewise.\n+\t(heap_max_size): Likewise.\n+\t(main): Parse arguments.  Set _Jv_Compiler_Properties.\n+\tInclude <config.h>, <java-props.h>.\n+\t(_Jv_Compiler_Properties): Removed.\n+\n 1999-10-18  Tom Tromey  <tromey@cygnus.com>\n \n \t* gnu/gcj/runtime/VMClassLoader.java (getVMClassLoader): New"}, {"sha": "e864198098565475696706ff788e81d8be453c44", "filename": "libjava/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -203,6 +203,11 @@ nat_headers = $(ordinary_java_source_files:.java=.h) \\\n \n $(nat_headers): libgcj.zip\n \n+java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.zip\n+\t$(GCJH) -classpath $(top_builddir) \\\n+\t\t-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n+\t\t$(basename $<)\n+\n ## Our internal main program needs to be able to create a FirstThread.\n java/lang/FirstThread.h: java/lang/FirstThread.class libgcj.zip\n \t$(GCJH) -classpath $(top_builddir) \\"}, {"sha": "402feba9dbe8b4de4c759e9c9c1c63c6ca23c25f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -1433,6 +1433,11 @@ $(javao_files): %.lo: %.java\n \n $(nat_headers): libgcj.zip\n \n+java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.zip\n+\t$(GCJH) -classpath $(top_builddir) \\\n+\t\t-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n+\t\t$(basename $<)\n+\n java/lang/FirstThread.h: java/lang/FirstThread.class libgcj.zip\n \t$(GCJH) -classpath $(top_builddir) \\\n \t\t-friend 'void JvRunMain (jclass, int, const char **);' \\"}, {"sha": "fb11a1128732eeff2ebe8d4d9a7514fea7041f79", "filename": "libjava/boehm.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -392,6 +392,20 @@ _Jv_GCFreeMemory (void)\n   return sum;\n }\n \n+void\n+_Jv_GCSetInitialHeapSize (size_t size)\n+{\n+  size_t current = GC_get_heap_size ();\n+  if (size > current)\n+    GC_expand_hp (current - size);\n+}\n+\n+void\n+_Jv_GCSetMaximumHeapSize (size_t size)\n+{\n+  GC_set_max_heap_size ((GC_word) size);\n+}\n+\n void\n _Jv_InitGC (void)\n {"}, {"sha": "f3733595e76da59f35ce53a7612d0698e4a305e4", "filename": "libjava/gcj/array.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fgcj%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fgcj%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Farray.h?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -69,8 +69,6 @@ inline jobjectArray JvNewObjectArray (jsize length, jclass cls, jobject init)\n { return _Jv_NewObjectArray (length, cls, init); }\n \n extern \"C\" jstringArray JvConvertArgv(int argc, const char **argv);\n-extern \"C\" void JvRunMain (jclass klass, int argc, const char **argv);\n-void _Jv_RunMain (const char* name, int argc, const char **argv);\n \n inline jsize JvGetArrayLength (jarray array) { return array->length; }\n "}, {"sha": "f07c4956a43993139a7540596c1e13ca52fb1d3e", "filename": "libjava/gij.cc", "status": "modified", "additions": 100, "deletions": 7, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fgij.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fgij.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgij.cc?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -8,27 +8,120 @@ details.  */\n \n /* Author: Kresten Krab Thorup <krab@gnu.org>  */\n \n+#include <config.h>\n+\n #include <jvm.h>\n #include <gcj/cni.h>\n+#include <java-props.h>\n+\n #include <stdio.h>\n+#include <string.h>\n \n #include <java/lang/System.h>\n #include <java/util/Properties.h>\n \n-// This is used to initialize the compiled-in system properties.\n-const char *_Jv_Compiler_Properties[] =\n+static void\n+help ()\n+{\n+  printf (\"Usage: gij [OPTION] ... CLASS [ARGS] ...\\n\\n\");\n+  printf (\"Interpret Java bytecodes\\n\\n\");\n+  printf (\"  -DVAR=VAL         define property VAR with value VAL\\n\");\n+  printf (\"  --help            print this help, then exit\\n\");\n+  printf (\"  --ms=NUMBER       set initial heap size\\n\");\n+  printf (\"  --mx=NUMBER       set maximum heap size\\n\");\n+  printf (\"  --version         print version number, then exit\\n\");\n+  printf (\"\\nSee http://sourceware.cygnus.com/java/ for information on reporting bugs\\n\");\n+  exit (0);\n+}\n+\n+static void\n+version ()\n {\n-  NULL\n-};\n+  printf (\"gij (GNU libgcj) version %s\\n\\n\", VERSION);\n+  printf (\"Copyright (C) 1999 Cygnus Solutions.\\n\");\n+  printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n+  printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\");\n+  exit (0);\n+}\n \n int\n main (int argc, const char **argv)\n {\n-  if (argc < 2)\n+  /* We rearrange ARGV so that all the -D options appear near the\n+     beginning.  */\n+  int last_D_option = 0;\n+\n+  int i;\n+  for (i = 1; i < argc; ++i)\n+    {\n+      const char *arg = argv[i];\n+\n+      /* A non-option stops processing.  */\n+      if (arg[0] != '-')\n+\tbreak;\n+      /* A \"--\" stops processing.  */\n+      if (! strcmp (arg, \"--\"))\n+\t{\n+\t  ++i;\n+\t  break;\n+\t}\n+\n+      if (! strncmp (arg, \"-D\", 2))\n+\t{\n+\t  argv[last_D_option++] = arg + 2;\n+\t  continue;\n+\t}\n+\n+      /* Allow both single or double hyphen for all remaining\n+\t options.  */\n+      if (arg[1] == '-')\n+\t++arg;\n+\n+      if (! strcmp (arg, \"-help\"))\n+\thelp ();\n+      else if (! strcmp (arg, \"-version\"))\n+\tversion ();\n+      /* FIXME: use getopt and avoid the ugliness here.\n+\t We at least need to handle the argument in a better way.  */\n+      else if (! strncmp (arg, \"-ms=\", 4))\n+\t_Jv_SetInitialHeapSize (arg + 4);\n+      else if (! strcmp (arg, \"-ms\"))\n+\t{\n+\t  if (i >= argc - 1)\n+\t    {\n+\t    no_argument:\n+\t      fprintf (stderr, \"gij: option requires an argument -- `%s'\\n\",\n+\t\t       argv[i]);\n+\t      fprintf (stderr, \"Try `gij --help' for more information.\\n\");\n+\t      exit (1);\n+\t    }\n+\t  _Jv_SetInitialHeapSize (argv[++i]);\n+\t}\n+      else if (! strncmp (arg, \"-mx=\", 4))\n+\t_Jv_SetMaximumHeapSize (arg + 4);\n+      else if (! strcmp (arg, \"-mx\"))\n+\t{\n+\t  if (i >= argc - 1)\n+\t    goto no_argument;\n+\t  _Jv_SetMaximumHeapSize (argv[++i]);\n+\t}\n+      else\n+\t{\n+\t  fprintf (stderr, \"gij: unrecognized option -- `%s'\\n\", argv[i]);\n+\t  fprintf (stderr, \"Try `gij --help' for more information.\\n\");\n+\t  exit (1);\n+\t}\n+    }\n+\n+  argv[last_D_option] = NULL;\n+  _Jv_Compiler_Properties = argv;\n+\n+  if (argc - i < 1)\n     {\n-      printf (\"usage: %s CLASS [ARGS]...\\n\", argv[0]);\n+      fprintf (stderr, \"Usage: gij [OPTION] ... CLASS [ARGS] ...\\n\");\n+      fprintf (stderr, \"Try `gij --help' for more information.\\n\");\n       exit (1);\n     }\n \n-  _Jv_RunMain (argv[1], argc - 1, argv + 1);\n+  _Jv_RunMain (argv[i], argc - i, argv + i);\n }"}, {"sha": "81bdd7ff4ffa947a37d833fdce32669a42205b47", "filename": "libjava/include/java-props.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Finclude%2Fjava-props.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Finclude%2Fjava-props.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-props.h?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -19,8 +19,8 @@ typedef struct\n   size_t      value_length;\n } property_pair;\n \n-// The compiler generates this declaration.\n-extern char *_Jv_Compiler_Properties[];\n+// Set to NULL-terminated list of properties set at compile time.\n+extern const char **_Jv_Compiler_Properties;\n \n // Properties taken from the user's environment.\n extern property_pair *_Jv_Environment_Properties;"}, {"sha": "d917a4f70f70f815899e28ee75baaf4fc56ea524", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -83,9 +83,30 @@ long _Jv_GCTotalMemory (void);\n /* Return approximation of total free memory.  */\n long _Jv_GCFreeMemory (void);\n \n+/* Set initial heap size.  If SIZE==0, ignore.  Should be run before\n+   _Jv_InitGC.  Not required to have any actual effect.  */\n+void _Jv_GCSetInitialHeapSize (size_t size);\n+\n+/* Set maximum heap size.  If SIZE==0, unbounded.  Should be run\n+   before _Jv_InitGC.  Not required to have any actual effect.  */\n+void _Jv_GCSetMaximumHeapSize (size_t size);\n+\n+/* External interface to setting the heap size.  Parses ARG (a number\n+   which can optionally have \"k\" or \"m\" appended and calls\n+   _Jv_GCSetInitialHeapSize.  */\n+void _Jv_SetInitialHeapSize (const char *arg);\n+\n+/* External interface to setting the maximum heap size.  Parses ARG (a\n+   number which can optionally have \"k\" or \"m\" appended and calls\n+   _Jv_GCSetMaximumHeapSize.  */\n+void _Jv_SetMaximumHeapSize (const char *arg);\n+\n /* Allocate some unscanned bytes.  Throw exception if out of memory.  */\n void *_Jv_AllocBytesChecked (jsize size);\n \n+extern \"C\" void JvRunMain (jclass klass, int argc, const char **argv);\n+void _Jv_RunMain (const char* name, int argc, const char **argv);\n+\n // This function is used to determine the hash code of an object.\n inline jint\n _Jv_HashCode (jobject obj)"}, {"sha": "2a73ba690537244dc427bddd90836d44a4fb1ca3", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -447,20 +447,19 @@ jclass _Jv_FindClass (_Jv_Utf8Const *name,\n \t}\n       else \n \t{\n-\t  if (redirect == NULL)\n+\t  java::lang::ClassLoader *sys = java::lang::ClassLoader::system;\n+\t  if (sys == NULL)\n \t    {\n \t      _Jv_InitClass (&ClassLoaderClass);\n-\t      java::lang::ClassLoader::getSystemClassLoader ();\n+\t      sys = java::lang::ClassLoader::getSystemClassLoader ();\n \t    }\n \n-\t  // Load using the bootstrap loader jmspec 5.3.1\n-\t  klass = redirect -> loadClass (sname, false); \n+\t  // Load using the bootstrap loader jmspec 5.3.1.\n+\t  klass = sys->loadClass (sname, false); \n \n-\t  // register that we're an initiating loader\n+\t  // Register that we're an initiating loader.\n \t  if (klass)\n-\t    {\n-\t      _Jv_RegisterInitiatingLoader (klass, 0);\n-\t    }\n+\t    _Jv_RegisterInitiatingLoader (klass, 0);\n \t}\n     }\n   else"}, {"sha": "241fa19bfe7a6f950e4e3959c4ab5e7bef068409", "filename": "libjava/nogc.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fnogc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fnogc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fnogc.cc?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -75,6 +75,16 @@ _Jv_GCFreeMemory (void)\n   return 0;\n }\n \n+void\n+_Jv_GCSetInitialHeapSize (size_t size)\n+{\n+}\n+\n+void\n+_Jv_GCSetMaximumHeapSize (size_t size)\n+{\n+}\n+\n void\n _Jv_InitGC (void)\n {"}, {"sha": "6e6c63399234d9b5aace7db117a7f17b12620e58", "filename": "libjava/prims.cc", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c3c4f0146f82c900a995c8e98b83a2147115fd/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=b8c3c4f0146f82c900a995c8e98b83a2147115fd", "patch": "@@ -63,6 +63,9 @@ static java::lang::OutOfMemoryError *no_memory;\n // Largest representable size_t.\n #define SIZE_T_MAX ((size_t) (~ (size_t) 0))\n \n+// Properties set at compile time.\n+const char **_Jv_Compiler_Properties;\n+\n #ifndef DISABLE_GETENV_PROPERTIES\n // Property key/value pairs.\n property_pair *_Jv_Environment_Properties;\n@@ -811,6 +814,38 @@ _Jv_RunMain (const char *class_name, int argc, const char **argv)\n   java::lang::Runtime::getRuntime ()->exit (0);\n }\n \n+\f\n+\n+// Parse a string and return a heap size.\n+static size_t\n+parse_heap_size (const char *spec)\n+{\n+  char *end;\n+  unsigned long val = strtoul (spec, &end, 10);\n+  if (*spec == 'k' || *spec == 'K')\n+    val *= 1000;\n+  else if (*spec == 'm' || *spec == 'M')\n+    val *= 1000000;\n+  return (size_t) val;\n+}\n+\n+// Set the initial heap size.  This might be ignored by the GC layer.\n+// This must be called before _Jv_RunMain.\n+void\n+_Jv_SetInitialHeapSize (const char *arg)\n+{\n+  size_t size = parse_heap_size (arg);\n+  _Jv_GCSetInitialHeapSize (size);\n+}\n+\n+// Set the maximum heap size.  This might be ignored by the GC layer.\n+// This must be called before _Jv_RunMain.\n+void\n+_Jv_SetMaximumHeapSize (const char *arg)\n+{\n+  size_t size = parse_heap_size (arg);\n+  _Jv_GCSetMaximumHeapSize (size);\n+}\n \n \f\n \n@@ -885,10 +920,3 @@ _Jv_remJ (jlong dividend, jlong divisor)\n \n   return dividend % divisor;\n }\n-\n-\n-\n-\n-\n-\n-"}]}