{"sha": "da901811dc478d45e7dc1028dce0bda8abbbee65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5MDE4MTFkYzQ3OGQ0NWU3ZGMxMDI4ZGNlMGJkYThhYmJiZWU2NQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-04-16T15:19:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:17Z"}, "message": "[Ada] Do not give \"bad indentation\" error inside a declare_expression\n\n2020-06-17  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* par.adb (P_Basic_Declarative_Items): Update comment about\n\tDeclare_Expression.\n\t* par-ch3.adb (P_Declarative_Items): Pass in Declare_Expression\n\tflag, and if True, skip the call to Style.Check_Indentation.\n\t* par-ch4.adb (P_Declare_Expression): Fix incorrect comment.", "tree": {"sha": "0cd732316e96ad5c35f111fd3c6f36d9bceea5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd732316e96ad5c35f111fd3c6f36d9bceea5a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da901811dc478d45e7dc1028dce0bda8abbbee65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da901811dc478d45e7dc1028dce0bda8abbbee65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da901811dc478d45e7dc1028dce0bda8abbbee65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da901811dc478d45e7dc1028dce0bda8abbbee65/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831aff1d8be79fda3ec3172fdbcbbec3c8be319d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831aff1d8be79fda3ec3172fdbcbbec3c8be319d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831aff1d8be79fda3ec3172fdbcbbec3c8be319d"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "d224cc51c02a51ec967c299df9d1e81632b4058c", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da901811dc478d45e7dc1028dce0bda8abbbee65/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da901811dc478d45e7dc1028dce0bda8abbbee65/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=da901811dc478d45e7dc1028dce0bda8abbbee65", "patch": "@@ -78,18 +78,24 @@ package body Ch3 is\n    --  it very unlikely that this will ever arise in practice.\n \n    procedure P_Declarative_Items\n-     (Decls   : List_Id;\n-      Done    : out Boolean;\n-      In_Spec : Boolean);\n+     (Decls              : List_Id;\n+      Done               : out Boolean;\n+      Declare_Expression : Boolean;\n+      In_Spec            : Boolean);\n    --  Scans out a single declarative item, or, in the case of a declaration\n    --  with a list of identifiers, a list of declarations, one for each of the\n    --  identifiers in the list. The declaration or declarations scanned are\n    --  appended to the given list. Done indicates whether or not there may be\n    --  additional declarative items to scan. If Done is True, then a decision\n    --  has been made that there are no more items to scan. If Done is False,\n-   --  then there may be additional declarations to scan. In_Spec is true if\n-   --  we are scanning a package declaration, and is used to generate an\n-   --  appropriate message if a statement is encountered in such a context.\n+   --  then there may be additional declarations to scan.\n+   --\n+   --  Declare_Expression is true if we are parsing a declare_expression, in\n+   --  which case we want to suppress certain style checking.\n+   --\n+   --  In_Spec is true if we are scanning a package declaration, and is used to\n+   --  generate an appropriate message if a statement is encountered in such a\n+   --  context.\n \n    procedure P_Identifier_Declarations\n      (Decls   : List_Id;\n@@ -4310,7 +4316,8 @@ package body Ch3 is\n       --  Loop to scan out the declarations\n \n       loop\n-         P_Declarative_Items (Decls, Done, In_Spec => False);\n+         P_Declarative_Items\n+           (Decls, Done, Declare_Expression => False, In_Spec => False);\n          exit when Done;\n       end loop;\n \n@@ -4337,16 +4344,20 @@ package body Ch3 is\n    --  then the scan is set past the next semicolon and Error is returned.\n \n    procedure P_Declarative_Items\n-     (Decls   : List_Id;\n-      Done    : out Boolean;\n-      In_Spec : Boolean)\n+     (Decls              : List_Id;\n+      Done               : out Boolean;\n+      Declare_Expression : Boolean;\n+      In_Spec            : Boolean)\n    is\n       Scan_State : Saved_Scan_State;\n \n    begin\n       Done := False;\n \n-      if Style_Check then\n+      --  In -gnatg mode, we don't want a \"bad indentation\" error inside a\n+      --  declare_expression.\n+\n+      if Style_Check and not Declare_Expression then\n          Style.Check_Indentation;\n       end if;\n \n@@ -4727,7 +4738,8 @@ package body Ch3 is\n       Decls := New_List;\n \n       loop\n-         P_Declarative_Items (Decls, Done, In_Spec => True);\n+         P_Declarative_Items\n+           (Decls, Done, Declare_Expression, In_Spec => True);\n          exit when Done;\n       end loop;\n \n@@ -4827,7 +4839,8 @@ package body Ch3 is\n       Dummy_Done : Boolean;\n       pragma Warnings (Off, Dummy_Done);\n    begin\n-      P_Declarative_Items (S, Dummy_Done, False);\n+      P_Declarative_Items\n+        (S, Dummy_Done, Declare_Expression => False, In_Spec => False);\n    end Skip_Declaration;\n \n    -----------------------------------------"}, {"sha": "0360212934cd28c49aac8b8de3c5dead25dba7b0", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da901811dc478d45e7dc1028dce0bda8abbbee65/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da901811dc478d45e7dc1028dce0bda8abbbee65/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=da901811dc478d45e7dc1028dce0bda8abbbee65", "patch": "@@ -3587,7 +3587,7 @@ package body Ch4 is\n    function P_Declare_Expression return Node_Id is\n       Loc : constant Source_Ptr := Token_Ptr;\n    begin\n-      Scan; -- past IF\n+      Scan; -- past DECLARE\n \n       declare\n          Actions : constant List_Id := P_Basic_Declarative_Items"}, {"sha": "4978dc5b983a6cf7a7ca808fd89552c87012bf65", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da901811dc478d45e7dc1028dce0bda8abbbee65/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da901811dc478d45e7dc1028dce0bda8abbbee65/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=da901811dc478d45e7dc1028dce0bda8abbbee65", "patch": "@@ -699,7 +699,8 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  private part (in which case Declare_Expression is False), and\n       --  the declare_items of a declare_expression (in which case\n       --  Declare_Expression is True). Declare_Expression is used to\n-      --  affect the wording of error messages.\n+      --  affect the wording of error messages, and to control style\n+      --  checking.\n \n       function P_Access_Definition\n         (Null_Exclusion_Present : Boolean) return Node_Id;"}]}