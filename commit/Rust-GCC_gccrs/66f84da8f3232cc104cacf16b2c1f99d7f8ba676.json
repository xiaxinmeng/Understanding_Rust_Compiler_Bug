{"sha": "66f84da8f3232cc104cacf16b2c1f99d7f8ba676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZmODRkYThmMzIzMmNjMTA0Y2FjZjE2YjJjMWY5OWQ3ZjhiYTY3Ng==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-12-11T11:09:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:09:57Z"}, "message": "[Ada] Additionsal trasformations for unnesting in package bodies\n\nThis patch extends the previous algorithm for creating an explicit\nelaboration procedure for a package body when expansion generates\nsubprograms in the statement part of the body. For unnesting to work\nproperly, these subprograms must appear within an explicit subprogram\nbody so that uplevel references can be placed in the proper activation\nrecord.\n\nOngoing work for LLVM generation.\n\n2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch7.adb (Check_Unnesting_Elaboration_Code): Extend\n\talgorithm to cover subprograms generated in nested loops and in\n\texception handlers, in order to build an explicit elaboration\n\tprocedure in more complex cases.\n\nFrom-SVN: r266987", "tree": {"sha": "aa5f9b19a40ba7ec29df4198223d7761566e4956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa5f9b19a40ba7ec29df4198223d7761566e4956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66f84da8f3232cc104cacf16b2c1f99d7f8ba676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f84da8f3232cc104cacf16b2c1f99d7f8ba676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f84da8f3232cc104cacf16b2c1f99d7f8ba676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f84da8f3232cc104cacf16b2c1f99d7f8ba676/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8a8e6df1ccf4558a112cd5c1021dbc4699cf675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a8e6df1ccf4558a112cd5c1021dbc4699cf675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a8e6df1ccf4558a112cd5c1021dbc4699cf675"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "f242a2fa3d843d8f876097ac14867493eb10eea4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f84da8f3232cc104cacf16b2c1f99d7f8ba676/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f84da8f3232cc104cacf16b2c1f99d7f8ba676/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=66f84da8f3232cc104cacf16b2c1f99d7f8ba676", "patch": "@@ -1,3 +1,10 @@\n+2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb (Check_Unnesting_Elaboration_Code): Extend\n+\talgorithm to cover subprograms generated in nested loops and in\n+\texception handlers, in order to build an explicit elaboration\n+\tprocedure in more complex cases.\n+\n 2018-12-11  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* Makefile.rtl, gcc-interface/Makefile.in: Remove crtbe bits for"}, {"sha": "a21b707fef440048020d0085e7870946b4b20950", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 65, "deletions": 11, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f84da8f3232cc104cacf16b2c1f99d7f8ba676/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f84da8f3232cc104cacf16b2c1f99d7f8ba676/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=66f84da8f3232cc104cacf16b2c1f99d7f8ba676", "patch": "@@ -3996,15 +3996,23 @@ package body Exp_Ch7 is\n    --------------------------------------\n \n    procedure Check_Unnesting_Elaboration_Code (N : Node_Id) is\n-      Loc : constant Source_Ptr := Sloc (N);\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      First_Ent : Entity_Id := Empty;\n+      Loop_Id   : Entity_Id := Empty;\n \n       function Contains_Subprogram (Blk : Entity_Id) return Boolean;\n       --  Check recursively whether a loop or block contains a subprogram that\n       --  may need an activation record.\n \n       function First_Local_Scope (L : List_Id) return Entity_Id;\n-      --  Find first block or loop that contains a subprogram and is not itself\n-      --  nested within another local scope.\n+      --  Find first entity in the elaboration code of the body that\n+      --  contains or represents a subprogrsam body. A body can appear\n+      --  within a block or a loop. or can appear by itself if generated\n+      --  for an object declaration that involves controlled actions.\n+      --  The first such entity encountered is used to reset the scopes\n+      --  of all entities that become local to the hew elboration procedure.\n+      --  This is needed for subsequent unnesting, which depends on the\n+      --  scope links to determine the nesting level of each subprogram.\n \n       --------------------------\n       --  Contains_Subprogram --\n@@ -4037,6 +4045,7 @@ package body Exp_Ch7 is\n       -----------------------\n \n       function First_Local_Scope (L : List_Id) return Entity_Id is\n+         Id   : Entity_Id;\n          Scop : Entity_Id;\n          Stat : Node_Id;\n \n@@ -4045,13 +4054,27 @@ package body Exp_Ch7 is\n          while Present (Stat) loop\n             case Nkind (Stat) is\n                when N_Block_Statement =>\n-                  if Present (Identifier (Stat)) then\n-                     return Entity (Identifier (Stat));\n+                  Id := Entity (Identifier (Stat));\n+                  if No (First_Ent) then\n+                     First_Ent := Id;\n+                  end if;\n+\n+                  if Present (Id) and then Contains_Subprogram (Id) then\n+                     return Id;\n                   end if;\n \n                when N_Loop_Statement =>\n-                  if Contains_Subprogram (Entity (Identifier (Stat))) then\n-                     return Entity (Identifier (Stat));\n+                  Id := Entity (Identifier (Stat));\n+                  if No (First_Ent) then\n+                     First_Ent := Id;\n+                  end if;\n+\n+                  if Contains_Subprogram (Id) then\n+                     if Scope (Id) = Current_Scope then\n+                        Loop_Id := Id;\n+                     end if;\n+\n+                     return Id;\n                   end if;\n \n                when N_If_Statement =>\n@@ -4101,7 +4124,12 @@ package body Exp_Ch7 is\n                   end;\n \n                when N_Subprogram_Body =>\n-                  return Defining_Entity (Stat);\n+                  Id := Defining_Entity (Stat);\n+                  if No (First_Ent) then\n+                     First_Ent := Id;\n+                  end if;\n+\n+                  return Id;\n \n                when others =>\n                   null;\n@@ -4115,6 +4143,7 @@ package body Exp_Ch7 is\n \n       --  Local variables\n \n+      H_Seq     : constant Node_Id := Handled_Statement_Sequence (N);\n       Elab_Body : Node_Id;\n       Elab_Call : Node_Id;\n       Elab_Proc : Entity_Id;\n@@ -4124,11 +4153,30 @@ package body Exp_Ch7 is\n \n    begin\n       if Unnest_Subprogram_Mode\n-        and then Present (Handled_Statement_Sequence (N))\n+        and then Present (H_Seq)\n         and then Is_Compilation_Unit (Current_Scope)\n       then\n          Ent :=\n-           First_Local_Scope (Statements (Handled_Statement_Sequence (N)));\n+           First_Local_Scope (Statements (H_Seq));\n+\n+         --  There msy be subprograms declared in the exception handlers\n+         --  of the current body.\n+\n+         if No (Ent) and then Present (Exception_Handlers (H_Seq)) then\n+            declare\n+               Handler : Node_Id := First (Exception_Handlers (H_Seq));\n+            begin\n+               while Present (Handler) loop\n+                  Ent := First_Local_Scope (Statements (Handler));\n+                  if Present (Ent) then\n+                     First_Ent := Ent;\n+                     exit;\n+                  end if;\n+\n+                  Next (Handler);\n+               end loop;\n+            end;\n+         end if;\n \n          if Present (Ent) then\n             Elab_Proc :=\n@@ -4161,12 +4209,18 @@ package body Exp_Ch7 is\n             --  The scope of all blocks and loops in the elaboration code is\n             --  now the constructed elaboration procedure. Nested subprograms\n             --  within those blocks will have activation records if they\n-            --  contain references to entities in the enclosing block.\n+            --  contain references to entities in the enclosing block or\n+            --  the package itself.\n \n+            Ent := First_Ent;\n             while Present (Ent) loop\n                Set_Scope (Ent, Elab_Proc);\n                Next_Entity (Ent);\n             end loop;\n+\n+            if Present (Loop_Id) then\n+               Set_Scope (Loop_Id, Elab_Proc);\n+            end if;\n          end if;\n       end if;\n    end Check_Unnesting_Elaboration_Code;"}]}