{"sha": "5a1017dc305c49c59129d45536630d02dbc01c45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExMDE3ZGMzMDVjNDljNTkxMjlkNDU1MzY2MzBkMDJkYmMwMWM0NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-04T15:52:09Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-04T15:52:09Z"}, "message": "vect: Tweak comparisons with existing epilogue loops\n\nThis patch uses a more accurate scalar iteration estimate when\ncomparing the epilogue of a constant-iteration loop with a candidate\nreplacement epilogue.\n\nIn the testcase, the patch prevents a 1-to-3-element SVE epilogue\nfrom seeming better than a 64-bit Advanced SIMD epilogue.\n\ngcc/\n\t* tree-vect-loop.c (vect_better_loop_vinfo_p): Detect cases in\n\twhich old_loop_vinfo is an epilogue loop that handles a constant\n\tnumber of iterations.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cost_model_12.c: New test.", "tree": {"sha": "bafd9d80404fa85093744e1e3eef10137a575d47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bafd9d80404fa85093744e1e3eef10137a575d47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1017dc305c49c59129d45536630d02dbc01c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1017dc305c49c59129d45536630d02dbc01c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1017dc305c49c59129d45536630d02dbc01c45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1017dc305c49c59129d45536630d02dbc01c45/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "315a1c3756cbc751c4af0ce0da2157a88d7c3b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315a1c3756cbc751c4af0ce0da2157a88d7c3b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315a1c3756cbc751c4af0ce0da2157a88d7c3b09"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "4c5226e05de5dede4b4dcced6b2ed38e7d3e37b4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_12.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1017dc305c49c59129d45536630d02dbc01c45/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1017dc305c49c59129d45536630d02dbc01c45/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_12.c?ref=5a1017dc305c49c59129d45536630d02dbc01c45", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-O3 -mtune=neoverse-512tvb\" } */\n+\n+void\n+f (float x[restrict 10][1024],\n+   float y[restrict 10][1024], float z)\n+{\n+  for (int i = 0; i < 10; ++i)\n+    {\n+#pragma GCC unroll 10\n+      for (int j = 0; j < 10; ++j)\n+\tx[j][i] = y[j][i] * z;\n+    }\n+}\n+\n+/* We should unroll the outer loop, with 2x 16-byte vectors and 1x\n+   8-byte vectors.  */\n+/* { dg-final { scan-assembler-not {\\tptrue\\t} } } */\n+/* { dg-final { scan-assembler {\\tv[0-9]+\\.4s,} } } */\n+/* { dg-final { scan-assembler {\\tv[0-9]+\\.2s,} } } */"}, {"sha": "1e21fe6b13d9b77626cf2147457ab8c7c82c00c1", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1017dc305c49c59129d45536630d02dbc01c45/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1017dc305c49c59129d45536630d02dbc01c45/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=5a1017dc305c49c59129d45536630d02dbc01c45", "patch": "@@ -2772,7 +2772,15 @@ vect_better_loop_vinfo_p (loop_vec_info new_loop_vinfo,\n \n   /* Limit the VFs to what is likely to be the maximum number of iterations,\n      to handle cases in which at least one loop_vinfo is fully-masked.  */\n-  HOST_WIDE_INT estimated_max_niter = likely_max_stmt_executions_int (loop);\n+  HOST_WIDE_INT estimated_max_niter;\n+  loop_vec_info main_loop = LOOP_VINFO_ORIG_LOOP_INFO (old_loop_vinfo);\n+  unsigned HOST_WIDE_INT main_vf;\n+  if (main_loop\n+      && LOOP_VINFO_NITERS_KNOWN_P (main_loop)\n+      && LOOP_VINFO_VECT_FACTOR (main_loop).is_constant (&main_vf))\n+    estimated_max_niter = LOOP_VINFO_INT_NITERS (main_loop) % main_vf;\n+  else\n+    estimated_max_niter = likely_max_stmt_executions_int (loop);\n   if (estimated_max_niter != -1)\n     {\n       if (known_le (estimated_max_niter, new_vf))"}]}