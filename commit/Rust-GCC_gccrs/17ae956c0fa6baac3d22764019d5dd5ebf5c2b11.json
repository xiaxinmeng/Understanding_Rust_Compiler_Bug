{"sha": "17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "node_id": "C_kwDOANBUbNoAKDE3YWU5NTZjMGZhNmJhYWMzZDIyNzY0MDE5ZDVkZDVlYmY1YzJiMTE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:18:56Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:18:56Z"}, "message": "AArch64: Support new tbranch optab.\n\nThis implements the new tbranch optab for AArch64.\n\nwe cannot emit one big RTL for the final instruction immediately.\nThe reason that all comparisons in the AArch64 backend expand to separate CC\ncompares, and separate testing of the operands is for ifcvt.\n\nThe separate CC compare is needed so ifcvt can produce csel, cset etc from the\ncompares.  Unlike say combine, ifcvt can not do recog on a parallel with a\nclobber.  Should we emit the instruction directly then ifcvt will not be able\nto say, make a csel, because we have no patterns which handle zero_extract and\ncompare. (unlike combine ifcvt cannot transform the extract into an AND).\n\nWhile you could provide various patterns for this (and I did try) you end up\nwith broken patterns because you can't add the clobber to the CC register.  If\nyou do, ifcvt recog fails.\n\ni.e.\n\nint\nf1 (int x)\n{\n  if (x & 1)\n    return 1;\n  return x;\n}\n\nWe lose csel here.\n\nSecondly the reason the compare with an explicit CC mode is needed is so that\nifcvt can transform the operation into a version that doesn't require the flags\nto be set.  But it only does so if it know the explicit usage of the CC reg.\n\nFor instance\n\nint\nfoo (int a, int b)\n{\n  return ((a & (1 << 25)) ? 5 : 4);\n}\n\nDoesn't require a comparison, the optimal form is:\n\nfoo(int, int):\n        ubfx    x0, x0, 25, 1\n        add     w0, w0, 4\n        ret\n\nand no compare is actually needed.  If you represent the instruction using an\nANDS instead of a zero_extract then you get close, but you end up with an ands\nfollowed by an add, which is a slower operation.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.md (*tb<optab><mode>1): Rename to...\n\t(*tb<optab><ALLI:mode><GPI:mode>1): ... this.\n\t(tbranch_<code><mode>4): New.\n\t* config/aarch64/iterators.md(ZEROM, zerom): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/tbz_1.c: New test.", "tree": {"sha": "a255f8a84e0460125ac864cc89fe5eae3c2cf9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a255f8a84e0460125ac864cc89fe5eae3c2cf9d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc582d2ef32e2d3723c68d111f4e49607631f34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc582d2ef32e2d3723c68d111f4e49607631f34d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc582d2ef32e2d3723c68d111f4e49607631f34d"}], "stats": {"total": 130, "additions": 122, "deletions": 8}, "files": [{"sha": "d749c98eef63de4b92e589a167af823416f6a71d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "patch": "@@ -947,12 +947,29 @@\n \t\t      (const_int 1)))]\n )\n \n-(define_insn \"*tb<optab><mode>1\"\n+(define_expand \"tbranch_<code><mode>3\"\n   [(set (pc) (if_then_else\n-\t      (EQL (zero_extract:DI (match_operand:GPI 0 \"register_operand\" \"r\")\n-\t\t\t\t    (const_int 1)\n-\t\t\t\t    (match_operand 1\n-\t\t\t\t      \"aarch64_simd_shift_imm_<mode>\" \"n\"))\n+              (EQL (match_operand:ALLI 0 \"register_operand\")\n+                   (match_operand 1 \"aarch64_simd_shift_imm_<mode>\"))\n+              (label_ref (match_operand 2 \"\"))\n+              (pc)))]\n+  \"\"\n+{\n+  rtx bitvalue = gen_reg_rtx (<ZEROM>mode);\n+  rtx reg = gen_lowpart (<ZEROM>mode, operands[0]);\n+  rtx val = GEN_INT (1UL << UINTVAL (operands[1]));\n+  emit_insn (gen_and<zerom>3 (bitvalue, reg, val));\n+  operands[1] = const0_rtx;\n+  operands[0] = aarch64_gen_compare_reg (<CODE>, bitvalue,\n+\t\t\t\t\t operands[1]);\n+})\n+\n+(define_insn \"*tb<optab><ALLI:mode><GPI:mode>1\"\n+  [(set (pc) (if_then_else\n+\t      (EQL (zero_extract:GPI (match_operand:ALLI 0 \"register_operand\" \"r\")\n+\t\t\t\t     (const_int 1)\n+\t\t\t\t     (match_operand 1\n+\t\t\t\t       \"aarch64_simd_shift_imm_<ALLI:mode>\" \"n\"))\n \t\t   (const_int 0))\n \t     (label_ref (match_operand 2 \"\" \"\"))\n \t     (pc)))\n@@ -963,15 +980,15 @@\n       {\n \tif (get_attr_far_branch (insn) == 1)\n \t  return aarch64_gen_far_branch (operands, 2, \"Ltb\",\n-\t\t\t\t\t \"<inv_tb>\\\\t%<w>0, %1, \");\n+\t\t\t\t\t \"<inv_tb>\\\\t%<ALLI:w>0, %1, \");\n \telse\n \t  {\n \t    operands[1] = GEN_INT (HOST_WIDE_INT_1U << UINTVAL (operands[1]));\n-\t    return \"tst\\t%<w>0, %1\\;<bcond>\\t%l2\";\n+\t    return \"tst\\t%<ALLI:w>0, %1\\;<bcond>\\t%l2\";\n \t  }\n       }\n     else\n-      return \"<tbz>\\t%<w>0, %1, %l2\";\n+      return \"<tbz>\\t%<ALLI:w>0, %1, %l2\";\n   }\n   [(set_attr \"type\" \"branch\")\n    (set (attr \"length\")"}, {"sha": "a521dbde1ec42c0c442a9ca3dd52c9727d116399", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "patch": "@@ -1107,6 +1107,8 @@\n \n ;; Give the number of bits in the mode\n (define_mode_attr sizen [(QI \"8\") (HI \"16\") (SI \"32\") (DI \"64\")])\n+(define_mode_attr ZEROM [(QI \"SI\") (HI \"SI\") (SI \"SI\") (DI \"DI\")])\n+(define_mode_attr zerom [(QI \"si\") (HI \"si\") (SI \"si\") (DI \"di\")])\n \n ;; Give the ordinal of the MSB in the mode\n (define_mode_attr sizem1 [(QI \"#7\") (HI \"#15\") (SI \"#31\") (DI \"#63\")"}, {"sha": "39deb58e278e2180ab270b5a999cac62cb17c682", "filename": "gcc/testsuite/gcc.target/aarch64/tbz_1.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftbz_1.c?ref=17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -std=c99  -fno-unwind-tables -fno-asynchronous-unwind-tables\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+#include <stdbool.h>\n+\n+void h(void);\n+\n+/*\n+** g1:\n+** \ttbnz\tw[0-9]+, #?0, .L([0-9]+)\n+** \tret\n+**\t...\n+*/\n+void g1(bool x)\n+{\n+  if (__builtin_expect (x, 0))\n+    h ();\n+}\n+\n+/*\n+** g2:\n+** \ttbz\tw[0-9]+, #?0, .L([0-9]+)\n+** \tb\th\n+**\t...\n+*/\n+void g2(bool x)\n+{\n+  if (__builtin_expect (x, 1))\n+    h ();\n+}\n+\n+/*\n+** g3_ge:\n+** \ttbnz\tw[0-9]+, #?31, .L[0-9]+\n+** \tb\th\n+**\t...\n+*/\n+void g3_ge(int x)\n+{\n+  if (__builtin_expect (x >= 0, 1))\n+    h ();\n+}\n+\n+/*\n+** g3_gt:\n+** \tcmp\tw[0-9]+, 0\n+** \tble\t.L[0-9]+\n+** \tb\th\n+**\t...\n+*/\n+void g3_gt(int x)\n+{\n+  if (__builtin_expect (x > 0, 1))\n+    h ();\n+}\n+\n+/*\n+** g3_lt:\n+** \ttbz\tw[0-9]+, #?31, .L[0-9]+\n+** \tb\th\n+**\t...\n+*/\n+void g3_lt(int x)\n+{\n+  if (__builtin_expect (x < 0, 1))\n+    h ();\n+}\n+\n+/*\n+** g3_le:\n+** \tcmp\tw[0-9]+, 0\n+** \tbgt\t.L[0-9]+\n+** \tb\th\n+**\t...\n+*/\n+void g3_le(int x)\n+{\n+  if (__builtin_expect (x <= 0, 1))\n+    h ();\n+}\n+\n+/*\n+** g5:\n+** \tmov\tw[0-9]+, 65279\n+** \ttst\tw[0-9]+, w[0-9]+\n+** \tbeq\t.L[0-9]+\n+** \tb\th\n+**\t...\n+*/ \n+void g5(int x)\n+{\n+  if (__builtin_expect (x & 0xfeff, 1))\n+    h ();\n+}"}]}