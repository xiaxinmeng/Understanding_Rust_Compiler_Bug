{"sha": "d822570f733f2660b8bd5c78cf5077e654c4387e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyMjU3MGY3MzNmMjY2MGI4YmQ1Yzc4Y2Y1MDc3ZTY1NGM0Mzg3ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-30T15:36:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-30T15:36:05Z"}, "message": "genmatch.c (capture_info::walk_c_expr): Ignore capture uses inside TREE_TYPE ().\n\n2014-10-30  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (capture_info::walk_c_expr): Ignore capture\n\tuses inside TREE_TYPE ().\n\t* gimple-ssa-strength-reduction.c (stmt_cost): Use CASE_CONVERT.\n\t(find_candidates_dom_walker::before_dom_children): Likewise.\n\t(replace_mult_candidate): Use CONVERT_EXPR_CODE_P.\n\t(replace_profitable_candidates): Likewise.\n\t* tree-ssa-dom.c (initialize_hash_element): Canonicalize\n\tCONVERT_EXPR_CODE_P to CONVERT_EXPR.\n\t* convert.c (convert_to_integer): Use CASE_CONVERT.\n\nFrom-SVN: r216939", "tree": {"sha": "138ab18df255eae4e18cb747ac189b901263aeae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/138ab18df255eae4e18cb747ac189b901263aeae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d822570f733f2660b8bd5c78cf5077e654c4387e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d822570f733f2660b8bd5c78cf5077e654c4387e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d822570f733f2660b8bd5c78cf5077e654c4387e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d822570f733f2660b8bd5c78cf5077e654c4387e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "665c06cec2b2b15addfe22e203c7d0e90f74424b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665c06cec2b2b15addfe22e203c7d0e90f74424b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665c06cec2b2b15addfe22e203c7d0e90f74424b"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "6d014c08f435ddacc0248ff9dba39b9364ddc9cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d822570f733f2660b8bd5c78cf5077e654c4387e", "patch": "@@ -1,3 +1,15 @@\n+2014-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (capture_info::walk_c_expr): Ignore capture\n+\tuses inside TREE_TYPE ().\n+\t* gimple-ssa-strength-reduction.c (stmt_cost): Use CASE_CONVERT.\n+\t(find_candidates_dom_walker::before_dom_children): Likewise.\n+\t(replace_mult_candidate): Use CONVERT_EXPR_CODE_P.\n+\t(replace_profitable_candidates): Likewise.\n+\t* tree-ssa-dom.c (initialize_hash_element): Canonicalize\n+\tCONVERT_EXPR_CODE_P to CONVERT_EXPR.\n+\t* convert.c (convert_to_integer): Use CASE_CONVERT.\n+\n 2014-10-30  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Implement more patterns that simplify to a single value."}, {"sha": "07e2d75e5ee49d0847629aa242b66debb98ccf21", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=d822570f733f2660b8bd5c78cf5077e654c4387e", "patch": "@@ -831,7 +831,7 @@ convert_to_integer (tree type, tree expr)\n \t\t\t\t\t\t  TREE_OPERAND (expr, 0))));\n \t  }\n \n-\tcase NOP_EXPR:\n+\tCASE_CONVERT:\n \t  /* Don't introduce a\n \t     \"can't convert between vector values of different size\" error.  */\n \t  if (TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == VECTOR_TYPE"}, {"sha": "35d852c925931a108e7a891e248b8922c5cb7c4e", "filename": "gcc/genmatch.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=d822570f733f2660b8bd5c78cf5077e654c4387e", "patch": "@@ -2004,21 +2004,34 @@ capture_info::walk_result (operand *o, bool conditional_p)\n void\n capture_info::walk_c_expr (c_expr *e)\n {\n-  /* Give up for C exprs mentioning captures.  */\n+  /* Give up for C exprs mentioning captures not inside TREE_TYPE ().  */\n+  unsigned p_depth = 0;\n   for (unsigned i = 0; i < e->code.length (); ++i)\n-    if (e->code[i].type == CPP_ATSIGN\n-\t&& (e->code[i+1].type == CPP_NUMBER\n-\t    || e->code[i+1].type == CPP_NAME)\n-\t&& !(e->code[i+1].flags & PREV_WHITE))\n-      {\n-\tconst cpp_token *n = &e->code[i+1];\n-\tconst char *id;\n-\tif (n->type == CPP_NUMBER)\n-\t  id = (const char *)n->val.str.text;\n-\telse\n-\t  id = (const char *)CPP_HASHNODE (n->val.node.node)->ident.str;\n-\tinfo[(*e->capture_ids)[id]].force_no_side_effects_p = true;\n-      }\n+    {\n+      const cpp_token *t = &e->code[i];\n+      const cpp_token *n = i < e->code.length () - 1 ? &e->code[i+1] : NULL;\n+      if (t->type == CPP_NAME\n+\t  && strcmp ((const char *)CPP_HASHNODE\n+\t\t       (t->val.node.node)->ident.str, \"TREE_TYPE\") == 0\n+\t  && n->type == CPP_OPEN_PAREN)\n+\tp_depth++;\n+      else if (t->type == CPP_CLOSE_PAREN\n+\t       && p_depth > 0)\n+\tp_depth--;\n+      else if (p_depth == 0\n+\t       && t->type == CPP_ATSIGN\n+\t       && (n->type == CPP_NUMBER\n+\t\t   || n->type == CPP_NAME)\n+\t       && !(n->flags & PREV_WHITE))\n+\t{\n+\t  const char *id;\n+\t  if (n->type == CPP_NUMBER)\n+\t    id = (const char *)n->val.str.text;\n+\t  else\n+\t    id = (const char *)CPP_HASHNODE (n->val.node.node)->ident.str;\n+\t  info[(*e->capture_ids)[id]].force_no_side_effects_p = true;\n+\t}\n+    }\n }\n \n "}, {"sha": "8187a10754cd8282cf3f72636132f831a4bb7a19", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=d822570f733f2660b8bd5c78cf5077e654c4387e", "patch": "@@ -705,7 +705,7 @@ stmt_cost (gimple gs, bool speed)\n     case NEGATE_EXPR:\n       return neg_cost (speed, lhs_mode);\n \n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       return convert_cost (lhs_mode, TYPE_MODE (TREE_TYPE (rhs1)), speed);\n \n     /* Note that we don't assign costs to copies that in most cases\n@@ -1715,7 +1715,7 @@ find_candidates_dom_walker::before_dom_children (basic_block bb)\n \t      rhs2 = gimple_assign_rhs2 (gs);\n \t      /* Fall-through.  */\n \n-\t    case NOP_EXPR:\n+\t    CASE_CONVERT:\n \t    case MODIFY_EXPR:\n \t    case NEGATE_EXPR:\n \t      rhs1 = gimple_assign_rhs1 (gs);\n@@ -1743,7 +1743,7 @@ find_candidates_dom_walker::before_dom_children (basic_block bb)\n \t      slsr_process_neg (gs, rhs1, speed);\n \t      break;\n \n-\t    case NOP_EXPR:\n+\t    CASE_CONVERT:\n \t      slsr_process_cast (gs, rhs1, speed);\n \t      break;\n \n@@ -2033,7 +2033,7 @@ replace_mult_candidate (slsr_cand_t c, tree basis_name, widest_int bump)\n       /* It is not useful to replace casts, copies, or adds of\n \t an SSA name and a constant.  */\n       && cand_code != MODIFY_EXPR\n-      && cand_code != NOP_EXPR\n+      && !CONVERT_EXPR_CODE_P (cand_code)\n       && cand_code != PLUS_EXPR\n       && cand_code != POINTER_PLUS_EXPR\n       && cand_code != MINUS_EXPR)\n@@ -3472,7 +3472,7 @@ replace_profitable_candidates (slsr_cand_t c)\n       if (i >= 0\n \t  && profitable_increment_p (i) \n \t  && orig_code != MODIFY_EXPR\n-\t  && orig_code != NOP_EXPR)\n+\t  && !CONVERT_EXPR_CODE_P (orig_code))\n \t{\n \t  if (phi_dependent_cand_p (c))\n \t    {"}, {"sha": "6fa0dc6b1063e4c2a72411e93e068d75fd96fdf6", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822570f733f2660b8bd5c78cf5077e654c4387e/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=d822570f733f2660b8bd5c78cf5077e654c4387e", "patch": "@@ -305,6 +305,8 @@ initialize_hash_element (gimple stmt, tree lhs,\n         case GIMPLE_UNARY_RHS:\n \t  expr->kind = EXPR_UNARY;\n \t  expr->type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\t  if (CONVERT_EXPR_CODE_P (subcode))\n+\t    subcode = CONVERT_EXPR;\n \t  expr->ops.unary.op = subcode;\n \t  expr->ops.unary.opnd = gimple_assign_rhs1 (stmt);\n \t  break;"}]}