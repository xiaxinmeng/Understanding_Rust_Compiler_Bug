{"sha": "399b9016a73cf485b8f1863ae21e5cf06e6f6273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk5YjkwMTZhNzNjZjQ4NWI4ZjE4NjNhZTIxZTVjZjA2ZTZmNjI3Mw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-01-04T18:46:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-01-04T18:46:46Z"}, "message": "* regclass.c: Revert my Jan 4 change to loop cost computation.\n\nFrom-SVN: r31210", "tree": {"sha": "81dd15ff782f14d4888a5108a41e02c705aef3b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81dd15ff782f14d4888a5108a41e02c705aef3b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/399b9016a73cf485b8f1863ae21e5cf06e6f6273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399b9016a73cf485b8f1863ae21e5cf06e6f6273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/399b9016a73cf485b8f1863ae21e5cf06e6f6273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399b9016a73cf485b8f1863ae21e5cf06e6f6273/comments", "author": null, "committer": null, "parents": [{"sha": "64615302108ad099b80b6cccdf0e3ccdd988021c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64615302108ad099b80b6cccdf0e3ccdd988021c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64615302108ad099b80b6cccdf0e3ccdd988021c"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "6050f791c529885fb75bcc46914e4db4745345c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399b9016a73cf485b8f1863ae21e5cf06e6f6273/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399b9016a73cf485b8f1863ae21e5cf06e6f6273/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=399b9016a73cf485b8f1863ae21e5cf06e6f6273", "patch": "@@ -1,3 +1,7 @@\n+Tue Jan  4 11:44:13 2000  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* regclass.c: Revert my Jan 4 change to loop cost computation.\n+\n Tue Jan  4 19:22:39 MET 2000  Jan Hubicka  <hubicka@freesoft.cz>\n \n \t* regclass.c (regclass): Do not obey REG_N_REFS in non-optimizing"}, {"sha": "1a45b244dc3b063295ad68ed9d80441a4a54c9c8", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/399b9016a73cf485b8f1863ae21e5cf06e6f6273/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/399b9016a73cf485b8f1863ae21e5cf06e6f6273/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=399b9016a73cf485b8f1863ae21e5cf06e6f6273", "patch": "@@ -1100,17 +1100,13 @@ regclass (f, nregs, dump)\n \t    basic_block bb = BASIC_BLOCK (index);\n \n \t    /* Show that an insn inside a loop is likely to be executed three\n-\t       times more than insns outside a loop.  This is much more\n-\t       aggressive than the assumptions made elsewhere and is being\n-\t       tried as an experiment. \n-\n-\t       Note that a block's loop depth starts at zero, not one!  We\n-\t       must not subract one from the loop depth as that could give\n-\t       a negative shift count below.  */\n+\t       times more than insns outside a loop.  This is much more aggressive\n+\t       than the assumptions made elsewhere and is being tried as an\n+\t       experiment.  */\n \t    if (optimize_size)\n \t      loop_cost = 1;\n \t    else\n-\t      loop_cost = 1 << (2 * MIN (bb->loop_depth, 5));\n+\t      loop_cost = 1 << (2 * MIN (bb->loop_depth - 1, 5));\n \t    for (insn = bb->head; ; insn = NEXT_INSN (insn))\n \t      {\n \t\tinsn = scan_one_insn (insn, pass);"}]}