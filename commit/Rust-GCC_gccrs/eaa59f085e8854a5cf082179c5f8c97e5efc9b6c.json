{"sha": "eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "node_id": "C_kwDOANBUbNoAKGVhYTU5ZjA4NWU4ODU0YTVjZjA4MjE3OWM1ZjhjOTdlNWVmYzliNmM", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-10-23T12:09:17Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-10-29T07:21:05Z"}, "message": "d: Make TARGET_D_MINFO_SECTION hooks in elfos.h the language default.\n\nRemoves the last of all TARGET_D_* macro definitions in common target\nheaders.  Now everything is either defined in the D language front-end,\nor D-specific target headers.\n\ngcc/ChangeLog:\n\n\t* config/darwin-d.cc (TARGET_D_MINFO_START_NAME): Rename to ...\n\t(TARGET_D_MINFO_SECTION_START): ...this.\n\t(TARGET_D_MINFO_END_NAME): Rename to ...\n\t(TARGET_D_MINFO_SECTION_END): ... this.\n\t* config/elfos.h (TARGET_D_MINFO_SECTION): Remove.\n\t(TARGET_D_MINFO_START_NAME): Remove.\n\t(TARGET_D_MINFO_END_NAME): Remove.\n\t* config/i386/cygwin-d.cc (TARGET_D_MINFO_SECTION): Remove.\n\t(TARGET_D_MINFO_START_NAME): Remove.\n\t(TARGET_D_MINFO_END_NAME): Remove.\n\t* config/i386/winnt-d.cc (TARGET_D_MINFO_SECTION): Remove.\n\t(TARGET_D_MINFO_START_NAME): Remove.\n\t(TARGET_D_MINFO_END_NAME): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in (TARGET_D_MINFO_START_NAME): Rename to ...\n\t(TARGET_D_MINFO_SECTION_START): ...this.\n\t(TARGET_D_MINFO_END_NAME): Rename to ...\n\t(TARGET_D_MINFO_SECTION_END): ...this.\n\ngcc/d/ChangeLog:\n\n\t* d-target.def (d_minfo_section): Expand documentation of hook.\n\tDefault initialize to \"minfo\".\n\t(d_minfo_start_name): Rename to ...\n\t(d_minfo_section_start): ... this.  Default initialize to\n\t\"__start_minfo\".\n\t(d_minfo_end_name): Rename to ...\n\t(d_minfo_section_end): ... this. Default initialize to \"__stop_minfo\".\n\t* modules.cc (register_moduleinfo): Use new targetdm hook names.", "tree": {"sha": "c933e8ea332a9202bbeff15d05bd57d8bb959dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c933e8ea332a9202bbeff15d05bd57d8bb959dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca652f86f79855830762e2e7680b6807798437bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca652f86f79855830762e2e7680b6807798437bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca652f86f79855830762e2e7680b6807798437bf"}], "stats": {"total": 83, "additions": 31, "deletions": 52}, "files": [{"sha": "97304947c0a8c9a76b8b20eb7fbbf22a45e0f2b9", "filename": "gcc/config/darwin-d.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Fdarwin-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Fdarwin-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-d.cc?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -67,10 +67,10 @@ darwin_d_register_target_info (void)\n #undef TARGET_D_MINFO_SECTION\n #define TARGET_D_MINFO_SECTION \"__DATA,__minfodata\"\n \n-#undef TARGET_D_MINFO_START_NAME\n-#define TARGET_D_MINFO_START_NAME \"*section$start$__DATA$__minfodata\"\n+#undef TARGET_D_MINFO_SECTION_START\n+#define TARGET_D_MINFO_SECTION_START \"*section$start$__DATA$__minfodata\"\n \n-#undef TARGET_D_MINFO_END_NAME\n-#define TARGET_D_MINFO_END_NAME \"*section$end$__DATA$__minfodata\"\n+#undef TARGET_D_MINFO_SECTION_END\n+#define TARGET_D_MINFO_SECTION_END \"*section$end$__DATA$__minfodata\"\n \n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "f8b3be4358ac896599b98bd1dd102500b84c3025", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -482,9 +482,3 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n-\n-/* ELF support needed only by D front-end.  */\n-\n-#define TARGET_D_MINFO_SECTION \"minfo\"\n-#define TARGET_D_MINFO_START_NAME \"__start_minfo\"\n-#define TARGET_D_MINFO_END_NAME \"__stop_minfo\""}, {"sha": "6d70d499eef2760f7f166dc8e5d92420eb09505b", "filename": "gcc/config/i386/cygwin-d.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Fi386%2Fcygwin-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Fi386%2Fcygwin-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin-d.cc?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -64,17 +64,6 @@ cygwin_d_register_target_info (void)\n #undef TARGET_D_REGISTER_OS_TARGET_INFO\n #define TARGET_D_REGISTER_OS_TARGET_INFO cygwin_d_register_target_info\n \n-/* Define TARGET_D_MINFO_SECTION for Cygwin targets.  */\n-\n-#undef TARGET_D_MINFO_SECTION\n-#define TARGET_D_MINFO_SECTION \"minfo\"\n-\n-#undef TARGET_D_MINFO_START_NAME\n-#define TARGET_D_MINFO_START_NAME \"__start_minfo\"\n-\n-#undef TARGET_D_MINFO_END_NAME\n-#define TARGET_D_MINFO_END_NAME \"__stop_minfo\"\n-\n /* Define TARGET_D_TEMPLATES_ALWAYS_COMDAT for Cygwin targets.  */\n \n #undef TARGET_D_TEMPLATES_ALWAYS_COMDAT"}, {"sha": "843c7139cb25b504d6f63fb05f0999aeee4a81fe", "filename": "gcc/config/i386/winnt-d.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -69,17 +69,6 @@ winnt_d_register_target_info (void)\n #undef TARGET_D_REGISTER_OS_TARGET_INFO\n #define TARGET_D_REGISTER_OS_TARGET_INFO winnt_d_register_target_info\n \n-/* Define TARGET_D_MINFO_SECTION for Windows targets.  */\n-\n-#undef TARGET_D_MINFO_SECTION\n-#define TARGET_D_MINFO_SECTION \"minfo\"\n-\n-#undef TARGET_D_MINFO_START_NAME\n-#define TARGET_D_MINFO_START_NAME \"__start_minfo\"\n-\n-#undef TARGET_D_MINFO_END_NAME\n-#define TARGET_D_MINFO_END_NAME \"__stop_minfo\"\n-\n /* Define TARGET_D_TEMPLATES_ALWAYS_COMDAT for Windows targets.  */\n \n #undef TARGET_D_TEMPLATES_ALWAYS_COMDAT"}, {"sha": "7d999d0be0b168ad7c6d57393e283f78efbcd266", "filename": "gcc/d/d-target.def", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fd%2Fd-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fd%2Fd-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.def?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -70,26 +70,29 @@ the target operating system.\",\n DEFHOOKPOD\n (d_minfo_section,\n  \"Contains the name of the section in which module info references should be\\n\\\n-placed.  This section is expected to be bracketed by two symbols to indicate\\n\\\n-the start and end address of the section, so that the runtime library can\\n\\\n-collect all modules for each loaded shared library and executable.  The\\n\\\n-default value of @code{NULL} disables the use of sections altogether.\",\n- const char *, NULL)\n+placed.  By default, the compiler puts all module info symbols in the\\n\\\n+@code{\\\"minfo\\\"} section.  Define this macro to override the string if a\\n\\\n+different section name should be used.  This section is expected to be\\n\\\n+bracketed by two symbols @code{TARGET_D_MINFO_SECTION_START} and \\n\\\n+@code{TARGET_D_MINFO_SECTION_END} to indicate the start and end address of\\n\\\n+the section, so that the runtime library can collect all modules for each\\n\\\n+loaded shared library and executable.  Setting the value to @code{NULL}\\n\\\n+disables the use of sections for storing module info altogether.\",\n+ const char *, \"minfo\")\n \n DEFHOOKPOD\n-(d_minfo_start_name,\n+(d_minfo_section_start,\n  \"If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\\n\\\n as the name of the symbol indicating the start address of the module info\\n\\\n section\",\n- const char *, NULL)\n+ const char *, \"__start_minfo\")\n \n-/* The name of the ModuleInfo section.  */\n DEFHOOKPOD\n-(d_minfo_end_name,\n+(d_minfo_section_end,\n  \"If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\\n\\\n as the name of the symbol indicating the end address of the module info\\n\\\n section\",\n- const char *, NULL)\n+ const char *, \"__stop_minfo\")\n \n /* The \"stdcall\" convention is really supported on 32-bit x86/Windows only.\n    The following hook is a helper to determine whether to apply the attribute"}, {"sha": "4f918536b82d3644d26e53e9d083d8e5395586a9", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -438,11 +438,11 @@ register_moduleinfo (Module *decl, tree minfo)\n   if (!first_module)\n     return;\n \n-  start_minfo_node = build_dso_registry_var (targetdm.d_minfo_start_name,\n+  start_minfo_node = build_dso_registry_var (targetdm.d_minfo_section_start,\n \t\t\t\t\t     ptr_type_node);\n   rest_of_decl_compilation (start_minfo_node, 1, 0);\n \n-  stop_minfo_node = build_dso_registry_var (targetdm.d_minfo_end_name,\n+  stop_minfo_node = build_dso_registry_var (targetdm.d_minfo_section_end,\n \t\t\t\t\t    ptr_type_node);\n   rest_of_decl_compilation (stop_minfo_node, 1, 0);\n "}, {"sha": "8572313b308f42e1d4cb329ee6c8d9be40d06a76", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -10850,19 +10850,23 @@ the target operating system.\n \n @deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_SECTION\n Contains the name of the section in which module info references should be\n-placed.  This section is expected to be bracketed by two symbols to indicate\n-the start and end address of the section, so that the runtime library can\n-collect all modules for each loaded shared library and executable.  The\n-default value of @code{NULL} disables the use of sections altogether.\n+placed.  By default, the compiler puts all module info symbols in the\n+@code{\"minfo\"} section.  Define this macro to override the string if a\n+different section name should be used.  This section is expected to be\n+bracketed by two symbols @code{TARGET_D_MINFO_SECTION_START} and \n+@code{TARGET_D_MINFO_SECTION_END} to indicate the start and end address of\n+the section, so that the runtime library can collect all modules for each\n+loaded shared library and executable.  Setting the value to @code{NULL}\n+disables the use of sections for storing module info altogether.\n @end deftypevr\n \n-@deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_START_NAME\n+@deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_SECTION_START\n If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\n as the name of the symbol indicating the start address of the module info\n section\n @end deftypevr\n \n-@deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_END_NAME\n+@deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_SECTION_END\n If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\n as the name of the symbol indicating the end address of the module info\n section"}, {"sha": "986e8f0da0904a755d302c370212b9a7e80e9936", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa59f085e8854a5cf082179c5f8c97e5efc9b6c/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=eaa59f085e8854a5cf082179c5f8c97e5efc9b6c", "patch": "@@ -7117,9 +7117,9 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_MINFO_SECTION\n \n-@hook TARGET_D_MINFO_START_NAME\n+@hook TARGET_D_MINFO_SECTION_START\n \n-@hook TARGET_D_MINFO_END_NAME\n+@hook TARGET_D_MINFO_SECTION_END\n \n @hook TARGET_D_HAS_STDCALL_CONVENTION\n "}]}