{"sha": "b7e4f61c3e703f38c5621d5114e776d245abdf73", "node_id": "C_kwDOANBUbNoAKGI3ZTRmNjFjM2U3MDNmMzhjNTYyMWQ1MTE0ZTc3NmQyNDVhYmRmNzM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-08T02:47:25Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T06:44:50Z"}, "message": "RISC-V: Add vadc C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vadc_vvm-1.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vvm-2.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vvm-3.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vvm_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vvm_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vvm_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_tu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_tu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_tu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_tu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_tu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vadc_vxm_tu_rv64-3.C: New test.", "tree": {"sha": "9e8a714c886f08afb82fbd41d1897c202ce55d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8a714c886f08afb82fbd41d1897c202ce55d72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e4f61c3e703f38c5621d5114e776d245abdf73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e4f61c3e703f38c5621d5114e776d245abdf73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e4f61c3e703f38c5621d5114e776d245abdf73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e4f61c3e703f38c5621d5114e776d245abdf73/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6483b8310337917b21a8722de811bf7637a777f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6483b8310337917b21a8722de811bf7637a777f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6483b8310337917b21a8722de811bf7637a777f6"}], "stats": {"total": 5238, "additions": 5238, "deletions": 0}, "files": [{"sha": "049b57fbd780bb13d11c83f0462464306a342889", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vvm-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-1.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "d1798cb181c554dee816882f2abdbcb680aaf3bd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vvm-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-2.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "1367c6e1deb3364f96166f2a500cfec3ead11de2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vvm-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-3.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "a4fe7cc8816ebad0afdac8c5367d20e2f26df412", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vvm_tu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-1.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "941bb79e9a0e8ba5e05ee2dd2d03be983540f9df", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vvm_tu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-2.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "501ccfe3f32ec45e724b2596b2358a0099e1a9e0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vvm_tu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-3.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "dda88d2322b181febe8d9e8134d7c6e98daf0a59", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-1.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "f15dbdd1f5381e4a9586d11140091bb32c5239f1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-2.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "6671f0cb19ee8fc86f580556e4864e89dc19dca6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-3.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "e44ab9428c30b89aa072fab14ebd6e22fed7754a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-1.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "304a70922ba4d8e7d7281e352899ca86d4d15efa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-2.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "60618b5e49bf4735861ec57596d0a4e920f0cd41", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-3.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "f290720169a62d1d27609c99c42f8e2a9e72382c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_tu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-1.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "b04fc74e2a69a4c4866568d391133a959a7b29bb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_tu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-2.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "ce0fc4d43c3c433b774c79f92f429131c4891797", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_tu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-3.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "59f5a81b9b0be3ea5ace8cef222d56bee0f9880c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_tu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-1.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "b44e2195599bf32dc39d2ef9878c4e433a900297", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_tu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-2.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "ed58ccf439d96e868058813500fc4e8938374d31", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vadc_vxm_tu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e4f61c3e703f38c5621d5114e776d245abdf73/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-3.C?ref=b7e4f61c3e703f38c5621d5114e776d245abdf73", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test____riscv_vadc_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test____riscv_vadc_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test____riscv_vadc_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test____riscv_vadc_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test____riscv_vadc_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test____riscv_vadc_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test____riscv_vadc_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test____riscv_vadc_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test____riscv_vadc_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test____riscv_vadc_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test____riscv_vadc_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test____riscv_vadc_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test____riscv_vadc_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test____riscv_vadc_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test____riscv_vadc_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test____riscv_vadc_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test____riscv_vadc_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test____riscv_vadc_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test____riscv_vadc_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test____riscv_vadc_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test____riscv_vadc_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test____riscv_vadc_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test____riscv_vadc_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test____riscv_vadc_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test____riscv_vadc_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test____riscv_vadc_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test____riscv_vadc_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test____riscv_vadc_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test____riscv_vadc_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test____riscv_vadc_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test____riscv_vadc_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test____riscv_vadc_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test____riscv_vadc_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test____riscv_vadc_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test____riscv_vadc_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test____riscv_vadc_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test____riscv_vadc_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test____riscv_vadc_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test____riscv_vadc_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test____riscv_vadc_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test____riscv_vadc_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test____riscv_vadc_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test____riscv_vadc_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test____riscv_vadc_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}]}