{"sha": "1257aad1073e1fb8989acdf7ca832fba82d10534", "node_id": "C_kwDOANBUbNoAKDEyNTdhYWQxMDczZTFmYjg5ODlhY2RmN2NhODMyZmJhODJkMTA1MzQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-18T13:02:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-18T14:15:19Z"}, "message": "Apply TLC to vect_supportable_dr_alignment\n\nThis fixes handling of the return value of vect_supportable_dr_alignment\nin multiple places.  We should use the enum type and not int for\nstorage and not auto-convert the enum return value to bool.  It also\ncommonizes the read/write path in vect_supportable_dr_alignment.\n\n2021-10-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_peeling_hash_insert): Do\n\tnot auto-convert dr_alignment_support to bool.\n\t(vect_peeling_supportable): Likewise.\n\t(vect_enhance_data_refs_alignment): Likewise.\n\t(vect_supportable_dr_alignment): Commonize read/write case.\n\t* tree-vect-stmts.c (vect_get_store_cost): Use\n\tdr_alignment_support, not int, for the vect_supportable_dr_alignment\n\tresult.\n\t(vect_get_load_cost): Likewise.", "tree": {"sha": "69253cd1e6c8a1f3ed8d1efc0e78755a8c1e7c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69253cd1e6c8a1f3ed8d1efc0e78755a8c1e7c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1257aad1073e1fb8989acdf7ca832fba82d10534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1257aad1073e1fb8989acdf7ca832fba82d10534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1257aad1073e1fb8989acdf7ca832fba82d10534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1257aad1073e1fb8989acdf7ca832fba82d10534/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d6ff3916882c7af80f92e0030cedb0788572d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d6ff3916882c7af80f92e0030cedb0788572d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d6ff3916882c7af80f92e0030cedb0788572d3"}], "stats": {"total": 49, "additions": 18, "deletions": 31}, "files": [{"sha": "4c9215874c91ab4b654e428e169035e9bb95bdef", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1257aad1073e1fb8989acdf7ca832fba82d10534/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1257aad1073e1fb8989acdf7ca832fba82d10534/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=1257aad1073e1fb8989acdf7ca832fba82d10534", "patch": "@@ -1471,7 +1471,8 @@ vect_peeling_hash_insert (hash_table<peel_info_hasher> *peeling_htab,\n   _vect_peel_info **new_slot;\n   tree vectype = STMT_VINFO_VECTYPE (dr_info->stmt);\n   bool supportable_dr_alignment\n-    = vect_supportable_dr_alignment (loop_vinfo, dr_info, vectype, true);\n+    = (vect_supportable_dr_alignment (loop_vinfo, dr_info, vectype, true)\n+       != dr_unaligned_unsupported);\n \n   elem.npeel = npeel;\n   slot = peeling_htab->find (&elem);\n@@ -1663,7 +1664,7 @@ vect_peeling_supportable (loop_vec_info loop_vinfo, dr_vec_info *dr0_info,\n \t= vect_supportable_dr_alignment (loop_vinfo, dr_info, vectype, false);\n       SET_DR_MISALIGNMENT (dr_info, save_misalignment);\n \n-      if (!supportable_dr_alignment)\n+      if (supportable_dr_alignment == dr_unaligned_unsupported)\n \treturn false;\n     }\n \n@@ -1999,11 +2000,11 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \n \t      /* Check for data refs with unsupportable alignment that\n \t         can be peeled.  */\n-\t      if (!supportable_dr_alignment)\n-\t      {\n-\t\tone_dr_unsupportable = true;\n-\t\tunsupportable_dr_info = dr_info;\n-\t      }\n+\t      if (supportable_dr_alignment == dr_unaligned_unsupported)\n+\t\t{\n+\t\t  one_dr_unsupportable = true;\n+\t\t  unsupportable_dr_info = dr_info;\n+\t\t}\n \n \t      if (!first_store && DR_IS_WRITE (dr))\n \t\t{\n@@ -2356,7 +2357,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \t  supportable_dr_alignment\n \t    = vect_supportable_dr_alignment (loop_vinfo, dr_info, vectype,\n \t\t\t\t\t     false);\n-          if (!supportable_dr_alignment)\n+\t  if (supportable_dr_alignment == dr_unaligned_unsupported)\n             {\n \t      if (known_alignment_for_access_p (dr_info, vectype)\n                   || LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo).length ()\n@@ -6720,9 +6721,6 @@ vect_supportable_dr_alignment (vec_info *vinfo, dr_vec_info *dr_info,\n \n   if (DR_IS_READ (dr))\n     {\n-      bool is_packed = false;\n-      tree type = (TREE_TYPE (DR_REF (dr)));\n-\n       if (optab_handler (vec_realign_load_optab, mode) != CODE_FOR_nothing\n \t  && (!targetm.vectorize.builtin_mask_for_load\n \t      || targetm.vectorize.builtin_mask_for_load ()))\n@@ -6744,26 +6742,15 @@ vect_supportable_dr_alignment (vec_info *vinfo, dr_vec_info *dr_info,\n \t  else\n \t    return dr_explicit_realign_optimized;\n \t}\n-      if (!known_alignment_for_access_p (dr_info, vectype))\n-\tis_packed = not_size_aligned (DR_REF (dr));\n-\n-      if (targetm.vectorize.support_vector_misalignment\n-\t    (mode, type, dr_misalignment (dr_info, vectype), is_packed))\n-\t/* Can't software pipeline the loads, but can at least do them.  */\n-\treturn dr_unaligned_supported;\n     }\n-  else\n-    {\n-      bool is_packed = false;\n-      tree type = (TREE_TYPE (DR_REF (dr)));\n-\n-      if (!known_alignment_for_access_p (dr_info, vectype))\n-\tis_packed = not_size_aligned (DR_REF (dr));\n \n-     if (targetm.vectorize.support_vector_misalignment\n-\t   (mode, type, dr_misalignment (dr_info, vectype), is_packed))\n-       return dr_unaligned_supported;\n-    }\n+  bool is_packed = false;\n+  tree type = (TREE_TYPE (DR_REF (dr)));\n+  if (!known_alignment_for_access_p (dr_info, vectype))\n+    is_packed = not_size_aligned (DR_REF (dr));\n+  if (targetm.vectorize.support_vector_misalignment\n+\t(mode, type, dr_misalignment (dr_info, vectype), is_packed))\n+    return dr_unaligned_supported;\n \n   /* Unsupported.  */\n   return dr_unaligned_unsupported;"}, {"sha": "eaf3f0abef332ee1f7168effcab2c80e69d695d5", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1257aad1073e1fb8989acdf7ca832fba82d10534/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1257aad1073e1fb8989acdf7ca832fba82d10534/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1257aad1073e1fb8989acdf7ca832fba82d10534", "patch": "@@ -1027,7 +1027,7 @@ vect_get_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n {\n   dr_vec_info *dr_info = STMT_VINFO_DR_INFO (stmt_info);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  int alignment_support_scheme\n+  dr_alignment_support alignment_support_scheme\n     = vect_supportable_dr_alignment (vinfo, dr_info, vectype, false);\n \n   switch (alignment_support_scheme)\n@@ -1218,7 +1218,7 @@ vect_get_load_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n {\n   dr_vec_info *dr_info = STMT_VINFO_DR_INFO (stmt_info);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  int alignment_support_scheme\n+  dr_alignment_support alignment_support_scheme\n     = vect_supportable_dr_alignment (vinfo, dr_info, vectype, false);\n \n   switch (alignment_support_scheme)"}]}