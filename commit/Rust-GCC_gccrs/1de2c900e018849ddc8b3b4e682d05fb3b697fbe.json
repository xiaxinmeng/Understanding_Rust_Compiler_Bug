{"sha": "1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRlMmM5MDBlMDE4ODQ5ZGRjOGIzYjRlNjgyZDA1ZmIzYjY5N2ZiZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-02-06T20:12:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-02-06T20:12:10Z"}, "message": "re PR c/36432 (\u201cincompatible pointer type\u201d with pointer to array as a struct member)\n\n\tPR c/36432\n\t* c-decl.c (grokdeclarator): Don't treat [] declarators in fields\n\tas indicating flexible array members unless the field itself is\n\tbeing declarared as the incomplete array.\n\ntestsuite:\n\t* gcc.dg/c90-flex-array-2.c, gcc.dg/c99-flex-array-6.c: New tests.\n\nFrom-SVN: r143989", "tree": {"sha": "3b7774a90eed648f1e7bacbb2a0a05aaea2a1422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b7774a90eed648f1e7bacbb2a0a05aaea2a1422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e901811a8be42e9c292324550c84be46d4f27e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e901811a8be42e9c292324550c84be46d4f27e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e901811a8be42e9c292324550c84be46d4f27e4c"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "fcbe406326b556a2347203b5aab15f759763901d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "patch": "@@ -1,3 +1,10 @@\n+2009-02-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/36432\n+\t* c-decl.c (grokdeclarator): Don't treat [] declarators in fields\n+\tas indicating flexible array members unless the field itself is\n+\tbeing declarared as the incomplete array.\n+\n 2009-02-06  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/38844"}, {"sha": "9fadad385c9221b2f2ab2e2b41bbc24952404dfc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "patch": "@@ -4389,20 +4389,31 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      }\n \t    else if (decl_context == FIELD)\n \t      {\n+\t\tbool flexible_array_member = false;\n \t\tif (array_parm_vla_unspec_p)\n \t\t  /* Field names can in fact have function prototype\n \t\t     scope so [*] is disallowed here through making\n \t\t     the field variably modified, not through being\n \t\t     something other than a declaration with function\n \t\t     prototype scope.  */\n \t\t  size_varies = 1;\n-\t\telse if (pedantic && !flag_isoc99 && !in_system_header)\n+\t\telse\n+\t\t  {\n+\t\t    const struct c_declarator *t = declarator;\n+\t\t    while (t->kind == cdk_attrs)\n+\t\t      t = t->declarator;\n+\t\t    flexible_array_member = (t->kind == cdk_id);\n+\t\t  }\n+\t\tif (flexible_array_member\n+\t\t    && pedantic && !flag_isoc99 && !in_system_header)\n \t\t  pedwarn (input_location, OPT_pedantic,\n \t\t\t   \"ISO C90 does not support flexible array members\");\n \n \t\t/* ISO C99 Flexible array members are effectively\n \t\t   identical to GCC's zero-length array extension.  */\n-\t\titype = build_range_type (sizetype, size_zero_node, NULL_TREE);\n+\t\tif (flexible_array_member || array_parm_vla_unspec_p)\n+\t\t  itype = build_range_type (sizetype, size_zero_node,\n+\t\t\t\t\t    NULL_TREE);\n \t      }\n \t    else if (decl_context == PARM)\n \t      {"}, {"sha": "f88b297c83bc2d055b8d26b6b0794b3102957024", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "patch": "@@ -1,3 +1,8 @@\n+2009-02-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/36432\n+\t* gcc.dg/c90-flex-array-2.c, gcc.dg/c99-flex-array-6.c: New tests.\n+\n 2009-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/39106"}, {"sha": "425ce84649386fba7fe5fc0d234ef47c2e306dd3", "filename": "gcc/testsuite/gcc.dg/c90-flex-array-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-2.c?ref=1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "patch": "@@ -0,0 +1,15 @@\n+/* [] does not indicate a flexible array member unless it is the field\n+   itself being declared as an incomplete array type rather than a\n+   pointer or other type derived from such a type.  PR 36432.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+void\n+f (void)\n+{\n+  int a[3];\n+  int (*p)[];\n+  struct { int (*p)[]; } s;\n+  p = &a;\n+  s.p = &a;\n+}"}, {"sha": "468c4b3cdaa0e39c1ad3b5e515cac26b0a36e147", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-6.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de2c900e018849ddc8b3b4e682d05fb3b697fbe/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-6.c?ref=1de2c900e018849ddc8b3b4e682d05fb3b697fbe", "patch": "@@ -0,0 +1,15 @@\n+/* [] does not indicate a flexible array member unless it is the field\n+   itself being declared as an incomplete array type rather than a\n+   pointer or other type derived from such a type.  PR 36432.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+void\n+f (void)\n+{\n+  int a[3];\n+  int (*p)[];\n+  struct { int (*p)[]; } s;\n+  p = &a;\n+  s.p = &a;\n+}"}]}