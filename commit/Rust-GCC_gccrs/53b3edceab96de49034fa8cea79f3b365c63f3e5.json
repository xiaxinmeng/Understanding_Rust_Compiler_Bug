{"sha": "53b3edceab96de49034fa8cea79f3b365c63f3e5", "node_id": "C_kwDOANBUbNoAKDUzYjNlZGNlYWI5NmRlNDkwMzRmYThjZWE3OWYzYjM2NWM2M2YzZTU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-11T17:06:50Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-11T21:13:17Z"}, "message": "Make ranger optional in path_range_query.\n\nAll users of path_range_query are currently allocating a gimple_ranger\nonly to pass it to the query object.  It's tidier to just do it from\npath_range_query if no ranger was passed.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::path_range_query): New\n\tctor without a ranger.\n\t(path_range_query::~path_range_query): Free ranger if necessary.\n\t(path_range_query::range_on_path_entry): Adjust m_ranger for pointer.\n\t(path_range_query::ssa_range_in_phi): Same.\n\t(path_range_query::compute_ranges_in_block): Same.\n\t(path_range_query::compute_imports): Same.\n\t(path_range_query::compute_ranges): Same.\n\t(path_range_query::range_of_stmt): Same.\n\t(path_range_query::compute_outgoing_relations): Same.\n\t* gimple-range-path.h (class path_range_query): New ctor.\n\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Remove gimple_ranger\n\tas path_range_query allocates one.\n\t* tree-ssa-threadbackward.c (class back_threader): Remove m_ranger.\n\t(back_threader::~back_threader): Same.", "tree": {"sha": "009961b5e6e7c9c455d4e7d5024809d28c17cfd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/009961b5e6e7c9c455d4e7d5024809d28c17cfd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b3edceab96de49034fa8cea79f3b365c63f3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b3edceab96de49034fa8cea79f3b365c63f3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b3edceab96de49034fa8cea79f3b365c63f3e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b3edceab96de49034fa8cea79f3b365c63f3e5/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7753db4a7c071fef7a4e7fe2650d6c59cc34066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7753db4a7c071fef7a4e7fe2650d6c59cc34066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7753db4a7c071fef7a4e7fe2650d6c59cc34066"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "b9aceaf2565aaa844dd56de35b1a574153798c86", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=53b3edceab96de49034fa8cea79f3b365c63f3e5", "patch": "@@ -36,20 +36,33 @@ along with GCC; see the file COPYING3.  If not see\n // Internal construct to help facilitate debugging of solver.\n #define DEBUG_SOLVER (dump_file && (param_threader_debug == THREADER_DEBUG_ALL))\n \n-path_range_query::path_range_query (gimple_ranger &ranger, bool resolve)\n-  : m_ranger (ranger)\n+path_range_query::path_range_query (gimple_ranger *ranger, bool resolve)\n+  : m_cache (new ssa_global_cache),\n+    m_has_cache_entry (BITMAP_ALLOC (NULL)),\n+    m_ranger (ranger),\n+    m_resolve (resolve),\n+    m_alloced_ranger (false)\n {\n-  m_cache = new ssa_global_cache;\n-  m_has_cache_entry = BITMAP_ALLOC (NULL);\n-  m_resolve = resolve;\n-  m_oracle = new path_oracle (ranger.oracle ());\n+  m_oracle = new path_oracle (ranger->oracle ());\n+}\n+\n+path_range_query::path_range_query (bool resolve)\n+  : m_cache (new ssa_global_cache),\n+    m_has_cache_entry (BITMAP_ALLOC (NULL)),\n+    m_ranger (new gimple_ranger),\n+    m_resolve (resolve),\n+    m_alloced_ranger (true)\n+{\n+  m_oracle = new path_oracle (m_ranger->oracle ());\n }\n \n path_range_query::~path_range_query ()\n {\n   BITMAP_FREE (m_has_cache_entry);\n   delete m_cache;\n   delete m_oracle;\n+  if (m_alloced_ranger)\n+    delete m_ranger;\n }\n \n // Mark cache entry for NAME as unused.\n@@ -140,7 +153,7 @@ path_range_query::range_on_path_entry (irange &r, tree name)\n   gimple *last = last_stmt (entry);\n   if (last)\n     {\n-      if (m_ranger.range_of_expr (r, name, last))\n+      if (m_ranger->range_of_expr (r, name, last))\n \treturn;\n       gcc_unreachable ();\n     }\n@@ -156,7 +169,7 @@ path_range_query::range_on_path_entry (irange &r, tree name)\n     {\n       edge e = EDGE_PRED (entry, i);\n       if (e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n-\t  && m_ranger.range_on_edge (tmp, e, name))\n+\t  && m_ranger->range_on_edge (tmp, e, name))\n \t{\n \t  r.union_ (tmp);\n \t  changed = true;\n@@ -244,7 +257,7 @@ path_range_query::ssa_range_in_phi (irange &r, gphi *phi)\n \n   if (at_entry ())\n     {\n-      if (m_resolve && m_ranger.range_of_expr (r, name, phi))\n+      if (m_resolve && m_ranger->range_of_expr (r, name, phi))\n \treturn;\n \n       // Try fold just in case we can resolve simple things like PHI <5(99), 6(88)>.\n@@ -275,7 +288,7 @@ path_range_query::ssa_range_in_phi (irange &r, gphi *phi)\n \t\t  range_on_path_entry (r, arg);\n \t\telse\n \t\t  r.set_varying (TREE_TYPE (name));\n-\t\tm_ranger.range_on_edge (tmp, e_in, arg);\n+\t\tm_ranger->range_on_edge (tmp, e_in, arg);\n \t\tr.intersect (tmp);\n \t\treturn;\n \t      }\n@@ -370,7 +383,7 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n   EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n-      gori_compute &g = m_ranger.gori ();\n+      gori_compute &g = m_ranger->gori ();\n       bitmap exports = g.exports (bb);\n \n       if (bitmap_bit_p (exports, i))\n@@ -452,7 +465,7 @@ void\n path_range_query::compute_imports (bitmap imports, basic_block exit)\n {\n   // Start with the imports from the exit block...\n-  bitmap r_imports = m_ranger.gori ().imports (exit);\n+  bitmap r_imports = m_ranger->gori ().imports (exit);\n   bitmap_copy (imports, r_imports);\n \n   auto_vec<tree> worklist (bitmap_count_bits (imports));\n@@ -539,7 +552,7 @@ path_range_query::compute_ranges (const vec<basic_block> &path,\n \n       if (m_resolve)\n \t{\n-\t  gori_compute &gori = m_ranger.gori ();\n+\t  gori_compute &gori = m_ranger->gori ();\n \t  tree name;\n \n \t  // Exported booleans along the path, may help conditionals.\n@@ -659,7 +672,7 @@ path_range_query::range_of_stmt (irange &r, gimple *stmt, tree)\n   if (m_resolve)\n     {\n       fold_using_range f;\n-      jt_fur_source src (stmt, this, &m_ranger.gori (), m_path);\n+      jt_fur_source src (stmt, this, &m_ranger->gori (), m_path);\n       if (!f.fold_stmt (r, stmt, src))\n \tr.set_varying (type);\n     }\n@@ -750,7 +763,7 @@ path_range_query::compute_outgoing_relations (basic_block bb, basic_block next)\n       else\n \tgcc_unreachable ();\n \n-      jt_fur_source src (NULL, this, &m_ranger.gori (), m_path);\n+      jt_fur_source src (NULL, this, &m_ranger->gori (), m_path);\n       src.register_outgoing_edges (cond, r, e0, e1);\n     }\n }"}, {"sha": "ea4864d35ef4508aa56d23d602a608c32c26c97e", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=53b3edceab96de49034fa8cea79f3b365c63f3e5", "patch": "@@ -32,7 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n class path_range_query : public range_query\n {\n public:\n-  path_range_query (class gimple_ranger &ranger, bool resolve);\n+  path_range_query (class gimple_ranger *ranger, bool resolve = true);\n+  path_range_query (bool resolve = true);\n   virtual ~path_range_query ();\n   void compute_ranges (const vec<basic_block> &, const bitmap_head *imports = NULL);\n   void compute_ranges (edge e);\n@@ -86,7 +87,7 @@ class path_range_query : public range_query\n   auto_vec<basic_block> m_path;\n \n   auto_bitmap m_imports;\n-  gimple_ranger &m_ranger;\n+  gimple_ranger *m_ranger;\n   non_null_ref m_non_null;\n \n   // Current path position.\n@@ -97,6 +98,10 @@ class path_range_query : public range_query\n \n   // Set if there were any undefined expressions while pre-calculating path.\n   bool m_undefined_path;\n+\n+  // True if m_ranger was allocated in this class and must be freed at\n+  // destruction.\n+  bool m_alloced_ranger;\n };\n \n // Return TRUE if NAME is in the import bitmap."}, {"sha": "566cc275317e10203bea0156ef8e675202d9058f", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=53b3edceab96de49034fa8cea79f3b365c63f3e5", "patch": "@@ -384,8 +384,7 @@ ch_base::copy_headers (function *fun)\n   auto_vec<loop_p> candidates;\n   auto_vec<std::pair<edge, loop_p> > copied;\n \n-  gimple_ranger *ranger = new gimple_ranger;\n-  path_range_query *query = new path_range_query (*ranger, /*resolve=*/true);\n+  path_range_query *query = new path_range_query;\n   for (auto loop : loops_list (cfun, 0))\n     {\n       int initial_limit = param_max_loop_header_insns;\n@@ -423,7 +422,6 @@ ch_base::copy_headers (function *fun)\n     }\n   /* Do not use ranger after we change the IL and not have updated SSA.  */\n   delete query;\n-  delete ranger;\n \n   for (auto loop : candidates)\n     {"}, {"sha": "71989c288a7077e8c0790b71015e100cb025b870", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b3edceab96de49034fa8cea79f3b365c63f3e5/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=53b3edceab96de49034fa8cea79f3b365c63f3e5", "patch": "@@ -100,7 +100,6 @@ class back_threader\n \n   back_threader_registry m_registry;\n   back_threader_profitability m_profit;\n-  gimple_ranger *m_ranger;\n   path_range_query *m_solver;\n \n   // Current path being analyzed.\n@@ -143,15 +142,13 @@ back_threader::back_threader (function *fun, unsigned flags, bool first)\n \n   m_fun = fun;\n   m_flags = flags;\n-  m_ranger = new gimple_ranger;\n-  m_solver = new path_range_query (*m_ranger, flags & BT_RESOLVE);\n+  m_solver = new path_range_query (flags & BT_RESOLVE);\n   m_last_stmt = NULL;\n }\n \n back_threader::~back_threader ()\n {\n   delete m_solver;\n-  delete m_ranger;\n \n   loop_optimizer_finalize ();\n }"}]}