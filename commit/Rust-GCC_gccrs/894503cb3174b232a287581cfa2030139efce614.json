{"sha": "894503cb3174b232a287581cfa2030139efce614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0NTAzY2IzMTc0YjIzMmEyODc1ODFjZmEyMDMwMTM5ZWZjZTYxNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T17:57:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T17:57:20Z"}, "message": "Correct protection against recursive types.\n\nFrom-SVN: r167807", "tree": {"sha": "ddf0e0df1d4fea47c615b9a250b250f5f245cadb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddf0e0df1d4fea47c615b9a250b250f5f245cadb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894503cb3174b232a287581cfa2030139efce614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894503cb3174b232a287581cfa2030139efce614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894503cb3174b232a287581cfa2030139efce614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894503cb3174b232a287581cfa2030139efce614/comments", "author": null, "committer": null, "parents": [{"sha": "39752c6b14932596939ae340e5da962f4263018a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39752c6b14932596939ae340e5da962f4263018a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39752c6b14932596939ae340e5da962f4263018a"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "98c4a979840e7ff4e18bf8669e9cb0cb99a07372", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894503cb3174b232a287581cfa2030139efce614/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894503cb3174b232a287581cfa2030139efce614/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=894503cb3174b232a287581cfa2030139efce614", "patch": "@@ -6795,14 +6795,10 @@ Named_type::do_get_tree(Gogo* gogo)\n       break;\n \n     case TYPE_FUNCTION:\n-      // GENERIC can't handle a pointer to a function type whose\n-      // return type is a pointer to the function type itself.  It\n-      // does into infinite loops when walking the types.\n-      if (this->seen_\n-\t  && this->function_type()->results() != NULL\n-\t  && this->function_type()->results()->size() == 1\n-\t  && (this->function_type()->results()->front().type()->forwarded()\n-\t      == this))\n+      // Don't recur infinitely if a function type refers to itself.\n+      // Ideally we would build a circular data structure here, but\n+      // GENERIC can't handle them.\n+      if (this->seen_)\n \treturn ptr_type_node;\n       this->seen_ = true;\n       t = Type::get_named_type_tree(gogo, this->type_);\n@@ -6813,9 +6809,10 @@ Named_type::do_get_tree(Gogo* gogo)\n       break;\n \n     case TYPE_POINTER:\n-      // GENERIC can't handle a pointer type which points to itself.\n-      // It goes into infinite loops when walking the types.\n-      if (this->seen_ && this->points_to()->forwarded() == this)\n+      // Don't recur infinitely if a pointer type refers to itself.\n+      // Ideally we would build a circular data structure here, but\n+      // GENERIC can't handle them.\n+      if (this->seen_)\n \treturn ptr_type_node;\n       this->seen_ = true;\n       t = Type::get_named_type_tree(gogo, this->type_);"}]}