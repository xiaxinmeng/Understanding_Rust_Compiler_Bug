{"sha": "100c742042048f88027789f7ad2c0841c3df3471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwYzc0MjA0MjA0OGY4ODAyNzc4OWY3YWQyYzA4NDFjM2RmMzQ3MQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-09-24T16:05:50Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-09-24T16:05:50Z"}, "message": "s390.c (preferred_la_operand_p): New function.\n\n\t* config/s390/s390.c (preferred_la_operand_p): New function.\n\t* config/s390/s390-protos.h (preferred_la_operand_p): Declare it.\n\t* config/s390/s390.md (\"addaddr_esame\", \"*la_ccclobber\"): Replace by ...\n\t(\"*la_64_cc\", \"*la_31_cc\", splitters): ... these.\n\t(\"*la_31\"): Deactivate for TARGET_64BIT.\n\t(\"*la_31_and\", \"*la_31_and_cc\"): New.\n\nFrom-SVN: r57473", "tree": {"sha": "335e07bad7fbda92c1531fb2c8034973675946a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/335e07bad7fbda92c1531fb2c8034973675946a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100c742042048f88027789f7ad2c0841c3df3471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100c742042048f88027789f7ad2c0841c3df3471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100c742042048f88027789f7ad2c0841c3df3471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100c742042048f88027789f7ad2c0841c3df3471/comments", "author": null, "committer": null, "parents": [{"sha": "9fc63af58cc65a4a9d0946dd69f0c4091bd7bc8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc63af58cc65a4a9d0946dd69f0c4091bd7bc8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc63af58cc65a4a9d0946dd69f0c4091bd7bc8c"}], "stats": {"total": 118, "additions": 97, "deletions": 21}, "files": [{"sha": "6b3090263fecd1991902586667c703ae93a5b583", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c742042048f88027789f7ad2c0841c3df3471/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c742042048f88027789f7ad2c0841c3df3471/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=100c742042048f88027789f7ad2c0841c3df3471", "patch": "@@ -1,3 +1,12 @@\n+2002-09-24  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (preferred_la_operand_p): New function.\n+\t* config/s390/s390-protos.h (preferred_la_operand_p): Declare it.\n+\t* config/s390/s390.md (\"addaddr_esame\", \"*la_ccclobber\"): Replace by ...\n+\t(\"*la_64_cc\", \"*la_31_cc\", splitters): ... these.\n+\t(\"*la_31\"): Deactivate for TARGET_64BIT.\n+\t(\"*la_31_and\", \"*la_31_and_cc\"): New.\n+\n 2002-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* real.h (real_value): Make `exp' explicitly signed."}, {"sha": "aaf25d0330e4d8aabdfb226e83b13c99dee17db9", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c742042048f88027789f7ad2c0841c3df3471/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c742042048f88027789f7ad2c0841c3df3471/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=100c742042048f88027789f7ad2c0841c3df3471", "patch": "@@ -50,6 +50,7 @@ extern enum machine_mode s390_tm_ccmode PARAMS ((rtx, rtx, int));\n extern enum machine_mode s390_select_ccmode PARAMS ((enum rtx_code, rtx, rtx));\n extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n extern int legitimate_la_operand_p PARAMS ((rtx));\n+extern int preferred_la_operand_p PARAMS ((rtx, int));\n extern int legitimate_pic_operand_p PARAMS ((rtx));\n extern int legitimate_constant_p PARAMS ((rtx));\n extern int legitimate_reload_constant_p PARAMS ((rtx));"}, {"sha": "50dbc3672f50c0633c73f6ac85f652c5ebc4c1b1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c742042048f88027789f7ad2c0841c3df3471/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c742042048f88027789f7ad2c0841c3df3471/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=100c742042048f88027789f7ad2c0841c3df3471", "patch": "@@ -1756,6 +1756,34 @@ legitimate_la_operand_p (op)\n   return FALSE;\n }\n \n+/* Return 1 if OP is a valid operand for the LA instruction,\n+   and we prefer to use LA over addition to compute it.\n+   If STRICT is true, only accept operands that will never\n+   change to something we cannot recognize as preferred.  */\n+   \n+int\n+preferred_la_operand_p (op, strict)\n+     register rtx op;\n+     int strict;\n+{\n+  struct s390_address addr;\n+  if (!s390_decompose_address (op, &addr))\n+    return FALSE;\n+\n+  if (!TARGET_64BIT && !addr.pointer)\n+    return FALSE;\n+\n+  if (addr.pointer)\n+    return TRUE;\n+\n+  if (!strict) \n+    if ((addr.base && REG_P (addr.base) && REG_POINTER (addr.base))\n+        || (addr.indx && REG_P (addr.indx) && REG_POINTER (addr.indx)))\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n /* Emit a forced load-address operation to load SRC into DST.\n    This will use the LOAD ADDRESS instruction even in situations\n    where legitimate_la_operand_p (SRC) returns false.  */"}, {"sha": "650d82d200f648a3c38fa74493fd0067a22d87a3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 59, "deletions": 21, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c742042048f88027789f7ad2c0841c3df3471/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c742042048f88027789f7ad2c0841c3df3471/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=100c742042048f88027789f7ad2c0841c3df3471", "patch": "@@ -2797,20 +2797,24 @@\n ; adddi3 instruction pattern(s).\n ;\n \n-(define_insn \"addaddr_esame\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a,a\")\n-        (plus:DI (match_operand:DI 1 \"register_operand\" \"%a,a\")\n-                 (match_operand:DI 2 \"nonmemory_operand\" \"J,a\")))]\n-  \"TARGET_64BIT && (((REGNO (operands[1]) == STACK_POINTER_REGNUM ) ||\n-     (REGNO (operands[1]) == BASE_REGISTER)) && \n-\t(GET_CODE (operands[2]) == REG ||\n-\t CONST_OK_FOR_LETTER_P (INTVAL (operands[2]),'J')))\"\n-  \"@\n-   la\\\\t%0,%c2(,%1)\n-   la\\\\t%0,0(%1,%2)\"\n-  [(set_attr \"op_type\" \"RX\")\n-   (set_attr \"atype\"   \"mem\")\n-   (set_attr \"type\"    \"la\")])\n+(define_insn \"*la_64_cc\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (match_operand:QI 1 \"address_operand\"  \"p\"))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\n+   && preferred_la_operand_p (operands[1], 1)\"\n+  \"#\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")\n+   (set_attr \"type\"     \"la\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (match_operand:QI 1 \"address_operand\" \"\"))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT && reload_completed\n+   && preferred_la_operand_p (operands[1], 0)\"\n+  [(set (match_dup 0) (match_dup 1))])\n \n (define_insn \"*adddi3_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -2997,15 +3001,24 @@\n ; addsi3 instruction pattern(s).\n ;\n \n-(define_insn \"*la_ccclobber\"\n+(define_insn \"*la_31_cc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (match_operand:QI 1 \"address_operand\"  \"p\"))\n    (clobber (reg:CC 33))]\n-  \"legitimate_la_operand_p (operands[1])\"\n-  \"la\\\\t%0,%a1\"\n-   [(set_attr \"op_type\"  \"RX\")\n-    (set_attr \"atype\"    \"mem\")\n-    (set_attr \"type\"     \"la\")])\n+  \"!TARGET_64BIT\n+   && preferred_la_operand_p (operands[1], 1)\"\n+  \"#\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")\n+   (set_attr \"type\"     \"la\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+        (match_operand:QI 1 \"address_operand\" \"\"))\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_64BIT && reload_completed\n+   && preferred_la_operand_p (operands[1], 0)\"\n+  [(set (match_dup 0) (match_dup 1))])\n \n (define_insn \"*addsi3_imm_cc\"\n   [(set (reg 33) \n@@ -3149,12 +3162,37 @@\n (define_insn \"*la_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (match_operand:QI 1 \"address_operand\" \"p\"))]\n-  \"legitimate_la_operand_p (operands[1])\"\n+  \"!TARGET_64BIT && legitimate_la_operand_p (operands[1])\"\n+  \"la\\\\t%0,%a1\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")\n+   (set_attr \"type\"     \"la\")])\n+\n+(define_insn \"*la_31_and\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (and:SI (match_operand:QI 1 \"address_operand\" \"p\")\n+                (const_int 2147483647)))]\n+  \"!TARGET_64BIT\"\n   \"la\\\\t%0,%a1\"\n   [(set_attr \"op_type\"  \"RX\")\n    (set_attr \"atype\"    \"mem\")\n    (set_attr \"type\"     \"la\")])\n \n+(define_insn_and_split \"*la_31_and_cc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (and:SI (match_operand:QI 1 \"address_operand\" \"p\")\n+                (const_int 2147483647)))\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) \n+        (and:SI (match_dup 1) (const_int 2147483647)))]\n+  \"\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"atype\"    \"mem\")\n+   (set_attr \"type\"     \"la\")])\n+\n (define_insn \"force_la_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (match_operand:QI 1 \"address_operand\" \"p\"))"}]}