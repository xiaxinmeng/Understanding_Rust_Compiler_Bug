{"sha": "d8e19f3114a751fd78aaef68e763f24d286b0f8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlMTlmMzExNGE3NTFmZDc4YWFlZjY4ZTc2M2YyNGQyODZiMGY4Yw==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2015-09-02T10:51:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-02T10:51:14Z"}, "message": "re PR libstdc++/67408 (<mutex> assumes that __gthread_mutex_t and__gthread_recursive_mutex_t are the same types)\n\n2015-09-02  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n\n\tPR libstdc++/67408\n\t* include/std/mutex (__timed_mutex_impl::_M_try_lock_until): Use\n\t_Derived::_M_timedlock().\n\t(timed_mutex): Add _M_timedlock() and make base class a friend.\n\t(recursive_timed_mutex): Likewise.\n\nFrom-SVN: r227400", "tree": {"sha": "cee85e202d87140912455fbae7d5acbf64c5a58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee85e202d87140912455fbae7d5acbf64c5a58e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e19f3114a751fd78aaef68e763f24d286b0f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e19f3114a751fd78aaef68e763f24d286b0f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e19f3114a751fd78aaef68e763f24d286b0f8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e19f3114a751fd78aaef68e763f24d286b0f8c/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c743086d26a076509111ce079b9afe10c3d43d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c743086d26a076509111ce079b9afe10c3d43d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c743086d26a076509111ce079b9afe10c3d43d3"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "d9c9d49353f7db8601187ea9c82be882832ff452", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e19f3114a751fd78aaef68e763f24d286b0f8c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e19f3114a751fd78aaef68e763f24d286b0f8c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d8e19f3114a751fd78aaef68e763f24d286b0f8c", "patch": "@@ -1,3 +1,11 @@\n+2015-09-02  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\tPR libstdc++/67408\n+\t* include/std/mutex (__timed_mutex_impl::_M_try_lock_until): Use\n+\t_Derived::_M_timedlock().\n+\t(timed_mutex): Add _M_timedlock() and make base class a friend.\n+\t(recursive_timed_mutex): Likewise.\n+\n 2015-08-28  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/67362"}, {"sha": "790508c65c235300cffc593b974acf79d02ef4dd", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e19f3114a751fd78aaef68e763f24d286b0f8c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e19f3114a751fd78aaef68e763f24d286b0f8c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=d8e19f3114a751fd78aaef68e763f24d286b0f8c", "patch": "@@ -230,8 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    static_cast<long>(__ns.count())\n \t  };\n \n-\t  auto __mutex = static_cast<_Derived*>(this)->native_handle();\n-\t  return !__gthread_mutex_timedlock(__mutex, &__ts);\n+\t  return static_cast<_Derived*>(this)->_M_timedlock(__ts);\n \t}\n \n       template<typename _Clock, typename _Duration>\n@@ -293,6 +292,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     native_handle_type\n     native_handle()\n     { return &_M_mutex; }\n+\n+    private:\n+      friend class __timed_mutex_impl<timed_mutex>;\n+\n+      bool\n+      _M_timedlock(const __gthread_time_t& __ts)\n+      { return !__gthread_mutex_timedlock(&_M_mutex, &__ts); }\n   };\n \n   /// recursive_timed_mutex\n@@ -346,6 +352,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     native_handle_type\n     native_handle()\n     { return &_M_mutex; }\n+\n+    private:\n+      friend class __timed_mutex_impl<recursive_timed_mutex>;\n+\n+      bool\n+      _M_timedlock(const __gthread_time_t& __ts)\n+      { return !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts); }\n   };\n #endif\n #endif // _GLIBCXX_HAS_GTHREADS"}]}