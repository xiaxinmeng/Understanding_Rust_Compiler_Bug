{"sha": "b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5MjgyYzRjMTBmY2I4ZmI4YTVjZjMwNzM2ZTViOGExYTRlM2NlYw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-08-14T08:38:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:38:03Z"}, "message": "debug.adb: Improve -gnatdI to cover all cases of serialization Add documentation of dZ, d.t\n\n2007-08-14  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Improve -gnatdI to cover all cases of serialization\n\tAdd documentation of dZ, d.t\n\n\t* sprint.ads, sprint.adb: Improve -gnatdI to cover all cases of\n\tserialization.\n\t(Sprint_Node_Actual): Generate new output associated with implicit\n\timportation and implicit exportation of object declarations.\n\nFrom-SVN: r127414", "tree": {"sha": "840a6cac67ef9cfa9b06fa49242ae50fecba0684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/840a6cac67ef9cfa9b06fa49242ae50fecba0684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec/comments", "author": null, "committer": null, "parents": [{"sha": "554846f3b75d52bae87a1d076950eccf34846f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554846f3b75d52bae87a1d076950eccf34846f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554846f3b75d52bae87a1d076950eccf34846f4b"}], "stats": {"total": 178, "additions": 131, "deletions": 47}, "files": [{"sha": "8b3ff397301a1d51e7ed639acd89555f158f3e0f", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec", "patch": "@@ -71,7 +71,7 @@ package body Debug is\n    --  dC   Output debugging information on check suppression\n    --  dD   Delete elaboration checks in inner level routines\n    --  dE   Apply elaboration checks to predefined units\n-   --  dF   Front end data layout enabled.\n+   --  dF   Front end data layout enabled\n    --  dG   Generate all warnings including those normally suppressed\n    --  dH   Hold (kill) call to gigi\n    --  dI   Inhibit internal name numbering in gnatG listing\n@@ -112,7 +112,7 @@ package body Debug is\n    --  d.q\n    --  d.r\n    --  d.s\n-   --  d.t\n+   --  d.t  Disable static allocation of library level dispatch tables\n    --  d.u\n    --  d.v\n    --  d.w  Do not check for infinite while loops\n@@ -393,11 +393,11 @@ package body Debug is\n    --       layout, and may be useful in other debugging situations where\n    --       you do not want gigi to intefere with the testing.\n \n-   --  dI   Inhibit internal name numbering in gnatDG listing. For internal\n-   --       names of the form <uppercase-letters><digits><suffix>, the output\n-   --       will be modified to <uppercase-letters>...<suffix>. This is used\n-   --       in the fixed bugs run to minimize system and version dependency\n-   --       in filed -gnatDG output.\n+   --  dI   Inhibit internal name numbering in gnatDG listing. Any sequence of\n+   --       the form <uppercase-letter><digits><lowercase-letter> appearing in\n+   --       a name is replaced by <uppercase-letter>...<lowercase-letter>. This\n+   --       is used in the fixed bugs run to minimize system and version\n+   --       dependency in filed -gnatD or -gnatG output.\n \n    --  dJ   Generate debugging trace output for the JGNAT back end. This\n    --       consists of symbolic Java Byte Code sequences for all generated\n@@ -470,6 +470,31 @@ package body Debug is\n    --       had Configurable_Run_Time_Mode set to True. This is useful in\n    --       testing high integrity mode.\n \n+   --  dZ   Generate listing showing the contents of the dispatch tables. Each\n+   --       line has an internally generated number used for references between\n+   --       tagged types and primitives. For each primitive the output has the\n+   --       following fields:\n+   --         - Letter 'P' or letter 's': The former indicates that this\n+   --           primitive will be located in a primary dispatch table. The\n+   --           latter indicates that it will be located in a secondary\n+   --           dispatch table.\n+   --         - Name of the primitive. In case of predefined Ada primitives\n+   --           the text \"(predefined)\" is added before the name, and these\n+   --           acronyms are used: SR (Stream_Read), SW (Stream_Write), SI\n+   --           (Stream_Input), SO (Stream_Output), DA (Deep_Adjust), DF\n+   --           (Deep_Finalize). In addition Oeq identifies the equality\n+   --           operator, and \"_assign\" the assignment.\n+   --         - If the primitive covers interface types, two extra fields\n+   --           referencing other primitives are generated: \"Alias\" references\n+   --           the primitive of the tagged type that covers an interface\n+   --           primitive, and \"AI_Alias\" references the covered interface\n+   --           primitive.\n+   --         - The expression \"at #xx\" indicates the slot of the dispatch\n+   --           table occupied by such primitive in its corresponding primary\n+   --           or secondary dispatch table.\n+   --         - In case of abstract subprograms the text \"is abstract\" is\n+   --           added at the end of the line.\n+\n    --  d.f  Suppress folding of static expressions. This of course results\n    --       in seriously non-conforming behavior, but is useful sometimes\n    --       when tracking down handling of complex expressions.\n@@ -489,6 +514,12 @@ package body Debug is\n    --       main source (this corresponds to a previous behavior of -gnatl and\n    --       is used for running the ACATS tests).\n \n+   --  d.t  The compiler has been modified (a fairly extensive modification)\n+   --       to generate static dispatch tables for library level tagged types.\n+   --       This debug switch disables this modification and reverts to the\n+   --       previous dynamic construction of tables. It is there as a possible\n+   --       work around if we run into trouble with the new implementation.\n+\n    --  d.w  This flag turns off the scanning of while loops to detect possible\n    --       infinite loops.\n "}, {"sha": "4c328b19c368e3d994a06df6283315c93a3073af", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 91, "deletions": 40, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec", "patch": "@@ -2005,34 +2005,76 @@ package body Sprint is\n             Set_Debug_Sloc;\n \n             if Write_Indent_Identifiers (Node) then\n-               Write_Str_With_Col_Check (\" : \");\n+               declare\n+                  Def_Id : constant Entity_Id := Defining_Identifier (Node);\n \n-               if Is_Statically_Allocated (Defining_Identifier (Node)) then\n-                  Write_Str_With_Col_Check (\"static \");\n-               end if;\n+               begin\n+                  Write_Str_With_Col_Check (\" : \");\n \n-               if Aliased_Present (Node) then\n-                  Write_Str_With_Col_Check (\"aliased \");\n-               end if;\n+                  if Is_Statically_Allocated (Def_Id) then\n+                     Write_Str_With_Col_Check (\"static \");\n+                  end if;\n \n-               if Constant_Present (Node) then\n-                  Write_Str_With_Col_Check (\"constant \");\n-               end if;\n+                  if Aliased_Present (Node) then\n+                     Write_Str_With_Col_Check (\"aliased \");\n+                  end if;\n \n-               --  Ada 2005 (AI-231)\n+                  if Constant_Present (Node) then\n+                     Write_Str_With_Col_Check (\"constant \");\n+                  end if;\n \n-               if Null_Exclusion_Present (Node) then\n-                  Write_Str_With_Col_Check (\"not null \");\n-               end if;\n+                  --  Ada 2005 (AI-231)\n \n-               Sprint_Node (Object_Definition (Node));\n+                  if Null_Exclusion_Present (Node) then\n+                     Write_Str_With_Col_Check (\"not null \");\n+                  end if;\n \n-               if Present (Expression (Node)) then\n-                  Write_Str (\" := \");\n-                  Sprint_Node (Expression (Node));\n-               end if;\n+                  Sprint_Node (Object_Definition (Node));\n \n-               Write_Char (';');\n+                  if Present (Expression (Node)) then\n+                     Write_Str (\" := \");\n+                     Sprint_Node (Expression (Node));\n+                  end if;\n+\n+                  Write_Char (';');\n+\n+                  --  Handle implicit importation and implicit exportation of\n+                  --  object declarations:\n+                  --    $pragma import (Convention_Id, Def_Id, \"...\");\n+                  --    $pragma export (Convention_Id, Def_Id, \"...\");\n+\n+                  if Is_Internal (Def_Id)\n+                    and then Present (Interface_Name (Def_Id))\n+                  then\n+                     Write_Indent_Str_Sloc (\"$pragma \");\n+\n+                     if Is_Imported (Def_Id) then\n+                        Write_Str (\"import (\");\n+\n+                     else pragma Assert (Is_Exported (Def_Id));\n+                        Write_Str (\"export (\");\n+                     end if;\n+\n+                     declare\n+                        Prefix : constant String  := \"Convention_\";\n+                        S      : constant String  := Convention (Def_Id)'Img;\n+\n+                     begin\n+                        Name_Len := S'Last - Prefix'Last;\n+                        Name_Buffer (1 .. Name_Len) :=\n+                          S (Prefix'Last + 1 .. S'Last);\n+                        Set_Casing (All_Lower_Case);\n+                        Write_Str (Name_Buffer (1 .. Name_Len));\n+                     end;\n+\n+                     Write_Str (\", \");\n+                     Write_Id  (Def_Id);\n+                     Write_Str (\", \");\n+                     Write_String_Table_Entry\n+                       (Strval (Interface_Name (Def_Id)));\n+                     Write_Str (\");\");\n+                  end if;\n+               end;\n             end if;\n \n          when N_Object_Renaming_Declaration =>\n@@ -2599,7 +2641,7 @@ package body Sprint is\n \n             Write_Char (';');\n \n-         when N_Return_Statement =>\n+         when N_Simple_Return_Statement =>\n             if Present (Expression (Node)) then\n                Write_Indent_Str_Sloc (\"return \");\n                Sprint_Node (Expression (Node));\n@@ -3929,36 +3971,45 @@ package body Sprint is\n \n    procedure Write_Name_With_Col_Check (N : Name_Id) is\n       J : Natural;\n+      K : Natural;\n+      L : Natural;\n \n    begin\n       Get_Name_String (N);\n \n-      --  Deal with -gnatI which replaces digits in an internal\n-      --  name by three dots (e.g. R7b becomes R...b).\n+      --  Deal with -gnatdI which replaces any sequence Cnnnb where C is an\n+      --  upper case letter, nnn is one or more digits and b is a lower case\n+      --  letter by C...b, so that listings do not depend on serial numbers.\n \n-      if Debug_Flag_II and then Name_Buffer (1) in 'A' .. 'Z' then\n-         J := 2;\n-         while J < Name_Len loop\n-            exit when Name_Buffer (J) not in 'A' .. 'Z';\n-            J := J + 1;\n-         end loop;\n+      if Debug_Flag_II then\n+         J := 1;\n+         while J < Name_Len - 1 loop\n+            if Name_Buffer (J) in 'A' .. 'Z'\n+              and then Name_Buffer (J + 1) in '0' .. '9'\n+            then\n+               K := J + 1;\n+               while K < Name_Len loop\n+                  exit when Name_Buffer (K) not in '0' .. '9';\n+                  K := K + 1;\n+               end loop;\n \n-         if Name_Buffer (J) in '0' .. '9' then\n-            Write_Str_With_Col_Check (Name_Buffer (1 .. J - 1));\n-            Write_Str (\"...\");\n+               if Name_Buffer (K) in 'a' .. 'z' then\n+                  L := Name_Len - K + 1;\n \n-            while J <= Name_Len loop\n-               if Name_Buffer (J) not in '0' .. '9' then\n-                  Write_Str (Name_Buffer (J .. Name_Len));\n-                  exit;\n+                  Name_Buffer (J + 4 .. J + L + 3) :=\n+                    Name_Buffer (K .. Name_Len);\n+                  Name_Buffer (J + 1 .. J + 3) := \"...\";\n+                  Name_Len := J + L + 3;\n+                  J := J + 5;\n \n                else\n-                  J := J + 1;\n+                  J := K;\n                end if;\n-            end loop;\n \n-            return;\n-         end if;\n+            else\n+               J := J + 1;\n+            end if;\n+         end loop;\n       end if;\n \n       --  Fall through for normal case"}, {"sha": "e5d0d3c74602192a250b4e9a18eac51d29cd246f", "filename": "gcc/ada/sprint.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec/gcc%2Fada%2Fsprint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec/gcc%2Fada%2Fsprint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.ads?ref=b99282c4c10fcb8fb8a5cf30736e5b8a1a4e3cec", "patch": "@@ -59,6 +59,8 @@ package Sprint is\n    --    Free statement                      free expr [storage_pool = xxx]\n    --    Freeze entity with freeze actions   freeze entityname [ actions ]\n    --    Implicit call to run time routine   $routine-name\n+   --    Implicit exportation                $pragma import (...)\n+   --    Implicit importation                $pragma export (...)\n    --    Interpretation                      interpretation type [, entity]\n    --    Intrinsic calls                     function-name!(arg, arg, arg)\n    --    Itype declaration                   [(sub)type declaration without ;]"}]}