{"sha": "e09a57632038dc965977e45beed591bf7056d20b", "node_id": "C_kwDOANBUbNoAKGUwOWE1NzYzMjAzOGRjOTY1OTc3ZTQ1YmVlZDU5MWJmNzA1NmQyMGI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-28T14:48:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-28T15:01:56Z"}, "message": "Add support for transmute intrinsic\n\nThis adds in the transmute intrisic by utilizing the convert_expression\nframework we have in the backend class.\n\nFixes #1130\nAddresses #658", "tree": {"sha": "caeae0bf7d1e6c9e8139c31a09875ed40d2603c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caeae0bf7d1e6c9e8139c31a09875ed40d2603c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09a57632038dc965977e45beed591bf7056d20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09a57632038dc965977e45beed591bf7056d20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09a57632038dc965977e45beed591bf7056d20b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09a57632038dc965977e45beed591bf7056d20b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7598514f5841cb08aef22a801d8a9f3f321b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7598514f5841cb08aef22a801d8a9f3f321b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca7598514f5841cb08aef22a801d8a9f3f321b04"}], "stats": {"total": 173, "additions": 171, "deletions": 2}, "files": [{"sha": "2436aaaab0c6a2591cbe1fb9e49a61222594215f", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 113, "deletions": 2, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a57632038dc965977e45beed591bf7056d20b/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a57632038dc965977e45beed591bf7056d20b/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=e09a57632038dc965977e45beed591bf7056d20b", "patch": "@@ -174,11 +174,14 @@ static tree\n offset_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype);\n static tree\n sizeof_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype);\n+static tree\n+transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype);\n \n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::BaseType *)>>\n   generic_intrinsics = {{\"offset\", &offset_intrinsic_handler},\n-\t\t\t{\"size_of\", &sizeof_intrinsic_handler}};\n+\t\t\t{\"size_of\", &sizeof_intrinsic_handler},\n+\t\t\t{\"transmute\", &transmute_intrinsic_handler}};\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n \n@@ -340,7 +343,7 @@ sizeof_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n       fntype->override_context ();\n     }\n \n-  // offset intrinsic has two params dst pointer and offset isize\n+  // size_of has _zero_ parameters its parameter is the generic one\n   if (fntype->get_params ().size () != 0)\n     {\n       rust_error_at (fntype->get_ident ().locus,\n@@ -396,5 +399,113 @@ sizeof_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n   return fndecl;\n }\n \n+static tree\n+transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n+{\n+  rust_assert (fntype_tyty->get_kind () == TyTy::TypeKind::FNDEF);\n+  TyTy::FnType *fntype = static_cast<TyTy::FnType *> (fntype_tyty);\n+  const Resolver::CanonicalPath &canonical_path = fntype->get_ident ().path;\n+\n+  // items can be forward compiled which means we may not need to invoke this\n+  // code. We might also have already compiled this generic function as well.\n+  tree lookup = NULL_TREE;\n+  if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n+\t\t\t\t fntype->get_id (), fntype))\n+    {\n+      // has this been added to the list then it must be finished\n+      if (ctx->function_completed (lookup))\n+\t{\n+\t  tree dummy = NULL_TREE;\n+\t  if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n+\t    {\n+\t      ctx->insert_function_decl (fntype, lookup);\n+\t    }\n+\t  return lookup;\n+\t}\n+    }\n+\n+  if (fntype->has_subsititions_defined ())\n+    {\n+      // override the Hir Lookups for the substituions in this context\n+      fntype->override_context ();\n+    }\n+\n+  // transmute intrinsic has one parameter\n+  if (fntype->get_params ().size () != 1)\n+    {\n+      rust_error_at (fntype->get_ident ().locus,\n+\t\t     \"invalid number of parameters for transmute intrinsic\");\n+      return error_mark_node;\n+    }\n+\n+  // build the intrinsic function\n+  tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n+  std::string ir_symbol_name\n+    = canonical_path.get () + fntype->subst_as_string ();\n+  std::string asm_name = ctx->mangle_item (fntype, canonical_path);\n+\n+  unsigned int flags = 0;\n+  tree fndecl\n+    = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name, asm_name,\n+\t\t\t\t     flags, fntype->get_ident ().locus);\n+  TREE_PUBLIC (fndecl) = 0;\n+  TREE_READONLY (fndecl) = 1;\n+  DECL_ARTIFICIAL (fndecl) = 1;\n+  DECL_EXTERNAL (fndecl) = 0;\n+  DECL_DECLARED_INLINE_P (fndecl) = 1;\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  for (auto &parm : fntype->get_params ())\n+    {\n+      auto &referenced_param = parm.first;\n+      auto &param_tyty = parm.second;\n+      auto compiled_param_type = TyTyResolveCompile::compile (ctx, param_tyty);\n+\n+      Location param_locus = referenced_param->get_locus ();\n+      Bvariable *compiled_param_var\n+\t= CompileFnParam::compile (ctx, fndecl, referenced_param,\n+\t\t\t\t   compiled_param_type, param_locus);\n+\n+      param_vars.push_back (compiled_param_var);\n+    }\n+\n+  rust_assert (param_vars.size () == 1);\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n+    return error_mark_node;\n+\n+  // param to convert\n+  Bvariable *convert_me_param = param_vars.at (0);\n+  tree convert_me_expr\n+    = ctx->get_backend ()->var_expression (convert_me_param, Location ());\n+\n+  tree enclosing_scope = NULL_TREE;\n+  Location start_location = Location ();\n+  Location end_location = Location ();\n+\n+  tree code_block = ctx->get_backend ()->block (fndecl, enclosing_scope, {},\n+\t\t\t\t\t\tstart_location, end_location);\n+  ctx->push_block (code_block);\n+\n+  // BUILTIN transmute FN BODY BEGIN\n+  tree result_type_tree = TREE_TYPE (DECL_RESULT (fndecl));\n+  tree result_expr\n+    = ctx->get_backend ()->convert_expression (result_type_tree,\n+\t\t\t\t\t       convert_me_expr, Location ());\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {result_expr},\n+\t\t\t\t\t     Location ());\n+  ctx->add_statement (return_statement);\n+  // BUILTIN transmute FN BODY END\n+\n+  tree bind_tree = ctx->pop_block ();\n+\n+  gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n+  DECL_SAVED_TREE (fndecl) = bind_tree;\n+  ctx->push_function (fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "92200c7cd5f777ddfd87c9fbee59bf3d4f4ced82", "filename": "gcc/testsuite/rust/compile/issue-1130.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a57632038dc965977e45beed591bf7056d20b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a57632038dc965977e45beed591bf7056d20b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs?ref=e09a57632038dc965977e45beed591bf7056d20b", "patch": "@@ -0,0 +1,47 @@\n+// { dg-additional-options \"-w\" }\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn size_of<T>() -> usize;\n+        fn transmute<U, V>(_: U) -> V;\n+    }\n+}\n+\n+impl u16 {\n+    fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+        unsafe { mem::transmute(self) }\n+    }\n+}\n+\n+pub trait Hasher {\n+    fn finish(&self) -> u64;\n+\n+    fn write(&mut self, bytes: &[u8]);\n+\n+    fn write_u8(&mut self, i: u8) {\n+        self.write(&[i])\n+    }\n+\n+    fn write_i8(&mut self, i: i8) {\n+        self.write_u8(i as u8)\n+    }\n+\n+    fn write_u16(&mut self, i: u16) {\n+        self.write(&i.to_ne_bytes())\n+    }\n+\n+    fn write_i16(&mut self, i: i16) {\n+        self.write_u16(i as u16)\n+    }\n+}\n+\n+pub struct SipHasher;\n+\n+impl Hasher for SipHasher {\n+    #[inline]\n+    fn write(&mut self, msg: &[u8]) {}\n+\n+    #[inline]\n+    fn finish(&self) -> u64 {\n+        0\n+    }\n+}"}, {"sha": "333fffe0f2b81b96f873fcbeabe4e1bf1c97bc59", "filename": "gcc/testsuite/rust/compile/torture/transmute1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a57632038dc965977e45beed591bf7056d20b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a57632038dc965977e45beed591bf7056d20b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute1.rs?ref=e09a57632038dc965977e45beed591bf7056d20b", "patch": "@@ -0,0 +1,11 @@\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn size_of<T>() -> usize;\n+        fn transmute<U, V>(_: U) -> V;\n+    }\n+}\n+\n+fn main() {\n+    let a = 123;\n+    let _b: [u8; mem::size_of::<i32>()] = mem::transmute(a);\n+}"}]}