{"sha": "1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkODkwNjA0NTc0NmUzM2ZiYjJhMTRmOGQ2ZGJhYTY3MDQ1ZGM1Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-15T14:27:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-15T14:27:55Z"}, "message": "re PR middle-end/35593 (spurious warning \"array subscript is below array bounds\" with void* function argument plus -O2)\n\n2008-03-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/35593\n\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Make sure\n\tto not produce negative array indices if not allowed.  Add\n\tparameter to indicate that.\n\t(maybe_fold_offset_to_component_ref): Allow negative array\n\tindices only for the first member of a structure.\n\t(maybe_fold_offset_to_reference): Allow negative array indices.\n\t(maybe_fold_stmt_addition): Likewise.\n\n\t* g++.dg/warn/Warray-bounds-3.C: New testcase.\n\nFrom-SVN: r133249", "tree": {"sha": "280eea0f927f26121b5402f767c4c4a84f40d518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/280eea0f927f26121b5402f767c4c4a84f40d518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "693092fb624671b2b00b309468fd24b6cd9b4420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693092fb624671b2b00b309468fd24b6cd9b4420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693092fb624671b2b00b309468fd24b6cd9b4420"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "b0e25a461bf2a1d77e8745eaacb6e0dff3b9394d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "patch": "@@ -1,3 +1,14 @@\n+2008-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/35593\n+\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Make sure\n+\tto not produce negative array indices if not allowed.  Add\n+\tparameter to indicate that.\n+\t(maybe_fold_offset_to_component_ref): Allow negative array\n+\tindices only for the first member of a structure.\n+\t(maybe_fold_offset_to_reference): Allow negative array indices.\n+\t(maybe_fold_stmt_addition): Likewise.\n+\n 2008-03-15  Bjoern Haase  <bjoern.m.haase@web.de>\n             Anatoly Sokolov <aesok@post.ru>\n "}, {"sha": "f453ce1c2c3076ad07746356f33f3b447c27dbe4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "patch": "@@ -1,3 +1,8 @@\n+2008-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/35593\n+\t* g++.dg/warn/Warray-bounds-3.C: New testcase.\n+\n 2008-03-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR testsuite/35478"}, {"sha": "a8585717988043a60b88193df209dab45460bdc7", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-3.C?ref=1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+extern void function(void * x);\n+\n+struct A {\n+    long x;\n+    char d[0];\n+};\n+\n+\n+void test(A * a) {\n+    function((char *)a - 4); /* { dg-bogus \"below array bounds\" } */\n+}\n+"}, {"sha": "8b8a902169ee3a4d7e00510b61e0a9f12303d354", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd8906045746e33fbb2a14f8d6dbaa67045dc5b/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=1fd8906045746e33fbb2a14f8d6dbaa67045dc5b", "patch": "@@ -1593,7 +1593,8 @@ widen_bitfield (tree val, tree field, tree var)\n    is the desired result type.  */\n \n static tree\n-maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n+maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type,\n+\t\t\t\tbool allow_negative_idx)\n {\n   tree min_idx, idx, idx_type, elt_offset = integer_zero_node;\n   tree array_type, elt_type, elt_size;\n@@ -1693,11 +1694,15 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n   idx = fold_convert (idx_type, idx);\n \n   /* We don't want to construct access past array bounds. For example\n-     char *(c[4]);\n-\n-     c[3][2]; should not be simplified into (*c)[14] or tree-vrp will give false\n-     warning.  */\n-  if (domain_type && TYPE_MAX_VALUE (domain_type) \n+       char *(c[4]);\n+       c[3][2];\n+     should not be simplified into (*c)[14] or tree-vrp will\n+     give false warnings.  The same is true for\n+       struct A { long x; char d[0]; } *a;\n+       (char *)a - 4;\n+     which should be not folded to &a->d[-8].  */\n+  if (domain_type\n+      && TYPE_MAX_VALUE (domain_type) \n       && TREE_CODE (TYPE_MAX_VALUE (domain_type)) == INTEGER_CST)\n     {\n       tree up_bound = TYPE_MAX_VALUE (domain_type);\n@@ -1709,6 +1714,17 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n \t  && compare_tree_int (up_bound, 1) > 0)\n \treturn NULL_TREE;\n     }\n+  if (domain_type\n+      && TYPE_MIN_VALUE (domain_type))\n+    {\n+      if (!allow_negative_idx\n+\t  && TREE_CODE (TYPE_MIN_VALUE (domain_type)) == INTEGER_CST\n+\t  && tree_int_cst_lt (idx, TYPE_MIN_VALUE (domain_type)))\n+\treturn NULL_TREE;\n+    }\n+  else if (!allow_negative_idx\n+\t   && compare_tree_int (idx, 0) < 0)\n+    return NULL_TREE;\n \n   return build4 (ARRAY_REF, elt_type, base, idx, NULL_TREE, NULL_TREE);\n }\n@@ -1805,7 +1821,8 @@ maybe_fold_offset_to_component_ref (tree record_type, tree base, tree offset,\n       new_base = build3 (COMPONENT_REF, field_type, new_base, f, NULL_TREE);\n \n       /* Recurse to possibly find the match.  */\n-      ret = maybe_fold_offset_to_array_ref (new_base, t, orig_type);\n+      ret = maybe_fold_offset_to_array_ref (new_base, t, orig_type,\n+\t\t\t\t\t    f == TYPE_FIELDS (record_type));\n       if (ret)\n \treturn ret;\n       ret = maybe_fold_offset_to_component_ref (field_type, new_base, t,\n@@ -1827,7 +1844,8 @@ maybe_fold_offset_to_component_ref (tree record_type, tree base, tree offset,\n     base = build1 (INDIRECT_REF, record_type, base);\n   base = build3 (COMPONENT_REF, field_type, base, f, NULL_TREE);\n \n-  t = maybe_fold_offset_to_array_ref (base, offset, orig_type);\n+  t = maybe_fold_offset_to_array_ref (base, offset, orig_type,\n+\t\t\t\t      f == TYPE_FIELDS (record_type));\n   if (t)\n     return t;\n   return maybe_fold_offset_to_component_ref (field_type, base, offset,\n@@ -1893,7 +1911,7 @@ maybe_fold_offset_to_reference (tree base, tree offset, tree orig_type)\n     {\n       if (base_is_ptr)\n \tbase = build1 (INDIRECT_REF, type, base);\n-      ret = maybe_fold_offset_to_array_ref (base, offset, orig_type);\n+      ret = maybe_fold_offset_to_array_ref (base, offset, orig_type, true);\n     }\n   return ret;\n }\n@@ -2070,7 +2088,7 @@ maybe_fold_stmt_addition (tree expr)\n   ptd_type = TREE_TYPE (ptr_type);\n \n   /* At which point we can try some of the same things as for indirects.  */\n-  t = maybe_fold_offset_to_array_ref (op0, op1, ptd_type);\n+  t = maybe_fold_offset_to_array_ref (op0, op1, ptd_type, true);\n   if (!t)\n     t = maybe_fold_offset_to_component_ref (TREE_TYPE (op0), op0, op1,\n \t\t\t\t\t    ptd_type, false);"}]}