{"sha": "3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmM2JlYzJlNGQzNDRiZDU0YTEzNGQ4YjIyNjNmNDRkNzg4YzNkOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-04T20:21:16Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-04T20:21:16Z"}, "message": "internal-fn: Avoid dropping the lhs of some calls [PR94941]\n\ncreate_output_operand coerces an output operand to the insn's\npredicates, using a suggested rtx location if convenient.\nBut if that rtx location is actually required rather than\noptional, the builder of the insn has to emit a move afterwards.\n\n(We could instead add a new interface that does this automatically,\nbut that's future work.)\n\nThis PR shows that we were failing to emit the move for some of the\nvector load internal functions.  I think there are other routines in\ninternal-fn.c that potentially have the same problem, but this patch is\nsupposed to be a conservative subset suitable for backporting to GCC 10.\n\n2020-05-04  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR middle-end/94941\n\t* internal-fn.c (expand_load_lanes_optab_fn): Emit a move if the\n\tchosen lhs is different from the gcall lhs.\n\t(expand_mask_load_optab_fn): Likewise.\n\t(expand_gather_load_optab_fn): Likewise.\n\ngcc/testsuite/\n\tPR middle-end/94941\n\t* gcc.target/aarch64/sve/acle/general/unoptimized_1.c: New test.", "tree": {"sha": "ea524b0518b71db3bad2814aa46daea9f4089e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea524b0518b71db3bad2814aa46daea9f4089e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0719055a956d900f160e2e980eb2a5c8bcc7cb39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0719055a956d900f160e2e980eb2a5c8bcc7cb39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0719055a956d900f160e2e980eb2a5c8bcc7cb39"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "c22e1556a0c44afad4c5b88e79589b0260a1ac17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "patch": "@@ -1,3 +1,11 @@\n+2020-05-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/94941\n+\t* internal-fn.c (expand_load_lanes_optab_fn): Emit a move if the\n+\tchosen lhs is different from the gcall lhs.\n+\t(expand_mask_load_optab_fn): Likewise.\n+\t(expand_gather_load_optab_fn): Likewise.\n+\n 2020-05-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/94795"}, {"sha": "5e9aa60721e8bbd1e80a0a6b9a9733458afda45e", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "patch": "@@ -167,6 +167,8 @@ expand_load_lanes_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n   create_output_operand (&ops[0], target, TYPE_MODE (type));\n   create_fixed_operand (&ops[1], mem);\n   expand_insn (get_multi_vector_move (type, optab), 2, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n /* Expand STORE_LANES call STMT using optab OPTAB.  */\n@@ -2507,6 +2509,8 @@ expand_mask_load_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n   create_fixed_operand (&ops[1], mem);\n   create_input_operand (&ops[2], mask, TYPE_MODE (TREE_TYPE (maskt)));\n   expand_insn (icode, 3, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n #define expand_mask_load_lanes_optab_fn expand_mask_load_optab_fn\n@@ -2827,6 +2831,8 @@ expand_gather_load_optab_fn (internal_fn, gcall *stmt, direct_optab optab)\n   insn_code icode = convert_optab_handler (optab, TYPE_MODE (TREE_TYPE (lhs)),\n \t\t\t\t\t   TYPE_MODE (TREE_TYPE (offset)));\n   expand_insn (icode, i, ops);\n+  if (!rtx_equal_p (lhs_rtx, ops[0].value))\n+    emit_move_insn (lhs_rtx, ops[0].value);\n }\n \n /* Expand DIVMOD() using:"}, {"sha": "4a36c855d39f4b4f5b3ef8be4b4c37963c578db2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "patch": "@@ -1,3 +1,8 @@\n+2020-05-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/94941\n+\t* gcc.target/aarch64/sve/acle/general/unoptimized_1.c: New test.\n+\n 2020-05-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/94795"}, {"sha": "18d73e21a83aaa56a0c6166d75c1fb99215a7e0a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/unoptimized_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Funoptimized_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af3bec2e4d344bd54a134d8b2263f44d788c3d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Funoptimized_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Funoptimized_1.c?ref=3af3bec2e4d344bd54a134d8b2263f44d788c3d8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+\n+#include <arm_sve.h>\n+\n+svfloat32_t\n+foo (float *ptr)\n+{\n+  svbool_t pg = svptrue_pat_b32 (SV_VL1);\n+  svfloat32_t res = svld1 (pg, ptr);\n+  return res;\n+}\n+\n+int\n+main (void)\n+{\n+  svbool_t pg = svptrue_pat_b32 (SV_VL1);\n+  float x[1] = { 1 };\n+  if (svptest_any (pg, svcmpne (pg, foo (x), 1.0)))\n+    __builtin_abort ();\n+  return 0;\n+}"}]}