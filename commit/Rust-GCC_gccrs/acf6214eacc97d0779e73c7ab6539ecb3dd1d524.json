{"sha": "acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmNjIxNGVhY2M5N2QwNzc5ZTczYzdhYjY1MzllY2IzZGQxZDUyNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-24T21:17:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-24T21:17:48Z"}, "message": "diagnostics: tweaks to line-spans vs line numbering (PR 87091)\n\nThis patch tweaks how line numbers are printed for a diagnostic\ncontaining multiple line spans.\n\nWith this patch, rather than printing span headers:\n\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:87:22: note: message\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:74:1:\n  ++ |+#include <vector>\n  74 | #endif\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:87:22:\n  87 |       using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n     |                      ^~~\n\nwe now print:\n\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:87:22: note: message\n  +++ |+#include <vector>\n   74 | #endif\n  ....\n   87 |       using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n      |                      ^~~\n\nand for sufficiently close lines, rather than print a gap:\n\n  + |+#include <stdio.h>\n  1 | test (int ch)\n  ..\n  3 |  putchar (ch);\n    |  ^~~~~~~\n\nwe print the line itself:\n\n  + |+#include <stdio.h>\n  1 | test (int ch)\n  2 | {\n  3 |  putchar (ch);\n    |  ^~~~~~~\n\ngcc/ChangeLog:\n\tPR 87091\n\t* diagnostic-show-locus.c (layout::layout): Ensure the margin is\n\twide enough for jumps in the line-numbering to be visible.\n\t(layout::print_gap_in_line_numbering): New member function.\n\t(layout::calculate_line_spans): When using line numbering, merge\n\tline spans that are only 1 line apart.\n\t(diagnostic_show_locus): When printing line numbers, show gaps in\n\tline numbering directly, rather than printing headers.\n\t(selftest::test_diagnostic_show_locus_fixit_lines): Add test of\n\tline-numbering with multiple line spans.\n\t(selftest::test_fixit_insert_containing_newline_2): Add test of\n\tline-numbering, in which the spans are close enough to be merged.\n\ngcc/testsuite/ChangeLog:\n\tPR 87091\n\t* gcc.dg/missing-header-fixit-3.c: Update for changes to how\n\tline spans are printed with -fdiagnostics-show-line-numbers.\n\nFrom-SVN: r263843", "tree": {"sha": "95b5428a3c1e77ba4a4a84b34a618fff4d05615d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95b5428a3c1e77ba4a4a84b34a618fff4d05615d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5a3f08fb899af4efef8d273d9aea556406ebd27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a3f08fb899af4efef8d273d9aea556406ebd27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a3f08fb899af4efef8d273d9aea556406ebd27"}], "stats": {"total": 172, "additions": 137, "deletions": 35}, "files": [{"sha": "7bda57573d201a0e2380e3b3e2380e5784f59ce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "patch": "@@ -1,3 +1,18 @@\n+2018-08-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* diagnostic-show-locus.c (layout::layout): Ensure the margin is\n+\twide enough for jumps in the line-numbering to be visible.\n+\t(layout::print_gap_in_line_numbering): New member function.\n+\t(layout::calculate_line_spans): When using line numbering, merge\n+\tline spans that are only 1 line apart.\n+\t(diagnostic_show_locus): When printing line numbers, show gaps in\n+\tline numbering directly, rather than printing headers.\n+\t(selftest::test_diagnostic_show_locus_fixit_lines): Add test of\n+\tline-numbering with multiple line spans.\n+\t(selftest::test_fixit_insert_containing_newline_2): Add test of\n+\tline-numbering, in which the spans are close enough to be merged.\n+\n 2018-08-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple-ssa-evrp-analyze.c (set_ssa_range_info): Pass value_range"}, {"sha": "1e7f96978e90169bef631b158d525f2539048e95", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 111, "deletions": 27, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "patch": "@@ -241,6 +241,7 @@ class layout\n   int get_num_line_spans () const { return m_line_spans.length (); }\n   const line_span *get_line_span (int idx) const { return &m_line_spans[idx]; }\n \n+  void print_gap_in_line_numbering ();\n   bool print_heading_for_line_span_index_p (int line_span_idx) const;\n \n   expanded_location get_expanded_location (const line_span *) const;\n@@ -923,6 +924,9 @@ layout::layout (diagnostic_context * context,\n   if (highest_line < 0)\n     highest_line = 0;\n   m_linenum_width = num_digits (highest_line);\n+  /* If we're showing jumps in the line-numbering, allow at least 3 chars.  */\n+  if (m_line_spans.length () > 1)\n+    m_linenum_width = MAX (m_linenum_width, 3);\n \n   /* Adjust m_x_offset.\n      Center the primary caret to fit in max_width; all columns\n@@ -1059,6 +1063,20 @@ layout::will_show_line_p (linenum_type row) const\n   return false;\n }\n \n+/* Print a line showing a gap in the line numbers, for showing the boundary\n+   between two line spans.  */\n+\n+void\n+layout::print_gap_in_line_numbering ()\n+{\n+  gcc_assert (m_show_line_numbers_p);\n+\n+  for (int i = 0; i < m_linenum_width + 1; i++)\n+    pp_character (m_pp, '.');\n+\n+  pp_newline (m_pp);\n+}\n+\n /* Return true iff we should print a heading when starting the\n    line span with the given index.  */\n \n@@ -1156,21 +1174,34 @@ get_line_span_for_fixit_hint (const fixit_hint *hint)\n    This function populates m_line_spans with an ordered, disjoint list of\n    the line spans of interest.\n \n-   For example, if the primary caret location is on line 7, with ranges\n-   covering lines 5-6 and lines 9-12:\n+   Printing a gap between line spans takes one line, so, when printing\n+   line numbers, we allow a gap of up to one line between spans when\n+   merging, since it makes more sense to print the source line rather than a\n+   \"gap-in-line-numbering\" line.  When not printing line numbers, it's\n+   better to be more explicit about what's going on, so keeping them as\n+   separate spans is preferred.\n+\n+   For example, if the primary range is on lines 8-10, with secondary ranges\n+   covering lines 5-6 and lines 13-15:\n \n      004\n-     005                   |RANGE 0\n-     006                   |RANGE 0\n-     007  |PRIMARY CARET\n-     008\n-     009                                |RANGE 1\n-     010                                |RANGE 1\n-     011                                |RANGE 1\n-     012                                |RANGE 1\n-     013\n-\n-   then we want two spans: lines 5-7 and lines 9-12.  */\n+     005                   |RANGE 1\n+     006                   |RANGE 1\n+     007\n+     008  |PRIMARY RANGE\n+     009  |PRIMARY CARET\n+     010  |PRIMARY RANGE\n+     011\n+     012\n+     013                                |RANGE 2\n+     014                                |RANGE 2\n+     015                                |RANGE 2\n+     016\n+\n+   With line numbering on, we want two spans: lines 5-10 and lines 13-15.\n+\n+   With line numbering off (with span headers), we want three spans: lines 5-6,\n+   lines 8-10, and lines 13-15.  */\n \n void\n layout::calculate_line_spans ()\n@@ -1210,7 +1241,8 @@ layout::calculate_line_spans ()\n       line_span *current = &m_line_spans[m_line_spans.length () - 1];\n       const line_span *next = &tmp_spans[i];\n       gcc_assert (next->m_first_line >= current->m_first_line);\n-      if (next->m_first_line <= current->m_last_line + 1)\n+      const int merger_distance = m_show_line_numbers_p ? 1 : 0;\n+      if (next->m_first_line <= current->m_last_line + 1 + merger_distance)\n \t{\n \t  /* We can merge them. */\n \t  if (next->m_last_line > current->m_last_line)\n@@ -2269,10 +2301,22 @@ diagnostic_show_locus (diagnostic_context * context,\n        line_span_idx++)\n     {\n       const line_span *line_span = layout.get_line_span (line_span_idx);\n-      if (layout.print_heading_for_line_span_index_p (line_span_idx))\n+      if (context->show_line_numbers_p)\n \t{\n-\t  expanded_location exploc = layout.get_expanded_location (line_span);\n-\t  context->start_span (context, exploc);\n+\t  /* With line numbers, we should show whenever the line-numbering\n+\t     \"jumps\".  */\n+\t  if (line_span_idx > 0)\n+\t    layout.print_gap_in_line_numbering ();\n+\t}\n+      else\n+\t{\n+\t  /* Without line numbers, we print headings for some line spans.  */\n+\t  if (layout.print_heading_for_line_span_index_p (line_span_idx))\n+\t    {\n+\t      expanded_location exploc\n+\t\t= layout.get_expanded_location (line_span);\n+\t      context->start_span (context, exploc);\n+\t    }\n \t}\n       linenum_type last_line = line_span->get_last_line ();\n       for (linenum_type row = line_span->get_first_line ();\n@@ -2943,6 +2987,29 @@ test_diagnostic_show_locus_fixit_lines (const line_table_case &case_)\n \t\t  \"                         =\\n\",\n \t\t  pp_formatted_text (dc.printer));\n   }\n+\n+  /* As above, but verify the behavior of multiple line spans\n+     with line-numbering enabled.  */\n+  {\n+    const location_t y\n+      = linemap_position_for_line_and_column (line_table, ord_map, 3, 24);\n+    const location_t colon\n+      = linemap_position_for_line_and_column (line_table, ord_map, 6, 25);\n+    rich_location richloc (line_table, colon);\n+    richloc.add_fixit_insert_before (y, \".\");\n+    richloc.add_fixit_replace (colon, \"=\");\n+    test_diagnostic_context dc;\n+    dc.show_line_numbers_p = true;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \"  3 |                        y\\n\"\n+\t\t  \"    |                        .\\n\"\n+\t\t  \"....\\n\"\n+\t\t  \"  6 |                         : 0.0};\\n\"\n+\t\t  \"    |                         ^\\n\"\n+\t\t  \"    |                         =\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n }\n \n \n@@ -3475,16 +3542,33 @@ test_fixit_insert_containing_newline_2 (const line_table_case &case_)\n   if (putchar_finish > LINE_MAP_MAX_LOCATION_WITH_COLS)\n     return;\n \n-  test_diagnostic_context dc;\n-  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n-  ASSERT_STREQ (\"\\n\"\n-\t\t\"FILENAME:1:1:\\n\"\n-\t\t\"+#include <stdio.h>\\n\"\n-\t\t\" test (int ch)\\n\"\n-\t\t\"FILENAME:3:2:\\n\"\n-\t\t\"  putchar (ch);\\n\"\n-\t\t\"  ^~~~~~~\\n\",\n-\t\tpp_formatted_text (dc.printer));\n+  {\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \"FILENAME:1:1:\\n\"\n+\t\t  \"+#include <stdio.h>\\n\"\n+\t\t  \" test (int ch)\\n\"\n+\t\t  \"FILENAME:3:2:\\n\"\n+\t\t  \"  putchar (ch);\\n\"\n+\t\t  \"  ^~~~~~~\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* With line-numbering, the line spans are close enough to be\n+     consolidated, since it makes little sense to skip line 2.  */\n+  {\n+    test_diagnostic_context dc;\n+    dc.show_line_numbers_p = true;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \"+ |+#include <stdio.h>\\n\"\n+\t\t  \"1 | test (int ch)\\n\"\n+\t\t  \"2 | {\\n\"\n+\t\t  \"3 |  putchar (ch);\\n\"\n+\t\t  \"  |  ^~~~~~~\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n }\n \n /* Replacement fix-it hint containing a newline."}, {"sha": "da37cb11d2658252194f9fe6b269a5e889be0475", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "patch": "@@ -1,3 +1,9 @@\n+2018-08-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* gcc.dg/missing-header-fixit-3.c: Update for changes to how\n+\tline spans are printed with -fdiagnostics-show-line-numbers.\n+\n 2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/86837"}, {"sha": "7c72b1decc8eceeca42aceb4ba9f34d2cbd6f702", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-3.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf6214eacc97d0779e73c7ab6539ecb3dd1d524/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c?ref=acf6214eacc97d0779e73c7ab6539ecb3dd1d524", "patch": "@@ -13,15 +13,12 @@ void test (int i, int j)\n 9 |   printf (\"%i of %i\\n\", i, j);\n   |   ^~~~~~\n    { dg-end-multiline-output \"\" } */\n-/* { dg-regexp \".*missing-header-fixit-3.c:1:1:\" } */\n /* { dg-begin-multiline-output \"\" }\n-+ |+#include <stdio.h>\n-1 | /* Example of a fix-it hint that adds a #include directive,\n-   { dg-end-multiline-output \"\" } */\n-/* { dg-regexp \".*missing-header-fixit-3.c:9:3:\" } */\n-/* { dg-begin-multiline-output \"\" }\n-9 |   printf (\"%i of %i\\n\", i, j);\n-  |   ^~~~~~\n++++ |+#include <stdio.h>\n+  1 | /* Example of a fix-it hint that adds a #include directive,\n+....\n+  9 |   printf (\"%i of %i\\n\", i, j);\n+    |   ^~~~~~\n    { dg-end-multiline-output \"\" } */\n #endif\n }"}]}