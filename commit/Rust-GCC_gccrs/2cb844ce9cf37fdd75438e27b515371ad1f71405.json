{"sha": "2cb844ce9cf37fdd75438e27b515371ad1f71405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNiODQ0Y2U5Y2YzN2ZkZDc1NDM4ZTI3YjUxNTM3MWFkMWY3MTQwNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-02-03T17:19:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-02-03T17:19:58Z"}, "message": "PR jit/64810: driver, arm, jit: configure-time default options\n\ngcc/ChangeLog:\n\tPR jit/64810\n\t* Makefile.in (GCC_OBJS): Add gcc-main.o.\n\t* gcc-main.c: New file, containing \"main\" taken from gcc.c.\n\t* gcc.c (do_self_spec): Free decoded_options.\n\t(class driver): Move declaration to gcc.h.\n\t(main): Move declaration and implementation to new file\n\tgcc-main.c.\n\t(driver_get_configure_time_options): New function.\n\t* gcc.h (class driver): Move this declaration here, from\n\tgcc.c.\n\t(driver_get_configure_time_options): New declaration.\n\ngcc/jit/ChangeLog:\n\tPR jit/64810\n\t* Make-lang.in (jit_OBJS): Add jit/jit-spec.o and gcc.o.\n\t(LIBGCCJIT_FILENAME): Add EXTRA_GCC_OBJS.\n\t* jit-playback.c: Include gcc.h.\n\t(gcc::jit::playback::context::compile): Move mutex acquisition\n\tto before the call to make_fake_args.\n\t(append_arg_from_driver): New function.\n\t(gcc::jit::playback::context::make_fake_args): On the first call,\n\tcall into driver_get_configure_time_options to get configure-time\n\tdefault options and cache them.  Add them to the args for\n\ttoplev::main.\n\t* jit-spec.c: New source file.\n\t* docs/internals/test-hello-world.exe.log.txt: Update to reflect\n\tabove changes.\n\nFrom-SVN: r220373", "tree": {"sha": "8dfc1a700bed24b907d6f4da60e4d204beb6bd55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dfc1a700bed24b907d6f4da60e4d204beb6bd55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cb844ce9cf37fdd75438e27b515371ad1f71405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb844ce9cf37fdd75438e27b515371ad1f71405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb844ce9cf37fdd75438e27b515371ad1f71405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb844ce9cf37fdd75438e27b515371ad1f71405/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebc8f0bb3a8ac745dd710c7ce5cc918d998560c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc8f0bb3a8ac745dd710c7ce5cc918d998560c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc8f0bb3a8ac745dd710c7ce5cc918d998560c6"}], "stats": {"total": 350, "additions": 292, "deletions": 58}, "files": [{"sha": "5d1f6280caacb0eba3ca0e13f3b61c1beed623bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -1,3 +1,17 @@\n+2015-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/64810\n+\t* Makefile.in (GCC_OBJS): Add gcc-main.o.\n+\t* gcc-main.c: New file, containing \"main\" taken from gcc.c.\n+\t* gcc.c (do_self_spec): Free decoded_options.\n+\t(class driver): Move declaration to gcc.h.\n+\t(main): Move declaration and implementation to new file\n+\tgcc-main.c.\n+\t(driver_get_configure_time_options): New function.\n+\t* gcc.h (class driver): Move this declaration here, from\n+\tgcc.c.\n+\t(driver_get_configure_time_options): New declaration.\n+\n 2015-02-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (simple_edge_hints): Fix check for"}, {"sha": "de1f3b6c67441e32e2d25293eb6e6e7dae5cfa40", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -1132,7 +1132,7 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n FORTRAN_TARGET_OBJS=@fortran_target_objs@\n \n # Object files for gcc many-languages driver.\n-GCC_OBJS = gcc.o ggc-none.o\n+GCC_OBJS = gcc.o gcc-main.o ggc-none.o\n \n c-family-warn = $(STRICT_WARN)\n "}, {"sha": "230ba4846cd46c60d3c4b8fa8d943687200cfb43", "filename": "gcc/gcc-main.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fgcc-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fgcc-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-main.c?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -0,0 +1,46 @@\n+/* \"main\" for the compiler driver.\n+   Copyright (C) 1987-2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This source file contains \"main\" for the compiler driver.\n+   All of the real work is done within gcc.c; we implement \"main\"\n+   in here for the \"gcc\" binary so that gcc.o can be used in\n+   libgccjit.so.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"xregex.h\"\n+#include \"obstack.h\"\n+#include \"intl.h\"\n+#include \"prefix.h\"\n+#include \"gcc.h\"\n+\n+/* Implement the top-level \"main\" within the driver in terms of\n+   driver::main (implemented in gcc.c).  */\n+\n+extern int main (int, char **);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  driver d;\n+\n+  return d.main (argc, argv);\n+}"}, {"sha": "8a163a1c5732925bcd8ad401cabfdb9d319f0394", "filename": "gcc/gcc.c", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -4696,6 +4696,8 @@ do_self_spec (const char *spec)\n \t    }\n \t}\n \n+      free (decoded_options);\n+\n       alloc_switch ();\n       switches[n_switches].part1 = 0;\n     }\n@@ -6880,52 +6882,6 @@ compare_files (char *cmpfile[])\n   return ret;\n }\n \n-/* The top-level \"main\" within the driver would be ~1000 lines long.\n-   This class breaks it up into smaller functions and contains some\n-   state shared by them.  */\n-\n-class driver\n-{\n- public:\n-  int main (int argc, char **argv);\n-\n- private:\n-  void set_progname (const char *argv0) const;\n-  void expand_at_files (int *argc, char ***argv) const;\n-  void decode_argv (int argc, const char **argv);\n-  void global_initializations ();\n-  void build_multilib_strings () const;\n-  void set_up_specs () const;\n-  void putenv_COLLECT_GCC (const char *argv0) const;\n-  void maybe_putenv_COLLECT_LTO_WRAPPER () const;\n-  void maybe_putenv_OFFLOAD_TARGETS () const;\n-  void handle_unrecognized_options () const;\n-  int maybe_print_and_exit () const;\n-  bool prepare_infiles ();\n-  void do_spec_on_infiles () const;\n-  void maybe_run_linker (const char *argv0) const;\n-  void final_actions () const;\n-  int get_exit_code () const;\n-\n- private:\n-  char *explicit_link_files;\n-  struct cl_decoded_option *decoded_options;\n-  unsigned int decoded_options_count;\n-};\n-\n-/* Implement the top-level \"main\" within the driver in terms of\n-   driver::main.  */\n-\n-extern int main (int, char **);\n-\n-int\n-main (int argc, char **argv)\n-{\n-  driver d;\n-\n-  return d.main (argc, argv);\n-}\n-\n /* driver::main is implemented as a series of driver:: method calls.  */\n \n int\n@@ -9463,3 +9419,39 @@ convert_white_space (char *orig)\n   else\n     return orig;\n }\n+\n+/* PR jit/64810.\n+   Targets can provide configure-time default options in\n+   OPTION_DEFAULT_SPECS.  The jit needs to access these, but\n+   they are expressed in the spec language.\n+\n+   Run just enough of the driver to be able to expand these\n+   specs, and then call the callback CB on each\n+   such option.  The options strings are *without* a leading\n+   '-' character e.g. (\"march=x86-64\").  Finally, clean up.  */\n+\n+void\n+driver_get_configure_time_options (void (*cb) (const char *option,\n+\t\t\t\t\t       void *user_data),\n+\t\t\t\t   void *user_data)\n+{\n+  size_t i;\n+\n+  obstack_init (&obstack);\n+  gcc_obstack_init (&opts_obstack);\n+  n_switches = 0;\n+\n+  for (i = 0; i < ARRAY_SIZE (option_default_specs); i++)\n+    do_option_spec (option_default_specs[i].name,\n+\t\t    option_default_specs[i].spec);\n+\n+  for (i = 0; (int) i < n_switches; i++)\n+    {\n+      gcc_assert (switches[i].part1);\n+      (*cb) (switches[i].part1, user_data);\n+    }\n+\n+  obstack_free (&opts_obstack, NULL);\n+  obstack_free (&obstack, NULL);\n+  n_switches = 0;\n+}"}, {"sha": "f10a103cd5b264555a2cb845716de37e42392c5a", "filename": "gcc/gcc.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -23,6 +23,39 @@ along with GCC; see the file COPYING3.  If not see\n #include \"version.h\"\n #include \"diagnostic-core.h\"\n \n+/* The top-level \"main\" within the driver would be ~1000 lines long.\n+   This class breaks it up into smaller functions and contains some\n+   state shared by them.  */\n+\n+class driver\n+{\n+ public:\n+  int main (int argc, char **argv);\n+\n+ private:\n+  void set_progname (const char *argv0) const;\n+  void expand_at_files (int *argc, char ***argv) const;\n+  void decode_argv (int argc, const char **argv);\n+  void global_initializations ();\n+  void build_multilib_strings () const;\n+  void set_up_specs () const;\n+  void putenv_COLLECT_GCC (const char *argv0) const;\n+  void maybe_putenv_COLLECT_LTO_WRAPPER () const;\n+  void maybe_putenv_OFFLOAD_TARGETS () const;\n+  void handle_unrecognized_options () const;\n+  int maybe_print_and_exit () const;\n+  bool prepare_infiles ();\n+  void do_spec_on_infiles () const;\n+  void maybe_run_linker (const char *argv0) const;\n+  void final_actions () const;\n+  int get_exit_code () const;\n+\n+ private:\n+  char *explicit_link_files;\n+  struct cl_decoded_option *decoded_options;\n+  unsigned int decoded_options_count;\n+};\n+\n /* The mapping of a spec function name to the C function that\n    implements it.  */\n struct spec_function\n@@ -55,4 +88,9 @@ extern int lang_specific_extra_outfiles;\n \n extern const char **outfiles;\n \n+extern void\n+driver_get_configure_time_options (void (*cb)(const char *option,\n+\t\t\t\t\t      void *user_data),\n+\t\t\t\t   void *user_data);\n+\n #endif /* ! GCC_GCC_H */"}, {"sha": "e25b9de296a031387347eb33bc958976f5b92465", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -1,3 +1,21 @@\n+2015-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/64810\n+\t* Make-lang.in (jit_OBJS): Add jit/jit-spec.o and gcc.o.\n+\t(LIBGCCJIT_FILENAME): Add EXTRA_GCC_OBJS.\n+\t* jit-playback.c: Include gcc.h.\n+\t(gcc::jit::playback::context::compile): Move mutex acquisition\n+\tto before the call to make_fake_args.\n+\t(append_arg_from_driver): New function.\n+\t(gcc::jit::playback::context::make_fake_args): On the first call,\n+\tcall into driver_get_configure_time_options to get configure-time\n+\tdefault options and cache them.  Add them to the args for\n+\ttoplev::main.\n+\t* jit-spec.c: New source file.\n+\t* docs/internals/test-hello-world.exe.log.txt: Update to reflect\n+\tabove changes.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2015-02-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64810"}, {"sha": "44d0750e6ece56ee8fbde4d26d8b2d64c1da13cd", "filename": "gcc/jit/Make-lang.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FMake-lang.in?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -67,7 +67,9 @@ jit_OBJS = attribs.o \\\n \tjit/jit-playback.o \\\n \tjit/jit-result.o \\\n \tjit/jit-tempdir.o \\\n-\tjit/jit-builtins.o\n+\tjit/jit-builtins.o \\\n+\tjit/jit-spec.o \\\n+\tgcc.o\n \n # Use strict warnings for this front end.\n jit-warn = $(STRICT_WARN)\n@@ -77,10 +79,12 @@ jit-warn = $(STRICT_WARN)\n $(LIBGCCJIT_FILENAME): $(jit_OBJS) \\\n \tlibbackend.a libcommon-target.a libcommon.a \\\n \t$(CPPLIB) $(LIBDECNUMBER) \\\n-\t$(LIBDEPS) $(srcdir)/jit/libgccjit.map\n+\t$(LIBDEPS) $(srcdir)/jit/libgccjit.map \\\n+\t$(EXTRA_GCC_OBJS)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ -shared \\\n \t     $(jit_OBJS) libbackend.a libcommon-target.a libcommon.a \\\n \t     $(CPPLIB) $(LIBDECNUMBER) $(LIBS) $(BACKENDLIBS) \\\n+\t     $(EXTRA_GCC_OBJS) \\\n \t     -Wl,--version-script=$(srcdir)/jit/libgccjit.map \\\n \t     -Wl,-soname,$(LIBGCCJIT_SONAME)\n "}, {"sha": "f0a34cb6a8e6fc864999ee6a09bf8d416a597fd8", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-libgccjit 5.0.0 (experimental 20150127), January 27, 2015\n+libgccjit 5.0.0 (experimental 20150203), February 03, 2015\n \n David Malcolm\n \n@@ -13815,10 +13815,13 @@ JIT:    entering: bool gcc::jit::tempdir::create()\n JIT:     m_path_template: /tmp/libgccjit-XXXXXX\n JIT:     m_path_tempdir: /tmp/libgccjit-CKq1M9\n JIT:    exiting: bool gcc::jit::tempdir::create()\n-JIT:    entering: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n-JIT:    exiting: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    entering: void gcc::jit::playback::context::acquire_mutex()\n JIT:    exiting: void gcc::jit::playback::context::acquire_mutex()\n+JIT:    entering: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n+JIT:     reusing cached configure-time options\n+JIT:     configure_time_options[0]: -mtune=generic\n+JIT:     configure_time_options[1]: -march=x86-64\n+JIT:    exiting: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    entering: toplev::main\n JIT:     argv[0]: ./test-hello-world.c.exe\n JIT:     argv[1]: /tmp/libgccjit-CKq1M9/fake.c\n@@ -13830,6 +13833,8 @@ JIT:     argv[6]: --param\n JIT:     argv[7]: ggc-min-expand=0\n JIT:     argv[8]: --param\n JIT:     argv[9]: ggc-min-heapsize=0\n+JIT:     argv[10]: -mtune=generic\n+JIT:     argv[11]: -march=x86-64\n JIT:     entering: bool jit_langhook_init()\n JIT:     exiting: bool jit_langhook_init()\n JIT:     entering: void gcc::jit::playback::context::replay()"}, {"sha": "a9abc10b5d2d4e6f0baf69aa5793e5e06b380d0e", "filename": "gcc/jit/docs/internals/test-hello-world.exe.log.txt", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Finternals%2Ftest-hello-world.exe.log.txt?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -60,10 +60,13 @@ JIT:    entering: bool gcc::jit::tempdir::create()\n JIT:     m_path_template: /tmp/libgccjit-XXXXXX\n JIT:     m_path_tempdir: /tmp/libgccjit-CKq1M9\n JIT:    exiting: bool gcc::jit::tempdir::create()\n-JIT:    entering: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n-JIT:    exiting: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    entering: void gcc::jit::playback::context::acquire_mutex()\n JIT:    exiting: void gcc::jit::playback::context::acquire_mutex()\n+JIT:    entering: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n+JIT:     reusing cached configure-time options\n+JIT:     configure_time_options[0]: -mtune=generic\n+JIT:     configure_time_options[1]: -march=x86-64\n+JIT:    exiting: void gcc::jit::playback::context::make_fake_args(vec<char*>*, const char*, vec<gcc::jit::recording::requested_dump>*)\n JIT:    entering: toplev::main\n JIT:     argv[0]: ./test-hello-world.c.exe\n JIT:     argv[1]: /tmp/libgccjit-CKq1M9/fake.c\n@@ -75,6 +78,8 @@ JIT:     argv[6]: --param\n JIT:     argv[7]: ggc-min-expand=0\n JIT:     argv[8]: --param\n JIT:     argv[9]: ggc-min-heapsize=0\n+JIT:     argv[10]: -mtune=generic\n+JIT:     argv[11]: -march=x86-64\n JIT:     entering: bool jit_langhook_init()\n JIT:     exiting: bool jit_langhook_init()\n JIT:     entering: void gcc::jit::playback::context::replay()"}, {"sha": "c75c076a9be15d20d0d303912eb58979aa81c193", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"fold-const.h\"\n #include \"debug.h\"\n+#include \"gcc.h\"\n \n #include \"jit-common.h\"\n #include \"jit-logging.h\"\n@@ -1714,13 +1715,16 @@ compile ()\n   auto_vec <recording::requested_dump> requested_dumps;\n   m_recording_ctxt->get_all_requested_dumps (&requested_dumps);\n \n+  /* Acquire the JIT mutex and set \"this\" as the active playback ctxt.  */\n+  acquire_mutex ();\n+\n   auto_argvec fake_args;\n   make_fake_args (&fake_args, ctxt_progname, &requested_dumps);\n   if (errors_occurred ())\n-    return;\n-\n-  /* Acquire the JIT mutex and set \"this\" as the active playback ctxt.  */\n-  acquire_mutex ();\n+    {\n+      release_mutex ();\n+      return;\n+    }\n \n   /* This runs the compiler.  */\n   toplev toplev (false, /* use_TV_TOTAL */\n@@ -2034,6 +2038,19 @@ playback::context::release_mutex ()\n   pthread_mutex_unlock (&jit_mutex);\n }\n \n+/* Callback used by gcc::jit::playback::context::make_fake_args when\n+   invoking driver_get_configure_time_options.\n+   Populate a vec <char * > with the configure-time options.  */\n+\n+static void\n+append_arg_from_driver (const char *option, void *user_data)\n+{\n+  gcc_assert (option);\n+  gcc_assert (user_data);\n+  vec <char *> *argvec = static_cast <vec <char *> *> (user_data);\n+  argvec->safe_push (concat (\"-\", option, NULL));\n+}\n+\n /* Build a fake argv for toplev::main from the options set\n    by the user on the context .  */\n \n@@ -2118,6 +2135,57 @@ make_fake_args (vec <char *> *argvec,\n       }\n   }\n \n+  /* PR jit/64810: Add any target-specific default options\n+     from OPTION_DEFAULT_SPECS, normally provided by the driver\n+     in the non-jit case.\n+\n+     The target-specific code can define OPTION_DEFAULT_SPECS:\n+     default command options in the form of spec macros for the\n+     driver to expand ().\n+\n+     For cc1 etc, the driver processes OPTION_DEFAULT_SPECS and,\n+     if not overriden, injects the defaults as extra arguments to\n+     cc1 etc.\n+     For the jit case, we need to add these arguments here.  The\n+     input format (using the specs language) means that we have to run\n+     part of the driver code here (driver_get_configure_time_options).\n+\n+     To avoid running the spec-expansion code every time, we just do\n+     it the first time (via a function-static flag), saving the result\n+     into a function-static vec.\n+     This flag and vec are global state (i.e. per-process).\n+     They are guarded by the jit mutex.  */\n+  {\n+    static bool have_configure_time_options = false;\n+    static vec <char *> configure_time_options;\n+\n+    if (have_configure_time_options)\n+      log (\"reusing cached configure-time options\");\n+    else\n+      {\n+\thave_configure_time_options = true;\n+\tlog (\"getting configure-time options from driver\");\n+\tdriver_get_configure_time_options (append_arg_from_driver,\n+\t\t\t\t\t   &configure_time_options);\n+      }\n+\n+    int i;\n+    char *opt;\n+\n+    if (get_logger ())\n+      FOR_EACH_VEC_ELT (configure_time_options, i, opt)\n+\tlog (\"configure_time_options[%i]: %s\", i, opt);\n+\n+    /* configure_time_options should now contain the expanded options\n+       from OPTION_DEFAULT_SPECS (if any).  */\n+    FOR_EACH_VEC_ELT (configure_time_options, i, opt)\n+      {\n+\tgcc_assert (opt);\n+\tgcc_assert (opt[0] == '-');\n+\tADD_ARG (opt);\n+      }\n+  }\n+\n #undef ADD_ARG\n #undef ADD_ARG_TAKE_OWNERSHIP\n }"}, {"sha": "fa7e9d4f89524b58ca4ecaac80d807ec604ac5c6", "filename": "gcc/jit/jit-spec.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fjit-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb844ce9cf37fdd75438e27b515371ad1f71405/gcc%2Fjit%2Fjit-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-spec.c?ref=2cb844ce9cf37fdd75438e27b515371ad1f71405", "patch": "@@ -0,0 +1,44 @@\n+/* Dummy flag and argument handling of the jit \"front-end\".\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"gcc.h\"\n+#include \"opts.h\"\n+\n+/* Filter command line before processing by the gcc driver proper.  */\n+void\n+lang_specific_driver (struct cl_decoded_option **in_decoded_options ATTRIBUTE_UNUSED,\n+\t\t      unsigned int *in_decoded_options_count ATTRIBUTE_UNUSED,\n+\t\t      int *in_added_libraries ATTRIBUTE_UNUSED)\n+{\n+  /* Not used for jit.  */\n+}\n+\n+/* Called before linking.  Returns 0 on success and -1 on failure.  */\n+int\n+lang_specific_pre_link (void)\n+{\n+  return 0;  /* Not used for jit.  */\n+}\n+\n+/* Number of extra output files that lang_specific_pre_link may generate.  */\n+int lang_specific_extra_outfiles = 0;  /* Not used for jit.  */"}]}