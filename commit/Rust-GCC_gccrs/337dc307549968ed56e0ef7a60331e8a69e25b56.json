{"sha": "337dc307549968ed56e0ef7a60331e8a69e25b56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3ZGMzMDc1NDk5NjhlZDU2ZTBlZjdhNjAzMzFlOGE2OWUyNWI1Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-24T13:51:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-24T13:51:50Z"}, "message": "Minor refactoring in <bit> header\n\n\t* include/std/bit (__countl_zero, __countr_zero, __popcount): Use\n\tlocal variables for number of digits instead of type aliases.\n\t(__log2p1): Remove redundant branch also checked in __countl_zero.\n\nFrom-SVN: r262947", "tree": {"sha": "024855972d0d8d4f85c235b3fe41220e01c95868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/024855972d0d8d4f85c235b3fe41220e01c95868"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/337dc307549968ed56e0ef7a60331e8a69e25b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337dc307549968ed56e0ef7a60331e8a69e25b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337dc307549968ed56e0ef7a60331e8a69e25b56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337dc307549968ed56e0ef7a60331e8a69e25b56/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec96dcb6b829b33c5d779fc19af7601c9ac1604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec96dcb6b829b33c5d779fc19af7601c9ac1604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec96dcb6b829b33c5d779fc19af7601c9ac1604"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "2ed60c6c1400ee206fe85894f4db95a06d78641b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337dc307549968ed56e0ef7a60331e8a69e25b56/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337dc307549968ed56e0ef7a60331e8a69e25b56/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=337dc307549968ed56e0ef7a60331e8a69e25b56", "patch": "@@ -1,5 +1,9 @@\n 2018-07-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/bit (__countl_zero, __countr_zero, __popcount): Use\n+\tlocal variables for number of digits instead of type aliases.\n+\t(__log2p1): Remove redundant branch also checked in __countl_zero.\n+\n \t* include/bits/uses_allocator.h (__is_erased_or_convertible): Reorder\n \tconditions. Add comments.\n \t* testsuite/20_util/uses_allocator/69293_neg.cc: Adjust dg-error line."}, {"sha": "0aebac2875861a7983a7e1f5dd59ffaf434e6350", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337dc307549968ed56e0ef7a60331e8a69e25b56/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337dc307549968ed56e0ef7a60331e8a69e25b56/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=337dc307549968ed56e0ef7a60331e8a69e25b56", "patch": "@@ -62,45 +62,44 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countl_zero(_Tp __x) noexcept\n     {\n-      using __limits = numeric_limits<_Tp>;\n+      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n \n       if (__x == 0)\n-        return __limits::digits;\n+        return _Nd;\n \n-      using __limits_ull = numeric_limits<unsigned long long>;\n-      using __limits_ul = numeric_limits<unsigned long>;\n-      using __limits_u = numeric_limits<unsigned>;\n+      constexpr auto _Nd_ull = numeric_limits<unsigned long long>::digits;\n+      constexpr auto _Nd_ul = numeric_limits<unsigned long>::digits;\n+      constexpr auto _Nd_u = numeric_limits<unsigned>::digits;\n \n-      if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_u::digits)\n+      if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \t{\n-\t  constexpr int __diff = __limits_u::digits - __limits::digits;\n+\t  constexpr int __diff = _Nd_u - _Nd;\n \t  return __builtin_clz(__x) - __diff;\n \t}\n-      else if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_ul::digits)\n+      else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ul)\n \t{\n-\t  constexpr int __diff = __limits_ul::digits - __limits::digits;\n+\t  constexpr int __diff = _Nd_ul - _Nd;\n \t  return __builtin_clzl(__x) - __diff;\n \t}\n-      else if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_ull::digits)\n+      else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ull)\n \t{\n-\t  constexpr int __diff = __limits_ull::digits - __limits::digits;\n+\t  constexpr int __diff = _Nd_ull - _Nd;\n \t  return __builtin_clzll(__x) - __diff;\n \t}\n-      else // (__limits::digits > __limits_ull::digits)\n+      else // (_Nd > _Nd_ull)\n \t{\n-\t  static_assert(__limits::digits <= (2 * __limits_ull::digits),\n+\t  static_assert(_Nd <= (2 * _Nd_ull),\n \t\t\t\"Maximum supported integer size is 128-bit\");\n \n-\t  unsigned long long __high = __x >> __limits_ull::digits;\n+\t  unsigned long long __high = __x >> _Nd_ull;\n \t  if (__high != 0)\n \t    {\n-\t      constexpr int __diff\n-\t\t= (2 * __limits_ull::digits) - __limits::digits;\n+\t      constexpr int __diff = (2 * _Nd_ull) - _Nd;\n \t      return __builtin_clzll(__high) - __diff;\n \t    }\n-\t  unsigned long long __low = __x & __limits_ull::max();\n-\t  return (__limits::digits - __limits_ull::digits)\n-\t    + __builtin_clzll(__low);\n+\t  constexpr auto __max_ull = numeric_limits<unsigned long long>::max();\n+\t  unsigned long long __low = __x & __max_ull;\n+\t  return (_Nd - _Nd_ull) + __builtin_clzll(__low);\n \t}\n     }\n \n@@ -117,31 +116,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countr_zero(_Tp __x) noexcept\n     {\n-      using __limits = numeric_limits<_Tp>;\n+      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n \n       if (__x == 0)\n-        return __limits::digits;\n+        return _Nd;\n \n-      using __limits_ull = numeric_limits<unsigned long long>;\n-      using __limits_ul = numeric_limits<unsigned long>;\n-      using __limits_u = numeric_limits<unsigned>;\n+      constexpr auto _Nd_ull = numeric_limits<unsigned long long>::digits;\n+      constexpr auto _Nd_ul = numeric_limits<unsigned long>::digits;\n+      constexpr auto _Nd_u = numeric_limits<unsigned>::digits;\n \n-      if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_u::digits)\n+      if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \treturn __builtin_ctz(__x);\n-      else if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_ul::digits)\n+      else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ul)\n \treturn __builtin_ctzl(__x);\n-      else if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_ull::digits)\n+      else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ull)\n \treturn __builtin_ctzll(__x);\n-      else // (__limits::digits > __limits_ull::digits)\n+      else // (_Nd > _Nd_ull)\n \t{\n-\t  static_assert(__limits::digits <= (2 * __limits_ull::digits),\n+\t  static_assert(_Nd <= (2 * _Nd_ull),\n \t\t\t\"Maximum supported integer size is 128-bit\");\n \n-\t  unsigned long long __low = __x & __limits_ull::max();\n+\t  constexpr auto __max_ull = numeric_limits<unsigned long long>::max();\n+\t  unsigned long long __low = __x & __max_ull;\n \t  if (__low != 0)\n \t    return __builtin_ctzll(__low);\n-\t  unsigned long long __high = __x >> __limits_ull::digits;\n-\t  return __builtin_ctzll(__high) + __limits_ull::digits;\n+\t  unsigned long long __high = __x >> _Nd_ull;\n+\t  return __builtin_ctzll(__high) + _Nd_ull;\n \t}\n     }\n \n@@ -158,28 +158,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __popcount(_Tp __x) noexcept\n     {\n-      using __limits = numeric_limits<_Tp>;\n+      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n \n       if (__x == 0)\n         return 0;\n \n-      using __limits_ull = numeric_limits<unsigned long long>;\n-      using __limits_ul = numeric_limits<unsigned long>;\n-      using __limits_u = numeric_limits<unsigned>;\n+      constexpr auto _Nd_ull = numeric_limits<unsigned long long>::digits;\n+      constexpr auto _Nd_ul = numeric_limits<unsigned long>::digits;\n+      constexpr auto _Nd_u = numeric_limits<unsigned>::digits;\n \n-      if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_u::digits)\n+      if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \treturn __builtin_popcount(__x);\n-      else if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_ul::digits)\n+      else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ul)\n \treturn __builtin_popcountl(__x);\n-      else if _GLIBCXX17_CONSTEXPR (__limits::digits <= __limits_ull::digits)\n+      else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ull)\n \treturn __builtin_popcountll(__x);\n-      else // (__limits::digits > __limits_ull::digits)\n+      else // (_Nd > _Nd_ull)\n \t{\n-\t  static_assert(__limits::digits <= (2 * __limits_ull::digits),\n+\t  static_assert(_Nd <= (2 * _Nd_ull),\n \t\t\t\"Maximum supported integer size is 128-bit\");\n \n-\t  unsigned long long __low = __x & __limits_ull::max();\n-\t  unsigned long long __high = __x >> __limits_ull::digits;\n+\t  constexpr auto __max_ull = numeric_limits<unsigned long long>::max();\n+\t  unsigned long long __low = __x & __max_ull;\n+\t  unsigned long long __high = __x >> _Nd_ull;\n \t  return __builtin_popcountll(__low) + __builtin_popcountll(__high);\n \t}\n     }\n@@ -214,8 +215,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __log2p1(_Tp __x) noexcept\n     {\n       constexpr auto _Nd = numeric_limits<_Tp>::digits;\n-      if (__x == 0)\n-\treturn 0;\n       return _Nd - std::__countl_zero(__x);\n     }\n "}]}