{"sha": "2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIyYThmMWZjZDRmOTcwNDM3ZTBkZTNjYmE1ZmQ1ZmQ4NmQxZGQ1OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-10-27T21:56:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-27T21:56:01Z"}, "message": "invoke.texi: Document -frename-registers.\n\n        * invoke.texi: Document -frename-registers.  Add it to -O3.\n        * toplev.c (rest_of_compilation): Run regrename before ifcvt2.\n        (enum dump_file_index, dump_file): Update order.\n        (main): Set flag_rename_registers at -O3.\n\nFrom-SVN: r37092", "tree": {"sha": "b93fc1f07f3ceab46877ee9a004905bfdab860a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b93fc1f07f3ceab46877ee9a004905bfdab860a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59/comments", "author": null, "committer": null, "parents": [{"sha": "93c89ab30835c0b518ea2d0c822edc74a68f192a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c89ab30835c0b518ea2d0c822edc74a68f192a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c89ab30835c0b518ea2d0c822edc74a68f192a"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "4454dd98ac8b413d1b2e8588b732b1fad0ecda9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59", "patch": "@@ -1,3 +1,10 @@\n+2000-10-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* invoke.texi: Document -frename-registers.  Add it to -O3.\n+\t* toplev.c (rest_of_compilation): Run regrename before ifcvt2.\n+\t(enum dump_file_index, dump_file): Update order.\n+\t(main): Set flag_rename_registers at -O3.\n+\n 2000-10-27  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.h (enum reg_class): Add PV_REG."}, {"sha": "b8be406823236375ae13d45a0d81393e3f5b8a3d", "filename": "gcc/invoke.texi", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59", "patch": "@@ -175,9 +175,9 @@ in the following sections.\n -fmove-all-movables  -fno-default-inline  -fno-defer-pop\n -fno-function-cse  -fno-inline  -fno-peephole -ftrapv\n -fomit-frame-pointer  -foptimize-register-moves -foptimize-sibling-calls\n--fregmove -frerun-cse-after-loop  -frerun-loop-opt  -freduce-all-givs\n--fschedule-insns  -fschedule-insns2  -fssa -fstrength-reduce\n--fstrict-aliasing  -fthread-jumps  -funroll-all-loops\n+-fregmove  -frename-registers  -frerun-cse-after-loop  -frerun-loop-opt\n+-freduce-all-givs  -fschedule-insns  -fschedule-insns2  -fssa\n+-fstrength-reduce  -fstrict-aliasing  -fthread-jumps  -funroll-all-loops\n -funroll-loops \n -O  -O0  -O1  -O2  -O3 -Os\n @end smallexample\n@@ -2577,14 +2577,15 @@ perform loop unrolling or function inlining when you specify @samp{-O2}.\n As compared to @samp{-O}, this option increases both compilation time\n and the performance of the generated code.\n \n-@samp{-O2} turns on all optional optimizations except for loop unrolling\n-and function inlining.  It also turns on the @samp{-fforce-mem} option\n-on all machines and frame pointer elimination on machines where doing so\n-does not interfere with debugging.\n+@samp{-O2} turns on all optional optimizations except for loop unrolling,\n+function inlining, and register renaming.  It also turns on the\n+@samp{-fforce-mem} option on all machines and frame pointer elimination\n+on machines where doing so does not interfere with debugging.\n \n @item -O3\n Optimize yet more.  @samp{-O3} turns on all optimizations specified by\n-@samp{-O2} and also turns on the @samp{inline-functions} option.\n+@samp{-O2} and also turns on the @samp{-finline-functions} and\n+@samp{-frename-registers} options.\n \n @item -O0\n Do not optimize.\n@@ -2805,7 +2806,6 @@ halting the program may not work properly with this option.  Use\n -fno-delete-null-pointer-checks to disable this optimizing for programs\n which depend on that behavior.\n \n-\n @item -fexpensive-optimizations\n Perform a number of minor optimizations that are relatively expensive.\n \n@@ -3033,6 +3033,12 @@ Perform dead-code elimination in SSA form.  Requires @samp{-fssa}.  Like\n Treat floating point constant as single precision constant instead of\n implicitly converting it to double precision constant.\n \n+@item -frename-registers\n+Attempt to avoid false dependancies in scheduled code by making use\n+of registers left over after register allocation.  This optimization\n+will most benefit processors with lots of registers.  It can, however,\n+make debugging impossible, since variables will no longer stay in\n+a ``home register''.\n @end table\n \n @node Preprocessor Options"}, {"sha": "f6a428820a29c506a30af3fa9b4eba7e1e31dd2c", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2b2a8f1fcd4f970437e0de3cba5fd5fd86d1dd59", "patch": "@@ -277,9 +277,9 @@ enum dump_file_index\n   DFI_lreg,\n   DFI_greg,\n   DFI_flow2,\n-  DFI_ce2,\n   DFI_peephole2,\n   DFI_rnreg,\n+  DFI_ce2,\n   DFI_sched2,\n   DFI_bbro,\n   DFI_jump2,\n@@ -321,9 +321,9 @@ struct dump_file_info dump_file[DFI_MAX] =\n   { \"lreg\",\t'l', 1, 0, 0 },\n   { \"greg\",\t'g', 1, 0, 0 },\n   { \"flow2\",\t'w', 1, 0, 0 },\n-  { \"ce2\",\t'E', 1, 0, 0 },\n   { \"peephole2\", 'z', 1, 0, 0 },\n   { \"rnreg\",\t'n', 1, 0, 0 },\n+  { \"ce2\",\t'E', 1, 0, 0 },\n   { \"sched2\",\t'R', 1, 0, 0 },\n   { \"bbro\",\t'B', 1, 0, 0 },\n   { \"jump2\",\t'J', 1, 0, 0 },\n@@ -3509,17 +3509,6 @@ rest_of_compilation (decl)\n   close_dump_file (DFI_flow2, print_rtl_with_bb, insns);\n   timevar_pop (TV_FLOW2);\n \n-  if (optimize > 0)\n-    {\n-      timevar_push (TV_IFCVT2);\n-      open_dump_file (DFI_ce2, decl);\n-\n-      if_convert (1);\n-\n-      close_dump_file (DFI_ce2, print_rtl_with_bb, insns);\n-      timevar_pop (TV_IFCVT2);\n-    }\n-\n #ifdef HAVE_peephole2\n   if (optimize > 0 && flag_peephole2)\n     {\n@@ -3544,6 +3533,17 @@ rest_of_compilation (decl)\n       timevar_pop (TV_RENAME_REGISTERS);\n     }\n \n+  if (optimize > 0)\n+    {\n+      timevar_push (TV_IFCVT2);\n+      open_dump_file (DFI_ce2, decl);\n+\n+      if_convert (1);\n+\n+      close_dump_file (DFI_ce2, print_rtl_with_bb, insns);\n+      timevar_pop (TV_IFCVT2);\n+    }\n+\n #ifdef INSN_SCHEDULING\n   if (optimize > 0 && flag_schedule_insns_after_reload)\n     {\n@@ -4633,6 +4633,7 @@ main (argc, argv)\n   if (optimize >= 3)\n     {\n       flag_inline_functions = 1;\n+      flag_rename_registers = 1;\n     }\n \n   if (optimize < 2 || optimize_size)"}]}