{"sha": "0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2MWJlYzgwYTBkOGZmOWFhZTRlZDAzMWU3ZjY4NjlkMzdhM2FmMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-04T00:14:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-04T00:14:00Z"}, "message": "cp-demangle.c (cplus_demangle_type): Fix function quals.\n\nlibiberty/\n\t* cp-demangle.c (cplus_demangle_type): Fix function quals.\n\t(d_pointer_to_member_type): Simplify.\ngcc/cp/\n\t* mangle.c (write_type): When writing a function type with\n\tfunction-cv-quals, don't add the unqualified type as a\n\tsubstitution candidate.\n\nFrom-SVN: r197460", "tree": {"sha": "db5ffa9a448dd27fa04e384e2492f7f9d32e6d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db5ffa9a448dd27fa04e384e2492f7f9d32e6d9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e8567986360dd629df5e60cfe881ac0916e45d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8567986360dd629df5e60cfe881ac0916e45d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8567986360dd629df5e60cfe881ac0916e45d0"}], "stats": {"total": 123, "additions": 77, "deletions": 46}, "files": [{"sha": "e02e7ed1d383946a0fdd323e37153dcf14a246b3", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -792,6 +792,11 @@ Driver Undocumented\n ; 7: The version of the ABI that treats nullptr_t as a builtin type and\n ;    corrects the mangling of lambdas in default argument scope.\n ;    First selectable in G++ 4.8.\n+;\n+; 8: The version of the ABI that corrects the substitution behavior of\n+;    function types with function-cv-qualifiers.\n+;    First selectable in G++ 4.9.\n+;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI.\n fabi-version="}, {"sha": "ef38bc2dbc838492ff3cba0569dfe338b23bc4c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -1,3 +1,9 @@\n+2013-04-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (write_type): When writing a function type with\n+\tfunction-cv-quals, don't add the unqualified type as a\n+\tsubstitution candidate.\n+\n 2013-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56815"}, {"sha": "83c3e628da04bcf95f38b147e12ced47013b861b", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -1897,8 +1897,16 @@ write_type (tree type)\n       tree t = TYPE_MAIN_VARIANT (type);\n       if (TREE_CODE (t) == FUNCTION_TYPE\n \t  || TREE_CODE (t) == METHOD_TYPE)\n-\tt = build_ref_qualified_type (t, type_memfn_rqual (type));\n-      write_type (t);\n+\t{\n+\t  t = build_ref_qualified_type (t, type_memfn_rqual (type));\n+\t  if (abi_version_at_least (8))\n+\t    /* Avoid adding the unqualified function type as a substitution.  */\n+\t    write_function_type (t);\n+\t  else\n+\t    write_type (t);\n+\t}\n+      else\n+\twrite_type (t);\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     /* It is important not to use the TYPE_MAIN_VARIANT of TYPE here"}, {"sha": "6dbfd7865cfed931825e78624130c30f9bcc733c", "filename": "gcc/testsuite/g++.dg/abi/mangle62.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle62.C?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -0,0 +1,11 @@\n+// Before v8, we mistakenly treated an unqualified function type\n+// as a substitution candidate for a function type with function-cv-quals.\n+// Test for the conformant behavior.\n+\n+// { dg-options -fabi-version=0 }\n+\n+template <class T, class U> struct A { };\n+// { dg-final { scan-assembler \"_Z1fP1AIKFvvEFvvEE\" } }\n+void f (A<void()const, void()> *){}\n+// { dg-final { scan-assembler \"_Z1gP1AIFvvEKFvvEE\" } }\n+void g (A<void(), void()const> *){}"}, {"sha": "fca1cb6c4369271e579b5e21f2915a42d7a93735", "filename": "gcc/testsuite/g++.dg/abi/mangle62a.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle62a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle62a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle62a.C?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -0,0 +1,11 @@\n+// Before v8, we mistakenly treated an unqualified function type\n+// as a substitution candidate for a function type with function-cv-quals.\n+// Test for that for backward compatibility.\n+\n+// { dg-options -fabi-version=7 }\n+\n+template <class T, class U> struct A { };\n+// { dg-final { scan-assembler \"_Z1fP1AIKFvvES0_E\" } }\n+void f (A<void()const, void()> *){}\n+// { dg-final { scan-assembler \"_Z1gP1AIFvvEKS0_E\" } }\n+void g (A<void(), void()const> *){}"}, {"sha": "717221dd891730ce03bc408d3d3b591baa5d40a9", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -1,5 +1,8 @@\n 2013-04-03  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-demangle.c (cplus_demangle_type): Fix function quals.\n+\t(d_pointer_to_member_type): Simplify.\n+\n \tDemangle C++11 ref-qualifier.\n \t* cp-demangle.c (d_ref_qualifier): New.\n \t(d_nested_name, d_function_type): Use it."}, {"sha": "70f54389c892957a113f627c4cfc806a79f63afb", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -2198,8 +2198,16 @@ cplus_demangle_type (struct d_info *di)\n       pret = d_cv_qualifiers (di, &ret, 0);\n       if (pret == NULL)\n \treturn NULL;\n-      *pret = cplus_demangle_type (di);\n-      if (! *pret)\n+      if (d_peek_char (di) == 'F')\n+\t{\n+\t  /* cv-qualifiers before a function type apply to 'this',\n+\t     so avoid adding the unqualified function type to\n+\t     the substitution list.  */\n+\t  *pret = d_function_type (di);\n+\t}\n+      else\n+\t*pret = cplus_demangle_type (di);\n+      if (!*pret)\n \treturn NULL;\n       if ((*pret)->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS\n \t  || (*pret)->type == DEMANGLE_COMPONENT_REFERENCE_THIS)\n@@ -2739,53 +2747,32 @@ d_pointer_to_member_type (struct d_info *di)\n {\n   struct demangle_component *cl;\n   struct demangle_component *mem;\n-  struct demangle_component **pmem;\n \n   if (! d_check_char (di, 'M'))\n     return NULL;\n \n   cl = cplus_demangle_type (di);\n-\n-  /* The ABI specifies that any type can be a substitution source, and\n-     that M is followed by two types, and that when a CV-qualified\n-     type is seen both the base type and the CV-qualified types are\n-     substitution sources.  The ABI also specifies that for a pointer\n-     to a CV-qualified member function, the qualifiers are attached to\n-     the second type.  Given the grammar, a plain reading of the ABI\n-     suggests that both the CV-qualified member function and the\n-     non-qualified member function are substitution sources.  However,\n-     g++ does not work that way.  g++ treats only the CV-qualified\n-     member function as a substitution source.  FIXME.  So to work\n-     with g++, we need to pull off the CV-qualifiers here, in order to\n-     avoid calling add_substitution() in cplus_demangle_type().  But\n-     for a CV-qualified member which is not a function, g++ does\n-     follow the ABI, so we need to handle that case here by calling\n-     d_add_substitution ourselves.  */\n-\n-  pmem = d_cv_qualifiers (di, &mem, 1);\n-  if (pmem == NULL)\n-    return NULL;\n-  *pmem = cplus_demangle_type (di);\n-  if (*pmem == NULL)\n+  if (cl == NULL)\n     return NULL;\n \n-  if (pmem != &mem\n-      && ((*pmem)->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS\n-\t  || (*pmem)->type == DEMANGLE_COMPONENT_REFERENCE_THIS))\n-    {\n-      /* Move the ref-qualifier outside the cv-qualifiers so that\n-\t they are printed in the right order.  */\n-      struct demangle_component *fn = d_left (*pmem);\n-      d_left (*pmem) = mem;\n-      mem = *pmem;\n-      *pmem = fn;\n-    }\n-\n-  if (pmem != &mem && (*pmem)->type != DEMANGLE_COMPONENT_FUNCTION_TYPE)\n-    {\n-      if (! d_add_substitution (di, mem))\n-\treturn NULL;\n-    }\n+  /* The ABI says, \"The type of a non-static member function is considered\n+     to be different, for the purposes of substitution, from the type of a\n+     namespace-scope or static member function whose type appears\n+     similar. The types of two non-static member functions are considered\n+     to be different, for the purposes of substitution, if the functions\n+     are members of different classes. In other words, for the purposes of\n+     substitution, the class of which the function is a member is\n+     considered part of the type of function.\"\n+\n+     For a pointer to member function, this call to cplus_demangle_type\n+     will end up adding a (possibly qualified) non-member function type to\n+     the substitution table, which is not correct; however, the member\n+     function type will never be used in a substitution, so putting the\n+     wrong type in the substitution table is harmless.  */\n+\n+  mem = cplus_demangle_type (di);\n+  if (mem == NULL)\n+    return NULL;\n \n   return d_make_comp (di, DEMANGLE_COMPONENT_PTRMEM_TYPE, cl, mem);\n }"}, {"sha": "1259e4a9f495fe2dcff1cda674ed6cc8270fa577", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0861bec80a0d8ff9aae4ed031e7f6869d37a3af2/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=0861bec80a0d8ff9aae4ed031e7f6869d37a3af2", "patch": "@@ -4273,8 +4273,8 @@ foo\n #\n --format=gnu-v3 --no-params\n _Z1fIKFvvES0_Evv\n-void f<void () const, void ()>()\n-f<void () const, void ()>\n+void f<void () const, void () const>()\n+f<void () const, void () const>\n #\n --format=gnu-v3\n _ZN4modc6parser8sequenceINS_9astParser13LocatedParserINS0_9ParserRefINS2_UlRNS2_16TokenParserInputEE_EEEEEINS0_14OptionalParserINS2_18ListParserTemplateILNS_6tokens5Token4TypeE4EXadL_ZNSD_Ut_13parenthesizedEEEE6ParserINS4_INS0_6ParserIS5_NS_3ast10ExpressionEEEEEEEEENSA_INS4_INS2_22OneOfKeywordsToTParserINSJ_5StyleEEEEEEENS0_14SequenceParserIS5_INS0_18ExactElementParserIS5_EENSA_ISM_EEEEENS0_14RepeatedParserINS4_INS0_15TransformParserINSU_IS5_INS4_INSP_INSJ_10Annotation12RelationshipEEEEESX_EEENS2_UlNS2_3LocES12_ONS_5MaybeISK_EEE19_EEEEELb0EEEEEENSU_INS0_17ExtractParserTypeIT_E9InputTypeEINS0_8MaybeRefIS1F_E4TypeEDpNS1I_IT0_E4TypeEEEEOS1F_DpOS1L_"}]}