{"sha": "85256f8a68fad82c63d59d115ab69f9feadde038", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyNTZmOGE2OGZhZDgyYzYzZDU5ZDExNWFiNjlmOWZlYWRkZTAzOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-06-06T17:45:43Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-06-06T17:45:43Z"}, "message": "Add some comments.\n\nFrom-SVN: r9887", "tree": {"sha": "471720e7ab1166be325b5afdaa577bc2be336276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/471720e7ab1166be325b5afdaa577bc2be336276"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85256f8a68fad82c63d59d115ab69f9feadde038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85256f8a68fad82c63d59d115ab69f9feadde038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85256f8a68fad82c63d59d115ab69f9feadde038", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85256f8a68fad82c63d59d115ab69f9feadde038/comments", "author": null, "committer": null, "parents": [{"sha": "79b2746ad73c6159b77a510032162c09ebfb1613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b2746ad73c6159b77a510032162c09ebfb1613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b2746ad73c6159b77a510032162c09ebfb1613"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "aff62059b99b7b87d0df1b7e0380bb6d56a93e8f", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85256f8a68fad82c63d59d115ab69f9feadde038/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85256f8a68fad82c63d59d115ab69f9feadde038/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=85256f8a68fad82c63d59d115ab69f9feadde038", "patch": "@@ -56,6 +56,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n      call_used_regs[MACL_REG] = 0;\t\t\t\t\\\n   }\n \f\n+/* ??? Need to write documentation for all SH options and add it to the\n+   invoke.texi file.  */\n+\n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n extern int target_flags;\n@@ -206,6 +209,9 @@ do {\t\t\t\t\t\t\t\t\\\n /* Allocation boundary (in *bits*) for the code of a function.\n    32 bit alignment is faster, because instructions are always fetched as a\n    pair from a longword boundary.  */\n+/* ??? Perhaps also define ASM_OUTPUT_ALIGN_CODE and/or ASM_OUTPUT_LOOP_ALIGN\n+   so as to align jump targets and/or loops to 4 byte boundaries when not\n+   optimizing for space?  */\n #define FUNCTION_BOUNDARY  (TARGET_SMALLCODE ? 16 : 32)\n \n /* Alignment of field after `int : 0' in a structure.  */\n@@ -972,6 +978,13 @@ extern int current_function_anonymous_args;\n    that the native compiler puts too large (> 32) immediate shift counts\n    into a register and shifts by the register, letting the SH decide what\n    to do instead of doing that itself.  */\n+/* ??? This is defined, but the library routines in lib1funcs.asm do not\n+   truncate the shift count.  This may result in incorrect results for\n+   unusual cases.  Truncating the shift counts in the library routines would\n+   make them faster.  However, the SH3 has hardware shifts that do not\n+   truncate, so it appears that we need to leave this undefined for correct\n+   SH3 code.  We can still using truncation in the library routines though to\n+   make them faster.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n /* All integers have the same format so truncation is easy.  */\n@@ -1065,6 +1078,10 @@ extern int current_function_anonymous_args;\n \n #define REGISTER_MOVE_COST(SRCCLASS, DSTCLASS) \\\n \t(((DSTCLASS == T_REGS) || (DSTCLASS == PR_REG)) ? 10 : 1)\n+\n+/* ??? Perhaps make MEMORY_MOVE_COST depend on compiler option?  This\n+   would be so that people would slow memory systems could generate\n+   different code that does fewer memory accesses.  */\n \f\n /* Assembler output control.  */\n "}]}