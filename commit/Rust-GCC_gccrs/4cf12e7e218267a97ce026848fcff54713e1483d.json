{"sha": "4cf12e7e218267a97ce026848fcff54713e1483d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNmMTJlN2UyMTgyNjdhOTdjZTAyNjg0OGZjZmY1NDcxM2UxNDgzZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-15T23:43:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-15T23:43:10Z"}, "message": "i386.c (asm_output_function_prefix): Remove.\n\n        * config/i386/i386.c (asm_output_function_prefix): Remove.\n        (ix86_asm_file_end): New.\n        (load_pic_register): Generate pic_label_name into a\n        staticly allocated buffer.\n        * config/i386/i386-protos.h: Update.\n        * config/i386/i386.h (ASM_OUTPUT_FUNCTION_PREFIX): Remove.\n        (ASM_FILE_END): New.\n        * config/i386/i386afe.h: New file.\n        * config.gcc (i?86-*-elf) [tm_file]: Use it.\n        (i?86-*-{freebsd,linux*,moss*}): Likewise.\n        * config/elfos.h (ASM_FILE_END): Undef before redefinition.\n        * config/i386/cygwin.h (ASM_FILE_END): Likewise.\n        * config/i386/osfrose.h (ASM_FILE_END): Invoke ix86_asm_file_end.\n        * config/i386/sco5.h (ASM_FILE_END): Likewise.\n        * config/i386/winnt.c (i386_pe_asm_file_end): Likewise.\n\nFrom-SVN: r39055", "tree": {"sha": "9bdff5066ecd23b877619975881ff8a84b94795a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bdff5066ecd23b877619975881ff8a84b94795a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cf12e7e218267a97ce026848fcff54713e1483d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf12e7e218267a97ce026848fcff54713e1483d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf12e7e218267a97ce026848fcff54713e1483d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf12e7e218267a97ce026848fcff54713e1483d/comments", "author": null, "committer": null, "parents": [{"sha": "ad3b5aff7c758c9634febe64c8d7d29abf27f925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad3b5aff7c758c9634febe64c8d7d29abf27f925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad3b5aff7c758c9634febe64c8d7d29abf27f925"}], "stats": {"total": 158, "additions": 111, "deletions": 47}, "files": [{"sha": "53c06b713276cef7b2db2b1d8b169e6a61cd2468", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -1,3 +1,21 @@\n+2001-01-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (asm_output_function_prefix): Remove.\n+\t(ix86_asm_file_end): New.\n+\t(load_pic_register): Generate pic_label_name into a\n+\tstaticly allocated buffer.\n+\t* config/i386/i386-protos.h: Update.\n+\t* config/i386/i386.h (ASM_OUTPUT_FUNCTION_PREFIX): Remove.\n+\t(ASM_FILE_END): New.\n+\t* config/i386/i386afe.h: New file.\n+\t* config.gcc (i?86-*-elf) [tm_file]: Use it.\n+\t(i?86-*-{freebsd,linux*,moss*}): Likewise.\n+\t* config/elfos.h (ASM_FILE_END): Undef before redefinition.\n+\t* config/i386/cygwin.h (ASM_FILE_END): Likewise.\n+\t* config/i386/osfrose.h (ASM_FILE_END): Invoke ix86_asm_file_end.\n+\t* config/i386/sco5.h (ASM_FILE_END): Likewise.\n+\t* config/i386/winnt.c (i386_pe_asm_file_end): Likewise.\n+\n 2001-01-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* Makefile.in (install-man): Remove explicit dependency on"}, {"sha": "c28dd6a88da8e92554cf02a074ed5373216336cc", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -979,7 +979,7 @@ i370-*-linux*)\n \t;;\n i[34567]86-*-elf*)\n \txm_file=\"${xm_file} xm-svr4.h i386/xm-sysv4.h\"\n-\ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386elf.h\"\n+\ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386afe.h i386/i386elf.h\"\n \ttmake_file=i386/t-i386elf\n \txmake_file=x-svr4\n \t;;\n@@ -1095,7 +1095,7 @@ i[34567]86-*-freebsd[12] | i[34567]86-*-freebsd[12].* | i[34567]86-*-freebsd*aou\n \ttmake_file=t-freebsd\n \t;;\n i[34567]86-*-freebsd*)\n-\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd.h i386/perform.h\"\n+\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/i386afe.h i386/freebsd.h i386/perform.h\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \ttmake_file=t-freebsd\n \tgas=yes\n@@ -1166,7 +1166,7 @@ i[34567]86-*-linux*libc1)\t# Intel 80386's running GNU/Linux\n \t\t\t\t# with ELF format using the\n \t\t\t\t# GNU/Linux C library 5\n \txmake_file=x-linux\t\n-\ttm_file=\"i386/i386.h i386/att.h linux.h i386/linux.h\"\n+\ttm_file=\"i386/i386.h i386/att.h linux.h i386/i386afe.h i386/linux.h\"\n \ttmake_file=\"t-linux t-linux-gnulibc1 i386/t-crtstuff\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n@@ -1179,7 +1179,7 @@ i[34567]86-*-linux*)\t# Intel 80386's running GNU/Linux\n \t\t\t# with ELF format using glibc 2\n \t\t\t# aka GNU/Linux C library 6\n \txmake_file=x-linux\n-\ttm_file=\"i386/i386.h i386/att.h linux.h i386/linux.h\"\n+\ttm_file=\"i386/i386.h i386/att.h linux.h i386/i386afe.h i386/linux.h\"\n \ttmake_file=\"t-linux i386/t-crtstuff\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n@@ -1210,7 +1210,7 @@ i[34567]86-pc-msdosdjgpp*)\n \tesac\n \t;;\n i[34567]86-moss-msdos* | i[34567]86-*-moss*)\n-\ttm_file=\"i386/i386.h i386/att.h linux.h i386/linux.h i386/moss.h\"\n+\ttm_file=\"i386/i386.h i386/att.h linux.h i386/i386afe.h i386/linux.h i386/moss.h\"\n \ttmake_file=t-libc-ok\n \tgnu_ld=yes\n \tgas=yes"}, {"sha": "27ee2f24df6a341a385af555698b6e7a50312530", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -100,6 +100,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n+#undef ASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t \t\t\t\\"}, {"sha": "b29c66c2e7974f8738814e14ee9eec73bd940815", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -498,6 +498,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n \n /* Output function declarations at the end of the file.  */\n+#undef ASM_FILE_END\n #define ASM_FILE_END(FILE) \\\n   i386_pe_asm_file_end (FILE)\n "}, {"sha": "e9cb3a88f9757cafff788ca679d275bfeb61372e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -26,7 +26,7 @@ extern void optimization_options PARAMS ((int, int));\n \n extern int ix86_can_use_return_insn_p PARAMS ((void));\n \n-extern void asm_output_function_prefix PARAMS ((FILE *, const char *));\n+extern void ix86_asm_file_end PARAMS ((FILE *));\n extern void load_pic_register PARAMS ((void));\n extern HOST_WIDE_INT ix86_initial_elimination_offset PARAMS((int, int));\n extern void ix86_expand_prologue PARAMS ((void));"}, {"sha": "d73c2c584484a2d161a41f3fb411c593c5926538", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -1689,44 +1689,53 @@ ix86_can_use_return_insn_p ()\n   return tsize == 0 && nregs == 0;\n }\n \f\n-static const char *pic_label_name;\n-static int pic_label_output;\n+static char pic_label_name[32];\n \n /* This function generates code for -fpic that loads %ebx with\n    the return address of the caller and then returns.  */\n \n void\n-asm_output_function_prefix (file, name)\n+ix86_asm_file_end (file)\n      FILE *file;\n-     const char *name ATTRIBUTE_UNUSED;\n {\n   rtx xops[2];\n-  int pic_reg_used = flag_pic && (current_function_uses_pic_offset_table\n-\t\t\t\t  || current_function_uses_const_pool);\n-  xops[0] = pic_offset_table_rtx;\n-  xops[1] = stack_pointer_rtx;\n \n-  /* Deep branch prediction favors having a return for every call.  */\n-  if (pic_reg_used && TARGET_DEEP_BRANCH_PREDICTION)\n-    {\n-      if (!pic_label_output)\n-\t{\n-\t  /* This used to call ASM_DECLARE_FUNCTION_NAME() but since it's an\n-\t     internal (non-global) label that's being emitted, it didn't make\n-\t     sense to have .type information for local labels.   This caused\n-\t     the SCO OpenServer 5.0.4 ELF assembler grief (why are you giving\n-\t     me debug info for a label that you're declaring non-global?) this\n-\t     was changed to call ASM_OUTPUT_LABEL() instead.  */\n+  if (! TARGET_DEEP_BRANCH_PREDICTION || pic_label_name[0] == 0)\n+    return;\n+\n+#ifdef ASM_OUTPUT_SECTION_NAME\n+  /* The trick here is to create a linkonce section containing the\n+     pic label thunk, but to refer to it with an internal label.\n+     Because the label is internal, we don't have inter-dso name\n+     binding issues on hosts that don't support \".hidden\".\n+\n+     In order to use these macros, however, we must create a fake\n+     function decl.  */\n+  {\n+    tree decl = build_decl (FUNCTION_DECL,\n+\t\t\t    get_identifier (\"i686.get_pc_thunk\"),\n+\t\t\t    error_mark_node);\n+    DECL_ONE_ONLY (decl) = 1;\n+    UNIQUE_SECTION (decl, 0);\n+    named_section (decl, NULL, 0);\n+  }\n+#else\n+  text_section ();\n+#endif\n \n-\t  ASM_OUTPUT_LABEL (file, pic_label_name);\n+  /* This used to call ASM_DECLARE_FUNCTION_NAME() but since it's an\n+     internal (non-global) label that's being emitted, it didn't make\n+     sense to have .type information for local labels.   This caused\n+     the SCO OpenServer 5.0.4 ELF assembler grief (why are you giving\n+     me debug info for a label that you're declaring non-global?) this\n+     was changed to call ASM_OUTPUT_LABEL() instead.  */\n \n-\t  xops[1] = gen_rtx_MEM (SImode, xops[1]);\n-\t  output_asm_insn (\"mov{l}\\t{%1, %0|%0, %1}\", xops);\n-\t  output_asm_insn (\"ret\", xops);\n+  ASM_OUTPUT_LABEL (file, pic_label_name);\n \n-\t  pic_label_output = 1;\n-\t}\n-    }\n+  xops[0] = pic_offset_table_rtx;\n+  xops[1] = gen_rtx_MEM (SImode, stack_pointer_rtx);\n+  output_asm_insn (\"mov{l}\\t{%1, %0|%0, %1}\", xops);\n+  output_asm_insn (\"ret\", xops);\n }\n \n void\n@@ -1738,12 +1747,8 @@ load_pic_register ()\n \n   if (TARGET_DEEP_BRANCH_PREDICTION)\n     {\n-      if (pic_label_name == NULL)\n-\t{\n-\t  char buf[32];\n-\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LPR\", 0);\n-\t  pic_label_name = ggc_strdup (buf);\n-\t}\n+      if (! pic_label_name[0])\n+\tASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", 0);\n       pclab = gen_rtx_MEM (QImode, gen_rtx_SYMBOL_REF (Pmode, pic_label_name));\n     }\n   else\n@@ -1951,8 +1956,8 @@ ix86_emit_save_regs ()\n void\n ix86_expand_prologue ()\n {\n-  HOST_WIDE_INT tsize = ix86_compute_frame_size (get_frame_size (), (int *) 0, (int *) 0,\n-\t\t\t\t\t\t (int *) 0);\n+  HOST_WIDE_INT tsize = ix86_compute_frame_size (get_frame_size (), (int *) 0,\n+\t\t\t\t\t\t (int *) 0, (int *) 0);\n   rtx insn;\n   int pic_reg_used = flag_pic && (current_function_uses_pic_offset_table\n \t\t\t\t  || current_function_uses_const_pool);"}, {"sha": "4845e392e0cb9a1f12939b8a6bbb321d9c895acd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -1356,13 +1356,11 @@ typedef struct ix86_args {\n        || ! FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (TREE_TYPE (DECL)))) \\\n        || FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (TREE_TYPE (cfun->decl))))))\n \n-/* This macro is invoked just before the start of a function.\n-   It is used here to output code for -fpic that will load the\n-   return address into %ebx.  */\n+/* This macro is invoked at the end of compilation.  It is used here to\n+   output code for -fpic that will load the return address into %ebx.  */\n \n-#undef ASM_OUTPUT_FUNCTION_PREFIX\n-#define ASM_OUTPUT_FUNCTION_PREFIX(FILE, FNNAME) \\\n-  asm_output_function_prefix (FILE, FNNAME)\n+#undef ASM_FILE_END\n+#define ASM_FILE_END(FILE)  ix86_asm_file_end (FILE)\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */"}, {"sha": "b40be840af6cdfb96ad3cebc96a4efa34ff48a70", "filename": "gcc/config/i386/i386afe.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386afe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fi386afe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386afe.h?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA. */\n+\n+/* Irritatingly, config/elfos.h defines its own version of ASM_FILE_END,\n+   conflicting with a definition which we wish to have in i386/i386.h.\n+   We _really_ need to clean up the hodge-podge of random macro placement\n+   in the configury...  */\n+\n+/* This macro is invoked at the end of compilation.  It is used here to\n+   output code for -fpic that will load the return address into %ebx.  */\n+\n+#undef ASM_FILE_END\n+#define ASM_FILE_END(FILE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t \t\t\t\\\n+      ix86_asm_file_end (FILE);\t\t\t\t\\\n+      if (!flag_no_ident)\t\t\t\t\\\n+\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\\\n+\t\t IDENT_ASM_OP, version_string);\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)"}, {"sha": "1f86883599bedbc0f396b56fb9a081a6f02947b8", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -752,12 +752,13 @@ while (0)\n #define SCCS_DIRECTIVE\n \n /* This says what to print at the end of the assembly file */\n+#undef ASM_FILE_END\n #define ASM_FILE_END(STREAM)\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (HALF_PIC_P ())\t\t\t\t\t\t\t\\\n       HALF_PIC_FINISH (STREAM);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n+    ix86_asm_file_end (STREAM);\t\t\t\t\t\t\\\n     if (!flag_no_ident)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tchar *fstart = main_input_filename;\t\t\t\t\\"}, {"sha": "b23990bb7997bf8379d404dbb07b22ad7831b481", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -213,6 +213,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n+     ix86_asm_file_end (FILE);\t\t\t\t\t\t\\\n      if (!flag_no_ident)\t\t\t\t\t\t\\\n \tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n \t\t IDENT_ASM_OP, version_string);\t\t\t\t\\"}, {"sha": "ae6b6253a8ba184fe04b88e6b264c08fb1daffd8", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf12e7e218267a97ce026848fcff54713e1483d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=4cf12e7e218267a97ce026848fcff54713e1483d", "patch": "@@ -592,6 +592,8 @@ i386_pe_asm_file_end (file)\n {\n   struct extern_list *p;\n \n+  ix86_asm_file_end (file);\n+\n   for (p = extern_head; p != NULL; p = p->next)\n     {\n       tree decl;"}]}