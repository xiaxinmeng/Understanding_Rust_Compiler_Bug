{"sha": "7074ea72d10e861505f70e2e12060c3909474bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3NGVhNzJkMTBlODYxNTA1ZjcwZTJlMTIwNjBjMzkwOTQ3NGJmNw==", "commit": {"author": {"name": "Asher Langton", "email": "langton2@llnl.gov", "date": "2006-05-30T23:27:38Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-05-30T23:27:38Z"}, "message": "symbol.c (check_conflict): Allow external, function, and subroutine attributes with Cray pointees.\n\n2006-05-30  Asher Langton  <langton2@llnl.gov>\n\n\t* symbol.c (check_conflict): Allow external, function, and\n\tsubroutine attributes with Cray pointees.\n\t* trans-expr.c (gfc_conv_function_val): Translate Cray pointees\n\tthat point to procedures.\n\t* gfortran.texi: Document new feature.\n\n\t* gfortran.dg/cray_pointers_7.f90: New test.\n\nFrom-SVN: r114252", "tree": {"sha": "e61a9fb26be5623e3ec18415f7dc47ffb285e9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e61a9fb26be5623e3ec18415f7dc47ffb285e9c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7074ea72d10e861505f70e2e12060c3909474bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7074ea72d10e861505f70e2e12060c3909474bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7074ea72d10e861505f70e2e12060c3909474bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7074ea72d10e861505f70e2e12060c3909474bf7/comments", "author": null, "committer": null, "parents": [{"sha": "9cb96754ae0a6af89ec8286d6a68d76c70698a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb96754ae0a6af89ec8286d6a68d76c70698a65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb96754ae0a6af89ec8286d6a68d76c70698a65"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "59da6903ba2e949d5aa7a861473eb04efabb32dc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7074ea72d10e861505f70e2e12060c3909474bf7", "patch": "@@ -1,3 +1,11 @@\n+2006-05-30  Asher Langton  <langton2@llnl.gov>\n+\n+\t* symbol.c (check_conflict): Allow external, function, and\n+\tsubroutine attributes with Cray pointees.\n+\t* trans-expr.c (gfc_conv_function_val): Translate Cray pointees\n+\tthat point to procedures.\n+\t* gfortran.texi: Document new feature.\n+\n 2006-05-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/27634"}, {"sha": "260e76feddf4cfe07529b70a802ecc13f714dfd7", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=7074ea72d10e861505f70e2e12060c3909474bf7", "patch": "@@ -1107,13 +1107,28 @@ pointers will ``incorrectly'' optimize code with illegal aliasing.)\n \n There are a number of restrictions on the attributes that can be\n applied to Cray pointers and pointees.  Pointees may not have the\n-attributes ALLOCATABLE, INTENT, OPTIONAL, DUMMY, TARGET, EXTERNAL,\n+attributes ALLOCATABLE, INTENT, OPTIONAL, DUMMY, TARGET,\n INTRINSIC, or POINTER.  Pointers may not have the attributes\n DIMENSION, POINTER, TARGET, ALLOCATABLE, EXTERNAL, or INTRINSIC.\n Pointees may not occur in more than one pointer statement.  A pointee\n cannot be a pointer.  Pointees cannot occur in equivalence, common, or\n data statements.\n \n+A Cray pointer may point to a function or a subroutine.  For example,\n+the following excerpt is valid:\n+@smallexample\n+  implicit none\n+  external sub\n+  pointer (subptr,subpte)\n+  external subpte\n+  subptr = loc(sub)\n+  call subpte()\n+  [...]\n+  subroutine sub\n+  [...]\n+  end subroutine sub\n+@end smallexample\n+\n A pointer may be modified during the course of a program, and this\n will change the location to which the pointee refers.  However, when\n pointees are passed as arguments, they are treated as ordinary"}, {"sha": "7acef427e506562605ed31bdf8d7f963c22dc213", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=7074ea72d10e861505f70e2e12060c3909474bf7", "patch": "@@ -385,11 +385,8 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n   conf (cray_pointee, optional);\n   conf (cray_pointee, dummy);\n   conf (cray_pointee, target);\n-  conf (cray_pointee, external);\n   conf (cray_pointee, intrinsic);\n   conf (cray_pointee, pointer);\n-  conf (cray_pointee, function);\n-  conf (cray_pointee, subroutine);\n   conf (cray_pointee, entry);\n   conf (cray_pointee, in_common);\n   conf (cray_pointee, in_equivalence);"}, {"sha": "752609c49294aba88fa66fa554aeed22169efd9e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7074ea72d10e861505f70e2e12060c3909474bf7", "patch": "@@ -1191,6 +1191,9 @@ gfc_conv_function_val (gfc_se * se, gfc_symbol * sym)\n \tsym->backend_decl = gfc_get_extern_function_decl (sym);\n \n       tmp = sym->backend_decl;\n+      if (sym->attr.cray_pointee)\n+\ttmp = convert (build_pointer_type (TREE_TYPE (tmp)),\n+\t\t       gfc_get_symbol_decl (sym->cp_pointer));\n       if (!POINTER_TYPE_P (TREE_TYPE (tmp)))\n \t{\n \t  gcc_assert (TREE_CODE (tmp) == FUNCTION_DECL);"}, {"sha": "3b8f323ba73b281fa4e99ada82a4057f9b28688e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7074ea72d10e861505f70e2e12060c3909474bf7", "patch": "@@ -1,3 +1,7 @@\n+2006-05-30  Asher Langton  <langton2@llnl.gov>\n+\n+\t* gfortran.dg/cray_pointers_7.f90: New test.\n+\n 2006-05-30  Roger Sayle  <roger@eyesopen.com>\n \n \tPR tree-optimization/23452"}, {"sha": "1fe52c0af59944742bc7b18fdbd32ce2f2e516e6", "filename": "gcc/testsuite/gfortran.dg/cray_pointers_7.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7074ea72d10e861505f70e2e12060c3909474bf7/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_7.f90?ref=7074ea72d10e861505f70e2e12060c3909474bf7", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! { dg-options \"-fcray-pointer\" }\n+\n+! Test the implementation of Cray pointers to procedures.\n+program cray_pointers_7\n+  implicit none\n+  integer tmp\n+  integer, external :: fn\n+  external sub\n+  \n+  ! We can't mix function and subroutine pointers.\n+  pointer (subptr,subpte)\n+  pointer (fnptr,fnpte)\n+  \n+  ! Declare pointee types.\n+  external subpte\n+  integer, external :: fnpte\n+  \n+  tmp = 0\n+  \n+  ! Check pointers to subroutines.\n+  subptr = loc(sub)\n+  call subpte(tmp)\n+  if (tmp .ne. 17) call abort()\n+\n+  ! Check pointers to functions.\n+  fnptr = loc(fn)\n+  tmp = fnpte(7)\n+  if (tmp .ne. 14) call abort()\n+  \n+end program cray_pointers_7\n+\n+! Trivial subroutine to be called through a Cray pointer.\n+subroutine sub(i)\n+  integer i\n+  i = 17\n+end subroutine sub\n+\n+! Trivial function to be called through a Cray pointer.\n+function fn(i)\n+  integer fn,i\n+  fn = 2*i\n+end function fn"}]}