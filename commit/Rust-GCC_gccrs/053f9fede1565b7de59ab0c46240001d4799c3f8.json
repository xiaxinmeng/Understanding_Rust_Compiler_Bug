{"sha": "053f9fede1565b7de59ab0c46240001d4799c3f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzZjlmZWRlMTU2NWI3ZGU1OWFiMGM0NjI0MDAwMWQ0Nzk5YzNmOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-26T20:16:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-26T20:16:28Z"}, "message": "tree-inline.c (remap_location): New function extracted from...\n\n\t* tree-inline.c (remap_location): New function extracted from...\n\t(copy_edges_for_bb): Add ID parameter.  Remap goto_locus.\n\t(copy_phis_for_bb): ...here.  Call remap_location.\n\t(copy_cfg_body): Adjust call to copy_edges_for_bb.\n\nFrom-SVN: r262165", "tree": {"sha": "abb60435859b767b73bad88ecc893a5f4e0a08f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb60435859b767b73bad88ecc893a5f4e0a08f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053f9fede1565b7de59ab0c46240001d4799c3f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053f9fede1565b7de59ab0c46240001d4799c3f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053f9fede1565b7de59ab0c46240001d4799c3f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053f9fede1565b7de59ab0c46240001d4799c3f8/comments", "author": null, "committer": null, "parents": [{"sha": "18338e9eee30b22a65a23e4883d0aad6b4c9dedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18338e9eee30b22a65a23e4883d0aad6b4c9dedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18338e9eee30b22a65a23e4883d0aad6b4c9dedc"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "48b57c1c640d3615a0abafb3aa1a6ec5f820eef9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053f9fede1565b7de59ab0c46240001d4799c3f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053f9fede1565b7de59ab0c46240001d4799c3f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=053f9fede1565b7de59ab0c46240001d4799c3f8", "patch": "@@ -1,3 +1,10 @@\n+2018-06-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-inline.c (remap_location): New function extracted from...\n+\t(copy_edges_for_bb): Add ID parameter.  Remap goto_locus.\n+\t(copy_phis_for_bb): ...here.  Call remap_location.\n+\t(copy_cfg_body): Adjust call to copy_edges_for_bb.\n+\n 2018-06-26  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* config/rs6000/rs6000-string.c (expand_block_clear): Don't use"}, {"sha": "fb349d47ba59febf536dff02e1f0f749ce1729cb", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053f9fede1565b7de59ab0c46240001d4799c3f8/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053f9fede1565b7de59ab0c46240001d4799c3f8/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=053f9fede1565b7de59ab0c46240001d4799c3f8", "patch": "@@ -718,6 +718,7 @@ remap_block (tree *block, copy_body_data *id)\n }\n \n /* Copy the whole block tree and root it in id->block.  */\n+\n static tree\n remap_blocks (tree block, copy_body_data *id)\n {\n@@ -738,6 +739,7 @@ remap_blocks (tree block, copy_body_data *id)\n }\n \n /* Remap the block tree rooted at BLOCK to nothing.  */\n+\n static void\n remap_blocks_to_null (tree block, copy_body_data *id)\n {\n@@ -747,6 +749,27 @@ remap_blocks_to_null (tree block, copy_body_data *id)\n     remap_blocks_to_null (t, id);\n }\n \n+/* Remap the location info pointed to by LOCUS.  */\n+\n+static location_t\n+remap_location (location_t locus, copy_body_data *id)\n+{\n+  if (LOCATION_BLOCK (locus))\n+    {\n+      tree *n = id->decl_map->get (LOCATION_BLOCK (locus));\n+      gcc_assert (n);\n+      if (*n)\n+\treturn set_block (locus, *n);\n+    }\n+\n+  locus = LOCATION_LOCUS (locus);\n+\n+  if (locus != UNKNOWN_LOCATION && id->block)\n+    return set_block (locus, id->block);\n+\n+  return locus;\n+}\n+\n static void\n copy_statement_list (tree *tp)\n {\n@@ -2145,7 +2168,8 @@ update_ssa_across_abnormal_edges (basic_block bb, basic_block ret_bb,\n \n static bool\n copy_edges_for_bb (basic_block bb, profile_count num, profile_count den,\n-\t\t   basic_block ret_bb, basic_block abnormal_goto_dest)\n+\t\t   basic_block ret_bb, basic_block abnormal_goto_dest,\n+\t\t   copy_body_data *id)\n {\n   basic_block new_bb = (basic_block) bb->aux;\n   edge_iterator ei;\n@@ -2160,15 +2184,18 @@ copy_edges_for_bb (basic_block bb, profile_count num, profile_count den,\n       {\n \tedge new_edge;\n \tint flags = old_edge->flags;\n+\tlocation_t locus = old_edge->goto_locus;\n \n \t/* Return edges do get a FALLTHRU flag when they get inlined.  */\n \tif (old_edge->dest->index == EXIT_BLOCK\n \t    && !(flags & (EDGE_TRUE_VALUE|EDGE_FALSE_VALUE|EDGE_FAKE))\n \t    && old_edge->dest->aux != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t  flags |= EDGE_FALLTHRU;\n \n-\tnew_edge = make_edge (new_bb, (basic_block) old_edge->dest->aux, flags);\n+\tnew_edge\n+\t  = make_edge (new_bb, (basic_block) old_edge->dest->aux, flags);\n \tnew_edge->probability = old_edge->probability;\n+\tnew_edge->goto_locus = remap_location (locus, id);\n       }\n \n   if (bb->index == ENTRY_BLOCK || bb->index == EXIT_BLOCK)\n@@ -2365,16 +2392,7 @@ copy_phis_for_bb (basic_block bb, copy_body_data *id)\n \t\t      inserted = true;\n \t\t    }\n \t\t  locus = gimple_phi_arg_location_from_edge (phi, old_edge);\n-\t\t  if (LOCATION_BLOCK (locus))\n-\t\t    {\n-\t\t      tree *n;\n-\t\t      n = id->decl_map->get (LOCATION_BLOCK (locus));\n-\t\t      gcc_assert (n);\n-\t\t      locus = set_block (locus, *n);\n-\t\t    }\n-\t\t  else\n-\t\t    locus = LOCATION_LOCUS (locus);\n-\n+\t\t  locus = remap_location (locus, id);\n \t\t  add_phi_arg (new_phi, new_arg, new_edge, locus);\n \t\t}\n \t    }\n@@ -2705,7 +2723,7 @@ copy_cfg_body (copy_body_data * id,\n     if (!id->blocks_to_copy\n \t|| (bb->index > 0 && bitmap_bit_p (id->blocks_to_copy, bb->index)))\n       need_debug_cleanup |= copy_edges_for_bb (bb, num, den, exit_block_map,\n-\t\t\t\t\t       abnormal_goto_dest);\n+\t\t\t\t\t       abnormal_goto_dest, id);\n \n   if (new_entry)\n     {"}]}