{"sha": "fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVhNmVjYjc0NjRmZDE5ZTM5ODFhNjI5N2EzMGVjYzc5ODFkZTRiMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-05-22T09:02:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-05-22T09:02:56Z"}, "message": "re PR libstdc++/15565 ([3.4 only] SLES9: leading + sign for unsigned int with showpos)\n\n2004-05-22  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/15565\n\t* include/bits/locale_facets.tcc (__int_to_char(unsigned long),\n\t__int_to_char(unsigned long long)): Showpos is not relevant\n\tfor unsigned types.\n\t* testsuite/22_locale/num_put/put/char/15565.cc: New.\n\t* testsuite/22_locale/num_put/put/wchar_t/15565.cc: New.\n\n\t* testsuite/22_locale/num_put/put/wchar_t/1.cc: Use L for the fill\n\tchar.\n\t* testsuite/22_locale/num_put/put/wchar_t/2.cc: Likewise.\n\t* testsuite/22_locale/num_put/put/wchar_t/3.cc: Likewise.\n\t* testsuite/22_locale/num_put/put/wchar_t/4.cc: Likewise.\n\t* testsuite/22_locale/num_put/put/wchar_t/5.cc: Likewise.\n\t* testsuite/22_locale/num_put/put/wchar_t/6.cc: Likewise.\n\t* testsuite/22_locale/num_put/put/wchar_t/8.cc: Likewise.\n\nFrom-SVN: r82128", "tree": {"sha": "2346b565ad433bbd92094298b023937aa6294519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2346b565ad433bbd92094298b023937aa6294519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/comments", "author": null, "committer": null, "parents": [{"sha": "0bc0f41de71d12f9209664eb35dfba0048d4998c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc0f41de71d12f9209664eb35dfba0048d4998c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc0f41de71d12f9209664eb35dfba0048d4998c"}], "stats": {"total": 222, "additions": 181, "deletions": 41}, "files": [{"sha": "a92e4082dad4772c93e23f8a91887895a23abdc4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -1,3 +1,21 @@\n+2004-05-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/15565\n+\t* include/bits/locale_facets.tcc (__int_to_char(unsigned long),\n+\t__int_to_char(unsigned long long)): Showpos is not relevant\n+\tfor unsigned types.\n+\t* testsuite/22_locale/num_put/put/char/15565.cc: New.\n+\t* testsuite/22_locale/num_put/put/wchar_t/15565.cc: New.\n+\n+\t* testsuite/22_locale/num_put/put/wchar_t/1.cc: Use L for the fill\n+\tchar.\n+\t* testsuite/22_locale/num_put/put/wchar_t/2.cc: Likewise.\n+\t* testsuite/22_locale/num_put/put/wchar_t/3.cc: Likewise.\n+\t* testsuite/22_locale/num_put/put/wchar_t/4.cc: Likewise.\n+\t* testsuite/22_locale/num_put/put/wchar_t/5.cc: Likewise.\n+\t* testsuite/22_locale/num_put/put/wchar_t/6.cc: Likewise.\n+\t* testsuite/22_locale/num_put/put/wchar_t/8.cc: Likewise.\n+\n 2004-05-21  Matthias Klose  <doko@debian.org>\n  \n \t* docs/doxygen/run_doxygen:  Bump required version."}, {"sha": "ea723fce99c36e329eec3500699a8c31e88e1491", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -497,7 +497,8 @@ namespace std\n \n \t// At this point, base is determined. If not hex, only allow\n \t// base digits as valid input.\n-\tconst size_t __len = __base == 16 ? __num_base::_S_iend - __num_base::_S_izero : __base;\n+\tconst size_t __len = (__base == 16 ? __num_base::_S_iend\n+\t\t\t      - __num_base::_S_izero : __base);\n \n \t// Extract.\n \tstring __found_grouping;\n@@ -826,7 +827,11 @@ namespace std\n     inline int\n     __int_to_char(_CharT* __bufend, unsigned long __v, const _CharT* __lit,\n \t\t  ios_base::fmtflags __flags)\n-    { return __int_to_char(__bufend, __v, __lit, __flags, false); }\n+    {\n+      // About showpos, see Table 60 and C99 7.19.6.1, p6 (+).\n+      return __int_to_char(__bufend, __v, __lit,\n+\t\t\t   __flags & ~ios_base::showpos, false);\n+    }\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT>\n@@ -848,7 +853,8 @@ namespace std\n     inline int\n     __int_to_char(_CharT* __bufend, unsigned long long __v, \n \t\t  const _CharT* __lit, ios_base::fmtflags __flags)\n-    { return __int_to_char(__bufend, __v, __lit, __flags, false); }\n+    { return __int_to_char(__bufend, __v, __lit,\n+\t\t\t   __flags & ~ios_base::showpos, false); }\n #endif\n \n   template<typename _CharT, typename _ValueT>"}, {"sha": "a62ab1e7c8d9dcb1e35795356eed2bca7ceed01b", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/15565.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F15565.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F15565.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F15565.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/15565\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // cache the num_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_c);\n+  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc());\n+\n+  unsigned long ul1 = 42UL;\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios_base::showpos);\n+  np.put(oss.rdbuf(), oss, ' ', ul1);\n+  VERIFY( oss.str() == \"42\" );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  unsigned long long ull1 = 31ULL;\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios_base::showpos);\n+  np.put(oss.rdbuf(), oss, ' ', ull1);\n+  VERIFY( oss.str() == \"31\" );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "efc0f51364d870ba75e21bd9fad50aaf1efc7e8f", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/1.cc", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -60,13 +60,13 @@ void test01()\n \n   // bool, simple\n   iterator_type os_it00 = oss.rdbuf();\n-  iterator_type os_it01 = np.put(os_it00, oss, '+', b1);\n+  iterator_type os_it01 = np.put(os_it00, oss, L'+', b1);\n   result1 = oss.str();\n   VERIFY( result1 == L\"1\" );\n   //  VERIFY( os_it00 != os_it01 );\n \n   oss.str(empty);\n-  np.put(oss.rdbuf(), oss, '+', b0);\n+  np.put(oss.rdbuf(), oss, L'+', b0);\n   result2 = oss.str();\n   VERIFY( result2 == L\"0\" );\n \n@@ -76,7 +76,7 @@ void test01()\n   oss.clear();\n   oss.width(20);\n   oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', ul1);\n+  np.put(oss.rdbuf(), oss, L'+', ul1);\n   result1 = oss.str();\n   VERIFY( result1 == L\"1.294.967.294+++++++\" );\n \n@@ -85,15 +85,15 @@ void test01()\n   oss.clear();\n   oss.width(20);\n   oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', d1);\n+  np.put(oss.rdbuf(), oss, L'+', d1);\n   result1 = oss.str();\n   VERIFY( result1 == L\"1,79769e+308++++++++\" );\n \n   oss.str(empty);\n   oss.clear();\n   oss.width(20);\n   oss.setf(ios_base::right, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', d2);\n+  np.put(oss.rdbuf(), oss, L'+', d2);\n   result1 = oss.str();\n   VERIFY( result1 == L\"++++++++2,22507e-308\" );\n \n@@ -102,7 +102,7 @@ void test01()\n   oss.width(20);\n   oss.setf(ios_base::right, ios_base::adjustfield);\n   oss.setf(ios_base::scientific, ios_base::floatfield);\n-  np.put(oss.rdbuf(), oss, '+', d2);\n+  np.put(oss.rdbuf(), oss, L'+', d2);\n   result2 = oss.str();\n   VERIFY( result2 == L\"+++++++2,225074e-308\" );\n \n@@ -113,29 +113,29 @@ void test01()\n   oss.setf(ios_base::right, ios_base::adjustfield);\n   oss.setf(ios_base::scientific, ios_base::floatfield);\n   oss.setf(ios_base::uppercase);\n-  np.put(oss.rdbuf(), oss, '+', d2);\n+  np.put(oss.rdbuf(), oss, L'+', d2);\n   result1 = oss.str();\n   VERIFY( result1 == L\"+++2,2250738585E-308\" );\n \n   // long double\n   oss.str(empty);\n   oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', ld1);\n+  np.put(oss.rdbuf(), oss, L'+', ld1);\n   result1 = oss.str();\n   VERIFY( result1 == L\"1,7976931349E+308\" );\n \n   oss.str(empty);\n   oss.clear();\n   oss.precision(0);\n   oss.setf(ios_base::fixed, ios_base::floatfield);\n-  np.put(oss.rdbuf(), oss, '+', ld2);\n+  np.put(oss.rdbuf(), oss, L'+', ld2);\n   result1 = oss.str();\n   VERIFY( result1 == L\"0\" );\n \n   // const void\n   oss.str(empty);\n   oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', cv);\n+  np.put(oss.rdbuf(), oss, L'+', cv);\n   result1 = oss.str();\n   // No grouping characters.\n   VERIFY( !char_traits<wchar_t>::find(result1.c_str(), \n@@ -149,7 +149,7 @@ void test01()\n \n   oss.str(empty);\n   oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', ll1);\n+  np.put(oss.rdbuf(), oss, L'+', ll1);\n   result1 = oss.str();\n   VERIFY( result1 == L\"9.223.372.036.854.775.807\" );\n #endif\n@@ -160,5 +160,3 @@ int main()\n   test01();\n   return 0;\n }\n-\n-"}, {"sha": "d61a442e1ece30f27766ba7fdff87e54a3ee668f", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/15565.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F15565.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F15565.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F15565.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/15565\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // cache the num_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_c);\n+  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc());\n+\n+  unsigned long ul1 = 42UL;\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios_base::showpos);\n+  np.put(oss.rdbuf(), oss, L' ', ul1);\n+  VERIFY( oss.str() == L\"42\" );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  unsigned long long ull1 = 31ULL;\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios_base::showpos);\n+  np.put(oss.rdbuf(), oss, L' ', ull1);\n+  VERIFY( oss.str() == L\"31\" );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f32351d58fa60596a5aa1e6e9530b9f3139fece0", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/2.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -54,31 +54,31 @@ void test02()\n   oss.str(empty);\n   oss.width(20);\n   oss.setf(ios_base::right, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', b0);\n+  np.put(oss.rdbuf(), oss, L'+', b0);\n   result1 = oss.str();\n   VERIFY( result1 == L\"+++++++++++++++++++0\" );\n \n   oss.str(empty);\n   oss.width(20);\n   oss.setf(ios_base::left, ios_base::adjustfield);\n   oss.setf(ios_base::boolalpha);\n-  np.put(oss.rdbuf(), oss, '+', b1);\n+  np.put(oss.rdbuf(), oss, L'+', b1);\n   result2 = oss.str();\n   VERIFY( result2 == L\"true++++++++++++++++\" );\n \n   // unsigned long, in a locale that does not group\n   oss.imbue(loc_c);\n   oss.str(empty);\n   oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', ul1);\n+  np.put(oss.rdbuf(), oss, L'+', ul1);\n   result1 = oss.str();\n   VERIFY( result1 == L\"1294967294\" );\n \n   oss.str(empty);\n   oss.clear();\n   oss.width(20);\n   oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', ul2);\n+  np.put(oss.rdbuf(), oss, L'+', ul2);\n   result1 = oss.str();\n   VERIFY( result1 == L\"0+++++++++++++++++++\" );\n }\n@@ -88,5 +88,3 @@ int main()\n   test02();\n   return 0;\n }\n-\n-"}, {"sha": "6a96202cd56953f7db6210f80fc2bfd109fd8c2f", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/3.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -53,15 +53,15 @@ void test03()\n   // long, in a locale that expects grouping\n   oss.str(empty);\n   oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', l1);\n+  np.put(oss.rdbuf(), oss, L'+', l1);\n   result1 = oss.str();\n   VERIFY( result1 == L\"2,147,483,647\" );\n \n   oss.str(empty);\n   oss.clear();\n   oss.width(20);\n   oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', l2);\n+  np.put(oss.rdbuf(), oss, L'+', l2);\n   result1 = oss.str();\n   VERIFY( result1 == L\"-2,147,483,647++++++\" );\n }\n@@ -71,5 +71,3 @@ int main()\n   test03();\n   return 0;\n }\n-\n-"}, {"sha": "69a69f1a68beeb614f257db4b0b625cd4ecc6f13", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/4.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -53,31 +53,31 @@ void test04()\n   // 01 put(long)\n   const long l = 1798;\n   res = x;\n-  iter_type ret1 = tp.put(res.begin(), oss, ' ', l);\n+  iter_type ret1 = tp.put(res.begin(), oss, L' ', l);\n   wstring sanity1(res.begin(), ret1);\n   VERIFY( res == L\"1798xxxxxxxxxxxxxx\" );\n   VERIFY( sanity1 == L\"1798\" );\n \n   // 02 put(long double)\n   const long double ld = 1798.0;\n   res = x;\n-  iter_type ret2 = tp.put(res.begin(), oss, ' ', ld);\n+  iter_type ret2 = tp.put(res.begin(), oss, L' ', ld);\n   wstring sanity2(res.begin(), ret2);\n   VERIFY( res == L\"1798xxxxxxxxxxxxxx\" );\n   VERIFY( sanity2 == L\"1798\" );\n \n   // 03 put(bool)\n   bool b = 1;\n   res = x;\n-  iter_type ret3 = tp.put(res.begin(), oss, ' ', b);\n+  iter_type ret3 = tp.put(res.begin(), oss, L' ', b);\n   wstring sanity3(res.begin(), ret3);\n   VERIFY( res == L\"1xxxxxxxxxxxxxxxxx\" );\n   VERIFY( sanity3 == L\"1\" );\n \n   b = 0;\n   res = x;\n   oss.setf(ios_base::boolalpha);\n-  iter_type ret4 = tp.put(res.begin(), oss, ' ', b);\n+  iter_type ret4 = tp.put(res.begin(), oss, L' ', b);\n   wstring sanity4(res.begin(), ret4);\n   VERIFY( res == L\"falsexxxxxxxxxxxxx\" );\n   VERIFY( sanity4 == L\"false\" );\n@@ -87,7 +87,7 @@ void test04()\n   const void* cv = &ld;\n   res = x;\n   oss.setf(ios_base::fixed, ios_base::floatfield);\n-  iter_type ret5 = tp.put(res.begin(), oss, ' ', cv);\n+  iter_type ret5 = tp.put(res.begin(), oss, L' ', cv);\n   wstring sanity5(res.begin(), ret5);\n   VERIFY( sanity5.size() );\n   VERIFY( sanity5[1] == L'x' );\n@@ -98,5 +98,3 @@ int main()\n   test04();\n   return 0;\n }\n-\n-"}, {"sha": "8107aa19dfb9e7335fc94b675a0c6233a1c1b6c1", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/5.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -48,15 +48,15 @@ void test05()\n   oss.clear();\n   oss.setf(ios::showbase);\n   oss.setf(ios::hex, ios::basefield);\n-  np.put(oss.rdbuf(), oss, '+', l);\n+  np.put(oss.rdbuf(), oss, L'+', l);\n   result = oss.str();\n   VERIFY( result == L\"0\" );\n \n   oss.str(empty);\n   oss.clear();\n   oss.setf(ios::showbase);\n   oss.setf(ios::oct, ios::basefield);\n-  np.put(oss.rdbuf(), oss, '+', l);\n+  np.put(oss.rdbuf(), oss, L'+', l);\n   result = oss.str();\n   VERIFY( result == L\"0\" );\n }\n@@ -66,5 +66,3 @@ int main()\n   test05();\n   return 0;\n }\n-\n-"}, {"sha": "f324ca30676b1389c3b352f7b242cd3fd888d21a", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/6.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -38,13 +38,13 @@ void test01()\n \n   woss1.precision(-1);\n   woss1.setf(ios_base::fixed, ios_base::floatfield);\n-  np1.put(woss1.rdbuf(), woss1, '+', 30.5);\n+  np1.put(woss1.rdbuf(), woss1, L'+', 30.5);\n   result1 = woss1.str();\n   VERIFY( result1 == L\"30.500000\" );\n \n   woss2.precision(0);\n   woss2.setf(ios_base::scientific, ios_base::floatfield);\n-  np2.put(woss2.rdbuf(), woss2, '+', 1.0);\n+  np2.put(woss2.rdbuf(), woss2, L'+', 1.0);\n   result2 = woss2.str();\n   VERIFY( result2 == L\"1e+00\" );\n }"}, {"sha": "a1efe66ce2907d6ead7a364497694ec4990263e7", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/8.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea6ecb7464fd19e3981a6297a30ecc7981de4b2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F8.cc?ref=fea6ecb7464fd19e3981a6297a30ecc7981de4b2", "patch": "@@ -51,13 +51,13 @@ void test01()\n   long inum = 123;\n   double fnum = 123.456;\n \n-  np.put(oss.rdbuf(), oss, '+', inum);\n+  np.put(oss.rdbuf(), oss, L'+', inum);\n   result = oss.str();\n   VERIFY( result == L\"XYZ\" );\n \n   oss.clear();\n   oss.str(empty);\n-  np.put(oss.rdbuf(), oss, '+', fnum);\n+  np.put(oss.rdbuf(), oss, L'+', fnum);\n   result = oss.str();\n   VERIFY( result == L\"XYZ.ABC\" );\n }"}]}