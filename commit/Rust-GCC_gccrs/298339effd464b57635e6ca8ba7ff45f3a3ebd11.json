{"sha": "298339effd464b57635e6ca8ba7ff45f3a3ebd11", "node_id": "C_kwDOANBUbNoAKDI5ODMzOWVmZmQ0NjRiNTc2MzVlNmNhOGJhN2ZmNDVmM2EzZWJkMTE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-11-09T18:56:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-02T16:26:30Z"}, "message": "[Ada] Fix oversight in minor cleanup\n\ngcc/ada/\n\n\t* gcc-interface/trans.c (Call_to_gnu): Rename GNAT_NAME variable\n\tinto GNAT_SUBPROG to avoid later shadowing.", "tree": {"sha": "3fa1e30fb1effabf779493768dfe3e414276594b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa1e30fb1effabf779493768dfe3e414276594b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/298339effd464b57635e6ca8ba7ff45f3a3ebd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298339effd464b57635e6ca8ba7ff45f3a3ebd11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298339effd464b57635e6ca8ba7ff45f3a3ebd11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298339effd464b57635e6ca8ba7ff45f3a3ebd11/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e57389c511b645ce66581ab5aba5dff7ea831b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e57389c511b645ce66581ab5aba5dff7ea831b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e57389c511b645ce66581ab5aba5dff7ea831b"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "3d0820f170b00b04a6112e75829dbf48e451f17c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298339effd464b57635e6ca8ba7ff45f3a3ebd11/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298339effd464b57635e6ca8ba7ff45f3a3ebd11/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=298339effd464b57635e6ca8ba7ff45f3a3ebd11", "patch": "@@ -4453,14 +4453,14 @@ static tree\n Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t     atomic_acces_t atomic_access, bool atomic_sync)\n {\n-  const Node_Id gnat_name = Name (gnat_node);\n   const bool function_call = (Nkind (gnat_node) == N_Function_Call);\n   const bool returning_value = (function_call && !gnu_target);\n   /* The GCC node corresponding to the GNAT subprogram name.  This can either\n      be a FUNCTION_DECL node if we are dealing with a standard subprogram call,\n      or an indirect reference expression (an INDIRECT_REF node) pointing to a\n      subprogram.  */\n-  tree gnu_subprog = gnat_to_gnu (gnat_name);\n+  const Node_Id gnat_subprog = Name (gnat_node);\n+  tree gnu_subprog = gnat_to_gnu (gnat_subprog);\n   /* The FUNCTION_TYPE node giving the GCC type of the subprogram.  */\n   tree gnu_subprog_type = TREE_TYPE (gnu_subprog);\n   /* The return type of the FUNCTION_TYPE.  */\n@@ -4487,12 +4487,12 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n      explicit dereference.  In that case, get the list of formal args from the\n      type the access type is pointing to.  Otherwise, get the formals from the\n      entity being called.  */\n-  if (Nkind (gnat_name) == N_Explicit_Dereference)\n+  if (Nkind (gnat_subprog) == N_Explicit_Dereference)\n     {\n       const Entity_Id gnat_prefix_type\n-\t= Underlying_Type (Etype (Prefix (gnat_name)));\n+\t= Underlying_Type (Etype (Prefix (gnat_subprog)));\n \n-      gnat_formal = First_Formal_With_Extras (Etype (gnat_name));\n+      gnat_formal = First_Formal_With_Extras (Etype (gnat_subprog));\n       variadic = IN (Convention (gnat_prefix_type), Convention_C_Variadic);\n \n       /* If the access type doesn't require foreign-compatible representation,\n@@ -4502,7 +4502,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  && Can_Use_Internal_Rep (gnat_prefix_type);\n     }\n \n-  else if (Nkind (gnat_name) == N_Attribute_Reference)\n+  else if (Nkind (gnat_subprog) == N_Attribute_Reference)\n     {\n       /* Assume here that this must be 'Elab_Body or 'Elab_Spec.  */\n       gnat_formal = Empty;\n@@ -4512,15 +4512,15 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \n   else\n     {\n-      gcc_checking_assert (Is_Entity_Name (gnat_name));\n+      gcc_checking_assert (Is_Entity_Name (gnat_subprog));\n \n-      gnat_formal = First_Formal_With_Extras (Entity (gnat_name));\n-      variadic = IN (Convention (Entity (gnat_name)), Convention_C_Variadic);\n+      gnat_formal = First_Formal_With_Extras (Entity (gnat_subprog));\n+      variadic = IN (Convention (Entity (gnat_subprog)), Convention_C_Variadic);\n       by_descriptor = false;\n \n       /* If we are calling a stubbed function, then raise Program_Error, but\n \t elaborate all our args first.  */\n-      if (Convention (Entity (gnat_name)) == Convention_Stubbed)\n+      if (Convention (Entity (gnat_subprog)) == Convention_Stubbed)\n \t{\n \t  tree call_expr = build_call_raise (PE_Stubbed_Subprogram_Called,\n \t\t\t\t\t     gnat_node, N_Raise_Program_Error);\n@@ -4769,8 +4769,8 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  /* Do not initialize it for the _Init parameter of an initialization\n \t     procedure since no data is meant to be passed in.  */\n \t  if (Ekind (gnat_formal) == E_Out_Parameter\n-\t      && Is_Entity_Name (gnat_name)\n-\t      && Is_Init_Proc (Entity (gnat_name)))\n+\t      && Is_Entity_Name (gnat_subprog)\n+\t      && Is_Init_Proc (Entity (gnat_subprog)))\n \t    gnu_name = gnu_temp = create_temporary (\"A\", TREE_TYPE (gnu_name));\n \n \t  /* Initialize it on the fly like for an implicit temporary in the\n@@ -5101,10 +5101,10 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n       if (function_call)\n \tgnu_cico_list = TREE_CHAIN (gnu_cico_list);\n \n-      if (Nkind (gnat_name) == N_Explicit_Dereference)\n-\tgnat_formal = First_Formal_With_Extras (Etype (gnat_name));\n+      if (Nkind (gnat_subprog) == N_Explicit_Dereference)\n+\tgnat_formal = First_Formal_With_Extras (Etype (gnat_subprog));\n       else\n-\tgnat_formal = First_Formal_With_Extras (Entity (gnat_name));\n+\tgnat_formal = First_Formal_With_Extras (Entity (gnat_subprog));\n \n       for (gnat_actual = First_Actual (gnat_node);\n \t   Present (gnat_actual);"}]}