{"sha": "07d0cbddd457e587413cc203a724165676855099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdkMGNiZGRkNDU3ZTU4NzQxM2NjMjAzYTcyNDE2NTY3Njg1NTA5OQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-08-18T18:09:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-08-18T18:09:33Z"}, "message": "(distribute_notes...\n\n(distribute_notes, case REG_UNUSED): Ignore notes when\nfrom_insn != i3 only if the notes would remain as REG_UNUSED notes.\n\nFrom-SVN: r7942", "tree": {"sha": "8dc5f8fa7ec9d2fed443ac00751555e824560565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc5f8fa7ec9d2fed443ac00751555e824560565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07d0cbddd457e587413cc203a724165676855099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d0cbddd457e587413cc203a724165676855099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d0cbddd457e587413cc203a724165676855099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d0cbddd457e587413cc203a724165676855099/comments", "author": null, "committer": null, "parents": [{"sha": "0179115349c9520a592a9981716ccbf5062169e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0179115349c9520a592a9981716ccbf5062169e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0179115349c9520a592a9981716ccbf5062169e6"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "a4913aec2471cc166c2583bac5ac50d185b32257", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d0cbddd457e587413cc203a724165676855099/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d0cbddd457e587413cc203a724165676855099/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=07d0cbddd457e587413cc203a724165676855099", "patch": "@@ -10342,10 +10342,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n       switch (REG_NOTE_KIND (note))\n \t{\n \tcase REG_UNUSED:\n-\t  /* If this note is from any insn other than i3, then we have no\n-\t     use for it, and must ignore it.\n-\n-\t     Any clobbers for i3 may still exist, and so we must process\n+\t  /* Any clobbers for i3 may still exist, and so we must process\n \t     REG_UNUSED notes from that insn.\n \n \t     Any clobbers from i2 or i1 can only exist if they were added by\n@@ -10355,14 +10352,18 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t     if it is for the same register as the original i3 dest.\n \t     In that case, we will notice that the register is set in i3,\n \t     and then add a REG_UNUSED note for the destination of i3, which\n-\t     is wrong.  */\n-\t  if (from_insn != i3)\n-\t    break;\n+\t     is wrong.  However, it is possible to have REG_UNUSED notes from\n+\t     i2 or i1 for register which were both used and clobbered, so\n+\t     we keep notes from i2 or i1 if they will turn into REG_DEAD\n+\t     notes.  */\n \n \t  /* If this register is set or clobbered in I3, put the note there\n \t     unless there is one already.  */\n-\t  else if (reg_set_p (XEXP (note, 0), PATTERN (i3)))\n+\t  if (reg_set_p (XEXP (note, 0), PATTERN (i3)))\n \t    {\n+\t      if (from_insn != i3)\n+\t\tbreak;\n+\n \t      if (! (GET_CODE (XEXP (note, 0)) == REG\n \t\t     ? find_regno_note (i3, REG_UNUSED, REGNO (XEXP (note, 0)))\n \t\t     : find_reg_note (i3, REG_UNUSED, XEXP (note, 0))))"}]}