{"sha": "aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2YTczYjlkYTkxYmZjZmQ1ZDlkMTI5YTY2YWVjZTFmNDAzMWU1NA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2010-06-01T09:54:08Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2010-06-01T09:54:08Z"}, "message": "acinclude.m4, [...]: Support Bionic C library.\n\n\t* acinclude.m4, configure.host: Support Bionic C library.\n\t* configure: Regenerate.\n\t* config/os/bionic/ctype_base.h, config/os/bionic/ctype_inline.h,\n\t* config/os/bionic/ctype_noincline.h, config/os/bionic/os_defines.h:\n\tNew files, based on config/os/newlib/*.\n\nFrom-SVN: r160096", "tree": {"sha": "0ede220f289269439547fce9f27f0901c1391261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ede220f289269439547fce9f27f0901c1391261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/comments", "author": null, "committer": null, "parents": [{"sha": "d47a371cf337c71e0b9b14e59749a7aef9a243c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47a371cf337c71e0b9b14e59749a7aef9a243c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47a371cf337c71e0b9b14e59749a7aef9a243c7"}], "stats": {"total": 317, "additions": 307, "deletions": 10}, "files": [{"sha": "03cf54fdb55895cadec8bb34d2ece9d16dbb8184", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -1,3 +1,11 @@\n+2010-06-01  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* acinclude.m4, configure.host: Support Bionic C library.\n+\t* configure: Regenerate.\n+\t* config/os/bionic/ctype_base.h, config/os/bionic/ctype_inline.h,\n+\t* config/os/bionic/ctype_noincline.h, config/os/bionic/os_defines.h:\n+\tNew files, based on config/os/newlib/*.\n+\n 2010-06-01  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/arm/t-linux-androideabi: New."}, {"sha": "db6323d64aebcf5bee742481a59dd9b4cf2828da", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -95,7 +95,7 @@ AC_DEFUN([GLIBCXX_CONFIGURE], [\n   ## (Right now, this only matters for enable_wchar_t, but nothing prevents\n   ## other macros from doing the same.  This should be automated.)  -pme\n \n-  # Check for uClibc since Linux platforms use different configuration\n+  # Check for C library flavor since Linux platforms use different configuration\n   # directories depending on the C library in use.\n   AC_EGREP_CPP([_using_uclibc], [\n   #include <stdio.h>\n@@ -104,6 +104,13 @@ AC_DEFUN([GLIBCXX_CONFIGURE], [\n   #endif\n   ], uclibc=yes, uclibc=no)\n \n+  AC_EGREP_CPP([_using_bionic], [\n+  #include <stdio.h>\n+  #if __BIONIC__\n+    _using_bionic\n+  #endif\n+  ], bionic=yes, bionic=no)\n+\n   # Find platform-specific directories containing configuration info.\n   # Also possibly modify flags used elsewhere, as needed by the platform.\n   GLIBCXX_CHECK_HOST"}, {"sha": "15f00636d3eb51025e7ab991da47efd14a40905b", "filename": "libstdc++-v3/config/os/bionic/ctype_base.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_base.h?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -0,0 +1,57 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// Information as gleaned from /usr/include/ctype.h, for solaris2.5.1\n+\n+// Support for Solaris 2.5.1\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n+  struct ctype_base\n+  {\n+    // Non-standard typedefs.\n+    typedef const int* \t\t__to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef char \t\tmask;\n+    static const mask upper    \t= _U;\n+    static const mask lower \t= _L;\n+    static const mask alpha \t= _U | _L;\n+    static const mask digit \t= _N;\n+    static const mask xdigit \t= _X | _N;\n+    static const mask space \t= _S;\n+    static const mask print \t= _P | _U | _L | _N | _B;\n+    static const mask graph \t= _P | _U | _L | _N;\n+    static const mask cntrl \t= _C;\n+    static const mask punct \t= _P;\n+    static const mask alnum \t= _U | _L | _N;\n+  };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "2c88eb66d640704dc64f950cf98e4e0ebbe1e4b5", "filename": "libstdc++-v3/config/os/bionic/ctype_inline.h", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -0,0 +1,71 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ctype_inline.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    while (__low < __high)\n+      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high && !this->is(__m, *__low))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high && this->is(__m, *__low) != 0)\n+      ++__low;\n+    return __low;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "55eecd8716e3f9da00bbb7750c5da91432a5a46c", "filename": "libstdc++-v3/config/os/bionic/ctype_noninline.h", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_noninline.h?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -0,0 +1,98 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ctype_noninline.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// Information as gleaned from /usr/include/ctype.h\n+\n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  { return _ctype_ + 1; }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  {\n+    int __x = __c;\n+    return (this->is(ctype_base::lower, __c) ? (__x - 'a' + 'A') : __x);\n+  }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = this->do_toupper(*__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  {\n+    int __x = __c;\n+    return (this->is(ctype_base::upper, __c) ? (__x - 'A' + 'a') : __x);\n+  }\n+\n+  const char*\n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = this->do_tolower(*__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+"}, {"sha": "832592acd4902755a64bd9f9b5b9be9629a4a883", "filename": "libstdc++-v3/config/os/bionic/os_defines.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fos_defines.h?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -0,0 +1,36 @@\n+// Specific definitions for Bionic  -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file os_defines.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+#endif"}, {"sha": "53f0ce3a7f0c0bf14000ef79c1a06145302e2e22", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -5186,7 +5186,7 @@ fi\n   ## (Right now, this only matters for enable_wchar_t, but nothing prevents\n   ## other macros from doing the same.  This should be automated.)  -pme\n \n-  # Check for uClibc since Linux platforms use different configuration\n+  # Check for C library flavor since Linux platforms use different configuration\n   # directories depending on the C library in use.\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n@@ -5206,6 +5206,24 @@ fi\n rm -f conftest*\n \n \n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+  #include <stdio.h>\n+  #if __BIONIC__\n+    _using_bionic\n+  #endif\n+\n+_ACEOF\n+if (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n+  $EGREP \"_using_bionic\" >/dev/null 2>&1; then :\n+  bionic=yes\n+else\n+  bionic=no\n+fi\n+rm -f conftest*\n+\n+\n   # Find platform-specific directories containing configuration info.\n   # Also possibly modify flags used elsewhere, as needed by the platform.\n \n@@ -11442,7 +11460,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11445 \"configure\"\n+#line 11463 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11548,7 +11566,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11551 \"configure\"\n+#line 11569 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14888,7 +14906,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14891 \"configure\"\n+#line 14909 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15256,7 +15274,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15259 \"configure\"\n+#line 15277 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15293,7 +15311,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15296 \"configure\"\n+#line 15314 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15330,7 +15348,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15333 \"configure\"\n+#line 15351 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15368,7 +15386,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15371 \"configure\"\n+#line 15389 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15444,7 +15462,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15447 \"configure\"\n+#line 15465 \"configure\"\n int main()\n {\n   _Decimal32 d1;"}, {"sha": "5cd2a217b6cc9a66be95c68ec4e6fd7a6a66be33", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6a73b9da91bfcfd5d9d129a66aece1f4031e54/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=aa6a73b9da91bfcfd5d9d129a66aece1f4031e54", "patch": "@@ -238,6 +238,8 @@ case \"${host_os}\" in\n   gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n     if [ \"$uclibc\" = \"yes\" ]; then\n       os_include_dir=\"os/uclibc\"\n+    elif [ \"$bionic\" = \"yes\" ]; then\n+      os_include_dir=\"os/bionic\"\n     else\n       os_include_dir=\"os/gnu-linux\"\n     fi"}]}