{"sha": "8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0ZWIzNGJlNjc0YzlhMGYzZjhmZTllZDIyNTE2YTVjNjIyYWFiYw==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2003-10-23T09:58:59Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2003-10-23T09:58:59Z"}, "message": "adaint.c (w32_epoch_offset): Define static const at file level.\n\n\t* ada/adaint.c (w32_epoch_offset): Define static const at file\n\tlevel.\n\t(win32_filetime): Replace offset with w32_epoch_offset. Use NULL\n\trather than t_create, t_access in call to GetFileTime. Use union\n\tto convert between FILETIME and  unsigned long long.\n\t(__gnat_file_time_name): Test for invalid file handle.\n\t(__gnat_set_filetime_name): Support win32 targets using\n\tw32api SetFileTime.\n\nFrom-SVN: r72840", "tree": {"sha": "8e3a6c1b0c4341cf207bd4235717ef741a10680a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e3a6c1b0c4341cf207bd4235717ef741a10680a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc/comments", "author": null, "committer": null, "parents": [{"sha": "448ec26cf73c72bc4293f99d56ac465b0d48f11d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448ec26cf73c72bc4293f99d56ac465b0d48f11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448ec26cf73c72bc4293f99d56ac465b0d48f11d"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "8373bfc36c30b48f2badf5d977b56eb714be2619", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc", "patch": "@@ -1,3 +1,14 @@\n+2003-10-23  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* ada/adaint.c (w32_epoch_offset): Define static const at file\n+\tlevel.\n+\t(win32_filetime): Replace offset with w32_epoch_offset. Use NULL\n+\trather than t_create, t_access in call to GetFileTime. Use union\n+\tto convert between FILETIME and  unsigned long long.\n+\t(__gnat_file_time_name): Test for invalid file handle.\n+\t(__gnat_set_filetime_name): Support win32 targets using\n+\tw32api SetFileTime.\n+\n 2003-10-22  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* sysdep.c: Include conio.h if __MINGW32__ and !OLD_MINGW."}, {"sha": "7502057642585a9915774c0fbe4c440e5d06b86a", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=8f4eb34be674c9a0f3f8fe9ed22516a5c622aabc", "patch": "@@ -792,6 +792,8 @@ __gnat_readdir_is_thread_safe ()\n }\n \n #ifdef _WIN32\n+/* Number of seconds between <Jan 1st 1601> and <Jan 1st 1970>.  */\n+static const unsigned long long w32_epoch_offset = 11644473600ULL;\n \n /* Returns the file modification timestamp using Win32 routines which are\n    immune against daylight saving time change. It is in fact not possible to\n@@ -801,27 +803,20 @@ __gnat_readdir_is_thread_safe ()\n static time_t\n win32_filetime (HANDLE h)\n {\n-  BOOL res;\n-  FILETIME t_create;\n-  FILETIME t_access;\n-  FILETIME t_write;\n-  unsigned long long timestamp;\n-\n-  /* Number of seconds between <Jan 1st 1601> and <Jan 1st 1970>.  */\n-  unsigned long long offset = 11644473600;\n+  union\n+  {\n+    FILETIME ft_time;\n+    unsigned long long ull_time;\n+  } t_write;\n \n   /* GetFileTime returns FILETIME data which are the number of 100 nanosecs\n      since <Jan 1st 1601>. This function must return the number of seconds\n      since <Jan 1st 1970>.  */\n \n-  res = GetFileTime (h, &t_create, &t_access, &t_write);\n-\n-  timestamp = (((long long) t_write.dwHighDateTime << 32)\n-\t       + t_write.dwLowDateTime);\n-\n-  timestamp = timestamp / 10000000 - offset;\n-\n-  return (time_t) timestamp;\n+  if (GetFileTime (h, NULL, NULL, &t_write.ft_time))\n+    return (time_t) (t_write.ull_time / 10000000ULL\n+\t\t     - w32_epoch_offset);\n+  return (time_t) 0;\n }\n #endif\n \n@@ -838,10 +833,15 @@ __gnat_file_time_name (char *name)\n   return ret;\n \n #elif defined (_WIN32)\n+  time_t ret = 0;\n   HANDLE h = CreateFile (name, GENERIC_READ, FILE_SHARE_READ, 0,\n \t\t\t OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0);\n-  time_t ret = win32_filetime (h);\n-  CloseHandle (h);\n+ \n+  if (h != INVALID_HANDLE_VALUE)\n+    {\n+      ret = win32_filetime (h);\n+      CloseHandle (h);\n+    }\n   return ret;\n #else\n   struct stat statbuf;\n@@ -951,11 +951,31 @@ __gnat_file_time_fd (int fd)\n void\n __gnat_set_file_time_name (char *name, time_t time_stamp)\n {\n-#if defined (__EMX__) || defined (MSDOS) || defined (_WIN32) \\\n-    || defined (__vxworks)\n+#if defined (__EMX__) || defined (MSDOS) || defined (__vxworks)\n \n /* Code to implement __gnat_set_file_time_name for these systems.  */\n \n+#elif defined (_WIN32)\n+  union\n+  {\n+    FILETIME ft_time;\n+    unsigned long long ull_time;\n+  } t_write;\n+  \n+  HANDLE h  = CreateFile (name, GENERIC_WRITE, FILE_SHARE_WRITE, NULL,\n+\t\t\t  OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS,\n+\t\t\t  NULL);\n+  if (h == INVALID_HANDLE_VALUE)\n+    return;\n+  /* Add number of seconds between <Jan 1st 1601> and <Jan 1st 1970> */\n+  t_write.ull_time = ((unsigned long long)time_stamp + w32_epoch_offset);\n+  /*  Convert to 100 nanosecond units  */\n+  t_write.ull_time *= 10000000ULL;\n+\n+  SetFileTime(h, NULL, NULL, &t_write.ft_time);\n+  CloseHandle (h);\n+  return;\n+\n #elif defined (VMS)\n   struct FAB fab;\n   struct NAM nam;"}]}