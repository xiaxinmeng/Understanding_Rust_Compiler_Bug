{"sha": "4e2bae26bfa2eab9678a125a7701291fe3dd7153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyYmFlMjZiZmEyZWFiOTY3OGExMjVhNzcwMTI5MWZlM2RkNzE1Mw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-20T10:18:58Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-20T10:18:58Z"}, "message": "re PR other/30824 (-Werror -Wfatal-errors should stop after the first warning)\n\n2007-02-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n            DJ Delorie <dj@redhat.com>\n\n\tPR other/30824\n\t* diagnostic.c (diagnostic_count_diagnostic): Move -Werror\n\tlogic to...\n\t(diagnostic_report_diagnostic): ... here, and turn them into\n\treal errors. If warnings are inhibited, no need to do\n\tanything.\n\ntestsuite/\n\t* gcc.dg/Wfatal.c: New.\n\t* gcc.dg/Wfatal-2.c: New.\n\t* gcc.dg/Werror-1.c: Adjust expectations.\n\t* gcc.dg/Werror-5.c: Likewise.\n\t* gcc.dg/Werror-7.c: Likewise.\n\t* gcc.dg/Werror-10.c: Likewise.\n\t* gcc.dg/Werror-11.c: Likewise.\n\nCo-Authored-By: DJ Delorie <dj@redhat.com>\n\nFrom-SVN: r122159", "tree": {"sha": "fa32faad84393dfa336f79b8f5cfeab5bd3aad7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa32faad84393dfa336f79b8f5cfeab5bd3aad7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e2bae26bfa2eab9678a125a7701291fe3dd7153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2bae26bfa2eab9678a125a7701291fe3dd7153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2bae26bfa2eab9678a125a7701291fe3dd7153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2bae26bfa2eab9678a125a7701291fe3dd7153/comments", "author": null, "committer": null, "parents": [{"sha": "6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b"}], "stats": {"total": 108, "additions": 81, "deletions": 27}, "files": [{"sha": "ebceb404f1a7cf48b5d0049a1a919d59e14d3871", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -1,3 +1,11 @@\n+2007-02-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+            DJ Delorie <dj@redhat.com>\n+\n+\tPR other/30824\n+\t* diagnostic.c (diagnostic_count_diagnostic): Move -Werror logic to...\n+\t(diagnostic_report_diagnostic): ... here, and turn them into real\n+\terrors. If warnings are inhibited, no need to do anything.\n+\n 2007-02-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (expm1xf2): Reorder insn sequence for"}, {"sha": "2199c7d24dbf98f7f34ef66af276fd55e35813e4", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -202,27 +202,9 @@ diagnostic_count_diagnostic (diagnostic_context *context,\n       break;\n \n     case DK_WARNING:\n-      if (!diagnostic_report_warnings_p ())\n-        return false;\n-\n-      /* -Werror can reclassify warnings as errors, but\n-\t classify_diagnostic can reclassify it back to a warning.  The\n-\t second part of this test detects that case.  */\n-      if (!context->warning_as_error_requested\n-\t  || (context->classify_diagnostic[diagnostic->option_index]\n-\t      == DK_WARNING))\n-        {\n-          ++diagnostic_kind_count (context, DK_WARNING);\n-          break;\n-        }\n-      else if (context->issue_warnings_are_errors_message)\n-        {\n-\t  pp_verbatim (context->printer,\n-                       \"%s: warnings being treated as errors\\n\", progname);\n-          context->issue_warnings_are_errors_message = false;\n-        }\n+      ++diagnostic_kind_count (context, DK_WARNING);\n+      break;\n \n-      /* And fall through.  */\n     case DK_ERROR:\n       ++diagnostic_kind_count (context, DK_ERROR);\n       break;\n@@ -362,6 +344,14 @@ void\n diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n+  bool maybe_print_warnings_as_errors_message = false;\n+\n+  /* Give preference to being able to inhibit warnings, before they\n+     get reclassified to something else.  */\n+  if (diagnostic->kind == DK_WARNING \n+      && !diagnostic_report_warnings_p ())\n+    return;\n+  \n   if (context->lock > 0)\n     {\n       /* If we're reporting an ICE in the middle of some other error,\n@@ -373,6 +363,17 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \terror_recursion (context);\n     }\n \n+  /* If the user requested that warnings be treated as errors, so be\n+     it.  Note that we do this before the next block so that\n+     individual warnings can be overridden back to warnings with\n+     -Wno-error=*.  */\n+  if (context->warning_as_error_requested\n+      && diagnostic->kind == DK_WARNING)\n+    {\n+      diagnostic->kind = DK_ERROR;\n+      maybe_print_warnings_as_errors_message = true;\n+    }\n+  \n   if (diagnostic->option_index)\n     {\n       /* This tests if the user provided the appropriate -Wfoo or\n@@ -382,13 +383,26 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       /* This tests if the user provided the appropriate -Werror=foo\n \t option.  */\n       if (context->classify_diagnostic[diagnostic->option_index] != DK_UNSPECIFIED)\n-\tdiagnostic->kind = context->classify_diagnostic[diagnostic->option_index];\n+\t{\n+\t  diagnostic->kind = context->classify_diagnostic[diagnostic->option_index];\n+\t  maybe_print_warnings_as_errors_message = false;\n+\t}\n       /* This allows for future extensions, like temporarily disabling\n \t warnings for ranges of source code.  */\n       if (diagnostic->kind == DK_IGNORED)\n \treturn;\n     }\n \n+  /* If we changed the kind due to -Werror, and didn't override it, we\n+     need to print this message.  */\n+  if (context->issue_warnings_are_errors_message\n+      && maybe_print_warnings_as_errors_message)\n+    {\n+      pp_verbatim (context->printer,\n+\t\t   \"%s: warnings being treated as errors\\n\", progname);\n+      context->issue_warnings_are_errors_message = false;\n+    }\n+\n   context->lock++;\n \n   if (diagnostic_count_diagnostic (context, diagnostic))"}, {"sha": "b5f91c5e7ddce705174b19fe3435c8316c703768", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -1,3 +1,15 @@\n+2007-02-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+            DJ Delorie <dj@redhat.com>\n+\n+\tPR other/30824\n+\t* gcc.dg/Wfatal.c: New.\n+\t* gcc.dg/Wfatal-2.c: New.\n+\t* gcc.dg/Werror-1.c: Adjust expectations.\n+\t* gcc.dg/Werror-5.c: Likewise.\n+\t* gcc.dg/Werror-7.c: Likewise.\n+\t* gcc.dg/Werror-10.c: Likewise.\n+\t* gcc.dg/Werror-11.c: Likewise.\n+\n 2007-02-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/30522"}, {"sha": "33fc1d3583c2c44046cf57432044f8fc84457940", "filename": "gcc/testsuite/gcc.dg/Werror-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -9,7 +9,7 @@\n \n #pragma GCC diagnostic error \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n \n int i;\n "}, {"sha": "f564654513210bc557f6251ea920f10048d65115", "filename": "gcc/testsuite/gcc.dg/Werror-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -6,7 +6,7 @@\n \n #pragma GCC diagnostic error \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n \n int i;\n "}, {"sha": "0dea5faf6a88aa22c99809c9d66a5c0ba4b24f6d", "filename": "gcc/testsuite/gcc.dg/Werror-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -6,7 +6,7 @@\n \n #pragma GCC diagnostic warning \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n \n int i;\n "}, {"sha": "8a21593fbd87d0a7b407cd1beb6dc8e97e7b7c87", "filename": "gcc/testsuite/gcc.dg/Werror-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -4,13 +4,13 @@\n \n /* Make sure -Werror turns warnings in to errors.  */\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-warning \"warning: .* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \"error: .* will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "6a69fae4ded0e8c9b6142b2a4b41bb11a819d9e6", "filename": "gcc/testsuite/gcc.dg/Werror-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -4,7 +4,7 @@\n \n /* Make sure -Wno-error= overrides -Werror.  */\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-error \"error: .* attribute directive ignored\" } */\n \n int i;\n "}, {"sha": "cbb7c8e8ff8b56f99af0e72c6ecc3bf420c841a4", "filename": "gcc/testsuite/gcc.dg/Wfatal-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal-2.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Woverflow -Wdiv-by-zero -Werror -Wfatal-errors\" } */\n+#include <limits.h>\n+\n+int i = INT_MAX + 1; /* { dg-error \"integer overflow in expression\" } */\n+int k = 1 / 0; \n+int j = INT_MIN - 1;\n+/* { dg-warning \"being treated as errors\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"terminated due to -Wfatal-errors\" \"\" { target *-*-* } 0 } */"}, {"sha": "bb3efc81369a57d8419dd1bde277b9e80eaa26b1", "filename": "gcc/testsuite/gcc.dg/Wfatal.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2bae26bfa2eab9678a125a7701291fe3dd7153/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c?ref=4e2bae26bfa2eab9678a125a7701291fe3dd7153", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Woverflow -Werror=div-by-zero -Wfatal-errors\" } */\n+#include <limits.h>\n+\n+int i = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n+int k = 1 / 0; /* { dg-error \"division by zero\" } */\n+int j = INT_MIN - 1;\n+/* { dg-warning \"terminated due to -Wfatal-errors\" \"\" { target *-*-* } 0 } */\n+\n+\n+"}]}