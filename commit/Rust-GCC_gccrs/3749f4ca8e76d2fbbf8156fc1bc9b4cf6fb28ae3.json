{"sha": "3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0OWY0Y2E4ZTc2ZDJmYmJmODE1NmZjMWJjOWI0Y2Y2ZmIyOGFlMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-12-14T10:23:02Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-12-14T10:23:02Z"}, "message": "Avoid making shared rtl.\n\nFrom-SVN: r30910", "tree": {"sha": "5b25ce80639736ff67d68ae2e0056baae9571c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b25ce80639736ff67d68ae2e0056baae9571c98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3/comments", "author": null, "committer": null, "parents": [{"sha": "956568cd6bd01c0207dafc5277b5fb830f9c5f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956568cd6bd01c0207dafc5277b5fb830f9c5f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956568cd6bd01c0207dafc5277b5fb830f9c5f76"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "793005eef1da6894d6ce5b742f87e766a77a8792", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3", "patch": "@@ -1,3 +1,8 @@\n+1999-12-14  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* combine.c (combine_simplify_rtx): Don't make shared rtl.\n+\t(simplify_logical): Likewise.\n+\n 1999-12-14  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* cccp.c (INO_T_EQ): Disable inode-based optimization for Cygwin."}, {"sha": "5dc4fc8879b7e506aeafb0249a84299b9b5c49ee", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3749f4ca8e76d2fbbf8156fc1bc9b4cf6fb28ae3", "patch": "@@ -4190,7 +4190,8 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t\t\t gen_binary (MULT, mode,\n \t\t\t\t     XEXP (XEXP (x, 0), 0), XEXP (x, 1)),\n \t\t\t gen_binary (MULT, mode,\n-\t\t\t\t     XEXP (XEXP (x, 0), 1), XEXP (x, 1))));\n+\t\t\t\t     XEXP (XEXP (x, 0), 1),\n+\t\t\t\t     copy_rtx (XEXP (x, 1)))));\n \n \t  if (GET_CODE (x) != MULT)\n \t    return x;\n@@ -5199,7 +5200,8 @@ simplify_logical (x, last)\n \t  x = apply_distributive_law\n \t    (gen_binary (GET_CODE (op0), mode,\n \t\t\t gen_binary (AND, mode, XEXP (op0, 0), op1),\n-\t\t\t gen_binary (AND, mode, XEXP (op0, 1), op1)));\n+\t\t\t gen_binary (AND, mode, XEXP (op0, 1),\n+\t\t\t\t     copy_rtx (op1))));\n \t  if (GET_CODE (x) != AND)\n \t    return x;\n \t}\n@@ -5208,7 +5210,8 @@ simplify_logical (x, last)\n \treturn apply_distributive_law\n \t  (gen_binary (GET_CODE (op1), mode,\n \t\t       gen_binary (AND, mode, XEXP (op1, 0), op0),\n-\t\t       gen_binary (AND, mode, XEXP (op1, 1), op0)));\n+\t\t       gen_binary (AND, mode, XEXP (op1, 1),\n+\t\t\t\t   copy_rtx (op0))));\n \n       /* Similarly, taking advantage of the fact that\n \t (and (not A) (xor B C)) == (xor (ior A B) (ior A C))  */\n@@ -5217,13 +5220,14 @@ simplify_logical (x, last)\n \treturn apply_distributive_law\n \t  (gen_binary (XOR, mode,\n \t\t       gen_binary (IOR, mode, XEXP (op0, 0), XEXP (op1, 0)),\n-\t\t       gen_binary (IOR, mode, XEXP (op0, 0), XEXP (op1, 1))));\n+\t\t       gen_binary (IOR, mode, copy_rtx (XEXP (op0, 0)),\n+\t\t\t\t   XEXP (op1, 1))));\n \t\t\t\t\t\t\t    \n       else if (GET_CODE (op1) == NOT && GET_CODE (op0) == XOR)\n \treturn apply_distributive_law\n \t  (gen_binary (XOR, mode,\n \t\t       gen_binary (IOR, mode, XEXP (op1, 0), XEXP (op0, 0)),\n-\t\t       gen_binary (IOR, mode, XEXP (op1, 0), XEXP (op0, 1))));\n+\t\t       gen_binary (IOR, mode, copy_rtx (XEXP (op1, 0)), XEXP (op0, 1))));\n       break;\n \n     case IOR:\n@@ -5249,7 +5253,8 @@ simplify_logical (x, last)\n \t  x = apply_distributive_law\n \t    (gen_binary (AND, mode,\n \t\t\t gen_binary (IOR, mode, XEXP (op0, 0), op1),\n-\t\t\t gen_binary (IOR, mode, XEXP (op0, 1), op1)));\n+\t\t\t gen_binary (IOR, mode, XEXP (op0, 1),\n+\t\t\t\t     copy_rtx (op1))));\n \n \t  if (GET_CODE (x) != IOR)\n \t    return x;\n@@ -5260,7 +5265,8 @@ simplify_logical (x, last)\n \t  x = apply_distributive_law\n \t    (gen_binary (AND, mode,\n \t\t\t gen_binary (IOR, mode, XEXP (op1, 0), op0),\n-\t\t\t gen_binary (IOR, mode, XEXP (op1, 1), op0)));\n+\t\t\t gen_binary (IOR, mode, XEXP (op1, 1),\n+\t\t\t\t     copy_rtx (op0))));\n \n \t  if (GET_CODE (x) != IOR)\n \t    return x;"}]}