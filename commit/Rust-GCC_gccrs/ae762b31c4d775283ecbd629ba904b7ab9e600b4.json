{"sha": "ae762b31c4d775283ecbd629ba904b7ab9e600b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3NjJiMzFjNGQ3NzUyODNlY2JkNjI5YmE5MDRiN2FiOWU2MDBiNA==", "commit": {"author": {"name": "Sebastian Pop", "email": "s.pop@samsung.com", "date": "2015-02-26T13:56:39Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-02-26T13:56:39Z"}, "message": "re PR middle-end/65048 (ICE in add_phi_args_after_copy_edge, at tree-cfg.c)\n\n\tPR tree-optimization/65048\n\t* tree-ssa-threadupdate.c (valid_jump_thread_path): New.\n\t(thread_through_all_blocks): Call valid_jump_thread_path.\n\tRemove invalid FSM jump-thread paths.\n\n\tPR tree-optimization/65048\n\t* gcc.dg/tree-ssa/ssa-dom-thread-9.c: New.\n\nFrom-SVN: r221007", "tree": {"sha": "ce4b757be7776f3330ed6156248bb1ada1caf074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce4b757be7776f3330ed6156248bb1ada1caf074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae762b31c4d775283ecbd629ba904b7ab9e600b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae762b31c4d775283ecbd629ba904b7ab9e600b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae762b31c4d775283ecbd629ba904b7ab9e600b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae762b31c4d775283ecbd629ba904b7ab9e600b4/comments", "author": null, "committer": null, "parents": [{"sha": "db847fa8f2cca6139188b8dfa0a7064319b19193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db847fa8f2cca6139188b8dfa0a7064319b19193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db847fa8f2cca6139188b8dfa0a7064319b19193"}], "stats": {"total": 102, "additions": 96, "deletions": 6}, "files": [{"sha": "73ef79d4ea484bcf27ba4b836701dbcaf7655e4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae762b31c4d775283ecbd629ba904b7ab9e600b4", "patch": "@@ -1,3 +1,10 @@\n+2015-02-26  Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/65048\n+\t* tree-ssa-threadupdate.c (valid_jump_thread_path): New.\n+\t(thread_through_all_blocks): Call valid_jump_thread_path.\n+\tRemove invalid FSM jump-thread paths.\n+\n 2015-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* passes.c (ipa_write_summaries_1): Call lto_output_init_mode_table."}, {"sha": "f7854082264f8e4e240f85f2d82c5b16d16e0c86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae762b31c4d775283ecbd629ba904b7ab9e600b4", "patch": "@@ -1,3 +1,8 @@\n+2015-02-26  Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/65048\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-9.c: New.\n+\n 2015-02-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-dg.exp (cleanup-final-insns-dump): New procedure."}, {"sha": "6be42038bce6504d5371e060aa10dafb69bbe3e4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-9.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-9.c?ref=ae762b31c4d775283ecbd629ba904b7ab9e600b4", "patch": "@@ -0,0 +1,50 @@\n+/* PR 65048 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int a, b, c, d;\n+void fn (void);\n+\n+int\n+foo (x)\n+{\n+  switch (x)\n+    {\n+    case 'A':\n+      return 'T';\n+    case 'U':\n+      return 'A';\n+    }\n+}\n+\n+void\n+bar (int x, int y)\n+{\n+  switch (c)\n+    {\n+    case 'U':\n+      switch (x)\n+\t{\n+\tdefault:\n+\t  fn ();\n+\tcase 'G':\n+\t  switch (y)\n+\t    {\n+\t    case 'A':\n+\t      d = 7;\n+\t    }\n+\t}\n+    }\n+}\n+\n+void\n+baz (void)\n+{\n+  while (1)\n+    {\n+      a = foo ();\n+      b = foo ();\n+      bar (a, b);\n+    }\n+}\n+"}, {"sha": "7a41ab247b649c6b135355635ad10e8c7c73ae16", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae762b31c4d775283ecbd629ba904b7ab9e600b4/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=ae762b31c4d775283ecbd629ba904b7ab9e600b4", "patch": "@@ -2473,6 +2473,21 @@ duplicate_seme_region (edge entry, edge exit,\n   return true;\n }\n \n+/* Return true when PATH is a valid jump-thread path.  */\n+\n+static bool\n+valid_jump_thread_path (vec<jump_thread_edge *> *path)\n+{\n+  unsigned len = path->length ();\n+\n+  /* Check that the path is connected.  */\n+  for (unsigned int j = 0; j < len - 1; j++)\n+    if ((*path)[j]->e->dest != (*path)[j+1]->e->src)\n+      return false;\n+\n+  return true;\n+}\n+\n /* Walk through all blocks and thread incoming edges to the appropriate\n    outgoing edge for each edge pair recorded in THREADED_EDGES.\n \n@@ -2505,12 +2520,25 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n       vec<jump_thread_edge *> *path = paths[i];\n       edge entry = (*path)[0]->e;\n \n-      if ((*path)[0]->type != EDGE_FSM_THREAD\n-\t  /* Do not jump-thread twice from the same block.  */\n-\t  || bitmap_bit_p (threaded_blocks, entry->src->index)) {\n-\ti++;\n-\tcontinue;\n-      }\n+      /* Only code-generate FSM jump-threads in this loop.  */\n+      if ((*path)[0]->type != EDGE_FSM_THREAD)\n+\t{\n+\t  i++;\n+\t  continue;\n+\t}\n+\n+      /* Do not jump-thread twice from the same block.  */\n+      if (bitmap_bit_p (threaded_blocks, entry->src->index)\n+\t  /* Verify that the jump thread path is still valid: a\n+\t     previous jump-thread may have changed the CFG, and\n+\t     invalidated the current path.  */\n+\t  || !valid_jump_thread_path (path))\n+\t{\n+\t  /* Remove invalid FSM jump-thread paths.  */\n+\t  delete_jump_thread_path (path);\n+\t  paths.unordered_remove (i);\n+\t  continue;\n+\t}\n \n       unsigned len = path->length ();\n       edge exit = (*path)[len - 1]->e;"}]}