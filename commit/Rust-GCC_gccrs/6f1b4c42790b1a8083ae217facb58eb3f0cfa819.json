{"sha": "6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxYjRjNDI3OTBiMWE4MDgzYWUyMTdmYWNiNThlYjNmMGNmYTgxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-07-09T11:05:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-07-09T11:05:23Z"}, "message": "pt.c (do_decl_instantiation): Downgrade duplicate instantiation errors to pedwarn.\n\n\t* pt.c (do_decl_instantiation): Downgrade duplicate instantiation\n\terrors to pedwarn.\n\t* typeck.c (comptypes): Simplify C code in look_hard.\n\t* xref.c (PALLOC): Use xcalloc, not calloc.\n\t(SALLOC): Use xmalloc, not malloc.\n\t* rtti.c (synthesize_tinfo_fn): Add missing call to pop_momentary.\n\t* search.c (note_debug_info_needed): Don't search if WRITE_SYMBOLS\n\tis NO_DEBUG.\n\t* decl.c (duplicate_decls): If a redeclaration doesn't match the\n\tinitial declaration, then don't save the inline info and by all\n\tmeans don't mark the function as a builtin function.\n\t* decl.c (lookup_name_real): Set NONCLASS to 1 if\n\tCURRENT_CLASS_TYPE is 0.\n\t* class.c (duplicate_tag_error): Set TYPE_NONCOPIED_PARTS to\n\tNULL_TREE.\n\nFrom-SVN: r28044", "tree": {"sha": "f2f5e66b69e7e045db05f19c706201f1b67d06f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2f5e66b69e7e045db05f19c706201f1b67d06f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/comments", "author": null, "committer": null, "parents": [{"sha": "22b452e755aa611d40f7c9317686ce50ce5c6fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b452e755aa611d40f7c9317686ce50ce5c6fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b452e755aa611d40f7c9317686ce50ce5c6fff"}], "stats": {"total": 71, "additions": 52, "deletions": 19}, "files": [{"sha": "442e8531fa707a6833c9d95466153feae76c4ca5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -1,3 +1,30 @@\n+1999-07-09  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (do_decl_instantiation): Downgrade duplicate instantiation\n+\terrors to pedwarn.\n+\n+1999-07-09  Michael Tiemann  <tiemann@happy.cygnus.com>\n+\n+\t* typeck.c (comptypes): Simplify C code in look_hard.\n+\n+\t* xref.c (PALLOC): Use xcalloc, not calloc.\n+\t(SALLOC): Use xmalloc, not malloc.\n+\n+\t* rtti.c (synthesize_tinfo_fn): Add missing call to pop_momentary.\n+\n+\t* search.c (note_debug_info_needed): Don't search if WRITE_SYMBOLS\n+\tis NO_DEBUG.\n+\n+\t* decl.c (duplicate_decls): If a redeclaration doesn't match the\n+\tinitial declaration, then don't save the inline info and by all\n+\tmeans don't mark the function as a builtin function.\n+\n+\t* decl.c (lookup_name_real): Set NONCLASS to 1 if \n+\tCURRENT_CLASS_TYPE is 0.\n+\n+\t* class.c (duplicate_tag_error): Set TYPE_NONCOPIED_PARTS to\n+\tNULL_TREE.\n+\n Wed Jul  7 01:26:47 1999  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n \t* decl2.c (mark_vtable_entries): Fix check for rtti offset."}, {"sha": "4fcb2fd4216e820db0498af7b6936487e8bf2e9b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -2146,6 +2146,7 @@ duplicate_tag_error (t)\n   TYPE_METHODS (t) = NULL_TREE;\n   TYPE_VFIELD (t) = NULL_TREE;\n   TYPE_CONTEXT (t) = NULL_TREE;\n+  TYPE_NONCOPIED_PARTS (t) = NULL_TREE;\n }\n \n /* finish up all new vtables.  */\n@@ -4186,7 +4187,7 @@ finish_struct (t, attributes, warn_anon)\n     {\n       finish_struct_methods (t);\n       TYPE_SIZE (t) = integer_zero_node;\n-    }      \n+    }\n   else\n     finish_struct_1 (t, warn_anon);\n "}, {"sha": "597a2ea571820c49a5e42905bab47740d8ec93e6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -3698,15 +3698,17 @@ duplicate_decls (newdecl, olddecl)\n \t}\n       if (! types_match || new_defines_function)\n \t{\n-\t  /* These need to be copied so that the names are available.  */\n+\t  /* These need to be copied so that the names are available.\n+\t     Note that if the types do match, we'll preserve inline\n+\t     info and other bits, but if not, we won't.  */\n \t  DECL_ARGUMENTS (olddecl) = DECL_ARGUMENTS (newdecl);\n \t  DECL_RESULT (olddecl) = DECL_RESULT (newdecl);\n \t}\n       if (new_defines_function)\n \t/* If defining a function declared with other language\n \t   linkage, use the previously declared language linkage.  */\n \tDECL_LANGUAGE (newdecl) = DECL_LANGUAGE (olddecl);\n-      else\n+      else if (types_match)\n \t{\n \t  /* If redeclaring a builtin function, and not a definition,\n \t     it stays built in.  */\n@@ -5858,6 +5860,10 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n     }\n \n   /* First, look in non-namespace scopes.  */\n+\n+  if (current_class_type == NULL_TREE)\n+    nonclass = 1;\n+\n   for (t = IDENTIFIER_BINDING (name); t; t = TREE_CHAIN (t))\n     {\n       tree binding;"}, {"sha": "de3491a16f68ddfc5896739de5557fd146c0e772", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -696,7 +696,8 @@ emit_base_init (t, immediately)\n }\n \n /* Check that all fields are properly initialized after\n-   an assignment to `this'.  */\n+   an assignment to `this'.  Called only when such an assignment\n+   is actually noted.  */\n \n void\n check_base_init (t)"}, {"sha": "d591c46a5259687aaf0c4252baeb7b10258dd3db", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -8952,8 +8952,8 @@ do_decl_instantiation (declspecs, declarator, storage)\n \n \t No program shall both explicitly instantiate and explicitly\n \t specialize a template.  */\n-      cp_error (\"explicit instantiation of `%#D' after\", result);\n-      cp_error_at (\"explicit specialization here\", result);\n+      cp_pedwarn (\"explicit instantiation of `%#D' after\", result);\n+      cp_pedwarn_at (\"explicit specialization here\", result);\n       return;\n     }\n   else if (DECL_EXPLICIT_INSTANTIATION (result))\n@@ -8967,7 +8967,7 @@ do_decl_instantiation (declspecs, declarator, storage)\n \t first instantiation was `extern' and the second is not, and\n \t EXTERN_P for the opposite case.  */\n       if (DECL_INTERFACE_KNOWN (result) && !extern_p)\n-\tcp_error (\"duplicate explicit instantiation of `%#D'\", result);\n+\tcp_pedwarn (\"duplicate explicit instantiation of `%#D'\", result);\n \n       /* If we've already instantiated the template, just return now.  */\n       if (DECL_INTERFACE_KNOWN (result))"}, {"sha": "4008e39a205932c95527f439204f74f0d93ef65b", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -128,6 +128,8 @@ print_lang_type (file, node, indent)\n \tfprintf (file, \" interface-only\");\n       if (CLASSTYPE_INTERFACE_UNKNOWN (node))\n \tfprintf (file, \" interface-unknown\");\n+      if (CLASSTYPE_VTABLE_NEEDS_WRITING (node))\n+\tfprintf (file, \" vtable-needs-writing\");\n       print_node (file, \"member-functions\", CLASSTYPE_METHOD_VEC (node),\n \t\t  indent + 4);\n     }"}, {"sha": "4dec4cb1a091cddc41310be6e6bb96aeac712dcf", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -1178,5 +1178,6 @@ synthesize_tinfo_fn (fndecl)\n   tmp = cp_convert (build_pointer_type (type_info_type_node), addr);\n   tmp = build_indirect_ref (tmp, 0);\n   c_expand_return (tmp);\n+  pop_momentary ();\n   finish_function (lineno, 0, 0);\n }"}, {"sha": "f2e9aa7766940cf184d144f08d471a835a131d19", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -2799,7 +2799,8 @@ note_debug_info_needed (type)\n      could, but that would mean putting global labels in the debug output\n      before each exported type and each of its functions and static data\n      members.  */\n-  if (write_symbols == DWARF_DEBUG || write_symbols == DWARF2_DEBUG)\n+  if (write_symbols == DWARF_DEBUG || write_symbols == DWARF2_DEBUG\n+      || write_symbols == NO_DEBUG)\n     return;\n \n   dfs_walk (TYPE_BINFO (type), dfs_debug_mark, dfs_debug_unmarkedp, 0);"}, {"sha": "fa54e37e1fbf6a2eaf9c0870ebe423fd74bfdf81", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -906,15 +906,9 @@ comptypes (type1, type2, strict)\n \t\t\t\t  TYPE_TI_ARGS (t2));\n     look_hard:\n       if ((strict & COMPARE_BASE) && DERIVED_FROM_P (t1, t2))\n-\t{\n-\t  val = 1;\n-\t  break;\n-\t}\n-      if ((strict & COMPARE_RELAXED) && DERIVED_FROM_P (t2, t1))\n-\t{\n-\t  val = 1;\n-\t  break;\n-\t}\n+\tval = 1;\n+      else if ((strict & COMPARE_RELAXED) && DERIVED_FROM_P (t2, t1))\n+\tval = 1;\n       break;\n \n     case OFFSET_TYPE:"}, {"sha": "003910c34584002f2e5b2adced493350f0ae6403", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1b4c42790b1a8083ae217facb58eb3f0cfa819/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=6f1b4c42790b1a8083ae217facb58eb3f0cfa819", "patch": "@@ -58,13 +58,13 @@ int flag_gnu_xref;\n #define FALSE 0\n #endif\n \n-#define PALLOC(typ) ((typ *) calloc(1,sizeof(typ)))\n+#define PALLOC(typ) ((typ *) xcalloc(1,sizeof(typ)))\n \n \n /* Return a malloc'd copy of STR.  */\n #define SALLOC(str) \\\n  ((char *) ((str) == NULL ? NULL\t\\\n-\t    : (char *) strcpy ((char *) malloc (strlen ((str)) + 1), (str))))\n+\t    : (char *) strcpy ((char *) xmalloc (strlen ((str)) + 1), (str))))\n #define SFREE(str) (str != NULL && (free(str),0))\n \n #define STREQL(s1,s2) (strcmp((s1),(s2)) == 0)"}]}