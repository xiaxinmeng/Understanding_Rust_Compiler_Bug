{"sha": "19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkZGM4MzRiYzFlYmM0ZTdjYjdhYTA1M2NiODE1YjNjNmNjMTExNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-14T19:10:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-14T19:10:45Z"}, "message": "cplus-dem.c (demangle_signature): Don't look for return types on constructors.\n\nTue Oct 14 12:01:00 1997  Mark Mitchell  <mmitchell@usa.net>\n\n\t* cplus-dem.c (demangle_signature): Don't look for return types on\n\tconstructors.  Handle member template constructors.\n\nand update from devo.\n\nFrom-SVN: r15901", "tree": {"sha": "b6cfbdffaad259ea4ff8c43d7e1e9abb33446d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6cfbdffaad259ea4ff8c43d7e1e9abb33446d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/comments", "author": null, "committer": null, "parents": [{"sha": "e66d884e7b29d16a098c881bc8b577f2b39d3ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66d884e7b29d16a098c881bc8b577f2b39d3ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66d884e7b29d16a098c881bc8b577f2b39d3ca6"}], "stats": {"total": 273, "additions": 260, "deletions": 13}, "files": [{"sha": "b0dc9dca2bac9ecbac65996529ca361ff853de8b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -1,10 +1,62 @@\n+Tue Oct 14 12:01:00 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* cplus-dem.c (demangle_signature): Don't look for return types on\n+\tconstructors.  Handle member template constructors.\n+\n+Fri Oct  3 17:53:30 1997  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* README: Fix configuration instructions.\n+\n+Mon Sep 29 12:28:41 1997  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* pexecute.c: Update to current version from /gd/gnu/lib:\n+\n+\tMon Sep 29 12:27:59 1997  Ian Lance Taylor  <ian@cygnus.com>\n+\n+        * pexecute.c: Use spawn if __CYGWIN32__.\n+\n+\t1997-08-08  Paul Eggert  <eggert@twinsun.com>\n+\n+        * pexecute.c: Include \"config.h\" first, as per autoconf manual.\n+\n+\tFri Jun 27 15:20:29 1997  Scott Christley <scottc@net-community.com>\n+\n+        * pexecute.c (fix_argv): New function.\n+        (pexecute): Win32 but not Cygwin32 needs its arguments fixed.\n+        Add underscore to cwait function call.\n+\n Sun Sep 28 12:00:52 1997  Mark Mitchell  <mmitchell@usa.net>\n \n         * cplus-dem.c (demangle_template): Add new parameter.  Handle new\n         template-function mangling.\n         (consume_count_with_underscores): New function.\n         (demangle_signature): Handle new name-mangling scheme.\n \n+Sun Sep 28 12:00:52 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+        * cplus-dem.c (demangle_template): Add new parameter.  Handle new\n+        template-function mangling.\n+        (consume_count_with_underscores): New function.\n+        (demangle_signature): Handle new name-mangling scheme.\n+\n+Wed Sep 24 00:31:59 1997  Felix Lee  <flee@yin.cygnus.com>\n+\n+\t* asprintf.c: stdarg.h when ALMOST_STDC\n+\t* config/mh-windows (EXTRA_OFILES): add asprintf.o and\n+ \tstrncasecmp.o.\n+\n+Thu Aug 28 14:27:15 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* vasprintf.c (vasprintf): Allow for _BSD_VA_LIST_.\n+\n+\t* config.table: Add case for FreeBSD 2.1 and 2.2, needs mh-fbsd21.\n+\n+\t* config/mh-fbsd21 (EXTRA_OFILES): Force vasprintf.o\n+\n+Wed Sep 10 12:43:10 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cplus-dem.c (demangle_fund_type): Change \"complex\" to \"__complex\".\n+\n Tue Sep  9 19:39:12 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* Makefile.in (install_to_libdir, install_to_tooldir): Add MULTISUBDIR\n@@ -14,11 +66,21 @@ Fri Sep  5 17:28:50 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* Makefile.in (distclean): Do MULTICLEAN before deleting Makefile.\n \n+Fri Sep  5 16:34:42 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* asprintf.c (asprintf): New file.\n+\t* Makefile.in (CFILES): Add asprintf.c\n+\t* functions.def: Ditto.\n+\n Wed Sep  3 14:35:52 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* Makefile.in (stamp-needed, stamp-config): Add MULTISRCTOP to\n \tpathname for move-if-change.\n \n+Thu Aug 28 18:53:34 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* argv.c (dupargv): New function, duplicate an argument vector.\n+\n Tue Aug 19 20:28:45 1997  Geoffrey Noer  <noer@cygnus.com>\n \n \t* config/mh-cygwin32: also build random.o"}, {"sha": "9d0f914d308c9ff750e1b9292ce89823e16aa295", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -146,7 +146,7 @@ HFILES =\n \n # NOTE: If you add new files to the library, add them to this list\n # (alphabetical), and add them to REQUIRED_OFILES or 'functions.def'.\n-CFILES = alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c bzero.c \\\n+CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c bzero.c \\\n \t choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c fnmatch.c \\\n \t getcwd.c getopt.c getopt1.c getpagesize.c getruntime.c \\\n          floatformat.c hex.c index.c insque.c \\"}, {"sha": "92dc202929b90af5dfcfd5aa222b14d9f470ad2b", "filename": "libiberty/README", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FREADME?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -11,10 +11,9 @@ Current members include:\n We expect many of the GNU subroutines that are floating around to\n eventually arrive here.\n \n-To build the library, do:\n-\n-\t./configure HOSTTYPE\n-\tmake\n+The library must be configured from the top source directory.  Don't\n+try to run configure in this directory.  Follow the configuration\n+instructions in ../README.\n \n Please report bugs and fixes to \"bug-gnu-utils@prep.ai.mit.edu\".  Thank you.\n "}, {"sha": "824a02988363a30b0fc98e5f0e370825d315afb9", "filename": "libiberty/argv.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -68,6 +68,63 @@ extern char *strdup ();\t\t/* Duplicate a string */\n #define INITIAL_MAXARGC 8\t/* Number of args + NULL in initial argv */\n \n \n+/*\n+\n+NAME\n+\n+\tdupargv -- duplicate an argument vector\n+\n+SYNOPSIS\n+\n+\tchar **dupargv (vector)\n+\tchar **vector;\n+\n+DESCRIPTION\n+\n+\tDuplicate an argument vector.  Simply scans through the\n+\tvector, duplicating each argument argument until the\n+\tterminating NULL is found.\n+\n+RETURNS\n+\n+\tReturns a pointer to the argument vector if\n+\tsuccessful. Returns NULL if there is insufficient memory to\n+\tcomplete building the argument vector.\n+\n+*/\n+\n+char **\n+dupargv (argv)\n+     char **argv;\n+{\n+  int argc;\n+  char **copy;\n+  \n+  if (argv == NULL)\n+    return NULL;\n+  \n+  /* the vector */\n+  for (argc = 0; argv[argc] != NULL; argc++);\n+  copy = (char **) malloc ((argc + 1) * sizeof (char *));\n+  if (copy == NULL)\n+    return NULL;\n+  \n+  /* the strings */\n+  for (argc = 0; argv[argc] != NULL; argc++)\n+    {\n+      int len = strlen (argv[argc]);\n+      copy[argc] = malloc (sizeof (char *) * (len + 1));\n+      if (copy[argc] == NULL)\n+\t{\n+\t  freeargv (copy);\n+\t  return NULL;\n+\t}\n+      strcpy (copy[argc], argv[argc]);\n+    }\n+  copy[argc] = NULL;\n+  return copy;\n+}\n+\n /*\n \n NAME"}, {"sha": "484761c5190855a34871a481f0c5b0efd2308763", "filename": "libiberty/config.table", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fconfig.table", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fconfig.table", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.table?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -10,6 +10,8 @@ case \"${host}\" in\n   *-*-cxux7*)\t\tfrag=mh-cxux7 ;;\n   *-*-cygwin32)\t\tfrag=mh-cygwin32 ;;\n   *-*-dgux*)\t\tfrag=mh-sysv ;;\n+  *-*-freebsd2.1.*)\tfrag=mh-fbsd21 ;;\n+  *-*-freebsd2.2.*)\tfrag=mh-fbsd21 ;;\n   hppa*-hp-bsd*)\tfrag=mh-hpbsd ;;\n   *-*-hpux*)\t\tfrag=mh-hpux ;;\n   *-*-hiux*)\t\tfrag=mh-hpux ;;"}, {"sha": "3dbd6ef694a20ea2545301f62d9eab26f59dd098", "filename": "libiberty/config/mh-windows", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fconfig%2Fmh-windows", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fconfig%2Fmh-windows", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-windows?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -1,2 +1,2 @@\n HDEFINES=-DNEED_basename -DNEED_sys_siglist -DNEED_strsignal -DNO_SYS_FILE_H\n-EXTRA_OFILES=strcasecmp.o vasprintf.o\n+EXTRA_OFILES=asprintf.o strcasecmp.o strncasecmp.o vasprintf.o"}, {"sha": "6f6c390c686edb95cb989af737f0b1bd8022e26e", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 77, "deletions": 4, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -293,6 +293,9 @@ string_prependn PARAMS ((string *, const char *, int));\n static int\n get_count PARAMS ((const char **, int *));\n \n+static int \n+consume_count_with_underscores PARAMS ((const char**));\n+\n static int\n consume_count PARAMS ((const char **));\n \n@@ -342,6 +345,42 @@ consume_count (type)\n }\n \n \n+/* Like consume_count, but for counts that are preceeded and followed\n+   by '_' if they are greater than 10.  Also, -1 is returned for\n+   failure, since 0 can be a valid value.  */\n+\n+static int\n+consume_count_with_underscores (mangled)\n+     const char **mangled;\n+{\n+  int idx;\n+\n+  if (**mangled == '_')\n+    {\n+      (*mangled)++;\n+      if (!isdigit (**mangled))\n+\treturn -1;\n+\n+      idx = consume_count (mangled);\n+      if (**mangled != '_')\n+\t/* The trailing underscore was missing. */\n+\treturn -1;\n+\t    \n+      (*mangled)++;\n+    }\n+  else\n+    {\n+      if (**mangled < '0' || **mangled > '9')\n+\treturn -1;\n+\t    \n+      idx = **mangled - '0';\n+      (*mangled)++;\n+    }\n+\n+  return idx;\n+}\n+\n+\n /* Like consume_count, but for counts that are preceeded and followed\n    by '_' if they are greater than 10.  Also, -1 is returned for\n    failure, since 0 can be a valid value.  */\n@@ -831,7 +870,8 @@ demangle_signature (work, mangled, declp)\n \t    {\n \t      /* A G++ template function.  Read the template arguments. */\n \t      success = demangle_template (work, mangled, declp, 0, 0);\n-\t      expect_return_type = 1;\n+\t      if (!(work->constructor & 1))\n+\t\texpect_return_type = 1;\n \t      (*mangled)++;\n \t      break;\n \t    }\n@@ -1534,7 +1574,8 @@ demangle_prefix (work, mangled, declp)\n \t}\n     }\n   else if ((scan == *mangled)\n-\t   && (isdigit (scan[2]) || (scan[2] == 'Q') || (scan[2] == 't')))\n+\t   && (isdigit (scan[2]) || (scan[2] == 'Q') || (scan[2] == 't')\n+\t       || (scan[2] == 'H')))\n     {\n       /* The ARM says nothing about the mangling of local variables.\n \t But cfront mangles local variables by prepending __<nesting_level>\n@@ -1551,7 +1592,8 @@ demangle_prefix (work, mangled, declp)\n \t{\n \t  /* A GNU style constructor starts with __[0-9Qt].  But cfront uses\n \t     names like __Q2_3foo3bar for nested type names.  So don't accept\n-\t     this style of constructor for cfront demangling.  */\n+\t     this style of constructor for cfront demangling.  A GNU\n+\t     style member-template constructor starts with 'H'. */\n \t  if (!(LUCID_DEMANGLING || ARM_DEMANGLING))\n \t    work -> constructor += 1;\n \t  *mangled = scan + 2;\n@@ -2345,6 +2387,37 @@ do_type (work, mangled, result)\n       }\n     break;\n \n+    case 'X':\n+    case 'Y':\n+      /* A template parm.  We substitute the corresponding argument. */\n+      {\n+\tint idx;\n+\tint lvl;\n+\n+\t(*mangled)++;\n+\tidx = consume_count_with_underscores (mangled);\n+\n+\tif (idx == -1 \n+\t    || (work->tmpl_argvec && idx >= work->ntmpl_args)\n+\t    || consume_count_with_underscores (mangled) == -1)\n+\t  {\n+\t    success = 0;\n+\t    break;\n+\t  }\n+\n+\tif (work->tmpl_argvec)\n+\t  string_append (result, work->tmpl_argvec[idx]);\n+\telse\n+\t  {\n+\t    char buf[10];\n+\t    sprintf(buf, \"T%d\", idx);\n+\t    string_append (result, buf);\n+\t  }\n+\n+\tsuccess = 1;\n+      }\n+    break;\n+\n     default:\n       success = demangle_fund_type (work, mangled, result);\n       break;\n@@ -2423,7 +2496,7 @@ demangle_fund_type (work, mangled, result)\n \tcase 'J':\n \t  (*mangled)++;\n \t  APPEND_BLANK (result);\n-\t  string_append (result, \"complex\");\n+\t  string_append (result, \"__complex\");\n \t  break;\n \tdefault:\n \t  done = 1;"}, {"sha": "6c14c9bfd51a37476d7c195d7e26ac5e21f1b206", "filename": "libiberty/functions.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Ffunctions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Ffunctions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.def?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -9,6 +9,7 @@\n  * the corresponding function in libc.\n  */\n \n+DEF(asprintf, int, (), NOTHING)\n DEF(atexit, int, (f), void (*f)())\n DEF(bcmp, int, (s1, s2, length), char *s1 AND char *s2 AND int length )\n DEF(bcopy, void, (s1, s2, length), char *s1 AND char *s2 AND int length )"}, {"sha": "b8594eb0954ea192e90f7fcc2b216aea41b65fc8", "filename": "libiberty/pexecute.c", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.c?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -23,11 +23,14 @@ Boston, MA 02111-1307, USA.  */\n /* This file lives in at least two places: libiberty and gcc.\n    Don't change one without the other.  */\n \n+#ifdef IN_GCC\n+#include \"config.h\"\n+#endif\n+\n #include <stdio.h>\n #include <errno.h>\n \n #ifdef IN_GCC\n-#include \"config.h\"\n #include \"gansidecl.h\"\n /* ??? Need to find a suitable header file.  */\n #define PEXECUTE_FIRST   1\n@@ -223,6 +226,51 @@ pwait (pid, status, flags)\n extern int _spawnv ();\n extern int _spawnvp ();\n \n+#ifdef __CYGWIN32__\n+\n+#define fix_argv(argvec) (argvec)\n+\n+#else\n+\n+/* This is a kludge to get around the Microsoft C spawn functions' propensity\n+   to remove the outermost set of double quotes from all arguments.  */\n+\n+const char * const *\n+fix_argv (argvec)\n+     char **argvec;\n+{\n+  int i;\n+\n+  for (i = 1; argvec[i] != 0; i++)\n+    {\n+      int len, j;\n+      char *temp, *newtemp;\n+\n+      temp = argvec[i];\n+      len = strlen (temp);\n+      for (j = 0; j < len; j++)\n+        {\n+          if (temp[j] == '\"')\n+            {\n+              newtemp = xmalloc (len + 2);\n+              strncpy (newtemp, temp, j);\n+              newtemp [j] = '\\\\';\n+              strncpy (&newtemp [j+1], &temp [j], len-j);\n+              newtemp [len+1] = 0;\n+              temp = newtemp;\n+              len++;\n+              j++;\n+            }\n+        }\n+\n+        argvec[i] = temp;\n+      }\n+\n+  return (const char * const *) argvec;\n+}\n+\n+#endif /* ! defined (__CYGWIN32__) */\n+\n int\n pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n      const char *program;\n@@ -236,7 +284,8 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \n   if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)\n     abort ();\n-  pid = (flags & PEXECUTE_SEARCH ? _spawnvp : _spawnv) (_P_NOWAIT, program, argv);\n+  pid = (flags & PEXECUTE_SEARCH ? _spawnvp : _spawnv)\n+    (_P_NOWAIT, program, fix_argv(argv));\n   if (pid == -1)\n     {\n       *errmsg_fmt = install_error_msg;\n@@ -254,7 +303,7 @@ pwait (pid, status, flags)\n {\n   /* ??? Here's an opportunity to canonicalize the values in STATUS.\n      Needed?  */\n-  return cwait (status, pid, WAIT_CHILD);\n+  return _cwait (status, pid, WAIT_CHILD);\n }\n \n #endif /* _WIN32 */"}, {"sha": "38e84680461799c9cca75baeb4f3b05e2ef2fb61", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=19ddc834bc1ebc4e7cb7aa053cb815b3c6cc1115", "patch": "@@ -118,7 +118,11 @@ int\n vasprintf (result, format, args)\n      char **result;\n      const char *format;\n+#if defined (_BSD_VA_LIST_) && defined (__FreeBSD__)\n+     _BSD_VA_LIST_ args;\n+#else\n      va_list args;\n+#endif\n {\n   return int_vasprintf (result, format, &args);\n }"}]}