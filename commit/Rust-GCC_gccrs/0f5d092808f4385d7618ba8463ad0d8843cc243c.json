{"sha": "0f5d092808f4385d7618ba8463ad0d8843cc243c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY1ZDA5MjgwOGY0Mzg1ZDc2MThiYTg0NjNhZDBkODg0M2NjMjQzYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:18:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:18:21Z"}, "message": "poly_int: adjust_mems\n\nThis patch makes the var-tracking.c handling of autoinc addresses\ncope with polynomial mode sizes.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* var-tracking.c (adjust_mems): Treat mode sizes as polynomial.\n\tUse plus_constant instead of gen_rtx_PLUS.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256156", "tree": {"sha": "7677e62ae446a27986459eb4c18a4c43a32dfe67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7677e62ae446a27986459eb4c18a4c43a32dfe67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f5d092808f4385d7618ba8463ad0d8843cc243c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f5d092808f4385d7618ba8463ad0d8843cc243c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f5d092808f4385d7618ba8463ad0d8843cc243c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f5d092808f4385d7618ba8463ad0d8843cc243c/comments", "author": null, "committer": null, "parents": [{"sha": "7b4df2bf95d2254756f6509ee57a90c398baf81b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4df2bf95d2254756f6509ee57a90c398baf81b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4df2bf95d2254756f6509ee57a90c398baf81b"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "fb3d07de0a1199633673d3912f181d91ddb517e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5d092808f4385d7618ba8463ad0d8843cc243c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5d092808f4385d7618ba8463ad0d8843cc243c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f5d092808f4385d7618ba8463ad0d8843cc243c", "patch": "@@ -1,3 +1,10 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* var-tracking.c (adjust_mems): Treat mode sizes as polynomial.\n+\tUse plus_constant instead of gen_rtx_PLUS.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "af1afc281d1881411b19b133f69cd1a81564520a", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5d092808f4385d7618ba8463ad0d8843cc243c/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5d092808f4385d7618ba8463ad0d8843cc243c/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=0f5d092808f4385d7618ba8463ad0d8843cc243c", "patch": "@@ -1016,6 +1016,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n   machine_mode mem_mode_save;\n   bool store_save;\n   scalar_int_mode tem_mode, tem_subreg_mode;\n+  poly_int64 size;\n   switch (GET_CODE (loc))\n     {\n     case REG:\n@@ -1060,24 +1061,20 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       return mem;\n     case PRE_INC:\n     case PRE_DEC:\n-      addr = gen_rtx_PLUS (GET_MODE (loc), XEXP (loc, 0),\n-\t\t\t   gen_int_mode (GET_CODE (loc) == PRE_INC\n-\t\t\t\t\t ? GET_MODE_SIZE (amd->mem_mode)\n-\t\t\t\t\t : -GET_MODE_SIZE (amd->mem_mode),\n-\t\t\t\t\t GET_MODE (loc)));\n+      size = GET_MODE_SIZE (amd->mem_mode);\n+      addr = plus_constant (GET_MODE (loc), XEXP (loc, 0),\n+\t\t\t    GET_CODE (loc) == PRE_INC ? size : -size);\n       /* FALLTHRU */\n     case POST_INC:\n     case POST_DEC:\n       if (addr == loc)\n \taddr = XEXP (loc, 0);\n       gcc_assert (amd->mem_mode != VOIDmode && amd->mem_mode != BLKmode);\n       addr = simplify_replace_fn_rtx (addr, old_rtx, adjust_mems, data);\n-      tem = gen_rtx_PLUS (GET_MODE (loc), XEXP (loc, 0),\n-\t\t\t  gen_int_mode ((GET_CODE (loc) == PRE_INC\n-\t\t\t\t\t || GET_CODE (loc) == POST_INC)\n-\t\t\t\t\t? GET_MODE_SIZE (amd->mem_mode)\n-\t\t\t\t\t: -GET_MODE_SIZE (amd->mem_mode),\n-\t\t\t\t\tGET_MODE (loc)));\n+      size = GET_MODE_SIZE (amd->mem_mode);\n+      tem = plus_constant (GET_MODE (loc), XEXP (loc, 0),\n+\t\t\t   (GET_CODE (loc) == PRE_INC\n+\t\t\t    || GET_CODE (loc) == POST_INC) ? size : -size);\n       store_save = amd->store;\n       amd->store = false;\n       tem = simplify_replace_fn_rtx (tem, old_rtx, adjust_mems, data);"}]}