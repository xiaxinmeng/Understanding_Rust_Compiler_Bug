{"sha": "afab92d840f37441b76f8f1081ef8588ae354cf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZhYjkyZDg0MGYzNzQ0MWI3NmY4ZjEwODFlZjg1ODhhZTM1NGNmMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-10-16T18:23:25Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-10-16T18:23:25Z"}, "message": "file_pos.c (unformatted_backspace): Normal case is GFC_CONVERT_NATIVE.\n\n2008-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* io/file_pos.c (unformatted_backspace): Normal case is\n\tGFC_CONVERT_NATIVE.\n\t* io/transfer.c (read_sf):  Mark paths leading to generate_error()\n\tas unlikely.\n\t(readl_block_form):  Likewise.\n\t(read_block_direct):  Likewise.\n\t(write_block):  Likewise.\n\t(write_buf):  Likewise.\n\t(us_read):  Likewise.  Normal case is GFC_CONVERT_NATIVE.\n\t(next_record_w_unf):  Mark paths leading to generate_error()\n\tas unlikely.\n\nFrom-SVN: r141179", "tree": {"sha": "ae7ea28804a259fcc779f338996c4148bc062ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7ea28804a259fcc779f338996c4148bc062ca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afab92d840f37441b76f8f1081ef8588ae354cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afab92d840f37441b76f8f1081ef8588ae354cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afab92d840f37441b76f8f1081ef8588ae354cf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afab92d840f37441b76f8f1081ef8588ae354cf1/comments", "author": null, "committer": null, "parents": [{"sha": "74e8018e672bcbeb0874fde35ddc3dade238c216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e8018e672bcbeb0874fde35ddc3dade238c216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e8018e672bcbeb0874fde35ddc3dade238c216"}], "stats": {"total": 101, "additions": 61, "deletions": 40}, "files": [{"sha": "049f0dd874a077055f5707b13447bca013a8b953", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afab92d840f37441b76f8f1081ef8588ae354cf1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afab92d840f37441b76f8f1081ef8588ae354cf1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=afab92d840f37441b76f8f1081ef8588ae354cf1", "patch": "@@ -1,3 +1,17 @@\n+2008-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* io/file_pos.c (unformatted_backspace): Normal case is\n+\tGFC_CONVERT_NATIVE.\n+\t* io/transfer.c (read_sf):  Mark paths leading to generate_error()\n+\tas unlikely.\n+\t(readl_block_form):  Likewise.\n+\t(read_block_direct):  Likewise.\n+\t(write_block):  Likewise.\n+\t(write_buf):  Likewise.\n+\t(us_read):  Likewise.  Normal case is GFC_CONVERT_NATIVE.\n+\t(next_record_w_unf):  Mark paths leading to generate_error()\n+\tas unlikely.\n+\n 2008-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/34670"}, {"sha": "25b0108eef46e68ef6f5f912391c7b503f3670d0", "filename": "libgfortran/io/file_pos.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afab92d840f37441b76f8f1081ef8588ae354cf1/libgfortran%2Fio%2Ffile_pos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afab92d840f37441b76f8f1081ef8588ae354cf1/libgfortran%2Fio%2Ffile_pos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffile_pos.c?ref=afab92d840f37441b76f8f1081ef8588ae354cf1", "patch": "@@ -120,7 +120,7 @@ unformatted_backspace (st_parameter_filepos *fpp, gfc_unit *u)\n         goto io_error;\n \n       /* Only GFC_CONVERT_NATIVE and GFC_CONVERT_SWAP are valid here.  */\n-      if (u->flags.convert == GFC_CONVERT_NATIVE)\n+      if (likely (u->flags.convert == GFC_CONVERT_NATIVE))\n \t{\n \t  switch (length)\n \t    {"}, {"sha": "8d4f785e49a437d26df6769dbe8dd62fd895d206", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afab92d840f37441b76f8f1081ef8588ae354cf1/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afab92d840f37441b76f8f1081ef8588ae354cf1/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=afab92d840f37441b76f8f1081ef8588ae354cf1", "patch": "@@ -205,7 +205,8 @@ read_sf (st_parameter_dt *dtp, int *length, int no_error)\n   if (is_internal_unit (dtp))\n     {\n       readlen = *length;\n-      if (sread (dtp->u.p.current_unit->s, p, &readlen) != 0 || readlen < (size_t) *length)\n+      if (unlikely (sread (dtp->u.p.current_unit->s, p, &readlen) != 0\n+\t\t    || readlen < (size_t) *length))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_END, NULL);\n \t  return NULL;\n@@ -219,7 +220,7 @@ read_sf (st_parameter_dt *dtp, int *length, int no_error)\n \n   do\n     {\n-      if (sread (dtp->u.p.current_unit->s, &q, &readlen) != 0)\n+      if (unlikely (sread (dtp->u.p.current_unit->s, &q, &readlen) != 0))\n         {\n \t  generate_error (&dtp->common, LIBERROR_END, NULL);\n \t  return NULL;\n@@ -229,7 +230,7 @@ read_sf (st_parameter_dt *dtp, int *length, int no_error)\n \t EOR below.  */\n       if (readlen < 1 && n == 0)\n \t{\n-\t  if (no_error)\n+\t  if (likely (no_error))\n \t    break;\n \t  generate_error (&dtp->common, LIBERROR_END, NULL);\n \t  return NULL;\n@@ -250,7 +251,8 @@ read_sf (st_parameter_dt *dtp, int *length, int no_error)\n \t    {\n \t      readlen = 1;\n \t      pos = stream_offset (dtp->u.p.current_unit->s);\n-\t      if (sread (dtp->u.p.current_unit->s, &q, &readlen) != 0)\n+\t      if (unlikely (sread (dtp->u.p.current_unit->s, &q, &readlen)\n+\t\t\t    != 0))\n \t        {\n \t\t  generate_error (&dtp->common, LIBERROR_END, NULL);\n \t\t  return NULL;\n@@ -266,7 +268,7 @@ read_sf (st_parameter_dt *dtp, int *length, int no_error)\n \t     so we can just continue with a short read.  */\n \t  if (dtp->u.p.current_unit->pad_status == PAD_NO)\n \t    {\n-\t      if (no_error)\n+\t      if (likely (no_error))\n \t\tbreak;\n \t      generate_error (&dtp->common, LIBERROR_EOR, NULL);\n \t      return NULL;\n@@ -332,15 +334,15 @@ read_block_form (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n             dtp->u.p.current_unit->bytes_left = dtp->u.p.current_unit->recl;\n \t  else\n \t    {\n-\t      if (dtp->u.p.current_unit->pad_status == PAD_NO)\n+\t      if (unlikely (dtp->u.p.current_unit->pad_status == PAD_NO))\n \t\t{\n \t\t  /* Not enough data left.  */\n \t\t  generate_error (&dtp->common, LIBERROR_EOR, NULL);\n \t\t  return FAILURE;\n \t\t}\n \t    }\n \n-\t  if (dtp->u.p.current_unit->bytes_left == 0)\n+\t  if (unlikely (dtp->u.p.current_unit->bytes_left == 0))\n \t    {\n \t      dtp->u.p.current_unit->endfile = AT_ENDFILE;\n \t      generate_error (&dtp->common, LIBERROR_END, NULL);\n@@ -368,7 +370,7 @@ read_block_form (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n   dtp->u.p.current_unit->bytes_left -= (gfc_offset) *nbytes;\n \n   nread = *nbytes;\n-  if (sread (dtp->u.p.current_unit->s, buf, &nread) != 0)\n+  if (unlikely (sread (dtp->u.p.current_unit->s, buf, &nread) != 0))\n     {\n       generate_error (&dtp->common, LIBERROR_OS, NULL);\n       return FAILURE;\n@@ -379,7 +381,7 @@ read_block_form (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n \n   if (nread != *nbytes)\n     {\t\t\t\t/* Short read, this shouldn't happen.  */\n-      if (dtp->u.p.current_unit->pad_status == PAD_YES)\n+      if (likely (dtp->u.p.current_unit->pad_status == PAD_YES))\n \t*nbytes = nread;\n       else\n \t{\n@@ -410,15 +412,16 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n     {\n       to_read_record = *nbytes;\n       have_read_record = to_read_record;\n-      if (sread (dtp->u.p.current_unit->s, buf, &have_read_record) != 0)\n+      if (unlikely (sread (dtp->u.p.current_unit->s, buf, &have_read_record)\n+\t\t    != 0))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n \t  return;\n \t}\n \n       dtp->u.p.current_unit->strm_pos += (gfc_offset) have_read_record; \n \n-      if (to_read_record != have_read_record)\n+      if (unlikely (to_read_record != have_read_record))\n \t{\n \t  /* Short read,  e.g. if we hit EOF.  For stream files,\n \t   we have to set the end-of-file condition.  */\n@@ -445,7 +448,8 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n \n       dtp->u.p.current_unit->bytes_left -= to_read_record;\n \n-      if (sread (dtp->u.p.current_unit->s, buf, &to_read_record) != 0)\n+      if (unlikely (sread (dtp->u.p.current_unit->s, buf, &to_read_record)\n+\t\t    != 0))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n \t  return;\n@@ -459,7 +463,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n \t  return;\n \t}\n \n-      if (short_record)\n+      if (unlikely (short_record))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_SHORT_RECORD, NULL);\n \t  return;\n@@ -471,7 +475,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n      until the request has been fulfilled or the record has run out\n      of continuation subrecords.  */\n \n-  if (dtp->u.p.current_unit->endfile == AT_ENDFILE)\n+  if (unlikely (dtp->u.p.current_unit->endfile == AT_ENDFILE))\n     {\n       generate_error (&dtp->common, LIBERROR_END, NULL);\n       return;\n@@ -509,16 +513,16 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n       dtp->u.p.current_unit->bytes_left_subrecord -= to_read_subrecord;\n \n       have_read_subrecord = to_read_subrecord;\n-      if (sread (dtp->u.p.current_unit->s, buf + have_read_record,\n-\t\t &have_read_subrecord) != 0)\n+      if (unlikely (sread (dtp->u.p.current_unit->s, buf + have_read_record,\n+\t\t\t   &have_read_subrecord) != 0))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n \t  return;\n \t}\n \n       have_read_record += have_read_subrecord;\n \n-      if (to_read_subrecord != have_read_subrecord)  \n+      if (unlikely (to_read_subrecord != have_read_subrecord))\n \t\t\t\n \t{\n \t  /* Short read, e.g. if we hit EOF.  This means the record\n@@ -532,7 +536,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n \n       if (to_read_record > 0)\n \t{\n-\t  if (dtp->u.p.current_unit->continued)\n+\t  if (likely (dtp->u.p.current_unit->continued))\n \t    {\n \t      next_record_r_unf (dtp, 0);\n \t      us_read (dtp, 1);\n@@ -556,7 +560,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n     }\n \n   dtp->u.p.current_unit->bytes_left -= have_read_record;\n-  if (short_record)\n+  if (unlikely (short_record))\n     {\n       generate_error (&dtp->common, LIBERROR_SHORT_RECORD, NULL);\n       return;\n@@ -581,9 +585,11 @@ write_block (st_parameter_dt *dtp, int length)\n \t{\n \t  /* For preconnected units with default record length, set bytes left\n \t     to unit record length and proceed, otherwise error.  */\n-\t  if ((dtp->u.p.current_unit->unit_number == options.stdout_unit\n-\t\t|| dtp->u.p.current_unit->unit_number == options.stderr_unit)\n-\t\t&& dtp->u.p.current_unit->recl == DEFAULT_RECL)\n+\t  if (likely ((dtp->u.p.current_unit->unit_number\n+\t\t       == options.stdout_unit\n+\t\t       || dtp->u.p.current_unit->unit_number\n+\t\t       == options.stderr_unit)\n+\t\t      && dtp->u.p.current_unit->recl == DEFAULT_RECL))\n \t    dtp->u.p.current_unit->bytes_left = dtp->u.p.current_unit->recl;\n \t  else\n \t    {\n@@ -605,7 +611,7 @@ write_block (st_parameter_dt *dtp, int length)\n         return NULL;\n       }\n \n-    if (dtp->u.p.current_unit->endfile == AT_ENDFILE)\n+    if (unlikely (dtp->u.p.current_unit->endfile == AT_ENDFILE))\n       generate_error (&dtp->common, LIBERROR_END, NULL);\n     }\n   else\n@@ -642,7 +648,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n \n   if (is_stream_io (dtp))\n     {\n-      if (swrite (dtp->u.p.current_unit->s, buf, &nbytes) != 0)\n+      if (unlikely (swrite (dtp->u.p.current_unit->s, buf, &nbytes) != 0))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n \t  return FAILURE;\n@@ -657,7 +663,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n \n   if (dtp->u.p.current_unit->flags.access == ACCESS_DIRECT)\n     {\n-      if (dtp->u.p.current_unit->bytes_left < (gfc_offset) nbytes)\n+      if (unlikely (dtp->u.p.current_unit->bytes_left < (gfc_offset) nbytes))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_DIRECT_EOR, NULL);\n \t  return FAILURE;\n@@ -666,7 +672,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n       if (buf == NULL && nbytes == 0)\n \treturn SUCCESS;\n \n-      if (swrite (dtp->u.p.current_unit->s, buf, &nbytes) != 0)\n+      if (unlikely (swrite (dtp->u.p.current_unit->s, buf, &nbytes) != 0))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n \t  return FAILURE;\n@@ -703,8 +709,8 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n       dtp->u.p.current_unit->bytes_left_subrecord -=\n \t(gfc_offset) to_write_subrecord;\n \n-      if (swrite (dtp->u.p.current_unit->s, buf + have_written,\n-\t\t  &to_write_subrecord) != 0)\n+      if (unlikely (swrite (dtp->u.p.current_unit->s, buf + have_written,\n+\t\t\t    &to_write_subrecord) != 0))\n \t{\n \t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n \t  return FAILURE;\n@@ -721,7 +727,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n       us_write (dtp, 1);\n     }\n   dtp->u.p.current_unit->bytes_left -= have_written;\n-  if (short_record)\n+  if (unlikely (short_record))\n     {\n       generate_error (&dtp->common, LIBERROR_SHORT_RECORD, NULL);\n       return FAILURE;\n@@ -973,7 +979,7 @@ formatted_transfer_scalar (st_parameter_dt *dtp, bt type, void *p, int kind,\n       if (f == NULL)\n \t{\n \t  /* No data descriptors left.  */\n-\t  if (n > 0)\n+\t  if (unlikely (n > 0))\n \t    generate_error (&dtp->common, LIBERROR_FORMAT,\n \t\t\"Insufficient data descriptors in format after reversion\");\n \t  return;\n@@ -1671,7 +1677,7 @@ us_read (st_parameter_dt *dtp, int continued)\n \n   nr = n;\n \n-  if (sread (dtp->u.p.current_unit->s, &i, &n) != 0)\n+  if (unlikely (sread (dtp->u.p.current_unit->s, &i, &n) != 0))\n     {\n       generate_error (&dtp->common, LIBERROR_BAD_US, NULL);\n       return;\n@@ -1683,14 +1689,14 @@ us_read (st_parameter_dt *dtp, int continued)\n       return;  /* end of file */\n     }\n \n-  if (n != nr)\n+  if (unlikely (n != nr))\n     {\n       generate_error (&dtp->common, LIBERROR_BAD_US, NULL);\n       return;\n     }\n \n   /* Only GFC_CONVERT_NATIVE and GFC_CONVERT_SWAP are valid here.  */\n-  if (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_NATIVE)\n+  if (likely (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_NATIVE))\n     {\n       switch (nr)\n \t{\n@@ -2535,7 +2541,7 @@ write_us_marker (st_parameter_dt *dtp, const gfc_offset buf)\n     len = compile_options.record_marker;\n \n   /* Only GFC_CONVERT_NATIVE and GFC_CONVERT_SWAP are valid here.  */\n-  if (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_NATIVE)\n+  if (likely (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_NATIVE))\n     {\n       switch (len)\n \t{\n@@ -2600,7 +2606,7 @@ next_record_w_unf (st_parameter_dt *dtp, int next_subrecord)\n   else\n     m_write = m;\n \n-  if (write_us_marker (dtp, m_write) != 0)\n+  if (unlikely (write_us_marker (dtp, m_write) != 0))\n     goto io_error;\n \n   if (compile_options.record_marker == 0)\n@@ -2611,21 +2617,22 @@ next_record_w_unf (st_parameter_dt *dtp, int next_subrecord)\n   /* Seek to the head and overwrite the bogus length with the real\n      length.  */\n \n-  if (sseek (dtp->u.p.current_unit->s, c - m - record_marker)\n-      == FAILURE)\n+  if (unlikely (sseek (dtp->u.p.current_unit->s, c - m - record_marker)\n+\t\t== FAILURE))\n     goto io_error;\n \n   if (next_subrecord)\n     m_write = -m;\n   else\n     m_write = m;\n \n-  if (write_us_marker (dtp, m_write) != 0)\n+  if (unlikely (write_us_marker (dtp, m_write) != 0))\n     goto io_error;\n \n   /* Seek past the end of the current record.  */\n \n-  if (sseek (dtp->u.p.current_unit->s, c + record_marker) == FAILURE)\n+  if (unlikely (sseek (dtp->u.p.current_unit->s, c + record_marker)\n+\t\t== FAILURE))\n     goto io_error;\n \n   return;"}]}