{"sha": "e389defe261a3d374812e4bef42774cecd70316e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4OWRlZmUyNjFhM2QzNzQ4MTJlNGJlZjQyNzc0Y2VjZDcwMzE2ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-05-18T18:51:35Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-05-18T18:51:35Z"}, "message": "special.exp (gcj_special_pr21115): Renamed.\n\n\t* testsuite/libjava.special/special.exp (gcj_special_pr21115):\n\tRenamed.\n\t(gcj_write_and_byte_compile): New proc.\n\t(gcj_special_lazy_illegal_access): Likewise.\n\nFrom-SVN: r113890", "tree": {"sha": "e4a9fab743e1a3d3ae79b7c07306e64e75eac38c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a9fab743e1a3d3ae79b7c07306e64e75eac38c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e389defe261a3d374812e4bef42774cecd70316e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e389defe261a3d374812e4bef42774cecd70316e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e389defe261a3d374812e4bef42774cecd70316e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e389defe261a3d374812e4bef42774cecd70316e/comments", "author": null, "committer": null, "parents": [{"sha": "a1d1988f99277ab1208a6d66f8aa27323b583b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d1988f99277ab1208a6d66f8aa27323b583b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d1988f99277ab1208a6d66f8aa27323b583b4c"}], "stats": {"total": 81, "additions": 78, "deletions": 3}, "files": [{"sha": "f8af155f26b601ae3edd38c1c84dfef72ccece8c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e389defe261a3d374812e4bef42774cecd70316e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e389defe261a3d374812e4bef42774cecd70316e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e389defe261a3d374812e4bef42774cecd70316e", "patch": "@@ -1,3 +1,10 @@\n+2006-05-18  Tom Tromey  <tromey@redhat.com>\n+\n+\t* testsuite/libjava.special/special.exp (gcj_special_pr21115):\n+\tRenamed.\n+\t(gcj_write_and_byte_compile): New proc.\n+\t(gcj_special_lazy_illegal_access): Likewise.\n+\n 2006-05-18  Mark Wielaard  <mark@klomp.org>\n \n \tImported GNU Classpath 0.90"}, {"sha": "ab18b47bff1e683bc899b739fae609d258c924f0", "filename": "libjava/testsuite/libjava.special/special.exp", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e389defe261a3d374812e4bef42774cecd70316e/libjava%2Ftestsuite%2Flibjava.special%2Fspecial.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e389defe261a3d374812e4bef42774cecd70316e/libjava%2Ftestsuite%2Flibjava.special%2Fspecial.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.special%2Fspecial.exp?ref=e389defe261a3d374812e4bef42774cecd70316e", "patch": "@@ -1,6 +1,6 @@\n # Special test cases.  These require tricky build procedures.\n \n-proc gcj_special_run {} {\n+proc gcj_special_pr21115 {} {\n   global srcdir subdir env\n \n   # ---- PR 21115 -------------------------------------------------------\n@@ -13,7 +13,7 @@ proc gcj_special_run {} {\n   }\n   pass \"bytecompile pr21115I.java\"\n \n-    if {! [gcj_link pr21115 pr21115 [list ${srcdir}/${subdir}/pr21115.java]]} {\n+  if {! [gcj_link pr21115 pr21115 [list ${srcdir}/${subdir}/pr21115.java]]} {\n     fail \"compiling/linking pr21115.java\"\n     # FIXME\n     return 0\n@@ -27,4 +27,72 @@ proc gcj_special_run {} {\n   return 1\n }\n \n-gcj_special_run\n+# Write a .java file and bytecompile it.  Return 0 on failure.\n+proc gcj_write_and_byte_compile {name contents} {\n+  set fd [open $name w]\n+  puts $fd $contents\n+  close $fd\n+\n+  if {! [bytecompile_file $name [pwd]]} {\n+    fail \"bytecompile $name\"\n+    # FIXME - should use `untested' on all remaining tests.\n+    # But that is hard.\n+    return 0\n+  }\n+  pass \"bytecompile $name\"\n+  return 1\n+}\n+\n+# Check that BC-compiled code lazily throws IllegalAccessError.\n+proc gcj_special_lazy_illegal_access {} {\n+  global srcdir subdir env\n+\n+  # Write and compile the initial files.\n+  if {! [gcj_write_and_byte_compile LazyA.java {\n+    public class LazyA {\n+      public static void m() { }\n+    }\n+  }]} {\n+    return 0\n+  }\n+  if {! [gcj_write_and_byte_compile LazyB.java {\n+    public class LazyB {\n+      public static void m() { }\n+      public static void main(String[] args) { }\n+    }\n+  }]} {\n+    return 0\n+  }\n+\n+  # Create the expected output file.\n+  set fd [open Lazy.out w]\n+  close $fd\n+\n+  # Now recompile LazyA with different access for m().\n+  if {! [gcj_write_and_byte_compile LazyA.java {\n+    public class LazyA {\n+      private static void m() { }\n+    }\n+  }]} {\n+    return 0\n+  }\n+\n+  # Link and run... this should still work, since we don't actually\n+  # try to call LazyA.m().\n+  if {! [gcj_link Lazy LazyB {LazyA.class LazyB.class} \\\n+\t   additional_flags=-findirect-dispatch]} {\n+    fail \"compiling/linking pr21115.java\"\n+    # FIXME\n+    return 0\n+  }\n+\n+  if {! [gcj_invoke Lazy Lazy.out \"\"]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  return 1\n+}\n+\n+gcj_special_pr21115\n+gcj_special_lazy_illegal_access"}]}