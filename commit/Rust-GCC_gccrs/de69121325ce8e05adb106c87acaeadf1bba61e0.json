{"sha": "de69121325ce8e05adb106c87acaeadf1bba61e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2OTEyMTMyNWNlOGUwNWFkYjEwNmM4N2FjYWVhZGYxYmJhNjFlMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-25T20:02:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-25T20:02:41Z"}, "message": "re PR c++/44311 ([C++0x] no error with switch over enum class and integer case)\n\n\tPR c++/44311\n\t* decl.c (case_conversion): New.\n\t(finish_case_label): Use it.\n\nFrom-SVN: r174231", "tree": {"sha": "f31e62ba5d84a403470febb8740f225d5c3578b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31e62ba5d84a403470febb8740f225d5c3578b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de69121325ce8e05adb106c87acaeadf1bba61e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de69121325ce8e05adb106c87acaeadf1bba61e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de69121325ce8e05adb106c87acaeadf1bba61e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de69121325ce8e05adb106c87acaeadf1bba61e0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f03a54024372021a572dd23893982ef2ba0e941e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03a54024372021a572dd23893982ef2ba0e941e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03a54024372021a572dd23893982ef2ba0e941e"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "1b611936af486c53cfb11b2746d26ee80d591d58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de69121325ce8e05adb106c87acaeadf1bba61e0", "patch": "@@ -1,5 +1,9 @@\n 2011-05-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/44311\n+\t* decl.c (case_conversion): New.\n+\t(finish_case_label): Use it.\n+\n \t* ptree.c (cxx_print_xnode): Handle ARGUMENT_PACK_SELECT.\n \n \tPR c++/45698"}, {"sha": "7fc194554b9dce5f8fad57f7a3d9e02c7ea21077", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=de69121325ce8e05adb106c87acaeadf1bba61e0", "patch": "@@ -2957,6 +2957,28 @@ pop_switch (void)\n   free (cs);\n }\n \n+/* Convert a case constant VALUE in a switch to the type TYPE of the switch\n+   condition.  Note that if TYPE and VALUE are already integral we don't\n+   really do the conversion because the language-independent\n+   warning/optimization code will work better that way.  */\n+\n+static tree\n+case_conversion (tree type, tree value)\n+{\n+  if (value == NULL_TREE)\n+    return value;\n+\n+  if (cxx_dialect >= cxx0x\n+      && (SCOPED_ENUM_P (type)\n+\t  || !INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (TREE_TYPE (value))))\n+    {\n+      if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (type))\n+\ttype = type_promotes_to (type);\n+      value = perform_implicit_conversion (type, value, tf_warning_or_error);\n+    }\n+  return cxx_constant_value (value);\n+}\n+\n /* Note that we've seen a definition of a case label, and complain if this\n    is a bad place for one.  */\n \n@@ -2965,6 +2987,7 @@ finish_case_label (location_t loc, tree low_value, tree high_value)\n {\n   tree cond, r;\n   struct cp_binding_level *p;\n+  tree type;\n \n   if (processing_template_decl)\n     {\n@@ -2984,13 +3007,12 @@ finish_case_label (location_t loc, tree low_value, tree high_value)\n   if (!check_switch_goto (switch_stack->level))\n     return error_mark_node;\n \n-  if (low_value)\n-    low_value = cxx_constant_value (low_value);\n-  if (high_value)\n-    high_value = cxx_constant_value (high_value);\n+  type = SWITCH_STMT_TYPE (switch_stack->switch_stmt);\n+\n+  low_value = case_conversion (type, low_value);\n+  high_value = case_conversion (type, high_value);\n \n-  r = c_add_case_label (loc, switch_stack->cases, cond,\n-\t\t\tSWITCH_STMT_TYPE (switch_stack->switch_stmt),\n+  r = c_add_case_label (loc, switch_stack->cases, cond, type,\n \t\t\tlow_value, high_value);\n \n   /* After labels, make any new cleanups in the function go into their"}, {"sha": "e8a335ff81351fa790d0e1467b2e33bd0722c58b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de69121325ce8e05adb106c87acaeadf1bba61e0", "patch": "@@ -1,5 +1,8 @@\n 2011-05-25  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/enum15.C: New.\n+\t* g++.dg/cpp0x/constexpr-switch2.C: New.\n+\n \t* g++.dg/cpp0x/variadic110.C: New.\n \n \t* g++.dg/cpp0x/auto9.C: Add typedef test."}, {"sha": "55cf2ad7ce8467677dafb9ea0ecbb1c9ff6cf0bc", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-switch2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-switch2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-switch2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-switch2.C?ref=de69121325ce8e05adb106c87acaeadf1bba61e0", "patch": "@@ -0,0 +1,23 @@\n+// Test for constexpr conversion in case context\n+// { dg-options -std=c++0x }\n+\n+enum class E { e1, e2 };\n+\n+struct A\n+{\n+  E e;\n+  constexpr operator E() { return e; }\n+  constexpr A(E e): e(e) { }\n+};\n+\n+E e;\n+\n+int main()\n+{\n+  switch (e)\n+    {\n+    case A(E::e1):\n+    case A(E::e2):\n+      ;\n+    }\n+}"}, {"sha": "d653216498ed4ae7b023825c7b417d1ea61bfdb2", "filename": "gcc/testsuite/g++.dg/cpp0x/enum15.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de69121325ce8e05adb106c87acaeadf1bba61e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum15.C?ref=de69121325ce8e05adb106c87acaeadf1bba61e0", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/44311\n+// { dg-options -std=c++0x }\n+\n+enum class A { Val0, Val1 };\n+\n+void foo (A a, int i)\n+{\n+  switch (a)\n+    {\n+    case A::Val0: break;\n+    case 1: break;\t\t// { dg-error \"\" }\n+    }\n+\n+  switch (i)\n+    {\n+    case A::Val0: break;\t// { dg-error \"\" }\n+    case 1: break;\n+    case 2.0: break;\n+    }\n+}"}]}