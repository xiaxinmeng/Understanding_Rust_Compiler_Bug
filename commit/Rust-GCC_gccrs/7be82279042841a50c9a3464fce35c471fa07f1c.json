{"sha": "7be82279042841a50c9a3464fce35c471fa07f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlODIyNzkwNDI4NDFhNTBjOWEzNDY0ZmNlMzVjNDcxZmEwN2YxYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-05-11T12:18:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-05-11T12:18:17Z"}, "message": "semantics.c (expand_or_defer_fn): Do not call c_record_cdtor_fn.\n\n\t* semantics.c (expand_or_defer_fn): Do not call c_record_cdtor_fn.\n\t* decl2.c (start_objects): ctors and dtors are no longer public.\n\t(cp_write_global_declarations): Do not call c_build_cdtor_fns.\n\n\t* cgraphunit.c: Include gt-cgraphunit.h\n\t(static_ctors, static_dtors): New static vars.\n\t(record_cdtor_fn, build_cdtor, cgraph_build_cdtor_fns): New functions,\n\tbased on implementation in c-common.c\n\t(cgraph_finalize_function): Call record_cdtor_fn.\n\t(cgraph_optimize): Call cgraph_build_cdtor_fns.\n\t* decl.c (finish_function): Do not call c_record_cdtor_fn.\n\t(c_write_global_declarations): Do not call c_build_cdtor_fns.\n\t* c-common.c (static_ctors, static_dtors, c_record_cdtor_fn,\n\tbuild_cdtor, c_build_cdtor_fns): Remove.\n\t* c-common.h (static_ctors, static_dtors, c_record_cdtor_fn,\n\tc_build_cdtor_fns): Remove prototype.\n\nFrom-SVN: r124618", "tree": {"sha": "49ba9f2d2dd225ffee2443da3491e4fa57aa17a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ba9f2d2dd225ffee2443da3491e4fa57aa17a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7be82279042841a50c9a3464fce35c471fa07f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be82279042841a50c9a3464fce35c471fa07f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be82279042841a50c9a3464fce35c471fa07f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be82279042841a50c9a3464fce35c471fa07f1c/comments", "author": null, "committer": null, "parents": [{"sha": "2a5fce6d487573f7f330d721da83fd9881fdb06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5fce6d487573f7f330d721da83fd9881fdb06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a5fce6d487573f7f330d721da83fd9881fdb06a"}], "stats": {"total": 187, "additions": 101, "deletions": 86}, "files": [{"sha": "1b53da5a2262b02403694c5ba047ba2816f030eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -1,3 +1,18 @@\n+2007-05-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c: Include gt-cgraphunit.h\n+\t(static_ctors, static_dtors): New static vars.\n+\t(record_cdtor_fn, build_cdtor, cgraph_build_cdtor_fns): New functions,\n+\tbased on implementation in c-common.c\n+\t(cgraph_finalize_function): Call record_cdtor_fn.\n+\t(cgraph_optimize): Call cgraph_build_cdtor_fns.\n+\t* decl.c (finish_function): Do not call c_record_cdtor_fn.\n+\t(c_write_global_declarations): Do not call c_build_cdtor_fns.\n+\t* c-common.c (static_ctors, static_dtors, c_record_cdtor_fn,\n+\tbuild_cdtor, c_build_cdtor_fns): Remove.\n+\t* c-common.h (static_ctors, static_dtors, c_record_cdtor_fn,\n+\tc_build_cdtor_fns): Remove prototype.\n+\n 2007-05-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR other/31852"}, {"sha": "5f1ce62ab52935fd2849db13edf72e5db6e261e2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -2370,7 +2370,8 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(C_COMMON_H) debug.h $(DIAGNOSTIC_H) \\\n-   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) ipa-prop.h\n+   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) ipa-prop.h \\\n+   gt-cgraphunit.h \n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(TREE_GIMPLE_H) \\\n    $(TREE_FLOW_H) tree-pass.h\n@@ -2965,7 +2966,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/ipa-reference.c $(srcdir)/tree-ssa-structalias.h \\\n   $(srcdir)/tree-ssa-structalias.c \\\n   $(srcdir)/omp-low.c $(srcdir)/varpool.c \\\n-  $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c \\\n+  $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c $(srcdir)/cgraphunit.c \\\n   @all_gtfiles@\n \n GTFILES_H = $(subst /,-, $(subst $(srcdir)/,gt-, $(subst .c,.h, \\"}, {"sha": "f93cac5f69658fe6a9e0528143f8ab47d2ffba91", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -670,11 +670,6 @@ const struct attribute_spec c_common_format_attribute_table[] =\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n-/* Functions called automatically at the beginning and end of execution.  */\n-\n-tree static_ctors;\n-tree static_dtors;\n-\n /* Push current bindings for the function name VAR_DECLS.  */\n \n void\n@@ -6994,61 +6989,6 @@ warn_for_unused_label (tree label)\n     }\n }\n \n-/* If FNDECL is a static constructor or destructor, add it to the list\n-   of functions to be called by the file scope initialization\n-   function.  */\n-\n-void\n-c_record_cdtor_fn (tree fndecl)\n-{\n-  if (targetm.have_ctors_dtors)\n-    return;\n-\n-  if (DECL_STATIC_CONSTRUCTOR (fndecl))\n-    static_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n-  if (DECL_STATIC_DESTRUCTOR (fndecl))\n-    static_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n-}\n-\n-/* Synthesize a function which calls all the global ctors or global\n-   dtors in this file.  This is only used for targets which do not\n-   support .ctors/.dtors sections.  FIXME: Migrate into cgraph.  */\n-static void\n-build_cdtor (int method_type, tree cdtors)\n-{\n-  tree body = 0;\n-\n-  if (!cdtors)\n-    return;\n-\n-  for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n-    append_to_statement_list (build_function_call (TREE_VALUE (cdtors), 0),\n-\t\t\t      &body);\n-\n-  cgraph_build_static_cdtor (method_type, body, DEFAULT_INIT_PRIORITY);\n-}\n-\n-/* Generate functions to call static constructors and destructors\n-   for targets that do not support .ctors/.dtors sections.  These\n-   functions have magic names which are detected by collect2.  */\n-\n-void\n-c_build_cdtor_fns (void)\n-{\n-  if (!targetm.have_ctors_dtors)\n-    {\n-      build_cdtor ('I', static_ctors); \n-      static_ctors = NULL_TREE;\n-      build_cdtor ('D', static_dtors); \n-      static_dtors = NULL_TREE;\n-    }\n-  else\n-    {\n-      gcc_assert (!static_ctors);\n-      gcc_assert (!static_dtors);\n-    }\n-}\n-\n #ifndef TARGET_HAS_TARGETCM\n struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;\n #endif"}, {"sha": "7cbc6d5d9a08af956899127de16bdd41d3ed156f", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -1005,11 +1005,4 @@ extern tree c_omp_remap_decl (tree, bool);\n #define GCC_DIAG_STYLE __gcc_cdiag__\n #endif\n \n-/* Functions called automatically at the beginning and end of execution.  */\n-extern GTY (()) tree static_ctors;\n-extern GTY (()) tree static_dtors;\n-\n-extern void c_record_cdtor_fn (tree);\n-extern void c_build_cdtor_fns (void);\n-\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "9feb25ce4c8ac8c5efb29c2e5bab189294ed835e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -6799,10 +6799,6 @@ finish_function (void)\n      info for the epilogue.  */\n   cfun->function_end_locus = input_location;\n \n-  /* Keep track of functions declared with the \"constructor\" and\n-     \"destructor\" attribute.  */\n-  c_record_cdtor_fn (fndecl);\n-\n   /* Finalize the ELF visibility for the function.  */\n   c_determine_visibility (fndecl);\n \n@@ -7923,10 +7919,6 @@ c_write_global_declarations (void)\n     c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n   c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n \n-  /* Call functions declared with the \"constructor\" or \"destructor\"\n-     attribute.  */\n-  c_build_cdtor_fns ();\n-\n   /* We're done parsing; proceed to optimize and emit assembly.\n      FIXME: shouldn't be the front end's responsibility to call this.  */\n   cgraph_optimize ();"}, {"sha": "7a043d0edea0a5fa1eaee7d9c3144c28ed9699f3", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -168,6 +168,75 @@ static void cgraph_output_pending_asms (void);\n \n static FILE *cgraph_dump_file;\n \n+static GTY (()) tree static_ctors;\n+static GTY (()) tree static_dtors;\n+\n+/* When target does not have ctors and dtors, we call all constructor\n+   and destructor by special initialization/destruction functio\n+   recognized by collect2.  \n+   \n+   When we are going to build this function, collect all constructors and\n+   destructors and turn them into normal functions.  */\n+\n+static void\n+record_cdtor_fn (tree fndecl)\n+{\n+  if (targetm.have_ctors_dtors)\n+    return;\n+\n+  if (DECL_STATIC_CONSTRUCTOR (fndecl))\n+    {\n+      static_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n+      DECL_STATIC_CONSTRUCTOR (fndecl) = 0;\n+      cgraph_mark_reachable_node (cgraph_node (fndecl));\n+    }\n+  if (DECL_STATIC_DESTRUCTOR (fndecl))\n+    {\n+      static_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n+      DECL_STATIC_DESTRUCTOR (fndecl) = 0;\n+      cgraph_mark_reachable_node (cgraph_node (fndecl));\n+    }\n+}\n+\n+/* Synthesize a function which calls all the global ctors or global\n+   dtors in this file.  This is only used for targets which do not\n+   support .ctors/.dtors sections.  */\n+static void\n+build_cdtor (int method_type, tree cdtors)\n+{\n+  tree body = 0;\n+\n+  if (!cdtors)\n+    return;\n+\n+  for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n+    append_to_statement_list (build_function_call_expr (TREE_VALUE (cdtors), 0),\n+\t\t\t      &body);\n+\n+  cgraph_build_static_cdtor (method_type, body, DEFAULT_INIT_PRIORITY);\n+}\n+\n+/* Generate functions to call static constructors and destructors\n+   for targets that do not support .ctors/.dtors sections.  These\n+   functions have magic names which are detected by collect2.  */\n+\n+static void\n+cgraph_build_cdtor_fns (void)\n+{\n+  if (!targetm.have_ctors_dtors)\n+    {\n+      build_cdtor ('I', static_ctors); \n+      static_ctors = NULL_TREE;\n+      build_cdtor ('D', static_dtors); \n+      static_dtors = NULL_TREE;\n+    }\n+  else\n+    {\n+      gcc_assert (!static_ctors);\n+      gcc_assert (!static_dtors);\n+    }\n+}\n+\n /* Determine if function DECL is needed.  That is, visible to something\n    either outside this translation unit, something magic in the system\n    configury, or (if not doing unit-at-a-time) to something we havn't\n@@ -458,6 +527,7 @@ cgraph_finalize_function (tree decl, bool nested)\n   node->decl = decl;\n   node->local.finalized = true;\n   node->lowered = DECL_STRUCT_FUNCTION (decl)->cfg != NULL;\n+  record_cdtor_fn (node->decl);\n   if (node->nested)\n     lower_nested_functions (decl);\n   gcc_assert (!node->nested);\n@@ -1222,6 +1292,10 @@ cgraph_optimize (void)\n #ifdef ENABLE_CHECKING\n   verify_cgraph ();\n #endif\n+\n+  /* Call functions declared with the \"constructor\" or \"destructor\"\n+     attribute.  */\n+  cgraph_build_cdtor_fns ();\n   if (!flag_unit_at_a_time)\n     {\n       cgraph_assemble_pending_functions ();\n@@ -1572,3 +1646,5 @@ save_inline_function_body (struct cgraph_node *node)\n #endif\n   return first_clone;\n }\n+\n+#include \"gt-cgraphunit.h\""}, {"sha": "b63882782be14f5bf0a638f26b81fcd306e69622", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -1,3 +1,9 @@\n+2007-05-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* semantics.c (expand_or_defer_fn): Do not call c_record_cdtor_fn.\n+\t* decl2.c (start_objects): ctors and dtors are no longer public.\n+\t(cp_write_global_declarations): Do not call c_build_cdtor_fns.\n+\t\n 2007-05-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* typeck.c (build_unary_op): Remove code that used to"}, {"sha": "9eb6fd5c1ce70a1619396660bb8f9fdd028df944", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -2333,9 +2333,7 @@ start_objects (int method_type, int initp)\n \t\t\t\t\t\t void_list_node));\n   start_preparsed_function (fndecl, /*attrs=*/NULL_TREE, SF_PRE_PARSED);\n \n-  /* It can be a static function as long as collect2 does not have\n-     to scan the object file to find its ctor/dtor routine.  */\n-  TREE_PUBLIC (current_function_decl) = ! targetm.have_ctors_dtors;\n+  TREE_PUBLIC (current_function_decl) = 0;\n \n   /* Mark this declaration as used to avoid spurious warnings.  */\n   TREE_USED (current_function_decl) = 1;\n@@ -3299,8 +3297,6 @@ cp_write_global_declarations (void)\n   if (priority_info_map)\n     splay_tree_delete (priority_info_map);\n \n-  c_build_cdtor_fns ();\n-\n   /* Generate any missing aliases.  */\n   maybe_apply_pending_pragma_weaks ();\n "}, {"sha": "a484c0533533b17070ed8ed7c36ff5ef20ef7e28", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be82279042841a50c9a3464fce35c471fa07f1c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7be82279042841a50c9a3464fce35c471fa07f1c", "patch": "@@ -3188,10 +3188,6 @@ expand_or_defer_fn (tree fn)\n       return;\n     }\n \n-  /* Keep track of functions declared with the \"constructor\" and\n-     \"destructor\" attribute.  */\n-  c_record_cdtor_fn (fn);\n-\n   /* We make a decision about linkage for these functions at the end\n      of the compilation.  Until that point, we do not want the back\n      end to output them -- but we do want it to see the bodies of"}]}