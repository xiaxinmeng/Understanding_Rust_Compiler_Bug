{"sha": "604b384dd4580785292d8706719d51e8e1f44295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0YjM4NGRkNDU4MDc4NTI5MmQ4NzA2NzE5ZDUxZThlMWY0NDI5NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-01T19:12:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-01T19:12:39Z"}, "message": "iomanip (get_money, put_money): Add in C++0x mode; tidy.\n\n2010-03-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/iomanip (get_money, put_money): Add in C++0x mode; tidy.\n\t* testsuite/27_io/manipulators/extended/get_money/char/1.cc: New.\n\t* testsuite/27_io/manipulators/extended/get_money/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/27_io/manipulators/extended/put_money/char/1.cc: Likewise.\n\t* testsuite/27_io/manipulators/extended/put_money/wchar_t/1.cc:\n\tLikewise.\n\nFrom-SVN: r157153", "tree": {"sha": "cc554d79f21de8d5e8ecd3f6837f7c2a63cd3cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc554d79f21de8d5e8ecd3f6837f7c2a63cd3cac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604b384dd4580785292d8706719d51e8e1f44295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604b384dd4580785292d8706719d51e8e1f44295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604b384dd4580785292d8706719d51e8e1f44295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604b384dd4580785292d8706719d51e8e1f44295/comments", "author": null, "committer": null, "parents": [{"sha": "44de0937abfacd07646dc7d0331c0aa345494470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44de0937abfacd07646dc7d0331c0aa345494470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44de0937abfacd07646dc7d0331c0aa345494470"}], "stats": {"total": 331, "additions": 293, "deletions": 38}, "files": [{"sha": "0c5e002653ae2b04b57bf8b273e43e0d62f8dcec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=604b384dd4580785292d8706719d51e8e1f44295", "patch": "@@ -1,3 +1,13 @@\n+2010-03-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/iomanip (get_money, put_money): Add in C++0x mode; tidy.\n+\t* testsuite/27_io/manipulators/extended/get_money/char/1.cc: New.\n+\t* testsuite/27_io/manipulators/extended/get_money/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/manipulators/extended/put_money/char/1.cc: Likewise.\n+\t* testsuite/27_io/manipulators/extended/put_money/wchar_t/1.cc:\n+\tLikewise.\n+\n 2010-03-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/atomicfwd_cxx.h: Add typedefs to group."}, {"sha": "3dfa2a71a90fc2ceeb57ba95bff2ae8844ffadc0", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 91, "deletions": 38, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=604b384dd4580785292d8706719d51e8e1f44295", "patch": "@@ -1,7 +1,7 @@\n // Standard stream manipulators -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-// 2006, 2007, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,6 +41,10 @@\n #include <iosfwd>\n #include <bits/ios_base.h>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <locale>\n+#endif\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // [27.6.3] standard manipulators\n@@ -57,11 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   inline _Resetiosflags \n   resetiosflags(ios_base::fmtflags __mask)\n-  { \n-    _Resetiosflags __x; \n-    __x._M_mask = __mask; \n-    return __x; \n-  }\n+  { return { __mask }; }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_istream<_CharT, _Traits>& \n@@ -91,11 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   inline _Setiosflags \n   setiosflags(ios_base::fmtflags __mask)\n-  { \n-    _Setiosflags __x; \n-    __x._M_mask = __mask; \n-    return __x; \n-  }\n+  { return { __mask }; }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_istream<_CharT, _Traits>& \n@@ -126,11 +122,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   inline _Setbase \n   setbase(int __base)\n-  { \n-    _Setbase __x; \n-    __x._M_base = __base; \n-    return __x; \n-  }\n+  { return { __base }; }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_istream<_CharT, _Traits>& \n@@ -155,7 +147,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n   \n \n-  template<typename _CharT> \n+  template<typename _CharT>\n     struct _Setfill { _CharT _M_c; };\n \n   /**\n@@ -165,14 +157,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  Sent to a stream object, this manipulator calls @c fill(c) for that\n    *  object.\n   */\n-  template<typename _CharT> \n-    inline _Setfill<_CharT> \n+  template<typename _CharT>\n+    inline _Setfill<_CharT>\n     setfill(_CharT __c)\n-    { \n-      _Setfill<_CharT> __x; \n-      __x._M_c = __c; \n-      return __x; \n-    }\n+    { return { __c }; }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_istream<_CharT, _Traits>& \n@@ -202,11 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   inline _Setprecision \n   setprecision(int __n)\n-  { \n-    _Setprecision __x; \n-    __x._M_n = __n; \n-    return __x; \n-  }\n+  { return { __n }; }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_istream<_CharT, _Traits>& \n@@ -236,28 +220,97 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   inline _Setw \n   setw(int __n)\n-  { \n-    _Setw __x; \n-    __x._M_n = __n; \n-    return __x; \n-  }\n+  { return { __n }; }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_istream<_CharT, _Traits>& \n     operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)\n-    { \n-      __is.width(__f._M_n); \n+    {\n+      __is.width(__f._M_n);\n       return __is; \n     }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>& \n     operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)\n-    { \n-      __os.width(__f._M_n); \n+    {\n+      __os.width(__f._M_n);\n       return __os; \n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  \n+  template<typename _MoneyT>\n+    struct _Get_money { _MoneyT& _M_mon; bool _M_intl; };\n+\n+  /**\n+   *  @brief  Extended manipulator for extracting money.\n+   *  @param  mon  Either long double or a specialization of @c basic_string.\n+   *  @param  intl A bool indicating whether international format \n+   *               is to be used.\n+   *\n+   *  Sent to a stream object, this manipulator extracts @a mon.\n+  */\n+  template<typename _MoneyT>\n+    inline _Get_money<_MoneyT>\n+    get_money(_MoneyT& __mon, bool __intl = false)\n+    { return { __mon, __intl }; }\n+\n+  template<typename _CharT, typename _Traits, typename _MoneyT>\n+    basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __is, _Get_money<_MoneyT> __f)\n+    {\n+      typedef istreambuf_iterator<_CharT, _Traits> _Iter;\n+      typedef money_get<_CharT, _Iter> _MoneyGet;\n+      \n+      ios_base::iostate __err = ios_base::goodbit;\n+      const _MoneyGet& __mg = use_facet<_MoneyGet>(__is.getloc());\n+\n+      __mg.get(_Iter(__is.rdbuf()), _Iter(), __f._M_intl,\n+\t       __is, __err, __f._M_mon);\n+\n+      if (ios_base::goodbit != __err)\n+\t__is.setstate(__err);\n+\n+      return __is; \n+    }\n+\n+\n+  template<typename _MoneyT>\n+    struct _Put_money { const _MoneyT& _M_mon; bool _M_intl; };\n+\n+  /**\n+   *  @brief  Extended manipulator for inserting money.\n+   *  @param  mon  Either long double or a specialization of @c basic_string.\n+   *  @param  intl A bool indicating whether international format \n+   *               is to be used.\n+   *\n+   *  Sent to a stream object, this manipulator inserts @a mon.\n+  */\n+  template<typename _MoneyT>\n+    inline _Put_money<_MoneyT>\n+    put_money(const _MoneyT& __mon, bool __intl = false)\n+    { return { __mon, __intl }; }\n+\n+  template<typename _CharT, typename _Traits, typename _MoneyT>\n+    basic_ostream<_CharT, _Traits>& \n+    operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)\n+    {\n+      typedef ostreambuf_iterator<_CharT, _Traits> _Iter;\n+      typedef money_put<_CharT, _Iter> _MoneyPut;\n+      \n+      const _MoneyPut& __mp = use_facet<_MoneyPut>(__os.getloc());\n+      const _Iter __end = __mp.put(_Iter(__os.rdbuf()), __f._M_intl,\n+\t\t\t\t   __os, __os.fill(), __f._M_mon);\n+\n+      if (__end.failed())\n+\t__os.setstate(ios_base::badbit);\n+\n+      return __os; \n+    }\n+\n+#endif\n+\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB:  This syntax is a GNU extension."}, {"sha": "4e52f9a69e36f9b7bf38788f791a156049fe10e2", "filename": "libstdc++-v3/testsuite/27_io/manipulators/extended/get_money/char/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fget_money%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fget_money%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fget_money%2Fchar%2F1.cc?ref=604b384dd4580785292d8706719d51e8e1f44295", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-namedlocale \"\" }\n+\n+// 2010-03-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::locale loc_de = std::locale(\"de_DE@euro\");\n+\n+  std::istringstream iss;\n+  iss.imbue(loc_de);\n+\n+  iss.str(\"7200000000,00 \");\n+\n+  std::string str;\n+  iss >> std::get_money(str);\n+\n+  VERIFY( str == \"720000000000\" );\n+  VERIFY( iss.eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e4f6074c08d980b3e0ae602c50aaeebe286f8906", "filename": "libstdc++-v3/testsuite/27_io/manipulators/extended/get_money/wchar_t/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fget_money%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fget_money%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fget_money%2Fwchar_t%2F1.cc?ref=604b384dd4580785292d8706719d51e8e1f44295", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-namedlocale \"\" }\n+\n+// 2010-03-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::locale loc_de = std::locale(\"de_DE@euro\");\n+\n+  std::wistringstream iss;\n+  iss.imbue(loc_de);\n+\n+  iss.str(L\"7200000000,00 \");\n+\n+  std::wstring str;\n+  iss >> get_money(str);\n+\n+  VERIFY( str == L\"720000000000\" );\n+  VERIFY( iss.eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4a49ca1ce318129d12852cfedbe47def63848ab2", "filename": "libstdc++-v3/testsuite/27_io/manipulators/extended/put_money/char/1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fput_money%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fput_money%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fput_money%2Fchar%2F1.cc?ref=604b384dd4580785292d8706719d51e8e1f44295", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-namedlocale \"\" }\n+\n+// 2010-03-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::locale loc_de = std::locale(\"de_DE@euro\");\n+\n+  std::ostringstream oss;\n+  oss.imbue(loc_de);\n+\n+  const std::string str(\"720000000000\");\n+  oss << std::put_money(str);\n+\n+  VERIFY( oss.str() == \"7.200.000.000,00 \" );\n+  VERIFY( oss.good() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bfb03efcf8b2a55e0257d05f2fa410436f899bbe", "filename": "libstdc++-v3/testsuite/27_io/manipulators/extended/put_money/wchar_t/1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fput_money%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604b384dd4580785292d8706719d51e8e1f44295/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fput_money%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fextended%2Fput_money%2Fwchar_t%2F1.cc?ref=604b384dd4580785292d8706719d51e8e1f44295", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-namedlocale \"\" }\n+\n+// 2010-03-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::locale loc_de = std::locale(\"de_DE@euro\");\n+\n+  std::wostringstream oss;\n+  oss.imbue(loc_de);\n+\n+  const std::wstring str(L\"720000000000\");\n+  oss << std::put_money(str);\n+\n+  VERIFY( oss.str() == L\"7.200.000.000,00 \" );\n+  VERIFY( oss.good() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}