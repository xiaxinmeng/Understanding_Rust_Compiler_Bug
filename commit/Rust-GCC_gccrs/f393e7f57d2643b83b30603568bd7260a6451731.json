{"sha": "f393e7f57d2643b83b30603568bd7260a6451731", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5M2U3ZjU3ZDI2NDNiODNiMzA2MDM1NjhiZDcyNjBhNjQ1MTczMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-09-05T08:34:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-09-05T08:34:00Z"}, "message": "re PR tree-optimization/28935 (Segfault in  operand_equal_p with -ftree-vectorize -O3)\n\n2006-09-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/28935\n\t* tree-ssa-ccp.c (fold_stmt_r): Make sure to fold the condition\n\tof a COND_EXPR.\n\n\t* gcc.dg/pr28935.c: New testcase.\n\nFrom-SVN: r116695", "tree": {"sha": "80e10e34889c4b3bd7379e99b91ee8e73923b945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80e10e34889c4b3bd7379e99b91ee8e73923b945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f393e7f57d2643b83b30603568bd7260a6451731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f393e7f57d2643b83b30603568bd7260a6451731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f393e7f57d2643b83b30603568bd7260a6451731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f393e7f57d2643b83b30603568bd7260a6451731/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "366f16226f3a030c4aada829b7665bd4654655aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366f16226f3a030c4aada829b7665bd4654655aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366f16226f3a030c4aada829b7665bd4654655aa"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "b4490c4f8cf160f79d93e1cbe0e89294dffc8b9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f393e7f57d2643b83b30603568bd7260a6451731", "patch": "@@ -1,3 +1,9 @@\n+2006-09-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28935\n+\t* tree-ssa-ccp.c (fold_stmt_r): Make sure to fold the condition\n+\tof a COND_EXPR.\n+\n 2006-09-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR rtl-optimization/27616"}, {"sha": "1a4cda0f8c6b40f2134aa3385a9f7bb4849c7a0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f393e7f57d2643b83b30603568bd7260a6451731", "patch": "@@ -1,3 +1,8 @@\n+2006-09-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28935\n+\t* gcc.dg/pr28935.c: New testcase.\n+\n 2006-09-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/execute/20060905-1.c: New test."}, {"sha": "9a0e70ecf68e8c9d718b46666d9cba3c6e83cbe8", "filename": "gcc/testsuite/gcc.dg/pr28935.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28935.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28935.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28935.c?ref=f393e7f57d2643b83b30603568bd7260a6451731", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ftree-vectorize\" } */\n+\n+int col[8];\n+int extend_options(int w, int h, int *map, int x, int y, int index)\n+{\n+  int dx, dy;\n+  for (dx = -1; dx <= +1; dx++)\n+    {\n+      int index = (dy < 0 ? 6-dx : dy > 0 ? 2+dx : 2*(1+dx));\n+      if (x+dx >= 0 && x+dx < w && y+dy >= 0 && y+dy < h)\n+        col[index] = map[(y+dy)*w+(x+dx)];\n+      col[index] = -1;\n+    }\n+}"}, {"sha": "8c31a861a8b88be1fa0293b120b59e7a9f653814", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f393e7f57d2643b83b30603568bd7260a6451731/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=f393e7f57d2643b83b30603568bd7260a6451731", "patch": "@@ -2043,6 +2043,18 @@ fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n       t = maybe_fold_tmr (expr);\n       break;\n \n+    case COND_EXPR:\n+      if (COMPARISON_CLASS_P (TREE_OPERAND (expr, 0)))\n+        {\n+\t  tree op0 = TREE_OPERAND (expr, 0);\n+          tree tem = fold_binary (TREE_CODE (op0), TREE_TYPE (op0),\n+\t\t\t\t  TREE_OPERAND (op0, 0), TREE_OPERAND (op0, 1));\n+\t  if (tem && is_gimple_condexpr (tem))\n+\t    TREE_OPERAND (expr, 0) = tem;\n+\t  t = expr;\n+          break;\n+        }\n+\n     default:\n       return NULL_TREE;\n     }"}]}