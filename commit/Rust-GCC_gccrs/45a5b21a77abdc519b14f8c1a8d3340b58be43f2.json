{"sha": "45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhNWIyMWE3N2FiZGM1MTliMTRmOGMxYThkMzM0MGI1OGJlNDNmMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-12-31T23:53:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-31T23:53:57Z"}, "message": "re PR tree-optimization/51683 (__builtin_memcpy etc. with constant first argument optimized away by ccp)\n\n\tPR tree-optimization/51683\n\t* tree-ssa-propagate.c (substitute_and_fold): Don't optimize away\n\tcalls with side-effects.\n\t* tree-ssa-ccp.c (ccp_fold_stmt): Likewise.\n\n\t* gcc.dg/pr51683.c: New test.\n\nFrom-SVN: r182761", "tree": {"sha": "eae0d52d578dbcd38c56a08992fb9bb1ddb7b2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae0d52d578dbcd38c56a08992fb9bb1ddb7b2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f2ffb4b99ccfb64adc0edc9998329ee9de32eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2ffb4b99ccfb64adc0edc9998329ee9de32eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2ffb4b99ccfb64adc0edc9998329ee9de32eff"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "fec1dec222150512cd5a794763906eb5385c54ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "patch": "@@ -1,3 +1,10 @@\n+2012-01-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51683\n+\t* tree-ssa-propagate.c (substitute_and_fold): Don't optimize away\n+\tcalls with side-effects.\n+\t* tree-ssa-ccp.c (ccp_fold_stmt): Likewise.\n+\n 2011-12-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* cselib.h (cselib_add_permanent_equiv): Declare."}, {"sha": "6e81414127565a0f3092f5792de28cec7a7a7ad6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "patch": "@@ -1,3 +1,8 @@\n+2012-01-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51683\n+\t* gcc.dg/pr51683.c: New test.\n+\n 2011-12-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51397"}, {"sha": "f5a4a8be4859b87192d5aa916be3965782ad101c", "filename": "gcc/testsuite/gcc.dg/pr51683.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51683.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51683.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51683.c?ref=45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/51683 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+static inline void *\n+bar (void *p, void *q, int r)\n+{\n+  return __builtin_memcpy (p, q, r);\n+}\n+\n+void *\n+foo (void *p)\n+{\n+  return bar ((void *) 0x12345000, p, 256);\n+}\n+\n+/* { dg-final { scan-tree-dump \"memcpy\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "738606fad0234751c3aa437c580c2964119c9d8d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "patch": "@@ -1,6 +1,6 @@\n /* Conditional constant propagation pass for the GNU compiler.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010, 2011 Free Software Foundation, Inc.\n+   2010, 2011, 2012 Free Software Foundation, Inc.\n    Adapted from original RTL SSA-CCP by Daniel Berlin <dberlin@dberlin.org>\n    Adapted to GIMPLE trees by Diego Novillo <dnovillo@redhat.com>\n \n@@ -1878,6 +1878,7 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n     case GIMPLE_CALL:\n       {\n \ttree lhs = gimple_call_lhs (stmt);\n+\tint flags = gimple_call_flags (stmt);\n \ttree val;\n \ttree argt;\n \tbool changed = false;\n@@ -1888,7 +1889,10 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n \t   type issues.  */\n \tif (lhs\n \t    && TREE_CODE (lhs) == SSA_NAME\n-\t    && (val = get_constant_value (lhs)))\n+\t    && (val = get_constant_value (lhs))\n+\t    /* Don't optimize away calls that have side-effects.  */\n+\t    && (flags & (ECF_CONST|ECF_PURE)) != 0\n+\t    && (flags & ECF_LOOPING_CONST_OR_PURE) == 0)\n \t  {\n \t    tree new_rhs = unshare_expr (val);\n \t    bool res;"}, {"sha": "a057ad72bed58bf5b020b7d5973b812383b647e9", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a5b21a77abdc519b14f8c1a8d3340b58be43f2/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=45a5b21a77abdc519b14f8c1a8d3340b58be43f2", "patch": "@@ -1,5 +1,5 @@\n /* Generic SSA value propagation engine.\n-   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -1056,6 +1056,12 @@ substitute_and_fold (ssa_prop_get_value_fn get_value_fn,\n \t  }\n \telse if (is_gimple_call (def_stmt))\n \t  {\n+\t    int flags = gimple_call_flags (def_stmt);\n+\n+\t    /* Don't optimize away calls that have side-effects.  */\n+\t    if ((flags & (ECF_CONST|ECF_PURE)) == 0\n+\t\t|| (flags & ECF_LOOPING_CONST_OR_PURE))\n+\t      continue;\n \t    if (update_call_from_tree (&gsi, val)\n \t\t&& maybe_clean_or_replace_eh_stmt (def_stmt, gsi_stmt (gsi)))\n \t      gimple_purge_dead_eh_edges (gimple_bb (gsi_stmt (gsi)));"}]}