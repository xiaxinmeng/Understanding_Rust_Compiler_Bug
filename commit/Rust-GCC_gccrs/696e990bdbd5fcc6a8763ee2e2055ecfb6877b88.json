{"sha": "696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2ZTk5MGJkYmQ1ZmNjNmE4NzYzZWUyZTIwNTVlY2ZiNjg3N2I4OA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2007-01-07T03:45:24Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2007-01-07T03:45:24Z"}, "message": "avr-protos.h (call_insn_operand): Delete prototype.\n\n\t* config/avr/avr-protos.h (call_insn_operand): Delete prototype.\n\t* config/avr/avr.c (call_insn_operand): Delete function.\n\t* config/avr/avr.md (*pushqi, *pushhi, *pushsi, *pushsf): Use REG_SP\n\tinstead of register number. Use predicates.\n\t* config/avr/predicates.md (const0_operand, reg_or_0_operand, \n\tcall_insn_operand): Add.\n\nFrom-SVN: r120546", "tree": {"sha": "a1a4e39b164a18d47b91ca8cf42b38b86e873a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1a4e39b164a18d47b91ca8cf42b38b86e873a2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/comments", "author": null, "committer": null, "parents": [{"sha": "b7fdd4ed69ebb0a413c6f4bb29c570c9b97a6e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fdd4ed69ebb0a413c6f4bb29c570c9b97a6e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fdd4ed69ebb0a413c6f4bb29c570c9b97a6e94"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "fb3767539449749aa05fe418f5a0585068acbf77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "patch": "@@ -1,3 +1,12 @@\n+2007-01-07  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr-protos.h (call_insn_operand): Delete prototype.\n+\t* config/avr/avr.c (call_insn_operand): Delete function.\n+\t* config/avr/avr.md (*pushqi, *pushhi, *pushsi, *pushsf): Use REG_SP\n+\tinstead of register number. Use predicates.\n+\t* config/avr/predicates.md (const0_operand, reg_or_0_operand, \n+\tcall_insn_operand): Add.\n+\n 2007-01-06  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-pass.h (pass_build_cgraph_edges): Declare."}, {"sha": "ef084f06593d7a34c617c0ec24ddb6e0fcff912f", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes for exported functions defined in avr.c\n    \n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -112,7 +112,6 @@ extern int test_hard_reg_class (enum reg_class class, rtx x);\n extern int jump_over_one_insn_p (rtx insn, rtx dest);\n \n extern int avr_hard_regno_mode_ok (int regno, enum machine_mode mode);\n-extern int call_insn_operand (rtx op, enum machine_mode mode);\n extern void final_prescan_insn (rtx insn, rtx *operand, int num_operands);\n extern int avr_simplify_comparison_p (enum machine_mode mode,\n \t\t\t\t      RTX_CODE operator, rtx x);"}, {"sha": "41142a4fc6463a20fd67196de82e3a247267a3c8", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for ATMEL AVR micro controllers\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -1170,22 +1170,6 @@ print_operand (FILE *file, rtx x, int code)\n     print_operand_address (file, x);\n }\n \n-/* Recognize operand OP of mode MODE used in call instructions.  */\n-\n-int\n-call_insn_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  if (GET_CODE (op) == MEM)\n-    {\n-      rtx inside = XEXP (op, 0);\n-      if (register_operand (inside, Pmode))\n-        return 1;\n-      if (CONSTANT_ADDRESS_P (inside))\n-        return 1;\n-    }\n-  return 0;\n-}\n-\n /* Update the condition code in the INSN.  */\n \n void"}, {"sha": "38cee2d4d48bd5c9dc6d9aead53cfb7b73d8268b", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "patch": "@@ -1,7 +1,7 @@\n ;; -*- Mode: Scheme -*-\n ;;   Machine description for GNU compiler,\n ;;   for ATMEL AVR micro controllers.\n-;;   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006\n+;;   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007\n ;;   Free Software Foundation, Inc.\n ;;   Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -145,35 +145,35 @@\n   [(set_attr \"length\" \"5\")])\n \n (define_insn \"*pushqi\"\n-  [(set (mem:QI (post_dec (reg:HI 32)))\n-        (match_operand:QI 0 \"nonmemory_operand\" \"r,L\"))]\n-  \"(operands[0] == const0_rtx || register_operand (operands[0], QImode))\"\n+  [(set (mem:QI (post_dec (reg:HI REG_SP)))\n+        (match_operand:QI 0 \"reg_or_0_operand\" \"r,L\"))]\n+  \"\"\n   \"@\n \tpush %0\n \tpush __zero_reg__\"\n   [(set_attr \"length\" \"1,1\")])\n \n \n (define_insn \"*pushhi\"\n-  [(set (mem:HI (post_dec (reg:HI 32)))\n-        (match_operand:HI 0 \"nonmemory_operand\" \"r,L\"))]\n-  \"(operands[0] == const0_rtx || register_operand (operands[0], HImode))\"\n+  [(set (mem:HI (post_dec (reg:HI REG_SP)))\n+        (match_operand:HI 0 \"reg_or_0_operand\" \"r,L\"))]\n+  \"\"\n   \"@\n \tpush %B0\\;push %A0\n \tpush __zero_reg__\\;push __zero_reg__\"\n   [(set_attr \"length\" \"2,2\")])\n \n (define_insn \"*pushsi\"\n-  [(set (mem:SI (post_dec (reg:HI 32)))\n-        (match_operand:SI 0 \"nonmemory_operand\" \"r,L\"))]\n-  \"(operands[0] == const0_rtx || register_operand (operands[0], SImode))\"\n+  [(set (mem:SI (post_dec (reg:HI REG_SP)))\n+        (match_operand:SI 0 \"reg_or_0_operand\" \"r,L\"))]\n+  \"\"\n   \"@\n \tpush %D0\\;push %C0\\;push %B0\\;push %A0\n \tpush __zero_reg__\\;push __zero_reg__\\;push __zero_reg__\\;push __zero_reg__\"\n   [(set_attr \"length\" \"4,4\")])\n \n (define_insn \"*pushsf\"\n-  [(set (mem:SF (post_dec (reg:HI 32)))\n+  [(set (mem:SF (post_dec (reg:HI REG_SP)))\n         (match_operand:SF 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"push %D0"}, {"sha": "4a0dd1c0cba57670df9474941acba4470db6fcb8", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e990bdbd5fcc6a8763ee2e2055ecfb6877b88/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=696e990bdbd5fcc6a8763ee2e2055ecfb6877b88", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for ATMEL AVR micro controllers.\n-;; Copyright (C) 2006 Free Software Foundation, Inc.\n+;; Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -50,7 +50,17 @@\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) >= 0x40 \n                     && INTVAL (op) <= 0x60 - GET_MODE_SIZE (mode)\")))\n-       \n+\n+;; Return 1 if OP is the zero constant for MODE.\n+(define_predicate \"const0_operand\"\n+  (and (match_code \"const_int,const_double\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+;; Returns true if OP is either the constant zero or a register.\n+(define_predicate \"reg_or_0_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"const0_operand\")))\n+\n ;; Returns 1 if OP is a SYMBOL_REF.\n (define_predicate \"symbol_ref_operand\"\n   (match_code \"symbol_ref\"))\n@@ -83,3 +93,9 @@\n (define_predicate \"simple_comparison_operator\"\n   (and (match_operand 0 \"comparison_operator\")\n        (not (match_code \"gt,gtu,le,leu\"))))\n+\n+;; Return true if OP is a valid call operand.\n+(define_predicate \"call_insn_operand\"\n+  (and (match_code \"mem\")\n+       (ior (match_test \"register_operand (XEXP (op, 0), mode)\")\n+            (match_test \"CONSTANT_ADDRESS_P (XEXP (op, 0))\"))))"}]}