{"sha": "ba885ec559ca39e0dc23641dbbe67cc0072378f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4ODVlYzU1OWNhMzllMGRjMjM2NDFkYmJlNjdjYzAwNzIzNzhmMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2010-09-09T14:12:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2010-09-09T14:12:57Z"}, "message": "configure.ac (gnu_indirect_function): New test.\n\n\t* configure.ac (gnu_indirect_function): New test.\n\t* configure: Rebuilt.\n\t* config.in (HAVE_GAS_INDIRECT_FUNCTION): New.\n\t* defaults.h (IFUNC_ASM_TYPE): Provide default.\n\n\t* doc/extend.texi (Function Attributes): Document ifunc.\n\t* varasm.c (do_assemble_alias): Deal with ifuncs too.\n\n\tc-family/\n\t* c-common.c (handle_alias_ifunc_attribute): New, broken out of\t...\n\t(handle_alias_attribute): ... here.\n\t(handle_ifunc_attribute): New.\n\n\ttestsuite/\n\t* lib/target-supports-dg.exp (dg-require-ifunc): New.\n\t* lib/target-supports.exp (check_ifunc_available): New.\n\t* gcc.dg/attr-ifunc-1.c: New.\n\t* gcc.dg/attr-ifunc-2.c: New.\n\t* gcc.dg/attr-ifunc-3.c: New.\n\t* gcc.dg/attr-ifunc-4.c: New.\n\t* gcc.dg/attr-ifunc-5.c: New.\n\t* testsuite/g++.dg/ext/attr-ifunc-1.C\n\t* testsuite/g++.dg/ext/attr-ifunc-2.C\n\t* testsuite/g++.dg/ext/attr-ifunc-3.C\n\t* testsuite/g++.dg/ext/attr-ifunc-4.C\n\nFrom-SVN: r164110", "tree": {"sha": "da6907a1c5c815841942c5773bfc6c02f7b889e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da6907a1c5c815841942c5773bfc6c02f7b889e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba885ec559ca39e0dc23641dbbe67cc0072378f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba885ec559ca39e0dc23641dbbe67cc0072378f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba885ec559ca39e0dc23641dbbe67cc0072378f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba885ec559ca39e0dc23641dbbe67cc0072378f3/comments", "author": null, "committer": null, "parents": [{"sha": "e3cdb7cf9a0d934b9cdc24d40d730141e5752f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3cdb7cf9a0d934b9cdc24d40d730141e5752f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3cdb7cf9a0d934b9cdc24d40d730141e5752f60"}], "stats": {"total": 577, "additions": 562, "deletions": 15}, "files": [{"sha": "c8bce534ca70544eb0bec1acfca2b036ab5a7fac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -1,3 +1,13 @@\n+2010-09-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* configure.ac (gnu_indirect_function): New test.\n+\t* configure: Rebuilt.\n+\t* config.in (HAVE_GAS_INDIRECT_FUNCTION): New.\n+\t* defaults.h (IFUNC_ASM_TYPE): Provide default.\n+\n+\t* doc/extend.texi (Function Attributes): Document ifunc.\n+\t* varasm.c (do_assemble_alias): Deal with ifuncs too.\n+\n 2010-09-09  Hariharan Sandanagobalane <hariharan@picochip.com>\n \n \t* config/picochip/picochip.c (picochip_reorg): Check for note_p for"}, {"sha": "6d3b024c4c08a1de89d0cdff2ef08a77280604a8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -1,3 +1,9 @@\n+2010-09-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-common.c (handle_alias_ifunc_attribute): New, broken out of\t...\n+\t(handle_alias_attribute): ... here.\n+\t(handle_ifunc_attribute): New.\n+\n 2010-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.h (do_warn_double_promotion): Declare."}, {"sha": "a3a332bb270b17dd5860841a821dbd21c957f62f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -327,6 +327,8 @@ static tree handle_mode_attribute (tree *, tree, tree, int, bool *);\n static tree handle_section_attribute (tree *, tree, tree, int, bool *);\n static tree handle_aligned_attribute (tree *, tree, tree, int, bool *);\n static tree handle_weak_attribute (tree *, tree, tree, int, bool *) ;\n+static tree handle_alias_ifunc_attribute (bool, tree *, tree, tree, bool *);\n+static tree handle_ifunc_attribute (tree *, tree, tree, int, bool *);\n static tree handle_alias_attribute (tree *, tree, tree, int, bool *);\n static tree handle_weakref_attribute (tree *, tree, tree, int, bool *) ;\n static tree handle_visibility_attribute (tree *, tree, tree, int,\n@@ -599,6 +601,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_aligned_attribute },\n   { \"weak\",                   0, 0, true,  false, false,\n \t\t\t      handle_weak_attribute },\n+  { \"ifunc\",                  1, 1, true,  false, false,\n+\t\t\t      handle_ifunc_attribute },\n   { \"alias\",                  1, 1, true,  false, false,\n \t\t\t      handle_alias_attribute },\n   { \"weakref\",                0, 1, true,  false, false,\n@@ -6595,6 +6599,12 @@ handle_weak_attribute (tree *node, tree name,\n       error (\"inline function %q+D cannot be declared weak\", *node);\n       *no_add_attrs = true;\n     }\n+  else if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (*node)))\n+    {\n+      error (\"indirect function %q+D cannot be declared weak\", *node);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n   else if (TREE_CODE (*node) == FUNCTION_DECL\n \t   || TREE_CODE (*node) == VAR_DECL)\n     declare_weak (*node);\n@@ -6604,16 +6614,18 @@ handle_weak_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n-/* Handle an \"alias\" attribute; arguments as in\n-   struct attribute_spec.handler.  */\n+/* Handle an \"alias\" or \"ifunc\" attribute; arguments as in\n+   struct attribute_spec.handler, except that IS_ALIAS tells us\n+   whether this is an alias as opposed to ifunc attribute.  */\n \n static tree\n-handle_alias_attribute (tree *node, tree name, tree args,\n-\t\t\tint ARG_UNUSED (flags), bool *no_add_attrs)\n+handle_alias_ifunc_attribute (bool is_alias, tree *node, tree name, tree args,\n+\t\t\t      bool *no_add_attrs)\n {\n   tree decl = *node;\n \n-  if (TREE_CODE (decl) != FUNCTION_DECL && TREE_CODE (decl) != VAR_DECL)\n+  if (TREE_CODE (decl) != FUNCTION_DECL\n+      && (!is_alias || TREE_CODE (decl) != VAR_DECL))\n     {\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n@@ -6626,9 +6638,18 @@ handle_alias_attribute (tree *node, tree name, tree args,\n       || (TREE_CODE (decl) != FUNCTION_DECL\n \t  && ! TREE_PUBLIC (decl) && DECL_INITIAL (decl)))\n     {\n-      error (\"%q+D defined both normally and as an alias\", decl);\n+      error (\"%q+D defined both normally and as %qE attribute\", decl, name);\n       *no_add_attrs = true;\n+      return NULL_TREE;\n     }\n+  else if (!is_alias\n+\t   && (lookup_attribute (\"weak\", DECL_ATTRIBUTES (decl)) \n+\t       || lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl))))\n+    {\n+      error (\"weak %q+D cannot be defined %qE\", decl, name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\t\t\t \n \n   /* Note that the very first time we process a nested declaration,\n      decl_function_context will not be set.  Indeed, *would* never\n@@ -6642,7 +6663,7 @@ handle_alias_attribute (tree *node, tree name, tree args,\n       id = TREE_VALUE (args);\n       if (TREE_CODE (id) != STRING_CST)\n \t{\n-\t  error (\"alias argument not a string\");\n+\t  error (\"attribute %qE argument not a string\", name);\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -6660,6 +6681,11 @@ handle_alias_attribute (tree *node, tree name, tree args,\n \t    DECL_EXTERNAL (decl) = 0;\n \t  TREE_STATIC (decl) = 1;\n \t}\n+\n+      if (!is_alias)\n+\t/* ifuncs are also aliases, so set that attribute too. */\n+\tDECL_ATTRIBUTES (decl)\n+\t  = tree_cons (get_identifier (\"alias\"), args, DECL_ATTRIBUTES (decl));\n     }\n   else\n     {\n@@ -6670,6 +6696,26 @@ handle_alias_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n+/* Handle an \"alias\" or \"ifunc\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_ifunc_attribute (tree *node, tree name, tree args,\n+\t\t\tint ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  return handle_alias_ifunc_attribute (false, node, name, args, no_add_attrs);\n+}\n+\n+/* Handle an \"alias\" or \"ifunc\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_alias_attribute (tree *node, tree name, tree args,\n+\t\t\tint ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  return handle_alias_ifunc_attribute (true, node, name, args, no_add_attrs);\n+}\n+\n /* Handle a \"weakref\" attribute; arguments as in struct\n    attribute_spec.handler.  */\n \n@@ -6691,6 +6737,13 @@ handle_weakref_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       return NULL_TREE;\n     }\n \n+  if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (*node)))\n+    {\n+      error (\"indirect function %q+D cannot be declared weakref\", *node);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n   /* The idea here is that `weakref(\"name\")' mutates into `weakref,\n      alias(\"name\")', and weakref without arguments, in turn,\n      implicitly adds weak. */"}, {"sha": "a03b65309dcfe1a7cbad6c8747e027ce86b7be09", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -968,6 +968,9 @@\n /* Define if your assembler and linker support .hidden. */\n #undef HAVE_GAS_HIDDEN\n \n+/* Define if your assembler supports indirect function type. */\n+#undef HAVE_GAS_INDIRECT_FUNCTION\n+\n /* Define if your assembler supports .lcomm with an alignment field. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GAS_LCOMM_WITH_ALIGNMENT"}, {"sha": "ebbead293e35f3f887e8bc930efb5595351fec8f", "filename": "gcc/configure", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -21327,6 +21327,48 @@ fi\n $as_echo \"$gcc_cv_as_hidden\" >&6; }\n \n \n+# gnu_indirect_function type is an extension proposed at\n+# http://groups.google/com/group/generic-abi/files. It allows dynamic runtime\n+# selection of function implementation\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for gnu_indirect_function\" >&5\n+$as_echo_n \"checking assembler for gnu_indirect_function... \" >&6; }\n+if test \"${gcc_cv_as_indirect_function+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_indirect_function=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 20 \\) \\* 1000 + 1`\n+  then gcc_cv_as_indirect_function=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo '\t.type  Foo, @gnu_indirect_function\n+Foo:' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_indirect_function=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_indirect_function\" >&5\n+$as_echo \"$gcc_cv_as_indirect_function\" >&6; }\n+\n+\n+if test $gcc_cv_as_indirect_function = yes ; then\n+\n+$as_echo \"#define HAVE_GAS_INDIRECT_FUNCTION 1\" >>confdefs.h\n+\n+fi\n+\n if test $in_tree_ld != yes ; then\n   ld_ver=`$gcc_cv_ld --version 2>/dev/null | sed 1q`\n   if test x\"$ld_is_gold\" = xyes; then"}, {"sha": "e39ab87542c9ab98b38ef93f482bbd694206bbf6", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -2158,6 +2158,19 @@ EOF\n     ;;\n esac])\n \n+# gnu_indirect_function type is an extension proposed at\n+# http://groups.google/com/group/generic-abi/files. It allows dynamic runtime\n+# selection of function implementation\n+gcc_GAS_CHECK_FEATURE(gnu_indirect_function, gcc_cv_as_indirect_function,\n+ [elf,2,20,1],,\n+[\t.type  Foo, @gnu_indirect_function\n+Foo:])\n+GCC_TARGET_TEMPLATE([HAVE_GAS_INDIRECT_FUNCTION])\n+if test $gcc_cv_as_indirect_function = yes ; then\n+  AC_DEFINE(HAVE_GAS_INDIRECT_FUNCTION, 1,\n+  [Define if your assembler supports indirect function type.])\n+fi\n+\n changequote(,)dnl\n if test $in_tree_ld != yes ; then\n   ld_ver=`$gcc_cv_ld --version 2>/dev/null | sed 1q`"}, {"sha": "62b8228247cc04e9ec5bf788ee67ff815307d9f4", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -142,6 +142,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n+#ifndef IFUNC_ASM_TYPE\n+#define IFUNC_ASM_TYPE \"gnu_indirect_function\"\n+#endif\n+\n #ifndef TLS_COMMON_ASM_OP\n #define TLS_COMMON_ASM_OP \".tls_common\"\n #endif"}, {"sha": "4f2cc07710116d60550468e3be9fc7dd30e0e09d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -1912,6 +1912,7 @@ the enclosing block.\n @cindex functions that do not pop the argument stack on the 386\n @cindex functions that have different compilation options on the 386\n @cindex functions that have different optimization options\n+@cindex functions that are dynamically resolved\n \n In GNU C, you declare certain things about functions called in your program\n which help the compiler optimize function calls and check your code more\n@@ -1927,13 +1928,13 @@ attributes are currently defined for functions on all targets:\n @code{nothrow}, @code{sentinel}, @code{format}, @code{format_arg},\n @code{no_instrument_function}, @code{section}, @code{constructor},\n @code{destructor}, @code{used}, @code{unused}, @code{deprecated},\n-@code{weak}, @code{malloc}, @code{alias}, @code{warn_unused_result},\n-@code{nonnull}, @code{gnu_inline}, @code{externally_visible},\n-@code{hot}, @code{cold}, @code{artificial}, @code{error} and\n-@code{warning}.  Several other attributes are defined for functions on\n-particular target systems.  Other attributes, including @code{section}\n-are supported for variables declarations (@pxref{Variable Attributes})\n-and for types (@pxref{Type Attributes}).\n+@code{weak}, @code{malloc}, @code{alias}, @code{ifunc},\n+@code{warn_unused_result}, @code{nonnull}, @code{gnu_inline},\n+@code{externally_visible}, @code{hot}, @code{cold}, @code{artificial},\n+@code{error} and @code{warning}.  Several other attributes are defined\n+for functions on particular target systems.  Other attributes,\n+including @code{section} are supported for variables declarations\n+(@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n \n GCC plugins may provide their own attributes.\n \n@@ -2585,6 +2586,51 @@ void __attribute__ ((interrupt, use_shadow_register_set,\n                      use_debug_exception_return)) v7 ();\n @end smallexample\n \n+@item ifunc (\"@var{resolver}\")\n+@cindex @code{ifunc} attribute\n+The @code{ifunc} attribute is used to mark a function as an indirect\n+function using the STT_GNU_IFUNC symbol type extension to the ELF\n+standard.  This allows the resolution of the symbol value to be\n+determined dynamically at load time, and an optimized version of the\n+routine can be selected for the particular processor or other system\n+characteristics determined then.  To use this attribute, first define\n+the implementation functions available, and a resolver function that\n+returns a pointer to the selected implementation function.  The\n+implementation functions' declarations must match the API of the\n+function being implemented, the resolver's declaration is be a\n+function returning pointer to void function returning void:\n+\n+@smallexample\n+void *my_memcpy (void *dst, const void *src, size_t len)\n+@{\n+  @dots{}\n+@}\n+\n+static void (*resolve_memcpy (void)) (void)\n+@{\n+  return my_memcpy; // we'll just always select this routine\n+@}\n+@end smallexample\n+\n+The exported header file declaring the function the user calls would\n+contain:\n+\n+@smallexample\n+extern void *memcpy (void *, const void *, size_t);\n+@end smallexample\n+\n+allowing the user to call this as a regular function, unaware of the\n+implementation.  Finally, the indirect function needs to be defined in\n+the same translation unit as the resolver function:\n+\n+@smallexample\n+void *memcpy (void *, const void *, size_t)\n+     __attribute__ ((ifunc (\"resolve_memcpy\")));\n+@end smallexample\n+\n+Indirect functions cannot be weak, and require a recent binutils (at\n+least version 2.20.1), and GNU C library (at least version 2.11.1).\n+\n @item interrupt_handler\n @cindex interrupt handler functions on the Blackfin, m68k, H8/300 and SH processors\n Use this attribute on the Blackfin, m68k, H8/300, H8/300H, H8S, and SH to"}, {"sha": "c252a1fbd3cb1f493429c40da18f2344e6340534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -1,3 +1,17 @@\n+2010-09-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* lib/target-supports-dg.exp (dg-require-ifunc): New.\n+\t* lib/target-supports.exp (check_ifunc_available): New.\n+\t* gcc.dg/attr-ifunc-1.c: New.\n+\t* gcc.dg/attr-ifunc-2.c: New.\n+\t* gcc.dg/attr-ifunc-3.c: New.\n+\t* gcc.dg/attr-ifunc-4.c: New.\n+\t* gcc.dg/attr-ifunc-5.c: New.\n+\t* testsuite/g++.dg/ext/attr-ifunc-1.C: New.\n+\t* testsuite/g++.dg/ext/attr-ifunc-2.C: New.\n+\t* testsuite/g++.dg/ext/attr-ifunc-3.C: New.\n+\t* testsuite/g++.dg/ext/attr-ifunc-4.C: New.\n+\n 2010-09-09  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/40386"}, {"sha": "d41fa7d3267c84d5ffa8143d0f0edf321bfcbde1", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-1.C?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-Wno-pmf-conversions\" } */\n+\n+#include <stdio.h>\n+\n+struct Klass\n+{\n+  int implementation ();\n+  int magic ();\n+  static void *resolver ();\n+};\n+\n+int Klass::implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+void *Klass::resolver (void)\n+{\n+  int (Klass::*pmf) () = &Klass::implementation;\n+  \n+  return (void *)(int (*)(Klass *))(((Klass *)0)->*pmf);\n+}\n+\n+int Klass::magic (void) __attribute__ ((ifunc (\"_ZN5Klass8resolverEv\")));\n+\n+int main ()\n+{\n+  Klass obj;\n+  \n+  return obj.magic () != 0;\n+}"}, {"sha": "e205a2a6a8d5d531a15b65bc536d900e0ef4c202", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-2.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-2.C?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-Wno-pmf-conversions\" } */\n+\n+#include <stdio.h>\n+\n+struct Klass\n+{\n+  int implementation ();\n+  int magic ();\n+  static void *resolver ();\n+};\n+\n+int Klass::implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+void *Klass::resolver (void)\n+{\n+  int (Klass::*pmf) () = &Klass::implementation;\n+  \n+  return (void *)(int (*)(Klass *))(((Klass *)0)->*pmf);\n+}\n+\n+int Klass::magic (void) __attribute__ ((ifunc (\"_ZN5Klass8resolverEv\")));\n+\n+struct Klassier : Klass\n+{\n+};\n+\n+int main ()\n+{\n+  Klassier obj;\n+  \n+  return obj.magic () != 0;\n+}"}, {"sha": "ba65976b96495ada26562c7fb2ecceef713fca10", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-3.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-3.C?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-Wno-pmf-conversions\" } */\n+\n+#include <stdio.h>\n+\n+struct Klass\n+{\n+  int implementation ();\n+  int magic ();\n+  static void *resolver ();\n+};\n+\n+int Klass::implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+void *Klass::resolver (void)\n+{\n+  int (Klass::*pmf) () = &Klass::implementation;\n+  \n+  return (void *)(int (*)(Klass *))(((Klass *)0)->*pmf);\n+}\n+\n+int Klass::magic (void) __attribute__ ((ifunc (\"_ZN5Klass8resolverEv\")));\n+\n+int Foo (Klass &obj, int (Klass::*pmf) ())\n+{\n+  return (obj.*pmf) ();\n+}\n+\n+int main ()\n+{\n+  Klass obj;\n+  \n+  return Foo (obj, &Klass::magic) != 0;\n+}"}, {"sha": "0cae41028b5d9c3d35a3995860df6b9ce66a97e1", "filename": "gcc/testsuite/g++.dg/ext/attr-ifunc-4.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-ifunc-4.C?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-Wno-pmf-conversions\" } */\n+\n+#include <stdio.h>\n+\n+struct Klass\n+{\n+  virtual int magic () = 0;\n+};\n+\n+struct Klassier : Klass\n+{\n+  int implementation ();\n+  int magic ();\n+  static void *resolver ();\n+};\n+\n+int Klassier::implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+void *Klassier::resolver (void)\n+{\n+  int (Klassier::*pmf) () = &Klassier::implementation;\n+  \n+  return (void *)(int (*)(Klassier *))(((Klassier *)0)->*pmf);\n+}\n+\n+int Klassier::magic (void) __attribute__ ((ifunc (\"_ZN8Klassier8resolverEv\")));\n+\n+int __attribute__ ((weak)) Foo (Klass &base)\n+{\n+  return base.magic ();\n+}\n+\n+int main ()\n+{\n+  Klassier obj;\n+  \n+  return Foo (obj) != 0;\n+}"}, {"sha": "f9c6482298c70a11bbeff85fe2f7288c9e7887dd", "filename": "gcc/testsuite/gcc.dg/attr-ifunc-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-1.c?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"\" } */\n+\n+#include <stdio.h>\n+\n+static int implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+static void *resolver (void)\n+{\n+  return (void *)implementation;\n+}\n+\n+extern int magic (void) __attribute__ ((ifunc (\"resolver\")));\n+\n+int main ()\n+{\n+  return magic () != 0;\n+}"}, {"sha": "f717315f3d49c7f687141df97b27b0e955cb39d7", "filename": "gcc/testsuite/gcc.dg/attr-ifunc-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-2.c?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-require-ifunc \"\" } */\n+\n+static void *resolver ()\n+{\n+  return 0;\n+}\n+\n+extern int magic (void)  /* { dg-message \"previous definition\" } */\n+     __attribute__ ((ifunc (\"resolver\")));\n+extern int magic (void)  /* { dg-error \"redefinition\" \"\" } */\n+     __attribute__ ((alias (\"resolver\")));\n+\n+extern int spell (void)  /* { dg-message \"previous definition\" } */\n+{\n+  return 0;\n+}\n+extern int spell (void)  /* { dg-error \"redefinition\" \"\" } */\n+     __attribute__ ((ifunc (\"resolver\")));\n+\n+extern int mantra (void)  /* { dg-message \"previous definition\" } */\n+     __attribute__ ((alias (\"resolver\")));\n+extern int mantra (void)  /* { dg-error \"redefinition\" \"\" } */\n+     __attribute__ ((ifunc (\"resolver\")));\n+\n+extern int saying (void)  /* { dg-error \"weak .* cannot be defined\" \"\" } */\n+     __attribute__ ((weak,ifunc (\"resolver\")));\n+extern int maxim (void) /* { dg-error \"indirect function .* cannot be declared weak\" \"\" } */\n+     __attribute__ ((ifunc (\"resolver\"),weak));"}, {"sha": "fbd972d7caabb812786ace5520c2cbcb010870ac", "filename": "gcc/testsuite/gcc.dg/attr-ifunc-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-3.c?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"\" } */\n+\n+#include <stdio.h>\n+\n+static int __attribute__((noinline))\n+     implementation (void *ptr)\n+{\n+  if (ptr)\n+    return ((int (*) (void *))ptr) (0);\n+  \n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+static void *resolver (void)\n+{\n+  return (void *)implementation;\n+}\n+\n+extern int magic (void *) __attribute__ ((ifunc (\"resolver\")));\n+\n+int main ()\n+{\n+  return magic ((void *)magic);\n+}"}, {"sha": "698c06b1a749e1ebe4daca2d0974d782f0ea51ac", "filename": "gcc/testsuite/gcc.dg/attr-ifunc-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-4.c?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"\" } */\n+\n+#include <stdio.h>\n+\n+static void *implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+static void *resolver (void)\n+{\n+  return (void *)implementation;\n+}\n+\n+static int magic (void) __attribute__ ((ifunc (\"resolver\")));\n+\n+int main ()\n+{\n+  return magic () != 0;\n+}"}, {"sha": "4dddec430efb03a37abf0d581a638db058b88dee", "filename": "gcc/testsuite/gcc.dg/attr-ifunc-5.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ifunc-5.c?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"\" } */\n+\n+#include <stdio.h>\n+\n+static void *implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+static void *resolver (void)\n+{\n+  return (void *)implementation;\n+}\n+\n+extern int magic (void) __attribute__ ((ifunc (\"resolver\"),visibility (\"hidden\")));\n+\n+int main ()\n+{\n+  return magic () != 0;\n+}"}, {"sha": "ac5e8725addd7b7bee71bfbe71c3ce3f2679557f", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -90,6 +90,21 @@ proc dg-require-alias { args } {\n     }\n }\n \n+# If this target does not support the \"ifunc\" attribute, skip this\n+# test.\n+\n+proc dg-require-ifunc { args } {\n+    set ifunc_available [ check_ifunc_available ]\n+    if { $ifunc_available == -1 } {\n+\tupvar name name\n+\tunresolved \"$name\"\n+    }\n+    if { $ifunc_available < 2 } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+    }\n+}\n+\n # If this target's linker does not support the --gc-sections flag,\n # skip this test.\n "}, {"sha": "fc24b78a64f5c9896e35fad4695ce762f1acc7db", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -368,6 +368,56 @@ proc check_alias_available { } {\n     return $alias_available_saved\n }\n \n+###############################\n+# proc check_ifunc_available { }\n+###############################\n+\n+# Determine if the target toolchain supports the alias attribute.\n+\n+# Returns 2 if the target supports aliases.  Returns 1 if the target\n+# only supports weak aliased.  Returns 0 if the target does not\n+# support aliases at all.  Returns -1 if support for aliases could not\n+# be determined.\n+\n+proc check_ifunc_available { } {\n+    global ifunc_available_saved\n+    global tool\n+\n+    if [info exists ifunc_available_saved] {\n+        verbose \"check_ifunc_available  returning saved $ifunc_available_saved\" 2\n+    } else {\n+\tset src ifunc[pid].c\n+\tset obj ifunc[pid].o\n+        verbose \"check_ifunc_available  compiling testfile $src\" 2\n+\tset f [open $src \"w\"]\n+\t# Compile a small test program.  The definition of \"g\" is\n+\t# necessary to keep the Solaris assembler from complaining\n+\t# about the program.\n+\tputs $f \"#ifdef __cplusplus\\nextern \\\"C\\\"\\n#endif\\n\"\n+\tputs $f \"void g() {} void f() __attribute__((ifunc(\\\"g\\\")));\"\n+\tclose $f\n+\tset lines [${tool}_target_compile $src $obj object \"\"]\n+\tfile delete $src\n+\tremote_file build delete $obj\n+\n+\tif [string match \"\" $lines] then {\n+\t    # No error messages, everything is OK.\n+\t    set ifunc_available_saved 2\n+\t} else {\n+\t    if [regexp \"ifunc is not supported\" $lines] {\n+\t\tverbose \"check_ifunc_available  target does not support ifunc\" 2\n+\t\tset ifunc_available_saved 0\n+\t    } else {\n+\t\tset ifunc_available_saved -1\n+\t    }\n+\t}\n+\n+\tverbose \"check_ifunc_available  returning $ifunc_available_saved\" 2\n+    }\n+\n+    return $ifunc_available_saved\n+}\n+\n # Returns true if --gc-sections is supported on the target.\n \n proc check_gc_sections_available { } {"}, {"sha": "9c2593f14c80f9f3a91afacd497fe7ca2eb58699", "filename": "gcc/varasm.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba885ec559ca39e0dc23641dbbe67cc0072378f3/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ba885ec559ca39e0dc23641dbbe67cc0072378f3", "patch": "@@ -993,7 +993,8 @@ use_blocks_for_decl_p (tree decl)\n   if (DECL_INITIAL (decl) == decl)\n     return false;\n \n-  /* If this decl is an alias, then we don't want to emit a definition.  */\n+  /* If this decl is an alias, then we don't want to emit a\n+     definition.  */\n   if (lookup_attribute (\"alias\", DECL_ATTRIBUTES (decl)))\n     return false;\n \n@@ -5354,6 +5355,17 @@ do_assemble_alias (tree decl, tree target)\n       globalize_decl (decl);\n       maybe_assemble_visibility (decl);\n     }\n+  if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (decl)))\n+    {\n+#if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GAS_INDIRECT_FUNCTION\n+      ASM_OUTPUT_TYPE_DIRECTIVE\n+\t(asm_out_file, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n+\t IFUNC_ASM_TYPE);\n+#else\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"ifunc is not supported in this configuration\");\n+#endif\n+    }\n \n # ifdef ASM_OUTPUT_DEF_FROM_DECLS\n   ASM_OUTPUT_DEF_FROM_DECLS (asm_out_file, decl, target);"}]}