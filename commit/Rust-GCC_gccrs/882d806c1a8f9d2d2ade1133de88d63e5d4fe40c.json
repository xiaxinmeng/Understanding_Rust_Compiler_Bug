{"sha": "882d806c1a8f9d2d2ade1133de88d63e5d4fe40c", "node_id": "C_kwDOANBUbNoAKDg4MmQ4MDZjMWE4ZjlkMmQyYWRlMTEzM2RlODhkNjNlNWQ0ZmU0MGM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-10-10T01:28:59Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-10-10T02:05:12Z"}, "message": "tree-optimization: [PR102622]: wrong code due to signed one bit integer and \"a?-1:0\"\n\nSo it turns out this is kinda of a latent bug but not really latent.\nIn GCC 9 and 10, phi-opt would transform a?-1:0 (even for signed 1-bit integer)\nto -(type)a but the type is an one bit integer which means the negation is\nundefined. GCC 11 fixed the problem by checking for a?pow2cst:0 transformation\nbefore a?-1:0 transformation.\n\nWhen I added the transformations to match.pd, I had swapped the order not paying\nattention and I didn't expect anything of it. Because there was no testcase failing\ndue to this.\nAnyways this fixes the problem on the trunk by swapping the order in match.pd and\nadding a comment of why the order is this way.\n\nI will try to come up with a patch for GCC 9 and 10 series later on which fixes\nthe problem there too.\n\nNote I didn't include the original testcase which requires the vectorizer and AVX-512f\nas I can't figure out the right dg options to restrict it to avx-512f but I did come up\nwith a testcase which shows the problem and even more shows the problem with the 9/10\nseries as mentioned.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu.\n\n\tPR tree-optimization/102622\n\ngcc/ChangeLog:\n\n\t* match.pd: Swap the order of a?pow2cst:0 and a?-1:0 transformations.\n\tSwap the order of a?0:pow2cst and a?0:-1 transformations.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/execute/bitfld-10.c: New test.", "tree": {"sha": "c96e6eba543dbcb010bef443d8df2d587a8fed0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c96e6eba543dbcb010bef443d8df2d587a8fed0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9db17b8803e8ac294016a68352ffdcfa0699ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9db17b8803e8ac294016a68352ffdcfa0699ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9db17b8803e8ac294016a68352ffdcfa0699ab4"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "c153e9a6e9872ec27d060b089ab4fd6f8145dd3f", "filename": "gcc/match.pd", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=882d806c1a8f9d2d2ade1133de88d63e5d4fe40c", "patch": "@@ -3949,15 +3949,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     /* a ? 1 : 0 -> a if 0 and 1 are integral types. */\n     (if (integer_onep (@1))\n      (convert (convert:boolean_type_node @0)))\n-    /* a ? -1 : 0 -> -a. */\n-    (if (INTEGRAL_TYPE_P (type) && integer_all_onesp (@1))\n-     (negate (convert (convert:boolean_type_node @0))))\n     /* a ? powerof2cst : 0 -> a << (log2(powerof2cst)) */\n     (if (INTEGRAL_TYPE_P (type) && integer_pow2p (@1))\n      (with {\n        tree shift = build_int_cst (integer_type_node, tree_log2 (@1));\n       }\n-      (lshift (convert (convert:boolean_type_node @0)) { shift; })))))\n+      (lshift (convert (convert:boolean_type_node @0)) { shift; })))\n+    /* a ? -1 : 0 -> -a.  No need to check the TYPE_PRECISION not being 1\n+       here as the powerof2cst case above will handle that case correctly.  */\n+    (if (INTEGRAL_TYPE_P (type) && integer_all_onesp (@1))\n+     (negate (convert (convert:boolean_type_node @0))))))\n   (if (integer_zerop (@1))\n    (with {\n       tree booltrue = constant_boolean_node (true, boolean_type_node);\n@@ -3966,16 +3967,23 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      /* a ? 0 : 1 -> !a. */\n      (if (integer_onep (@2))\n       (convert (bit_xor (convert:boolean_type_node @0) { booltrue; } )))\n-     /* a ? -1 : 0 -> -(!a). */\n-     (if (INTEGRAL_TYPE_P (type) && integer_all_onesp (@2))\n-      (negate (convert (bit_xor (convert:boolean_type_node @0) { booltrue; } ))))\n      /* a ? powerof2cst : 0 -> (!a) << (log2(powerof2cst)) */\n-     (if (INTEGRAL_TYPE_P (type) &&  integer_pow2p (@2))\n+     (if (INTEGRAL_TYPE_P (type) &&  integer_pow2p (@2)\n+         && TYPE_PRECISION (type) != 1)\n       (with {\n \ttree shift = build_int_cst (integer_type_node, tree_log2 (@2));\n        }\n        (lshift (convert (bit_xor (convert:boolean_type_node @0) { booltrue; } ))\n-        { shift; }))))))))\n+        { shift; })))\n+     /* a ? -1 : 0 -> -(!a).  No need to check the TYPE_PRECISION not being 1\n+       here as the powerof2cst case above will handle that case correctly.  */\n+     (if (INTEGRAL_TYPE_P (type) && integer_all_onesp (@2))\n+      (negate (convert (bit_xor (convert:boolean_type_node @0) { booltrue; } ))))\n+    )\n+   )\n+  )\n+ )\n+)\n #endif\n \n /* Simplification moved from fold_cond_expr_with_comparison.  It may also"}, {"sha": "bdbf5733ce7fba23f8ab4d33622d98fd5520ba86", "filename": "gcc/testsuite/gcc.c-torture/execute/bitfld-10.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882d806c1a8f9d2d2ade1133de88d63e5d4fe40c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-10.c?ref=882d806c1a8f9d2d2ade1133de88d63e5d4fe40c", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/102622 */\n+/* Wrong code introduced due to phi-opt\n+   introducing undefined signed interger overflow\n+   with one bit signed integer negation. */\n+\n+struct f{signed t:1;};\n+int g(struct f *a, int t) __attribute__((noipa));\n+int g(struct f *a, int t)\n+{\n+    if (t)\n+      a->t = -1;\n+    else\n+      a->t = 0;\n+    int t1 = a->t;\n+    if (t1) return 1;\n+    return t1;\n+}\n+\n+int main(void)\n+{\n+    struct f a;\n+    if (!g(&a, 1))  __builtin_abort();\n+    return 0;\n+}"}]}