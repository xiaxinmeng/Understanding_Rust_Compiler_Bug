{"sha": "5403eb3a7d9b6a7f988763880863211bec11176b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwM2ViM2E3ZDliNmE3Zjk4ODc2Mzg4MDg2MzIxMWJlYzExMTc2Yg==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-05-18T10:28:21Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-05-18T10:28:21Z"}, "message": "(ffeexpr_token_number_): Call ffeexpr_make_float_const_ to make an integer.\n\n(ffeexpr_token_number_): Call\nffeexpr_make_float_const_ to make an integer.\n(ffeexpr_make_float_const_): Handle making an integer.\n\nFrom-SVN: r19837", "tree": {"sha": "4c9002d0ca76e25dc479373d15aa2602f0a6fbf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c9002d0ca76e25dc479373d15aa2602f0a6fbf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5403eb3a7d9b6a7f988763880863211bec11176b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5403eb3a7d9b6a7f988763880863211bec11176b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5403eb3a7d9b6a7f988763880863211bec11176b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5403eb3a7d9b6a7f988763880863211bec11176b/comments", "author": null, "committer": null, "parents": [{"sha": "270fc4e8985e59e395874665b91a9d83f7d384ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270fc4e8985e59e395874665b91a9d83f7d384ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270fc4e8985e59e395874665b91a9d83f7d384ba"}], "stats": {"total": 286, "additions": 74, "deletions": 212}, "files": [{"sha": "cd471f4d579cdb63eb36decffc920b5bb4be77d0", "filename": "gcc/f/expr.c", "status": "modified", "additions": 74, "deletions": 212, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5403eb3a7d9b6a7f988763880863211bec11176b/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5403eb3a7d9b6a7f988763880863211bec11176b/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=5403eb3a7d9b6a7f988763880863211bec11176b", "patch": "@@ -45,6 +45,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"src.h\"\n #include \"st.h\"\n #include \"symbol.h\"\n+#include \"str.h\"\n #include \"target.h\"\n #include \"where.h\"\n \n@@ -53,26 +54,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Simple definitions and enumerations. */\n \n-typedef enum\n-  {\n-    FFEEXPR_dotdotNONE_,\n-    FFEEXPR_dotdotTRUE_,\n-    FFEEXPR_dotdotFALSE_,\n-    FFEEXPR_dotdotNOT_,\n-    FFEEXPR_dotdotAND_,\n-    FFEEXPR_dotdotOR_,\n-    FFEEXPR_dotdotXOR_,\n-    FFEEXPR_dotdotEQV_,\n-    FFEEXPR_dotdotNEQV_,\n-    FFEEXPR_dotdotLT_,\n-    FFEEXPR_dotdotLE_,\n-    FFEEXPR_dotdotEQ_,\n-    FFEEXPR_dotdotNE_,\n-    FFEEXPR_dotdotGT_,\n-    FFEEXPR_dotdotGE_,\n-    FFEEXPR_dotdot\n-  } ffeexprDotdot_;\n-\n typedef enum\n   {\n     FFEEXPR_exprtypeUNKNOWN_,\n@@ -242,7 +223,7 @@ struct _ffeexpr_find_\n \n static ffeexprStack_ ffeexpr_stack_;\t/* Expression stack for semantic. */\n static ffelexToken ffeexpr_tokens_[10];\t/* Scratchpad tokens for syntactic. */\n-static ffeexprDotdot_ ffeexpr_current_dotdot_;\t/* Current .FOO. keyword. */\n+static ffestrOther ffeexpr_current_dotdot_;\t/* Current .FOO. keyword. */\n static long ffeexpr_hollerith_count_;\t/* ffeexpr_token_number_ and caller. */\n static int ffeexpr_level_;\t/* Level of DATA implied-DO construct. */\n static bool ffeexpr_is_substr_ok_;\t/* If OPEN_PAREN as binary \"op\" ok. */\n@@ -286,7 +267,6 @@ static void ffeexpr_check_impdo_ (ffebld list, ffelexToken list_t,\n static void ffeexpr_update_impdo_ (ffebld expr, ffebld dovar);\n static void ffeexpr_update_impdo_sym_ (ffebld expr, ffesymbol dovar);\n static ffeexprContext ffeexpr_context_outer_ (ffeexprStack_ s);\n-static ffeexprDotdot_ ffeexpr_dotdot_ (ffelexToken t);\n static ffeexprExpr_ ffeexpr_expr_new_ (void);\n static void ffeexpr_fulfill_call_ (ffebld *expr, ffelexToken t);\n static bool ffeexpr_isdigits_ (char *p);\n@@ -8530,124 +8510,6 @@ ffeexpr_context_outer_ (ffeexprStack_ s)\n     }\n }\n \n-/* ffeexpr_dotdot_ -- Look up name in list of .FOO. possibilities\n-\n-   ffeexprDotdot_ d;\n-   ffelexToken t;\n-   d = ffeexpr_dotdot_(t);\n-\n-   Returns the identifier for the name, or the NONE identifier.\t */\n-\n-static ffeexprDotdot_\n-ffeexpr_dotdot_ (ffelexToken t)\n-{\n-  char *p;\n-\n-  switch (ffelex_token_length (t))\n-    {\n-    case 2:\n-      switch (*(p = ffelex_token_text (t)))\n-\t{\n-\tcase FFESRC_CASE_MATCH_INIT ('E', 'e', match_2e, no_match_2):\n-\t  if (ffesrc_char_match_noninit (*++p, 'Q', 'q'))\n-\t    return FFEEXPR_dotdotEQ_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('G', 'g', match_2g, no_match_2):\n-\t  if (ffesrc_char_match_noninit (*++p, 'E', 'e'))\n-\t    return FFEEXPR_dotdotGE_;\n-\t  if (ffesrc_char_match_noninit (*p, 'T', 't'))\n-\t    return FFEEXPR_dotdotGT_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('L', 'l', match_2l, no_match_2):\n-\t  if (ffesrc_char_match_noninit (*++p, 'E', 'e'))\n-\t    return FFEEXPR_dotdotLE_;\n-\t  if (ffesrc_char_match_noninit (*p, 'T', 't'))\n-\t    return FFEEXPR_dotdotLT_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('N', 'n', match_2n, no_match_2):\n-\t  if (ffesrc_char_match_noninit (*++p, 'E', 'e'))\n-\t    return FFEEXPR_dotdotNE_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('O', 'o', match_2o, no_match_2):\n-\t  if (ffesrc_char_match_noninit (*++p, 'R', 'r'))\n-\t    return FFEEXPR_dotdotOR_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tdefault:\n-\tno_match_2:\t\t/* :::::::::::::::::::: */\n-\t  return FFEEXPR_dotdotNONE_;\n-\t}\n-\n-    case 3:\n-      switch (*(p = ffelex_token_text (t)))\n-\t{\n-\tcase FFESRC_CASE_MATCH_INIT ('A', 'a', match_3a, no_match_3):\n-\t  if ((ffesrc_char_match_noninit (*++p, 'N', 'n'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'D', 'd')))\n-\t    return FFEEXPR_dotdotAND_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('E', 'e', match_3e, no_match_3):\n-\t  if ((ffesrc_char_match_noninit (*++p, 'Q', 'q'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'V', 'v')))\n-\t    return FFEEXPR_dotdotEQV_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('N', 'n', match_3n, no_match_3):\n-\t  if ((ffesrc_char_match_noninit (*++p, 'O', 'o'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'T', 't')))\n-\t    return FFEEXPR_dotdotNOT_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('X', 'x', match_3x, no_match_3):\n-\t  if ((ffesrc_char_match_noninit (*++p, 'O', 'o'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'R', 'r')))\n-\t    return FFEEXPR_dotdotXOR_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tdefault:\n-\tno_match_3:\t\t/* :::::::::::::::::::: */\n-\t  return FFEEXPR_dotdotNONE_;\n-\t}\n-\n-    case 4:\n-      switch (*(p = ffelex_token_text (t)))\n-\t{\n-\tcase FFESRC_CASE_MATCH_INIT ('N', 'n', match_4n, no_match_4):\n-\t  if ((ffesrc_char_match_noninit (*++p, 'E', 'e'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'Q', 'q'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'V', 'v')))\n-\t    return FFEEXPR_dotdotNEQV_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tcase FFESRC_CASE_MATCH_INIT ('T', 't', match_4t, no_match_4):\n-\t  if ((ffesrc_char_match_noninit (*++p, 'R', 'r'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'U', 'u'))\n-\t      && (ffesrc_char_match_noninit (*++p, 'E', 'e')))\n-\t    return FFEEXPR_dotdotTRUE_;\n-\t  return FFEEXPR_dotdotNONE_;\n-\n-\tdefault:\n-\tno_match_4:\t\t/* :::::::::::::::::::: */\n-\t  return FFEEXPR_dotdotNONE_;\n-\t}\n-\n-    case 5:\n-      if (ffesrc_strcmp_2c (ffe_case_match (), ffelex_token_text (t), \"FALSE\",\n-\t\t\t    \"false\", \"False\")\n-\t  == 0)\n-\treturn FFEEXPR_dotdotFALSE_;\n-      return FFEEXPR_dotdotNONE_;\n-\n-    default:\n-      return FFEEXPR_dotdotNONE_;\n-    }\n-}\n-\n /* ffeexpr_percent_ -- Look up name in list of %FOO possibilities\n \n    ffeexprPercent_ p;\n@@ -11674,15 +11536,15 @@ ffeexpr_nil_period_ (ffelexToken t)\n     {\n     case FFELEX_typeNAME:\n     case FFELEX_typeNAMES:\n-      ffeexpr_current_dotdot_ = ffeexpr_dotdot_ (t);\n+      ffeexpr_current_dotdot_ = ffestr_other (t);\n       switch (ffeexpr_current_dotdot_)\n \t{\n-\tcase FFEEXPR_dotdotNONE_:\n+\tcase FFESTR_otherNone:\n \t  return (ffelexHandler) ffeexpr_nil_rhs_ (t);\n \n-\tcase FFEEXPR_dotdotTRUE_:\n-\tcase FFEEXPR_dotdotFALSE_:\n-\tcase FFEEXPR_dotdotNOT_:\n+\tcase FFESTR_otherTRUE:\n+\tcase FFESTR_otherFALSE:\n+\tcase FFESTR_otherNOT:\n \t  return (ffelexHandler) ffeexpr_nil_end_period_;\n \n \tdefault:\n@@ -11703,13 +11565,13 @@ ffeexpr_nil_end_period_ (ffelexToken t)\n {\n   switch (ffeexpr_current_dotdot_)\n     {\n-    case FFEEXPR_dotdotNOT_:\n+    case FFESTR_otherNOT:\n       if (ffelex_token_type (t) != FFELEX_typePERIOD)\n \treturn (ffelexHandler) ffeexpr_nil_rhs_ (t);\n       return (ffelexHandler) ffeexpr_nil_rhs_;\n \n-    case FFEEXPR_dotdotTRUE_:\n-    case FFEEXPR_dotdotFALSE_:\n+    case FFESTR_otherTRUE:\n+    case FFESTR_otherFALSE:\n       if (ffelex_token_type (t) != FFELEX_typePERIOD)\n \treturn (ffelexHandler) ffeexpr_nil_binary_ (t);\n       return (ffelexHandler) ffeexpr_nil_binary_;\n@@ -11979,12 +11841,12 @@ ffeexpr_nil_binary_period_ (ffelexToken t)\n     {\n     case FFELEX_typeNAME:\n     case FFELEX_typeNAMES:\n-      ffeexpr_current_dotdot_ = ffeexpr_dotdot_ (t);\n+      ffeexpr_current_dotdot_ = ffestr_other (t);\n       switch (ffeexpr_current_dotdot_)\n \t{\n-\tcase FFEEXPR_dotdotTRUE_:\n-\tcase FFEEXPR_dotdotFALSE_:\n-\tcase FFEEXPR_dotdotNOT_:\n+\tcase FFESTR_otherTRUE:\n+\tcase FFESTR_otherFALSE:\n+\tcase FFESTR_otherNOT:\n \t  return (ffelexHandler) ffeexpr_nil_binary_sw_per_;\n \n \tdefault:\n@@ -13559,10 +13421,10 @@ ffeexpr_token_period_ (ffelexToken t)\n     {\n     case FFELEX_typeNAME:\n     case FFELEX_typeNAMES:\n-      ffeexpr_current_dotdot_ = ffeexpr_dotdot_ (t);\n+      ffeexpr_current_dotdot_ = ffestr_other (t);\n       switch (ffeexpr_current_dotdot_)\n \t{\n-\tcase FFEEXPR_dotdotNONE_:\n+\tcase FFESTR_otherNone:\n \t  if (ffest_ffebad_start (FFEBAD_IGNORING_PERIOD))\n \t    {\n \t      ffebad_here (0, ffelex_token_where_line (ffeexpr_tokens_[0]),\n@@ -13572,9 +13434,9 @@ ffeexpr_token_period_ (ffelexToken t)\n \t  ffelex_token_kill (ffeexpr_tokens_[0]);\n \t  return (ffelexHandler) ffeexpr_token_rhs_ (t);\n \n-\tcase FFEEXPR_dotdotTRUE_:\n-\tcase FFEEXPR_dotdotFALSE_:\n-\tcase FFEEXPR_dotdotNOT_:\n+\tcase FFESTR_otherTRUE:\n+\tcase FFESTR_otherFALSE:\n+\tcase FFESTR_otherNOT:\n \t  ffeexpr_tokens_[1] = ffelex_token_use (t);\n \t  return (ffelexHandler) ffeexpr_token_end_period_;\n \n@@ -13641,7 +13503,7 @@ ffeexpr_token_end_period_ (ffelexToken t)\n \n   switch (ffeexpr_current_dotdot_)\n     {\n-    case FFEEXPR_dotdotNOT_:\n+    case FFESTR_otherNOT:\n       e->type = FFEEXPR_exprtypeUNARY_;\n       e->u.operator.op = FFEEXPR_operatorNOT_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceNOT_;\n@@ -13651,7 +13513,7 @@ ffeexpr_token_end_period_ (ffelexToken t)\n \treturn (ffelexHandler) ffeexpr_token_rhs_ (t);\n       return (ffelexHandler) ffeexpr_token_rhs_;\n \n-    case FFEEXPR_dotdotTRUE_:\n+    case FFESTR_otherTRUE:\n       e->type = FFEEXPR_exprtypeOPERAND_;\n       e->u.operand\n \t= ffebld_new_conter (ffebld_constant_new_logicaldefault (TRUE));\n@@ -13663,7 +13525,7 @@ ffeexpr_token_end_period_ (ffelexToken t)\n \treturn (ffelexHandler) ffeexpr_token_binary_ (t);\n       return (ffelexHandler) ffeexpr_token_binary_;\n \n-    case FFEEXPR_dotdotFALSE_:\n+    case FFESTR_otherFALSE:\n       e->type = FFEEXPR_exprtypeOPERAND_;\n       e->u.operand\n \t= ffebld_new_conter (ffebld_constant_new_logicaldefault (FALSE));\n@@ -13931,17 +13793,8 @@ ffeexpr_token_number_ (ffelexToken t)\n   /* Nothing specific we were looking for, so make an integer and pass the\n      current token to the binary state. */\n \n-  e = ffeexpr_expr_new_ ();\n-  e->type = FFEEXPR_exprtypeOPERAND_;\n-  e->token = ffeexpr_tokens_[0];\n-  e->u.operand = ffebld_new_conter (ffebld_constant_new_integerdefault\n-\t\t\t\t    (ffeexpr_tokens_[0]));\n-  ffebld_set_info (e->u.operand,\n-\t\t   ffeinfo_new (FFEINFO_basictypeINTEGER,\n-\t\t\t\tFFEINFO_kindtypeINTEGERDEFAULT, 0,\n-\t\t\t\tFFEINFO_kindENTITY, FFEINFO_whereCONSTANT,\n-\t\t\t\tFFETARGET_charactersizeNONE));\n-  ffeexpr_exprstack_push_operand_ (e);\n+  ffeexpr_make_float_const_ ('I', ffeexpr_tokens_[0], NULL, NULL,\n+\t\t\t     NULL, NULL, NULL);\n   return (ffelexHandler) ffeexpr_token_binary_ (t);\n }\n \n@@ -14599,12 +14452,12 @@ ffeexpr_token_binary_period_ (ffelexToken t)\n     {\n     case FFELEX_typeNAME:\n     case FFELEX_typeNAMES:\n-      ffeexpr_current_dotdot_ = ffeexpr_dotdot_ (t);\n+      ffeexpr_current_dotdot_ = ffestr_other (t);\n       switch (ffeexpr_current_dotdot_)\n \t{\n-\tcase FFEEXPR_dotdotTRUE_:\n-\tcase FFEEXPR_dotdotFALSE_:\n-\tcase FFEEXPR_dotdotNOT_:\n+\tcase FFESTR_otherTRUE:\n+\tcase FFESTR_otherFALSE:\n+\tcase FFESTR_otherNOT:\n \t  if (ffest_ffebad_start (FFEBAD_MISSING_BINARY_OPERATOR))\n \t    {\n \t      operand = ffeexpr_stack_->exprstack;\n@@ -14618,16 +14471,6 @@ ffeexpr_token_binary_period_ (ffelexToken t)\n \t  ffelex_token_kill (ffeexpr_tokens_[0]);\n \t  return (ffelexHandler) ffeexpr_token_binary_sw_per_;\n \n-\tcase FFEEXPR_dotdotNONE_:\n-\t  if (ffest_ffebad_start (FFEBAD_INVALID_DOTDOT))\n-\t    {\n-\t      ffebad_string (ffelex_token_text (t));\n-\t      ffebad_here (0, ffelex_token_where_line (ffeexpr_tokens_[0]),\n-\t\t\t   ffelex_token_where_column (ffeexpr_tokens_[0]));\n-\t      ffebad_finish ();\n-\t    }\n-\t  ffeexpr_current_dotdot_ = FFEEXPR_dotdotEQ_;\n-\t  /* Fall through here, pretending we got a .EQ. operator. */\n \tdefault:\n \t  ffeexpr_tokens_[1] = ffelex_token_use (t);\n \t  return (ffelexHandler) ffeexpr_token_binary_end_per_;\n@@ -14661,100 +14504,109 @@ ffeexpr_token_binary_end_per_ (ffelexToken t)\n {\n   ffeexprExpr_ e;\n \n-  if (ffelex_token_type (t) != FFELEX_typePERIOD)\n-    {\n-      if (ffest_ffebad_start (FFEBAD_INSERTING_PERIOD))\n-\t{\n-\t  ffebad_here (0, ffelex_token_where_line (ffeexpr_tokens_[0]),\n-\t\t       ffelex_token_where_column (ffeexpr_tokens_[0]));\n-\t  ffebad_here (1, ffelex_token_where_line (t), ffelex_token_where_column (t));\n-\t  ffebad_string (ffelex_token_text (ffeexpr_tokens_[1]));\n-\t  ffebad_finish ();\n-\t}\n-    }\n-\n-  ffelex_token_kill (ffeexpr_tokens_[1]);\t/* Kill dot-dot token. */\n-\n   e = ffeexpr_expr_new_ ();\n   e->type = FFEEXPR_exprtypeBINARY_;\n   e->token = ffeexpr_tokens_[0];\n \n   switch (ffeexpr_current_dotdot_)\n     {\n-    case FFEEXPR_dotdotAND_:\n+    case FFESTR_otherAND:\n       e->u.operator.op = FFEEXPR_operatorAND_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceAND_;\n       e->u.operator.as = FFEEXPR_operatorassociativityAND_;\n       break;\n \n-    case FFEEXPR_dotdotOR_:\n+    case FFESTR_otherOR:\n       e->u.operator.op = FFEEXPR_operatorOR_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceOR_;\n       e->u.operator.as = FFEEXPR_operatorassociativityOR_;\n       break;\n \n-    case FFEEXPR_dotdotXOR_:\n+    case FFESTR_otherXOR:\n       e->u.operator.op = FFEEXPR_operatorXOR_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceXOR_;\n       e->u.operator.as = FFEEXPR_operatorassociativityXOR_;\n       break;\n \n-    case FFEEXPR_dotdotEQV_:\n+    case FFESTR_otherEQV:\n       e->u.operator.op = FFEEXPR_operatorEQV_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceEQV_;\n       e->u.operator.as = FFEEXPR_operatorassociativityEQV_;\n       break;\n \n-    case FFEEXPR_dotdotNEQV_:\n+    case FFESTR_otherNEQV:\n       e->u.operator.op = FFEEXPR_operatorNEQV_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceNEQV_;\n       e->u.operator.as = FFEEXPR_operatorassociativityNEQV_;\n       break;\n \n-    case FFEEXPR_dotdotLT_:\n+    case FFESTR_otherLT:\n       e->u.operator.op = FFEEXPR_operatorLT_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceLT_;\n       e->u.operator.as = FFEEXPR_operatorassociativityLT_;\n       break;\n \n-    case FFEEXPR_dotdotLE_:\n+    case FFESTR_otherLE:\n       e->u.operator.op = FFEEXPR_operatorLE_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceLE_;\n       e->u.operator.as = FFEEXPR_operatorassociativityLE_;\n       break;\n \n-    case FFEEXPR_dotdotEQ_:\n+    case FFESTR_otherEQ:\n       e->u.operator.op = FFEEXPR_operatorEQ_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceEQ_;\n       e->u.operator.as = FFEEXPR_operatorassociativityEQ_;\n       break;\n \n-    case FFEEXPR_dotdotNE_:\n+    case FFESTR_otherNE:\n       e->u.operator.op = FFEEXPR_operatorNE_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceNE_;\n       e->u.operator.as = FFEEXPR_operatorassociativityNE_;\n       break;\n \n-    case FFEEXPR_dotdotGT_:\n+    case FFESTR_otherGT:\n       e->u.operator.op = FFEEXPR_operatorGT_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceGT_;\n       e->u.operator.as = FFEEXPR_operatorassociativityGT_;\n       break;\n \n-    case FFEEXPR_dotdotGE_:\n+    case FFESTR_otherGE:\n       e->u.operator.op = FFEEXPR_operatorGE_;\n       e->u.operator.prec = FFEEXPR_operatorprecedenceGE_;\n       e->u.operator.as = FFEEXPR_operatorassociativityGE_;\n       break;\n \n     default:\n-      assert (\"Bad unary dotdot in ffeexpr_current_dotdot_\" == NULL);\n+      if (ffest_ffebad_start (FFEBAD_INVALID_DOTDOT))\n+\t{\n+\t  ffebad_here (0, ffelex_token_where_line (ffeexpr_tokens_[0]),\n+\t\t       ffelex_token_where_column (ffeexpr_tokens_[0]));\n+\t  ffebad_string (ffelex_token_text (ffeexpr_tokens_[1]));\n+\t  ffebad_finish ();\n+\t}\n+      e->u.operator.op = FFEEXPR_operatorEQ_;\n+      e->u.operator.prec = FFEEXPR_operatorprecedenceEQ_;\n+      e->u.operator.as = FFEEXPR_operatorassociativityEQ_;\n+      break;\n     }\n \n   ffeexpr_exprstack_push_binary_ (e);\n \n   if (ffelex_token_type (t) != FFELEX_typePERIOD)\n-    return (ffelexHandler) ffeexpr_token_rhs_ (t);\n+    {\n+      if (ffest_ffebad_start (FFEBAD_INSERTING_PERIOD))\n+\t{\n+\t  ffebad_here (0, ffelex_token_where_line (ffeexpr_tokens_[0]),\n+\t\t       ffelex_token_where_column (ffeexpr_tokens_[0]));\n+\t  ffebad_here (1, ffelex_token_where_line (t), ffelex_token_where_column (t));\n+\t  ffebad_string (ffelex_token_text (ffeexpr_tokens_[1]));\n+\t  ffebad_finish ();\n+\t}\n+      ffelex_token_kill (ffeexpr_tokens_[1]);\t/* Kill dot-dot token. */\n+      return (ffelexHandler) ffeexpr_token_rhs_ (t);\n+    }\n+\n+  ffelex_token_kill (ffeexpr_tokens_[1]);\t/* Kill dot-dot token. */\n   return (ffelexHandler) ffeexpr_token_rhs_;\n }\n \n@@ -15853,6 +15705,16 @@ ffeexpr_make_float_const_ (char exp_letter, ffelexToken integer,\n       break;\n #endif\n \n+    case 'I':\t/* Make an integer. */\n+      e->u.operand = ffebld_new_conter (ffebld_constant_new_integerdefault\n+\t\t\t\t\t(ffeexpr_tokens_[0]));\n+      ffebld_set_info (e->u.operand,\n+\t\t       ffeinfo_new (FFEINFO_basictypeINTEGER,\n+\t\t\t\t    FFEINFO_kindtypeINTEGERDEFAULT, 0,\n+\t\t\t\t    FFEINFO_kindENTITY, FFEINFO_whereCONSTANT,\n+\t\t\t\t    FFETARGET_charactersizeNONE));\n+      break;\n+\n     default:\n     no_match:\t\t\t/* :::::::::::::::::::: */\n       assert (\"Lost the exponent letter!\" == NULL);"}]}