{"sha": "15d683d4f0b390b27c54a7c92c6e4f33195bdc93", "node_id": "C_kwDOANBUbNoAKDE1ZDY4M2Q0ZjBiMzkwYjI3YzU0YTdjOTJjNmU0ZjMzMTk1YmRjOTM", "commit": {"author": {"name": "YunQiang Su", "email": "yunqiang.su@cipunited.com", "date": "2022-01-26T03:21:20Z"}, "committer": {"name": "YunQiang Su", "email": "yunqiang.su@cipunited.com", "date": "2022-04-01T06:57:27Z"}, "message": "MIPS: IPL is 8bit in Cause and Status registers if TARGET_MCU\n\nIf MIPS MCU extension is enable, the IPL section in Cause and Status\nregisters has been expand to 8bit instead of 6bit.\n\nIn Cause: the bits are 10-17.\nIn Status: the bits are 10-16 and 18.\n\nMD00834-2B-MUCON-AFP-01.03.pdf: P49 and P61.\n\ngcc/ChangeLog:\n\n\t* config/mips/mips.cc (mips_expand_prologue):\n\t  IPL is 8bit for MCU ASE.", "tree": {"sha": "9ac8b550bd66fc6651da055da80da9f6a0a0ffe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac8b550bd66fc6651da055da80da9f6a0a0ffe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15d683d4f0b390b27c54a7c92c6e4f33195bdc93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d683d4f0b390b27c54a7c92c6e4f33195bdc93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d683d4f0b390b27c54a7c92c6e4f33195bdc93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d683d4f0b390b27c54a7c92c6e4f33195bdc93/comments", "author": null, "committer": null, "parents": [{"sha": "5901a10bdf7a872697894f2e0990bff8b2e48c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5901a10bdf7a872697894f2e0990bff8b2e48c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5901a10bdf7a872697894f2e0990bff8b2e48c39"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "91e1e964f947c3045773ea1925c502bbafd3cf15", "filename": "gcc/config/mips/mips.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d683d4f0b390b27c54a7c92c6e4f33195bdc93/gcc%2Fconfig%2Fmips%2Fmips.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d683d4f0b390b27c54a7c92c6e4f33195bdc93/gcc%2Fconfig%2Fmips%2Fmips.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.cc?ref=15d683d4f0b390b27c54a7c92c6e4f33195bdc93", "patch": "@@ -12254,10 +12254,22 @@ mips_expand_prologue (void)\n \t      /* Insert the RIPL into our copy of SR (k1) as the new IPL.  */\n \t      if (!cfun->machine->keep_interrupts_masked_p\n \t\t  && cfun->machine->int_mask == INT_MASK_EIC)\n-\t\temit_insn (gen_insvsi (gen_rtx_REG (SImode, K1_REG_NUM),\n-\t\t\t\t       GEN_INT (6),\n+\t\t{\n+\t\t  emit_insn (gen_insvsi (gen_rtx_REG (SImode, K1_REG_NUM),\n+\t\t\t\t       TARGET_MCU ? GEN_INT (7) : GEN_INT (6),\n \t\t\t\t       GEN_INT (SR_IPL),\n \t\t\t\t       gen_rtx_REG (SImode, K0_REG_NUM)));\n+\t\t  if (TARGET_MCU)\n+\t\t    {\n+\t\t      emit_insn (gen_lshrsi3 (gen_rtx_REG (SImode, K0_REG_NUM),\n+\t\t\t\t\tgen_rtx_REG (SImode, K0_REG_NUM),\n+\t\t\t\t\tGEN_INT (7)));\n+\t\t      emit_insn (gen_insvsi (gen_rtx_REG (SImode, K1_REG_NUM),\n+\t\t\t\t       GEN_INT (1),\n+\t\t\t\t       GEN_INT (SR_IPL+8),\n+\t\t\t\t       gen_rtx_REG (SImode, K0_REG_NUM)));\n+\t\t    }\n+\t\t}\n \n \t      /* Clear all interrupt mask bits up to and including the\n \t\t handler's interrupt line.  */"}]}