{"sha": "e39b170695a161feba7401b7d21d824db9ee1f8f", "node_id": "C_kwDOANBUbNoAKGUzOWIxNzA2OTVhMTYxZmViYTc0MDFiN2QyMWQ4MjRkYjllZTFmOGY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-10-14T09:52:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-10-14T09:55:29Z"}, "message": "Fix PR target/107248\n\nThis is the infamous PR rtl-optimization/38644 rearing its ugly head for\nleaf functions on SPARC more than a decade later...  Richard E.'s generic\nsolution has never been implemented so let's do as other RISC back-ends did.\n\ngcc/\n\tPR target/107248\n\t* config/sparc/sparc.cc (sparc_expand_prologue): Emit a frame\n\tblockage for leaf functions.\n\t(sparc_flat_expand_prologue): Emit frame instead of full blockage.\n\t(sparc_expand_epilogue): Emit a frame blockage for leaf functions.\n\t(sparc_flat_expand_epilogue): Emit frame instead of full blockage.", "tree": {"sha": "b89956f9a8538387900574c4f94288255cdda3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b89956f9a8538387900574c4f94288255cdda3cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e39b170695a161feba7401b7d21d824db9ee1f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39b170695a161feba7401b7d21d824db9ee1f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39b170695a161feba7401b7d21d824db9ee1f8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39b170695a161feba7401b7d21d824db9ee1f8f/comments", "author": null, "committer": null, "parents": [{"sha": "6e8ce5d651b88cf9e91780105ca36dea83871d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8ce5d651b88cf9e91780105ca36dea83871d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e8ce5d651b88cf9e91780105ca36dea83871d38"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "10c0f52d3d9f0722a94d441994cd3a66f5513e51", "filename": "gcc/config/sparc/sparc.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39b170695a161feba7401b7d21d824db9ee1f8f/gcc%2Fconfig%2Fsparc%2Fsparc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39b170695a161feba7401b7d21d824db9ee1f8f/gcc%2Fconfig%2Fsparc%2Fsparc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.cc?ref=e39b170695a161feba7401b7d21d824db9ee1f8f", "patch": "@@ -6051,6 +6051,9 @@ sparc_expand_prologue (void)\n \t}\n \n       RTX_FRAME_RELATED_P (insn) = 1;\n+\n+      /* Ensure no memory access is done before the frame is established.  */\n+      emit_insn (gen_frame_blockage ());\n     }\n   else\n     {\n@@ -6065,13 +6068,7 @@ sparc_expand_prologue (void)\n \t  /* %sp is not the CFA register anymore.  */\n \t  emit_insn (gen_stack_pointer_inc (GEN_INT (4096 - size)));\n \n-\t  /* Make sure no %fp-based store is issued until after the frame is\n-\t     established.  The offset between the frame pointer and the stack\n-\t     pointer is calculated relative to the value of the stack pointer\n-\t     at the end of the function prologue, and moving instructions that\n-\t     access the stack via the frame pointer between the instructions\n-\t     that decrement the stack pointer could result in accessing the\n-\t     register window save area, which is volatile.  */\n+\t  /* Likewise.  */\n \t  emit_insn (gen_frame_blockage ());\n \t}\n       else\n@@ -6167,8 +6164,8 @@ sparc_flat_expand_prologue (void)\n \t}\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n-      /* Ensure nothing is scheduled until after the frame is established.  */\n-      emit_insn (gen_blockage ());\n+      /* Ensure no memory access is done before the frame is established.  */\n+      emit_insn (gen_frame_blockage ());\n \n       if (frame_pointer_needed)\n \t{\n@@ -6255,6 +6252,9 @@ sparc_expand_epilogue (bool for_eh)\n     ; /* do nothing.  */\n   else if (sparc_leaf_function_p)\n     {\n+      /* Ensure no memory access is done after the frame is destroyed.  */\n+      emit_insn (gen_frame_blockage ());\n+\n       if (size <= 4096)\n \temit_insn (gen_stack_pointer_inc (GEN_INT (size)));\n       else if (size <= 8192)\n@@ -6305,15 +6305,15 @@ sparc_flat_expand_epilogue (bool for_eh)\n     ; /* do nothing.  */\n   else if (frame_pointer_needed)\n     {\n-      /* Make sure the frame is destroyed after everything else is done.  */\n-      emit_insn (gen_blockage ());\n+      /* Ensure no memory access is done after the frame is destroyed.  */\n+      emit_insn (gen_frame_blockage ());\n \n       emit_move_insn (stack_pointer_rtx, gen_rtx_REG (Pmode, 1));\n     }\n   else\n     {\n       /* Likewise.  */\n-      emit_insn (gen_blockage ());\n+      emit_insn (gen_frame_blockage ());\n \n       if (size <= 4096)\n \temit_insn (gen_stack_pointer_inc (GEN_INT (size)));"}]}