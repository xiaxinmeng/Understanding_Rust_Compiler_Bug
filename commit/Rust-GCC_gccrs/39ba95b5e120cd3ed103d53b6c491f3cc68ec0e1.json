{"sha": "39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliYTk1YjVlMTIwY2QzZWQxMDNkNTNiNmM0OTFmM2NjNjhlYzBlMQ==", "commit": {"author": {"name": "Vijay L. Khuspe", "email": "vijayk1@kpit.com", "date": "2002-11-20T04:54:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-20T04:54:39Z"}, "message": "h8300.c (h8300_init_once): Allow -mn switch only if -mh or -ms present.\n\n\t* config/h8300/h8300.c (h8300_init_once): Allow -mn switch\n\tonly if -mh or -ms present.\n\t(h8300_eightbit_constant_address_p): Support the normal mode.\n\t(h8300_tiny_constant_address_p): Likewise.\n\t* config/h8300/h8300.h (TARGET_NORMAL_MODE): New.\n\t(POINTER_SIZE): Add 16 bit pointer for the normal mode.\n\t(Pmode): Evaluate to HImode for the normal mode.\n\t(SIZE_TYPE): Evaluate to unsigned int for normal mode.\n\t(PTRDIFF_TYPE): Evaluate to int for the normal mode.\n\t(ASM_WORD_OP): Evaluate to word for the normal mode.\n\t* config/h8300/h8300.md (tablejump_normal_mode): New.\n\t(indirect_jump_normal_mode): New.\n\t* config/h8300/t-h8300 (MULTILIB_OPTIONS): Pass -mn option to\n\tdirectory.\n\t(MULTILIB_DIRNAMES): Create target dependent directory\n\t'normal'.\n        (MULTILIB_EXCEPTIONS): Don't turn on -mn on H8/300.\n\t* doc/invoke.texi (gccoptlist): Describe the new switch -mn.\n\nFrom-SVN: r59285", "tree": {"sha": "48b4b9a94894735d54b7be63a726ad11028960f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b4b9a94894735d54b7be63a726ad11028960f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/comments", "author": null, "committer": null, "parents": [{"sha": "dd768f5f255f86bb60893f823b0ffa21ae85890d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd768f5f255f86bb60893f823b0ffa21ae85890d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd768f5f255f86bb60893f823b0ffa21ae85890d"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "64cedde103d34b2ac0e047717dd9bef1cd5e0449", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "patch": "@@ -1,3 +1,24 @@\n+2002-11-07  Vijay L. Khuspe  <vijayk1@kpit.com>\n+\n+\t* config/h8300/h8300.c (h8300_init_once): Allow -mn switch\n+\tonly if -mh or -ms present.\n+\t(h8300_eightbit_constant_address_p): Support the normal mode.\n+\t(h8300_tiny_constant_address_p): Likewise.\n+\t* config/h8300/h8300.h (TARGET_NORMAL_MODE): New.\n+\t(POINTER_SIZE): Add 16 bit pointer for the normal mode.\n+\t(Pmode): Evaluate to HImode for the normal mode.\n+\t(SIZE_TYPE): Evaluate to unsigned int for normal mode.\n+\t(PTRDIFF_TYPE): Evaluate to int for the normal mode.\n+\t(ASM_WORD_OP): Evaluate to word for the normal mode.\n+\t* config/h8300/h8300.md (tablejump_normal_mode): New.\n+\t(indirect_jump_normal_mode): New.\n+\t* config/h8300/t-h8300 (MULTILIB_OPTIONS): Pass -mn option to\n+\tdirectory.\n+\t(MULTILIB_DIRNAMES): Create target dependent directory\n+\t'normal'.\n+        (MULTILIB_EXCEPTIONS): Don't turn on -mn on H8/300.\n+\t* doc/invoke.texi (gccoptlist): Describe the new switch -mn.\n+\n Tue Nov 19 23:50:56 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (length_immediate): Do not refer to insn address."}, {"sha": "c31bab60f284c831d741b96400b17f618d845e8d", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "patch": "@@ -314,6 +314,12 @@ h8300_init_once ()\n       error (\"-ms2600 is used without -ms\");\n       target_flags |= 1;\n     }\n+  \n+  if (TARGET_H8300 && TARGET_NORMAL_MODE)\n+    {\n+      error (\"-mn used without -mh or -ms\");\n+      target_flags ^= MASK_NORMAL_MODE;\n+    }\n \n   /* Some of the shifts are optimized for speed by default.\n      See http://gcc.gnu.org/ml/gcc-patches/2002-07/msg01858.html\n@@ -1637,6 +1643,10 @@ h8300_initial_elimination_offset (from, to)\n       if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n \toffset += UNITS_PER_WORD;\t/* Skip saved PC */\n     }\n+\n+  if ((TARGET_H8300H || TARGET_H8300S) && TARGET_NORMAL_MODE)\n+    offset -= 2;\n+\n   return offset;\n }\n \n@@ -3882,7 +3892,7 @@ h8300_eightbit_constant_address_p (x)\n   addr = INTVAL (x);\n \n   return (0\n-\t  || (TARGET_H8300  && IN_RANGE (addr, n1, n2))\n+\t  || ((TARGET_H8300 || TARGET_NORMAL_MODE) && IN_RANGE (addr, n1, n2))\n \t  || (TARGET_H8300H && IN_RANGE (addr, h1, h2))\n \t  || (TARGET_H8300S && IN_RANGE (addr, s1, s2)));\n }\n@@ -3909,8 +3919,8 @@ h8300_tiny_constant_address_p (x)\n   addr = INTVAL (x);\n \n   return (0\n-\t  || (TARGET_H8300H\n+\t  || ((TARGET_H8300H && !TARGET_NORMAL_MODE)\n \t      && (IN_RANGE (addr, h1, h2) || IN_RANGE (addr, h3, h4)))\n-\t  || (TARGET_H8300S\n+\t  || ((TARGET_H8300S && !TARGET_NORMAL_MODE)\n \t      && (IN_RANGE (addr, s1, s2) || IN_RANGE (addr, s3, s4))));\n }"}, {"sha": "7d3a986c90347fa888e3e2e923ce8ad3516f6871", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "patch": "@@ -46,12 +46,20 @@ extern const char * const *h8_reg_names;\n \t  builtin_define (\"__H8300H__\");\t\t\\\n \t  builtin_assert (\"cpu=h8300h\");\t\t\\\n \t  builtin_assert (\"machine=h8300h\");\t\t\\\n+\t  if (TARGET_NORMAL_MODE)\t\t\t\\\n+\t    {\t\t\t\t\t\t\\\n+\t      builtin_define (\"__NORMAL_MODE__\");\t\\\n+\t    }\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       else if (TARGET_H8300S)\t\t\t\t\\\n         {\t\t\t\t\t\t\\\n \t  builtin_define (\"__H8300S__\");\t\t\\\n \t  builtin_assert (\"cpu=h8300s\");\t\t\\\n \t  builtin_assert (\"machine=h8300s\");\t\t\\\n+\t  if (TARGET_NORMAL_MODE)\t\t\t\\\n+\t    {\t\t\t\t\t\t\\\n+\t      builtin_define (\"__NORMAL_MODE__\");\t\\\n+\t    }\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\\\n         {\t\t\t\t\t\t\\\n@@ -91,6 +99,7 @@ extern int target_flags;\n #define MASK_ADDRESSES\t\t0x00000040\n #define MASK_QUICKCALL\t\t0x00000080\n #define MASK_SLOWBYTE\t\t0x00000100\n+#define MASK_NORMAL_MODE \t0x00000200\n #define MASK_RELAX\t\t0x00000400\n #define MASK_RTL_DUMP\t\t0x00000800\n #define MASK_H8300H\t\t0x00001000\n@@ -119,6 +128,7 @@ extern int target_flags;\n #define TARGET_H8300\t(! TARGET_H8300H && ! TARGET_H8300S)\n #define TARGET_H8300H\t(target_flags & MASK_H8300H)\n #define TARGET_H8300S\t(target_flags & MASK_H8300S)\n+#define TARGET_NORMAL_MODE (target_flags & MASK_NORMAL_MODE)\n \n /* mac register and relevant instructions are available.  */\n #define TARGET_MAC    (target_flags & MASK_MAC)\n@@ -152,13 +162,15 @@ extern int target_flags;\n   {\"relax\",\t\t MASK_RELAX, N_(\"Enable linker relaxing\")},\t    \\\n   {\"rtl-dump\",\t\t MASK_RTL_DUMP, NULL},\t\t\t\t    \\\n   {\"h\",\t\t\t MASK_H8300H, N_(\"Generate H8/300H code\")},\t    \\\n+  {\"n\",                  MASK_NORMAL_MODE, N_(\"Enable the normal mode\")},   \\\n   {\"no-h\",\t\t-MASK_H8300H, N_(\"Do not generate H8/300H code\")},  \\\n   {\"align-300\",\t\t MASK_ALIGN_300, N_(\"Use H8/300 alignment rules\")}, \\\n   { \"\",\t\t\t TARGET_DEFAULT, NULL}}\n \n #ifdef IN_LIBGCC2\n #undef TARGET_H8300H\n #undef TARGET_H8300S\n+#undef TARGET_NORMAL_MODE\n /* If compiling libgcc2, make these compile time constants based on what\n    flags are we actually compiling with.  */\n #ifdef __H8300H__\n@@ -171,6 +183,11 @@ extern int target_flags;\n #else\n #define TARGET_H8300S\t0\n #endif\n+#ifdef __NORMAL_MODE__\n+#define TARGET_NORMAL_MODE 1\n+#else\n+#define TARGET_NORMAL_MODE 0\n+#endif\n #endif /* !IN_LIBGCC2 */\n \n /* Do things that must be done once at start up.  */\n@@ -974,13 +991,19 @@ struct cum_arg\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n-#define Pmode (TARGET_H8300H || TARGET_H8300S ? SImode : HImode)\n+#define Pmode\t\t\t\t\t\t\t\t      \\\n+  ((TARGET_H8300H || TARGET_H8300S) && !TARGET_NORMAL_MODE ? SImode : HImode)\n \n /* ANSI C types.\n    We use longs for the H8/300H and the H8S because ints can be 16 or 32.\n    GCC requires SIZE_TYPE to be the same size as pointers.  */\n-#define SIZE_TYPE (TARGET_H8300 ? \"unsigned int\" : \"long unsigned int\")\n-#define PTRDIFF_TYPE (TARGET_H8300 ? \"int\" : \"long int\")\n+#define SIZE_TYPE\t\t\t\t\t\t\t\t\\\n+  (TARGET_H8300 || TARGET_NORMAL_MODE ? \"unsigned int\" : \"long unsigned int\")\n+#define PTRDIFF_TYPE\t\t\t\t\t\t\\\n+  (TARGET_H8300 || TARGET_NORMAL_MODE ? \"int\" : \"long int\")\n+\n+#define POINTER_SIZE\t\t\t\t\t\t\t\\\n+  ((TARGET_H8300H || TARGET_H8300S) && !TARGET_NORMAL_MODE ? 32 : 16)\n \n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n@@ -1068,7 +1091,8 @@ struct cum_arg\n #define IDENT_ASM_OP \"\\t.ident\\n\"\n \n /* The assembler op to get a word, 2 bytes for the H8/300, 4 for H8/300H.  */\n-#define ASM_WORD_OP\t(TARGET_H8300 ? \"\\t.word\\t\" : \"\\t.long\\t\")\n+#define ASM_WORD_OP\t\t\t\t\t\t\t\\\n+  (TARGET_H8300 || TARGET_NORMAL_MODE ? \"\\t.word\\t\" : \"\\t.long\\t\")\n \n #define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n #define DATA_SECTION_ASM_OP \"\\t.section .data\""}, {"sha": "5e9f114d3ec761f32acffd0b09f4197254637205", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "patch": "@@ -1580,6 +1580,14 @@\n   [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"2\")])\n \n+(define_insn \"tablejump_normal_mode\"\n+   [(set (pc) (match_operand:HI 0 \"register_operand\" \"r\"))\n+    (use (label_ref (match_operand 1 \"\" \"\")))]\n+   \"(TARGET_H8300H || TARGET_H8300S) && TARGET_NORMAL_MODE\"\n+   \"jmp @%S0\"\n+   [(set_attr \"cc\" \"none\")\n+    (set_attr \"length\" \"2\")])\n+\n ;; This is a define expand, because pointers may be either 16 or 32 bits.\n \n (define_expand \"indirect_jump\"\n@@ -1601,6 +1609,13 @@\n   [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"2\")])\n \n+(define_insn \"indirect_jump_normal_mode\"\n+  [(set (pc) (match_operand:HI 0 \"jump_address_operand\" \"Vr\"))]\n+  \"(TARGET_H8300H || TARGET_H8300S) && TARGET_NORMAL_MODE\"\n+  \"jmp @%S0\"\n+  [(set_attr \"cc\" \"none\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; Call subroutine with no return value.\n \n ;; ??? Even though we use HImode here, this works on the H8/300H and H8S."}, {"sha": "d8cbd4f12932f5c958cb7deec4c7d4bb05023469", "filename": "gcc/config/h8300/t-h8300", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Ft-h8300", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fconfig%2Fh8300%2Ft-h8300", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Ft-h8300?ref=39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "patch": "@@ -25,9 +25,9 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#endif' >> fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n \n-MULTILIB_OPTIONS = mh/ms mint32\n-MULTILIB_DIRNAMES = h8300h h8300s int32\n-MULTILIB_EXCEPTIONS = mint32\n+MULTILIB_OPTIONS = mh/ms mn mint32\n+MULTILIB_DIRNAMES = h8300h h8300s normal int32\n+MULTILIB_EXCEPTIONS = mint32 mn mn/mint32\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "36ca755119678de48b57786f9de6b4bdc52f492c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=39ba95b5e120cd3ed103d53b6c491f3cc68ec0e1", "patch": "@@ -550,7 +550,7 @@ in the following sections.\n \n @emph{H8/300 Options}\n @gccoptlist{\n--mrelax  -mh  -ms  -mint32  -malign-300}\n+-mrelax  -mh  -ms  -mn  -mint32  -malign-300}\n \n @emph{SH Options}\n @gccoptlist{\n@@ -8632,6 +8632,11 @@ Generate code for the H8/300H@.\n @opindex ms\n Generate code for the H8S@.\n \n+@item -mn\n+@opindex mn\n+Generate code for the H8S and H8/300H in the normal mode.  This switch\n+must be used either with -mh or -ms.\n+\n @item -ms2600\n @opindex ms2600\n Generate code for the H8S/2600.  This switch must be used with @option{-ms}."}]}