{"sha": "49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllNzZmZjExNGM5NDYzNGYwMWVjMGUyNDA2YjllY2U3ZDU4Y2UyZA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2016-06-22T14:05:55Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-06-22T14:05:55Z"}, "message": "re PR tree-optimization/71488 (Wrong code for vector comparisons with ivybridge and westmere targets)\n\ngcc/\n\n\tPR middle-end/71488\n\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Support\n\tcomparison of boolean vectors.\n\t* tree-vect-stmts.c (vectorizable_comparison): Vectorize comparison\n\tof boolean vectors using bitwise operations.\n\ngcc/testsuite/\n\n\tPR middle-end/71488\n\t* g++.dg/pr71488.C: New test.\n\t* gcc.dg/vect/vect-bool-cmp.c: New test.\n\nFrom-SVN: r237706", "tree": {"sha": "c1a0b13225e17bbb58b4370baf22278fd1c0ffec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1a0b13225e17bbb58b4370baf22278fd1c0ffec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79c94ff7965fe8b8615b77fbaacdce73c0f37b4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c94ff7965fe8b8615b77fbaacdce73c0f37b4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c94ff7965fe8b8615b77fbaacdce73c0f37b4a"}], "stats": {"total": 389, "additions": 383, "deletions": 6}, "files": [{"sha": "047f0594b84107a122c2545841c1f057dac479fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "patch": "@@ -1,3 +1,11 @@\n+2016-06-22  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR middle-end/71488\n+\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Support\n+\tcomparison of boolean vectors.\n+\t* tree-vect-stmts.c (vectorizable_comparison): Vectorize comparison\n+\tof boolean vectors using bitwise operations.\n+\n 2016-06-22  Andreas Schwab  <schwab@suse.de>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_elf_asm_named_section):"}, {"sha": "662a15ba189b533e45c6be6991a5bcf00808c5c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "patch": "@@ -1,3 +1,9 @@\n+2016-06-22  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR middle-end/71488\n+\t* g++.dg/pr71488.C: New test.\n+\t* gcc.dg/vect/vect-bool-cmp.c: New test.\n+\n 2016-06-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/guality/param-5.c: New test."}, {"sha": "d7d657ed06ef8298695237d0b3125d0bc227c237", "filename": "gcc/testsuite/g++.dg/pr71488.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C?ref=49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "patch": "@@ -0,0 +1,24 @@\n+// PR middle-end/71488\n+// { dg-do run }\n+// { dg-options \"-O3 -std=c++11\" }\n+// { dg-additional-options \"-march=westmere\" { target i?86-*-* x86_64-*-* } }\n+// { dg-require-effective-target c++11 }\n+\n+#include <valarray>\n+\n+int var_4 = 1;\n+long long var_9 = 0;\n+\n+int main() {\n+  \n+  std::valarray<std::valarray<long long>> v10;\n+\n+  v10.resize(1);\n+  v10[0].resize(4);\n+\n+  for (int i = 0; i < 4; i++)\n+    v10[0][i] = ((var_9 == 0) > unsigned (var_4 == 0)) + (var_9 == 0);\n+\n+  if (v10[0][0] != 2)\n+    __builtin_abort ();\n+}"}, {"sha": "a1e2a24accd8ba4832064a2cb156c5afd08ae574", "filename": "gcc/testsuite/gcc.dg/vect/vect-bool-cmp.c", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c?ref=49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "patch": "@@ -0,0 +1,252 @@\n+/* PR71488 */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_pack_trunc } */\n+/* { dg-additional-options \"-msse4\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int i1, i2;\n+\n+void __attribute__((noclone,noinline))\n+fn1 (int * __restrict__ p1, int * __restrict__ p2, int * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) > (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn2 (int * __restrict__ p1, int * __restrict__ p2, short * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) > (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn3 (int * __restrict__ p1, int * __restrict__ p2, long long * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) > (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn4 (int * __restrict__ p1, int * __restrict__ p2, int * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) >= (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn5 (int * __restrict__ p1, int * __restrict__ p2, short * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) >= (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn6 (int * __restrict__ p1, int * __restrict__ p2, long long * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) >= (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn7 (int * __restrict__ p1, int * __restrict__ p2, int * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) < (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn8 (int * __restrict__ p1, int * __restrict__ p2, short * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) < (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn9 (int * __restrict__ p1, int * __restrict__ p2, long long * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) < (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn10 (int * __restrict__ p1, int * __restrict__ p2, int * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) <= (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn11 (int * __restrict__ p1, int * __restrict__ p2, short * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) <= (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn12 (int * __restrict__ p1, int * __restrict__ p2, long long * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) <= (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn13 (int * __restrict__ p1, int * __restrict__ p2, int * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) == (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn14 (int * __restrict__ p1, int * __restrict__ p2, short * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) == (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn15 (int * __restrict__ p1, int * __restrict__ p2, long long * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) == (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn16 (int * __restrict__ p1, int * __restrict__ p2, int * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) != (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn17 (int * __restrict__ p1, int * __restrict__ p2, short * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) != (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+void __attribute__((noclone,noinline))\n+fn18 (int * __restrict__ p1, int * __restrict__ p2, long long * __restrict__ p3, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    p1[i] = ((p2[i] == 0) != (unsigned)(p3[i] == 0)) + (p2[i] == 0);\n+}\n+\n+int eq (int i1, int i2) { return i1 == i2; }\n+int ne (int i1, int i2) { return i1 != i2; }\n+int lt (int i1, int i2) { return i1 < i2; }\n+int le (int i1, int i2) { return i1 <= i2; }\n+int gt (int i1, int i2) { return i1 > i2; }\n+int ge (int i1, int i2) { return i1 >= i2; }\n+\n+typedef int (*cmp_fn)(int, int);\n+\n+void\n+check (int *p, cmp_fn fn)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int t1 = ((i % 4) > 1) == 0;\n+      int t2 = (i % 2) == 0;\n+      int res = fn (t1, t2) + t1;\n+      if (p[i] != res)\n+\t__builtin_abort ();\n+    }\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i1[32], i2[32], res[32];\n+  short s2[32];\n+  long long l2[32];\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      l2[i] = i2[i] = s2[i] = i % 2;\n+      i1[i] = (i % 4) > 1;\n+      asm (\"\":::\"memory\");\n+    }\n+\n+  fn1 (res, i1, i2, 32);\n+  check (res, gt);\n+  fn2 (res, i1, s2, 32);\n+  check (res, gt);\n+  fn3 (res, i1, l2, 32);\n+  check (res, gt);\n+\n+  fn4 (res, i1, i2, 32);\n+  check (res, ge);\n+  fn5 (res, i1, s2, 32);\n+  check (res, ge);\n+  fn6 (res, i1, l2, 32);\n+  check (res, ge);\n+\n+  fn7 (res, i1, i2, 32);\n+  check (res, lt);\n+  fn8 (res, i1, s2, 32);\n+  check (res, lt);\n+  fn9 (res, i1, l2, 32);\n+  check (res, lt);\n+\n+  fn10 (res, i1, i2, 32);\n+  check (res, le);\n+  fn11 (res, i1, s2, 32);\n+  check (res, le);\n+  fn12 (res, i1, l2, 32);\n+  check (res, le);\n+\n+  fn13 (res, i1, i2, 32);\n+  check (res, eq);\n+  fn14 (res, i1, s2, 32);\n+  check (res, eq);\n+  fn15 (res, i1, l2, 32);\n+  check (res, eq);\n+\n+  fn16 (res, i1, i2, 32);\n+  check (res, ne);\n+  fn17 (res, i1, s2, 32);\n+  check (res, ne);\n+  fn18 (res, i1, l2, 32);\n+  check (res, ne);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"VECTORIZED\" 18 \"vect\" { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "f0c515daaa22f59e4bcefe1fcf3e44bf29fe9a40", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "patch": "@@ -3763,7 +3763,8 @@ vect_recog_mask_conversion_pattern (vec<gimple *> *stmts, tree *type_in,\n \n   if (rhs_code != BIT_IOR_EXPR\n       && rhs_code != BIT_XOR_EXPR\n-      && rhs_code != BIT_AND_EXPR)\n+      && rhs_code != BIT_AND_EXPR\n+      && TREE_CODE_CLASS (rhs_code) != tcc_comparison)\n     return NULL;\n \n   rhs2 = gimple_assign_rhs2 (last_stmt);"}, {"sha": "5c655029dd59a582a205157b315cc5eccf8beca1", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 91, "deletions": 5, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e76ff114c94634f01ec0e2406b9ece7d58ce2d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=49e76ff114c94634f01ec0e2406b9ece7d58ce2d", "patch": "@@ -7756,7 +7756,7 @@ vectorizable_comparison (gimple *stmt, gimple_stmt_iterator *gsi,\n   enum vect_def_type dts[2] = {vect_unknown_def_type, vect_unknown_def_type};\n   unsigned nunits;\n   int ncopies;\n-  enum tree_code code;\n+  enum tree_code code, bitop1 = NOP_EXPR, bitop2 = NOP_EXPR;\n   stmt_vec_info prev_stmt_info = NULL;\n   int i, j;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n@@ -7829,11 +7829,74 @@ vectorizable_comparison (gimple *stmt, gimple_stmt_iterator *gsi,\n   else if (nunits != TYPE_VECTOR_SUBPARTS (vectype))\n     return false;\n \n+  /* Can't compare mask and non-mask types.  */\n+  if (vectype1 && vectype2\n+      && (VECTOR_BOOLEAN_TYPE_P (vectype1) ^ VECTOR_BOOLEAN_TYPE_P (vectype2)))\n+    return false;\n+\n+  /* Boolean values may have another representation in vectors\n+     and therefore we prefer bit operations over comparison for\n+     them (which also works for scalar masks).  We store opcodes\n+     to use in bitop1 and bitop2.  Statement is vectorized as\n+       BITOP2 (rhs1 BITOP1 rhs2) or\n+       rhs1 BITOP2 (BITOP1 rhs2)\n+     depending on bitop1 and bitop2 arity.  */\n+  if (VECTOR_BOOLEAN_TYPE_P (vectype))\n+    {\n+      if (code == GT_EXPR)\n+\t{\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_AND_EXPR;\n+\t}\n+      else if (code == GE_EXPR)\n+\t{\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_IOR_EXPR;\n+\t}\n+      else if (code == LT_EXPR)\n+\t{\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_AND_EXPR;\n+\t  std::swap (rhs1, rhs2);\n+\t}\n+      else if (code == LE_EXPR)\n+\t{\n+\t  bitop1 = BIT_NOT_EXPR;\n+\t  bitop2 = BIT_IOR_EXPR;\n+\t  std::swap (rhs1, rhs2);\n+\t}\n+      else\n+\t{\n+\t  bitop1 = BIT_XOR_EXPR;\n+\t  if (code == EQ_EXPR)\n+\t    bitop2 = BIT_NOT_EXPR;\n+\t}\n+    }\n+\n   if (!vec_stmt)\n     {\n       STMT_VINFO_TYPE (stmt_info) = comparison_vec_info_type;\n-      vect_model_simple_cost (stmt_info, ncopies, dts, NULL, NULL);\n-      return expand_vec_cmp_expr_p (vectype, mask_type);\n+      vect_model_simple_cost (stmt_info, ncopies * (1 + (bitop2 != NOP_EXPR)),\n+\t\t\t      dts, NULL, NULL);\n+      if (bitop1 == NOP_EXPR)\n+\treturn expand_vec_cmp_expr_p (vectype, mask_type);\n+      else\n+\t{\n+\t  machine_mode mode = TYPE_MODE (vectype);\n+\t  optab optab;\n+\n+\t  optab = optab_for_tree_code (bitop1, vectype, optab_default);\n+\t  if (!optab || optab_handler (optab, mode) == CODE_FOR_nothing)\n+\t    return false;\n+\n+\t  if (bitop2 != NOP_EXPR)\n+\t    {\n+\t      optab = optab_for_tree_code (bitop2, vectype, optab_default);\n+\t      if (!optab || optab_handler (optab, mode) == CODE_FOR_nothing)\n+\t\treturn false;\n+\t    }\n+\t  return true;\n+\t}\n     }\n \n   /* Transform.  */\n@@ -7890,8 +7953,31 @@ vectorizable_comparison (gimple *stmt, gimple_stmt_iterator *gsi,\n \t  vec_rhs2 = vec_oprnds1[i];\n \n \t  new_temp = make_ssa_name (mask);\n-\t  new_stmt = gimple_build_assign (new_temp, code, vec_rhs1, vec_rhs2);\n-\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t  if (bitop1 == NOP_EXPR)\n+\t    {\n+\t      new_stmt = gimple_build_assign (new_temp, code,\n+\t\t\t\t\t      vec_rhs1, vec_rhs2);\n+\t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (bitop1 == BIT_NOT_EXPR)\n+\t\tnew_stmt = gimple_build_assign (new_temp, bitop1, vec_rhs2);\n+\t      else\n+\t\tnew_stmt = gimple_build_assign (new_temp, bitop1, vec_rhs1,\n+\t\t\t\t\t\tvec_rhs2);\n+\t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t      if (bitop2 != NOP_EXPR)\n+\t\t{\n+\t\t  tree res = make_ssa_name (mask);\n+\t\t  if (bitop2 == BIT_NOT_EXPR)\n+\t\t    new_stmt = gimple_build_assign (res, bitop2, new_temp);\n+\t\t  else\n+\t\t    new_stmt = gimple_build_assign (res, bitop2, vec_rhs1,\n+\t\t\t\t\t\t    new_temp);\n+\t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t\t}\n+\t    }\n \t  if (slp_node)\n \t    SLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n \t}"}]}