{"sha": "9a8cb141dcd6baa0126be2341c94c730c795b4ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4Y2IxNDFkY2Q2YmFhMDEyNmJlMjM0MWM5NGM3MzBjNzk1YjRlYQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-05-11T02:24:44Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-05-11T02:24:44Z"}, "message": "tree-optimize.c (init_tree_optimization_passes): Re-organize optimization passes to do an initial batch of scalar cleanups.\n\n\n\t* tree-optimize.c (init_tree_optimization_passes): Re-organize\n\toptimization passes to do an initial batch of scalar cleanups.\n\ntestsuite/ChangeLog\n\n\t* gcc.dg/pr18501.c: XFAIL.\n\t* gcc.dg/tree-ssa/loop-4.c: Fix expected pattern.\n\t* gcc.dg/tree-ssa/pr20913.c: Change to link-time test.\n\t* gcc.dg/tree-ssa/ssa-ccp-2.c: Change to a .optimized scan.\n\t* gcc.dg/tree-ssa/ssa-ccp-7.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-ccp-9.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-ccp-1.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-pre-7.c: Change to a .fre scan.\n\t* gcc.dg/tree-ssa/ssa-pre-8.c: Likewise.\n\nFrom-SVN: r99558", "tree": {"sha": "2b7df75dddfdf1ca2cbfceaadf1d243106c8e540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b7df75dddfdf1ca2cbfceaadf1d243106c8e540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a8cb141dcd6baa0126be2341c94c730c795b4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8cb141dcd6baa0126be2341c94c730c795b4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8cb141dcd6baa0126be2341c94c730c795b4ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8cb141dcd6baa0126be2341c94c730c795b4ea/comments", "author": null, "committer": null, "parents": [{"sha": "bd7d50f8b1d0758a01875f46df0e3fcb024caba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7d50f8b1d0758a01875f46df0e3fcb024caba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7d50f8b1d0758a01875f46df0e3fcb024caba9"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "cda2fc7dbf44a3f60c8847d8bf323d54b820c654", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,3 +1,8 @@\n+2005-05-10  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-optimize.c (init_tree_optimization_passes): Re-organize\n+\toptimization passes to do an initial batch of scalar cleanups.\n+\n 2005-05-10  Ian Lance Taylor  <ian@airs.com>\n \n \t* read-rtl.c (struct macro_traverse_data): Define."}, {"sha": "8e73d94f7975f4255790c295ae4948b2ce27e9d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,3 +1,15 @@\n+2005-05-10  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.dg/pr18501.c: XFAIL.\n+\t* gcc.dg/tree-ssa/loop-4.c: Fix expected pattern.\n+\t* gcc.dg/tree-ssa/pr20913.c: Change to link-time test.\n+\t* gcc.dg/tree-ssa/ssa-ccp-2.c: Change to a .optimized scan.\n+\t* gcc.dg/tree-ssa/ssa-ccp-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-ccp-9.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-ccp-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-pre-7.c: Change to a .fre scan.\n+\t* gcc.dg/tree-ssa/ssa-pre-8.c: Likewise.\n+\n 2005-05-10  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/20178"}, {"sha": "8794486eea8242c3506ebb50e99a7ccd484359ee", "filename": "gcc/testsuite/gcc.dg/pr18501.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18501.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18501.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18501.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -9,7 +9,7 @@ int something (void);\n void\n bitmap_print_value_set (void)\n {\n-  unsigned first;\t/* { dg-warning \"may be used\" \"conditional in loop\" } */\n+  unsigned first;\t/* { dg-warning \"may be used\" \"conditional in loop\" { xfail *-*-* } } */\n   \n   for (; bmp_iter_set (); )\n     {"}, {"sha": "6a6b97d9925feb47ddcb1c6d185e72d8727210d9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -32,9 +32,9 @@ void xxx(void)\n    -- induction variable with base 0, the memory access of form\n       *(iv + &arr_base[0].y) = ...\n \n-   In any case, we should not have 'arr_base.[^0].* ='  */\n+   In any case, we should not have 'arr_base[.*] ='  */\n \n-/* { dg-final { scan-tree-dump-times \"arr_base.\\[^0\\]\\[^\\\\n\\\\r\\]*=\" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"arr_base\\[.*\\]\\.y =\" 0 \"vars\" } } */\n \n /* And the original induction variable should be eliminated.  */\n "}, {"sha": "fb5461a26092ff493c7dd32e2c547327a398c46f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20913.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20913.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20913.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20913.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -2,8 +2,8 @@\n    COPY-PROP did not fold COND_EXPR, blocking some copy propagation\n    opportunities.  */\n \n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-copyprop1-details\" } */\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts\" } */\n \n int\n foo (int a, int b, int c, int d)\n@@ -14,13 +14,21 @@ foo (int a, int b, int c, int d)\n   if (a == b)\n     x = c;\n   else\n-    x = d;\n+    {\n+      link_error ();\n+      x = d;\n+    }\n \n   if (x == c)\n     return a;\n   else\n-    return b;\n+    {\n+      link_error ();\n+      return b;\n+    }\n }\n \n-/* { dg-final { scan-tree-dump-times \"with if \\\\(1\\\\)\" 2 \"copyprop1\"} } */\n-/* { dg-final { cleanup-tree-dump \"copyprop1\" } } */\n+main()\n+{\n+  foo (1, 2, 3, 4);\n+}"}, {"sha": "19975a39215163690408a8ea4cd01c03347934c3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-2.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n extern void link_error (void);\n \n@@ -168,5 +168,5 @@ int test99999 (void)\n \n /* There should be not link_error calls, if there is any the\n    optimization has failed */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b3497413064f6a6fa8d6abe56cd5aef001e9a93b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-7.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n extern void link_error (void);\n \n@@ -23,5 +23,5 @@ int test7 (int a)\n \n /* There should be not link_error calls, if there is any the\n    optimization has failed */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "af23f8bebd962973fcd7590ddd0f20b6379ebef1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-9.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-store_ccp\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n /* Check that cprop works for assignments to array elements and structs.  */\n \n@@ -51,5 +51,5 @@ test99999 (int *arr, int j)\n \n /* There should be no link_error calls, if there is any, the\n    optimization has failed */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"store_ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"store_ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b2bcd06bedbda3134099cb6e6d0d65fa4e509db3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-ccp-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-ccp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-ccp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-ccp-1.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-dom1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n int t(int a) __attribute__ ((const));\n void abort (void);\n int\n@@ -14,5 +14,5 @@ ccp(int b)\n \treturn a;\n }\n /* We should propagate constant 4 into return.  */\n-/* { dg-final { scan-tree-dump-times \"Replaced.*with constant '4'\" 1 \"dom1\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom1\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 4\" 1 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c87f62e69c6775cb1db43b290daffc7d3e5f7c07", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-7.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-pre-stats\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-fre-stats\" } */\n int\n foo (int *array)\n {\n@@ -8,5 +8,5 @@ foo (int *array)\n       return 0;\n }\n /* We should eliminate one address calculation, and one load.  */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"pre\"} } */\n-/* { dg-final { cleanup-tree-dump \"pre\" } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"fre\"} } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "a6535fb4013e2cbebba9a5f13ac9702884fc1d90", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-8.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-pre-stats\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-fre-stats\" } */\n struct s {\n       int *n;\n };\n@@ -17,5 +17,5 @@ foo (__SIZE_TYPE__ i, struct s *array)\n   return 0;\n }\n /* We should eliminate two address calculations, one cast, and one load.  */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"pre\"} } */\n-/* { dg-final { cleanup-tree-dump \"pre\" } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"fre\"} } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "6e07a2b504f55d13b77055e49a9bf4d250ccd644", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8cb141dcd6baa0126be2341c94c730c795b4ea/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=9a8cb141dcd6baa0126be2341c94c730c795b4ea", "patch": "@@ -364,12 +364,17 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_may_alias);\n   NEXT_PASS (pass_rename_ssa_copies);\n   NEXT_PASS (pass_early_warn_uninitialized);\n-  NEXT_PASS (pass_dce);\n-  NEXT_PASS (pass_dominator);\n-  NEXT_PASS (pass_copy_prop);\n+\n+  /* Initial scalar cleanups.  */\n+  NEXT_PASS (pass_ccp);\n+  NEXT_PASS (pass_fre);\n   NEXT_PASS (pass_dce);\n   NEXT_PASS (pass_forwprop);\n   NEXT_PASS (pass_vrp);\n+  NEXT_PASS (pass_copy_prop);\n+  NEXT_PASS (pass_dce);\n+  NEXT_PASS (pass_dominator);\n+\n   NEXT_PASS (pass_merge_phi);\n   NEXT_PASS (pass_phiopt);\n   NEXT_PASS (pass_may_alias);\n@@ -403,6 +408,7 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_loop);\n   NEXT_PASS (pass_dominator);\n   NEXT_PASS (pass_copy_prop);\n+  NEXT_PASS (pass_dce);\n   /* FIXME: If DCE is not run before checking for uninitialized uses,\n      we may get false warnings (e.g., testsuite/gcc.dg/uninit-5.c).\n      However, this also causes us to misdiagnose cases that should be"}]}