{"sha": "9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzMWY2YTM2MGIxNjJhMmRlZmM2ZGRhZWRkYzQ5Mzg4YTVkZmZiZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-11-22T21:49:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-11-22T21:49:19Z"}, "message": "[multiple changes]\n\n2010-11-22  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* gcc.dg/graphite/graphite.exp: Use check_vect_support_and_set_flags\n\tfor vectorizer tests.\n\t* gcc.dg/graphite/vect-pr43423.c: Add \"dg-do compile\" dg directive.\n\t* gcc.dg/graphite/pr40281.c: Remove \"dg-do compile\" dg directive.\n\t* gcc.dg/graphite/pr41888.c: Ditto.\n\t* gcc.dg/graphite/pr42729.c: Ditto.\n\n2010-11-22  Mingjie Xing  <mingjie.xing@gmail.com>\n\t    Uros Bizjak  <ubizjak@gmail.com>\n\n\t* lib/target-supports.exp (check_vect_support_and_set_flags): New\n\tprocedure to check if the target supports vectorizer tests. Set\n\tDEFAULT_VECTCFLAGS and dg-do-what-default depending on vectorization\n\tcapabilites.\n\t* gcc.dg/vect/vect.exp: Use check_vect_support_and_set_flags.\n\t* g++.dg/vect/vect.exp: Ditto.\n\t* gfortran.dg/vect/vect.exp: Ditto.\n\nFrom-SVN: r167055", "tree": {"sha": "1f3c8b1f2282ef49d97c8aae3d05b0c5ec5e7d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f3c8b1f2282ef49d97c8aae3d05b0c5ec5e7d2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/comments", "author": null, "committer": null, "parents": [{"sha": "d925c9eb81d7a28e5fe3ed12a71aa7a0d3edab72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d925c9eb81d7a28e5fe3ed12a71aa7a0d3edab72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d925c9eb81d7a28e5fe3ed12a71aa7a0d3edab72"}], "stats": {"total": 364, "additions": 132, "deletions": 232}, "files": [{"sha": "ef33acb1f3b452dd2943ea7b2adf75a11b4dab89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -1,10 +1,30 @@\n+2010-11-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/graphite/graphite.exp: Use check_vect_support_and_set_flags\n+\tfor vectorizer tests.\n+\t* gcc.dg/graphite/vect-pr43423.c: Add \"dg-do compile\" dg directive.\n+\t* gcc.dg/graphite/pr40281.c: Remove \"dg-do compile\" dg directive.\n+\t* gcc.dg/graphite/pr41888.c: Ditto.\n+\t* gcc.dg/graphite/pr42729.c: Ditto.\n+\n+2010-11-22  Mingjie Xing  <mingjie.xing@gmail.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* lib/target-supports.exp (check_vect_support_and_set_flags): New\n+\tprocedure to check if the target supports vectorizer tests. Set\n+\tDEFAULT_VECTCFLAGS and dg-do-what-default depending on vectorization\n+\tcapabilites.\n+\t* gcc.dg/vect/vect.exp: Use check_vect_support_and_set_flags.\n+\t* g++.dg/vect/vect.exp: Ditto.\n+\t* gfortran.dg/vect/vect.exp: Ditto.\n+\n 2010-11-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/34033\n \t* objc.dg/strings-1.m: New.\n \t* objc.dg/strings-2.m: New.\n \t* obj-c++.dg/strings-1.mm: New.\n-\t* obj-c++.dg/strings-2.mm: New.\t\n+\t* obj-c++.dg/strings-2.mm: New.\n \n 2010-11-22  Ian Bolton  <ian.bolton@arm.com>\n "}, {"sha": "a4614a03ec703d5a3ba55079bcf66ae7ea9b342a", "filename": "gcc/testsuite/ChangeLog-2009", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2FChangeLog-2009", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2FChangeLog-2009", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog-2009?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -6853,7 +6853,7 @@\n \t* gcc.dg/tree-ssa/fre-vce-1.c: Cleanup \"fre\" tree dump.\n \t* gcc.dg/vect/vect-shift-2.c: Cleanup \"vect\" tree dump.\n \t* gcc.dg/vect/vect.exp (VECT_SLP_CFLAGS): Initialize with original\n-\tDEFAULT_VECTFLAGS.\n+\tDEFAULT_VECTCFLAGS.\n \n 2009-06-21  Ira Rosen  <irar@il.ibm.com>\n \t    Revital Eres  <eres@il.ibm.com>"}, {"sha": "9a03f6c428615578e115fcb64e1f22c57b695b2d", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -36,6 +36,7 @@ global dg-do-what-default\n set save-dg-do-what-default ${dg-do-what-default}\n \n # Set up flags used for tests that don't specify options.\n+global DEFAULT_VECTCFLAGS\n set DEFAULT_VECTCFLAGS \"\"\n \n # These flags are used for all targets.\n@@ -45,80 +46,7 @@ lappend DEFAULT_VECTCFLAGS \"-O2\" \"-ftree-vectorize\" \"-fno-vect-cost-model\" \\\n # Skip these tests for targets that do not support generating vector\n # code.  Set additional target-dependent vector flags, which can be\n # overridden by using dg-options in individual tests.\n-if  [istarget \"powerpc-*paired*\"]  {\n-   lappend DEFAULT_VECTCFLAGS \"-mpaired\"\n-    if [check_750cl_hw_available] {\n-        set dg-do-what-default run \n-    } else {\n-        set dg-do-what-default compile\n-    }\n-} elseif [istarget \"powerpc*-*-*\"] {\n-    # Skip targets not supporting -maltivec.\n-    if ![is-effective-target powerpc_altivec_ok] {\n-\treturn\n-    }\n-\n-    lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n-    if [check_vsx_hw_available]  {\n-      lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n-    }\n-\n-    if [check_vmx_hw_available] {\n-\tset dg-do-what-default run\n-    } else {\n-\tif [is-effective-target ilp32] {\n-\t    # Specify a cpu that supports VMX for compile-only tests.\n-\t    lappend DEFAULT_VECTCFLAGS \"-mcpu=970\"\n-\t}\n-\tset dg-do-what-default compile\n-    }\n-} elseif { [istarget  \"spu-*-*\"] } {\n-   set dg-do-what-default run\n-} elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n-    lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    if { [check_effective_target_sse2_runtime] } {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif { [istarget \"mips*-*-*\"]\n-\t   && ([check_effective_target_mpaired_single]\n-\t\t|| [check_effective_target_mips_loongson])\n-\t   && [check_effective_target_nomips16] } {\n-    if { [check_effective_target_mpaired_single] } {\n-\tlappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n-    }\n-    set dg-do-what-default run\n-} elseif [istarget \"sparc*-*-*\"] {\n-    lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n-    if [check_effective_target_ultrasparc_hw] {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif [istarget \"alpha*-*-*\"] {\n-    # Alpha's vectorization capabilities are extremely limited.\n-    # It's more effort than its worth disabling all of the tests\n-    # that it cannot pass.  But if you actually want to see what\n-    # does work, command out the return.\n-    return\n-\n-    lappend DEFAULT_VECTCFLAGS \"-mmax\"\n-    if [check_alpha_max_hw_available] {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif [istarget \"ia64-*-*\"] {\n-    set dg-do-what-default run\n-} elseif [is-effective-target arm_neon_ok] {\n-    eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]\n-    if [is-effective-target arm_neon_hw] {\n-      set dg-do-what-default run\n-    } else {\n-      set dg-do-what-default compile\n-    }\n-} else {\n+if ![check_vect_support_and_set_flags] {\n     return\n }\n "}, {"sha": "2111e384a5a209064acccd2806e3c59652da3d75", "filename": "gcc/testsuite/gcc.dg/graphite/graphite.exp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -49,14 +49,21 @@ set vect_files        [lsort [glob -nocomplain $srcdir/$subdir/vect-*.c ] ]\n set dg-do-what-default compile\n dg-runtest $scop_files        \"\" \"-O2 -fgraphite -fdump-tree-graphite-all\"\n dg-runtest $id_files          \"\" \"-O2 -fgraphite-identity -ffast-math\"\n-dg-runtest $vect_files        \"\" \"-O2 -fgraphite-identity -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\"\n \n # Tests to be run.\n set dg-do-what-default run\n dg-runtest $run_id_files      \"\" \"-O2 -fgraphite-identity\"\n dg-runtest $interchange_files \"\" \"-O2 -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math -fdump-tree-graphite-all\"\n dg-runtest $block_files       \"\" \"-O2 -floop-block -fno-loop-strip-mine -fno-loop-interchange -ffast-math -fdump-tree-graphite-all\"\n \n+# Vectorizer tests, to be run or compiled, depending on target capabilities.\n+global DEFAULT_VECTCFLAGS\n+set DEFAULT_VECTCFLAGS \"-O2 -fgraphite-identity -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\"\n+\n+if [check_vect_support_and_set_flags] {\n+    dg-runtest $vect_files        \"\" $DEFAULT_VECTCFLAGS\n+}\n+\n # The default action for the rest of the files is 'compile'.\n set dg-do-what-default compile\n foreach f $scop_files        {lremove wait_to_run_files $f}"}, {"sha": "255546b0cf0ed3247565392b6acca5b7e77db4f5", "filename": "gcc/testsuite/gcc.dg/graphite/pr40281.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40281.c?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-do compile } */\n /* { dg-options \"-O -fprefetch-loop-arrays -w\" } */\n /* { dg-options \"-O -fprefetch-loop-arrays -march=i686 -msse -w\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n /* { dg-require-effective-target sse { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */"}, {"sha": "45df7df287eba9d2d866fa560bc12b3bdf7d584a", "filename": "gcc/testsuite/gcc.dg/graphite/pr41888.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr41888.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr41888.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr41888.c?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-do compile } */\n /* { dg-options \"-g -O2 -ftree-loop-distribution -fgraphite-identity\" } */\n \n int"}, {"sha": "a9f1e2dee3ff5f1f9eae157e89a37fdca49a9d54", "filename": "gcc/testsuite/gcc.dg/graphite/pr42729.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr42729.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr42729.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr42729.c?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-do compile } */\n /* { dg-options \"-O1 -fgraphite-identity -fcompare-debug\" } */\n \n int A[10];"}, {"sha": "bd685a651c8ed1bb1332fca34683eda7be3d87f6", "filename": "gcc/testsuite/gcc.dg/graphite/vect-pr43423.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fvect-pr43423.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fvect-pr43423.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fvect-pr43423.c?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n \n int a[100], b[100], c[100];"}, {"sha": "170c33db2a526d8edaa70709786df1db0b3959da", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 2, "deletions": 78, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -21,6 +21,7 @@\n load_lib gcc-dg.exp\n \n # Set up flags used for tests that don't specify options.\n+global DEFAULT_VECTCFLAGS\n set DEFAULT_VECTCFLAGS \"\"\n \n # If the target system supports vector instructions, the default action\n@@ -34,84 +35,7 @@ set save-dg-do-what-default ${dg-do-what-default}\n # Skip these tests for targets that do not support generating vector\n # code.  Set additional target-dependent vector flags, which can be\n # overridden by using dg-options in individual tests.\n-if  [istarget \"powerpc-*paired*\"]  {\n-   lappend DEFAULT_VECTCFLAGS \"-mpaired\"\n-    if [check_750cl_hw_available] {\n-        set dg-do-what-default run \n-    } else {\n-        set dg-do-what-default compile\n-    }\n-} elseif [istarget \"powerpc*-*-*\"] {\n-    # Skip targets not supporting -maltivec.\n-    if ![is-effective-target powerpc_altivec_ok] {\n-\treturn\n-    }\n-\n-    lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n-    if [check_vsx_hw_available]  {\n-      lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n-    }\n-\n-    if [check_vmx_hw_available] {\n-\tset dg-do-what-default run\n-    } else {\n-\tif [is-effective-target ilp32] {\n-\t    # Specify a cpu that supports VMX for compile-only tests.\n-\t    lappend DEFAULT_VECTCFLAGS \"-mcpu=970\"\n-\t}\n-\tset dg-do-what-default compile\n-    }\n-} elseif { [istarget  \"spu-*-*\"] } {\n-   set dg-do-what-default run\n-} elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n-    lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    if { [check_effective_target_sse2_runtime] } {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif { [istarget \"mips*-*-*\"]\n-\t   && ([check_effective_target_mpaired_single]\n-\t\t|| [check_effective_target_mips_loongson])\n-\t   && [check_effective_target_nomips16] } {\n-    if { [check_effective_target_mpaired_single] } {\n-\tlappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n-    }\n-    set dg-do-what-default run\n-} elseif [istarget \"sparc*-*-*\"] {\n-    lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n-    if [check_effective_target_ultrasparc_hw] {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif [istarget \"alpha*-*-*\"] {\n-    # Alpha's vectorization capabilities are extremely limited.\n-    # It's more effort than its worth disabling all of the tests\n-    # that it cannot pass.  But if you actually want to see what\n-    # does work, command out the return.\n-    return\n-\n-    lappend DEFAULT_VECTCFLAGS \"-mmax\"\n-    if [check_alpha_max_hw_available] {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif [istarget \"ia64-*-*\"] {\n-    set dg-do-what-default run\n-} elseif [is-effective-target arm_neon_ok] {\n-    eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]\n-    # NEON does not support denormals, so is not used for vectorization by\n-    # default to avoid loss of precision.  We must pass -ffast-math to test\n-    # vectorization of float operations.\n-    lappend DEFAULT_VECTCFLAGS \"-ffast-math\"\n-    if [is-effective-target arm_neon_hw] {\n-      set dg-do-what-default run\n-    } else {\n-      set dg-do-what-default compile\n-    }\n-} else {\n+if ![check_vect_support_and_set_flags] {\n     return\n }\n "}, {"sha": "11bcecd7caad9b60aa505050965dba9b6232d647", "filename": "gcc/testsuite/gfortran.dg/vect/vect.exp", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -21,6 +21,7 @@ load_lib gfortran-dg.exp\n load_lib target-supports.exp\n \n # Set up flags used for tests that don't specify options.\n+global DEFAULT_VECTCFLAGS\n set DEFAULT_VECTCFLAGS \"\"\n \n # These flags are used for all targets.\n@@ -38,80 +39,7 @@ set save-dg-do-what-default ${dg-do-what-default}\n # Skip these tests for targets that do not support generating vector\n # code.  Set additional target-dependent vector flags, which can be\n # overridden by using dg-options in individual tests.\n-if  [istarget \"powerpc-*paired*\"]  {\n-   lappend DEFAULT_VECTCFLAGS \"-mpaired\"\n-    if [check_750cl_hw_available] {\n-        set dg-do-what-default run \n-    } else {\n-        set dg-do-what-default compile\n-    }\n-} elseif [istarget \"powerpc*-*-*\"] {\n-    # Skip targets not supporting -maltivec.\n-    if ![is-effective-target powerpc_altivec_ok] {\n-\treturn\n-    }\n-\n-    lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n-    if [check_vsx_hw_available]  {\n-      lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n-    }\n-\n-    if [check_vmx_hw_available] {\n-\tset dg-do-what-default run\n-    } else {\n-\tif [is-effective-target ilp32] {\n-\t    # Specify a cpu that supports VMX for compile-only tests.\n-\t    lappend DEFAULT_VECTCFLAGS \"-mcpu=970\"\n-\t}\n-\tset dg-do-what-default compile\n-    }\n-} elseif { [istarget  \"spu-*-*\"] } {\n-   set dg-do-what-default run\n-} elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n-    lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    if { [check_effective_target_sse2_runtime] } {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif { [istarget \"mips*-*-*\"]\n-\t   && ([check_effective_target_mpaired_single]\n-\t\t|| [check_effective_target_mips_loongson])\n-\t   && [check_effective_target_nomips16] } {\n-    if { [check_effective_target_mpaired_single] } {\n-\tlappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n-    }\n-    set dg-do-what-default run\n-} elseif [istarget \"sparc*-*-*\"] {\n-    lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n-    if [check_effective_target_ultrasparc_hw] {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif [istarget \"alpha*-*-*\"] {\n-    # Alpha's vectorization capabilities are extremely limited.\n-    # It's more effort than its worth disabling all of the tests\n-    # that it cannot pass.  But if you actually want to see what\n-    # does work, command out the return.\n-    return\n-\n-    lappend DEFAULT_VECTCFLAGS \"-mmax\"\n-    if [check_alpha_max_hw_available] {\n-\tset dg-do-what-default run\n-    } else {\n-\tset dg-do-what-default compile\n-    }\n-} elseif [istarget \"ia64-*-*\"] {\n-    set dg-do-what-default run\n-} elseif [is-effective-target arm_neon_ok] {\n-    eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]\n-    if [is-effective-target arm_neon_hw] {\n-      set dg-do-what-default run\n-    } else {\n-      set dg-do-what-default compile\n-    }\n-} else {\n+if ![check_vect_support_and_set_flags] {\n     return\n }\n "}, {"sha": "c443312898913c51fb7d0bb8d75783debc50d7a2", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a31f6a360b162a2defc6ddaeddc49388a5dffbd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9a31f6a360b162a2defc6ddaeddc49388a5dffbd", "patch": "@@ -3768,3 +3768,98 @@ proc check_effective_target_run_expensive_tests { } {\n proc check_effective_target_mempcpy {} {\n     return [check_function_available \"mempcpy\"]\n }\n+\n+# Check whether the vectorizer tests are supported by the target and\n+# append additional target-dependent compile flags to DEFAULT_VECTCFLAGS.\n+# Set dg-do-what-default to either compile or run, depending on target\n+# capabilities.  Return 1 if vectorizer tests are supported by\n+# target, 0 otherwise.\n+\n+proc check_vect_support_and_set_flags { } {\n+    global DEFAULT_VECTCFLAGS\n+    global dg-do-what-default\n+\n+    if  [istarget \"powerpc-*paired*\"]  {\n+        lappend DEFAULT_VECTCFLAGS \"-mpaired\"\n+        if [check_750cl_hw_available] {\n+            set dg-do-what-default run\n+        } else {\n+            set dg-do-what-default compile\n+        }\n+    } elseif [istarget \"powerpc*-*-*\"] {\n+        # Skip targets not supporting -maltivec.\n+        if ![is-effective-target powerpc_altivec_ok] {\n+            return 0\n+        }\n+\n+        lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n+        if [check_vsx_hw_available]  {\n+            lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n+        }\n+\n+        if [check_vmx_hw_available] {\n+            set dg-do-what-default run\n+        } else {\n+            if [is-effective-target ilp32] {\n+                # Specify a cpu that supports VMX for compile-only tests.\n+                lappend DEFAULT_VECTCFLAGS \"-mcpu=970\"\n+            }\n+            set dg-do-what-default compile\n+        }\n+    } elseif { [istarget  \"spu-*-*\"] } {\n+        set dg-do-what-default run\n+    } elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n+        lappend DEFAULT_VECTCFLAGS \"-msse2\"\n+        if { [check_effective_target_sse2_runtime] } {\n+            set dg-do-what-default run\n+        } else {\n+            set dg-do-what-default compile\n+        }\n+    } elseif { [istarget \"mips*-*-*\"]\n+               && ([check_effective_target_mpaired_single]\n+                    || [check_effective_target_mips_loongson])\n+               && [check_effective_target_nomips16] } {\n+        if { [check_effective_target_mpaired_single] } {\n+            lappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n+        }\n+        set dg-do-what-default run\n+    } elseif [istarget \"sparc*-*-*\"] {\n+        lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n+        if [check_effective_target_ultrasparc_hw] {\n+            set dg-do-what-default run\n+        } else {\n+            set dg-do-what-default compile\n+        }\n+    } elseif [istarget \"alpha*-*-*\"] {\n+        # Alpha's vectorization capabilities are extremely limited.\n+        # It's more effort than its worth disabling all of the tests\n+        # that it cannot pass.  But if you actually want to see what\n+        # does work, command out the return.\n+        return 0\n+\n+        lappend DEFAULT_VECTCFLAGS \"-mmax\"\n+        if [check_alpha_max_hw_available] {\n+            set dg-do-what-default run\n+        } else {\n+            set dg-do-what-default compile\n+        }\n+    } elseif [istarget \"ia64-*-*\"] {\n+        set dg-do-what-default run\n+    } elseif [is-effective-target arm_neon_ok] {\n+        eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]\n+        # NEON does not support denormals, so is not used for vectorization by\n+        # default to avoid loss of precision.  We must pass -ffast-math to test\n+        # vectorization of float operations.\n+        lappend DEFAULT_VECTCFLAGS \"-ffast-math\"\n+        if [is-effective-target arm_neon_hw] {\n+            set dg-do-what-default run\n+        } else {\n+            set dg-do-what-default compile\n+        }\n+    } else {\n+        return 0\n+    }\n+\n+    return 1\n+}\n+"}]}