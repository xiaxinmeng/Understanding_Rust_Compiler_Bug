{"sha": "f08863f97b94e6429ee8923bf6d2936aef81be4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4ODYzZjk3Yjk0ZTY0MjllZTg5MjNiZjZkMjkzNmFlZjgxYmU0Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-14T07:58:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-14T07:58:08Z"}, "message": "decl.c (gnat_to_gnu_entity): Fix comment.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Class_Wide_Type>: Fix\n\tcomment.\n\t* gcc-interface/trans.c (process_freeze_entity): Use local copy of\n\tEkind.  Return early for class-wide types.  Do not compute initializer\n\tunless necessary.  Reuse the tree for an associated class-wide type\n\tonly if processing its root type.\n\nFrom-SVN: r158295", "tree": {"sha": "4b46042a0e42b435c60928bcc65d4be4f33502d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b46042a0e42b435c60928bcc65d4be4f33502d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f08863f97b94e6429ee8923bf6d2936aef81be4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08863f97b94e6429ee8923bf6d2936aef81be4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08863f97b94e6429ee8923bf6d2936aef81be4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08863f97b94e6429ee8923bf6d2936aef81be4b/comments", "author": null, "committer": null, "parents": [{"sha": "3f529c2cad4db21630f463fdb3dd0d04c2666890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f529c2cad4db21630f463fdb3dd0d04c2666890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f529c2cad4db21630f463fdb3dd0d04c2666890"}], "stats": {"total": 152, "additions": 99, "deletions": 53}, "files": [{"sha": "79c4721e4a761bbbe1e2e54f38800dc43c1f2003", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f08863f97b94e6429ee8923bf6d2936aef81be4b", "patch": "@@ -1,3 +1,12 @@\n+2010-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Class_Wide_Type>: Fix\n+\tcomment.\n+\t* gcc-interface/trans.c (process_freeze_entity): Use local copy of\n+\tEkind.  Return early for class-wide types.  Do not compute initializer\n+\tunless necessary.  Reuse the tree for an associated class-wide type\n+\tonly if processing its root type.\n+\n 2010-04-13  Duncan Sands  <baldrick@free.fr>\n \n \t* gcc-interface/misc.c (gnat_eh_type_covers): Remove."}, {"sha": "7780cff32a4bc31530518fae0c53bc2491a75468", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f08863f97b94e6429ee8923bf6d2936aef81be4b", "patch": "@@ -4343,9 +4343,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tbreak;\n       }\n \n-      /* Simple class_wide types are always viewed as their root_type\n-\t by Gigi unless an Equivalent_Type is specified.  */\n     case E_Class_Wide_Type:\n+      /* Class-wide types are always transformed into their root type.  */\n       gnu_decl = gnat_to_gnu_entity (gnat_equiv_type, NULL_TREE, 0);\n       maybe_present = true;\n       break;"}, {"sha": "7716061f03625b5eecb0555e2e0c69c1fcebd0dc", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=f08863f97b94e6429ee8923bf6d2936aef81be4b", "patch": "@@ -6073,92 +6073,85 @@ elaborate_all_entities (Node_Id gnat_node)\n     elaborate_all_entities (Library_Unit (gnat_node));\n }\n \f\n-/* Do the processing of N_Freeze_Entity, GNAT_NODE.  */\n+/* Do the processing of GNAT_NODE, an N_Freeze_Entity.  */\n \n static void\n process_freeze_entity (Node_Id gnat_node)\n {\n-  Entity_Id gnat_entity = Entity (gnat_node);\n-  tree gnu_old;\n-  tree gnu_new;\n-  tree gnu_init\n-    = (Nkind (Declaration_Node (gnat_entity)) == N_Object_Declaration\n-       && present_gnu_tree (Declaration_Node (gnat_entity)))\n-      ? get_gnu_tree (Declaration_Node (gnat_entity)) : NULL_TREE;\n+  const Entity_Id gnat_entity = Entity (gnat_node);\n+  const Entity_Kind kind = Ekind (gnat_entity);\n+  tree gnu_old, gnu_new;\n \n-  /* If this is a package, need to generate code for the package.  */\n-  if (Ekind (gnat_entity) == E_Package)\n+  /* If this is a package, we need to generate code for the package.  */\n+  if (kind == E_Package)\n     {\n       insert_code_for\n-  \t(Parent (Corresponding_Body\n-  \t\t (Parent (Declaration_Node (gnat_entity)))));\n+\t(Parent (Corresponding_Body\n+\t\t (Parent (Declaration_Node (gnat_entity)))));\n       return;\n     }\n \n-  /* Check for old definition after the above call.  This Freeze_Node\n-     might be for one its Itypes.  */\n+  /* Don't do anything for class-wide types as they are always transformed\n+     into their root type.  */\n+  if (kind == E_Class_Wide_Type)\n+    return;\n+\n+  /* Check for an old definition.  This freeze node might be for an Itype.  */\n   gnu_old\n-    = present_gnu_tree (gnat_entity) ? get_gnu_tree (gnat_entity) : 0;\n+    = present_gnu_tree (gnat_entity) ? get_gnu_tree (gnat_entity) : NULL_TREE;\n \n-  /* If this entity has an Address representation clause, GNU_OLD is the\n+  /* If this entity has an address representation clause, GNU_OLD is the\n      address, so discard it here.  */\n   if (Present (Address_Clause (gnat_entity)))\n-    gnu_old = 0;\n-\n-  /* Don't do anything for class-wide types as they are always transformed\n-     into their root type.  */\n-  if (Ekind (gnat_entity) == E_Class_Wide_Type)\n-    return;\n+    gnu_old = NULL_TREE;\n \n   /* Don't do anything for subprograms that may have been elaborated before\n-     their freeze nodes.  This can happen, for example because of an inner call\n-     in an instance body, or a previous compilation of a spec for inlining\n-     purposes.  */\n+     their freeze nodes.  This can happen, for example, because of an inner\n+     call in an instance body or because of previous compilation of a spec\n+     for inlining purposes.  */\n   if (gnu_old\n       && ((TREE_CODE (gnu_old) == FUNCTION_DECL\n-\t   && (Ekind (gnat_entity) == E_Function\n-\t       || Ekind (gnat_entity) == E_Procedure))\n-\t  || (gnu_old\n-\t      && TREE_CODE (TREE_TYPE (gnu_old)) == FUNCTION_TYPE\n-\t      && Ekind (gnat_entity) == E_Subprogram_Type)))\n+\t   && (kind == E_Function || kind == E_Procedure))\n+\t  || (TREE_CODE (TREE_TYPE (gnu_old)) == FUNCTION_TYPE\n+\t      && kind == E_Subprogram_Type)))\n     return;\n \n   /* If we have a non-dummy type old tree, we have nothing to do, except\n      aborting if this is the public view of a private type whose full view was\n      not delayed, as this node was never delayed as it should have been.  We\n      let this happen for concurrent types and their Corresponding_Record_Type,\n-     however, because each might legitimately be elaborated before it's own\n+     however, because each might legitimately be elaborated before its own\n      freeze node, e.g. while processing the other.  */\n   if (gnu_old\n       && !(TREE_CODE (gnu_old) == TYPE_DECL\n \t   && TYPE_IS_DUMMY_P (TREE_TYPE (gnu_old))))\n     {\n-      gcc_assert ((IN (Ekind (gnat_entity), Incomplete_Or_Private_Kind)\n+      gcc_assert ((IN (kind, Incomplete_Or_Private_Kind)\n \t\t   && Present (Full_View (gnat_entity))\n \t\t   && No (Freeze_Node (Full_View (gnat_entity))))\n \t\t  || Is_Concurrent_Type (gnat_entity)\n-\t\t  || (IN (Ekind (gnat_entity), Record_Kind)\n+\t\t  || (IN (kind, Record_Kind)\n \t\t      && Is_Concurrent_Record_Type (gnat_entity)));\n       return;\n     }\n \n   /* Reset the saved tree, if any, and elaborate the object or type for real.\n-     If there is a full declaration, elaborate it and copy the type to\n-     GNAT_ENTITY.  Likewise if this is the record subtype corresponding to\n-     a class wide type or subtype.  */\n+     If there is a full view, elaborate it and use the result.  And, if this\n+     is the root type of a class-wide type, reuse it for the latter.  */\n   if (gnu_old)\n     {\n       save_gnu_tree (gnat_entity, NULL_TREE, false);\n-      if (IN (Ekind (gnat_entity), Incomplete_Or_Private_Kind)\n-  \t  && Present (Full_View (gnat_entity))\n-  \t  && present_gnu_tree (Full_View (gnat_entity)))\n-  \tsave_gnu_tree (Full_View (gnat_entity), NULL_TREE, false);\n-      if (Present (Class_Wide_Type (gnat_entity))\n-\t  && Class_Wide_Type (gnat_entity) != gnat_entity)\n+      if (IN (kind, Incomplete_Or_Private_Kind)\n+\t  && Present (Full_View (gnat_entity))\n+\t  && present_gnu_tree (Full_View (gnat_entity)))\n+\tsave_gnu_tree (Full_View (gnat_entity), NULL_TREE, false);\n+      if (IN (kind, Type_Kind)\n+\t  && Present (Class_Wide_Type (gnat_entity))\n+\t  && Root_Type (Class_Wide_Type (gnat_entity)) == gnat_entity)\n \tsave_gnu_tree (Class_Wide_Type (gnat_entity), NULL_TREE, false);\n     }\n \n-  if (IN (Ekind (gnat_entity), Incomplete_Or_Private_Kind)\n+  if (IN (kind, Incomplete_Or_Private_Kind)\n       && Present (Full_View (gnat_entity)))\n     {\n       gnu_new = gnat_to_gnu_entity (Full_View (gnat_entity), NULL_TREE, 1);\n@@ -6174,16 +6167,25 @@ process_freeze_entity (Node_Id gnat_node)\n \tSet_RM_Size (gnat_entity, RM_Size (Full_View (gnat_entity)));\n \n       /* The above call may have defined this entity (the simplest example\n-  \t of this is when we have a private enumeral type since the bounds\n-  \t will have the public view.  */\n+\t of this is when we have a private enumeral type since the bounds\n+\t will have the public view).  */\n       if (!present_gnu_tree (gnat_entity))\n-  \tsave_gnu_tree (gnat_entity, gnu_new, false);\n-      if (Present (Class_Wide_Type (gnat_entity))\n-\t  && Class_Wide_Type (gnat_entity) != gnat_entity)\n-\tsave_gnu_tree (Class_Wide_Type (gnat_entity), gnu_new, false);\n+\tsave_gnu_tree (gnat_entity, gnu_new, false);\n     }\n   else\n-    gnu_new = gnat_to_gnu_entity (gnat_entity, gnu_init, 1);\n+    {\n+      tree gnu_init\n+\t= (Nkind (Declaration_Node (gnat_entity)) == N_Object_Declaration\n+\t   && present_gnu_tree (Declaration_Node (gnat_entity)))\n+\t  ? get_gnu_tree (Declaration_Node (gnat_entity)) : NULL_TREE;\n+\n+      gnu_new = gnat_to_gnu_entity (gnat_entity, gnu_init, 1);\n+    }\n+\n+  if (IN (kind, Type_Kind)\n+      && Present (Class_Wide_Type (gnat_entity))\n+      && Root_Type (Class_Wide_Type (gnat_entity)) == gnat_entity)\n+    save_gnu_tree (Class_Wide_Type (gnat_entity), gnu_new, false);\n \n   /* If we've made any pointers to the old version of this type, we\n      have to update them.  */"}, {"sha": "d0065311be212075da09565bf5be6124d6a2e7cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f08863f97b94e6429ee8923bf6d2936aef81be4b", "patch": "@@ -1,3 +1,9 @@\n+2010-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/class_wide.adb: Rename into...\n+\t* gnat.dg/class_wide1.adb: ...this.\n+\t* gnat.dg/class_wide2.ad[sb]: New test.\n+\n 2010-04-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "ba6fea032934c110f1df93a80b3e04c9b13ec8c1", "filename": "gcc/testsuite/gnat.dg/class_wide1.adb", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide1.adb?ref=f08863f97b94e6429ee8923bf6d2936aef81be4b", "patch": "@@ -1,6 +1,6 @@\n -- { dg-do compile }\n \n-procedure class_wide is\n+procedure Class_Wide1 is\n     package P is\n        type T is tagged null record;\n        procedure P1 (x : T'Class);", "previous_filename": "gcc/testsuite/gnat.dg/class_wide.adb"}, {"sha": "b82289d5ef531b9c3f199550d957a3ba5ce5c328", "filename": "gcc/testsuite/gnat.dg/class_wide2.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide2.adb?ref=f08863f97b94e6429ee8923bf6d2936aef81be4b", "patch": "@@ -0,0 +1,13 @@\n+-- { dg-do compile }\n+\n+package body Class_Wide2 is\n+\n+   procedure Initialize is\n+      Var_Acc : Class_Acc := new Grand_Child;\n+      Var     : Grand_Child'Class := Grand_Child'Class (Var_Acc.all);  -- { dg-bogus \"already constrained\" \"\" { xfail *-*-* } }\n+\n+   begin\n+      Var := Grand_Child'Class (Var_Acc.all);\n+   end Initialize;\n+\n+end Class_Wide2;"}, {"sha": "a1acc223e579756db708ba9e7a856f20618b4c03", "filename": "gcc/testsuite/gnat.dg/class_wide2.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08863f97b94e6429ee8923bf6d2936aef81be4b/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fclass_wide2.ads?ref=f08863f97b94e6429ee8923bf6d2936aef81be4b", "patch": "@@ -0,0 +1,17 @@\n+package Class_Wide2 is\n+\n+   type Root_1 (V : Integer) is tagged record\n+      null;\n+   end record;\n+\n+   type Child is new Root_1 (1) with null record;\n+\n+   type Class_Acc is access all Child'Class;\n+\n+   type Grand_Child is new Child with record\n+      null;\n+   end record;\n+\n+   procedure Initialize;\n+\n+end Class_Wide2;"}]}