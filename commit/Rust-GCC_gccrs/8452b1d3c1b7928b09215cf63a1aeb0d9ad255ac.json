{"sha": "8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ1MmIxZDNjMWI3OTI4YjA5MjE1Y2Y2M2ExYWViMGQ5YWQyNTVhYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-03T17:37:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-03T17:37:51Z"}, "message": "class.c (instantiate_type): Be more helpful.\n\n\t* class.c (instantiate_type): Be more helpful.\n\t* decl2.c (import_export_decl): Call import_export_class.\n\t* cp-tree.h (EMPTY_CONSTRUCTOR_P): Check !TREE_HAS_CONSTRUCTOR.\n\t* decl2.c (build_expr_from_tree): Propagate TREE_HAS_CONSTRUCTOR.\n\t* pt.c (tsubst_copy): Likewise.\n\nFrom-SVN: r23511", "tree": {"sha": "d21dc62a649aa12df9af2009b659425411cba4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d21dc62a649aa12df9af2009b659425411cba4ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/comments", "author": null, "committer": null, "parents": [{"sha": "74641843a04eb3c3bc6fd23f2267edabade504f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74641843a04eb3c3bc6fd23f2267edabade504f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74641843a04eb3c3bc6fd23f2267edabade504f7"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "bccf932653dc397d6ee826ba283da986f9f68237", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "patch": "@@ -1,3 +1,13 @@\n+1998-11-02  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (instantiate_type): Be more helpful.\n+\n+\t* decl2.c (import_export_decl): Call import_export_class.\n+\n+\t* cp-tree.h (EMPTY_CONSTRUCTOR_P): Check !TREE_HAS_CONSTRUCTOR.\n+\t* decl2.c (build_expr_from_tree): Propagate TREE_HAS_CONSTRUCTOR.\n+\t* pt.c (tsubst_copy): Likewise.\n+\n 1998-11-02  Mark Mitchell  <mark@markmitchell.com>\n \n \t* init.c (expand_vec_init): Fix off-by-one error."}, {"sha": "41ca26557f40eff98bb50332b90aea59f0712f97", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "patch": "@@ -5040,8 +5040,16 @@ instantiate_type (lhstype, rhs, complain)\n \t    my_friendly_assert (TREE_CODE (function) == FUNCTION_DECL, 185);\n \n \t    if (! DECL_STATIC_FUNCTION_P (function))\n-\t      cp_error (\"reference to `%D' can only be used in a call\",\n-\t\t\tfunction);\n+\t      {\n+\t\ttree t = TREE_TYPE (TREE_OPERAND (rhs, 0));\n+\t\tif (TYPE_MAIN_VARIANT (t) == current_class_type)\n+\t\t  t = constructor_name (t);\n+\n+\t\tcp_error (\"object-dependent reference to `%D' can only be used in a call\",\n+\t\t\t  function);\n+\t\tcp_error (\"  to form a pointer to member function, say `&%T::%D'\",\n+\t\t\t  t, DECL_NAME (function));\n+\t      }\n \n \t    mark_used (function);\n \t    return function;"}, {"sha": "3f246536e017beccbb78a203887e6b8ebe666c6b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "patch": "@@ -1482,8 +1482,9 @@ extern int flag_new_for_scope;\n    has been duly initialized in its constructor.  */\n #define TREE_HAS_CONSTRUCTOR(NODE) (TREE_LANG_FLAG_4(NODE))\n \n-#define EMPTY_CONSTRUCTOR_P(NODE) (TREE_CODE (NODE) == CONSTRUCTOR \\\n-\t\t\t\t   && CONSTRUCTOR_ELTS (NODE) == NULL_TREE)\n+#define EMPTY_CONSTRUCTOR_P(NODE) (TREE_CODE (NODE) == CONSTRUCTOR\t   \\\n+\t\t\t\t   && CONSTRUCTOR_ELTS (NODE) == NULL_TREE \\\n+\t\t\t\t   && ! TREE_HAS_CONSTRUCTOR (NODE))\n \n #if 0\n /* Indicates that a NON_LVALUE_EXPR came from a C++ reference."}, {"sha": "cad60783bcff96d44d86f234919baaacc22ce913", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "patch": "@@ -2785,6 +2785,7 @@ import_export_decl (decl)\n   else if (DECL_FUNCTION_MEMBER_P (decl))\n     {\n       tree ctype = DECL_CLASS_CONTEXT (decl);\n+      import_export_class (ctype);\n       if (CLASSTYPE_INTERFACE_KNOWN (ctype)\n \t  && (! DECL_ARTIFICIAL (decl) || DECL_VINDEX (decl)))\n \t{\n@@ -2803,6 +2804,10 @@ import_export_decl (decl)\n   else if (DECL_ARTIFICIAL (decl) && DECL_MUTABLE_P (decl))\n     {\n       tree ctype = TREE_TYPE (DECL_NAME (decl));\n+\n+      if (IS_AGGR_TYPE (ctype))\n+\timport_export_class (ctype);\n+\n       if (IS_AGGR_TYPE (ctype) && CLASSTYPE_INTERFACE_KNOWN (ctype)\n \t  && TYPE_VIRTUAL_P (ctype)\n \t  /* If the type is a cv-qualified variant of a type, then we\n@@ -3852,6 +3857,7 @@ build_expr_from_tree (t)\n \n \tr = build_nt (CONSTRUCTOR, NULL_TREE,\n \t\t      build_expr_from_tree (CONSTRUCTOR_ELTS (t)));\n+\tTREE_HAS_CONSTRUCTOR (r) = TREE_HAS_CONSTRUCTOR (t);\n \n \tif (TREE_TYPE (t))\n \t  return digest_init (TREE_TYPE (t), r, 0);"}, {"sha": "b25929e1c2eccaef0b308d4b4c2a04274c72279b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8452b1d3c1b7928b09215cf63a1aeb0d9ad255ac", "patch": "@@ -5917,6 +5917,7 @@ tsubst_copy (t, args, in_decl)\n      tree in_decl;\n {\n   enum tree_code code;\n+  tree r;\n \n   if (t == NULL_TREE || t == error_mark_node)\n     return t;\n@@ -6000,7 +6001,7 @@ tsubst_copy (t, args, in_decl)\n \n \tif (id != TREE_OPERAND (t, 0))\n \t  {\n-\t    tree r = build_nt (LOOKUP_EXPR, id);\n+\t    r = build_nt (LOOKUP_EXPR, id);\n \t    LOOKUP_EXPR_GLOBAL (r) = LOOKUP_EXPR_GLOBAL (t);\n \t    t = r;\n \t  }\n@@ -6119,7 +6120,7 @@ tsubst_copy (t, args, in_decl)\n     case COND_EXPR:\n     case MODOP_EXPR:\n       {\n-\ttree r = build_nt\n+\tr = build_nt\n \t  (code, tsubst_copy (TREE_OPERAND (t, 0), args, in_decl),\n \t   tsubst_copy (TREE_OPERAND (t, 1), args, in_decl),\n \t   tsubst_copy (TREE_OPERAND (t, 2), args, in_decl));\n@@ -6142,7 +6143,7 @@ tsubst_copy (t, args, in_decl)\n \n     case NEW_EXPR:\n       {\n-\ttree r = build_nt\n+\tr = build_nt\n \t(code, tsubst_copy (TREE_OPERAND (t, 0), args, in_decl),\n \t tsubst_copy (TREE_OPERAND (t, 1), args, in_decl),\n \t tsubst_copy (TREE_OPERAND (t, 2), args, in_decl));\n@@ -6152,7 +6153,7 @@ tsubst_copy (t, args, in_decl)\n \n     case DELETE_EXPR:\n       {\n-\ttree r = build_nt\n+\tr = build_nt\n \t(code, tsubst_copy (TREE_OPERAND (t, 0), args, in_decl),\n \t tsubst_copy (TREE_OPERAND (t, 1), args, in_decl));\n \tDELETE_EXPR_USE_GLOBAL (r) = DELETE_EXPR_USE_GLOBAL (t);\n@@ -6223,9 +6224,13 @@ tsubst_copy (t, args, in_decl)\n \treturn t;\n \n     case CONSTRUCTOR:\n-      return build\n-\t(CONSTRUCTOR, tsubst (TREE_TYPE (t), args, in_decl), NULL_TREE,\n-\t tsubst_copy (CONSTRUCTOR_ELTS (t), args, in_decl));\n+      {\n+\tr = build\n+\t  (CONSTRUCTOR, tsubst (TREE_TYPE (t), args, in_decl), NULL_TREE,\n+\t   tsubst_copy (CONSTRUCTOR_ELTS (t), args, in_decl));\n+\tTREE_HAS_CONSTRUCTOR (r) = TREE_HAS_CONSTRUCTOR (t);\n+\treturn r;\n+      }\n \n     default:\n       return t;"}]}