{"sha": "6e3133dd0c6aa6fb8ee26599598099a521e0d134", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUzMTMzZGQwYzZhYTZmYjhlZTI2NTk5NTk4MDk5YTUyMWUwZDEzNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-12-17T20:22:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-12-17T20:22:36Z"}, "message": "guality.h (guality_check): Cast %lli arguments inf fprintf statements to long long int.\n\n\t* gcc.dg/guality/guality.h (guality_check): Cast %lli arguments\n\tinf fprintf statements to long long int.\n\nFrom-SVN: r255765", "tree": {"sha": "b499587d8cb53acb9392277e5d113382625f1ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b499587d8cb53acb9392277e5d113382625f1ebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e3133dd0c6aa6fb8ee26599598099a521e0d134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3133dd0c6aa6fb8ee26599598099a521e0d134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3133dd0c6aa6fb8ee26599598099a521e0d134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3133dd0c6aa6fb8ee26599598099a521e0d134/comments", "author": null, "committer": null, "parents": [{"sha": "8a6b0aae350fca7e6338d0abf70abc596569e036", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6b0aae350fca7e6338d0abf70abc596569e036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6b0aae350fca7e6338d0abf70abc596569e036"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "5cb9c935b4dfba4aae5ffd13e7dc4cc33450861d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3133dd0c6aa6fb8ee26599598099a521e0d134/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3133dd0c6aa6fb8ee26599598099a521e0d134/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e3133dd0c6aa6fb8ee26599598099a521e0d134", "patch": "@@ -1,3 +1,8 @@\n+2017-12-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/guality/guality.h (guality_check): Cast %lli arguments\n+\tinf fprintf statements to long long int.\n+\n 2017-12-17  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* gfortran.dg/error_stop_3.f90: Update -std= option, fix comments.\n@@ -51,7 +56,7 @@\n \n 2017-12-15  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n-        PR target/83358\n+\tPR target/83358\n \t* gcc.target/i386/pr83358-1.c: New test.\n \t* gcc.target/i386/pr83358-2.c: New test.\n \n@@ -395,17 +400,17 @@\n \tvec_cts, vec_ctu.\n \t* gcc.target/powerpc/builtins-3-runnable.c (test_result_sp): Fix printf\n \tconversion character.\n- \t* gcc.target/powerpc/fold-vec-minmax-char.c (test1_min, test2_min,\n+\t* gcc.target/powerpc/fold-vec-minmax-char.c (test1_min, test2_min,\n \ttest4_min, test1_max, test2_max): Add tests for vec_max and vec_min.\n- \t* gcc.target/powerpc/fold-vec-minmax-int.c (test4_min, test5_min,\n+\t* gcc.target/powerpc/fold-vec-minmax-int.c (test4_min, test5_min,\n \ttest7_min, test8_min): Add tests for vec_min.\n- \t* gcc.target/powerpc/fold-vec-minmax-longlong.c (test7_max, test8_max,\n+\t* gcc.target/powerpc/fold-vec-minmax-longlong.c (test7_max, test8_max,\n \ttest9_max, test10_max): Add tests for and vec_max.\n- \t* gcc.target/powerpc/fold-vec-minmax-short.c (test4_min, test5_min,\n+\t* gcc.target/powerpc/fold-vec-minmax-short.c (test4_min, test5_min,\n \ttes7_min, test8_min): Add tests for and vec_min.\n- \t* gcc.target/powerpc/p8vector-builtin-8.c (foo): Add test for vec_adds,\n+\t* gcc.target/powerpc/p8vector-builtin-8.c (foo): Add test for vec_adds,\n \tvec_subs, vec_sum2s, vec_sum4s.\n- \t* gcc.target/powerpc/vsx-splats-p8.c: New file to test vec_splats.\n+\t* gcc.target/powerpc/vsx-splats-p8.c: New file to test vec_splats.\n \t* gcc.target/vsx-vector-5.c (arg1_tests_d, arg1_tests_d): Add\n \ttests for vec_ceil, vec_floor, vec_nearbyint, vec_sqrt.\n \t* gcc.target/vsx-vector-7.c (foo): Add tests for vec_sel.\n@@ -423,7 +428,7 @@\n \tALTIVEC_BUILTIN_VEC_SLL): Add expansions.\n \t* doc/extend.texi: Add documentation for the added builtins.\n \n-2017-12-11  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR rtl-optimization/80693\n \tPR rtl-optimization/81019"}, {"sha": "7a164754dd84444621892e2b0ad7ada457a8fced", "filename": "gcc/testsuite/gcc.dg/guality/guality.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3133dd0c6aa6fb8ee26599598099a521e0d134/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3133dd0c6aa6fb8ee26599598099a521e0d134/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fguality.h?ref=6e3133dd0c6aa6fb8ee26599598099a521e0d134", "patch": "@@ -363,15 +363,18 @@ continue\\n\\\n     switch (result)\n       {\n       case PASS:\n-\tfprintf (stderr, \"PASS: \" GUALITY_TEST \": %s is %lli\\n\", name, value);\n+\tfprintf (stderr, \"PASS: \" GUALITY_TEST \": %s is %lli\\n\", name,\n+\t\t (long long int) value);\n \tbreak;\n       case INCORRECT:\n-\tfprintf (stderr, \"FAIL: \" GUALITY_TEST \": %s is %lli, not %lli\\n\", name, xvalue, value);\n+\tfprintf (stderr, \"FAIL: \" GUALITY_TEST \": %s is %lli, not %lli\\n\", name,\n+\t\t (long long int) xvalue, (long long int) value);\n \tbreak;\n       case INCOMPLETE:\n \tfprintf (stderr, \"%s: \" GUALITY_TEST \": %s is %s, expected %lli\\n\",\n \t\t unknown_ok ? \"UNRESOLVED\" : \"FAIL\", name,\n-\t\t unavailable < 0 ? \"not computable\" : \"optimized away\", value);\n+\t\t unavailable < 0 ? \"not computable\" : \"optimized away\",\n+\t\t (long long int) value);\n \tresult = unknown_ok ? INCOMPLETE : INCORRECT;\n \tbreak;\n       default:"}]}