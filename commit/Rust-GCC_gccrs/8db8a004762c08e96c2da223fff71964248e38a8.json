{"sha": "8db8a004762c08e96c2da223fff71964248e38a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRiOGEwMDQ3NjJjMDhlOTZjMmRhMjIzZmZmNzE5NjQyNDhlMzhhOA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-29T00:45:30Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-01T14:13:04Z"}, "message": "testsuite: aarch64: Add tests for vmull_high intrinsics\n\nAdd tests for vmull_high_* Neon intrinsics. Since these intrinsics\nare only supported for AArch64, these tests are restricted to only\nrun on AArch64 targets.\n\ngcc/testsuite/ChangeLog:\n\n2021-01-29  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high_lane.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high_laneq.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmull_high_n.c:\n\tNew test.", "tree": {"sha": "302ccae708b88dbd0607ce46cb7ec4b4be07e5ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/302ccae708b88dbd0607ce46cb7ec4b4be07e5ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8db8a004762c08e96c2da223fff71964248e38a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db8a004762c08e96c2da223fff71964248e38a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db8a004762c08e96c2da223fff71964248e38a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db8a004762c08e96c2da223fff71964248e38a8/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3eccb6ef9351cf8668eede8060dd7481794cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3eccb6ef9351cf8668eede8060dd7481794cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3eccb6ef9351cf8668eede8060dd7481794cd2"}], "stats": {"total": 277, "additions": 277, "deletions": 0}, "files": [{"sha": "36094fce24f364f6a314f66ae153a211b2a75dff", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmull_high.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high.c?ref=8db8a004762c08e96c2da223fff71964248e38a8", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x40, 0x31,0x24, 0x19,\n+\t\t\t\t\t   0x10, 0x9, 0x4, 0x1 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x90, 0x79, 0x64, 0x51 };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0xc4, 0xa9 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0xf040, 0xf231, 0xf424, 0xf619,\n+\t\t\t\t\t    0xf810, 0xfa09, 0xfc04, 0xfe01 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0xffe80090, 0xffea0079,\n+\t\t\t\t\t    0xffec0064, 0xffee0051 };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0xffffffe4000000c4,\n+\t\t\t\t\t    0xffffffe6000000a9 };\n+VECT_VAR_DECL(expected, poly, 16, 8) [] = { 0x5540, 0x5541, 0x5544, 0x5545,\n+\t\t\t\t\t    0x5550, 0x5551, 0x5554, 0x5555 };\n+\n+#define TEST_MSG \"VMULL_HIGH\"\n+void exec_vmull_high (void)\n+{\n+  /* Basic test: y = vmull_high(x, x), then store the result.  */\n+#define TEST_VMULL_HIGH(T1, T2, W1, W2, N1, N2)\t\t\t\t \\\n+  VECT_VAR(vector_res, T1, W2, N1) =\t\t\t\t\t \\\n+    vmull_high_##T2##W1(VECT_VAR(vector, T1, W1, N2),\t\t\t \\\n+\t\t\tVECT_VAR(vector, T1, W1, N2));\t\t\t \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N1),\t\t\t\t \\\n+\t\t VECT_VAR(vector_res, T1, W2, N1))\n+\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, uint, 8, 16);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, poly, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+  DECL_VARIABLE(vector_res, poly, 16, 8);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, q, int, s, 8, 16);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 8, 16);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, poly, p, 8, 16);\n+\n+  TEST_VMULL_HIGH(int, s, 8, 16, 8, 16);\n+  TEST_VMULL_HIGH(int, s, 16, 32, 4, 8);\n+  TEST_VMULL_HIGH(int, s, 32, 64, 2, 4);\n+  TEST_VMULL_HIGH(uint, u, 8, 16, 8, 16);\n+  TEST_VMULL_HIGH(uint, u, 16, 32, 4, 8);\n+  TEST_VMULL_HIGH(uint, u, 32, 64, 2, 4);\n+  TEST_VMULL_HIGH(poly, p, 8, 16, 8, 16);\n+\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+  CHECK_POLY(TEST_MSG, poly, 16, 8, PRIx16, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vmull_high ();\n+  return 0;\n+}"}, {"sha": "30bc954cd18f9f9f72f985aba8745fc1808dbbf1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmull_high_lane.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_lane.c?ref=8db8a004762c08e96c2da223fff71964248e38a8", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0x2000, 0x2000 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0x2000, 0x2000 };\n+\n+#define TEST_MSG \"VMULL_HIGH_LANE\"\n+void exec_vmull_high_lane (void)\n+{\n+  /* vector_res = vmull_high_lane(vector, vector2, lane), store the result. */\n+#define TEST_VMULL_HIGH_LANE(T1, T2, W1, W2, N1, N2, L)\t\t\t  \\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t\t\t  \\\n+    vmull_high_lane_##T2##W1(VECT_VAR(vector, T1, W1, N1),\t\t  \\\n+\t\t\t     VECT_VAR(vector2, T1, W1, N2),\t\t  \\\n+\t\t\t     L);\t\t\t\t\t  \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t\t\t  \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2))\n+\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector2, int, 16, 4);\n+  DECL_VARIABLE(vector2, int, 32, 2);\n+  DECL_VARIABLE(vector2, uint, 16, 4);\n+  DECL_VARIABLE(vector2, uint, 32, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+\n+  clean_results ();\n+\n+  /* Initialize vector.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x1000);\n+  VDUP(vector, q, int, s, 32, 4, 0x1000);\n+  VDUP(vector, q, uint, u, 16, 8, 0x1000);\n+  VDUP(vector, q, uint, u, 32, 4, 0x1000);\n+\n+  /* Initialize vector2.  */\n+  VDUP(vector2, , int, s, 16, 4, 0x4);\n+  VDUP(vector2, , int, s, 32, 2, 0x2);\n+  VDUP(vector2, , uint, u, 16, 4, 0x4);\n+  VDUP(vector2, , uint, u, 32, 2, 0x2);\n+\n+  /* Choose lane arbitrarily.  */\n+  TEST_VMULL_HIGH_LANE(int, s, 16, 32, 8, 4, 2);\n+  TEST_VMULL_HIGH_LANE(int, s, 32, 64, 4, 2, 1);\n+  TEST_VMULL_HIGH_LANE(uint, u, 16, 32, 8, 4, 2);\n+  TEST_VMULL_HIGH_LANE(uint, u, 32, 64, 4, 2, 1);\n+\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vmull_high_lane ();\n+  return 0;\n+}"}, {"sha": "191ade59868e6c19689cfb33db827606450c7ffd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmull_high_laneq.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_laneq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_laneq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_laneq.c?ref=8db8a004762c08e96c2da223fff71964248e38a8", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0x2000, 0x2000 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0x2000, 0x2000 };\n+\n+#define TEST_MSG \"VMULL_HIGH_LANEQ\"\n+void exec_vmull_high_laneq (void)\n+{\n+  /* vector_res = vmull_high_laneq(vector, vector2, lane), store the result. */\n+#define TEST_VMULL_HIGH_LANEQ(T1, T2, W1, W2, N1, N2, L)\t\t  \\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t\t\t  \\\n+    vmull_high_laneq_##T2##W1(VECT_VAR(vector, T1, W1, N1),\t\t  \\\n+\t\t\t      VECT_VAR(vector2, T1, W1, N1),\t\t  \\\n+\t\t\t      L);\t\t\t\t\t  \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t\t\t  \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2))\n+\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector2, int, 16, 8);\n+  DECL_VARIABLE(vector2, int, 32, 4);\n+  DECL_VARIABLE(vector2, uint, 16, 8);\n+  DECL_VARIABLE(vector2, uint, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+\n+  clean_results ();\n+\n+  /* Initialize vector.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x1000);\n+  VDUP(vector, q, int, s, 32, 4, 0x1000);\n+  VDUP(vector, q, uint, u, 16, 8, 0x1000);\n+  VDUP(vector, q, uint, u, 32, 4, 0x1000);\n+\n+  /* Initialize vector2.  */\n+  VDUP(vector2, q, int, s, 16, 8, 0x4);\n+  VDUP(vector2, q, int, s, 32, 4, 0x2);\n+  VDUP(vector2, q, uint, u, 16, 8, 0x4);\n+  VDUP(vector2, q, uint, u, 32, 4, 0x2);\n+\n+  /* Choose lane arbitrarily.  */\n+  TEST_VMULL_HIGH_LANEQ(int, s, 16, 32, 8, 4, 5);\n+  TEST_VMULL_HIGH_LANEQ(int, s, 32, 64, 4, 2, 1);\n+  TEST_VMULL_HIGH_LANEQ(uint, u, 16, 32, 8, 4, 7);\n+  TEST_VMULL_HIGH_LANEQ(uint, u, 32, 64, 4, 2, 3);\n+\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vmull_high_laneq ();\n+  return 0;\n+}"}, {"sha": "892cca10d012c5975ed40d5a85bdef1f868185f2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmull_high_n.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db8a004762c08e96c2da223fff71964248e38a8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmull_high_n.c?ref=8db8a004762c08e96c2da223fff71964248e38a8", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x11000, 0x11000,\n+\t\t\t\t\t   0x11000, 0x11000 };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0x22000, 0x22000 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x33000, 0x33000,\n+\t\t\t\t\t    0x33000, 0x33000 };\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0x44000, 0x44000 };\n+\n+#define TEST_MSG \"VMULL_HIGH_N\"\n+void exec_vmull_high_n (void)\n+{\n+  int i;\n+\n+  /* vector_res = vmull_high_n(vector, val), then store the result.  */\n+#define TEST_VMULL_HIGH_N(T1, T2, W1, W2, N1, N2, L)\t\t\t  \\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t\t\t  \\\n+    vmull_high_n_##T2##W1(VECT_VAR(vector, T1, W1, N1), L);\t\t  \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t\t\t  \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2))\n+\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+\n+  clean_results ();\n+\n+  /* Initialize vector.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x1000);\n+  VDUP(vector, q, int, s, 32, 4, 0x1000);\n+  VDUP(vector, q, uint, u, 16, 8, 0x1000);\n+  VDUP(vector, q, uint, u, 32, 4, 0x1000);\n+\n+  /* Choose multiplier arbitrarily.  */\n+  TEST_VMULL_HIGH_N(int, s, 16, 32, 8, 4, 0x11);\n+  TEST_VMULL_HIGH_N(int, s, 32, 64, 4, 2, 0x22);\n+  TEST_VMULL_HIGH_N(uint, u, 16, 32, 8, 4, 0x33);\n+  TEST_VMULL_HIGH_N(uint, u, 32, 64, 4, 2, 0x44);\n+\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vmull_high_n ();\n+  return 0;\n+}"}]}