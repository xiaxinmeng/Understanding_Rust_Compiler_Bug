{"sha": "3c4e06c27a886a2b5a2f46d197a2476c8baa46ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M0ZTA2YzI3YTg4NmEyYjVhMmY0NmQxOTdhMjQ3NmM4YmFhNDZjZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-30T05:28:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-30T05:28:52Z"}, "message": "re PR c++/59707 (Crash when using std::map with template class)\n\n\tPR c++/59707\n\t* call.c (add_builtin_candidate): Catch dependent types.\n\nFrom-SVN: r207295", "tree": {"sha": "0eb018ba052dc4372a048baf50937c95dd617962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb018ba052dc4372a048baf50937c95dd617962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b16363e1aa7ff2a614290db89f853b995807601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b16363e1aa7ff2a614290db89f853b995807601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b16363e1aa7ff2a614290db89f853b995807601"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "59f2b7ec91d585cc992c021ac4ec0bc3ac6fa355", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c4e06c27a886a2b5a2f46d197a2476c8baa46ce", "patch": "@@ -1,5 +1,8 @@\n 2014-01-29  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/59707\n+\t* call.c (add_builtin_candidate): Catch dependent types.\n+\n \tPR c++/59989\n \t* pt.c (expand_template_argument_pack): Correct\n \tnon_default_args_count calculation."}, {"sha": "f572bc1fc88013d6952af3f021fe1b51b08bdb81", "filename": "gcc/cp/call.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3c4e06c27a886a2b5a2f46d197a2476c8baa46ce", "patch": "@@ -2329,7 +2329,6 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n \n     case INDIRECT_REF:\n       if (TYPE_PTR_P (type1)\n-\t  && !uses_template_parms (TREE_TYPE (type1))\n \t  && (TYPE_PTROB_P (type1)\n \t      || TREE_CODE (TREE_TYPE (type1)) == FUNCTION_TYPE))\n \tbreak;\n@@ -2467,15 +2466,13 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n \t  && TREE_CODE (type2) == ENUMERAL_TYPE)\n \tbreak;\n       if (TYPE_PTR_P (type1) \n-\t  && null_ptr_cst_p (args[1])\n-\t  && !uses_template_parms (type1))\n+\t  && null_ptr_cst_p (args[1]))\n \t{\n \t  type2 = type1;\n \t  break;\n \t}\n       if (null_ptr_cst_p (args[0]) \n-\t  && TYPE_PTR_P (type2)\n-\t  && !uses_template_parms (type2))\n+\t  && TYPE_PTR_P (type2))\n \t{\n \t  type1 = type2;\n \t  break;\n@@ -2642,6 +2639,28 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n       gcc_unreachable ();\n     }\n \n+  /* Make sure we don't create builtin candidates with dependent types.  */\n+  bool u1 = uses_template_parms (type1);\n+  bool u2 = type2 ? uses_template_parms (type2) : false;\n+  if (u1 || u2)\n+    {\n+      /* Try to recover if one of the types is non-dependent.  But if\n+\t there's only one type, there's nothing we can do.  */\n+      if (!type2)\n+\treturn;\n+      /* And we lose if both are dependent.  */\n+      if (u1 && u2)\n+\treturn;\n+      /* Or if they have different forms.  */\n+      if (TREE_CODE (type1) != TREE_CODE (type2))\n+\treturn;\n+\n+      if (u1 && !u2)\n+\ttype1 = type2;\n+      else if (u2 && !u1)\n+\ttype2 = type1;\n+    }\n+\n   /* If we're dealing with two pointer types or two enumeral types,\n      we need candidates for both of them.  */\n   if (type2 && !same_type_p (type1, type2)"}, {"sha": "bc8e91de4cd7248f787c41218e33c5eb2294838b", "filename": "gcc/testsuite/g++.dg/template/operator12.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4e06c27a886a2b5a2f46d197a2476c8baa46ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator12.C?ref=3c4e06c27a886a2b5a2f46d197a2476c8baa46ce", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/59707\n+\n+struct T {\n+    template<class D> operator D*() const;\n+};\n+\n+void f(T x) {\n+    x < x;\t\t\t// { dg-error \"no match\" }\n+}"}]}