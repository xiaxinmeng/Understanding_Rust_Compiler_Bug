{"sha": "2bef63e105f0fb8f857ec72ce6f6322aa605fa1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlZjYzZTEwNWYwZmI4Zjg1N2VjNzJjZTZmNjMyMmFhNjA1ZmExYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-15T22:03:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-15T22:03:11Z"}, "message": "sreal.h (to_double): New method.\n\n\n\t* sreal.h (to_double): New method.\n\t(shift): Do not ICE on 0.\n\t* sreal.c: Include math.h\n\t(sreal::to_double): New.\n\nFrom-SVN: r218765", "tree": {"sha": "47e5dd490ff7e0e1fe6e3f4282b7c591b9d7503b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47e5dd490ff7e0e1fe6e3f4282b7c591b9d7503b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a/comments", "author": null, "committer": null, "parents": [{"sha": "426bcc95cbaed399329579feb14f776d4c2e4525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426bcc95cbaed399329579feb14f776d4c2e4525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/426bcc95cbaed399329579feb14f776d4c2e4525"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "e050f0327574e1b47c8aed18eb5ce5334efadd52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bef63e105f0fb8f857ec72ce6f6322aa605fa1a", "patch": "@@ -1,3 +1,10 @@\n+2014-12-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* sreal.h (to_double): New method.\n+\t(shift): Do not ICE on 0.\n+\t* sreal.c: Include math.h\n+\t(sreal::to_double): New.\n+\n 2014-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/64316"}, {"sha": "10de80b770217582cc2b43ce904cd4af55187a34", "filename": "gcc/sreal.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=2bef63e105f0fb8f857ec72ce6f6322aa605fa1a", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n \tsig == 0 && exp == -SREAL_MAX_EXP\n */\n \n+#include <math.h>\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -171,6 +172,18 @@ sreal::to_int () const\n   return m_sig;\n }\n \n+/* Return value of *this as double.\n+   This should be used for debug output only.  */\n+\n+double\n+sreal::to_double () const\n+{\n+  double val = m_sig;\n+  if (m_exp)\n+    val *= exp2 (m_exp);\n+  return val;\n+}\n+\n /* Return *this + other.  */\n \n sreal"}, {"sha": "6314cea0fc488d38c620b1632216eed9b9f3f68c", "filename": "gcc/sreal.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a/gcc%2Fsreal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bef63e105f0fb8f857ec72ce6f6322aa605fa1a/gcc%2Fsreal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.h?ref=2bef63e105f0fb8f857ec72ce6f6322aa605fa1a", "patch": "@@ -46,6 +46,7 @@ class sreal\n \n   void dump (FILE *) const;\n   int64_t to_int () const;\n+  double to_double () const;\n   sreal operator+ (const sreal &other) const;\n   sreal operator- (const sreal &other) const;\n   sreal operator* (const sreal &other) const;\n@@ -83,12 +84,14 @@ class sreal\n \n   sreal shift (int s) const\n   {\n+    /* Zero needs no shifting.  */\n+    if (!m_sig)\n+      return *this;\n     gcc_checking_assert (s <= SREAL_BITS);\n     gcc_checking_assert (s >= -SREAL_BITS);\n \n-    /* Exponent should never be so large because shift_right is used only by\n-     sreal_add and sreal_sub ant thus the number cannot be shifted out from\n-     exponent range.  */\n+    /* Overflows/drop to 0 could be handled gracefully, but hopefully we do not\n+       need to do so.  */\n     gcc_checking_assert (m_exp + s <= SREAL_MAX_EXP);\n     gcc_checking_assert (m_exp + s >= -SREAL_MAX_EXP);\n "}]}