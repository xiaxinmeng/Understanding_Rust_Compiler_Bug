{"sha": "1b533361dae91d9a13679b8377111b91cf554217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI1MzMzNjFkYWU5MWQ5YTEzNjc5YjgzNzcxMTFiOTFjZjU1NDIxNw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2015-08-24T18:48:28Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2015-08-24T18:48:28Z"}, "message": "configure.ac: Set have_mmap to no on spu-*-* targets.\n\n\t* configure.ac: Set have_mmap to no on spu-*-* targets.\n\t* configure: Regenerate.\n\nFrom-SVN: r227145", "tree": {"sha": "159bff6d860df6485a0d435933da7932aef5121a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/159bff6d860df6485a0d435933da7932aef5121a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b533361dae91d9a13679b8377111b91cf554217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b533361dae91d9a13679b8377111b91cf554217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b533361dae91d9a13679b8377111b91cf554217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b533361dae91d9a13679b8377111b91cf554217/comments", "author": null, "committer": null, "parents": [{"sha": "74457d003ed7f9577931ae6d7adaa906fc0a0473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74457d003ed7f9577931ae6d7adaa906fc0a0473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74457d003ed7f9577931ae6d7adaa906fc0a0473"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "c31c651f95c6b3b83bda5f7ca7778988f599c7ae", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b533361dae91d9a13679b8377111b91cf554217/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b533361dae91d9a13679b8377111b91cf554217/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=1b533361dae91d9a13679b8377111b91cf554217", "patch": "@@ -1,3 +1,8 @@\n+2015-08-24  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* configure.ac: Set have_mmap to no on spu-*-* targets.\n+\t* configure: Regenerate.\n+\n 2015-08-13  Ian Lance Taylor  <iant@google.com>\n \n \t* dwarf.c (read_function_entry): Add vec_inlined parameter."}, {"sha": "268659948e8daad0c405a7c594b98492549c1fe3", "filename": "libbacktrace/configure", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b533361dae91d9a13679b8377111b91cf554217/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b533361dae91d9a13679b8377111b91cf554217/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=1b533361dae91d9a13679b8377111b91cf554217", "patch": "@@ -11570,6 +11570,12 @@ $as_echo \"$libbacktrace_cv_c_random_seed_string\" >&6; }\n fi\n \n \n+ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n WARN_FLAGS=\n save_CFLAGS=\"$CFLAGS\"\n for real_option in -W -Wall -Wwrite-strings -Wstrict-prototypes \\\n@@ -11616,6 +11622,12 @@ $as_echo \"$ac_res\" >&6; }\n fi\n   done\n CFLAGS=\"$save_CFLAGS\"\n+ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n \n \n if test -n \"${with_target_subdir}\"; then\n@@ -12292,6 +12304,12 @@ else\n     # When built as a GCC target library, we can't do a link test.  We\n     # simply assume that if we have mman.h, we have mmap.\n     have_mmap=yes\n+    case \"${host}\" in\n+    spu-*-*)\n+        # The SPU does not have mmap, but it has a sys/mman.h header file\n+        # containing \"mmap_eaddr\" and the mmap flags, confusing the test.\n+\thave_mmap=no ;;\n+    esac\n   else\n     ac_fn_c_check_func \"$LINENO\" \"mmap\" \"ac_cv_func_mmap\"\n if test \"x$ac_cv_func_mmap\" = x\"\"yes; then :"}, {"sha": "a0e487bb42d71fa88cda59a0b16cbf733716cfaa", "filename": "libbacktrace/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b533361dae91d9a13679b8377111b91cf554217/libbacktrace%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b533361dae91d9a13679b8377111b91cf554217/libbacktrace%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure.ac?ref=1b533361dae91d9a13679b8377111b91cf554217", "patch": "@@ -273,6 +273,12 @@ else\n     # When built as a GCC target library, we can't do a link test.  We\n     # simply assume that if we have mman.h, we have mmap.\n     have_mmap=yes\n+    case \"${host}\" in\n+    spu-*-*)\n+        # The SPU does not have mmap, but it has a sys/mman.h header file\n+        # containing \"mmap_eaddr\" and the mmap flags, confusing the test.\n+\thave_mmap=no ;;\n+    esac\n   else\n     AC_CHECK_FUNC(mmap, [have_mmap=yes], [have_mmap=no])\n   fi"}]}