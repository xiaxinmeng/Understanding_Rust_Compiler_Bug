{"sha": "28068d1115648adcc08ae57372170f3277915a0d", "node_id": "C_kwDOANBUbNoAKDI4MDY4ZDExMTU2NDhhZGNjMDhhZTU3MzcyMTcwZjMyNzc5MTVhMGQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-28T22:30:27Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-28T22:32:12Z"}, "message": "PR tree-optimization/91384: peephole2 to eliminate testl after negl.\n\nThis patch is my proposed solution to PR tree-optimization/91384 which is\na missed-optimization/code quality regression on x86_64.  The problematic\nidiom is \"if (r = -a)\" which is equivalent to both \"r = -a; if (r != 0)\"\nand alternatively \"r = -a; if (a != 0)\".  In this particular case, on\nx86_64, we prefer to use the condition codes from the negation, rather\nthan require an explicit testl instruction.\n\nUnfortunately, combine can't help, as it doesn't attempt to merge pairs\nof instructions that share the same operand(s), only pairs/triples of\ninstructions where the result of each instruction feeds the next.  But\nI doubt there's sufficient benefit to attempt this kind of \"combination\"\n(that wouldn't already be caught by the tree-ssa passes).\n\nFortunately, it's relatively easy to fix this up (addressing the\nregression) during peephole2 to eliminate the unnecessary testl in:\n\n        movl    %edi, %ebx\n        negl    %ebx\n        testl   %edi, %edi\n        je      .L2\n\n2022-02-28  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/91384\n\t* config/i386/i386.md (peephole2): Eliminate final testl insn\n\tfrom the sequence *movsi_internal, *negsi_1, *cmpsi_ccno_1 by\n\ttransforming using *negsi_2 for the negation.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/91384\n\t* gcc.target/i386/pr91384.c: New test case.", "tree": {"sha": "e396a3e29860a7f6ce889b1f4197910706de3ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e396a3e29860a7f6ce889b1f4197910706de3ad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28068d1115648adcc08ae57372170f3277915a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28068d1115648adcc08ae57372170f3277915a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28068d1115648adcc08ae57372170f3277915a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28068d1115648adcc08ae57372170f3277915a0d/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5c6edeb1b2339e10f10bee270e61dbad985800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5c6edeb1b2339e10f10bee270e61dbad985800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5c6edeb1b2339e10f10bee270e61dbad985800"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "5e0a980e7ae31e9f707de16c899c030d70eda293", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28068d1115648adcc08ae57372170f3277915a0d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28068d1115648adcc08ae57372170f3277915a0d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=28068d1115648adcc08ae57372170f3277915a0d", "patch": "@@ -11011,6 +11011,19 @@\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Optimize *negsi_1 followed by *cmpsi_ccno_1 (PR target/91384)\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"general_reg_operand\")\n+\t(match_operand:SWI 1 \"general_reg_operand\"))\n+   (parallel [(set (match_dup 0) (neg:SWI (match_dup 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (reg:CCZ FLAGS_REG) (compare:CCZ (match_dup 1) (const_int 0)))]\n+  \"\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (parallel [(set (reg:CCZ FLAGS_REG)\n+\t\t   (compare:CCZ (neg:SWI (match_dup 0)) (const_int 0)))\n+\t      (set (match_dup 0) (neg:SWI (match_dup 0)))])])\n+\n ;; Special expand pattern to handle integer mode abs\n \n (define_expand \"abs<mode>2\""}, {"sha": "24a60a932ab9bc7c3e0bd95dac6446e5140bf556", "filename": "gcc/testsuite/gcc.target/i386/pr91384.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28068d1115648adcc08ae57372170f3277915a0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91384.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28068d1115648adcc08ae57372170f3277915a0d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91384.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91384.c?ref=28068d1115648adcc08ae57372170f3277915a0d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void foo (void);\n+void bar (void);\n+\n+int\n+test (int a)\n+{\n+  int r;\n+\n+  if (r = -a)\n+    foo ();\n+  else\n+    bar ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler-not \"testl\" } } */"}]}