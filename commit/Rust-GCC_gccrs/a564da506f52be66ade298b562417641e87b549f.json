{"sha": "a564da506f52be66ade298b562417641e87b549f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2NGRhNTA2ZjUyYmU2NmFkZTI5OGI1NjI0MTc2NDFlODdiNTQ5Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-05T14:15:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-10T09:40:39Z"}, "message": "tree-optimization/100434 - DSE aggregate call LHS\n\nThis makes DSE consider aggregate LHS of calls as dead, for pure\nor const calls the whole stmt and for others by removing the LHS.\n\n2021-05-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100434\n\t* tree-ssa-dse.c (initialize_ao_ref_for_dse): Handle\n\tcall LHS.\n\t(dse_optimize_stmt): Handle call LHS by dropping the\n\tLHS or the whole call if it doesn't have other\n\tside-effects.\n\t(pass_dse::execute): Adjust.\n\n\t* gcc.dg/tree-ssa/ssa-dse-43.c: New testcase.", "tree": {"sha": "4a279c5890c1797e1f224007e151ad9f3c55abc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a279c5890c1797e1f224007e151ad9f3c55abc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a564da506f52be66ade298b562417641e87b549f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a564da506f52be66ade298b562417641e87b549f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a564da506f52be66ade298b562417641e87b549f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a564da506f52be66ade298b562417641e87b549f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877e620f381e7af83d386f2ffec6f47546dd07c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877e620f381e7af83d386f2ffec6f47546dd07c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877e620f381e7af83d386f2ffec6f47546dd07c5"}], "stats": {"total": 129, "additions": 87, "deletions": 42}, "files": [{"sha": "f8785e9da464a0433aef7e4158f83af859d5f296", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-43.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a564da506f52be66ade298b562417641e87b549f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a564da506f52be66ade298b562417641e87b549f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-43.c?ref=a564da506f52be66ade298b562417641e87b549f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-dse1-details\" } */\n+\n+struct X { int x; };\n+struct X x;\n+\n+extern struct X foo (void);\n+void bar()\n+{\n+  x = foo();\n+  x = (struct X){};\n+}\n+\n+extern struct X __attribute__((const)) foo2 (int);\n+void bar2()\n+{\n+  x = foo2 (1);\n+  x = foo2 (2);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleted dead store in call LHS: x = foo \" 1 \"dse1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Deleted dead store: x = foo2 \" 1 \"dse1\" } } */"}, {"sha": "c3939a6417f4480c36335113fb516bdd0ee612e4", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 65, "deletions": 42, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a564da506f52be66ade298b562417641e87b549f/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a564da506f52be66ade298b562417641e87b549f/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=a564da506f52be66ade298b562417641e87b549f", "patch": "@@ -140,10 +140,13 @@ initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write)\n \t  break;\n \t}\n     }\n-  else if (is_gimple_assign (stmt))\n+  else if (tree lhs = gimple_get_lhs (stmt))\n     {\n-      ao_ref_init (write, gimple_assign_lhs (stmt));\n-      return true;\n+      if (TREE_CODE (lhs) != SSA_NAME)\n+\t{\n+\t  ao_ref_init (write, lhs);\n+\t  return true;\n+\t}\n     }\n   return false;\n }\n@@ -1035,7 +1038,7 @@ delete_dead_or_redundant_assignment (gimple_stmt_iterator *gsi, const char *type\n    post dominates the first store, then the first store is dead.  */\n \n static void\n-dse_optimize_stmt (gimple_stmt_iterator *gsi, sbitmap live_bytes)\n+dse_optimize_stmt (function *fun, gimple_stmt_iterator *gsi, sbitmap live_bytes)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n \n@@ -1113,49 +1116,69 @@ dse_optimize_stmt (gimple_stmt_iterator *gsi, sbitmap live_bytes)\n \t}\n     }\n \n-  if (is_gimple_assign (stmt))\n+  bool by_clobber_p = false;\n+\n+  /* Check if this statement stores zero to a memory location,\n+     and if there is a subsequent store of zero to the same\n+     memory location.  If so, remove the subsequent store.  */\n+  if (gimple_assign_single_p (stmt)\n+      && initializer_zerop (gimple_assign_rhs1 (stmt)))\n+    dse_optimize_redundant_stores (stmt);\n+\n+  /* Self-assignments are zombies.  */\n+  if (is_gimple_assign (stmt)\n+      && operand_equal_p (gimple_assign_rhs1 (stmt),\n+\t\t\t  gimple_assign_lhs (stmt), 0))\n+    ;\n+  else\n     {\n-      bool by_clobber_p = false;\n-\n-      /* Check if this statement stores zero to a memory location,\n-\t and if there is a subsequent store of zero to the same\n-\t memory location.  If so, remove the subsequent store.  */\n-      if (gimple_assign_single_p (stmt)\n-\t  && initializer_zerop (gimple_assign_rhs1 (stmt)))\n-\tdse_optimize_redundant_stores (stmt);\n-\n-      /* Self-assignments are zombies.  */\n-      if (operand_equal_p (gimple_assign_rhs1 (stmt),\n-\t\t\t   gimple_assign_lhs (stmt), 0))\n-\t;\n-      else\n-\t{\n-\t  bool byte_tracking_enabled\n-\t    = setup_live_bytes_from_ref (&ref, live_bytes);\n-\t  enum dse_store_status store_status;\n-\t  store_status = dse_classify_store (&ref, stmt,\n-\t\t\t\t\t     byte_tracking_enabled,\n-\t\t\t\t\t     live_bytes, &by_clobber_p);\n-\t  if (store_status == DSE_STORE_LIVE)\n-\t    return;\n+      bool byte_tracking_enabled\n+\t  = setup_live_bytes_from_ref (&ref, live_bytes);\n+      enum dse_store_status store_status;\n+      store_status = dse_classify_store (&ref, stmt,\n+\t\t\t\t\t byte_tracking_enabled,\n+\t\t\t\t\t live_bytes, &by_clobber_p);\n+      if (store_status == DSE_STORE_LIVE)\n+\treturn;\n \n-\t  if (store_status == DSE_STORE_MAYBE_PARTIAL_DEAD)\n-\t    {\n-\t      maybe_trim_partially_dead_store (&ref, live_bytes, stmt);\n-\t      return;\n-\t    }\n+      if (store_status == DSE_STORE_MAYBE_PARTIAL_DEAD)\n+\t{\n+\t  maybe_trim_partially_dead_store (&ref, live_bytes, stmt);\n+\t  return;\n \t}\n+    }\n \n-      /* Now we know that use_stmt kills the LHS of stmt.  */\n+  /* Now we know that use_stmt kills the LHS of stmt.  */\n \n-      /* But only remove *this_2(D) ={v} {CLOBBER} if killed by\n-\t another clobber stmt.  */\n-      if (gimple_clobber_p (stmt)\n-\t  && !by_clobber_p)\n-\treturn;\n+  /* But only remove *this_2(D) ={v} {CLOBBER} if killed by\n+     another clobber stmt.  */\n+  if (gimple_clobber_p (stmt)\n+      && !by_clobber_p)\n+    return;\n \n-      delete_dead_or_redundant_assignment (gsi, \"dead\", need_eh_cleanup);\n+  if (is_gimple_call (stmt)\n+      && (gimple_has_side_effects (stmt)\n+\t  || (stmt_could_throw_p (fun, stmt)\n+\t      && !fun->can_delete_dead_exceptions)))\n+    {\n+      /* Make sure we do not remove a return slot we cannot reconstruct\n+\t later.  */\n+      if (gimple_call_return_slot_opt_p (as_a <gcall *>(stmt))\n+\t  && (TREE_ADDRESSABLE (TREE_TYPE (gimple_call_fntype (stmt)))\n+\t      || !poly_int_tree_p\n+\t\t    (TYPE_SIZE (TREE_TYPE (gimple_call_fntype (stmt))))))\n+\treturn;\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"  Deleted dead store in call LHS: \");\n+\t  print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+      gimple_call_set_lhs (stmt, NULL_TREE);\n+      update_stmt (stmt);\n     }\n+  else\n+    delete_dead_or_redundant_assignment (gsi, \"dead\", need_eh_cleanup);\n }\n \n namespace {\n@@ -1194,7 +1217,7 @@ pass_dse::execute (function *fun)\n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n   auto_sbitmap live_bytes (param_dse_max_object_size);\n \n-  renumber_gimple_stmt_uids (cfun);\n+  renumber_gimple_stmt_uids (fun);\n \n   calculate_dominance_info (CDI_DOMINATORS);\n \n@@ -1211,7 +1234,7 @@ pass_dse::execute (function *fun)\n \t  gimple *stmt = gsi_stmt (gsi);\n \n \t  if (gimple_vdef (stmt))\n-\t    dse_optimize_stmt (&gsi, live_bytes);\n+\t    dse_optimize_stmt (fun, &gsi, live_bytes);\n \t  else if (def_operand_p\n \t\t     def_p = single_ssa_def_operand (stmt, SSA_OP_DEF))\n \t    {"}]}