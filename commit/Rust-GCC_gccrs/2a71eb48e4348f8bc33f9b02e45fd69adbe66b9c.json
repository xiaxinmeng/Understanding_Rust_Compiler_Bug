{"sha": "2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3MWViNDhlNDM0OGY4YmMzM2Y5YjAyZTQ1ZmQ2OWFkYmU2NmI5Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-12-15T16:30:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-12-15T16:30:22Z"}, "message": "tree.c (free_lang_data_in_binfo): Do not free BINFO_OFFSET and BINFO_VPTR_FIELD.\n\n2009-12-15  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (free_lang_data_in_binfo): Do not free BINFO_OFFSET\n\tand BINFO_VPTR_FIELD.\n\t(free_lang_data_in_type): Do not free TYPE_STUB_DECL if we\n\tgenerate debug information.\n\t(free_lang_data_in_decl): Do not free DECL_SIZE_UNIT,\n\tDECL_SIZE, DECL_FIELD_OFFSET and DECL_FCONTEXT.\n\t(free_lang_data): Do not disable debuginfo.\n\t* lto-streamer-out.c (write_symbol_vec): Deal with\n\tnon-constant DECL_SIZE.\n\t(pack_ts_base_value_fields): Write types with false\n\tTREE_ASM_WRITTEN.\n\t(lto_output_ts_type_tree_pointers): Stream TYPE_STUB_DECL.\n\t* lto-streamer-in.c (lto_input_ts_type_tree_pointers): Stream\n\tTYPE_STUB_DECL.\n\t* dwarf2out.c (add_pure_or_virtual_attribute): Check for\n\tDECL_CONTEXT.\n\t(gen_type_die_for_member): Test for TYPE_STUB_DECL.\n\t* opts.c (decode_options): Do not disable var-tracking for lto.\n\t* doc/invoke.texi (-flto): Document -flto vs. -g experimental\n\tstatus.\n\t(-fwhopr): Document experimental status.\n\n\tlto/\n\t* lto.c (lto_fixup_field_decl): Fixup DECL_FIELD_OFFSET.\n\t(lto_post_options): Do not disable debuginfo.\n\nFrom-SVN: r155259", "tree": {"sha": "b88b0549fc1a571763835c3ca441355bf819abe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b88b0549fc1a571763835c3ca441355bf819abe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f81eaccf9ab5a38f9a988ccc63a3299e18ef5b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f81eaccf9ab5a38f9a988ccc63a3299e18ef5b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f81eaccf9ab5a38f9a988ccc63a3299e18ef5b5"}], "stats": {"total": 108, "additions": 57, "deletions": 51}, "files": [{"sha": "b205823a4181a8f1253b4a16471e3cf31b0ea26a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -1,3 +1,27 @@\n+2009-12-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (free_lang_data_in_binfo): Do not free BINFO_OFFSET\n+\tand BINFO_VPTR_FIELD.\n+\t(free_lang_data_in_type): Do not free TYPE_STUB_DECL if we\n+\tgenerate debug information.\n+\t(free_lang_data_in_decl): Do not free DECL_SIZE_UNIT,\n+\tDECL_SIZE, DECL_FIELD_OFFSET and DECL_FCONTEXT.\n+\t(free_lang_data): Do not disable debuginfo.\n+\t* lto-streamer-out.c (write_symbol_vec): Deal with\n+\tnon-constant DECL_SIZE.\n+\t(pack_ts_base_value_fields): Write types with false\n+\tTREE_ASM_WRITTEN.\n+\t(lto_output_ts_type_tree_pointers): Stream TYPE_STUB_DECL.\n+\t* lto-streamer-in.c (lto_input_ts_type_tree_pointers): Stream\n+\tTYPE_STUB_DECL.\n+\t* dwarf2out.c (add_pure_or_virtual_attribute): Check for\n+\tDECL_CONTEXT.\n+\t(gen_type_die_for_member): Test for TYPE_STUB_DECL.\n+\t* opts.c (decode_options): Do not disable var-tracking for lto.\n+\t* doc/invoke.texi (-flto): Document -flto vs. -g experimental\n+\tstatus.\n+\t(-fwhopr): Document experimental status.\n+\n 2009-12-15  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR graphite/42185"}, {"sha": "b548d0c1ca1281dd8f0b13634ec995a736e56f16", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -7321,6 +7321,10 @@ types of hosts.  The bytecode files are versioned and there is a\n strict version check, so bytecode files generated in one version of\n GCC will not work with an older/newer version of GCC.\n \n+Link time optimization does not play well with generating debugging\n+information.  Combining @option{-flto} or @option{-fwhopr} with\n+@option{-g} is experimental.\n+\n This option is disabled by default.\n \n @item -fwhopr\n@@ -7337,6 +7341,8 @@ that otherwise would not fit in memory.  This option enables\n \n Disabled by default.\n \n+This option is experimental.\n+\n @item -fwpa\n @opindex fwpa\n This is an internal option used by GCC when compiling with"}, {"sha": "c366ee52c8a1ba903fb159f46e0e691b7bc9b9ec", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -16473,7 +16473,8 @@ add_pure_or_virtual_attribute (dw_die_ref die, tree func_decl)\n \t\t\t\t   0));\n \n       /* GNU extension: Record what type this method came from originally.  */\n-      if (debug_info_level > DINFO_LEVEL_TERSE)\n+      if (debug_info_level > DINFO_LEVEL_TERSE\n+\t  && DECL_CONTEXT (func_decl))\n \tadd_AT_die_ref (die, DW_AT_containing_type,\n \t\t\tlookup_type_die (DECL_CONTEXT (func_decl)));\n     }\n@@ -17393,7 +17394,8 @@ gen_type_die_for_member (tree type, tree member, dw_die_ref context_die)\n \n   /* If we're trying to avoid duplicate debug info, we may not have\n      emitted the member decl for this function.  Emit it now.  */\n-  if (TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (type))\n+  if (TYPE_STUB_DECL (type)\n+      && TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (type))\n       && ! lookup_decl_die (member))\n     {\n       dw_die_ref type_die;"}, {"sha": "c390f272b086c982bfea1c5f8da539c351033e25", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -2162,6 +2162,7 @@ lto_input_ts_type_tree_pointers (struct lto_input_block *ib,\n     TYPE_BINFO (expr) = lto_input_tree (ib, data_in);\n   TYPE_CONTEXT (expr) = lto_input_tree (ib, data_in);\n   TYPE_CANONICAL (expr) = lto_input_tree (ib, data_in);\n+  TYPE_STUB_DECL (expr) = lto_input_tree (ib, data_in);\n }\n \n "}, {"sha": "c489e429011bf6e29c75f7e238c400d362e45d4a", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -342,7 +342,8 @@ pack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n     bp_pack_value (bp, DECL_UNSIGNED (expr), 1);\n   else if (TYPE_P (expr))\n     bp_pack_value (bp, TYPE_UNSIGNED (expr), 1);\n-  bp_pack_value (bp, TREE_ASM_WRITTEN (expr), 1);\n+  /* We write debug info two times, do not confuse the second one.  */\n+  bp_pack_value (bp, TYPE_P (expr) ? 0 : TREE_ASM_WRITTEN (expr), 1);\n   bp_pack_value (bp, TREE_NO_WARNING (expr), 1);\n   bp_pack_value (bp, TREE_USED (expr), 1);\n   bp_pack_value (bp, TREE_NOTHROW (expr), 1);\n@@ -966,6 +967,7 @@ lto_output_ts_type_tree_pointers (struct output_block *ob, tree expr,\n     lto_output_tree_or_ref (ob, TYPE_BINFO (expr), ref_p);\n   lto_output_tree_or_ref (ob, TYPE_CONTEXT (expr), ref_p);\n   lto_output_tree_or_ref (ob, TYPE_CANONICAL (expr), ref_p);\n+  lto_output_tree_or_ref (ob, TYPE_STUB_DECL (expr), ref_p);\n }\n \n \n@@ -2335,7 +2337,9 @@ write_symbol_vec (struct lto_streamer_cache_d *cache,\n \t  break;\n \t}\n \n-      if (kind == GCCPK_COMMON && DECL_SIZE (t))\n+      if (kind == GCCPK_COMMON\n+\t  && DECL_SIZE (t)\n+\t  && TREE_CODE (DECL_SIZE (t)) == INTEGER_CST)\n \tsize = (((uint64_t) TREE_INT_CST_HIGH (DECL_SIZE (t))) << 32)\n \t  | TREE_INT_CST_LOW (DECL_SIZE (t));\n       else"}, {"sha": "04807e300262564b5d068ef84ad5a5c00b735c27", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -1,3 +1,8 @@\n+2009-12-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto.c (lto_fixup_field_decl): Fixup DECL_FIELD_OFFSET.\n+\t(lto_post_options): Do not disable debuginfo.\n+\n 2009-12-14  Dmitry Gorbachev  <d.g.gorbachev@gmail.com>\n \n \t* Make-lang.in ($(LTO_EXE)): Use $(LINKER)."}, {"sha": "970265c2a74e4244ef99d69d3c739018412debc4", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -646,16 +646,6 @@ lto_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n static bool\n lto_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n {\n-  /* FIXME lto: We have stripped enough type and other\n-     debugging information out of the IR that it may\n-     appear ill-formed to dwarf2out, etc.  We must not\n-     attempt to generate debug info in lto1.  A more\n-     graceful solution would disable the option flags\n-     rather than ignoring them, but we'd also have to\n-     worry about default debugging options.  */\n-  write_symbols = NO_DEBUG;\n-  debug_info_level = DINFO_LEVEL_NONE;\n-\n   /* -fltrans and -fwpa are mutually exclusive.  Check for that here.  */\n   if (flag_wpa && flag_ltrans)\n     error (\"-fwpa and -fltrans are mutually exclusive\");"}, {"sha": "e62bc02fe488e7a0cc446f4291ca1976656fea59", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -1376,7 +1376,7 @@ static void\n lto_fixup_field_decl (tree t, void *data)\n {\n   lto_fixup_decl_common (t, data);\n-  gcc_assert (no_fixup_p (DECL_FIELD_OFFSET (t)));\n+  LTO_FIXUP_SUBTREE (DECL_FIELD_OFFSET (t));\n   LTO_FIXUP_SUBTREE (DECL_BIT_FIELD_TYPE (t));\n   LTO_FIXUP_SUBTREE (DECL_QUALIFIER (t));\n   gcc_assert (no_fixup_p (DECL_FIELD_BIT_OFFSET (t)));"}, {"sha": "540752769bf6a711d462b10e47c2d5d9a0d7892a", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -1129,10 +1129,6 @@ decode_options (unsigned int argc, const char **argv)\n \t Otherwise, symbols will be privatized too early, causing link\n \t errors later.  */\n       flag_whole_program = 0;\n-\n-      /* FIXME lto.  Disable var-tracking until debug information\n-\t is properly handled in free_lang_data.  */\n-      flag_var_tracking = 0;\n #else\n       error (\"LTO support has not been enabled in this configuration\");\n #endif"}, {"sha": "7fa7649d2f91dacf6fea319cffff41e538719a9f", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "patch": "@@ -4152,13 +4152,10 @@ free_lang_data_in_binfo (tree binfo)\n \n   gcc_assert (TREE_CODE (binfo) == TREE_BINFO);\n \n-  BINFO_OFFSET (binfo) = NULL_TREE;\n   BINFO_VTABLE (binfo) = NULL_TREE;\n-  BINFO_VPTR_FIELD (binfo) = NULL_TREE;\n   BINFO_BASE_ACCESSES (binfo) = NULL;\n   BINFO_INHERITANCE_CHAIN (binfo) = NULL_TREE;\n   BINFO_SUBVTT_INDEX (binfo) = NULL_TREE;\n-  BINFO_VPTR_FIELD (binfo) = NULL_TREE;\n \n   for (i = 0; VEC_iterate (tree, BINFO_BASE_BINFOS (binfo), i, t); i++)\n     free_lang_data_in_binfo (t);\n@@ -4253,7 +4250,8 @@ free_lang_data_in_type (tree type)\n     }\n \n   TYPE_CONTEXT (type) = NULL_TREE;\n-  TYPE_STUB_DECL (type) = NULL_TREE;\n+  if (debug_info_level < DINFO_LEVEL_TERSE)\n+    TYPE_STUB_DECL (type) = NULL_TREE;\n }\n \n \n@@ -4380,29 +4378,16 @@ free_lang_data_in_decl (tree decl)\n        }\n    }\n \n-  if (TREE_CODE (decl) == PARM_DECL\n-      || TREE_CODE (decl) == FIELD_DECL\n-      || TREE_CODE (decl) == RESULT_DECL)\n-    {\n-      tree unit_size = DECL_SIZE_UNIT (decl);\n-      tree size = DECL_SIZE (decl);\n-      if ((unit_size && TREE_CODE (unit_size) != INTEGER_CST)\n-\t  || (size && TREE_CODE (size) != INTEGER_CST))\n-\t{\n-\t  DECL_SIZE_UNIT (decl) = NULL_TREE;\n-\t  DECL_SIZE (decl) = NULL_TREE;\n-\t}\n+ /* ???  We could free non-constant DECL_SIZE, DECL_SIZE_UNIT\n+    and DECL_FIELD_OFFSET.  But it's cheap enough to not do\n+    that and refrain from adding workarounds to dwarf2out.c  */\n \n-      if (TREE_CODE (decl) == FIELD_DECL\n-\t  && DECL_FIELD_OFFSET (decl)\n-\t  && TREE_CODE (DECL_FIELD_OFFSET (decl)) != INTEGER_CST)\n-\tDECL_FIELD_OFFSET (decl) = NULL_TREE;\n+ /* DECL_FCONTEXT is only used for debug info generation.  */\n+ if (TREE_CODE (decl) == FIELD_DECL\n+     && debug_info_level < DINFO_LEVEL_TERSE)\n+   DECL_FCONTEXT (decl) = NULL_TREE;\n \n-      /* DECL_FCONTEXT is only used for debug info generation.  */\n-      if (TREE_CODE (decl) == FIELD_DECL)\n-\tDECL_FCONTEXT (decl) = NULL_TREE;\n-    }\n-  else if (TREE_CODE (decl) == FUNCTION_DECL)\n+ if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       if (gimple_has_body_p (decl))\n \t{\n@@ -4977,13 +4962,6 @@ free_lang_data (void)\n   diagnostic_finalizer (global_dc) = default_diagnostic_finalizer;\n   diagnostic_format_decoder (global_dc) = default_tree_printer;\n \n-  /* FIXME. We remove sufficient language data that the debug\n-     info writer gets completely confused.  Disable debug information\n-     for now.  */\n-  debug_info_level = DINFO_LEVEL_NONE;\n-  write_symbols = NO_DEBUG;\n-  debug_hooks = &do_nothing_debug_hooks;\n-\n   return 0;\n }\n "}]}