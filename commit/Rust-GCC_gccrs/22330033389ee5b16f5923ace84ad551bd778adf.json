{"sha": "22330033389ee5b16f5923ace84ad551bd778adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIzMzAwMzMzODllZTViMTZmNTkyM2FjZTg0YWQ1NTFiZDc3OGFkZg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-05-17T16:37:19Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-05-17T16:37:19Z"}, "message": "[AArch64, 2/4] Extend vector mutiply by element to all supported modes\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (*aarch64_mul3_elt_to_128df): Extend to\n\tall supported modes.  Rename to \"*aarch64_mul3_elt_from_dup\".\n\ngcc/testsuite/\n\t* gcc.target/aarch64/simd/vmul_elem_1.c: New.\n\nFrom-SVN: r236332", "tree": {"sha": "35816239939af96bf533c935ad989a2ae7be53fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35816239939af96bf533c935ad989a2ae7be53fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22330033389ee5b16f5923ace84ad551bd778adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22330033389ee5b16f5923ace84ad551bd778adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22330033389ee5b16f5923ace84ad551bd778adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22330033389ee5b16f5923ace84ad551bd778adf/comments", "author": null, "committer": null, "parents": [{"sha": "98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b3a5f289f42d2d7e9616ccd02cce40440f2adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b3a5f289f42d2d7e9616ccd02cce40440f2adf"}], "stats": {"total": 544, "additions": 536, "deletions": 8}, "files": [{"sha": "ce6558bcac26ccde6f9937a2f905867a6f249982", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22330033389ee5b16f5923ace84ad551bd778adf", "patch": "@@ -1,3 +1,8 @@\n+2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_mul3_elt_to_128df): Extend to\n+\tall supported modes.  Rename to \"*aarch64_mul3_elt_from_dup\".\n+\n 2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (*aarch64_fma4_elt_to_128df): Rename"}, {"sha": "17b89452e0b9596ae74f471d98eb48c7ac5cc451", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=22330033389ee5b16f5923ace84ad551bd778adf", "patch": "@@ -371,15 +371,15 @@\n   [(set_attr \"type\" \"neon<fp>_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"*aarch64_mul3_elt_to_128df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n-     (mult:V2DF\n-       (vec_duplicate:V2DF\n-\t (match_operand:DF 2 \"register_operand\" \"w\"))\n-      (match_operand:V2DF 1 \"register_operand\" \"w\")))]\n+(define_insn \"*aarch64_mul3_elt_from_dup<mode>\"\n+ [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n+    (mult:VMUL\n+      (vec_duplicate:VMUL\n+\t    (match_operand:<VEL> 1 \"register_operand\" \"<h_con>\"))\n+      (match_operand:VMUL 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n-  \"fmul\\\\t%0.2d, %1.2d, %2.d[0]\"\n-  [(set_attr \"type\" \"neon_fp_mul_d_scalar_q\")]\n+  \"<f>mul\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\";\n+  [(set_attr \"type\" \"neon<fp>_mul_<Vetype>_scalar<q>\")]\n )\n \n (define_insn \"aarch64_rsqrte_<mode>2\""}, {"sha": "bfe6188c06bbe7aabb2bd1e6e8944b80554cec6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22330033389ee5b16f5923ace84ad551bd778adf", "patch": "@@ -1,3 +1,7 @@\n+2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vmul_elem_1.c: New.\n+\n 2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/fmla_intrinsic_1.c: Allow \".d[index]\" besides"}, {"sha": "290a4e9adbc5d9ce1335ca28120e437293776f30", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmul_elem_1.c", "status": "added", "additions": 519, "deletions": 0, "changes": 519, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_elem_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22330033389ee5b16f5923ace84ad551bd778adf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_elem_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_elem_1.c?ref=22330033389ee5b16f5923ace84ad551bd778adf", "patch": "@@ -0,0 +1,519 @@\n+/* Test the vmul_n_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+#define A (132.4f)\n+#define B (-0.0f)\n+#define C (-34.8f)\n+#define D (289.34f)\n+float32_t expected2_1[2] = {A * A, B * A};\n+float32_t expected2_2[2] = {A * B, B * B};\n+float32_t expected4_1[4] = {A * A, B * A, C * A, D * A};\n+float32_t expected4_2[4] = {A * B, B * B, C * B, D * B};\n+float32_t expected4_3[4] = {A * C, B * C, C * C, D * C};\n+float32_t expected4_4[4] = {A * D, B * D, C * D, D * D};\n+float32_t _elemA = A;\n+float32_t _elemB = B;\n+float32_t _elemC = C;\n+float32_t _elemD = D;\n+\n+#define AD (1234.5)\n+#define BD (-0.0)\n+#define CD (71.3)\n+#define DD (-1024.4)\n+float64_t expectedd2_1[2] = {AD * CD, BD * CD};\n+float64_t expectedd2_2[2] = {AD * DD, BD * DD};\n+float64_t _elemdC = CD;\n+float64_t _elemdD = DD;\n+\n+\n+#define AS (1024)\n+#define BS (-31)\n+#define CS (0)\n+#define DS (655)\n+int32_t expecteds2_1[2] = {AS * AS, BS * AS};\n+int32_t expecteds2_2[2] = {AS * BS, BS * BS};\n+int32_t expecteds4_1[4] = {AS * AS, BS * AS, CS * AS, DS * AS};\n+int32_t expecteds4_2[4] = {AS * BS, BS * BS, CS * BS, DS * BS};\n+int32_t expecteds4_3[4] = {AS * CS, BS * CS, CS * CS, DS * CS};\n+int32_t expecteds4_4[4] = {AS * DS, BS * DS, CS * DS, DS * DS};\n+int32_t _elemsA = AS;\n+int32_t _elemsB = BS;\n+int32_t _elemsC = CS;\n+int32_t _elemsD = DS;\n+\n+#define AH ((int16_t) 0)\n+#define BH ((int16_t) -32)\n+#define CH ((int16_t) 102)\n+#define DH ((int16_t) -51)\n+#define EH ((int16_t) 71)\n+#define FH ((int16_t) -91)\n+#define GH ((int16_t) 48)\n+#define HH ((int16_t) 255)\n+int16_t expectedh4_1[4] = {AH * AH, BH * AH, CH * AH, DH * AH};\n+int16_t expectedh4_2[4] = {AH * BH, BH * BH, CH * BH, DH * BH};\n+int16_t expectedh4_3[4] = {AH * CH, BH * CH, CH * CH, DH * CH};\n+int16_t expectedh4_4[4] = {AH * DH, BH * DH, CH * DH, DH * DH};\n+int16_t expectedh8_1[8] = {AH * AH, BH * AH, CH * AH, DH * AH,\n+\t\t\t   EH * AH, FH * AH, GH * AH, HH * AH};\n+int16_t expectedh8_2[8] = {AH * BH, BH * BH, CH * BH, DH * BH,\n+\t\t\t   EH * BH, FH * BH, GH * BH, HH * BH};\n+int16_t expectedh8_3[8] = {AH * CH, BH * CH, CH * CH, DH * CH,\n+\t\t\t   EH * CH, FH * CH, GH * CH, HH * CH};\n+int16_t expectedh8_4[8] = {AH * DH, BH * DH, CH * DH, DH * DH,\n+\t\t\t   EH * DH, FH * DH, GH * DH, HH * DH};\n+int16_t expectedh8_5[8] = {AH * EH, BH * EH, CH * EH, DH * EH,\n+\t\t\t   EH * EH, FH * EH, GH * EH, HH * EH};\n+int16_t expectedh8_6[8] = {AH * FH, BH * FH, CH * FH, DH * FH,\n+\t\t\t   EH * FH, FH * FH, GH * FH, HH * FH};\n+int16_t expectedh8_7[8] = {AH * GH, BH * GH, CH * GH, DH * GH,\n+\t\t\t   EH * GH, FH * GH, GH * GH, HH * GH};\n+int16_t expectedh8_8[8] = {AH * HH, BH * HH, CH * HH, DH * HH,\n+\t\t\t   EH * HH, FH * HH, GH * HH, HH * HH};\n+int16_t _elemhA = AH;\n+int16_t _elemhB = BH;\n+int16_t _elemhC = CH;\n+int16_t _elemhD = DH;\n+int16_t _elemhE = EH;\n+int16_t _elemhF = FH;\n+int16_t _elemhG = GH;\n+int16_t _elemhH = HH;\n+\n+#define AUS (1024)\n+#define BUS (31)\n+#define CUS (0)\n+#define DUS (655)\n+uint32_t expectedus2_1[2] = {AUS * AUS, BUS * AUS};\n+uint32_t expectedus2_2[2] = {AUS * BUS, BUS * BUS};\n+uint32_t expectedus4_1[4] = {AUS * AUS, BUS * AUS, CUS * AUS, DUS * AUS};\n+uint32_t expectedus4_2[4] = {AUS * BUS, BUS * BUS, CUS * BUS, DUS * BUS};\n+uint32_t expectedus4_3[4] = {AUS * CUS, BUS * CUS, CUS * CUS, DUS * CUS};\n+uint32_t expectedus4_4[4] = {AUS * DUS, BUS * DUS, CUS * DUS, DUS * DUS};\n+uint32_t _elemusA = AUS;\n+uint32_t _elemusB = BUS;\n+uint32_t _elemusC = CUS;\n+uint32_t _elemusD = DUS;\n+\n+#define AUH ((uint16_t) 0)\n+#define BUH ((uint16_t) 32)\n+#define CUH ((uint16_t) 102)\n+#define DUH ((uint16_t) 51)\n+#define EUH ((uint16_t) 71)\n+#define FUH ((uint16_t) 91)\n+#define GUH ((uint16_t) 48)\n+#define HUH ((uint16_t) 255)\n+uint16_t expecteduh4_1[4] = {AUH * AUH, BUH * AUH, CUH * AUH, DUH * AUH};\n+uint16_t expecteduh4_2[4] = {AUH * BUH, BUH * BUH, CUH * BUH, DUH * BUH};\n+uint16_t expecteduh4_3[4] = {AUH * CUH, BUH * CUH, CUH * CUH, DUH * CUH};\n+uint16_t expecteduh4_4[4] = {AUH * DUH, BUH * DUH, CUH * DUH, DUH * DUH};\n+uint16_t expecteduh8_1[8] = {AUH * AUH, BUH * AUH, CUH * AUH, DUH * AUH,\n+\t\t\t     EUH * AUH, FUH * AUH, GUH * AUH, HUH * AUH};\n+uint16_t expecteduh8_2[8] = {AUH * BUH, BUH * BUH, CUH * BUH, DUH * BUH,\n+\t\t\t     EUH * BUH, FUH * BUH, GUH * BUH, HUH * BUH};\n+uint16_t expecteduh8_3[8] = {AUH * CUH, BUH * CUH, CUH * CUH, DUH * CUH,\n+\t\t\t     EUH * CUH, FUH * CUH, GUH * CUH, HUH * CUH};\n+uint16_t expecteduh8_4[8] = {AUH * DUH, BUH * DUH, CUH * DUH, DUH * DUH,\n+\t\t\t     EUH * DUH, FUH * DUH, GUH * DUH, HUH * DUH};\n+uint16_t expecteduh8_5[8] = {AUH * EUH, BUH * EUH, CUH * EUH, DUH * EUH,\n+\t\t\t     EUH * EUH, FUH * EUH, GUH * EUH, HUH * EUH};\n+uint16_t expecteduh8_6[8] = {AUH * FUH, BUH * FUH, CUH * FUH, DUH * FUH,\n+\t\t\t     EUH * FUH, FUH * FUH, GUH * FUH, HUH * FUH};\n+uint16_t expecteduh8_7[8] = {AUH * GUH, BUH * GUH, CUH * GUH, DUH * GUH,\n+\t\t\t     EUH * GUH, FUH * GUH, GUH * GUH, HUH * GUH};\n+uint16_t expecteduh8_8[8] = {AUH * HUH, BUH * HUH, CUH * HUH, DUH * HUH,\n+\t\t\t     EUH * HUH, FUH * HUH, GUH * HUH, HUH * HUH};\n+uint16_t _elemuhA = AUH;\n+uint16_t _elemuhB = BUH;\n+uint16_t _elemuhC = CUH;\n+uint16_t _elemuhD = DUH;\n+uint16_t _elemuhE = EUH;\n+uint16_t _elemuhF = FUH;\n+uint16_t _elemuhG = GUH;\n+uint16_t _elemuhH = HUH;\n+\n+void\n+check_v2sf (float32_t elemA, float32_t elemB)\n+{\n+  int32_t indx;\n+  const float32_t vec32x2_buf[2] = {A, B};\n+  float32x2_t vec32x2_src = vld1_f32 (vec32x2_buf);\n+  float32x2_t vec32x2_res = vec32x2_src * elemA;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (* (uint32_t *) &vec32x2_res[indx] != * (uint32_t *) &expected2_1[indx])\n+      abort ();\n+\n+  vec32x2_res = vec32x2_src * elemB;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (* (uint32_t *) &vec32x2_res[indx] != * (uint32_t *) &expected2_2[indx])\n+      abort ();\n+\n+/* { dg-final { scan-assembler-times \"fmul\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\\\\\\[0\\\\\\]\" 2 } } */\n+}\n+\n+void\n+check_v4sf (float32_t elemA, float32_t elemB, float32_t elemC, float32_t elemD)\n+{\n+  int32_t indx;\n+  const float32_t vec32x4_buf[4] = {A, B, C, D};\n+  float32x4_t vec32x4_src = vld1q_f32 (vec32x4_buf);\n+  float32x4_t vec32x4_res = vec32x4_src * elemA;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_1[indx])\n+      abort ();\n+\n+  vec32x4_res = vec32x4_src * elemB;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_2[indx])\n+      abort ();\n+\n+  vec32x4_res = vec32x4_src * elemC;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_3[indx])\n+      abort ();\n+\n+  vec32x4_res = vec32x4_src * elemD;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (* (uint32_t *) &vec32x4_res[indx] != * (uint32_t *) &expected4_4[indx])\n+      abort ();\n+\n+/* { dg-final { scan-assembler-times \"fmul\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[0\\\\\\]\" 4 } } */\n+}\n+\n+void\n+check_v2df (float64_t elemdC, float64_t elemdD)\n+{\n+  int32_t indx;\n+  const float64_t vec64x2_buf[2] = {AD, BD};\n+  float64x2_t vec64x2_src = vld1q_f64 (vec64x2_buf);\n+  float64x2_t vec64x2_res = vec64x2_src * elemdC;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (* (uint64_t *) &vec64x2_res[indx] != * (uint64_t *) &expectedd2_1[indx])\n+      abort ();\n+\n+  vec64x2_res = vec64x2_src * elemdD;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (* (uint64_t *) &vec64x2_res[indx] != * (uint64_t *) &expectedd2_2[indx])\n+      abort ();\n+\n+/* { dg-final { scan-assembler-times \"fmul\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.d\\\\\\[0\\\\\\]\" 2 } } */\n+}\n+\n+void\n+check_v2si (int32_t elemsA, int32_t elemsB)\n+{\n+  int32_t indx;\n+  const int32_t vecs32x2_buf[2] = {AS, BS};\n+  int32x2_t vecs32x2_src = vld1_s32 (vecs32x2_buf);\n+  int32x2_t vecs32x2_res = vecs32x2_src * elemsA;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (vecs32x2_res[indx] != expecteds2_1[indx])\n+      abort ();\n+\n+  vecs32x2_res = vecs32x2_src * elemsB;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (vecs32x2_res[indx] != expecteds2_2[indx])\n+      abort ();\n+}\n+\n+void\n+check_v2si_unsigned (uint32_t elemusA, uint32_t elemusB)\n+{\n+  int indx;\n+  const uint32_t vecus32x2_buf[2] = {AUS, BUS};\n+  uint32x2_t vecus32x2_src = vld1_u32 (vecus32x2_buf);\n+  uint32x2_t vecus32x2_res = vecus32x2_src * elemusA;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (vecus32x2_res[indx] != expectedus2_1[indx])\n+      abort ();\n+\n+  vecus32x2_res = vecus32x2_src * elemusB;\n+\n+  for (indx = 0; indx < 2; indx++)\n+    if (vecus32x2_res[indx] != expectedus2_2[indx])\n+      abort ();\n+\n+/* { dg-final { scan-assembler-times \"\\tmul\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\\\\\\[0\\\\\\]\" 4 } } */\n+}\n+\n+void\n+check_v4si (int32_t elemsA, int32_t elemsB, int32_t elemsC, int32_t elemsD)\n+{\n+  int32_t indx;\n+  const int32_t vecs32x4_buf[4] = {AS, BS, CS, DS};\n+  int32x4_t vecs32x4_src = vld1q_s32 (vecs32x4_buf);\n+  int32x4_t vecs32x4_res = vecs32x4_src * elemsA;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecs32x4_res[indx] != expecteds4_1[indx])\n+      abort ();\n+\n+  vecs32x4_res = vecs32x4_src * elemsB;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecs32x4_res[indx] != expecteds4_2[indx])\n+      abort ();\n+\n+  vecs32x4_res = vecs32x4_src * elemsC;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecs32x4_res[indx] != expecteds4_3[indx])\n+      abort ();\n+\n+  vecs32x4_res = vecs32x4_src * elemsD;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecs32x4_res[indx] != expecteds4_4[indx])\n+      abort ();\n+}\n+\n+void\n+check_v4si_unsigned (uint32_t elemusA, uint32_t elemusB, uint32_t elemusC,\n+\t\t     uint32_t elemusD)\n+{\n+  int indx;\n+  const uint32_t vecus32x4_buf[4] = {AUS, BUS, CUS, DUS};\n+  uint32x4_t vecus32x4_src = vld1q_u32 (vecus32x4_buf);\n+  uint32x4_t vecus32x4_res = vecus32x4_src * elemusA;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecus32x4_res[indx] != expectedus4_1[indx])\n+      abort ();\n+\n+  vecus32x4_res = vecus32x4_src * elemusB;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecus32x4_res[indx] != expectedus4_2[indx])\n+      abort ();\n+\n+  vecus32x4_res = vecus32x4_src * elemusC;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecus32x4_res[indx] != expectedus4_3[indx])\n+      abort ();\n+\n+  vecus32x4_res = vecus32x4_src * elemusD;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecus32x4_res[indx] != expectedus4_4[indx])\n+      abort ();\n+\n+/* { dg-final { scan-assembler-times \"\\tmul\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[0\\\\\\]\" 8 } } */\n+}\n+\n+\n+void\n+check_v4hi (int16_t elemhA, int16_t elemhB, int16_t elemhC, int16_t elemhD)\n+{\n+  int32_t indx;\n+  const int16_t vech16x4_buf[4] = {AH, BH, CH, DH};\n+  int16x4_t vech16x4_src = vld1_s16 (vech16x4_buf);\n+  int16x4_t vech16x4_res = vech16x4_src * elemhA;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vech16x4_res[indx] != expectedh4_1[indx])\n+      abort ();\n+\n+  vech16x4_res = vech16x4_src * elemhB;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vech16x4_res[indx] != expectedh4_2[indx])\n+      abort ();\n+\n+  vech16x4_res = vech16x4_src * elemhC;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vech16x4_res[indx] != expectedh4_3[indx])\n+      abort ();\n+\n+  vech16x4_res = vech16x4_src * elemhD;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vech16x4_res[indx] != expectedh4_4[indx])\n+      abort ();\n+}\n+\n+void\n+check_v4hi_unsigned (uint16_t elemuhA, uint16_t elemuhB, uint16_t elemuhC,\n+\t\t     uint16_t elemuhD)\n+{\n+  int indx;\n+  const uint16_t vecuh16x4_buf[4] = {AUH, BUH, CUH, DUH};\n+  uint16x4_t vecuh16x4_src = vld1_u16 (vecuh16x4_buf);\n+  uint16x4_t vecuh16x4_res = vecuh16x4_src * elemuhA;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecuh16x4_res[indx] != expecteduh4_1[indx])\n+      abort ();\n+\n+  vecuh16x4_res = vecuh16x4_src * elemuhB;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecuh16x4_res[indx] != expecteduh4_2[indx])\n+      abort ();\n+\n+  vecuh16x4_res = vecuh16x4_src * elemuhC;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecuh16x4_res[indx] != expecteduh4_3[indx])\n+      abort ();\n+\n+  vecuh16x4_res = vecuh16x4_src * elemuhD;\n+\n+  for (indx = 0; indx < 4; indx++)\n+    if (vecuh16x4_res[indx] != expecteduh4_4[indx])\n+      abort ();\n+\n+/* { dg-final { scan-assembler-times \"mul\\tv\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 8 } } */\n+}\n+\n+void\n+check_v8hi (int16_t elemhA, int16_t elemhB, int16_t elemhC, int16_t elemhD,\n+\t    int16_t elemhE, int16_t elemhF, int16_t elemhG, int16_t elemhH)\n+{\n+  int32_t indx;\n+  const int16_t vech16x8_buf[8] = {AH, BH, CH, DH, EH, FH, GH, HH};\n+  int16x8_t vech16x8_src = vld1q_s16 (vech16x8_buf);\n+  int16x8_t vech16x8_res = vech16x8_src * elemhA;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_1[indx])\n+      abort ();\n+\n+  vech16x8_res = vech16x8_src * elemhB;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_2[indx])\n+      abort ();\n+\n+  vech16x8_res = vech16x8_src * elemhC;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_3[indx])\n+      abort ();\n+\n+  vech16x8_res = vech16x8_src * elemhD;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_4[indx])\n+      abort ();\n+\n+  vech16x8_res = vech16x8_src * elemhE;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_5[indx])\n+      abort ();\n+\n+  vech16x8_res = vech16x8_src * elemhF;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_6[indx])\n+      abort ();\n+\n+  vech16x8_res = vech16x8_src * elemhG;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_7[indx])\n+      abort ();\n+\n+  vech16x8_res = vech16x8_src * elemhH;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vech16x8_res[indx] != expectedh8_8[indx])\n+      abort ();\n+}\n+\n+void\n+check_v8hi_unsigned (uint16_t elemuhA, uint16_t elemuhB, uint16_t elemuhC,\n+\t\t     uint16_t elemuhD, uint16_t elemuhE, uint16_t elemuhF,\n+\t\t     uint16_t elemuhG, uint16_t elemuhH)\n+{\n+  int indx;\n+  const uint16_t vecuh16x8_buf[8] = {AUH, BUH, CUH, DUH, EUH, FUH, GUH, HUH};\n+  uint16x8_t vecuh16x8_src = vld1q_u16 (vecuh16x8_buf);\n+  uint16x8_t vecuh16x8_res = vecuh16x8_src * elemuhA;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_1[indx])\n+      abort ();\n+\n+  vecuh16x8_res = vecuh16x8_src * elemuhB;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_2[indx])\n+      abort ();\n+\n+  vecuh16x8_res = vecuh16x8_src * elemuhC;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_3[indx])\n+      abort ();\n+\n+  vecuh16x8_res = vecuh16x8_src * elemuhD;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_4[indx])\n+      abort ();\n+\n+  vecuh16x8_res = vecuh16x8_src * elemuhE;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_5[indx])\n+      abort ();\n+\n+  vecuh16x8_res = vecuh16x8_src * elemuhF;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_6[indx])\n+      abort ();\n+\n+  vecuh16x8_res = vecuh16x8_src * elemuhG;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_7[indx])\n+      abort ();\n+\n+  vecuh16x8_res = vecuh16x8_src * elemuhH;\n+\n+  for (indx = 0; indx < 8; indx++)\n+    if (vecuh16x8_res[indx] != expecteduh8_8[indx])\n+      abort ();\n+\n+/* { dg-final { scan-assembler-times \"mul\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 16 } } */\n+}\n+\n+int\n+main (void)\n+{\n+  check_v2sf (_elemA, _elemB);\n+  check_v4sf (_elemA, _elemB, _elemC, _elemD);\n+  check_v2df (_elemdC, _elemdD);\n+  check_v2si (_elemsA, _elemsB);\n+  check_v4si (_elemsA, _elemsB, _elemsC, _elemsD);\n+  check_v4hi (_elemhA, _elemhB, _elemhC, _elemhD);\n+  check_v8hi (_elemhA, _elemhB, _elemhC, _elemhD,\n+\t      _elemhE, _elemhF, _elemhG, _elemhH);\n+  check_v2si_unsigned (_elemusA, _elemusB);\n+  check_v4si_unsigned (_elemusA, _elemusB, _elemusC, _elemusD);\n+  check_v4hi_unsigned (_elemuhA, _elemuhB, _elemuhC, _elemuhD);\n+  check_v8hi_unsigned (_elemuhA, _elemuhB, _elemuhC, _elemuhD,\n+\t\t       _elemuhE, _elemuhF, _elemuhG, _elemuhH);\n+\n+  return 0;\n+}\n+"}]}