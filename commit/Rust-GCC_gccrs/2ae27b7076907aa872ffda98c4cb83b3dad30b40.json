{"sha": "2ae27b7076907aa872ffda98c4cb83b3dad30b40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlMjdiNzA3NjkwN2FhODcyZmZkYTk4YzRjYjgzYjNkYWQzMGI0MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-18T18:36:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-18T18:36:45Z"}, "message": "PR69301 don't assume atomic<T> can default construct T\n\n\tPR libstdc++/69301\n\t* include/std/atomic (atomic<T>::load, atomic<T>::exchange): Use\n\taligned buffer instead of default-initialized variable.\n\t* testsuite/29_atomics/atomic/69301.cc: New test.\n\t* include/experimental/memory (observer_ptr::release): Use reserved\n\tname.\n\t* include/ext/pointer.h (_Pointer_adapter::operator++(int))\n\t(_Pointer_adapter::operator--(int)): Likewise.\n\nFrom-SVN: r244588", "tree": {"sha": "90794a848af1e0d74bdf80751717721a84d17794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90794a848af1e0d74bdf80751717721a84d17794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae27b7076907aa872ffda98c4cb83b3dad30b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae27b7076907aa872ffda98c4cb83b3dad30b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae27b7076907aa872ffda98c4cb83b3dad30b40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae27b7076907aa872ffda98c4cb83b3dad30b40/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3083fc562eb49c1df94453a17f9dbc37462ab0d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3083fc562eb49c1df94453a17f9dbc37462ab0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3083fc562eb49c1df94453a17f9dbc37462ab0d0"}], "stats": {"total": 105, "additions": 87, "deletions": 18}, "files": [{"sha": "9af3b9f89955786db6a7951ff9fa6175113f0b7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ae27b7076907aa872ffda98c4cb83b3dad30b40", "patch": "@@ -1,5 +1,14 @@\n 2017-01-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/69301\n+\t* include/std/atomic (atomic<T>::load, atomic<T>::exchange): Use\n+\taligned buffer instead of default-initialized variable.\n+\t* testsuite/29_atomics/atomic/69301.cc: New test.\n+\t* include/experimental/memory (observer_ptr::release): Use reserved\n+\tname.\n+\t* include/ext/pointer.h (_Pointer_adapter::operator++(int))\n+\t(_Pointer_adapter::operator--(int)): Likewise.\n+\n \tPR libstdc++/68925\n \t* include/experimental/random (randint): Use temporary instead of\n \tthread_local static."}, {"sha": "7467674db81d3110058600afba79f69af7b27199", "filename": "libstdc++-v3/include/experimental/memory", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory?ref=2ae27b7076907aa872ffda98c4cb83b3dad30b40", "patch": "@@ -124,9 +124,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr __pointer\n       release() noexcept\n       {\n-\t__pointer tmp = get();\n+\t__pointer __tmp = get();\n \treset();\n-\treturn tmp;\n+\treturn __tmp;\n       }\n \n       constexpr void"}, {"sha": "8432da0d2a46f161b964ab1feff974d5087ec72f", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=2ae27b7076907aa872ffda98c4cb83b3dad30b40", "patch": "@@ -449,9 +449,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       inline _Pointer_adapter \n       operator++(int)\n       {\n-        _Pointer_adapter tmp(*this);\n+        _Pointer_adapter __tmp(*this);\n         _Storage_policy::set(_Storage_policy::get() + 1);\n-        return tmp;\n+        return __tmp;\n       }\n   \n       inline _Pointer_adapter& \n@@ -464,9 +464,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       inline _Pointer_adapter\n       operator--(int) \n       {\n-        _Pointer_adapter tmp(*this);\n+        _Pointer_adapter __tmp(*this);\n         _Storage_policy::set(_Storage_policy::get() - 1);\n-        return tmp;\n+        return __tmp;\n       }\n   \n     }; // class _Pointer_adapter"}, {"sha": "5b252a43e1f7c18d56dbd06c6ed99c6ddf849df3", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=2ae27b7076907aa872ffda98c4cb83b3dad30b40", "patch": "@@ -245,36 +245,40 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tp\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n       {\n-        _Tp tmp;\n-\t__atomic_load(std::__addressof(_M_i), std::__addressof(tmp), __m);\n-\treturn tmp;\n+\talignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n+\t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n+\t__atomic_load(std::__addressof(_M_i), __ptr, __m);\n+\treturn *__ptr;\n       }\n \n       _Tp\n       load(memory_order __m = memory_order_seq_cst) const volatile noexcept\n       {\n-        _Tp tmp;\n-\t__atomic_load(std::__addressof(_M_i), std::__addressof(tmp), __m);\n-\treturn tmp;\n+        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n+\t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n+\t__atomic_load(std::__addressof(_M_i), __ptr, __m);\n+\treturn *__ptr;\n       }\n \n       _Tp\n       exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept\n       {\n-        _Tp tmp;\n+        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n+\t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n \t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n-\t\t\t  std::__addressof(tmp), __m);\n-\treturn tmp;\n+\t\t\t  __ptr, __m);\n+\treturn *__ptr;\n       }\n \n       _Tp\n       exchange(_Tp __i,\n \t       memory_order __m = memory_order_seq_cst) volatile noexcept\n       {\n-        _Tp tmp;\n+        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];\n+\t_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);\n \t__atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),\n-\t\t\t  std::__addressof(tmp), __m);\n-\treturn tmp;\n+\t\t\t  __ptr, __m);\n+\treturn *__ptr;\n       }\n \n       bool"}, {"sha": "1af36525af5c3e40c1234d0a2500dd2e958032d7", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/69301.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F69301.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae27b7076907aa872ffda98c4cb83b3dad30b40/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F69301.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F69301.cc?ref=2ae27b7076907aa872ffda98c4cb83b3dad30b40", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <atomic>\n+#include <testsuite_hooks.h>\n+\n+struct NonDefaultConstructible\n+{\n+  NonDefaultConstructible(int i) : val(i) { }\n+  int val;\n+};\n+\n+template class std::atomic<NonDefaultConstructible>;\n+\n+void\n+test01()\n+{\n+  std::atomic<NonDefaultConstructible> a(1);\n+  const auto n1 = a.exchange(2);\n+  VERIFY( n1.val == 1 );\n+  const auto n2 = a.load();\n+  VERIFY( n2.val == 2 );\n+}\n+\n+void\n+test02()\n+{\n+  volatile std::atomic<NonDefaultConstructible> a(1);\n+  const auto n1 = a.exchange(2);\n+  VERIFY( n1.val == 1 );\n+  const auto n2 = a.load();\n+  VERIFY( n2.val == 2 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}