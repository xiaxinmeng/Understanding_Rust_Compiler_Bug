{"sha": "a89c5d3539c36f160ca5b997324ebcd3d601d56e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5YzVkMzUzOWMzNmYxNjBjYTViOTk3MzI0ZWJjZDNkNjAxZDU2ZQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-01-18T21:41:39Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-01-18T21:47:15Z"}, "message": "[PR97847] IRA: Skip abnormal critical edge splitting\n\nPPC64 can generate jumps with clobbered pseudo-regs and a BB with\nsuch jump can have abnormal output edges.  IRA hits an assert when trying\nto split abnormal critical edge to deal with asm goto output reloads\nlater.  The patch just skips splitting abnormal edges.  It is assumed\nthat asm-goto with output reloads can not be in BB with output abnormal edges.\n\ngcc/ChangeLog:\n\n\tPR target/97847\n\t* ira.c (ira): Skip abnormal critical edge splitting.", "tree": {"sha": "d737c54193b47dcfbb12f08af22f6519b136ead0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d737c54193b47dcfbb12f08af22f6519b136ead0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a89c5d3539c36f160ca5b997324ebcd3d601d56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89c5d3539c36f160ca5b997324ebcd3d601d56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89c5d3539c36f160ca5b997324ebcd3d601d56e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89c5d3539c36f160ca5b997324ebcd3d601d56e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b6e917ac4c6e6db1f84b02afd070055b70d1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b6e917ac4c6e6db1f84b02afd070055b70d1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b6e917ac4c6e6db1f84b02afd070055b70d1dc"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "f0bdbc8cf56104ab99987c7c883d1dd2f0291b63", "filename": "gcc/ira.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89c5d3539c36f160ca5b997324ebcd3d601d56e/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89c5d3539c36f160ca5b997324ebcd3d601d56e/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=a89c5d3539c36f160ca5b997324ebcd3d601d56e", "patch": "@@ -5433,12 +5433,22 @@ ira (FILE *f)\n \t  for (int i = 0; i < recog_data.n_operands; i++)\n \t    if (recog_data.operand_type[i] != OP_IN)\n \t      {\n+\t\tbool skip_p = false;\n+\t\tFOR_EACH_EDGE (e, ei, bb->succs)\n+\t\t  if (EDGE_CRITICAL_P (e)\n+\t\t      && e->dest != EXIT_BLOCK_PTR_FOR_FN (cfun)\n+\t\t      && (e->flags & EDGE_ABNORMAL))\n+\t\t    {\n+\t\t      skip_p = true;\n+\t\t      break;\n+\t\t    }\n+\t\tif (skip_p)\n+\t\t  break;\n \t\toutput_jump_reload_p = true;\n \t\tFOR_EACH_EDGE (e, ei, bb->succs)\n \t\t  if (EDGE_CRITICAL_P (e)\n \t\t      && e->dest != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t\t    {\n-\t\t      ira_assert (!(e->flags & EDGE_ABNORMAL));\n \t\t      start_sequence ();\n \t\t      /* We need to put some no-op insn here.  We can\n \t\t\t not put a note as commit_edges insertion will"}]}