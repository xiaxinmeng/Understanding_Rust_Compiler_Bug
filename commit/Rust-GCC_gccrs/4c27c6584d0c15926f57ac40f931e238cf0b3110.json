{"sha": "4c27c6584d0c15926f57ac40f931e238cf0b3110", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyN2M2NTg0ZDBjMTU5MjZmNTdhYzQwZjkzMWUyMzhjZjBiMzExMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-30T11:23:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-30T11:50:02Z"}, "message": "libstdc++: Make testsuite usable with -fno-exceptions\n\nPreviously it was not possible to add -fno-exceptions to the testsuite\nflags, because some files that are compiled by the v3-build_support\nprocedure failed with exceptions disabled.\n\nThis adjusts those files to still compile without exceptions (with\ndegraded functionality in some cases).\n\nThe sole testcase that explicitly checks for -fno-exceptions has also\nbeen adjusted to use the more robust exceptions_enabled effective-target\nkeyword from gcc/testsuite/lib/target-supports.exp.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/23_containers/vector/bool/72847.cc: Use the\n\texceptions_enabled effective-target keyword instead of\n\tchecking for an explicit -fno-exceptions option.\n\t* testsuite/util/testsuite_abi.cc (examine_symbol): Remove\n\tredundant try-catch.\n\t* testsuite/util/testsuite_allocator.h [!__cpp_exceptions]:\n\tDo not define check_allocate_max_size and memory_resource.\n\t* testsuite/util/testsuite_containers.h: Replace comment with\n\t#error if wrong standard dialect used.\n\t* testsuite/util/testsuite_shared.cc: Likewise.", "tree": {"sha": "9b36a440b2c106289b413e3cccb3d19c291f08b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b36a440b2c106289b413e3cccb3d19c291f08b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c27c6584d0c15926f57ac40f931e238cf0b3110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c27c6584d0c15926f57ac40f931e238cf0b3110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c27c6584d0c15926f57ac40f931e238cf0b3110", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c27c6584d0c15926f57ac40f931e238cf0b3110/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4ee8bc5843997cdc4408848ab2d9ec82f085b2"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "c4fbc75abe84d8cf301d067ba6176f9cdbacb64e", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/72847.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F72847.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F72847.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F72847.cc?ref=4c27c6584d0c15926f57ac40f931e238cf0b3110", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-skip-if \"\" { *-*-* } { \"-fno-exceptions\" } }\n+// { dg-require-effective-target exceptions_enabled }\n \n #include <vector>\n #include <ext/throw_allocator.h>"}, {"sha": "f4bd319855a05b0043094332d64874404df60479", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=4c27c6584d0c15926f57ac40f931e238cf0b3110", "patch": "@@ -362,14 +362,9 @@ get_symbol(const string& name, const symbols& s)\n void\n examine_symbol(const char* name, const char* file)\n {\n-  try\n-    {\n-      symbols s = create_symbols(file);\n-      const symbol& sym = get_symbol(name, s);\n-      sym.print();\n-    }\n-  catch(...)\n-    { __throw_exception_again; }\n+    symbols s = create_symbols(file);\n+    const symbol& sym = get_symbol(name, s);\n+    sym.print();\n }\n \n int"}, {"sha": "e030ed5500c1c1671e65472a90be30723b5a1586", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=4c27c6584d0c15926f57ac40f931e238cf0b3110", "patch": "@@ -257,6 +257,7 @@ namespace __gnu_test\n       return true;\n     }\n \n+#if __cpp_exceptions\n   template<typename Alloc>\n     bool\n     check_allocate_max_size()\n@@ -276,6 +277,7 @@ namespace __gnu_test\n \t}\n       throw;\n     }\n+#endif\n \n   // A simple allocator which can be constructed endowed of a given\n   // \"personality\" (an integer), queried in operator== to simulate the\n@@ -761,7 +763,7 @@ namespace __gnu_test\n #endif // C++11\n \n #if __cplusplus >= 201703L\n-#if __cpp_aligned_new && __cpp_rtti\n+#if __cpp_aligned_new && __cpp_rtti && __cpp_exceptions\n   // A concrete memory_resource, with error checking.\n   class memory_resource : public std::pmr::memory_resource\n   {"}, {"sha": "33259ae36015106b149dee51f52725f672dd1185", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=4c27c6584d0c15926f57ac40f931e238cf0b3110", "patch": "@@ -408,8 +408,9 @@ namespace __gnu_test\n   void\n   erase_external_iterators(std::multimap<int, int>& s);\n \n-// NB: \"must be compiled with C++11\"\n-#if __cplusplus >= 201103L\n+#if __cplusplus < 201103L\n+# error \"must be compiled with C++11 (or later)\"\n+#else\n template<typename _Tp>\n   void\n   linkage_check_cxx98_cxx11_erase(_Tp& container)"}, {"sha": "eabff4c25c53e1ab415abd3528d702525968e3ce", "filename": "libstdc++-v3/testsuite/util/testsuite_shared.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c27c6584d0c15926f57ac40f931e238cf0b3110/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc?ref=4c27c6584d0c15926f57ac40f931e238cf0b3110", "patch": "@@ -45,12 +45,14 @@ try_allocation()\n extern \"C\" void\n try_throw_exception()\n {\n+#if __cpp_exceptions\n   try\n     {\n       std::__throw_bad_exception();\n     }\n   catch (const std::exception& e)\n     { }\n+#endif\n }\n \n extern \"C\" void\n@@ -75,8 +77,9 @@ try_function_random_fail()\n   std::__throw_bad_exception();\n }\n \n-#if __cplusplus < 201103L\n-// \"must be compiled with C++98\"\n+#if __cplusplus >= 201103L\n+# error \"must be compiled with C++98\"\n+#else\n   void\n   erase_external(std::set<int>& s)\n   { s.erase(s.begin()); }"}]}