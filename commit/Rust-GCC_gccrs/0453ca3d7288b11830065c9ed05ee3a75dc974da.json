{"sha": "0453ca3d7288b11830065c9ed05ee3a75dc974da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1M2NhM2Q3Mjg4YjExODMwMDY1YzllZDA1ZWUzYTc1ZGM5NzRkYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-06-16T08:57:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:57:18Z"}, "message": "gnat_rm.texi: Add documentation for pragma Persistent_BSS Document second argument (Ada_05)...\n\n2005-06-10  Robert Dewar  <dewar@adacore.com>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\t    Ben Brosgol  <brosgol@adacore.com>\n\t    Cyrille Comar  <comar@adacore.com>\n\t    Sergey Rybin  <rybin@adacore.com>\n\t    Pascal Obry  <obry@adacore.com>\n\n\t* gnat_rm.texi: Add documentation for pragma Persistent_BSS\n\tDocument second argument (Ada_05) of pragma Obsolescent\n\tAdd note that call to subprogram marked with pragma Obsolescent\n\tis now considered to be a violation of program Restrictions\n\t(No_Obsolescent_Features).\n\t(Implementation Defined Pragmas) <Machine_Attribute>: Make it clear\n\tthat only machine-dependent attributes are supported.\n\n\t* gnat_ugn.texi:\n\tCommented out menu lines and empty section for gnatclean examples\n\tDocument -gnatwy/Y\n\tFix some over long lines\n\tClarify and enhance documentation of ADA_PROJECT_PATH.\n\tRework section 2.11.2(3) about linking with a non-GNU compiler.\n\tMention new switch -fcallgraph-info.\n\tMention new switch -fstack-usage.\n\tFor gnatpp, replace '-notab' with '-N' and add this option to Index\n\tCorrected VMS example.\n\tVMS keyword for style check -gnatyd is DOS_LINE_ENDINGS, no NOCRLF\n\tMinor reformatting\n\tAdd documentation for -gnatyu switch (unnecessary blank lines)\n\tDocument new switch -U for GNAT PRETTY and GNAT METRIC\n\tAdd note about Stdcall being handled as C convention on non Windows OS.\n\tRemove some junk typo in description of gnatbind -S switch\n\tRemove reference to Extensions_Allowed pragma\n\tDocument the new order of the directories to be searched (source and\n\tobject directories of project files before directories in ADA_*_PATH\n\tenvironment variables.\n\n        * g-trasym.ads: Document that IRIX is supported\n\nFrom-SVN: r101071", "tree": {"sha": "50244e351a76e0e709f7b08c81f564fb06869a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50244e351a76e0e709f7b08c81f564fb06869a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0453ca3d7288b11830065c9ed05ee3a75dc974da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0453ca3d7288b11830065c9ed05ee3a75dc974da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0453ca3d7288b11830065c9ed05ee3a75dc974da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0453ca3d7288b11830065c9ed05ee3a75dc974da/comments", "author": null, "committer": null, "parents": [{"sha": "ea6ac8593835b4fbff1a4f163a0e652bfa612852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6ac8593835b4fbff1a4f163a0e652bfa612852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6ac8593835b4fbff1a4f163a0e652bfa612852"}], "stats": {"total": 347, "additions": 234, "deletions": 113}, "files": [{"sha": "4268acfa3927bb0c6ed24fd71564f01e04e899c0", "filename": "gcc/ada/g-trasym.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0453ca3d7288b11830065c9ed05ee3a75dc974da/gcc%2Fada%2Fg-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0453ca3d7288b11830065c9ed05ee3a75dc974da/gcc%2Fada%2Fg-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.ads?ref=0453ca3d7288b11830065c9ed05ee3a75dc974da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1999-2004 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 1999-2005 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,8 +33,8 @@\n \n --  Run-time symbolic traceback support\n \n---  Note: this is only available on selected targets. Currently it is\n---  supported on Sparc/Solaris, GNU/Linux, Windows NT, HP-UX, VMS and Tru64.\n+--  Note: this is only available on selected targets. Current targets are:\n+--  Sparc/Solaris, GNU/Linux, SGI/IRIX, Windows NT, HP-UX, VMS, Tru64.\n \n --  The routines provided in this package assume that your application has\n --  been compiled with debugging information turned on, since this information"}, {"sha": "c6d50b3f39622e91adeb34a4c7d4a046a1d8ed28", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 96, "deletions": 53, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0453ca3d7288b11830065c9ed05ee3a75dc974da/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0453ca3d7288b11830065c9ed05ee3a75dc974da/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0453ca3d7288b11830065c9ed05ee3a75dc974da", "patch": "@@ -157,6 +157,7 @@ Implementation Defined Pragmas\n * Pragma Normalize_Scalars::\n * Pragma Obsolescent::\n * Pragma Passive::\n+* Pragma Persistent_BSS::\n * Pragma Polling::\n * Pragma Profile (Ravenscar)::\n * Pragma Profile (Restricted)::\n@@ -685,6 +686,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Normalize_Scalars::\n * Pragma Obsolescent::\n * Pragma Passive::\n+* Pragma Persistent_BSS::\n * Pragma Polling::\n * Pragma Profile (Ravenscar)::\n * Pragma Profile (Restricted)::\n@@ -978,7 +980,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Common_Object (\n-     [Internal =>] LOCAL_NAME,\n+     [Internal =>] local_NAME,\n   [, [External =>] EXTERNAL_SYMBOL]\n   [, [Size     =>] EXTERNAL_SYMBOL] );\n \n@@ -991,7 +993,7 @@ EXTERNAL_SYMBOL ::=\n This pragma enables the shared use of variables stored in overlaid\n linker areas corresponding to the use of @code{COMMON}\n in Fortran.  The single\n-object @var{local_name} is assigned to the area designated by\n+object @var{local_NAME} is assigned to the area designated by\n the @var{External} argument.\n You may define a record to correspond to a series\n of fields.  The @var{size} argument\n@@ -1036,7 +1038,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Complex_Representation\n-        ([Entity =>] LOCAL_NAME);\n+        ([Entity =>] local_NAME);\n @end smallexample\n \n @noindent\n@@ -1060,7 +1062,7 @@ Syntax:\n @smallexample @c ada\n pragma Component_Alignment (\n      [Form =>] ALIGNMENT_CHOICE\n-  [, [Name =>] type_LOCAL_NAME]);\n+  [, [Name =>] type_local_NAME]);\n \n ALIGNMENT_CHOICE ::=\n   Component_Size\n@@ -1107,7 +1109,7 @@ alignment).\n @end table\n \n @noindent\n-If the @code{Name} parameter is present, @var{type_local_name} must\n+If the @code{Name} parameter is present, @var{type_local_NAME} must\n refer to a local record or array type, and the specified alignment\n choice applies to the specified type.  The use of\n @code{Component_Alignment} together with a pragma @code{Pack} causes the\n@@ -1171,7 +1173,7 @@ would be used system-wide.\n Syntax:\n \n @smallexample @c ada\n-pragma CPP_Class ([Entity =>] LOCAL_NAME);\n+pragma CPP_Class ([Entity =>] local_NAME);\n @end smallexample\n \n @noindent\n@@ -1202,7 +1204,7 @@ See @ref{Interfacing to C++} for related information.\n Syntax:\n \n @smallexample @c ada\n-pragma CPP_Constructor ([Entity =>] LOCAL_NAME);\n+pragma CPP_Constructor ([Entity =>] local_NAME);\n @end smallexample\n \n @noindent\n@@ -1533,7 +1535,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Exception (\n-     [Internal =>] LOCAL_NAME,\n+     [Internal =>] local_NAME,\n   [, [External =>] EXTERNAL_SYMBOL,]\n   [, [Form     =>] Ada | VMS]\n   [, [Code     =>] static_integer_EXPRESSION]);\n@@ -1562,7 +1564,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Function (\n-     [Internal         =>] LOCAL_NAME,\n+     [Internal         =>] local_NAME,\n   [, [External         =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types  =>] PARAMETER_TYPES]\n   [, [Result_Type      =>] result_SUBTYPE_MARK]\n@@ -1638,7 +1640,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Object\n-      [Internal =>] LOCAL_NAME,\n+      [Internal =>] local_NAME,\n    [, [External =>] EXTERNAL_SYMBOL]\n    [, [Size     =>] EXTERNAL_SYMBOL]\n \n@@ -1663,7 +1665,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Procedure (\n-     [Internal        =>] LOCAL_NAME\n+     [Internal        =>] local_NAME\n   [, [External        =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types =>] PARAMETER_TYPES]\n   [, [Mechanism       =>] MECHANISM]);\n@@ -1743,7 +1745,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Valued_Procedure (\n-     [Internal        =>] LOCAL_NAME\n+     [Internal        =>] local_NAME\n   [, [External        =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types =>] PARAMETER_TYPES]\n   [, [Mechanism       =>] MECHANISM]);\n@@ -1775,7 +1777,7 @@ MECHANISM_NAME ::=\n \n @noindent\n This pragma is identical to @code{Export_Procedure} except that the\n-first parameter of @var{local_name}, which must be present, must be of\n+first parameter of @var{local_NAME}, which must be present, must be of\n mode @code{OUT}, and externally the subprogram is treated as a function\n with this parameter as the result of the function.  GNAT provides for\n this capability to allow the use of @code{OUT} and @code{IN OUT}\n@@ -1957,7 +1959,7 @@ to enforce the upper casing of all external symbols.\n Syntax:\n \n @smallexample @c ada\n-pragma Finalize_Storage_Only (first_subtype_LOCAL_NAME);\n+pragma Finalize_Storage_Only (first_subtype_local_NAME);\n @end smallexample\n \n @noindent\n@@ -2024,7 +2026,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Exception (\n-     [Internal =>] LOCAL_NAME,\n+     [Internal =>] local_NAME,\n   [, [External =>] EXTERNAL_SYMBOL,]\n   [, [Form     =>] Ada | VMS]\n   [, [Code     =>] static_integer_EXPRESSION]);\n@@ -2051,7 +2053,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Function (\n-     [Internal                 =>] LOCAL_NAME,\n+     [Internal                 =>] local_NAME,\n   [, [External                 =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types          =>] PARAMETER_TYPES]\n   [, [Result_Type              =>] SUBTYPE_MARK]\n@@ -2133,7 +2135,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Object\n-     [Internal =>] LOCAL_NAME,\n+     [Internal =>] local_NAME,\n   [, [External =>] EXTERNAL_SYMBOL],\n   [, [Size     =>] EXTERNAL_SYMBOL]);\n \n@@ -2159,7 +2161,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Procedure (\n-     [Internal                 =>] LOCAL_NAME,\n+     [Internal                 =>] local_NAME,\n   [, [External                 =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types          =>] PARAMETER_TYPES]\n   [, [Mechanism                =>] MECHANISM]\n@@ -2205,7 +2207,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Valued_Procedure (\n-     [Internal                 =>] LOCAL_NAME,\n+     [Internal                 =>] local_NAME,\n   [, [External                 =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types          =>] PARAMETER_TYPES]\n   [, [Mechanism                =>] MECHANISM]\n@@ -2240,7 +2242,7 @@ CLASS_NAME ::= ubs | ubsb | uba | s | sb | a | nca\n \n @noindent\n This pragma is identical to @code{Import_Procedure} except that the\n-first parameter of @var{local_name}, which must be present, must be of\n+first parameter of @var{local_NAME}, which must be present, must be of\n mode @code{OUT}, and externally the subprogram is treated as a function\n with this parameter as the result of the function.  The purpose of this\n capability is to allow the use of @code{OUT} and @code{IN OUT}\n@@ -2356,7 +2358,7 @@ Syntax:\n @smallexample @c ada\n pragma Interface (\n      [Convention    =>] convention_identifier,\n-     [Entity =>] local_name\n+     [Entity =>] local_NAME\n   [, [External_Name =>] static_string_expression],\n   [, [Link_Name     =>] static_string_expression]);\n @end smallexample\n@@ -2377,7 +2379,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Interface_Name (\n-     [Entity        =>] LOCAL_NAME\n+     [Entity        =>] local_NAME\n   [, [External_Name =>] static_string_EXPRESSION]\n   [, [Link_Name     =>] static_string_EXPRESSION]);\n @end smallexample\n@@ -2395,7 +2397,7 @@ least one of @var{External_Name} or @var{Link_Name}.\n Syntax:\n \n @smallexample @c ada\n-pragma Interrupt_Handler (procedure_LOCAL_NAME);\n+pragma Interrupt_Handler (procedure_local_NAME);\n @end smallexample\n \n @noindent\n@@ -2491,11 +2493,11 @@ and in the case of the signal used to implement the @code{abort} statement.\n Syntax:\n \n @smallexample @c ada\n-pragma Keep_Names ([On =>] enumeration_first_subtype_LOCAL_NAME);\n+pragma Keep_Names ([On =>] enumeration_first_subtype_local_NAME);\n @end smallexample\n \n @noindent\n-The @var{LOCAL_NAME} argument\n+The @var{local_NAME} argument\n must refer to an enumeration first subtype\n in the current declarative part. The effect is to retain the enumeration\n literal names for use by @code{Image} and @code{Value} even if a global\n@@ -2634,7 +2636,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Linker_Alias (\n-  [Entity =>] LOCAL_NAME\n+  [Entity =>] local_NAME\n   [Alias  =>] static_string_EXPRESSION);\n @end smallexample\n \n@@ -2650,7 +2652,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Linker_Section (\n-  [Entity  =>] LOCAL_NAME\n+  [Entity  =>] local_NAME\n   [Section =>] static_string_EXPRESSION);\n @end smallexample\n \n@@ -2691,19 +2693,18 @@ Syntax:\n @smallexample @c ada\n pragma Machine_Attribute (\n   [Attribute_Name =>] string_EXPRESSION,\n-  [Entity         =>] LOCAL_NAME);\n+  [Entity         =>] local_NAME);\n @end smallexample\n \n @noindent\n-Machine dependent attributes can be specified for types and/or\n-declarations.  Currently only subprogram entities are supported.  This\n-pragma is semantically equivalent to\n+Machine-dependent attributes can be specified for types and/or\n+declarations.  This pragma is semantically equivalent to\n @code{__attribute__((@var{string_expression}))} in GNU C,\n where @code{@var{string_expression}} is\n-recognized by the GNU C macros @code{VALID_MACHINE_TYPE_ATTRIBUTE} and\n-@code{VALID_MACHINE_DECL_ATTRIBUTE} which are defined in the\n-configuration header file @file{tm.h} for each machine.  See the GCC\n-manual for further information.\n+recognized by the target macro @code{TARGET_ATTRIBUTE_TABLE} which is\n+defined for each machine.  See the GCC manual for further information.\n+It is not possible to specify attributes defined by other languages,\n+only attributes defined by the machine the code is intended to run on.\n \n @node Pragma Main_Storage\n @unnumberedsec Pragma Main_Storage\n@@ -2734,7 +2735,7 @@ also has no effect in DEC Ada 83 for OpenVMS Alpha Systems.\n Syntax:\n \n @smallexample @c ada\n-pragma No_Return (procedure_LOCAL_NAME);\n+pragma No_Return (procedure_local_NAME);\n @end smallexample\n \n @noindent\n@@ -2833,7 +2834,7 @@ will always generate an invalid value if one exists.\n Syntax:\n \n @smallexample @c ada\n-pragma Obsolescent [(static_string_EXPRESSION)];\n+pragma Obsolescent [(static_string_EXPRESSION [,Ada_05])];\n @end smallexample\n \n @noindent\n@@ -2849,6 +2850,17 @@ subprogram is obsolescent if the appropriate warning option in the\n compiler is activated. If a parameter is present, then a second\n warning message is given containing this text.\n \n+In addition, a call to such a program is considered a violation of\n+pragma Restrictions (No_Obsolescent_Features).\n+\n+If the optional second parameter is present (which must be exactly\n+the identifier Ada_05, no other argument is allowed), then the\n+indication of obsolescence applies only when compiling in Ada 2005\n+mode. This is primarily intended for dealing with the situations\n+in the predefined library where subprograms have become defined\n+as obsolescent in Ada 2005 (e.g. in Ada.Characters.Handling), but\n+may be used anywhere.\n+\n @node Pragma Passive\n @unnumberedsec Pragma Passive\n @findex Passive\n@@ -2870,6 +2882,37 @@ desired.  If the argument @code{No} is present, the task must not be\n optimized.  GNAT does not attempt to optimize any tasks in this manner\n (since protected objects are available in place of passive tasks).\n \n+@node Pragma Persistent_BSS\n+@unnumberedsec Pragma Persistent_BSS\n+@findex Persistent_BSS\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Persistent_BSS [local_NAME]\n+@end smallexample\n+\n+@noindent\n+This pragma allows selected objects to be placed in the @code{.persistent_bss}\n+section. On some targets the linker and loader provide for special\n+treatment of this section, allowing a program to be reloaded without\n+affecting the contents of this data (hence the name persistent).\n+\n+There are two forms of usage. If an argument is given, it must be the\n+local name of a library level object, with no explicit initialization\n+and whose type is potentially persistent. If no argument is given, then\n+the pragma is a configuration pragma, and applies to all library level\n+objects with no explicit initialization of potentially persistent types.\n+\n+A potentially persistent type is a scalar type, or a non-tagged,\n+non-discriminated record, all of whose components have no explicit\n+initialization and are themselves of a potentially persistent type,\n+or an array, all of whose constraints are static, and whose component\n+type is potentially persistent.\n+\n+If this pragma is used on a target where this feature is not supported,\n+then the pragma will be ignored. See also @code{pragma Linker_Section}.\n+\n @node Pragma Polling\n @unnumberedsec Pragma Polling\n @findex Polling\n@@ -3098,7 +3141,7 @@ limited set of tasking functionality permitted by this set of restrictions.\n Syntax:\n \n @smallexample @c ada\n-pragma Propagate_Exceptions (subprogram_LOCAL_NAME);\n+pragma Propagate_Exceptions (subprogram_local_NAME);\n @end smallexample\n \n @noindent\n@@ -3138,7 +3181,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Psect_Object (\n-     [Internal =>] LOCAL_NAME,\n+     [Internal =>] local_NAME,\n   [, [External =>] EXTERNAL_SYMBOL]\n   [, [Size     =>] EXTERNAL_SYMBOL]);\n \n@@ -3157,7 +3200,7 @@ This pragma is identical in effect to pragma @code{Common_Object}.\n Syntax:\n \n @smallexample @c ada\n-pragma Pure_Function ([Entity =>] function_LOCAL_NAME);\n+pragma Pure_Function ([Entity =>] function_local_NAME);\n @end smallexample\n \n @noindent\n@@ -3331,7 +3374,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Stream_Convert (\n-  [Entity =>] type_LOCAL_NAME,\n+  [Entity =>] type_local_NAME,\n   [Read   =>] function_NAME,\n   [Write  =>] function_NAME);\n @end smallexample\n@@ -3405,7 +3448,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Style_Checks (string_LITERAL | ALL_CHECKS |\n-                     On | Off [, LOCAL_NAME]);\n+                     On | Off [, local_NAME]);\n @end smallexample\n \n @noindent\n@@ -3626,7 +3669,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Task_Storage (\n-  [Task_Type =>] LOCAL_NAME,\n+  [Task_Type =>] local_NAME,\n   [Top_Guard =>] static_integer_EXPRESSION);\n @end smallexample\n \n@@ -3645,7 +3688,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Thread_Body (\n-  [Entity =>] LOCAL_NAME,\n+  [Entity =>] local_NAME,\n  [[Secondary_Stack_Size =>] static_integer_EXPRESSION)];\n @end smallexample\n \n@@ -3730,7 +3773,7 @@ following the normal rules for procedure calls in Ada.\n Syntax:\n \n @smallexample @c ada\n-pragma Unchecked_Union (first_subtype_LOCAL_NAME);\n+pragma Unchecked_Union (first_subtype_local_NAME);\n @end smallexample\n \n @noindent\n@@ -3845,7 +3888,7 @@ compilations of units where universal addressing of the data is desired.\n Syntax:\n \n @smallexample @c ada\n-pragma Unreferenced (local_Name @{, local_Name@});\n+pragma Unreferenced (local_NAME @{, local_NAME@});\n @end smallexample\n \n @noindent\n@@ -3863,7 +3906,7 @@ and that this is deliberate. It can also be useful in the case of\n objects declared only for their initialization or finalization side\n effects.\n \n-If @code{local_Name} identifies more than one matching homonym in the\n+If @code{local_NAME} identifies more than one matching homonym in the\n current scope, then the entity most recently declared is the one to which\n the pragma applies.\n \n@@ -4033,7 +4076,7 @@ Dec Ada 83.\n Syntax:\n \n @smallexample @c ada\n-pragma Warnings (On | Off [, LOCAL_NAME]);\n+pragma Warnings (On | Off [, local_NAME]);\n @end smallexample\n \n @noindent\n@@ -4046,7 +4089,7 @@ setting of the command line switches.\n \n The form with a single argument is a configuration pragma.\n \n-If the @var{local_name} parameter is present, warnings are suppressed for\n+If the @var{local_NAME} parameter is present, warnings are suppressed for\n the specified entity.  This suppression is effective from the point where\n it occurs till the end of the extended scope of the variable (similar to\n the scope of @code{Suppress}).\n@@ -4058,7 +4101,7 @@ the scope of @code{Suppress}).\n Syntax:\n \n @smallexample @c ada\n-pragma Weak_External ([Entity =>] LOCAL_NAME);\n+pragma Weak_External ([Entity =>] local_NAME);\n @end smallexample\n \n @noindent\n@@ -13103,13 +13146,13 @@ inter-operability between Ada tagged types and C class definitions.\n See @ref{Implementation Defined Pragmas}, for more details.\n \n @table @code\n-@item pragma CPP_Class ([Entity =>] @var{local_name})\n+@item pragma CPP_Class ([Entity =>] @var{local_NAME})\n The argument denotes an entity in the current declarative region that is\n declared as a tagged or untagged record type.  It indicates that the type\n corresponds to an externally declared C++ class type, and is to be laid\n out the same way that C++ would lay out the type.\n \n-@item pragma CPP_Constructor ([Entity =>] @var{local_name})\n+@item pragma CPP_Constructor ([Entity =>] @var{local_NAME})\n This pragma identifies an imported function (imported in the usual way\n with pragma @code{Import}) as corresponding to a C++ constructor.\n \n@@ -14603,7 +14646,7 @@ of the @command{gnatls} utility to be used to retrieve information about the\n predefined path; e.g., @code{\"gnatls\"}, @code{\"powerpc-wrs-vxworks-gnatls\"}.\n \n @item VCS_Kind\n-This is a simple attribute. Is value is a string used to specify the\n+This is a simple attribute. Its value is a string used to specify the\n Version Control System (VCS) to be used for this project, e.g CVS, RCS\n ClearCase or Perforce.\n "}, {"sha": "23b49ac93f028d9136b49d26f54367b0fba68f31", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 135, "deletions": 57, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0453ca3d7288b11830065c9ed05ee3a75dc974da/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0453ca3d7288b11830065c9ed05ee3a75dc974da/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0453ca3d7288b11830065c9ed05ee3a75dc974da", "patch": "@@ -433,7 +433,7 @@ Cleaning Up Using gnatclean\n \n * Running gnatclean::\n * Switches for gnatclean::\n-* Examples of gnatclean Usage::\n+@c * Examples of gnatclean Usage::\n \n @ifclear vms\n \n@@ -1094,13 +1094,8 @@ $ gnatmake hello.adb\n The result is an executable program called @file{hello}, which can be\n run by entering:\n \n-@c The following should be removed (BMB 2001-01-23)\n-@c @smallexample\n-@c $ ^./hello^$ RUN HELLO^\n-@c @end smallexample\n-\n @smallexample\n-$ hello\n+$ ^hello^RUN HELLO^\n @end smallexample\n \n @noindent\n@@ -3054,7 +3049,9 @@ implemented as a single machine instruction.\n @item Stdcall\n This is relevant only to NT/Win95 implementations of GNAT,\n and specifies that the Stdcall calling sequence will be used, as defined\n-by the NT API.\n+by the NT API. Nevertheless, to ease building cross-platform bindings this\n+convention will be handled as a C calling convention on non Windows\n+platforms.\n \n @findex DLL\n @cindex Convention DLL\n@@ -3202,8 +3199,11 @@ $ gnatlink -v -v ada_unit file1.o file2.o --LINK=./my_script\n @item\n Using a non-GNU C++ compiler: The commands previously described can be\n used to insure that the C++ linker is used. Nonetheless, you need to add\n-the path to libgcc explicitly, since some libraries needed by GNAT are\n-located in this directory:\n+a few more parameters to the link command line, depending on the exception\n+mechanism used.\n+\n+If the @code{setjmp/longjmp} exception mechanism is used, only the paths\n+to the libgcc libraries are required:\n \n @smallexample\n $ cat ./my_script\n@@ -3214,6 +3214,24 @@ $ gnatlink ada_unit file1.o file2.o --LINK=./my_script\n \n Where CC is the name of the non-GNU C++ compiler.\n \n+If the @code{zero cost} exception mechanism is used, and the platform\n+supports automatic registration of exception tables (e.g. Solaris or IRIX),\n+paths to more objects are required:\n+\n+@smallexample\n+$ cat ./my_script\n+#!/bin/sh\n+CC `gcc -print-file-name=crtbegin.o` $* \\\n+`gcc -print-file-name=libgcc.a` `gcc -print-file-name=libgcc_eh.a` \\\n+`gcc -print-file-name=crtend.o`\n+$ gnatlink ada_unit file1.o file2.o --LINK=./my_script\n+@end smallexample\n+\n+If the @code{zero cost} exception mechanism is used, and the platform\n+doesn't support automatic registration of exception tables (e.g. HP-UX,\n+Tru64 or AIX), the simple approach described above will not work and\n+a pre-linking phase using GNAT will be necessary.\n+\n @end enumerate\n \n @node A Simple Example\n@@ -3699,6 +3717,19 @@ of objects of different types. See\n Activates stack checking.\n See @ref{Stack Overflow Checking} for details of the use of this option.\n \n+@item -fstack-usage\n+@cindex @option{-fstack-usage} (@command{gcc})\n+Makes the compiler output stack usage information for the program, on a\n+per-function basis.  The description of the format is to be found in\n+the GCC documentation.\n+\n+@item -fcallgraph-info\n+@cindex @option{-fcallgraph-info} (@command{gcc})\n+Makes the compiler output callgraph information for the program, on a\n+per-file basis.  The information is generated in the VCG format.  It can\n+be decorated with additional, per-node information if other debugging\n+options are enabled (only works with -fstack-usage as of this writing).\n+\n @item ^-g^/DEBUG^\n @cindex @option{^-g^/DEBUG^} (@command{gcc})\n Generate debugging information. This information is stored in the object\n@@ -4911,6 +4942,25 @@ such warnings are generated.\n This switch suppresses warnings for access to variables which\n may not be properly initialized.\n \n+@item -gnatwy\n+@emph{Activate warnings for Ada 2005 compatibility issues.}\n+@cindex @option{-gnatwy} (@command{gcc})\n+@cindex Ada 2005 compatibility issues warnings\n+For the most part Ada 2005 is upwards compatible with Ada 95,\n+but there are some exceptions (for example the fact that\n+@code{interface} is now a reserved word in Ada 2005. This\n+switch activates several warnings to help in identifying\n+and correcting such incompatibilities. The default is that\n+these warnings are generated. Note that at one point Ada 2005\n+was called Ada 0Y, hence the choice of character.\n+\n+@item -gnatwY\n+@emph{Disab le warnings for Ada 2005 compatibility issues.}\n+@cindex @option{-gnatwY} (@command{gcc})\n+@cindex Ada 2005 compatibility issues warnings\n+This switch suppresses several warnings intended to help in identifying\n+incompatibilities between Ada 95 and Ada 2005.\n+\n @item -gnatwx\n @emph{Activate warnings on Export/Import pragmas.}\n @cindex @option{-gnatwx} (@command{gcc})\n@@ -5363,9 +5413,10 @@ example:\n \n @item ^d^DOS_LINE_ENDINGS^\n @emph{Check no DOS line terminators present.}\n-If the ^letter d^word NOCRLF^ appears in the string after @option{-gnaty}\n-then all lines must be terminated by a single ASCII.LF character (in\n-particular the DOS line terminator sequence CR/LF is not allowed).\n+If the ^letter d^word DOS_LINE_ENDINGS^ appears in the string after\n+@option{-gnaty} then all lines must be terminated by a single ASCII.LF\n+character (in particular the DOS line terminator sequence CR/LF is not\n+allowed).\n \n @item ^e^END^\n @emph{Check end/exit labels.}\n@@ -5588,6 +5639,12 @@ A unary plus or minus may not be followed by a space.\n A vertical bar must be surrounded by spaces.\n @end itemize\n \n+@item ^u^UNNECESSARY_BLANK_LINES^\n+@emph{Check unnecessary blank lines.}\n+Check for unnecessary blank lines. A blank line is considered\n+unnecessary if it appears at the end of the file, or if more than\n+one blank line occurs in sequence.\n+\n @item ^x^XTRA_PARENS^\n @emph{Check extra parentheses.}\n Check for the use of an unnecessary extra level of parentheses (C-style)\n@@ -5617,14 +5674,16 @@ The switch\n @ifclear vms\n @option{-gnaty} on its own (that is not\n followed by any letters or digits),\n-is equivalent to @code{gnaty3abcefhiklmprst}, that is all checking\n-options enabled with the exception of -gnatyo,\n+is equivalent to @code{gnaty3abcefhiklmnprst}, that is all checking\n+options enabled with the exception of @option{-gnatyo},\n+@option{-gnatyd}, @option{-gnatyu}, and @option{-gnatyx}.\n @end ifclear\n @ifset vms\n /STYLE_CHECKS=ALL_BUILTIN enables all checking options with\n-the exception of ORDERED_SUBPROGRAMS,\n+the exception of ORDERED_SUBPROGRAMS, UNNECESSARY_BLANK_LINES,\n+XTRA_PARENS, and DOS_LINE_ENDINGS. In addition\n @end ifset\n-with an indentation level of 3. This is the standard\n+an indentation level of 3 is set. This is similar to the standard\n checking option that is used for the GNAT sources.\n \n The switch\n@@ -6715,6 +6774,16 @@ The directory containing the source file of the main unit being compiled\n Each directory named by an @option{^-I^/SOURCE_SEARCH^} switch given on the\n @command{gcc} command line, in the order given.\n \n+@item\n+@findex ADA_PRJ_INCLUDE_FILE\n+Each of the directories listed in the text file whose name is given\n+by the @code{ADA_PRJ_INCLUDE_FILE} ^environment variable^logical name^.\n+\n+@noindent\n+@code{ADA_PRJ_INCLUDE_FILE} is normally set by gnatmake or by the ^gnat^GNAT^\n+driver when project files are used. It should not normally be set\n+by other means.\n+\n @item\n @findex ADA_INCLUDE_PATH\n Each of the directories listed in the value of the\n@@ -6746,16 +6815,6 @@ instead of the Ada95 packages. Thus, in order to get the Ada 95\n packages by default, ADA_INCLUDE_PATH must be redefined.\n @end ifset\n \n-@item\n-@findex ADA_PRJ_INCLUDE_FILE\n-Each of the directories listed in the text file whose name is given\n-by the @code{ADA_PRJ_INCLUDE_FILE} ^environment variable^logical name^.\n-\n-@noindent\n-@code{ADA_PRJ_INCLUDE_FILE} is normally set by gnatmake or by the ^gnat^GNAT^\n-driver when project files are used. It should not normally be set\n-by other means.\n-\n @item\n The content of the @file{ada_source_path} file which is part of the GNAT\n installation tree and is used to store standard libraries such as the\n@@ -7169,7 +7228,6 @@ The @var{xxx} ^string specified with the switch^option^ may be either\n @itemize @bullet\n @item ``@option{^in^INVALID^}'' requesting an invalid value where possible\n @item ``@option{^lo^LOW^}'' for the lowest possible value\n-possible, and the low\n @item ``@option{^hi^HIGH^}'' for the highest possible value\n @item ``@option{xx}'' for a value consisting of repeated bytes with the\n value 16#xx# (i.e. xx is a string of two hexadecimal digits).\n@@ -7631,6 +7689,16 @@ All directories specified by @option{^-I^/SEARCH^}\n switches on the @code{gnatbind}\n command line, in the order given.\n \n+@item\n+@findex ADA_PRJ_OBJECTS_FILE\n+Each of the directories listed in the text file whose name is given\n+by the @code{ADA_PRJ_OBJECTS_FILE} ^environment variable^logical name^.\n+\n+@noindent\n+@code{ADA_PRJ_OBJECTS_FILE} is normally set by gnatmake or by the ^gnat^GNAT^\n+driver when project files are used. It should not normally be set\n+by other means.\n+\n @item\n @findex ADA_OBJECTS_PATH\n Each of the directories listed in the value of the\n@@ -7663,16 +7731,6 @@ instead of the Ada95 packages. Thus, in order to get the Ada 95\n packages by default, ADA_OBJECTS_PATH must be redefined.\n @end ifset\n \n-@item\n-@findex ADA_PRJ_OBJECTS_FILE\n-Each of the directories listed in the text file whose name is given\n-by the @code{ADA_PRJ_OBJECTS_FILE} ^environment variable^logical name^.\n-\n-@noindent\n-@code{ADA_PRJ_OBJECTS_FILE} is normally set by gnatmake or by the ^gnat^GNAT^\n-driver when project files are used. It should not normally be set\n-by other means.\n-\n @item\n The content of the @file{ada_object_path} file which is part of the GNAT\n installation tree and is used to store standard libraries such as the\n@@ -10060,7 +10118,6 @@ recognized by @code{GNAT}:\n    Elaboration_Checks\n    Eliminate\n    Extend_System\n-   Extensions_Allowed\n    External_Name_Casing\n    Float_Representation\n    Initialize_Scalars\n@@ -10959,6 +11016,7 @@ is equivalent to the @command{gnatmake} invocation using the project file\n \n @node Importing Other Projects\n @subsection Importing Other Projects\n+@cindex @code{ADA_PROJECT_PATH}\n \n @noindent\n A compilation unit in a source file in one project may depend on compilation\n@@ -11993,6 +12051,7 @@ define a package @code{Naming} (@pxref{Naming Schemes}).\n \n @node  Importing Projects\n @section Importing Projects\n+@cindex @code{ADA_PROJECT_PATH}\n \n @noindent\n An immediate source of a project P may depend on source files that\n@@ -12016,19 +12075,24 @@ use literal strings instead of names, and the @code{with} clause identifies\n project files rather than packages.\n \n Each literal string is the file name or path name (absolute or relative) of a\n-project file. If a string is simply a file name, with no path, then its\n-location is determined by the @emph{project path}:\n+project file. If a string corresponds to a file name, with no path or a\n+relative path, then its location is determined by the @emph{project path}. The\n+latter can be queried using @code{gnatls -v}. It contains:\n \n @itemize @bullet\n @item\n-If the ^environment variable^logical name^ @env{ADA_PROJECT_PATH} exists,\n-then the project path includes all the directories in this\n-^environment variable^logical name^, plus the directory of the project file.\n+In first position, the directory containing the current project file.\n+@item\n+In last position, the default project directory. This default project directory\n+is part of the GNAT installation and is the standard place to install project\n+files giving access to standard support libraries.\n+@ifclear vms\n+@ref{Installing a library}\n+@end ifclear\n \n @item\n-If the ^environment variable^logical name^ @env{ADA_PROJECT_PATH} does not\n-exist, then the project path contains only one directory, namely the one where\n-the project file is located.\n+In between, all the directories referenced in the\n+^environment variable^logical name^ @env{ADA_PROJECT_PATH} if it exists.\n @end itemize\n \n @noindent\n@@ -12039,9 +12103,10 @@ If a relative pathname is used, as in\n @end smallexample\n \n @noindent\n-then the path is relative to the directory where the importing project file is\n-located. Any symbolic link will be fully resolved in the directory\n-of the importing project file before the imported project file is examined.\n+then the full path for the project is constructed by concatenating this\n+relative path to those in the project path, in order, until a matching file is\n+found. Any symbolic link will be fully resolved in the directory of the\n+importing project file before the imported project file is examined.\n \n If the @code{with}'ed project file name does not have an extension,\n the default is @file{^.gpr^.GPR^}. If a file with this extension is not found,\n@@ -13379,6 +13444,17 @@ with all the immediate sources of the specified project file and with\n @option{^-d^/DIRECTORY^} with the parameter pointing to the object directory\n of the project.\n \n+@noindent\n+In addition, when GNAT PP, GNAT PRETTY or GNAT METRIC is used with\n+a project file, no source is specified on the command line and\n+switch ^-U^/ALL_PROJECTS^ is specified on the command line, then\n+the underlying tool (^gnatpp^gnatpp^ or\n+^gnatmetric^gnatmetric^) is invoked for all sources of all projects,\n+not only for the immediate sources of the main project.\n+@ifclear vms\n+(-U stands for Universal or Union of the project files of the project tree)\n+@end ifclear\n+\n @noindent\n For each of the following commands, there is optionally a corresponding\n package in the main project.\n@@ -14810,7 +14886,8 @@ Compact layout\n @item ^-l3^/CONSTRUCT_LAYOUT=UNCOMPACT^\n Uncompact layout\n \n-@item ^-notab^/NOTABS^\n+@cindex @option{^-N^/NOTABS^} (@command{gnatpp})\n+@item ^-N^/NOTABS^\n All the VT characters are removed from the comment text. All the HT characters\n are expanded with the sequences of space characters to get to the next tab\n stops.\n@@ -15553,8 +15630,8 @@ upon units in files located outside the current directory, you have to provide\n the source search path when invoking @command{gnatmetric}.\n If it depends semantically upon units that are contained\n in files with names that do not follow the GNAT file naming rules, you have to\n-provide the configuration file describing the corresponding naming scheme; see\n-the description of the @command{gnatmetric} switches below.\n+provide the configuration file describing the corresponding naming scheme (see\n+the description of the @command{gnatmetric} switches below.)\n Alternatively, you may use a project file and invoke @command{gnatmetric}\n through the @command{gnat} driver.\n \n@@ -16856,7 +16933,7 @@ generated files and executable files.\n @menu\n * Running gnatclean::\n * Switches for gnatclean::\n-* Examples of gnatclean Usage::\n+@c * Examples of gnatclean Usage::\n @end menu\n \n @node Running gnatclean\n@@ -16970,8 +17047,8 @@ where @code{gnatclean} was invoked.\n \n @end table\n \n-@node Examples of gnatclean Usage\n-@section Examples of @code{gnatclean} Usage\n+@c @node Examples of gnatclean Usage\n+@c @section Examples of @code{gnatclean} Usage\n \n @ifclear vms\n @node GNAT and Libraries\n@@ -17160,6 +17237,7 @@ the directive @option{-lxxx} at link time.\n \n @node Installing a library\n @subsection Installing a library\n+@cindex @code{ADA_PROJECT_PATH}\n \n @noindent\n If you use project files, library installation is part of the library build\n@@ -17199,7 +17277,7 @@ responsibility of the library provider to install the necessary sources, ALI\n files and libraries in the directories mentioned in the project file. For\n convenience, the user's library project file should be installed in a location\n that will be searched automatically by the GNAT\n-builder. These are the directories referenced in the @code{ADA_LIBRARY_PATH}\n+builder. These are the directories referenced in the @code{ADA_PROJECT_PATH}\n environment variable (@pxref{Importing Projects}), and also the default GNAT\n library location that can be queried with @command{gnatls -v} and is usually of\n the form $gnat_install_root/lib/gnat."}]}