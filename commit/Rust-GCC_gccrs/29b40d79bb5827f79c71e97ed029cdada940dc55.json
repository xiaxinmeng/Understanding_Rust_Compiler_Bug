{"sha": "29b40d79bb5827f79c71e97ed029cdada940dc55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjliNDBkNzliYjU4MjdmNzljNzFlOTdlZDAyOWNkYWRhOTQwZGM1NQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-08-03T23:48:52Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-08-03T23:48:52Z"}, "message": "simplify-rtx.c (simplify_binary_operation_1): Try to simplify away NEG as operand of a MULT by merging it with the other operand.\n\n\t* simplify-rtx.c (simplify_binary_operation_1): Try to simplify away\n\tNEG as operand of a MULT by merging it with the other operand.\n\t* combine.c (make_compound_operation): Use trunc_int_for_mode when\n\tgenerating a MULT with constant.  Canonicalize PLUS and MINUS involving\n\tMULT.\n\t* config/arm/constraints.md (M): Examine only 32 bits of a\n\tHOST_WIDE_INT.\n\t* config/arm/predicates.md (power_of_two_operand): Likewise.\n\nFrom-SVN: r162849", "tree": {"sha": "ecb6814d4696c9ee687838148c96dfdb407da3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb6814d4696c9ee687838148c96dfdb407da3ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29b40d79bb5827f79c71e97ed029cdada940dc55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b40d79bb5827f79c71e97ed029cdada940dc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b40d79bb5827f79c71e97ed029cdada940dc55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b40d79bb5827f79c71e97ed029cdada940dc55/comments", "author": null, "committer": null, "parents": [{"sha": "15b71db372221e4cb5b5e490397cd4ea4199505f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b71db372221e4cb5b5e490397cd4ea4199505f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b71db372221e4cb5b5e490397cd4ea4199505f"}], "stats": {"total": 101, "additions": 96, "deletions": 5}, "files": [{"sha": "0361f83f039775b85796e40b633a04136afd2fc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29b40d79bb5827f79c71e97ed029cdada940dc55", "patch": "@@ -1,3 +1,14 @@\n+2010-08-03  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation_1): Try to simplify away\n+\tNEG as operand of a MULT by merging it with the other operand.\n+\t* combine.c (make_compound_operation): Use trunc_int_for_mode when\n+\tgenerating a MULT with constant.  Canonicalize PLUS and MINUS involving\n+\tMULT.\n+\t* config/arm/constraints.md (M): Examine only 32 bits of a\n+\tHOST_WIDE_INT.\n+\t* config/arm/predicates.md (power_of_two_operand): Likewise.\n+\n 2010-08-03  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.c (spu_emit_branch_hint): Do not access NOTE_KIND of"}, {"sha": "0725c862cf1edb751c6df43c82f2267304c483c3", "filename": "gcc/combine.c", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=29b40d79bb5827f79c71e97ed029cdada940dc55", "patch": "@@ -7110,13 +7110,79 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t  && INTVAL (XEXP (x, 1)) < HOST_BITS_PER_WIDE_INT\n \t  && INTVAL (XEXP (x, 1)) >= 0)\n \t{\n+\t  HOST_WIDE_INT count = INTVAL (XEXP (x, 1));\n+\t  HOST_WIDE_INT multval = (HOST_WIDE_INT) 1 << count;\n+\n \t  new_rtx = make_compound_operation (XEXP (x, 0), next_code);\n-\t  new_rtx = gen_rtx_MULT (mode, new_rtx,\n-\t\t\t      GEN_INT ((HOST_WIDE_INT) 1\n-\t\t\t\t       << INTVAL (XEXP (x, 1))));\n+\t  if (GET_CODE (new_rtx) == NEG)\n+\t    {\n+\t      new_rtx = XEXP (new_rtx, 0);\n+\t      multval = -multval;\n+\t    }\n+\t  multval = trunc_int_for_mode (multval, mode);\n+\t  new_rtx = gen_rtx_MULT (mode, new_rtx, GEN_INT (multval));\n \t}\n       break;\n \n+    case PLUS:\n+      lhs = XEXP (x, 0);\n+      rhs = XEXP (x, 1);\n+      lhs = make_compound_operation (lhs, MEM);\n+      rhs = make_compound_operation (rhs, MEM);\n+      if (GET_CODE (lhs) == MULT && GET_CODE (XEXP (lhs, 0)) == NEG\n+\t  && SCALAR_INT_MODE_P (mode))\n+\t{\n+\t  tem = simplify_gen_binary (MULT, mode, XEXP (XEXP (lhs, 0), 0),\n+\t\t\t\t     XEXP (lhs, 1));\n+\t  new_rtx = simplify_gen_binary (MINUS, mode, rhs, tem);\n+\t}\n+      else if (GET_CODE (lhs) == MULT\n+\t       && (CONST_INT_P (XEXP (lhs, 1)) && INTVAL (XEXP (lhs, 1)) < 0))\n+\t{\n+\t  tem = simplify_gen_binary (MULT, mode, XEXP (lhs, 0),\n+\t\t\t\t     simplify_gen_unary (NEG, mode,\n+\t\t\t\t\t\t\t XEXP (lhs, 1),\n+\t\t\t\t\t\t\t mode));\n+\t  new_rtx = simplify_gen_binary (MINUS, mode, rhs, tem);\n+\t}\n+      else\n+\t{\n+\t  SUBST (XEXP (x, 0), lhs);\n+\t  SUBST (XEXP (x, 1), rhs);\n+\t  goto maybe_swap;\n+\t}\n+      x = gen_lowpart (mode, new_rtx);\n+      goto maybe_swap;\n+\n+    case MINUS:\n+      lhs = XEXP (x, 0);\n+      rhs = XEXP (x, 1);\n+      lhs = make_compound_operation (lhs, MEM);\n+      rhs = make_compound_operation (rhs, MEM);\n+      if (GET_CODE (rhs) == MULT && GET_CODE (XEXP (rhs, 0)) == NEG\n+\t  && SCALAR_INT_MODE_P (mode))\n+\t{\n+\t  tem = simplify_gen_binary (MULT, mode, XEXP (XEXP (rhs, 0), 0),\n+\t\t\t\t     XEXP (rhs, 1));\n+\t  new_rtx = simplify_gen_binary (PLUS, mode, tem, lhs);\n+\t}\n+      else if (GET_CODE (rhs) == MULT\n+\t       && (CONST_INT_P (XEXP (rhs, 1)) && INTVAL (XEXP (rhs, 1)) < 0))\n+\t{\n+\t  tem = simplify_gen_binary (MULT, mode, XEXP (rhs, 0),\n+\t\t\t\t     simplify_gen_unary (NEG, mode,\n+\t\t\t\t\t\t\t XEXP (rhs, 1),\n+\t\t\t\t\t\t\t mode));\n+\t  new_rtx = simplify_gen_binary (PLUS, mode, tem, lhs);\n+\t}\n+      else\n+\t{\n+\t  SUBST (XEXP (x, 0), lhs);\n+\t  SUBST (XEXP (x, 1), rhs);\n+\t  return x;\n+\t}\n+      return gen_lowpart (mode, new_rtx);\n+\n     case AND:\n       /* If the second operand is not a constant, we can't do anything\n \t with it.  */\n@@ -7345,6 +7411,7 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t  SUBST (XVECEXP (x, i, j), new_rtx);\n \t}\n \n+ maybe_swap:\n   /* If this is a commutative operation, the changes to the operands\n      may have made it noncanonical.  */\n   if (COMMUTATIVE_ARITH_P (x)"}, {"sha": "fce8b5ea0becd14e8a733f43ee526fd22dcffba0", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=29b40d79bb5827f79c71e97ed029cdada940dc55", "patch": "@@ -121,7 +121,7 @@\n  \"In Thumb-1 state a constant that is a multiple of 4 in the range 0-1020.\"\n  (and (match_code \"const_int\")\n       (match_test \"TARGET_32BIT ? ((ival >= 0 && ival <= 32)\n-\t\t\t\t || ((ival & (ival - 1)) == 0))\n+\t\t\t\t || (((ival & (ival - 1)) & 0xFFFFFFFF) == 0))\n \t\t   : ival >= 0 && ival <= 1020 && (ival & 3) == 0\")))\n \n (define_constraint \"N\""}, {"sha": "5481708787021c7c902c32004bc9cd1cb8b571c5", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=29b40d79bb5827f79c71e97ed029cdada940dc55", "patch": "@@ -289,7 +289,7 @@\n (define_predicate \"power_of_two_operand\"\n   (match_code \"const_int\")\n {\n-  HOST_WIDE_INT value = INTVAL (op);\n+  unsigned HOST_WIDE_INT value = INTVAL (op) & 0xffffffff;\n \n   return value != 0 && (value & (value - 1)) == 0;\n })"}, {"sha": "86de77e14061efb3a188c2627f275cebfae0e957", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b40d79bb5827f79c71e97ed029cdada940dc55/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=29b40d79bb5827f79c71e97ed029cdada940dc55", "patch": "@@ -2109,6 +2109,19 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       if (trueop1 == constm1_rtx)\n \treturn simplify_gen_unary (NEG, mode, op0, mode);\n \n+      if (GET_CODE (op0) == NEG)\n+\t{\n+\t  rtx temp = simplify_unary_operation (NEG, mode, op1, mode);\n+\t  if (temp)\n+\t    return simplify_gen_binary (MULT, mode, XEXP (op0, 0), temp);\n+\t}\n+      if (GET_CODE (op1) == NEG)\n+\t{\n+\t  rtx temp = simplify_unary_operation (NEG, mode, op0, mode);\n+\t  if (temp)\n+\t    return simplify_gen_binary (MULT, mode, temp, XEXP (op1, 0));\n+\t}\n+\n       /* Maybe simplify x * 0 to 0.  The reduction is not valid if\n \t x is NaN, since x * 0 is then also NaN.  Nor is it valid\n \t when the mode has signed zeros, since multiplying a negative"}]}