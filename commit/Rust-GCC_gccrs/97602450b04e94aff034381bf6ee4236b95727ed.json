{"sha": "97602450b04e94aff034381bf6ee4236b95727ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2MDI0NTBiMDRlOTRhZmYwMzQzODFiZjZlZTQyMzZiOTU3MjdlZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:35:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:35:56Z"}, "message": "Delay swapping data refs in prune_runtime_alias_test_list\n\nprune_runtime_alias_test_list swapped dr_as between two dr_with_seg_len\npairs before finally deciding whether to merge them.  Bailing out later\nwould therefore leave the pairs in an incorrect state.\n\nIMO a better fix would be to split this out into a subroutine that\nproduces a temporary dr_with_seg_len on success, rather than changing\nan existing one in-place.  It would then be easy to merge both the dr_as\nand dr_bs if we wanted to, rather than requiring one of them to be equal.\nBut here I tried to do something that could be backported if necessary.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-data-ref.c (prune_runtime_alias_test_list): Delay\n\tswapping the dr_as based on init values until we've decided\n\twhether to merge them.\n\nFrom-SVN: r278349", "tree": {"sha": "45dcf86cca2f2d8eab5e7ee415a8178c663c9eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45dcf86cca2f2d8eab5e7ee415a8178c663c9eea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97602450b04e94aff034381bf6ee4236b95727ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97602450b04e94aff034381bf6ee4236b95727ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97602450b04e94aff034381bf6ee4236b95727ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97602450b04e94aff034381bf6ee4236b95727ed/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fb2b0f69ee849142b669ba1b82264ce6d0f75f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb2b0f69ee849142b669ba1b82264ce6d0f75f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb2b0f69ee849142b669ba1b82264ce6d0f75f9"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "572eaeb3e249a062bd9f234bc768c3d5b7dc9bdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97602450b04e94aff034381bf6ee4236b95727ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97602450b04e94aff034381bf6ee4236b95727ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97602450b04e94aff034381bf6ee4236b95727ed", "patch": "@@ -1,3 +1,9 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-data-ref.c (prune_runtime_alias_test_list): Delay\n+\tswapping the dr_as based on init values until we've decided\n+\twhether to merge them.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-data-ref.c (prune_runtime_alias_test_list): Sort the"}, {"sha": "cf4fb26e5375346b896d1bf8c25be6f8146e8262", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97602450b04e94aff034381bf6ee4236b95727ed/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97602450b04e94aff034381bf6ee4236b95727ed/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=97602450b04e94aff034381bf6ee4236b95727ed", "patch": "@@ -1555,13 +1555,6 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n \t  if (!ordered_p (init_a1, init_a2))\n \t    continue;\n \n-\t  /* Make sure dr_a1 starts left of dr_a2.  */\n-\t  if (maybe_gt (init_a1, init_a2))\n-\t    {\n-\t      std::swap (*dr_a1, *dr_a2);\n-\t      std::swap (init_a1, init_a2);\n-\t    }\n-\n \t  /* Work out what the segment length would be if we did combine\n \t     DR_A1 and DR_A2:\n \n@@ -1578,7 +1571,10 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n \n \t     The lengths both have sizetype, so the sign is taken from\n \t     the step instead.  */\n-\t  if (!operand_equal_p (dr_a1->seg_len, dr_a2->seg_len, 0))\n+\t  poly_uint64 new_seg_len = 0;\n+\t  bool new_seg_len_p = !operand_equal_p (dr_a1->seg_len,\n+\t\t\t\t\t\t dr_a2->seg_len, 0);\n+\t  if (new_seg_len_p)\n \t    {\n \t      poly_uint64 seg_len_a1, seg_len_a2;\n \t      if (!poly_int_tree_p (dr_a1->seg_len, &seg_len_a1)\n@@ -1596,14 +1592,24 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n \t      int sign_a = tree_int_cst_sgn (indicator_a);\n \t      int sign_b = tree_int_cst_sgn (indicator_b);\n \n-\t      poly_uint64 new_seg_len;\n \t      if (sign_a <= 0 && sign_b <= 0)\n \t\tnew_seg_len = lower_bound (seg_len_a1, seg_len_a2);\n \t      else if (sign_a >= 0 && sign_b >= 0)\n \t\tnew_seg_len = upper_bound (seg_len_a1, seg_len_a2);\n \t      else\n \t\tcontinue;\n+\t    }\n+\t  /* At this point we're committed to merging the refs.  */\n \n+\t  /* Make sure dr_a1 starts left of dr_a2.  */\n+\t  if (maybe_gt (init_a1, init_a2))\n+\t    {\n+\t      std::swap (*dr_a1, *dr_a2);\n+\t      std::swap (init_a1, init_a2);\n+\t    }\n+\n+\t  if (new_seg_len_p)\n+\t    {\n \t      dr_a1->seg_len = build_int_cst (TREE_TYPE (dr_a1->seg_len),\n \t\t\t\t\t      new_seg_len);\n \t      dr_a1->align = MIN (dr_a1->align, known_alignment (new_seg_len));"}]}