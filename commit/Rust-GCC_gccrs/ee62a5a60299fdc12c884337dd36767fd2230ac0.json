{"sha": "ee62a5a60299fdc12c884337dd36767fd2230ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2MmE1YTYwMjk5ZmRjMTJjODg0MzM3ZGQzNjc2N2ZkMjIzMGFjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-12-03T14:31:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-12-03T14:31:55Z"}, "message": "Add an rsqrt_optab and IFN_RSQRT internal function\n\nAll current uses of builtin_reciprocal convert 1.0/sqrt into rsqrt.\nThis patch adds an rsqrt optab and associated internal function for\nthat instead.  We can then pick up the vector forms of rsqrt automatically,\nfixing an AArch64 regression from my internal_fn patches.\n\nWith that change, builtin_reciprocal only needs to handle target-specific\nbuilt-in functions.  I've restricted the hook to those since, if we need\na reciprocal of another standard function later, I think there should be\na strong preference for adding a new optab and internal function for it,\nrather than hiding the code in a backend.\n\nThree targets implement builtin_reciprocal: aarch64, i386 and rs6000.\ni386 and rs6000 already used the obvious rsqrt<mode>2 pattern names\nfor the instructions, so they pick up the new code automatically.\naarch64 needs a slight rename.\n\nmn10300 is unusual in that its native operation is rsqrt, and\nsqrt is approximated as 1.0/rsqrt.  The port also uses rsqrt<mode>2\nfor the rsqrt pattern, so after the patch we now pick it up as a native\noperation.\n\nTwo other ports define rsqrt patterns: sh and v850.  AFAICT these\npatterns aren't currently used, but I think the patch does what the\nauthors of the patterns would have expected.  There's obviously some\nrisk of fallout though.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu, arm-linux-gnueabihf\n(as a target without the hooks) and powerpc64-linux-gnu.\n\ngcc/\n\t* internal-fn.def (RSQRT): New function.\n\t* optabs.def (rsqrt_optab): New optab.\n\t* doc/md.texi (rsqrtM2): Document.\n\t* target.def (builtin_reciprocal): Replace gcall argument with\n\ta function decl.  Restrict hook to machine functions.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.h (default_builtin_reciprocal): Update prototype.\n\t* targhooks.c (default_builtin_reciprocal): Likewise.\n\t* tree-ssa-math-opts.c: Include internal-fn.h.\n\t(internal_fn_reciprocal): New function.\n\t(pass_cse_reciprocals::execute): Call it, and build a call to an\n\tinternal function on success.  Only call targetm.builtin_reciprocal\n\tfor machine functions.\n\t* config/aarch64/aarch64-protos.h (aarch64_builtin_rsqrt): Remove\n\tsecond argument.\n\t* config/aarch64/aarch64-builtins.c (aarch64_expand_builtin_rsqrt):\n\tRename aarch64_rsqrt_<mode>2 to rsqrt<mode>2.\n\t(aarch64_builtin_rsqrt): Remove md_fn argument and only handle\n\tmachine functions.\n\t* config/aarch64/aarch64.c (use_rsqrt_p): New function.\n\t(aarch64_builtin_reciprocal): Replace gcall argument with a\n\tfunction decl.  Use use_rsqrt_p.  Remove optimize_size check.\n\tOnly handle machine functions.  Update call to aarch64_builtin_rsqrt.\n\t(aarch64_optab_supported_p): New function.\n\t(TARGET_OPTAB_SUPPORTED_P): Define.\n\t* config/aarch64/aarch64-simd.md (aarch64_rsqrt_<mode>2): Rename to...\n\t(rsqrt<mode>2): ...this.\n\t* config/i386/i386.c (use_rsqrt_p): New function.\n\t(ix86_builtin_reciprocal): Replace gcall argument with a\n\tfunction decl.  Use use_rsqrt_p.  Remove optimize_insn_for_size_p\n\tcheck.  Only handle machine functions.\n\t(ix86_optab_supported_p): Handle rsqrt_optab.\n\t* config/rs6000/rs6000.c (TARGET_OPTAB_SUPPORTED_P): Define.\n\t(rs6000_builtin_reciprocal): Replace gcall argument with a\n\tfunction decl.  Remove optimize_insn_for_size_p check.\n\tOnly handle machine functions.\n\t(rs6000_optab_supported_p): New function.\n\nFrom-SVN: r231229", "tree": {"sha": "cb751abc1ebee76113ef8fcecacea64963774dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb751abc1ebee76113ef8fcecacea64963774dfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee62a5a60299fdc12c884337dd36767fd2230ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee62a5a60299fdc12c884337dd36767fd2230ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee62a5a60299fdc12c884337dd36767fd2230ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee62a5a60299fdc12c884337dd36767fd2230ac0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47e16c6a6aed01dde2774a5490a3e5c7f97e9f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e16c6a6aed01dde2774a5490a3e5c7f97e9f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e16c6a6aed01dde2774a5490a3e5c7f97e9f92"}], "stats": {"total": 413, "additions": 228, "deletions": 185}, "files": [{"sha": "b2e43ff4bc79c0d9450524b7c2120363b1d72348", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -1,3 +1,43 @@\n+2015-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.def (RSQRT): New function.\n+\t* optabs.def (rsqrt_optab): New optab.\n+\t* doc/md.texi (rsqrtM2): Document.\n+\t* target.def (builtin_reciprocal): Replace gcall argument with\n+\ta function decl.  Restrict hook to machine functions.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (default_builtin_reciprocal): Update prototype.\n+\t* targhooks.c (default_builtin_reciprocal): Likewise.\n+\t* tree-ssa-math-opts.c: Include internal-fn.h.\n+\t(internal_fn_reciprocal): New function.\n+\t(pass_cse_reciprocals::execute): Call it, and build a call to an\n+\tinternal function on success.  Only call targetm.builtin_reciprocal\n+\tfor machine functions.\n+\t* config/aarch64/aarch64-protos.h (aarch64_builtin_rsqrt): Remove\n+\tsecond argument.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_expand_builtin_rsqrt):\n+\tRename aarch64_rsqrt_<mode>2 to rsqrt<mode>2.\n+\t(aarch64_builtin_rsqrt): Remove md_fn argument and only handle\n+\tmachine functions.\n+\t* config/aarch64/aarch64.c (use_rsqrt_p): New function.\n+\t(aarch64_builtin_reciprocal): Replace gcall argument with a\n+\tfunction decl.  Use use_rsqrt_p.  Remove optimize_size check.\n+\tOnly handle machine functions.  Update call to aarch64_builtin_rsqrt.\n+\t(aarch64_optab_supported_p): New function.\n+\t(TARGET_OPTAB_SUPPORTED_P): Define.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rsqrt_<mode>2): Rename to...\n+\t(rsqrt<mode>2): ...this.\n+\t* config/i386/i386.c (use_rsqrt_p): New function.\n+\t(ix86_builtin_reciprocal): Replace gcall argument with a\n+\tfunction decl.  Use use_rsqrt_p.  Remove optimize_insn_for_size_p\n+\tcheck.  Only handle machine functions.\n+\t(ix86_optab_supported_p): Handle rsqrt_optab.\n+\t* config/rs6000/rs6000.c (TARGET_OPTAB_SUPPORTED_P): Define.\n+\t(rs6000_builtin_reciprocal): Replace gcall argument with a\n+\tfunction decl.  Remove optimize_insn_for_size_p check.\n+\tOnly handle machine functions.\n+\t(rs6000_optab_supported_p): New function.\n+\n 2015-12-03  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR target/68471"}, {"sha": "b268a6aaf7cf453cc6af047de6d86cbf442188ac", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -1176,19 +1176,19 @@ aarch64_expand_builtin_rsqrt (int fcode, tree exp, rtx target)\n   switch (fcode)\n     {\n       case AARCH64_BUILTIN_RSQRT_DF:\n-\tgen = gen_aarch64_rsqrt_df2;\n+\tgen = gen_rsqrtdf2;\n \tbreak;\n       case AARCH64_BUILTIN_RSQRT_SF:\n-\tgen = gen_aarch64_rsqrt_sf2;\n+\tgen = gen_rsqrtsf2;\n \tbreak;\n       case AARCH64_BUILTIN_RSQRT_V2DF:\n-\tgen = gen_aarch64_rsqrt_v2df2;\n+\tgen = gen_rsqrtv2df2;\n \tbreak;\n       case AARCH64_BUILTIN_RSQRT_V2SF:\n-\tgen = gen_aarch64_rsqrt_v2sf2;\n+\tgen = gen_rsqrtv2sf2;\n \tbreak;\n       case AARCH64_BUILTIN_RSQRT_V4SF:\n-\tgen = gen_aarch64_rsqrt_v4sf2;\n+\tgen = gen_rsqrtv4sf2;\n \tbreak;\n       default: gcc_unreachable ();\n     }\n@@ -1405,24 +1405,14 @@ aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n /* Return builtin for reciprocal square root.  */\n \n tree\n-aarch64_builtin_rsqrt (unsigned int fn, bool md_fn)\n+aarch64_builtin_rsqrt (unsigned int fn)\n {\n-  if (md_fn)\n-    {\n-      if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv2df)\n-\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V2DF];\n-      if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv2sf)\n-\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V2SF];\n-      if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv4sf)\n-\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V4SF];\n-    }\n-  else\n-    {\n-      if (fn == BUILT_IN_SQRT)\n-\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_DF];\n-      if (fn == BUILT_IN_SQRTF)\n-\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_SF];\n-    }\n+  if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv2df)\n+    return aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V2DF];\n+  if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv2sf)\n+    return aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V2SF];\n+  if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv4sf)\n+    return aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V4SF];\n   return NULL_TREE;\n }\n "}, {"sha": "e6bfe06bc1534d6accb1ad0cd508050f2aa4af01", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -407,7 +407,7 @@ rtx aarch64_expand_builtin (tree exp,\n \t\t\t    int ignore ATTRIBUTE_UNUSED);\n tree aarch64_builtin_decl (unsigned, bool ATTRIBUTE_UNUSED);\n \n-tree aarch64_builtin_rsqrt (unsigned int, bool);\n+tree aarch64_builtin_rsqrt (unsigned int);\n \n tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);\n "}, {"sha": "030a1013caa8a965bcd1615c9686d0be715be921", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -399,7 +399,7 @@\n   \"frsqrts\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n   [(set_attr \"type\" \"neon_fp_rsqrts_<Vetype><q>\")])\n \n-(define_expand \"aarch64_rsqrt_<mode>2\"\n+(define_expand \"rsqrt<mode>2\"\n   [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n \t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")]\n \t\t     UNSPEC_RSQRT))]"}, {"sha": "88f3ef8c8e88f5beef4654478e0d5115f41efa06", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -7099,26 +7099,27 @@ aarch64_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n   return aarch64_tune_params.memmov_cost;\n }\n \n+/* Return true if it is safe and beneficial to use the rsqrt optabs to\n+   optimize 1.0/sqrt.  */\n+\n+static bool\n+use_rsqrt_p (void)\n+{\n+  return (!flag_trapping_math\n+\t  && flag_unsafe_math_optimizations\n+\t  && (aarch64_tune_params.extra_tuning_flags\n+\t      & AARCH64_EXTRA_TUNE_RECIP_SQRT));\n+}\n+\n /* Function to decide when to use\n    reciprocal square root builtins.  */\n \n static tree\n-aarch64_builtin_reciprocal (gcall *call)\n+aarch64_builtin_reciprocal (tree fndecl)\n {\n-  if (flag_trapping_math\n-      || !flag_unsafe_math_optimizations\n-      || optimize_size\n-      || ! (aarch64_tune_params.extra_tuning_flags\n-\t   & AARCH64_EXTRA_TUNE_RECIP_SQRT))\n+  if (!use_rsqrt_p ())\n     return NULL_TREE;\n-\n-  if (gimple_call_internal_p (call))\n-    return NULL_TREE;\n-\n-  tree fndecl = gimple_call_fndecl (call);\n-  enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n-  bool md_fn = DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD;\n-  return aarch64_builtin_rsqrt (fn, md_fn);\n+  return aarch64_builtin_rsqrt (DECL_FUNCTION_CODE (fndecl));\n }\n \n typedef rtx (*rsqrte_type) (rtx, rtx);\n@@ -13546,6 +13547,23 @@ aarch64_promoted_type (const_tree t)\n     return float_type_node;\n   return NULL_TREE;\n }\n+\n+/* Implement the TARGET_OPTAB_SUPPORTED_P hook.  */\n+\n+static bool\n+aarch64_optab_supported_p (int op, machine_mode, machine_mode,\n+\t\t\t   optimization_type opt_type)\n+{\n+  switch (op)\n+    {\n+    case rsqrt_optab:\n+      return opt_type == OPTIMIZE_FOR_SPEED && use_rsqrt_p ();\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n \n@@ -13866,6 +13884,9 @@ aarch64_promoted_type (const_tree t)\n #undef TARGET_PRINT_OPERAND_ADDRESS\n #define TARGET_PRINT_OPERAND_ADDRESS aarch64_print_operand_address\n \n+#undef TARGET_OPTAB_SUPPORTED_P\n+#define TARGET_OPTAB_SUPPORTED_P aarch64_optab_supported_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "cd44375556e9f787e4c1508a13ee17b8856d6ab2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 53, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -42676,66 +42676,36 @@ ix86_vectorize_builtin_scatter (const_tree vectype,\n   return ix86_builtins[code];\n }\n \n+/* Return true if it is safe to use the rsqrt optabs to optimize\n+   1.0/sqrt.  */\n+\n+static bool\n+use_rsqrt_p ()\n+{\n+  return (TARGET_SSE_MATH\n+\t  && flag_finite_math_only\n+\t  && !flag_trapping_math\n+\t  && flag_unsafe_math_optimizations);\n+}\n+\n /* Returns a code for a target-specific builtin that implements\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n static tree\n-ix86_builtin_reciprocal (gcall *call)\n+ix86_builtin_reciprocal (tree fndecl)\n {\n-  if (! (TARGET_SSE_MATH && !optimize_insn_for_size_p ()\n-\t && flag_finite_math_only && !flag_trapping_math\n-\t && flag_unsafe_math_optimizations))\n-    return NULL_TREE;\n-\n-  if (gimple_call_internal_p (call))\n-    switch (gimple_call_internal_fn (call))\n-      {\n-\ttree type;\n-      case IFN_SQRT:\n-\ttype = TREE_TYPE (gimple_call_lhs (call));\n-\tswitch (TYPE_MODE (type))\n-\t  {\n-\t    /* Vectorized version of sqrt to rsqrt conversion.  */\n-\t  case V4SFmode:\n-\t    return ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR);\n-\n-\t  case V8SFmode:\n-\t    return ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR256);\n-\n-\t  default:\n-\t    return NULL_TREE;\n-\t  }\n-\n-      default:\n-\treturn NULL_TREE;\n-      }\n-\n-  tree fndecl = gimple_call_fndecl (call);\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-    /* Machine dependent builtins.  */\n-    switch (DECL_FUNCTION_CODE (fndecl))\n-      {\n-\t/* Vectorized version of sqrt to rsqrt conversion.  */\n-      case IX86_BUILTIN_SQRTPS_NR:\n-\treturn ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR);\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+      /* Vectorized version of sqrt to rsqrt conversion.  */\n+    case IX86_BUILTIN_SQRTPS_NR:\n+      return ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR);\n \n-      case IX86_BUILTIN_SQRTPS_NR256:\n-\treturn ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR256);\n+    case IX86_BUILTIN_SQRTPS_NR256:\n+      return ix86_get_builtin (IX86_BUILTIN_RSQRTPS_NR256);\n \n-      default:\n-\treturn NULL_TREE;\n-      }\n-  else\n-    /* Normal builtins.  */\n-    switch (DECL_FUNCTION_CODE (fndecl))\n-      {\n-\t/* Sqrt to rsqrt conversion.  */\n-      case BUILT_IN_SQRTF:\n-\treturn ix86_get_builtin (IX86_BUILTIN_RSQRTF);\n-\n-      default:\n-\treturn NULL_TREE;\n-      }\n+    default:\n+      return NULL_TREE;\n+    }\n }\n \f\n /* Helper for avx_vpermilps256_operand et al.  This is also used by\n@@ -54139,6 +54109,9 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n \treturn true;\n       return opt_type == OPTIMIZE_FOR_SPEED;\n \n+    case rsqrt_optab:\n+      return opt_type == OPTIMIZE_FOR_SPEED && use_rsqrt_p ();\n+\n     default:\n       return true;\n     }"}, {"sha": "2b2c170d6e9c936a344c4aef0ce2d0e3761a3e0f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 31, "deletions": 64, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -1722,6 +1722,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_INVALID_BINARY_OP\n #define TARGET_INVALID_BINARY_OP rs6000_invalid_binary_op\n+\n+#undef TARGET_OPTAB_SUPPORTED_P\n+#define TARGET_OPTAB_SUPPORTED_P rs6000_optab_supported_p\n \f\n \n /* Processor table.  */\n@@ -32713,77 +32716,25 @@ rs6000_memory_move_cost (machine_mode mode, reg_class_t rclass,\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n static tree\n-rs6000_builtin_reciprocal (gcall *call)\n+rs6000_builtin_reciprocal (tree fndecl)\n {\n-  if (optimize_insn_for_size_p ())\n-    return NULL_TREE;\n-\n-  if (gimple_call_internal_p (call))\n-    switch (gimple_call_internal_fn (call))\n-      {\n-\ttree type;\n-      case IFN_SQRT:\n-\ttype = TREE_TYPE (gimple_call_lhs (call));\n-\tswitch (TYPE_MODE (type))\n-\t  {\n-\t  case V2DFmode:\n-\t    if (!RS6000_RECIP_AUTO_RSQRTE_P (V2DFmode))\n-\t      return NULL_TREE;\n-\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_RSQRT_2DF];\n-\n-\t  case V4SFmode:\n-\t    if (!RS6000_RECIP_AUTO_RSQRTE_P (V4SFmode))\n-\t      return NULL_TREE;\n-\n-\t    return rs6000_builtin_decls[VSX_BUILTIN_RSQRT_4SF];\n-\n-\t  default:\n-\t    return NULL_TREE;\n-\t  }\n-\n-      default:\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    case VSX_BUILTIN_XVSQRTDP:\n+      if (!RS6000_RECIP_AUTO_RSQRTE_P (V2DFmode))\n \treturn NULL_TREE;\n-      }\n-\n-  tree fndecl = gimple_call_fndecl (call);\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-    switch (DECL_FUNCTION_CODE (fndecl))\n-      {\n-      case VSX_BUILTIN_XVSQRTDP:\n-\tif (!RS6000_RECIP_AUTO_RSQRTE_P (V2DFmode))\n-\t  return NULL_TREE;\n-\n-\treturn rs6000_builtin_decls[VSX_BUILTIN_RSQRT_2DF];\n \n-      case VSX_BUILTIN_XVSQRTSP:\n-\tif (!RS6000_RECIP_AUTO_RSQRTE_P (V4SFmode))\n-\t  return NULL_TREE;\n+      return rs6000_builtin_decls[VSX_BUILTIN_RSQRT_2DF];\n \n-\treturn rs6000_builtin_decls[VSX_BUILTIN_RSQRT_4SF];\n-\n-      default:\n+    case VSX_BUILTIN_XVSQRTSP:\n+      if (!RS6000_RECIP_AUTO_RSQRTE_P (V4SFmode))\n \treturn NULL_TREE;\n-      }\n-\n-  else\n-    switch (DECL_FUNCTION_CODE (fndecl))\n-      {\n-      case BUILT_IN_SQRT:\n-\tif (!RS6000_RECIP_AUTO_RSQRTE_P (DFmode))\n-\t  return NULL_TREE;\n-\n-\treturn rs6000_builtin_decls[RS6000_BUILTIN_RSQRT];\n-\n-      case BUILT_IN_SQRTF:\n-\tif (!RS6000_RECIP_AUTO_RSQRTE_P (SFmode))\n-\t  return NULL_TREE;\n \n-\treturn rs6000_builtin_decls[RS6000_BUILTIN_RSQRTF];\n+      return rs6000_builtin_decls[VSX_BUILTIN_RSQRT_4SF];\n \n-      default:\n-\treturn NULL_TREE;\n-      }\n+    default:\n+      return NULL_TREE;\n+    }\n }\n \n /* Load up a constant.  If the mode is a vector mode, splat the value across\n@@ -38007,6 +37958,22 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n   *update = build2 (COMPOUND_EXPR, void_type_node, update_mffs, update_mtfsf);\n }\n \n+/* Implement the TARGET_OPTAB_SUPPORTED_P hook.  */\n+\n+static bool\n+rs6000_optab_supported_p (int op, machine_mode mode1, machine_mode,\n+\t\t\t  optimization_type opt_type)\n+{\n+  switch (op)\n+    {\n+    case rsqrt_optab:\n+      return (opt_type == OPTIMIZE_FOR_SPEED\n+\t      && RS6000_RECIP_AUTO_RSQRTE_P (mode1));\n+\n+    default:\n+      return true;\n+    }\n+}\n \f\n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "dcb3ee0c69bdbf9443c84585b6638ed265fd76eb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -5331,6 +5331,18 @@ corresponds to the C data type @code{double} and the @code{sqrtf}\n built-in function uses the mode which corresponds to the C data\n type @code{float}.\n \n+@cindex @code{rsqrt@var{m}2} instruction pattern\n+@item @samp{rsqrt@var{m}2}\n+Store the reciprocal of the square root of operand 1 into operand 0.\n+On most architectures this pattern is only approximate, so either\n+its C condition or the @code{TARGET_OPTAB_SUPPORTED_P} hook should\n+check for the appropriate math flags.  (Using the C condition is\n+more direct, but using @code{TARGET_OPTAB_SUPPORTED_P} can be useful\n+if a target-specific built-in also uses the @samp{rsqrt@var{m}2}\n+pattern.)\n+\n+This pattern is not allowed to @code{FAIL}.\n+\n @cindex @code{fmod@var{m}3} instruction pattern\n @item @samp{fmod@var{m}3}\n Store the remainder of dividing operand 1 by operand 2 into"}, {"sha": "1ce7181c3d4cb6f4d8479f2b172de97b4ee8b7ea", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -5608,9 +5608,9 @@ be placed in an @code{object_block} structure.\n The default version returns true for all decls.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_BUILTIN_RECIPROCAL (gcall *@var{call})\n-This hook should return the DECL of a function that implements reciprocal of\n-the builtin or internal function call @var{call}, or\n+@deftypefn {Target Hook} tree TARGET_BUILTIN_RECIPROCAL (tree @var{fndecl})\n+This hook should return the DECL of a function that implements the\n+reciprocal of the machine-specific builtin function @var{fndecl}, or\n @code{NULL_TREE} if such a function is not available.\n @end deftypefn\n "}, {"sha": "a9118b30b5af564bd0994611f499689720663ffe", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -91,6 +91,8 @@ DEF_INTERNAL_OPTAB_FN (LOAD_LANES, ECF_CONST, vec_load_lanes, load_lanes)\n DEF_INTERNAL_OPTAB_FN (MASK_STORE, 0, maskstore, mask_store)\n DEF_INTERNAL_OPTAB_FN (STORE_LANES, ECF_CONST, vec_store_lanes, store_lanes)\n \n+DEF_INTERNAL_OPTAB_FN (RSQRT, ECF_CONST, rsqrt, unary)\n+\n /* Unary math functions.  */\n DEF_INTERNAL_FLT_FN (ACOS, ECF_CONST, acos, unary)\n DEF_INTERNAL_FLT_FN (ASIN, ECF_CONST, asin, unary)"}, {"sha": "a19466e361129cb17aa8ca0445bf1ca1d2afdff6", "filename": "gcc/optabs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -267,6 +267,7 @@ OPTAB_D (log_optab, \"log$a2\")\n OPTAB_D (logb_optab, \"logb$a2\")\n OPTAB_D (pow_optab, \"pow$a3\")\n OPTAB_D (remainder_optab, \"remainder$a3\")\n+OPTAB_D (rsqrt_optab, \"rsqrt$a2\")\n OPTAB_D (scalb_optab, \"scalb$a3\")\n OPTAB_D (signbit_optab, \"signbit$F$a2\")\n OPTAB_D (significand_optab, \"significand$a2\")"}, {"sha": "d7543378fe71ca99f85cc3f98e45154b7ae13e01", "filename": "gcc/target.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -2459,13 +2459,13 @@ identical versions.\",\n  tree, (void *decl), NULL)\n \n /* Returns a code for a target-specific builtin that implements\n-   reciprocal of the function, or NULL_TREE if not available.  */\n+   reciprocal of a target-specific function, or NULL_TREE if not available.  */\n DEFHOOK\n (builtin_reciprocal,\n- \"This hook should return the DECL of a function that implements reciprocal of\\n\\\n-the builtin or internal function call @var{call}, or\\n\\\n+ \"This hook should return the DECL of a function that implements the\\n\\\n+reciprocal of the machine-specific builtin function @var{fndecl}, or\\n\\\n @code{NULL_TREE} if such a function is not available.\",\n- tree, (gcall *call),\n+ tree, (tree fndecl),\n  default_builtin_reciprocal)\n \n /* For a vendor-specific TYPE, return a pointer to a statically-allocated"}, {"sha": "dcf08631c402f25b7dcfb9f207cf02bcb622ff21", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -600,7 +600,7 @@ default_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n /* Reciprocal.  */\n \n tree\n-default_builtin_reciprocal (gcall *)\n+default_builtin_reciprocal (tree)\n {\n   return NULL_TREE;\n }"}, {"sha": "47b5cfc3b8bd591c8e8f4a2a82de690d1d8b4bde", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -90,7 +90,7 @@ extern tree default_builtin_vectorized_conversion (unsigned int, tree, tree);\n \n extern int default_builtin_vectorization_cost (enum vect_cost_for_stmt, tree, int);\n \n-extern tree default_builtin_reciprocal (gcall *);\n+extern tree default_builtin_reciprocal (tree);\n \n extern HOST_WIDE_INT default_vector_alignment (const_tree);\n "}, {"sha": "b00f046074b8b0b4322659725ce16c3c5328f669", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 58, "deletions": 21, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee62a5a60299fdc12c884337dd36767fd2230ac0/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ee62a5a60299fdc12c884337dd36767fd2230ac0", "patch": "@@ -110,6 +110,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"builtins.h\"\n #include \"params.h\"\n+#include \"internal-fn.h\"\n #include \"case-cfn-macros.h\"\n \n /* This structure represents one basic block that either computes a\n@@ -497,6 +498,31 @@ execute_cse_reciprocals_1 (gimple_stmt_iterator *def_gsi, tree def)\n   occ_head = NULL;\n }\n \n+/* Return an internal function that implements the reciprocal of CALL,\n+   or IFN_LAST if there is no such function that the target supports.  */\n+\n+internal_fn\n+internal_fn_reciprocal (gcall *call)\n+{\n+  internal_fn ifn;\n+\n+  switch (gimple_call_combined_fn (call))\n+    {\n+    CASE_CFN_SQRT:\n+      ifn = IFN_RSQRT;\n+      break;\n+\n+    default:\n+      return IFN_LAST;\n+    }\n+\n+  tree_pair types = direct_internal_fn_types (ifn, call);\n+  if (!direct_internal_fn_supported_p (ifn, types, OPTIMIZE_FOR_SPEED))\n+    return IFN_LAST;\n+\n+  return ifn;\n+}\n+\n /* Go through all the floating-point SSA_NAMEs, and call\n    execute_cse_reciprocals_1 on each of them.  */\n namespace {\n@@ -586,7 +612,6 @@ pass_cse_reciprocals::execute (function *fun)\n \t   gsi_next (&gsi))\n         {\n \t  gimple *stmt = gsi_stmt (gsi);\n-\t  tree fndecl;\n \n \t  if (is_gimple_assign (stmt)\n \t      && gimple_assign_rhs_code (stmt) == RDIV_EXPR)\n@@ -600,20 +625,25 @@ pass_cse_reciprocals::execute (function *fun)\n \t      stmt1 = SSA_NAME_DEF_STMT (arg1);\n \n \t      if (is_gimple_call (stmt1)\n-\t\t  && gimple_call_lhs (stmt1)\n-\t\t  && (gimple_call_internal_p (stmt1)\n-\t\t      || ((fndecl = gimple_call_fndecl (stmt1))\n-\t\t\t  && (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t\t\t      || (DECL_BUILT_IN_CLASS (fndecl)\n-\t\t\t\t  == BUILT_IN_MD)))))\n+\t\t  && gimple_call_lhs (stmt1))\n \t\t{\n \t\t  bool fail;\n \t\t  imm_use_iterator ui;\n \t\t  use_operand_p use_p;\n+\t\t  tree fndecl = NULL_TREE;\n \n-\t\t  fndecl = targetm.builtin_reciprocal (as_a <gcall *> (stmt1));\n-\t\t  if (!fndecl)\n-\t\t    continue;\n+\t\t  gcall *call = as_a <gcall *> (stmt1);\n+\t\t  internal_fn ifn = internal_fn_reciprocal (call);\n+\t\t  if (ifn == IFN_LAST)\n+\t\t    {\n+\t\t      fndecl = gimple_call_fndecl (call);\n+\t\t      if (!fndecl\n+\t\t\t  || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_MD)\n+\t\t\tcontinue;\n+\t\t      fndecl = targetm.builtin_reciprocal (fndecl);\n+\t\t      if (!fndecl)\n+\t\t\tcontinue;\n+\t\t    }\n \n \t\t  /* Check that all uses of the SSA name are divisions,\n \t\t     otherwise replacing the defining statement will do\n@@ -636,28 +666,35 @@ pass_cse_reciprocals::execute (function *fun)\n \t\t  if (fail)\n \t\t    continue;\n \n-\t\t  gimple_replace_ssa_lhs (stmt1, arg1);\n-\t\t  if (gimple_call_internal_p (stmt1))\n+\t\t  gimple_replace_ssa_lhs (call, arg1);\n+\t\t  if (gimple_call_internal_p (call) != (ifn != IFN_LAST))\n \t\t    {\n \t\t      auto_vec<tree, 4> args;\n \t\t      for (unsigned int i = 0;\n-\t\t\t   i < gimple_call_num_args (stmt1); i++)\n-\t\t\targs.safe_push (gimple_call_arg (stmt1, i));\n-\t\t      gcall *stmt2 = gimple_build_call_vec (fndecl, args);\n+\t\t\t   i < gimple_call_num_args (call); i++)\n+\t\t\targs.safe_push (gimple_call_arg (call, i));\n+\t\t      gcall *stmt2;\n+\t\t      if (ifn == IFN_LAST)\n+\t\t\tstmt2 = gimple_build_call_vec (fndecl, args);\n+\t\t      else\n+\t\t\tstmt2 = gimple_build_call_internal_vec (ifn, args);\n \t\t      gimple_call_set_lhs (stmt2, arg1);\n-\t\t      if (gimple_vdef (stmt1))\n+\t\t      if (gimple_vdef (call))\n \t\t\t{\n-\t\t\t  gimple_set_vdef (stmt2, gimple_vdef (stmt1));\n+\t\t\t  gimple_set_vdef (stmt2, gimple_vdef (call));\n \t\t\t  SSA_NAME_DEF_STMT (gimple_vdef (stmt2)) = stmt2;\n \t\t\t}\n-\t\t      gimple_set_vuse (stmt2, gimple_vuse (stmt1));\n-\t\t      gimple_stmt_iterator gsi2 = gsi_for_stmt (stmt1);\n+\t\t      gimple_set_vuse (stmt2, gimple_vuse (call));\n+\t\t      gimple_stmt_iterator gsi2 = gsi_for_stmt (call);\n \t\t      gsi_replace (&gsi2, stmt2, true);\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      gimple_call_set_fndecl (stmt1, fndecl);\n-\t\t      update_stmt (stmt1);\n+\t\t      if (ifn == IFN_LAST)\n+\t\t\tgimple_call_set_fndecl (call, fndecl);\n+\t\t      else\n+\t\t\tgimple_call_set_internal_fn (call, ifn);\n+\t\t      update_stmt (call);\n \t\t    }\n \t\t  reciprocal_stats.rfuncs_inserted++;\n "}]}