{"sha": "42eff613d0c10f88dc7a44b14981876401a09981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJlZmY2MTNkMGMxMGY4OGRjN2E0NGIxNDk4MTg3NjQwMWEwOTk4MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-17T11:28:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-17T19:43:34Z"}, "message": "libstdc++: Add 'noexcept' to path::iterator members\n\nAll path::iterator operations are non-throwing.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/fs_path.h (path::iterator): Add noexcept to all\n\tmember functions and friend functions.\n\t(distance): Add noexcept.\n\t(advance): Add noexcept and inline.\n\t* include/experimental/bits/fs_path.h (path::iterator):\n\tAdd noexcept to all member functions.", "tree": {"sha": "91f12bb0a71483c788058ed74bb572f47fa85262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91f12bb0a71483c788058ed74bb572f47fa85262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42eff613d0c10f88dc7a44b14981876401a09981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42eff613d0c10f88dc7a44b14981876401a09981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42eff613d0c10f88dc7a44b14981876401a09981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42eff613d0c10f88dc7a44b14981876401a09981/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa2c5a695bb962ffcf8abed49f69cdcc59d0e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa2c5a695bb962ffcf8abed49f69cdcc59d0e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa2c5a695bb962ffcf8abed49f69cdcc59d0e61"}], "stats": {"total": 104, "additions": 60, "deletions": 44}, "files": [{"sha": "92f7cbbe3577d3181b526bb72b663d6f0b58d9f9", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42eff613d0c10f88dc7a44b14981876401a09981/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42eff613d0c10f88dc7a44b14981876401a09981/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=42eff613d0c10f88dc7a44b14981876401a09981", "patch": "@@ -884,33 +884,42 @@ namespace __detail\n     using pointer\t\t= const path*;\n     using iterator_category\t= std::bidirectional_iterator_tag;\n \n-    iterator() : _M_path(nullptr), _M_cur(), _M_at_end() { }\n+    iterator() noexcept : _M_path(nullptr), _M_cur(), _M_at_end() { }\n \n     iterator(const iterator&) = default;\n     iterator& operator=(const iterator&) = default;\n \n-    reference operator*() const;\n-    pointer   operator->() const { return std::__addressof(**this); }\n+    reference operator*() const noexcept;\n+    pointer   operator->() const noexcept { return std::__addressof(**this); }\n \n-    iterator& operator++();\n-    iterator  operator++(int) { auto __tmp = *this; ++*this; return __tmp; }\n+    iterator& operator++() noexcept;\n \n-    iterator& operator--();\n-    iterator  operator--(int) { auto __tmp = *this; --*this; return __tmp; }\n+    iterator  operator++(int) noexcept\n+    { auto __tmp = *this; ++*this; return __tmp; }\n \n-    friend bool operator==(const iterator& __lhs, const iterator& __rhs)\n+    iterator& operator--() noexcept;\n+\n+    iterator  operator--(int) noexcept\n+    { auto __tmp = *this; --*this; return __tmp; }\n+\n+    friend bool\n+    operator==(const iterator& __lhs, const iterator& __rhs) noexcept\n     { return __lhs._M_equals(__rhs); }\n \n-    friend bool operator!=(const iterator& __lhs, const iterator& __rhs)\n+    friend bool\n+    operator!=(const iterator& __lhs, const iterator& __rhs) noexcept\n     { return !__lhs._M_equals(__rhs); }\n \n   private:\n     friend class path;\n \n-    bool _M_is_multi() const { return _M_path->_M_type() == _Type::_Multi; }\n+    bool\n+    _M_is_multi() const noexcept\n+    { return _M_path->_M_type() == _Type::_Multi; }\n \n     friend difference_type\n     __path_iter_distance(const iterator& __first, const iterator& __last)\n+    noexcept\n     {\n       __glibcxx_assert(__first._M_path != nullptr);\n       __glibcxx_assert(__first._M_path == __last._M_path);\n@@ -923,7 +932,7 @@ namespace __detail\n     }\n \n     friend void\n-    __path_iter_advance(iterator& __i, difference_type __n)\n+    __path_iter_advance(iterator& __i, difference_type __n) noexcept\n     {\n       if (__n == 1)\n \t++__i;\n@@ -938,15 +947,15 @@ namespace __detail\n \t}\n     }\n \n-    iterator(const path* __path, path::_List::const_iterator __iter)\n+    iterator(const path* __path, path::_List::const_iterator __iter) noexcept\n     : _M_path(__path), _M_cur(__iter), _M_at_end()\n     { }\n \n-    iterator(const path* __path, bool __at_end)\n+    iterator(const path* __path, bool __at_end) noexcept\n     : _M_path(__path), _M_cur(), _M_at_end(__at_end)\n     { }\n \n-    bool _M_equals(iterator) const;\n+    bool _M_equals(iterator) const noexcept;\n \n     const path* \t\t_M_path;\n     path::_List::const_iterator _M_cur;\n@@ -1266,26 +1275,26 @@ namespace __detail\n   }\n \n   inline path::iterator\n-  path::begin() const\n+  path::begin() const noexcept\n   {\n     if (_M_type() == _Type::_Multi)\n       return iterator(this, _M_cmpts.begin());\n     return iterator(this, empty());\n   }\n \n   inline path::iterator\n-  path::end() const\n+  path::end() const noexcept\n   {\n     if (_M_type() == _Type::_Multi)\n       return iterator(this, _M_cmpts.end());\n     return iterator(this, true);\n   }\n \n   inline path::iterator&\n-  path::iterator::operator++()\n+  path::iterator::operator++() noexcept\n   {\n     __glibcxx_assert(_M_path != nullptr);\n-    if (_M_path->_M_type() == _Type::_Multi)\n+    if (_M_is_multi())\n       {\n \t__glibcxx_assert(_M_cur != _M_path->_M_cmpts.end());\n \t++_M_cur;\n@@ -1299,10 +1308,10 @@ namespace __detail\n   }\n \n   inline path::iterator&\n-  path::iterator::operator--()\n+  path::iterator::operator--() noexcept\n   {\n     __glibcxx_assert(_M_path != nullptr);\n-    if (_M_path->_M_type() == _Type::_Multi)\n+    if (_M_is_multi())\n       {\n \t__glibcxx_assert(_M_cur != _M_path->_M_cmpts.begin());\n \t--_M_cur;\n@@ -1316,10 +1325,10 @@ namespace __detail\n   }\n \n   inline path::iterator::reference\n-  path::iterator::operator*() const\n+  path::iterator::operator*() const noexcept\n   {\n     __glibcxx_assert(_M_path != nullptr);\n-    if (_M_path->_M_type() == _Type::_Multi)\n+    if (_M_is_multi())\n       {\n \t__glibcxx_assert(_M_cur != _M_path->_M_cmpts.end());\n \treturn *_M_cur;\n@@ -1328,13 +1337,13 @@ namespace __detail\n   }\n \n   inline bool\n-  path::iterator::_M_equals(iterator __rhs) const\n+  path::iterator::_M_equals(iterator __rhs) const noexcept\n   {\n     if (_M_path != __rhs._M_path)\n       return false;\n     if (_M_path == nullptr)\n       return true;\n-    if (_M_path->_M_type() == path::_Type::_Multi)\n+    if (_M_is_multi())\n       return _M_cur == __rhs._M_cur;\n     return _M_at_end == __rhs._M_at_end;\n   }\n@@ -1355,11 +1364,12 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n inline ptrdiff_t\n distance(filesystem::path::iterator __first, filesystem::path::iterator __last)\n+noexcept\n { return __path_iter_distance(__first, __last); }\n \n template<typename _Distance>\n-  void\n-  advance(filesystem::path::iterator& __i, _Distance __n)\n+  inline void\n+  advance(filesystem::path::iterator& __i, _Distance __n) noexcept\n   { __path_iter_advance(__i, static_cast<ptrdiff_t>(__n)); }\n \n extern template class __shared_ptr<const filesystem::filesystem_error::_Impl>;"}, {"sha": "b26b84c37ab297f94a89a7671a8096aaf185d938", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42eff613d0c10f88dc7a44b14981876401a09981/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42eff613d0c10f88dc7a44b14981876401a09981/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=42eff613d0c10f88dc7a44b14981876401a09981", "patch": "@@ -864,38 +864,44 @@ namespace __detail\n     using pointer\t\t= const path*;\n     using iterator_category\t= std::bidirectional_iterator_tag;\n \n-    iterator() : _M_path(nullptr), _M_cur(), _M_at_end() { }\n+    iterator() noexcept : _M_path(nullptr), _M_cur(), _M_at_end() { }\n \n     iterator(const iterator&) = default;\n     iterator& operator=(const iterator&) = default;\n \n-    reference operator*() const;\n-    pointer   operator->() const { return std::__addressof(**this); }\n+    reference operator*() const noexcept;\n+    pointer   operator->() const noexcept { return std::__addressof(**this); }\n \n-    iterator& operator++();\n-    iterator  operator++(int) { auto __tmp = *this; ++*this; return __tmp; }\n+    iterator& operator++() noexcept;\n \n-    iterator& operator--();\n-    iterator  operator--(int) { auto __tmp = *this; --*this; return __tmp; }\n+    iterator  operator++(int) noexcept\n+    { auto __tmp = *this; ++*this; return __tmp; }\n \n-    friend bool operator==(const iterator& __lhs, const iterator& __rhs)\n+    iterator& operator--() noexcept;\n+\n+    iterator  operator--(int) noexcept\n+    { auto __tmp = *this; --*this; return __tmp; }\n+\n+    friend bool\n+    operator==(const iterator& __lhs, const iterator& __rhs) noexcept\n     { return __lhs._M_equals(__rhs); }\n \n-    friend bool operator!=(const iterator& __lhs, const iterator& __rhs)\n+    friend bool\n+    operator!=(const iterator& __lhs, const iterator& __rhs) noexcept\n     { return !__lhs._M_equals(__rhs); }\n \n   private:\n     friend class path;\n \n-    iterator(const path* __path, path::_List::const_iterator __iter)\n+    iterator(const path* __path, path::_List::const_iterator __iter) noexcept\n     : _M_path(__path), _M_cur(__iter), _M_at_end()\n     { }\n \n-    iterator(const path* __path, bool __at_end)\n+    iterator(const path* __path, bool __at_end) noexcept\n     : _M_path(__path), _M_cur(), _M_at_end(__at_end)\n     { }\n \n-    bool _M_equals(iterator) const;\n+    bool _M_equals(iterator) const noexcept;\n \n     const path* \t\t_M_path;\n     path::_List::const_iterator _M_cur;\n@@ -1206,23 +1212,23 @@ namespace __detail\n   }\n \n   inline path::iterator\n-  path::begin() const\n+  path::begin() const noexcept\n   {\n     if (_M_type == _Type::_Multi)\n       return iterator(this, _M_cmpts.begin());\n     return iterator(this, false);\n   }\n \n   inline path::iterator\n-  path::end() const\n+  path::end() const noexcept\n   {\n     if (_M_type == _Type::_Multi)\n       return iterator(this, _M_cmpts.end());\n     return iterator(this, true);\n   }\n \n   inline path::iterator&\n-  path::iterator::operator++()\n+  path::iterator::operator++() noexcept\n   {\n     __glibcxx_assert(_M_path != nullptr);\n     if (_M_path->_M_type == _Type::_Multi)\n@@ -1239,7 +1245,7 @@ namespace __detail\n   }\n \n   inline path::iterator&\n-  path::iterator::operator--()\n+  path::iterator::operator--() noexcept\n   {\n     __glibcxx_assert(_M_path != nullptr);\n     if (_M_path->_M_type == _Type::_Multi)\n@@ -1256,7 +1262,7 @@ namespace __detail\n   }\n \n   inline path::iterator::reference\n-  path::iterator::operator*() const\n+  path::iterator::operator*() const noexcept\n   {\n     __glibcxx_assert(_M_path != nullptr);\n     if (_M_path->_M_type == _Type::_Multi)\n@@ -1268,7 +1274,7 @@ namespace __detail\n   }\n \n   inline bool\n-  path::iterator::_M_equals(iterator __rhs) const\n+  path::iterator::_M_equals(iterator __rhs) const noexcept\n   {\n     if (_M_path != __rhs._M_path)\n       return false;"}]}