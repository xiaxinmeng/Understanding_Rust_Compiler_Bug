{"sha": "19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkYjc3Y2VmZWMzOGExYTBhM2ViNjkwMDdmMDFlOGExYzEwOGQ1ZA==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-08-23T12:53:48Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-08-23T12:53:48Z"}, "message": "PR c++/641, c++/11876\n\n\tPR c++/641, c++/11876\n\t* friend.c (add_friend): Add complain parameter.\n\t(make_friend_class): Likewise.\n\t(do_friend): Adjust add_friend call.\n\t* decl.c (grokdeclarator): Adjust make_friend_class call.\n\t* parser.c (cp_parser_member_declaration): Likewise.\n\t(cp_parser_template_declaration_after_exp): Likewise.\n\t* pt.c (instantiate_class_template): Adjust make_friend_class\n\tand add_friend call.\n\t* cp-tree.h (make_friend_class): Adjust declaration.\n\t(add_friend): Likewise.\n\n\t* g++.dg/template/friend22.C: New test.\n\t* g++.dg/template/friend23.C: Likewise.\n\nFrom-SVN: r70732", "tree": {"sha": "ecb689f7b3c2f693d19580d30f4517483bf94220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb689f7b3c2f693d19580d30f4517483bf94220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/comments", "author": null, "committer": null, "parents": [{"sha": "fe232263197821a4e018211df9adbe9e026da247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe232263197821a4e018211df9adbe9e026da247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe232263197821a4e018211df9adbe9e026da247"}], "stats": {"total": 141, "additions": 117, "deletions": 24}, "files": [{"sha": "ad2cdbc23875f2a879aabf9f7a3d1ad9b395685e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -1,3 +1,17 @@\n+2003-08-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/641, c++/11876\n+\t* friend.c (add_friend): Add complain parameter.\n+\t(make_friend_class): Likewise.\n+\t(do_friend): Adjust add_friend call.\n+\t* decl.c (grokdeclarator): Adjust make_friend_class call.\n+\t* parser.c (cp_parser_member_declaration): Likewise.\n+\t(cp_parser_template_declaration_after_exp): Likewise.\n+\t* pt.c (instantiate_class_template): Adjust make_friend_class\n+\tand add_friend call.\n+\t* cp-tree.h (make_friend_class): Adjust declaration.\n+\t(add_friend): Likewise.\n+\n 2003-08-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/11283"}, {"sha": "025277e6fae3b3db48f17864b06070d19d32fa59", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -3840,8 +3840,8 @@ extern tree cplus_expand_constant               (tree);\n \n /* friend.c */\n extern int is_friend\t\t\t\t(tree, tree);\n-extern void make_friend_class\t\t\t(tree, tree);\n-extern void add_friend                          (tree, tree);\n+extern void make_friend_class\t\t\t(tree, tree, bool);\n+extern void add_friend                          (tree, tree, bool);\n extern tree do_friend\t\t\t\t(tree, tree, tree, tree, tree, enum overload_flags, tree, int);\n \n /* in init.c */"}, {"sha": "dc3495f42ef1cce328f3ae647119fd30d5be4001", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -11252,7 +11252,8 @@ grokdeclarator (tree declarator,\n \t    {\n \t      /* A friendly class?  */\n \t      if (current_class_type)\n-\t\tmake_friend_class (current_class_type, TYPE_MAIN_VARIANT (type));\n+\t\tmake_friend_class (current_class_type, TYPE_MAIN_VARIANT (type),\n+\t\t\t\t   /*complain=*/true);\n \t      else\n \t\terror (\"trying to make class `%T' a friend of global scope\",\n \t\t          type);"}, {"sha": "1b3d4b462333199a8120a3b72af2e8a28c5888ef", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -127,10 +127,14 @@ is_friend (tree type, tree supplicant)\n }\n \n /* Add a new friend to the friends of the aggregate type TYPE.\n-   DECL is the FUNCTION_DECL of the friend being added.  */\n+   DECL is the FUNCTION_DECL of the friend being added.\n+\n+   If COMPLAIN is true, warning about duplicate friend is issued.\n+   We want to have this diagnostics during parsing but not\n+   when a template is being instantiated.  */\n \n void\n-add_friend (tree type, tree decl)\n+add_friend (tree type, tree decl, bool complain)\n {\n   tree typedecl;\n   tree list;\n@@ -153,10 +157,13 @@ add_friend (tree type, tree decl)\n \t    {\n \t      if (decl == TREE_VALUE (friends))\n \t\t{\n-\t\t  warning (\"`%D' is already a friend of class `%T'\",\n-\t\t\t      decl, type);\n-\t\t  cp_warning_at (\"previous friend declaration of `%D'\",\n-\t\t\t\t TREE_VALUE (friends));\n+\t\t  if (complain)\n+\t\t    {\n+\t\t      warning (\"`%D' is already a friend of class `%T'\",\n+\t\t\t       decl, type);\n+\t\t      cp_warning_at (\"previous friend declaration of `%D'\",\n+\t\t\t\t     TREE_VALUE (friends));\n+\t\t    }\n \t\t  return;\n \t\t}\n \t    }\n@@ -192,10 +199,14 @@ add_friend (tree type, tree decl)\n    classes that are not defined.  If a type has not yet been defined,\n    then the DECL_WAITING_FRIENDS contains a list of types\n    waiting to make it their friend.  Note that these two can both\n-   be in use at the same time!  */\n+   be in use at the same time!\n+\n+   If COMPLAIN is true, warning about duplicate friend is issued.\n+   We want to have this diagnostics during parsing but not\n+   when a template is being instantiated.  */\n \n void\n-make_friend_class (tree type, tree friend_type)\n+make_friend_class (tree type, tree friend_type, bool complain)\n {\n   tree classes;\n   int is_template_friend;\n@@ -227,8 +238,9 @@ make_friend_class (tree type, tree friend_type)\n     }\n   else if (same_type_p (type, friend_type))\n     {\n-      pedwarn (\"class `%T' is implicitly friends with itself\",\n-\t          type);\n+      if (complain)\n+\tpedwarn (\"class `%T' is implicitly friends with itself\",\n+\t\t type);\n       return;\n     }\n   else\n@@ -275,17 +287,19 @@ make_friend_class (tree type, tree friend_type)\n \t{\n \t  if (friend_type == probe)\n \t    {\n-\t      warning (\"`%D' is already a friend of `%T'\",\n-\t\t       probe, type);\n+\t      if (complain)\n+\t\twarning (\"`%D' is already a friend of `%T'\",\n+\t\t\t probe, type);\n \t      break;\n \t    }\n \t}\n       else if (TREE_CODE (probe) != TEMPLATE_DECL)\n \t{\n \t  if (same_type_p (probe, friend_type))\n \t    {\n-\t      warning (\"`%T' is already a friend of `%T'\",\n-\t\t       probe, type);\n+\t      if (complain)\n+\t\twarning (\"`%T' is already a friend of `%T'\",\n+\t\t\t probe, type);\n \t      break;\n \t    }\n \t}\n@@ -369,7 +383,7 @@ do_friend (tree ctype, tree declarator, tree decl, tree parmdecls,\n \t parameters.  Instead, we rely on tsubst_friend_function\n \t to check the validity of the declaration later.  */\n       if (processing_template_decl)\n-\tadd_friend (current_class_type, decl);\n+\tadd_friend (current_class_type, decl, /*complain=*/true);\n       /* A nested class may declare a member of an enclosing class\n \t to be a friend, so we do lookup here even if CTYPE is in\n \t the process of being defined.  */\n@@ -378,7 +392,7 @@ do_friend (tree ctype, tree declarator, tree decl, tree parmdecls,\n \t  decl = check_classfn (ctype, decl);\n \n \t  if (decl)\n-\t    add_friend (current_class_type, decl);\n+\t    add_friend (current_class_type, decl, /*complain=*/true);\n \t}\n       else\n \terror (\"member `%D' declared as friend before type `%T' defined\",\n@@ -446,7 +460,8 @@ do_friend (tree ctype, tree declarator, tree decl, tree parmdecls,\n \t}\n \n       add_friend (current_class_type, \n-\t\t  is_friend_template ? DECL_TI_TEMPLATE (decl) : decl);\n+\t\t  is_friend_template ? DECL_TI_TEMPLATE (decl) : decl,\n+\t\t  /*complain=*/true);\n       DECL_FRIEND_P (decl) = 1;\n     }\n "}, {"sha": "1fb1a5104108fad9e904abb5a49d6a976f717397", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -11840,7 +11840,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t error (\"friend declaration does not name a class or \"\n \t\t\t\"function\");\n \t       else\n-\t\t make_friend_class (current_class_type, type);\n+\t\t make_friend_class (current_class_type, type,\n+\t\t\t\t    /*complain=*/true);\n \t    }\n \t  /* If there is no TYPE, an error message will already have\n \t     been issued.  */\n@@ -13636,7 +13637,8 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n       if (member_p && !friend_p && decl)\n \tdecl = finish_member_template_decl (decl);\n       else if (friend_p && decl && TREE_CODE (decl) == TYPE_DECL)\n-\tmake_friend_class (current_class_type, TREE_TYPE (decl));\n+\tmake_friend_class (current_class_type, TREE_TYPE (decl),\n+\t\t\t   /*complain=*/true);\n     }\n   /* We are done with the current parameter list.  */\n   --parser->num_template_parameter_lists;"}, {"sha": "d6ea8cc82033fea6d91216f785d369f3adc34ea7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -5381,14 +5381,16 @@ instantiate_class_template (tree type)\n \t\t++processing_template_decl;\n \n \t      if (new_friend_type != error_mark_node)\n-\t        make_friend_class (type, new_friend_type);\n+\t        make_friend_class (type, new_friend_type,\n+\t\t\t\t   /*complain=*/false);\n \n \t      if (TREE_CODE (friend_type) == TEMPLATE_DECL)\n \t\t--processing_template_decl;\n \t    }\n \t  else\n \t    /* Build new DECL_FRIENDLIST.  */\n-\t    add_friend (type, tsubst_friend_function (t, args));\n+\t    add_friend (type, tsubst_friend_function (t, args),\n+\t\t\t/*complain=*/false);\n \t}\n     }\n "}, {"sha": "c25f750b5b66b6911c2269d115c16a766942e71d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -1,3 +1,9 @@\n+2003-08-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/641, c++/11876\n+\t* g++.dg/template/friend22.C: New test.\n+\t* g++.dg/template/friend23.C: Likewise.\n+\n 2003-08-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.misc-tests/linkage.exp: Treat all HP-UX platforms"}, {"sha": "41a73bbb4aeda02d7ef28abef304ddd4990cf417", "filename": "gcc/testsuite/g++.dg/template/friend22.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend22.C?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+\n+// Origin: Benoit Hudson <bh@techhouse.brown.edu>\n+\n+// PR c++/641: Duplicate friend diagnostics\n+\n+template <class T> class iterator { };\n+template <class T> class item {\n+    friend class iterator<T>;\n+    friend class iterator<const T>;\n+};\n+\n+class A { };\n+\n+item<const A> i;"}, {"sha": "96f8125b68ab72aeb560ad35b3d72e9177901abf", "filename": "gcc/testsuite/g++.dg/template/friend23.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db77cefec38a1a0a3eb69007f01e8a1c108d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend23.C?ref=19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+\n+// Origin: Alexandre Tolmos <ktulu@free.fr>\n+\n+// PR c++/11876: Friend of its own class diagnostics\n+\n+template <typename T>\n+class A\n+{\n+\tfriend class A<int>;\n+\tfriend class A<float>;\n+protected:\n+\tT _data;\n+\tinline A() : _data(0) {}\n+\ttemplate <typename U>\n+\tinline A(const A<U>& r) : _data(r._data) {}\n+};\n+\n+class B : public A<int>\n+{\n+public:\n+\tinline B() {}\n+\tinline B(const B& r) : A<int>(r) {}\n+};\n+\n+class C : public A<float>\n+{\n+public:\n+\tinline C() {}\n+\tinline C(const B& r) : A<float>(r) {}\n+};\n+\n+int main(int, char*[])\n+{\n+\tB b1, b2(b1);\n+\tC c(b1);\n+\treturn 0;\n+}"}]}