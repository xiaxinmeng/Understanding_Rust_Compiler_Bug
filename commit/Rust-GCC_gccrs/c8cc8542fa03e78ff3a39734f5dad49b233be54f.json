{"sha": "c8cc8542fa03e78ff3a39734f5dad49b233be54f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjYzg1NDJmYTAzZTc4ZmYzYTM5NzM0ZjVkYWQ0OWIyMzNiZTU0Zg==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-09-07T14:43:37Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-09-07T14:43:37Z"}, "message": "error.c (show_locus): Handle mapped locations.\n\n2004-09-07  Per Bothner  <per@bothner.com>\n\tPaul Brook  <paul@codesourcery.com>\n\n\t* error.c (show_locus): Handle mapped locations.\n\t* f95-lang.c (gfc_be_parse_file): Initialize mapped locations.\n\t* gfortran.h: Include input.h.\n\t(struct gfc_linebuf): Use source_location.\n\t* scanner.c (get_file): Initialize linemap.\n\t(preprocessor_line): Pass extra argument to get_file.\n\t(load_file): Ditto.  Setup linemap.\n\t(gfc_new_file): Handle mapped locations.\n\t* trans-common.c (build_field, build_equiv_decl, build_common_decl):\n\tSet decl source locations.\n\t(gfc_trans_common): Set blank common block location.\n\t* trans-decl.c (gfc_set_decl_location): New function.\n\t(gfc_get_label_decl, gfc_get_symbol_decl): Use it.\n\t(trans_function_start): Move call to gfc_set_backend_locus..\n\t(build_function_decl): ... to here.\n\t(build_entry_thunks): Set and restore the backend locus.\n\t(gfc_generate_constructors): Remove excess arguments to\n\tinit_function_start.\n\t(gfc_generate_block_data): Add comments.  Set the decl locus.\n\t* trans-io.c (set_error_locus): Handle mapped locations.\n\t* trans.c (gfc_get_backend_locus, gfc_get_backend_locus): Ditto.\n\t(gfc_trans_code): Use SET_EXPR_LOCATION.\n\t(gfc_generate_code): Override the location of the new symbol.\n\t* trans.h (gfc_set_decl_location): Add prototype.\n\nCo-Authored-By: Paul Brook <paul@codesourcery.com>\n\nFrom-SVN: r87142", "tree": {"sha": "52dd9f205592562d8c793717e022109001b07465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52dd9f205592562d8c793717e022109001b07465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cc8542fa03e78ff3a39734f5dad49b233be54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cc8542fa03e78ff3a39734f5dad49b233be54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cc8542fa03e78ff3a39734f5dad49b233be54f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cc8542fa03e78ff3a39734f5dad49b233be54f/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5212068fdf32944f8a35909cd5e9eb8d420fbc76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5212068fdf32944f8a35909cd5e9eb8d420fbc76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5212068fdf32944f8a35909cd5e9eb8d420fbc76"}], "stats": {"total": 149, "additions": 133, "deletions": 16}, "files": [{"sha": "b8572d87001d7babfbae8ae291b9c7734e8b8d3d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -1,3 +1,31 @@\n+2004-09-07  Per Bothner  <per@bothner.com>\n+\tPaul Brook  <paul@codesourcery.com>\n+\n+\t* error.c (show_locus): Handle mapped locations.\n+\t* f95-lang.c (gfc_be_parse_file): Initialize mapped locations.\n+\t* gfortran.h: Include input.h.\n+\t(struct gfc_linebuf): Use source_location.\n+\t* scanner.c (get_file): Initialize linemap.\n+\t(preprocessor_line): Pass extra argument to get_file.\n+\t(load_file): Ditto.  Setup linemap.\n+\t(gfc_new_file): Handle mapped locations.\n+\t* trans-common.c (build_field, build_equiv_decl, build_common_decl):\n+\tSet decl source locations.\n+\t(gfc_trans_common): Set blank common block location.\n+\t* trans-decl.c (gfc_set_decl_location): New function.\n+\t(gfc_get_label_decl, gfc_get_symbol_decl): Use it.\n+\t(trans_function_start): Move call to gfc_set_backend_locus..\n+\t(build_function_decl): ... to here.\n+\t(build_entry_thunks): Set and restore the backend locus.\n+\t(gfc_generate_constructors): Remove excess arguments to\n+\tinit_function_start.\n+\t(gfc_generate_block_data): Add comments.  Set the decl locus.\n+\t* trans-io.c (set_error_locus): Handle mapped locations.\n+\t* trans.c (gfc_get_backend_locus, gfc_get_backend_locus): Ditto.\n+\t(gfc_trans_code): Use SET_EXPR_LOCATION.\n+\t(gfc_generate_code): Override the location of the new symbol.\n+\t* trans.h (gfc_set_decl_location): Add prototype.\n+\n 2004-08-31  Paul Brook  <paul@codesourcery.com>\n \n \t* trans-types.c (gfc_type_for_mode): Return NULL for unknown modes."}, {"sha": "3c0d5c891eed35a185b15f77851cb3d6314f15d4", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -127,7 +127,13 @@ show_locus (int offset, locus * loc)\n \n   lb = loc->lb;\n   f = lb->file;\n-  error_printf (\"In file %s:%d\\n\", f->filename, lb->linenum);\n+  error_printf (\"In file %s:%d\\n\", f->filename,\n+#ifdef USE_MAPPED_LOCATION\n+\t\tLOCATION_LINE (lb->location)\n+#else\n+\t\tlb->linenum\n+#endif\n+\t\t);\n \n   for (;;)\n     {"}, {"sha": "6a94611c93890309353522f995616567a6fdb625", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -280,6 +280,11 @@ gfc_be_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n static bool\n gfc_init (void)\n {\n+#ifdef USE_MAPPED_LOCATION\n+  linemap_add (&line_table, LC_ENTER, false, gfc_option.source, 1);\n+  linemap_add (&line_table, LC_RENAME, false, \"<built-in>\", 0);\n+#endif\n+\n   /* First initialize the backend.  */\n   gfc_init_decl_processing ();\n   gfc_static_ctors = NULL_TREE;"}, {"sha": "0e1525263959ed3ec43afe8042952a53a9fb21ff", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    seem to be sufficient on some systems.  */\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"input.h\"\n \n /* The following ifdefs are recommended by the autoconf documentation\n    for any code using alloca.  */\n@@ -459,7 +460,11 @@ typedef struct gfc_file\n \n typedef struct gfc_linebuf \n {\n+#ifdef USE_MAPPED_LOCATION\n+  source_location location;\n+#else\n   int linenum;\n+#endif\n   struct gfc_file *file;\n   struct gfc_linebuf *next;\n "}, {"sha": "a470639c260becf4f6b4a731ce476be568abf36b", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -801,7 +801,7 @@ load_line (FILE * input, char **pbuf, char *filename, int linenum)\n    the file stack.  */\n \n static gfc_file *\n-get_file (char *name)\n+get_file (char *name, enum lc_reason reason)\n {\n   gfc_file *f;\n \n@@ -817,6 +817,10 @@ get_file (char *name)\n   if (current_file != NULL)\n     f->inclusion_line = current_file->line;\n \n+#ifdef USE_MAPPED_LOCATION\n+  linemap_add (&line_table, reason, false, f->filename, 1);\n+#endif\n+\n   return f;\n }\n \n@@ -874,7 +878,7 @@ preprocessor_line (char *c)\n   \n   if (flag[1] || flag[3]) /* Starting new file.  */\n     {\n-      f = get_file (filename);\n+      f = get_file (filename, LC_RENAME);\n       f->up = current_file;\n       current_file = f;\n     }\n@@ -999,7 +1003,7 @@ load_file (char *filename, bool initial)\n \n   /* Load the file.  */\n \n-  f = get_file (filename);\n+  f = get_file (filename, initial ? LC_RENAME : LC_ENTER);\n   f->up = current_file;\n   current_file = f;\n   current_file->line = 1;\n@@ -1032,7 +1036,12 @@ load_file (char *filename, bool initial)\n \n       b = gfc_getmem (sizeof (gfc_linebuf) + len + 1);\n \n+#ifdef USE_MAPPED_LOCATION\n+      b->location\n+\t= linemap_line_start (&line_table, current_file->line++, 120);\n+#else\n       b->linenum = current_file->line++;\n+#endif\n       b->file = current_file;\n       strcpy (b->line, line);\n \n@@ -1050,6 +1059,9 @@ load_file (char *filename, bool initial)\n   fclose (input);\n \n   current_file = current_file->up;\n+#ifdef USE_MAPPED_LOCATION\n+  linemap_add (&line_table, LC_LEAVE, 0, NULL, 0);\n+#endif\n   return SUCCESS;\n }\n \n@@ -1167,7 +1179,12 @@ gfc_new_file (const char *filename, gfc_source_form form)\n #if 0 /* Debugging aid.  */\n   for (; line_head; line_head = line_head->next)\n     gfc_status (\"%s:%3d %s\\n\", line_head->file->filename, \n-\t\tline_head->linenum, line_head->line);\n+#ifdef USE_MAPPED_LOCATION\n+\t\tLOCATION_LINE (line_head->location),\n+#else\n+\t\tline_head->linenum,\n+#endif\n+\t\tline_head->line);\n \n   exit (0);\n #endif"}, {"sha": "f9db554337f6d3bef43e210dac80f4624e9f8149", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -226,6 +226,7 @@ build_field (segment_info *h, tree union_type, record_layout_info rli)\n \n   name = get_identifier (h->sym->name);\n   field = build_decl (FIELD_DECL, name, h->field);\n+  gfc_set_decl_location (field, &h->sym->declared_at);\n   known_align = (offset & -offset) * BITS_PER_UNIT;\n   if (known_align == 0 || known_align > BIGGEST_ALIGNMENT)\n     known_align = BIGGEST_ALIGNMENT;\n@@ -268,6 +269,11 @@ build_equiv_decl (tree union_type, bool is_init)\n \n   TREE_ADDRESSABLE (decl) = 1;\n   TREE_USED (decl) = 1;\n+\n+  /* The source location has been lost, and doesn't really matter.\n+     We need to set it to something though.  */\n+  gfc_set_decl_location (decl, &gfc_current_locus);\n+\n   gfc_add_decl_to_function (decl);\n \n   return decl;\n@@ -321,6 +327,8 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n       DECL_ALIGN (decl) = BIGGEST_ALIGNMENT;\n       DECL_USER_ALIGN (decl) = 0;\n \n+      gfc_set_decl_location (decl, &com->where);\n+\n       /* Place the back end declaration for this common block in\n          GLOBAL_BINDING_LEVEL.  */\n       common_sym->backend_decl = pushdecl_top_level (decl);\n@@ -797,6 +805,9 @@ gfc_trans_common (gfc_namespace *ns)\n   if (ns->blank_common.head != NULL)\n     {\n       c = gfc_get_common_head ();\n+      /* We've lost the real location, so use the location of the\n+\t enclosing procedure.  */\n+      c->where = ns->proc_name->declared_at;\n       strcpy (c->name, BLANK_COMMON_NAME);\n       translate_common (c, ns->blank_common.head);\n     }"}, {"sha": "49689390fcc9a722ea19d7848b61ba8f44a118cf", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -214,6 +214,20 @@ gfc_get_return_label (void)\n }\n \n \n+/* Set the backend source location of a decl.  */\n+\n+void\n+gfc_set_decl_location (tree decl, locus * loc)\n+{\n+#ifdef USE_MAPPED_LOCATION\n+  DECL_SOURCE_LOCATION (decl) = loc->lb->location;\n+#else\n+  DECL_SOURCE_LINE (decl) = loc->lb->linenum;\n+  DECL_SOURCE_FILE (decl) = loc->lb->file->filename;\n+#endif\n+}\n+\n+\n /* Return the backend label declaration for a given label structure,\n    or create it if it doesn't exist yet.  */\n \n@@ -238,10 +252,7 @@ gfc_get_label_decl (gfc_st_label * lp)\n \n       /* Tell the debugger where the label came from.  */\n       if (lp->value <= MAX_LABEL_VALUE)\t/* An internal label.  */\n-\t{\n-\t  DECL_SOURCE_LINE (label_decl) = lp->where.lb->linenum;\n-\t  DECL_SOURCE_FILE (label_decl) = lp->where.lb->file->filename;\n-\t}\n+\tgfc_set_decl_location (label_decl, &lp->where);\n       else\n \tDECL_ARTIFICIAL (label_decl) = 1;\n \n@@ -757,6 +768,8 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   /* Create the decl for the variable.  */\n   decl = build_decl (VAR_DECL, gfc_sym_identifier (sym), gfc_sym_type (sym));\n \n+  gfc_set_decl_location (decl, &sym->declared_at);\n+\n   /* Symbols from modules should have their assembler names mangled.\n      This is done here rather than in gfc_finish_var_decl because it\n      is different for string length variables.  */\n@@ -978,6 +991,10 @@ build_function_decl (gfc_symbol * sym)\n   assert (!sym->backend_decl);\n   assert (!sym->attr.external);\n \n+  /* Set the line and filename.  sym->declared_at seems to point to the\n+     last statement for subroutines, but it'll do for now.  */\n+  gfc_set_backend_locus (&sym->declared_at);\n+\n   /* Allow only one nesting level.  Allow public declarations.  */\n   assert (current_function_decl == NULL_TREE\n \t  || DECL_CONTEXT (current_function_decl) == NULL_TREE);\n@@ -1298,10 +1315,6 @@ trans_function_start (gfc_symbol * sym)\n   /* Create RTL for function definition.  */\n   make_decl_rtl (fndecl);\n \n-  /* Set the line and filename.  sym->declared_at seems to point to the\n-     last statement for subroutines, but it'll do for now.  */\n-  gfc_set_backend_locus (&sym->declared_at);\n-\n   init_function_start (fndecl);\n \n   /* Even though we're inside a function body, we still don't want to\n@@ -1328,10 +1341,12 @@ build_entry_thunks (gfc_namespace * ns)\n   tree args;\n   tree string_args;\n   tree tmp;\n+  locus old_loc;\n \n   /* This should always be a toplevel function.  */\n   assert (current_function_decl == NULL_TREE);\n \n+  gfc_get_backend_locus (&old_loc);\n   for (el = ns->entries; el; el = el->next)\n     {\n       thunk_sym = el->sym;\n@@ -1430,6 +1445,8 @@ build_entry_thunks (gfc_namespace * ns)\n \t    formal->sym->ts.cl->backend_decl = NULL_TREE;\n \t}\n     }\n+\n+  gfc_set_backend_locus (&old_loc);\n }\n \n \n@@ -2338,7 +2355,7 @@ gfc_generate_constructors (void)\n \n   make_decl_rtl (fndecl);\n \n-  init_function_start (fndecl, input_filename, input_line);\n+  init_function_start (fndecl);\n \n   pushlevel (0);\n \n@@ -2373,8 +2390,18 @@ gfc_generate_block_data (gfc_namespace * ns)\n   tree decl;\n   tree id;\n \n+  /* Tell the backend the source location of the block data.  */\n+  if (ns->proc_name)\n+    gfc_set_backend_locus (&ns->proc_name->declared_at);\n+  else\n+    gfc_set_backend_locus (&gfc_current_locus);\n+\n+  /* Process the DATA statements.  */\n   gfc_trans_common (ns);\n \n+  /* Create a global symbol with the mane of the block data.  This is to\n+     generate linker errors if the same name is used twice.  It is never\n+     really used.  */\n   if (ns->proc_name)\n     id = gfc_sym_mangled_function_id (ns->proc_name);\n   else"}, {"sha": "60f8edf4429c4809c8b34f92d8f9565a6ef1cdc5", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -524,7 +524,11 @@ set_error_locus (stmtblock_t * block, locus * where)\n   tmp = gfc_build_addr_expr (pchar_type_node, tmp);\n   gfc_add_modify_expr (block, locus_file, tmp);\n \n+#ifdef USE_MAPPED_LOCATION\n+  line = LOCATION_LINE (where->lb->location);\n+#else\n   line = where->lb->linenum;\n+#endif\n   gfc_add_modify_expr (block, locus_line, build_int_cst (NULL_TREE, line));\n }\n "}, {"sha": "59decfe1ce1211abc54459b71bff666afe07cec2", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -442,7 +442,11 @@ void\n gfc_get_backend_locus (locus * loc)\n {\n   loc->lb = gfc_getmem (sizeof (gfc_linebuf));    \n+#ifdef USE_MAPPED_LOCATION\n+  loc->lb->location = input_location; // FIXME adjust??\n+#else\n   loc->lb->linenum = input_line - 1;\n+#endif\n   loc->lb->file = gfc_current_backend_file;\n }\n \n@@ -452,9 +456,13 @@ gfc_get_backend_locus (locus * loc)\n void\n gfc_set_backend_locus (locus * loc)\n {\n-  input_line = loc->lb->linenum;\n   gfc_current_backend_file = loc->lb->file;\n+#ifdef USE_MAPPED_LOCATION\n+  input_location = loc->lb->location;\n+#else\n+  input_line = loc->lb->linenum;\n   input_filename = loc->lb->file->filename;\n+#endif\n }\n \n \n@@ -626,7 +634,7 @@ gfc_trans_code (gfc_code * code)\n \t  if (TREE_CODE (res) == STATEMENT_LIST)\n \t    annotate_all_with_locus (&res, input_location);\n \t  else\n-\t    annotate_with_locus (res, input_location);\n+\t    SET_EXPR_LOCATION (res, input_location);\n \n \t  /* Add the new statemment to the block.  */\n \t  gfc_add_expr_to_block (&block, res);\n@@ -665,6 +673,9 @@ gfc_generate_code (gfc_namespace * ns)\n       attr.subroutine = 1;\n       attr.access = ACCESS_PUBLIC;\n       main_program->attr = attr;\n+      /* Set the location to the first line of code.  */\n+      if (ns->code)\n+\tmain_program->declared_at = ns->code->loc;\n       ns->proc_name = main_program;\n       gfc_commit_symbols ();\n     }"}, {"sha": "9b7d355fb6e5496e360c0c8cf36c93e94c0ddb76", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc8542fa03e78ff3a39734f5dad49b233be54f/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=c8cc8542fa03e78ff3a39734f5dad49b233be54f", "patch": "@@ -374,6 +374,9 @@ void gfc_add_decl_to_function (tree);\n /* Make prototypes for runtime library functions.  */\n void gfc_build_builtin_function_decls (void);\n \n+/* Set the backend source location of a decl.  */\n+void gfc_set_decl_location (tree, locus *);\n+\n /* Return the variable decl for a symbol.  */\n tree gfc_get_symbol_decl (gfc_symbol *);\n "}]}