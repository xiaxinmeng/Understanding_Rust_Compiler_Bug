{"sha": "215acd2bae70e5ae9cbe68bdaa150a9215722310", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE1YWNkMmJhZTcwZTVhZTljYmU2OGJkYWExNTBhOTIxNTcyMjMxMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-14T09:15:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-14T09:15:11Z"}, "message": "parser.c (cp_parser_init_declarator): Remove redundant check of decl_specifiers->type.\n\n/gcc/cp\n2014-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* parser.c (cp_parser_init_declarator): Remove redundant check of\n\tdecl_specifiers->type.\n\n/gcc/testsuite\n2014-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/alias-decl-4.C: Adjust for parser change.\n\t* g++.dg/cpp0x/decltype2.C: Likewise.\n\t* g++.dg/cpp0x/decltype3.C: Likewise.\n\t* g++.dg/cpp0x/pr60249.C: Likewise.\n\t* g++.dg/cpp0x/variadic-ex10.C: Likewise.\n\t* g++.dg/cpp0x/variadic-ex14.C: Likewise.\n\t* g++.dg/cpp0x/variadic2.C: Likewise.\n\t* g++.dg/cpp0x/variadic74.C: Likewise.\n\t* g++.dg/parse/error10.C: Likewise.\n\t* g++.dg/parse/error15.C: Likewise.\n\t* g++.dg/parse/error2.C: Likewise.\n\t* g++.dg/template/crash106.C: Likewise.\n\t* g++.dg/template/crash89.C: Likewise.\n\t* g++.dg/template/nontype7.C: Likewise.\n\t* g++.dg/template/void3.C: Likewise.\n\t* g++.dg/template/void7.C: Likewise.\n\n/libstdc++-v3\n2014-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/26_numerics/random/linear_congruential_engine/\n\trequirements/non_uint_neg.cc: Adjust for parser change.\n\t* testsuite/tr1/5_numerical_facilities/random/linear_congruential/\n\trequirements/non_uint_neg.cc: Likewise.\n\nFrom-SVN: r213952", "tree": {"sha": "1e963461dfca0b26599e98b72119b3b4f1cef94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e963461dfca0b26599e98b72119b3b4f1cef94c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/215acd2bae70e5ae9cbe68bdaa150a9215722310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215acd2bae70e5ae9cbe68bdaa150a9215722310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215acd2bae70e5ae9cbe68bdaa150a9215722310", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215acd2bae70e5ae9cbe68bdaa150a9215722310/comments", "author": null, "committer": null, "parents": [{"sha": "35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35770bb20f9adb2f9687ab206cc2a0c53b5d6966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35770bb20f9adb2f9687ab206cc2a0c53b5d6966"}], "stats": {"total": 88, "additions": 43, "deletions": 45}, "files": [{"sha": "b5d748c7204297a7881f5cbc1f7a42d735fb6021", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -1,11 +1,16 @@\n+2014-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* parser.c (cp_parser_init_declarator): Remove redundant check of\n+\tdecl_specifiers->type.\n+\n 2014-08-13  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (build_x_va_arg): Support passing non-POD through ....\n \t(convert_arg_to_ellipsis): Likewise.\n \n 2014-08-13  Andrew Sutton  <andrew.n.sutton@gmail.com>\n \n-\t* pt.c (lookup_template_variable): Make dependent variable templates \n+\t* pt.c (lookup_template_variable): Make dependent variable templates\n \thave unknown type.\n \n 2014-08-13  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "ffb9538cfc02fdee8450399eebbf1f43de55f069", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -16900,17 +16900,6 @@ cp_parser_init_declarator (cp_parser* parser,\n      possibly be looking at any other construct.  */\n   cp_parser_commit_to_tentative_parse (parser);\n \n-  /* If the decl specifiers were bad, issue an error now that we're\n-     sure this was intended to be a declarator.  Then continue\n-     declaring the variable(s), as int, to try to cut down on further\n-     errors.  */\n-  if (decl_specifiers->any_specifiers_p\n-      && decl_specifiers->type == error_mark_node)\n-    {\n-      cp_parser_error (parser, \"invalid type in declaration\");\n-      decl_specifiers->type = integer_type_node;\n-    }\n-\n   /* Enter the newly declared entry in the symbol table.  If we're\n      processing a declaration in a class-specifier, we wait until\n      after processing the initializer.  */"}, {"sha": "55dae555ba2bbc57d423feadcbd81f72335fb7e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -1,3 +1,22 @@\n+2014-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/alias-decl-4.C: Adjust for parser change.\n+\t* g++.dg/cpp0x/decltype2.C: Likewise.\n+\t* g++.dg/cpp0x/decltype3.C: Likewise.\n+\t* g++.dg/cpp0x/pr60249.C: Likewise.\n+\t* g++.dg/cpp0x/variadic-ex10.C: Likewise.\n+\t* g++.dg/cpp0x/variadic-ex14.C: Likewise.\n+\t* g++.dg/cpp0x/variadic2.C: Likewise.\n+\t* g++.dg/cpp0x/variadic74.C: Likewise.\n+\t* g++.dg/parse/error10.C: Likewise.\n+\t* g++.dg/parse/error15.C: Likewise.\n+\t* g++.dg/parse/error2.C: Likewise.\n+\t* g++.dg/template/crash106.C: Likewise.\n+\t* g++.dg/template/crash89.C: Likewise.\n+\t* g++.dg/template/nontype7.C: Likewise.\n+\t* g++.dg/template/void3.C: Likewise.\n+\t* g++.dg/template/void7.C: Likewise.\n+\n 2014-08-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/62090"}, {"sha": "1232e19a60cb057b733dcab516cdf66a0f35561e", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-4.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -11,4 +11,4 @@ template <class T> using B = typename A<T>::U; // { dg-error \"type\" }\n template <class T> struct A {\n     typedef B<T> U;\n };\n-B<short> b; // { dg-error \"invalid type\" }\n+B<short> b;"}, {"sha": "29ba2aa97e2fa9b69c88bac3d703a72c0fa65df9", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype2.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -45,7 +45,6 @@ int bar(int);\n CHECK_DECLTYPE(decltype(foo), int(char));\n \n decltype(bar) z; // { dg-error \"overload\" \"overload\" }\n-// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 47 }\n \n CHECK_DECLTYPE(decltype(&foo), int(*)(char));\n CHECK_DECLTYPE(decltype(*&foo), int(&)(char));"}, {"sha": "b2e66243cc785786e0f78d8742c88f2eb4b5ff07", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -55,7 +55,7 @@ public:\n \n CHECK_DECLTYPE(decltype(aa.*&A::a), int&);\n decltype(aa.*&A::b) zz; // { dg-error \"cannot create pointer to reference member\" \"cannot\" }\n-// { dg-error \"invalid type\" \"invalid type\" { target *-*-* } 57 }\n+\n CHECK_DECLTYPE(decltype(caa.*&A::a), const int&);\n \n class X { "}, {"sha": "35dd459e8cfdfc31a7106d07a6d3a4744c82b8b4", "filename": "gcc/testsuite/g++.dg/cpp0x/pr60249.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60249.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60249.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60249.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -2,5 +2,3 @@\n // { dg-do compile { target c++11 } }\n \n decltype(\"\"_) x; // { dg-error \"unable to find string literal operator\" }\n-\n-// { dg-error \"invalid type in declaration before\" \"invalid\" { target *-*-* } 4 }"}, {"sha": "f4216a46d54b27a7a2dc48216d2118c9f04f4ae9", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex10.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -6,4 +6,3 @@ Tuple<int> t1; // Types contains one argument: int\n Tuple<int, float> t2; // Types contains two arguments: int and float\n Tuple<0> error; // { dg-error \"mismatch\" \"mismatch\" }\n // { dg-message \"expected a type\" \"expected a type\" { target *-*-* } 7 }\n-// { dg-error \"in declaration\" \"in declaration\" { target *-*-* } 7 }"}, {"sha": "e301e7ac38d3846b60cacb83211e8fd1e40def6f", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex14.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -10,10 +10,8 @@ template<template<class...> class Q> class Y { /* ... */ };\n X<A> xA; // okay\n X<B> xB; // { dg-error \"mismatch\" \"mismatch\" }\n // { dg-message \"expected a template\" \"expected\" { target *-*-* } 11 }\n-// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 11 }\n X<C> xC; // { dg-error \"mismatch\" \"mismatch\" }\n-// { dg-message \"expected a template\" \"expected\" { target *-*-* } 14 }\n-// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 14 }\n+// { dg-message \"expected a template\" \"expected\" { target *-*-* } 13 }\n Y<A> yA;\n Y<B> yB;\n Y<C> yC; // okay"}, {"sha": "c1ca5e8a26872997c42ec81acca5751f83708980", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -9,7 +9,6 @@ template<typename T1, typename T2, typename... Rest>\n struct two_or_more {}; // { dg-error \"provided for\" }\n \n typedef two_or_more<int> bad; // { dg-error \"2 or more\" \"2 or more\" }\n-// { dg-error \"invalid type\" \"invalid type\" { target *-*-* } 11 }\n \n void f()\n {"}, {"sha": "b86380b4e27122d200641ce353b3903bec0ec1ae", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic74.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -20,9 +20,7 @@ A<int*, float*>::X<&i, &f> apple1;\n B<int, float>::X<&i, &f> banana1;\n \n A<int*, float*>::X<&i> apple2; // { dg-error \"wrong number of template arguments\" \"wrong number\" }\n-// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 22 }\n A<int*, float*>::X<&i, &f, &f> apple3; // { dg-error \"wrong number of template arguments\" \"wrong number\" }\n-// { dg-error \"invalid type\" \"invalid\" { target *-*-* } 24 }\n A<int, float> apple4;\n \n // { dg-prune-output \"provided for\" }"}, {"sha": "46c9eff7bbcc0be43f6265ca4c9bea38641adb54", "filename": "gcc/testsuite/g++.dg/parse/error10.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -14,6 +14,4 @@ template <typename T> void foo()\n   enum typename A<T>::E    e4;\n }\n \n-// Here, columns nums are not very accurate either. Still acceptable though\n-// { dg-error \"30:invalid type in declaration before ';' token\" \"invalid\" { target *-*-* } 14 }\n-// { dg-error \"30:two or more data types in declaration of 'e4'\" \"2 or more\" { target *-*-* } 14 }\n+// { dg-error \"28:two or more data types in declaration of 'e4'\" \"2 or more\" { target *-*-* } 14 }"}, {"sha": "be002412efb8e4d84a29e00574156467d2bd8ee7", "filename": "gcc/testsuite/g++.dg/parse/error15.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -16,7 +16,6 @@ N::C::INVALID f4;     // { dg-error \"7:'INVALID' in 'struct N::C' does not name\n N::K f6;              // { dg-error \"4:'K' in namespace 'N' does not name a type\" }\n typename N::A f7;\n // { dg-error \"13:invalid use of template-name 'N::A' without an argument list\" \"13\" { target *-*-* } 17 }\n-// { dg-error \"17:invalid type in declaration before ';' token\" \"17\" { target *-*-* } 17 }\n \n struct B\n {\n@@ -25,7 +24,7 @@ struct B\n   N::C::INVALID f4;   // { dg-error \"9:'INVALID' in 'struct N::C' does not name a type\" }\n   N::K f6;            // { dg-error \"6:'K' in namespace 'N' does not name a type\" }\n   typename N::A f7;\n-// { dg-error \"15:invalid use of template-name 'N::A' without an argument list\" \"15\" { target *-*-* } 27 }\n+// { dg-error \"15:invalid use of template-name 'N::A' without an argument list\" \"15\" { target *-*-* } 26 }\n };\n \n template <int>"}, {"sha": "ac7a14cb9dea5b58c2295028e2396a7a4415e151", "filename": "gcc/testsuite/g++.dg/parse/error2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror2.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -12,4 +12,3 @@ Foo<func(g)> f; // { dg-error \"5:'int func.double.' cannot appear in a constant-\n // { dg-error \"10:'g' cannot appear in a constant-expression\" \"g\" { target *-*-* } 11 }\n // { dg-error \"11:a function call cannot appear in a constant-expression\" \"call\" { target *-*-* } 11 }\n // { dg-error \"12:template argument 1 is invalid\" \"invalid template argument\" { target *-*-* } 11 }\n-// { dg-error \"15:invalid type in declaration before ';' token\" \"invalid type\" { target *-*-* } 11 }"}, {"sha": "5bef101e59806f5801ead46282d44160be02b84e", "filename": "gcc/testsuite/g++.dg/template/crash106.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -9,6 +9,6 @@ struct A\n \n template<T N = 0, void (A::*)() = &A::foo<N> > struct B {}; // { dg-error \"type|declared\" }\n \n-B<> b; // { dg-error \"type|declaration\" }\n+B<> b; // { dg-message \"non-type\" }\n \n // { dg-prune-output \"could not convert\" }"}, {"sha": "d5c3a928323dd4d215f68600bc0f0ab7902fb52c", "filename": "gcc/testsuite/g++.dg/template/crash89.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash89.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash89.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash89.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -5,6 +5,4 @@ template<typename T, int = T()[0]> struct A // { dg-error \"subscripted\" }\n   typedef A<T> B;\n };\n \n-A<int> a; // { dg-error \"declaration\" }\n-\n-// { dg-prune-output \"template argument 2 is invalid\" }\n+A<int> a; // { dg-error \"template argument 2 is invalid\" }"}, {"sha": "ba33b19db3388f8aa05a28ad9225f3b3d9658f63", "filename": "gcc/testsuite/g++.dg/template/nontype7.C", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype7.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -10,6 +10,3 @@ char p[] = \"Vivisectionist\";\n \n X<int,\"Studebaker\"> x1;    // { dg-error \"string literal\" }\n X<int, p> x2;\n-\n-// { dg-bogus \"\" \"additional errors\" { xfail *-*-* } 11 }\n-"}, {"sha": "1124e44103379f72248b2204c258499f3b02697a", "filename": "gcc/testsuite/g++.dg/template/void3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -1,5 +1,5 @@\n //PR c++/28637\n \n template<void> struct A {};  // { dg-error \"not a valid type\" }\n-A<0> a;                      // { dg-error \"type\" }\n+A<0> a;                      // { dg-message \"non-type\" }\n "}, {"sha": "5edff9e8563530e38497e20e3367614862ec702e", "filename": "gcc/testsuite/g++.dg/template/void7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -5,4 +5,4 @@ template<void> struct A         // { dg-error \"not a valid type\" }\n   static int i;\n };\n \n-A<0> a;                        // { dg-error \"invalid type|not a valid type\" }\n+A<0> a;                        // { dg-message \"non-type\" }"}, {"sha": "e03975005fa00fbee081f4e879d3d055b34a3ea4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -1,3 +1,10 @@\n+2014-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/26_numerics/random/linear_congruential_engine/\n+\trequirements/non_uint_neg.cc: Adjust for parser change.\n+\t* testsuite/tr1/5_numerical_facilities/random/linear_congruential/\n+\trequirements/non_uint_neg.cc: Likewise.\n+\n 2014-08-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/61841"}, {"sha": "36caa64a9baff231a42566ba73a07d69bdd59e4e", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/requirements/non_uint_neg.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -21,13 +21,11 @@\n // { dg-do compile }\n // { dg-options \"-std=c++0x\" }\n // { dg-require-cstdint \"\" }\n-// { dg-error \"not a valid type\" \"\" { target *-*-* } 32 }\n-// { dg-error \"invalid type\"     \"\" { target *-*-* } 32 }\n+// { dg-error \"not a valid type\" \"\" { target *-*-* } 31 }\n \n // 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n // 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n \n #include <random>\n \n std::linear_congruential_engine<double, 48271, 0, 2147483647> x;\n-"}, {"sha": "c183d6dac96dcc4944918fdcc28432cb10e6e740", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/requirements/non_uint_neg.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215acd2bae70e5ae9cbe68bdaa150a9215722310/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215acd2bae70e5ae9cbe68bdaa150a9215722310/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc?ref=215acd2bae70e5ae9cbe68bdaa150a9215722310", "patch": "@@ -19,13 +19,11 @@\n \n // { dg-do compile }\n // { dg-options \"-D_GLIBCXX_CONCEPT_CHECKS\" }\n-// { dg-error \"not a valid type\" \"\" { target *-*-* } 30 }\n-// { dg-error \"invalid type\"     \"\" { target *-*-* } 30 }\n+// { dg-error \"not a valid type\" \"\" { target *-*-* } 29 }\n \n // 5.1.4.1 class template linear_congruential [tr.rand.eng.lcong]\n // 5.1.4.1 [4]\n \n #include <tr1/random>\n  \n std::tr1::linear_congruential<double, 48271, 0, 2147483647> x;\n-"}]}