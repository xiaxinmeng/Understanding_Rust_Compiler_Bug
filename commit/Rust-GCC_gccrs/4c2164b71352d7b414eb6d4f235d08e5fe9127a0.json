{"sha": "4c2164b71352d7b414eb6d4f235d08e5fe9127a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyMTY0YjcxMzUyZDdiNDE0ZWI2ZDRmMjM1ZDA4ZTVmZTkxMjdhMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-09T20:29:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-09T20:29:50Z"}, "message": "pa.md (default length define_attr): Lengths are in bytes now.\n\n        * pa.md (default length define_attr): Lengths are in bytes now.\n        (asm_attributes): Likewise.\n        (delay slot attributes): Deal with lengths in bytes.\n        (explicit length computations): Compute length in bytes.\n\nFrom-SVN: r4891", "tree": {"sha": "09f5e214956a0ccc8653463b8f07cd581c39d511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09f5e214956a0ccc8653463b8f07cd581c39d511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c2164b71352d7b414eb6d4f235d08e5fe9127a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2164b71352d7b414eb6d4f235d08e5fe9127a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2164b71352d7b414eb6d4f235d08e5fe9127a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2164b71352d7b414eb6d4f235d08e5fe9127a0/comments", "author": null, "committer": null, "parents": [{"sha": "a1b36964f8565f9992eeb9b22db63ce6a5352673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b36964f8565f9992eeb9b22db63ce6a5352673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b36964f8565f9992eeb9b22db63ce6a5352673"}], "stats": {"total": 396, "additions": 198, "deletions": 198}, "files": [{"sha": "c5f5de19f7e10868cf9504f3be18ce3c86a03a99", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 198, "deletions": 198, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2164b71352d7b414eb6d4f235d08e5fe9127a0/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2164b71352d7b414eb6d4f235d08e5fe9127a0/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=4c2164b71352d7b414eb6d4f235d08e5fe9127a0", "patch": "@@ -37,39 +37,39 @@\n (define_attr \"length\" \"\"\n   (cond [(eq_attr \"type\" \"load,fpload\")\n \t (if_then_else (match_operand 1 \"symbolic_memory_operand\" \"\")\n-\t\t       (const_int 2) (const_int 1))\n+\t\t       (const_int 8) (const_int 4))\n \n \t (eq_attr \"type\" \"store,fpstore\")\n \t (if_then_else (match_operand 0 \"symbolic_memory_operand\" \"\")\n-\t\t       (const_int 2) (const_int 1))\n+\t\t       (const_int 8) (const_int 4))\n \n \t (eq_attr \"type\" \"binary\")\n \t (if_then_else (match_operand 2 \"arith_operand\" \"\")\n-\t\t       (const_int 1) (const_int 3))\n+\t\t       (const_int 4) (const_int 12))\n \n \t (eq_attr \"type\" \"move,unary\")\n \t (if_then_else (match_operand 1 \"arith_operand\" \"\")\n-\t\t       (const_int 1) (const_int 2))]\n+\t\t       (const_int 4) (const_int 8))]\n \n-\t(const_int 1)))\n+\t(const_int 4)))\n \n (define_asm_attributes\n-  [(set_attr \"length\" \"1\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"multi\")])\n \n ;; Attributes for instruction and branch scheduling\n \n (define_attr \"in_branch_delay\" \"false,true\"\n   (if_then_else (and (eq_attr \"type\" \"!branch,cbranch,fbranch,call,dyncall,multi,milli\")\n-\t\t     (eq_attr \"length\" \"1\"))\n+\t\t     (eq_attr \"length\" \"4\"))\n \t\t(const_string \"true\")\n \t\t(const_string \"false\")))\n \n ;; Disallow instructions which use the FPU since they will tie up the FPU\n ;; even if the instruction is nullified.\n (define_attr \"in_nullified_branch_delay\" \"false,true\"\n   (if_then_else (and (eq_attr \"type\" \"!branch,cbranch,fbranch,call,dyncall,multi,milli,fpcc,fpalu,fpmul,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl\")\n-\t\t     (eq_attr \"length\" \"1\"))\n+\t\t     (eq_attr \"length\" \"4\"))\n \t\t(const_string \"true\")\n \t\t(const_string \"false\")))\n \n@@ -363,7 +363,7 @@\n   \"\"\n   \"com%I2clr,%B3 %2,%1,%0\\;ldi 1,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n ;; Combiner patterns for common operations performed with the output\n ;; from an scc insn (negscc and incscc).  \n@@ -375,7 +375,7 @@\n   \"\"\n   \"com%I2clr,%B3 %2,%1,%0\\;ldi -1,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n ;; Patterns for adding/subtracting the result of a boolean expression from\n ;; a register.  First we have special patterns that make use of the carry\n@@ -391,7 +391,7 @@\n   \"\"\n   \"sub%I3 %3,%2,0\\;addc 0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n ; This need only accept registers for op3, since canonicalization\n ; replaces geu with gtu when op3 is an integer.\n@@ -403,7 +403,7 @@\n   \"\"\n   \"sub %2,%3,0\\;addc 0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n ; Match only integers for op3 here.  This is used as canonical form of the\n ; geu pattern when op3 is an integer.  Don't match registers since we can't\n@@ -416,7 +416,7 @@\n   \"\"\n   \"addi %k3,%2,0\\;addc 0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"incscc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -429,7 +429,7 @@\n    com%I3clr,%B4 %3,%2,0\\;addi 1,%0,%0\n    com%I3clr,%B4 %3,%2,0\\;addi,tr 1,%1,%0\\;copy %1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"2,3\")])\n+   (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -439,7 +439,7 @@\n   \"\"\n   \"sub%I3 %3,%2,0\\;subb %1,0,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n ; This need only accept registers for op3, since canonicalization\n ; replaces ltu with leu when op3 is an integer.\n@@ -451,7 +451,7 @@\n   \"\"\n   \"sub %2,%3,0\\;subb %1,0,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n ; Match only integers for op3 here.  This is used as canonical form of the\n ; ltu pattern when op3 is an integer.  Don't match registers since we can't\n@@ -464,7 +464,7 @@\n   \"\"\n   \"addi %k3,%2,0\\;subb %1,0,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"decscc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -477,7 +477,7 @@\n    com%I3clr,%B4 %3,%2,0\\;addi -1,%0,%0\n    com%I3clr,%B4 %3,%2,0\\;addi,tr -1,%1,%0\\;copy %1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"2,3\")])\n+   (set_attr \"length\" \"8,12\")])\n \n ; Patterns for max and min.  (There is no need for an earlyclobber in the\n ; last alternative since the middle alternative will match if op0 == op1.)\n@@ -492,7 +492,7 @@\n   comiclr,> %2,%0,0\\;ldi %2,%0\n   comclr,> %1,%2,%0\\;copy %1,%0\"\n [(set_attr \"type\" \"multi,multi,multi\")\n- (set_attr \"length\" \"2,2,2\")])\n+ (set_attr \"length\" \"8,8,8\")])\n \n (define_insn \"uminsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -503,7 +503,7 @@\n   comclr,>> %2,%0,0\\;copy %2,%0\n   comiclr,>> %2,%0,0\\;ldi %2,%0\"\n [(set_attr \"type\" \"multi,multi\")\n- (set_attr \"length\" \"2,2\")])\n+ (set_attr \"length\" \"8,8\")])\n \n (define_insn \"smaxsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n@@ -515,7 +515,7 @@\n   comiclr,< %2,%0,0\\;ldi %2,%0\n   comclr,< %1,%2,%0\\;copy %1,%0\"\n [(set_attr \"type\" \"multi,multi,multi\")\n- (set_attr \"length\" \"2,2,2\")])\n+ (set_attr \"length\" \"8,8,8\")])\n \n (define_insn \"umaxsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -526,7 +526,7 @@\n   comclr,<< %2,%0,0\\;copy %2,%0\n   comiclr,<< %2,%0,0\\;ldi %2,%0\"\n [(set_attr \"type\" \"multi,multi\")\n- (set_attr \"length\" \"2,2\")])\n+ (set_attr \"length\" \"8,8\")])\n ;;; Experimental conditional move patterns\n \n ; We need the first constraint alternative in order to avoid\n@@ -547,7 +547,7 @@\n    com%I4clr,%B5 %4,%3,%0\\;ldil L'%1,%0\n    com%I4clr,%B5 %4,%3,%0\\;zdepi %Z1,%0\"\n   [(set_attr \"type\" \"multi,multi,multi,multi,multi\")\n-   (set_attr \"length\" \"2,2,2,2,2\")])\n+   (set_attr \"length\" \"8,8,8,8,8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r,r,r,r\")\n@@ -568,7 +568,7 @@\n    com%I4clr,%B5 %4,%3,0\\;ldil L'%1,%0\n    com%I4clr,%B5 %4,%3,0\\;zdepi %Z1,%0\"\n   [(set_attr \"type\" \"multi,multi,multi,multi,multi,multi,multi,multi\")\n-   (set_attr \"length\" \"2,2,2,2,2,2,2,2\")])\n+   (set_attr \"length\" \"8,8,8,8,8,8,8,8\")])\n \n ;; Conditional Branches\n \n@@ -742,7 +742,7 @@\n \n \n ;; Note a long backward conditional branch with an annulled delay slot\n-;; has a length of 3.  \n+;; has a length of 12.  \n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n@@ -759,10 +759,10 @@\n }\"\n [(set_attr \"type\" \"cbranch\")\n  (set (attr \"length\") \n-    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2)))])\n+    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8)))])\n \n ;; Match the negated branch.\n \n@@ -782,10 +782,10 @@\n }\"\n [(set_attr \"type\" \"cbranch\")\n  (set (attr \"length\") \n-    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2)))])\n+    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8)))])\n \n ;; Branch on Bit patterns.\n (define_insn \"\"\n@@ -807,10 +807,10 @@\n }\"\n [(set_attr \"type\" \"cbranch\")\n  (set (attr \"length\") \n-    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2)))])\n+    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8)))])\n \n (define_insn \"\"\n   [(set (pc)\n@@ -831,10 +831,10 @@\n }\"\n [(set_attr \"type\" \"cbranch\")\n  (set (attr \"length\") \n-    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2)))])\n+    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8)))])\n \n ;; Floating point branches\n (define_insn \"\"\n@@ -850,7 +850,7 @@\n     return \\\"ftest\\;bl%* %0,0\\\";\n }\"\n   [(set_attr \"type\" \"fbranch\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (pc) (if_then_else (ne (reg:CCFP 0) (const_int 0))\n@@ -865,7 +865,7 @@\n     return \\\"ftest\\;add,tr 0,0,0\\;bl%* %0,0\\\";\n }\"\n   [(set_attr \"type\" \"fbranch\")\n-   (set_attr \"length\" \"3\")])\n+   (set_attr \"length\" \"12\")])\n \n ;; Move instructions\n \n@@ -921,7 +921,7 @@\n   \"flag_pic && operands[1] == pic_offset_table_rtx\"\n   \"ldw T'%2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\" \n@@ -942,7 +942,7 @@\n    fldws%F1 %1,%0\n    fstws%F0 %1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,fpalu,fpload,fpstore\")\n-   (set_attr \"length\" \"1,1,1,1,1,1,1,1,1,1\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4\")])\n \n ;; Load indexed.  We don't use unscaled modes since they can't be used\n ;; unless we can tell which of the registers is the base and which is\n@@ -957,7 +957,7 @@\n   \"! TARGET_DISABLE_INDEXING\"\n   \"ldwx,s %1(0,%2),%0\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ;; Load or store with base-register modification.\n \n@@ -975,7 +975,7 @@\n   return \\\"ldws,mb %2(0,%0),%3\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"pre_stwm\"\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -991,7 +991,7 @@\n   return \\\"stws,mb %r3,%2(0,%0)\\\";\n }\"\n   [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"post_ldwm\"\n   [(set (match_operand:SI 3 \"register_operand\" \"r\")\n@@ -1007,7 +1007,7 @@\n   return \\\"ldws,ma %2(0,%0),%3\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"post_stwm\"\n   [(set (mem:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n@@ -1023,7 +1023,7 @@\n   return \\\"stws,ma %r3,%2(0,%0)\\\";\n }\"\n   [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ;; For pic\n (define_insn \"\"\n@@ -1047,7 +1047,7 @@\n   }\n \"\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"3\")])\n+   (set_attr \"length\" \"12\")])\n \n ;; For kernel code always use addil; else we can lose due to a linker\n ;; bug involving absolute symbols and \"ldil;add\" style relocations\n@@ -1060,7 +1060,7 @@\n   \"@\n    addil L'%G1,%%r27\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ;; For all symbolic operands *except* function addresses and read-only\n ;; operands (which live in TEXT space and do not require relocation).  \n@@ -1086,7 +1086,7 @@\n    addil L'%G1,%%r27\n    ldil L'%G1,%0\\;add %0,%%r27,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"1,2\")])\n+   (set_attr \"length\" \"4,8\")])\n \n ;; This is for use in the prologue/epilogue code.  We need it \n ;; to add large constants to a stack pointer or frame pointer.\n@@ -1102,7 +1102,7 @@\n    addil L'%G2,%1\n    ldil L'%G2,%0\\;add %0,%1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"1,2\")])\n+   (set_attr \"length\" \"4,8\")])\n \n ;; For function addresses.\n (define_insn \"\"\n@@ -1111,15 +1111,15 @@\n   \"\"\n   \"ldil LP'%G1,%0\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"check_pic (1)\"\n   \"ldil L'%G1,%0\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ;; lo_sum of a function address.\n (define_insn \"\"\n@@ -1130,15 +1130,15 @@\n   \"\"\n   \"ldo RP'%G2(%1),%0\\;extru,= %0,31,1,%3\\;ldw -4(0,%%r27),%3\\;add %0,%3,%0\"\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"4\")])\n+   (set_attr \"length\" \"16\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"ldo R'%G2(%1),%0\"\n-  [(set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"4\")])\n \n ;; Now that a symbolic_address plus a constant is broken up early\n ;; in the compilation phase (for better CSE) we need a special\n@@ -1179,7 +1179,7 @@\n    mtsar %r1\n    fcpy,sgl %r1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,fpalu\")\n-   (set_attr \"length\" \"1,1,1,1,1,1,1,1\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1189,7 +1189,7 @@\n   \"! TARGET_DISABLE_INDEXING\"\n   \"ldhx,s %2(0,%1),%0\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 3 \"register_operand\" \"=r\")\n@@ -1200,7 +1200,7 @@\n   \"\"\n   \"ldhs,mb %2(0,%0),%3\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (mem:HI (plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -1211,23 +1211,23 @@\n   \"\"\n   \"sths,mb %r3,%2(0,%0)\"\n   [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(high:HI (match_operand 1 \"\" \"\")))]\n   \"check_pic (1)\"\n   \"ldil L'%G1,%0\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(lo_sum:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t   (match_operand 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"ldo R'%G2(%1),%0\"\n-  [(set_attr \"length\" \"1\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n@@ -1254,7 +1254,7 @@\n    mtsar %r1\n    fcpy,sgl %r1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,fpalu\")\n-   (set_attr \"length\" \"1,1,1,1,1,1,1,1\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 3 \"register_operand\" \"=r\")\n@@ -1265,7 +1265,7 @@\n   \"\"\n   \"ldbs,mb %2(0,%0),%3\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (mem:QI (plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -1276,7 +1276,7 @@\n   \"\"\n   \"stbs,mb %r3,%2(0,%0)\"\n   [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ;; The definition of this insn does not really explain what it does,\n ;; but it should suffice\n@@ -1346,7 +1346,7 @@\n   \"* return (which_alternative == 0 ? output_move_double (operands)\n \t\t\t\t    : \\\" fldds%F1 %1,%0\\\");\"\n   [(set_attr \"type\" \"move,fpload\")\n-   (set_attr \"length\" \"4,1\")])\n+   (set_attr \"length\" \"16,4\")])\n \n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n@@ -1373,7 +1373,7 @@\n   return output_move_double (operands);\n }\"\n   [(set_attr \"type\" \"fpalu,move,fpstore,store,fpload,load\")\n-   (set_attr \"length\" \"1,2,1,2,1,2\")])\n+   (set_attr \"length\" \"4,8,4,8,4,8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=fx\")\n@@ -1383,7 +1383,7 @@\n   \"! TARGET_DISABLE_INDEXING\"\n   \"flddx,s %1(0,%2),%0\"\n   [(set_attr \"type\" \"fpload\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (mem:DF (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -1393,7 +1393,7 @@\n   \"! TARGET_DISABLE_INDEXING\"\n   \"fstdx,s %0,%1(0,%2)\"\n   [(set_attr \"type\" \"fpstore\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_expand \"movdi\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\" \"\")\n@@ -1471,7 +1471,7 @@\n     abort ();\n }\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n ;;; Experimental\n \n@@ -1490,7 +1490,7 @@\n   return output_move_double (operands);\n }\"\n   [(set_attr \"type\" \"move,store,load,misc,fpalu,fpload,fpstore\")\n-   (set_attr \"length\" \"2,3,3,3,1,1,1\")])\n+   (set_attr \"length\" \"8,12,12,12,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n@@ -1509,7 +1509,7 @@\n }\"\n   ;; Need to set length for this arith insn because operand2\n   ;; is not an \"arith_operand\".\n-  [(set_attr \"length\" \"1,2\")])\n+  [(set_attr \"length\" \"4,8\")])\n \n ;; This pattern forces (set (reg:SF ...) (const_double ...))\n ;; to be reloaded by putting the constant into memory when\n@@ -1528,7 +1528,7 @@\n   \"* return (which_alternative == 0 ? singlemove_string (operands)\n \t\t\t\t    : \\\" fldws%F1 %1,%0\\\");\"\n   [(set_attr \"type\" \"move,fpload\")\n-   (set_attr \"length\" \"2,1\")])\n+   (set_attr \"length\" \"8,4\")])\n \n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")\n@@ -1555,7 +1555,7 @@\n    fstws%F0 %r1,%0\n    stw%M0 %r1,%0\"\n   [(set_attr \"type\" \"fpalu,move,fpload,load,fpstore,store\")\n-   (set_attr \"length\" \"1,1,1,1,1,1\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=fx\")\n@@ -1565,7 +1565,7 @@\n   \"! TARGET_DISABLE_INDEXING\"\n   \"fldwx,s %1(0,%2),%0\"\n   [(set_attr \"type\" \"fpload\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (mem:SF (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -1575,7 +1575,7 @@\n   \"! TARGET_DISABLE_INDEXING\"\n   \"fstwx,s %0,%1(0,%2)\"\n   [(set_attr \"type\" \"fpstore\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \f\n ;;- zero extension instructions\n \n@@ -1598,7 +1598,7 @@\n    extru %1,31,8,%0\n    ldb%M1 %1,%0\"\n   [(set_attr \"type\" \"unary,load\")\n-   (set_attr \"length\" \"1,1\")])\n+   (set_attr \"length\" \"4,4\")])\n \n (define_insn \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -1609,7 +1609,7 @@\n    extru %1,31,8,%0\n    ldb%M1 %1,%0\"\n   [(set_attr \"type\" \"unary,load\")\n-   (set_attr \"length\" \"1,1\")])\n+   (set_attr \"length\" \"4,4\")])\n \n ;;- sign extension instructions\n \n@@ -1669,15 +1669,15 @@\n   \"\"\n   \"fldws %1,%0\\;fcnvxf,sgl,sgl %0,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"floatsisf2\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=fx\")\n \t(float:SF (match_operand:SI 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fcnvxf,sgl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ;; This pattern forces (set (reg:DF ...) (float:DF (const_int ...)))\n ;; to be reloaded by putting the constant into memory.\n@@ -1688,15 +1688,15 @@\n   \"\"\n   \"fldws %1,%0\\;fcnvxf,sgl,dbl %0,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"floatsidf2\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=fx\")\n \t(float:DF (match_operand:SI 1 \"register_operand\" \"fx\")))]\n   \"\"\n   \"fcnvxf,sgl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_expand \"floatunssisf2\"\n   [(set (subreg:SI (match_dup 2) 1)\n@@ -1724,15 +1724,15 @@\n   \"TARGET_SNAKE\"\n   \"fcnvxf,dbl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=x\")\n \t(float:DF (match_operand:DI 1 \"register_operand\" \"x\")))]\n   \"TARGET_SNAKE\"\n   \"fcnvxf,dbl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ;; Convert a float to an actual integer.\n ;; Truncation is performed as part of the conversion.\n@@ -1743,31 +1743,31 @@\n   \"\"\n   \"fcnvfxt,sgl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=fx\")\n \t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"fx\"))))]\n   \"\"\n   \"fcnvfxt,dbl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"x\"))))]\n   \"TARGET_SNAKE\"\n   \"fcnvfxt,sgl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"x\"))))]\n   \"TARGET_SNAKE\"\n   \"fcnvfxt,dbl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \f\n ;;- arithmetic instructions\n \n@@ -1788,7 +1788,7 @@\n   else\n     return \\\"add %R2,%R1,%R0\\;addc %2,%1,%0\\\";\n }\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1868,7 +1868,7 @@\n \t\t  (match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"sub %R1,%R2,%R0\\;subb %1,%2,%0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -2124,7 +2124,7 @@\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"and %1,%2,%0\\;and %R1,%R2,%R0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -2133,15 +2133,15 @@\n   \"\"\n   \"* return output_and (operands); \"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"andcm %2,%1,%0\\;andcm %R2,%R1,%R0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2169,7 +2169,7 @@\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"or %1,%2,%0\\;or %R1,%R2,%R0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"8\")])\n \n ;; Need a define_expand because we've run out of CONST_OK... characters.\n (define_expand \"iorsi3\"\n@@ -2190,7 +2190,7 @@\n   \"\"\n   \"* return output_ior (operands); \"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2218,7 +2218,7 @@\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"xor %1,%2,%0\\;xor %R1,%R2,%R0\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2233,7 +2233,7 @@\n   \"\"\n   \"sub 0,%R1,%R0\\;subb 0,%1,%0\"\n   [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2258,7 +2258,7 @@\n   \"\"\n   \"uaddcm 0,%1,%0\\;uaddcm 0,%R1,%R0\"\n   [(set_attr \"type\" \"unary\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2386,7 +2386,7 @@\n   \"\"\n   \"ldb%M1 %1,%0\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2395,7 +2395,7 @@\n   \"\"\n   \"ldh%M1 %1,%0\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2418,7 +2418,7 @@\n   \"reload_in_progress\"\n   \"sh%O4add %2,%1,%0\\;add%I3 %3,%0,%0\"\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_expand \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -2449,7 +2449,7 @@\n   \"\"\n   \"zdep %1,%P2,%L2,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n ; Match cases of op1 a CONST_INT here that zvdep_imm doesn't handle.\n ; Doing it like this makes slightly better code since reload can\n@@ -2504,7 +2504,7 @@\n   \"\"\n   \"extrs %1,%P2,%L2,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"vextrs32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2523,7 +2523,7 @@\n    vshd 0,%1,%0\n    extru %1,%P2,%L2,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"rotrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -2541,7 +2541,7 @@\n     return \\\"vshd %1,%1,%0\\\";\n }\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"rotlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2554,7 +2554,7 @@\n   return \\\"shd %1,%1,%2,%0\\\";\n }\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2566,7 +2566,7 @@\n   \"INTVAL (operands[3]) + INTVAL (operands[4]) == 32\"\n   \"shd %1,%2,%4,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2578,7 +2578,7 @@\n   \"INTVAL (operands[3]) + INTVAL (operands[4]) == 32\"\n   \"shd %1,%2,%4,%0\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2594,7 +2594,7 @@\n   return \\\"zdep %1,%2,%3,%0\\\";\n }\"\n   [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"4\")])\n \f\n ;; Unconditional and other jump instructions.\n \n@@ -2643,7 +2643,7 @@\n    (use (match_operand:SI 0 \"const_int_operand\" \"\"))]\n   \"\"\n   \"bl _mcount,%%r2\\;ldo %0(%%r2),%%r25\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"blockage\"\n   [(unspec_volatile [(const_int 2)] 0)]\n@@ -2717,7 +2717,7 @@\n       return \\\"sub,>> %0,%1,0\\;blr,n %0,0\\;b,n %l3\\\";\n     }\n }\"\n- [(set_attr \"length\" \"3\")])\n+ [(set_attr \"length\" \"12\")])\n \n ;; Need nops for the calls because execution is supposed to continue\n ;; past; we don't want to nullify an instruction that we need.\n@@ -2769,7 +2769,7 @@\n   return \\\"bl %0,2%#\\\";\n }\"\n  [(set_attr \"type\" \"call\")\n-  (set_attr \"length\" \"1\")])\n+  (set_attr \"length\" \"4\")])\n \n (define_insn \"call_internal_reg\"\n  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n@@ -2779,7 +2779,7 @@\n  \"\"\n  \"copy %0,22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,31\\;copy 31,2\"\n  [(set_attr \"type\" \"dyncall\")\n-  (set_attr \"length\" \"3\")])\n+  (set_attr \"length\" \"12\")])\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n@@ -2832,7 +2832,7 @@\n   return \\\"bl %1,2%#\\\";\n }\"\n  [(set_attr \"type\" \"call\")\n-  (set_attr \"length\" \"1\")])\n+  (set_attr \"length\" \"4\")])\n \n (define_insn \"call_value_internal_reg\"\n   [(set (match_operand 0 \"\" \"=rfx\")\n@@ -2844,7 +2844,7 @@\n   \"\"\n   \"copy %1,22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,31\\;copy 31,2\"\n  [(set_attr \"type\" \"dyncall\")\n-  (set_attr \"length\" \"3\")])\n+  (set_attr \"length\" \"12\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]\n@@ -2923,40 +2923,40 @@\n  (set (attr \"length\")\n       (if_then_else (eq_attr \"alternative\" \"0\")\n ;; Loop counter in register case\n-;; Short branch has length of 1\n-;; Long branch has length of 2\n-\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2))\n+;; Short branch has length of 4\n+;; Long branch has length of 8\n+\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8))\n \n ;; Loop counter in FP reg case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else (eq_attr \"alternative\" \"1\")\n \t  (if_then_else (lt (match_dup 3) (pc))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 6))))\n-\t\t  (const_int 2047))\n-\t      (const_int 6)\n-\t      (const_int 7))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 24))))\n+\t\t  (const_int 8188))\n+\t      (const_int 24)\n+\t      (const_int 28))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t  (const_int 2047))\n-\t      (const_int 6)\n-\t      (const_int 7)))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t  (const_int 8188))\n+\t      (const_int 24)\n+\t      (const_int 28)))\n ;; Loop counter in memory case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else (lt (match_dup 3) (pc))\n \t  (if_then_else \n-\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 3))))\n-\t\t(const_int 2047))\n-\t    (const_int 3)\n-\t    (const_int 4))\n+\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))\n+\t\t(const_int 8188))\n+\t    (const_int 12)\n+\t    (const_int 16))\n \t  (if_then_else \n-\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t(const_int 2047))\n-\t    (const_int 3)\n-\t    (const_int 4))))))])\n+\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t(const_int 8188))\n+\t    (const_int 12)\n+\t    (const_int 16))))))])\n \n ;; Simply another variant of the dbra pattern.  More restrictive \n ;; in testing the comparison operator as it must worry about overflow\n@@ -2979,40 +2979,40 @@\n  (set (attr \"length\")\n       (if_then_else (eq_attr \"alternative\" \"0\")\n ;; Loop counter in register case\n-;; Short branch has length of 1\n-;; Long branch has length of 2\n-\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2))\n+;; Short branch has length of 4\n+;; Long branch has length of 8\n+\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8))\n \n ;; Loop counter in FP reg case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else (eq_attr \"alternative\" \"1\")\n \t  (if_then_else (lt (match_dup 3) (pc))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 6))))\n-\t\t  (const_int 2047))\n-\t      (const_int 6)\n-\t      (const_int 7))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 24))))\n+\t\t  (const_int 8188))\n+\t      (const_int 24)\n+\t      (const_int 28))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t  (const_int 2047))\n-\t      (const_int 6)\n-\t      (const_int 7)))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t  (const_int 8188))\n+\t      (const_int 24)\n+\t      (const_int 28)))\n ;; Loop counter in memory case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else (lt (match_dup 3) (pc))\n \t  (if_then_else \n-\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 3))))\n-\t\t(const_int 2047))\n-\t    (const_int 3)\n-\t    (const_int 4))\n+\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))\n+\t\t(const_int 8188))\n+\t    (const_int 12)\n+\t    (const_int 16))\n \t  (if_then_else \n-\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t(const_int 2047))\n-\t    (const_int 3)\n-\t    (const_int 4))))))])\n+\t    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t(const_int 8188))\n+\t    (const_int 12)\n+\t    (const_int 16))))))])\n \n (define_insn \"\"\n   [(set (pc)\n@@ -3030,34 +3030,34 @@\n  (set (attr \"length\")\n       (if_then_else (eq_attr \"alternative\" \"0\")\n ;; Loop counter in register case\n-;; Short branch has length of 1\n-;; Long branch has length of 2\n-\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2))\n+;; Short branch has length of 4\n+;; Long branch has length of 8\n+\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8))\n \n ;; Loop counter in FP reg case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else (eq_attr \"alternative\" \"1\")\n \t  (if_then_else (lt (match_dup 3) (pc))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 3))))\n-\t\t  (const_int 2047))\n-\t      (const_int 3)\n-\t      (const_int 4))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))\n+\t\t  (const_int 8188))\n+\t      (const_int 12)\n+\t      (const_int 16))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t  (const_int 2047))\n-\t      (const_int 3)\n-\t      (const_int 4)))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t  (const_int 8188))\n+\t      (const_int 12)\n+\t      (const_int 16)))\n ;; Loop counter in memory case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else \n-\t  (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t      (const_int 2047))\n-\t  (const_int 2)\n-\t  (const_int 3)))))])\n+\t  (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t      (const_int 8188))\n+\t  (const_int 8)\n+\t  (const_int 12)))))])\n \n ;; Handle negated branch.\n (define_insn \"\"\n@@ -3076,34 +3076,34 @@\n  (set (attr \"length\")\n       (if_then_else (eq_attr \"alternative\" \"0\")\n ;; Loop counter in register case\n-;; Short branch has length of 1\n-;; Long branch has length of 2\n-\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t      (const_int 2047))\n-           (const_int 1)\n-\t   (const_int 2))\n+;; Short branch has length of 4\n+;; Long branch has length of 8\n+\t(if_then_else (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t      (const_int 8188))\n+           (const_int 4)\n+\t   (const_int 8))\n \n ;; Loop counter in FP reg case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else (eq_attr \"alternative\" \"1\")\n \t  (if_then_else (lt (match_dup 3) (pc))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 3))))\n-\t\t  (const_int 2047))\n-\t      (const_int 3)\n-\t      (const_int 4))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))\n+\t\t  (const_int 8188))\n+\t      (const_int 12)\n+\t      (const_int 16))\n \t    (if_then_else \n-\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t\t  (const_int 2047))\n-\t      (const_int 3)\n-\t      (const_int 4)))\n+\t      (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t\t  (const_int 8188))\n+\t      (const_int 12)\n+\t      (const_int 16)))\n ;; Loop counter in memory case.\n ;; Extra goo to deal with additional reload insns.\n \t(if_then_else \n-\t  (lt (abs (minus (match_dup 3) (plus (pc) (const_int 2))))\n-\t      (const_int 2047))\n-\t  (const_int 2)\n-\t  (const_int 3)))))])\n+\t  (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))\n+\t      (const_int 8188))\n+\t  (const_int 8)\n+\t  (const_int 12)))))])\n \n ;; The next four peepholes take advantage of the new 5 operand \n ;; fmpy{add,sub} instructions available on 1.1 CPUS.  Basically\n@@ -3207,4 +3207,4 @@\n    (use (mem:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"fdc 0(0,%0)\\;sync\\;fic 0(0,%0)\\;sync\\;fdc 0(0,%1)\\;sync\\;fic 0(0,%1)\\;sync\\;nop\\;nop\\;nop\\;nop\\;nop\\;nop\\;nop\"\n-  [(set_attr \"length\" \"15\")])\n+  [(set_attr \"length\" \"60\")])"}]}