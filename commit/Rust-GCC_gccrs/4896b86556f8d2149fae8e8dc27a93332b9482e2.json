{"sha": "4896b86556f8d2149fae8e8dc27a93332b9482e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5NmI4NjU1NmY4ZDIxNDlmYWU4ZThkYzI3YTkzMzMyYjk0ODJlMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-11-10T08:21:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-11-10T08:21:05Z"}, "message": "utils.c (convert): Add comment and do not fall through to the next case.\n\n\t* gcc-interface/utils.c (convert) <RECORD_TYPE>: Add comment and do\n\tnot fall through to the next case.\n\t<ARRAY_TYPE>: Deal specially with a dereference from another array\n\ttype with the same element type.\n\nFrom-SVN: r254618", "tree": {"sha": "9fa6c392e31b8c052f90d7b9aa005e493870b47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fa6c392e31b8c052f90d7b9aa005e493870b47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4896b86556f8d2149fae8e8dc27a93332b9482e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4896b86556f8d2149fae8e8dc27a93332b9482e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4896b86556f8d2149fae8e8dc27a93332b9482e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4896b86556f8d2149fae8e8dc27a93332b9482e2/comments", "author": null, "committer": null, "parents": [{"sha": "35b9d8e7695aa37563293217aefb3a606b72f131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b9d8e7695aa37563293217aefb3a606b72f131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b9d8e7695aa37563293217aefb3a606b72f131"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "35062ddc50fa3c70bab7407bfe35d5a7118f0688", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4896b86556f8d2149fae8e8dc27a93332b9482e2", "patch": "@@ -1,3 +1,10 @@\n+2017-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (convert) <RECORD_TYPE>: Add comment and do\n+\tnot fall through to the next case.\n+\t<ARRAY_TYPE>: Deal specially with a dereference from another array\n+\ttype with the same element type.\n+\n 2017-11-09  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_util.adb, freeze.adb: Minor reformatting."}, {"sha": "2c80a612b1fb1eb955a33db4de90b095aa3f9bf2", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=4896b86556f8d2149fae8e8dc27a93332b9482e2", "patch": "@@ -4706,6 +4706,7 @@ convert (tree type, tree expr)\n       return fold (convert_to_real (type, expr));\n \n     case RECORD_TYPE:\n+      /* Do a normal conversion between scalar and justified modular type.  */\n       if (TYPE_JUSTIFIED_MODULAR_P (type) && !AGGREGATE_TYPE_P (etype))\n \t{\n \t  vec<constructor_elt, va_gc> *v;\n@@ -4717,9 +4718,27 @@ convert (tree type, tree expr)\n \t  return gnat_build_constructor (type, v);\n \t}\n \n-      /* ... fall through ... */\n+      /* In these cases, assume the front-end has validated the conversion.\n+\t If the conversion is valid, it will be a bit-wise conversion, so\n+\t it can be viewed as an unchecked conversion.  */\n+      return unchecked_convert (type, expr, false);\n \n     case ARRAY_TYPE:\n+      /* Do a normal conversion between unconstrained and constrained array\n+\t type, assuming the latter is a constrained version of the former.  */\n+      if (TREE_CODE (expr) == INDIRECT_REF\n+\t  && ecode == ARRAY_TYPE\n+\t  && TREE_TYPE (etype) == TREE_TYPE (type))\n+\t{\n+\t  tree ptr_type = build_pointer_type (type);\n+\t  tree t = build_unary_op (INDIRECT_REF, NULL_TREE,\n+\t\t\t\t   fold_convert (ptr_type,\n+\t\t\t\t\t\t TREE_OPERAND (expr, 0)));\n+\t  TREE_READONLY (t) = TREE_READONLY (expr);\n+\t  TREE_THIS_NOTRAP (t) = TREE_THIS_NOTRAP (expr);\n+\t  return t;\n+\t}\n+\n       /* In these cases, assume the front-end has validated the conversion.\n \t If the conversion is valid, it will be a bit-wise conversion, so\n \t it can be viewed as an unchecked conversion.  */"}, {"sha": "0de4f7b2e6cf8f0305610ed7193fd56a937f8f0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4896b86556f8d2149fae8e8dc27a93332b9482e2", "patch": "@@ -1,3 +1,7 @@\n+2017-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt69.adb: New test.\n+\n 2017-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/82913"}, {"sha": "e8c94dae2dc8c83cf1db20fd980c18f336b6e6f6", "filename": "gcc/testsuite/gnat.dg/opt69.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt69.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4896b86556f8d2149fae8e8dc27a93332b9482e2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt69.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt69.adb?ref=4896b86556f8d2149fae8e8dc27a93332b9482e2", "patch": "@@ -0,0 +1,28 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+with Ada.Text_IO;\n+\n+procedure Opt69 is\n+\n+   procedure Inner\n+     (A : String := (1 .. 15 => ASCII.NUL);\n+      B : String := (1 .. 5 => ASCII.NUL);\n+      C : String := (1 .. 5 => ASCII.NUL))\n+   is\n+      Aa : String (1 .. 15);\n+      Bb : String (1 .. 5);\n+      Cc : String (1 .. 5);\n+   begin\n+      Aa := A;\n+      Bb := B;\n+      Cc := C;\n+\n+      Ada.Text_IO.Put_Line (Aa);\n+      Ada.Text_IO.Put_Line (Bb);\n+      Ada.Text_IO.Put_Line (Cc);\n+   end;\n+\n+begin\n+   Inner;\n+end;"}]}