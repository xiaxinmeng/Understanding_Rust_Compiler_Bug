{"sha": "ddec5aea567a131daf0c5741d676d6f4a68ca45d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlYzVhZWE1NjdhMTMxZGFmMGM1NzQxZDY3NmQ2ZjRhNjhjYTQ1ZA==", "commit": {"author": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-22T13:38:32Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-22T13:38:32Z"}, "message": "Index...\n\nIndex: gcc/config/rs6000/emmintrin.h\n===================================================================\n--- gcc/config/rs6000/emmintrin.h\t(revision 265318)\n+++ gcc/config/rs6000/emmintrin.h\t(working copy)\n@@ -85,7 +85,7 @@ typedef double __m128d __attribute__ ((__vector_si\n typedef long long __m128i_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n typedef double __m128d_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n \n-/* Define two value permute mask */\n+/* Define two value permute mask.  */\n #define _MM_SHUFFLE2(x,y) (((x) << 1) | (y))\n \n /* Create a vector with element 0 as F and the rest zero.  */\n@@ -201,7 +201,7 @@ _mm_store_pd (double *__P, __m128d __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeu_pd (double *__P, __m128d __A)\n {\n-  *(__m128d *)__P = __A;\n+  *(__m128d_u *)__P = __A;\n }\n \n /* Stores the lower DPFP value.  */\n@@ -2175,7 +2175,7 @@ _mm_maskmoveu_si128 (__m128i __A, __m128i __B, cha\n {\n   __v2du hibit = { 0x7f7f7f7f7f7f7f7fUL, 0x7f7f7f7f7f7f7f7fUL};\n   __v16qu mask, tmp;\n-  __m128i *p = (__m128i*)__C;\n+  __m128i_u *p = (__m128i_u*)__C;\n \n   tmp = (__v16qu)_mm_loadu_si128(p);\n   mask = (__v16qu)vec_cmpgt ((__v16qu)__B, (__v16qu)hibit);\nIndex: gcc/config/rs6000/xmmintrin.h\n===================================================================\n--- gcc/config/rs6000/xmmintrin.h\t(revision 265318)\n+++ gcc/config/rs6000/xmmintrin.h\t(working copy)\n@@ -85,6 +85,10 @@\n    vector types, and their scalar components.  */\n typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n \n+/* Unaligned version of the same type.  */\n+typedef float __m128_u __attribute__ ((__vector_size__ (16), __may_alias__,\n+\t\t\t\t       __aligned__ (1)));\n+\n /* Internal data types for implementing the intrinsics.  */\n typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n \n@@ -172,7 +176,7 @@ _mm_store_ps (float *__P, __m128 __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeu_ps (float *__P, __m128 __A)\n {\n-  *(__m128 *)__P = __A;\n+  *(__m128_u *)__P = __A;\n }\n \n /* Store four SPFP values in reverse order.  The address must be aligned.  */\n\nFrom-SVN: r265389", "tree": {"sha": "d2b73f29bb9bc05774205d8180f1ae6667af2986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2b73f29bb9bc05774205d8180f1ae6667af2986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddec5aea567a131daf0c5741d676d6f4a68ca45d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddec5aea567a131daf0c5741d676d6f4a68ca45d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddec5aea567a131daf0c5741d676d6f4a68ca45d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddec5aea567a131daf0c5741d676d6f4a68ca45d/comments", "author": null, "committer": null, "parents": [{"sha": "d78bcb133d4559273bf6f6125f2659354e3f505e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78bcb133d4559273bf6f6125f2659354e3f505e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78bcb133d4559273bf6f6125f2659354e3f505e"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "3549183e458b72072d364f93f13409f2adaf8b3b", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddec5aea567a131daf0c5741d676d6f4a68ca45d/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddec5aea567a131daf0c5741d676d6f4a68ca45d/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=ddec5aea567a131daf0c5741d676d6f4a68ca45d", "patch": "@@ -85,7 +85,7 @@ typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n typedef long long __m128i_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n typedef double __m128d_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n \n-/* Define two value permute mask */\n+/* Define two value permute mask.  */\n #define _MM_SHUFFLE2(x,y) (((x) << 1) | (y))\n \n /* Create a vector with element 0 as F and the rest zero.  */\n@@ -201,7 +201,7 @@ _mm_store_pd (double *__P, __m128d __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeu_pd (double *__P, __m128d __A)\n {\n-  *(__m128d *)__P = __A;\n+  *(__m128d_u *)__P = __A;\n }\n \n /* Stores the lower DPFP value.  */\n@@ -2177,7 +2177,7 @@ _mm_maskmoveu_si128 (__m128i __A, __m128i __B, char *__C)\n {\n   __v2du hibit = { 0x7f7f7f7f7f7f7f7fUL, 0x7f7f7f7f7f7f7f7fUL};\n   __v16qu mask, tmp;\n-  __m128i *p = (__m128i*)__C;\n+  __m128i_u *p = (__m128i_u*)__C;\n \n   tmp = (__v16qu)_mm_loadu_si128(p);\n   mask = (__v16qu)vec_cmpgt ((__v16qu)__B, (__v16qu)hibit);"}, {"sha": "a691712d4c8ceede26cb87410df6ed32a35c3733", "filename": "gcc/config/rs6000/xmmintrin.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddec5aea567a131daf0c5741d676d6f4a68ca45d/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddec5aea567a131daf0c5741d676d6f4a68ca45d/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h?ref=ddec5aea567a131daf0c5741d676d6f4a68ca45d", "patch": "@@ -85,6 +85,10 @@\n    vector types, and their scalar components.  */\n typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n \n+/* Unaligned version of the same type.  */\n+typedef float __m128_u __attribute__ ((__vector_size__ (16), __may_alias__,\n+\t\t\t\t       __aligned__ (1)));\n+\n /* Internal data types for implementing the intrinsics.  */\n typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n \n@@ -172,7 +176,7 @@ _mm_store_ps (float *__P, __m128 __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeu_ps (float *__P, __m128 __A)\n {\n-  *(__m128 *)__P = __A;\n+  *(__m128_u *)__P = __A;\n }\n \n /* Store four SPFP values in reverse order.  The address must be aligned.  */"}]}