{"sha": "fe6bd21a0bda55abf859223648f31710772eb1eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2YmQyMWEwYmRhNTVhYmY4NTkyMjM2NDhmMzE3MTA3NzJlYjFlYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-03-08T06:26:15Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-03-08T06:26:15Z"}, "message": "printers.py (NodeIteratorPrinter): New.\n\n2018-03-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* python/libstdcxx/v6/printers.py (NodeIteratorPrinter): New.\n\t(StdListIteratorPrinter): Inherit from latter.\n\t(StdFwdListIteratorPrinter): New, inherit from latter.\n\t(StdDebugIteratorPrinter.to_string): Use non-debug iterator printer\n\twhen iterator has no associated container.\n\t(build_libstdcxx_dictionary): Add __gnu_cxx::_Fwd_list_iterator and\n\t__gnu_cxx::_Fwd_list_const_iterator printers. Remove __norm namespace\n\tregistrations.\n\t* testsuite/libstdc++-prettyprinters/debug.cc: Adapt.\n\t* testsuite/libstdc++-prettyprinters/debug_cxx11.cc: Adapt.\n\nFrom-SVN: r258350", "tree": {"sha": "c8971f9b08ecacf0a0c34b693147b5c9e064415a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8971f9b08ecacf0a0c34b693147b5c9e064415a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe6bd21a0bda55abf859223648f31710772eb1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6bd21a0bda55abf859223648f31710772eb1eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6bd21a0bda55abf859223648f31710772eb1eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6bd21a0bda55abf859223648f31710772eb1eb/comments", "author": null, "committer": null, "parents": [{"sha": "1b1a188198d510bc7400386c9f7fea650d1d7aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1a188198d510bc7400386c9f7fea650d1d7aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1a188198d510bc7400386c9f7fea650d1d7aba"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "69c6ec6d29dd8952ec1d4ca00de41f104c7ad5d8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe6bd21a0bda55abf859223648f31710772eb1eb", "patch": "@@ -1,3 +1,16 @@\n+2018-03-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* python/libstdcxx/v6/printers.py (NodeIteratorPrinter): New.\n+\t(StdListIteratorPrinter): Inherit from latter.\n+\t(StdFwdListIteratorPrinter): New, inherit from latter.\n+\t(StdDebugIteratorPrinter.to_string): Use non-debug iterator printer\n+\twhen iterator has no associated container.\n+\t(build_libstdcxx_dictionary): Add __gnu_cxx::_Fwd_list_iterator and\n+\t__gnu_cxx::_Fwd_list_const_iterator printers. Remove __norm namespace\n+\tregistrations.\n+\t* testsuite/libstdc++-prettyprinters/debug.cc: Adapt.\n+\t* testsuite/libstdc++-prettyprinters/debug_cxx11.cc: Adapt.\n+\n 2018-03-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/84601"}, {"sha": "b5f76f20810f5831f0fad3c987379c4a214297c9", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=fe6bd21a0bda55abf859223648f31710772eb1eb", "patch": "@@ -249,21 +249,32 @@ def to_string(self):\n             return 'empty %s' % (self.typename)\n         return '%s' % (self.typename)\n \n-class StdListIteratorPrinter:\n-    \"Print std::list::iterator\"\n-\n-    def __init__(self, typename, val):\n+class NodeIteratorPrinter:\n+    def __init__(self, typename, val, contname):\n         self.val = val\n         self.typename = typename\n+        self.contname = contname\n \n     def to_string(self):\n         if not self.val['_M_node']:\n-            return 'non-dereferenceable iterator for std::list'\n+            return 'non-dereferenceable iterator for std::%s' % (self.contname)\n         nodetype = find_type(self.val.type, '_Node')\n         nodetype = nodetype.strip_typedefs().pointer()\n         node = self.val['_M_node'].cast(nodetype).dereference()\n         return str(get_value_from_list_node(node))\n \n+class StdListIteratorPrinter(NodeIteratorPrinter):\n+    \"Print std::list::iterator\"\n+\n+    def __init__(self, typename, val):\n+        NodeIteratorPrinter.__init__(self, typename, val, 'list')\n+\n+class StdFwdListIteratorPrinter(NodeIteratorPrinter):\n+    \"Print std::forward_list::iterator\"\n+\n+    def __init__(self, typename, val):\n+        NodeIteratorPrinter.__init__(self, typename, val, 'forward_list')\n+\n class StdSlistPrinter:\n     \"Print a __gnu_cxx::slist\"\n \n@@ -575,10 +586,12 @@ def __init__ (self, typename, val):\n     # and return the wrapped iterator value.\n     def to_string (self):\n         base_type = gdb.lookup_type('__gnu_debug::_Safe_iterator_base')\n+        itype = self.val.type.template_argument(0)\n         safe_seq = self.val.cast(base_type)['_M_sequence']\n-        if not safe_seq or self.val['_M_version'] != safe_seq['_M_version']:\n+        if not safe_seq:\n+            return str(self.val.cast(itype))\n+        if self.val['_M_version'] != safe_seq['_M_version']:\n             return \"invalid iterator\"\n-        itype = self.val.type.template_argument(0)\n         return str(self.val.cast(itype))\n \n def num_elements(num):\n@@ -1731,21 +1744,14 @@ def build_libstdcxx_dictionary ():\n                                       StdVectorIteratorPrinter)\n         libstdcxx_printer.add_version('__gnu_cxx::', '_Slist_iterator',\n                                       StdSlistIteratorPrinter)\n+        libstdcxx_printer.add_version('__gnu_cxx::', '_Fwd_list_iterator',\n+                                      StdFwdListIteratorPrinter)\n+        libstdcxx_printer.add_version('__gnu_cxx::', '_Fwd_list_const_iterator',\n+                                      StdFwdListIteratorPrinter)\n \n         # Debug (compiled with -D_GLIBCXX_DEBUG) printer\n-        # registrations.  The Rb_tree debug iterator when unwrapped\n-        # from the encapsulating __gnu_debug::_Safe_iterator does not\n-        # have the __norm namespace. Just use the existing printer\n-        # registration for that.\n+        # registrations.\n         libstdcxx_printer.add('__gnu_debug::_Safe_iterator',\n                               StdDebugIteratorPrinter)\n-        libstdcxx_printer.add('std::__norm::_List_iterator',\n-                              StdListIteratorPrinter)\n-        libstdcxx_printer.add('std::__norm::_List_const_iterator',\n-                              StdListIteratorPrinter)\n-        libstdcxx_printer.add('std::__norm::_Deque_const_iterator',\n-                              StdDequeIteratorPrinter)\n-        libstdcxx_printer.add('std::__norm::_Deque_iterator',\n-                              StdDequeIteratorPrinter)\n \n build_libstdcxx_dictionary ()"}, {"sha": "9f7f7631219c289b6972969c8dbc9bd7e5fc099e", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc?ref=fe6bd21a0bda55abf859223648f31710772eb1eb", "patch": "@@ -19,7 +19,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#define _GLIBCXX_DEBUG\n+#ifndef _GLIBCXX_DEBUG\n+# define _GLIBCXX_DEBUG\n+#endif\n \n #include <string>\n #include <deque>\n@@ -96,7 +98,7 @@ main()\n   v.push_back(1);\n   v.push_back(2);\n   std::vector<int>::iterator viter0;\n-// { dg-final { note-test viter0 {invalid iterator} } }\n+// { dg-final { note-test viter0 {non-dereferenceable iterator for std::vector} } }\n   std::vector<int>::iterator viter1 = v.begin();\n   std::vector<int>::iterator viter2 = viter1 + 1;\n   v.erase(viter1);"}, {"sha": "1990084e3e52dbbe34e616ddbee2909d187d9130", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug_cxx11.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6bd21a0bda55abf859223648f31710772eb1eb/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug_cxx11.cc?ref=fe6bd21a0bda55abf859223648f31710772eb1eb", "patch": "@@ -19,7 +19,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#define _GLIBCXX_DEBUG\n+#ifndef _GLIBCXX_DEBUG\n+# define _GLIBCXX_DEBUG\n+#endif\n \n #include <forward_list>\n #include <unordered_map>\n@@ -31,7 +33,7 @@ main()\n {\n   std::forward_list<std::string> flst;\n   std::forward_list<std::string>::iterator flstiter0;\n-// { dg-final { note-test flstiter0 {invalid iterator}} }\n+// { dg-final { note-test flstiter0 {non-dereferenceable iterator for std::forward_list}} }\n   flst.push_front(\"dum\");\n   std::forward_list<std::string>::iterator flstiter1 = flst.begin();\n // { dg-final { note-test *flstiter1 {\"dum\"}} }"}]}