{"sha": "f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyZTNkOGM5ZmZiODFkMjVkNGZkYmExMDA1NmNkMjE5N2UyMmQ2NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-18T08:45:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-18T08:45:19Z"}, "message": "array-bounds: Fix up ICE on overaligned variables [PR99109]\n\ncheck_mem_ref builds artificial arrays for variables that don't have\narray type.\nThe C standard says:\n\"For the purposes of these operators, a pointer to an object that is not an element of an\narray behaves the same as a pointer to the first element of an array of length one with the\ntype of the object as its element type.\"\nso it isn't completely wrong and does simplify the function.\nBut, layout_type can fail if the size of the element type is not a multiple\nof its alignment (i.e. overaligned types) and we then ICE because of that.\n\nThe following patch uses TYPE_MAIN_VARIANT in those cases instead, but only\nfor the types that need it, as for the diagnostics it is better to use the\ntypedef names etc. that were really used in the source if possible.\n\n2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99109\n\t* gimple-array-bounds.cc (build_zero_elt_array_type): Rename to ...\n\t(build_printable_array_type): ... this.  Add nelts argument.  For\n\toveraligned eltype, use TYPE_MAIN_VARIANT (eltype) instead.  If\n\tnelts, call build_array_type_nelts.\n\t(array_bounds_checker::check_mem_ref): Use build_printable_array_type\n\tinstead of build_zero_elt_array_type and build_array_type_nelts.\n\n\t* g++.dg/warn/Warray-bounds-17.C: New test.", "tree": {"sha": "a62c5274d39fbcae0077291f40e1553e72da3989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a62c5274d39fbcae0077291f40e1553e72da3989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "decd8fb0128870d0d768ba53dae626913d6d9c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decd8fb0128870d0d768ba53dae626913d6d9c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decd8fb0128870d0d768ba53dae626913d6d9c54"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "d7fd2c741110945829c76cb90e8ccdf24e96ac94", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "patch": "@@ -372,12 +372,23 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n   return warned;\n }\n \n-/* Hack around the internal representation constraints and build a zero\n-   element array type that actually renders as T[0] in diagnostcs.  */\n+/* Wrapper around build_array_type_nelts that makes sure the array\n+   can be created at all and handles zero sized arrays specially.  */\n \n static tree\n-build_zero_elt_array_type (tree eltype)\n+build_printable_array_type (tree eltype, unsigned HOST_WIDE_INT nelts)\n {\n+  if (TYPE_SIZE_UNIT (eltype)\n+      && TREE_CODE (TYPE_SIZE_UNIT (eltype)) == INTEGER_CST\n+      && !integer_zerop (TYPE_SIZE_UNIT (eltype))\n+      && TYPE_ALIGN_UNIT (eltype) > 1\n+      && wi::zext (wi::to_wide (TYPE_SIZE_UNIT (eltype)),\n+\t\t   ffs_hwi (TYPE_ALIGN_UNIT (eltype)) - 1) != 0)\n+    eltype = TYPE_MAIN_VARIANT (eltype);\n+\n+  if (nelts)\n+    return build_array_type_nelts (eltype, nelts);\n+\n   tree idxtype = build_range_type (sizetype, size_zero_node, NULL_TREE);\n   tree arrtype = build_array_type (eltype, idxtype);\n   arrtype = build_distinct_type_copy (TYPE_MAIN_VARIANT (arrtype));\n@@ -561,10 +572,7 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n \treturn false;\n \n       offset_int nelts = arrbounds[1] / eltsize;\n-      if (nelts == 0)\n-\treftype = build_zero_elt_array_type (reftype);\n-      else\n-\treftype = build_array_type_nelts (reftype, nelts.to_uhwi ());\n+      reftype = build_printable_array_type (reftype, nelts.to_uhwi ());\n     }\n   else if (TREE_CODE (arg) == ADDR_EXPR)\n     {\n@@ -675,7 +683,7 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n       /* Treat a reference to a non-array object as one to an array\n \t of a single element.  */\n       if (TREE_CODE (reftype) != ARRAY_TYPE)\n-\treftype = build_array_type_nelts (reftype, 1);\n+\treftype = build_printable_array_type (reftype, 1);\n \n       /* Extract the element type out of MEM_REF and use its size\n \t to compute the index to print in the diagnostic; arrays"}, {"sha": "64fbd080123404472883f46687cff0ef1ff6edd4", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-17.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72e3d8c9ffb81d25d4fdba10056cd2197e22d64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-17.C?ref=f72e3d8c9ffb81d25d4fdba10056cd2197e22d64", "patch": "@@ -0,0 +1,15 @@\n+// PR middle-end/99109\n+// { dg-do compile }\n+// { dg-options \"-O2 -Warray-bounds\" }\n+\n+typedef int A __attribute__((aligned (64)));\n+void foo (int *);\n+\n+void\n+bar (void)\n+{\n+  A b;\t\t\t// { dg-message \"while referencing\" }\n+  int *p = &b;\n+  int *x = (p - 1);\t// { dg-warning \"outside array bounds\" }\n+  foo (x);\n+}"}]}