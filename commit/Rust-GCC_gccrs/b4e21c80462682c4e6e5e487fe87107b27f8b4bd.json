{"sha": "b4e21c80462682c4e6e5e487fe87107b27f8b4bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMjFjODA0NjI2ODJjNGU2ZTVlNDg3ZmU4NzEwN2IyN2Y4YjRiZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-22T10:13:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-22T13:31:04Z"}, "message": "middle-end/101156 - remove not working optimization in gimplification\n\nThis removes a premature and not working optimization from the\ngimplifier.  When gimplification is requested not to produce a SSA\nname we try to avoid generating a copy when we did so anyway but\ninstead replace the LHS of its definition.  But that only works in\ncase there are no uses of the SSA name already which is something\nwe cannot easily check, so the following removes said optimization.\n\nStatistics on the whole bootstrap shows we hit this optimization\nonly for libiberty/cp-demangle.c and overall we have 21652112\ngimplifications where just 240 copies are elided.  Preserving\nthe optimization would require scanning the original expression\nand the pre and post sequences for SSA names and uses, that seems\nexcessive to avoid these 240 copies.\n\n2021-06-22  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/101156\n\t* gimplify.c (gimplify_expr): Remove premature incorrect\n\toptimization.\n\n\t* gcc.dg/pr101156.c: New testcase.", "tree": {"sha": "d61d2d580aa7b0f7edbcb668f2aacdca003289af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d61d2d580aa7b0f7edbcb668f2aacdca003289af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e21c80462682c4e6e5e487fe87107b27f8b4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e21c80462682c4e6e5e487fe87107b27f8b4bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e21c80462682c4e6e5e487fe87107b27f8b4bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e21c80462682c4e6e5e487fe87107b27f8b4bd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3adb9ac6626c15ba21e4eaf27fec95688a3ca8c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adb9ac6626c15ba21e4eaf27fec95688a3ca8c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adb9ac6626c15ba21e4eaf27fec95688a3ca8c2"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "21e7a6cc959052fd48d54b9500f704dc6e7da646", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e21c80462682c4e6e5e487fe87107b27f8b4bd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e21c80462682c4e6e5e487fe87107b27f8b4bd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b4e21c80462682c4e6e5e487fe87107b27f8b4bd", "patch": "@@ -15128,24 +15128,11 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t       bool (*gimple_test_f) (tree), fallback_t fallback,\n \t       bool allow_ssa)\n {\n-  bool was_ssa_name_p = TREE_CODE (*expr_p) == SSA_NAME;\n   enum gimplify_status ret = gimplify_expr (expr_p, pre_p, post_p,\n \t\t\t\t\t    gimple_test_f, fallback);\n   if (! allow_ssa\n       && TREE_CODE (*expr_p) == SSA_NAME)\n-    {\n-      tree name = *expr_p;\n-      if (was_ssa_name_p)\n-\t*expr_p = get_initialized_tmp_var (*expr_p, pre_p, NULL, false);\n-      else\n-\t{\n-\t  /* Avoid the extra copy if possible.  */\n-\t  *expr_p = create_tmp_reg (TREE_TYPE (name));\n-\t  if (!gimple_nop_p (SSA_NAME_DEF_STMT (name)))\n-\t    gimple_set_lhs (SSA_NAME_DEF_STMT (name), *expr_p);\n-\t  release_ssa_name (name);\n-\t}\n-    }\n+    *expr_p = get_initialized_tmp_var (*expr_p, pre_p, NULL, false);\n   return ret;\n }\n "}, {"sha": "5c25bd78a0219ed81c0f46232274b818fb5b0b72", "filename": "gcc/testsuite/gcc.dg/pr101156.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e21c80462682c4e6e5e487fe87107b27f8b4bd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101156.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e21c80462682c4e6e5e487fe87107b27f8b4bd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101156.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101156.c?ref=b4e21c80462682c4e6e5e487fe87107b27f8b4bd", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fchecking\" } */\n+\n+struct S { int i; };\n+void baz(struct S *p)\n+{\n+  __builtin_setjmp(p--);\n+}"}]}