{"sha": "312aea7f99c563d62878f20ab39985b2a514c586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyYWVhN2Y5OWM1NjNkNjI4NzhmMjBhYjM5OTg1YjJhNTE0YzU4Ng==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-08-12T14:28:15Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-08-12T14:28:15Z"}, "message": "Remove interchange heuristic.\n\n2009-08-11  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-interchange.c (compute_subscript): Removed.\n\t(compute_array_size_cstr): Removed.\n\t(compute_array_size_poly): Removed.\n\t(compute_array_size): Removed.\n\t(gather_access_strides_poly): Removed.\n\t(gather_access_strides): Empty.\n\nFrom-SVN: r150691", "tree": {"sha": "db3be2706b7388eabedb6a22985caea2684813f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3be2706b7388eabedb6a22985caea2684813f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312aea7f99c563d62878f20ab39985b2a514c586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312aea7f99c563d62878f20ab39985b2a514c586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312aea7f99c563d62878f20ab39985b2a514c586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312aea7f99c563d62878f20ab39985b2a514c586/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25d7cc15a898555ce427133cbf620ee1b9dea18b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d7cc15a898555ce427133cbf620ee1b9dea18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d7cc15a898555ce427133cbf620ee1b9dea18b"}], "stats": {"total": 250, "additions": 22, "deletions": 228}, "files": [{"sha": "3daa25474ee71c63f06697ad5a58016e5a9bd2de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312aea7f99c563d62878f20ab39985b2a514c586/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312aea7f99c563d62878f20ab39985b2a514c586/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=312aea7f99c563d62878f20ab39985b2a514c586", "patch": "@@ -1,3 +1,12 @@\n+2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-interchange.c (compute_subscript): Removed.\n+\t(compute_array_size_cstr): Removed.\n+\t(compute_array_size_poly): Removed.\n+\t(compute_array_size): Removed.\n+\t(gather_access_strides_poly): Removed.\n+\t(gather_access_strides): Empty.\n+\n 2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (dependence_polyhedron_1): Replace"}, {"sha": "cf6790813b357f246394c952752c746de4ef84d9", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312aea7f99c563d62878f20ab39985b2a514c586/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312aea7f99c563d62878f20ab39985b2a514c586/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=312aea7f99c563d62878f20ab39985b2a514c586", "patch": "@@ -1,3 +1,12 @@\n+2009-08-11  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-interchange.c (compute_subscript): Removed.\n+\t(compute_array_size_cstr): Removed.\n+\t(compute_array_size_poly): Removed.\n+\t(compute_array_size): Removed.\n+\t(gather_access_strides_poly): Removed.\n+\t(gather_access_strides): Empty.\n+\n 2009-08-11  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (dependence_polyhedron_1): Replace"}, {"sha": "af87ffb1ad2b9d4398a4583862d776a4ab0becb0", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 4, "deletions": 228, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312aea7f99c563d62878f20ab39985b2a514c586/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312aea7f99c563d62878f20ab39985b2a514c586/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=312aea7f99c563d62878f20ab39985b2a514c586", "patch": "@@ -53,239 +53,15 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphite.h\"\n #include \"graphite-poly.h\"\n \n-/* Returns the subscript dimension defined by CSTR in PDR.  */\n-\n-static ppl_dimension_type\n-compute_subscript (poly_dr_p pdr, ppl_const_Constraint_t cstr)\n-{\n-  graphite_dim_t i;\n-  ppl_Linear_Expression_t expr;\n-  ppl_Coefficient_t coef;\n-  Value val;\n-\n-  value_init (val);\n-  ppl_new_Coefficient (&coef);\n-\n-  for (i = 0; i < pdr_nb_subscripts (pdr); i++)\n-    {\n-      ppl_dimension_type sub_dim = pdr_subscript_dim (pdr, i);\n-\n-      ppl_new_Linear_Expression_from_Constraint (&expr, cstr);\n-      ppl_Linear_Expression_coefficient (expr, sub_dim, coef);\n-      ppl_delete_Linear_Expression (expr);\n-      ppl_Coefficient_to_mpz_t (coef, val);\n-\n-      if (value_notzero_p (val))\n-\t{\n-\t  gcc_assert (value_one_p (val)\n-\t\t      || value_mone_p (val));\n-\n-\t  value_clear (val);\n-\t  ppl_delete_Coefficient (coef);\n-\t  return sub_dim;\n-\t}\n-    }\n-\n-  gcc_unreachable ();\n-  return 0;\n-}\n-\n-static void\n-compute_array_size_cstr (ppl_dimension_type sub_dim, Value res,\n-\t\t\t ppl_const_Constraint_t cstr)\n-{\n-  ppl_Linear_Expression_t expr;\n-  ppl_Coefficient_t coef;\n-  Value val;\n-\n-  value_init (val);\n-  ppl_new_Coefficient (&coef);\n-  ppl_new_Linear_Expression_from_Constraint (&expr, cstr);\n-  ppl_Linear_Expression_coefficient (expr, sub_dim, coef);\n-  ppl_Coefficient_to_mpz_t (coef, val);\n-\n-  value_set_si (res, 0);\n-\n-  if (value_notzero_p (val))\n-    {\n-      gcc_assert (value_one_p (val) || value_mone_p (val));\n-      ppl_Linear_Expression_inhomogeneous_term (expr, coef);\n-      ppl_Coefficient_to_mpz_t (coef, res);\n-      value_absolute (res, res);\n-    }\n-\n-  value_clear (val);\n-  ppl_delete_Coefficient (coef);\n-  ppl_delete_Linear_Expression (expr);\n-}\n-\n-/* Returns in ARRAY_SIZE the size in bytes of the array PDR for the\n-   subscript at dimension SUB_DIM.  */\n-\n-static void\n-compute_array_size_poly (poly_dr_p pdr, ppl_dimension_type sub_dim, Value array_size,\n-\t\t\t ppl_const_Polyhedron_t ph)\n-{\n-  ppl_const_Constraint_System_t pcs;\n-  ppl_Constraint_System_const_iterator_t cit, cend;\n-  ppl_const_Constraint_t cstr;\n-  Value val;\n-  Value res;\n-\n-  if (sub_dim >= pdr_subscript_dim (pdr, pdr_nb_subscripts (pdr)))\n-    {\n-      value_set_si (array_size, 1);\n-      return;\n-    }\n-\n-  value_init (val);\n-  value_init (res);\n-\n-  value_set_si (res, 0);\n-\n-  ppl_Polyhedron_get_constraints (ph, &pcs);\n-  ppl_new_Constraint_System_const_iterator (&cit);\n-  ppl_new_Constraint_System_const_iterator (&cend);\n-      \n-  for (ppl_Constraint_System_begin (pcs, cit),\n-\t ppl_Constraint_System_end (pcs, cend);\n-       !ppl_Constraint_System_const_iterator_equal_test (cit, cend);\n-       ppl_Constraint_System_const_iterator_increment (cit))\n-    {\n-      ppl_Constraint_System_const_iterator_dereference (cit, &cstr);\n-\n-      if (ppl_Constraint_type (cstr) == PPL_CONSTRAINT_TYPE_EQUAL)\n-\tcontinue;\n-\n-      compute_array_size_cstr (sub_dim, val, cstr);\n-      value_max (res, res, val);\n-    }\n-\n-  compute_array_size_poly (pdr, sub_dim + 1, val, ph);\n-  value_multiply (array_size, res, val);\n-\n-  value_clear (res);\n-  value_clear (val);\n-}\n-\n-/* Initializes ARRAY_SIZE, the size in bytes of the array for the\n-   subscript at dimension SUB_DIM in PDR.  */\n-\n-static void\n-compute_array_size (poly_dr_p pdr, ppl_dimension_type sub_dim, Value array_size)\n-{\n-  ppl_Pointset_Powerset_C_Polyhedron_t data_container = PDR_ACCESSES (pdr);\n-  ppl_Pointset_Powerset_C_Polyhedron_iterator_t it, end;\n-  Value val;\n-\n-  value_set_si (array_size, 1);\n-  if (sub_dim >= pdr_subscript_dim (pdr, pdr_nb_subscripts (pdr)))\n-    return;\n-\n-  value_init (val);\n-  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&it);\n-  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&end);\n-\n-  for (ppl_Pointset_Powerset_C_Polyhedron_iterator_begin (data_container, it),\n-       ppl_Pointset_Powerset_C_Polyhedron_iterator_end (data_container, end);\n-       !ppl_Pointset_Powerset_C_Polyhedron_iterator_equal_test (it, end);\n-       ppl_Pointset_Powerset_C_Polyhedron_iterator_increment (it))\n-    {\n-      ppl_const_Polyhedron_t ph;\n-\n-      ppl_Pointset_Powerset_C_Polyhedron_iterator_dereference (it, &ph);\n-      compute_array_size_poly (pdr, sub_dim, val, ph);\n-      value_max (array_size, array_size, val);\n-    }\n-\n-  value_clear (val);\n-  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (it);\n-  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (end);\n-}\n-\n /* Computes ACCESS_STRIDES, the sum of all the strides of PDR at\n    LOOP_DEPTH.  */\n \n static void\n-gather_access_strides_poly (poly_dr_p pdr, ppl_const_Polyhedron_t ph,\n-\t\t\t    ppl_dimension_type loop_dim, Value res)\n+gather_access_strides (poly_dr_p pdr ATTRIBUTE_UNUSED,\n+\t\t       graphite_dim_t loop_depth ATTRIBUTE_UNUSED,\n+\t\t       Value access_strides ATTRIBUTE_UNUSED)\n {\n-  ppl_const_Constraint_System_t pcs;\n-  ppl_Constraint_System_const_iterator_t cit, cend;\n-  ppl_const_Constraint_t cstr;\n-  ppl_Linear_Expression_t expr;\n-  ppl_Coefficient_t coef;\n-  Value stride;\n-  Value array_size;\n-\n-  value_init (array_size);\n-  value_init (stride);\n-  ppl_new_Coefficient (&coef);\n-  value_set_si (res, 0);\n-\n-  ppl_Polyhedron_get_constraints (ph, &pcs);\n-  ppl_new_Constraint_System_const_iterator (&cit);\n-  ppl_new_Constraint_System_const_iterator (&cend);\n-\n-  for (ppl_Constraint_System_begin (pcs, cit),\n-\t ppl_Constraint_System_end (pcs, cend);\n-       !ppl_Constraint_System_const_iterator_equal_test (cit, cend);\n-       ppl_Constraint_System_const_iterator_increment (cit))\n-    {\n-      ppl_Constraint_System_const_iterator_dereference (cit, &cstr);\n-      ppl_new_Linear_Expression_from_Constraint (&expr, cstr);\n-      ppl_Linear_Expression_coefficient (expr, loop_dim, coef);\n-      ppl_delete_Linear_Expression (expr);\n-      ppl_Coefficient_to_mpz_t (coef, stride);\n-\n-      if (value_zero_p (stride))\n-\tcontinue;\n-\n-      value_absolute (stride, stride);\n-      compute_array_size (pdr, compute_subscript (pdr, cstr), array_size);\n-      value_multiply (stride, stride, array_size);\n-      value_addto (res, res, stride);\n-    }\n-\n-  value_clear (array_size);\n-  value_clear (stride);\n-  ppl_delete_Coefficient (coef);\n-  ppl_delete_Constraint_System_const_iterator (cit);\n-  ppl_delete_Constraint_System_const_iterator (cend);\n-}\n-\n-/* Computes ACCESS_STRIDES, the sum of all the strides of PDR at\n-   LOOP_DEPTH.  */\n-\n-static void\n-gather_access_strides (poly_dr_p pdr, graphite_dim_t loop_depth,\n-\t\t       Value access_strides)\n-{\n-  ppl_dimension_type loop_dim = pdr_iterator_dim (pdr, loop_depth);\n-\n-  ppl_Pointset_Powerset_C_Polyhedron_t accesses = PDR_ACCESSES (pdr);\n-  ppl_Pointset_Powerset_C_Polyhedron_iterator_t it, end;\n-  Value res;\n-\n-  value_init (res);\n-  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&it);\n-  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&end);\n-\n-  for (ppl_Pointset_Powerset_C_Polyhedron_iterator_begin (accesses, it),\n-       ppl_Pointset_Powerset_C_Polyhedron_iterator_end (accesses, end);\n-       !ppl_Pointset_Powerset_C_Polyhedron_iterator_equal_test (it, end);\n-       ppl_Pointset_Powerset_C_Polyhedron_iterator_increment (it))\n-    {\n-      ppl_const_Polyhedron_t ph;\n-\n-      ppl_Pointset_Powerset_C_Polyhedron_iterator_dereference (it, &ph);\n-      gather_access_strides_poly (pdr, ph, loop_dim, res);\n-      value_addto (access_strides, access_strides, res);\n-    }\n-\n-  value_clear (res);\n-  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (it);\n-  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (end);\n+  /* Empty for now.  */\n }\n \n /* Returns true when it is profitable to interchange loop at depth1"}]}