{"sha": "25f409344c22aedf9eb2d939b79d8750d0b00163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmNDA5MzQ0YzIyYWVkZjllYjJkOTM5Yjc5ZDg3NTBkMGIwMDE2Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-31T17:22:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-31T17:22:30Z"}, "message": "dwarf2out.c (DWARF_LARGEST_DATA_FORM_BITS): Define.\n\n\t* dwarf2out.c (DWARF_LARGEST_DATA_FORM_BITS): Define.\n\t(size_of_die, value_format, output_die): Use\n\tDW_FORM_data16 for 128-bit dw_val_class_const_double or\n\tdw_val_class_wide_int.\n\nFrom-SVN: r241714", "tree": {"sha": "4fdf7d74500707383ec007d4471abc28e37b3042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fdf7d74500707383ec007d4471abc28e37b3042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25f409344c22aedf9eb2d939b79d8750d0b00163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f409344c22aedf9eb2d939b79d8750d0b00163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f409344c22aedf9eb2d939b79d8750d0b00163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f409344c22aedf9eb2d939b79d8750d0b00163/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7786b6aca266876a3a8fbed7c180f17741d6ce61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7786b6aca266876a3a8fbed7c180f17741d6ce61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7786b6aca266876a3a8fbed7c180f17741d6ce61"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "6ac3d5b8d7505d86cb55d58fdbb2c28b26c02c2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f409344c22aedf9eb2d939b79d8750d0b00163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f409344c22aedf9eb2d939b79d8750d0b00163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25f409344c22aedf9eb2d939b79d8750d0b00163", "patch": "@@ -1,5 +1,10 @@\n 2016-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (DWARF_LARGEST_DATA_FORM_BITS): Define.\n+\t(size_of_die, value_format, output_die): Use\n+\tDW_FORM_data16 for 128-bit dw_val_class_const_double or\n+\tdw_val_class_wide_int.\n+\n \t* dwarf2out.c (dwarf_op): Renamed to ...\n \t(dwarf_OP): ... this.\n \t(convert_descriptor_to_mode, scompare_loc_descriptor,"}, {"sha": "533a6575d3519f811e03c413d4827c2c1b70fa8b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f409344c22aedf9eb2d939b79d8750d0b00163/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f409344c22aedf9eb2d939b79d8750d0b00163/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=25f409344c22aedf9eb2d939b79d8750d0b00163", "patch": "@@ -1517,6 +1517,12 @@ loc_list_plus_const (dw_loc_list_ref list_head, HOST_WIDE_INT offset)\n #define DWARF_REF_SIZE\t\\\n   (dwarf_version == 2 ? DWARF2_ADDR_SIZE : DWARF_OFFSET_SIZE)\n \n+/* The number of bits that can be encoded by largest DW_FORM_dataN.\n+   In DWARF4 and earlier it is DW_FORM_data8 with 64 bits, in DWARF5\n+   DW_FORM_data16 with 128 bits.  */\n+#define DWARF_LARGEST_DATA_FORM_BITS \\\n+  (dwarf_version >= 5 ? 128 : 64)\n+\n /* Utility inline function for construction of ops that were GNU extension\n    before DWARF 5.  */\n static inline enum dwarf_location_atom\n@@ -8755,14 +8761,14 @@ size_of_die (dw_die_ref die)\n \t  break;\n \tcase dw_val_class_const_double:\n \t  size += HOST_BITS_PER_DOUBLE_INT / HOST_BITS_PER_CHAR;\n-\t  if (HOST_BITS_PER_WIDE_INT >= 64)\n+\t  if (HOST_BITS_PER_WIDE_INT >= DWARF_LARGEST_DATA_FORM_BITS)\n \t    size++; /* block */\n \t  break;\n \tcase dw_val_class_wide_int:\n \t  size += (get_full_len (*a->dw_attr_val.v.val_wide)\n \t\t   * HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR);\n-\t  if (get_full_len (*a->dw_attr_val.v.val_wide) * HOST_BITS_PER_WIDE_INT\n-\t      > 64)\n+\t  if (get_full_len (*a->dw_attr_val.v.val_wide)\n+\t      * HOST_BITS_PER_WIDE_INT > DWARF_LARGEST_DATA_FORM_BITS)\n \t    size++; /* block */\n \t  break;\n \tcase dw_val_class_vec:\n@@ -9147,6 +9153,9 @@ value_format (dw_attr_node *a)\n \tcase 32:\n \t  return DW_FORM_data8;\n \tcase 64:\n+\t  if (dwarf_version >= 5)\n+\t    return DW_FORM_data16;\n+\t  /* FALLTHRU */\n \tdefault:\n \t  return DW_FORM_block1;\n \t}\n@@ -9161,6 +9170,10 @@ value_format (dw_attr_node *a)\n \t  return DW_FORM_data4;\n \tcase 64:\n \t  return DW_FORM_data8;\n+\tcase 128:\n+\t  if (dwarf_version >= 5)\n+\t    return DW_FORM_data16;\n+\t  /* FALLTHRU */\n \tdefault:\n \t  return DW_FORM_block1;\n \t}\n@@ -9634,7 +9647,7 @@ output_die (dw_die_ref die)\n \t  {\n \t    unsigned HOST_WIDE_INT first, second;\n \n-\t    if (HOST_BITS_PER_WIDE_INT >= 64)\n+\t    if (HOST_BITS_PER_WIDE_INT >= DWARF_LARGEST_DATA_FORM_BITS)\n \t      dw2_asm_output_data (1,\n \t\t\t\t   HOST_BITS_PER_DOUBLE_INT\n \t\t\t\t   / HOST_BITS_PER_CHAR,\n@@ -9663,9 +9676,9 @@ output_die (dw_die_ref die)\n \t    int i;\n \t    int len = get_full_len (*a->dw_attr_val.v.val_wide);\n \t    int l = HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR;\n-\t    if (len * HOST_BITS_PER_WIDE_INT > 64)\n-\t      dw2_asm_output_data (1, get_full_len (*a->dw_attr_val.v.val_wide) * l,\n-\t\t\t\t   NULL);\n+\t    if (len * HOST_BITS_PER_WIDE_INT > DWARF_LARGEST_DATA_FORM_BITS)\n+\t      dw2_asm_output_data (1, get_full_len (*a->dw_attr_val.v.val_wide)\n+\t\t\t\t      * l, NULL);\n \n \t    if (WORDS_BIG_ENDIAN)\n \t      for (i = len - 1; i >= 0; --i)"}]}