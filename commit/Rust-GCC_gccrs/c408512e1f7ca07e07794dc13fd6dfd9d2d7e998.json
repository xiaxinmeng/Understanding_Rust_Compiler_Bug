{"sha": "c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwODUxMmUxZjdjYTA3ZTA3Nzk0ZGMxM2ZkNmRmZDlkMmQ3ZTk5OA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-03-02T12:20:13Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-09T13:08:44Z"}, "message": "amdgcn: Enable OpenACC worker partitioning for AMD GCN\n\n\tgcc/\n\t* config/gcn/gcn.c (gcn_init_builtins): Override decls for\n\tBUILT_IN_GOACC_SINGLE_START, BUILT_IN_GOACC_SINGLE_COPY_START,\n\tBUILT_IN_GOACC_SINGLE_COPY_END and BUILT_IN_GOACC_BARRIER.\n\t(gcn_goacc_validate_dims): Turn on worker partitioning unconditionally.\n\t(gcn_fork_join): Update comment.\n\t* config/gcn/gcn.opt (flag_worker_partitioning): Remove.\n\t(macc_experimental_workers): Remove unused option.\n\tlibgomp/\n\t* plugin/plugin-gcn.c (gcn_exec): Change default number of workers to\n\t16.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c\n\t[acc_device_radeon]: Update.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c\n\t[ACC_DEVICE_TYPE_radeon]: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c\n\t[acc_device_radeon]: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c\n\t[ACC_DEVICE_TYPE_radeon]: Likewise.\n\t* testsuite/libgomp.oacc-fortran/optional-reduction.f90: XFAIL for\n\t'openacc_radeon_accel_selected' and '-O0'.\n\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: Likewise.\n\nCo-Authored-By: Kwok Cheung Yeung <kcy@codesourcery.com>\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "d0be85d6571a5fbef57922c264ede5ebae87ddc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0be85d6571a5fbef57922c264ede5ebae87ddc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a58ed6dc5293602d0d168475109caa81ad0f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a58ed6dc5293602d0d168475109caa81ad0f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a58ed6dc5293602d0d168475109caa81ad0f0d"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "9df282774989d16b35e4e78ea9a80053cfb26ebb", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -3712,8 +3712,6 @@ gcn_init_builtins (void)\n       TREE_NOTHROW (gcn_builtin_decls[i]) = 1;\n     }\n \n-/* FIXME: remove the ifdef once OpenACC support is merged upstream.  */\n-#ifdef BUILT_IN_GOACC_SINGLE_START\n   /* These builtins need to take/return an LDS pointer: override the generic\n      versions here.  */\n \n@@ -3730,7 +3728,6 @@ gcn_init_builtins (void)\n \n   set_builtin_decl (BUILT_IN_GOACC_BARRIER,\n \t\t    gcn_builtin_decls[GCN_BUILTIN_ACC_BARRIER], false);\n-#endif\n }\n \n /* Implement TARGET_INIT_LIBFUNCS.  */\n@@ -5019,11 +5016,7 @@ gcn_goacc_validate_dims (tree decl, int dims[], int fn_level,\n \t\t\t unsigned /*used*/)\n {\n   bool changed = false;\n-\n-  /* FIXME: remove -facc-experimental-workers when they're ready.  */\n-  int max_workers = flag_worker_partitioning ? 16 : 1;\n-\n-  gcc_assert (!flag_worker_partitioning);\n+  const int max_workers = 16;\n \n   /* The vector size must appear to be 64, to the user, unless this is a\n      SEQ routine.  The real, internal value is always 1, which means use\n@@ -5060,8 +5053,7 @@ gcn_goacc_validate_dims (tree decl, int dims[], int fn_level,\n     {\n       dims[GOMP_DIM_VECTOR] = GCN_DEFAULT_VECTORS;\n       if (dims[GOMP_DIM_WORKER] < 0)\n-\tdims[GOMP_DIM_WORKER] = (flag_worker_partitioning\n-\t\t\t\t ? GCN_DEFAULT_WORKERS : 1);\n+\tdims[GOMP_DIM_WORKER] = GCN_DEFAULT_WORKERS;\n       if (dims[GOMP_DIM_GANG] < 0)\n \tdims[GOMP_DIM_GANG] = GCN_DEFAULT_GANGS;\n       changed = true;\n@@ -5126,8 +5118,7 @@ static bool\n gcn_fork_join (gcall *ARG_UNUSED (call), const int *ARG_UNUSED (dims),\n \t       bool ARG_UNUSED (is_fork))\n {\n-  /* GCN does not use the fork/join concept invented for NVPTX.\n-     Instead we use standard autovectorization.  */\n+  /* GCN does not need to expand fork/join markers at the RTL level.  */\n   return false;\n }\n "}, {"sha": "6faacca42bbb063a5d0358a1d7092f32eaf8573c", "filename": "gcc/config/gcn/gcn.opt", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.opt?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -62,11 +62,6 @@ bool flag_bypass_init_error = false\n mbypass-init-error\n Target RejectNegative Var(flag_bypass_init_error)\n \n-bool flag_worker_partitioning = false\n-\n-macc-experimental-workers\n-Target Var(flag_worker_partitioning) Init(0)\n-\n int stack_size_opt = -1\n \n mstack-size="}, {"sha": "9e7377c91f9489aa94be23270efee29dbdfe8c49", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -3038,8 +3038,7 @@ gcn_exec (struct kernel_info *kernel, size_t mapnum, void **hostaddrs,\n      64 gangs matches a typical Fiji device.  */\n \n   if (dims[0] == 0) dims[0] = get_cu_count (kernel->agent); /* Gangs.  */\n-  /* NOTE: Until support for middle-end worker partitioning is merged, force 'num_workers (1)'.  */\n-  if (/*TODO dims[1] == 0*/ true) dims[1] = 1;  /* Workers.  */\n+  if (dims[1] == 0) dims[1] = 16; /* Workers.  */\n \n   /* The incoming dimensions are expressed in terms of gangs, workers, and\n      vectors.  The HSA dimensions are expressed in terms of \"work-items\","}, {"sha": "ad33f72e2fb6b24658b54b01f83d60f5da02b6b5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -93,9 +93,6 @@ static void cb_enqueue_launch_start (acc_prof_info *prof_info, acc_event_info *e\n     }\n   if (num_workers < 1)\n     assert (event_info->launch_event.num_workers >= 1);\n-  /* GCN currently enforces 'num_workers (1)'.  */\n-  else if (acc_device_type == acc_device_radeon)\n-    assert (event_info->launch_event.num_workers == 1);\n   else\n     {\n #ifdef __OPTIMIZE__"}, {"sha": "419bc33ad536ee2cbd690f81957f4f6508eeee7f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -132,9 +132,7 @@ int main ()\n   /* AMD GCN uses the autovectorizer for the vector dimension: the use\n      of a function call in vector-partitioned code in this test is not\n      currently supported.  */\n-  /* AMD GCN does not currently support multiple workers.  This should be\n-     set to 16 when that changes.  */\n-  return test_1 (16, 1, 1);\n+  return test_1 (16, 16, 1);\n #else\n   return test_1 (16, 16, 32);\n #endif"}, {"sha": "9392e1d88c5862831fb5e0cc17dceb9603fc0189", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -261,9 +261,8 @@ int main ()\n \t}\n       else if (acc_on_device (acc_device_radeon))\n \t{\n-\t  /* The GCC GCN back end is limited to num_workers (16).\n-\t     Temporarily set this to 1 until multiple workers are permitted. */\n-\t  workers_actual = 1; // 16;\n+\t  /* The GCC GCN back end is limited to num_workers (16).  */\n+\t  workers_actual = 16;\n \t}\n       else\n \t__builtin_abort ();\n@@ -313,9 +312,8 @@ int main ()\n \t}\n       else if (acc_on_device (acc_device_radeon))\n \t{\n-\t  /* The GCC GCN back end is limited to num_workers (16).\n-\t     Temporarily set this to 1 until multiple workers are permitted. */\n-\t  workers_actual = 1; // 16;\n+\t  /* The GCC GCN back end is limited to num_workers (16).  */\n+\t  workers_actual = 16;\n \t}\n       else\n \t__builtin_abort ();\n@@ -465,8 +463,6 @@ int main ()\n \t}\n       else if (acc_on_device (acc_device_radeon))\n \t{\n-\t  /* Temporary setting, until multiple workers are permitted.  */\n-\t  workers_actual = 1;\n \t  /* See above comments about GCN vectors_actual.  */\n \t  vectors_actual = 1;\n \t}"}, {"sha": "4f88b1c0779037bd4a6ae3be6b26ef0b2c56a640", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -5,12 +5,13 @@\n #include <openacc.h>\n #include <gomp-constants.h>\n \n+#define NUM_WORKERS 16\n #ifdef ACC_DEVICE_TYPE_radeon\n-/* Temporarily set this to 1 until multiple workers are permitted.  */\n-#define NUM_WORKERS 1\n+/* AMD GCN uses the autovectorizer for the vector dimension: the use\n+   of a function call in vector-partitioned code in this test is not\n+   currently supported.  */\n #define NUM_VECTORS 1\n #else\n-#define NUM_WORKERS 16\n #define NUM_VECTORS 32\n #endif\n #define WIDTH 64"}, {"sha": "69b69b66c71ae15a9e319c6129ad24c6a859ddbd", "filename": "libgomp/testsuite/libgomp.oacc-fortran/optional-reduction.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-reduction.f90?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -4,6 +4,9 @@\n \n ! { dg-do run }\n \n+!TODO\n+! { dg-xfail-run-if TODO { openacc_radeon_accel_selected && { ! __OPTIMIZE__ } } }\n+\n program optional_reduction\n   implicit none\n "}, {"sha": "a8b0c60e420b63de1553bcde197784303edb1120", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-7.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90?ref=c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "patch": "@@ -1,5 +1,8 @@\n ! { dg-do run }\n \n+!TODO\n+! { dg-xfail-run-if TODO { openacc_radeon_accel_selected && { ! __OPTIMIZE__ } } }\n+\n ! subroutine reduction with private and firstprivate variables\n \n program reduction"}]}