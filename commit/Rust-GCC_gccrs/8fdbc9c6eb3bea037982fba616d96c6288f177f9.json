{"sha": "8fdbc9c6eb3bea037982fba616d96c6288f177f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkYmM5YzZlYjNiZWEwMzc5ODJmYmE2MTZkOTZjNjI4OGYxNzdmOQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-06-20T10:26:45Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-06-20T10:26:45Z"}, "message": "re PR tree-optimization/27331 (segfault in fold_convert with -ftree-vectorize)\n\n\tPR tree-optimization/27331\n\t* tree-data-ref.c (free_data_ref): New function.\n\t(create_data_ref): Fail if the data reference has unknown access\n\tfunction.\n\t(free_data_refs): Use free_data_ref.\n\n\t* gcc.dg/pr27331.c: New test.\n\nFrom-SVN: r114810", "tree": {"sha": "8accfb5818191f82ed0722bcd3e7a5510b332100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8accfb5818191f82ed0722bcd3e7a5510b332100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fdbc9c6eb3bea037982fba616d96c6288f177f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdbc9c6eb3bea037982fba616d96c6288f177f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fdbc9c6eb3bea037982fba616d96c6288f177f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdbc9c6eb3bea037982fba616d96c6288f177f9/comments", "author": null, "committer": null, "parents": [{"sha": "fe5568e99010574916f5b2607a173a34f2340891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5568e99010574916f5b2607a173a34f2340891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5568e99010574916f5b2607a173a34f2340891"}], "stats": {"total": 104, "additions": 95, "deletions": 9}, "files": [{"sha": "aec8a3fe6ddce37e877ade076b3d1b3a55c0c34b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fdbc9c6eb3bea037982fba616d96c6288f177f9", "patch": "@@ -1,3 +1,11 @@\n+2006-06-20  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/27331\n+\t* tree-data-ref.c (free_data_ref): New function.\n+\t(create_data_ref): Fail if the data reference has unknown access\n+\tfunction.\n+\t(free_data_refs): Use free_data_ref.\n+\n 2006-06-19  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR middle-end/28075"}, {"sha": "5491dbeede1a0aa677f00c9003300e2b70d40945", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fdbc9c6eb3bea037982fba616d96c6288f177f9", "patch": "@@ -1,5 +1,10 @@\n+2006-06-20  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/27331\n+\t* gcc.dg/pr27331.c: New test.\n+\n 2006-06-20  James A. Morrison  <phython@gcc.gnu.org>\n-            Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/18692\n \t* lib/gnat.exp: New file."}, {"sha": "9b5c71e843769d25f5ce74312c1eec5b0abed4de", "filename": "gcc/testsuite/gcc.dg/pr27331.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27331.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27331.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27331.c?ref=8fdbc9c6eb3bea037982fba616d96c6288f177f9", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+struct funny_match\n+{\n+  int this, other;\n+};\n+\n+typedef struct rtx {\n+    int code;\n+} *rtx;\n+\n+extern rtx recog_operand[];\n+extern int which_alternative;\n+extern int nalternatives;\n+\n+int\n+constrain_operands (insn_code_num, strict)\n+     int insn_code_num;\n+     int strict;\n+{\n+  char *constraints[10];\n+  struct funny_match funny_match[10];\n+  register int c;\n+  int funny_match_index;\n+\n+  which_alternative = 0;\n+\n+  while (which_alternative < nalternatives)\n+    {\n+      register int opno;\n+      register char *p = constraints[opno];\n+      int lose = 0;\n+      funny_match_index = 0;\n+\n+      while (*p && (c = *p++) != ',')\n+\tfunny_match[funny_match_index++].other = c - '0';\n+\n+      if ((((recog_operand[opno])->code) == 12))\n+\tlose = 1;\n+\n+      if (!lose)\n+\t{\n+\t  while (--funny_match_index >= 0)\n+\t    recog_operand[funny_match[funny_match_index].other]\n+\t\t    = recog_operand[funny_match[funny_match_index].this];\n+\t  return 1;\n+\t}\n+      which_alternative++;\n+    }\n+\n+  if (strict == 0)\n+    return constrain_operands (insn_code_num, -1);\n+  return 0;\n+}\n+"}, {"sha": "d3758ef1ae564b9f56832209bcd391f389b5ddb3", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdbc9c6eb3bea037982fba616d96c6288f177f9/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=8fdbc9c6eb3bea037982fba616d96c6288f177f9", "patch": "@@ -1854,6 +1854,18 @@ analyze_offset (tree offset, tree *invariant, tree *constant)\n     *invariant = invariant_0 ? invariant_0 : invariant_1;\n }\n \n+/* Free the memory used by the data reference DR.  */\n+\n+static void\n+free_data_ref (data_reference_p dr)\n+{\n+  if (DR_TYPE(dr) == ARRAY_REF_TYPE)\n+    VEC_free (tree, heap, dr->object_info.access_fns);\n+  else\n+    VEC_free (tree, heap, dr->first_location.access_fns);\n+\n+  free (dr);\n+}\n \n /* Function create_data_ref.\n    \n@@ -1954,11 +1966,23 @@ create_data_ref (tree memref, tree stmt, bool is_read)\n \n       /* Update access function.  */\n       access_fn = DR_ACCESS_FN (dr, 0);\n+      if (automatically_generated_chrec_p (access_fn))\n+\t{\n+\t  free_data_ref (dr);\n+\t  return NULL;\n+\t}\n+\n       new_step = size_binop (TRUNC_DIV_EXPR,  \n \t\t\t     fold_convert (ssizetype, step), type_size);\n \n       init_cond = chrec_convert (chrec_type (access_fn), init_cond, stmt);\n       new_step = chrec_convert (chrec_type (access_fn), new_step, stmt);\n+      if (automatically_generated_chrec_p (init_cond)\n+\t  || automatically_generated_chrec_p (new_step))\n+\t{\n+\t  free_data_ref (dr);\n+\t  return NULL;\n+\t}\n       access_fn = chrec_replace_initial_condition (access_fn, init_cond);\n       access_fn = reset_evolution_in_loop (loop->num, access_fn, new_step);\n \n@@ -4373,14 +4397,7 @@ free_data_refs (VEC (data_reference_p, heap) *datarefs)\n   struct data_reference *dr;\n \n   for (i = 0; VEC_iterate (data_reference_p, datarefs, i, dr); i++)\n-    {\n-      if (DR_TYPE(dr) == ARRAY_REF_TYPE)\n-\tVEC_free (tree, heap, (dr)->object_info.access_fns);\n-      else\n-\tVEC_free (tree, heap, (dr)->first_location.access_fns);\n-\n-      free (dr);\n-    }\n+    free_data_ref (dr);\n   VEC_free (data_reference_p, heap, datarefs);\n }\n "}]}