{"sha": "19667c82e479dc2bf8351588ed57aff90220b748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2NjdjODJlNDc5ZGMyYmY4MzUxNTg4ZWQ1N2FmZjkwMjIwYjc0OA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-28T20:34:24Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-28T20:43:23Z"}, "message": "libstdc++: Fix subrange::advance and subrange::prev (LWG 3433)\n\nThis implements the proposed resolution of LWG 3433, which fixes\nsubrange::advance when called with a negative argument.\n\nlibstdc++-v3/ChangeLog:\n\n\tLWG 3433 subrange::advance(n) has UB when n < 0\n\t* include/std/ranges (subrange::prev): Fix typo.\n\t(subrange::advance): Handle a negative argument as per the proposed\n\tresolution of LWG 3433.\n\t* testsuite/std/ranges/subrange/lwg3433.cc: New test.", "tree": {"sha": "68faf8abe56e6d001a1620a0dd8a9a43a7685b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68faf8abe56e6d001a1620a0dd8a9a43a7685b6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19667c82e479dc2bf8351588ed57aff90220b748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19667c82e479dc2bf8351588ed57aff90220b748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19667c82e479dc2bf8351588ed57aff90220b748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19667c82e479dc2bf8351588ed57aff90220b748/comments", "author": null, "committer": null, "parents": [{"sha": "69bc8815740de46869b45403b3b583e1e2c0e442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bc8815740de46869b45403b3b583e1e2c0e442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69bc8815740de46869b45403b3b583e1e2c0e442"}], "stats": {"total": 129, "additions": 119, "deletions": 10}, "files": [{"sha": "f2ddc5e47760d1cec9d6e858d8cce5d221f949f2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19667c82e479dc2bf8351588ed57aff90220b748/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19667c82e479dc2bf8351588ed57aff90220b748/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=19667c82e479dc2bf8351588ed57aff90220b748", "patch": "@@ -1,3 +1,11 @@\n+2020-04-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tLWG 3433 subrange::advance(n) has UB when n < 0\n+\t* include/std/ranges (subrange::prev): Fix typo.\n+\t(subrange::advance): Handle a negative argument as per the proposed\n+\tresolution of LWG 3433.\n+\t* testsuite/std/ranges/subrange/lwg3433.cc: New test.\n+\n 2020-04-28  Jonathan Wakely  <jwakely@redhat.com>\n \t    Iain Sandoe  <iain@sandoe.co.uk>\n "}, {"sha": "0c602c7200fa988ab38a341b7c3a61418cb19708", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19667c82e479dc2bf8351588ed57aff90220b748/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19667c82e479dc2bf8351588ed57aff90220b748/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=19667c82e479dc2bf8351588ed57aff90220b748", "patch": "@@ -353,23 +353,28 @@ namespace ranges\n \trequires bidirectional_iterator<_It>\n       {\n \tauto __tmp = *this;\n-\t__tmp.advance(--__n);\n+\t__tmp.advance(-__n);\n \treturn __tmp;\n       }\n \n       constexpr subrange&\n       advance(iter_difference_t<_It> __n)\n       {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 3433. subrange::advance(n) has UB when n < 0\n+\tif constexpr (bidirectional_iterator<_It>)\n+\t  if (__n < 0)\n+\t    {\n+\t      ranges::advance(_M_begin, __n);\n+\t      if constexpr (_S_store_size)\n+\t\t_M_size._M_size += __detail::__to_unsigned_like(-__n);\n+\t      return *this;\n+\t    }\n+\n+\t__glibcxx_assert(__n >= 0);\n+\tauto __d = __n - ranges::advance(_M_begin, __n, _M_end);\n \tif constexpr (_S_store_size)\n-\t  {\n-\t    auto __d = __n - ranges::advance(_M_begin, __n, _M_end);\n-\t    if (__d >= 0)\n-\t      _M_size._M_size -= __detail::__to_unsigned_like(__d);\n-\t    else\n-\t      _M_size._M_size += __detail::__to_unsigned_like(-__d);\n-\t  }\n-\telse\n-\t  ranges::advance(_M_begin, __n, _M_end);\n+\t  _M_size._M_size -= __detail::__to_unsigned_like(__d);\n \treturn *this;\n       }\n     };"}, {"sha": "9eb04895ee77fa062b1c433fd7c60b8edea9ac04", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/lwg3433.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19667c82e479dc2bf8351588ed57aff90220b748/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3433.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19667c82e479dc2bf8351588ed57aff90220b748/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3433.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3433.cc?ref=19667c82e479dc2bf8351588ed57aff90220b748", "patch": "@@ -0,0 +1,96 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::test_range;\n+using __gnu_test::test_sized_range;\n+using __gnu_test::test_sized_range_sized_sent;\n+\n+namespace ranges = std::ranges;\n+\n+template<typename Container>\n+void\n+test01()\n+{\n+  int x[] = {1,2,3,4,5};\n+  Container r{x};\n+  ranges::subrange sr = r;\n+  constexpr bool sized_range_p = ranges::sized_range<decltype(sr)>;\n+  constexpr bool bidirectional_p = ranges::bidirectional_range<decltype(sr)>;\n+  VERIFY( ranges::equal(sr, (int[]){1,2,3,4,5}) );\n+  if constexpr (sized_range_p)\n+    VERIFY( sr.size() == 5 );\n+\n+  sr = sr.next();\n+  VERIFY( ranges::equal(sr, (int[]){2,3,4,5}) );\n+  if constexpr (sized_range_p)\n+    VERIFY( sr.size() == 4 );\n+\n+  sr = std::move(sr).next(2);\n+  VERIFY( ranges::equal(sr, (int[]){4,5}) );\n+  if constexpr (sized_range_p)\n+    VERIFY( sr.size() == 2 );\n+\n+  if constexpr (bidirectional_p)\n+    {\n+      sr = sr.prev(2);\n+      VERIFY( ranges::equal(sr, (int[]){2,3,4,5}) );\n+      if constexpr (sized_range_p)\n+\tVERIFY( sr.size() == 4 );\n+\n+      sr = sr.prev();\n+      VERIFY( ranges::equal(sr, (int[]){1,2,3,4,5}) );\n+      if constexpr (sized_range_p)\n+\tVERIFY( sr.size() == 5 );\n+    }\n+  else\n+    sr = r;\n+\n+  sr.advance(1);\n+  VERIFY( ranges::equal(sr, (int[]){2,3,4,5}) );\n+  if constexpr (sized_range_p)\n+    VERIFY( sr.size() == 4 );\n+\n+  if constexpr (bidirectional_p)\n+    {\n+      sr.advance(-1);\n+      VERIFY( ranges::equal(sr, (int[]){1,2,3,4,5}) );\n+      if constexpr (sized_range_p)\n+\tVERIFY( sr.size() == 5 );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01<test_sized_range_sized_sent<int, bidirectional_iterator_wrapper>>();\n+  test01<test_sized_range<int, bidirectional_iterator_wrapper>>();\n+  test01<test_range<int, bidirectional_iterator_wrapper>>();\n+\n+  test01<test_sized_range_sized_sent<int, forward_iterator_wrapper>>();\n+  test01<test_sized_range<int, forward_iterator_wrapper>>();\n+  test01<test_range<int, forward_iterator_wrapper>>();\n+}"}]}