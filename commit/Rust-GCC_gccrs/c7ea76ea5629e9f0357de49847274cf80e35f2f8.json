{"sha": "c7ea76ea5629e9f0357de49847274cf80e35f2f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlYTc2ZWE1NjI5ZTlmMDM1N2RlNDk4NDcyNzRjZjgwZTM1ZjJmOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-01T11:20:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-01T11:20:27Z"}, "message": "tree-vect-loop.c (vectorizable_reduction): Move variables to where they are used.\n\n2019-10-01  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vectorizable_reduction): Move variables\n\tto where they are used.\n\nFrom-SVN: r276402", "tree": {"sha": "f925531ed132e719a96761ad1cf23233563c7228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f925531ed132e719a96761ad1cf23233563c7228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ea76ea5629e9f0357de49847274cf80e35f2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ea76ea5629e9f0357de49847274cf80e35f2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ea76ea5629e9f0357de49847274cf80e35f2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ea76ea5629e9f0357de49847274cf80e35f2f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58e721d255c111b2ae012bb452cf39a0ee58ed27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e721d255c111b2ae012bb452cf39a0ee58ed27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e721d255c111b2ae012bb452cf39a0ee58ed27"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "7c3eb339628acedd75acadc2c04c002da0228414", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ea76ea5629e9f0357de49847274cf80e35f2f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ea76ea5629e9f0357de49847274cf80e35f2f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7ea76ea5629e9f0357de49847274cf80e35f2f8", "patch": "@@ -1,3 +1,8 @@\n+2019-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vectorizable_reduction): Move variables\n+\tto where they are used.\n+\n 2019-10-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* regrename.c (hide_operands): Use pc_rtx instead of cc0_rtx."}, {"sha": "350cee58246a60a5033bda6cfb89c727f0ad7eae", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ea76ea5629e9f0357de49847274cf80e35f2f8/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ea76ea5629e9f0357de49847274cf80e35f2f8/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=c7ea76ea5629e9f0357de49847274cf80e35f2f8", "patch": "@@ -5767,7 +5767,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t\tslp_instance slp_node_instance,\n \t\t\tstmt_vector_for_cost *cost_vec)\n {\n-  tree vec_dest;\n   tree scalar_dest;\n   tree vectype_out = STMT_VINFO_VECTYPE (stmt_info);\n   tree vectype_in = NULL_TREE;\n@@ -5778,29 +5777,21 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   machine_mode vec_mode;\n   int op_type;\n   optab optab;\n-  tree new_temp = NULL_TREE;\n   enum vect_def_type dt, cond_reduc_dt = vect_unknown_def_type;\n   stmt_vec_info cond_stmt_vinfo = NULL;\n   tree scalar_type;\n   bool is_simple_use;\n   int i;\n   int ncopies;\n-  stmt_vec_info prev_stmt_info, prev_phi_info;\n+  stmt_vec_info prev_phi_info;\n   bool single_defuse_cycle = false;\n-  stmt_vec_info new_stmt_info = NULL;\n   int j;\n   tree ops[3];\n   enum vect_def_type dts[3];\n   bool nested_cycle = false, found_nested_cycle_def = false;\n   bool double_reduc = false;\n-  basic_block def_bb;\n-  class loop * def_stmt_loop;\n-  tree def_arg;\n-  auto_vec<tree> vec_oprnds0;\n-  auto_vec<tree> vec_oprnds1;\n-  auto_vec<tree> vec_oprnds2;\n   int vec_num;\n-  tree def0, tem;\n+  tree tem;\n   tree cr_index_scalar_type = NULL_TREE, cr_index_vector_type = NULL_TREE;\n   tree cond_reduc_val = NULL_TREE;\n \n@@ -5900,7 +5891,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t}\n \n       /* Create the destination vector  */\n-      vec_dest = vect_create_destination_var (phi_result, vectype_out);\n+      tree vec_dest = vect_create_destination_var (phi_result, vectype_out);\n \n       /* Get the loop-entry arguments.  */\n       tree vec_initial_def;\n@@ -6348,15 +6339,16 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \n   if (nested_cycle)\n     {\n-      def_bb = gimple_bb (reduc_def_phi);\n-      def_stmt_loop = def_bb->loop_father;\n-      def_arg = PHI_ARG_DEF_FROM_EDGE (reduc_def_phi,\n-                                       loop_preheader_edge (def_stmt_loop));\n+      basic_block def_bb = gimple_bb (reduc_def_phi);\n+      class loop *def_stmt_loop = def_bb->loop_father;\n+      tree def_arg = PHI_ARG_DEF_FROM_EDGE (reduc_def_phi,\n+\t\t\t\t\t    loop_preheader_edge (def_stmt_loop));\n       stmt_vec_info def_arg_stmt_info = loop_vinfo->lookup_def (def_arg);\n       if (def_arg_stmt_info\n \t  && (STMT_VINFO_DEF_TYPE (def_arg_stmt_info)\n \t      == vect_double_reduction_def))\n         double_reduc = true;\n+      gcc_assert (!double_reduc || STMT_VINFO_RELEVANT (stmt_info) == vect_used_in_outer_by_reduction);\n     }\n \n   vect_reduction_type reduction_type\n@@ -6670,6 +6662,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   if (code == DOT_PROD_EXPR\n       && !types_compatible_p (TREE_TYPE (ops[0]), TREE_TYPE (ops[1])))\n     {\n+      gcc_unreachable ();\n+      /* No testcase for this.  PR49478.  */\n       if (TREE_CODE (ops[0]) == INTEGER_CST)\n         ops[0] = fold_convert (TREE_TYPE (ops[1]), ops[0]);\n       else if (TREE_CODE (ops[1]) == INTEGER_CST)\n@@ -6812,7 +6806,15 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       return true;\n     }\n \n+\n   /* Transform.  */\n+  stmt_vec_info new_stmt_info = NULL;\n+  stmt_vec_info prev_stmt_info;\n+  tree new_temp = NULL_TREE;\n+  auto_vec<tree> vec_oprnds0;\n+  auto_vec<tree> vec_oprnds1;\n+  auto_vec<tree> vec_oprnds2;\n+  tree def0;\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location, \"transform reduction.\\n\");\n@@ -6836,7 +6838,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     }\n \n   /* Create the destination vector  */\n-  vec_dest = vect_create_destination_var (scalar_dest, vectype_out);\n+  tree vec_dest = vect_create_destination_var (scalar_dest, vectype_out);\n \n   prev_stmt_info = NULL;\n   prev_phi_info = NULL;"}]}