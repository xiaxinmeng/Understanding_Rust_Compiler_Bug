{"sha": "b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI0N2MwZDVhYWRmNmViNzMyMzY0MWZmYmNmN2NjNjdiZWRkMmM1Mg==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-10T06:30:39Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-10T06:30:39Z"}, "message": "Merge branch 'master' of https://github.com/redbrain/gccrs", "tree": {"sha": "3a4d3a0b0569d28f679ecbc74928125034d50f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4d3a0b0569d28f679ecbc74928125034d50f4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee85db852a5a819e559ab00e7a382a34e925447a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee85db852a5a819e559ab00e7a382a34e925447a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee85db852a5a819e559ab00e7a382a34e925447a"}, {"sha": "0f42a240e53e932de0ae4799d54fe0bd15d06047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f42a240e53e932de0ae4799d54fe0bd15d06047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f42a240e53e932de0ae4799d54fe0bd15d06047"}], "stats": {"total": 859, "additions": 651, "deletions": 208}, "files": [{"sha": "cfb4228710dc68dc56569d3d750b3b0086920cc1", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -2839,6 +2839,8 @@ class BlockExpr : public ExprWithBlock\n       }\n   }\n \n+  size_t num_statements () const { return statements.size (); }\n+\n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<Attribute> &get_inner_attrs () const { return inner_attrs; }\n   std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }"}, {"sha": "c840112da11a18be56eef40cad173f65b0339bbc", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -184,6 +184,8 @@ class ExprStmt : public Stmt\n   Location locus;\n \n public:\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n   Location get_locus () const { return locus; }\n \n protected:"}, {"sha": "298ff5022175e7e878a3aa27c9f2f4f55f18a0c5", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -221,12 +221,18 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   virtual ~TyTyResolveCompile () {}\n \n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n \n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ADTType &type) override\n   {\n     ::Btype *compiled_type = nullptr;"}, {"sha": "037012946fbe92bfad4aa60ada9678a50f13c62b", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -156,8 +156,6 @@ class CompileExpr : public HIRCompileBase\n \treturn;\n \n \tcase HIR::Literal::FLOAT: {\n-\t  printf (\"FLOATY BOYO: [%s]\\n\", expr.as_string ().c_str ());\n-\n \t  mpfr_t fval;\n \t  if (mpfr_init_set_str (fval, expr.as_string ().c_str (), 10,\n \t\t\t\t MPFR_RNDN)\n@@ -177,8 +175,6 @@ class CompileExpr : public HIRCompileBase\n \t      return;\n \t    }\n \n-\t  printf (\"tyty float is [%s]\\n\", tyty->as_string ().c_str ());\n-\n \t  Btype *type = TyTyResolveCompile::compile (ctx, tyty);\n \t  translated\n \t    = ctx->get_backend ()->float_constant_expression (type, fval);"}, {"sha": "f1b39dad20073af428da8cbeaa12887116c53dc8", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -232,6 +232,23 @@ class CompileItem : public HIRCompileBase\n       return true;\n     });\n \n+    if (function_body->has_expr ())\n+      {\n+\t// the previous passes will ensure this is a valid return\n+\t// dead code elimination should remove any bad trailing expressions\n+\tBexpression *compiled_expr\n+\t  = CompileExpr::Compile (function_body->expr.get (), ctx);\n+\trust_assert (compiled_expr != nullptr);\n+\n+\tauto fncontext = ctx->peek_fn ();\n+\n+\tstd::vector<Bexpression *> retstmts;\n+\tretstmts.push_back (compiled_expr);\n+\tauto s = ctx->get_backend ()->return_statement (\n+\t  fncontext.fndecl, retstmts, function_body->expr->get_locus_slow ());\n+\tctx->add_statement (s);\n+      }\n+\n     ctx->pop_block ();\n     auto body = ctx->get_backend ()->block_statement (code_block);\n     if (!ctx->get_backend ()->function_set_body (fndecl, body))"}, {"sha": "137b74b040761a164311e8c3e78d19468144e168", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -43,13 +43,19 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   ~TyTyCompile () {}\n \n-  void visit (TyTy::InferType &type) override\n-  {\n-    // there shouldn't be any of these left\n-    gcc_unreachable ();\n-  }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::UnitType &type) override {}\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnType &type) override\n   {\n@@ -82,8 +88,6 @@ class TyTyCompile : public TyTy::TyVisitor\n \t\t\t\tmappings->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::ParamType &type) override {}\n-\n   void visit (TyTy::BoolType &type) override\n   {\n     translated = backend->named_type (\"bool\", backend->bool_type (),\n@@ -132,19 +136,19 @@ class TyTyCompile : public TyTy::TyVisitor\n     switch (type.get_kind ())\n       {\n       case TyTy::UintType::U8:\n-\ttranslated = backend->named_type (\"i8\", backend->integer_type (true, 8),\n+\ttranslated = backend->named_type (\"u8\", backend->integer_type (true, 8),\n \t\t\t\t\t  Linemap::predeclared_location ());\n \treturn;\n \n       case TyTy::UintType::U16:\n \ttranslated\n-\t  = backend->named_type (\"i16\", backend->integer_type (true, 16),\n+\t  = backend->named_type (\"u16\", backend->integer_type (true, 16),\n \t\t\t\t Linemap::predeclared_location ());\n \treturn;\n \n       case TyTy::UintType::U32:\n \ttranslated\n-\t  = backend->named_type (\"i32\", backend->integer_type (true, 32),\n+\t  = backend->named_type (\"u32\", backend->integer_type (true, 32),\n \t\t\t\t Linemap::predeclared_location ());\n \treturn;\n \n@@ -205,6 +209,18 @@ class TyTyExtractParamsFromFnType : public TyTy::TyVisitor\n \n   ~TyTyExtractParamsFromFnType () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::FnType &type) override\n   {\n     ok = true;\n@@ -234,6 +250,18 @@ class TyTyExtractRetFromFnType : public TyTy::TyVisitor\n \n   ~TyTyExtractRetFromFnType () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::FnType &type) override\n   {\n     ok = true;\n@@ -261,6 +289,18 @@ class TyTyCompileParam : public TyTy::TyVisitor\n \n   ~TyTyCompileParam () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ParamType &type) override\n   {\n     auto btype = TyTyCompile::compile (backend, type.get_base_type ());"}, {"sha": "a52f1831b339a0d539642a6abf4badb135d87c80", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -90,6 +90,23 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n     return true;\n   });\n \n+  if (expr.has_expr ())\n+    {\n+      // the previous passes will ensure this is a valid return\n+      // dead code elimination should remove any bad trailing expressions\n+      Bexpression *compiled_expr = CompileExpr::Compile (expr.expr.get (), ctx);\n+      rust_assert (compiled_expr != nullptr);\n+\n+      auto fncontext = ctx->peek_fn ();\n+\n+      std::vector<Bexpression *> retstmts;\n+      retstmts.push_back (compiled_expr);\n+      auto s\n+\t= ctx->get_backend ()->return_statement (fncontext.fndecl, retstmts,\n+\t\t\t\t\t\t expr.expr->get_locus_slow ());\n+      ctx->add_statement (s);\n+    }\n+\n   ctx->pop_block ();\n   translated = new_block;\n }"}, {"sha": "f81a24273b0b2081d6e0a39e45ca6c8c283978c4", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -28,7 +28,7 @@ namespace HIR {\n class ASTLoweringBlock : public ASTLoweringBase\n {\n public:\n-  static HIR::BlockExpr *translate (AST::BlockExpr *expr)\n+  static HIR::BlockExpr *translate (AST::BlockExpr *expr, bool *terminated)\n   {\n     ASTLoweringBlock resolver;\n     expr->accept_vis (resolver);\n@@ -40,6 +40,7 @@ class ASTLoweringBlock : public ASTLoweringBase\n \t  resolver.translated);\n       }\n \n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n@@ -48,15 +49,18 @@ class ASTLoweringBlock : public ASTLoweringBase\n   void visit (AST::BlockExpr &expr);\n \n private:\n-  ASTLoweringBlock () : ASTLoweringBase (), translated (nullptr) {}\n+  ASTLoweringBlock ()\n+    : ASTLoweringBase (), translated (nullptr), terminated (false)\n+  {}\n \n   HIR::BlockExpr *translated;\n+  bool terminated;\n };\n \n class ASTLoweringIfBlock : public ASTLoweringBase\n {\n public:\n-  static HIR::IfExpr *translate (AST::IfExpr *expr)\n+  static HIR::IfExpr *translate (AST::IfExpr *expr, bool *terminated)\n   {\n     ASTLoweringIfBlock resolver;\n     expr->accept_vis (resolver);\n@@ -67,7 +71,7 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n \t  resolver.translated->get_mappings ().get_hirid (),\n \t  resolver.translated);\n       }\n-\n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n@@ -80,15 +84,19 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n   void visit (AST::IfExprConseqIf &expr);\n \n private:\n-  ASTLoweringIfBlock () : ASTLoweringBase (), translated (nullptr) {}\n+  ASTLoweringIfBlock ()\n+    : ASTLoweringBase (), translated (nullptr), terminated (false)\n+  {}\n \n   HIR::IfExpr *translated;\n+  bool terminated;\n };\n \n class ASTLoweringExprWithBlock : public ASTLoweringBase\n {\n public:\n-  static HIR::ExprWithBlock *translate (AST::ExprWithBlock *expr)\n+  static HIR::ExprWithBlock *translate (AST::ExprWithBlock *expr,\n+\t\t\t\t\tbool *terminated)\n   {\n     ASTLoweringExprWithBlock resolver;\n     expr->accept_vis (resolver);\n@@ -100,30 +108,39 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \t  resolver.translated);\n       }\n \n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n   ~ASTLoweringExprWithBlock () {}\n \n   void visit (AST::IfExpr &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqElse &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqIf &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n+  }\n+\n+  void visit (AST::BlockExpr &expr)\n+  {\n+    translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n private:\n-  ASTLoweringExprWithBlock () : ASTLoweringBase (), translated (nullptr) {}\n+  ASTLoweringExprWithBlock ()\n+    : ASTLoweringBase (), translated (nullptr), terminated (false)\n+  {}\n \n   HIR::ExprWithBlock *translated;\n+  bool terminated;\n };\n \n } // namespace HIR"}, {"sha": "51bf108ac4fc15e5dfac692554cc0bacf91fc280", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -107,7 +107,7 @@ class ASTLowerPathInExpression : public ASTLoweringBase\n class ASTLoweringExpr : public ASTLoweringBase\n {\n public:\n-  static HIR::Expr *translate (AST::Expr *expr)\n+  static HIR::Expr *translate (AST::Expr *expr, bool *terminated = nullptr)\n   {\n     ASTLoweringExpr resolver;\n     expr->accept_vis (resolver);\n@@ -121,6 +121,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n     resolver.mappings->insert_hir_expr (\n       resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n+    resolver.mappings->insert_location (\n+      resolver.translated->get_mappings ().get_crate_num (),\n+      resolver.translated->get_mappings ().get_hirid (),\n+      expr->get_locus_slow ());\n+\n+    if (terminated != nullptr)\n+      *terminated = resolver.terminated;\n \n     return resolver.translated;\n   }\n@@ -129,22 +136,22 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::IfExpr &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqElse &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqIf &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::BlockExpr &expr)\n   {\n-    translated = ASTLoweringBlock::translate (&expr);\n+    translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::PathInExpression &expr)\n@@ -154,6 +161,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::ReturnExpr &expr)\n   {\n+    terminated = true;\n     HIR::Expr *return_expr\n       = expr.has_returned_expr ()\n \t  ? ASTLoweringExpr::translate (expr.get_returned_expr ().get ())\n@@ -498,10 +506,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n   }\n \n private:\n-  ASTLoweringExpr () : translated (nullptr), translated_array_elems (nullptr) {}\n+  ASTLoweringExpr ()\n+    : translated (nullptr), translated_array_elems (nullptr), terminated (false)\n+  {}\n \n   HIR::Expr *translated;\n   HIR::ArrayElems *translated_array_elems;\n+  bool terminated;\n };\n \n } // namespace HIR"}, {"sha": "4a5a3feb538c8ca58e140a420b55e98376c73b61", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -185,9 +185,14 @@ class ASTLoweringItem : public ASTLoweringBase\n \tfunction_params.push_back (hir_param);\n       }\n \n+    bool terminated = false;\n     std::unique_ptr<HIR::BlockExpr> function_body\n       = std::unique_ptr<HIR::BlockExpr> (\n-\tASTLoweringBlock::translate (function.get_definition ().get ()));\n+\tASTLoweringBlock::translate (function.get_definition ().get (),\n+\t\t\t\t     &terminated));\n+    if (!terminated && function.has_return_type ())\n+      rust_error_at (function.get_definition ()->get_locus (),\n+\t\t     \"missing return\");\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, function.get_node_id (),"}, {"sha": "b6724563e4756a9ea721c676c4768621be271fa2", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -33,15 +33,12 @@ namespace HIR {\n class ASTLoweringStmt : public ASTLoweringBase\n {\n public:\n-  static HIR::Stmt *translate (AST::Stmt *stmt)\n+  static HIR::Stmt *translate (AST::Stmt *stmt, bool *terminated)\n   {\n     ASTLoweringStmt resolver;\n     stmt->accept_vis (resolver);\n-    if (resolver.translated == nullptr)\n-      {\n-\tprintf (\"Failing translating: %s\\n\", stmt->as_string ().c_str ());\n-\trust_assert (resolver.translated != nullptr);\n-      }\n+    rust_assert (resolver.translated != nullptr);\n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n@@ -50,7 +47,8 @@ class ASTLoweringStmt : public ASTLoweringBase\n   void visit (AST::ExprStmtWithBlock &stmt)\n   {\n     HIR::ExprWithBlock *expr\n-      = ASTLoweringExprWithBlock::translate (stmt.get_expr ().get ());\n+      = ASTLoweringExprWithBlock::translate (stmt.get_expr ().get (),\n+\t\t\t\t\t     &terminated);\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n@@ -67,7 +65,8 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n   void visit (AST::ExprStmtWithoutBlock &stmt)\n   {\n-    HIR::Expr *expr = ASTLoweringExpr::translate (stmt.get_expr ().get ());\n+    HIR::Expr *expr\n+      = ASTLoweringExpr::translate (stmt.get_expr ().get (), &terminated);\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n@@ -110,9 +109,10 @@ class ASTLoweringStmt : public ASTLoweringBase\n   }\n \n private:\n-  ASTLoweringStmt () : translated (nullptr) {}\n+  ASTLoweringStmt () : translated (nullptr), terminated (false) {}\n \n   HIR::Stmt *translated;\n+  bool terminated;\n };\n \n } // namespace HIR"}, {"sha": "4f0d0d094e814653a1358922f617fb790b43772e", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -64,35 +64,68 @@ ASTLowering::go ()\n void\n ASTLoweringBlock::visit (AST::BlockExpr &expr)\n {\n-  std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n-  std::unique_ptr<HIR::ExprWithoutBlock> block_expr;\n   std::vector<HIR::Attribute> inner_attribs;\n   std::vector<HIR::Attribute> outer_attribs;\n \n+  std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n+  bool block_did_terminate = false;\n   expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n-    auto translated_stmt = ASTLoweringStmt::translate (s);\n+    bool terminated = false;\n+    auto translated_stmt = ASTLoweringStmt::translate (s, &terminated);\n     block_stmts.push_back (std::unique_ptr<HIR::Stmt> (translated_stmt));\n+    block_did_terminate = terminated;\n+    return !block_did_terminate;\n+  });\n+\n+  // if there was a return expression everything after that becomes\n+  // unreachable code. This can be detected for any AST NodeIDs that have no\n+  // associated HIR Mappings\n+  expr.iterate_stmts ([&] (AST::Stmt *s) -> bool {\n+    HirId ref;\n+    if (!mappings->lookup_node_to_hir (mappings->get_current_crate (),\n+\t\t\t\t       s->get_node_id (), &ref))\n+      rust_warning_at (s->get_locus_slow (), 0, \"unreachable statement\");\n+\n     return true;\n   });\n \n+  HIR::ExprWithoutBlock *tail_expr = nullptr;\n+  if (expr.has_tail_expr () && !block_did_terminate)\n+    {\n+      tail_expr = (HIR::ExprWithoutBlock *) ASTLoweringExpr::translate (\n+\texpr.get_tail_expr ().get ());\n+    }\n+  else if (expr.has_tail_expr () && block_did_terminate)\n+    {\n+      // warning unreachable tail expressions\n+      rust_warning_at (expr.get_tail_expr ()->get_locus_slow (), 0,\n+\t\t       \"unreachable expression\");\n+    }\n+\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n   translated\n     = new HIR::BlockExpr (mapping, std::move (block_stmts),\n-\t\t\t  std::move (block_expr), std::move (inner_attribs),\n-\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+\t\t\t  std::unique_ptr<HIR::ExprWithoutBlock> (tail_expr),\n+\t\t\t  std::move (inner_attribs), std::move (outer_attribs),\n+\t\t\t  expr.get_locus ());\n+\n+  terminated = block_did_terminate || expr.has_tail_expr ();\n }\n \n void\n ASTLoweringIfBlock::visit (AST::IfExpr &expr)\n {\n+  bool ignored_terminated = false;\n   HIR::Expr *condition\n-    = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+    = ASTLoweringExpr::translate (expr.get_condition_expr ().get (),\n+\t\t\t\t  &ignored_terminated);\n   HIR::BlockExpr *block\n-    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &ignored_terminated);\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n@@ -109,10 +142,18 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqElse &expr)\n {\n   HIR::Expr *condition\n     = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+\n+  bool if_block_terminated = false;\n+  bool else_block_termianted = false;\n+\n   HIR::BlockExpr *if_block\n-    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &if_block_terminated);\n   HIR::BlockExpr *else_block\n-    = ASTLoweringBlock::translate (expr.get_else_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_else_block ().get (),\n+\t\t\t\t   &else_block_termianted);\n+\n+  terminated = if_block_terminated && else_block_termianted;\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n@@ -132,10 +173,14 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqIf &expr)\n {\n   HIR::Expr *condition\n     = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+\n+  bool ignored_terminated = false;\n   HIR::BlockExpr *block\n-    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &ignored_terminated);\n   HIR::IfExpr *conseq_if_expr\n-    = ASTLoweringIfBlock::translate (expr.get_conseq_if_expr ().get ());\n+    = ASTLoweringIfBlock::translate (expr.get_conseq_if_expr ().get (),\n+\t\t\t\t     &ignored_terminated);\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),"}, {"sha": "11be8b6d035b3f6223f62ed6baef8cba4a0cf916", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -2594,6 +2594,8 @@ class BlockExpr : public ExprWithBlock\n       }\n   }\n \n+  bool is_final_stmt (Stmt *stmt) { return statements.back ().get () == stmt; }\n+\n   Location get_closing_locus ()\n   {\n     if (statements.size () == 0)"}, {"sha": "5d758eef2686da674727c2bef91fdca3c2e73eac", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -257,6 +257,8 @@ struct Literal\n     return Literal (\"\", CHAR, PrimitiveCoreType::CORETYPE_UNKNOWN);\n   }\n \n+  void set_lit_type (LitType lt) { type = lt; }\n+\n   // Returns whether literal is in an invalid state.\n   bool is_error () const { return value_as_string == \"\"; }\n };"}, {"sha": "4606a6cb2b12797e9edb16a7226f9b1d9c93012a", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -1938,16 +1938,6 @@ Lexer::parse_decimal_int_or_float (Location loc)\n       PrimitiveCoreType type_hint = type_suffix_pair.first;\n       length += type_suffix_pair.second;\n \n-      if (type_hint == CORETYPE_F32 || type_hint == CORETYPE_F64)\n-\t{\n-\t  rust_error_at (\n-\t    get_current_location (),\n-\t    \"invalid type suffix %qs for integer (decimal) literal\",\n-\t    get_type_hint_string (type_hint));\n-\t  // ignore invalid type suffix as everything else seems fine\n-\t  type_hint = CORETYPE_UNKNOWN;\n-\t}\n-\n       current_column += length;\n \n       str.shrink_to_fit ();"}, {"sha": "310d296976eb13d89b4bd89b4daeb353893f09d9", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -65,25 +65,24 @@ class ResolveItem : public ResolverBase\n       ResolveType::go (function.get_return_type ().get (),\n \t\t       function.get_node_id ());\n \n+    NodeId scope_node_id = function.get_node_id ();\n+    resolver->get_name_scope ().push (scope_node_id);\n+    resolver->get_type_scope ().push (scope_node_id);\n+    resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+    resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+\n+    // we make a new scope so the names of parameters are resolved and shadowed\n+    // correctly\n     for (auto &param : function.get_function_params ())\n       {\n \tResolveType::go (param.get_type ().get (), param.get_node_id ());\n \tPatternDeclaration::go (param.get_pattern ().get (),\n \t\t\t\tparam.get_node_id ());\n       }\n \n-    // setup parent scoping for names\n-    NodeId scope_node_id = function.get_definition ()->get_node_id ();\n-    resolver->get_name_scope ().push (scope_node_id);\n-    resolver->get_type_scope ().push (scope_node_id);\n-    resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n-    resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n-\n-    function.get_definition ()->iterate_stmts (\n-      [&] (AST::Stmt *s) mutable -> bool {\n-\tResolveStmt::go (s, s->get_node_id ());\n-\treturn true;\n-      });\n+    // resolve the function body\n+    ResolveExpr::go (function.get_definition ().get (),\n+\t\t     function.get_node_id ());\n \n     resolver->get_name_scope ().pop ();\n     resolver->get_type_scope ().pop ();"}, {"sha": "6d751e662265ef1e9ef92d94405c9c5a4a52822f", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -51,12 +51,12 @@ class ResolveStmt : public ResolverBase\n \n   void visit (AST::LetStmt &stmt)\n   {\n+    if (stmt.has_init_expr ())\n+      ResolveExpr::go (stmt.get_init_expr ().get (), stmt.get_node_id ());\n+\n     PatternDeclaration::go (stmt.get_pattern ().get (), stmt.get_node_id ());\n     if (stmt.has_type ())\n       ResolveType::go (stmt.get_type ().get (), stmt.get_node_id ());\n-\n-    if (stmt.has_init_expr ())\n-      ResolveExpr::go (stmt.get_init_expr ().get (), stmt.get_node_id ());\n   }\n \n private:"}, {"sha": "e5b09424d33550de20a20c37c532431ff3c69028", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -285,6 +285,9 @@ ResolveExpr::visit (AST::BlockExpr &expr)\n     return true;\n   });\n \n+  if (expr.has_tail_expr ())\n+    ResolveExpr::go (expr.get_tail_expr ().get (), expr.get_node_id ());\n+\n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n }"}, {"sha": "f2014a10405c12eee07dd8529592f3007f3ef153", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -32,9 +32,9 @@ namespace Resolver {\n class TypeCheckExpr : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Expr *expr)\n+  static TyTy::TyBase *Resolve (HIR::Expr *expr, bool is_final_expr = false)\n   {\n-    TypeCheckExpr resolver;\n+    TypeCheckExpr resolver (is_final_expr);\n     expr->accept_vis (resolver);\n     if (resolver.infered != nullptr)\n       resolver.context->insert_type (expr->get_mappings ().get_hirid (),\n@@ -188,6 +188,15 @@ class TypeCheckExpr : public TypeCheckBase\n \t      ok = context->lookup_builtin (\"u128\", &infered);\n \t      break;\n \n+\t    case CORETYPE_F32:\n+\t      expr.get_literal ()->set_lit_type (HIR::Literal::LitType::FLOAT);\n+\t      ok = context->lookup_builtin (\"f32\", &infered);\n+\t      break;\n+\t    case CORETYPE_F64:\n+\t      expr.get_literal ()->set_lit_type (HIR::Literal::LitType::FLOAT);\n+\t      ok = context->lookup_builtin (\"f64\", &infered);\n+\t      break;\n+\n \t    default:\n \t      ok = context->lookup_builtin (\"i32\", &infered);\n \t      break;\n@@ -197,8 +206,20 @@ class TypeCheckExpr : public TypeCheckBase\n \tbreak;\n \n \tcase HIR::Literal::LitType::FLOAT: {\n-\t  // FIXME need to respect the suffix if applicable\n-\t  auto ok = context->lookup_builtin (\"f32\", &infered);\n+\t  bool ok = false;\n+\n+\t  switch (expr.get_literal ()->get_type_hint ())\n+\t    {\n+\t    case CORETYPE_F32:\n+\t      ok = context->lookup_builtin (\"f32\", &infered);\n+\t      break;\n+\t    case CORETYPE_F64:\n+\t      ok = context->lookup_builtin (\"f64\", &infered);\n+\t      break;\n+\t    default:\n+\t      ok = context->lookup_builtin (\"f32\", &infered);\n+\t      break;\n+\t    }\n \t  rust_assert (ok);\n \t}\n \tbreak;\n@@ -245,36 +266,59 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n     TypeCheckExpr::Resolve (expr.get_if_block ());\n+\n+    // if without else always resolves to unit type\n+    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::IfExprConseqElse &expr)\n   {\n-    TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    TypeCheckExpr::Resolve (expr.get_if_block ());\n-    TypeCheckExpr::Resolve (expr.get_else_block ());\n+    // this must combine to what the type is expected\n+    // this might be a parameter or the last expr in an if + else in a BlockExpr\n+    // then it must resolve to fn return type\n+    // else its a unit-type\n+    infered = is_final_expr\n+\t\t? context->peek_return_type ()\n+\t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\n+    TypeCheckExpr::Resolve (expr.get_if_condition (), is_final_expr);\n+    auto if_blk_ty = TypeCheckExpr::Resolve (expr.get_if_block ());\n+    auto else_blk_ty = TypeCheckExpr::Resolve (expr.get_else_block ());\n+\n+    if (is_final_expr)\n+      {\n+\tinfered = infered->combine (if_blk_ty);\n+\tinfered = infered->combine (else_blk_ty);\n+      }\n   }\n \n   void visit (HIR::IfExprConseqIf &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n     TypeCheckExpr::Resolve (expr.get_if_block ());\n     TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n+\n+    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::BlockExpr &expr);\n \n   void visit (HIR::ArrayIndexExpr &expr)\n   {\n-    // check the index\n+    // FIXME this should be size type\n     TyTy::IntType size_ty (expr.get_index_expr ()->get_mappings ().get_hirid (),\n \t\t\t   TyTy::IntType::I32);\n     auto resolved\n       = size_ty.combine (TypeCheckExpr::Resolve (expr.get_index_expr ()));\n-    context->insert_type (expr.get_index_expr ()->get_mappings ().get_hirid (),\n-\t\t\t  resolved);\n+    rust_assert (resolved != nullptr);\n \n     expr.get_array_expr ()->accept_vis (*this);\n-    rust_assert (infered != nullptr);\n+    if (infered->get_kind () != TyTy::TypeKind::ARRAY)\n+      {\n+\trust_fatal_error (expr.get_array_expr ()->get_locus_slow (),\n+\t\t\t  \"expected an ArrayType for index expression\");\n+\treturn;\n+      }\n \n     // extract the element type out now from the base type\n     infered = TyTyExtractorArray::ExtractElementTypeFromArray (infered);\n@@ -318,12 +362,15 @@ class TypeCheckExpr : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckExpr ()\n-    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)\n+  TypeCheckExpr (bool is_final_expr)\n+    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr),\n+      is_final_expr (is_final_expr)\n   {}\n \n   TyTy::TyBase *infered;\n   TyTy::TyBase *infered_array_elems;\n+\n+  bool is_final_expr;\n };\n \n } // namespace Resolver"}, {"sha": "62320a6fe37e1677524e3dd55135a600a1059151", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -43,6 +43,18 @@ class ResolveFnType : public TyTy::TyVisitor\n     return state;\n   }\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::FnType &type) override { state = type.return_type (); }\n \n private:\n@@ -72,25 +84,7 @@ class TypeCheckItem : public TypeCheckBase\n     ResolveFnType resolve_fn_type (fnType);\n     context->push_return_type (resolve_fn_type.go ());\n \n-    // walk statements to make sure they are all typed correctly and they match\n-    // up\n-    function.function_body->iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-      TypeCheckStmt::Resolve (s);\n-      return true;\n-    });\n-\n-    // now that the stmts have been resolved we must resolve the block of locals\n-    // and make sure the variables have been resolved\n-    auto body_mappings = function.function_body->get_mappings ();\n-    Rib *rib = nullptr;\n-    if (!resolver->find_name_rib (body_mappings.get_nodeid (), &rib))\n-      {\n-\trust_fatal_error (function.get_locus (),\n-\t\t\t  \"failed to lookup locals per block\");\n-\treturn;\n-      }\n-\n-    TyTyResolver::Resolve (rib, mappings, resolver, context);\n+    TypeCheckExpr::Resolve (function.function_body.get ());\n \n     context->pop_return_type ();\n   }"}, {"sha": "bf754db87b4a828113a5967e235bdcdefb371235", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -30,27 +30,29 @@ namespace Resolver {\n class TypeCheckStmt : public TypeCheckBase\n {\n public:\n-  static void Resolve (HIR::Stmt *stmt)\n+  static TyTy::TyBase *Resolve (HIR::Stmt *stmt, bool is_final_stmt)\n   {\n-    TypeCheckStmt resolver;\n+    TypeCheckStmt resolver (is_final_stmt);\n     stmt->accept_vis (resolver);\n+    return resolver.infered;\n   }\n \n   void visit (HIR::ExprStmtWithBlock &stmt)\n   {\n-    TypeCheckExpr::Resolve (stmt.get_expr ());\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr (), is_final_stmt);\n   }\n \n   void visit (HIR::ExprStmtWithoutBlock &stmt)\n   {\n-    TypeCheckExpr::Resolve (stmt.get_expr ());\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr (), is_final_stmt);\n   }\n \n   void visit (HIR::LetStmt &stmt)\n   {\n     TyTy::TyBase *init_expr_ty = nullptr;\n     if (stmt.has_init_expr ())\n-      init_expr_ty = TypeCheckExpr::Resolve (stmt.get_init_expr ());\n+      init_expr_ty\n+\t= TypeCheckExpr::Resolve (stmt.get_init_expr (), is_final_stmt);\n \n     TyTy::TyBase *specified_ty = nullptr;\n     if (stmt.has_type ())\n@@ -94,7 +96,12 @@ class TypeCheckStmt : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckStmt () : TypeCheckBase () {}\n+  TypeCheckStmt (bool is_final_stmt)\n+    : TypeCheckBase (), is_final_stmt (is_final_stmt)\n+  {}\n+\n+  TyTy::TyBase *infered;\n+  bool is_final_stmt;\n }; // namespace Resolver\n \n } // namespace Resolver"}, {"sha": "e68ba9a7a3f127772cf785b08d4285319c02e665", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -40,10 +40,44 @@ TypeResolution::Resolve (HIR::Crate &crate)\n void\n TypeCheckExpr::visit (HIR::BlockExpr &expr)\n {\n+  TyTy::TyBase *block_tyty\n+    = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\n   expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-    TypeCheckStmt::Resolve (s);\n+    bool is_final_stmt = expr.is_final_stmt (s);\n+    bool is_final_expr = is_final_stmt && !expr.has_expr ();\n+\n+    auto infered = TypeCheckStmt::Resolve (s, is_final_stmt);\n+    if (is_final_expr)\n+      {\n+\tdelete block_tyty;\n+\tblock_tyty = infered;\n+      }\n+\n     return true;\n   });\n+\n+  if (expr.has_expr ())\n+    {\n+      auto tail_tyty = TypeCheckExpr::Resolve (expr.expr.get (), true);\n+\n+      delete block_tyty;\n+      block_tyty = tail_tyty;\n+    }\n+\n+  // now that the stmts have been resolved we must resolve the block of locals\n+  // and make sure the variables have been resolved\n+  auto body_mappings = expr.get_mappings ();\n+  Rib *rib = nullptr;\n+  if (!resolver->find_name_rib (body_mappings.get_nodeid (), &rib))\n+    {\n+      rust_fatal_error (expr.get_locus (), \"failed to lookup locals per block\");\n+      return;\n+    }\n+\n+  TyTyResolver::Resolve (rib, mappings, resolver, context);\n+\n+  infered = block_tyty;\n }\n \n // RUST_HIR_TYPE_CHECK_STRUCT_FIELD"}, {"sha": "cd171d183ef2a3640d7ce8034b670f0819dc46a0", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -69,7 +69,10 @@ TypeCheckContext::lookup_type (HirId id, TyTy::TyBase **type)\n {\n   auto it = resolved.find (id);\n   if (it == resolved.end ())\n-    return false;\n+    {\n+      *type = new TyTy::ErrorType (id);\n+      return false;\n+    }\n \n   *type = it->second;\n   return true;"}, {"sha": "c3fcb1a5a5cd61233cb145623c757c1e45f4b0c8", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -38,6 +38,18 @@ class TypeCheckCallExpr : private TyVisitor\n   }\n   ~TypeCheckCallExpr () {}\n \n+  void visit (UnitType &type) override { gcc_unreachable (); }\n+  void visit (InferType &type) override { gcc_unreachable (); }\n+  void visit (StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (ADTType &type) override { gcc_unreachable (); }\n+  void visit (ParamType &type) override { gcc_unreachable (); }\n+  void visit (ArrayType &type) override { gcc_unreachable (); }\n+  void visit (BoolType &type) override { gcc_unreachable (); }\n+  void visit (IntType &type) override { gcc_unreachable (); }\n+  void visit (UintType &type) override { gcc_unreachable (); }\n+  void visit (FloatType &type) override { gcc_unreachable (); }\n+  void visit (ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (FnType &type) override;\n \n private:"}, {"sha": "3d2196a53660d86c1f2578e7fd337ee6ef1c4c95", "filename": "gcc/rust/typecheck/rust-tyty-resolver.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -73,8 +73,6 @@ class TyTyResolver\n \t\t\t\t\t\t d.parent, &hir_node_ref);\n \t      rust_assert (ok);\n \n-\t      printf (\"failed lets try [%u]\\n\", hir_node_ref);\n-\n \t      if (!context->lookup_type (hir_node_ref, &resolved))\n \t\t{\n \t\t  rust_fatal_error (\n@@ -102,10 +100,8 @@ class TyTyResolver\n \t\t\t\t &resolved_type);\n       rust_assert (ok);\n \n-      if (!resolved_type->is_unit ())\n-\t{\n-\t  return true;\n-\t}\n+      if (resolved_type->get_kind () != TyTy::TypeKind::INFER)\n+\treturn true;\n \n       auto resolved_tyty = resolved_type;\n       for (auto it : gathered_types)\n@@ -155,6 +151,18 @@ class TyTyExtractorArray : public TyTy::TyVisitor\n \n   virtual ~TyTyExtractorArray () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ArrayType &type) override { extracted = type.get_type (); }\n \n private:"}, {"sha": "677013f864f3af107d02783b636c5f14a28357ce", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 100, "deletions": 73, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -34,77 +34,127 @@ class BaseRules : public TyVisitor\n \n   virtual void visit (UnitType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n+  virtual void visit (ADTType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (InferType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (FnType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ParamType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ArrayType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (BoolType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (IntType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (UintType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n+  virtual void visit (FloatType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n+  virtual void visit (ErrorType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n+  virtual void visit (StructFieldType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n protected:\n-  BaseRules (TyBase *base) : mappings (Analysis::Mappings::get ()), base (base)\n+  BaseRules (TyBase *base)\n+    : mappings (Analysis::Mappings::get ()), base (base),\n+      resolved (new ErrorType (base->get_ref ()))\n   {}\n \n   Analysis::Mappings *mappings;\n-\n-private:\n   TyBase *base;\n+  TyBase *resolved;\n };\n \n class InferRules : protected BaseRules\n {\n public:\n-  InferRules (InferType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~InferRules () {}\n+  InferRules (InferType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -114,31 +164,34 @@ class InferRules : protected BaseRules\n \n   // we are an inference variable so this means we can take the other as the\n   // type\n-  virtual void visit (BoolType &type) override\n+  void visit (UnitType &type) override\n+  {\n+    resolved = new UnitType (type.get_ref ());\n+  }\n+\n+  void visit (BoolType &type) override\n   {\n     resolved = new BoolType (type.get_ref ());\n   }\n \n-  virtual void visit (IntType &type) override\n+  void visit (IntType &type) override\n   {\n     resolved = new IntType (type.get_ref (), type.get_kind ());\n   }\n \n-  virtual void visit (UintType &type) override\n+  void visit (UintType &type) override\n   {\n     resolved = new UintType (type.get_ref (), type.get_kind ());\n   }\n \n private:\n   InferType *base;\n-  TyBase *resolved;\n };\n \n class StructFieldTypeRules : protected BaseRules\n {\n public:\n-  StructFieldTypeRules (StructFieldType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n+  StructFieldTypeRules (StructFieldType *base) : BaseRules (base), base (base)\n   {}\n \n   TyBase *combine (TyBase *other)\n@@ -149,32 +202,29 @@ class StructFieldTypeRules : protected BaseRules\n \n private:\n   StructFieldType *base;\n-  TyBase *resolved;\n };\n \n class UnitRules : protected BaseRules\n {\n public:\n-  UnitRules (UnitType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~UnitRules () {}\n+  UnitRules (UnitType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n     other->accept_vis (*this);\n     return resolved;\n   }\n \n+  void visit (IntType &type) override { rust_assert (false); }\n+\n private:\n   UnitType *base;\n-  TyBase *resolved;\n };\n \n class FnRules : protected BaseRules\n {\n public:\n-  FnRules (FnType *base) : BaseRules (base), base (base), resolved (nullptr) {}\n-  ~FnRules () {}\n+  FnRules (FnType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -184,16 +234,12 @@ class FnRules : protected BaseRules\n \n private:\n   FnType *base;\n-  TyBase *resolved;\n };\n \n class ParamRules : protected BaseRules\n {\n public:\n-  ParamRules (ParamType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~ParamRules () {}\n+  ParamRules (ParamType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -203,17 +249,12 @@ class ParamRules : protected BaseRules\n \n private:\n   ParamType *base;\n-  TyBase *resolved;\n };\n \n class ArrayRules : protected BaseRules\n {\n public:\n-  ArrayRules (ArrayType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-\n-  ~ArrayRules () {}\n+  ArrayRules (ArrayType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -242,15 +283,12 @@ class ArrayRules : protected BaseRules\n \n private:\n   ArrayType *base;\n-  TyBase *resolved;\n };\n \n class BoolRules : protected BaseRules\n {\n public:\n-  BoolRules (BoolType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~BoolRules () {}\n+  BoolRules (BoolType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -265,15 +303,12 @@ class BoolRules : protected BaseRules\n \n private:\n   BoolType *base;\n-  TyBase *resolved;\n };\n \n class IntRules : protected BaseRules\n {\n public:\n-  IntRules (IntType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~IntRules () {}\n+  IntRules (IntType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -289,15 +324,12 @@ class IntRules : protected BaseRules\n \n private:\n   IntType *base;\n-  TyBase *resolved;\n };\n \n class UintRules : protected BaseRules\n {\n public:\n-  UintRules (UintType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~UintRules () {}\n+  UintRules (UintType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -313,16 +345,12 @@ class UintRules : protected BaseRules\n \n private:\n   UintType *base;\n-  TyBase *resolved;\n };\n \n class FloatRules : protected BaseRules\n {\n public:\n-  FloatRules (FloatType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~FloatRules () {}\n+  FloatRules (FloatType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -338,7 +366,6 @@ class FloatRules : protected BaseRules\n \n private:\n   FloatType *base;\n-  TyBase *resolved;\n };\n \n } // namespace TyTy"}, {"sha": "def43cd8d2339b500b773fb0a0be8837c8532685", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -27,17 +27,18 @@ namespace TyTy {\n class TyVisitor\n {\n public:\n-  virtual void visit (UnitType &type) {}\n-  virtual void visit (InferType &type) {}\n-  virtual void visit (StructFieldType &type) {}\n-  virtual void visit (ADTType &type) {}\n-  virtual void visit (FnType &type) {}\n-  virtual void visit (ParamType &type) {}\n-  virtual void visit (ArrayType &type) {}\n-  virtual void visit (BoolType &type) {}\n-  virtual void visit (IntType &type) {}\n-  virtual void visit (UintType &type) {}\n-  virtual void visit (FloatType &type) {}\n+  virtual void visit (UnitType &type) = 0;\n+  virtual void visit (InferType &type) = 0;\n+  virtual void visit (StructFieldType &type) = 0;\n+  virtual void visit (ADTType &type) = 0;\n+  virtual void visit (FnType &type) = 0;\n+  virtual void visit (ParamType &type) = 0;\n+  virtual void visit (ArrayType &type) = 0;\n+  virtual void visit (BoolType &type) = 0;\n+  virtual void visit (IntType &type) = 0;\n+  virtual void visit (UintType &type) = 0;\n+  virtual void visit (FloatType &type) = 0;\n+  virtual void visit (ErrorType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "033f83970e28d47ea1e9516a9d0a3266ecc0f920", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -63,6 +63,25 @@ InferType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+void\n+ErrorType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+ErrorType::as_string () const\n+{\n+  return \"<tyty::error>\";\n+}\n+\n+TyBase *\n+ErrorType::combine (TyBase *other)\n+{\n+  // rust_error_at ();\n+  return this;\n+}\n+\n void\n StructFieldType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "be7ec0c47fce6c8f6a3d9f1e0ec91a7f4f46caf4", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -43,13 +43,14 @@ enum TypeKind\n   UNIT,\n   FIELD,\n   // there are more to add...\n+  ERROR\n };\n \n class TyVisitor;\n class TyBase\n {\n public:\n-  ~TyBase () {}\n+  virtual ~TyBase () {}\n \n   HirId get_ref () const { return ref; }\n \n@@ -84,6 +85,20 @@ class InferType : public TyBase\n   TyBase *combine (TyBase *other) override;\n };\n \n+class ErrorType : public TyBase\n+{\n+public:\n+  ErrorType (HirId ref) : TyBase (ref, TypeKind::ERROR) {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  bool is_unit () const override { return true; }\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+};\n+\n class UnitType : public TyBase\n {\n public:"}, {"sha": "ec6e2404333c444130c8c254231fa09d4b77bed4", "filename": "gcc/testsuite/rust.test/compilable/deadcode1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fdeadcode1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fdeadcode1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fdeadcode1.rs?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -0,0 +1,18 @@\n+fn test1() -> i32 {\n+    return 2;\n+    1\n+}\n+\n+fn test2(x: i32) -> i32 {\n+    if x > 1 {\n+        return 5;\n+    } else {\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+fn main() {\n+    let call1 = test1();\n+    let call2 = test2(2);\n+}"}, {"sha": "50b392e65008387712dcd5aaf758e6db66ea06ca", "filename": "gcc/testsuite/rust.test/compilable/float_types.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ffloat_types.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ffloat_types.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ffloat_types.rs?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let a1: f32 = 1.0f32;\n+    let a2: f64 = 2.0f64;\n+    let a3: f32 = 3f32;\n+    let a4: f64 = 4f64;\n+\n+    let b1 = 1.0f32;\n+    let b2 = 2.0f64;\n+    let b3 = 3f32;\n+    let b4 = 4f64;\n+}"}, {"sha": "49457c682cc35ecac12cee6844d6f3d13ed8c29e", "filename": "gcc/testsuite/rust.test/compilable/implicit_returns1.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimplicit_returns1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimplicit_returns1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimplicit_returns1.rs?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -0,0 +1,65 @@\n+fn test1() -> i32 {\n+    1\n+}\n+\n+fn test2() -> i32 {\n+    return 2;\n+}\n+\n+fn test3(x: i32) -> i32 {\n+    if x > 1 {\n+        5\n+    } else {\n+        0\n+    }\n+}\n+\n+fn test4(x: i32) -> i32 {\n+    if x > 1 {\n+        return 1;\n+    }\n+    0\n+}\n+\n+fn test5(x: i32) -> i32 {\n+    if x > 1 {\n+        if x == 5 {\n+            7\n+        } else {\n+            9\n+        }\n+    } else {\n+        0\n+    }\n+}\n+\n+fn test6(x: i32) -> i32 {\n+    if x > 1 {\n+        return 5;\n+    } else {\n+        return 0;\n+    }\n+}\n+\n+fn test7(x: i32) -> i32 {\n+    if x > 1 {\n+        return 5;\n+    } else {\n+        return 0;\n+    }\n+}\n+\n+fn test8() -> i32 {\n+    return 1;\n+}\n+\n+fn main() {\n+    let call1 = test1();\n+    let call2 = test2();\n+    let call3 = test3(3);\n+    let call4 = test4(4);\n+    let call5 = test5(5);\n+    let call6 = test6(6);\n+    let call7 = test7(7);\n+    let call8 = test8();\n+}"}, {"sha": "cd48e8368c0d9f49b54a985d865ced71d340852b", "filename": "gcc/testsuite/rust.test/compilable/literals1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fliterals1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fliterals1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fliterals1.rs?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let hex: i32 = 0xFF;\n+    let binary: i32 = 0b11110000;\n+    let oct: i32 = 0o70;\n+\n+    let hex_u8: u8 = 0xFF_u8;\n+    let bin_u16: u16 = 0b1111000011110000_u16;\n+    let oct: u32 = 0o70_u32;\n+}"}, {"sha": "02b5f9375955bf35de091aa688504e7eda634ab7", "filename": "gcc/testsuite/rust.test/compilable/scoping1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fscoping1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fscoping1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fscoping1.rs?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let x = 1;\n+    {\n+        let x = true;\n+        {\n+            x = false;\n+        }\n+    }\n+    let x = x + 1;\n+}"}, {"sha": "fbac8c0e22f55378a3b32a11a33c18418555cece", "filename": "gcc/testsuite/rust.test/compilable/shadow2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fshadow2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fshadow2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fshadow2.rs?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = 1;\n+    let x = x + 1;\n+}"}, {"sha": "500d007307546d0fbf9ea6d12202f5b236e0c23b", "filename": "gcc/testsuite/rust.test/fail_compilation/missing_return1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fmissing_return1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fmissing_return1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fmissing_return1.rs?ref=b247c0d5aadf6eb7323641ffbcf7cc67bedd2c52", "patch": "@@ -0,0 +1,5 @@\n+fn test1() -> i32 {}\n+\n+fn main() {\n+    let call1 = test1();\n+}"}]}