{"sha": "648d2ffce89154a5c166258f6638ab32e737a2c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4ZDJmZmNlODkxNTRhNWMxNjYyNThmNjYzOGFiMzJlNzM3YTJjNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-26T01:21:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-26T01:21:59Z"}, "message": "m32r.h (EXPAND_BUILTIN_SAVEREGS): Likewise.\n\n        * m32r.h (EXPAND_BUILTIN_SAVEREGS): Likewise.\n        * m88k.h, m88k.c: Likewise.\n        * mn10300.h, mn10300.c: Likewise.\n        * pa.h, pa.c: Likewise.\n        * rs6000.h, rs6000.c: Likewise.\n        * sh.h, sh.c: Likewise.\n        * sparc.h, sparc.c: Likewise.\n\nFrom-SVN: r28245", "tree": {"sha": "952b4b0581b289008327f9da58e71d60c6cb14be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/952b4b0581b289008327f9da58e71d60c6cb14be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/648d2ffce89154a5c166258f6638ab32e737a2c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648d2ffce89154a5c166258f6638ab32e737a2c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/648d2ffce89154a5c166258f6638ab32e737a2c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648d2ffce89154a5c166258f6638ab32e737a2c6/comments", "author": null, "committer": null, "parents": [{"sha": "5379f4a4c46244445865452c7a691c2503ed9322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5379f4a4c46244445865452c7a691c2503ed9322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5379f4a4c46244445865452c7a691c2503ed9322"}], "stats": {"total": 79, "additions": 28, "deletions": 51}, "files": [{"sha": "b9de985e0c8433ba0e9f25348b7c1b667ebd5c27", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -981,7 +981,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n    If this macro is not defined, the compiler will output an ordinary\n    call to the library function `__builtin_saveregs'.  */\n extern struct rtx *m32r_expand_builtin_savergs ();\n-#define EXPAND_BUILTIN_SAVEREGS(ARGS) m32r_expand_builtin_saveregs (ARGS)\n+#define EXPAND_BUILTIN_SAVEREGS() m32r_expand_builtin_saveregs ()\n #endif\n \n /* This macro offers an alternative"}, {"sha": "b461782753a5fa8ebd4210e481e0dc695eaaa87c", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -2573,14 +2573,12 @@ m88k_function_arg (args_so_far, mode, type, named)\n \t\t  2 + args_so_far);\n }\n \f\n-/* Do what is necessary for `va_start'.  The argument is ignored;\n-   We look at the current function to determine if stdargs or varargs\n-   is used and fill in an initial va_list.  A pointer to this constructor\n-   is returned.  */\n+/* Do what is necessary for `va_start'.  We look at the current function\n+   to determine if stdargs or varargs is used and fill in an initial\n+   va_list.  A pointer to this constructor is returned.  */\n \n struct rtx_def *\n-m88k_builtin_saveregs (arglist)\n-     tree arglist;\n+m88k_builtin_saveregs ()\n {\n   rtx block, addr, argsize, dest;\n   tree fntype = TREE_TYPE (current_function_decl);"}, {"sha": "2eb2b1f8a80df10a1e303d7c2bf3aca7f21dbc98", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -198,13 +198,13 @@ extern char * reg_names[];\n    Redefined in sysv4.h, and luna.h.  */\n #define VERSION_INFO1\t\"m88k, \"\n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.11 $\"\n+#define VERSION_INFO2   \"$Revision: 1.12 $\"\n #endif\n \n #ifndef VERSION_STRING\n #define VERSION_STRING  version_string\n #ifdef __STDC__\n-#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.11 $ \" __DATE__\n+#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.12 $ \" __DATE__\n #else\n #define TM_RCS_ID      \"$What: <@(#) m88k.h,v\t1.1.1.2.2.2> $\"\n #endif  /* __STDC__ */\n@@ -1093,7 +1093,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* Generate necessary RTL for __builtin_saveregs().\n    ARGLIST is the argument list; see expr.c.  */\n-#define EXPAND_BUILTIN_SAVEREGS(ARGLIST) m88k_builtin_saveregs (ARGLIST)\n+#define EXPAND_BUILTIN_SAVEREGS() m88k_builtin_saveregs ()\n \n /* Generate the assembly code for function entry. */\n #define FUNCTION_PROLOGUE(FILE, SIZE) m88k_begin_prologue(FILE, SIZE)"}, {"sha": "cd7559fb1cc276ee4c208f17b12e7492949b3d33", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -627,8 +627,7 @@ initial_offset (from, to)\n /* Flush the argument registers to the stack for a stdarg function;\n    return the new argument pointer.  */\n rtx\n-mn10300_builtin_saveregs (arglist)\n-     tree arglist;\n+mn10300_builtin_saveregs ()\n {\n   rtx offset;\n   tree fntype = TREE_TYPE (current_function_decl);"}, {"sha": "b7b64e593ce12127a55b86fe8bde9ec2e8c65164", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -570,7 +570,7 @@ extern struct rtx_def *function_arg ();\n    _builtin_saveregs, so we must make this explicit.  */\n \n extern struct rtx_def *mn10300_builtin_saveregs ();\n-#define EXPAND_BUILTIN_SAVEREGS(ARGLIST) mn10300_builtin_saveregs (ARGLIST)\n+#define EXPAND_BUILTIN_SAVEREGS() mn10300_builtin_saveregs ()\n \n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "0293ebe227659f9dcf5c26dc4074b30df9f13187", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -4259,14 +4259,12 @@ function_arg_padding (mode, type)\n }\n \n \f\n-/* Do what is necessary for `va_start'.  The argument is ignored;\n-   We look at the current function to determine if stdargs or varargs\n-   is used and fill in an initial va_list.  A pointer to this constructor\n-   is returned.  */\n+/* Do what is necessary for `va_start'.  We look at the current function\n+   to determine if stdargs or varargs is used and fill in an initial\n+   va_list.  A pointer to this constructor is returned.  */\n \n struct rtx_def *\n-hppa_builtin_saveregs (arglist)\n-     tree arglist ATTRIBUTE_UNUSED;\n+hppa_builtin_saveregs ()\n {\n   rtx offset, dest;\n   tree fntype = TREE_TYPE (current_function_decl);"}, {"sha": "ce2e555d197a789ede50516eb2ec2e86785521b6", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -1217,7 +1217,7 @@ extern union tree_node *current_function_decl;\n    _builtin_saveregs, so we must make this explicit.  */\n \n extern struct rtx_def *hppa_builtin_saveregs ();\n-#define EXPAND_BUILTIN_SAVEREGS(ARGLIST) hppa_builtin_saveregs (ARGLIST)\n+#define EXPAND_BUILTIN_SAVEREGS() hppa_builtin_saveregs ()\n \n \f\n /* Addressing modes, and classification of registers for them. "}, {"sha": "527fd04194ccf0b9a010a4c625996df255dde96d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -1758,12 +1758,6 @@ setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n    are made.  The return value of this function should be an RTX that\n    contains the value to use as the return of `__builtin_saveregs'.\n \n-   The argument ARGS is a `tree_list' containing the arguments that\n-   were passed to `__builtin_saveregs'.\n-\n-   If this macro is not defined, the compiler will output an ordinary\n-   call to the library function `__builtin_saveregs'.\n-   \n    On the Power/PowerPC return the address of the area on the stack\n    used to hold arguments.  Under AIX, this includes the 8 word register\n    save area. \n@@ -1774,8 +1768,7 @@ setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n    to a block copy.  This is similar to the way we do things on Alpha.  */\n \n struct rtx_def *\n-expand_builtin_saveregs (args)\n-     tree args ATTRIBUTE_UNUSED;\n+expand_builtin_saveregs ()\n {\n   rtx block, mem_gpr_fpr, mem_reg_save_area, mem_overflow, tmp;\n   tree fntype;"}, {"sha": "04d00c7458c8aebca7a56698e4e282b1daafaeae", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -1566,16 +1566,10 @@ typedef struct rs6000_args\n    code for a call to `__builtin_saveregs'.  This code will be moved\n    to the very beginning of the function, before any parameter access\n    are made.  The return value of this function should be an RTX that\n-   contains the value to use as the return of `__builtin_saveregs'.\n+   contains the value to use as the return of `__builtin_saveregs'.  */\n \n-   The argument ARGS is a `tree_list' containing the arguments that\n-   were passed to `__builtin_saveregs'.\n-\n-   If this macro is not defined, the compiler will output an ordinary\n-   call to the library function `__builtin_saveregs'.  */\n-\n-#define EXPAND_BUILTIN_SAVEREGS(ARGS) \\\n-  expand_builtin_saveregs (ARGS)\n+#define EXPAND_BUILTIN_SAVEREGS() \\\n+  expand_builtin_saveregs ()\n \n /* This macro generates the assembly code for function entry.\n    FILE is a stdio stream to output the code to."}, {"sha": "12d093ca6a980aa5f48360bff573ab8f47959191", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -3872,8 +3872,7 @@ function_epilogue (stream, size)\n }\n \n rtx\n-sh_builtin_saveregs (arglist)\n-     tree arglist;\n+sh_builtin_saveregs ()\n {\n   tree fntype = TREE_TYPE (current_function_decl);\n   /* First unnamed integer register.  */"}, {"sha": "23731abf5fd154c78ba88bb49740de08008069eb", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -1153,10 +1153,9 @@ extern int current_function_anonymous_args;\n    ? gen_rtx (MEM, Pmode, gen_rtx (REG, Pmode, RETURN_ADDRESS_POINTER_REGNUM)) \\\n    : (rtx) 0)\n \f\n-/* Generate necessary RTL for __builtin_saveregs().\n-   ARGLIST is the argument list; see expr.c.  */\n+/* Generate necessary RTL for __builtin_saveregs().  */\n extern struct rtx_def *sh_builtin_saveregs ();\n-#define EXPAND_BUILTIN_SAVEREGS(ARGLIST) sh_builtin_saveregs (ARGLIST)\n+#define EXPAND_BUILTIN_SAVEREGS() sh_builtin_saveregs ()\n \f\n /* Addressing modes, and classification of registers for them.  */\n #define HAVE_POST_INCREMENT  1"}, {"sha": "2609bf4aaedbba9e875dfe1229b5dcb4e451e87f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -4256,14 +4256,12 @@ function_value (type, mode, incoming_p)\n   return gen_rtx_REG (mode, regno);\n }\n \n-/* Do what is necessary for `va_start'.  The argument is ignored.\n-\n-   We look at the current function to determine if stdarg or varargs\n-   is used and return the address of the first unnamed parameter.  */\n+/* Do what is necessary for `va_start'.  We look at the current function\n+   to determine if stdarg or varargs is used and return the address of\n+   the first unnamed parameter.  */\n \n rtx\n-sparc_builtin_saveregs (arglist)\n-     tree arglist ATTRIBUTE_UNUSED;\n+sparc_builtin_saveregs ()\n {\n   int first_reg = current_function_args_info.words;\n   rtx address;"}, {"sha": "52f911a5245522a52fa51a9c7d5d9025d4088b13", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648d2ffce89154a5c166258f6638ab32e737a2c6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=648d2ffce89154a5c166258f6638ab32e737a2c6", "patch": "@@ -2039,11 +2039,10 @@ void sparc64_initialize_trampoline ();\n     else\t\t\t\t\t\t\t\\\n       sparc_initialize_trampoline (TRAMP, FNADDR, CXT)\n \f\n-/* Generate necessary RTL for __builtin_saveregs().\n-   ARGLIST is the argument list; see expr.c.  */\n+/* Generate necessary RTL for __builtin_saveregs().  */\n \n extern struct rtx_def *sparc_builtin_saveregs ();\n-#define EXPAND_BUILTIN_SAVEREGS(ARGLIST) sparc_builtin_saveregs (ARGLIST)\n+#define EXPAND_BUILTIN_SAVEREGS() sparc_builtin_saveregs ()\n \n /* Define this macro if the location where a function argument is passed\n    depends on whether or not it is a named argument."}]}