{"sha": "f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQyNjg0ZDVjOTc4M2RmZDMwODRlNmFlMzViMGRlZTc4MGI1YTJhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-09-07T17:45:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-09-07T17:45:48Z"}, "message": "re PR target/28946 (assembler shifts set the flag ZF, no need to re-test to zero)\n\n        PR target/28946\n        * config/i386/i386.md (\"*ashldi3_cconly_rex64\", \"*ashlsi3_cconly\",\n        \"*ashlhi3_cconly\", \"*ashlqi3_cconly\", \"*ashrdi3_one_bit_cconly_rex64\",\n        \"*ashrdi3_cconly_rex64\", \"*ashrsi3_one_bit_cconly\", \"*ashrsi3_cconly\",\n        \"*ashrhi3_one_bit_cconly\", \"*ashrhi3_cconly\",\n        \"*ashrqi3_one_bit_cconly\", \"*ashrqi3_cconly\",\n        \"*lshrdi3_cconly_one_bit_rex64\", \"*lshrdi3_cconly_rex64\",\n        \"*lshrsi3_one_bit_cconly\", \"*lshrsi3_cconly\",\n        \"*lshrhi3_one_bit_cconly\", \"*lshrhi3_cconly\",\n        \"*lshrqi2_one_bit_cconly\", \"*lshrqi2_cconly\": New patterns to\n        implement only CC setting effects of shift instructions.\n\ntestsuite/ChangeLog:\n\n       PR target/28946\n       * gcc.target/i386/pr28946.c: New test.\n\nFrom-SVN: r116756", "tree": {"sha": "38c373dd7cf2b53a9ec72baf4666a65dc3fbb83c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c373dd7cf2b53a9ec72baf4666a65dc3fbb83c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/comments", "author": null, "committer": null, "parents": [{"sha": "d4a200d359866bc4d8dd1e9ef71cdbc69ab80b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a200d359866bc4d8dd1e9ef71cdbc69ab80b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a200d359866bc4d8dd1e9ef71cdbc69ab80b74"}], "stats": {"total": 395, "additions": 395, "deletions": 0}, "files": [{"sha": "8d02f2090a016f7ffd3b79ed37dd4301dd584a87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "patch": "@@ -1,3 +1,17 @@\n+2006-09-07 Uros Bizjak <uros@kss-loka.si>\n+\n+\tPR target/28946\n+\t* config/i386/i386.md (\"*ashldi3_cconly_rex64\", \"*ashlsi3_cconly\",\n+\t\"*ashlhi3_cconly\", \"*ashlqi3_cconly\", \"*ashrdi3_one_bit_cconly_rex64\",\n+\t\"*ashrdi3_cconly_rex64\", \"*ashrsi3_one_bit_cconly\", \"*ashrsi3_cconly\",\n+\t\"*ashrhi3_one_bit_cconly\", \"*ashrhi3_cconly\",\n+\t\"*ashrqi3_one_bit_cconly\", \"*ashrqi3_cconly\",\n+\t\"*lshrdi3_cconly_one_bit_rex64\", \"*lshrdi3_cconly_rex64\",\n+\t\"*lshrsi3_one_bit_cconly\", \"*lshrsi3_cconly\",\n+\t\"*lshrhi3_one_bit_cconly\", \"*lshrhi3_cconly\",\n+\t\"*lshrqi2_one_bit_cconly\", \"*lshrqi2_cconly\": New patterns to\n+\timplement only CC setting effects of shift instructions.\n+\n 2006-09-07  Martin Michlmayr  <tbm@cyrius.com>\n \n \t* doc/contrib.texi: Add myself."}, {"sha": "f9be68f9e75521317c94337b5344859763977173", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 361, "deletions": 0, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "patch": "@@ -10424,6 +10424,42 @@\n \t   (const_string \"ishift\")))\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"*ashldi3_cconly_rex64\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"e\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=r\"))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      gcc_assert (operands[2] == const1_rtx);\n+      return \"add{q}\\t{%0, %0|%0, %0}\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \"sal{q}\\t{%b2, %0|%0, %b2}\";\n+      else if (operands[2] == const1_rtx\n+\t       && (TARGET_SHIFT1 || optimize_size))\n+\treturn \"sal{q}\\t%0\";\n+      else\n+\treturn \"sal{q}\\t{%2, %0|%0, %2}\";\n+    }\n+}\n+  [(set (attr \"type\")\n+     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"*ashldi3_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r,r\")\n \t(ashift:DI (match_operand:DI 1 \"reg_or_pm1_operand\" \"n,0\")\n@@ -10705,6 +10741,42 @@\n \t   (const_string \"ishift\")))\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*ashlsi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      gcc_assert (operands[2] == const1_rtx);\n+      return \"add{l}\\t{%0, %0|%0, %0}\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \"sal{l}\\t{%b2, %0|%0, %b2}\";\n+      else if (operands[2] == const1_rtx\n+\t       && (TARGET_SHIFT1 || optimize_size))\n+\treturn \"sal{l}\\t%0\";\n+      else\n+\treturn \"sal{l}\\t{%2, %0|%0, %2}\";\n+    }\n+}\n+  [(set (attr \"type\")\n+     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*ashlsi3_cmp_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n@@ -10861,6 +10933,42 @@\n \t   (const_string \"ishift\")))\n    (set_attr \"mode\" \"HI\")])\n \n+(define_insn \"*ashlhi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:HI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      gcc_assert (operands[2] == const1_rtx);\n+      return \"add{w}\\t{%0, %0|%0, %0}\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n+      else if (operands[2] == const1_rtx\n+\t       && (TARGET_SHIFT1 || optimize_size))\n+\treturn \"sal{w}\\t%0\";\n+      else\n+\treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n+    }\n+}\n+  [(set (attr \"type\")\n+     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"HI\")])\n+\n (define_expand \"ashlqi3\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n@@ -11019,6 +11127,42 @@\n \t   (const_string \"ishift\")))\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"*ashlqi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      gcc_assert (operands[2] == const1_rtx);\n+      return \"add{b}\\t{%0, %0|%0, %0}\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \"sal{b}\\t{%b2, %0|%0, %b2}\";\n+      else if (operands[2] == const1_rtx\n+\t       && (TARGET_SHIFT1 || optimize_size))\n+\treturn \"sal{b}\\t%0\";\n+      else\n+\treturn \"sal{b}\\t{%2, %0|%0, %2}\";\n+    }\n+}\n+  [(set (attr \"type\")\n+     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; See comment above `ashldi3' about how this works.\n \n (define_expand \"ashrti3\"\n@@ -11162,6 +11306,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*ashrdi3_one_bit_cconly_rex64\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=r\"))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+  \"sar{q}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -11179,6 +11337,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"*ashrdi3_cconly_rex64\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_operand\" \"n\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=r\"))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+  \"sar{q}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"*ashrdi3_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n@@ -11367,6 +11538,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*ashrsi3_one_bit_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"sar{l}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*ashrsi3_one_bit_cmp_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n@@ -11399,6 +11584,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*ashrsi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"sar{l}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*ashrsi3_cmp_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n@@ -11468,6 +11666,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*ashrhi3_one_bit_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:HI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n+  \"sar{w}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -11485,6 +11697,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n \n+(define_insn \"*ashrhi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:HI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n+  \"sar{w}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"HI\")])\n+\n (define_expand \"ashrqi3\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n@@ -11568,6 +11793,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*ashrqi3_one_bit_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+  \"sar{b}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -11584,6 +11823,20 @@\n   \"sar{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*ashrqi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+  \"sar{b}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"QI\")])\n+\n \f\n ;; Logical shift instructions\n \n@@ -11697,6 +11950,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*lshrdi3_cconly_one_bit_rex64\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=r\"))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{q}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -11714,6 +11981,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"*lshrdi3_cconly_rex64\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_operand\" \"e\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=r\"))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{q}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"*lshrdi3_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n@@ -11826,6 +12106,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*lshrsi3_one_bit_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{l}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*lshrsi3_cmp_one_bit_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n@@ -11858,6 +12152,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*lshrsi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+      (compare\n+\t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+        (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{l}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*lshrsi3_cmp_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n@@ -11927,6 +12234,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*lshrhi3_one_bit_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:HI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{w}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -11944,6 +12265,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n \n+(define_insn \"*lshrhi3_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:HI 0 \"=r\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{w}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"HI\")])\n+\n (define_expand \"lshrqi3\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n@@ -12026,6 +12360,20 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*lshrqi2_one_bit_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_SHIFT1 || optimize_size)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+  \"shr{b}\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -12042,6 +12390,19 @@\n   \"shr{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*lshrqi2_cconly\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+  \"shr{b}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"QI\")])\n \f\n ;; Rotate instructions\n "}, {"sha": "878c22f159c03fac5259b9e122ee6278cda06c26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "patch": "@@ -1,3 +1,8 @@\n+2006-09-07  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR target/28946\n+\t* gcc.target/i386/pr28946.c: New test.\n+\n 2006-09-07  Steven G. Kargl  <kargls@comcast.net>\n \n \t* gfortran.fortran-torture/compile/data_1.f90: Fix integer oveflow"}, {"sha": "3a72a0a4fff1b7dd89c1bb0bc524f66331993d8b", "filename": "gcc/testsuite/gcc.target/i386/pr28946.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr28946.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr28946.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr28946.c?ref=f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { scan-assembler-not \"test\" } } */\n+\n+int fct1 (void);\n+int fct2 (void);\n+\n+int\n+fct (unsigned nb)\n+{\n+  if ((nb >> 5) != 0)\n+    return fct1 ();\n+  else\n+    return fct2 ();\n+}"}]}