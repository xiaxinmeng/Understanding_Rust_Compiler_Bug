{"sha": "4d80892796677b2beaf9d47d80e337b315395582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ4MDg5Mjc5NjY3N2IyYmVhZjlkNDdkODBlMzM3YjMxNTM5NTU4Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-01T22:43:33Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-01T22:43:33Z"}, "message": "c-common.c (warn_format, [...]): Define.\n\n\t* c-common.c (warn_format, warn_format_y2k,\n\twarn_format_extra_args, warn_format_nonliteral): Define.\n\t(check_format_info): Check warn_format_nonliteral and\n\twarn_format_extra_args.\n\t(check_format_info_main): Check warn_format_y2k.\n\t(set_Wformat): New function.\n\t* c-common.h (warn_format_y2k, warn_format_extra_args,\n\twarn_format_nonliteral, set_Wformat): Declare.\n\t* c-decl.c (warn_format): Remove definition.\n\t(c_decode_option): Handle -Wformat-nonliteral,\n\t-Wno-format-extra-args and -Wno-format-y2k, and negated versions.\n\tUse set_Wformat.\n\t* invoke.texi: Document these new options and -Wformat=2.\n\t* toplev.c (documented_lang_options): Add these new options.\n\ncp:\n\t* decl2.c (warn_format): Remove definition.\n\t(lang_decode_option): Handle -Wformat-nonliteral,\n\t-Wno-format-extra-args and -Wno-format-y2k.  Use set_Wformat.\n\ntestsuite:\n\t* gcc.dg/format-no-exargs-1.c, gcc.dg/format-no-y2k-1.c,\n\tgcc.dg/format-nonlit-1.c, gcc.dg/format-nonlit-2.c: New tests.\n\nFrom-SVN: r37933", "tree": {"sha": "bdb5953541ec233f2de9b035d07dd0cc7f8757c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdb5953541ec233f2de9b035d07dd0cc7f8757c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d80892796677b2beaf9d47d80e337b315395582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d80892796677b2beaf9d47d80e337b315395582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d80892796677b2beaf9d47d80e337b315395582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d80892796677b2beaf9d47d80e337b315395582/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78f4a977a1f0f802035fd473d64659d4f48a8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78f4a977a1f0f802035fd473d64659d4f48a8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78f4a977a1f0f802035fd473d64659d4f48a8ab"}], "stats": {"total": 241, "additions": 206, "deletions": 35}, "files": [{"sha": "cea291546c1bad1851156c4fed32ccbe3feb9b3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -1,3 +1,20 @@\n+2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (warn_format, warn_format_y2k,\n+\twarn_format_extra_args, warn_format_nonliteral): Define.\n+\t(check_format_info): Check warn_format_nonliteral and\n+\twarn_format_extra_args.\n+\t(check_format_info_main): Check warn_format_y2k.\n+\t(set_Wformat): New function.\n+\t* c-common.h (warn_format_y2k, warn_format_extra_args,\n+\twarn_format_nonliteral, set_Wformat): Declare.\n+\t* c-decl.c (warn_format): Remove definition.\n+\t(c_decode_option): Handle -Wformat-nonliteral,\n+\t-Wno-format-extra-args and -Wno-format-y2k, and negated versions.\n+\tUse set_Wformat.\n+\t* invoke.texi: Document these new options and -Wformat=2.\n+\t* toplev.c (documented_lang_options): Add these new options.\n+\n 2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* builtins.def (BUILT_IN_IMAXABS): Add."}, {"sha": "e07a7d32f4506c1364eff0c6e0b1977caccdb189", "filename": "gcc/c-common.c", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -173,6 +173,22 @@ int flag_no_nonansi_builtin;\n \n const char *flag_dump_translation_unit;\n \n+/* Warn about *printf or *scanf format/argument anomalies. */\n+\n+int warn_format;\n+\n+/* Warn about Y2K problems with strftime formats.  */\n+\n+int warn_format_y2k;\n+\n+/* Warn about excess arguments to formats.  */\n+\n+int warn_format_extra_args;\n+\n+/* Warn about non-literal format arguments.  */\n+\n+int warn_format_nonliteral;\n+\n /* Nonzero means warn about possible violations of sequence point rules.  */\n \n int warn_sequence_point;\n@@ -2321,7 +2337,7 @@ check_format_info (status, info, params)\n       /* Functions taking a va_list normally pass a non-literal format\n \t string.  These functions typically are declared with\n \t first_arg_num == 0, so avoid warning in those cases.  */\n-      if (info->first_arg_num != 0 && warn_format > 1)\n+      if (info->first_arg_num != 0 && warn_format_nonliteral)\n \tstatus_warning (status, \"format not a string literal, argument types not checked\");\n     }\n \n@@ -2333,10 +2349,10 @@ check_format_info (status, info, params)\n      If the format is an empty string, this should be counted similarly to the\n      case of extra format arguments.  */\n   if (res.number_extra_args > 0 && res.number_non_literal == 0\n-      && res.number_other == 0)\n+      && res.number_other == 0 && warn_format_extra_args)\n     status_warning (status, \"too many arguments for format\");\n   if (res.number_dollar_extra_args > 0 && res.number_non_literal == 0\n-      && res.number_other == 0)\n+      && res.number_other == 0 && warn_format_extra_args)\n     status_warning (status, \"unused arguments in $-style format\");\n   if (res.number_empty > 0 && res.number_non_literal == 0\n       && res.number_other == 0)\n@@ -2991,23 +3007,24 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t}\n \n       /* Give Y2K warnings.  */\n-      {\n-\tint y2k_level = 0;\n-\tif (strchr (fci->flags2, '4') != 0)\n-\t  if (strchr (flag_chars, 'E') != 0)\n+      if (warn_format_y2k)\n+\t{\n+\t  int y2k_level = 0;\n+\t  if (strchr (fci->flags2, '4') != 0)\n+\t    if (strchr (flag_chars, 'E') != 0)\n+\t      y2k_level = 3;\n+\t    else\n+\t      y2k_level = 2;\n+\t  else if (strchr (fci->flags2, '3') != 0)\n \t    y2k_level = 3;\n-\t  else\n+\t  else if (strchr (fci->flags2, '2') != 0)\n \t    y2k_level = 2;\n-\telse if (strchr (fci->flags2, '3') != 0)\n-\t  y2k_level = 3;\n-\telse if (strchr (fci->flags2, '2') != 0)\n-\t  y2k_level = 2;\n-\tif (y2k_level == 3)\n-\t  status_warning (status, \"`%%%c' yields only last 2 digits of year in some locales\",\n-\t\t\t  format_char);\n-\telse if (y2k_level == 2)\n-\t  status_warning (status, \"`%%%c' yields only last 2 digits of year\", format_char);\n-      }\n+\t  if (y2k_level == 3)\n+\t    status_warning (status, \"`%%%c' yields only last 2 digits of year in some locales\",\n+\t\t\t    format_char);\n+\t  else if (y2k_level == 2)\n+\t    status_warning (status, \"`%%%c' yields only last 2 digits of year\", format_char);\n+\t}\n \n       if (strchr (fci->flags2, '[') != 0)\n \t{\n@@ -3325,6 +3342,19 @@ check_format_types (status, types)\n       }\n     }\n }\n+\n+/* Set format warning options according to a -Wformat=n option.  */\n+\n+void\n+set_Wformat (setting)\n+     int setting;\n+{\n+  warn_format = setting;\n+  warn_format_y2k = setting;\n+  warn_format_extra_args = setting;\n+  if (setting != 1)\n+    warn_format_nonliteral = setting;\n+}\n \f\n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language"}, {"sha": "7ada2128cfdb71182303e27359bdbfb020a27ced", "filename": "gcc/c-common.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -349,6 +349,18 @@ extern int flag_const_strings;\n \n extern int warn_format;\n \n+/* Warn about Y2K problems with strftime formats.  */\n+\n+extern int warn_format_y2k;\n+\n+/* Warn about excess arguments to formats.  */\n+\n+extern int warn_format_extra_args;\n+\n+/* Warn about non-literal format arguments.  */\n+\n+extern int warn_format_nonliteral;\n+\n /* Warn about possible violations of sequence point rules.  */\n \n extern int warn_sequence_point;\n@@ -441,6 +453,7 @@ extern void declare_function_name\t\tPARAMS ((void));\n extern void decl_attributes\t\t\tPARAMS ((tree, tree, tree));\n extern void init_function_format_info\t\tPARAMS ((void));\n extern void check_function_format\t\tPARAMS ((int *, tree, tree, tree));\n+extern void set_Wformat\t\t\t\tPARAMS ((int));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */"}, {"sha": "1c1f138a1fbac953dcfc23e815fdbe344bcd0fd7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -421,10 +421,6 @@ int warn_redundant_decls = 0;\n \n int warn_nested_externs = 0;\n \n-/* Warn about *printf or *scanf format/argument anomalies.  */\n-\n-int warn_format;\n-\n /* Warn about a subscript that has type char.  */\n \n int warn_char_subscripts = 0;\n@@ -710,11 +706,23 @@ c_decode_option (argc, argv)\n   else if (!strcmp (p, \"-Wno-traditional\"))\n     warn_traditional = 0;\n   else if (!strncmp (p, \"-Wformat=\", 9))\n-    warn_format = atol (p + 9);\n+    set_Wformat (atoi (p + 9));\n   else if (!strcmp (p, \"-Wformat\"))\n-    warn_format = 1;\n+    set_Wformat (1);\n   else if (!strcmp (p, \"-Wno-format\"))\n-    warn_format = 0;\n+    set_Wformat (0);\n+  else if (!strcmp (p, \"-Wformat-y2k\"))\n+    warn_format_y2k = 1;\n+  else if (!strcmp (p, \"-Wno-format-y2k\"))\n+    warn_format_y2k = 0;\n+  else if (!strcmp (p, \"-Wformat-extra-args\"))\n+    warn_format_extra_args = 1;\n+  else if (!strcmp (p, \"-Wno-format-extra-args\"))\n+    warn_format_extra_args = 0;\n+  else if (!strcmp (p, \"-Wformat-nonliteral\"))\n+    warn_format_nonliteral = 1;\n+  else if (!strcmp (p, \"-Wno-format-nonliteral\"))\n+    warn_format_nonliteral = 0;\n   else if (!strcmp (p, \"-Wchar-subscripts\"))\n     warn_char_subscripts = 1;\n   else if (!strcmp (p, \"-Wno-char-subscripts\"))\n@@ -793,7 +801,7 @@ c_decode_option (argc, argv)\n       warn_return_type = 1;\n       set_Wunused (1);\n       warn_switch = 1;\n-      warn_format = 1;\n+      set_Wformat (1);\n       warn_char_subscripts = 1;\n       warn_parentheses = 1;\n       warn_sequence_point = 1;"}, {"sha": "de75ee90531331a31de22f42526a5be84fa68df1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -1,3 +1,9 @@\n+2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl2.c (warn_format): Remove definition.\n+\t(lang_decode_option): Handle -Wformat-nonliteral,\n+\t-Wno-format-extra-args and -Wno-format-y2k.  Use set_Wformat.\n+\n 2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* decl.c (WINT_TYPE, INTMAX_TYPE, UINTMAX_TYPE): Don't define."}, {"sha": "497db613eb3ca6296370c236ff074d39b04846ae", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -269,10 +269,6 @@ int warn_sign_compare;\n \n int warn_float_equal = 0;\n \n-/* Warn about *printf or *scanf format/argument anomalies.  */\n-\n-int warn_format;\n-\n /* Warn about functions which might be candidates for format attributes.  */\n \n int warn_missing_format_attribute;\n@@ -723,7 +719,13 @@ lang_decode_option (argc, argv)\n       else if (!strcmp (p, \"float-equal\"))\n \twarn_float_equal = setting;\n       else if (!strcmp (p, \"format\"))\n-\twarn_format = setting;\n+\tset_Wformat (setting);\n+      else if (!strcmp (p, \"format-y2k\"))\n+\twarn_format_y2k = setting;\n+      else if (!strcmp (p, \"format-extra-args\"))\n+\twarn_format_extra_args = setting;\n+      else if (!strcmp (p, \"format-nonliteral\"))\n+\twarn_format_nonliteral = setting;\n       else if (!strcmp (p, \"missing-format-attribute\"))\n \twarn_missing_format_attribute = setting;\n       else if (!strcmp (p, \"conversion\"))\n@@ -772,7 +774,7 @@ lang_decode_option (argc, argv)\n \t  set_Wunused (setting);\n \t  warn_implicit = setting;\n \t  warn_switch = setting;\n-\t  warn_format = setting;\n+\t  set_Wformat (setting);\n \t  warn_parentheses = setting;\n \t  warn_missing_braces = setting;\n \t  warn_sign_compare = setting;"}, {"sha": "4118ab5b7cef7297005f97d25c2f51db1e3cac91", "filename": "gcc/invoke.texi", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -143,15 +143,17 @@ in the following sections.\n -w  -W  -Wall  -Waggregate-return\n -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment\n -Wconversion  -Wdisabled-optimization -Werror\n--Wfloat-equal  -Wformat\n+-Wfloat-equal  -Wformat  -Wformat=2\n+-Wformat-nonliteral\n -Wid-clash-@var{len}  -Wimplicit -Wimplicit-int \n -Wimplicit-function-declaration\n -Werror-implicit-function-declaration\n -Wimport  -Winline\n -Wlarger-than-@var{len}  -Wlong-long\n -Wmain  -Wmissing-declarations\n -Wmissing-format-attribute  -Wmissing-noreturn\n--Wmultichar  -Wno-import  -Wpacked  -Wpadded\n+-Wmultichar  -Wno-format-extra-args -Wno-format-y2k\n+-Wno-import  -Wpacked  -Wpadded\n -Wparentheses -Wpointer-arith  -Wredundant-decls\n -Wreturn-type  -Wsequence-point  -Wshadow\n -Wsign-compare  -Wswitch  -Wsystem-headers\n@@ -1548,6 +1550,30 @@ Check calls to @code{printf} and @code{scanf}, etc., to make sure that\n the arguments supplied have types appropriate to the format string\n specified.\n \n+@samp{-Wformat} is included in @samp{-Wall}.  For more control over some\n+aspects of format checking, the options @samp{-Wno-format-y2k},\n+@samp{-Wno-format-extra-args}, @samp{-Wformat-nonliteral} and\n+@samp{-Wformat=2} are available, but are not included in @samp{-Wall}.\n+\n+@item -Wno-format-y2k\n+If @samp{-Wformat} is specified, do not warn about @code{strftime}\n+formats which may yield only a two-digit year.\n+\n+@item -Wno-format-extra-args\n+If @samp{-Wformat} is specified, do not warn about excess arguments to a\n+@code{printf} or @code{scanf} format function.  The C standard specifies\n+that such arguments are ignored.\n+\n+@item -Wformat-nonliteral\n+If @samp{-Wformat} is specified, also warn if the format string is not a\n+string literal and so cannot be checked, unless the format function\n+takes its format arguments as a @code{va_list}.\n+\n+@item -Wformat=2\n+Enable @samp{-Wformat} plus format checks not included in\n+@samp{-Wformat}.  Currently equivalent to @samp{-Wformat\n+-Wformat-nonliteral}.\n+\n @item -Wimplicit-int\n Warn when a declaration does not specify a type.\n "}, {"sha": "3b353e7cc9798a783ad33f7aa89c71f51a8489c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -1,3 +1,8 @@\n+2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format-no-exargs-1.c, gcc.dg/format-no-y2k-1.c,\n+\tgcc.dg/format-nonlit-1.c, gcc.dg/format-nonlit-2.c: New tests.\n+\n 2000-12-01  Neil Booth  <neilb@earthling.net>\n \n         * gcc.dg/cpp/20000720-1.S: Remove duplicate testcase."}, {"sha": "bbf5a8a75e0c16204fe0430c5a579bc22174120a", "filename": "gcc/testsuite/gcc.dg/format-no-exargs-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-no-exargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-no-exargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-no-exargs-1.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -0,0 +1,14 @@\n+/* Test for warnings for extra format arguments being disabled by\n+   -Wno-format-extra-args.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wno-format-extra-args\" } */\n+\n+extern int printf (const char *, ...);\n+\n+void\n+foo (int i)\n+{\n+  printf (\"foo\", i);\n+  printf (\"%1$d\", i, i);\n+}"}, {"sha": "e41d26d004cd0e86d496329161fe4cbc72299590", "filename": "gcc/testsuite/gcc.dg/format-no-y2k-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-no-y2k-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-no-y2k-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-no-y2k-1.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -0,0 +1,16 @@\n+/* Test for warnings for Y2K problems being disabled by -Wno-format-y2k.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wno-format-y2k\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct tm;\n+\n+extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  strftime (s, m, \"%y%c%x\", tp);\n+}"}, {"sha": "dfcd84b073b788639e5c054b1d93993c461e28db", "filename": "gcc/testsuite/gcc.dg/format-nonlit-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-nonlit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-nonlit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-nonlit-1.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -0,0 +1,13 @@\n+/* Test for warnings for non-string-literal formats.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat -Wformat-nonliteral\" } */\n+\n+extern int printf (const char *, ...);\n+\n+void\n+foo (char *s, int i)\n+{\n+  printf ((const char *)i, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+  printf (s, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+}"}, {"sha": "c20ed08a591a34cc0784a6d2d1f2dde07c1b23cc", "filename": "gcc/testsuite/gcc.dg/format-nonlit-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-nonlit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-nonlit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-nonlit-2.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -0,0 +1,13 @@\n+/* Test for warnings for non-string-literal formats.  Test with -Wformat=2.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat=2\" } */\n+\n+extern int printf (const char *, ...);\n+\n+void\n+foo (char *s, int i)\n+{\n+  printf ((const char *)i, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+  printf (s, i); /* { dg-warning \"argument types\" \"non-literal\" } */\n+}"}, {"sha": "db9e6f8d1c58bf675ac2ef129a91f8a903ad8d41", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d80892796677b2beaf9d47d80e337b315395582/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4d80892796677b2beaf9d47d80e337b315395582", "patch": "@@ -1226,8 +1226,16 @@ documented_lang_options[] =\n   { \"-Wno-comments\", \"\" },\n   { \"-Wconversion\", \"Warn about possibly confusing type conversions\" },\n   { \"-Wno-conversion\", \"\" },\n-  { \"-Wformat\", \"Warn about printf format anomalies\" },\n+  { \"-Wformat\", \"Warn about printf/scanf/strftime format anomalies\" },\n   { \"-Wno-format\", \"\" },\n+  { \"-Wformat-y2k\", \"\" },\n+  { \"-Wno-format-y2k\",\n+    \"Don't warn about strftime formats yielding 2 digit years\" },\n+  { \"-Wformat-extra-args\", \"\" },\n+  { \"-Wno-format-extra-args\",\n+    \"Don't warn about too many arguments to format functions\" },\n+  { \"-Wformat-nonliteral\", \"Warn about non-string-literal format strings\" },\n+  { \"-Wno-format-nonliteral\", \"\" },\n   { \"-Wimplicit-function-declaration\",\n     \"Warn about implicit function declarations\" },\n   { \"-Wno-implicit-function-declaration\", \"\" },"}]}