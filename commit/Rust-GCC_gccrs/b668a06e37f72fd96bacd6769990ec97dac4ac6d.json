{"sha": "b668a06e37f72fd96bacd6769990ec97dac4ac6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2OGEwNmUzN2Y3MmZkOTZiYWNkNjc2OTk5MGVjOTdkYWM0YWM2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-13T07:02:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-13T07:06:25Z"}, "message": "i386: Optimize _mm_unpacklo_epi8 of 0 vector as second argument or similar VEC_PERM_EXPRs into pmovzx [PR95905]\n\nThe following patch adds patterns (so far 128-bit only) for permutations\nlike { 0 16 1 17 2 18 3 19 4 20 5 21 6 22 7 23 } where the second\noperand is CONST0_RTX CONST_VECTOR to be emitted as pmovzx.\n\n2021-01-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/95905\n\t* config/i386/predicates.md (pmovzx_parallel): New predicate.\n\t* config/i386/sse.md (*sse4_1_zero_extendv8qiv8hi2_3): New\n\tdefine_insn_and_split pattern.\n\t(*sse4_1_zero_extendv4hiv4si2_3): Likewise.\n\t(*sse4_1_zero_extendv2siv2di2_3): Likewise.\n\n\t* gcc.target/i386/pr95905-1.c: New test.\n\t* gcc.target/i386/pr95905-2.c: New test.", "tree": {"sha": "0c71ee709d96084a2d1e36cea217ba4007040b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c71ee709d96084a2d1e36cea217ba4007040b8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b668a06e37f72fd96bacd6769990ec97dac4ac6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b668a06e37f72fd96bacd6769990ec97dac4ac6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b668a06e37f72fd96bacd6769990ec97dac4ac6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b668a06e37f72fd96bacd6769990ec97dac4ac6d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7993fe1877a689463d8c71a0873e5cc8db080273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7993fe1877a689463d8c71a0873e5cc8db080273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7993fe1877a689463d8c71a0873e5cc8db080273"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "0a3ab4dce68f23247bc53cd2a50d4d681fcd18f4", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=b668a06e37f72fd96bacd6769990ec97dac4ac6d", "patch": "@@ -1600,6 +1600,38 @@\n   return true;\n })\n \n+;; Return true if OP is a parallel for an pmovz{bw,wd,dq} vec_select,\n+;; where one of the two operands of the vec_concat is const0_operand.\n+(define_predicate \"pmovzx_parallel\"\n+  (and (match_code \"parallel\")\n+       (match_code \"const_int\" \"a\"))\n+{\n+  int nelt = XVECLEN (op, 0);\n+  int elt, i;\n+\n+  if (nelt < 2)\n+    return false;\n+\n+  /* Check that the permutation is suitable for pmovz{bw,wd,dq}.\n+     For example { 0 16 1 17 2 18 3 19 4 20 5 21 6 22 7 23 }.  */\n+  elt = INTVAL (XVECEXP (op, 0, 0));\n+  if (elt == 0)\n+    {\n+      for (i = 1; i < nelt; ++i)\n+\tif ((i & 1) != 0)\n+\t  {\n+\t    if (INTVAL (XVECEXP (op, 0, i)) < nelt)\n+\t      return false;\n+\t  }\n+\telse if (INTVAL (XVECEXP (op, 0, i)) != i / 2)\n+\t  return false;\n+    }\n+  else\n+    return false;\n+\n+  return true;\n+})\n+\n ;; Return true if OP is a parallel for a vbroadcast permute.\n (define_predicate \"avx_vbroadcast_operand\"\n   (and (match_code \"parallel\")"}, {"sha": "2a260c1cfbdfa66efc12c0b21027e4605bb6005d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b668a06e37f72fd96bacd6769990ec97dac4ac6d", "patch": "@@ -17683,6 +17683,36 @@\n \t(any_extend:V8HI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n+(define_insn_and_split \"*sse4_1_zero_extendv8qiv8hi2_3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(vec_select:V16QI\n+\t  (vec_concat:V32QI\n+\t    (match_operand:V16QI 1 \"vector_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V16QI 2 \"const0_operand\" \"C,C,C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:V8HI\n+\t  (vec_select:V8QI\n+\t    (match_dup 1)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+{\n+  operands[0] = lowpart_subreg (V8HImode, operands[0], V16QImode);\n+  if (MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V8QImode, operands[1], V16QImode);\n+      operands[1] = gen_rtx_ZERO_EXTEND (V8HImode, operands[1]);\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_expand \"<insn>v8qiv8hi2\"\n   [(set (match_operand:V8HI 0 \"register_operand\")\n \t(any_extend:V8HI\n@@ -17929,6 +17959,34 @@\n     }\n })\n \n+(define_insn_and_split \"*sse4_1_zero_extendv4hiv4si2_3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(vec_select:V8HI\n+\t  (vec_concat:V16HI\n+\t    (match_operand:V8HI 1 \"vector_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V8HI 2 \"const0_operand\" \"C,C,C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:V4SI\n+\t  (vec_select:V4HI\n+\t    (match_dup 1)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n+{\n+  operands[0] = lowpart_subreg (V4SImode, operands[0], V8HImode);\n+  if (MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V4HImode, operands[1], V8HImode);\n+      operands[1] = gen_rtx_ZERO_EXTEND (V4SImode, operands[1]);\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx512f_<code>v8qiv8di2<mask_name>\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -18283,6 +18341,32 @@\n \t(any_extend:V2DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V2SImode, 0);\")\n \n+(define_insn_and_split \"*sse4_1_zero_extendv2siv2di2_3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(vec_select:V4SI\n+\t  (vec_concat:V8SI\n+\t    (match_operand:V4SI 1 \"vector_operand\" \"Yrm,*xm,vm\")\n+\t    (match_operand:V4SI 2 \"const0_operand\" \"C,C,C\"))\n+\t  (match_parallel 3 \"pmovzx_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:V2DI\n+\t  (vec_select:V2SI (match_dup 1)\n+\t\t\t   (parallel [(const_int 0) (const_int 1)]))))]\n+{\n+  operands[0] = lowpart_subreg (V2DImode, operands[0], V4SImode);\n+  if (MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V2SImode, operands[1], V4SImode);\n+      operands[1] = gen_rtx_ZERO_EXTEND (V2DImode, operands[1]);\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_expand \"<insn>v2siv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI"}, {"sha": "8de715e882185e1468d811e85f02146d0e8b776a", "filename": "gcc/testsuite/gcc.target/i386/pr95905-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-1.c?ref=b668a06e37f72fd96bacd6769990ec97dac4ac6d", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/95905 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1 -mno-avx\" } */\n+/* { dg-final { scan-assembler \"\\tpmovzxbw\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tpmovzxwd\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tpmovzxdq\\t\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i a)\n+{\n+  return _mm_unpacklo_epi8 (a, _mm_setzero_si128 ());\n+}\n+\n+__m128i\n+f2 (__m128i a)\n+{\n+  return _mm_unpacklo_epi16 (a, _mm_setzero_si128 ());\n+}\n+\n+__m128i\n+f3 (__m128i a)\n+{\n+  return _mm_unpacklo_epi32 (a, _mm_setzero_si128 ());\n+}"}, {"sha": "7cd20a3654a285c2cda361fca8935be5d2bd19bb", "filename": "gcc/testsuite/gcc.target/i386/pr95905-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b668a06e37f72fd96bacd6769990ec97dac4ac6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95905-2.c?ref=b668a06e37f72fd96bacd6769990ec97dac4ac6d", "patch": "@@ -0,0 +1,46 @@\n+/* PR target/95905 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+/* { dg-final { scan-assembler \"\\tv?pmovzxbw\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tv?pmovzxwd\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tv?pmovzxdq\\t\" } } */\n+\n+typedef unsigned char V1 __attribute__((vector_size (16)));\n+typedef unsigned short V2 __attribute__((vector_size (16)));\n+typedef unsigned int V3 __attribute__((vector_size (16)));\n+\n+V1\n+f1 (V1 x)\n+{\n+  return __builtin_shuffle (x, (V1) {}, (V1) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+}\n+\n+V2\n+f2 (V2 x)\n+{\n+  return __builtin_shuffle (x, (V2) {}, (V2) { 0, 8, 1, 9, 2, 10, 3, 11 });\n+}\n+\n+V3\n+f3 (V3 x)\n+{\n+  return __builtin_shuffle (x, (V3) {}, (V3) { 0, 4, 1, 5 });\n+}\n+\n+V1\n+f4 (V1 *x)\n+{\n+  return __builtin_shuffle (*x, (V1) {}, (V1) { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n+}\n+\n+V2\n+f5 (V2 *x)\n+{\n+  return __builtin_shuffle (*x, (V2) {}, (V2) { 0, 8, 1, 9, 2, 10, 3, 11 });\n+}\n+\n+V3\n+f6 (V3 *x)\n+{\n+  return __builtin_shuffle (*x, (V3) {}, (V3) { 0, 4, 1, 5 });\n+}"}]}