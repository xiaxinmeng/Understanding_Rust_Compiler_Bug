{"sha": "b54ccf71d5b67087aa1848fa8f580446dba28104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0Y2NmNzFkNWI2NzA4N2FhMTg0OGZhOGY1ODA0NDZkYmEyODEwNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-09T02:14:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-09T02:14:55Z"}, "message": "class.c (get_enclosing_class): New function.\n\n\t* class.c (get_enclosing_class): New function.\n\t(is_base_of_enclosing_class): Likewise.\n\t* cp-tree.h (get_enclosing_class): Declare.\n\t(is_base_of_enclosing_class): Likewise.\n\t* pt.c (coerce_template_parms): Use them.\n\t* g++spec.c (lang_specific_driver): Check whether MATH_LIBRARY is\n\tnull to decide whether to use it.\n\nFrom-SVN: r22343", "tree": {"sha": "f743ea2d36584e5a57b4445277257f28d79d5178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f743ea2d36584e5a57b4445277257f28d79d5178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54ccf71d5b67087aa1848fa8f580446dba28104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54ccf71d5b67087aa1848fa8f580446dba28104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54ccf71d5b67087aa1848fa8f580446dba28104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54ccf71d5b67087aa1848fa8f580446dba28104/comments", "author": null, "committer": null, "parents": [{"sha": "009425e185c045c143997bbb3030644b834475a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009425e185c045c143997bbb3030644b834475a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009425e185c045c143997bbb3030644b834475a2"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "01b8371c5ccac40d435977a4e5d2235bdc800744", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b54ccf71d5b67087aa1848fa8f580446dba28104", "patch": "@@ -1,5 +1,16 @@\n+1998-09-09  Kriang Lerdsuwanakij <lerdsuwa@scf-fs.usc.edu>\n+\n+\t* class.c (get_enclosing_class): New function.\n+\t(is_base_of_enclosing_class): Likewise.\n+\t* cp-tree.h (get_enclosing_class): Declare.\n+\t(is_base_of_enclosing_class): Likewise.\n+\t* pt.c (coerce_template_parms): Use them.\n+\n 1998-09-09  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* g++spec.c (lang_specific_driver): Check whether MATH_LIBRARY is\n+\tnull to decide whether to use it.\n+\n \t* error.c (dump_type_real): Handle NAMESPACE_DECL.\n \t* parse.y (base_class.1): Avoid crash on error.\n "}, {"sha": "e5863a4194deabb1b08631f376b0ab6cc556fdf6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b54ccf71d5b67087aa1848fa8f580446dba28104", "patch": "@@ -5449,3 +5449,49 @@ is_empty_class (type)\n     t = TREE_CHAIN (t);\n   return (t == NULL_TREE);\n }\n+\n+/* Find the enclosing class of the given NODE.  NODE can be a *_DECL or\n+   a *_TYPE node.  NODE can also be a local class.  */\n+\n+tree\n+get_enclosing_class (type)\n+     tree type;\n+{\n+  tree node = type;\n+\n+  while (node && TREE_CODE (node) != NAMESPACE_DECL)\n+    {\n+      switch (TREE_CODE_CLASS (TREE_CODE (node)))\n+\t{\n+\tcase 'd':\n+\t  node = DECL_CONTEXT (node);\n+\t  break;\n+\n+\tcase 't':\n+\t  if (node != type)\n+\t    return node;\n+\t  node = TYPE_CONTEXT (node);\n+\t  break;\n+\n+\tdefault:\n+\t  my_friendly_abort (0);\n+\t}\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* Return 1 if TYPE or one of its enclosing classes is derived from BASE.  */\n+\n+int\n+is_base_of_enclosing_class (base, type)\n+     tree base, type;\n+{\n+  while (type)\n+    {\n+      if (get_binfo (base, type, 0))\n+\treturn 1;\n+\n+      type = get_enclosing_class (type);\n+    }\n+  return 0;\n+}"}, {"sha": "4dbfc9e6c3ac63572cb56c00e8420aedfda63a0b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b54ccf71d5b67087aa1848fa8f580446dba28104", "patch": "@@ -2425,6 +2425,8 @@ extern void maybe_push_cache_obstack\t\tPROTO((void));\n extern unsigned HOST_WIDE_INT skip_rtti_stuff\tPROTO((tree *));\n extern tree build_self_reference\t\tPROTO((void));\n extern void warn_hidden\t\t\t\tPROTO((tree));\n+extern tree get_enclosing_class\t\t\tPROTO((tree));\n+int is_base_of_enclosing_class\t\t\tPROTO((tree, tree));\n \n /* in cvt.c */\n extern tree convert_to_reference\t\tPROTO((tree, tree, int, int, tree));"}, {"sha": "22060cd222d690db2aefaf1a4ad436ab22bb585e", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=b54ccf71d5b67087aa1848fa8f580446dba28104", "patch": "@@ -34,9 +34,6 @@ Boston, MA 02111-1307, USA.  */\n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"-lm\"\n #endif\n-#ifndef NEED_MATH_LIBRARY\n-#define NEED_MATH_LIBRARY 1\t/* Default is pass MATH_LIBRARY to linker */\n-#endif\n \n extern char *xmalloc PROTO((size_t));\n \n@@ -83,8 +80,8 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n      LANGSPEC, MATHLIB, or WITHLIBC.  */\n   int *args;\n \n-  /* By default, we throw on the math library.  */\n-  int need_math = NEED_MATH_LIBRARY;\n+  /* By default, we throw on the math library if we have one.  */\n+  int need_math = (MATH_LIBRARY[0] != '\\0');\n \n   /* The total number of arguments with the new stuff.  */\n   int argc;\n@@ -128,6 +125,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t    }\n \t  else if (strcmp (argv[i], \"-lm\") == 0\n \t\t   || strcmp (argv[i], \"-lmath\") == 0\n+\t\t   || strcmp (argv[i], MATH_LIBRARY) == 0\n #ifdef ALT_LIBM\n \t\t   || strcmp (argv[i], ALT_LIBM) == 0\n #endif"}, {"sha": "5136383275d929daf1794147e52c5359c35359a7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54ccf71d5b67087aa1848fa8f580446dba28104/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b54ccf71d5b67087aa1848fa8f580446dba28104", "patch": "@@ -2806,9 +2806,7 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n \t   && TREE_CODE (TYPE_NAME (arg)) == TYPE_DECL\n \t   && DECL_ARTIFICIAL (TYPE_NAME (arg))\n \t   && requires_tmpl_type\n-\t   && current_class_type\n-\t   /* FIXME what about nested types?  */\n-\t   && get_binfo (arg, current_class_type, 0)));\n+\t   && is_base_of_enclosing_class (arg, current_class_type)));\n   if (is_tmpl_type && TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM)\n     arg = TYPE_STUB_DECL (arg);\n   else if (is_tmpl_type && TREE_CODE (arg) == RECORD_TYPE)"}]}