{"sha": "a5b38698aa439a935f0c0f4c55611f2173a28b57", "node_id": "C_kwDOANBUbNoAKGE1YjM4Njk4YWE0MzlhOTM1ZjBjMGY0YzU1NjExZjIxNzNhMjhiNTc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-12T10:47:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-12T10:47:17Z"}, "message": "Merge #1103\n\n1103: Lower AST::Visibility to HIR::Visibility properly r=CohenArthur a=CohenArthur\n\nFixes #1093\r\n\r\nThis should cover every case since the previous code simply created public HIR visibilities.\r\n\r\nThe PR refactors the HIR::Visibility struct to be tinier and a desugared version of the AST one.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "45de8c3ff3d26871c2ecab1e9c1e1d9e543a81b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45de8c3ff3d26871c2ecab1e9c1e1d9e543a81b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b38698aa439a935f0c0f4c55611f2173a28b57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVVi1CRBK7hj4Ov3rIwAAITQIADsa4bJ9IMTBEWRV3Qi3e29W\ns52QeFiSJsTtoLcn2qsb8RO7ZItHB8JUI01owu7qNPKerXf2Wuu82hmQt+ZKmwYY\njFp2ptUZuw5ftlqvZdDcqSlH49L0b8MLw98H0pf7Zpf9RMq2lnVmYtric0R2ZvXF\nfHzoIQ8VuIRSMn77PoGY+336urC9i9K44LnBQ96bE/7MwBHM9DQjYA+goH1zWtY6\niEdvQ0dXzMUIVeWzV0E/iPJR6cOCrAafq+ueEj4D2Bj4pEugY7QViz1qdxbSmmFI\nWayYJwDITP0vC5rgP73PWxX8PTivci1zkY3k26sfHS3ra3aOhhE0WA3Dg235Ri0=\n=3RFZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 45de8c3ff3d26871c2ecab1e9c1e1d9e543a81b0\nparent c1a022385f5ed99b579e373d37cec389433e93f4\nparent 9f5d8a89738cd157205762d2e17b2bbc68b8333c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649760437 +0000\ncommitter GitHub <noreply@github.com> 1649760437 +0000\n\nMerge #1103\n\n1103: Lower AST::Visibility to HIR::Visibility properly r=CohenArthur a=CohenArthur\n\nFixes #1093\r\n\r\nThis should cover every case since the previous code simply created public HIR visibilities.\r\n\r\nThe PR refactors the HIR::Visibility struct to be tinier and a desugared version of the AST one.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b38698aa439a935f0c0f4c55611f2173a28b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b38698aa439a935f0c0f4c55611f2173a28b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b38698aa439a935f0c0f4c55611f2173a28b57/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a022385f5ed99b579e373d37cec389433e93f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a022385f5ed99b579e373d37cec389433e93f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a022385f5ed99b579e373d37cec389433e93f4"}, {"sha": "9f5d8a89738cd157205762d2e17b2bbc68b8333c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5d8a89738cd157205762d2e17b2bbc68b8333c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5d8a89738cd157205762d2e17b2bbc68b8333c"}], "stats": {"total": 241, "additions": 120, "deletions": 121}, "files": [{"sha": "f08f2f0c515fee3306dbb764f4b8dad8519e7a9b", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -632,6 +632,8 @@ struct Visibility\n     : public_vis_type (public_vis_type), in_path (std::move (in_path))\n   {}\n \n+  PublicVisType get_public_vis_type () const { return public_vis_type; }\n+\n   // Returns whether visibility is in an error state.\n   bool is_error () const\n   {\n@@ -684,6 +686,7 @@ struct Visibility\n   }\n \n   std::string as_string () const;\n+  const SimplePath &get_path () const { return in_path; }\n \n protected:\n   // Clone function implementation - not currently virtual but may be if\n@@ -881,6 +884,8 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   FunctionQualifiers get_qualifiers () { return qualifiers; }\n \n+  const Visibility &get_visibility () const { return vis; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -938,8 +943,8 @@ class VisItem : public Item\n   std::string as_string () const override;\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n-  Visibility &get_vis () { return visibility; }\n-  const Visibility &get_vis () const { return visibility; }\n+  Visibility &get_visibility () { return visibility; }\n+  const Visibility &get_visibility () const { return visibility; }\n \n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n@@ -1893,7 +1898,7 @@ struct StructField\n     return field_type;\n   }\n \n-  Visibility get_visibility () const { return visibility; }\n+  const Visibility &get_visibility () const { return visibility; }\n \n   NodeId get_node_id () const { return node_id; }\n };\n@@ -2027,6 +2032,8 @@ struct TupleField\n \n   NodeId get_node_id () const { return node_id; }\n \n+  const Visibility &get_visibility () const { return visibility; }\n+\n   Location get_locus () const { return locus; }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n@@ -3918,6 +3925,8 @@ class ExternalStaticItem : public ExternalItem\n \n   Identifier get_identifier () const { return item_name; }\n \n+  const Visibility &get_visibility () const { return visibility; }\n+\n   bool is_mut () const { return has_mut; }\n \n protected:\n@@ -4080,6 +4089,8 @@ class ExternalFunctionItem : public ExternalItem\n \n   Location get_locus () const { return locus; }\n \n+  const Visibility &get_visibility () const { return visibility; }\n+\n   ExternalFunctionItem (\n     Identifier item_name,\n     std::vector<std::unique_ptr<GenericParam>> generic_params,"}, {"sha": "602fc56c3536c8dbbfd1e1d03fa55704062bb51c", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -37,8 +37,7 @@ HIRCompileBase::setup_attributes_on_fndecl (\n {\n   // if its the main fn or pub visibility mark its as DECL_PUBLIC\n   // please see https://github.com/Rust-GCC/gccrs/pull/137\n-  bool is_pub\n-    = visibility.get_vis_type () != HIR::Visibility::PublicVisType::NONE;\n+  bool is_pub = visibility.get_vis_type () == HIR::Visibility::VisType::PUBLIC;\n   if (is_main_entry_point || is_pub)\n     {\n       TREE_PUBLIC (fndecl) = 1;"}, {"sha": "7cc214ce2495b5ec1ef32bbbad6dfb682e40fda6", "filename": "gcc/rust/backend/rust-compile-implitem.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -84,9 +84,8 @@ CompileTraitItem::visit (HIR::TraitItemFunc &func)\n     &canonical_path);\n   rust_assert (ok);\n \n-  // FIXME\n-  HIR::Visibility vis (HIR::Visibility::PublicVisType::NONE,\n-\t\t       AST::SimplePath::create_empty ());\n+  // FIXME: How do we get the proper visibility here?\n+  auto vis = HIR::Visibility (HIR::Visibility::VisType::PUBLIC);\n   HIR::TraitFunctionDecl &function = func.get_decl ();\n   tree fndecl\n     = compile_function (ctx, function.get_function_name (),"}, {"sha": "1914ce64d0949a1b8dfa09d6fd716e7e9c54a717", "filename": "gcc/rust/hir/rust-ast-lower-enumitem.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_AST_LOWER_ENUMITEM\n #define RUST_AST_LOWER_ENUMITEM\n \n+#include \"rust-ast-lower.h\"\n #include \"rust-diagnostics.h\"\n \n #include \"rust-ast-lower-base.h\"\n@@ -51,7 +52,7 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     translated = new HIR::EnumItem (mapping, item.get_identifier (),\n \t\t\t\t    item.get_outer_attrs (), item.get_locus ());\n@@ -73,12 +74,12 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     std::vector<HIR::TupleField> fields;\n     for (auto &field : item.get_tuple_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -117,12 +118,12 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     std::vector<HIR::StructField> fields;\n     for (auto &field : item.get_struct_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -165,7 +166,7 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n     if (item.has_visibility ())\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n-\t\t     item.get_vis ().as_string ().c_str ());\n+\t\t     item.get_visibility ().as_string ().c_str ());\n \n     HIR::Expr *expr = ASTLoweringExpr::translate (item.get_expr ().get ());\n     translated"}, {"sha": "1dfecb94fccd5b717249a5b484b1535ae7ca6a97", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-type.h\"\n+#include \"rust-ast-lower.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -39,7 +40,7 @@ class ASTLoweringExternItem : public ASTLoweringBase\n \n   void visit (AST::ExternalStaticItem &item) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (item.get_visibility ());\n     HIR::Type *static_type\n       = ASTLoweringType::translate (item.get_type ().get ());\n \n@@ -65,7 +66,7 @@ class ASTLoweringExternItem : public ASTLoweringBase\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (function.has_generics ())"}, {"sha": "64803f3056aa79f0bdc98ea5ce503722f3ee5173", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -56,7 +56,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (alias.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (alias.has_generics ())\n@@ -87,7 +87,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (constant.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n@@ -120,7 +120,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (function.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n@@ -204,7 +204,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (method.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (method.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;"}, {"sha": "c926926c26e0fd5376bd45d5581daf8993dd41e2", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-diagnostics.h\"\n \n+#include \"rust-ast-lower.h\"\n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-enumitem.h\"\n #include \"rust-ast-lower-type.h\"\n@@ -59,7 +60,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     // should be lowered from module.get_vis()\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (module.get_visibility ());\n \n     auto items = std::vector<std::unique_ptr<Item>> ();\n \n@@ -99,7 +100,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (alias.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (alias.has_generics ())\n@@ -146,15 +147,16 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     std::vector<HIR::TupleField> fields;\n     for (AST::TupleField &field : struct_decl.get_fields ())\n       {\n \tif (field.get_field_type ()->is_marked_for_strip ())\n \t  continue;\n \n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\t// FIXME: How do we get the visibility from here?\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -209,7 +211,8 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n@@ -218,7 +221,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \tif (field.get_field_type ()->is_marked_for_strip ())\n \t  continue;\n \n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -276,7 +279,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (enum_decl.get_visibility ());\n \n     // bool is_unit = enum_decl.is_zero_variant ();\n     std::vector<std::unique_ptr<HIR::EnumItem>> items;\n@@ -326,15 +329,16 @@ class ASTLoweringItem : public ASTLoweringBase\n \t  std::unique_ptr<HIR::WhereClauseItem> (i));\n       }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (union_decl.get_visibility ());\n \n     std::vector<HIR::StructField> variants;\n     for (AST::StructField &variant : union_decl.get_variants ())\n       {\n \tif (variant.get_field_type ()->is_marked_for_strip ())\n \t  continue;\n \n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\t// FIXME: Does visibility apply here?\n+\tHIR::Visibility vis = translate_visibility (variant.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n \n@@ -375,7 +379,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::StaticItem &var) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (var.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (var.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (var.get_expr ().get ());\n@@ -401,7 +405,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (constant.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n@@ -441,7 +445,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (function.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n@@ -530,7 +534,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (impl_block.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (impl_block.has_generics ())\n@@ -619,7 +623,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n \n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (trait.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (trait.has_generics ())\n@@ -692,7 +696,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t  std::unique_ptr<HIR::WhereClauseItem> (i));\n       }\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (impl_block.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n     if (impl_block.has_generics ())\n@@ -774,7 +778,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::ExternBlock &extern_block) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (extern_block.get_visibility ());\n \n     std::vector<std::unique_ptr<HIR::ExternalItem>> extern_items;\n     for (auto &item : extern_block.get_extern_items ())"}, {"sha": "3ce77b4d9ca33f37a1f7ed29412eed5451c0ed7a", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -85,7 +85,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (constant.get_visibility ());\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n     HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n@@ -148,12 +148,12 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     std::vector<HIR::TupleField> fields;\n     for (AST::TupleField &field : struct_decl.get_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -199,13 +199,13 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n     for (AST::StructField &field : struct_decl.get_fields ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (field.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n \n@@ -255,12 +255,12 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (union_decl.get_visibility ());\n \n     std::vector<HIR::StructField> variants;\n     for (AST::StructField &variant : union_decl.get_variants ())\n       {\n-\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Visibility vis = translate_visibility (variant.get_visibility ());\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n \n@@ -308,7 +308,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (enum_decl.get_visibility ());\n \n     // bool is_unit = enum_decl.is_zero_variant ();\n     std::vector<std::unique_ptr<HIR::EnumItem>> items;\n@@ -358,7 +358,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers\n       = lower_qualifiers (function.get_qualifiers ());\n-    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Visibility vis = translate_visibility (function.get_visibility ());\n \n     // need\n     std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;"}, {"sha": "1da823a8e32987eae9de36a3f33299cb893bf756", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -26,6 +26,41 @@\n namespace Rust {\n namespace HIR {\n \n+Visibility\n+translate_visibility (const AST::Visibility &vis)\n+{\n+  // FIXME: How do we create a private visibility here? Is it always private if\n+  // the AST vis is an error?\n+  // FIXME: We need to add a `create_private()` static function to the\n+  // AST::Visibility class and use it when the vis is empty in the parser...\n+  if (vis.is_error ())\n+    return Visibility::create_error ();\n+\n+  // FIXME: ... And then use this?\n+  // if (vis.is_private ())\n+  //   return Visibility::create_private ();\n+\n+  switch (vis.get_public_vis_type ())\n+    {\n+    case AST::Visibility::NONE:\n+      return Visibility (Visibility::VisType::PUBLIC);\n+    case AST::Visibility::SELF:\n+      return Visibility (Visibility::VisType::PRIVATE);\n+    // Desugar pub(crate) into pub(in crate) and so on\n+    case AST::Visibility::CRATE:\n+      return Visibility (Visibility::PUBLIC,\n+\t\t\t AST::SimplePath::from_str (\"crate\"));\n+    case AST::Visibility::SUPER:\n+      return Visibility (Visibility::PUBLIC,\n+\t\t\t AST::SimplePath::from_str (\"super\"));\n+    case AST::Visibility::IN_PATH:\n+      return Visibility (Visibility::VisType::PUBLIC, vis.get_path ());\n+      break;\n+    }\n+\n+  return Visibility::create_error ();\n+}\n+\n ASTLowering::ASTLowering (AST::Crate &astCrate) : astCrate (astCrate) {}\n \n ASTLowering::~ASTLowering () {}"}, {"sha": "e1df5b24b33cd49ef05ad7dce328a13411f23867", "filename": "gcc/rust/hir/rust-ast-lower.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Frust-ast-lower.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -32,6 +32,14 @@ namespace HIR {\n bool\n struct_field_name_exists (std::vector<HIR::StructField> &fields,\n \t\t\t  HIR::StructField &new_field);\n+\n+/**\n+ * Lowers a Visibility from the AST into an HIR Visibility, desugaring it in\n+ * the process\n+ */\n+Visibility\n+translate_visibility (const AST::Visibility &vis);\n+\n class ASTLowering\n {\n public:"}, {"sha": "9b56086ea555d1cb2fb0123cf7f8a1a0eee35c10", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -118,18 +118,12 @@ Crate::as_string () const\n std::string\n Visibility::as_string () const\n {\n-  switch (public_vis_type)\n+  switch (vis_type)\n     {\n-    case NONE:\n-      return std::string (\"pub\");\n-    case CRATE:\n-      return std::string (\"pub(crate)\");\n-    case SELF:\n-      return std::string (\"pub(self)\");\n-    case SUPER:\n-      return std::string (\"pub(super)\");\n-    case IN_PATH:\n-      return std::string (\"pub(in \") + in_path.as_string () + std::string (\")\");\n+    case PRIVATE:\n+      return std::string (\"private\");\n+    case PUBLIC:\n+      return std::string (\"pub(in \") + path.as_string () + std::string (\")\");\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "0c361e00ecd27c19c37fc5b2f448e73fea85821a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 12, "deletions": 65, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b38698aa439a935f0c0f4c55611f2173a28b57/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=a5b38698aa439a935f0c0f4c55611f2173a28b57", "patch": "@@ -553,91 +553,38 @@ struct FunctionParam\n struct Visibility\n {\n public:\n-  enum PublicVisType\n+  enum VisType\n   {\n-    NONE,\n-    CRATE,\n-    SELF,\n-    SUPER,\n-    IN_PATH\n+    PRIVATE,\n+    PUBLIC,\n+    ERROR,\n   };\n \n private:\n-  // if vis is public, one of these\n-  PublicVisType public_vis_type;\n-  // Only assigned if public_vis_type is IN_PATH\n-  AST::SimplePath in_path;\n+  VisType vis_type;\n+  AST::SimplePath path;\n \n   // should this store location info?\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility (PublicVisType public_vis_type, AST::SimplePath in_path)\n-    : public_vis_type (public_vis_type), in_path (std::move (in_path))\n+  Visibility (VisType vis_type,\n+\t      AST::SimplePath path = AST::SimplePath::create_empty ())\n+    : vis_type (vis_type), path (std::move (path))\n   {}\n \n   // Returns whether visibility is in an error state.\n-  bool is_error () const\n-  {\n-    return public_vis_type == IN_PATH && in_path.is_empty ();\n-  }\n+  bool is_error () const { return vis_type == ERROR; }\n \n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n-    return Visibility (IN_PATH, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Unique pointer custom clone function\n-  /*std::unique_ptr<Visibility> clone_visibility() const {\n-      return std::unique_ptr<Visibility>(clone_visibility_impl());\n-  }*/\n-\n-  /* TODO: think of a way to only allow valid Visibility states - polymorphism\n-   * is one idea but may be too resource-intensive. */\n-\n-  // Creates a public visibility with no further features/arguments.\n-  static Visibility create_public ()\n-  {\n-    return Visibility (NONE, AST::SimplePath::create_empty ());\n+    return Visibility (ERROR, AST::SimplePath::create_empty ());\n   }\n \n-  // Creates a public visibility with crate-relative paths or whatever.\n-  static Visibility create_crate ()\n-  {\n-    return Visibility (CRATE, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Creates a public visibility with self-relative paths or whatever.\n-  static Visibility create_self ()\n-  {\n-    return Visibility (SELF, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Creates a public visibility with parent module-relative paths or\n-  // whatever.\n-  static Visibility create_super ()\n-  {\n-    return Visibility (SUPER, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Creates a public visibility with a given path or whatever.\n-  static Visibility create_in_path (AST::SimplePath in_path)\n-  {\n-    return Visibility (IN_PATH, std::move (in_path));\n-  }\n-\n-  PublicVisType get_vis_type () const { return public_vis_type; }\n+  VisType get_vis_type () const { return vis_type; }\n \n   std::string as_string () const;\n-\n-protected:\n-  // Clone function implementation - not currently virtual but may be if\n-  // polymorphism used\n-  /*virtual*/ Visibility *clone_visibility_impl () const\n-  {\n-    return new Visibility (*this);\n-  }\n };\n \n // Item that supports visibility - abstract base class"}]}