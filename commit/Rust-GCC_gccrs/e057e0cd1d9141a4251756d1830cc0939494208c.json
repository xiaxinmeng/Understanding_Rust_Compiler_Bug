{"sha": "e057e0cd1d9141a4251756d1830cc0939494208c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1N2UwY2QxZDkxNDFhNDI1MTc1NmQxODMwY2MwOTM5NDk0MjA4Yw==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-08-09T21:36:27Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-08-09T21:36:27Z"}, "message": "re PR middle-end/32813 (ICE for array expression in empty if statement, compiled with -fbounds-check)\n\n2007-08-09  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/32813\n        * fold-const.c (omit_one_operand): Return only the ommitted expression\n        if the result is an empty statement.\n        (pedantic_omit_one_operand): Likewise.\n\n2007-08-09  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/32813\n        * gfortran.fortran-torture/compile/emptyif-1.f90: New test.\n        * lib/fortran-torture.exp (fortran-torture): Use TORTURE_OPTIONS instead\n        of just -O.\n\nFrom-SVN: r127322", "tree": {"sha": "f030259702f6f708be9e2015d13e0c09eda84183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f030259702f6f708be9e2015d13e0c09eda84183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e057e0cd1d9141a4251756d1830cc0939494208c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e057e0cd1d9141a4251756d1830cc0939494208c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e057e0cd1d9141a4251756d1830cc0939494208c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e057e0cd1d9141a4251756d1830cc0939494208c/comments", "author": null, "committer": null, "parents": [{"sha": "b49957dd09afec707bfa70a68eb32c6e976befc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49957dd09afec707bfa70a68eb32c6e976befc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49957dd09afec707bfa70a68eb32c6e976befc1"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "410cf5470cdb7338b38e55454086cac46d0d918c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e057e0cd1d9141a4251756d1830cc0939494208c", "patch": "@@ -1,3 +1,10 @@\n+2007-08-09  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/32813\n+\t* fold-const.c (omit_one_operand): Return only the ommitted expression\n+\tif the result is an empty statement.\n+\t(pedantic_omit_one_operand): Likewise.\n+\n 2007-08-09  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* c-typeck.c (readonly_error): Improve error for assignment."}, {"sha": "d5d0f1e3c111ecb5acb079b03e26619e6f286d55", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e057e0cd1d9141a4251756d1830cc0939494208c", "patch": "@@ -3537,6 +3537,11 @@ omit_one_operand (tree type, tree result, tree omitted)\n {\n   tree t = fold_convert (type, result);\n \n+  /* If the resulting operand is an empty statement, just return the ommited\n+     statement casted to void. */\n+  if (IS_EMPTY_STMT (t) && TREE_SIDE_EFFECTS (omitted))\n+    return build1 (NOP_EXPR, void_type_node, fold_ignored_result (omitted));\n+\n   if (TREE_SIDE_EFFECTS (omitted))\n     return build2 (COMPOUND_EXPR, type, fold_ignored_result (omitted), t);\n \n@@ -3550,6 +3555,11 @@ pedantic_omit_one_operand (tree type, tree result, tree omitted)\n {\n   tree t = fold_convert (type, result);\n \n+  /* If the resulting operand is an empty statement, just return the ommited\n+     statement casted to void. */\n+  if (IS_EMPTY_STMT (t) && TREE_SIDE_EFFECTS (omitted))\n+    return build1 (NOP_EXPR, void_type_node, fold_ignored_result (omitted));\n+\n   if (TREE_SIDE_EFFECTS (omitted))\n     return build2 (COMPOUND_EXPR, type, fold_ignored_result (omitted), t);\n "}, {"sha": "06b2fff2e7da48722957f5c9fa6886ee73f80240", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e057e0cd1d9141a4251756d1830cc0939494208c", "patch": "@@ -1,3 +1,10 @@\n+2007-08-09  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/32813\n+\t* gfortran.fortran-torture/compile/emptyif-1.f90: New test.\n+\t* lib/fortran-torture.exp (fortran-torture): Use TORTURE_OPTIONS instead\n+\tof just -O.\n+\n 2007-08-08  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.target/mips/code-readable-1.c: New test."}, {"sha": "bdce67db9eabc7e6c63561bf6b85c0944ae77387", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/emptyif-1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Femptyif-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Femptyif-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Femptyif-1.f90?ref=e057e0cd1d9141a4251756d1830cc0939494208c", "patch": "@@ -0,0 +1,10 @@\n+program emptyif\n+\n+  implicit none\n+  integer i,K(4)\n+\n+  if (K(i)==0) then\n+    ! do absolutely nothing\n+  end if\n+\n+end program"}, {"sha": "d97c2cefc616f7e42ec6d698b1223f2d05285fe5", "filename": "gcc/testsuite/lib/fortran-torture.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057e0cd1d9141a4251756d1830cc0939494208c/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp?ref=e057e0cd1d9141a4251756d1830cc0939494208c", "patch": "@@ -347,6 +347,7 @@ proc search_for_re { file pattern } {\n proc fortran-torture { args } {\n     global srcdir subdir\n     global compiler_conditional_xfail_data\n+    global TORTURE_OPTIONS\n \n     set src [lindex $args 0]\n     if { [llength $args] > 1 } {\n@@ -371,7 +372,7 @@ proc fortran-torture { args } {\n     }\n    \n     # loop through all the options\n-    set option_list [list { \"-O\" } ]\n+    set option_list $TORTURE_OPTIONS\n     foreach option $option_list {\n \n \t# torture_compile_xfail is set by the .x script (if present)"}]}