{"sha": "4f84f12066953186cce4328b7f178d3daa2fe96e", "node_id": "C_kwDOANBUbNoAKDRmODRmMTIwNjY5NTMxODZjY2U0MzI4YjdmMTc4ZDNkYWEyZmU5NmU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-31T20:49:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-31T20:49:08Z"}, "message": "c++: non-dep call with empty TYPE_BINFO [PR105758]\n\nHere the out-of-line definition of Z<T>::z causes duplicate_decls to\nchange z's type from using the primary template type Z<T> (which is also\nthe type of the injected class name) to the implicit instantiation Z<T>,\nand this latter type lacks a TYPE_BINFO (although its TYPE_CANONICAL was\nset by a special case in lookup_template_class to point to the former).\n\nLater, when processing the non-dependent call z->foo(0), build_over_call\nrelies on the object argument's TYPE_BINFO to build the templated form\nfor this call, which fails because the object argument type has empty\nTYPE_BINFO due to the above.\n\nIt seems weird that the implicit instantiation Z<T> doesn't have the\nsame TYPE_BINFO as the primary template type Z<T>, despite them being\nproclaimed equivalent via TYPE_CANONICAL.  So I tried also setting\nTYPE_BINFO in the special case in lookup_template_class, but that led to\nsome problems with constrained partial specializations of the form Z<T>.\nI'm not sure what, if anything, we ought to do about the subtle\ndifferences between these two versions of the same type.\n\nFortunately it seems we don't need to rely on TYPE_BINFO at all in\nbuild_over_call here -- the z_candidate struct already contains the\nexact binfos we need to rebuild the BASELINK for the templated form.\n\n\tPR c++/105758\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (build_over_call): Use z_candidate::conversion_path\n\tand ::access_path instead of TYPE_BINFO when building the\n\tBASELINK for the templated form.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/non-dependent24.C: New test.", "tree": {"sha": "3580aa2e774640ab54ed69f802826d96f4f0be18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3580aa2e774640ab54ed69f802826d96f4f0be18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f84f12066953186cce4328b7f178d3daa2fe96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f84f12066953186cce4328b7f178d3daa2fe96e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f84f12066953186cce4328b7f178d3daa2fe96e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f84f12066953186cce4328b7f178d3daa2fe96e/comments", "author": null, "committer": null, "parents": [{"sha": "3f7daf7ec77d351630e2aad508fc2366e7e7eb77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7daf7ec77d351630e2aad508fc2366e7e7eb77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f7daf7ec77d351630e2aad508fc2366e7e7eb77"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "85fe9b5ab85ffcfc0a033e211f636a0db1f6c8ab", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f84f12066953186cce4328b7f178d3daa2fe96e/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f84f12066953186cce4328b7f178d3daa2fe96e/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=4f84f12066953186cce4328b7f178d3daa2fe96e", "patch": "@@ -9244,8 +9244,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t}\n       else\n \t{\n-\t  tree binfo = TYPE_BINFO (TREE_TYPE (first_arg));\n-\t  callee = build_baselink (binfo, binfo, fn, NULL_TREE);\n+\t  callee = build_baselink (cand->conversion_path, cand->access_path,\n+\t\t\t\t   fn, NULL_TREE);\n \t  callee = build_min (COMPONENT_REF, TREE_TYPE (fn),\n \t\t\t      first_arg, callee, NULL_TREE);\n \t}"}, {"sha": "0ddc75c78eea1f475d1490fc9f5c294a9db003dc", "filename": "gcc/testsuite/g++.dg/template/non-dependent24.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f84f12066953186cce4328b7f178d3daa2fe96e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f84f12066953186cce4328b7f178d3daa2fe96e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent24.C?ref=4f84f12066953186cce4328b7f178d3daa2fe96e", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/105758\n+\n+struct A {\n+  void foo(int);\n+};\n+\n+template<class>\n+struct Z : A {\n+  static Z *z;\n+  void bar();\n+};\n+\n+template<class T>\n+Z<T> *Z<T>::z;\n+\n+template<class T>\n+void Z<T>::bar() {\n+  z->foo(0);\n+}"}]}