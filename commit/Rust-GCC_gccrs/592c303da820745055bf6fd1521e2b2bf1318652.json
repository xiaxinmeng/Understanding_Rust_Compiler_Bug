{"sha": "592c303da820745055bf6fd1521e2b2bf1318652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyYzMwM2RhODIwNzQ1MDU1YmY2ZmQxNTIxZTJiMmJmMTMxODY1Mg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2007-08-01T11:39:31Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-08-01T11:39:31Z"}, "message": "tree-ssa-threadupdate.c (thread_through_all_blocks): Record that the loop structures may need fixing.\n\n\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Record that\n\tthe loop structures may need fixing.\n\t* tree-cfgcleanup.c (cleanup_tree_cfg_noloop, repair_loop_structures):\n\tNew functions.\n\t(cleanup_tree_cfg_loop): Removed.\n\t(cleanup_tree_cfg): If loops need fixing, call repair_loop_structures.\n\t* tree-predcom.c (tree_predictive_commoning): Return TODO_cleanup_cfg\n\tinstead of running cleanup_tree_cfg_loop.\n\t* cfgloop.h (LOOPS_NEED_FIXUP): New constant.\n\t* tree-flow.h (cleanup_tree_cfg_loop): Declaration removed.\n\t(tree_predictive_commoning): Declaration changed.\n\t* passes.c (execute_function_todo): Do not use cleanup_tree_cfg_loop.\n\nFrom-SVN: r127118", "tree": {"sha": "589e7c2e94dc0f61c32b953370ab9b08162f79ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589e7c2e94dc0f61c32b953370ab9b08162f79ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/592c303da820745055bf6fd1521e2b2bf1318652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592c303da820745055bf6fd1521e2b2bf1318652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592c303da820745055bf6fd1521e2b2bf1318652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592c303da820745055bf6fd1521e2b2bf1318652/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46cb04410da4ba4fa10070a0eec7a037ff6152a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cb04410da4ba4fa10070a0eec7a037ff6152a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cb04410da4ba4fa10070a0eec7a037ff6152a7"}], "stats": {"total": 91, "additions": 60, "deletions": 31}, "files": [{"sha": "46efc5ddf3c0da41ad2a07c49996577a7e654b30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=592c303da820745055bf6fd1521e2b2bf1318652", "patch": "@@ -1,3 +1,18 @@\n+2007-08-01  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Record that\n+\tthe loop structures may need fixing.\n+\t* tree-cfgcleanup.c (cleanup_tree_cfg_noloop, repair_loop_structures):\n+\tNew functions.\n+\t(cleanup_tree_cfg_loop): Removed.\n+\t(cleanup_tree_cfg): If loops need fixing, call repair_loop_structures.\n+\t* tree-predcom.c (tree_predictive_commoning): Return TODO_cleanup_cfg\n+\tinstead of running cleanup_tree_cfg_loop.\n+\t* cfgloop.h (LOOPS_NEED_FIXUP): New constant.\n+\t* tree-flow.h (cleanup_tree_cfg_loop): Declaration removed.\n+\t(tree_predictive_commoning): Declaration changed.\n+\t* passes.c (execute_function_todo): Do not use cleanup_tree_cfg_loop.\n+\n 2007-08-01  Zdenek Dvorak  <ook@ucw.cz>\n \n \t* doc/invoke.texi (l1-cache-size): Update documentation."}, {"sha": "903672dfcf96a20890eb158f114a1657180c6352", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=592c303da820745055bf6fd1521e2b2bf1318652", "patch": "@@ -170,7 +170,8 @@ enum\n   LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS = 4,\n   LOOPS_HAVE_RECORDED_EXITS = 8,\n   LOOPS_MAY_HAVE_MULTIPLE_LATCHES = 16,\n-  LOOP_CLOSED_SSA = 32\n+  LOOP_CLOSED_SSA = 32,\n+  LOOPS_NEED_FIXUP = 64\n };\n \n #define LOOPS_NORMAL (LOOPS_HAVE_PREHEADERS | LOOPS_HAVE_SIMPLE_LATCHES \\"}, {"sha": "51517063d8fb7750a84f663fc687ec8c78d8d7d0", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=592c303da820745055bf6fd1521e2b2bf1318652", "patch": "@@ -891,12 +891,7 @@ execute_function_todo (void *data)\n   /* Always cleanup the CFG before trying to update SSA.  */\n   if (flags & TODO_cleanup_cfg)\n     {\n-      bool cleanup;\n-\n-      if (current_loops)\n-\tcleanup = cleanup_tree_cfg_loop ();\n-      else\n-\tcleanup = cleanup_tree_cfg ();\n+      bool cleanup = cleanup_tree_cfg ();\n \n       if (cleanup && (cfun->curr_properties & PROP_ssa))\n \tflags |= TODO_remove_unused_locals;"}, {"sha": "c35001c33e7c2978e5a3c0a95e01df74d146d3a3", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=592c303da820745055bf6fd1521e2b2bf1318652", "patch": "@@ -596,8 +596,8 @@ cleanup_tree_cfg_1 (void)\n /* Remove unreachable blocks and other miscellaneous clean up work.\n    Return true if the flowgraph was modified, false otherwise.  */\n \n-bool\n-cleanup_tree_cfg (void)\n+static bool\n+cleanup_tree_cfg_noloop (void)\n {\n   bool changed;\n \n@@ -632,34 +632,47 @@ cleanup_tree_cfg (void)\n \n   timevar_pop (TV_TREE_CLEANUP_CFG);\n \n+  if (changed && current_loops)\n+    current_loops->state |= LOOPS_NEED_FIXUP;\n+\n   return changed;\n }\n \n-/* Cleanup cfg and repair loop structures.  */\n+/* Repairs loop structures.  */\n \n-bool\n-cleanup_tree_cfg_loop (void)\n+static void\n+repair_loop_structures (void)\n {\n-  bool changed = cleanup_tree_cfg ();\n+  bitmap changed_bbs = BITMAP_ALLOC (NULL);\n+  fix_loop_structure (changed_bbs);\n \n-  if (changed && current_loops != NULL)\n-    {\n-      bitmap changed_bbs = BITMAP_ALLOC (NULL);\n-      fix_loop_structure (changed_bbs);\n+  /* This usually does nothing.  But sometimes parts of cfg that originally\n+     were inside a loop get out of it due to edge removal (since they\n+     become unreachable by back edges from latch).  */\n+  if ((current_loops->state & LOOP_CLOSED_SSA) != 0)\n+    rewrite_into_loop_closed_ssa (changed_bbs, TODO_update_ssa);\n \n-      /* This usually does nothing.  But sometimes parts of cfg that originally\n-\t were inside a loop get out of it due to edge removal (since they\n-\t become unreachable by back edges from latch).  */\n-      if ((current_loops->state & LOOP_CLOSED_SSA) != 0)\n-\trewrite_into_loop_closed_ssa (changed_bbs, TODO_update_ssa);\n-\n-      BITMAP_FREE (changed_bbs);\n+  BITMAP_FREE (changed_bbs);\n \n #ifdef ENABLE_CHECKING\n-      verify_loop_structure ();\n+  verify_loop_structure ();\n #endif\n-      scev_reset ();\n-    }\n+  scev_reset ();\n+\n+  current_loops->state &= ~LOOPS_NEED_FIXUP;\n+}\n+\n+/* Cleanup cfg and repair loop structures.  */\n+\n+bool\n+cleanup_tree_cfg (void)\n+{\n+  bool changed = cleanup_tree_cfg_noloop ();\n+\n+  if (current_loops != NULL\n+      && (current_loops->state & LOOPS_NEED_FIXUP))\n+    repair_loop_structures ();\n+\n   return changed;\n }\n "}, {"sha": "55bec44c27bdf1181e2eb5a9628925f33bd870c7", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=592c303da820745055bf6fd1521e2b2bf1318652", "patch": "@@ -783,7 +783,6 @@ void remove_edge_and_dominated_blocks (edge);\n /* In tree-cfgcleanup.c  */\n extern bitmap cfgcleanup_altered_bbs;\n extern bool cleanup_tree_cfg (void);\n-extern bool cleanup_tree_cfg_loop (void);\n \n /* In tree-pretty-print.c.  */\n extern void dump_generic_bb (FILE *, basic_block, int, int);\n@@ -975,7 +974,7 @@ unsigned int tree_unroll_loops_completely (bool);\n unsigned int tree_ssa_prefetch_arrays (void);\n unsigned int remove_empty_loops (void);\n void tree_ssa_iv_optimize (void);\n-void tree_predictive_commoning (void);\n+unsigned tree_predictive_commoning (void);\n \n bool number_of_iterations_exit (struct loop *, edge,\n \t\t\t\tstruct tree_niter_desc *niter, bool);"}, {"sha": "fcf42911d28ea50b4a7e85c32816b27a85c27852", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=592c303da820745055bf6fd1521e2b2bf1318652", "patch": "@@ -2582,12 +2582,13 @@ end: ;\n \n /* Runs predictive commoning.  */\n \n-void\n+unsigned\n tree_predictive_commoning (void)\n {\n   bool unrolled = false;\n   struct loop *loop;\n   loop_iterator li;\n+  unsigned ret = 0;\n \n   initialize_original_copy_tables ();\n   FOR_EACH_LOOP (li, loop, LI_ONLY_INNERMOST)\n@@ -2598,7 +2599,9 @@ tree_predictive_commoning (void)\n   if (unrolled)\n     {\n       scev_reset ();\n-      cleanup_tree_cfg_loop ();\n+      ret = TODO_cleanup_cfg;\n     }\n   free_original_copy_tables ();\n+\n+  return ret;\n }"}, {"sha": "a626cdd764898ad290c39cfeb61c7bc1b0a2d2d2", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592c303da820745055bf6fd1521e2b2bf1318652/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=592c303da820745055bf6fd1521e2b2bf1318652", "patch": "@@ -1076,6 +1076,9 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   VEC_free (edge, heap, threaded_edges);\n   threaded_edges = NULL;\n \n+  if (retval)\n+    current_loops->state |= LOOPS_NEED_FIXUP;\n+\n   return retval;\n }\n "}]}