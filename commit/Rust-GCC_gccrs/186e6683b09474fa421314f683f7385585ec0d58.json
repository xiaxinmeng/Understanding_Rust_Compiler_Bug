{"sha": "186e6683b09474fa421314f683f7385585ec0d58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2ZTY2ODNiMDk0NzRmYTQyMTMxNGY2ODNmNzM4NTU4NWVjMGQ1OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-24T20:33:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-24T20:33:56Z"}, "message": "type_traits: Implement is_member_object_pointer, is_member_function_pointer.\n\n2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_member_object_pointer,\n\tis_member_function_pointer. N.B. Due to c++/19076, the latter\n\tdoesn't really work at the moment (a rather ugly work around\n\twill be provided in case the front-end bug doesn't get fixed\n\tsoon); generalize and extend the _DEFINE_SPEC macros.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_member_pointer/is_member_pointer.cc: New.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_member_pointer/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_member_function_pointer/is_member_function_pointer.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_member_function_pointer/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_member_object_pointer/is_member_object_pointer.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_member_object_pointer/typedefs.cc: Likewise.\n\nFrom-SVN: r92593", "tree": {"sha": "d217ce89eec0b444475b125e962085a761a003cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d217ce89eec0b444475b125e962085a761a003cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/186e6683b09474fa421314f683f7385585ec0d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/186e6683b09474fa421314f683f7385585ec0d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/186e6683b09474fa421314f683f7385585ec0d58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/186e6683b09474fa421314f683f7385585ec0d58/comments", "author": null, "committer": null, "parents": [{"sha": "fab072b528f505aa6f4fcc8372ef15902b633c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab072b528f505aa6f4fcc8372ef15902b633c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab072b528f505aa6f4fcc8372ef15902b633c04"}], "stats": {"total": 404, "additions": 370, "deletions": 34}, "files": [{"sha": "167faa82cc8644e4d1f15c62d0385924f392ec14", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -1,3 +1,23 @@\n+2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_member_object_pointer,\n+\tis_member_function_pointer. N.B. Due to c++/19076, the latter\n+\tdoesn't really work at the moment (a rather ugly work around\n+\twill be provided in case the front-end bug doesn't get fixed\n+\tsoon); generalize and extend the _DEFINE_SPEC macros.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_member_pointer/is_member_pointer.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_member_pointer/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_member_function_pointer/is_member_function_pointer.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_member_function_pointer/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_member_object_pointer/is_member_object_pointer.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_member_object_pointer/typedefs.cc: Likewise.\n+\n 2004-12-22  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits_fwd.h: New, forward declarations."}, {"sha": "4da6b3ca1786d13c1602eb8a3156d5f125a3080a", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 65, "deletions": 34, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -40,16 +40,26 @@ namespace tr1\n     typedef struct { char __arr[2]; } __two;\n   };\n \n-#define _DEFINE_SPEC_HELPER(_Header, _Spec)                      \\\n-  template _Header                                               \\\n-    struct _Spec                                                 \\\n+#define _DEFINE_SPEC_0_HELPER(_Spec)                            \\\n+  template<>                                                    \\\n+    struct _Spec                                                \\\n     : public true_type { };\n+\n+#define _DEFINE_SPEC_1_HELPER(_Spec)                            \\\n+  template<typename _Tp>                                        \\\n+    struct _Spec                                                \\\n+    _DEFINE_SPEC_1_VAR\n       \n-#define _DEFINE_SPEC(_Header, _Trait, _Type)                     \\\n-  _DEFINE_SPEC_HELPER(_Header, _Trait<_Type>)                    \\\n-  _DEFINE_SPEC_HELPER(_Header, _Trait<_Type const>)              \\\n-  _DEFINE_SPEC_HELPER(_Header, _Trait<_Type volatile>)           \\\n-  _DEFINE_SPEC_HELPER(_Header, _Trait<_Type const volatile>)\n+#define _DEFINE_SPEC_2_HELPER(_Spec)                            \\\n+  template<typename _Tp, typename _Cp>                          \\\n+    struct _Spec                                                \\\n+    _DEFINE_SPEC_2_VAR\n+\n+#define _DEFINE_SPEC(_Order, _Trait, _Type)                     \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type>)                 \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const>)           \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type volatile>)        \\\n+  _DEFINE_SPEC_##_Order##_HELPER(_Trait<_Type const volatile>)\n \n   /// @brief  helper classes [4.3].\n   template<typename _Tp, _Tp __v>\n@@ -66,33 +76,33 @@ namespace tr1\n   template<typename>\n     struct is_void\n     : public false_type { };\n-  _DEFINE_SPEC(<>, is_void, void)\n+  _DEFINE_SPEC(0, is_void, void)\n \n   template<typename>\n     struct is_integral\n     : public false_type { };\n-  _DEFINE_SPEC(<>, is_integral, bool)\n-  _DEFINE_SPEC(<>, is_integral, char)\n-  _DEFINE_SPEC(<>, is_integral, signed char)\n-  _DEFINE_SPEC(<>, is_integral, unsigned char)\n+  _DEFINE_SPEC(0, is_integral, bool)\n+  _DEFINE_SPEC(0, is_integral, char)\n+  _DEFINE_SPEC(0, is_integral, signed char)\n+  _DEFINE_SPEC(0, is_integral, unsigned char)\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  _DEFINE_SPEC(<>, is_integral, wchar_t)\n+  _DEFINE_SPEC(0, is_integral, wchar_t)\n #endif\n-  _DEFINE_SPEC(<>, is_integral, short)\n-  _DEFINE_SPEC(<>, is_integral, unsigned short)\n-  _DEFINE_SPEC(<>, is_integral, int)\n-  _DEFINE_SPEC(<>, is_integral, unsigned int)\n-  _DEFINE_SPEC(<>, is_integral, long)\n-  _DEFINE_SPEC(<>, is_integral, unsigned long)\n-  _DEFINE_SPEC(<>, is_integral, long long)\n-  _DEFINE_SPEC(<>, is_integral, unsigned long long)\n+  _DEFINE_SPEC(0, is_integral, short)\n+  _DEFINE_SPEC(0, is_integral, unsigned short)\n+  _DEFINE_SPEC(0, is_integral, int)\n+  _DEFINE_SPEC(0, is_integral, unsigned int)\n+  _DEFINE_SPEC(0, is_integral, long)\n+  _DEFINE_SPEC(0, is_integral, unsigned long)\n+  _DEFINE_SPEC(0, is_integral, long long)\n+  _DEFINE_SPEC(0, is_integral, unsigned long long)\n \n   template<typename>\n     struct is_floating_point\n     : public false_type { };\n-  _DEFINE_SPEC(<>, is_floating_point, float)\n-  _DEFINE_SPEC(<>, is_floating_point, double)\n-  _DEFINE_SPEC(<>, is_floating_point, long double)\n+  _DEFINE_SPEC(0, is_floating_point, float)\n+  _DEFINE_SPEC(0, is_floating_point, double)\n+  _DEFINE_SPEC(0, is_floating_point, long double)\n \n   template<typename>\n     struct is_array\n@@ -105,11 +115,14 @@ namespace tr1\n   template<typename _Tp>\n     struct is_array<_Tp[]>\n     : public true_type { };\n+\n+#define _DEFINE_SPEC_1_VAR        \\\n+    : public true_type { };\n   \n   template<typename>\n     struct is_pointer\n     : public false_type { };\n-  _DEFINE_SPEC(<typename _Tp>, is_pointer, _Tp*)\n+  _DEFINE_SPEC(1, is_pointer, _Tp*)\n  \n   template<typename>\n     struct is_reference\n@@ -118,7 +131,24 @@ namespace tr1\n   template<typename _Tp>\n     struct is_reference<_Tp&>\n     : public true_type { };\n-  \n+\n+#define _DEFINE_SPEC_2_VAR        \\\n+    : public integral_constant<bool, !is_function<_Tp>::value> { };\n+\n+  template<typename>\n+    struct is_member_object_pointer\n+    : public false_type { };\n+  _DEFINE_SPEC(2, is_member_object_pointer, _Tp _Cp::*)\n+\n+#undef _DEFINE_SPEC_2_VAR\n+#define _DEFINE_SPEC_2_VAR        \\\n+    : public integral_constant<bool, is_function<_Tp>::value> { };\n+\n+  template<typename>\n+    struct is_member_function_pointer\n+    : public false_type { };\n+  _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*)\n+\n   template<typename _Tp>\n     struct __is_function_helper\n     : public __sfinae_types\n@@ -322,25 +352,26 @@ namespace tr1\n     { typedef typename remove_all_extents<_Tp>::type     type; };\n \n   /// @brief  pointer modifications [4.7.4].\n-#undef _DEFINE_SPEC_HELPER\n-#define _DEFINE_SPEC_HELPER(_Header, _Spec)                      \\\n-  template _Header                                               \\\n-    struct _Spec                                                 \\\n+#undef _DEFINE_SPEC_1_VAR\n+#define _DEFINE_SPEC_1_VAR        \\\n     { typedef _Tp     type; };\n \n   template<typename _Tp>\n     struct remove_pointer\n     { typedef _Tp     type; };\n-  _DEFINE_SPEC(<typename _Tp>, remove_pointer, _Tp*)\n+  _DEFINE_SPEC(1, remove_pointer, _Tp*)\n   \n   template<typename _Tp>\n     struct add_pointer\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n   /// @brief  other transformations [4.8].\n \n-#undef _DEFINE_SPEC_HELPER\n-#undef _DEFINE_SPEC\n+#undef _DEFINE_SPEC_0_HELPER\n+#undef _DEFINE_SPEC_1_HELPER\n+#undef _DEFINE_SPEC_2_HELPER\n+#undef _DEFINE_SPEC_1_VAR\n+#undef _DEFINE_SPEC_2_VAR\n \n }\n }"}, {"sha": "918417e4ed2f81c1b35b4a1cdea6e7dee0ab532e", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_member_pointer/is_member_pointer.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Fis_member_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Fis_member_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Fis_member_pointer.cc?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -0,0 +1,56 @@\n+// 2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.2 Composite type traits\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_member_pointer;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_member_pointer, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_member_pointer, const int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_member_pointer, ClassType (ClassType::*)>(true)) );\n+\n+  // Temporarily disabled because of c++/19076 :-(\n+\n+  //VERIFY( (test_category<is_member_pointer,\n+  //   int (ClassType::*) (int)>(true)) );\n+  //VERIFY( (test_category<is_member_pointer,\n+  //   int (ClassType::*) (int) const>(true)) );\n+  //VERIFY( (test_category<is_member_function_pointer,\n+  //   ClassType (ClassType::*) (ClassType)>(true)) );\n+  //VERIFY( (test_category<is_member_pointer,\n+  //   float (ClassType::*) (int, float, int[], int&)>(true)) );\n+  \n+  // Sanity check.\n+  VERIFY( (test_category<is_member_pointer, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "90cb87433a28327ff1b31efb1127afa324a5f278", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_member_pointer/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_member_pointer%2Ftypedefs.cc?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_member_pointer<int>    test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "9652e1943e7a008e957b5ae85cf250a0a31e333a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_member_function_pointer/is_member_function_pointer.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Fis_member_function_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Fis_member_function_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Fis_member_function_pointer.cc?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -0,0 +1,62 @@\n+// 2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_member_function_pointer;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+\n+  // Temporarily disabled because of c++/19076 :-(\n+\n+  //VERIFY( (test_category<is_member_function_pointer,\n+  //   int (ClassType::*) (int)>(true)) );\n+  //VERIFY( (test_category<is_member_function_pointer,\n+  //   int (ClassType::*) (int) const>(true)) );\n+  //VERIFY( (test_category<is_member_function_pointer,\n+  //   ClassType (ClassType::*) (ClassType)>(true)) );\n+  //VERIFY( (test_category<is_member_function_pointer,\n+  //   float (ClassType::*) (int, float, int[], int&)>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   int (ClassType::*)>(false)) );\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   const int (ClassType::*)>(false)) );\n+  VERIFY( (test_category<is_member_function_pointer,\n+\t   ClassType (ClassType::*)>(false)) );\n+  \n+  // Sanity check.\n+  VERIFY( (test_category<is_member_function_pointer, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "89112e3608f8c72f02248e1790904490bdda92d2", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_member_function_pointer/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_function_pointer%2Ftypedefs.cc?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_member_function_pointer<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "986eee1173ca6bb04cce1fdc492aa0de8c62f93d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_member_object_pointer/is_member_object_pointer.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Fis_member_object_pointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Fis_member_object_pointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Fis_member_object_pointer.cc?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -0,0 +1,59 @@\n+// 2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_member_object_pointer;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   const int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   ClassType (ClassType::*)>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   int (ClassType::*) (int)>(false)) );\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   int (ClassType::*) (int) const>(false)) );\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   ClassType (ClassType::*) (ClassType)>(false)) );\n+  VERIFY( (test_category<is_member_object_pointer,\n+\t   float (ClassType::*) (int, float, int[], int&)>(false)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_member_object_pointer, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "414c2ea16242c48f4e5b6662a725ad99a402b634", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_member_object_pointer/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186e6683b09474fa421314f683f7385585ec0d58/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_member_object_pointer%2Ftypedefs.cc?ref=186e6683b09474fa421314f683f7385585ec0d58", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_member_object_pointer<int>   test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}