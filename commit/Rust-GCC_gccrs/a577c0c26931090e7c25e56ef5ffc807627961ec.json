{"sha": "a577c0c26931090e7c25e56ef5ffc807627961ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3N2MwYzI2OTMxMDkwZTdjMjVlNTZlZjVmZmM4MDc2Mjc5NjFlYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-21T22:11:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-21T22:11:44Z"}, "message": "libstdc++: Fix experimental::path::generic_string (PR 93245)\n\nThis function was unimplemented, simply returning the native format\nstring instead.\n\n\tPR libstdc++/93245\n\t* include/experimental/bits/fs_path.h (path::generic_string<C,T,A>()):\n\t* testsuite/experimental/filesystem/path/generic/generic_string.cc:\n\tImprove test coverage.", "tree": {"sha": "d5ba69e0d731c6255ab49ea2810edca0d0efe8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5ba69e0d731c6255ab49ea2810edca0d0efe8f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a577c0c26931090e7c25e56ef5ffc807627961ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a577c0c26931090e7c25e56ef5ffc807627961ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a577c0c26931090e7c25e56ef5ffc807627961ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a577c0c26931090e7c25e56ef5ffc807627961ec/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc985118d9f5014afc1caf32a411ee5803fba61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc985118d9f5014afc1caf32a411ee5803fba61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc985118d9f5014afc1caf32a411ee5803fba61"}], "stats": {"total": 91, "additions": 73, "deletions": 18}, "files": [{"sha": "7b9c30e3b642985fd8cfce1930c3b504c07df7da", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a577c0c26931090e7c25e56ef5ffc807627961ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a577c0c26931090e7c25e56ef5ffc807627961ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a577c0c26931090e7c25e56ef5ffc807627961ec", "patch": "@@ -1,5 +1,10 @@\n 2020-03-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/93245\n+\t* include/experimental/bits/fs_path.h (path::generic_string<C,T,A>()):\n+\t* testsuite/experimental/filesystem/path/generic/generic_string.cc:\n+\tImprove test coverage.\n+\n \tPR libstdc++/94242\n \t* include/bits/fs_path.h (path::_S_str_convert): Replace first\n \tparameter with basic_string_view so that strings with different"}, {"sha": "d7234c08a006a2e17a98de337303c519fc407813", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a577c0c26931090e7c25e56ef5ffc807627961ec/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a577c0c26931090e7c25e56ef5ffc807627961ec/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=a577c0c26931090e7c25e56ef5ffc807627961ec", "patch": "@@ -1086,34 +1086,56 @@ namespace __detail\n   inline std::u32string\n   path::u32string() const { return string<char32_t>(); }\n \n-#ifndef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline std::basic_string<_CharT, _Traits, _Allocator>\n     path::generic_string(const _Allocator& __a) const\n-    { return string<_CharT, _Traits, _Allocator>(__a); }\n+    {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+      const _CharT __slash = is_same<_CharT, wchar_t>::value\n+\t? _CharT(L'/')\n+\t: _CharT('/'); // Assume value is correct for the encoding.\n+#else\n+      const _CharT __slash = _CharT('/');\n+#endif\n+      basic_string<_CharT, _Traits, _Allocator> __str(__a);\n+      __str.reserve(_M_pathname.size());\n+      bool __add_slash = false;\n+      for (auto& __elem : *this)\n+\t{\n+\t  if (__elem._M_type == _Type::_Root_dir)\n+\t    {\n+\t      __str += __slash;\n+\t      continue;\n+\t    }\n+\t  if (__add_slash)\n+\t    __str += __slash;\n+\t  __str += __elem.string<_CharT, _Traits, _Allocator>(__a);\n+\t  __add_slash = __elem._M_type == _Type::_Filename;\n+\t}\n+      return __str;\n+    }\n \n   inline std::string\n-  path::generic_string() const { return string(); }\n+  path::generic_string() const { return generic_string<char>(); }\n \n #if _GLIBCXX_USE_WCHAR_T\n   inline std::wstring\n-  path::generic_wstring() const { return wstring(); }\n+  path::generic_wstring() const { return generic_string<wchar_t>(); }\n #endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   inline std::u8string\n-  path::generic_u8string() const { return u8string(); }\n+  path::generic_u8string() const { return generic_string<char8_t>(); }\n #else\n   inline std::string\n-  path::generic_u8string() const { return u8string(); }\n+  path::generic_u8string() const { return generic_string<char>(); }\n #endif\n \n   inline std::u16string\n-  path::generic_u16string() const { return u16string(); }\n+  path::generic_u16string() const { return generic_string<char16_t>(); }\n \n   inline std::u32string\n-  path::generic_u32string() const { return u32string(); }\n-#endif\n+  path::generic_u32string() const { return generic_string<char32_t>(); }\n \n   inline int\n   path::compare(const string_type& __s) const { return compare(path(__s)); }"}, {"sha": "aa977847436b068f87cfe2ae8bab975984da5e6b", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/generic/generic_string.cc", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a577c0c26931090e7c25e56ef5ffc807627961ec/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a577c0c26931090e7c25e56ef5ffc807627961ec/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc?ref=a577c0c26931090e7c25e56ef5ffc807627961ec", "patch": "@@ -23,27 +23,55 @@\n \n #include <experimental/filesystem>\n #include <testsuite_fs.h>\n-#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n using std::experimental::filesystem::path;\n \n void\n test01()\n {\n-  for (const path& p : __gnu_test::test_paths)\n+  __gnu_test::compare_paths( path(\"///a//b///\").generic_string(), \"/a/b/.\" );\n+  __gnu_test::compare_paths( path(\"///a//b\").generic_u16string(), \"/a/b\" );\n+  __gnu_test::compare_paths( path(\"//a//b\").generic_u16string(), \"//a/b\" );\n+}\n+\n+using __gnu_test::SimpleAllocator;\n+\n+void\n+test02()\n+{\n+  path p = \"//foo//bar//.\";\n+  using C = char16_t;\n+  auto g = p.generic_string<C, std::char_traits<C>, SimpleAllocator<C>>();\n+  VERIFY( g == u\"//foo/bar/.\" );\n+}\n+\n+\n+void\n+test03()\n+{\n+  for (path p : { \"/a///b//c\", \"///a//b//c\", \"a:b//c\", \"a://b///c\" })\n   {\n-    path p2(p), p3;\n-    p2.swap(p3);\n-    VERIFY( p2 == path() );\n-    VERIFY( p3 == p );\n-    p2.swap(p3);\n-    VERIFY( p2 == p );\n-    VERIFY( p3 == path() );\n+    // A path constructed from the generic format string should compare equal\n+    // to the original, because they represent the same path.\n+    VERIFY( path(p.generic_string()) == p );\n+    VERIFY( path(p.generic_wstring()) == p );\n+    VERIFY( path(p.generic_u8string()) == p );\n+    VERIFY( path(p.generic_u16string()) == p );\n+    VERIFY( path(p.generic_u32string()) == p );\n   }\n+\n+  // Except when the original consists entirely of a root-directory with\n+  // multiple slashes, because path(\"///\").native() is \"///\" but the\n+  // generic format string is \"/\". In the Filesystem TS path::compare just\n+  // compares native strings, so path(\"///\") != path(\"/\").\n+  VERIFY( path(\"///\").generic_string() == \"/\" );\n }\n \n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}]}