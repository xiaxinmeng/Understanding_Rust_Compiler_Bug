{"sha": "ebf0e888b125a10798d1a8c972305d8413f27a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmMGU4ODhiMTI1YTEwNzk4ZDFhOGM5NzIzMDVkODQxM2YyN2E3Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-19T22:16:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-19T22:16:10Z"}, "message": "ia64.c: Revert 2002-03-01 patch.\n\n        * config/ia64/ia64.c: Revert 2002-03-01 patch.\n        * config/ia64/ia64.h (INIT_EXPANDERS): New.\n\nFrom-SVN: r51048", "tree": {"sha": "60891dbaa035d55020b4cc4240f516e7f27619b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60891dbaa035d55020b4cc4240f516e7f27619b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebf0e888b125a10798d1a8c972305d8413f27a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf0e888b125a10798d1a8c972305d8413f27a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf0e888b125a10798d1a8c972305d8413f27a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf0e888b125a10798d1a8c972305d8413f27a76/comments", "author": null, "committer": null, "parents": [{"sha": "c6ef94c533d7a3fb81af6d84c4303f55cb707e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ef94c533d7a3fb81af6d84c4303f55cb707e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6ef94c533d7a3fb81af6d84c4303f55cb707e49"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "60bb8246d0d8ab4209104334cdfc6f53c2ba439e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0e888b125a10798d1a8c972305d8413f27a76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0e888b125a10798d1a8c972305d8413f27a76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebf0e888b125a10798d1a8c972305d8413f27a76", "patch": "@@ -1,3 +1,8 @@\n+2002-03-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c: Revert 2002-03-01 patch.\n+\t* config/ia64/ia64.h (INIT_EXPANDERS): New.\n+\n 2002-03-19  Jim Blandy  <jimb@redhat.com>\n \n \t* cppmacro.c (cpp_macro_definition): Emit a space after the macro"}, {"sha": "a9ea756d37a0b33a68f995603c103fd825910dd4", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0e888b125a10798d1a8c972305d8413f27a76/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0e888b125a10798d1a8c972305d8413f27a76/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ebf0e888b125a10798d1a8c972305d8413f27a76", "patch": "@@ -1671,9 +1671,10 @@ ia64_initial_elimination_offset (from, to)\n       /* Arguments start above the 16 byte save area, unless stdarg\n \t in which case we store through the 16 byte save area.  */\n       if (to == HARD_FRAME_POINTER_REGNUM)\n-\toffset = 16;\n+\toffset = 16 - current_function_pretend_args_size;\n       else if (to == STACK_POINTER_REGNUM)\n-\toffset = current_frame_info.total_size + 16;\n+\toffset = (current_frame_info.total_size\n+\t\t  + 16 - current_function_pretend_args_size);\n       else\n \tabort ();\n       break;\n@@ -3226,7 +3227,7 @@ ia64_va_start (stdarg_p, valist, nextarg)\n   else\n     ofs = (arg_words >= MAX_ARGUMENT_SLOTS ? -UNITS_PER_WORD : 0);\n \n-  nextarg = plus_constant (nextarg, ofs - current_function_pretend_args_size);\n+  nextarg = plus_constant (nextarg, ofs);\n   std_expand_builtin_va_start (1, valist, nextarg);\n }\n "}, {"sha": "c0d81ec69f152c7793a26dc35b5f79af7129f666", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0e888b125a10798d1a8c972305d8413f27a76/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0e888b125a10798d1a8c972305d8413f27a76/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ebf0e888b125a10798d1a8c972305d8413f27a76", "patch": "@@ -1145,6 +1145,14 @@ enum reg_class\n    in it.  */\n #define ARG_POINTER_REGNUM R_GR(0)\n \n+/* Due to the way varargs and argument spilling happens, the argument\n+   pointer is not 16-byte aligned like the stack pointer.  */\n+#define INIT_EXPANDERS\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    if (cfun && cfun->emit->regno_pointer_align)\t\\\n+      REGNO_POINTER_ALIGN (ARG_POINTER_REGNUM) = 64;\t\\\n+  } while (0)\n+\n /* The register number for the return address register.  For IA-64, this\n    is not actually a pointer as the name suggests, but that's a name that\n    gen_rtx_REG already takes care to keep unique.  We modify"}]}