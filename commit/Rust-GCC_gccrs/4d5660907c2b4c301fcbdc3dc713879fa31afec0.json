{"sha": "4d5660907c2b4c301fcbdc3dc713879fa31afec0", "node_id": "C_kwDOANBUbNoAKDRkNTY2MDkwN2MyYjRjMzAxZmNiZGMzZGM3MTM4NzlmYTMxYWZlYzA", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-01-21T18:33:15Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-08-31T18:51:10Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Add backtrace generation on demand\n\n  Add _GLIBCXX_DEBUG_BACKTRACE macro to activate backtrace generation on\n_GLIBCXX_DEBUG assertions. Prerequisite is to have configure the lib with:\n\n--enable-libstdcxx-backtrace=yes\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/formatter.h\n\t[_GLIBCXX_HAVE_STACKTRACE](__glibcxx_backtrace_state): Declare.\n\t[_GLIBCXX_HAVE_STACKTRACE](__glibcxx_backtrace_create_state): Declare.\n\t[_GLIBCXX_HAVE_STACKTRACE](__glibcxx_backtrace_full_callback): Define.\n\t[_GLIBCXX_HAVE_STACKTRACE](__glibcxx_backtrace_error_callback): Define.\n\t[_GLIBCXX_HAVE_STACKTRACE](__glibcxx_backtrace_full_func): Define.\n\t[_GLIBCXX_HAVE_STACKTRACE](__glibcxx_backtrace_full): Declare.\n\t[_GLIBCXX_HAVE_STACKTRACE](_Error_formatter::_M_backtrace_state): New.\n\t[_GLIBCXX_HAVE_STACKTRACE](_Error_formatter::_M_backtrace_full): New.\n\t* src/c++11/debug.cc [_GLIBCXX_HAVE_STACKTRACE](print_backtrace): New.\n\t(_Error_formatter::_M_error()): Adapt.\n\t* src/libbacktrace/Makefile.am: Add backtrace.c.\n\t* src/libbacktrace/Makefile.in: Regenerate.\n\t* src/libbacktrace/backtrace-rename.h (backtrace_full): New.\n\t* testsuite/23_containers/vector/debug/assign4_backtrace_neg.cc: New test.\n\t* doc/xml/manual/debug_mode.xml: Document _GLIBCXX_DEBUG_BACKTRACE.\n\t* doc/xml/manual/using.xml: Likewise.", "tree": {"sha": "f2e5a68fb76ea8103414dad8202aefe25c85a60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2e5a68fb76ea8103414dad8202aefe25c85a60e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d5660907c2b4c301fcbdc3dc713879fa31afec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d5660907c2b4c301fcbdc3dc713879fa31afec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d5660907c2b4c301fcbdc3dc713879fa31afec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d5660907c2b4c301fcbdc3dc713879fa31afec0/comments", "author": null, "committer": null, "parents": [{"sha": "de9805c08121a84ce368dccfe043a3f44c3ff13b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9805c08121a84ce368dccfe043a3f44c3ff13b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9805c08121a84ce368dccfe043a3f44c3ff13b"}], "stats": {"total": 166, "additions": 157, "deletions": 9}, "files": [{"sha": "dadc0cd1bb4a578679fda2aba2f60f1d061144cb", "filename": "libstdc++-v3/doc/xml/manual/debug_mode.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -161,6 +161,12 @@ which always works correctly.\n   <code>GLIBCXX_DEBUG_MESSAGE_LENGTH</code> can be used to request a\n   different length.</para>\n \n+<para>Note that libstdc++ is able to produce backtraces on error.\n+  It requires that you configure libstdc++ build with\n+  <option>--enable-libstdcxx-backtrace=yes</option>.\n+  Use <code>-D_GLIBCXX_DEBUG_BACKTRACE</code> to activate it.\n+  You'll then have to link with libstdc++_libbacktrace static library\n+  (<option>-lstdc++_libbacktrace</option>) to build your application.</para>\n </section>\n \n <section xml:id=\"debug_mode.using.specific\" xreflabel=\"Using Specific\"><info><title>Using a Specific Debug Container</title></info>"}, {"sha": "0acdba6b3bd2db21f03bf15cd60efa0575bbb4c2", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -1144,6 +1144,15 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n \textensions and libstdc++-specific behavior into errors.\n       </para>\n     </listitem></varlistentry>\n+    <varlistentry><term><code>_GLIBCXX_DEBUG_BACKTRACE</code></term>\n+    <listitem>\n+      <para>\n+\tUndefined by default. Considered only if libstdc++ has been configured with\n+\t<option>--enable-libstdcxx-backtrace=yes</option> and if <code>_GLIBCXX_DEBUG</code>\n+\tis defined. When defined display backtraces on\n+\t<link linkend=\"manual.ext.debug_mode\">debug mode</link> assertions.\n+      </para>\n+    </listitem></varlistentry>\n     <varlistentry><term><code>_GLIBCXX_PARALLEL</code></term>\n     <listitem>\n       <para>Undefined by default. When defined, compiles user code\n@@ -1650,6 +1659,7 @@ A quick read of the relevant part of the GCC\n       header will remain compatible between different GCC releases.\n     </para>\n     </section>\n+\n   </section>\n \n   <section xml:id=\"manual.intro.using.concurrency\" xreflabel=\"Concurrency\"><info><title>Concurrency</title></info>"}, {"sha": "b4b72383e222bc9ebccd62431c22c329e043504f", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -31,6 +31,37 @@\n \n #include <bits/c++config.h>\n \n+#if _GLIBCXX_HAVE_STACKTRACE\n+struct __glibcxx_backtrace_state;\n+\n+extern \"C\"\n+{\n+  __glibcxx_backtrace_state*\n+  __glibcxx_backtrace_create_state(const char*, int,\n+\t\t\t\t   void(*)(void*, const char*, int),\n+\t\t\t\t   void*);\n+\n+  typedef int (*__glibcxx_backtrace_full_callback) (\n+    void*, __UINTPTR_TYPE__, const char *, int, const char*);\n+\n+  typedef void (*__glibcxx_backtrace_error_callback) (\n+    void*, const char*, int);\n+\n+  typedef int (*__glibcxx_backtrace_full_func) (\n+    __glibcxx_backtrace_state*, int,\n+    __glibcxx_backtrace_full_callback,\n+    __glibcxx_backtrace_error_callback,\n+    void*);\n+\n+  int\n+  __glibcxx_backtrace_full(\n+    __glibcxx_backtrace_state*, int,\n+    __glibcxx_backtrace_full_callback,\n+    __glibcxx_backtrace_error_callback,\n+    void*);\n+}\n+#endif\n+\n #if __cpp_rtti\n # include <typeinfo>\n # define _GLIBCXX_TYPEID(_Type) &typeid(_Type)\n@@ -576,6 +607,15 @@ namespace __gnu_debug\n \t\t     const char* __function)\n     : _M_file(__file), _M_line(__line), _M_num_parameters(0), _M_text(0)\n     , _M_function(__function)\n+#if _GLIBCXX_HAVE_STACKTRACE\n+# ifdef _GLIBCXX_DEBUG_BACKTRACE\n+    , _M_backtrace_state(\n+      __glibcxx_backtrace_create_state(nullptr, 0, nullptr, nullptr))\n+    , _M_backtrace_full(&__glibcxx_backtrace_full)\n+# else\n+    , _M_backtrace_state()\n+# endif\n+#endif\n     { }\n \n #if !_GLIBCXX_INLINE_VERSION\n@@ -591,6 +631,10 @@ namespace __gnu_debug\n     unsigned int\t_M_num_parameters;\n     const char*\t\t_M_text;\n     const char*\t\t_M_function;\n+#if _GLIBCXX_HAVE_STACKTRACE\n+    __glibcxx_backtrace_state*\t\t_M_backtrace_state;\n+    __glibcxx_backtrace_full_func\t_M_backtrace_full;\n+#endif\n \n   public:\n     static _Error_formatter&"}, {"sha": "abc4124c01e6a493f10954faf2513a553592c774", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -611,10 +611,12 @@ namespace\n   void\n   print_raw(PrintContext& ctx, const char* str, ptrdiff_t nbc = -1)\n   {\n-    if (nbc >= 0)\n-      ctx._M_column += fprintf(stderr, \"%.*s\", (int)nbc, str);\n-    else\n-      ctx._M_column += fprintf(stderr, \"%s\", str);\n+    if (nbc != 0)\n+      {\n+\tctx._M_column += (nbc > 0)\n+\t  ? fprintf(stderr, \"%.*s\", (int)nbc, str)\n+\t  : fprintf(stderr, \"%s\", str);\n+      }\n   }\n \n   void\n@@ -680,7 +682,7 @@ namespace\n \n \t    pos += 2; // advance past \"__\"\n \t    if (memcmp(pos, cxx1998, 9) == 0)\n-\t      pos += 9; // advance part \"cxx1998::\"\n+\t      pos += 9; // advance past \"cxx1998::\"\n \n \t    str = pos;\n \t  }\n@@ -1093,6 +1095,58 @@ namespace\n   void\n   print_string(PrintContext& ctx, const char* str, ptrdiff_t nbc)\n   { print_string(ctx, str, nbc, nullptr, 0); }\n+\n+#if _GLIBCXX_HAVE_STACKTRACE\n+  int\n+  print_backtrace(void* data, __UINTPTR_TYPE__ pc, const char* filename,\n+\t\t  int lineno, const char* function)\n+  {\n+    const int bufsize = 64;\n+    char buf[bufsize];\n+\n+    PrintContext& ctx = *static_cast<PrintContext*>(data);\n+\n+    int written = __builtin_sprintf(buf, \"%p \", (void*)pc);\n+    print_word(ctx, buf, written);\n+\n+    int ret = 0;\n+    if (function)\n+      {\n+\tint status;\n+\tchar* demangled_name =\n+\t  __cxxabiv1::__cxa_demangle(function, NULL, NULL, &status);\n+\tif (status == 0)\n+\t  pretty_print(ctx, demangled_name, &print_raw);\n+\telse\n+\t  print_word(ctx, function);\n+\n+\tfree(demangled_name);\n+\tret = strstr(function, \"main\") ? 1 : 0;\n+      }\n+\n+    print_literal(ctx, \"\\n\");\n+\n+    if (filename)\n+      {\n+\tbool wordwrap = false;\n+\tswap(wordwrap, ctx._M_wordwrap);\n+\tprint_word(ctx, filename);\n+\n+\tif (lineno)\n+\t  {\n+\t    written = __builtin_sprintf(buf, \":%u\\n\", lineno);\n+\t    print_word(ctx, buf, written);\n+\t  }\n+\telse\n+\t  print_literal(ctx, \"\\n\");\n+\tswap(wordwrap, ctx._M_wordwrap);\n+      }\n+    else\n+      print_literal(ctx, \"???:0\\n\");\n+\n+    return ret;\n+  }\n+#endif\n }\n \n namespace __gnu_debug\n@@ -1139,6 +1193,17 @@ namespace __gnu_debug\n \tprint_literal(ctx, \"\\n\");\n       }\n \n+#if _GLIBCXX_HAVE_STACKTRACE\n+    if (_M_backtrace_state)\n+      {\n+\tprint_literal(ctx, \"Backtrace:\\n\");\n+\t_M_backtrace_full(\n+\t  _M_backtrace_state, 1, print_backtrace, nullptr, &ctx);\n+\tctx._M_first_line = true;\n+\tprint_literal(ctx, \"\\n\");\n+      }\n+#endif\n+\n     print_literal(ctx, \"Error: \");\n \n     // Print the error message"}, {"sha": "52d8f81b97becc6b64ce452f3386f89cbc1e2740", "filename": "libstdc++-v3/src/libbacktrace/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2FMakefile.am?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -60,6 +60,7 @@ libstdc___libbacktrace_la_SHORTNAME = $(obj_prefix)\n \n libstdc___libbacktrace_la_SOURCES = \\\n \tatomic.c \\\n+\tbacktrace.c \\\n \tdwarf.c \\\n \tfileline.c \\\n \tposix.c \\"}, {"sha": "5c6b4dd1a0cf31c8a3f7b05ef1d0ff357b88d28c", "filename": "libstdc++-v3/src/libbacktrace/Makefile.in", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2FMakefile.in?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -181,10 +181,10 @@ am__uninstall_files_from_dir = { \\\n am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am_libstdc___libbacktrace_la_OBJECTS = $(obj_prefix)-atomic.lo \\\n-\t$(obj_prefix)-dwarf.lo $(obj_prefix)-fileline.lo \\\n-\t$(obj_prefix)-posix.lo $(obj_prefix)-sort.lo \\\n-\t$(obj_prefix)-simple.lo $(obj_prefix)-state.lo \\\n-\t$(obj_prefix)-cp-demangle.lo\n+\t$(obj_prefix)-backtrace.lo $(obj_prefix)-dwarf.lo \\\n+\t$(obj_prefix)-fileline.lo $(obj_prefix)-posix.lo \\\n+\t$(obj_prefix)-sort.lo $(obj_prefix)-simple.lo \\\n+\t$(obj_prefix)-state.lo $(obj_prefix)-cp-demangle.lo\n libstdc___libbacktrace_la_OBJECTS =  \\\n \t$(am_libstdc___libbacktrace_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n@@ -507,6 +507,7 @@ obj_prefix = std_stacktrace\n libstdc___libbacktrace_la_SHORTNAME = $(obj_prefix)\n libstdc___libbacktrace_la_SOURCES = \\\n \tatomic.c \\\n+\tbacktrace.c \\\n \tdwarf.c \\\n \tfileline.c \\\n \tposix.c \\\n@@ -647,6 +648,9 @@ distclean-compile:\n $(obj_prefix)-atomic.lo: atomic.c\n \t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstdc___libbacktrace_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o $(obj_prefix)-atomic.lo `test -f 'atomic.c' || echo '$(srcdir)/'`atomic.c\n \n+$(obj_prefix)-backtrace.lo: backtrace.c\n+\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstdc___libbacktrace_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o $(obj_prefix)-backtrace.lo `test -f 'backtrace.c' || echo '$(srcdir)/'`backtrace.c\n+\n $(obj_prefix)-dwarf.lo: dwarf.c\n \t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstdc___libbacktrace_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o $(obj_prefix)-dwarf.lo `test -f 'dwarf.c' || echo '$(srcdir)/'`dwarf.c\n "}, {"sha": "79bdef6309f54a7e52f96deade5871d020ab457d", "filename": "libstdc++-v3/src/libbacktrace/backtrace-rename.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2Fbacktrace-rename.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2Fbacktrace-rename.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flibbacktrace%2Fbacktrace-rename.h?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -4,6 +4,7 @@\n #define backtrace_create_state __glibcxx_backtrace_create_state\n #define backtrace_dwarf_add __glibcxx_backtrace_dwarf_add\n #define backtrace_free __glibcxx_backtrace_free\n+#define backtrace_full __glibcxx_backtrace_full\n #define backtrace_get_view __glibcxx_backtrace_get_view\n #define backtrace_initialize __glibcxx_backtrace_initialize\n #define backtrace_open __glibcxx_backtrace_open"}, {"sha": "520788d5cb7b6cfdc9fb44d0f27a3e9a7a45bed7", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/assign4_backtrace_neg.cc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fassign4_backtrace_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d5660907c2b4c301fcbdc3dc713879fa31afec0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fassign4_backtrace_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fassign4_backtrace_neg.cc?ref=4d5660907c2b4c301fcbdc3dc713879fa31afec0", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-D_GLIBCXX_DEBUG_BACKTRACE -lstdc++_libbacktrace\" }\n+// { dg-require-effective-target stacktrace }\n+\n+#include <debug/vector>\n+#include <debug/checks.h>\n+\n+void test01()\n+{\n+  __gnu_test::check_assign1<__gnu_debug::vector<int> >();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}