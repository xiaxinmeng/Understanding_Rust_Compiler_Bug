{"sha": "942fd98f6411e80db60c429d7ec3bae71351fd1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQyZmQ5OGY2NDExZTgwZGI2MGM0MjlkN2VjM2JhZTcxMzUxZmQxYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-02-04T16:40:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-02-04T16:40:30Z"}, "message": "bfin-modes.def, [...]: Follow spelling conventions.\n\n\t* config/bfin/bfin-modes.def, config/bfin/bfin.c,\n\tconfig/bfin/bfin.md, config/bfin/predicates.md: Follow\n\tspelling conventions.\n\nFrom-SVN: r121577", "tree": {"sha": "383df82b791c5a833bd6c640a0e6242ec6cc8241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/383df82b791c5a833bd6c640a0e6242ec6cc8241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/942fd98f6411e80db60c429d7ec3bae71351fd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942fd98f6411e80db60c429d7ec3bae71351fd1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942fd98f6411e80db60c429d7ec3bae71351fd1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942fd98f6411e80db60c429d7ec3bae71351fd1c/comments", "author": null, "committer": null, "parents": [{"sha": "713e3ec92fe123e868f4a7a3ece4f4581106d691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713e3ec92fe123e868f4a7a3ece4f4581106d691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713e3ec92fe123e868f4a7a3ece4f4581106d691"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "50aa8f191dbfb9f19a82b16b345a9ab8d9081e99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=942fd98f6411e80db60c429d7ec3bae71351fd1c", "patch": "@@ -1,3 +1,9 @@\n+2007-02-04  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/bfin/bfin-modes.def, config/bfin/bfin.c,\n+\tconfig/bfin/bfin.md, config/bfin/predicates.md: Follow\n+\tspelling conventions.\n+\n 2007-02-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/30636"}, {"sha": "f39f9bdec6d12f32599d7db3cf5f4bbbd522272c", "filename": "gcc/config/bfin/bfin-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fbfin-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fbfin-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-modes.def?ref=942fd98f6411e80db60c429d7ec3bae71351fd1c", "patch": "@@ -19,7 +19,7 @@\n    Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n    MA 02110-1301, USA.  */\n \n-/* PDImode for the 40 bit accumulators.  */\n+/* PDImode for the 40-bit accumulators.  */\n PARTIAL_INT_MODE (DI);\n \n /* Two of those - covering both accumulators for vector multiplications.  */"}, {"sha": "0d46f61f28700291d7217fff26dfc83b599089b0", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=942fd98f6411e80db60c429d7ec3bae71351fd1c", "patch": "@@ -576,7 +576,7 @@ add_to_reg (rtx reg, HOST_WIDE_INT value, int frame)\n     return;\n \n   /* Choose whether to use a sequence using a temporary register, or\n-     a sequence with multiple adds.  We can add a signed 7 bit value\n+     a sequence with multiple adds.  We can add a signed 7-bit value\n      in one instruction.  */\n   if (value > 120 || value < -120)\n     {\n@@ -1080,7 +1080,7 @@ bfin_delegitimize_address (rtx orig_x)\n \n /* This predicate is used to compute the length of a load/store insn.\n    OP is a MEM rtx, we return nonzero if its addressing mode requires a\n-   32 bit instruction.  */\n+   32-bit instruction.  */\n \n int\n effective_address_32bit_p (rtx op, enum machine_mode mode) \n@@ -1102,7 +1102,7 @@ effective_address_32bit_p (rtx op, enum machine_mode mode)\n \n   offset = INTVAL (XEXP (op, 1));\n \n-  /* All byte loads use a 16 bit offset.  */\n+  /* All byte loads use a 16-bit offset.  */\n   if (GET_MODE_SIZE (mode) == 1)\n     return 1;\n \n@@ -1889,7 +1889,7 @@ hard_regno_mode_ok (int regno, enum machine_mode mode)\n   if (mode == PDImode || mode == V2PDImode)\n     return regno == REG_A0 || regno == REG_A1;\n \n-  /* Allow all normal 32 bit regs, except REG_M3, in case regclass ever comes\n+  /* Allow all normal 32-bit regs, except REG_M3, in case regclass ever comes\n      up with a bad register class (such as ALL_REGS) for DImode.  */\n   if (mode == DImode)\n     return regno < REG_M3;\n@@ -2243,7 +2243,7 @@ bfin_gen_compare (rtx cmp, enum machine_mode mode ATTRIBUTE_UNUSED)\n }\n \f\n /* Return nonzero iff C has exactly one bit set if it is interpreted\n-   as a 32 bit constant.  */\n+   as a 32-bit constant.  */\n \n int\n log2constp (unsigned HOST_WIDE_INT c)\n@@ -3977,7 +3977,7 @@ bfin_reorg (void)\n       schedule_insns ();\n       timevar_pop (TV_SCHED2);\n \n-      /* Examine the schedule and insert nops as necessary for 64 bit parallel\n+      /* Examine the schedule and insert nops as necessary for 64-bit parallel\n \t instructions.  */\n       bfin_gen_bundles ();\n     }"}, {"sha": "8c088f93cafab7bce92c273caf210631fea20adf", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=942fd98f6411e80db60c429d7ec3bae71351fd1c", "patch": "@@ -136,7 +136,7 @@\n    (UNSPEC_MOVE_FDPIC 8)\n    (UNSPEC_FUNCDESC_GOT17M4 9)\n    (UNSPEC_LSETUP_END 10)\n-   ;; Distinguish a 32 bit version of an insn from a 16 bit version.\n+   ;; Distinguish a 32-bit version of an insn from a 16-bit version.\n    (UNSPEC_32BIT 11)])\n \n (define_constants\n@@ -190,7 +190,7 @@\n (define_cpu_unit \"slot2\" \"bfin\")\n \n ;; Three units used to enforce parallel issue restrictions:\n-;; only one of the 16 bit slots can use a P register in an address,\n+;; only one of the 16-bit slots can use a P register in an address,\n ;; and only one them can be a store.\n (define_cpu_unit \"store\" \"bfin\")\n (define_cpu_unit \"pregs\" \"bfin\")\n@@ -2675,7 +2675,7 @@\n   \"\"\n   \"\")\n \n-;; Unusual arithmetic operations on 16 bit registers.\n+;; Unusual arithmetic operations on 16-bit registers.\n \n (define_insn \"ssaddhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n@@ -2883,7 +2883,7 @@\n ;; an unspec with a const_int operand that determines which flag to use in the\n ;; instruction.\n ;; There are variants for single and parallel multiplications.\n-;; There are variants which just use 16 bit lowparts as inputs, and variants\n+;; There are variants which just use 16-bit lowparts as inputs, and variants\n ;; which allow the user to choose just which halves to use as input values.\n ;; There are variants which set D registers, variants which set accumulators,\n ;; variants which set both, some of them optionally using the accumulators as"}, {"sha": "528792cbec90eebb4e4c550997fd859491b94f98", "filename": "gcc/config/bfin/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942fd98f6411e80db60c429d7ec3bae71351fd1c/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fpredicates.md?ref=942fd98f6411e80db60c429d7ec3bae71351fd1c", "patch": "@@ -96,7 +96,7 @@\n   (and (match_code \"reg\")\n        (match_test \"REGNO (op) == REG_LB0 || REGNO (op) == REG_LB1\")))\n \n-;; Return nonzero if OP is a register or a 7 bit signed constant.\n+;; Return nonzero if OP is a register or a 7-bit signed constant.\n (define_predicate \"reg_or_7bit_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_int\")\n@@ -119,7 +119,7 @@\n   (ior (match_operand 0 \"nondp_register_operand\")\n        (match_operand 0 \"memory_operand\")))\n \n-;; Return nonzero if OP is a register or, when negated, a 7 bit signed\n+;; Return nonzero if OP is a register or, when negated, a 7-bit signed\n ;; constant.\n (define_predicate \"reg_or_neg7bit_operand\"\n   (ior (match_operand 0 \"register_operand\")\n@@ -180,7 +180,7 @@\n ;; The following two are used to compute the addrtype attribute.  They return\n ;; true if passed a memory address usable for a 16-bit load or store using a\n ;; P or I register, respectively.  If neither matches, we know we have a\n-;; 32 bit instruction.\n+;; 32-bit instruction.\n (define_predicate \"mem_p_address_operand\"\n   (match_code \"mem\")\n {"}]}