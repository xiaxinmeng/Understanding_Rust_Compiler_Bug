{"sha": "24f161fddabfaae005e73795c676b2701ecbef60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmMTYxZmRkYWJmYWFlMDA1ZTczNzk1YzY3NmIyNzAxZWNiZWY2MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-10-15T10:21:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-10-15T10:21:32Z"}, "message": "tree-loop-distribution.c (build_empty_rdg): Inline into single user.\n\n2013-10-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-loop-distribution.c (build_empty_rdg): Inline into\n\tsingle user.\n\t(rdg_flag_vertex): Inline into single user.\n\t(rdg_flag_vertex_and_dependent): Likewise.\n\t(build_rdg_partition_for_vertex): Remove processed bitmap.\n\t(rdg_build_partitions): Simplify.\n\nFrom-SVN: r203592", "tree": {"sha": "2eefdd78a4b5434027f7a4a95f54d27466ede338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eefdd78a4b5434027f7a4a95f54d27466ede338"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24f161fddabfaae005e73795c676b2701ecbef60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f161fddabfaae005e73795c676b2701ecbef60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f161fddabfaae005e73795c676b2701ecbef60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f161fddabfaae005e73795c676b2701ecbef60/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5de989edfb971e43d009307fc273f0d561f1c50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de989edfb971e43d009307fc273f0d561f1c50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de989edfb971e43d009307fc273f0d561f1c50f"}], "stats": {"total": 94, "additions": 26, "deletions": 68}, "files": [{"sha": "39ea2033092c4a0d69b10c9c07910940746dbf7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f161fddabfaae005e73795c676b2701ecbef60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f161fddabfaae005e73795c676b2701ecbef60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24f161fddabfaae005e73795c676b2701ecbef60", "patch": "@@ -1,3 +1,12 @@\n+2013-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-loop-distribution.c (build_empty_rdg): Inline into\n+\tsingle user.\n+\t(rdg_flag_vertex): Inline into single user.\n+\t(rdg_flag_vertex_and_dependent): Likewise.\n+\t(build_rdg_partition_for_vertex): Remove processed bitmap.\n+\t(rdg_build_partitions): Simplify.\n+\n 2013-10-15  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1):"}, {"sha": "015b50d46c94039399cb8f98531b2146dad5ceb8", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 17, "deletions": 68, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f161fddabfaae005e73795c676b2701ecbef60/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f161fddabfaae005e73795c676b2701ecbef60/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=24f161fddabfaae005e73795c676b2701ecbef60", "patch": "@@ -471,17 +471,6 @@ stmts_from_loop (struct loop *loop, vec<gimple> *stmts)\n   free (bbs);\n }\n \n-/* Build the Reduced Dependence Graph (RDG) with one vertex per\n-   statement of the loop nest, and one edge per data dependence or\n-   scalar dependence.  */\n-\n-struct graph *\n-build_empty_rdg (int n_stmts)\n-{\n-  struct graph *rdg = new_graph (n_stmts);\n-  return rdg;\n-}\n-\n /* Free the reduced dependence graph RDG.  */\n \n static void\n@@ -526,7 +515,7 @@ build_rdg (vec<loop_p> loop_nest, control_dependences *cd)\n   /* Create the RDG vertices from the stmts of the loop nest.  */\n   stmts.create (10);\n   stmts_from_loop (loop_nest[0], &stmts);\n-  rdg = build_empty_rdg (stmts.length ());\n+  rdg = new_graph (stmts.length ());\n   datarefs.create (10);\n   if (!create_rdg_vertices (rdg, stmts, loop_nest[0], &datarefs))\n     {\n@@ -1037,52 +1026,28 @@ generate_code_for_partition (struct loop *loop,\n }\n \n \n-/* Flag V from RDG as part of PARTITION, and also flag its loop number\n-   in LOOPS.  */\n-\n-static void\n-rdg_flag_vertex (struct graph *rdg, int v, partition_t partition)\n-{\n-  struct loop *loop;\n-\n-  if (!bitmap_set_bit (partition->stmts, v))\n-    return;\n-\n-  loop = loop_containing_stmt (RDG_STMT (rdg, v));\n-  bitmap_set_bit (partition->loops, loop->num);\n-}\n-\n-/* Flag in the bitmap PARTITION the vertex V and all its predecessors.\n-   Also flag their loop number in LOOPS.  */\n+/* Returns a partition with all the statements needed for computing\n+   the vertex V of the RDG, also including the loop exit conditions.  */\n \n-static void\n-rdg_flag_vertex_and_dependent (struct graph *rdg, int v, partition_t partition,\n-\t\t\t       bitmap processed)\n+static partition_t\n+build_rdg_partition_for_vertex (struct graph *rdg, int v)\n {\n-  unsigned i;\n+  partition_t partition = partition_alloc (NULL, NULL);\n   vec<int> nodes;\n-  nodes.create (3);\n+  unsigned i;\n   int x;\n \n+  nodes.create (3);\n   graphds_dfs (rdg, &v, 1, &nodes, false, NULL);\n \n   FOR_EACH_VEC_ELT (nodes, i, x)\n-    if (bitmap_set_bit (processed, x))\n-      rdg_flag_vertex (rdg, x, partition);\n+    {\n+      bitmap_set_bit (partition->stmts, x);\n+      bitmap_set_bit (partition->loops,\n+\t\t      loop_containing_stmt (RDG_STMT (rdg, x))->num);\n+    }\n \n   nodes.release ();\n-}\n-\n-/* Returns a partition with all the statements needed for computing\n-   the vertex V of the RDG, also including the loop exit conditions.  */\n-\n-static partition_t\n-build_rdg_partition_for_vertex (struct graph *rdg, int v)\n-{\n-  partition_t partition = partition_alloc (NULL, NULL);\n-  bitmap processed = BITMAP_ALLOC (NULL);\n-  rdg_flag_vertex_and_dependent (rdg, v, partition, processed);\n-  BITMAP_FREE (processed);\n   return partition;\n }\n \n@@ -1318,24 +1283,22 @@ rdg_build_partitions (struct graph *rdg,\n   bitmap processed = BITMAP_ALLOC (NULL);\n   int i;\n   gimple stmt;\n-  partition_t partition = partition_alloc (NULL, NULL);\n \n   FOR_EACH_VEC_ELT (starting_stmts, i, stmt)\n     {\n-      partition_t np;\n       int v = rdg_vertex_for_stmt (rdg, stmt);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n \t\t \"ldist asked to generate code for vertex %d\\n\", v);\n \n+      /* If the vertex is already contained in another partition so\n+         is the partition rooted at it.  */\n       if (bitmap_bit_p (processed, v))\n \tcontinue;\n \n-      np = build_rdg_partition_for_vertex (rdg, v);\n-      bitmap_ior_into (partition->stmts, np->stmts);\n-      bitmap_ior_into (processed, np->stmts);\n-      partition_free (np);\n+      partition_t partition = build_rdg_partition_for_vertex (rdg, v);\n+      bitmap_ior_into (processed, partition->stmts);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n@@ -1344,25 +1307,11 @@ rdg_build_partitions (struct graph *rdg,\n \t}\n \n       partitions->safe_push (partition);\n-      partition = partition_alloc (NULL, NULL);\n     }\n \n   /* All vertices should have been assigned to at least one partition now,\n      other than vertices belonging to dead code.  */\n \n-  if (!bitmap_empty_p (partition->stmts))\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"remaining partition:\\n\");\n-\t  dump_bitmap (dump_file, partition->stmts);\n-\t}\n-\n-      partitions->safe_push (partition);\n-    }\n-  else\n-    partition_free (partition);\n-\n   BITMAP_FREE (processed);\n }\n "}]}