{"sha": "19684119cb5f6d504f067b87bfbf6cac1b3b9196", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2ODQxMTljYjVmNmQ1MDRmMDY3Yjg3YmZiZjZjYWMxYjNiOTE5Ng==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1999-01-15T22:40:37Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-01-15T22:40:37Z"}, "message": "rs6000.h (CONST_OK_FOR_LETTER_P): Do not assume 32-bit CONST_INT.\n\n        * rs6000.h (CONST_OK_FOR_LETTER_P): Do not assume 32-bit CONST_INT.\n        * rs6000.c (u_short_cint_operand, add_operand, logical_operand,\n        non_add_cint_operand, non_logical_cint_operand): Likewise.\n        (get_issue_rate): Add CPU_PPC604E case.\n        * rs6000.md (movdi, !TARGET_POWERPC64 splitters): Handle 64-bit hosts.\n\nFrom-SVN: r24689", "tree": {"sha": "467681d1933cca6997076465e6b5dc18decd3a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467681d1933cca6997076465e6b5dc18decd3a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19684119cb5f6d504f067b87bfbf6cac1b3b9196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19684119cb5f6d504f067b87bfbf6cac1b3b9196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19684119cb5f6d504f067b87bfbf6cac1b3b9196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19684119cb5f6d504f067b87bfbf6cac1b3b9196/comments", "author": null, "committer": null, "parents": [{"sha": "5a86d174cb75ade697651a3a9557b254b266acc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a86d174cb75ade697651a3a9557b254b266acc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a86d174cb75ade697651a3a9557b254b266acc4"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "2d7ed38b7375094a097fc19c6678503bd1527c73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19684119cb5f6d504f067b87bfbf6cac1b3b9196", "patch": "@@ -1,3 +1,11 @@\n+Fri Jan 15 22:30:04 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.h (CONST_OK_FOR_LETTER_P): Do not assume 32-bit CONST_INT.\n+\t* rs6000.c (u_short_cint_operand, add_operand, logical_operand,\n+\tnon_add_cint_operand, non_logical_cint_operand): Likewise.\n+\t(get_issue_rate): Add CPU_PPC604E case.\n+\t* rs6000.md (movdi, !TARGET_POWERPC64 splitters): Handle 64-bit hosts.\n+\t\n Fri Jan 15 18:42:12 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* expr.c (queued_subexp_p): Make public."}, {"sha": "e2104c487db4f4104210495654f1abb29744b8d1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=19684119cb5f6d504f067b87bfbf6cac1b3b9196", "patch": "@@ -507,8 +507,8 @@ u_short_cint_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return ((GET_CODE (op) == CONST_INT\n-\t   && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0));\n+  return (GET_CODE (op) == CONST_INT\n+\t   && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0);\n }\n \n /* Return 1 if OP is a CONST_INT that cannot fit in a signed D field.  */\n@@ -854,7 +854,8 @@ add_operand (op, mode)\n     enum machine_mode mode;\n {\n   return (reg_or_short_operand (op, mode)\n-\t  || (GET_CODE (op) == CONST_INT && (INTVAL (op) & 0xffff) == 0));\n+\t  || (GET_CODE (op) == CONST_INT\n+\t      && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) == 0));\n }\n \n /* Return 1 if OP is a constant but not a valid add_operand.  */\n@@ -866,7 +867,7 @@ non_add_cint_operand (op, mode)\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) >= 0x10000\n-\t  && (INTVAL (op) & 0xffff) != 0);\n+\t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) != 0);\n }\n \n /* Return 1 if the operand is a non-special register or a constant that\n@@ -880,7 +881,7 @@ logical_operand (op, mode)\n   return (gpc_reg_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n \t      && ((INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0\n-\t\t  || (INTVAL (op) & 0xffff) == 0)));\n+\t\t  || (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) == 0)));\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n@@ -893,7 +894,7 @@ non_logical_cint_operand (op, mode)\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) != 0\n-\t  && (INTVAL (op) & 0xffff) != 0);\n+\t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) != 0);\n }\n \n /* Return 1 if C is a constant that can be encoded in a mask on the\n@@ -5132,14 +5133,15 @@ int get_issue_rate()\n     return 2; \n   case CPU_PPC604:\n     return 4;\n+  case CPU_PPC604E:\n+    return 4;\n   case CPU_PPC620:\n     return 4;\n   default:\n     return 1;\n   }\n }\n \n-\n \f\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts."}, {"sha": "8d90b99c01d55bfa1886b8e0bd438ebed9690e8c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=19684119cb5f6d504f067b87bfbf6cac1b3b9196", "patch": "@@ -1075,7 +1075,7 @@ enum reg_class\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n    ( (C) == 'I' ? (unsigned HOST_WIDE_INT) ((VALUE) + 0x8000) < 0x10000\t\\\n-   : (C) == 'J' ? ((VALUE) & 0xffff) == 0\t\t\t\t\\\n+   : (C) == 'J' ? ((VALUE) & (~ (HOST_WIDE_INT) 0xffff0000)) == 0\t\\\n    : (C) == 'K' ? ((VALUE) & (~ (HOST_WIDE_INT) 0xffff)) == 0\t\t\\\n    : (C) == 'L' ? mask_constant (VALUE)\t\t\t\t\t\\\n    : (C) == 'M' ? (VALUE) > 31\t\t\t\t\t\t\\"}, {"sha": "326eab7fc3633d9623de35daffe9fa43e6b91421", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19684119cb5f6d504f067b87bfbf6cac1b3b9196/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=19684119cb5f6d504f067b87bfbf6cac1b3b9196", "patch": "@@ -6127,13 +6127,18 @@\n {\n   operands[2] = gen_rtx_SUBREG (SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx_SUBREG (SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n+#if HOST_BITS_PER_WIDE_INT == 32\n   operands[4] = (INTVAL (operands[1]) & 0x80000000) ? constm1_rtx : const0_rtx;\n+#else\n+  operands[4] = (HOST_WIDE_INT) INTVAL (operands[1]) >> 32;\n+  operands[1] = INTVAL (operands[1]) & 0xffffffff;\n+#endif\n }\")\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_operand:DI 1 \"const_double_operand\" \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"HOST_BITS_PER_WIDE_INT == 32 && ! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 2) (match_dup 4))\n    (set (match_dup 3) (match_dup 5))]\n   \""}]}