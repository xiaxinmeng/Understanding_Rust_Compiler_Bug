{"sha": "ec24698eaae0dd99f221f4d51ef642742dbe7a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyNDY5OGVhYWUwZGQ5OWYyMjFmNGQ1MWVmNjQyNzQyZGJlN2E3OA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-08-17T11:11:05Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2005-08-17T11:11:05Z"}, "message": "config.gcc: Added z9-109 switch.\n\n2005-08-16  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n\t    Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config.gcc: Added z9-109 switch.\n\t* config/s390/2084.md (\"x_int\", \"x_agen\", \"x_lr\", \"x_la\", \"x_larl\",\n\t\"x_load\", \"x_store\", \"x_branch\", \"x_call\", \"x_mul_hi\", \"x_mul_sidi\",\n\t\"x_div\", \"x_sem\", \"x_cs\", \"x_vs\", \"x_stm\", \"x_lm\", \"x_other\",\n\t\"x_fsimpdf\", \"x_fsimpsf\", \"x_fdivdf\", \"x_fdivsf\", \"x_floaddf\",\n\t\"x_floadsf\", \"x_fstore_df\", \"x_fstoresf\", \"x_ftoi\", \"x_itof\"): Enable\n\tfor \"z9_109\" cpu attribute.\n\t* config/s390/s390.c (z9_109_cost): New processor cost structure.\n\t(CONST_OK_FOR_Os, CONST_OK_FOR_Op, CONST_OK_FOR_On): New macros.\n\t(s390_handle_arch_option): Added z9-109 switch.\n\t(override_options): Set respective cost function for z9-109.\n\t(s390_const_ok_for_constraint_p): New constraints Os, Op, On.\n\t(legitimate_reload_constant_p): Accept extended immediates.\n\t(print_operand): Three new output modifiers added: k, m and o.\n\t(s390_adjust_priority, s390_issue_rate): Handle Z9_109 like Z990.\n\t(s390_output_mi_thunk): Use extended immediate when possible.\n\t* config/s390/s390.h (processor_flags): Added PF_EXTIMM.\n\t(TARGET_CPU_EXTIMM, TARGET_EXTIMM): New macros.\n\t(CONSTRAINT_LEN): Added length of O constraint.\n\t(CLZ_DEFINED_VALUE_AT_ZERO): Definition added.\n\t* config/s390/s390.md (\"cpu\"): New value z9_109 added.\n\t(\"*tstdi_extimm\", \"*tstdi_ccconly_extimm\", \"*tstsi_extimm\",\n\t\"*tstsi_cconly_extimm\", \"*movdi_64extimm\", \"*extendhidi2_extimm\",\n\t\"*extendqidi2_extimm\", \"*extendhisi2_extimm\", \"*extendqisi2_extimm\",\n\t\"*zero_extend<mode>si2_extimm\", \"*anddi3_extimm\", \"*iordi3_extimm\",\n\t\"*xordi3_extimm\", \"clzdi2\", \"clztidi2\"): New patterns.\n\t(\"*tstdi\", \"*tstsi\", \"*movdi_64\", \"*extendhisi2\", \"*extendqisi2\",\n\t\"*zero_extend<mode>si2_64\", \"zero_extendqihi2\", \"*zero_extendqihi2_64\",\n\t\"*anddi3\", \"*iordi3\", \"*xordi3\"): Disable for TARGET_EXTIMM.\n\t(\"*cmpdi_cct\", \"*cmpsi_cct\", \"*cmpdi_ccs\", \"*cmpsi_ccs\", \"*cmpdi_ccu\",\n\t\"*cmpsi_ccu\", \"*movsi_zarch\", \"*adddi3_imm_cc\", \"*adddi3_carry1_cc\",\n\t\"*adddi3_carry2_cc\", \"*adddi3_cc\", \"*adddi3_64\", \"*addsi3_imm_cc\",\n\t\"*addsi3_carry1_cc\", \"*addsi3_carry2_cc\", \"*addsi3_cc\", \"addsi3\",\n\t\"*andsi3_cc\", \"*andsi3_cconly\", \"*andsi3_zarch\", \"*iorsi3_cc\",\n\t\"*iorsi3_cconly\", \"*iorsi3_zarch\", \"*xorsi3_cc\", \"*xorsi3_cconly\",\n\t\"*xorsi3\", \"*xorhi3\", \"*xorqi3\"): Added instruction using extended\n\timmediates.\n\t(\"extend<mode>di2\", \"extend<mode>si2\", \"zero_extend<mode>di2\",\n\t\"zero_extend<mode>si2\"): Allow memory operands and don't manually emit\n\tinsns for TARGET_EXTIMM.\n\nFrom-SVN: r103211", "tree": {"sha": "1a602b97f822cf102a41ae8cf84259dd8806cfda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a602b97f822cf102a41ae8cf84259dd8806cfda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec24698eaae0dd99f221f4d51ef642742dbe7a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec24698eaae0dd99f221f4d51ef642742dbe7a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec24698eaae0dd99f221f4d51ef642742dbe7a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec24698eaae0dd99f221f4d51ef642742dbe7a78/comments", "author": null, "committer": null, "parents": [{"sha": "33d2e547c2dbaceff17bd0e96d8016ee29effb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d2e547c2dbaceff17bd0e96d8016ee29effb04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d2e547c2dbaceff17bd0e96d8016ee29effb04"}], "stats": {"total": 781, "additions": 578, "deletions": 203}, "files": [{"sha": "31d505985c838b746e0c0079741e7f9ad8e7371c", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ec24698eaae0dd99f221f4d51ef642742dbe7a78", "patch": "@@ -2657,7 +2657,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | g5 | g6 | z900 | z990)\n+\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "be56f76ad146045892cf7178e542cb92784dff5d", "filename": "gcc/config/s390/2084.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2F2084.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2F2084.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2084.md?ref=ec24698eaae0dd99f221f4d51ef642742dbe7a78", "patch": "@@ -62,69 +62,69 @@\n ;;\n \n (define_insn_reservation \"x_int\" 1\n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (and (eq_attr \"type\" \"integer\")\n             (eq_attr \"atype\" \"reg\")))\n   \"x-e1-st,x-wr-st\")\n \n (define_insn_reservation \"x_agen\" 1\n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (and (eq_attr \"type\" \"integer\")\n             (eq_attr \"atype\" \"agen\")))\n   \"x-e1-st,x-wr-st\")\n \n (define_insn_reservation \"x_lr\" 1\n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"lr\"))\n   \"x-e1-st,x-wr-st\") \n \n (define_insn_reservation \"x_la\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"la\"))\n   \"x-e1-st,x-wr-st\") \n \n (define_insn_reservation \"x_larl\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"larl\"))\n   \"x-e1-st,x-wr-st\") \n \n (define_insn_reservation \"x_load\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"load\"))\n   \"x-e1-st+x-mem,x-wr-st\") \n \n (define_insn_reservation \"x_store\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"store\"))\n   \"x-e1-st+x_store_tok,x-wr-st\") \n \n (define_insn_reservation \"x_branch\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"branch\"))\n   \"x_e1_r,x_wr_r\") \n \n (define_insn_reservation \"x_call\" 5 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"jsr\"))\n   \"x-e1-np*5,x-wr-np\")\n  \n (define_insn_reservation \"x_mul_hi\" 2\n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"imulhi\"))\n   \"x-e1-np*2,x-wr-np\")\n \n (define_insn_reservation \"x_mul_sidi\" 4\n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"imulsi,imuldi\"))\n   \"x-e1-np*4,x-wr-np\")\n \n (define_insn_reservation \"x_div\" 10\n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"idiv\"))\n   \"x-e1-np*10,x-wr-np\")\n \n (define_insn_reservation \"x_sem\" 17 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"sem\"))\n   \"x-e1-np+x-mem,x-e1-np*16,x-wr-st\") \n \n@@ -133,27 +133,27 @@\n ;;\n \n (define_insn_reservation \"x_cs\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"cs\"))\n   \"x-e1-np,x-wr-np\") \n \n (define_insn_reservation \"x_vs\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"vs\"))\n   \"x-e1-np*10,x-wr-np\") \n \n (define_insn_reservation \"x_stm\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"stm\"))\n   \"(x-e1-np+x_store_tok)*10,x-wr-np\") \n \n (define_insn_reservation \"x_lm\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"lm\"))\n   \"x-e1-np*10,x-wr-np\") \n \n (define_insn_reservation \"x_other\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"other\"))\n   \"x-e1-np,x-wr-np\") \n \n@@ -162,52 +162,52 @@\n ;;\n \n (define_insn_reservation \"x_fsimpdf\" 6 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"fsimpdf,fmuldf\"))\n   \"x_e1_t,x-wr-fp\") \n \n (define_insn_reservation \"x_fsimpsf\" 6 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"fsimpsf,fmulsf\"))\n   \"x_e1_t,x-wr-fp\") \n \n (define_insn_reservation \"x_fdivdf\" 36\n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"fdivdf,fsqrtdf\"))\n   \"x_e1_t*30,x-wr-fp\") \n \n (define_insn_reservation \"x_fdivsf\" 36 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"fdivsf,fsqrtsf\"))\n   \"x_e1_t*30,x-wr-fp\") \n \n (define_insn_reservation \"x_floaddf\" 6 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"floaddf\"))\n   \"x_e1_t,x-wr-fp\") \n \n (define_insn_reservation \"x_floadsf\" 6 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"floadsf\"))\n   \"x_e1_t,x-wr-fp\") \n \n (define_insn_reservation \"x_fstoredf\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"fstoredf\"))\n   \"x_e1_t,x-wr-fp\") \n \n (define_insn_reservation \"x_fstoresf\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"fstoresf\"))\n   \"x_e1_t,x-wr-fp\") \n \n (define_insn_reservation \"x_ftoi\" 1 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"ftoi\"))\n   \"x_e1_t*3,x-wr-fp\") \n \n (define_insn_reservation \"x_itof\" 7 \n-  (and (eq_attr \"cpu\" \"z990\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109\")\n        (eq_attr \"type\" \"itof\"))\n   \"x_e1_t*3,x-wr-fp\") \n "}, {"sha": "0dea709faff991a34825fc1baa65ad934a75e795", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 108, "deletions": 12, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ec24698eaae0dd99f221f4d51ef642742dbe7a78", "patch": "@@ -153,6 +153,36 @@ struct processor_costs z990_cost =\n   COSTS_N_INSNS (31),    /* DSGR */\n };\n \n+static const\n+struct processor_costs z9_109_cost = \n+{\n+  COSTS_N_INSNS (4),     /* M     */\n+  COSTS_N_INSNS (2),     /* MGHI  */\n+  COSTS_N_INSNS (2),     /* MH    */\n+  COSTS_N_INSNS (2),     /* MHI   */\n+  COSTS_N_INSNS (4),     /* ML    */\n+  COSTS_N_INSNS (4),     /* MR    */\n+  COSTS_N_INSNS (5),     /* MS    */\n+  COSTS_N_INSNS (6),     /* MSG   */\n+  COSTS_N_INSNS (4),     /* MSGF  */\n+  COSTS_N_INSNS (4),     /* MSGFR */\n+  COSTS_N_INSNS (4),     /* MSGR  */\n+  COSTS_N_INSNS (4),     /* MSR   */\n+  COSTS_N_INSNS (1),     /* multiplication in DFmode */\n+  COSTS_N_INSNS (66),    /* SQDBR */\n+  COSTS_N_INSNS (38),    /* SQEBR */\n+  COSTS_N_INSNS (1),     /* MADBR */\n+  COSTS_N_INSNS (1),     /* MAEBR */\n+  COSTS_N_INSNS (40),    /* DDBR */\n+  COSTS_N_INSNS (37),    /* DDR  */\n+  COSTS_N_INSNS (26),    /* DDBR */\n+  COSTS_N_INSNS (28),    /* DER  */\n+  COSTS_N_INSNS (30),    /* DLGR */\n+  COSTS_N_INSNS (23),    /* DLR */\n+  COSTS_N_INSNS (23),    /* DR */\n+  COSTS_N_INSNS (24),    /* DSGFR */\n+  COSTS_N_INSNS (24),    /* DSGR */\n+};\n \n extern int reload_completed;\n \n@@ -272,6 +302,12 @@ struct machine_function GTY(())\n \tCONST_OK_FOR_CONSTRAINT_P((x), 'J', \"J\")\n #define CONST_OK_FOR_K(x) \\\n \tCONST_OK_FOR_CONSTRAINT_P((x), 'K', \"K\")\n+#define CONST_OK_FOR_Os(x) \\\n+        CONST_OK_FOR_CONSTRAINT_P((x), 'O', \"Os\")\n+#define CONST_OK_FOR_Op(x) \\\n+        CONST_OK_FOR_CONSTRAINT_P((x), 'O', \"Op\")\n+#define CONST_OK_FOR_On(x) \\\n+        CONST_OK_FOR_CONSTRAINT_P((x), 'O', \"On\")\n \n /* Set the has_landing_pad_p flag in struct machine_function to VALUE.  */\n \n@@ -1207,6 +1243,8 @@ s390_handle_arch_option (const char *arg,\n       {\"z900\", PROCESSOR_2064_Z900, PF_IEEE_FLOAT | PF_ZARCH},\n       {\"z990\", PROCESSOR_2084_Z990, PF_IEEE_FLOAT | PF_ZARCH\n \t\t\t\t    | PF_LONG_DISPLACEMENT},\n+      {\"z9-109\", PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n+                                       | PF_LONG_DISPLACEMENT | PF_EXTIMM},\n     };\n   size_t i;\n \n@@ -1293,14 +1331,14 @@ override_options (void)\n   if (TARGET_64BIT && !TARGET_ZARCH)\n     error (\"64-bit ABI not supported in ESA/390 mode\");\n \n-\n   /* Set processor cost function.  */\n-  if (s390_tune == PROCESSOR_2084_Z990) \n+  if (s390_tune == PROCESSOR_2094_Z9_109)\n+    s390_cost = &z9_109_cost;\n+  else if (s390_tune == PROCESSOR_2084_Z990)\n     s390_cost = &z990_cost;\n   else\n     s390_cost = &z900_cost;\n-\n-\n+  \n   if (TARGET_BACKCHAIN && TARGET_PACKED_STACK && TARGET_HARD_FLOAT)\n     error (\"-mbackchain -mpacked-stack -mhard-float are not supported \"\n \t   \"in combination\");\n@@ -1876,6 +1914,28 @@ s390_const_ok_for_constraint_p (HOST_WIDE_INT value,\n \n       break;\n \n+    case 'O':\n+      if (!TARGET_EXTIMM)\n+\treturn 0;\n+      \n+      switch (str[1])\n+\t{\n+\tcase 's':\n+\t  return trunc_int_for_mode (value, SImode) == value;\n+\t  \n+\tcase 'p':\n+\t  return value == 0\n+\t    || s390_single_part (GEN_INT (value), DImode, SImode, 0) == 1;\n+\t  \n+\tcase 'n':\n+\t  return value == -1\n+\t    || s390_single_part (GEN_INT (value), DImode, SImode, -1) == 1;\n+\t  \n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n+\n     case 'P':\n       return legitimate_reload_constant_p (GEN_INT (value));\n \n@@ -2307,9 +2367,9 @@ legitimate_reload_constant_p (rtx op)\n       && DISP_IN_RANGE (INTVAL (op)))\n     return true;\n \n-  /* Accept l(g)hi operands.  */\n+  /* Accept l(g)hi/l(g)fi operands.  */\n   if (GET_CODE (op) == CONST_INT\n-      && CONST_OK_FOR_K (INTVAL (op)))\n+      && (CONST_OK_FOR_K (INTVAL (op)) || CONST_OK_FOR_Os (INTVAL (op))))\n     return true;\n \n   /* Accept lliXX operands.  */\n@@ -2319,6 +2379,12 @@ legitimate_reload_constant_p (rtx op)\n       && s390_single_part (op, word_mode, HImode, 0) >= 0)\n   return true;\n \n+  if (TARGET_EXTIMM\n+      && GET_CODE (op) == CONST_INT\n+      && trunc_int_for_mode (INTVAL (op), word_mode) == INTVAL (op)\n+      && s390_single_part (op, word_mode, SImode, 0) >= 0)\n+    return true;\n+\n   /* Accept larl operands.  */\n   if (TARGET_CPU_ZARCH\n       && larl_operand (op, VOIDmode))\n@@ -4115,6 +4181,14 @@ print_operand (FILE *file, rtx x, int code)\n       else if (code == 'j')\n \tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n \t\t s390_extract_part (x, HImode, -1));\n+      else if (code == 'k')\n+ \tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+ \t\t s390_extract_part (x, SImode, 0));\n+      else if (code == 'm')\n+ \tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+ \t\t s390_extract_part (x, SImode, -1));\n+      else if (code == 'o')\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) & 0xffffffff);\n       else\n         fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n       break;\n@@ -4270,7 +4344,8 @@ s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n   if (! INSN_P (insn))\n     return priority;\n \n-  if (s390_tune != PROCESSOR_2084_Z990)\n+  if (s390_tune != PROCESSOR_2084_Z990\n+      && s390_tune != PROCESSOR_2094_Z9_109)\n     return priority;\n \n   switch (s390_safe_attr_type (insn))\n@@ -4294,7 +4369,8 @@ s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n static int\n s390_issue_rate (void)\n {\n-  if (s390_tune == PROCESSOR_2084_Z990)\n+  if (s390_tune == PROCESSOR_2084_Z990\n+      || s390_tune == PROCESSOR_2094_Z9_109)\n     return 3;\n   return 1;\n }\n@@ -7717,9 +7793,11 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n     {\n       /* Setup literal pool pointer if required.  */\n       if ((!DISP_IN_RANGE (delta)\n-\t   && !CONST_OK_FOR_K (delta))\n+\t   && !CONST_OK_FOR_K (delta)\n+\t   && !CONST_OK_FOR_Os (delta))\n \t  || (!DISP_IN_RANGE (vcall_offset)\n-\t      && !CONST_OK_FOR_K (vcall_offset)))\n+\t      && !CONST_OK_FOR_K (vcall_offset)\n+\t      && !CONST_OK_FOR_Os (vcall_offset)))\n \t{\n \t  op[5] = gen_label_rtx ();\n \t  output_asm_insn (\"larl\\t%4,%5\", op);\n@@ -7734,6 +7812,8 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t    output_asm_insn (\"lay\\t%1,%2(%1)\", op);\n \t  else if (CONST_OK_FOR_K (delta))\n \t    output_asm_insn (\"aghi\\t%1,%2\", op);\n+ \t  else if (CONST_OK_FOR_Os (delta))\n+ \t    output_asm_insn (\"agfi\\t%1,%2\", op);\n \t  else\n \t    {\n \t      op[6] = gen_label_rtx ();\n@@ -7755,6 +7835,12 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t      output_asm_insn (\"ag\\t%4,0(%1)\", op);\n \t      output_asm_insn (\"ag\\t%1,0(%4)\", op);\n \t    }\n+ \t  else if (CONST_OK_FOR_Os (vcall_offset))\n+ \t    {\n+ \t      output_asm_insn (\"lgfi\\t%4,%3\", op);\n+ \t      output_asm_insn (\"ag\\t%4,0(%1)\", op);\n+ \t      output_asm_insn (\"ag\\t%1,0(%4)\", op);\n+ \t    }\n \t  else\n \t    {\n \t      op[7] = gen_label_rtx ();\n@@ -7792,9 +7878,11 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       /* Setup base pointer if required.  */\n       if (!vcall_offset\n \t  || (!DISP_IN_RANGE (delta)\n-              && !CONST_OK_FOR_K (delta))\n+              && !CONST_OK_FOR_K (delta)\n+\t      && !CONST_OK_FOR_Os (delta))\n \t  || (!DISP_IN_RANGE (delta)\n-              && !CONST_OK_FOR_K (vcall_offset)))\n+              && !CONST_OK_FOR_K (vcall_offset)\n+\t      && !CONST_OK_FOR_Os (vcall_offset)))\n \t{\n \t  op[5] = gen_label_rtx ();\n \t  output_asm_insn (\"basr\\t%4,0\", op);\n@@ -7811,6 +7899,8 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t    output_asm_insn (\"lay\\t%1,%2(%1)\", op);\n \t  else if (CONST_OK_FOR_K (delta))\n \t    output_asm_insn (\"ahi\\t%1,%2\", op);\n+\t  else if (CONST_OK_FOR_Os (delta))\n+ \t    output_asm_insn (\"afi\\t%1,%2\", op);\n \t  else\n \t    {\n \t      op[6] = gen_label_rtx ();\n@@ -7837,6 +7927,12 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t      output_asm_insn (\"a\\t%4,0(%1)\", op);\n \t      output_asm_insn (\"a\\t%1,0(%4)\", op);\n \t    }\n+\t  else if (CONST_OK_FOR_Os (vcall_offset))\n+ \t    {\n+ \t      output_asm_insn (\"iilf\\t%4,%3\", op);\n+ \t      output_asm_insn (\"a\\t%4,0(%1)\", op);\n+ \t      output_asm_insn (\"a\\t%1,0(%4)\", op);\n+ \t    }\n \t  else\n \t    {\n \t      op[7] = gen_label_rtx ();"}, {"sha": "af740baa8740c1fabf143750ec9400497b3ab496", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=ec24698eaae0dd99f221f4d51ef642742dbe7a78", "patch": "@@ -40,6 +40,7 @@ enum processor_type\n   PROCESSOR_9672_G6,\n   PROCESSOR_2064_Z900,\n   PROCESSOR_2084_Z990,\n+  PROCESSOR_2094_Z9_109,\n   PROCESSOR_max\n };\n \n@@ -49,7 +50,8 @@ enum processor_flags\n {\n   PF_IEEE_FLOAT = 1,\n   PF_ZARCH = 2,\n-  PF_LONG_DISPLACEMENT = 4\n+  PF_LONG_DISPLACEMENT = 4,\n+  PF_EXTIMM = 8\n };\n \n extern enum processor_type s390_tune;\n@@ -64,10 +66,13 @@ extern enum processor_flags s390_arch_flags;\n \t(s390_arch_flags & PF_ZARCH)\n #define TARGET_CPU_LONG_DISPLACEMENT \\\n \t(s390_arch_flags & PF_LONG_DISPLACEMENT)\n+#define TARGET_CPU_EXTIMM \\\n+ \t(s390_arch_flags & PF_EXTIMM)\n \n #define TARGET_LONG_DISPLACEMENT \\\n        (TARGET_ZARCH && TARGET_CPU_LONG_DISPLACEMENT)\n-\n+#define TARGET_EXTIMM \\\n+       (TARGET_ZARCH && TARGET_CPU_EXTIMM)\n \n /* Run-time target specification.  */\n \n@@ -501,7 +506,8 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n   ((C) == 'U' || (C) == 'W' || (C) == 'Y')\n \n #define CONSTRAINT_LEN(C, STR)                                  \t\\\n-  ((C) == 'N' ? 5 : \t\t\t\t\t\t\t\\\n+  ((C) == 'N' ? 5 : \t                                                \\\n+   (C) == 'O' ? 2 :\t\t\t\t\t\t\t\\\n    (C) == 'A' ? 2 :\t\t\t\t\t\t\t\\\n    (C) == 'B' ? 2 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n \n@@ -980,6 +986,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    indexing purposes) so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \n+/* Specify the value which is used when clz operand is zero.  */\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 64, 1)\n+\n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_ALIGN1\t(SYMBOL_FLAG_MACH_DEP << 0)\n "}, {"sha": "e4d7097606bab969db1782b75a194bf578564ca5", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 429, "deletions": 159, "changes": 588, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec24698eaae0dd99f221f4d51ef642742dbe7a78/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=ec24698eaae0dd99f221f4d51ef642742dbe7a78", "patch": "@@ -47,6 +47,12 @@\n ;;         has a value different from its other parts.  If the letter x\n ;;         is specified instead of a part number, the constraint matches\n ;;         if there is any single part with non-default value.\n+;;    O -- Multiple letter constraint followed by 1 parameter.\n+;;         s:  Signed extended immediate value (-2G .. 2G-1).\n+;;         p:  Positive extended immediate value (0 .. 4G-1).\n+;;         n:  Negative extended immediate value (-4G .. -1).\n+;;         These constraints do not accept any operand if the machine does\n+;;         not provide the extended-immediate facility.\n ;;    P -- Any integer constant that can be loaded without literal pool.\n ;;    Q -- Memory reference without index register and with short displacement.\n ;;    R -- Memory reference with index register and short displacement.\n@@ -249,7 +255,7 @@\n ;; distinguish between g5 and g6, but there are differences between the two\n ;; CPUs could in theory be modeled.\n \n-(define_attr \"cpu\" \"g5,g6,z900,z990\"\n+(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109\"\n   (const (symbol_ref \"s390_tune\")))\n \n ;; Pipeline description for z900.  For lack of anything better,\n@@ -438,13 +444,36 @@\n   \"ltgfr\\t%2,%0\"\n   [(set_attr \"op_type\" \"RRE\")])\n \n+(define_insn \"*tstdi_extimm\"\n+  [(set (reg CC_REGNUM)\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,m\")\n+                 (match_operand:DI 1 \"const0_operand\" \"\")))\n+   (set (match_operand:DI 2 \"register_operand\" \"=d,d\")\n+        (match_dup 0))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT && TARGET_EXTIMM\"\n+  \"@\n+   ltgr\\t%2,%0\n+   ltg\\t%2,%0\"\n+  [(set_attr \"op_type\" \"RRE,RXY\")])\n+\n+(define_insn \"*tstdi_cconly_extimm\"\n+  [(set (reg CC_REGNUM)\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,m\")\n+                 (match_operand:DI 1 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:DI 2 \"=X,d\"))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT && TARGET_EXTIMM\"\n+  \"@\n+   ltgr\\t%0,%0\n+   ltg\\t%2,%0\"\n+  [(set_attr \"op_type\" \"RRE,RXY\")])\n+\n (define_insn \"*tstdi\"\n   [(set (reg CC_REGNUM)\n         (compare (match_operand:DI 0 \"register_operand\" \"d\")\n                  (match_operand:DI 1 \"const0_operand\" \"\")))\n    (set (match_operand:DI 2 \"register_operand\" \"=d\")\n         (match_dup 0))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT && !TARGET_EXTIMM\"\n   \"ltgr\\t%2,%0\"\n   [(set_attr \"op_type\" \"RRE\")])\n \n@@ -465,14 +494,36 @@\n   [(set_attr \"op_type\" \"RS\")\n    (set_attr \"atype\"   \"reg\")])\n \n+(define_insn \"*tstsi_extimm\"\n+  [(set (reg CC_REGNUM)\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,m\")\n+                 (match_operand:SI 1 \"const0_operand\" \"\")))\n+   (set (match_operand:SI 2 \"register_operand\" \"=d,d\")\n+        (match_dup 0))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_EXTIMM\"\n+  \"@\n+   ltr\\t%2,%0\n+   lt\\t%2,%0\"\n+  [(set_attr \"op_type\" \"RR,RXY\")])\n+\n+(define_insn \"*tstsi_cconly_extimm\"\n+  [(set (reg CC_REGNUM)\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,m\")\n+                 (match_operand:SI 1 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:SI 2 \"=X,d\"))]\n+  \"s390_match_ccmode(insn, CCSmode) && TARGET_EXTIMM\"\n+  \"@\n+   ltr\\t%0,%0\n+   lt\\t%2,%0\"\n+  [(set_attr \"op_type\" \"RR,RXY\")])\n \n (define_insn \"*tstsi\"\n   [(set (reg CC_REGNUM)\n         (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,Q,S\")\n                  (match_operand:SI 1 \"const0_operand\" \"\")))\n    (set (match_operand:SI 2 \"register_operand\" \"=d,d,d\")\n         (match_dup 0))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"s390_match_ccmode(insn, CCSmode) && !TARGET_EXTIMM\"\n   \"@\n    ltr\\t%2,%0\n    icm\\t%2,15,%S0\n@@ -563,28 +614,30 @@\n \n (define_insn \"*cmpdi_cct\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"%d,d,d,Q\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,K,m,BQ\")))]\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"%d,d,d,d,Q\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,K,Os,m,BQ\")))]\n   \"s390_match_ccmode (insn, CCTmode) && TARGET_64BIT\"\n   \"@\n    cgr\\t%0,%1\n    cghi\\t%0,%h1\n+   cgfi\\t%0,%1\n    cg\\t%0,%1\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RI,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RRE,RI,RIL,RXY,SS\")])\n \n (define_insn \"*cmpsi_cct\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"%d,d,d,d,Q\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,K,R,T,BQ\")))]\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"%d,d,d,d,d,Q\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,K,Os,R,T,BQ\")))]\n   \"s390_match_ccmode (insn, CCTmode)\"\n   \"@\n    cr\\t%0,%1\n    chi\\t%0,%h1\n+   cfi\\t%0,%1\n    c\\t%0,%1\n    cy\\t%0,%1\n    #\"\n-  [(set_attr \"op_type\" \"RR,RI,RX,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RR,RI,RIL,RX,RXY,SS\")])\n \n \n ; Compare (signed) instructions\n@@ -601,14 +654,15 @@\n \n (define_insn \"*cmpdi_ccs\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:DI 0 \"register_operand\" \"d,d,d\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,K,m\")))]\n+\t(compare (match_operand:DI 0 \"register_operand\" \"d,d,d,d\")\n+\t\t (match_operand:DI 1 \"general_operand\" \"d,K,Os,m\")))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n   \"@\n    cgr\\t%0,%1\n    cghi\\t%0,%h1\n+   cgfi\\t%0,%1\n    cg\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RI,RXY\")])\n+  [(set_attr \"op_type\" \"RRE,RI,RIL,RXY\")])\n \n (define_insn \"*cmpsi_ccs_sign\"\n   [(set (reg CC_REGNUM)\n@@ -622,15 +676,16 @@\n \n (define_insn \"*cmpsi_ccs\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:SI 0 \"register_operand\" \"d,d,d,d\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,K,R,T\")))]\n+        (compare (match_operand:SI 0 \"register_operand\" \"d,d,d,d,d\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,K,Os,R,T\")))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n   \"@\n    cr\\t%0,%1\n    chi\\t%0,%h1\n+   cfi\\t%0,%1\n    c\\t%0,%1\n    cy\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR,RI,RX,RXY\")])\n+  [(set_attr \"op_type\" \"RR,RI,RIL,RX,RXY\")])\n \n \n ; Compare (unsigned) instructions\n@@ -647,28 +702,30 @@\n \n (define_insn \"*cmpdi_ccu\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,Q,BQ\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,m,BQ,Q\")))]\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,d,Q,BQ\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,Op,m,BQ,Q\")))]\n   \"s390_match_ccmode (insn, CCUmode) && TARGET_64BIT\"\n   \"@\n    clgr\\t%0,%1\n+   clgfi\\t%0,%1\n    clg\\t%0,%1\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RXY,SS,SS\")])\n+  [(set_attr \"op_type\" \"RRE,RIL,RXY,SS,SS\")])\n \n (define_insn \"*cmpsi_ccu\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,d,d,Q,BQ\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,R,T,BQ,Q\")))]\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,d,d,d,Q,BQ\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,Os,R,T,BQ,Q\")))]\n   \"s390_match_ccmode (insn, CCUmode)\"\n   \"@\n    clr\\t%0,%1\n+   clfi\\t%0,%o1\n    cl\\t%0,%1\n    cly\\t%0,%1\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,SS,SS\")])\n+  [(set_attr \"op_type\" \"RR,RIL,RX,RXY,SS,SS\")])\n \n (define_insn \"*cmphi_ccu\"\n   [(set (reg CC_REGNUM)\n@@ -873,12 +930,46 @@\n    [(set_attr \"op_type\" \"RIL\")\n     (set_attr \"type\"    \"larl\")])\n \n+(define_insn \"*movdi_64extimm\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n+                            \"=d,d,d,d,d,d,d,d,d,d,d,m,!*f,!*f,!*f,!R,!T,d,t,Q,t,?Q\")\n+        (match_operand:DI 1 \"general_operand\"\n+                            \"K,N0HD0,N1HD0,N2HD0,N3HD0,Os,N0SD0,N1SD0,L,d,m,d,*f,R,T,*f,*f,t,d,t,Q,?Q\"))]\n+  \"TARGET_64BIT && TARGET_EXTIMM\"\n+  \"@\n+   lghi\\t%0,%h1\n+   llihh\\t%0,%i1\n+   llihl\\t%0,%i1\n+   llilh\\t%0,%i1\n+   llill\\t%0,%i1\n+   lgfi\\t%0,%1\n+   llihf\\t%0,%k1\n+   llilf\\t%0,%k1\n+   lay\\t%0,%a1\n+   lgr\\t%0,%1\n+   lg\\t%0,%1\n+   stg\\t%1,%0\n+   ldr\\t%0,%1\n+   ld\\t%0,%1\n+   ldy\\t%0,%1\n+   std\\t%1,%0\n+   stdy\\t%1,%0\n+   #\n+   #\n+   stam\\t%1,%N1,%S0\n+   lam\\t%0,%N0,%S1\n+   #\"\n+  [(set_attr \"op_type\" \"RI,RI,RI,RI,RI,RIL,RIL,RIL,RXY,RRE,RXY,RXY,\n+                        RR,RX,RXY,RX,RXY,*,*,RS,RS,SS\")\n+   (set_attr \"type\" \"*,*,*,*,*,*,*,*,la,lr,load,store,\n+                     floaddf,floaddf,floaddf,fstoredf,fstoredf,*,*,*,*,*\")])\n+\n (define_insn \"*movdi_64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                             \"=d,d,d,d,d,d,d,d,m,!*f,!*f,!*f,!R,!T,d,t,Q,t,?Q\")\n         (match_operand:DI 1 \"general_operand\"\n                             \"K,N0HD0,N1HD0,N2HD0,N3HD0,L,d,m,d,*f,R,T,*f,*f,t,d,t,Q,?Q\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && !TARGET_EXTIMM\"\n   \"@\n    lghi\\t%0,%h1\n    llihh\\t%0,%i1\n@@ -1092,14 +1183,15 @@\n \n (define_insn \"*movsi_zarch\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-                            \"=d,d,d,d,d,d,d,R,T,!*f,!*f,!*f,!R,!T,d,t,Q,t,?Q\")\n+\t\t\t    \"=d,d,d,d,d,d,d,d,R,T,!*f,!*f,!*f,!R,!T,d,t,Q,t,?Q\")\n         (match_operand:SI 1 \"general_operand\"\n-                            \"K,N0HS0,N1HS0,L,d,R,T,d,d,*f,R,T,*f,*f,t,d,t,Q,?Q\"))]\n+\t\t\t    \"K,N0HS0,N1HS0,Os,L,d,R,T,d,d,*f,R,T,*f,*f,t,d,t,Q,?Q\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lhi\\t%0,%h1\n    llilh\\t%0,%i1\n    llill\\t%0,%i1\n+   iilf\\t%0,%o1\n    lay\\t%0,%a1\n    lr\\t%0,%1\n    l\\t%0,%1\n@@ -1116,9 +1208,9 @@\n    stam\\t%1,%1,%S0\n    lam\\t%0,%0,%S1\n    #\"\n-  [(set_attr \"op_type\" \"RI,RI,RI,RXY,RR,RX,RXY,RX,RXY,\n+  [(set_attr \"op_type\" \"RI,RI,RI,RIL,RXY,RR,RX,RXY,RX,RXY,\n                         RR,RX,RXY,RX,RXY,RRE,RRE,RS,RS,SS\")\n-   (set_attr \"type\" \"*,*,*,la,lr,load,load,store,store,\n+   (set_attr \"type\" \"*,*,*,*,la,lr,load,load,store,store,\n                      floadsf,floadsf,floadsf,fstoresf,fstoresf,*,*,*,*,*\")])\n \n (define_insn \"*movsi_esa\"\n@@ -2385,7 +2477,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_64BIT)\n     {\n@@ -2395,8 +2486,7 @@\n       emit_insn (gen_ashrdi3 (operands[0], operands[0], GEN_INT (32)));\n       DONE;\n     }\n-}\n-\")\n+})\n \n (define_insn \"*extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -2413,9 +2503,8 @@\n \n (define_expand \"extend<mode>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:HQI 1 \"register_operand\" \"\")))]\n+        (sign_extend:DI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_64BIT)\n     {\n@@ -2424,7 +2513,7 @@\n       emit_insn (gen_extendsidi2 (operands[0], tmp));\n       DONE;\n     }\n-  else\n+  else if (!TARGET_EXTIMM)\n     {\n       rtx bitcount = GEN_INT (GET_MODE_BITSIZE (DImode) - \n \t\t\t      GET_MODE_BITSIZE (<MODE>mode));\n@@ -2433,8 +2522,16 @@\n       emit_insn (gen_ashrdi3 (operands[0], operands[0], bitcount));\n       DONE;\n     }\n-}\n-\")\n+})\n+\n+(define_insn \"*extendhidi2_extimm\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"d,m\")))]\n+  \"TARGET_64BIT && TARGET_EXTIMM\"\n+  \"@\n+   lghr\\t%0,%1\n+   lgh\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXY\")])\n \n (define_insn \"*extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -2443,6 +2540,15 @@\n   \"lgh\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n+(define_insn \"*extendqidi2_extimm\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n+  \"TARGET_64BIT && TARGET_EXTIMM\"\n+  \"@\n+   lgbr\\t%0,%1\n+   lgb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXY\")])\n+\n (define_insn \"*extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (sign_extend:DI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n@@ -2471,32 +2577,52 @@\n \n (define_expand \"extend<mode>si2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:HQI 1 \"register_operand\" \"\")))]\n+        (sign_extend:SI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n-  rtx bitcount = GEN_INT (GET_MODE_BITSIZE(SImode) - \n-\t\t\t  GET_MODE_BITSIZE(<MODE>mode));\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  emit_insn (gen_ashlsi3 (operands[0], operands[1], bitcount));\n-  emit_insn (gen_ashrsi3 (operands[0], operands[0], bitcount));\n-  DONE;\n-}\n-\")\n+ if (!TARGET_EXTIMM)\n+   {\n+     rtx bitcount = GEN_INT (GET_MODE_BITSIZE(SImode) - \n+\t\t\t     GET_MODE_BITSIZE(<MODE>mode));\n+     operands[1] = gen_lowpart (SImode, operands[1]);\n+     emit_insn (gen_ashlsi3 (operands[0], operands[1], bitcount));\n+     emit_insn (gen_ashrsi3 (operands[0], operands[0], bitcount));\n+     DONE;\n+   }\n+})\n+\n+(define_insn \"*extendhisi2_extimm\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+        (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"d,R,T\")))]\n+  \"TARGET_EXTIMM\"\n+  \"@\n+   lhr\\t%0,%1\n+   lh\\t%0,%1\n+   lhy\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RX,RXY\")])\n \n (define_insn \"*extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (sign_extend:SI (match_operand:HI 1 \"memory_operand\" \"R,T\")))]\n-  \"\"\n+  \"!TARGET_EXTIMM\"\n   \"@\n    lh\\t%0,%1\n    lhy\\t%0,%1\"\n   [(set_attr \"op_type\" \"RX,RXY\")])\n \n+(define_insn \"*extendqisi2_extimm\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n+  \"TARGET_EXTIMM\"\n+  \"@\n+   lbr\\t%0,%1\n+   lb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXY\")])\n+\n (define_insn \"*extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (sign_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_LONG_DISPLACEMENT\"\n+  \"TARGET_LONG_DISPLACEMENT && !TARGET_EXTIMM\"\n   \"lb\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n@@ -2528,7 +2654,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_64BIT)\n     {\n@@ -2537,8 +2662,7 @@\n       emit_move_insn (gen_highpart (SImode, operands[0]), const0_rtx);\n       DONE;\n     }\n-}\n-\")\n+})\n \n (define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -2555,9 +2679,8 @@\n \n (define_expand \"zero_extend<mode>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (zero_extend:DI (match_operand:HQI 1 \"register_operand\" \"\")))]\n+        (zero_extend:DI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_64BIT)\n     {\n@@ -2566,7 +2689,7 @@\n       emit_insn (gen_zero_extendsidi2 (operands[0], tmp));\n       DONE;\n     }\n-  else\n+  else if (!TARGET_EXTIMM)\n     {\n       rtx bitcount = GEN_INT (GET_MODE_BITSIZE(DImode) - \n \t\t\t      GET_MODE_BITSIZE(<MODE>mode));\n@@ -2575,13 +2698,21 @@\n       emit_insn (gen_lshrdi3 (operands[0], operands[0], bitcount));\n       DONE;\n     }\n-}\n-\")\n+})\n+\n+(define_insn \"*zero_extend<mode>di2_extimm\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (zero_extend:DI (match_operand:HQI 1 \"nonimmediate_operand\" \"d,m\")))]\n+  \"TARGET_64BIT && TARGET_EXTIMM\"\n+  \"@\n+   llg<hc>r\\t%0,%1\n+   llg<hc>\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXY\")])\n \n (define_insn \"*zero_extend<mode>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (zero_extend:DI (match_operand:HQI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT  && !TARGET_EXTIMM\"\n   \"llg<hc>\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n@@ -2647,21 +2778,31 @@\n \n (define_expand \"zero_extend<mode>si2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (zero_extend:SI (match_operand:HQI 1 \"register_operand\" \"\")))]\n+        (zero_extend:SI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  emit_insn (gen_andsi3 (operands[0], operands[1], \n-    GEN_INT ((1 << GET_MODE_BITSIZE(<MODE>mode)) - 1)));\n-  DONE;\n+  if (!TARGET_EXTIMM)\n+    {\n+      operands[1] = gen_lowpart (SImode, operands[1]);\n+      emit_insn (gen_andsi3 (operands[0], operands[1], \n+                   GEN_INT ((1 << GET_MODE_BITSIZE(<MODE>mode)) - 1)));\n+      DONE;\n }\n-\")\n+})\n+\n+(define_insn \"*zero_extend<mode>si2_extimm\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (zero_extend:SI (match_operand:HQI 1 \"nonimmediate_operand\" \"d,m\")))]\n+  \"TARGET_EXTIMM\"\n+  \"@\n+   ll<hc>r\\t%0,%1\n+   ll<hc>\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXY\")])\n \n (define_insn \"*zero_extend<mode>si2_64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (zero_extend:SI (match_operand:HQI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && !TARGET_EXTIMM\"\n   \"llg<hc>\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n@@ -2695,19 +2836,17 @@\n (define_expand \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n         (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"\")))]\n-  \"TARGET_ZARCH\"\n-  \"\n+  \"TARGET_ZARCH && !TARGET_EXTIMM\"\n {\n   operands[1] = gen_lowpart (HImode, operands[1]);\n   emit_insn (gen_andhi3 (operands[0], operands[1], GEN_INT (0xff)));\n   DONE;\n-}\n-\")\n+})\n \n (define_insn \"*zero_extendqihi2_64\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n         (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && !TARGET_EXTIMM\"\n   \"llgc\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n@@ -3090,29 +3229,34 @@\n \n (define_insn \"*adddi3_imm_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-                          (match_operand:DI 2 \"const_int_operand\" \"K\"))\n+        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n+                          (match_operand:DI 2 \"const_int_operand\" \"K,Os\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (plus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\n    && s390_match_ccmode (insn, CCAmode)\n-   && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'K', \\\"K\\\")\"\n-  \"aghi\\t%0,%h2\"\n-  [(set_attr \"op_type\"  \"RI\")])\n+   && (CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'K', \\\"K\\\")\n+       || CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'O', \\\"Os\\\"))\"\n+  \"@\n+   aghi\\t%0,%h2\n+   agfi\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RI,RIL\")])\n \n (define_insn \"*adddi3_carry1_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                          (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                          (match_operand:DI 2 \"general_operand\" \"d,Op,On,m\"))\n                  (match_dup 1)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d\")\n         (plus:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL1mode) && TARGET_64BIT\"\n   \"@\n    algr\\t%0,%2\n+   algfi\\t%0,%2\n+   slgfi\\t%0,%n2\n    alg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RIL,RIL,RXY\")])\n \n (define_insn \"*adddi3_carry1_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -3128,16 +3272,18 @@\n \n (define_insn \"*adddi3_carry2_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                          (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                          (match_operand:DI 2 \"general_operand\" \"d,Op,On,m\"))\n                  (match_dup 2)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d\")\n         (plus:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL1mode) && TARGET_64BIT\"\n   \"@\n    algr\\t%0,%2\n+   algfi\\t%0,%2\n+   slgfi\\t%0,%n2\n    alg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RIL,RIL,RXY\")])\n \n (define_insn \"*adddi3_carry2_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -3153,16 +3299,18 @@\n \n (define_insn \"*adddi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                          (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+        (compare (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                          (match_operand:DI 2 \"general_operand\" \"d,Op,On,m\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d\")\n         (plus:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n   \"@\n    algr\\t%0,%2\n+   algfi\\t%0,%2\n+   slgfi\\t%0,%n2\n    alg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RIL,RIL,RXY\")])\n \n (define_insn \"*adddi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -3188,16 +3336,18 @@\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n (define_insn \"*adddi3_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n-        (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                 (match_operand:DI 2 \"general_operand\" \"d,K,m\") ) )\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d,d\")\n+        (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n+                 (match_operand:DI 2 \"general_operand\" \"d,K,Op,On,m\") ) )\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_64BIT\"\n   \"@\n    agr\\t%0,%2\n    aghi\\t%0,%h2\n+   algfi\\t%0,%2\n+   slgfi\\t%0,%n2\n    ag\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RI,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RI,RIL,RIL,RXY\")])\n \n (define_insn_and_split \"*adddi3_31z\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n@@ -3270,29 +3420,34 @@\n \n (define_insn \"*addsi3_imm_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-                          (match_operand:SI 2 \"const_int_operand\" \"K\"))\n+        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n+                          (match_operand:SI 2 \"const_int_operand\" \"K,Os\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (plus:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCAmode)\n-   && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'K', \\\"K\\\")\"\n-  \"ahi\\t%0,%h2\"\n-  [(set_attr \"op_type\"  \"RI\")])\n+   && (CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'K', \\\"K\\\")\n+       || CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'O', \\\"Os\\\"))\n+   && INTVAL (operands[2]) != -((HOST_WIDE_INT)1 << 31)\"\n+  \"@\n+   ahi\\t%0,%h2\n+   afi\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RI,RIL\")])\n \n (define_insn \"*addsi3_carry1_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                          (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,Os,R,T\"))\n                  (match_dup 1)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n         (plus:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL1mode)\"\n   \"@\n    alr\\t%0,%2\n+   alfi\\t%0,%o2\n    al\\t%0,%2\n    aly\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RR,RIL,RX,RXY\")])\n \n (define_insn \"*addsi3_carry1_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -3309,17 +3464,18 @@\n \n (define_insn \"*addsi3_carry2_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                          (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,Os,R,T\"))\n                  (match_dup 2)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n         (plus:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL1mode)\"\n   \"@\n    alr\\t%0,%2\n+   alfi\\t%0,%o2\n    al\\t%0,%2\n    aly\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RR,RIL,RX,RXY\")])\n \n (define_insn \"*addsi3_carry2_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -3336,17 +3492,18 @@\n \n (define_insn \"*addsi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                          (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,Os,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n         (plus:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCLmode)\"\n   \"@\n    alr\\t%0,%2\n+   alfi\\t%0,%o2\n    al\\t%0,%2\n    aly\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RR,RIL,RX,RXY\")])\n \n (define_insn \"*addsi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -3385,17 +3542,18 @@\n   [(set_attr \"op_type\"  \"RX,RXY\")])\n \n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n-        (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                 (match_operand:SI 2 \"general_operand\" \"d,K,R,T\")))\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d,d\")\n+        (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n+                 (match_operand:SI 2 \"general_operand\" \"d,K,Os,R,T\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"@\n    ar\\t%0,%2\n    ahi\\t%0,%h2\n+   afi\\t%0,%2\n    a\\t%0,%2\n    ay\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RI,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RR,RI,RIL,RX,RXY\")])\n \n ;\n ; add(df|sf)3 instruction pattern(s).\n@@ -4673,14 +4831,37 @@\n    ng\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n+(define_insn \"*anddi3_extimm\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,d,d,AQ,Q\")\n+        (and:DI (match_operand:DI 1 \"nonimmediate_operand\"\n+                                    \"%d,o,0,0,0,0,0,0,0,0,0,0\")\n+                (match_operand:DI 2 \"general_operand\"\n+                                    \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,N0SDF,N1SDF,d,m,NxQDF,Q\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_64BIT && TARGET_EXTIMM && s390_logical_operator_ok_p (operands)\"\n+  \"@\n+   #\n+   #\n+   nihh\\t%0,%j2\n+   nihl\\t%0,%j2\n+   nilh\\t%0,%j2\n+   nill\\t%0,%j2\n+   nihf\\t%0,%m2\n+   nilf\\t%0,%m2\n+   ngr\\t%0,%2\n+   ng\\t%0,%2\n+   #\n+   #\"\n+  [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RIL,RIL,RRE,RXY,SI,SS\")])\n+\n (define_insn \"*anddi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n         (and:DI (match_operand:DI 1 \"nonimmediate_operand\"\n                                     \"%d,o,0,0,0,0,0,0,0,0\")\n                 (match_operand:DI 2 \"general_operand\"\n                                     \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,d,m,NxQDF,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n+  \"TARGET_64BIT && !TARGET_EXTIMM && s390_logical_operator_ok_p (operands)\"\n   \"@\n    #\n    #\n@@ -4711,52 +4892,55 @@\n \n (define_insn \"*andsi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n         (and:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n+   nilf\\t%0,%o2\n    nr\\t%0,%2\n    n\\t%0,%2\n    ny\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n \n (define_insn \"*andsi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:SI 0 \"=d,d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode)\n    /* Do not steal TM patterns.  */\n    && s390_single_part (operands[2], SImode, HImode, 0) < 0\"\n   \"@\n+   nilf\\t%0,%o2\n    nr\\t%0,%2\n    n\\t%0,%2\n    ny\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n \n (define_insn \"*andsi3_zarch\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,AQ,Q\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n         (and:SI (match_operand:SI 1 \"nonimmediate_operand\"\n-                                    \"%d,o,0,0,0,0,0,0,0\")\n+\t\t\t\t    \"%d,o,0,0,0,0,0,0,0,0\")\n                 (match_operand:SI 2 \"general_operand\"\n-                                    \"M,M,N0HSF,N1HSF,d,R,T,NxQSF,Q\")))\n+\t\t\t\t    \"M,M,N0HSF,N1HSF,Os,d,R,T,NxQSF,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    #\n    #\n    nilh\\t%0,%j2\n    nill\\t%0,%j2\n+   nilf\\t%0,%o2\n    nr\\t%0,%2\n    n\\t%0,%2\n    ny\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RR,RX,RXY,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RIL,RR,RX,RXY,SI,SS\")])\n \n (define_insn \"*andsi3_esa\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n@@ -4948,13 +5132,33 @@\n    og\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n+(define_insn \"*iordi3_extimm\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n+        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0,0,0,0,0\")\n+                (match_operand:DI 2 \"general_operand\"\n+                                    \"N0HD0,N1HD0,N2HD0,N3HD0,N0SD0,N1SD0,d,m,NxQD0,Q\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_64BIT && TARGET_EXTIMM && s390_logical_operator_ok_p (operands)\"\n+  \"@\n+   oihh\\t%0,%i2\n+   oihl\\t%0,%i2\n+   oilh\\t%0,%i2\n+   oill\\t%0,%i2\n+   oihf\\t%0,%k2\n+   oilf\\t%0,%k2\n+   ogr\\t%0,%2\n+   og\\t%0,%2\n+   #\n+   #\"\n+  [(set_attr \"op_type\"  \"RI,RI,RI,RI,RIL,RIL,RRE,RXY,SI,SS\")])\n+\n (define_insn \"*iordi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,AQ,Q\")\n         (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0,0,0\")\n                 (match_operand:DI 2 \"general_operand\"\n                                     \"N0HD0,N1HD0,N2HD0,N3HD0,d,m,NxQD0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n+  \"TARGET_64BIT && !TARGET_EXTIMM && s390_logical_operator_ok_p (operands)\"\n   \"@\n    oihh\\t%0,%i2\n    oihl\\t%0,%i2\n@@ -4982,46 +5186,49 @@\n \n (define_insn \"*iorsi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n         (ior:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n+   oilf\\t%0,%o2\n    or\\t%0,%2\n    o\\t%0,%2\n    oy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n \n (define_insn \"*iorsi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:SI 0 \"=d,d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n+   oilf\\t%0,%o2\n    or\\t%0,%2\n    o\\t%0,%2\n    oy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n \n (define_insn \"*iorsi3_zarch\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,AQ,Q\")\n-        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"N0HS0,N1HS0,d,R,T,NxQS0,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,AQ,Q\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"N0HS0,N1HS0,Os,d,R,T,NxQS0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    oilh\\t%0,%i2\n    oill\\t%0,%i2\n+   oilf\\t%0,%o2\n    or\\t%0,%2\n    o\\t%0,%2\n    oy\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RI,RI,RR,RX,RXY,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RI,RI,RIL,RR,RX,RXY,SI,SS\")])\n \n (define_insn \"*iorsi3_esa\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n@@ -5213,12 +5420,27 @@\n    xr\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n+(define_insn \"*xordi3_extimm\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,AQ,Q\")\n+        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0\")\n+                (match_operand:DI 2 \"general_operand\" \"N0SD0,N1SD0,d,m,NxQD0,Q\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_64BIT && TARGET_EXTIMM && s390_logical_operator_ok_p (operands)\"\n+  \"@\n+   xihf\\t%0,%k2\n+   xilf\\t%0,%k2\n+   xgr\\t%0,%2\n+   xg\\t%0,%2\n+   #\n+   #\"\n+  [(set_attr \"op_type\"  \"RIL,RIL,RRE,RXY,SI,SS\")])\n+\n (define_insn \"*xordi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n         (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n                 (match_operand:DI 2 \"general_operand\" \"d,m,NxQD0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n+  \"TARGET_64BIT && !TARGET_EXTIMM && s390_logical_operator_ok_p (operands)\"\n   \"@\n    xgr\\t%0,%2\n    xg\\t%0,%2\n@@ -5242,44 +5464,47 @@\n \n (define_insn \"*xorsi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n         (xor:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n+   xilf\\t%0,%o2\n    xr\\t%0,%2\n    x\\t%0,%2\n    xy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n \n (define_insn \"*xorsi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"d,R,T\"))\n+        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:SI 0 \"=d,d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n+   xilf\\t%0,%o2\n    xr\\t%0,%2\n    x\\t%0,%2\n    xy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n \n (define_insn \"*xorsi3\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,AQ,Q\")\n-        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R,T,NxQS0,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,AQ,Q\")\n+        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"Os,d,R,T,NxQS0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n+   xilf\\t%0,%o2\n    xr\\t%0,%2\n    x\\t%0,%2\n    xy\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY,SI,SS\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_operand\" \"\")\n@@ -5296,16 +5521,17 @@\n ;\n \n (define_insn \"*xorhi3\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,AQ,Q\")\n-        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,NxQH0,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n+        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"Os,d,NxQH0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n+   xilf\\t%0,%x2\n    xr\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,SI,SS\")])\n \n (define_split\n   [(set (match_operand:HI 0 \"s_operand\" \"\")\n@@ -5322,17 +5548,18 @@\n ;\n \n (define_insn \"*xorqi3\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,S,Q\")\n-        (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                (match_operand:QI 2 \"general_operand\" \"d,n,n,Q\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,Q,S,Q\")\n+        (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n+                (match_operand:QI 2 \"general_operand\" \"Os,d,n,n,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n+   xilf\\t%0,%b2\n    xr\\t%0,%2\n    xi\\t%S0,%b2\n    xiy\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RR,SI,SIY,SS\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,SI,SIY,SS\")])\n \n ;\n ; Block exclusive or (XC) patterns.\n@@ -5800,6 +6027,49 @@\n   \"\")\n \n \n+;;\n+;; Find leftmost bit instructions.\n+;;\n+\n+(define_expand \"clzdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(clz:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+  \"TARGET_EXTIMM && TARGET_64BIT\"\n+{\n+  rtx insn, clz_equal;\n+  rtx wide_reg = gen_reg_rtx (TImode);\n+  rtx msb = gen_rtx_CONST_INT (DImode, (unsigned HOST_WIDE_INT) 1 << 63);\n+\n+  clz_equal = gen_rtx_CLZ (DImode, operands[1]);\n+\n+  emit_insn (gen_clztidi2 (wide_reg, operands[1], msb));\n+\n+  insn = emit_move_insn (operands[0], gen_highpart (DImode, wide_reg));  \n+  REG_NOTES (insn) =\n+        gen_rtx_EXPR_LIST (REG_EQUAL, clz_equal, REG_NOTES (insn));\n+\n+  DONE;\n+})\n+\n+(define_insn \"clztidi2\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=d\")\n+\t(ior:TI\n+\t  (ashift:TI \n+            (zero_extend:TI \n+   \t      (xor:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                      (lshiftrt (match_operand:DI 2 \"const_int_operand\" \"\")\n+\t\t\t\t(subreg:SI (clz:DI (match_dup 1)) 4))))\n+\t    \n+\t    (const_int 64))\n+          (zero_extend:TI (clz:DI (match_dup 1)))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"(unsigned HOST_WIDE_INT) INTVAL (operands[2]) \n+   == (unsigned HOST_WIDE_INT) 1 << 63\n+   && TARGET_EXTIMM && TARGET_64BIT\"\n+  \"flogr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+\n+\n ;;\n ;;- Rotate instructions.\n ;;"}]}