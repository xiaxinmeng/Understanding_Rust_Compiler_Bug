{"sha": "b56ed680d4715cfc3cf2c4940aef30daec124a41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2ZWQ2ODBkNDcxNWNmYzNjZjJjNDk0MGFlZjMwZGFlYzEyNGE0MQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2016-01-14T16:30:56Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2016-01-14T16:30:56Z"}, "message": "Tidy: remove reduc_xxx_optab migration code.\n\n\t* doc/md.texi (reduc_smin_@var{m}, reduc_smax_@var{m},\n\treduc_umin_@var{m}, reduc_umax_@var{m}, reduc_splus_@var{m},\n\treduc_uplus_@var{m}): Remove.\n\t* expr.c (expand_expr_real_2): Remove expansion path for\n\treduc_[us](min|max|plus) optabs.\n\t* optabs-tree.c (scalar_reduc_to_vector): Remove.\n\t* optabs-tree.h (scalar_reduc_to_vector): Remove.\n\t* optabs.def (reduc_smax_optab, reduc_smin_optab, reduc_splus_optab,\n\treduc_umax_optab, reduc_umin_optab, reduc_uplus_optab): Remove.\n\t* tree-vect-loop.c (vectorizable_reduction): Remove test for\n\treduc_[us](min|max|plus) optabs.\n\nFrom-SVN: r232373", "tree": {"sha": "fa137cfba7ff589c5cac37f0369840923f730fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa137cfba7ff589c5cac37f0369840923f730fc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b56ed680d4715cfc3cf2c4940aef30daec124a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56ed680d4715cfc3cf2c4940aef30daec124a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56ed680d4715cfc3cf2c4940aef30daec124a41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56ed680d4715cfc3cf2c4940aef30daec124a41/comments", "author": null, "committer": null, "parents": [{"sha": "59a2f0fa2a8c82c6959889c8bedd15f9e67615d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a2f0fa2a8c82c6959889c8bedd15f9e67615d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a2f0fa2a8c82c6959889c8bedd15f9e67615d0"}], "stats": {"total": 120, "additions": 28, "deletions": 92}, "files": [{"sha": "eb26fccc2d9bdd7c1266e2870606046476014094", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b56ed680d4715cfc3cf2c4940aef30daec124a41", "patch": "@@ -1,3 +1,17 @@\n+2016-01-14  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* doc/md.texi (reduc_smin_@var{m}, reduc_smax_@var{m},\n+\treduc_umin_@var{m}, reduc_umax_@var{m}, reduc_splus_@var{m},\n+\treduc_uplus_@var{m}): Remove.\n+\t* expr.c (expand_expr_real_2): Remove expansion path for\n+\treduc_[us](min|max|plus) optabs.\n+\t* optabs-tree.c (scalar_reduc_to_vector): Remove.\n+\t* optabs-tree.h (scalar_reduc_to_vector): Remove.\n+\t* optabs.def (reduc_smax_optab, reduc_smin_optab, reduc_splus_optab,\n+\treduc_umax_optab, reduc_umin_optab, reduc_uplus_optab): Remove.\n+\t* tree-vect-loop.c (vectorizable_reduction): Remove test for\n+\treduc_[us](min|max|plus) optabs.\n+\n 2016-01-14  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/mips/mips-ps-3d.md (reduc_splus_v2sf): Remove."}, {"sha": "68321dc9b6518fad27857200e9d4b2b899a4cd2e", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=b56ed680d4715cfc3cf2c4940aef30daec124a41", "patch": "@@ -5007,33 +5007,6 @@ raised and a quiet @code{NaN} is returned.\n All operands have mode @var{m}, which is a scalar or vector\n floating-point mode.  These patterns are not allowed to @code{FAIL}.\n \n-@cindex @code{reduc_smin_@var{m}} instruction pattern\n-@cindex @code{reduc_smax_@var{m}} instruction pattern\n-@item @samp{reduc_smin_@var{m}}, @samp{reduc_smax_@var{m}}\n-Find the signed minimum/maximum of the elements of a vector. The vector is\n-operand 1, and the result is stored in the least significant bits of\n-operand 0 (also a vector). The output and input vector should have the same\n-modes. These are legacy optabs, and platforms should prefer to implement\n-@samp{reduc_smin_scal_@var{m}} and @samp{reduc_smax_scal_@var{m}}.\n-\n-@cindex @code{reduc_umin_@var{m}} instruction pattern\n-@cindex @code{reduc_umax_@var{m}} instruction pattern\n-@item @samp{reduc_umin_@var{m}}, @samp{reduc_umax_@var{m}}\n-Find the unsigned minimum/maximum of the elements of a vector. The vector is\n-operand 1, and the result is stored in the least significant bits of\n-operand 0 (also a vector). The output and input vector should have the same\n-modes. These are legacy optabs, and platforms should prefer to implement\n-@samp{reduc_umin_scal_@var{m}} and @samp{reduc_umax_scal_@var{m}}.\n-\n-@cindex @code{reduc_splus_@var{m}} instruction pattern\n-@cindex @code{reduc_uplus_@var{m}} instruction pattern\n-@item @samp{reduc_splus_@var{m}}, @samp{reduc_uplus_@var{m}}\n-Compute the sum of the signed/unsigned elements of a vector. The vector is\n-operand 1, and the result is stored in the least significant bits of operand 0\n-(also a vector). The output and input vector should have the same modes.\n-These are legacy optabs, and platforms should prefer to implement\n-@samp{reduc_plus_scal_@var{m}}.\n-\n @cindex @code{reduc_smin_scal_@var{m}} instruction pattern\n @cindex @code{reduc_smax_scal_@var{m}} instruction pattern\n @item @samp{reduc_smin_scal_@var{m}}, @samp{reduc_smax_scal_@var{m}}"}, {"sha": "8123cc2d01bc72736d4af503fa50c89aff488106", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b56ed680d4715cfc3cf2c4940aef30daec124a41", "patch": "@@ -9162,35 +9162,16 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n         this_optab = optab_for_tree_code (code, type, optab_default);\n         machine_mode vec_mode = TYPE_MODE (TREE_TYPE (treeop0));\n \n-\tif (optab_handler (this_optab, vec_mode) != CODE_FOR_nothing)\n-\t  {\n-\t    struct expand_operand ops[2];\n-\t    enum insn_code icode = optab_handler (this_optab, vec_mode);\n-\n-\t    create_output_operand (&ops[0], target, mode);\n-\t    create_input_operand (&ops[1], op0, vec_mode);\n-\t    if (maybe_expand_insn (icode, 2, ops))\n-\t      {\n-\t\ttarget = ops[0].value;\n-\t\tif (GET_MODE (target) != mode)\n-\t\t  return gen_lowpart (tmode, target);\n-\t\treturn target;\n-\t      }\n-\t  }\n-\t/* Fall back to optab with vector result, and then extract scalar.  */\n-\tthis_optab = scalar_reduc_to_vector (this_optab, type);\n-        temp = expand_unop (vec_mode, this_optab, op0, NULL_RTX, unsignedp);\n-        gcc_assert (temp);\n-        /* The tree code produces a scalar result, but (somewhat by convention)\n-           the optab produces a vector with the result in element 0 if\n-           little-endian, or element N-1 if big-endian.  So pull the scalar\n-           result out of that element.  */\n-        int index = BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (vec_mode) - 1 : 0;\n-\tint bitsize = GET_MODE_UNIT_BITSIZE (vec_mode);\n-        temp = extract_bit_field (temp, bitsize, bitsize * index, unsignedp,\n-\t\t\t\t  target, mode, mode, false);\n-        gcc_assert (temp);\n-        return temp;\n+\tstruct expand_operand ops[2];\n+\tenum insn_code icode = optab_handler (this_optab, vec_mode);\n+\n+\tcreate_output_operand (&ops[0], target, mode);\n+\tcreate_input_operand (&ops[1], op0, vec_mode);\n+\texpand_insn (icode, 2, ops);\n+\ttarget = ops[0].value;\n+\tif (GET_MODE (target) != mode)\n+\t  return gen_lowpart (tmode, target);\n+\treturn target;\n       }\n \n     case VEC_UNPACK_HI_EXPR:"}, {"sha": "a229b970b3bb653df1617cb310aa694c09bdce5a", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=b56ed680d4715cfc3cf2c4940aef30daec124a41", "patch": "@@ -246,26 +246,6 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     }\n }\n \n-/* Given optab UNOPTAB that reduces a vector to a scalar, find instead the old\n-   optab that produces a vector with the reduction result in one element,\n-   for a tree with type TYPE.  */\n-\n-optab\n-scalar_reduc_to_vector (optab unoptab, const_tree type)\n-{\n-  switch (unoptab)\n-    {\n-    case reduc_plus_scal_optab:\n-      return TYPE_UNSIGNED (type) ? reduc_uplus_optab : reduc_splus_optab;\n-\n-    case reduc_smin_scal_optab: return reduc_smin_optab;\n-    case reduc_umin_scal_optab: return reduc_umin_optab;\n-    case reduc_smax_scal_optab: return reduc_smax_optab;\n-    case reduc_umax_scal_optab: return reduc_umax_optab;\n-    default: return unknown_optab;\n-    }\n-}\n-\n /* Function supportable_convert_operation\n \n    Check whether an operation represented by the code CODE is a"}, {"sha": "c3b9280f9acd6c8f3e0c13a1612edcb5d9aa9030", "filename": "gcc/optabs-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Foptabs-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Foptabs-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.h?ref=b56ed680d4715cfc3cf2c4940aef30daec124a41", "patch": "@@ -36,7 +36,6 @@ enum optab_subtype\n    the second argument.  The third argument distinguishes between the types of\n    vector shifts and rotates.  */\n optab optab_for_tree_code (enum tree_code, const_tree, enum optab_subtype);\n-optab scalar_reduc_to_vector (optab, const_tree);\n bool supportable_convert_operation (enum tree_code, tree, tree, tree *,\n \t\t\t\t    enum tree_code *);\n bool expand_vec_cmp_expr_p (tree, tree);"}, {"sha": "c938b42ea4e4cbe164a19f803359276876fa7b67", "filename": "gcc/optabs.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=b56ed680d4715cfc3cf2c4940aef30daec124a41", "patch": "@@ -285,13 +285,6 @@ OPTAB_D (reduc_smin_scal_optab, \"reduc_smin_scal_$a\")\n OPTAB_D (reduc_plus_scal_optab, \"reduc_plus_scal_$a\")\n OPTAB_D (reduc_umax_scal_optab, \"reduc_umax_scal_$a\")\n OPTAB_D (reduc_umin_scal_optab, \"reduc_umin_scal_$a\")\n-/* (Old) Vector reduction, returning a vector with the result in one lane.  */\n-OPTAB_D (reduc_smax_optab, \"reduc_smax_$a\")\n-OPTAB_D (reduc_smin_optab, \"reduc_smin_$a\")\n-OPTAB_D (reduc_splus_optab, \"reduc_splus_$a\")\n-OPTAB_D (reduc_umax_optab, \"reduc_umax_$a\")\n-OPTAB_D (reduc_umin_optab, \"reduc_umin_$a\")\n-OPTAB_D (reduc_uplus_optab, \"reduc_uplus_$a\")\n \n OPTAB_D (sdot_prod_optab, \"sdot_prod$I$a\")\n OPTAB_D (ssum_widen_optab, \"widen_ssum$I$a3\")"}, {"sha": "83ded8b7fb2f7bfb897b1249eb9aa23555d4a33c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56ed680d4715cfc3cf2c4940aef30daec124a41/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b56ed680d4715cfc3cf2c4940aef30daec124a41", "patch": "@@ -5751,15 +5751,11 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t    }\n \t  else if (optab_handler (reduc_optab, vec_mode) == CODE_FOR_nothing)\n \t    {\n-\t      optab = scalar_reduc_to_vector (reduc_optab, vectype_out);\n-\t      if (optab_handler (optab, vec_mode) == CODE_FOR_nothing)\n-\t\t{\n-\t\t  if (dump_enabled_p ())\n-\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t     \"reduc op not supported by target.\\n\");\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"reduc op not supported by target.\\n\");\n \n-\t\t  epilog_reduc_code = ERROR_MARK;\n-\t\t}\n+\t      epilog_reduc_code = ERROR_MARK;\n \t    }\n \n \t  /* When epilog_reduc_code is ERROR_MARK then a reduction will be"}]}