{"sha": "3da7d774259904b351febd2c2de4eb15cd262ff5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RhN2Q3NzQyNTk5MDRiMzUxZmViZDJjMmRlNGViMTVjZDI2MmZmNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-06-18T16:08:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-06-18T16:08:12Z"}, "message": "tree.c (build_constructor): Add MEM_STAT_DECL.\n\n\t* tree.c (build_constructor): Add MEM_STAT_DECL.\n\ngcc/cp/\n\t* constexpr.c (unshare_constructor): Add MEM_STAT_DECL.\n\nFrom-SVN: r272428", "tree": {"sha": "a1fcfa4e1c3e8c5dae70edad3c70f779a7c12506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1fcfa4e1c3e8c5dae70edad3c70f779a7c12506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3da7d774259904b351febd2c2de4eb15cd262ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da7d774259904b351febd2c2de4eb15cd262ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3da7d774259904b351febd2c2de4eb15cd262ff5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da7d774259904b351febd2c2de4eb15cd262ff5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57d6f4d04d438522dc03488ca31f71b4b7b904c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d6f4d04d438522dc03488ca31f71b4b7b904c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d6f4d04d438522dc03488ca31f71b4b7b904c8"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "0993c3de4864498f7a395609f307f17c25f3bc41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3da7d774259904b351febd2c2de4eb15cd262ff5", "patch": "@@ -1,3 +1,7 @@\n+2019-06-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (build_constructor): Add MEM_STAT_DECL.\n+\n 2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-modes.def (CC_NZC): New CC_MODE."}, {"sha": "eb795b82b31a0a4a1b58e80ac6fee185c4014517", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3da7d774259904b351febd2c2de4eb15cd262ff5", "patch": "@@ -1,3 +1,7 @@\n+2019-06-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (unshare_constructor): Add MEM_STAT_DECL.\n+\n 2019-06-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* semantics.c (finish_omp_clauses): For OMP_CLAUSE_REDUCTION_INSCAN"}, {"sha": "22901f811f1680954e55fc2ff2afd1aa0d89e68b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3da7d774259904b351febd2c2de4eb15cd262ff5", "patch": "@@ -1331,7 +1331,7 @@ adjust_temp_type (tree type, tree temp)\n    modifications don't affect other places where it was used.  */\n \n tree\n-unshare_constructor (tree t)\n+unshare_constructor (tree t MEM_STAT_DECL)\n {\n   if (!t || TREE_CODE (t) != CONSTRUCTOR)\n     return t;\n@@ -1340,8 +1340,8 @@ unshare_constructor (tree t)\n   while (!ptrs.is_empty ())\n     {\n       tree *p = ptrs.pop ();\n-      tree n = copy_node (*p);\n-      CONSTRUCTOR_ELTS (n) = vec_safe_copy (CONSTRUCTOR_ELTS (*p));\n+      tree n = copy_node (*p PASS_MEM_STAT);\n+      CONSTRUCTOR_ELTS (n) = vec_safe_copy (CONSTRUCTOR_ELTS (*p) PASS_MEM_STAT);\n       *p = n;\n       vec<constructor_elt, va_gc> *v = CONSTRUCTOR_ELTS (n);\n       constructor_elt *ce;"}, {"sha": "98f7a0c0cd00e27d80272632ebc85f6ecea298d8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3da7d774259904b351febd2c2de4eb15cd262ff5", "patch": "@@ -7725,7 +7725,7 @@ extern void explain_invalid_constexpr_fn        (tree);\n extern vec<tree> cx_error_context               (void);\n extern tree fold_sizeof_expr\t\t\t(tree);\n extern void clear_cv_and_fold_caches\t\t(void);\n-extern tree unshare_constructor\t\t\t(tree);\n+extern tree unshare_constructor\t\t\t(tree CXX_MEM_STAT_INFO);\n \n /* In cp-ubsan.c */\n extern void cp_ubsan_maybe_instrument_member_call (tree);"}, {"sha": "f65025f10895959209639c2cc7786a2255af78c5", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3da7d774259904b351febd2c2de4eb15cd262ff5", "patch": "@@ -2023,9 +2023,9 @@ verify_constructor_flags (tree c)\n /* Return a new CONSTRUCTOR node whose type is TYPE and whose values\n    are in the vec pointed to by VALS.  */\n tree\n-build_constructor (tree type, vec<constructor_elt, va_gc> *vals)\n+build_constructor (tree type, vec<constructor_elt, va_gc> *vals MEM_STAT_DECL)\n {\n-  tree c = make_node (CONSTRUCTOR);\n+  tree c = make_node (CONSTRUCTOR PASS_MEM_STAT);\n \n   TREE_TYPE (c) = type;\n   CONSTRUCTOR_ELTS (c) = vals;"}, {"sha": "23ac9b1ff5ea3170dd572ad7707994420d58575b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da7d774259904b351febd2c2de4eb15cd262ff5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3da7d774259904b351febd2c2de4eb15cd262ff5", "patch": "@@ -4247,7 +4247,7 @@ extern tree build_vec_series (tree, tree, tree);\n extern tree build_index_vector (tree, poly_uint64, poly_uint64);\n extern void recompute_constructor_flags (tree);\n extern void verify_constructor_flags (tree);\n-extern tree build_constructor (tree, vec<constructor_elt, va_gc> *);\n+extern tree build_constructor (tree, vec<constructor_elt, va_gc> * CXX_MEM_STAT_INFO);\n extern tree build_constructor_single (tree, tree, tree);\n extern tree build_constructor_from_list (tree, tree);\n extern tree build_constructor_va (tree, int, ...);"}]}