{"sha": "5ad4f1c81153459ce6fc8c285a39c69e060ac604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFkNGYxYzgxMTUzNDU5Y2U2ZmM4YzI4NWEzOWM2OWUwNjBhYzYwNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-24T23:18:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-24T23:18:58Z"}, "message": "friend.c (do_friend): Remove check for existing decl.\n\n\tcp/\n\t* friend.c (do_friend): Remove check for existing decl.\n\t* name-lookup.h (lookup_name_innermost_nonclass_level): Delete.\n\t* name-lookup.c (push_local_binding): Directly look for binding.\n\t(lookup_name_innermost_nonclass_level_1): Delete.\n\t(lookup_name_innermost_nonclass_level): Delete.\n\n\ttestsuite/\n\t* g++.dg/lookup/friend12.C: Adjust diagnostics.\n\t* g++.dg/lookup/friend19.C: New.\n\t* g++.dg/lookup/friend20.C: New.\n\nFrom-SVN: r248435", "tree": {"sha": "972e96ed5a394997a17ad54013af94cbed7ce7e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972e96ed5a394997a17ad54013af94cbed7ce7e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ad4f1c81153459ce6fc8c285a39c69e060ac604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad4f1c81153459ce6fc8c285a39c69e060ac604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad4f1c81153459ce6fc8c285a39c69e060ac604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad4f1c81153459ce6fc8c285a39c69e060ac604/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cdb26f2adc716bff0d7cc9c0682501da77c5be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdb26f2adc716bff0d7cc9c0682501da77c5be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdb26f2adc716bff0d7cc9c0682501da77c5be8"}], "stats": {"total": 126, "additions": 70, "deletions": 56}, "files": [{"sha": "29c95c39da8f55762838582a61750f15e3b99d97", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -1,5 +1,11 @@\n 2017-05-24  Nathan Sidwell  <nathan@acm.org>\n \n+\t* friend.c (do_friend): Remove check for existing decl.\n+\t* name-lookup.h (lookup_name_innermost_nonclass_level): Delete.\n+\t* name-lookup.c (push_local_binding): Directly look for binding.\n+\t(lookup_name_innermost_nonclass_level_1): Delete.\n+\t(lookup_name_innermost_nonclass_level): Delete.\n+\n \t* Make-lang.in (CXX_AND_OBJCXX_OBJS): Alphabetize.\n \n \t* cp-tree.h (cp_free_lang_data): Add extern."}, {"sha": "a3c2ed094721c443ca03097725e04ff54c6f54e6", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -608,25 +608,8 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t       is instantiated.  */\n \t    decl = push_template_decl_real (decl, /*is_friend=*/true);\n \t  else if (current_function_decl)\n-\t    {\n-\t      /* This must be a local class.  11.5p11:\n-\n-\t\t If a friend declaration appears in a local class (9.8) and\n-\t\t the name specified is an unqualified name, a prior\n-\t\t declaration is looked up without considering scopes that\n-\t\t are outside the innermost enclosing non-class scope. For a\n-\t\t friend function declaration, if there is no prior\n-\t\t declaration, the program is ill-formed.  */\n-\t      tree t = lookup_name_innermost_nonclass_level (DECL_NAME (decl));\n-\t      if (t)\n-\t\tdecl = pushdecl (decl, /*is_friend=*/true);\n-\t      else\n-\t\t{\n-\t\t  error (\"friend declaration %qD in local class without \"\n-\t\t\t \"prior declaration\", decl);\n-\t\t  return error_mark_node;\n-\t\t}\n-\t    }\n+\t    /* pushdecl will check there's a local decl already.  */\n+\t    decl = pushdecl (decl, /*is_friend=*/true);\n \t  else\n \t    {\n \t      /* We can't use pushdecl, as we might be in a template"}, {"sha": "c689702722edc6eac2a35ae24012ecb2629e12ab", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -2103,7 +2103,13 @@ push_local_binding (tree id, tree decl, bool is_using)\n      push_local_binding with a friend decl of a local class.  */\n   b = innermost_nonclass_level ();\n \n-  if (lookup_name_innermost_nonclass_level (id))\n+  cxx_binding *binding = NULL;\n+  if (b->kind == sk_namespace)\n+    binding = find_namespace_binding (current_namespace, id);\n+  else\n+    binding = find_local_binding (b, id);\n+\n+  if (binding)\n     {\n       /* Supplement the existing binding.  */\n       if (!supplement_binding (IDENTIFIER_BINDING (id), decl))\n@@ -5430,37 +5436,6 @@ lookup_type_scope (tree name, tag_scope scope)\n   return ret;\n }\n \n-\n-/* Similar to `lookup_name' but look only in the innermost non-class\n-   binding level.  */\n-\n-static tree\n-lookup_name_innermost_nonclass_level_1 (tree name)\n-{\n-  cp_binding_level *b = innermost_nonclass_level ();\n-  cxx_binding *binding = NULL;\n-\n-  if (b->kind == sk_namespace)\n-    binding = find_namespace_binding (current_namespace, name);\n-  else\n-    binding = find_local_binding (b, name);\n-\n-  return binding ? binding->value : NULL_TREE;\n-}\n-\n-/* Wrapper for lookup_name_innermost_nonclass_level_1.  */\n-\n-tree\n-lookup_name_innermost_nonclass_level (tree name)\n-{\n-  tree ret;\n-  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  ret = lookup_name_innermost_nonclass_level_1 (name);\n-  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n-  return ret;\n-}\n-\n-\n /* Returns true iff DECL is a block-scope extern declaration of a function\n    or variable.  */\n "}, {"sha": "637599c9be1b9035c61eeeef009dd66f0fc2cd6f", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -310,7 +310,6 @@ extern tree get_namespace_binding (tree ns, tree id);\n extern void set_global_binding (tree id, tree val);\n extern tree lookup_qualified_name (tree, tree, int, bool, /*hidden*/bool = false);\n extern tree lookup_name_nonclass (tree);\n-extern tree lookup_name_innermost_nonclass_level (tree);\n extern bool is_local_extern (tree);\n extern tree lookup_function_nonclass (tree, vec<tree, va_gc> *, bool);\n extern bool pushdecl_class_level (tree);"}, {"sha": "84026e31153439cc928631e4979b65fed81cfc81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -1,3 +1,9 @@\n+2017-05-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/friend12.C: Adjust diagnostics.\n+\t* g++.dg/lookup/friend19.C: New.\n+\t* g++.dg/lookup/friend20.C: New.\n+\n 2017-05-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/80544"}, {"sha": "eb61fb5237869b32fe7a43aab7c6babfc0e9e58f", "filename": "gcc/testsuite/g++.dg/lookup/friend12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend12.C?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -2,9 +2,9 @@\n \n void foo()\n {\n+  extern void bar (int); // not the bar we are looking for\n   struct A\n   {\n-    friend void bar();\t\t// { dg-error \"without prior declaration\" }\n+    friend void bar();\t// { dg-error \"without prior local declaration\" }\n   };\n-  bar();\t\t\t// { dg-error \"3:'bar' was not declared\" }\n }"}, {"sha": "346204b0114bef194a84d1010b4ac543d85963c1", "filename": "gcc/testsuite/g++.dg/lookup/friend19.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend19.C?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -0,0 +1,29 @@\n+// Make sure unhiding friends doesn't unhide similarly named friends\n+\n+struct X\n+{\n+  friend int foo (X);\n+};\n+\n+struct Y\n+{\n+  friend int foo (Y);\n+};\n+\n+void Baz ()\n+{\n+  foo (X());\n+  foo (Y());\n+}\n+\n+int foo (Y);\n+int foo (int);\n+// foo(X) still hidden\n+\n+void Bar ()\n+{\n+  foo (X());\n+  foo (Y());\n+  ::foo (X()); // { dg-error \"\" }\n+  ::foo (Y());\n+}"}, {"sha": "ecdc763ca06e84543e2d95b1ddeba9ebac81c1f4", "filename": "gcc/testsuite/g++.dg/lookup/friend20.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend20.C?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/80830\n+\n+template <int> class a;\n+class b\n+{\n+  friend int operator>> (int, b);\n+};\n+template <int c> int &operator>> (int &, a<c> &);\n+template <int = 3> class a\n+{\n+  friend int &operator>><> (int &, a &);\n+  a<>\n+  d ()\n+  {\n+  }\n+};"}, {"sha": "38915a7ffab5dfe4274986c856cc13918b3e99e1", "filename": "gcc/testsuite/g++.old-deja/g++.jason/scoping12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4f1c81153459ce6fc8c285a39c69e060ac604/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping12.C?ref=5ad4f1c81153459ce6fc8c285a39c69e060ac604", "patch": "@@ -2,9 +2,9 @@\n void f ()\n {\n   struct A {\n-    friend void g ();\t\t// { dg-error \"without prior declaration\" }\n+    friend void g ();\t// { dg-error \"without prior local declaration\" }\n   };\n }\n void h () {\n-  g ();\t\t\t\t// { dg-error \"3:'g' was not declared\" } no g in scope\n+  g ();\t\t\t// { dg-error \"3:'g' was not declared\" } no g in scope\n }"}]}