{"sha": "1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkOTNmYmZlOThhZmRjYjViZTk1YjgxYWZkNmU3ODhjMjI5NzVkMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-03-19T15:01:45Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-03-19T15:01:45Z"}, "message": "combine.c (try_combine): When changing the mode of a hard reg, make sure that doing so is valid.\n\n\t* combine.c (try_combine): When changing the mode of a hard reg, make\n\tsure that doing so is valid.\n\nFrom-SVN: r96730", "tree": {"sha": "c62efb2d340e59138526b2a6831e432d2357fb61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62efb2d340e59138526b2a6831e432d2357fb61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad93fbfe98afdcb5be95b81afd6e788c22975d2/comments", "author": null, "committer": null, "parents": [{"sha": "91a5bc9f9a8faf903c54b22a6e43e8450dd9a50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a5bc9f9a8faf903c54b22a6e43e8450dd9a50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a5bc9f9a8faf903c54b22a6e43e8450dd9a50f"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "c55ed73260e85581106f207cd23e9eb799c66ff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad93fbfe98afdcb5be95b81afd6e788c22975d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad93fbfe98afdcb5be95b81afd6e788c22975d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "patch": "@@ -1,3 +1,8 @@\n+2005-03-19  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* combine.c (try_combine): When changing the mode of a hard reg, make\n+\tsure that doing so is valid.\n+\n 2005-03-19  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/avr/avr.c (avr_init_stack, avr_mcu_name): Make static."}, {"sha": "87a2f8dc1cfc49b7174df8f3bf9be98f3ff6de01", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad93fbfe98afdcb5be95b81afd6e788c22975d2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad93fbfe98afdcb5be95b81afd6e788c22975d2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "patch": "@@ -2373,11 +2373,17 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t  && REG_P (i2dest)\n #endif\n \t  /* We need I2DEST in the proper mode.  If it is a hard register\n-\t     or the only use of a pseudo, we can change its mode.  */\n+\t     or the only use of a pseudo, we can change its mode.\n+\t     Make sure we don't change a hard register to have a mode that\n+\t     isn't valid for it, or change the number of registers.  */\n \t  && (GET_MODE (*split) == GET_MODE (i2dest)\n \t      || GET_MODE (*split) == VOIDmode\n-\t      || REGNO (i2dest) < FIRST_PSEUDO_REGISTER\n-\t      || (REG_N_SETS (REGNO (i2dest)) == 1 && ! added_sets_2\n+\t      || (REGNO (i2dest) < FIRST_PSEUDO_REGISTER\n+\t\t  && HARD_REGNO_MODE_OK (REGNO (i2dest), GET_MODE (*split))\n+\t\t  && (HARD_REGNO_NREGS (REGNO (i2dest), GET_MODE (i2dest))\n+\t\t      == HARD_REGNO_NREGS (REGNO (i2dest), GET_MODE (*split))))\n+\t      || (REGNO (i2dest) >= FIRST_PSEUDO_REGISTER\n+\t\t  && REG_N_SETS (REGNO (i2dest)) == 1 && ! added_sets_2\n \t\t  && ! REG_USERVAR_P (i2dest)))\n \t  && (next_real_insn (i2) == i3\n \t      || ! use_crosses_set_p (*split, INSN_CUID (i2)))"}]}