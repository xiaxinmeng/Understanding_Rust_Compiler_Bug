{"sha": "52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2MDk0NzNmODBmMGEwY2Y5ZjQ2NDNlYWFmM2M3MjU4NWNjMWYxNg==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2003-06-30T22:01:00Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-06-30T22:01:00Z"}, "message": "2084.md: New file.\n\n\t* config/s390/2084.md: New file.\n\t* config/s390/s390.md: Include it.\n\t* config/s390/s390.c (s390_adjust_priority): New function.\n\t(TARGET_SCHED_ADJUST_PRIORITY): Define.\n\t(s390_first_cycle_multipass_dfa_lookahead): New function.\n\t(TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD): Define.\n\t(s390_sched_reorder2): New function.\n\t(TARGET_SCHED_REORDER2): Define.\n\t(s390_adjust_cost): Support PROCESSOR_2084_Z990 cpu type.\n\t(s390_issue_rate): Likewise.\n\nCo-Authored-By: Ulrich Weigand <uweigand@de.ibm.com>\n\nFrom-SVN: r68743", "tree": {"sha": "952570c65a10b89948a821a9b5dfabde4840bc6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/952570c65a10b89948a821a9b5dfabde4840bc6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/comments", "author": null, "committer": null, "parents": [{"sha": "ed2df68b4b119cbfa7765c45075d16208a63c30e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2df68b4b119cbfa7765c45075d16208a63c30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2df68b4b119cbfa7765c45075d16208a63c30e"}], "stats": {"total": 359, "additions": 355, "deletions": 4}, "files": [{"sha": "2890f666eae5110cab3555688df3121bad86b6d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "patch": "@@ -1,3 +1,17 @@\n+2003-06-30  Hartmut Penner  <hpenner@de.ibm.com>\n+            Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/2084.md: New file.\n+\t* config/s390/s390.md: Include it.\n+\t* config/s390/s390.c (s390_adjust_priority): New function.\n+\t(TARGET_SCHED_ADJUST_PRIORITY): Define.\n+\t(s390_first_cycle_multipass_dfa_lookahead): New function.\n+\t(TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD): Define.\n+\t(s390_sched_reorder2): New function.\n+\t(TARGET_SCHED_REORDER2): Define.\n+\t(s390_adjust_cost): Support PROCESSOR_2084_Z990 cpu type.\n+\t(s390_issue_rate): Likewise.\n+\n Mon Jun 30 23:47:33 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* Makefile.in (GTFILES): Add cgraph.h."}, {"sha": "e8d7761688b9946462a33c2699a797bff53329f5", "filename": "gcc/config/s390/2084.md", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2Fconfig%2Fs390%2F2084.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2Fconfig%2Fs390%2F2084.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2084.md?ref=52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "patch": "@@ -0,0 +1,262 @@\n+;; Scheduling description for z990 (cpu 2084).\n+;;   Copyright (C) 2003 Free Software Foundation, Inc.\n+;;   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+;;                  Ulrich Weigand (uweigand@de.ibm.com).\n+;;\n+;; This file is part of GNU CC.\n+;;\n+;; GNU CC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GNU CC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GNU CC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+(define_automaton \"x_ipu\")\n+\n+(define_cpu_unit \"x_e1_r,x_e1_s,x_e1_t\"  \"x_ipu\")\n+(define_cpu_unit \"x_wr_r,x_wr_s,x_wr_t,x_wr_fp\" \"x_ipu\")\n+(define_cpu_unit \"x_s1,x_s2,x_s3,x_s4\"   \"x_ipu\")\n+(define_cpu_unit \"x_t1,x_t2,x_t3,x_t4\"   \"x_ipu\")\n+(define_cpu_unit \"x_f1,x_f2,x_f3,x_f4,x_f5,x_f6\"   \"x_ipu\")\n+(define_cpu_unit \"x_store_tok\"   \"x_ipu\")\n+(define_cpu_unit \"x_ms,x_mt\"   \"x_ipu\")\n+\n+(define_reservation \"x-e1-st\" \"(x_e1_s | x_e1_t)\")\n+\n+(define_reservation \"x-e1-np\" \"(x_e1_r + x_e1_s + x_e1_t)\")\n+\n+(absence_set \"x_e1_r\" \"x_e1_s,x_e1_t\")\n+(absence_set \"x_e1_s\" \"x_e1_t\")\n+\n+;; Try to avoid int <-> fp transitions.\n+\n+(define_reservation \"x-x\" \"x_s1|x_t1,x_s2|x_t2,x_s3|x_t3,x_s4|x_t4\")\n+(define_reservation \"x-f\" \"x_f1,x_f2,x_f3,x_f4,x_f5,x_f6\")\n+(define_reservation \"x-wr-st\" \"((x_wr_s | x_wr_t),x-x)\")\n+(define_reservation \"x-wr-np\" \"((x_wr_r + x_wr_s + x_wr_t),x-x)\")\n+(define_reservation \"x-wr-fp\" \"x_wr_fp,x-f\")\n+(define_reservation \"x-mem\"   \"x_ms|x_mt\")\n+\n+(absence_set \"x_wr_fp\"\n+             \"x_s1,x_s2,x_s3,x_s4,x_t1,x_t2,x_t3,x_t4,x_wr_s,x_wr_t\")\n+\n+(absence_set \"x_e1_r,x_wr_r,x_wr_s,x_wr_t\"\n+             \"x_f1,x_f2,x_f3,x_f4,x_f5,x_f6,x_wr_fp\")\n+\n+;; Don't have any load type insn in same group as store\n+\n+(absence_set \"x_ms,x_mt\" \"x_store_tok\")\n+\n+\n+;;\n+;; Simple insns\n+;;\n+\n+(define_insn_reservation \"x_lr\" 1\n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"lr\"))\n+  \"x-e1-st,x-wr-st\") \n+\n+(define_insn_reservation \"x_la\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"la\"))\n+  \"x-e1-st,x-wr-st\") \n+\n+(define_insn_reservation \"x_larl\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"larl\"))\n+  \"x-e1-st,x-wr-st\") \n+\n+(define_insn_reservation \"x_load\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"load\"))\n+  \"x-e1-st+x-mem,x-wr-st\") \n+\n+(define_insn_reservation \"x_store\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"store\"))\n+  \"x-e1-st+x_store_tok,x-wr-st\") \n+\n+(define_insn_reservation \"x_branch\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"x_e1_r,x_wr_r\") \n+\n+(define_insn_reservation \"x_call\" 5 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"jsr\"))\n+  \"x-e1-np*5,x-wr-np\") \n+\n+;;\n+;; Multicycle insns\n+;;\n+\n+(define_insn_reservation \"x_ss\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"op_type\" \"SS\"))\n+  \"x-e1-np,x-wr-np\") \n+\n+(define_insn_reservation \"x_stm\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"stm\"))\n+  \"(x-e1-np+x_store_tok)*10,x-wr-np\") \n+\n+(define_insn_reservation \"x_lm\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"lm\"))\n+  \"x-e1-np*10,x-wr-np\") \n+\n+(define_insn_reservation \"x_nn\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"op_type\" \"NN\"))\n+  \"x-e1-np,x-wr-np\") \n+\n+(define_insn_reservation \"x_o2\" 2 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"o2\"))\n+  \"x-e1-np*2,x-wr-np\") \n+\n+(define_insn_reservation \"x_o3\" 3 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"o3\"))\n+  \"x-e1-np*3,x-wr-np\") \n+\n+;;\n+;; Floating point insns\n+;;\n+\n+(define_insn_reservation \"x_fsimpd\" 6 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"fsimpd,fmuld\"))\n+  \"x_e1_t,x-wr-fp\") \n+\n+(define_insn_reservation \"x_fsimps\" 6 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"fsimps,fmuls\"))\n+  \"x_e1_t,x-wr-fp\") \n+\n+(define_insn_reservation \"x_fdivd\" 36\n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"fdivd\"))\n+  \"x_e1_t*30,x-wr-fp\") \n+\n+(define_insn_reservation \"x_fdivs\" 36 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"fdivs\"))\n+  \"x_e1_t*30,x-wr-fp\") \n+\n+(define_insn_reservation \"x_floadd\" 6 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"floadd\"))\n+  \"x_e1_t,x-wr-fp\") \n+\n+(define_insn_reservation \"x_floads\" 6 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"floads\"))\n+  \"x_e1_t,x-wr-fp\") \n+\n+(define_insn_reservation \"x_fstored\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"fstored\"))\n+  \"x_e1_t,x-wr-fp\") \n+\n+(define_insn_reservation \"x_fstores\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"fstores\"))\n+  \"x_e1_t,x-wr-fp\") \n+\n+(define_insn_reservation \"x_ftoi\" 1 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"ftoi\"))\n+  \"x_e1_t*3,x-wr-fp\") \n+\n+(define_insn_reservation \"x_itof\" 7 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"itof\"))\n+  \"x_e1_t*3,x-wr-fp\") \n+\n+(define_bypass 1 \"x_fsimpd\" \"x_fstored\")\n+\n+(define_bypass 1 \"x_fsimps\" \"x_fstores\")\n+\n+(define_bypass 1 \"x_floadd\" \"x_fsimpd,x_fstored,x_floadd\")\n+\t         \n+(define_bypass 1 \"x_floads\" \"x_fsimps,x_fstores,x_floads\")\n+\n+;;\n+;; Insns still not mentioned are checked for\n+;; the usage of the agen unit \n+;;\n+\n+(define_insn_reservation \"x_int\" 1\n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"atype\" \"reg\"))\n+  \"x-e1-st,x-wr-st\") \n+\n+(define_insn_reservation \"x_agen\" 1\n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"atype\" \"agen\"))\n+  \"x-e1-st+x-mem,x-wr-st\") \n+\n+;;\n+;; s390_agen_dep_p returns 1, if a register is set in the \n+;; first insn and used in the dependend insn to form a address.\n+;;\n+\n+;;\n+;; If a intruction uses a register to address memory, it needs\n+;; to be set 5 cycles in advance.\n+;; \n+\n+(define_bypass 5 \"x_int,x_agen,x_lr\" \n+                 \"x_agen,x_la,x_call,x_load,x_store,x_ss,x_stm,x_lm\"\n+\t         \"s390_agen_dep_p\")\n+\n+(define_bypass 9 \"x_int,x_agen,x_lr\" \n+                 \"x_floadd, x_floads, x_fstored, x_fstores,\\\n+\t\t  x_fsimpd, x_fsimps, x_fdivd, x_fdivs\"\n+\t         \"s390_agen_dep_p\")\n+;;\n+;; A load type instruction uses a bypass to feed the result back\t\n+;; to the address generation pipeline stage. \n+;;\n+\n+(define_bypass 4 \"x_load\"    \n+                 \"x_agen,x_la,x_call,x_load,x_store,x_ss,x_stm,x_lm\"\n+\t         \"s390_agen_dep_p\")\n+\n+(define_bypass 5 \"x_load\"\n+                 \"x_floadd, x_floads, x_fstored, x_fstores,\\\n+\t\t  x_fsimpd, x_fsimps, x_fdivd, x_fdivs\"\n+\t         \"s390_agen_dep_p\")\n+\n+;;\n+;; A load address type instruction uses a bypass to feed the \n+;; result back to the address generation pipeline stage. \n+;;\n+\n+(define_bypass 3 \"x_larl,x_la\" \n+                 \"x_agen,x_la,x_call,x_load,x_store,x_ss,x_stm,x_lm\"\n+\t         \"s390_agen_dep_p\")\n+\n+(define_bypass 5 \"x_larl, x_la\"\n+                 \"x_floadd, x_floads, x_fstored, x_fstores,\\\n+\t\t  x_fsimpd, x_fsimps, x_fdivd, x_fdivs\"\n+\t         \"s390_agen_dep_p\")\n+\n+;;\n+;; Operand forwarding\n+;;\n+\n+(define_bypass 0 \"x_lr,x_la,x_load\" \"x_int,x_lr\")\n+\n+"}, {"sha": "acec015ddbbba2c64956d7586769f6d7c7caafa0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 78, "deletions": 4, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "patch": "@@ -68,12 +68,16 @@ static void s390_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n static enum attr_type s390_safe_attr_type PARAMS ((rtx));\n \n static int s390_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+static int s390_adjust_priority PARAMS ((rtx, int));\n static int s390_issue_rate PARAMS ((void));\n static int s390_use_dfa_pipeline_interface PARAMS ((void));\n+static int s390_first_cycle_multipass_dfa_lookahead PARAMS ((void));\n+static int s390_sched_reorder2 PARAMS ((FILE *, int, rtx *, int *, int));\n static bool s390_rtx_costs PARAMS ((rtx, int, int, int *));\n static int s390_address_cost PARAMS ((rtx));\n static void s390_reorg PARAMS ((void));\n \n+\n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n #undef  TARGET_ASM_ALIGNED_DI_OP\n@@ -115,10 +119,16 @@ static void s390_reorg PARAMS ((void));\n \n #undef  TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST s390_adjust_cost\n+#undef  TARGET_SCHED_ADJUST_PRIORITY\n+#define TARGET_SCHED_ADJUST_PRIORITY s390_adjust_priority\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE s390_issue_rate\n #undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE\n #define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE s390_use_dfa_pipeline_interface\n+#undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n+#define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD s390_first_cycle_multipass_dfa_lookahead\n+#undef TARGET_SCHED_REORDER2\n+#define TARGET_SCHED_REORDER2 s390_sched_reorder2\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS s390_rtx_costs\n@@ -3611,7 +3621,6 @@ addr_generation_dependency_p (dep_rtx, insn)\n \n /* Return 1, if dep_insn sets register used in insn in the agen unit.  */\n \n-\n int \n s390_agen_dep_p(dep_insn, insn)\n      rtx dep_insn;\n@@ -3634,7 +3643,6 @@ s390_agen_dep_p(dep_insn, insn)\n   return 0;\n }\n \n-\n /* Return the modified cost of the dependency of instruction INSN\n    on instruction DEP_INSN through the link LINK.  COST is the \n    default cost of that dependency.\n@@ -3669,7 +3677,16 @@ s390_adjust_cost (insn, link, dep_insn, cost)\n \n   /* DFA based scheduling checks address dependency in md file.  */\n   if (s390_use_dfa_pipeline_interface ())\n-     return cost;\n+  {\n+    /* Operand forward in case of lr, load and la.  */ \n+    if (s390_tune == PROCESSOR_2084_Z990\n+        && cost == 1\n+\t&& (s390_safe_attr_type (dep_insn) == TYPE_LA\n+\t    || s390_safe_attr_type (dep_insn) == TYPE_LR\n+\t    || s390_safe_attr_type (dep_insn) == TYPE_LOAD))\n+      return 0;\n+    return cost;\n+  }\n \n   dep_rtx = PATTERN (dep_insn);\n \n@@ -3687,12 +3704,47 @@ s390_adjust_cost (insn, link, dep_insn, cost)\n \n   return cost;\n }\n+/* A C statement (sans semicolon) to update the integer scheduling priority\n+   INSN_PRIORITY (INSN).  Increase the priority to execute the INSN earlier,\n+   reduce the priority to execute INSN later.  Do not define this macro if\n+   you do not need to adjust the scheduling priorities of insns. \n+\n+   A STD instruction should be scheduled earlier, \n+   in order to use the bypass.  */\n+\n+static int\n+s390_adjust_priority (insn, priority)\n+     rtx insn ATTRIBUTE_UNUSED;\n+     int priority;\n+{\n+  if (! INSN_P (insn))\n+    return priority;\n+\n+  if (s390_tune != PROCESSOR_2084_Z990)\n+    return priority;\n+\n+  switch (s390_safe_attr_type (insn))\n+    {\n+      case TYPE_FSTORED:\n+      case TYPE_FSTORES:\n+\tpriority = priority << 3;\n+\tbreak;\n+      case TYPE_STORE:\n+\tpriority = priority << 1;\n+\tbreak;\n+      default:\n+        break;\n+    }\n+  return priority;\n+}\n \n /* The number of instructions that can be issued per cycle.  */\n \n static int\n s390_issue_rate ()\n {\n+  if (s390_tune == PROCESSOR_2084_Z990) \n+    return 3;\n   return 1;\n }\n \n@@ -3702,12 +3754,34 @@ s390_issue_rate ()\n static int\n s390_use_dfa_pipeline_interface ()\n {\n-  if (s390_tune == PROCESSOR_2064_Z900)\n+  if (s390_tune == PROCESSOR_2064_Z900\n+      || s390_tune == PROCESSOR_2084_Z990)\n     return 1;\n+\n   return 0;\n+}\n+\n+static int\n+s390_first_cycle_multipass_dfa_lookahead ()\n+{\n+  return s390_use_dfa_pipeline_interface () ? 4 : 0;\n+}\n+\n+/* Called after issuing each insn.\n+   Triggers default sort algorithm to better slot instructions.  */\n \n+static int\n+s390_sched_reorder2 (dump, sched_verbose, ready, pn_ready, clock_var)\n+     FILE *dump ATTRIBUTE_UNUSED;\n+     int sched_verbose ATTRIBUTE_UNUSED;\n+     rtx *ready ATTRIBUTE_UNUSED;\n+     int *pn_ready ATTRIBUTE_UNUSED;\n+     int clock_var ATTRIBUTE_UNUSED;\n+{\n+    return s390_issue_rate();\n }\n \n+\n /* Split all branches that exceed the maximum distance.  \n    Returns true if this created a new literal pool entry.  \n "}, {"sha": "9b1fcacc45ebbd226caec373a8a72d6c250f9148", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52609473f80f0a0cf9f4643eaaf3c72585cc1f16/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=52609473f80f0a0cf9f4643eaaf3c72585cc1f16", "patch": "@@ -219,6 +219,7 @@\n ;; Pipeline description for z900\n \n (include \"2064.md\")\n+(include \"2084.md\")\n \n ;; Length in bytes.\n "}]}