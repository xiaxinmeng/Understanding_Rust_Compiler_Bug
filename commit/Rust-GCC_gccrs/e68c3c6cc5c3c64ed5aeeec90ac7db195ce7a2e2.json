{"sha": "e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4YzNjNmNjNWMzYzY0ZWQ1YWVlZWM5MGFjN2RiMTk1Y2U3YTJlMg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-01-07T18:32:39Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-01-07T18:32:39Z"}, "message": "re PR middle-end/42178 (Invalid memory access in graphite)\n\nFix PR42178.\n\n2010-01-05  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/42178\n\t* graphite-interchange.c (lst_try_interchange_loops): Do not return\n\tthe before, nest, and after LSTs.\n\t(lst_try_interchange): Removed.\n\t(lst_interchange_select_inner): Do not iterate over the LSTs if they\n\twere modified.\n\t(lst_interchange_select_outer): Apply interchange on the outer loop\n\tuntil there are no more changes in the inner loops.\n\nFrom-SVN: r155701", "tree": {"sha": "d6886aa930a75c6b1151268d8edd5f7ce5f601e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6886aa930a75c6b1151268d8edd5f7ce5f601e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3095eb8e4c7e9b01caf12d71ead8aababcc9ab68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3095eb8e4c7e9b01caf12d71ead8aababcc9ab68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3095eb8e4c7e9b01caf12d71ead8aababcc9ab68"}], "stats": {"total": 93, "additions": 35, "deletions": 58}, "files": [{"sha": "882dc39b4046d4805c671b2d7390cdcee5ca2547", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2", "patch": "@@ -1,3 +1,14 @@\n+2010-01-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/42178\n+\t* graphite-interchange.c (lst_try_interchange_loops): Do not return\n+\tthe before, nest, and after LSTs.\n+\t(lst_try_interchange): Removed.\n+\t(lst_interchange_select_inner): Do not iterate over the LSTs if they\n+\twere modified.\n+\t(lst_interchange_select_outer): Apply interchange on the outer loop\n+\tuntil there are no more changes in the inner loops.\n+\n 2009-12-18  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tRevert patch fixing PR middle-end/42221."}, {"sha": "a0f84a76510cbd837cb8abc53af07dd03ddc7a0b", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 24, "deletions": 58, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=e68c3c6cc5c3c64ed5aeeec90ac7db195ce7a2e2", "patch": "@@ -596,35 +596,31 @@ lst_perfect_nestify (lst_p loop1, lst_p loop2, lst_p *before,\n \n /* Try to interchange LOOP1 with LOOP2 for all the statements of the\n    body of LOOP2.  LOOP1 contains LOOP2.  Return true if it did the\n-   interchange.  CREATED_LOOP_BEFORE/CREATED_LOOP_AFTER are set to\n-   true if the loop distribution created a loop before/after LOOP1.  */\n+   interchange.  */\n \n static bool\n-lst_try_interchange_loops (scop_p scop, lst_p loop1, lst_p loop2,\n-\t\t\t   lst_p *before, lst_p *nest, lst_p *after)\n+lst_try_interchange_loops (scop_p scop, lst_p loop1, lst_p loop2)\n {\n   int depth1 = lst_depth (loop1);\n   int depth2 = lst_depth (loop2);\n   lst_p transformed;\n \n-  *before = NULL;\n-  *after = NULL;\n-  *nest = NULL;\n+  lst_p before = NULL, nest = NULL, after = NULL;\n \n   if (!lst_interchange_profitable_p (loop2, depth1, depth2))\n     return false;\n \n   if (!lst_perfectly_nested_p (loop1, loop2))\n-    lst_perfect_nestify (loop1, loop2, before, nest, after);\n+    lst_perfect_nestify (loop1, loop2, &before, &nest, &after);\n \n   lst_apply_interchange (loop2, depth1, depth2);\n \n   /* Sync the transformed LST information and the PBB scatterings\n      before using the scatterings in the data dependence analysis.  */\n-  if (*before || *nest || *after)\n+  if (before || nest || after)\n     {\n       transformed = lst_substitute_3 (SCOP_TRANSFORMED_SCHEDULE (scop), loop1,\n-\t\t\t\t      *before, *nest, *after);\n+\t\t\t\t      before, nest, after);\n       lst_update_scattering (transformed);\n       free_lst (transformed);\n     }\n@@ -637,12 +633,12 @@ lst_try_interchange_loops (scop_p scop, lst_p loop1, lst_p loop2,\n \t\t depth1, depth2);\n \n       /* Transform the SCOP_TRANSFORMED_SCHEDULE of the SCOP.  */\n-      lst_insert_in_sequence (*before, loop1, true);\n-      lst_insert_in_sequence (*after, loop1, false);\n+      lst_insert_in_sequence (before, loop1, true);\n+      lst_insert_in_sequence (after, loop1, false);\n \n-      if (*nest)\n+      if (nest)\n \t{\n-\t  lst_replace (loop1, *nest);\n+\t  lst_replace (loop1, nest);\n \t  free_lst (loop1);\n \t}\n \n@@ -651,63 +647,34 @@ lst_try_interchange_loops (scop_p scop, lst_p loop1, lst_p loop2,\n \n   /* Undo the transform.  */\n   lst_apply_interchange (loop2, depth2, depth1);\n-  *before = NULL;\n-  *after = NULL;\n-  *nest = NULL;\n   return false;\n }\n \n-static bool lst_interchange_select_inner (scop_p, lst_p, int, lst_p);\n-\n-/* Try to interchange loop OUTER of LST_SEQ (OUTER_FATHER) with all\n-   the loop INNER and with all the loops contained in the body of\n-   INNER.  Return true if it did interchanged some loops.  */\n-\n-static bool\n-lst_try_interchange (scop_p scop, lst_p outer_father, int outer, lst_p inner)\n-{\n-  lst_p before, nest, after;\n-  bool res;\n-  lst_p loop1 = VEC_index (lst_p, LST_SEQ (outer_father), outer);\n-  lst_p loop2 = inner;\n-\n-  gcc_assert (LST_LOOP_P (loop1)\n-\t      && LST_LOOP_P (loop2));\n-\n-  res = lst_try_interchange_loops (scop, loop1, loop2, &before, &nest, &after);\n-\n-  if (before)\n-    res |= lst_interchange_select_inner (scop, outer_father, outer, before);\n-  else if (nest)\n-    res |= lst_interchange_select_inner (scop, outer_father, outer, nest);\n-  else\n-    res |= lst_interchange_select_inner (scop, outer_father, outer, loop2);\n-\n-  return res;\n-}\n-\n /* Selects the inner loop in LST_SEQ (INNER_FATHER) to be interchanged\n    with the loop OUTER in LST_SEQ (OUTER_FATHER).  */\n \n static bool\n lst_interchange_select_inner (scop_p scop, lst_p outer_father, int outer,\n \t\t\t      lst_p inner_father)\n {\n-  lst_p l;\n-  bool res = false;\n   int inner;\n+  lst_p loop1, loop2;\n \n   gcc_assert (outer_father\n \t      && LST_LOOP_P (outer_father)\n \t      && LST_LOOP_P (VEC_index (lst_p, LST_SEQ (outer_father), outer))\n \t      && inner_father\n \t      && LST_LOOP_P (inner_father));\n \n-  for (inner = 0; VEC_iterate (lst_p, LST_SEQ (inner_father), inner, l); inner++)\n-    if (LST_LOOP_P (l))\n-      res |= lst_try_interchange (scop, outer_father, outer, l);\n+  loop1 = VEC_index (lst_p, LST_SEQ (outer_father), outer);\n \n-  return res;\n+  for (inner = 0; VEC_iterate (lst_p, LST_SEQ (inner_father), inner, loop2); inner++)\n+    if (LST_LOOP_P (loop2)\n+\t&& (lst_try_interchange_loops (scop, loop1, loop2)\n+\t    || lst_interchange_select_inner (scop, outer_father, outer, loop2)))\n+      return true;\n+\n+  return false;\n }\n \n /* Interchanges all the loops of LOOP and the loops of its body that\n@@ -729,12 +696,11 @@ lst_interchange_select_outer (scop_p scop, lst_p loop, int outer)\n   father = LST_LOOP_FATHER (loop);\n   if (father)\n     {\n-      res = lst_interchange_select_inner (scop, father, outer, loop);\n-\n-      if (VEC_length (lst_p, LST_SEQ (father)) <= (unsigned) outer)\n-\treturn res;\n-\n-      loop = VEC_index (lst_p, LST_SEQ (father), outer);\n+      while (lst_interchange_select_inner (scop, father, outer, loop))\n+\t{\n+\t  res = true;\n+\t  loop = VEC_index (lst_p, LST_SEQ (father), outer);\n+\t}\n     }\n \n   if (LST_LOOP_P (loop))"}]}