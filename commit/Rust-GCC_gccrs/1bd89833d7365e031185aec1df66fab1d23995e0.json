{"sha": "1bd89833d7365e031185aec1df66fab1d23995e0", "node_id": "C_kwDOANBUbNoAKDFiZDg5ODMzZDczNjVlMDMxMTg1YWVjMWRmNjZmYWIxZDIzOTk1ZTA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-09T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-09T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "4c9ebf044a0669ebc90297465814ddf3b013b495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c9ebf044a0669ebc90297465814ddf3b013b495"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bd89833d7365e031185aec1df66fab1d23995e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd89833d7365e031185aec1df66fab1d23995e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bd89833d7365e031185aec1df66fab1d23995e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd89833d7365e031185aec1df66fab1d23995e0/comments", "author": null, "committer": null, "parents": [{"sha": "206c08ce28a3c70afa4ecf9274611295d6369218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206c08ce28a3c70afa4ecf9274611295d6369218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206c08ce28a3c70afa4ecf9274611295d6369218"}], "stats": {"total": 353, "additions": 352, "deletions": 1}, "files": [{"sha": "e4b9ad0a179ced0c10ac8e8635cb2f58a5846533", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd89833d7365e031185aec1df66fab1d23995e0/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd89833d7365e031185aec1df66fab1d23995e0/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1bd89833d7365e031185aec1df66fab1d23995e0", "patch": "@@ -1,3 +1,7 @@\n+2021-11-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* update-copyright.py (class BadYear): Derive from 'Exception'.\n+\n 2021-11-05  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* testsuite-management/validate_failures.py: 2to3"}, {"sha": "fb1c04b1f87ae1a867d4577d13f2639e0ca1934a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 310, "deletions": 0, "changes": 310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd89833d7365e031185aec1df66fab1d23995e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd89833d7365e031185aec1df66fab1d23995e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bd89833d7365e031185aec1df66fab1d23995e0", "patch": "@@ -1,3 +1,313 @@\n+2021-11-08  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def (VEC_INIT_V16QI): Use\n+\tescape-newline support.\n+\t(VEC_INIT_V4SI): Likewise.\n+\t(VEC_INIT_V8HI): Likewise.\n+\t(PACK_V1TI): Likewise.\n+\t(DIVDEU): Likewise.\n+\t(VFIRSTMISMATCHOREOSINDEX_V16QI): Likewise.\n+\t(VFIRSTMISMATCHOREOSINDEX_V8HI): Likewise.\n+\t(VFIRSTMISMATCHOREOSINDEX_V4SI): Likewise.\n+\t(CMPRB2): Likewise.\n+\t(VSTDCP): Likewise.\n+\t(VSIEDP): Likewise.\n+\t(FMAF128_ODD): Likewise.\n+\t(VSCEQPUO): Likewise.\n+\t(VSIEQP): Likewise.\n+\t(VSIEQPF): Likewise.\n+\t(VSTDCQP): Likewise.\n+\t(PACK_TD): Likewise.\n+\t(TABORTDC): Likewise.\n+\t(TABORTDCI): Likewise.\n+\t(SE_LXVRBX): Likewise.\n+\t(SE_LXVRHX): Likewise.\n+\t(SE_LXVRWX): Likewise.\n+\t(SE_LXVRDX): Likewise.\n+\t(VREPLACE_UN_UV2DI): Likewise.\n+\t(VREPLACE_UN_UV4SI): Likewise.\n+\t(VREPLACE_UN_V2DI): Likewise.\n+\t(VREPLACE_ELT_UV2DI): Likewise.\n+\t(VREPLACE_ELT_V2DI): Likewise.\n+\t(ZE_LXVRBX): Likewise.\n+\t(ZE_LXVRHX): Likewise.\n+\t(ZE_LXVRWX): Likewise.\n+\t(ZE_LXVRDX): Likewise.\n+\t(CFUGED): Likewise.\n+\t(CNTLZDM): Likewise.\n+\t(CNTTZDM): Likewise.\n+\t(PDEPD): Likewise.\n+\t(PEXTD): Likewise.\n+\t(PMXVBF16GER2): Likewise.\n+\t(PMXVBF16GER2_INTERNAL): Likewise.\n+\t(PMXVBF16GER2NN): Likewise.\n+\t(PMXVBF16GER2NN_INTERNAL): Likewise.\n+\t(PMXVBF16GER2NP): Likewise.\n+\t(PMXVBF16GER2NP_INTERNAL): Likewise.\n+\t(PMXVBF16GER2PN): Likewise.\n+\t(PMXVBF16GER2PN_INTERNAL): Likewise.\n+\t(PMXVBF16GER2PP): Likewise.\n+\t(PMXVBF16GER2PP_INTERNAL): Likewise.\n+\t(PMXVF16GER2): Likewise.\n+\t(PMXVF16GER2_INTERNAL): Likewise.\n+\t(PMXVF16GER2NN): Likewise.\n+\t(PMXVF16GER2NN_INTERNAL): Likewise.\n+\t(PMXVF16GER2NP): Likewise.\n+\t(PMXVF16GER2NP_INTERNAL): Likewise.\n+\t(PMXVF16GER2PN): Likewise.\n+\t(PMXVF16GER2PN_INTERNAL): Likewise.\n+\t(PMXVF16GER2PP): Likewise.\n+\t(PMXVF16GER2PP_INTERNAL): Likewise.\n+\t(PMXVF32GER_INTERNAL): Likewise.\n+\t(PMXVF32GERNN): Likewise.\n+\t(PMXVF32GERNN_INTERNAL): Likewise.\n+\t(PMXVF32GERNP): Likewise.\n+\t(PMXVF32GERNP_INTERNAL): Likewise.\n+\t(PMXVF32GERPN): Likewise.\n+\t(PMXVF32GERPN_INTERNAL): Likewise.\n+\t(PMXVF32GERPP): Likewise.\n+\t(PMXVF32GERPP_INTERNAL): Likewise.\n+\t(PMXVF64GER): Likewise.\n+\t(PMXVF64GER_INTERNAL): Likewise.\n+\t(PMXVF64GERNN): Likewise.\n+\t(PMXVF64GERNN_INTERNAL): Likewise.\n+\t(PMXVF64GERNP): Likewise.\n+\t(PMXVF64GERNP_INTERNAL): Likewise.\n+\t(PMXVF64GERPN): Likewise.\n+\t(PMXVF64GERPN_INTERNAL): Likewise.\n+\t(PMXVF64GERPP): Likewise.\n+\t(PMXVF64GERPP_INTERNAL): Likewise.\n+\t(PMXVI16GER2): Likewise.\n+\t(PMXVI16GER2_INTERNAL): Likewise.\n+\t(PMXVI16GER2PP): Likewise.\n+\t(PMXVI16GER2PP_INTERNAL): Likewise.\n+\t(PMXVI16GER2S): Likewise.\n+\t(PMXVI16GER2S_INTERNAL): Likewise.\n+\t(PMXVI16GER2SPP): Likewise.\n+\t(PMXVI16GER2SPP_INTERNAL): Likewise.\n+\t(PMXVI4GER8): Likewise.\n+\t(PMXVI4GER8_INTERNAL): Likewise.\n+\t(PMXVI4GER8PP): Likewise.\n+\t(PMXVI4GER8PP_INTERNAL): Likewise.\n+\t(PMXVI8GER4): Likewise.\n+\t(PMXVI8GER4_INTERNAL): Likewise.\n+\t(PMXVI8GER4PP): Likewise.\n+\t(PMXVI8GER4PP_INTERNAL): Likewise.\n+\t(PMXVI8GER4SPP): Likewise.\n+\t(PMXVI8GER4SPP_INTERNAL): Likewise.\n+\t* config/rs6000/rs6000-gen-builtins.c (MAXLINES): New macro.\n+\t(linebuf): Increase size.\n+\t(lines): New variable.\n+\t(lastline): Likewise.\n+\t(real_line_pos): New function.\n+\t(diag): Change signature.\n+\t(bif_diag): Change signature; support escape-newline handling.\n+\t(ovld_diag): Likewise.\n+\t(fatal): Move earlier.\n+\t(consume_whitespace): Adjust diag call.\n+\t(advance_line): Add escape-newline handling; call fatal.\n+\t(safe_inc_pos): Adjust diag call.\n+\t(match_identifier): Likewise.\n+\t(match_integer): Likewise.\n+\t(match_to_right_bracket): Call fatal instead of diag; adjust diag\n+\tcall.\n+\t(match_basetype): Adjust diag calls.\n+\t(match_bracketed_pair): Likewise.\n+\t(match_const_restriction): Likewise.\n+\t(match_type): Likewise.\n+\t(parse_args): Likewise.\n+\t(parse_bif_attrs): Likewise.\n+\t(complete_vector_type): Likewise.\n+\t(complete_base_type): Likewise.\n+\t(parse_prototype): Likewise.\n+\t(parse_bif_entry): Likewise.\n+\t(parse_bif_stanza): Likewise.\n+\t(parse_ovld_entry): Likewise.\n+\t(parse_ovld_stanza): Likewise.\n+\t(main): Allocate buffers for lines[].\n+\n+2021-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/i386/i386.c (legitimize_pic_address): Adjust comment and\n+\tuse the REG argument on the CM_LARGE_PIC code path as well.\n+\t* config/i386/predicates.md (gotoff_operand): Do not treat VxWorks\n+\tspecially with the large code models.\n+\n+2021-11-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gimple.c (gimple_call_static_chain_flags): Revert the workaround\n+\tallowing interposition since issues with binds_to_local_def were\n+\thopefully solved.\n+\n+2021-11-08  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103122\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): Request the cache\n+\tentry with \"calulate new values\" set to false.\n+\n+2021-11-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* builtins.c (is_simple_builtin): Add builitin_dwarf_cfa\n+\tand builtin_return_address.\n+\t(builtin_fnspec): Annotate builtin_return,\n+\tbulitin_eh_pointer, builtin_eh_filter, builtin_unwind_resume,\n+\tbuiltin_cxa_end_cleanup, builtin_eh_copy_values,\n+\tbuiltin_frame_address, builtin_apply_args,\n+\tbuiltin_asan_before_dynamic_init, builtin_asan_after_dynamic_init,\n+\tbuiltin_prefetch, builtin_dwarf_cfa, builtin_return_addrss\n+\tas \".c\"\n+\t* ipa-pure-const.c (special_builtin_state): Add builtin_dwarf_cfa\n+\tand builtin_return_address.\n+\n+2021-11-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR tree-optimization/103177\n+\t* passes.def: Move uncprop after pure/const and modref.\n+\n+2021-11-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103099\n+\tPR ipa/103107\n+\t* tree-inline.c (remap_gimple_stmt): Unshare the expression without\n+\tlocation before invoking remap_with_debug_expressions on it.\n+\t* ipa-param-manipulation.c\n+\t(ipa_param_body_adjustments::prepare_debug_expressions): Likewise.\n+\n+2021-11-08  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/vsx.md (vsx_splat_v4si_di): Revert \"wa\"\n+\tconstraint to \"we\".\n+\n+2021-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgloop.c (verify_loop_structure): Use a temporary BB flag\n+\tinstead of an sbitmap to cache irreducible state.\n+\n+2021-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103120\n+\t* gimple-range-path.cc (path_range_query::range_defined_in_block):\n+\tBail if there's a cache entry.\n+\n+2021-11-08  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_builtin_reciprocal): Use\n+\trs6000_builtin_decls_x when appropriate.\n+\t(add_condition_to_bb): Likewise.\n+\t(rs6000_atomic_assign_expand_fenv): Likewise.\n+\n+2021-11-08  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_new_builtin_decl): New function.\n+\t(rs6000_builtin_decl): Call it.\n+\n+2021-11-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraph.c (cgraph_node::dump): Dump it from decl.\n+\n+2021-11-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/100520\n+\t* coverage.c (coverage_compute_profile_id): Strip .gk when\n+\tcompare debug is used.\n+\t* system.h (endswith): New function.\n+\n+2021-11-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraph.c (cgraph_node::dump): Dump static_chain_decl.\n+\n+2021-11-08  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/rs6000/rbtree.c: Fix 'Copyright (C) 2020-21' into '2020-2021'\n+\t* config/rs6000/rbtree.h: Likewise.\n+\t* config/rs6000/rs6000-builtin-new.def: Likewise.\n+\t* config/rs6000/rs6000-gen-builtins.c: Likewise.\n+\t* config/rs6000/rs6000-overload.def: Likewise.\n+\n+2021-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_ldn_stn_vectors): New function.\n+\t(aarch64_address_cost): Use it instead of testing for CImode and\n+\tXImode directly.\n+\n+2021-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* genmodes.c (emit_insn_modes_h): Define NUM_MODE_* macros.\n+\t* expmed.h (NUM_MODE_INT): Delete in favor of genmodes definitions.\n+\t(NUM_MODE_PARTIAL_INT, NUM_MODE_VECTOR_INT): Likewise.\n+\t* real.h (real_format_for_mode): Use NUM_MODE_FLOAT and\n+\tNUM_MODE_DECIMAL_FLOAT.\n+\t(REAL_MODE_FORMAT): Likewise.\n+\n+2021-11-08  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* tree-vect-loop.c (vect_better_loop_vinfo_p): Change how epilogue loop\n+\tcosts are compared.\n+\n+2021-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_create_loop_vinfo): Add main_loop_info\n+\tparameter.\n+\t* tree-vect-loop.c (vect_create_loop_vinfo): Likewise.  Set\n+\tLOOP_VINFO_ORIG_LOOP_INFO and conditionalize set of\n+\tLOOP_VINFO_NITERS_ASSUMPTIONS.\n+\t(vect_analyze_loop_1): Adjust.\n+\t(vect_analyze_loop): Move loop constraint setting and\n+\tSCEV/niter reset here from vect_create_loop_vinfo to perform\n+\tit only once.\n+\t(vect_analyze_loop_form): Move dumping of symbolic niters\n+\there from vect_create_loop_vinfo.\n+\n+2021-11-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.h (enum modref_special_parms): New enum.\n+\t(struct modref_access_node): update for special parms.\n+\t(struct modref_ref_node): Likewise.\n+\t(struct modref_parm_map): Likewise.\n+\t(struct modref_tree): Likewise.\n+\t* ipa-modref.c (dump_access): Likewise.\n+\t(get_access): Detect static chain.\n+\t(parm_map_for_arg): Take tree as arg instead of\n+\tstmt and index.\n+\t(merge_call_side_effects): Compute map for static chain.\n+\t(process_fnspec): Update.\n+\t(struct escape_point): Remove retslot_arg and static_chain_arg.\n+\t(analyze_parms): Update.\n+\t(compute_parm_map): Update.\n+\t(propagate_unknown_call): Update.\n+\t(modref_propagate_in_scc): Update.\n+\t(modref_merge_call_site_flags): Update.\n+\t(ipa_merge_modref_summary_after_inlining): Update.\n+\t* tree-ssa-alias.c (modref_may_conflict): Handle static chain.\n+\t* ipa-modref-tree.c (test_merge): Update.\n+\n+2021-11-08  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_builtin): Disable\n+\tgimple fold for VSX_BUILTIN_XVMINDP, ALTIVEC_BUILTIN_VMINFP,\n+\tVSX_BUILTIN_XVMAXDP, ALTIVEC_BUILTIN_VMAXFP when fast-math is not\n+\tset.\n+\n+2021-11-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/103077\n+\t* doc/invoke.texi (Options That Control Optimization):\n+\tUpdate documentation for -ftree-loop-vectorize and\n+\t-ftree-slp-vectorize which are enabled by default at -02.\n+\n+2021-11-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* match.pd (Simplifcation (trunc)copysign((extend)a, (extend)b)\n+\tto .COPYSIGN (a, b)): Add !HONOR_SNANS.\n+\n+2021-11-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* match.pd: Simplify\n+\t(trunc)fma ((extend)a, (extend)b, (extend)c) to IFN_FMA (a, b,\n+\tc) under flag_unsafe_math_optimizations.\n+\n 2021-11-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/103055"}, {"sha": "f11a2f562bb71231788cde3db7f75f0edbd15a8c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd89833d7365e031185aec1df66fab1d23995e0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd89833d7365e031185aec1df66fab1d23995e0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1bd89833d7365e031185aec1df66fab1d23995e0", "patch": "@@ -1 +1 @@\n-20211108\n+20211109"}, {"sha": "7402f802bbc91f385a16622a7230f6eb61c59ea5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd89833d7365e031185aec1df66fab1d23995e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd89833d7365e031185aec1df66fab1d23995e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bd89833d7365e031185aec1df66fab1d23995e0", "patch": "@@ -1,3 +1,40 @@\n+2021-11-08  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* g++.dg/pr103122.C: New.\n+\n+2021-11-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103099\n+\tPR ipa/103107\n+\t* g++.dg/ipa/pr103099.C: New test.\n+\t* gcc.dg/ipa/pr103107.c: Likewise.\n+\n+2021-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr103120.c: New test.\n+\n+2021-11-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/100520\n+\t* gcc.dg/pr100520.c: New test.\n+\n+2021-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/neoverse_v1_1.c: New test.\n+\n+2021-11-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-12.c: New test.\n+\n+2021-11-08  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-minmax-1.c: New test.\n+\t* gcc.target/powerpc/vec-minmax-2.c: Likewise.\n+\n+2021-11-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr102464-fma.c: New test.\n+\n 2021-11-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.dg/co_reduce_2.f90: New test."}]}