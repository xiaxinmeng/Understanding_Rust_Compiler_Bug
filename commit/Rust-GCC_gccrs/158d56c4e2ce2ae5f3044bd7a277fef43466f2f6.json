{"sha": "158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4ZDU2YzRlMmNlMmFlNWYzMDQ0YmQ3YTI3N2ZlZjQzNDY2ZjJmNg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-09-08T02:49:11Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-09-08T02:49:11Z"}, "message": "006-09-07  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR C++/28906\n        * init.c (build_new_1): Build a distinct type copy\n        for the array type that was returned from\n        build_cplus_array_type.\n2006-09-07  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR C++/28906\n        * g++.dg/other/array3.C: New test.\n        * g++.dg/other/array4.C: New test.\n        * g++.dg/other/array5.C: New test.\n\nFrom-SVN: r116776", "tree": {"sha": "3a3d650f1d3ba0ceb1866a66d52764d7858dbcb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a3d650f1d3ba0ceb1866a66d52764d7858dbcb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/comments", "author": null, "committer": null, "parents": [{"sha": "d0655f33aa551fddb74b0d8c591b0f58468b8527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0655f33aa551fddb74b0d8c591b0f58468b8527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0655f33aa551fddb74b0d8c591b0f58468b8527"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "a914e2a3074ee7c7d8e8b2dffdcc0c4385ebe9fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "patch": "@@ -1,3 +1,10 @@\n+2006-09-07  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR C++/28906\n+\t* init.c (build_new_1): Build a distinct type copy\n+\tfor the array type that was returned from\n+\tbuild_cplus_array_type.\n+\n 2006-09-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/27371\n@@ -15,7 +22,7 @@\n \n 2006-09-06  Zak Kipling  <zak@transversal.com>\n \n-        PR c++/26195\n+\tPR c++/26195\n \t* decl.c (make_rtl_for_nonlocal_decl),\n \t(start_preparsed_function): Don't use lbasename on\n \tinput_filename when calling get_fileinfo."}, {"sha": "ad40736c60be30fb320902e841436f15291a3ae6", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "patch": "@@ -1628,10 +1628,14 @@ build_new_1 (tree placement, tree type, tree nelts, tree init,\n \t function context.  Methinks that's not it's purvey.  So we'll do\n \t our own VLA layout later.  */\n       vla_p = true;\n-      full_type = build_cplus_array_type (type, NULL_TREE);\n       index = convert (sizetype, nelts);\n       index = size_binop (MINUS_EXPR, index, size_one_node);\n-      TYPE_DOMAIN (full_type) = build_index_type (index);\n+      index = build_index_type (index);\n+      full_type = build_cplus_array_type (type, NULL_TREE);\n+      /* We need a copy of the type as build_array_type will return a shared copy\n+         of the incomplete array type.  */\n+      full_type = build_distinct_type_copy (full_type);\n+      TYPE_DOMAIN (full_type) = index;\n     }\n   else\n     {"}, {"sha": "2ec550fd12489897f7bb09735a084e53275a181c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "patch": "@@ -1,3 +1,10 @@\n+2006-09-07  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR C++/28906\n+\t* g++.dg/other/array3.C: New test.\n+\t* g++.dg/other/array4.C: New test.\n+\t* g++.dg/other/array5.C: New test.\n+\n 2006-09-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr28946.c (dg-options): Use -Os instead -O.\n@@ -11,7 +18,7 @@\n \n \t* gfortran.fortran-torture/compile/data_1.f90: Fix integer oveflow\n \tin integer literal constant.\n-  \t* gfortran.dg/enum_8.f90: Ditto.\n+\t* gfortran.dg/enum_8.f90: Ditto.\n \t* gfortran.dg/g77/20030326-1.f: Ditto.\n \n 2006-09-07  Feng Wang  <fengwang@nudt.edu.cn>"}, {"sha": "ce3641e8ccd26b07e368434945cc045f336e4626", "filename": "gcc/testsuite/g++.dg/other/array3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray3.C?ref=158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "patch": "@@ -0,0 +1,14 @@\n+// PR C++/28906: new on an array causes incomplete arrays to\n+// become complete with the wrong size.\n+\n+// the bounds of xvalue_store was being set to include want\n+// which was incorrect.\n+\n+// { dg-do compile }\n+\n+extern unsigned char xvalue_store[];\n+bool reserve (int want)\n+{\n+  new unsigned char[want];\n+}\n+unsigned char xvalue_store[257];"}, {"sha": "97ccc986d61ef05f4f48aef47155fcd1a168deb1", "filename": "gcc/testsuite/g++.dg/other/array4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray4.C?ref=158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "patch": "@@ -0,0 +1,19 @@\n+// PR C++/28906: new on an array causes incomplete arrays to\n+// become complete with the wrong size.\n+// The sizeof machineMain should be 5 and not 100.\n+// { dg-do run }\n+\n+\n+extern char machineMain[];\n+void sort (long len)\n+{\n+  new char[100];\n+}\n+char machineMain[] = \"main\";\n+int main(void)\n+{\n+  if (sizeof(machineMain)!=sizeof(\"main\"))\n+    __builtin_abort();\n+}\n+\n+"}, {"sha": "df551e380a767b1b50c3d4c1fd61782ddb63f62d", "filename": "gcc/testsuite/g++.dg/other/array5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158d56c4e2ce2ae5f3044bd7a277fef43466f2f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray5.C?ref=158d56c4e2ce2ae5f3044bd7a277fef43466f2f6", "patch": "@@ -0,0 +1,9 @@\n+// Check to make sure changing from an incomplete\n+// array type to a complete one does not change other\n+// incomplete array type's bounds.\n+// { dg-do compile }\n+\n+extern unsigned char xvalue_store[];\n+extern unsigned char xvalue_store1[];\n+unsigned char xvalue_store[7];\n+unsigned char xvalue_store1[9];"}]}