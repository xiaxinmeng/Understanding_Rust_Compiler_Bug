{"sha": "307b599c91ee93049fd69228b9d59b6ea2e030ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3YjU5OWM5MWVlOTMwNDlmZDY5MjI4YjlkNTliNmVhMmUwMzBlZg==", "commit": {"author": {"name": "Matt Kraai", "email": "kraai@alumni.cmu.edu", "date": "2003-05-19T00:31:10Z"}, "committer": {"name": "Matt Kraai", "email": "kraai@gcc.gnu.org", "date": "2003-05-19T00:31:10Z"}, "message": "flags.h (g_switch_value): Change to an unsigned HOST_WIDE_INT.\n\n\t* flags.h (g_switch_value): Change to an unsigned\n\tHOST_WIDE_INT.\n\t* toplev.c (g_switch_value): Likewise.\n\n\t* config/alpha/alpha.c (small_symbolic_operand): Remove\n\tg_switch_value cast.\n\t(alpha_in_small_data_p): Cast size to an unsigned\n\tHOST_WIDE_INT.\n\n\t* config/frv/frv.c (frv_in_small_data_p): Cast size to an\n\tunsigned HOST_WIDE_INT.\n\t* config/frv/frv.h (g_switch_value, g_switch_set): Remove.\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Declare g_switch_set.\n\n\t* config/m32r/m32r.c (m32r_in_small_data_p): Cast size to an\n\tunsigned HOST_WIDE_INT.\n\t(m32r_asm_file_start): Use HOST_WIDE_INT_PRINT_UNSIGNED.\n\t* config/m32r/m32r.h (g_switch_value, g_switch_set): Remove.\n\t(ASM_OUTPUT_ALIGNED_COMMON): Declare g_switch_value.\n\n\t* config/rs6000/rs6000.c (rs6000_file_start): Use\n\tHOST_WIDE_INT_PRINT_UNSIGNED.\n\t(small_data_operand): Cast summand to unsigned HOST_WIDE_INT.\n\t(rs6000_elf_in_small_data_p): Cast size to unsigned\n\tHOST_WIDE_INT.\n\t* config/rs6000/sysv4.h (g_switch_value, g_switch_set):\n\tRemove.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Declare g_switch_value and\n\tg_switch_set.\n\t(ASM_OUTPUT_ALIGNED_LOCAL): Declare g_switch_value and remove\n\tg_switch_value cast.\n\nFrom-SVN: r66945", "tree": {"sha": "f366b57eefbdbdfedd85abe04f495ca30220e2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f366b57eefbdbdfedd85abe04f495ca30220e2a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/307b599c91ee93049fd69228b9d59b6ea2e030ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307b599c91ee93049fd69228b9d59b6ea2e030ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307b599c91ee93049fd69228b9d59b6ea2e030ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307b599c91ee93049fd69228b9d59b6ea2e030ef/comments", "author": null, "committer": null, "parents": [{"sha": "48ef54fb15e8bdddcd9eca447577cceeac3a5b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ef54fb15e8bdddcd9eca447577cceeac3a5b3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ef54fb15e8bdddcd9eca447577cceeac3a5b3a"}], "stats": {"total": 78, "additions": 56, "deletions": 22}, "files": [{"sha": "41f88875975b7fc1d5566b222ac35f9c908b443a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -1,3 +1,37 @@\n+2003-05-18  Matt Kraai  <kraai@alumni.cmu.edu>\n+\n+\t* flags.h (g_switch_value): Change to an unsigned\n+\tHOST_WIDE_INT.\n+\t* toplev.c (g_switch_value): Likewise.\n+\n+\t* config/alpha/alpha.c (small_symbolic_operand): Remove\n+\tg_switch_value cast. \n+\t(alpha_in_small_data_p): Cast size to an unsigned\n+\tHOST_WIDE_INT.\n+\n+\t* config/frv/frv.c (frv_in_small_data_p): Cast size to an\n+\tunsigned HOST_WIDE_INT.\n+\t* config/frv/frv.h (g_switch_value, g_switch_set): Remove.\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Declare g_switch_set.\n+\n+\t* config/m32r/m32r.c (m32r_in_small_data_p): Cast size to an\n+\tunsigned HOST_WIDE_INT.\n+\t(m32r_asm_file_start): Use HOST_WIDE_INT_PRINT_UNSIGNED.\n+\t* config/m32r/m32r.h (g_switch_value, g_switch_set): Remove.\n+\t(ASM_OUTPUT_ALIGNED_COMMON): Declare g_switch_value.\n+\n+\t* config/rs6000/rs6000.c (rs6000_file_start): Use\n+\tHOST_WIDE_INT_PRINT_UNSIGNED.\n+\t(small_data_operand): Cast summand to unsigned HOST_WIDE_INT.\n+\t(rs6000_elf_in_small_data_p): Cast size to unsigned\n+\tHOST_WIDE_INT.\n+\t* config/rs6000/sysv4.h (g_switch_value, g_switch_set):\n+\tRemove.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Declare g_switch_value and\n+\tg_switch_set.\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): Declare g_switch_value and remove\n+\tg_switch_value cast.\n+\n 2003-05-18  Roger Sayle  <roger@eyesopen.com>\n \t    Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "76f399e3c6e15119f1d5eb7ef5893763b50ec392", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -1166,7 +1166,7 @@ small_symbolic_operand (op, mode)\n   /* ??? There's no encode_section_info equivalent for the rtl\n      constant pool, so SYMBOL_FLAG_SMALL never gets set.  */\n   if (CONSTANT_POOL_ADDRESS_P (op))\n-    return GET_MODE_SIZE (get_pool_mode (op)) <= (unsigned) g_switch_value;\n+    return GET_MODE_SIZE (get_pool_mode (op)) <= g_switch_value;\n \n   return (SYMBOL_REF_LOCAL_P (op)\n \t  && SYMBOL_REF_SMALL_P (op)\n@@ -1891,7 +1891,7 @@ alpha_in_small_data_p (exp)\n \n       /* If this is an incomplete type with size 0, then we can't put it\n \t in sdata because it might be too big when completed.  */\n-      if (size > 0 && size <= g_switch_value)\n+      if (size > 0 && (unsigned HOST_WIDE_INT) size <= g_switch_value)\n \treturn true;\n     }\n "}, {"sha": "c2a8ef95c6cdc5e5c9b8d2e9f6507a7e8a325d66", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -9714,7 +9714,7 @@ frv_in_small_data_p (decl)\n     return false;\n \n   size = int_size_in_bytes (TREE_TYPE (decl));\n-  if (size > 0 && size <= g_switch_value)\n+  if (size > 0 && (unsigned HOST_WIDE_INT) size <= g_switch_value)\n     return true;\n \n   /* If we already know which section the decl should be in, see if"}, {"sha": "f7d46c0ab80e29456ea845eb00a27086f1f851b4", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -554,9 +554,6 @@ extern int target_flags;\n #define SDATA_DEFAULT_SIZE 8\n #endif\n \n-extern int g_switch_value;        /* value of the -G xx switch */\n-extern int g_switch_set;          /* whether -G xx was passed.  */\n-\n \n /* Storage Layout */\n \n@@ -2783,6 +2780,8 @@ extern int size_directive_output;\n #undef ASM_OUTPUT_ALIGNED_DECL_LOCAL\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGN)\t\\\n do {                                                                   \t\\\n+  extern unsigned HOST_WIDE_INT g_switch_value;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if ((SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\t\\\n     sbss_section ();                                                 \t\\\n   else                                                                 \t\\"}, {"sha": "a4d3c1254d5257602866ce8992a3e1c214f4164a", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -433,7 +433,7 @@ m32r_in_small_data_p (decl)\n \t{\n \t  int size = int_size_in_bytes (TREE_TYPE (decl));\n \n-\t  if (size > 0 && size <= g_switch_value)\n+\t  if (size > 0 && (unsigned HOST_WIDE_INT) size <= g_switch_value)\n \t    return true;\n \t}\n     }\n@@ -2208,7 +2208,8 @@ m32r_asm_file_start (file)\n      FILE * file;\n {\n   if (flag_verbose_asm)\n-    fprintf (file, \"%s M32R/D special options: -G %d\\n\",\n+    fprintf (file,\n+\t     \"%s M32R/D special options: -G \" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n \t     ASM_COMMENT_START, g_switch_value);\n }\n \f"}, {"sha": "ab7d5fc9484f0b5e3f2a6d5c20dae275b3e0bc85", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -350,9 +350,6 @@ extern enum m32r_model m32r_model;\n #define SDATA_DEFAULT_SIZE 8\n #endif\n \n-extern int g_switch_value;\t\t/* value of the -G xx switch */\n-extern int g_switch_set;\t\t/* whether -G xx was passed.  */\n-\n enum m32r_sdata { M32R_SDATA_NONE, M32R_SDATA_SDATA, M32R_SDATA_USE };\n \n extern enum m32r_sdata m32r_sdata;\n@@ -1690,6 +1687,8 @@ extern char m32r_punct_chars[256];\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      extern unsigned HOST_WIDE_INT g_switch_value;\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       if (! TARGET_SDATA_NONE\t\t\t\t\t\t\\\n \t  && (SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\\\n \tfprintf ((FILE), \"%s\", SCOMMON_ASM_OP);\t\t\t\t\\"}, {"sha": "770df4f3d53d6cca222c71b7b1c6c3221525418f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -950,7 +950,8 @@ rs6000_file_start (file, default_cpu)\n \n       if (rs6000_sdata && g_switch_value)\n \t{\n-\t  fprintf (file, \"%s -G %d\", start, g_switch_value);\n+\t  fprintf (file, \"%s -G \" HOST_WIDE_INT_PRINT_UNSIGNED, start,\n+\t\t   g_switch_value);\n \t  start = \"\";\n \t}\n #endif\n@@ -2254,7 +2255,7 @@ small_data_operand (op, mode)\n       /* We have to be careful here, because it is the referenced address\n         that must be 32k from _SDA_BASE_, not just the symbol.  */\n       summand = INTVAL (XEXP (sum, 1));\n-      if (summand < 0 || summand > g_switch_value)\n+      if (summand < 0 || (unsigned HOST_WIDE_INT) summand > g_switch_value)\n        return 0;\n \n       sym_ref = XEXP (sum, 0);\n@@ -13452,7 +13453,7 @@ rs6000_elf_in_small_data_p (decl)\n       HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n \n       if (size > 0\n-\t  && size <= g_switch_value\n+\t  && (unsigned HOST_WIDE_INT) size <= g_switch_value\n \t  /* If it's not public, and we're not going to reference it there,\n \t     there's no need to put it in the small data section.  */\n \t  && (rs6000_sdata != SDATA_DATA || TREE_PUBLIC (decl)))"}, {"sha": "d266c283ccad416772dd19c6f94c847f038ac8e0", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -89,11 +89,6 @@ extern const char *rs6000_tls_size_string; /* For -mtls-size= */\n   { \"tls-size=\", &rs6000_tls_size_string,\t\t\t\t\t\\\n    N_(\"Specify bit size of immediate TLS offsets\"), 0 }\n \n-/* Max # of bytes for variables to automatically be put into the .sdata\n-   or .sdata2 sections.  */\n-extern int g_switch_value;\t\t/* Value of the -G xx switch.  */\n-extern int g_switch_set;\t\t/* Whether -G xx was passed.  */\n-\n #define SDATA_DEFAULT_SIZE 8\n \n /* Note, V.4 no longer uses a normal TOC, so make -mfull-toc, be just\n@@ -171,6 +166,9 @@ extern int g_switch_set;\t\t/* Whether -G xx was passed.  */\n \n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n+  extern unsigned HOST_WIDE_INT g_switch_value;\t\t\t\t\\\n+  extern int g_switch_set;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if (!g_switch_set)\t\t\t\t\t\t\t\\\n     g_switch_value = SDATA_DEFAULT_SIZE;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -665,8 +663,10 @@ extern int rs6000_pic_labelno;\n #undef\tASM_OUTPUT_ALIGNED_LOCAL\n #define\tASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n+  extern unsigned HOST_WIDE_INT g_switch_value;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if (rs6000_sdata != SDATA_NONE && (SIZE) > 0\t\t\t\t\\\n-      && (SIZE) <= (unsigned HOST_WIDE_INT)g_switch_value)\t\t\\\n+      && (SIZE) <= g_switch_value)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       sbss_section ();\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (FILE, exact_log2 (ALIGN / BITS_PER_UNIT));\t\\"}, {"sha": "4050517d37968ee4fda651cebe8ddf8a35b83bad", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -586,7 +586,7 @@ extern int frame_pointer_needed;\n extern int flag_trapv;\n \n /* Value of the -G xx switch, and whether it was passed or not.  */\n-extern int g_switch_value;\n+extern unsigned HOST_WIDE_INT g_switch_value;\n extern int g_switch_set;\n \n /* Values of the -falign-* flags: how much to align labels in code. "}, {"sha": "7cfb29e8ef6d274cf137bfd2131309126e5fd8cf", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b599c91ee93049fd69228b9d59b6ea2e030ef/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=307b599c91ee93049fd69228b9d59b6ea2e030ef", "patch": "@@ -329,7 +329,7 @@ enum graph_dump_types graph_dump_format;\n char *asm_file_name;\n \n /* Value of the -G xx switch, and whether it was passed or not.  */\n-int g_switch_value;\n+unsigned HOST_WIDE_INT g_switch_value;\n int g_switch_set;\n \n /* Type(s) of debugging information we are producing (if any)."}]}