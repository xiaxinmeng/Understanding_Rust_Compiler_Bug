{"sha": "bf30864e4c241e50585745af504b09db55f7f08b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzMDg2NGU0YzI0MWU1MDU4NTc0NWFmNTA0YjA5ZGI1NWY3ZjA4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:12:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:12:41Z"}, "message": "[AArch64] Use SVE FABD in conditional arithmetic\n\nThis patch extends the FABD support so that it handles conditional\narithmetic.  We're relying on combine for this, since there's no\nassociated IFN_COND_* (yet?).\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*aarch64_cond_abd<SVE_F:mode>_2)\n\t(*aarch64_cond_abd<SVE_F:mode>_3)\n\t(*aarch64_cond_abd<SVE_F:mode>_any): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_fabd_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_fabd_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fabd_5_run.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274507", "tree": {"sha": "263ba880bd579045c9c5b78fd27c48a3857cbc94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/263ba880bd579045c9c5b78fd27c48a3857cbc94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf30864e4c241e50585745af504b09db55f7f08b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf30864e4c241e50585745af504b09db55f7f08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf30864e4c241e50585745af504b09db55f7f08b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf30864e4c241e50585745af504b09db55f7f08b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9730c5ccd522cd955bcb6e65295023621cade8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9730c5ccd522cd955bcb6e65295023621cade8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9730c5ccd522cd955bcb6e65295023621cade8b6"}], "stats": {"total": 457, "additions": 457, "deletions": 0}, "files": [{"sha": "593e8fb6e625b73e51303ac5e82f99d666fc3c41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -1,3 +1,10 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (*aarch64_cond_abd<SVE_F:mode>_2)\n+\t(*aarch64_cond_abd<SVE_F:mode>_3)\n+\t(*aarch64_cond_abd<SVE_F:mode>_any): New patterns.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "b1e2f2434aeb06e69c90f92f386067074d3f2fde", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -2795,6 +2795,123 @@\n   }\n )\n \n+;; Predicated floating-point absolute difference, merging with the first\n+;; input.\n+(define_insn_and_rewrite \"*aarch64_cond_abd<mode>_2\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (unspec:SVE_F\n+\t\t[(match_operand 6)\n+\t\t (match_operand:SI 7 \"aarch64_sve_gp_strictness\")\n+\t\t (match_operand:SVE_F 2 \"register_operand\" \"0, w\")\n+\t\t (match_operand:SVE_F 3 \"register_operand\" \"w, w\")]\n+\t\tUNSPEC_COND_FSUB)]\n+\t     UNSPEC_COND_FABS)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\n+   && aarch64_sve_pred_dominates_p (&operands[6], operands[1])\"\n+  \"@\n+   fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  \"&& (!rtx_equal_p (operands[1], operands[4])\n+       || !rtx_equal_p (operands[1], operands[6]))\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+    operands[6] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated floating-point absolute difference, merging with the second\n+;; input.\n+(define_insn_and_rewrite \"*aarch64_cond_abd<mode>_3\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (unspec:SVE_F\n+\t\t[(match_operand 6)\n+\t\t (match_operand:SI 7 \"aarch64_sve_gp_strictness\")\n+\t\t (match_operand:SVE_F 2 \"register_operand\" \"w, w\")\n+\t\t (match_operand:SVE_F 3 \"register_operand\" \"0, w\")]\n+\t\tUNSPEC_COND_FSUB)]\n+\t     UNSPEC_COND_FABS)\n+\t   (match_dup 3)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\n+   && aarch64_sve_pred_dominates_p (&operands[6], operands[1])\"\n+  \"@\n+   fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0, %3\\;fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\"\n+  \"&& (!rtx_equal_p (operands[1], operands[4])\n+       || !rtx_equal_p (operands[1], operands[6]))\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+    operands[6] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated floating-point absolute difference, merging with an\n+;; independent value.\n+(define_insn_and_rewrite \"*aarch64_cond_abd<mode>_any\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=&w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 5)\n+\t      (match_operand:SI 6 \"aarch64_sve_gp_strictness\")\n+\t      (unspec:SVE_F\n+\t\t[(match_operand 7)\n+\t\t (match_operand:SI 8 \"aarch64_sve_gp_strictness\")\n+\t\t (match_operand:SVE_F 2 \"register_operand\" \"0, w, w, w, w\")\n+\t\t (match_operand:SVE_F 3 \"register_operand\" \"w, 0, w, w, w\")]\n+\t\tUNSPEC_COND_FSUB)]\n+\t     UNSPEC_COND_FABS)\n+\t   (match_operand:SVE_F 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[2], operands[4])\n+   && !rtx_equal_p (operands[3], operands[4])\n+   && aarch64_sve_pred_dominates_p (&operands[5], operands[1])\n+   && aarch64_sve_pred_dominates_p (&operands[7], operands[1])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   #\"\n+  \"&& 1\"\n+  {\n+    if (reload_completed\n+        && register_operand (operands[4], <MODE>mode)\n+        && !rtx_equal_p (operands[0], operands[4]))\n+      {\n+\temit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[3],\n+\t\t\t\t\t\t operands[4], operands[1]));\n+\toperands[4] = operands[3] = operands[0];\n+      }\n+    else if (!rtx_equal_p (operands[1], operands[5])\n+\t     || !rtx_equal_p (operands[1], operands[7]))\n+      {\n+\toperands[5] = copy_rtx (operands[1]);\n+\toperands[7] = copy_rtx (operands[1]);\n+      }\n+    else\n+      FAIL;\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] Multiplication\n ;; -------------------------------------------------------------------------"}, {"sha": "62d5369724db6c7b0393a08b88ad0c9c50e9deff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -1,3 +1,17 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_fabd_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_fabd_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fabd_5_run.c: Likewise.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "c1f54e391a823fe717c65c928080772fb277c7c5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_1.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, ABS)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? ABS (b[i] - c[i]) : b[i];\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, __builtin_fabsf16) \\\n+  T (float, __builtin_fabsf) \\\n+  T (double, __builtin_fabs)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "a4d6972b95a7c119ac691d4d5a279638e2101136", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_1_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_1_run.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include \"cond_fabd_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, ABS)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? ABS (b[i] - c[i]) : b[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "dd6eecc1757e34cc749e3dbfb8a8ee185424b5f8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_2.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, ABS)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? ABS (b[i] - c[i]) : c[i];\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, __builtin_fabsf16) \\\n+  T (float, __builtin_fabsf) \\\n+  T (double, __builtin_fabs)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "28dc7d01115cf538418acfaa24c977a75b8e5b58", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_2_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_2_run.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include \"cond_fabd_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, ABS)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? ABS (b[i] - c[i]) : c[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "26fd7b265aa4396f9c5fba3dcb5cbf0c441bfa53", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_3.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, ABS)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? ABS (b[i] - c[i]) : a[i];\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, __builtin_fabsf16) \\\n+  T (float, __builtin_fabsf) \\\n+  T (double, __builtin_fabs)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "be21b7f99c9151d15980827a0359e5f4a34a3492", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_3_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_3_run.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include \"cond_fabd_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, ABS)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? ABS (b[i] - c[i]) : a[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "78f1fd91469dd96a4d5c02c0577bff3b0621b1e5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_4.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, ABS)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? ABS (b[i] - c[i]) : 8.0;\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, __builtin_fabsf16) \\\n+  T (float, __builtin_fabsf) \\\n+  T (double, __builtin_fabs)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 3 } } */"}, {"sha": "86bdab41502c1852efe59752090bbbcc0c9cd163", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_4_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_4_run.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include \"cond_fabd_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, ABS)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? ABS (b[i] - c[i]) : 8;\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "e66477b3bce0ed118d19306343a78ab24b3d11e7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_5.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, ABS)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? ABS (b[i] - c[i]) : 0.0;\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, __builtin_fabsf16) \\\n+  T (float, __builtin_fabsf) \\\n+  T (double, __builtin_fabs)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* Really we should be able to use MOVPRFX /Z here, but at the moment\n+   we're relying on combine to merge a SEL and an arithmetic operation,\n+   and the SEL doesn't allow zero operands.  */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 1 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} { xfail *-*-* } } } */"}, {"sha": "9fb5fbb815c772315bd375dfd2bfec7d626a28d1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fabd_5_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30864e4c241e50585745af504b09db55f7f08b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fabd_5_run.c?ref=bf30864e4c241e50585745af504b09db55f7f08b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include \"cond_fabd_5.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, ABS)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? ABS (b[i] - c[i]) : 0;\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}