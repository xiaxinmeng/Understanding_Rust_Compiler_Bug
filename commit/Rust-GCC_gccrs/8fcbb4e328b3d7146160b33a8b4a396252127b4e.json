{"sha": "8fcbb4e328b3d7146160b33a8b4a396252127b4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjYmI0ZTMyOGIzZDcxNDYxNjBiMzNhOGI0YTM5NjI1MjEyN2I0ZQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-09-20T16:41:26Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-09-20T16:41:26Z"}, "message": "[AArch64][3/5] Remove dead code\n\n2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_bitmasks): Remove.\n\t(AARCH64_NUM_BITMASKS): Remove.\n\t(aarch64_bitmasks_cmp): Remove.\n\t(aarch64_build_bitmask_table): Remove.\n\nFrom-SVN: r227948", "tree": {"sha": "43a3dae5ef3e85e8c33c67f5f404f3b0a58bd1c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43a3dae5ef3e85e8c33c67f5f404f3b0a58bd1c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fcbb4e328b3d7146160b33a8b4a396252127b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcbb4e328b3d7146160b33a8b4a396252127b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcbb4e328b3d7146160b33a8b4a396252127b4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcbb4e328b3d7146160b33a8b4a396252127b4e/comments", "author": null, "committer": null, "parents": [{"sha": "62c8d76c1037198e2400ff2f55adddf352988af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c8d76c1037198e2400ff2f55adddf352988af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c8d76c1037198e2400ff2f55adddf352988af7"}], "stats": {"total": 76, "additions": 7, "deletions": 69}, "files": [{"sha": "62fe65ee1b568f54e3cafa2bf2a8a1aa9833a418", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fcbb4e328b3d7146160b33a8b4a396252127b4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fcbb4e328b3d7146160b33a8b4a396252127b4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fcbb4e328b3d7146160b33a8b4a396252127b4e", "patch": "@@ -1,3 +1,10 @@\n+2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_bitmasks): Remove.\n+\t(AARCH64_NUM_BITMASKS): Remove.\n+\t(aarch64_bitmasks_cmp): Remove.\n+\t(aarch64_build_bitmask_table): Remove.\n+\n 2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_internal_mov_immediate): Replace"}, {"sha": "ca9fdbde9cc0a5283669ab39bfe3fdc2ab1f8e56", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fcbb4e328b3d7146160b33a8b4a396252127b4e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fcbb4e328b3d7146160b33a8b4a396252127b4e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8fcbb4e328b3d7146160b33a8b4a396252127b4e", "patch": "@@ -563,12 +563,6 @@ static const struct aarch64_option_extension all_extensions[] =\n    increment address.  */\n static machine_mode aarch64_memory_reference_mode;\n \n-/* A table of valid AArch64 \"bitmask immediate\" values for\n-   logical instructions.  */\n-\n-#define AARCH64_NUM_BITMASKS  5334\n-static unsigned HOST_WIDE_INT aarch64_bitmasks[AARCH64_NUM_BITMASKS];\n-\n typedef enum aarch64_cond_code\n {\n   AARCH64_EQ = 0, AARCH64_NE, AARCH64_CS, AARCH64_CC, AARCH64_MI, AARCH64_PL,\n@@ -3263,67 +3257,6 @@ aarch64_tls_referenced_p (rtx x)\n }\n \n \n-static int\n-aarch64_bitmasks_cmp (const void *i1, const void *i2)\n-{\n-  const unsigned HOST_WIDE_INT *imm1 = (const unsigned HOST_WIDE_INT *) i1;\n-  const unsigned HOST_WIDE_INT *imm2 = (const unsigned HOST_WIDE_INT *) i2;\n-\n-  if (*imm1 < *imm2)\n-    return -1;\n-  if (*imm1 > *imm2)\n-    return +1;\n-  return 0;\n-}\n-\n-\n-static void\n-aarch64_build_bitmask_table (void)\n-{\n-  unsigned HOST_WIDE_INT mask, imm;\n-  unsigned int log_e, e, s, r;\n-  unsigned int nimms = 0;\n-\n-  for (log_e = 1; log_e <= 6; log_e++)\n-    {\n-      e = 1 << log_e;\n-      if (e == 64)\n-\tmask = ~(HOST_WIDE_INT) 0;\n-      else\n-\tmask = ((HOST_WIDE_INT) 1 << e) - 1;\n-      for (s = 1; s < e; s++)\n-\t{\n-\t  for (r = 0; r < e; r++)\n-\t    {\n-\t      /* set s consecutive bits to 1 (s < 64) */\n-\t      imm = ((unsigned HOST_WIDE_INT)1 << s) - 1;\n-\t      /* rotate right by r */\n-\t      if (r != 0)\n-\t\timm = ((imm >> r) | (imm << (e - r))) & mask;\n-\t      /* replicate the constant depending on SIMD size */\n-\t      switch (log_e) {\n-\t      case 1: imm |= (imm <<  2);\n-\t      case 2: imm |= (imm <<  4);\n-\t      case 3: imm |= (imm <<  8);\n-\t      case 4: imm |= (imm << 16);\n-\t      case 5: imm |= (imm << 32);\n-\t      case 6:\n-\t\tbreak;\n-\t      default:\n-\t\tgcc_unreachable ();\n-\t      }\n-\t      gcc_assert (nimms < AARCH64_NUM_BITMASKS);\n-\t      aarch64_bitmasks[nimms++] = imm;\n-\t    }\n-\t}\n-    }\n-\n-  gcc_assert (nimms == AARCH64_NUM_BITMASKS);\n-  qsort (aarch64_bitmasks, nimms, sizeof (aarch64_bitmasks[0]),\n-\t aarch64_bitmasks_cmp);\n-}\n-\n-\n /* Return true if val can be encoded as a 12-bit unsigned immediate with\n    a left shift of 0 or 12 bits.  */\n bool\n@@ -8059,8 +7992,6 @@ aarch64_override_options (void)\n        || (aarch64_arch_string && valid_arch))\n     gcc_assert (explicit_arch != aarch64_no_arch);\n \n-  aarch64_build_bitmask_table ();\n-\n   aarch64_override_options_internal (&global_options);\n \n   /* Save these options as the default ones in case we push and pop them later"}]}