{"sha": "ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0N2YxZTU2ZTZkYzQxZWU3NzRjNTJiN2ZhMjU5ZDdlZWJiMmFhYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-12-28T09:51:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-12-28T09:51:20Z"}, "message": "c-typeck.c (store_init_value): If initializing object with array type of unknown size by a compound literal...\n\n\t* c-typeck.c (store_init_value): If initializing object with array\n\ttype of unknown size by a compound literal, set object's size from\n\tcompound literal size.\n\t* doc/extend.texi (Compound Literals): Adjust documentation.\n\n\t* gcc.dg/gnu89-init-1.c: Adjust for the new behaviour, add some\n\tadditional tests.\n\nFrom-SVN: r48343", "tree": {"sha": "e162df60bcf3b5fe5c9cded896de667eda0a09a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e162df60bcf3b5fe5c9cded896de667eda0a09a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6724881e63b36f7b174030d003b47b9c6a111a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6724881e63b36f7b174030d003b47b9c6a111a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6724881e63b36f7b174030d003b47b9c6a111a2"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "59dc83556778fb2f39aaf54bcb7bbe191c260b60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "patch": "@@ -1,3 +1,10 @@\n+2001-12-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.c (store_init_value): If initializing object with array\n+\ttype of unknown size by a compound literal, set object's size from\n+\tcompound literal size.\n+\t* doc/extend.texi (Compound Literals): Adjust documentation.\n+\n 2001-12-28  Richard Henderson  <rth@redhat.com>\n \n \t* real.c (etoe113, toe113): Ifndef INTEL_EXTENDED_IEEE_FORMAT."}, {"sha": "c2b4624ba2f7eaa384ca94ddf4f344391fa93ad6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "patch": "@@ -4495,6 +4495,33 @@ store_init_value (decl, init)\n   /* ANSI wants warnings about out-of-range constant initializers.  */\n   STRIP_TYPE_NOPS (value);\n   constant_expression_warning (value);\n+\n+  /* Check if we need to set array size from compound literal size.  */\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && TYPE_DOMAIN (type) == 0\n+      && value != error_mark_node)\n+    {\n+      tree inside_init = init;\n+\n+      if (TREE_CODE (init) == NON_LVALUE_EXPR)\n+\tinside_init = TREE_OPERAND (init, 0);\n+      inside_init = fold (inside_init);\n+\n+      if (TREE_CODE (inside_init) == COMPOUND_LITERAL_EXPR)\n+\t{\n+\t  tree decl = COMPOUND_LITERAL_EXPR_DECL (inside_init);\n+\n+\t  if (TYPE_DOMAIN (TREE_TYPE (decl)))\n+\t    {\n+\t      /* For int foo[] = (int [3]){1}; we need to set array size\n+\t\t now since later on array initializer will be just the\n+\t\t brace enclosed list of the compound literal.  */\n+\t      TYPE_DOMAIN (type) = TYPE_DOMAIN (TREE_TYPE (decl));\n+\t      layout_type (type);\n+\t      layout_decl (decl, 0);\n+\t    }\n+\t}\n+    }\n }\n \f\n /* Methods for storing and printing names for error messages.  */"}, {"sha": "2e22c1b7d9b410ba72485d2b0853ba4f9f7b0cf9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "patch": "@@ -1598,8 +1598,7 @@ It is handled as if the object was initialized only with the bracket\n enclosed list if compound literal's and object types match.\n The initializer list of the compound literal must be constant.\n If the object being initialized has array type of unknown size, the size is\n-determined by compound literal's initializer list, not by the size of the\n-compound literal.\n+determined by compound literal size.\n \n @example\n static struct foo x = (struct foo) @{1, 'a', 'b'@};\n@@ -1612,7 +1611,7 @@ The above lines are equivalent to the following:\n @example\n static struct foo x = @{1, 'a', 'b'@};\n static int y[] = @{1, 2, 3@};\n-static int z[] = @{1@};\n+static int z[] = @{1, 0, 0@};\n @end example\n \n @node Designated Inits"}, {"sha": "9cb21d407344bae259172e90676e4d900de38449", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "patch": "@@ -1,3 +1,8 @@\n+2001-12-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/gnu89-init-1.c: Adjust for the new behaviour, add some\n+\tadditional tests.\n+\n 2001-12-27  Roger Sayle <roger@eyesopen.com>\n \n \t* gcc.c-torture/execute/string-opt-16.c: New testcase."}, {"sha": "e11a0a48c2acd764704a9f0b37a77a7f8b234f8d", "filename": "gcc/testsuite/gcc.dg/gnu89-init-1.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-init-1.c?ref=ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "patch": "@@ -20,6 +20,8 @@ struct A a = (struct A) { .j = 6, .k[2] = 12 };\n struct B b = (struct B) { };\n int c[] = (int []) { [2] = 6, 7, 8 };\n int d[] = (int [3]) { 1 };\n+int e[2] = (int []) { 1, 2 };\n+int f[2] = (int [2]) { 1 };\n \n int main (void)\n {\n@@ -29,9 +31,17 @@ int main (void)\n     abort ();\n   if (sizeof (c) != 5 * sizeof (int))\n     abort ();\n-  if (d[0] != 1)\n+  if (d[0] != 1 || d[1] || d[2])\n     abort ();\n-  if (sizeof (d) != sizeof (int))\n+  if (sizeof (d) != 3 * sizeof (int))\n+    abort ();\n+  if (e[0] != 1 || e[1] != 2)\n+    abort ();\n+  if (sizeof (e) != 2 * sizeof (int))\n+    abort ();\n+  if (f[0] != 1 || f[1])\n+    abort ();\n+  if (sizeof (f) != 2 * sizeof (int))\n     abort ();\n   exit (0);\n }"}]}