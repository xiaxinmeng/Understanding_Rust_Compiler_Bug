{"sha": "4d76fdaabceeee4f63b98c8ef3a1bad4831c2859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3NmZkYWFiY2VlZWU0ZjYzYjk4YzhlZjNhMWJhZDQ4MzFjMjg1OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-09-22T20:13:40Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-09-22T20:13:40Z"}, "message": "mn10300.md: Revert 2003-09-17's patch.\n\n* config/mn10300/mn10300.md: Revert 2003-09-17's patch.\n(andsi3): Set attr cc to set_zn when using shifts or adds.\n\nFrom-SVN: r71663", "tree": {"sha": "3280e03cc0bdf9fbb11cb763e00b6ad9dd9f6461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3280e03cc0bdf9fbb11cb763e00b6ad9dd9f6461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859/comments", "author": null, "committer": null, "parents": [{"sha": "89ec0c4ba6ae53e5b675ee027fe3529dc6c11f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ec0c4ba6ae53e5b675ee027fe3529dc6c11f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ec0c4ba6ae53e5b675ee027fe3529dc6c11f62"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "523228b922d2f067458882a72faaddaf150ab398", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d76fdaabceeee4f63b98c8ef3a1bad4831c2859", "patch": "@@ -1,3 +1,8 @@\n+2003-09-22  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/mn10300/mn10300.md: Revert 2003-09-17's patch.\n+\t(andsi3): Set attr cc to set_zn when using shifts or adds.\n+\n 2003-09-22  Bernardo Innocenti <bernie@develer.com>\n \n \t* doc/contrib.texi: Add Peter Barada, Paul Dale and myself."}, {"sha": "6f4517149c4f742afda4cb7a35e58a4b51d18bec", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d76fdaabceeee4f63b98c8ef3a1bad4831c2859/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=4d76fdaabceeee4f63b98c8ef3a1bad4831c2859", "patch": "@@ -1224,7 +1224,22 @@\n     return \\\"and %1,%0\\\";\n   return \\\"and %2,%0\\\";\n }\"\n-  [(set_attr \"cc\" \"none_0hit,set_zn,set_zn\")])\n+  [(set (attr \"cc\")\n+\t(cond\n+\t [\n+\t (eq (symbol_ref \"which_alternative\") (const_int 0)\n+\t     ) (const_string \"none_0hit\")\n+\t (ne (symbol_ref \"GET_CODE (operands[2]) == CONST_INT\n+\t\t\t  && (INTVAL (operands[2]) == 0x7fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x3fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x1fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x0fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x0ffffffe\n+\t\t\t      || INTVAL (operands[2]) == 0xfffffffc\n+\t\t\t      || INTVAL (operands[2]) == 0xfffffff8\n+\t\t\t      || INTVAL (operands[2]) == 0xfffffff0)\")\n+\t     (const_int 0)) (const_string \"set_zn\")\n+\t  ] (const_string \"set_znv\")))])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx,dx\")\n@@ -1255,7 +1270,27 @@\n     return \\\"lsr 4,%0\\;asl2 %0\\;asl2 %0\\\";\n   return \\\"and %2,%0\\\";\n }\"\n-  [(set_attr \"cc\" \"none_0hit,set_zn\")])\n+  [(set (attr \"cc\")\n+\t(cond\n+\t [\n+\t (eq (symbol_ref \"which_alternative\") (const_int 0)\n+\t     ) (const_string \"none_0hit\")\n+\t ;; Shifts don't set the V flag, but bitwise operations clear\n+\t ;; it (which correctly reflects the absence of overflow in a\n+\t ;; compare-with-zero that might follow).  As for the\n+\t ;; 0xfffffffe case, the add may overflow, so we can't use the\n+\t ;; V flag.\n+\t (ne (symbol_ref \"GET_CODE (operands[2]) == CONST_INT\n+\t\t\t  && (INTVAL (operands[2]) == 0x7fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x3fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x1fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x0fffffff\n+\t\t\t      || INTVAL (operands[2]) == 0x0ffffffe\n+\t\t\t      || INTVAL (operands[2]) == 0xfffffffc\n+\t\t\t      || INTVAL (operands[2]) == 0xfffffff8\n+\t\t\t      || INTVAL (operands[2]) == 0xfffffff0)\")\n+\t     (const_int 0)) (const_string \"set_zn\")\n+\t  ] (const_string \"set_znv\")))])\n \n ;; ----------------------------------------------------------------------\n ;; OR INSTRUCTIONS\n@@ -1291,15 +1326,15 @@\n     return \\\"or %1,%0\\\";\n   return \\\"or %2,%0\\\";\n }\"\n-  [(set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"dxi\")))]\n   \"\"\n   \"or %2,%0\"\n-  [(set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n ;; ----------------------------------------------------------------------\n ;; XOR INSTRUCTIONS\n@@ -1335,15 +1370,15 @@\n     return \\\"xor %1,%0\\\";\n   return \\\"xor %2,%0\\\";\n }\"\n-  [(set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"dxi\")))]\n   \"\"\n   \"xor %2,%0\"\n-  [(set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n ;; ----------------------------------------------------------------------\n ;; NOT INSTRUCTIONS\n@@ -1360,14 +1395,14 @@\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"0,0\")))]\n   \"TARGET_AM33\"\n   \"not %0\"\n-  [(set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=dx\")\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"not %0\"\n-  [(set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"cc\" \"set_znv\")])\n \f\n ;; -----------------------------------------------------------------\n ;; BIT FIELDS\n@@ -1404,7 +1439,7 @@\n   \"@\n   bclr %N1,%A0\n   and %1,%0\"\n-  [(set_attr \"cc\" \"clobber,set_zn\")])\n+  [(set_attr \"cc\" \"clobber,set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"memory_operand\" \"=R,T\")\n@@ -1426,7 +1461,7 @@\n   \"@\n   bset %U1,%A0\n   or %1,%0\"\n-  [(set_attr \"cc\" \"clobber,set_zn\")])\n+  [(set_attr \"cc\" \"clobber,set_znv\")])\n \n (define_expand \"iorqi3\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n@@ -1449,7 +1484,7 @@\n   bset %U2,%A0\n   bset %2,%0\n   or %2,%0\"\n-  [(set_attr \"cc\" \"clobber,clobber,set_zn\")])\n+  [(set_attr \"cc\" \"clobber,clobber,set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=R,T,d\")\n@@ -1464,7 +1499,7 @@\n   bset %U2,%A0\n   bset %2,%0\n   or %2,%0\"\n-  [(set_attr \"cc\" \"clobber,clobber,set_zn\")])\n+  [(set_attr \"cc\" \"clobber,clobber,set_znv\")])\n \n (define_insn \"\"\n   [(set (cc0)"}]}