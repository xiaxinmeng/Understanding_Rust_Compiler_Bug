{"sha": "0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhZWVjMWIwOTAyZDY0N2JhMzRkMThiOGFiMWVlMDEzZWMzYjRiZQ==", "commit": {"author": {"name": "Robert Millan", "email": "rmh@gnu.org", "date": "2011-07-19T18:00:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-07-19T18:00:27Z"}, "message": "gnu-user.h: Copy from linux.h.\n\ngcc/\n2011-07-19  Robert Millan  <rmh@gnu.org>\n\n\t* config/mips/gnu-user.h: Copy from linux.h.  Update comments.\n\t(GLIBC_DYNAMIC_LINKER): Remove.\n\n\t* config/mips/gnu-user64.h: Copy from linux64.h.  Update comments.\n\t(GLIBC_DYNAMIC_LINKER32, GLIBC_DYNAMIC_LINKER64)\n\t(GLIBC_DYNAMIC_LINKERN32, UCLIBC_DYNAMIC_LINKERN32)\n\t(BIONIC_DYNAMIC_LINKERN32, GNU_USER_DYNAMIC_LINKERN32): Remove.\n\t(LINK_SPEC): Use GNU_USER_DYNAMIC_LINKER32,\n\tGNU_USER_DYNAMIC_LINKER64 and GNU_USER_LINK_EMULATIONN32.\n\n\t* config/mips/linux.h: Remove everything except for ...\n\t(GLIBC_DYNAMIC_LINKER): ... this macro.\n\n\t* config/mips/linux64.h: Remove everything except for ...\n\t(GLIBC_DYNAMIC_LINKER32, GLIBC_DYNAMIC_LINKER64)\n\t(GLIBC_DYNAMIC_LINKERN32, UCLIBC_DYNAMIC_LINKERN32)\n\t(BIONIC_DYNAMIC_LINKERN32): ... these macros.\n\t(GNU_USER_LINK_EMULATION32, GNU_USER_LINK_EMULATION64)\n\t(GNU_USER_LINK_EMULATIONN32): New macros.\n\n\t* config.gcc (mips64*-*-linux* | mipsisa64*-*-linux* |\n\tmips-*-linux*): Use the new headers.\n\nFrom-SVN: r176479", "tree": {"sha": "facf5575e753c3a862e12a89cd4dea13dffdf830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/facf5575e753c3a862e12a89cd4dea13dffdf830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/comments", "author": {"login": "robertmillan", "id": 5460739, "node_id": "MDQ6VXNlcjU0NjA3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5460739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertmillan", "html_url": "https://github.com/robertmillan", "followers_url": "https://api.github.com/users/robertmillan/followers", "following_url": "https://api.github.com/users/robertmillan/following{/other_user}", "gists_url": "https://api.github.com/users/robertmillan/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertmillan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertmillan/subscriptions", "organizations_url": "https://api.github.com/users/robertmillan/orgs", "repos_url": "https://api.github.com/users/robertmillan/repos", "events_url": "https://api.github.com/users/robertmillan/events{/privacy}", "received_events_url": "https://api.github.com/users/robertmillan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "754c3d5de8c1be4a18f6803133bb7cf96c5178d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754c3d5de8c1be4a18f6803133bb7cf96c5178d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754c3d5de8c1be4a18f6803133bb7cf96c5178d4"}], "stats": {"total": 395, "additions": 231, "deletions": 164}, "files": [{"sha": "507ba8f222ad8eb77b96e9b52db5828e6fe6ab65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "patch": "@@ -1,3 +1,28 @@\n+2011-07-19  Robert Millan  <rmh@gnu.org>\n+\n+\t* config/mips/gnu-user.h: Copy from linux.h.  Update comments.\n+\t(GLIBC_DYNAMIC_LINKER): Remove.\n+\n+\t* config/mips/gnu-user64.h: Copy from linux64.h.  Update comments.\n+\t(GLIBC_DYNAMIC_LINKER32, GLIBC_DYNAMIC_LINKER64)\n+\t(GLIBC_DYNAMIC_LINKERN32, UCLIBC_DYNAMIC_LINKERN32)\n+\t(BIONIC_DYNAMIC_LINKERN32, GNU_USER_DYNAMIC_LINKERN32): Remove.\n+\t(LINK_SPEC): Use GNU_USER_DYNAMIC_LINKER32,\n+\tGNU_USER_DYNAMIC_LINKER64 and GNU_USER_LINK_EMULATIONN32.\n+\n+\t* config/mips/linux.h: Remove everything except for ...\n+\t(GLIBC_DYNAMIC_LINKER): ... this macro.\n+\n+\t* config/mips/linux64.h: Remove everything except for ...\n+\t(GLIBC_DYNAMIC_LINKER32, GLIBC_DYNAMIC_LINKER64)\n+\t(GLIBC_DYNAMIC_LINKERN32, UCLIBC_DYNAMIC_LINKERN32)\n+\t(BIONIC_DYNAMIC_LINKERN32): ... these macros.\n+\t(GNU_USER_LINK_EMULATION32, GNU_USER_LINK_EMULATION64)\n+\t(GNU_USER_LINK_EMULATIONN32): New macros.\n+\n+\t* config.gcc (mips64*-*-linux* | mipsisa64*-*-linux* |\n+\tmips-*-linux*): Use the new headers.\n+\n 2011-07-19  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.h (mem_attrs): Turn offset and size fields into HOST_WIDE_INTs."}, {"sha": "9215d0c79e86b41583f060560ccb24a9ed8ac591", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "patch": "@@ -1820,7 +1820,7 @@ mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n \t;;\n mips64*-*-linux* | mipsisa64*-*-linux*)\n-\ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file} mips/linux.h mips/linux64.h\"\n+\ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file} mips/gnu-user.h mips/gnu-user64.h mips/linux64.h\"\n \ttmake_file=\"${tmake_file} mips/t-linux64 mips/t-libgcc-mips16\"\n \ttm_defines=\"${tm_defines} MIPS_ABI_DEFAULT=ABI_N32\"\n \tcase ${target} in\n@@ -1842,10 +1842,10 @@ mips64*-*-linux* | mipsisa64*-*-linux*)\n \ttest x$with_llsc != x || with_llsc=yes\n \t;;\n mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n-        tm_file=\"dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file} mips/linux.h\"\n+        tm_file=\"dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file} mips/gnu-user.h mips/linux.h\"\n \ttmake_file=\"${tmake_file} mips/t-libgcc-mips16\"\n \tif test x$enable_targets = xall; then\n-\t\ttm_file=\"${tm_file} mips/linux64.h\"\n+\t\ttm_file=\"${tm_file} mips/gnu-user.h mips/gnu-user64.h mips/linux64.h\"\n \t\ttmake_file=\"${tmake_file} mips/t-linux64\"\n \t\ttm_defines=\"${tm_defines} MIPS_ABI_DEFAULT=ABI_32\"\n \tfi"}, {"sha": "49c459bc7433a9310a3b3431a3e56846352b001c", "filename": "gcc/config/mips/gnu-user.h", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu-user.h?ref=0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "patch": "@@ -0,0 +1,140 @@\n+/* Definitions for MIPS systems using GNU userspace.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+   2007, 2008, 2010, 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME mips_declare_object_name\n+\n+/* If we don't set MASK_ABICALLS, we can't default to PIC.  */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT MASK_ABICALLS\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n+    /* The GNU C++ standard library requires this.  */\t\t\\\n+    if (c_dialect_cxx ())\t\t\t\t\t\\\n+      builtin_define (\"_GNU_SOURCE\");\t\t\t\t\\\n+  } while (0)\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+\n+/* A standard GNU/Linux mapping.  On most targets, it is included in\n+   CC1_SPEC itself by config/linux.h, but mips.h overrides CC1_SPEC\n+   and provides this hook instead.  */\n+#undef SUBTARGET_CC1_SPEC\n+#define SUBTARGET_CC1_SPEC \"%{profile:-p}\"\n+\n+/* From iris5.h */\n+/* -G is incompatible with -KPIC which is the default, so only allow objects\n+   in the small data section if the user explicitly asks for it.  */\n+#undef MIPS_DEFAULT_GVALUE\n+#define MIPS_DEFAULT_GVALUE 0\n+\n+/* Borrowed from sparc/linux.h */\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+ \"%(endian_spec) \\\n+  %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic:-export-dynamic} \\\n+      -dynamic-linker \" GNU_USER_DYNAMIC_LINKER \"} \\\n+      %{static:-static}}\"\n+\n+#undef SUBTARGET_ASM_SPEC\n+#define SUBTARGET_ASM_SPEC \\\n+  \"%{!mno-abicalls:%{mplt:-call_nonpic;:-KPIC}}\"\n+\n+/* The MIPS assembler has different syntax for .set. We set it to\n+   .dummy to trap any errors.  */\n+#undef SET_ASM_OP\n+#define SET_ASM_OP \"\\t.dummy\\t\"\n+\n+#undef ASM_OUTPUT_DEF\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n+ do {\t\t\t\t\t\t\t\t\t\\\n+\tfputc ( '\\t', FILE);\t\t\t\t\t\t\\\n+\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n+\tfputs ( \" = \", FILE);\t\t\t\t\t\t\\\n+\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n+\tfputc ( '\\n', FILE);\t\t\t\t\t\t\\\n+ } while (0)\n+\n+/* The glibc _mcount stub will save $v0 for us.  Don't mess with saving\n+   it, since ASM_OUTPUT_REG_PUSH/ASM_OUTPUT_REG_POP do not work in the\n+   presence of $gp-relative calls.  */\n+#undef ASM_OUTPUT_REG_PUSH\n+#undef ASM_OUTPUT_REG_POP\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\\\n+%{pthread:-lpthread} \\\n+%{shared:-lc} \\\n+%{!shared: \\\n+  %{profile:-lc_p} %{!profile:-lc}}\"\n+\n+#ifdef HAVE_AS_NO_SHARED\n+/* Default to -mno-shared for non-PIC.  */\n+# define NO_SHARED_SPECS \\\n+  \"%{mshared|mno-shared|fpic|fPIC|fpie|fPIE:;:-mno-shared}\"\n+#else\n+# define NO_SHARED_SPECS \"\"\n+#endif\n+\n+/* -march=native handling only makes sense with compiler running on\n+   a MIPS chip.  */\n+#if defined(__mips__)\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+# define EXTRA_SPEC_FUNCTIONS \\\n+  { \"local_cpu_detect\", host_detect_local_cpu },\n+\n+# define MARCH_MTUNE_NATIVE_SPECS\t\t\t\t\\\n+  \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\\\n+  \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+#else\n+# define MARCH_MTUNE_NATIVE_SPECS \"\"\n+#endif\n+\n+#define LINUX_DRIVER_SELF_SPECS \\\n+  NO_SHARED_SPECS\t\t\t\t\t\t\t\\\n+  MARCH_MTUNE_NATIVE_SPECS,\t\t\t\t\t\t\\\n+  /* -mplt has no effect without -mno-shared.  Simplify later\t\t\\\n+     specs handling by removing a redundant option.  */\t\t\t\\\n+  \"%{!mno-shared:%<mplt}\",\t\t\t\t\t\t\\\n+  /* -mplt likewise has no effect for -mabi=64 without -msym32.  */\t\\\n+  \"%{mabi=64:%{!msym32:%<mplt}}\"\n+\n+#undef DRIVER_SELF_SPECS\n+#define DRIVER_SELF_SPECS \\\n+  BASE_DRIVER_SELF_SPECS, \\\n+  LINUX_DRIVER_SELF_SPECS\n+\n+/* Similar to standard Linux, but adding -ffast-math support.  */\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n+   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\""}, {"sha": "91b021d1ca89d7a8b4c0d7444b16002655d4c15e", "filename": "gcc/config/mips/gnu-user64.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Fgnu-user64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Fgnu-user64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu-user64.h?ref=0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "patch": "@@ -0,0 +1,60 @@\n+/* Definitions for MIPS systems using GNU userspace and n32/64 abi.\n+   Copyright 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Force the default endianness and ABI flags onto the command line\n+   in order to make the other specs easier to write.  */\n+#undef DRIVER_SELF_SPECS\n+#define DRIVER_SELF_SPECS \\\n+  BASE_DRIVER_SELF_SPECS, \\\n+  LINUX_DRIVER_SELF_SPECS \\\n+  \" %{!EB:%{!EL:%(endian_spec)}}\" \\\n+  \" %{!mabi=*: -\" MULTILIB_ABI_DEFAULT \"}\"\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\\\n+%{pthread:-lpthread} \\\n+%{shared:-lc} \\\n+%{!shared: \\\n+  %{profile:-lc_p} %{!profile:-lc}}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{shared} \\\n+ %(endian_spec) \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic:-export-dynamic} \\\n+      %{mabi=n32: -dynamic-linker \" GNU_USER_DYNAMIC_LINKERN32 \"} \\\n+      %{mabi=64: -dynamic-linker \" GNU_USER_DYNAMIC_LINKER64 \"} \\\n+      %{mabi=32: -dynamic-linker \" GNU_USER_DYNAMIC_LINKER32 \"}} \\\n+    %{static:-static}} \\\n+%{mabi=n32:-m\" GNU_USER_LINK_EMULATIONN32 \"} \\\n+%{mabi=64:-m\" GNU_USER_LINK_EMULATION64 \"} \\\n+%{mabi=32:-m\" GNU_USER_LINK_EMULATION32 \"}\"\n+\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX (TARGET_OLDABI ? \"$\" : \".\")\n+\n+/* GNU/Linux doesn't use the same floating-point format that IRIX uses\n+   for long double.  There's no need to override this here, since\n+   ieee_quad_format is the default, but let's put this here to make\n+   sure nobody thinks we just forgot to set it to something else.  */\n+#define MIPS_TFMODE_FORMAT mips_quad_format"}, {"sha": "bce9c1793f22b7945cdae5137a44acca677f65d2", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "patch": "@@ -18,125 +18,4 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE 32\n-\n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME mips_declare_object_name\n-\n-/* If we don't set MASK_ABICALLS, we can't default to PIC.  */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_ABICALLS\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    GNU_USER_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n-    /* The GNU C++ standard library requires this.  */\t\t\\\n-    if (c_dialect_cxx ())\t\t\t\t\t\\\n-      builtin_define (\"_GNU_SOURCE\");\t\t\t\t\\\n-  } while (0)\n-\n-#undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n-\n-/* A standard GNU/Linux mapping.  On most targets, it is included in\n-   CC1_SPEC itself by config/linux.h, but mips.h overrides CC1_SPEC\n-   and provides this hook instead.  */\n-#undef SUBTARGET_CC1_SPEC\n-#define SUBTARGET_CC1_SPEC \"%{profile:-p}\"\n-\n-/* From iris5.h */\n-/* -G is incompatible with -KPIC which is the default, so only allow objects\n-   in the small data section if the user explicitly asks for it.  */\n-#undef MIPS_DEFAULT_GVALUE\n-#define MIPS_DEFAULT_GVALUE 0\n-\n #define GLIBC_DYNAMIC_LINKER \"/lib/ld.so.1\"\n-\n-/* Borrowed from sparc/linux.h */\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n- \"%(endian_spec) \\\n-  %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!static: \\\n-      %{rdynamic:-export-dynamic} \\\n-      -dynamic-linker \" GNU_USER_DYNAMIC_LINKER \"} \\\n-      %{static:-static}}\"\n-\n-#undef SUBTARGET_ASM_SPEC\n-#define SUBTARGET_ASM_SPEC \\\n-  \"%{!mno-abicalls:%{mplt:-call_nonpic;:-KPIC}}\"\n-\n-/* The MIPS assembler has different syntax for .set. We set it to\n-   .dummy to trap any errors.  */\n-#undef SET_ASM_OP\n-#define SET_ASM_OP \"\\t.dummy\\t\"\n-\n-#undef ASM_OUTPUT_DEF\n-#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n- do {\t\t\t\t\t\t\t\t\t\\\n-\tfputc ( '\\t', FILE);\t\t\t\t\t\t\\\n-\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-\tfputs ( \" = \", FILE);\t\t\t\t\t\t\\\n-\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-\tfputc ( '\\n', FILE);\t\t\t\t\t\t\\\n- } while (0)\n-\n-/* The glibc _mcount stub will save $v0 for us.  Don't mess with saving\n-   it, since ASM_OUTPUT_REG_PUSH/ASM_OUTPUT_REG_POP do not work in the\n-   presence of $gp-relative calls.  */\n-#undef ASM_OUTPUT_REG_PUSH\n-#undef ASM_OUTPUT_REG_POP\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"\\\n-%{pthread:-lpthread} \\\n-%{shared:-lc} \\\n-%{!shared: \\\n-  %{profile:-lc_p} %{!profile:-lc}}\"\n-\n-#ifdef HAVE_AS_NO_SHARED\n-/* Default to -mno-shared for non-PIC.  */\n-# define NO_SHARED_SPECS \\\n-  \"%{mshared|mno-shared|fpic|fPIC|fpie|fPIE:;:-mno-shared}\"\n-#else\n-# define NO_SHARED_SPECS \"\"\n-#endif\n-\n-/* -march=native handling only makes sense with compiler running on\n-   a MIPS chip.  */\n-#if defined(__mips__)\n-extern const char *host_detect_local_cpu (int argc, const char **argv);\n-# define EXTRA_SPEC_FUNCTIONS \\\n-  { \"local_cpu_detect\", host_detect_local_cpu },\n-\n-# define MARCH_MTUNE_NATIVE_SPECS\t\t\t\t\\\n-  \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\\\n-  \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n-#else\n-# define MARCH_MTUNE_NATIVE_SPECS \"\"\n-#endif\n-\n-#define LINUX_DRIVER_SELF_SPECS \\\n-  NO_SHARED_SPECS\t\t\t\t\t\t\t\\\n-  MARCH_MTUNE_NATIVE_SPECS,\t\t\t\t\t\t\\\n-  /* -mplt has no effect without -mno-shared.  Simplify later\t\t\\\n-     specs handling by removing a redundant option.  */\t\t\t\\\n-  \"%{!mno-shared:%<mplt}\",\t\t\t\t\t\t\\\n-  /* -mplt likewise has no effect for -mabi=64 without -msym32.  */\t\\\n-  \"%{mabi=64:%{!msym32:%<mplt}}\"\n-\n-#undef DRIVER_SELF_SPECS\n-#define DRIVER_SELF_SPECS \\\n-  BASE_DRIVER_SELF_SPECS, \\\n-  LINUX_DRIVER_SELF_SPECS\n-\n-/* Similar to standard Linux, but adding -ffast-math support.  */\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\""}, {"sha": "6e92719881bcd81b81ac504a5fa449a69a151cff", "filename": "gcc/config/mips/linux64.h", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baeec1b0902d647ba34d18b8ab1ee013ec3b4be/gcc%2Fconfig%2Fmips%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux64.h?ref=0baeec1b0902d647ba34d18b8ab1ee013ec3b4be", "patch": "@@ -19,21 +19,9 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Force the default endianness and ABI flags onto the command line\n-   in order to make the other specs easier to write.  */\n-#undef DRIVER_SELF_SPECS\n-#define DRIVER_SELF_SPECS \\\n-  BASE_DRIVER_SELF_SPECS, \\\n-  LINUX_DRIVER_SELF_SPECS \\\n-  \" %{!EB:%{!EL:%(endian_spec)}}\" \\\n-  \" %{!mabi=*: -\" MULTILIB_ABI_DEFAULT \"}\"\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"\\\n-%{pthread:-lpthread} \\\n-%{shared:-lc} \\\n-%{!shared: \\\n-  %{profile:-lc_p} %{!profile:-lc}}\"\n+#define GNU_USER_LINK_EMULATION32 \"elf32%{EB:b}%{EL:l}tsmip\"\n+#define GNU_USER_LINK_EMULATION64 \"elf64%{EB:b}%{EL:l}tsmip\"\n+#define GNU_USER_LINK_EMULATIONN32 \"elf32%{EB:b}%{EL:l}tsmipn32\"\n \n #define GLIBC_DYNAMIC_LINKER32 \"/lib/ld.so.1\"\n #define GLIBC_DYNAMIC_LINKER64 \"/lib64/ld.so.1\"\n@@ -43,28 +31,3 @@ along with GCC; see the file COPYING3.  If not see\n #define GNU_USER_DYNAMIC_LINKERN32 \\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKERN32, UCLIBC_DYNAMIC_LINKERN32, \\\n \t\t\t BIONIC_DYNAMIC_LINKERN32)\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \"\\\n-%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n-%{shared} \\\n- %(endian_spec) \\\n-  %{!shared: \\\n-    %{!static: \\\n-      %{rdynamic:-export-dynamic} \\\n-      %{mabi=n32: -dynamic-linker \" GNU_USER_DYNAMIC_LINKERN32 \"} \\\n-      %{mabi=64: -dynamic-linker \" GNU_USER_DYNAMIC_LINKER64 \"} \\\n-      %{mabi=32: -dynamic-linker \" GNU_USER_DYNAMIC_LINKER32 \"}} \\\n-    %{static:-static}} \\\n-%{mabi=n32:-melf32%{EB:b}%{EL:l}tsmipn32} \\\n-%{mabi=64:-melf64%{EB:b}%{EL:l}tsmip} \\\n-%{mabi=32:-melf32%{EB:b}%{EL:l}tsmip}\"\n-\n-#undef LOCAL_LABEL_PREFIX\n-#define LOCAL_LABEL_PREFIX (TARGET_OLDABI ? \"$\" : \".\")\n-\n-/* GNU/Linux doesn't use the same floating-point format that IRIX uses\n-   for long double.  There's no need to override this here, since\n-   ieee_quad_format is the default, but let's put this here to make\n-   sure nobody thinks we just forgot to set it to something else.  */\n-#define MIPS_TFMODE_FORMAT mips_quad_format"}]}