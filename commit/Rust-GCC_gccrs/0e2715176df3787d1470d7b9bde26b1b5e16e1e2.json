{"sha": "0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "node_id": "C_kwDOANBUbNoAKDBlMjcxNTE3NmRmMzc4N2QxNDcwZDdiOWJkZTI2YjFiNWUxNmUxZTI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-14T02:23:31Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-23T03:14:12Z"}, "message": "RISC-V: Fix wrong RTL pattern for ternary instructions.\n\nWe've wrong RTL pattern cause unexpected optimizaion result.\n\nGive a example is vnmsub.vx pattern, the operation of vnmsub.vx\nlist below:\n\n  vnmsub.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vd[i]) + vs2[i]\n\nBut our RTL pattern write as (x[rs1] * vd[i]) - vs2[i], and the GCC try to\nsimplify when x[rs1] is constant 1, and then become a vd[i] - vs[i]\ninstruction.\n\nWe also revise all ternary instructions to make sure the RTL has right\nsemantic:\n\nAnd it's the mapping list between instruction and RTL pattern:\n\ninterger:\nvnmsac.vv vd, vs1, vs2, vm    # vd[i] = -(vs1[i] * vs2[i]) + vd[i]  (minus op3 (mult op1 op2))\nvnmsac.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vs2[i]) + vd[i]   (minus op3 (mult op1 op2))\n\nfloating-point:\nvfmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i] (plus (mult (op1 op2)) op3)\nvfmacc.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i] (plus (mult (op1 op2)) op3)\n\nvfnmacc.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) - vd[i] (minus (neg (mult (op1 op2))) op3))\nvfnmacc.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i] (minus (neg (mult (op1 op2)) op3))\nvfmsac.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) - vd[i] (minus (mult (op1 op2)) op3)\nvfmsac.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i] (minus (mult (op1 op2)) op3)\n\nvfnmsac.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) + vd[i] (plus (neg:(mult (op1 op2))) op3)\nvfnmsac.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i] (plus (neg:(mult (op1 op2))) op3)\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc: Fix ternary bug.\n\t* config/riscv/vector-iterators.md (nmsac): Ditto.\n\t(nmsub): Ditto.\n\t(msac): Ditto.\n\t(msub): Ditto.\n\t(nmadd): Ditto.\n\t(nmacc): Ditto.\n\t* config/riscv/vector.md (@pred_mul_<optab><mode>): Ditto.\n\t(@pred_mul_plus<mode>): Ditto.\n\t(*pred_madd<mode>): Ditto.\n\t(*pred_macc<mode>): Ditto.\n\t(*pred_mul_plus<mode>): Ditto.\n\t(@pred_mul_plus<mode>_scalar): Ditto.\n\t(*pred_madd<mode>_scalar): Ditto.\n\t(*pred_macc<mode>_scalar): Ditto.\n\t(*pred_mul_plus<mode>_scalar): Ditto.\n\t(*pred_madd<mode>_extended_scalar): Ditto.\n\t(*pred_macc<mode>_extended_scalar): Ditto.\n\t(*pred_mul_plus<mode>_extended_scalar): Ditto.\n\t(@pred_minus_mul<mode>): Ditto.\n\t(*pred_<madd_nmsub><mode>): Ditto.\n\t(*pred_nmsub<mode>): Ditto.\n\t(*pred_<macc_nmsac><mode>): Ditto.\n\t(*pred_nmsac<mode>): Ditto.\n\t(*pred_mul_<optab><mode>): Ditto.\n\t(*pred_minus_mul<mode>): Ditto.\n\t(@pred_mul_<optab><mode>_scalar): Ditto.\n\t(@pred_minus_mul<mode>_scalar): Ditto.\n\t(*pred_<madd_nmsub><mode>_scalar): Ditto.\n\t(*pred_nmsub<mode>_scalar): Ditto.\n\t(*pred_<macc_nmsac><mode>_scalar): Ditto.\n\t(*pred_nmsac<mode>_scalar): Ditto.\n\t(*pred_mul_<optab><mode>_scalar): Ditto.\n\t(*pred_minus_mul<mode>_scalar): Ditto.\n\t(*pred_<madd_nmsub><mode>_extended_scalar): Ditto.\n\t(*pred_nmsub<mode>_extended_scalar): Ditto.\n\t(*pred_<macc_nmsac><mode>_extended_scalar): Ditto.\n\t(*pred_nmsac<mode>_extended_scalar): Ditto.\n\t(*pred_mul_<optab><mode>_extended_scalar): Ditto.\n\t(*pred_minus_mul<mode>_extended_scalar): Ditto.\n\t(*pred_<madd_msub><mode>): Ditto.\n\t(*pred_<macc_msac><mode>): Ditto.\n\t(*pred_<madd_msub><mode>_scalar): Ditto.\n\t(*pred_<macc_msac><mode>_scalar): Ditto.\n\t(@pred_neg_mul_<optab><mode>): Ditto.\n\t(@pred_mul_neg_<optab><mode>): Ditto.\n\t(*pred_<nmadd_msub><mode>): Ditto.\n\t(*pred_<nmsub_nmadd><mode>): Ditto.\n\t(*pred_<nmacc_msac><mode>): Ditto.\n\t(*pred_<nmsac_nmacc><mode>): Ditto.\n\t(*pred_neg_mul_<optab><mode>): Ditto.\n\t(*pred_mul_neg_<optab><mode>): Ditto.\n\t(@pred_neg_mul_<optab><mode>_scalar): Ditto.\n\t(@pred_mul_neg_<optab><mode>_scalar): Ditto.\n\t(*pred_<nmadd_msub><mode>_scalar): Ditto.\n\t(*pred_<nmsub_nmadd><mode>_scalar): Ditto.\n\t(*pred_<nmacc_msac><mode>_scalar): Ditto.\n\t(*pred_<nmsac_nmacc><mode>_scalar): Ditto.\n\t(*pred_neg_mul_<optab><mode>_scalar): Ditto.\n\t(*pred_mul_neg_<optab><mode>_scalar): Ditto.\n\t(@pred_widen_neg_mul_<optab><mode>): Ditto.\n\t(@pred_widen_mul_neg_<optab><mode>): Ditto.\n\t(@pred_widen_neg_mul_<optab><mode>_scalar): Ditto.\n\t(@pred_widen_mul_neg_<optab><mode>_scalar): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/bug-3.c: New test.\n\t* gcc.target/riscv/rvv/base/bug-4.c: New test.\n\t* gcc.target/riscv/rvv/base/bug-5.c: New test.\n\nSigned-off-by: Ju-Zhe Zhong <juzhe.zhong@rivai.ai>\nCo-authored-by: kito-cheng <kito.cheng@sifive.com>", "tree": {"sha": "7e41c076ac94f989e5512fa45dae5d2553bc5cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e41c076ac94f989e5512fa45dae5d2553bc5cea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba31f9a3c8fa9405a9a58094d6dc83bab0823786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba31f9a3c8fa9405a9a58094d6dc83bab0823786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba31f9a3c8fa9405a9a58094d6dc83bab0823786"}], "stats": {"total": 867, "additions": 671, "deletions": 196}, "files": [{"sha": "839eb66efb2c0acceb02d31a1c34cdcfc8d5a74b", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "patch": "@@ -627,12 +627,11 @@ class vmacc : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vx)\n-      return e.use_ternop_insn (true,\n-\t\t\t\tcode_for_pred_mul_scalar (PLUS,\n-\t\t\t\t\t\t\t  e.vector_mode ()));\n+      return e.use_ternop_insn (true, code_for_pred_mul_plus_scalar (\n+\t\t\t\t\te.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (true,\n-\t\t\t\tcode_for_pred_mul (PLUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_mul_plus (e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -645,12 +644,11 @@ class vnmsac : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vx)\n-      return e.use_ternop_insn (true,\n-\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n-\t\t\t\t\t\t\t  e.vector_mode ()));\n+      return e.use_ternop_insn (true, code_for_pred_minus_mul_scalar (\n+\t\t\t\t\te.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (true,\n-\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_minus_mul (e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -663,12 +661,11 @@ class vmadd : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vx)\n-      return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_mul_scalar (PLUS,\n-\t\t\t\t\t\t\t  e.vector_mode ()));\n+      return e.use_ternop_insn (false, code_for_pred_mul_plus_scalar (\n+\t\t\t\t\t e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_mul (PLUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_mul_plus (e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -681,17 +678,15 @@ class vnmsub : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vx)\n-      return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n-\t\t\t\t\t\t\t  e.vector_mode ()));\n+      return e.use_ternop_insn (false, code_for_pred_minus_mul_scalar (\n+\t\t\t\t\t e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_minus_mul (e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n \n-\n /* Implements vwmacc<su><su>.  */\n class vwmacc : public function_base\n {\n@@ -973,12 +968,11 @@ class vfnmsac : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n-      return e.use_ternop_insn (true,\n-\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n-\t\t\t\t\t\t\t  e.vector_mode ()));\n+      return e.use_ternop_insn (\n+\ttrue, code_for_pred_mul_neg_scalar (PLUS, e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (true,\n-\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_mul_neg (PLUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1009,12 +1003,11 @@ class vfnmsub : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n-      return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n-\t\t\t\t\t\t\t  e.vector_mode ()));\n+      return e.use_ternop_insn (\n+\tfalse, code_for_pred_mul_neg_scalar (PLUS, e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_mul_neg (PLUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1028,10 +1021,10 @@ class vfnmacc : public function_base\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n       return e.use_ternop_insn (\n-\ttrue, code_for_pred_neg_mul_scalar (PLUS, e.vector_mode ()));\n+\ttrue, code_for_pred_mul_neg_scalar (MINUS, e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (true,\n-\t\t\t\tcode_for_pred_neg_mul (PLUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_mul_neg (MINUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1044,11 +1037,12 @@ class vfmsac : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n-      return e.use_ternop_insn (\n-\ttrue, code_for_pred_neg_mul_scalar (MINUS, e.vector_mode ()));\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n-      return e.use_ternop_insn (true, code_for_pred_neg_mul (MINUS,\n-\t\t\t\t\t\t\t     e.vector_mode ()));\n+      return e.use_ternop_insn (true,\n+\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1062,10 +1056,10 @@ class vfnmadd : public function_base\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n       return e.use_ternop_insn (\n-\tfalse, code_for_pred_neg_mul_scalar (PLUS, e.vector_mode ()));\n+\tfalse, code_for_pred_mul_neg_scalar (MINUS, e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_neg_mul (PLUS, e.vector_mode ()));\n+\t\t\t\tcode_for_pred_mul_neg (MINUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1078,12 +1072,12 @@ class vfmsub : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n-      return e.use_ternop_insn (\n-\tfalse, code_for_pred_neg_mul_scalar (MINUS, e.vector_mode ()));\n+      return e.use_ternop_insn (false,\n+\t\t\t\tcode_for_pred_mul_scalar (MINUS,\n+\t\t\t\t\t\t\t  e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_ternop_insn (false,\n-\t\t\t\tcode_for_pred_neg_mul (MINUS,\n-\t\t\t\t\t\t       e.vector_mode ()));\n+\t\t\t\tcode_for_pred_mul (MINUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1114,10 +1108,10 @@ class vfwnmacc : public function_base\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n       return e.use_widen_ternop_insn (\n-\tcode_for_pred_widen_neg_mul_scalar (PLUS, e.vector_mode ()));\n+\tcode_for_pred_widen_mul_neg_scalar (MINUS, e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_widen_ternop_insn (\n-\tcode_for_pred_widen_neg_mul (PLUS, e.vector_mode ()));\n+\tcode_for_pred_widen_mul_neg (MINUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1131,10 +1125,10 @@ class vfwmsac : public function_base\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n       return e.use_widen_ternop_insn (\n-\tcode_for_pred_widen_neg_mul_scalar (MINUS, e.vector_mode ()));\n+\tcode_for_pred_widen_mul_scalar (MINUS, e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_widen_ternop_insn (\n-\tcode_for_pred_widen_neg_mul (MINUS, e.vector_mode ()));\n+\tcode_for_pred_widen_mul (MINUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };\n@@ -1148,10 +1142,10 @@ class vfwnmsac : public function_base\n   {\n     if (e.op_info->op == OP_TYPE_vf)\n       return e.use_widen_ternop_insn (\n-\tcode_for_pred_widen_mul_scalar (MINUS, e.vector_mode ()));\n+\tcode_for_pred_widen_mul_neg_scalar (PLUS, e.vector_mode ()));\n     if (e.op_info->op == OP_TYPE_vv)\n       return e.use_widen_ternop_insn (\n-\tcode_for_pred_widen_mul (MINUS, e.vector_mode ()));\n+\tcode_for_pred_widen_mul_neg (PLUS, e.vector_mode ()));\n     gcc_unreachable ();\n   }\n };"}, {"sha": "34e486e48ca3ea627aa178887b0dfe7cc1f110f7", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "patch": "@@ -839,10 +839,10 @@\n (define_code_iterator any_widen_binop [plus minus mult])\n (define_code_iterator plus_minus [plus minus])\n \n-(define_code_attr macc_nmsac [(plus \"macc\") (minus \"nmsac\")])\n-(define_code_attr madd_nmsub [(plus \"madd\") (minus \"nmsub\")])\n-(define_code_attr nmacc_msac [(plus \"nmacc\") (minus \"msac\")])\n-(define_code_attr nmadd_msub [(plus \"nmadd\") (minus \"msub\")])\n+(define_code_attr madd_msub [(plus \"madd\") (minus \"msub\")])\n+(define_code_attr macc_msac [(plus \"macc\") (minus \"msac\")])\n+(define_code_attr nmsub_nmadd [(plus \"nmsub\") (minus \"nmadd\")])\n+(define_code_attr nmsac_nmacc [(plus \"nmsac\") (minus \"nmacc\")])\n \n (define_code_iterator and_ior [and ior])\n "}, {"sha": "a6ea86844eaae1d69242e2c47a0aba9aa9ed86ba", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 564, "deletions": 149, "changes": 713, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "patch": "@@ -4148,7 +4148,7 @@\n ;; - 11.13 Vector Single-Width Integer Multiply-Add Instructions\n ;; -------------------------------------------------------------------------------\n \n-(define_expand \"@pred_mul_<optab><mode>\"\n+(define_expand \"@pred_mul_plus<mode>\"\n   [(set (match_operand:VI 0 \"register_operand\")\n \t(if_then_else:VI\n \t  (unspec:<VM>\n@@ -4159,7 +4159,7 @@\n \t     (match_operand 9 \"const_int_operand\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n+\t  (plus:VI\n \t    (mult:VI\n \t      (match_operand:VI 2 \"register_operand\")\n \t      (match_operand:VI 3 \"register_operand\"))\n@@ -4173,7 +4173,7 @@\n     std::swap (operands[2], operands[3]);\n })\n \n-(define_insn \"*pred_<madd_nmsub><mode>\"\n+(define_insn \"*pred_madd<mode>\"\n   [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VI\n \t  (unspec:<VM>\n@@ -4184,17 +4184,17 @@\n \t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n+\t  (plus:VI\n \t    (mult:VI\n \t      (match_operand:VI 2 \"register_operand\"     \"  0,  0,   vr\")\n \t      (match_operand:VI 3 \"register_operand\"     \" vr, vr,   vr\"))\n \t    (match_operand:VI 4 \"register_operand\"       \" vr, vr,   vr\"))\n \t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   v<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   v<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   vmv.v.v\\t%0,%2\\;v<madd_nmsub>.vv\\t%0,%3,%4%p1\"\n+   vmadd.vv\\t%0,%3,%4%p1\n+   vmadd.vv\\t%0,%3,%4%p1\n+   vmv.v.v\\t%0,%2\\;vmadd.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"4\")\n@@ -4203,7 +4203,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn \"*pred_<macc_nmsac><mode>\"\n+(define_insn \"*pred_macc<mode>\"\n   [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VI\n \t  (unspec:<VM>\n@@ -4214,17 +4214,17 @@\n \t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n+\t  (plus:VI\n \t    (mult:VI\n \t      (match_operand:VI 2 \"register_operand\"     \" vr, vr,   vr\")\n \t      (match_operand:VI 3 \"register_operand\"     \" vr, vr,   vr\"))\n \t    (match_operand:VI 4 \"register_operand\"       \"  0,  0,   vr\"))\n \t  (match_dup 4)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   v<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   v<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vv\\t%0,%2,%3%p1\"\n+   vmacc.vv\\t%0,%2,%3%p1\n+   vmacc.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vmacc.vv\\t%0,%2,%3%p1\"\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"2\")\n@@ -4233,7 +4233,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn_and_rewrite \"*pred_mul_<optab><mode>\"\n+(define_insn_and_rewrite \"*pred_mul_plus<mode>\"\n   [(set (match_operand:VI 0 \"register_operand\"            \"=&vr,?&vr, ?&vr, ?&vr,  ?&vr\")\n \t(if_then_else:VI\n \t  (unspec:<VM>\n@@ -4244,7 +4244,7 @@\n \t     (match_operand 9 \"const_int_operand\"        \"    i,    i,    i,    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n+\t  (plus:VI\n \t    (mult:VI\n \t      (match_operand:VI 2 \"register_operand\"     \"   vr,   vr,   vi,   vr,   vr\")\n \t      (match_operand:VI 3 \"register_operand\"     \"   vr,   vr,   vr,   vi,   vr\"))\n@@ -4255,7 +4255,7 @@\n    && !rtx_equal_p (operands[3], operands[5])\n    && !rtx_equal_p (operands[4], operands[5])\"\n   \"@\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vmacc.vv\\t%0,%2,%3%p1\n    #\n    #\n    #\n@@ -4284,7 +4284,7 @@\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"@pred_mul_<optab><mode>_scalar\"\n+(define_expand \"@pred_mul_plus<mode>_scalar\"\n   [(set (match_operand:VI_QHS 0 \"register_operand\")\n \t(if_then_else:VI_QHS\n \t  (unspec:<VM>\n@@ -4295,7 +4295,7 @@\n \t     (match_operand 9 \"const_int_operand\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI_QHS\n+\t  (plus:VI_QHS\n \t    (mult:VI_QHS\n \t      (vec_duplicate:VI_QHS\n \t        (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n@@ -4307,7 +4307,7 @@\n   operands[2] = force_reg (<VEL>mode, operands[2]);\n })\n \n-(define_insn \"*pred_<madd_nmsub><mode>_scalar\"\n+(define_insn \"*pred_madd<mode>_scalar\"\n   [(set (match_operand:VI 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n \t(if_then_else:VI\n \t  (unspec:<VM>\n@@ -4318,7 +4318,7 @@\n \t     (match_operand 8 \"const_int_operand\"         \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n+\t  (plus:VI\n \t    (mult:VI\n \t      (vec_duplicate:VI\n \t        (match_operand:<VEL> 2 \"register_operand\" \"  r,  r,   vr\"))\n@@ -4327,9 +4327,9 @@\n \t  (match_dup 3)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   vmv.v.v\\t%0,%2\\;v<madd_nmsub>.vx\\t%0,%2,%4%p1\"\n+   vmadd.vx\\t%0,%2,%4%p1\n+   vmadd.vx\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vmadd.vx\\t%0,%2,%4%p1\"\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"4\")\n@@ -4338,7 +4338,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn \"*pred_<macc_nmsac><mode>_scalar\"\n+(define_insn \"*pred_macc<mode>_scalar\"\n   [(set (match_operand:VI 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n \t(if_then_else:VI\n \t  (unspec:<VM>\n@@ -4349,7 +4349,7 @@\n \t     (match_operand 8 \"const_int_operand\"         \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n+\t  (plus:VI\n \t    (mult:VI\n \t      (vec_duplicate:VI\n \t        (match_operand:<VEL> 2 \"register_operand\" \"  r,  r,   vr\"))\n@@ -4358,9 +4358,9 @@\n \t  (match_dup 4)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vx\\t%0,%2,%3%p1\"\n+   vmacc.vx\\t%0,%2,%3%p1\n+   vmacc.vx\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vmacc.vx\\t%0,%2,%3%p1\"\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"2\")\n@@ -4369,7 +4369,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn_and_rewrite \"*pred_mul_<optab><mode>_scalar\"\n+(define_insn_and_rewrite \"*pred_mul_plus<mode>_scalar\"\n   [(set (match_operand:VI 0 \"register_operand\"            \"=&vr, ?&vr, ?&vr, ?&vr\")\n \t(if_then_else:VI\n \t  (unspec:<VM>\n@@ -4380,7 +4380,7 @@\n \t     (match_operand 9 \"const_int_operand\"        \"    i,    i,    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI\n+\t  (plus:VI\n \t    (mult:VI\n \t      (vec_duplicate:VI\n \t        (match_operand:<VEL> 2 \"register_operand\" \"    r,    r,    r,    r\"))\n@@ -4391,7 +4391,7 @@\n    && !rtx_equal_p (operands[3], operands[5])\n    && !rtx_equal_p (operands[4], operands[5])\"\n   \"@\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vx\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vmacc.vx\\t%0,%2,%3%p1\n    #\n    #\n    #\"\n@@ -4416,7 +4416,7 @@\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"@pred_mul_<optab><mode>_scalar\"\n+(define_expand \"@pred_mul_plus<mode>_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\")\n \t(if_then_else:VI_D\n \t  (unspec:<VM>\n@@ -4427,7 +4427,7 @@\n \t     (match_operand 9 \"const_int_operand\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI_D\n+\t  (plus:VI_D\n \t    (mult:VI_D\n \t      (vec_duplicate:VI_D\n \t        (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n@@ -4444,14 +4444,14 @@\n \t<VM>mode,\n \tfalse,\n \t[] (rtx *operands, rtx boardcast_scalar) {\n-\t  emit_insn (gen_pred_mul_<optab><mode> (operands[0], operands[1],\n+\t  emit_insn (gen_pred_mul_plus<mode> (operands[0], operands[1],\n \t       boardcast_scalar, operands[3], operands[4], operands[5],\n \t       operands[6], operands[7], operands[8], operands[9]));\n         }))\n     DONE;\n })\n \n-(define_insn \"*pred_<madd_nmsub><mode>_extended_scalar\"\n+(define_insn \"*pred_madd<mode>_extended_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\"               \"=vd, vr, ?&vr\")\n \t(if_then_else:VI_D\n \t  (unspec:<VM>\n@@ -4462,7 +4462,7 @@\n \t     (match_operand 8 \"const_int_operand\"              \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI_D\n+\t  (plus:VI_D\n \t    (mult:VI_D\n \t      (vec_duplicate:VI_D\n \t        (sign_extend:<VEL>\n@@ -4472,9 +4472,9 @@\n \t  (match_dup 3)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   v<madd_nmsub>.vx\\t%0,%2,%4%p1\n-   vmv.v.v\\t%0,%2\\;v<madd_nmsub>.vx\\t%0,%2,%4%p1\"\n+   vmadd.vx\\t%0,%2,%4%p1\n+   vmadd.vx\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vmadd.vx\\t%0,%2,%4%p1\"\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"4\")\n@@ -4483,7 +4483,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn \"*pred_<macc_nmsac><mode>_extended_scalar\"\n+(define_insn \"*pred_macc<mode>_extended_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\"               \"=vd, vr, ?&vr\")\n \t(if_then_else:VI_D\n \t  (unspec:<VM>\n@@ -4494,7 +4494,7 @@\n \t     (match_operand 8 \"const_int_operand\"              \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI_D\n+\t  (plus:VI_D\n \t    (mult:VI_D\n \t      (vec_duplicate:VI_D\n \t        (sign_extend:<VEL>\n@@ -4504,9 +4504,9 @@\n \t  (match_dup 4)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   v<macc_nmsac>.vx\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vx\\t%0,%2,%3%p1\"\n+   vmacc.vx\\t%0,%2,%3%p1\n+   vmacc.vx\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vmacc.vx\\t%0,%2,%3%p1\"\n   [(set_attr \"type\" \"vimuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"2\")\n@@ -4515,7 +4515,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn_and_rewrite \"*pred_mul_<optab><mode>_extended_scalar\"\n+(define_insn_and_rewrite \"*pred_mul_plus<mode>_extended_scalar\"\n   [(set (match_operand:VI_D 0 \"register_operand\"                \"=&vr, ?&vr, ?&vr, ?&vr\")\n \t(if_then_else:VI_D\n \t  (unspec:<VM>\n@@ -4526,7 +4526,7 @@\n \t     (match_operand 9 \"const_int_operand\"              \"    i,    i,    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (plus_minus:VI_D\n+\t  (plus:VI_D\n \t    (mult:VI_D\n \t      (vec_duplicate:VI_D\n \t        (sign_extend:<VEL>\n@@ -4538,7 +4538,422 @@\n    && !rtx_equal_p (operands[3], operands[5])\n    && !rtx_equal_p (operands[4], operands[5])\"\n   \"@\n-   vmv.v.v\\t%0,%4\\;v<macc_nmsac>.vx\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vmacc.vx\\t%0,%2,%3%p1\n+   #\n+   #\n+   #\"\n+  \"&& reload_completed\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    if (satisfies_constraint_vi (operands[3]))\n+      {\n+        emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+                \toperands[5], operands[3], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+        operands[5] = operands[3] = operands[0];\n+      }\n+    else\n+      {\n+        emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+                \toperands[5], operands[4], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+        operands[5] = operands[4] = operands[0];\n+      }\n+  }\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_minus_mul<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (match_operand 9 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI\n+\t    (match_operand:VI 4 \"register_operand\")\n+\t    (mult:VI\n+\t      (match_operand:VI 2 \"register_operand\")\n+\t      (match_operand:VI 3 \"register_operand\")))\n+\t  (match_operand:VI 5 \"register_operand\")))]\n+  \"TARGET_VECTOR\"\n+{\n+  /* Swap the multiplication operands if the fallback value is the\n+     second of the two.  */\n+  if (rtx_equal_p (operands[3], operands[5]))\n+    std::swap (operands[2], operands[3]);\n+})\n+\n+(define_insn \"*pred_nmsub<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI\n+\t    (match_operand:VI 4 \"register_operand\"       \" vr, vr,   vr\")\n+\t    (mult:VI\n+\t      (match_operand:VI 2 \"register_operand\"     \"  0,  0,   vr\")\n+\t      (match_operand:VI 3 \"register_operand\"     \" vr, vr,   vr\")))\n+\t  (match_dup 2)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vnmsub.vv\\t%0,%3,%4%p1\n+   vnmsub.vv\\t%0,%3,%4%p1\n+   vmv.v.v\\t%0,%2\\;vnmsub.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"4\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn \"*pred_nmsac<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI\n+\t    (match_operand:VI 4 \"register_operand\"       \"  0,  0,   vr\")\n+\t    (mult:VI\n+\t      (match_operand:VI 2 \"register_operand\"     \" vr, vr,   vr\")\n+\t      (match_operand:VI 3 \"register_operand\"     \" vr, vr,   vr\")))\n+\t  (match_dup 4)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vnmsac.vv\\t%0,%2,%3%p1\n+   vnmsac.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vnmsac.vv\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"2\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn_and_rewrite \"*pred_minus_mul<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"            \"=&vr,?&vr, ?&vr, ?&vr,  ?&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1,vmWc1,vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"    \"   rK,   rK,   rK,   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i,    i,    i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"    i,    i,    i,    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"        \"    i,    i,    i,    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI\n+\t    (match_operand:VI 4 \"vector_arith_operand\"   \"   vr,   vi,   vr,   vr,   vr\")\n+\t    (mult:VI\n+\t      (match_operand:VI 2 \"register_operand\"     \"   vr,   vr,   vi,   vr,   vr\")\n+\t      (match_operand:VI 3 \"register_operand\"     \"   vr,   vr,   vr,   vi,   vr\")))\n+\t  (match_operand:VI 5 \"register_operand\"         \"    0,   vr,   vr,   vr,   vr\")))]\n+  \"TARGET_VECTOR\n+   && !rtx_equal_p (operands[2], operands[5])\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   vmv.v.v\\t%0,%4\\;vnmsac.vv\\t%0,%2,%3%p1\n+   #\n+   #\n+   #\n+   #\"\n+  \"&& reload_completed\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    if (satisfies_constraint_vi (operands[3]))\n+      std::swap (operands[2], operands[3]);\n+\n+    if (satisfies_constraint_vi (operands[2]))\n+      {\n+        emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+                \toperands[5], operands[2], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+        operands[5] = operands[2] = operands[0];\n+      }\n+    else\n+      {\n+        emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+                \toperands[5], operands[4], operands[1], operands[6], \n+\t\t\toperands[7], operands[9]));\n+        operands[5] = operands[4] = operands[0];\n+      }\n+  }\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_minus_mul<mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (match_operand 9 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_QHS\n+\t    (match_operand:VI_QHS 4 \"register_operand\")\n+\t    (mult:VI_QHS\n+\t      (vec_duplicate:VI_QHS\n+\t        (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n+\t      (match_operand:VI_QHS 3 \"register_operand\")))\n+\t  (match_operand:VI_QHS 5 \"register_operand\")))]\n+  \"TARGET_VECTOR\"\n+{\n+  operands[2] = force_reg (<VEL>mode, operands[2]);\n+})\n+\n+(define_insn \"*pred_nmsub<mode>_scalar\"\n+  [(set (match_operand:VI 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI\n+\t    (match_operand:VI 4 \"register_operand\"        \" vr, vr,   vr\")\n+\t    (mult:VI\n+\t      (vec_duplicate:VI\n+\t        (match_operand:<VEL> 2 \"register_operand\" \"  r,  r,   vr\"))\n+\t      (match_operand:VI 3 \"register_operand\"      \"  0,  0,   vr\")))\n+\t  (match_dup 3)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vnmsub.vx\\t%0,%2,%4%p1\n+   vnmsub.vx\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vnmsub.vx\\t%0,%2,%4%p1\"\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"4\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn \"*pred_nmsac<mode>_scalar\"\n+  [(set (match_operand:VI 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI\n+\t    (match_operand:VI 4 \"register_operand\"        \"  0,  0,   vr\")\n+\t    (mult:VI\n+\t      (vec_duplicate:VI\n+\t        (match_operand:<VEL> 2 \"register_operand\" \"  r,  r,   vr\"))\n+\t      (match_operand:VI 3 \"register_operand\"      \" vr, vr,   vr\")))\n+\t  (match_dup 4)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vnmsac.vx\\t%0,%2,%3%p1\n+   vnmsac.vx\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vnmsac.vx\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"2\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn_and_rewrite \"*pred_minus_mul<mode>_scalar\"\n+  [(set (match_operand:VI 0 \"register_operand\"            \"=&vr, ?&vr, ?&vr, ?&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1,vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"    \"   rK,   rK,   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i,    i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"    i,    i,    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"        \"    i,    i,    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI\n+\t    (match_operand:VI 4 \"vector_arith_operand\"    \"   vr,   vi,   vr,   vr\")\n+\t    (mult:VI\n+\t      (vec_duplicate:VI\n+\t        (match_operand:<VEL> 2 \"register_operand\" \"    r,    r,    r,    r\"))\n+\t      (match_operand:VI 3 \"register_operand\"      \"   vr,   vr,   vi,   vr\")))\n+\t  (match_operand:VI 5 \"register_operand\"          \"    0,   vr,   vr,   vr\")))]\n+  \"TARGET_VECTOR\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   vmv.v.v\\t%0,%4\\;vnmsac.vx\\t%0,%2,%3%p1\n+   #\n+   #\n+   #\"\n+  \"&& reload_completed\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    if (satisfies_constraint_vi (operands[3]))\n+      {\n+        emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+                \toperands[5], operands[3], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+        operands[5] = operands[3] = operands[0];\n+      }\n+    else\n+      {\n+        emit_insn (gen_pred_merge<mode> (operands[0], RVV_VUNDEF (<MODE>mode),\n+                \toperands[5], operands[4], operands[1], operands[6],\n+\t\t\toperands[7], operands[9]));\n+        operands[5] = operands[4] = operands[0];\n+      }\n+  }\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_minus_mul<mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 6 \"vector_length_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (match_operand 9 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_D\n+\t    (match_operand:VI_D 4 \"register_operand\")\n+\t    (mult:VI_D\n+\t      (vec_duplicate:VI_D\n+\t        (match_operand:<VEL> 2 \"reg_or_int_operand\"))\n+\t      (match_operand:VI_D 3 \"register_operand\")))\n+\t  (match_operand:VI_D 5 \"register_operand\")))]\n+  \"TARGET_VECTOR\"\n+{\n+  if (riscv_vector::sew64_scalar_helper (\n+\toperands,\n+\t/* scalar op */&operands[2],\n+\t/* vl */operands[6],\n+\t<MODE>mode,\n+\t<VM>mode,\n+\tfalse,\n+\t[] (rtx *operands, rtx boardcast_scalar) {\n+\t  emit_insn (gen_pred_minus_mul<mode> (operands[0], operands[1],\n+\t       boardcast_scalar, operands[3], operands[4], operands[5],\n+\t       operands[6], operands[7], operands[8], operands[9]));\n+        }))\n+    DONE;\n+})\n+\n+(define_insn \"*pred_nmsub<mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"               \"=vd, vr, ?&vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"          \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_D\n+\t    (match_operand:VI_D 4 \"register_operand\"           \" vr, vr,   vr\")\n+\t    (mult:VI_D\n+\t      (vec_duplicate:VI_D\n+\t        (sign_extend:<VEL>\n+\t          (match_operand:<VSUBEL> 2 \"register_operand\" \"  r,  r,   vr\")))\n+\t      (match_operand:VI_D 3 \"register_operand\"         \"  0,  0,   vr\")))\n+\t  (match_dup 3)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vnmsub.vx\\t%0,%2,%4%p1\n+   vnmsub.vx\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vnmsub.vx\\t%0,%2,%4%p1\"\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"4\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn \"*pred_nmsac<mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"               \"=vd, vr, ?&vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"          \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"              \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_D\n+\t    (match_operand:VI_D 4 \"register_operand\"           \"  0,  0,   vr\")\n+\t    (mult:VI_D\n+\t      (vec_duplicate:VI_D\n+\t        (sign_extend:<VEL>\n+\t          (match_operand:<VSUBEL> 2 \"register_operand\" \"  r,  r,   vr\")))\n+\t      (match_operand:VI_D 3 \"register_operand\"         \" vr, vr,   vr\")))\n+\t  (match_dup 4)))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vnmsac.vx\\t%0,%2,%3%p1\n+   vnmsac.vx\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vnmsac.vx\\t%0,%2,%3%p1\"\n+  [(set_attr \"type\" \"vimuladd\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"merge_op_idx\" \"2\")\n+   (set_attr \"vl_op_idx\" \"5\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n+\n+(define_insn_and_rewrite \"*pred_minus_mul<mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"                \"=&vr, ?&vr, ?&vr, ?&vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1,vmWc1,vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"          \"   rK,   rK,   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"              \"    i,    i,    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"              \"    i,    i,    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"              \"    i,    i,    i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_D\n+\t    (match_operand:VI_D 4 \"vector_arith_operand\"       \"   vr,   vr,   vr,   vr\")\n+\t    (mult:VI_D\n+\t      (vec_duplicate:VI_D\n+\t        (sign_extend:<VEL>\n+\t          (match_operand:<VSUBEL> 2 \"register_operand\" \"    r,    r,    r,    r\")))\n+\t      (match_operand:VI_D 3 \"register_operand\"         \"   vr,   vr,   vr,   vr\")))\n+\t  (match_operand:VI_D 5 \"register_operand\"             \"    0,   vr,   vr,   vr\")))]\n+  \"TARGET_VECTOR\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   vmv.v.v\\t%0,%4\\;vnmsac.vx\\t%0,%2,%3%p1\n    #\n    #\n    #\"\n@@ -5046,7 +5461,7 @@\n     std::swap (operands[2], operands[3]);\n })\n \n-(define_insn \"*pred_<madd_nmsub><mode>\"\n+(define_insn \"*pred_<madd_msub><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5065,9 +5480,9 @@\n \t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   vf<madd_nmsub>.vv\\t%0,%3,%4%p1\n-   vmv.v.v\\t%0,%2\\;vf<madd_nmsub>.vv\\t%0,%3,%4%p1\"\n+   vf<madd_msub>.vv\\t%0,%3,%4%p1\n+   vf<madd_msub>.vv\\t%0,%3,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<madd_msub>.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"4\")\n@@ -5076,7 +5491,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn \"*pred_<macc_nmsac><mode>\"\n+(define_insn \"*pred_<macc_msac><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5095,9 +5510,9 @@\n \t  (match_dup 4)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vv\\t%0,%2,%3%p1\"\n+   vf<macc_msac>.vv\\t%0,%2,%3%p1\n+   vf<macc_msac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_msac>.vv\\t%0,%2,%3%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"2\")\n@@ -5128,7 +5543,7 @@\n    && !rtx_equal_p (operands[3], operands[5])\n    && !rtx_equal_p (operands[4], operands[5])\"\n   \"@\n-   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_msac>.vv\\t%0,%2,%3%p1\n    #\"\n   \"&& reload_completed\n    && !rtx_equal_p (operands[0], operands[5])\"\n@@ -5162,7 +5577,7 @@\n   \"TARGET_VECTOR\"\n {})\n \n-(define_insn \"*pred_<madd_nmsub><mode>_scalar\"\n+(define_insn \"*pred_<madd_msub><mode>_scalar\"\n   [(set (match_operand:VF 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5182,9 +5597,9 @@\n \t  (match_dup 3)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n-   vf<madd_nmsub>.vf\\t%0,%2,%4%p1\n-   vmv.v.v\\t%0,%2\\;vf<madd_nmsub>.vf\\t%0,%2,%4%p1\"\n+   vf<madd_msub>.vf\\t%0,%2,%4%p1\n+   vf<madd_msub>.vf\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<madd_msub>.vf\\t%0,%2,%4%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"4\")\n@@ -5193,7 +5608,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn \"*pred_<macc_nmsac><mode>_scalar\"\n+(define_insn \"*pred_<macc_msac><mode>_scalar\"\n   [(set (match_operand:VF 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5213,9 +5628,9 @@\n \t  (match_dup 4)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n-   vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vf\\t%0,%2,%3%p1\"\n+   vf<macc_msac>.vf\\t%0,%2,%3%p1\n+   vf<macc_msac>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_msac>.vf\\t%0,%2,%3%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"2\")\n@@ -5246,7 +5661,7 @@\n    && !rtx_equal_p (operands[3], operands[5])\n    && !rtx_equal_p (operands[4], operands[5])\"\n   \"@\n-   vmv.v.v\\t%0,%4\\;vf<macc_nmsac>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<macc_msac>.vf\\t%0,%2,%3%p1\n    #\"\n   \"&& reload_completed\n    && !rtx_equal_p (operands[0], operands[5])\"\n@@ -5259,7 +5674,7 @@\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"@pred_neg_mul_<optab><mode>\"\n+(define_expand \"@pred_mul_neg_<optab><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5270,12 +5685,12 @@\n \t     (match_operand 9 \"const_int_operand\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n \t        (match_operand:VF 2 \"register_operand\")\n-\t        (match_operand:VF 3 \"register_operand\"))))\n+\t        (match_operand:VF 3 \"register_operand\")))\n+\t    (match_operand:VF 4 \"register_operand\"))\n \t  (match_operand:VF 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {\n@@ -5285,7 +5700,7 @@\n     std::swap (operands[2], operands[3]);\n })\n \n-(define_insn \"*pred_<nmadd_msub><mode>\"\n+(define_insn \"*pred_<nmsub_nmadd><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5296,18 +5711,18 @@\n \t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\"     \" vr, vr,   vr\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n \t        (match_operand:VF 2 \"register_operand\"   \"  0,  0,   vr\")\n-\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr,   vr\"))))\n+\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr,   vr\")))\n+\t    (match_operand:VF 4 \"register_operand\"       \" vr, vr,   vr\"))\n \t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n-   vf<nmadd_msub>.vv\\t%0,%3,%4%p1\n-   vmv.v.v\\t%0,%2\\;vf<nmadd_msub>.vv\\t%0,%3,%4%p1\"\n+   vf<nmsub_nmadd>.vv\\t%0,%3,%4%p1\n+   vf<nmsub_nmadd>.vv\\t%0,%3,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<nmsub_nmadd>.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"4\")\n@@ -5316,7 +5731,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn \"*pred_<nmacc_msac><mode>\"\n+(define_insn \"*pred_<nmsac_nmacc><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\"           \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5327,18 +5742,18 @@\n \t     (match_operand 8 \"const_int_operand\"        \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\"     \"  0,  0,   vr\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n \t        (match_operand:VF 2 \"register_operand\"   \" vr, vr,   vr\")\n-\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr,   vr\"))))\n+\t        (match_operand:VF 3 \"register_operand\"   \" vr, vr,   vr\")))\n+\t    (match_operand:VF 4 \"register_operand\"       \"  0,  0,   vr\"))\n \t  (match_dup 4)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n-   vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vv\\t%0,%2,%3%p1\"\n+   vf<nmsac_nmacc>.vv\\t%0,%2,%3%p1\n+   vf<nmsac_nmacc>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmsac_nmacc>.vv\\t%0,%2,%3%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"2\")\n@@ -5347,7 +5762,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn_and_rewrite \"*pred_neg_mul_<optab><mode>\"\n+(define_insn_and_rewrite \"*pred_mul_neg_<optab><mode>\"\n   [(set (match_operand:VF 0 \"register_operand\"            \"=&vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5358,19 +5773,19 @@\n \t     (match_operand 9 \"const_int_operand\"        \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"vector_arith_operand\" \"   vr,   vr\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n-\t        (match_operand:VF 2 \"register_operand\"   \"   vr,   vr\")\n-\t        (match_operand:VF 3 \"register_operand\"   \"   vr,   vr\"))))\n+\t        (match_operand:VF 2 \"register_operand\"     \"   vr,   vr\")\n+\t        (match_operand:VF 3 \"register_operand\"     \"   vr,   vr\")))\n+\t    (match_operand:VF 4 \"vector_arith_operand\"   \"   vr,   vr\"))\n \t  (match_operand:VF 5 \"register_operand\"         \"    0,   vr\")))]\n   \"TARGET_VECTOR\n    && !rtx_equal_p (operands[2], operands[5])\n    && !rtx_equal_p (operands[3], operands[5])\n    && !rtx_equal_p (operands[4], operands[5])\"\n   \"@\n-   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vv\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmsac_nmacc>.vv\\t%0,%2,%3%p1\n    #\"\n   \"&& reload_completed\n    && !rtx_equal_p (operands[0], operands[5])\"\n@@ -5383,7 +5798,7 @@\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"@pred_neg_mul_<optab><mode>_scalar\"\n+(define_expand \"@pred_mul_neg_<optab><mode>_scalar\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5394,41 +5809,41 @@\n \t     (match_operand 9 \"const_int_operand\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n \t        (vec_duplicate:VF\n \t          (match_operand:<VEL> 2 \"register_operand\"))\n-\t        (match_operand:VF 3 \"register_operand\"))))\n+\t        (match_operand:VF 3 \"register_operand\")))\n+\t    (match_operand:VF 4 \"register_operand\"))\n \t  (match_operand:VF 5 \"register_operand\")))]\n   \"TARGET_VECTOR\"\n {})\n \n-(define_insn \"*pred_<nmadd_msub><mode>_scalar\"\n-  [(set (match_operand:VF 0 \"register_operand\"              \"=vd, vr, ?&vr\")\n+(define_insn \"*pred_<nmsub_nmadd><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"            \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"    \" vm,Wc1,vmWc1\")\n-\t     (match_operand 5 \"vector_length_operand\"       \" rK, rK,   rK\")\n-\t     (match_operand 6 \"const_int_operand\"           \"  i,  i,    i\")\n-\t     (match_operand 7 \"const_int_operand\"           \"  i,  i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"           \"  i,  i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"  \" vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"     \" rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"         \"  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"         \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\"        \" vr, vr,   vr\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n \t        (vec_duplicate:VF\n \t          (match_operand:<VEL> 2 \"register_operand\" \"  f,  f,   vr\"))\n-\t        (match_operand:VF 3 \"register_operand\"      \"  0,  0,   vr\"))))\n+\t        (match_operand:VF 3 \"register_operand\"      \"  0,  0,   vr\")))\n+\t    (match_operand:VF 4 \"register_operand\"        \" vr, vr,   vr\"))\n \t  (match_dup 3)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n-   vf<nmadd_msub>.vf\\t%0,%2,%4%p1\n-   vmv.v.v\\t%0,%2\\;vf<nmadd_msub>.vf\\t%0,%2,%4%p1\"\n+   vf<nmsub_nmadd>.vf\\t%0,%2,%4%p1\n+   vf<nmsub_nmadd>.vf\\t%0,%2,%4%p1\n+   vmv.v.v\\t%0,%2\\;vf<nmsub_nmadd>.vf\\t%0,%2,%4%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"4\")\n@@ -5437,7 +5852,7 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn \"*pred_<nmacc_msac><mode>_scalar\"\n+(define_insn \"*pred_<nmsac_nmacc><mode>_scalar\"\n   [(set (match_operand:VF 0 \"register_operand\"              \"=vd, vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n@@ -5448,19 +5863,19 @@\n \t     (match_operand 8 \"const_int_operand\"           \"  i,  i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"register_operand\"        \"  0,  0,   vr\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n \t        (vec_duplicate:VF\n \t          (match_operand:<VEL> 2 \"register_operand\" \"  f,  f,   vr\"))\n-\t        (match_operand:VF 3 \"register_operand\"      \" vr, vr,   vr\"))))\n+\t        (match_operand:VF 3 \"register_operand\"      \" vr, vr,   vr\")))\n+\t    (match_operand:VF 4 \"register_operand\"          \"  0,  0,   vr\"))\n \t  (match_dup 4)))]\n   \"TARGET_VECTOR\"\n   \"@\n-   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n-   vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n-   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vf\\t%0,%2,%3%p1\"\n+   vf<nmsac_nmacc>.vf\\t%0,%2,%3%p1\n+   vf<nmsac_nmacc>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmsac_nmacc>.vf\\t%0,%2,%3%p1\"\n   [(set_attr \"type\" \"vfmuladd\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"2\")\n@@ -5469,30 +5884,30 @@\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[7])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[8])\"))])\n \n-(define_insn_and_rewrite \"*pred_neg_mul_<optab><mode>_scalar\"\n-  [(set (match_operand:VF 0 \"register_operand\"              \"=&vr, ?&vr\")\n+(define_insn_and_rewrite \"*pred_mul_neg_<optab><mode>_scalar\"\n+  [(set (match_operand:VF 0 \"register_operand\"               \"=&vr, ?&vr\")\n \t(if_then_else:VF\n \t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \"vmWc1,vmWc1\")\n-\t     (match_operand 6 \"vector_length_operand\"      \"   rK,   rK\")\n-\t     (match_operand 7 \"const_int_operand\"          \"    i,    i\")\n-\t     (match_operand 8 \"const_int_operand\"          \"    i,    i\")\n-\t     (match_operand 9 \"const_int_operand\"          \"    i,    i\")\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"    \"vmWc1,vmWc1\")\n+\t     (match_operand 6 \"vector_length_operand\"       \"   rK,   rK\")\n+\t     (match_operand 7 \"const_int_operand\"           \"    i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"           \"    i,    i\")\n+\t     (match_operand 9 \"const_int_operand\"           \"    i,    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VF\n-\t    (plus_minus:VF\n-\t      (match_operand:VF 4 \"vector_arith_operand\"    \"   vr,  vr\")\n+\t  (plus_minus:VF\n+\t    (neg:VF\n \t      (mult:VF\n \t        (vec_duplicate:VF\n \t          (match_operand:<VEL> 2 \"register_operand\" \"    f,   f\"))\n-\t        (match_operand:VF 3 \"register_operand\"      \"   vr,  vr\"))))\n+\t        (match_operand:VF 3 \"register_operand\"      \"   vr,  vr\")))\n+\t    (match_operand:VF 4 \"vector_arith_operand\"      \"   vr,  vr\"))\n \t  (match_operand:VF 5 \"register_operand\"            \"    0,  vr\")))]\n   \"TARGET_VECTOR\n    && !rtx_equal_p (operands[3], operands[5])\n    && !rtx_equal_p (operands[4], operands[5])\"\n   \"@\n-   vmv.v.v\\t%0,%4\\;vf<nmacc_msac>.vf\\t%0,%2,%3%p1\n+   vmv.v.v\\t%0,%4\\;vf<nmsac_nmacc>.vf\\t%0,%2,%3%p1\n    #\"\n   \"&& reload_completed\n    && !rtx_equal_p (operands[0], operands[5])\"\n@@ -5693,15 +6108,15 @@\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus_minus:VWEXTF\n-\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n \t    (mult:VWEXTF\n \t      (float_extend:VWEXTF\n \t        (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n \t      (float_extend:VWEXTF\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\"))\n \t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n-  \"vfw<macc_nmsac>.vv\\t%0,%3,%4%p1\"\n+  \"vfw<macc_msac>.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n@@ -5717,20 +6132,20 @@\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (plus_minus:VWEXTF\n-\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n \t    (mult:VWEXTF\n \t      (float_extend:VWEXTF\n \t        (vec_duplicate:<V_DOUBLE_TRUNC>\n \t          (match_operand:<VSUBEL> 3 \"register_operand\"       \"    f\")))\n \t      (float_extend:VWEXTF\n-\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t        (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))\n+\t    (match_operand:VWEXTF 2 \"register_operand\"               \"    0\"))\n \t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n-  \"vfw<macc_nmsac>.vf\\t%0,%3,%4%p1\"\n+  \"vfw<macc_msac>.vf\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n-(define_insn \"@pred_widen_neg_mul_<optab><mode>\"\n+(define_insn \"@pred_widen_mul_neg_<optab><mode>\"\n   [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr\")\n \t(if_then_else:VWEXTF\n \t  (unspec:<VM>\n@@ -5741,21 +6156,21 @@\n \t     (match_operand 8 \"const_int_operand\"                      \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VWEXTF\n-\t    (plus_minus:VWEXTF\n-\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n+\t  (plus_minus:VWEXTF\n+\t    (neg:VWEXTF\n \t      (mult:VWEXTF\n \t        (float_extend:VWEXTF\n \t          (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n \t        (float_extend:VWEXTF\n-\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))))\n+\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0\"))\n \t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n-  \"vfw<nmacc_msac>.vv\\t%0,%3,%4%p1\"\n+  \"vfw<nmsac_nmacc>.vv\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n \n-(define_insn \"@pred_widen_neg_mul_<optab><mode>_scalar\"\n+(define_insn \"@pred_widen_mul_neg_<optab><mode>_scalar\"\n   [(set (match_operand:VWEXTF 0 \"register_operand\"                      \"=&vr\")\n \t(if_then_else:VWEXTF\n \t  (unspec:<VM>\n@@ -5766,18 +6181,18 @@\n \t     (match_operand 8 \"const_int_operand\"                      \"    i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (neg:VWEXTF\n-\t    (plus_minus:VWEXTF\n-\t      (match_operand:VWEXTF 2 \"register_operand\"               \"    0\")\n+\t  (plus_minus:VWEXTF\n+\t    (neg:VWEXTF\n \t      (mult:VWEXTF\n \t        (float_extend:VWEXTF\n \t          (vec_duplicate:<V_DOUBLE_TRUNC>\n \t            (match_operand:<VSUBEL> 3 \"register_operand\"       \"    f\")))\n \t        (float_extend:VWEXTF\n-\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\")))))\n+\t          (match_operand:<V_DOUBLE_TRUNC> 4 \"register_operand\" \"   vr\"))))\n+\t    (match_operand:VWEXTF 2 \"register_operand\"                 \"    0\"))\n \t  (match_dup 2)))]\n   \"TARGET_VECTOR\"\n-  \"vfw<nmacc_msac>.vf\\t%0,%3,%4%p1\"\n+  \"vfw<nmsac_nmacc>.vf\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vfwmuladd\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n "}, {"sha": "2832c9c8e4c0fe554d1f7454d4e54e79bf5e3185", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/bug-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-3.c?ref=0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run { target { riscv_vector } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"riscv_vector.h\"\n+#include <stdio.h>\n+\n+int main()\n+{\n+  int32_t a = 1;\n+  int32_t b[1] = {3};\n+  int32_t c[1] = {10};\n+  int32_t d[1] = {0};\n+  vint32m1_t vb = __riscv_vle32_v_i32m1 (b, 1);\n+  vint32m1_t vc = __riscv_vle32_v_i32m1 (c, 1);\n+  vint32m1_t vd = __riscv_vnmsub_vx_i32m1 (vb, a, vc, 1);\n+  __riscv_vse32_v_i32m1 (d, vd, 1);\n+  if (d[0] != 7){\n+      printf(\"d[0] should be 7, but got %d\\n\", d[0]);\n+      __builtin_abort ();\n+  }\n+  return 0;\n+}"}, {"sha": "ab003fdef24349ab2c4ca87482107a42d9b82b54", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/bug-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-4.c?ref=0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run { target { riscv_vector } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"riscv_vector.h\"\n+#include <stdio.h>\n+\n+int main()\n+{\n+  float a = 1.0;\n+  float b[1] = {3.0};\n+  float c[1] = {10.0};\n+  float d[1] = {0.0};\n+  vfloat32m1_t vb = __riscv_vle32_v_f32m1 (b, 1);\n+  vfloat32m1_t vc = __riscv_vle32_v_f32m1 (c, 1);\n+  vfloat32m1_t vd = __riscv_vfnmsub_vf_f32m1 (vb, a, vc, 1);\n+  __riscv_vse32_v_f32m1 (d, vd, 1);\n+  if (d[0] != 7.0){\n+      printf(\"d[0] should be 7.0, but got %f\\n\", d[0]);\n+      __builtin_abort ();\n+  }\n+  return 0;\n+}"}, {"sha": "8230695d66204189d24a6af877b709558e7fd591", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/bug-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2715176df3787d1470d7b9bde26b1b5e16e1e2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbug-5.c?ref=0e2715176df3787d1470d7b9bde26b1b5e16e1e2", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run { target { riscv_vector } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"riscv_vector.h\"\n+#include <stdio.h>\n+\n+int main()\n+{\n+  float a = 1.0;\n+  float b[1] = {3.0};\n+  float c[1] = {10.0};\n+  float d[1] = {0.0};\n+  vfloat32m1_t vb = __riscv_vle32_v_f32m1 (b, 1);\n+  vfloat32m1_t vc = __riscv_vle32_v_f32m1 (c, 1);\n+  vfloat32m1_t vd = __riscv_vfmsub_vf_f32m1 (vb, a, vc, 1);\n+  __riscv_vse32_v_f32m1 (d, vd, 1);\n+  if (d[0] != -7.0){\n+      printf(\"d[0] should be -7.0, but got %f\\n\", d[0]);\n+      __builtin_abort ();\n+  }\n+  return 0;\n+}"}]}