{"sha": "046608a3e0569946f4a499c59e02f45b057d7251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2NjA4YTNlMDU2OTk0NmY0YTQ5OWM1OWUwMmY0NWIwNTdkNzI1MQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-01-08T19:44:30Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-01-08T19:44:30Z"}, "message": "In gcc/: 2011-01-08 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2011-01-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47078\n\t* c-parser.c (c_parser_objc_type_name): If the type is unknown,\n\tfor error recovery purposes behave as if it was not specified so\n\tthat the default type is usd.\n\nIn gcc/testsuite/:\n2011-01-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47078\n\t* objc.dg/invalid-method-2.m: New.\n\t* obj-c++.dg/invalid-method-2.mm: New.\n\nIn gcc/cp/:\n2011-01-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47078\n\t* parser.c (cp_parser_objc_typename): If the type is unknown, for\n\terror recovery purposes behave as if it was not specified so that\n\tthe default type is used.\n\nFrom-SVN: r168601", "tree": {"sha": "7f721598e3310166b94d26cc0b888759037b4960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f721598e3310166b94d26cc0b888759037b4960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/046608a3e0569946f4a499c59e02f45b057d7251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046608a3e0569946f4a499c59e02f45b057d7251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046608a3e0569946f4a499c59e02f45b057d7251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046608a3e0569946f4a499c59e02f45b057d7251/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1f39033accfe89082fc2701d02bd65b57df0978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f39033accfe89082fc2701d02bd65b57df0978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f39033accfe89082fc2701d02bd65b57df0978"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "2efec7e7bddcfee3530665e1660017681db4d4ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=046608a3e0569946f4a499c59e02f45b057d7251", "patch": "@@ -1,3 +1,10 @@\n+2011-01-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47078\n+\t* c-parser.c (c_parser_objc_type_name): If the type is unknown,\n+\tfor error recovery purposes behave as if it was not specified so\n+\tthat the default type is usd.\n+\n 2011-01-07  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optmization/46469"}, {"sha": "cf34e0414630455cd490a9157215dbc11d4ab2ba", "filename": "gcc/c-parser.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=046608a3e0569946f4a499c59e02f45b057d7251", "patch": "@@ -7482,6 +7482,14 @@ c_parser_objc_type_name (c_parser *parser)\n     type_name = c_parser_type_name (parser);\n   if (type_name)\n     type = groktypename (type_name, NULL, NULL);\n+\n+  /* If the type is unknown, and error has already been produced and\n+     we need to recover from the error.  In that case, use NULL_TREE\n+     for the type, as if no type had been specified; this will use the\n+     default type ('id') which is good for error recovery.  */\n+  if (type == error_mark_node)\n+    type = NULL_TREE;\n+\n   return build_tree_list (quals, type);\n }\n "}, {"sha": "4cfe3e613b2cc92631e062119e60688fd0e9bc5e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=046608a3e0569946f4a499c59e02f45b057d7251", "patch": "@@ -1,3 +1,10 @@\n+2011-01-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47078\n+\t* parser.c (cp_parser_objc_typename): If the type is unknown, for\n+\terror recovery purposes behave as if it was not specified so that\n+\tthe default type is used.\n+\n 2011-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/47022"}, {"sha": "2f11f8ee90893ac48437b4bb9e7c050281018d62", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=046608a3e0569946f4a499c59e02f45b057d7251", "patch": "@@ -21915,7 +21915,25 @@ cp_parser_objc_typename (cp_parser* parser)\n       /* An ObjC type name may consist of just protocol qualifiers, in which\n \t case the type shall default to 'id'.  */\n       if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN))\n-\tcp_type = cp_parser_type_id (parser);\n+\t{\n+\t  cp_type = cp_parser_type_id (parser);\n+\t  \n+\t  /* If the type could not be parsed, an error has already\n+\t     been produced.  For error recovery, behave as if it had\n+\t     not been specified, which will use the default type\n+\t     'id'.  */\n+\t  if (cp_type == error_mark_node)\n+\t    {\n+\t      cp_type = NULL_TREE;\n+\t      /* We need to skip to the closing parenthesis as\n+\t\t cp_parser_type_id() does not seem to do it for\n+\t\t us.  */\n+\t      cp_parser_skip_to_closing_parenthesis (parser,\n+\t\t\t\t\t\t     /*recovering=*/true,\n+\t\t\t\t\t\t     /*or_comma=*/false,\n+\t\t\t\t\t\t     /*consume_paren=*/false);\n+\t    }\n+\t}\n \n       cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n       type_name = build_tree_list (proto_quals, cp_type);"}, {"sha": "459750ff4d01c9c436c4ee0019b620d11205bf59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=046608a3e0569946f4a499c59e02f45b057d7251", "patch": "@@ -1,3 +1,9 @@\n+2011-01-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47078\n+\t* objc.dg/invalid-method-2.m: New.\n+\t* obj-c++.dg/invalid-method-2.mm: New.\n+\n 2011-01-08  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/46896"}, {"sha": "48f03599c11631b47f7fc9b76239638aa32171db", "filename": "gcc/testsuite/obj-c++.dg/invalid-method-2.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-method-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-method-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-method-2.mm?ref=046608a3e0569946f4a499c59e02f45b057d7251", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+/* Test that using an invalid type in a method declaration produces a\n+   friendly error without a compiler crash.  */\n+\n+@interface MyClass\n+@end\n+\n+@implementation MyClass\n+- (x) method /* { dg-error \"expected\" } */\n+{\n+  return 0;\n+}\n+- (id) method2: (x)argument /* { dg-error \"expected\" } */\n+{\n+  return 0;\n+}\n+@end"}, {"sha": "cb18de957402fffd803e1826b07f5f8e6663f936", "filename": "gcc/testsuite/objc.dg/invalid-method-2.m", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-method-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046608a3e0569946f4a499c59e02f45b057d7251/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-method-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Finvalid-method-2.m?ref=046608a3e0569946f4a499c59e02f45b057d7251", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+/* Test that using an invalid type in a method declaration produces a\n+   friendly error without a compiler crash.  */\n+\n+@interface MyClass\n+@end\n+\n+@implementation MyClass\n+- (x) method /* { dg-error \"unknown type name\" } */\n+{\n+  return 0;\n+}\n+- (id) method2: (x)argument /* { dg-error \"unknown type name\" } */\n+{\n+  return 0;\n+}\n+@end"}]}