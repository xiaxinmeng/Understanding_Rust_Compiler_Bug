{"sha": "77c585ca576b4bc6bf7850c40771862667f6c0e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjNTg1Y2E1NzZiNGJjNmJmNzg1MGM0MDc3MTg2MjY2N2Y2YzBlNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T13:58:41Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T13:58:41Z"}, "message": "S/390: Use wfc for scalar vector compares\n\nThe z13 vector support used the vector style comparison instructions\nalso for the scalar compares in vector registers.  However, it is much\nmore convenient to just use the compare scalar instruction for that\npurpose.  The advantage is that this instruction generates a CC result\nas our compares usually do.  So this results in quite some code to be\nremoved from the backend.\n\nRegression tested on s390x.\n\ngcc/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/2964.md: Remove the single element vector compare\n\tinstructions which are no longer used.\n\t* config/s390/s390.c (s390_select_ccmode): Remove handling of\n\tvector CCmodes.\n\t(s390_canonicalize_comparison): Remove handling of DFmode\n\tcompares.\n\t(s390_expand_vec_compare_scalar): Remove function.\n\t(s390_emit_compare): Don't call s390_expand_vec_compare_scalar.\n\t* config/s390/s390.md (\"*vec_cmp<insn_cmp>df_cconly\"): Remove\n\tpattern.\n\t(\"*cmp<mode>_ccs\"): Add wfcdb instruction.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vector/vec-scalar-cmp-1.c: Adjust for the\n\tcomparison instructions used from now on.\n\nFrom-SVN: r246450", "tree": {"sha": "c890ec994f1f693fe190cbbfac958a89f0bdab97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c890ec994f1f693fe190cbbfac958a89f0bdab97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77c585ca576b4bc6bf7850c40771862667f6c0e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c585ca576b4bc6bf7850c40771862667f6c0e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c585ca576b4bc6bf7850c40771862667f6c0e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c585ca576b4bc6bf7850c40771862667f6c0e7/comments", "author": null, "committer": null, "parents": [{"sha": "b5de6e84a5c2ad730e1a4c198d0082682f86403b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5de6e84a5c2ad730e1a4c198d0082682f86403b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5de6e84a5c2ad730e1a4c198d0082682f86403b"}], "stats": {"total": 186, "additions": 57, "deletions": 129}, "files": [{"sha": "6e203264d1dfc734426638aec94d59e693031ad2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77c585ca576b4bc6bf7850c40771862667f6c0e7", "patch": "@@ -1,3 +1,17 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/2964.md: Remove the single element vector compare\n+\tinstructions which are no longer used.\n+\t* config/s390/s390.c (s390_select_ccmode): Remove handling of\n+\tvector CCmodes.\n+\t(s390_canonicalize_comparison): Remove handling of DFmode\n+\tcompares.\n+\t(s390_expand_vec_compare_scalar): Remove function.\n+\t(s390_emit_compare): Don't call s390_expand_vec_compare_scalar.\n+\t* config/s390/s390.md (\"*vec_cmp<insn_cmp>df_cconly\"): Remove\n+\tpattern.\n+\t(\"*cmp<mode>_ccs\"): Add wfcdb instruction.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"mov<mode>_64dfp\" DD_DF): Use vleig for loading a"}, {"sha": "d9b672960a378de4c476d607da980ca091e54f6a", "filename": "gcc/config/s390/2964.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Fconfig%2Fs390%2F2964.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Fconfig%2Fs390%2F2964.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2964.md?ref=77c585ca576b4bc6bf7850c40771862667f6c0e7", "patch": "@@ -88,15 +88,15 @@ vsh,vsl,vsq,lxebr,cdtr,fiebr,vupllb,vupllf,vupllh,vmrhb,madbr,vtm,vmrhf,\\\n vmrhg,vmrhh,axtr,fiebra,vleb,cxtr,vlef,vleg,vleh,vpkf,vpkg,vpkh,vmlob,vmlof,\\\n vmloh,lxdb,ldeb,mdtr,vceqfs,adb,wflndb,lxeb,vn,vo,vchlb,vx,mxtr,vchlf,vchlg,\\\n vchlh,vfcedbs,vfcedb,vceqgs,cxbr,msdbr,vcdgb,debr,vceqhs,meeb,lcxbr,vavglb,\\\n-vavglf,vavglg,vavglh,wfcedbs,vmrlb,vmrlf,vmrlg,vmrlh,wfchedbs,vmxb,tcdb,\\\n+vavglf,vavglg,vavglh,vmrlb,vmrlf,vmrlg,vmrlh,vmxb,tcdb,\\\n vmahh,vsrlb,wcgdb,lcdbr,vistrbs,vrepb,wfmdb,vrepf,vrepg,vreph,ler,wcdlgb,\\\n ley,vistrb,vistrf,vistrh,tceb,wfsqdb,sqeb,vsumqf,vsumqg,vesrlb,vfeezbs,\\\n maebr,vesrlf,vesrlg,vesrlh,vmeb,vmef,vmeh,meebr,vflcdb,wfmadb,vperm,sxtr,\\\n vclzf,vgm,vgmb,vgmf,vgmg,vgmh,tdcxt,vzero,msebr,veslb,veslf,veslg,vfenezb,\\\n vfenezf,vfenezh,vistrfs,vchf,vchg,vchh,vmhb,vmhf,vmhh,cdb,veslvb,ledbr,\\\n veslvf,veslvg,veslvh,wclgdb,vfmdb,vmnlb,vmnlf,vmnlg,vmnlh,vclzb,vfeezfs,\\\n vclzg,vclzh,mdb,vmxlb,vmxlf,vmxlg,vmxlh,ltdtr,vsbcbiq,ceb,wfddb,sebr,vistrhs,\\\n-lxdtr,lcebr,vab,vaf,vag,vah,ltxtr,vlpf,vlpg,vsegb,vaq,vsegf,vsegh,wfchdbs,\\\n+lxdtr,lcebr,vab,vaf,vag,vah,ltxtr,vlpf,vlpg,vsegb,vaq,vsegf,vsegh,\\\n sdtr,cdbr,vfeezhs,le,wldeb,vfmadb,vchlbs,vacccq,vmaleb,vsel,vmalef,vmaleh,\\\n vflndb,mdbr,vmlb,wflpdb,ldetr,vpksfs,vpksf,vpksg,vpksh,sqdb,mxbr,sqdbr,\\\n vmaeb,veslh,vmaef,vpklsf,vpklsg,vpklsh,verllb,vchb,ddtr,verllf,verllg,verllh,\\\n@@ -164,15 +164,15 @@ vsl,vsq,lxebr,cdtr,fiebr,vupllb,vupllf,vupllh,vmrhb,madbr,vtm,vmrhf,vmrhg,\\\n vmrhh,axtr,fiebra,vleb,cxtr,vlef,vleg,vleh,vpkf,vpkg,vpkh,vmlob,vmlof,vmloh,\\\n lxdb,ldeb,vceqfs,adb,wflndb,lxeb,vn,vo,vchlb,vx,vchlf,vchlg,vchlh,vfcedbs,\\\n vfcedb,vceqgs,cxbr,msdbr,vcdgb,vceqhs,meeb,lcxbr,vavglb,vavglf,vavglg,vavglh,\\\n-wfcedbs,vmrlb,vmrlf,vmrlg,vmrlh,wfchedbs,vmxb,tcdb,vmahh,vsrlb,wcgdb,lcdbr,\\\n+vmrlb,vmrlf,vmrlg,vmrlh,vmxb,tcdb,vmahh,vsrlb,wcgdb,lcdbr,\\\n vistrbs,vrepb,wfmdb,vrepf,vrepg,vreph,ler,wcdlgb,ley,vistrb,vistrf,vistrh,\\\n tceb,vsumqf,vsumqg,vesrlb,vfeezbs,maebr,vesrlf,vesrlg,vesrlh,vmeb,vmef,\\\n vmeh,meebr,vflcdb,wfmadb,vperm,sxtr,vclzf,vgm,vgmb,vgmf,vgmg,vgmh,tdcxt,\\\n vzero,msebr,veslb,veslf,veslg,vfenezb,vfenezf,vfenezh,vistrfs,vchf,vchg,\\\n vchh,vmhb,vmhf,vmhh,cdb,veslvb,ledbr,veslvf,veslvg,veslvh,wclgdb,vfmdb,\\\n vmnlb,vmnlf,vmnlg,vmnlh,vclzb,vfeezfs,vclzg,vclzh,mdb,vmxlb,vmxlf,vmxlg,\\\n vmxlh,ltdtr,vsbcbiq,ceb,sebr,vistrhs,lxdtr,lcebr,vab,vaf,vag,vah,ltxtr,\\\n-vlpf,vlpg,vsegb,vaq,vsegf,vsegh,wfchdbs,sdtr,cdbr,vfeezhs,le,wldeb,vfmadb,\\\n+vlpf,vlpg,vsegb,vaq,vsegf,vsegh,sdtr,cdbr,vfeezhs,le,wldeb,vfmadb,\\\n vchlbs,vacccq,vmaleb,vsel,vmalef,vmaleh,vflndb,mdbr,vmlb,wflpdb,ldetr,vpksfs,\\\n vpksf,vpksg,vpksh,vmaeb,veslh,vmaef,vpklsf,vpklsg,vpklsh,verllb,vchb,verllf,\\\n verllg,verllh,wfsdb,maeb,vclgdb,vftcidb,vpksgs,vmxf,vmxg,vmxh,fidbra,vmnb,\\"}, {"sha": "eac39c5a616ea40b75a2d7f45f815f7646e826fa", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 101, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=77c585ca576b4bc6bf7850c40771862667f6c0e7", "patch": "@@ -1402,29 +1402,6 @@ s390_tm_ccmode (rtx op1, rtx op2, bool mixed)\n machine_mode\n s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n {\n-  if (TARGET_VX\n-      && register_operand (op0, DFmode)\n-      && register_operand (op1, DFmode))\n-    {\n-      /* LT, LE, UNGT, UNGE require swapping OP0 and OP1.  Either\n-\t s390_emit_compare or s390_canonicalize_comparison will take\n-\t care of it.  */\n-      switch (code)\n-\t{\n-\tcase EQ:\n-\tcase NE:\n-\t  return CCVEQmode;\n-\tcase GT:\n-\tcase UNLE:\n-\t  return CCVFHmode;\n-\tcase GE:\n-\tcase UNLT:\n-\t  return CCVFHEmode;\n-\tdefault:\n-\t  ;\n-\t}\n-    }\n-\n   switch (code)\n     {\n       case EQ:\n@@ -1703,26 +1680,6 @@ s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n       *code = (int)swap_condition ((enum rtx_code)*code);\n     }\n \n-  /* Using the scalar variants of vector instructions for 64 bit FP\n-     comparisons might require swapping the operands.  */\n-  if (TARGET_VX\n-      && register_operand (*op0, DFmode)\n-      && register_operand (*op1, DFmode)\n-      && (*code == LT || *code == LE || *code == UNGT || *code == UNGE))\n-    {\n-      rtx tmp;\n-\n-      switch (*code)\n-\t{\n-\tcase LT:   *code = GT; break;\n-\tcase LE:   *code = GE; break;\n-\tcase UNGT: *code = UNLE; break;\n-\tcase UNGE: *code = UNLT; break;\n-\tdefault: ;\n-\t}\n-      tmp = *op0; *op0 = *op1; *op1 = tmp;\n-    }\n-\n   /* A comparison result is compared against zero.  Replace it with\n      the (perhaps inverted) original comparison.\n      This probably should be done by simplify_relational_operation.  */\n@@ -1749,56 +1706,6 @@ s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n     }\n }\n \n-/* Helper function for s390_emit_compare.  If possible emit a 64 bit\n-   FP compare using the single element variant of vector instructions.\n-   Replace CODE with the comparison code to be used in the CC reg\n-   compare and return the condition code register RTX in CC.  */\n-\n-static bool\n-s390_expand_vec_compare_scalar (enum rtx_code *code, rtx cmp1, rtx cmp2,\n-\t\t\t\trtx *cc)\n-{\n-  machine_mode cmp_mode;\n-  bool swap_p = false;\n-\n-  switch (*code)\n-    {\n-    case EQ:   cmp_mode = CCVEQmode;  break;\n-    case NE:   cmp_mode = CCVEQmode;  break;\n-    case GT:   cmp_mode = CCVFHmode;  break;\n-    case GE:   cmp_mode = CCVFHEmode; break;\n-    case UNLE: cmp_mode = CCVFHmode;  break;\n-    case UNLT: cmp_mode = CCVFHEmode; break;\n-    case LT:   cmp_mode = CCVFHmode;  *code = GT;   swap_p = true; break;\n-    case LE:   cmp_mode = CCVFHEmode; *code = GE;   swap_p = true; break;\n-    case UNGE: cmp_mode = CCVFHmode;  *code = UNLE; swap_p = true; break;\n-    case UNGT: cmp_mode = CCVFHEmode; *code = UNLT; swap_p = true; break;\n-    default: return false;\n-    }\n-\n-  if (swap_p)\n-    {\n-      rtx tmp = cmp2;\n-      cmp2 = cmp1;\n-      cmp1 = tmp;\n-    }\n-\n-  emit_insn (gen_rtx_PARALLEL (VOIDmode,\n-\t       gen_rtvec (2,\n-\t\t\t  gen_rtx_SET (gen_rtx_REG (cmp_mode, CC_REGNUM),\n-\t\t\t\t       gen_rtx_COMPARE (cmp_mode, cmp1,\n-\t\t\t\t\t\t\tcmp2)),\n-\t\t\t  gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t   gen_rtx_SCRATCH (V2DImode)))));\n-\n-  /* This is the cc reg how it will be used in the cc mode consumer.\n-     It either needs to be CCVFALL or CCVFANY.  However, CC1 will\n-     never be set by the scalar variants.  So it actually doesn't\n-     matter which one we choose here.  */\n-  *cc = gen_rtx_REG (CCVFALLmode, CC_REGNUM);\n-  return true;\n-}\n-\n \n /* Emit a compare instruction suitable to implement the comparison\n    OP0 CODE OP1.  Return the correct condition RTL to be placed in\n@@ -1810,14 +1717,7 @@ s390_emit_compare (enum rtx_code code, rtx op0, rtx op1)\n   machine_mode mode = s390_select_ccmode (code, op0, op1);\n   rtx cc;\n \n-  if (TARGET_VX\n-      && register_operand (op0, DFmode)\n-      && register_operand (op1, DFmode)\n-      && s390_expand_vec_compare_scalar (&code, op0, op1, &cc))\n-    {\n-      /* Work has been done by s390_expand_vec_compare_scalar already.  */\n-    }\n-  else if (GET_MODE_CLASS (GET_MODE (op0)) == MODE_CC)\n+  if (GET_MODE_CLASS (GET_MODE (op0)) == MODE_CC)\n     {\n       /* Do not output a redundant compare instruction if a\n \t compare_and_swap pattern already computed the result and the"}, {"sha": "e72d5be36ccb6ca80a49fd858986701c6362f81e", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=77c585ca576b4bc6bf7850c40771862667f6c0e7", "patch": "@@ -1317,28 +1317,20 @@\n  })\n \n \n-; cxtr, cxbr, cdtr, cdbr, cebr, cdb, ceb\n+; cxtr, cdtr, cxbr, cdbr, cebr, cdb, ceb, wfcdb\n (define_insn \"*cmp<mode>_ccs\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:FP 0 \"register_operand\" \"f,f\")\n-                 (match_operand:FP 1 \"general_operand\"  \"f,R\")))]\n+        (compare (match_operand:FP 0 \"register_operand\" \"f,f,v\")\n+                 (match_operand:FP 1 \"general_operand\"  \"f,R,v\")))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"@\n    c<xde><bt>r\\t%0,%1\n-   c<xde>b\\t%0,%1\"\n-   [(set_attr \"op_type\" \"RRE,RXE\")\n-    (set_attr \"type\"  \"fsimp<mode>\")\n-    (set_attr \"enabled\" \"*,<DSF>\")])\n-\n-; wfcedbs, wfchdbs, wfchedbs\n-(define_insn \"*vec_cmp<insn_cmp>df_cconly\"\n-  [(set (reg:VFCMP CC_REGNUM)\n-\t(compare:VFCMP (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t       (match_operand:DF 1 \"register_operand\" \"v\")))\n-   (clobber (match_scratch:V2DI 2 \"=v\"))]\n-  \"TARGET_VX && TARGET_HARD_FLOAT\"\n-  \"wfc<asm_fcmp>dbs\\t%v2,%v0,%v1\"\n-  [(set_attr \"op_type\" \"VRR\")])\n+   c<xde>b\\t%0,%1\n+   wfcdb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXE,VRR\")\n+   (set_attr \"cpu_facility\" \"*,*,vx\")\n+   (set_attr \"enabled\" \"*,<DSF>,<DFDI>\")])\n+\n \n ; Compare and Branch instructions\n "}, {"sha": "8d82d9504afb8f7afc6d4744928afc9067f704a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77c585ca576b4bc6bf7850c40771862667f6c0e7", "patch": "@@ -1,3 +1,8 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-scalar-cmp-1.c: Adjust for the\n+\tcomparison instructions used from now on.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/s390.exp (check_effective_target_vector):"}, {"sha": "ea51d0c86afceb28b38cbc868aa21c4d811507b9", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-scalar-cmp-1.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c585ca576b4bc6bf7850c40771862667f6c0e7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c?ref=77c585ca576b4bc6bf7850c40771862667f6c0e7", "patch": "@@ -6,48 +6,65 @@\n int\n eq (double a, double b)\n {\n+  asm (\"\" : : :\n+       \"f0\", \"f1\",  \"f2\",  \"f3\",  \"f4\" , \"f5\",  \"f6\",  \"f7\",\n+       \"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\");\n   return a == b;\n }\n \n-/* { dg-final { scan-assembler \"eq:\\n\\twfcedbs\\t%v\\[0-9\\]*,%v0,%v2\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"eq:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochine\\t%r2,0\" } } */\n \n int\n ne (double a, double b)\n {\n+  asm (\"\" : : :\n+       \"f0\", \"f1\",  \"f2\",  \"f3\",  \"f4\" , \"f5\",  \"f6\",  \"f7\",\n+       \"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\");\n   return a != b;\n }\n \n-/* { dg-final { scan-assembler \"ne:\\n\\twfcedbs\\t%v\\[0-9\\]*,%v0,%v2\\n\\tlhi\\t%r2,1\\n\\tlochie\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"ne:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochie\\t%r2,0\" } } */\n \n int\n gt (double a, double b)\n {\n+  asm (\"\" : : :\n+       \"f0\", \"f1\",  \"f2\",  \"f3\",  \"f4\" , \"f5\",  \"f6\",  \"f7\",\n+       \"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\");\n   return a > b;\n }\n \n-/* { dg-final { scan-assembler \"gt:\\n\\twfchdbs\\t%v\\[0-9\\]*,%v0,%v2\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"gt:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinh\\t%r2,0\" } } */\n \n int\n ge (double a, double b)\n {\n+  asm (\"\" : : :\n+       \"f0\", \"f1\",  \"f2\",  \"f3\",  \"f4\" , \"f5\",  \"f6\",  \"f7\",\n+       \"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\");\n   return a >= b;\n }\n \n-/* { dg-final { scan-assembler \"ge:\\n\\twfchedbs\\t%v\\[0-9\\]*,%v0,%v2\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"ge:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinhe\\t%r2,0\" } } */\n \n int\n lt (double a, double b)\n {\n+  asm (\"\" : : :\n+       \"f0\", \"f1\",  \"f2\",  \"f3\",  \"f4\" , \"f5\",  \"f6\",  \"f7\",\n+       \"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\");\n   return a < b;\n }\n \n-/* { dg-final { scan-assembler \"lt:\\n\\twfchdbs\\t%v\\[0-9\\]*,%v2,%v0\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"lt:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinl\\t%r2,0\" } } */\n \n int\n le (double a, double b)\n {\n+  asm (\"\" : : :\n+       \"f0\", \"f1\",  \"f2\",  \"f3\",  \"f4\" , \"f5\",  \"f6\",  \"f7\",\n+       \"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\");\n   return a <= b;\n }\n \n-/* { dg-final { scan-assembler \"le:\\n\\twfchedbs\\t%v\\[0-9\\]*,%v2,%v0\\n\\tlhi\\t%r2,1\\n\\tlochine\\t%r2,0\" } } */\n-\n+/* { dg-final { scan-assembler \"le:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinle\\t%r2,0\" } } */"}]}