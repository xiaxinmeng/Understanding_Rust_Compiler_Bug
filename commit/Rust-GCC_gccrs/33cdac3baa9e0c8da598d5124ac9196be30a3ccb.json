{"sha": "33cdac3baa9e0c8da598d5124ac9196be30a3ccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjZGFjM2JhYTllMGM4ZGE1OThkNTEyNGFjOTE5NmJlMzBhM2NjYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-05T01:53:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-05T01:53:23Z"}, "message": "compiler: permit empty statements after fallthrough\n    \n    The language spec permits empty statements after a fallthrough\n    statement, so implement that.  Also give a better error message when a\n    fallthrough statement is in the wrong place.  The test case for this\n    is in the master repository, test/fixedbugs/issue14540.go, just not\n    yet in the gccgo repository.\n    \n    Fixes golang/go#14538\n    \n    Reviewed-on: https://go-review.googlesource.com/91855\n\nFrom-SVN: r257378", "tree": {"sha": "c272b5d4ac7f6b0339f877949b0f1eb2c773ba1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c272b5d4ac7f6b0339f877949b0f1eb2c773ba1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33cdac3baa9e0c8da598d5124ac9196be30a3ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33cdac3baa9e0c8da598d5124ac9196be30a3ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33cdac3baa9e0c8da598d5124ac9196be30a3ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33cdac3baa9e0c8da598d5124ac9196be30a3ccb/comments", "author": null, "committer": null, "parents": [{"sha": "964c809fb28f2bbb5b7c35d7951911abff242b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964c809fb28f2bbb5b7c35d7951911abff242b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964c809fb28f2bbb5b7c35d7951911abff242b94"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "c0f977a44c4b9a885c73afe761bff4e5872a050b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cdac3baa9e0c8da598d5124ac9196be30a3ccb/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cdac3baa9e0c8da598d5124ac9196be30a3ccb/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=33cdac3baa9e0c8da598d5124ac9196be30a3ccb", "patch": "@@ -1,4 +1,4 @@\n-5031f878a761bf83f5f96710d62f83e2dc5ecf04\n+d9f33a479f8012f7495d197e4b7417cba4d477fa\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "cc3791bb84da8f5c90b6e9906577b8c51ebf8df2", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cdac3baa9e0c8da598d5124ac9196be30a3ccb/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cdac3baa9e0c8da598d5124ac9196be30a3ccb/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=33cdac3baa9e0c8da598d5124ac9196be30a3ccb", "patch": "@@ -4667,11 +4667,26 @@ Parse::expr_case_clause(Case_clauses* clauses, bool* saw_default)\n     {\n       Location fallthrough_loc = this->location();\n       is_fallthrough = true;\n-      if (this->advance_token()->is_op(OPERATOR_SEMICOLON))\n-\tthis->advance_token();\n+      while (this->advance_token()->is_op(OPERATOR_SEMICOLON))\n+\t;\n       if (this->peek_token()->is_op(OPERATOR_RCURLY))\n \tgo_error_at(fallthrough_loc,\n \t\t    _(\"cannot fallthrough final case in switch\"));\n+      else if (!this->peek_token()->is_keyword(KEYWORD_CASE)\n+\t       && !this->peek_token()->is_keyword(KEYWORD_DEFAULT))\n+\t{\n+\t  go_error_at(fallthrough_loc, \"fallthrough statement out of place\");\n+\t  while (!this->peek_token()->is_keyword(KEYWORD_CASE)\n+\t\t && !this->peek_token()->is_keyword(KEYWORD_DEFAULT)\n+\t\t && !this->peek_token()->is_op(OPERATOR_RCURLY)\n+\t\t && !this->peek_token()->is_eof())\n+\t    {\n+\t      if (this->statement_may_start_here())\n+\t\tthis->statement_list();\n+\t      else\n+\t\tthis->advance_token();\n+\t    }\n+\t}\n     }\n \n   if (is_default)"}]}