{"sha": "786fb9b6c4f1755b2e5dc88d7de90393a4417659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2ZmI5YjZjNGYxNzU1YjJlNWRjODhkN2RlOTAzOTNhNDQxNzY1OQ==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2013-07-03T00:03:06Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2013-07-03T00:03:06Z"}, "message": "Allow functions for AVX target inline functions for lower target.\n\nAllow functions for AVX target inline functions for lower target.  This bug was\nreported here: http://gcc.gnu.org/ml/gcc-patches/2013-06/msg01620.html\n\n2013-07-02  Sriraman Tallam  <tmsriram@google.com>\n\n\t* config/i386/i386.c (gate_insert_vzeroupper): Check if target\n\tISA is AVX.\n\t(ix86_option_override_internal):Turn on all -mavx target flags by\n\tdefault as they are dependent on AVX anyway.\n\n\t* gcc.target/i386/avx-inline.c: New test.\n\nFrom-SVN: r200627", "tree": {"sha": "52cc7ee32421ded2e23f860bd96e6ab510e83c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52cc7ee32421ded2e23f860bd96e6ab510e83c91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786fb9b6c4f1755b2e5dc88d7de90393a4417659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786fb9b6c4f1755b2e5dc88d7de90393a4417659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786fb9b6c4f1755b2e5dc88d7de90393a4417659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786fb9b6c4f1755b2e5dc88d7de90393a4417659/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b043553715e4e8ef8c38806f05452dfb0d744f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b043553715e4e8ef8c38806f05452dfb0d744f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b043553715e4e8ef8c38806f05452dfb0d744f0"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "48b8b4c4564e3cc7200f7dad09d6f16323f5597a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=786fb9b6c4f1755b2e5dc88d7de90393a4417659", "patch": "@@ -1,3 +1,10 @@\n+2013-07-02  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* config/i386/i386.c (gate_insert_vzeroupper): Check if target\n+\tISA is AVX.\n+\t(ix86_option_override_internal):Turn on all -mavx target flags by\n+\tdefault as they are dependent on AVX anyway.\n+\n 2013-07-02  Cary Coutant  <ccoutant@google.com>\n \n \t* dwarf2out.c (loc_checksum): Call hash_loc_operands for a"}, {"sha": "6a431877231b47abd2e11acc78e68b94bd387c77", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=786fb9b6c4f1755b2e5dc88d7de90393a4417659", "patch": "@@ -2578,7 +2578,7 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n static bool\n gate_insert_vzeroupper (void)\n {\n-  return TARGET_VZEROUPPER;\n+  return TARGET_AVX && TARGET_VZEROUPPER;\n }\n \n static unsigned int\n@@ -3936,34 +3936,26 @@ ix86_option_override_internal (bool main_args_p)\n #endif\n    }\n \n-  if (TARGET_AVX)\n-    {\n-      /* When not optimize for size, enable vzeroupper optimization for\n-\t TARGET_AVX with -fexpensive-optimizations and split 32-byte\n-\t AVX unaligned load/store.  */\n-      if (!optimize_size)\n-\t{\n-\t  if (flag_expensive_optimizations\n-\t      && !(target_flags_explicit & MASK_VZEROUPPER))\n-\t    target_flags |= MASK_VZEROUPPER;\n-\t  if ((x86_avx256_split_unaligned_load & ix86_tune_mask)\n-\t      && !(target_flags_explicit & MASK_AVX256_SPLIT_UNALIGNED_LOAD))\n-\t    target_flags |= MASK_AVX256_SPLIT_UNALIGNED_LOAD;\n-\t  if ((x86_avx256_split_unaligned_store & ix86_tune_mask)\n-\t      && !(target_flags_explicit & MASK_AVX256_SPLIT_UNALIGNED_STORE))\n-\t    target_flags |= MASK_AVX256_SPLIT_UNALIGNED_STORE;\n-\t  /* Enable 128-bit AVX instruction generation\n-\t     for the auto-vectorizer.  */\n-\t  if (TARGET_AVX128_OPTIMAL\n-\t      && !(target_flags_explicit & MASK_PREFER_AVX128))\n-\t    target_flags |= MASK_PREFER_AVX128;\n-\t}\n-    }\n-  else\n-    {\n-      /* Disable vzeroupper pass if TARGET_AVX is disabled.  */\n-      target_flags &= ~MASK_VZEROUPPER;\n-    }\n+  /* When not optimize for size, enable vzeroupper optimization for\n+     TARGET_AVX with -fexpensive-optimizations and split 32-byte\n+     AVX unaligned load/store.  */\n+  if (!optimize_size)\n+  {\n+     if (flag_expensive_optimizations\n+\t   && !(target_flags_explicit & MASK_VZEROUPPER))\n+\ttarget_flags |= MASK_VZEROUPPER;\n+     if ((x86_avx256_split_unaligned_load & ix86_tune_mask)\n+\t   && !(target_flags_explicit & MASK_AVX256_SPLIT_UNALIGNED_LOAD))\n+\ttarget_flags |= MASK_AVX256_SPLIT_UNALIGNED_LOAD;\n+     if ((x86_avx256_split_unaligned_store & ix86_tune_mask)\n+\t   && !(target_flags_explicit & MASK_AVX256_SPLIT_UNALIGNED_STORE))\n+\ttarget_flags |= MASK_AVX256_SPLIT_UNALIGNED_STORE;\n+     /* Enable 128-bit AVX instruction generation\n+\tfor the auto-vectorizer.  */\n+     if (TARGET_AVX128_OPTIMAL\n+\t   && !(target_flags_explicit & MASK_PREFER_AVX128))\n+\ttarget_flags |= MASK_PREFER_AVX128;\n+  }\n \n   if (ix86_recip_name)\n     {"}, {"sha": "e0c5efcba49fa5d6b5dd1a111a77097c2eead624", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=786fb9b6c4f1755b2e5dc88d7de90393a4417659", "patch": "@@ -1,3 +1,7 @@\n+2013-07-02  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* gcc.target/i386/avx-inline.c: New test.\n+\n 2013-07-02  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* gcc.target/mips/call-1.c: Accept JALRS and JALR."}, {"sha": "05df95e0524c1c08fa30a6a512ca46e87921f9b7", "filename": "gcc/testsuite/gcc.target/i386/avx-inline.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786fb9b6c4f1755b2e5dc88d7de90393a4417659/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-inline.c?ref=786fb9b6c4f1755b2e5dc88d7de90393a4417659", "patch": "@@ -0,0 +1,20 @@\n+/* Check if avx target functions can inline lower target functions.   */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mno-avx -mno-sse3\" } */\n+\n+__attribute__((always_inline,target(\"sse3\")))\n+inline int callee ()\n+{\n+  return 0;\n+}\n+\n+__attribute__((target(\"avx\")))\n+inline int caller ()\n+{\n+  return callee ();\n+}\n+\n+int main ()\n+{\n+  return caller ();\n+}"}]}