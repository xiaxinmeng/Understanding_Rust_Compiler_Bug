{"sha": "a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmNGUzZDI0NDNmOTZlZjUyZTlkYWI0YmY5OTIwNmM5NTcwYmIzYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-11T16:21:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-11T16:21:39Z"}, "message": "[multiple changes]\n\n2003-12-11  Ed Falis  <falis@gnat.com>\n\n\t* 5zinit.adb: Clean up.\n\n\t* 5zintman.adb (Notify_Exception): replaced case statement with a call\n\tto __gnat_map_signal, imported from init.c to support\n\tsignal -> exception mappings that depend on the vxWorks version.\n\n\t* init.c:\n\tCreated and exported __gnat_map_signal to support signal -> exception\n\tmapping that is dependent on the VxWorks version.\n\tChange mapping of SIGBUS from Program_Error to Storage_Error on VxWorks\n\n2003-12-11  Vasiliy Fofanv  <fofanov@act-europe.fr>\n\n\t* 5wosinte.ads: Link with -mthreads switch.\n\n2003-12-11  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* init.c (__gnat_install_handler [NetBSD]): Set\n\t__gnat_handler_installed, as done on all other platforms.\n\tRemove duplicated code.\n\n2003-12-11  Jerome Guitton  <guitton@act-europe.fr>\n\n\t* Makefile.in (rts-zfp, rts-ravenscar): Create libgnat.a.\n\n2003-12-11  Thomas Quinot  <quinot@act-europe.fr>\n\n\t* sinfo.ads: Fix inconsistent example code in comment.\n\n2003-12-11  Robert Dewar  <dewar@gnat.com>\n\n\t* a-tiinau.adb: Add a couple of comments\n\n\t* sem_ch3.adb: Minor reformatting\n\n\t* sem_prag.adb:\n\tFix bad prototype of Same_Base_Type in body (code reading cleanup)\n\tMinor reformatting throughout\n\n2003-12-11  Ed Schonberg  <schonberg@gnat.com>\n\n\t* exp_ch7.adb (Establish_Transient_Scope): If the call is within the\n\tbounds of a loop, create a separate block in order to generate proper\n\tcleanup actions to prevent memory leaks.\n\n\t* sem_res.adb (Resolve_Call): After a call to\n\tEstablish_Transient_Scope, the call may be rewritten and relocated, in\n\twhich case no further processing is needed.\n\n\t* sem_util.adb: (Wrong_Type): Refine previous fix.\n\t Fixes ACATS regressions.\n\n\tPR ada/13353\n\n\t* sem_prag.adb (Back_End_Cannot_Inline): A renaming_as_body can always\n\tbe inlined.\n\nFrom-SVN: r74541", "tree": {"sha": "64c0eb57dcbb9ffb0c50f048966f75d1cf517d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c0eb57dcbb9ffb0c50f048966f75d1cf517d45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/comments", "author": null, "committer": null, "parents": [{"sha": "226c4112ccce36700b3a426c28ebe08008ffebce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226c4112ccce36700b3a426c28ebe08008ffebce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226c4112ccce36700b3a426c28ebe08008ffebce"}], "stats": {"total": 357, "additions": 271, "deletions": 86}, "files": [{"sha": "8a74f50d14b240ae7c7052feaf107187d82e1b50", "filename": "gcc/ada/5wosinte.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2F5wosinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2F5wosinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5wosinte.ads?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -46,6 +46,8 @@ with Interfaces.C.Strings;\n package System.OS_Interface is\n pragma Preelaborate;\n \n+   pragma Linker_Options (\"-mthreads\");\n+\n    subtype int  is Interfaces.C.int;\n    subtype long is Interfaces.C.long;\n "}, {"sha": "3fe64bd1aedb564ecbda75a886e1341b7c2ee896", "filename": "gcc/ada/5zinit.adb", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2F5zinit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2F5zinit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5zinit.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -33,9 +33,6 @@\n \n --  This is the VxWorks version of this package\n \n-with System.OS_Interface;\n---  used for various Constants, Signal and types\n-\n with Interfaces.C;\n --  used for int and other types\n \n@@ -47,10 +44,58 @@ package body System.Init is\n    --  This unit contains initialization circuits that are system dependent.\n \n    use Ada.Exceptions;\n-   use System.OS_Interface;\n-   use type Interfaces.C.int;\n+   use Interfaces.C;\n+\n+   --------------------------\n+   --  Signal Definitions  --\n+   --------------------------\n+\n+   NSIG : constant := 32;\n+   --  Number of signals on the target OS\n+   type Signal is new int range 0 .. Interfaces.C.\"-\" (NSIG, 1);\n+\n+   SIGILL  : constant :=  4; --  illegal instruction (not reset)\n+   SIGFPE  : constant :=  8; --  floating point exception\n+   SIGBUS  : constant := 10; --  bus error\n+   SIGSEGV : constant := 11; --  segmentation violation\n+\n+   type sigset_t is new long;\n+\n+   SIG_SETMASK : constant := 3;\n+   SA_ONSTACK   : constant := 16#0004#;\n+\n+   type struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_mask    : sigset_t;\n+      sa_flags   : int;\n+   end record;\n+   pragma Convention (C, struct_sigaction);\n+   type struct_sigaction_ptr is access all struct_sigaction;\n+\n+   function sigdelset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigdelset, \"sigdelset\");\n+\n+   function sigemptyset (set : access sigset_t) return int;\n+   pragma Import (C, sigemptyset, \"sigemptyset\");\n+\n+   function sigaction\n+     (sig  : Signal;\n+      act  : struct_sigaction_ptr;\n+      oact : struct_sigaction_ptr) return int;\n+   pragma Import (C, sigaction, \"sigaction\");\n+\n+   type sigset_t_ptr is access all sigset_t;\n+\n+   function pthread_sigmask\n+     (how  : int;\n+      set  : sigset_t_ptr;\n+      oset : sigset_t_ptr) return int;\n+   pragma Import (C, pthread_sigmask, \"sigprocmask\");\n+\n+   -------------------------------\n+   --  Binder Generated Values  --\n+   -------------------------------\n \n-   --  Copies of global values computed by the binder\n    Gl_Main_Priority : Integer := -1;\n    pragma Export (C, Gl_Main_Priority, \"__gl_main_priority\");\n "}, {"sha": "d5e8afcf904a0a1d5ade038c7282c414b404c6e1", "filename": "gcc/ada/5zintman.adb", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2F5zintman.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2F5zintman.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5zintman.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -53,12 +53,8 @@ with Interfaces.C;\n with System.OS_Interface;\n --  used for various Constants, Signal and types\n \n-with Ada.Exceptions;\n---  used for Raise_Exception\n-\n package body System.Interrupt_Management is\n \n-   use Ada.Exceptions;\n    use System.OS_Interface;\n    use type Interfaces.C.int;\n \n@@ -71,6 +67,11 @@ package body System.Interrupt_Management is\n \n    Exception_Action : aliased struct_sigaction;\n \n+   procedure Map_And_Raise_Exception (signo : Signal);\n+   pragma Import (C, Map_And_Raise_Exception, \"__gnat_map_signal\");\n+   --  Map signal to Ada exception and raise it.  Different versions\n+   --  of VxWorks need different mappings.\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -103,20 +104,7 @@ package body System.Interrupt_Management is\n          Result := taskResume (My_Id);\n       end if;\n \n-      case signo is\n-         when SIGFPE =>\n-            Raise_Exception (Constraint_Error'Identity, \"SIGFPE\");\n-         when SIGILL =>\n-            Raise_Exception (Constraint_Error'Identity, \"SIGILL\");\n-         when SIGSEGV =>\n-            Raise_Exception\n-              (Program_Error'Identity,\n-               \"stack overflow or erroneous memory access\");\n-         when SIGBUS =>\n-            Raise_Exception (Program_Error'Identity, \"SIGBUS\");\n-         when others =>\n-            Raise_Exception (Program_Error'Identity, \"unhandled signal\");\n-      end case;\n+      Map_And_Raise_Exception (signo);\n    end Notify_Exception;\n \n    ---------------------------"}, {"sha": "91b74c58da016e5ced17606d8e52087e048265a2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -1,3 +1,62 @@\n+2003-12-11  Ed Falis  <falis@gnat.com>\n+\n+\t* 5zinit.adb: Clean up.\n+\n+\t* 5zintman.adb (Notify_Exception): replaced case statement with a call\n+\tto __gnat_map_signal, imported from init.c to support\n+\tsignal -> exception mappings that depend on the vxWorks version.\n+\n+\t* init.c: \n+\tCreated and exported __gnat_map_signal to support signal -> exception\n+\tmapping that is dependent on the VxWorks version.\n+\tChange mapping of SIGBUS from Program_Error to Storage_Error on VxWorks\n+\n+2003-12-11  Vasiliy Fofanv  <fofanov@act-europe.fr>\n+\n+\t* 5wosinte.ads: Link with -mthreads switch.\n+\n+2003-12-11  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* init.c (__gnat_install_handler [NetBSD]): Set\n+\t__gnat_handler_installed, as done on all other platforms.\n+\tRemove duplicated code.\n+\n+2003-12-11  Jerome Guitton  <guitton@act-europe.fr>\n+\n+\t* Makefile.in (rts-zfp, rts-ravenscar): Create libgnat.a.\n+\n+2003-12-11  Thomas Quinot  <quinot@act-europe.fr>\n+\n+\t* sinfo.ads: Fix inconsistent example code in comment.\n+\n+2003-12-11  Robert Dewar  <dewar@gnat.com>\n+\n+\t* a-tiinau.adb: Add a couple of comments\n+\n+\t* sem_ch3.adb: Minor reformatting\n+\n+\t* sem_prag.adb: \n+\tFix bad prototype of Same_Base_Type in body (code reading cleanup)\n+\tMinor reformatting throughout\n+\n+2003-12-11  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* exp_ch7.adb (Establish_Transient_Scope): If the call is within the\n+\tbounds of a loop, create a separate block in order to generate proper\n+\tcleanup actions to prevent memory leaks.\n+\n+\t* sem_res.adb (Resolve_Call): After a call to\n+\tEstablish_Transient_Scope, the call may be rewritten and relocated, in\n+\twhich case no further processing is needed.\n+\n+\t* sem_util.adb: (Wrong_Type): Refine previous fix.\n+\t Fixes ACATS regressions.\n+\n+\tPR ada/13353\n+\n+\t* sem_prag.adb (Back_End_Cannot_Inline): A renaming_as_body can always\n+\tbe inlined.\n+\n 2003-12-08  Jerome Guitton  <guitton@act-europe.fr>\n \n \t* 5ytiitho.adb, 5zthrini.adb, 5ztiitho.adb, i-vthrea.adb,"}, {"sha": "acabfec98441c91499f3379cc1e51be6d8f40e33", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -1841,9 +1841,9 @@ rts-zfp: force\n \t   RTS_TARGET_PAIRS=\"$(HIE_NONE_TARGET_PAIRS)\" \\\n \t   COMPILABLE_SOURCES=\"$(COMPILABLE_HIE_SOURCES)\" \n \t-$(GNATMAKE) -Prts-zfp/zfp.gpr --GCC=\"../../../xgcc -B../../../\"\n+\tcd rts-zfp/adalib/ ; $(AR) r libgnat.a *.o\n \t$(RM) rts-zfp/adalib/*.o\n \t$(CHMOD) a-wx rts-zfp/adalib/*.ali\n-\t$(AR) r rts-zfp/adalib/libgnat.a\n \t$(CHMOD) a-wx rts-zfp/adalib/libgnat.a\n \n rts-none: force\n@@ -1862,8 +1862,9 @@ rts-ravenscar: force\n \t   COMPILABLE_SOURCES=\"$(COMPILABLE_RAVEN_SOURCES)\" \n \t-$(GNATMAKE) -Prts-ravenscar/ravenscar.gpr \\\n \t   --GCC=\"../../../xgcc -B../../../\"\n+\tcd rts-ravenscar/adalib/ ; $(AR) r libgnat.a *.o\n+\t$(RM) rts-ravenscar/adalib/*.o\n \t$(CHMOD) a-wx rts-ravenscar/adalib/*.ali\n-\t$(AR) r rts-ravenscar/adalib/libgnat.a\n \t$(CHMOD) a-wx rts-ravenscar/adalib/libgnat.a\n \n # Warning: this target assumes that LIBRARY_VERSION has been set correctly."}, {"sha": "03977710a50724ba1724c82017bb6b89f77a59bf", "filename": "gcc/ada/a-tiinau.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fa-tiinau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fa-tiinau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tiinau.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -167,6 +167,9 @@ package body Ada.Text_IO.Integer_Aux is\n       Load_Digits (File, Buf, Ptr, Loaded);\n \n       if Loaded then\n+\n+         --  Deal with based literal (note : is ok replacement for #)\n+\n          Load (File, Buf, Ptr, '#', ':', Loaded);\n \n          if Loaded then\n@@ -175,6 +178,8 @@ package body Ada.Text_IO.Integer_Aux is\n             Load (File, Buf, Ptr, Buf (Hash_Loc));\n          end if;\n \n+         --  Deal with exponent\n+\n          Load (File, Buf, Ptr, 'E', 'e', Loaded);\n \n          if Loaded then"}, {"sha": "e9e8053204852ec0cd0cd5b680f892f3c0d59a27", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -1074,6 +1074,76 @@ package body Exp_Ch7 is\n       if No (Wrap_Node) then\n          null;\n \n+      elsif Nkind (Wrap_Node) = N_Iteration_Scheme then\n+\n+         --  Create a declaration followed by an assignment, so that\n+         --  the assignment can have its own transient scope.\n+         --  We generate the equivalent of:\n+\n+         --  type Ptr is access all expr_type;\n+         --  Var : Ptr;\n+         --  begin\n+         --     Var := Expr'reference;\n+         --  end;\n+\n+         --  This closely resembles what is done in Remove_Side_Effect,\n+         --  but it has to be done here, before the analysis of the call\n+         --  is completed.\n+\n+         declare\n+            Ptr_Typ : constant Entity_Id :=\n+                        Make_Defining_Identifier (Loc,\n+                          Chars => New_Internal_Name ('A'));\n+            Ptr     : constant Entity_Id :=\n+                        Make_Defining_Identifier (Loc,\n+                          Chars => New_Internal_Name ('T'));\n+\n+            Expr_Type    : constant Entity_Id := Etype (N);\n+            New_Expr     : constant Node_Id := Relocate_Node (N);\n+            Decl         : Node_Id;\n+            Ptr_Typ_Decl : Node_Id;\n+            Stmt         : Node_Id;\n+\n+         begin\n+            Ptr_Typ_Decl :=\n+              Make_Full_Type_Declaration (Loc,\n+                Defining_Identifier => Ptr_Typ,\n+                Type_Definition =>\n+                  Make_Access_To_Object_Definition (Loc,\n+                    All_Present => True,\n+                    Subtype_Indication =>\n+                      New_Reference_To (Expr_Type, Loc)));\n+\n+            Decl :=\n+              Make_Object_Declaration (Loc,\n+                 Defining_Identifier => Ptr,\n+                 Object_Definition => New_Occurrence_Of (Ptr_Typ, Loc));\n+\n+            Set_Etype (Ptr, Ptr_Typ);\n+            Stmt :=\n+               Make_Assignment_Statement (Loc,\n+                  Name => New_Occurrence_Of (Ptr, Loc),\n+                  Expression => Make_Reference (Loc, New_Expr));\n+\n+            Set_Analyzed (New_Expr, False);\n+\n+            Insert_List_Before_And_Analyze\n+              (Parent (Wrap_Node),\n+                 New_List (\n+                   Ptr_Typ_Decl,\n+                   Decl,\n+                   Make_Block_Statement (Loc,\n+                     Handled_Statement_Sequence =>\n+                       Make_Handled_Sequence_Of_Statements (Loc,\n+                         New_List (Stmt)))));\n+\n+            Rewrite (N,\n+              Make_Explicit_Dereference (Loc,\n+                Prefix => New_Reference_To (Ptr, Loc)));\n+            Analyze_And_Resolve (N, Expr_Type);\n+\n+         end;\n+\n       --  Transient scope is required\n \n       else\n@@ -1815,14 +1885,12 @@ package body Exp_Ch7 is\n                   return The_Parent;\n                end if;\n \n-            --  ??? No scheme yet for \"for I in Expression'Range loop\"\n-            --  ??? the current scheme for Expression wrapping doesn't apply\n-            --  ??? because a RANGE is NOT an expression. Tricky problem...\n-            --  ??? while this problem is not solved we have a potential for\n-            --  ??? leak and unfinalized intermediate objects here.\n+            --  If the expression is within the iteration scheme of a loop,\n+            --  we must create a declaration for it, followed by an assignment\n+            --  in order to have a usable statement to wrap.\n \n             when N_Loop_Parameter_Specification =>\n-               return Empty;\n+               return Parent (The_Parent);\n \n             --  The following nodes contains \"dummy calls\" which don't\n             --  need to be wrapped."}, {"sha": "734a482bdcc3b7081f9da944281a6f81819863bb", "filename": "gcc/ada/init.c", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -1551,6 +1551,7 @@ __gnat_initialize ()\n \n extern int __gnat_inum_to_ivec (int);\n static void __gnat_error_handler (int, int, struct sigcontext *);\n+void __gnat_map_signal (int);\n \n #ifndef __alpha_vxworks\n \n@@ -1573,27 +1574,14 @@ __gnat_inum_to_ivec (int num)\n   return INUM_TO_IVEC (num);\n }\n \n-static void\n-__gnat_error_handler (int sig, int code, struct sigcontext *sc)\n+/* Exported to 5zintman.adb in order to handle different signal\n+   to exception mappings in different VxWorks versions */\n+void\n+__gnat_map_signal (int sig)\n {\n   struct Exception_Data *exception;\n-  sigset_t mask;\n-  int result;\n   char *msg;\n \n-  /* VxWorks will always mask out the signal during the signal handler and\n-     will reenable it on a longjmp.  GNAT does not generate a longjmp to\n-     return from a signal handler so the signal will still be masked unless\n-     we unmask it. */\n-  sigprocmask (SIG_SETMASK, NULL, &mask);\n-  sigdelset (&mask, sig);\n-  sigprocmask (SIG_SETMASK, &mask, NULL);\n-\n-  /* VxWorks will suspend the task when it gets a hardware exception.  We\n-     take the liberty of resuming the task for the application. */\n-  if (taskIsSuspended (taskIdSelf ()) != 0)\n-    taskResume (taskIdSelf ());\n-\n   switch (sig)\n     {\n     case SIGFPE:\n@@ -1609,8 +1597,13 @@ __gnat_error_handler (int sig, int code, struct sigcontext *sc)\n       msg = \"SIGSEGV\";\n       break;\n     case SIGBUS:\n+#ifdef VTHREADS\n+      exception = &storage_error;\n+      msg = \"SIGBUS: possible stack overflow\";\n+#else\n       exception = &program_error;\n       msg = \"SIGBUS\";\n+#endif\n       break;\n     default:\n       exception = &program_error;\n@@ -1620,6 +1613,29 @@ __gnat_error_handler (int sig, int code, struct sigcontext *sc)\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n+static void\n+__gnat_error_handler (int sig, int code, struct sigcontext *sc)\n+{\n+  sigset_t mask;\n+  int result;\n+\n+  /* VxWorks will always mask out the signal during the signal handler and\n+     will reenable it on a longjmp.  GNAT does not generate a longjmp to\n+     return from a signal handler so the signal will still be masked unless\n+     we unmask it. */\n+  sigprocmask (SIG_SETMASK, NULL, &mask);\n+  sigdelset (&mask, sig);\n+  sigprocmask (SIG_SETMASK, &mask, NULL);\n+\n+  /* VxWorks will suspend the task when it gets a hardware exception.  We\n+     take the liberty of resuming the task for the application. */\n+  if (taskIsSuspended (taskIdSelf ()) != 0)\n+    taskResume (taskIdSelf ());\n+\n+  __gnat_map_signal (sig);\n+\n+}\n+\n void\n __gnat_install_handler (void)\n {\n@@ -1755,6 +1771,8 @@ __gnat_install_handler(void)\n     sigaction (SIGSEGV, &act, NULL);\n   if (__gnat_get_interrupt_state (SIGBUS) != 's')\n     sigaction (SIGBUS,  &act, NULL);\n+\n+  __gnat_handler_installed = 1;\n }\n \n void\n@@ -1780,22 +1798,6 @@ __gnat_initialize (void)\n    __gnat_install_handler ();\n }\n \n-/***************************************/\n-/* __gnat_initialize (RTEMS version) */\n-/***************************************/\n-\n-#elif defined(__rtems__)\n-\n-extern void __gnat_install_handler (void);\n-\n-/* For RTEMS, each bsp will provide a custom __gnat_install_handler (). */\n-\n-void\n-__gnat_initialize (void)\n-{\n-   __gnat_install_handler ();\n-}\n-\n #else\n \n /* For all other versions of GNAT, the initialize routine and handler"}, {"sha": "b1b556b9ece7b885b687c69a1a13ec995813ded3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -8492,7 +8492,6 @@ package body Sem_Ch3 is\n       Set_Small_Value    (T, Delta_Val);\n       Set_Scale_Value    (T, Scale_Val);\n       Set_Is_Constrained (T);\n-\n    end Decimal_Fixed_Point_Type_Declaration;\n \n    -----------------------"}, {"sha": "f080512468bad9f2b438ee894a8b92711957a6ff", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -432,8 +432,7 @@ package body Sem_Prag is\n \n       function Is_Before_First_Decl\n         (Pragma_Node : Node_Id;\n-         Decls       : List_Id)\n-         return        Boolean;\n+         Decls       : List_Id) return Boolean;\n       --  Return True if Pragma_Node is before the first declarative item in\n       --  Decls where Decls is the list of declarative items.\n \n@@ -1122,7 +1121,6 @@ package body Sem_Prag is\n             when N_Index_Or_Discriminant_Constraint =>\n                declare\n                   IDC : Entity_Id := First (Constraints (Constr));\n-\n                begin\n                   while Present (IDC) loop\n                      Check_Static_Constraint (IDC);\n@@ -1506,8 +1504,7 @@ package body Sem_Prag is\n \n       function Is_Before_First_Decl\n         (Pragma_Node : Node_Id;\n-         Decls       : List_Id)\n-         return        Boolean\n+         Decls       : List_Id) return Boolean\n       is\n          Item : Node_Id := First (Decls);\n \n@@ -2185,8 +2182,7 @@ package body Sem_Prag is\n \n          function Same_Base_Type\n           (Ptype  : Node_Id;\n-           Formal : Entity_Id)\n-           return Boolean;\n+           Formal : Entity_Id) return Boolean;\n          --  Determines if Ptype references the type of Formal. Note that\n          --  only the base types need to match according to the spec. Ptype\n          --  here is the argument from the pragma, which is either a type\n@@ -2196,7 +2192,10 @@ package body Sem_Prag is\n          -- Same_Base_Type --\n          --------------------\n \n-         function Same_Base_Type (Ptype, Formal : Entity_Id) return Boolean is\n+         function Same_Base_Type\n+           (Ptype  : Node_Id;\n+            Formal : Entity_Id) return Boolean\n+         is\n             Ftyp : constant Entity_Id := Base_Type (Etype (Formal));\n             Pref : Node_Id;\n \n@@ -2823,9 +2822,8 @@ package body Sem_Prag is\n          if Nkind (Parent (N)) = N_Compilation_Unit_Aux then\n             declare\n                Cunit : constant Node_Id := Parent (Parent (N));\n-\n             begin\n-               Set_Body_Required    (Cunit, False);\n+               Set_Body_Required (Cunit, False);\n             end;\n          end if;\n       end Process_Import_Or_Interface;\n@@ -2869,10 +2867,21 @@ package body Sem_Prag is\n             elsif Nkind (Decl) = N_Subprogram_Declaration\n               and then Present (Corresponding_Body (Decl))\n             then\n-               return\n-                 Present (Exception_Handlers\n-                   (Handled_Statement_Sequence\n-                     (Unit_Declaration_Node (Corresponding_Body (Decl)))));\n+               --  If the subprogram is a renaming as body, the body is\n+               --  just a call to the renamed subprogram, and inlining is\n+               --  trivially possible.\n+\n+               if Nkind (Unit_Declaration_Node (Corresponding_Body (Decl))) =\n+                                            N_Subprogram_Renaming_Declaration\n+               then\n+                  return False;\n+\n+               else\n+                  return\n+                    Present (Exception_Handlers\n+                      (Handled_Statement_Sequence\n+                        (Unit_Declaration_Node (Corresponding_Body (Decl)))));\n+               end if;\n             else\n                --  If body is not available, assume the best, the check is\n                --  performed again when compiling enclosing package bodies.\n@@ -3701,11 +3710,9 @@ package body Sem_Prag is\n \n       declare\n          Arg_Node : Node_Id;\n-\n       begin\n          Arg_Count := 0;\n          Arg_Node := Arg1;\n-\n          while Present (Arg_Node) loop\n             Arg_Count := Arg_Count + 1;\n             Next (Arg_Node);\n@@ -4480,7 +4487,6 @@ package body Sem_Prag is\n          when Pragma_Convention => Convention : declare\n             C : Convention_Id;\n             E : Entity_Id;\n-\n          begin\n             Check_Ada_83_Warning;\n             Check_Arg_Count (2);"}, {"sha": "f6c4ef969c0f6105c32aa684245a3836172d3dd3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -3727,6 +3727,13 @@ package body Sem_Res is\n          Establish_Transient_Scope\n            (N, Sec_Stack => not Functions_Return_By_DSP_On_Target);\n \n+         --  If the call appears within the bounds of a loop, it will\n+         --  be rewritten and reanalyzed, nothing left to do here.\n+\n+         if Nkind (N) /= N_Function_Call then\n+            return;\n+         end if;\n+\n       elsif Is_Init_Proc (Nam)\n         and then not Within_Init_Proc\n       then"}, {"sha": "57f93173b546a3916a290491191729647c3ff4c6", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -6371,7 +6371,10 @@ package body Sem_Util is\n             Error_Msg_N (\n               \"operator of the type is not directly visible!\", Expr);\n \n-         elsif Ekind (Found_Type) = E_Void then\n+         elsif Ekind (Found_Type) = E_Void\n+           and then Present (Parent (Found_Type))\n+           and then Nkind (Parent (Found_Type)) = N_Full_Type_Declaration\n+         then\n             Error_Msg_NE (\"found premature usage of}!\", Expr, Found_Type);\n \n          else"}, {"sha": "de8b23eb7d02be88652eebd7789121f501e22833", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=a9f4e3d2443f96ef52e9dab4bf99206c9570bb3a", "patch": "@@ -244,15 +244,15 @@ package Sinfo is\n    --      Variant := First (Variants (N));\n    --      while Present (Variant) loop\n    --         ...\n-   --         Alt := Next (Alt);\n+   --         Variant := Next (Variant);\n    --      end loop;\n \n    --  or\n \n    --      Variant := First_Non_Pragma (Variants (N));\n    --      while Present (Variant) loop\n    --         ...\n-   --         Alt := Next_Non_Pragma (Alt);\n+   --         Variant := Next_Non_Pragma (Variant);\n    --      end loop;\n \n    --  In the first form of the loop, Variant can either be an N_Pragma or"}]}