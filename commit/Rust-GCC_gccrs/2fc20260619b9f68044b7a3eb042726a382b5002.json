{"sha": "2fc20260619b9f68044b7a3eb042726a382b5002", "node_id": "C_kwDOANBUbNoAKDJmYzIwMjYwNjE5YjlmNjgwNDRiN2EzZWIwNDI3MjZhMzgyYjUwMDI", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-10-11T17:37:32Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-04T14:50:55Z"}, "message": "gcc/expr.c: Remove historic workaround for broken SIMD subreg\n\nA long time ago, using a parallel to take a subreg of a SIMD register\nwas broken. This temporary fix[1] (from 2003) spilled these registers\nto memory and reloaded the appropriate part to obtain the subreg.\n\nThe fix initially existed for the benefit of the PowerPC E500 - a\nplatform for which GCC removed support a number of years ago.\nRegardless, a proper mechanism for taking a subreg of a SIMD register\nexists now anyway.\n\nThis patch removes the workaround thus preventing SIMD registers\nbeing dumped to memory unnecessarily - which sometimes can't be fixed\nby later passes.\n\n[1] https://gcc.gnu.org/pipermail/gcc-patches/2003-April/102099.html\n\ngcc/ChangeLog:\n\n2021-10-11  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* expr.c (emit_group_load_1): Remove historic workaround.", "tree": {"sha": "953d804f181780777925d5ca4867a95272f10e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/953d804f181780777925d5ca4867a95272f10e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fc20260619b9f68044b7a3eb042726a382b5002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc20260619b9f68044b7a3eb042726a382b5002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc20260619b9f68044b7a3eb042726a382b5002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc20260619b9f68044b7a3eb042726a382b5002/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8197ab94b47c814632d758dd36a121ad4114ff70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8197ab94b47c814632d758dd36a121ad4114ff70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8197ab94b47c814632d758dd36a121ad4114ff70"}], "stats": {"total": 13, "additions": 0, "deletions": 13}, "files": [{"sha": "5673902b1fcddb665c1544694c28bb862a29b3d3", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc20260619b9f68044b7a3eb042726a382b5002/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc20260619b9f68044b7a3eb042726a382b5002/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2fc20260619b9f68044b7a3eb042726a382b5002", "patch": "@@ -2508,19 +2508,6 @@ emit_group_load_1 (rtx *tmps, rtx dst, rtx orig_src, tree type,\n \t\t\t\t\t   NULL);\n \t    }\n \t}\n-      /* FIXME: A SIMD parallel will eventually lead to a subreg of a\n-\t SIMD register, which is currently broken.  While we get GCC\n-\t to emit proper RTL for these cases, let's dump to memory.  */\n-      else if (VECTOR_MODE_P (GET_MODE (dst))\n-\t       && REG_P (src))\n-\t{\n-\t  poly_uint64 slen = GET_MODE_SIZE (GET_MODE (src));\n-\t  rtx mem;\n-\n-\t  mem = assign_stack_temp (GET_MODE (src), slen);\n-\t  emit_move_insn (mem, src);\n-\t  tmps[i] = adjust_address (mem, mode, bytepos);\n-\t}\n       else if (CONSTANT_P (src) && GET_MODE (dst) != BLKmode\n                && XVECLEN (dst, 0) > 1)\n         tmps[i] = simplify_gen_subreg (mode, src, GET_MODE (dst), bytepos);"}]}