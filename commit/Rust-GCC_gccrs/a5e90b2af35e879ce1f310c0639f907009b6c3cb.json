{"sha": "a5e90b2af35e879ce1f310c0639f907009b6c3cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlOTBiMmFmMzVlODc5Y2UxZjMxMGMwNjM5ZjkwNzAwOWI2YzNjYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-06-29T00:11:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-29T00:11:03Z"}, "message": "re PR c++/57645 (Explicitly-declared destructor with no exception specification is always noexcept(true))\n\n/cp\n2013-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57645\n\t* class.c (deduce_noexcept_on_destructors): Save, set, and restore\n\tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) around the main loop over the\n\tdestructors.\n\n/testsuite\n2013-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57645\n\t* g++.dg/cpp0x/noexcept21.C: New.\n\nFrom-SVN: r200559", "tree": {"sha": "2d9629e027b6b3b04e0ce3733a3886cd5b90c184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d9629e027b6b3b04e0ce3733a3886cd5b90c184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5e90b2af35e879ce1f310c0639f907009b6c3cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e90b2af35e879ce1f310c0639f907009b6c3cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e90b2af35e879ce1f310c0639f907009b6c3cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e90b2af35e879ce1f310c0639f907009b6c3cb/comments", "author": null, "committer": null, "parents": [{"sha": "e6631d3801d00b095af3325d69b9b4cbdc48535f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6631d3801d00b095af3325d69b9b4cbdc48535f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6631d3801d00b095af3325d69b9b4cbdc48535f"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "c00f24c7fd0975dd2a25d55650eb0e9f71746be1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a5e90b2af35e879ce1f310c0639f907009b6c3cb", "patch": "@@ -1,3 +1,10 @@\n+2013-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57645\n+\t* class.c (deduce_noexcept_on_destructors): Save, set, and restore\n+\tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) around the main loop over the\n+\tdestructors.\n+\n 2013-06-28  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* parser.c (cp_parser_array_notation): Removed rejection array notation"}, {"sha": "bb2c3fe80e4e6e68d0a164df319e61839851646c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a5e90b2af35e879ce1f310c0639f907009b6c3cb", "patch": "@@ -4593,15 +4593,20 @@ deduce_noexcept_on_destructor (tree dtor)\n static void\n deduce_noexcept_on_destructors (tree t)\n {\n-  tree fns;\n-\n   /* If for some reason we don't have a CLASSTYPE_METHOD_VEC, we bail\n      out now.  */\n   if (!CLASSTYPE_METHOD_VEC (t))\n     return;\n \n-  for (fns = CLASSTYPE_DESTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n+  bool saved_nontrivial_dtor = TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t);\n+\n+  /* Avoid early exit from synthesized_method_walk (c++/57645).  */\n+  TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = true;\n+\n+  for (tree fns = CLASSTYPE_DESTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n     deduce_noexcept_on_destructor (OVL_CURRENT (fns));\n+\n+  TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = saved_nontrivial_dtor;\n }\n \n /* Subroutine of set_one_vmethod_tm_attributes.  Search base classes"}, {"sha": "1ab4a98eb10bec259c6c2b6d506fc73e2a80b240", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5e90b2af35e879ce1f310c0639f907009b6c3cb", "patch": "@@ -1,3 +1,8 @@\n+2013-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57645\n+\t* g++.dg/cpp0x/noexcept21.C: New.\n+\n 2013-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/57736"}, {"sha": "ec88e1d3d8739822810bf5287d91e3ff81a067ce", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept21.C", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e90b2af35e879ce1f310c0639f907009b6c3cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept21.C?ref=a5e90b2af35e879ce1f310c0639f907009b6c3cb", "patch": "@@ -0,0 +1,87 @@\n+// PR c++/57645\n+// { dg-do compile { target c++11 } }\n+\n+struct Thrower\n+{\n+  ~Thrower() noexcept(false) { throw 1; }\n+};\n+\n+struct ExplicitA\n+{\n+  ~ExplicitA() {}\n+\n+  Thrower t;\n+};\n+\n+struct ExplicitB\n+{\n+  ~ExplicitB();\n+\n+  Thrower t;\n+};\n+\n+ExplicitB::~ExplicitB() {}\n+\n+struct ExplicitC\n+{\n+  ~ExplicitC() = default;\n+\n+  Thrower t;\n+};\n+\n+struct ExplicitD\n+{\n+  ~ExplicitD();\n+\n+  Thrower t;\n+};\n+\n+ExplicitD::~ExplicitD() = default;\n+\n+struct NoThrower\n+{\n+  ~NoThrower() noexcept(true) {}\n+};\n+\n+struct ExplicitE\n+{\n+  ~ExplicitE() {}\n+\n+  NoThrower t;\n+};\n+\n+struct ExplicitF\n+{\n+  ~ExplicitF();\n+\n+  NoThrower t;\n+};\n+\n+ExplicitF::~ExplicitF() {}\n+\n+struct ExplicitG\n+{\n+  ~ExplicitG() = default;\n+\n+  NoThrower t;\n+};\n+\n+struct ExplicitH\n+{\n+  ~ExplicitH();\n+\n+  NoThrower t;\n+};\n+\n+ExplicitH::~ExplicitH() = default;\n+\n+#define SA(X) static_assert(X, #X)\n+\n+SA( !noexcept(ExplicitA()) );\n+SA( !noexcept(ExplicitB()) );\n+SA( !noexcept(ExplicitC()) );\n+SA( !noexcept(ExplicitD()) );\n+SA( noexcept(ExplicitE()) );\n+SA( noexcept(ExplicitF()) );\n+SA( noexcept(ExplicitG()) );\n+SA( noexcept(ExplicitH()) );"}]}