{"sha": "48528842bd79cb2e2a1d478b1d90d748377bb76c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1Mjg4NDJiZDc5Y2IyZTJhMWQ0NzhiMWQ5MGQ3NDgzNzdiYjc2Yw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2019-04-23T10:03:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-23T10:03:41Z"}, "message": "re PR target/89093 (C++ exception handling clobbers d8 VFP register)\n\n\tPR target/89093\n\t* config/arm/arm.c (aapcs_vfp_is_call_or_return_candidate): Diagnose\n\tif used with general-regs-only.\n\t(arm_conditional_register_usage): Don't add non-general regs if\n\tgeneral-regs-only.\n\t(arm_valid_target_attribute_rec): Handle general-regs-only.\n\t* config/arm/arm.h (TARGET_HARD_FLOAT): Return false if\n\tgeneral-regs-only.\n\t(TARGET_HARD_FLOAT_SUB): Define.\n\t(TARGET_SOFT_FLOAT): Define as negation of TARGET_HARD_FLOAT_SUB.\n\t(TARGET_REALLY_IWMMXT): Add && !TARGET_GENERAL_REGS_ONLY.\n\t(TARGET_REALLY_IWMMXT2): Likewise.\n\t* config/arm/arm.opt: Add -mgeneral-regs-only.\n\t* doc/extend.texi: Document ARM general-regs-only target.\n\t* doc/invoke.texi: Document ARM -mgeneral-regs-only.\nlibgcc/\n\t* config/arm/pr-support.c: Add #pragma GCC target(\"general-regs-only\").\n\t* config/arm/unwind-arm.c: Likewise.\n\t* unwind-c.c (PERSONALITY_FUNCTION): Add general-regs-only target\n\tattribute for ARM.\nlibobjc/\n\t* exception.c (PERSONALITY_FUNCTION): Add general-regs-only target\n\tattribute for ARM.\nlibphobos/\n\t* libdruntime/gcc/deh.d: Import gcc.attribute.\n\t(personality_fn_attributes): New enum.\n\t(scanLSDA, CONTINUE_UNWINDING, gdc_personality, __gdc_personality):\n\tAdd @personality_fn_attributes.\nlibstdc++-v3/\n\t* libsupc++/eh_personality.cc (PERSONALITY_FUNCTION): Add\n\tgeneral-regs-only target attribute for ARM.\n\nCo-Authored-By: Bernd Edlinger <bernd.edlinger@hotmail.de>\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r270504", "tree": {"sha": "67f80893433a6265908f5557a9cd9491cbccc4a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f80893433a6265908f5557a9cd9491cbccc4a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48528842bd79cb2e2a1d478b1d90d748377bb76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48528842bd79cb2e2a1d478b1d90d748377bb76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48528842bd79cb2e2a1d478b1d90d748377bb76c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48528842bd79cb2e2a1d478b1d90d748377bb76c/comments", "author": null, "committer": null, "parents": [{"sha": "70265a0c5bd3e2050ce489ef969e72465e698aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70265a0c5bd3e2050ce489ef969e72465e698aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70265a0c5bd3e2050ce489ef969e72465e698aa5"}], "stats": {"total": 122, "additions": 116, "deletions": 6}, "files": [{"sha": "185cf518746a16d0c965c1196654ec456efff456", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -1,3 +1,23 @@\n+2019-04-23  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89093\n+\t* config/arm/arm.c (aapcs_vfp_is_call_or_return_candidate): Diagnose\n+\tif used with general-regs-only.\n+\t(arm_conditional_register_usage): Don't add non-general regs if\n+\tgeneral-regs-only.\n+\t(arm_valid_target_attribute_rec): Handle general-regs-only.\n+\t* config/arm/arm.h (TARGET_HARD_FLOAT): Return false if\n+\tgeneral-regs-only.\n+\t(TARGET_HARD_FLOAT_SUB): Define.\n+\t(TARGET_SOFT_FLOAT): Define as negation of TARGET_HARD_FLOAT_SUB.\n+\t(TARGET_REALLY_IWMMXT): Add && !TARGET_GENERAL_REGS_ONLY.\n+\t(TARGET_REALLY_IWMMXT2): Likewise.\n+\t* config/arm/arm.opt: Add -mgeneral-regs-only.\n+\t* doc/extend.texi: Document ARM general-regs-only target.\n+\t* doc/invoke.texi: Document ARM -mgeneral-regs-only.\n+\n 2019-04-23  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \tPR tree-optimization/90078"}, {"sha": "45abcd89963495e671104426148e0508810763b1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -6112,6 +6112,11 @@ aapcs_vfp_is_call_or_return_candidate (enum arm_pcs pcs_variant,\n     return false;\n \n   *base_mode = new_mode;\n+\n+  if (TARGET_GENERAL_REGS_ONLY)\n+    error (\"argument of type %qT not permitted with -mgeneral-regs-only\",\n+\t   type);\n+\n   return true;\n }\n \n@@ -28404,7 +28409,7 @@ arm_conditional_register_usage (void)\n \t}\n     }\n \n-  if (TARGET_REALLY_IWMMXT)\n+  if (TARGET_REALLY_IWMMXT && !TARGET_GENERAL_REGS_ONLY)\n     {\n       regno = FIRST_IWMMXT_GR_REGNUM;\n       /* The 2002/10/09 revision of the XScale ABI has wCG0\n@@ -30878,6 +30883,9 @@ arm_valid_target_attribute_rec (tree args, struct gcc_options *opts)\n       else if (!strcmp (q, \"arm\"))\n \topts->x_target_flags &= ~MASK_THUMB;\n \n+      else if (!strcmp (q, \"general-regs-only\"))\n+\topts->x_target_flags |= MASK_GENERAL_REGS_ONLY;\n+\n       else if (!strncmp (q, \"fpu=\", 4))\n \t{\n \t  int fpu_index;"}, {"sha": "4866e1e4b7dcab61ae51aeae9f12bd9014805a05", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -122,21 +122,29 @@ extern tree arm_fp16_type_node;\n #define TARGET_32BIT_P(flags)  (TARGET_ARM_P (flags) || TARGET_THUMB2_P (flags))\n \n /* Run-time Target Specification.  */\n-/* Use hardware floating point instructions. */\n-#define TARGET_HARD_FLOAT\t(arm_float_abi != ARM_FLOAT_ABI_SOFT\t\\\n+/* Use hardware floating point instructions. -mgeneral-regs-only prevents\n+the use of floating point instructions and registers but does not prevent\n+emission of floating point pcs attributes.  */\n+#define TARGET_HARD_FLOAT_SUB\t(arm_float_abi != ARM_FLOAT_ABI_SOFT\t\\\n \t\t\t\t && bitmap_bit_p (arm_active_target.isa, \\\n \t\t\t\t\t\t  isa_bit_vfpv2) \\\n \t\t\t\t && TARGET_32BIT)\n-#define TARGET_SOFT_FLOAT\t(!TARGET_HARD_FLOAT)\n+\n+#define TARGET_HARD_FLOAT\t(TARGET_HARD_FLOAT_SUB\t\t\\\n+\t\t\t\t && !TARGET_GENERAL_REGS_ONLY)\n+\n+#define TARGET_SOFT_FLOAT\t(!TARGET_HARD_FLOAT_SUB)\n /* User has permitted use of FP instructions, if they exist for this\n    target.  */\n #define TARGET_MAYBE_HARD_FLOAT (arm_float_abi != ARM_FLOAT_ABI_SOFT)\n /* Use hardware floating point calling convention.  */\n #define TARGET_HARD_FLOAT_ABI\t\t(arm_float_abi == ARM_FLOAT_ABI_HARD)\n #define TARGET_IWMMXT\t\t\t(arm_arch_iwmmxt)\n #define TARGET_IWMMXT2\t\t\t(arm_arch_iwmmxt2)\n-#define TARGET_REALLY_IWMMXT\t\t(TARGET_IWMMXT && TARGET_32BIT)\n-#define TARGET_REALLY_IWMMXT2\t\t(TARGET_IWMMXT2 && TARGET_32BIT)\n+#define TARGET_REALLY_IWMMXT\t\t(TARGET_IWMMXT && TARGET_32BIT \\\n+\t\t\t\t\t && !TARGET_GENERAL_REGS_ONLY)\n+#define TARGET_REALLY_IWMMXT2\t\t(TARGET_IWMMXT2 && TARGET_32BIT \\\n+\t\t\t\t\t && !TARGET_GENERAL_REGS_ONLY)\n #define TARGET_IWMMXT_ABI (TARGET_32BIT && arm_abi == ARM_ABI_IWMMXT)\n #define TARGET_ARM                      (! TARGET_THUMB)\n #define TARGET_EITHER\t\t\t1 /* (TARGET_ARM | TARGET_THUMB) */"}, {"sha": "9067d491b9c5fd9e1552a912e57d127b7770b858", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -302,3 +302,7 @@ When linking for big-endian targets, generate a legacy BE32 format image.\n mbranch-cost=\n Target RejectNegative Joined UInteger Var(arm_branch_cost) Init(-1)\n Cost to assume for a branch insn.\n+\n+mgeneral-regs-only\n+Target Report RejectNegative Mask(GENERAL_REGS_ONLY) Save\n+Generate code which uses the core registers only (r0-r14)."}, {"sha": "91679e8b9bae9001645c735cf5078cc928f2b245", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -4190,6 +4190,15 @@ into the @code{sjli} table needs to be passed as argument.\n These function attributes are supported for ARM targets:\n \n @table @code\n+\n+@item general-regs-only\n+@cindex @code{general-regs-only} function attribute, ARM\n+Indicates that no floating-point or Advanced SIMD registers should be\n+used when generating code for this function.  If the function explicitly\n+uses floating-point code, then the compiler gives an error.  This is\n+the same behavior as that of the command-line option\n+@option{-mgeneral-regs-only}.\n+\n @item interrupt\n @cindex @code{interrupt} function attribute, ARM\n Use this attribute to indicate"}, {"sha": "29585cf15aacbec0ccded93c59cb76e20483bbab", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -674,6 +674,7 @@ Objective-C and Objective-C++ Dialects}.\n -mabi=@var{name} @gol\n -mapcs-stack-check  -mno-apcs-stack-check @gol\n -mapcs-reentrant  -mno-apcs-reentrant @gol\n+-mgeneral-regs-only @gol\n -msched-prolog  -mno-sched-prolog @gol\n -mlittle-endian  -mbig-endian @gol\n -mbe8  -mbe32 @gol\n@@ -17068,6 +17069,12 @@ the hard-float and soft-float ABIs are not link-compatible; you must\n compile your entire program with the same ABI, and link with a\n compatible set of libraries.\n \n+@item -mgeneral-regs-only\n+@opindex mgeneral-regs-only\n+Generate code which uses only the general-purpose registers.  This will prevent\n+the compiler from using floating-point and Advanced SIMD registers but will not\n+impose any restrictions on the assembler.\n+\n @item -mlittle-endian\n @opindex mlittle-endian\n Generate code for a processor running in little-endian mode.  This is"}, {"sha": "30e4da4277eebc6f4315b9f84193dce298b9c29e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -1,3 +1,13 @@\n+2019-04-23  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89093\n+\t* config/arm/pr-support.c: Add #pragma GCC target(\"general-regs-only\").\n+\t* config/arm/unwind-arm.c: Likewise.\n+\t* unwind-c.c (PERSONALITY_FUNCTION): Add general-regs-only target\n+\tattribute for ARM.\n+\n 2019-04-15  Monk Chiang  <sh.chiang04@gmail.com>\n \n \t* config/nds32/linux-unwind.h (SIGRETURN): Remove."}, {"sha": "bcf9b288fe9b302243e2e7e881100b109fbd15e9", "filename": "libgcc/config/arm/pr-support.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2Fconfig%2Farm%2Fpr-support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2Fconfig%2Farm%2Fpr-support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fpr-support.c?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -21,6 +21,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#pragma GCC target (\"general-regs-only\")\n #include \"unwind.h\"\n \n /* We add a prototype for abort here to avoid creating a dependency on"}, {"sha": "9ba73e72a2a76b8048ee456b762dbac7c13ae337", "filename": "libgcc/config/arm/unwind-arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2Fconfig%2Farm%2Funwind-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2Fconfig%2Farm%2Funwind-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm.c?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -21,6 +21,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#pragma GCC target (\"general-regs-only\")\n #include \"unwind.h\"\n \n /* Misc constants.  */"}, {"sha": "859735a332505e9e63b39362b7c44b2136bb4080", "filename": "libgcc/unwind-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2Funwind-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libgcc%2Funwind-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-c.c?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -106,6 +106,7 @@ PERSONALITY_FUNCTION (_Unwind_State, struct _Unwind_Exception *,\n \t\t      struct _Unwind_Context *);\n \n _Unwind_Reason_Code\n+__attribute__((target (\"general-regs-only\")))\n PERSONALITY_FUNCTION (_Unwind_State state,\n \t\t      struct _Unwind_Exception * ue_header,\n \t\t      struct _Unwind_Context * context)"}, {"sha": "48e21e5b21c087e8e29a4a17da493addbf00ca01", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89093\n+\t* exception.c (PERSONALITY_FUNCTION): Add general-regs-only target\n+\tattribute for ARM.\n+\n 2019-03-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* encoding.c (DFmode): #undef before #define."}, {"sha": "3c078c041269d769f07ff637680d41976f9fa830", "filename": "libobjc/exception.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libobjc%2Fexception.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libobjc%2Fexception.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fexception.c?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -220,6 +220,7 @@ get_ttype_entry (struct lsda_header_info *info, _Unwind_Word i)\n   while (0)\n \n _Unwind_Reason_Code\n+__attribute__((target (\"general-regs-only\")))\n PERSONALITY_FUNCTION (_Unwind_State state,\n \t\t      struct _Unwind_Exception *ue_header,\n \t\t      struct _Unwind_Context *context)"}, {"sha": "74c9c88730d2b9b30caa8aff00dc049ff666c6d0", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -1,3 +1,13 @@\n+2019-04-23  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89093\n+\t* libdruntime/gcc/deh.d: Import gcc.attribute.\n+\t(personality_fn_attributes): New enum.\n+\t(scanLSDA, CONTINUE_UNWINDING, gdc_personality, __gdc_personality):\n+\tAdd @personality_fn_attributes.\n+\n 2019-04-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/89293"}, {"sha": "ee301b2a3ba1b57639f58f633a202d3bd049161b", "filename": "libphobos/libdruntime/gcc/deh.d", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -28,6 +28,7 @@ import gcc.unwind;\n import gcc.unwind.pe;\n import gcc.builtins;\n import gcc.config;\n+import gcc.attribute;\n \n extern(C)\n {\n@@ -519,10 +520,19 @@ extern(C) void _d_throw(Throwable object)\n     terminate(\"unwind error\", __LINE__);\n }\n \n+static if (GNU_ARM_EABI_Unwinder)\n+{\n+    enum personality_fn_attributes = attribute(\"target\", (\"general-regs-only\"));\n+}\n+else\n+{\n+    enum personality_fn_attributes = \"\";\n+}\n \n /**\n  * Read and extract information from the LSDA (.gcc_except_table section).\n  */\n+@personality_fn_attributes\n _Unwind_Reason_Code scanLSDA(const(ubyte)* lsda, _Unwind_Exception_Class exceptionClass,\n                              _Unwind_Action actions, _Unwind_Exception* unwindHeader,\n                              _Unwind_Context* context, _Unwind_Word cfa,\n@@ -772,6 +782,7 @@ int actionTableLookup(_Unwind_Action actions, _Unwind_Exception* unwindHeader,\n  * Called when the personality function has found neither a cleanup or handler.\n  * To support ARM EABI personality routines, that must also unwind the stack.\n  */\n+@personality_fn_attributes\n _Unwind_Reason_Code CONTINUE_UNWINDING(_Unwind_Exception* unwindHeader, _Unwind_Context* context)\n {\n     static if (GNU_ARM_EABI_Unwinder)\n@@ -814,6 +825,7 @@ else\n static if (GNU_ARM_EABI_Unwinder)\n {\n     pragma(mangle, PERSONALITY_FUNCTION)\n+    @personality_fn_attributes\n     extern(C) _Unwind_Reason_Code gdc_personality(_Unwind_State state,\n                                                   _Unwind_Exception* unwindHeader,\n                                                   _Unwind_Context* context)\n@@ -873,6 +885,7 @@ else\n     }\n }\n \n+@personality_fn_attributes\n private _Unwind_Reason_Code __gdc_personality(_Unwind_Action actions,\n                                               _Unwind_Exception_Class exceptionClass,\n                                               _Unwind_Exception* unwindHeader,"}, {"sha": "e222cb30de9bf4f4f9cee91bd501c6fa0648f543", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89093\n+\t* libsupc++/eh_personality.cc (PERSONALITY_FUNCTION): Add\n+\tgeneral-regs-only target attribute for ARM.\n+\n 2019-04-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/87431"}, {"sha": "35e4e461d69d35093647e1afe828d0359976badb", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528842bd79cb2e2a1d478b1d90d748377bb76c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528842bd79cb2e2a1d478b1d90d748377bb76c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=48528842bd79cb2e2a1d478b1d90d748377bb76c", "patch": "@@ -343,6 +343,7 @@ extern \"C\"\n #endif\n _Unwind_Reason_Code\n #ifdef __ARM_EABI_UNWINDER__\n+__attribute__((target (\"general-regs-only\")))\n PERSONALITY_FUNCTION (_Unwind_State state,\n \t\t      struct _Unwind_Exception* ue_header,\n \t\t      struct _Unwind_Context* context)"}]}