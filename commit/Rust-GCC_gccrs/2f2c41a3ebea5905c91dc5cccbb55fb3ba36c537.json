{"sha": "2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "node_id": "C_kwDOANBUbNoAKDJmMmM0MWEzZWJlYTU5MDVjOTFkYzVjY2NiYjU1ZmIzYmEzNmM1Mzc", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T12:24:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T12:24:26Z"}, "message": "remove unused mark assignment to decl", "tree": {"sha": "c120d921d6032f4a479c773ebe3911864f91e319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c120d921d6032f4a479c773ebe3911864f91e319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "1ec99d640907001505edb309c67675279807c7bf", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "patch": "@@ -85,11 +85,6 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n     {\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n       PatternDeclaration::go (param.get_pattern ().get ());\n-\n-      // the mutability checker needs to verify for immutable decls the number\n-      // of assignments are <1. This marks an implicit assignment\n-      resolver->mark_assignment_to_decl (\n-\tparam.get_pattern ()->get_pattern_node_id (), param.get_node_id ());\n     }\n \n   if (function.has_where_clause ())\n@@ -148,20 +143,12 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n   ResolveType::go (&self_type_path, self_param.get_node_id ());\n   PatternDeclaration::go (&self_pattern);\n \n-  resolver->mark_assignment_to_decl (self_pattern.get_node_id (),\n-\t\t\t\t     self_pattern.get_node_id ());\n-\n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n       PatternDeclaration::go (param.get_pattern ().get ());\n-\n-      // the mutability checker needs to verify for immutable decls the number\n-      // of assignments are <1. This marks an implicit assignment\n-      resolver->mark_assignment_to_decl (\n-\tparam.get_pattern ()->get_pattern_node_id (), param.get_node_id ());\n     }\n \n   if (function.has_where_clause ())\n@@ -193,8 +180,6 @@ ResolveTraitItems::visit (AST::TraitItemConst &constant)\n   // the mutability checker needs to verify for immutable decls the number\n   // of assignments are <1. This marks an implicit assignment\n   resolver->mark_decl_mutability (constant.get_node_id (), false);\n-  resolver->mark_assignment_to_decl (constant.get_node_id (),\n-\t\t\t\t     constant.get_node_id ());\n }\n \n ResolveItem::ResolveItem (const CanonicalPath &prefix,\n@@ -500,10 +485,6 @@ ResolveItem::visit (AST::StaticItem &var)\n \n   ResolveType::go (var.get_type ().get (), var.get_node_id ());\n   ResolveExpr::go (var.get_expr ().get (), path, cpath);\n-\n-  // the mutability checker needs to verify for immutable decls the number\n-  // of assignments are <1. This marks an implicit assignment\n-  resolver->mark_assignment_to_decl (var.get_node_id (), var.get_node_id ());\n }\n \n void\n@@ -523,8 +504,6 @@ ResolveItem::visit (AST::ConstantItem &constant)\n   // the mutability checker needs to verify for immutable decls the number\n   // of assignments are <1. This marks an implicit assignment\n   resolver->mark_decl_mutability (constant.get_node_id (), false);\n-  resolver->mark_assignment_to_decl (constant.get_node_id (),\n-\t\t\t\t     constant.get_node_id ());\n }\n \n void\n@@ -570,8 +549,6 @@ ResolveItem::visit (AST::Function &function)\n \n       // the mutability checker needs to verify for immutable decls the number\n       // of assignments are <1. This marks an implicit assignment\n-      resolver->mark_assignment_to_decl (\n-\tparam.get_pattern ()->get_pattern_node_id (), param.get_node_id ());\n     }\n \n   // resolve the function body\n@@ -716,20 +693,12 @@ ResolveItem::visit (AST::Method &method)\n   ResolveType::go (&self_type_path, self_param.get_node_id ());\n   PatternDeclaration::go (&self_pattern);\n \n-  resolver->mark_assignment_to_decl (self_pattern.get_node_id (),\n-\t\t\t\t     self_pattern.get_node_id ());\n-\n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : method.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n       PatternDeclaration::go (param.get_pattern ().get ());\n-\n-      // the mutability checker needs to verify for immutable decls the number\n-      // of assignments are <1. This marks an implicit assignment\n-      resolver->mark_assignment_to_decl (\n-\tparam.get_pattern ()->get_pattern_node_id (), param.get_node_id ());\n     }\n \n   // resolve any where clause items"}, {"sha": "81172d5b2bd59f9b0328b6e7833b4283789dbb66", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "patch": "@@ -76,8 +76,6 @@ class ResolveStmt : public ResolverBase\n     // the mutability checker needs to verify for immutable decls the number\n     // of assignments are <1. This marks an implicit assignment\n     resolver->mark_decl_mutability (constant.get_node_id (), false);\n-    resolver->mark_assignment_to_decl (constant.get_node_id (),\n-\t\t\t\t       constant.get_node_id ());\n   }\n \n   void visit (AST::LetStmt &stmt) override\n@@ -86,10 +84,6 @@ class ResolveStmt : public ResolverBase\n       {\n \tResolveExpr::go (stmt.get_init_expr ().get (), prefix,\n \t\t\t canonical_prefix);\n-\n-\t// mark the assignment\n-\tresolver->mark_assignment_to_decl (\n-\t  stmt.get_pattern ()->get_pattern_node_id (), stmt.get_node_id ());\n       }\n \n     PatternDeclaration::go (stmt.get_pattern ().get ());\n@@ -378,11 +372,6 @@ class ResolveStmt : public ResolverBase\n       {\n \tResolveType::go (param.get_type ().get (), param.get_node_id ());\n \tPatternDeclaration::go (param.get_pattern ().get ());\n-\n-\t// the mutability checker needs to verify for immutable decls the number\n-\t// of assignments are <1. This marks an implicit assignment\n-\tresolver->mark_assignment_to_decl (\n-\t  param.get_pattern ()->get_pattern_node_id (), param.get_node_id ());\n       }\n \n     // resolve the function body"}, {"sha": "74551cb014dcedeba4d3d82da6a9c71f82f322f9", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "patch": "@@ -63,8 +63,6 @@ class VerifyAsignee : public ResolverBase\n       return;\n \n     ok = true;\n-    // mark the assignment to the name\n-    // resolver->mark_assignment_to_decl (resolved_node, parent);\n   }\n \n   void visit (AST::DereferenceExpr &expr) override"}, {"sha": "0ef6f5319f5aab52f783367737f0eb5d34787d72", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "patch": "@@ -497,25 +497,5 @@ Resolver::decl_is_mutable (NodeId id) const\n   return it->second;\n }\n \n-void\n-Resolver::mark_assignment_to_decl (NodeId id, NodeId assignment)\n-{\n-  auto it = assignment_to_decl.find (id);\n-  if (it == assignment_to_decl.end ())\n-    assignment_to_decl[id] = {};\n-\n-  assignment_to_decl[id].insert (assignment);\n-}\n-\n-size_t\n-Resolver::get_num_assignments_to_decl (NodeId id) const\n-{\n-  auto it = assignment_to_decl.find (id);\n-  if (it == assignment_to_decl.end ())\n-    return 0;\n-\n-  return it->second.size ();\n-}\n-\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "ad785e11a6826bc988d56b2f6e9f470e39e08961", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=2f2c41a3ebea5905c91dc5cccbb55fb3ba36c537", "patch": "@@ -126,8 +126,6 @@ class Resolver\n \n   void mark_decl_mutability (NodeId id, bool mut);\n   bool decl_is_mutable (NodeId id) const;\n-  void mark_assignment_to_decl (NodeId id, NodeId assignment);\n-  size_t get_num_assignments_to_decl (NodeId id) const;\n \n   // proxy for scoping\n   Scope &get_name_scope () { return name_scope; }\n@@ -207,8 +205,6 @@ class Resolver\n \n   // map of resolved names mutability flag\n   std::map<NodeId, bool> decl_mutability;\n-  // map of resolved names and set of assignments to the decl\n-  std::map<NodeId, std::set<NodeId>> assignment_to_decl;\n \n   // keep track of the current module scope ids\n   std::vector<NodeId> current_module_stack;"}]}