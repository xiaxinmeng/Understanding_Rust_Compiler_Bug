{"sha": "26a68e922133b84155aaf38562e231a4a1989aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhNjhlOTIyMTMzYjg0MTU1YWFmMzg1NjJlMjMxYTRhMTk4OWFhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-12-19T14:07:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-12-19T14:07:22Z"}, "message": "PR c++/52320 - EH cleanups for partially constructed arrays.\n\nThis testcase wasn't fixed by the 66139 patch; split_nonconstant_init_1 was\nfailing to add a cleanup for an array member of a class (e.g. e1) that will\nrun if initializing a later member (e.g. e2) throws.\n\n\t* typeck2.c (split_nonconstant_init_1): Add nested parm.\n\tAdd cleanup for whole array if true.\n\nFrom-SVN: r279577", "tree": {"sha": "7ab2277480be4ca955d0292b5d6c13a5cb8ead2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab2277480be4ca955d0292b5d6c13a5cb8ead2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26a68e922133b84155aaf38562e231a4a1989aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a68e922133b84155aaf38562e231a4a1989aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a68e922133b84155aaf38562e231a4a1989aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a68e922133b84155aaf38562e231a4a1989aa7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942d334ec3fdf360dfedc0f97d1b4747a1f56f08"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "40c8621004393b8650d83c8898dfea82ad779222", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a68e922133b84155aaf38562e231a4a1989aa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a68e922133b84155aaf38562e231a4a1989aa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26a68e922133b84155aaf38562e231a4a1989aa7", "patch": "@@ -1,5 +1,9 @@\n 2019-12-19  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/52320 - EH cleanups for partially constructed arrays.\n+\t* typeck2.c (split_nonconstant_init_1): Add nested parm.\n+\tAdd cleanup for whole array if true.\n+\n \tPR c++/66139 - EH cleanups for partially constructed aggregates.\n \tPR c++/57510\n \t* cp-gimplify.c (cp_gimplify_init_expr): Use split_nonconstant_init."}, {"sha": "def81b5b7ae0f92264ce04afe0581152ae757e26", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a68e922133b84155aaf38562e231a4a1989aa7/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a68e922133b84155aaf38562e231a4a1989aa7/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=26a68e922133b84155aaf38562e231a4a1989aa7", "patch": "@@ -602,7 +602,7 @@ cxx_incomplete_type_error (location_t loc, const_tree value, const_tree type)\n    generated statements.  */\n \n static bool\n-split_nonconstant_init_1 (tree dest, tree init)\n+split_nonconstant_init_1 (tree dest, tree init, bool nested)\n {\n   unsigned HOST_WIDE_INT idx, tidx = HOST_WIDE_INT_M1U;\n   tree field_index, value;\n@@ -626,6 +626,12 @@ split_nonconstant_init_1 (tree dest, tree init)\n \t  tree code = build_vec_init (dest, NULL_TREE, init, false, 1,\n \t\t\t\t      tf_warning_or_error);\n \t  add_stmt (code);\n+\t  if (nested)\n+\t    /* Also clean up the whole array if something later in an enclosing\n+\t       init-list throws.  */\n+\t    if (tree cleanup = cxx_maybe_build_cleanup (dest,\n+\t\t\t\t\t\t\ttf_warning_or_error))\n+\t    finish_eh_cleanup (cleanup);\n \t  return true;\n \t}\n       /* FALLTHRU */\n@@ -655,7 +661,7 @@ split_nonconstant_init_1 (tree dest, tree init)\n \t\tsub = build3 (COMPONENT_REF, inner_type, dest, field_index,\n \t\t\t      NULL_TREE);\n \n-\t      if (!split_nonconstant_init_1 (sub, value))\n+\t      if (!split_nonconstant_init_1 (sub, value, true))\n \t\tcomplete_p = false;\n \t      else\n \t\t{\n@@ -775,7 +781,7 @@ split_nonconstant_init (tree dest, tree init)\n     {\n       init = cp_fully_fold_init (init);\n       code = push_stmt_list ();\n-      if (split_nonconstant_init_1 (dest, init))\n+      if (split_nonconstant_init_1 (dest, init, false))\n \tinit = NULL_TREE;\n       code = pop_stmt_list (code);\n       if (VAR_P (dest) && !is_local_temp (dest))"}, {"sha": "38dba89138c258f3bdae5fbcddbb99a7001fa839", "filename": "gcc/testsuite/g++.dg/eh/aggregate1.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a68e922133b84155aaf38562e231a4a1989aa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a68e922133b84155aaf38562e231a4a1989aa7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate1.C?ref=26a68e922133b84155aaf38562e231a4a1989aa7", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/52320\n+// { dg-do run }\n+\n+#if DEBUG\n+extern \"C\" int printf (const char *, ...);\n+#define FUNCTION_NAME __PRETTY_FUNCTION__\n+#define TRACE_FUNCTION printf (\"%p->%s\\n\", this, FUNCTION_NAME);\n+#else\n+#define TRACE_FUNCTION \n+#endif\n+int c,d;\n+#define TRACE_CTOR TRACE_FUNCTION ++c\n+#define TRACE_DTOR TRACE_FUNCTION ++d\n+\n+int throw_at = 0;\n+\n+struct A {\n+  A() { int i = c+1; if (i == throw_at) throw i; TRACE_CTOR; }\n+  A(int i) { if (i == throw_at) throw i; TRACE_CTOR; }\n+  A(const A&) { throw 10; }\n+  A &operator=(const A&) { throw 11; return *this; }\n+  ~A() { TRACE_DTOR; }\n+};\n+\n+int fails;\n+\n+void try_idx (int i)\n+{\n+#if DEBUG\n+  printf (\"trying %d\\n\", i);\n+#endif\n+  throw_at = i;\n+  c = d = 0;\n+  int t = 10;\n+  try {\n+    struct X {\n+      A e1[2], e2;\n+    } \n+    x2[3] = { { 1, 2, 3 }, { 4, 5, 6 } };\n+  } catch (int x) { t = x; }\n+  if (t != i || c != d || c != i-1)\n+    {\n+#if DEBUG\n+      printf (\"%d FAIL\\n\", i);\n+#endif\n+      ++fails;\n+    }\n+}\n+\n+int main()\n+{\n+  for (int i = 1; i <= 10; ++i)\n+    try_idx (i);\n+\n+  return fails;\n+}"}]}