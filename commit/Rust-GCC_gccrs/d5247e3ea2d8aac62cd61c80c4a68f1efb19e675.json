{"sha": "d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyNDdlM2VhMmQ4YWFjNjJjZDYxYzgwYzRhNjhmMWVmYjE5ZTY3NQ==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-27T20:36:53Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-27T20:36:53Z"}, "message": "Changed to use argframe macros\n\nFrom-SVN: r4253", "tree": {"sha": "1e50bdfb275719021c180e530315e1fb057eca48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e50bdfb275719021c180e530315e1fb057eca48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/comments", "author": null, "committer": null, "parents": [{"sha": "c3b80729bb95b2137da7039f489c6de1092ed4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b80729bb95b2137da7039f489c6de1092ed4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b80729bb95b2137da7039f489c6de1092ed4ef"}], "stats": {"total": 79, "additions": 26, "deletions": 53}, "files": [{"sha": "e4b3bbd5952fb0852d74feb8458e2b0c1d0bc717", "filename": "gcc/objc/Makefile.in", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMakefile.in?ref=d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "patch": "@@ -60,9 +60,12 @@ libobjc.a: $(OBJC_O)\n \t$(AR) rc libobjc.a $(OBJC_O)\n # ranlib is run in the parent directory's makefile.\n \n+ARGFRAME_H = argframe.h af-sparc.h\n+\n OBJC_H = hash.h list.h sarray.h objc.h \\\n          objc-api.h cache.h \\\n-\t Object.h Protocol.h mutex.h\n+\t Object.h Protocol.h mutex.h \\\n+\t $(ARGFRAME_H)\n \n # copy objc headers to installation include directory\n copy-headers: $(OBJC_H)\n@@ -74,19 +77,6 @@ copy-headers: $(OBJC_H)\n \t  chmod a+r $(incinstalldir)/objc; \\\n \tdone\n \n-sendmsg.o: sendmsg.c fflags\n-\t$(GCC_FOR_TARGET) `cat fflags` -c $(GCC_CFLAGS) $(SUBDIR_INCLUDES) $(srcdir)/objc/sendmsg.c\n-\n-## Next to are for heuristics on forwarding mechanism... \n-_forward: _forward.c\n-\t-$(GCC_FOR_TARGET) -c $(GCC_CFLAGS) $(SUBDIR_INCLUDES) $(srcdir)/objc/_forward.c\n-\t-$(GCC_FOR_TARGET) ./_forward.o -o _forward\n-\tif [ ! -f ./_forward ]; then touch ./_forward; else true; fi\t\n-\n-fflags: _forward\n-\t-rm -f fflags\n-\t-if [ -s ./_forward ]; then ./_forward > fflags; else touch fflags; fi\n-\n mostlyclean:\n \t-rm -f *.o libobjc.a _forward fflags\n clean: mostlyclean"}, {"sha": "53f0253e8c5d4f1e8152130f99f45fb822000ed4", "filename": "gcc/objc/Object.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.h?ref=d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "patch": "@@ -52,10 +52,14 @@ typedef char *STR;                              /* String alias */\n \n @class Protocol;\n typedef struct objc_typed_stream TypedStream;\n-typedef void* arglist_t;\n \n #endif /* not __objc_INCLUDE_GNU */\n \n+#ifndef __AF_FRAME\n+typedef struct __gnuc_af_frame *af_frame;\n+#define __AF_FRAME\n+#endif\n+\n /*\n  * All classes are derived from Object.  As such,\n  * this is the overhead tacked onto those objects.\n@@ -119,8 +123,8 @@ typedef void* arglist_t;\n - perform:(SEL)aSel with:anObject1 with:anObject2;\n \n         /* Forwarding */\n-- forward:(SEL)aSel :(arglist_t)argFrame;\n-- performv:(SEL)aSel :(arglist_t)argFrame;\n+- forward:(SEL)aSel :(af_frame)argFrame;\n+- performv:(SEL)aSel :(af_frame)argFrame;\n \n         /* Posing */\n + poseAs:(Class*)aClassObject;"}, {"sha": "3a524dc7bb04c907ad4cc0230b34e9861ec78bfe", "filename": "gcc/objc/Object.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.m?ref=d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "patch": "@@ -245,12 +245,12 @@ - (struct objc_method_description *)descriptionForMethod:(SEL)aSel\n   return (*msg)(self, aSel, anObject1, anObject2);\n }\n \n-- forward:(SEL)aSel :(arglist_t)argFrame\n+- forward:(SEL)aSel :(af_frame)argFrame\n {\n   return [self doesNotRecognize: aSel];\n }\n \n-- performv:(SEL)aSel :(arglist_t)argFrame\n+- performv:(SEL)aSel :(af_frame)argFrame\n {\n   return objc_msg_sendv(self, aSel, method_get_argsize(0), argFrame);\n }"}, {"sha": "915e29dd28bae1ebf2e0511e607749955e1ee1c2", "filename": "gcc/objc/misc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fmisc.c?ref=d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "patch": "@@ -26,8 +26,6 @@ You should have received a copy of the GNU General Public License along with\n \n #include \"runtime.h\"\n \n-void objc_error(id object, const char* fmt, va_list);\n-\n void (*_objc_error)(id, const char*, va_list) = objc_error;\n /* id (*_objc_object_alloc)(Class*) = 0; */\n /* id (*_objc_object_dispose)(id)    = 0; */"}, {"sha": "569693781cce7711545563627bc22de842f4cdc5", "filename": "gcc/objc/objc.h", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc.h?ref=d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "patch": "@@ -440,36 +440,12 @@ IMP objc_msg_lookup_super(Super_t super, SEL sel);\n typedef void* retval_t;\t\t/* return value */\n typedef void(*apply_t)(void);\t/* function pointer */\n \n-#ifndef __object_INCLUDE_GNU\n-\n-#if defined(REG_ARGS) || defined(STACK_ARGS) \n-\n-typedef struct {\n-  char* arg_pointer;\n-#ifdef STRUCT_RETURN\n-  void* struct_return;\n-#endif\n-#ifdef REG_ARGS\n-  void* regs[2];\n-#endif\n-} *arglist_t;\n-\n-#ifdef REG_ARGS\n-#define __objc_frame_receiver(FRAME)  (FRAME)->regs[0]\n-#define __objc_frame_selector(FRAME)  ((SEL)(FRAME)->regs[1])\n-\n-#else\n-#define __objc_frame_receiver(FRAME) ((id*)(FRAME)->arg_pointer)[0]\n-#define __objc_frame_selector(FRAME) ((SEL*)(FRAME)->arg_pointer)[1]\n-#endif\n-#else\n-\n-typedef void* arglist_t;\n-\n+#ifndef __AF_FRAME\n+typedef struct __gnuc_af_frame *af_frame;\n+#define __AF_FRAME\n #endif\n-#endif /* not __object_INCLUDE_GNU */\n \n-retval_t objc_msg_sendv(id, SEL, size_t, arglist_t);\n+retval_t objc_msg_sendv(id, SEL, size_t, af_frame);\n \n #ifdef __OBJC__\n "}, {"sha": "b0a1e163a24eed134fa0eb3e30db030ff2e29d11", "filename": "gcc/objc/runtime.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fruntime.h?ref=d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "patch": "@@ -51,6 +51,8 @@ extern void __objc_register_selectors_from_class(Class*); /* (objc-sel.c) */\n extern void __objc_update_dispatch_table_for_class (Class*);/* (objc-msg.c) */\n extern void class_add_method_list(Class*, MethodList_t);\n \n+void objc_error(id object, const char* fmt, va_list);\n+\n /* True when class links has been resolved */     \n extern BOOL __objc_class_links_resolved;\n "}, {"sha": "1c5c6631829afc20d4f1f4b9fdb823af42b58e81", "filename": "gcc/objc/sendmsg.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5247e3ea2d8aac62cd61c80c4a68f1efb19e675/gcc%2Fobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsendmsg.c?ref=d5247e3ea2d8aac62cd61c80c4a68f1efb19e675", "patch": "@@ -25,6 +25,7 @@ You should have received a copy of the GNU General Public License along with\n    covered by the GNU General Public License.  */\n \n #include \"runtime.h\"\n+#include \"argframe.h\"\n \n #ifdef OBJC_SPARSE_LOOKUP\n const char* __objc_sparse_lookup_id = \"Method lookup uses sparse arrays\";\n@@ -110,11 +111,13 @@ objc_msg_lookup_super (Super_t super, SEL sel)\n }\n \n retval_t\n-objc_msg_sendv(id object, SEL op, size_t frame_size, arglist_t arg_frame)\n+objc_msg_sendv(id object, SEL op, size_t frame_size, af_frame arg_frame)\n {\n-#ifdef __objc_frame_receiver\n-  __objc_frame_receiver(arg_frame) = object;\n-  __objc_frame_selector(arg_frame) = op;\n+#ifndef __ARGFRAME_DOES_NOT_WORK\n+  af_cum cum;\n+  af_start (cum, arg_frame);\n+  af_put (arg_frame, cum, id, object);\n+  af_put (arg_frame, cum, SEL, op);\n   return __builtin_apply((apply_t)get_imp(object->class_pointer, op),\n \t\t\t arg_frame,\n \t\t\t frame_size);"}]}