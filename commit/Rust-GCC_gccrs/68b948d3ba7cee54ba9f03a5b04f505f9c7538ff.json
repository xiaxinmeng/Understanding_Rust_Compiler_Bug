{"sha": "68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhiOTQ4ZDNiYTdjZWU1NGJhOWYwM2E1YjA0ZjUwNWY5Yzc1MzhmZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-27T08:51:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-27T08:51:28Z"}, "message": "re PR tree-optimization/45397 (Issues with integer narrowing conversions)\n\n2017-02-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/45397\n\t* tree-ssa-pre.c (eliminate_insert): Handle BIT_AND_EXPR.\n\t* tree-ssa-sccvn.c (valueized_wider_op): New helper.\n\t(visit_nary_op): Add pattern matching for CSEing sign-changed\n\tor truncated operations with wider ones.\n\n\t* gcc.dg/tree-ssa/pr45397.c: New testcase.\n\nFrom-SVN: r245752", "tree": {"sha": "2c076d7eb5021139981bfc90131783fb89462744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c076d7eb5021139981bfc90131783fb89462744"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69a2e8a10b5e80bb696269f7d6365a3efd16c18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a2e8a10b5e80bb696269f7d6365a3efd16c18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a2e8a10b5e80bb696269f7d6365a3efd16c18d"}], "stats": {"total": 159, "additions": 151, "deletions": 8}, "files": [{"sha": "997a48213b3ab9c9acc3ff10f91550276a2abaf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "patch": "@@ -1,3 +1,11 @@\n+2017-02-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45397\n+\t* tree-ssa-pre.c (eliminate_insert): Handle BIT_AND_EXPR.\n+\t* tree-ssa-sccvn.c (valueized_wider_op): New helper.\n+\t(visit_nary_op): Add pattern matching for CSEing sign-changed\n+\tor truncated operations with wider ones.\n+\n 2017-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79690"}, {"sha": "a609c981003b409be8187b1a07f5fe4824392a91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "patch": "@@ -1,3 +1,8 @@\n+2017-02-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45397\n+\t* gcc.dg/tree-ssa/pr45397.c: New testcase.\n+\n 2017-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79690"}, {"sha": "18c7f0bceccc32fbbb08ba32ddec782e3216dc6b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr45397.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45397.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45397.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr45397.c?ref=68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt1\" } */\n+\n+int foo_add (const unsigned char *tmp, int i, int val)\n+{\n+  return (unsigned char)(((tmp[i] + val)>0xFF)?0xFF:(((tmp[i] + val)<0)?0:(tmp[i] + val)));\n+}\n+\n+int foo_sub (const unsigned char *tmp, int i, int val)\n+{\n+  return (unsigned char)(((tmp[i] - val)>0xFF)?0xFF:(((tmp[i] - val)<0)?0:(tmp[i] - val)));\n+}\n+\n+int foo_mul (const unsigned char *tmp, int i, int val)\n+{\n+  return (unsigned char)(((tmp[i] * val)>0xFF)?0xFF:(((tmp[i] * val)<0)?0:(tmp[i] * val)));\n+}\n+\n+/* All cases should end up using min/max for the saturated operations and\n+   have no control flow.  */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 3 \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 3 \"phiopt1\" } } */\n+/* { dg-final { scan-tree-dump-not \"if \" \"phiopt1\" } } */"}, {"sha": "a1d76774fae7adb1c2c01911799f8985f74f9f78", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "patch": "@@ -4103,7 +4103,9 @@ eliminate_insert (gimple_stmt_iterator *gsi, tree val)\n   if (!is_gimple_assign (stmt)\n       || (!CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n \t  && gimple_assign_rhs_code (stmt) != VIEW_CONVERT_EXPR\n-\t  && gimple_assign_rhs_code (stmt) != BIT_FIELD_REF))\n+\t  && gimple_assign_rhs_code (stmt) != BIT_FIELD_REF\n+\t  && (gimple_assign_rhs_code (stmt) != BIT_AND_EXPR\n+\t      || TREE_CODE (gimple_assign_rhs2 (stmt)) != INTEGER_CST)))\n     return NULL_TREE;\n \n   tree op = gimple_assign_rhs1 (stmt);\n@@ -4121,6 +4123,9 @@ eliminate_insert (gimple_stmt_iterator *gsi, tree val)\n \t\t\tTREE_TYPE (val), leader,\n \t\t\tTREE_OPERAND (gimple_assign_rhs1 (stmt), 1),\n \t\t\tTREE_OPERAND (gimple_assign_rhs1 (stmt), 2));\n+  else if (gimple_assign_rhs_code (stmt) == BIT_AND_EXPR)\n+    res = gimple_build (&stmts, BIT_AND_EXPR,\n+\t\t\tTREE_TYPE (val), leader, gimple_assign_rhs2 (stmt));\n   else\n     res = gimple_build (&stmts, gimple_assign_rhs_code (stmt),\n \t\t\tTREE_TYPE (val), leader);"}, {"sha": "4f5e85243bde2279d2e52a8b15facf48e0bad2a1", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 109, "deletions": 7, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b948d3ba7cee54ba9f03a5b04f505f9c7538ff/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=68b948d3ba7cee54ba9f03a5b04f505f9c7538ff", "patch": "@@ -3447,23 +3447,125 @@ visit_copy (tree lhs, tree rhs)\n   return set_ssa_val_to (lhs, rhs);\n }\n \n+/* Lookup a value for OP in type WIDE_TYPE where the value in type of OP\n+   is the same.  */\n+\n+static tree\n+valueized_wider_op (tree wide_type, tree op)\n+{\n+  if (TREE_CODE (op) == SSA_NAME)\n+    op = SSA_VAL (op);\n+\n+  /* Either we have the op widened available.  */\n+  tree ops[3] = {};\n+  ops[0] = op;\n+  tree tem = vn_nary_op_lookup_pieces (1, NOP_EXPR,\n+\t\t\t\t       wide_type, ops, NULL);\n+  if (tem)\n+    return tem;\n+\n+  /* Or the op is truncated from some existing value.  */\n+  if (TREE_CODE (op) == SSA_NAME)\n+    {\n+      gimple *def = SSA_NAME_DEF_STMT (op);\n+      if (is_gimple_assign (def)\n+\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def)))\n+\t{\n+\t  tem = gimple_assign_rhs1 (def);\n+\t  if (useless_type_conversion_p (wide_type, TREE_TYPE (tem)))\n+\t    {\n+\t      if (TREE_CODE (tem) == SSA_NAME)\n+\t\ttem = SSA_VAL (tem);\n+\t      return tem;\n+\t    }\n+\t}\n+    }\n+\n+  /* For constants simply extend it.  */\n+  if (TREE_CODE (op) == INTEGER_CST)\n+    return wide_int_to_tree (wide_type, op);\n+\n+  return NULL_TREE;\n+}\n+\n /* Visit a nary operator RHS, value number it, and return true if the\n    value number of LHS has changed as a result.  */\n \n static bool\n-visit_nary_op (tree lhs, gimple *stmt)\n+visit_nary_op (tree lhs, gassign *stmt)\n {\n-  bool changed = false;\n   tree result = vn_nary_op_lookup_stmt (stmt, NULL);\n-\n   if (result)\n-    changed = set_ssa_val_to (lhs, result);\n-  else\n+    return set_ssa_val_to (lhs, result);\n+\n+  /* Do some special pattern matching for redundancies of operations\n+     in different types.  */\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n+  tree type = TREE_TYPE (lhs);\n+  tree rhs1 = gimple_assign_rhs1 (stmt);\n+  switch (code)\n     {\n-      changed = set_ssa_val_to (lhs, lhs);\n-      vn_nary_op_insert_stmt (stmt, lhs);\n+    CASE_CONVERT:\n+      /* Match arithmetic done in a different type where we can easily\n+         substitute the result from some earlier sign-changed or widened\n+\t operation.  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TREE_CODE (rhs1) == SSA_NAME\n+\t  /* We only handle sign-changes or zero-extension -> & mask.  */\n+\t  && ((TYPE_UNSIGNED (TREE_TYPE (rhs1))\n+\t       && TYPE_PRECISION (type) > TYPE_PRECISION (TREE_TYPE (rhs1)))\n+\t      || TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (rhs1))))\n+\t{\n+\t  gassign *def = dyn_cast <gassign *> (SSA_NAME_DEF_STMT (rhs1));\n+\t  if (def\n+\t      && (gimple_assign_rhs_code (def) == PLUS_EXPR\n+\t\t  || gimple_assign_rhs_code (def) == MINUS_EXPR\n+\t\t  || gimple_assign_rhs_code (def) == MULT_EXPR))\n+\t    {\n+\t      tree ops[3] = {};\n+\t      /* Either we have the op widened available.  */\n+\t      ops[0] = valueized_wider_op (type,\n+\t\t\t\t\t   gimple_assign_rhs1 (def));\n+\t      if (ops[0])\n+\t\tops[1] = valueized_wider_op (type,\n+\t\t\t\t\t     gimple_assign_rhs2 (def));\n+\t      if (ops[0] && ops[1])\n+\t\t{\n+\t\t  ops[0] = vn_nary_op_lookup_pieces\n+\t\t      (2, gimple_assign_rhs_code (def), type, ops, NULL);\n+\t\t  /* We have wider operation available.  */\n+\t\t  if (ops[0])\n+\t\t    {\n+\t\t      unsigned lhs_prec = TYPE_PRECISION (type);\n+\t\t      unsigned rhs_prec = TYPE_PRECISION (TREE_TYPE (rhs1));\n+\t\t      if (lhs_prec == rhs_prec)\n+\t\t\t{\n+\t\t\t  ops[1] = NULL_TREE;\n+\t\t\t  result = vn_nary_build_or_lookup (NOP_EXPR,\n+\t\t\t\t\t\t\t    type, ops);\n+\t\t\t  if (result)\n+\t\t\t    return set_ssa_val_to (lhs, result);\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  ops[1] = wide_int_to_tree (type,\n+\t\t\t\t\t\t     wi::mask (rhs_prec, false,\n+\t\t\t\t\t\t\t       lhs_prec));\n+\t\t\t  result = vn_nary_build_or_lookup (BIT_AND_EXPR,\n+\t\t\t\t\t\t\t    TREE_TYPE (lhs),\n+\t\t\t\t\t\t\t    ops);\n+\t\t\t  if (result)\n+\t\t\t    return set_ssa_val_to (lhs, result);\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    default:;\n     }\n \n+  bool changed = set_ssa_val_to (lhs, lhs);\n+  vn_nary_op_insert_stmt (stmt, lhs);\n   return changed;\n }\n "}]}