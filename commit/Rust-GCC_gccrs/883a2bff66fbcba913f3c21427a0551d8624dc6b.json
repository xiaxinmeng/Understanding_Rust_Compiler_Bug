{"sha": "883a2bff66fbcba913f3c21427a0551d8624dc6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzYTJiZmY2NmZiY2JhOTEzZjNjMjE0MjdhMDU1MWQ4NjI0ZGM2Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-10-28T20:53:04Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-10-28T20:53:04Z"}, "message": "re PR c++/17132 (GCC fails to eliminate function template specialization when argument deduction fails)\n\n\tPR c++/17132\n\t* pt.c (instantiate_class_template): Increment\n\tprocessing_template_decl when substituting into a member class\n\ttemplate.\n\n\tPR c++/17132\n\t* g++.dg/template/memclass3.C: New test.\n\nFrom-SVN: r89778", "tree": {"sha": "d67de648c09e8c1810110d9aea2eda23c21b75cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d67de648c09e8c1810110d9aea2eda23c21b75cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/883a2bff66fbcba913f3c21427a0551d8624dc6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883a2bff66fbcba913f3c21427a0551d8624dc6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883a2bff66fbcba913f3c21427a0551d8624dc6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883a2bff66fbcba913f3c21427a0551d8624dc6b/comments", "author": null, "committer": null, "parents": [{"sha": "40aea05cfa9feadb1fb46bca2992b905ebdcba74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40aea05cfa9feadb1fb46bca2992b905ebdcba74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40aea05cfa9feadb1fb46bca2992b905ebdcba74"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "2edaa402f21e268c3fb8995972abfbc2bdeb6083", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=883a2bff66fbcba913f3c21427a0551d8624dc6b", "patch": "@@ -1,3 +1,10 @@\n+2004-10-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17132\n+\t* pt.c (instantiate_class_template): Increment\n+\tprocessing_template_decl when substituting into a member class\n+\ttemplate.\n+\n 2004-10-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17435"}, {"sha": "eb44e64b9b9ba3dcc447ec201f319f40f3bb8c59", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=883a2bff66fbcba913f3c21427a0551d8624dc6b", "patch": "@@ -5621,14 +5621,28 @@ instantiate_class_template (tree type)\n \t      tree tag = t;\n \t      tree name = TYPE_IDENTIFIER (tag);\n \t      tree newtag;\n-\n+\t      bool class_template_p;\n+\n+\t      class_template_p = (TREE_CODE (tag) != ENUMERAL_TYPE\n+\t\t\t\t  && TYPE_LANG_SPECIFIC (tag)\n+\t\t\t\t  && CLASSTYPE_IS_TEMPLATE (tag));\n+\t      /* If the member is a class template, then -- even after\n+\t\t substituition -- there may be dependent types in the\n+\t\t template argument list for the class.  We increment\n+\t\t PROCESSING_TEMPLATE_DECL so that dependent_type_p, as\n+\t\t that function will assume that no types are dependent\n+\t\t when outside of a template.  */\n+\t      if (class_template_p)\n+\t\t++processing_template_decl;\n \t      newtag = tsubst (tag, args, tf_error, NULL_TREE);\n+\t      if (class_template_p)\n+\t\t--processing_template_decl;\n \t      if (newtag == error_mark_node)\n \t\tcontinue;\n \n \t      if (TREE_CODE (newtag) != ENUMERAL_TYPE)\n \t\t{\n-\t\t  if (TYPE_LANG_SPECIFIC (tag) && CLASSTYPE_IS_TEMPLATE (tag))\n+\t\t  if (class_template_p)\n \t\t    /* Unfortunately, lookup_template_class sets\n \t\t       CLASSTYPE_IMPLICIT_INSTANTIATION for a partial\n \t\t       instantiation (i.e., for the type of a member"}, {"sha": "556d3301c2592630ebf441beae71050a18ae5607", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=883a2bff66fbcba913f3c21427a0551d8624dc6b", "patch": "@@ -1,3 +1,8 @@\n+2004-10-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17132\n+\t* g++.dg/template/memclass3.C: New test.\n+\n 2004-10-28  Adam Nemet  <anemet@lnxw.com>\n \n \tPR middle-end/18160  "}, {"sha": "8230b94e5b93ec0a7ee67edc37edf3e1c9c53f9c", "filename": "gcc/testsuite/g++.dg/template/memclass3.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883a2bff66fbcba913f3c21427a0551d8624dc6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass3.C?ref=883a2bff66fbcba913f3c21427a0551d8624dc6b", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/17132\n+\n+template <typename T>\n+struct has_deref\n+{\n+    struct impl\n+    {\n+        template <\n+            typename Type,\n+            typename Type::reference (Type::*Func)(void) const>\n+        struct func_tag;\n+\n+        template <typename Type>\n+        static char (& test(\n+            Type *,\n+            func_tag<Type, &Type::operator*> * = 0\n+        ))[2];\n+        static char test(void *);\n+    };\n+\n+    static const bool value = (sizeof(impl::test((T *) 0)) == 2);\n+};\n+\n+template <typename T>\n+struct container\n+{\n+    struct iterator\n+    {\n+        typedef T & reference;\n+        reference operator*() const;\n+    };\n+};\n+\n+int main()\n+{\n+    typedef container<int>::iterator iter;\n+    int result = has_deref<iter>::value;\n+    return result;\n+}"}]}