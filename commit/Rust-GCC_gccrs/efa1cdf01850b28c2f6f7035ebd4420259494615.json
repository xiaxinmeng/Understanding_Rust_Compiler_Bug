{"sha": "efa1cdf01850b28c2f6f7035ebd4420259494615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhMWNkZjAxODUwYjI4YzJmNmY3MDM1ZWJkNDQyMDI1OTQ5NDYxNQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-02-27T01:32:56Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-02-27T01:32:56Z"}, "message": "opts.c (decode_options): Do not handle flag_strength_reduce.\n\n\t* opts.c (decode_options): Do not handle flag_strength_reduce.\n\t(common_handle_option): Handle OPT_floop_optimize, OPT_frerun_loop_opt\n\tand OPT_fstrength_reduce.\n\t* tree-ssa-loop.c (tree_ssa_loop_prefetch): Only test\n\tflag_prefetch_loop_arrays for being nonzero.\n\t* common.opt (floop-optimize, frerun-loop-opt): Resurrected as\n\tno-ops.\n\t(fprefetch-loop-arrays-rtl): Removed.\n\t(flag_prefetch_loop_arrays): Do not specify the value.\n\n\t* doc/passes.texi: Update documentation of loop optimizer\n\tpasses.\n\t* doc/invoke.texi (-fstrength-reduce, -fprefetch-loop-arrays-rtl,\n\t-frerun-loop-opt): Remove.\n\n\t* gcc.target/i386/20000614-2.c: Do not use -fno-strength-reduce.\n\t* gcc.dg/20030324-1.c: Do not use -fstrength-reduce.\n\nFrom-SVN: r111469", "tree": {"sha": "9f2b1972a2e42dab661909cfd05068b1712650b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f2b1972a2e42dab661909cfd05068b1712650b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa1cdf01850b28c2f6f7035ebd4420259494615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa1cdf01850b28c2f6f7035ebd4420259494615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa1cdf01850b28c2f6f7035ebd4420259494615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa1cdf01850b28c2f6f7035ebd4420259494615/comments", "author": null, "committer": null, "parents": [{"sha": "63a06ed2be82a1fc713fe618e5709ca62de8e260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a06ed2be82a1fc713fe618e5709ca62de8e260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a06ed2be82a1fc713fe618e5709ca62de8e260"}], "stats": {"total": 118, "additions": 63, "deletions": 55}, "files": [{"sha": "e8c9d83c6d41fe0aa6420b92859af4eddd88407b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -1,3 +1,20 @@\n+2006-02-26  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* opts.c (decode_options): Do not handle flag_strength_reduce.\n+\t(common_handle_option): Handle OPT_floop_optimize, OPT_frerun_loop_opt\n+\tand OPT_fstrength_reduce.\n+\t* tree-ssa-loop.c (tree_ssa_loop_prefetch): Only test\n+\tflag_prefetch_loop_arrays for being nonzero.\n+\t* common.opt (floop-optimize, frerun-loop-opt): Resurrected as\n+\tno-ops.\n+\t(fprefetch-loop-arrays-rtl): Removed.\n+\t(flag_prefetch_loop_arrays): Do not specify the value.\n+\n+\t* doc/passes.texi: Update documentation of loop optimizer\n+\tpasses.\n+\t* doc/invoke.texi (-fstrength-reduce, -fprefetch-loop-arrays-rtl,\n+\t-frerun-loop-opt): Remove.\n+\n 2006-02-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/26421"}, {"sha": "02ade79d0abcc58631e2df840b7b9f38f6b8fa17", "filename": "gcc/common.opt", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -555,6 +555,10 @@ fleading-underscore\n Common Report Var(flag_leading_underscore) Init(-1)\n Give external symbols a leading underscore\n \n+floop-optimize\n+Common\n+Does nothing.  Preserved for backward compatability.\n+\n fmath-errno\n Common Report Var(flag_errno_math) Init(1)\n Set errno after built-in math functions\n@@ -659,11 +663,7 @@ Common Report Var(flag_pie,1) VarExists\n Generate position-independent code for executables if possible (small mode)\n \n fprefetch-loop-arrays\n-Common Report Var(flag_prefetch_loop_arrays,1)\n-Generate prefetch instructions, if available, for arrays in loops\n-\n-fprefetch-loop-arrays-rtl\n-Common Report Var(flag_prefetch_loop_arrays,2)\n+Common Report Var(flag_prefetch_loop_arrays)\n Generate prefetch instructions, if available, for arrays in loops\n \n fprofile\n@@ -721,6 +721,10 @@ frerun-cse-after-loop\n Common Report Var(flag_rerun_cse_after_loop) Init(2)\n Add a common subexpression elimination pass after loop optimizations\n \n+frerun-loop-opt\n+Common\n+Does nothing.  Preserved for backward compatability.\n+\n frounding-math\n Common Report Var(flag_rounding_math)\n Disable optimizations that assume default FP rounding behavior\n@@ -837,8 +841,8 @@ Common Report RejectNegative Var(flag_stack_protect, 2) VarExists\n Use a stack protection method for every function\n \n fstrength-reduce\n-Common Report Var(flag_strength_reduce)\n-Perform strength reduction optimizations\n+Common\n+Does nothing.  Preserved for backward compatability.\n \n ; Nonzero if we should do (language-dependent) alias analysis.\n ; Typically, this analysis will assume that expressions of certain"}, {"sha": "60aaaf707446adbac69cfeef05e3fe06cc3ec203", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 30, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -107,7 +107,7 @@ the directories are searched in the order specified.\n \n Many options have long names starting with @samp{-f} or with\n @samp{-W}---for example, \n-@option{-fstrength-reduce}, @option{-Wformat} and so on.  Most of\n+@option{-fmove-loop-invariants}, @option{-Wformat} and so on.  Most of\n these have both positive and negative forms; the negative form of\n @option{-ffoo} would be @option{-fno-foo}.  This manual documents\n only one of these two forms, whichever one is not the default.\n@@ -321,11 +321,11 @@ Objective-C and Objective-C++ Dialects}.\n -funsafe-math-optimizations  -funsafe-loop-optimizations  -ffinite-math-only @gol\n -fno-toplevel-reorder -fno-trapping-math  -fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n--foptimize-sibling-calls  -fprefetch-loop-arrays -fprefetch-loop-arrays-rtl @gol\n+-foptimize-sibling-calls  -fprefetch-loop-arrays @gol\n -fprofile-generate -fprofile-use @gol\n -fregmove  -frename-registers @gol\n -freorder-blocks  -freorder-blocks-and-partition -freorder-functions @gol\n--frerun-cse-after-loop  -frerun-loop-opt @gol\n+-frerun-cse-after-loop @gol\n -frounding-math -frtl-abstract-sequences @gol\n -fschedule-insns  -fschedule-insns2 @gol\n -fno-sched-interblock  -fno-sched-spec  -fsched-spec-load @gol\n@@ -335,7 +335,7 @@ Objective-C and Objective-C++ Dialects}.\n -fsched2-use-traces -freschedule-modulo-scheduled-loops @gol\n -fsection-anchors  -fsignaling-nans  -fsingle-precision-constant @gol\n -fstack-protector  -fstack-protector-all @gol\n--fstrength-reduce  -fstrict-aliasing  -ftracer  -fthread-jumps @gol\n+-fstrict-aliasing  -ftracer  -fthread-jumps @gol\n -funroll-all-loops  -funroll-loops  -fpeel-loops @gol\n -fsplit-ivs-in-unroller -funswitch-loops @gol\n -fvariable-expansion-in-unroller @gol\n@@ -4434,8 +4434,7 @@ also turns on the following optimization flags:\n -fcse-follow-jumps  -fcse-skip-blocks @gol\n -fgcse  -fgcse-lm  @gol\n -fexpensive-optimizations @gol\n--fstrength-reduce @gol\n--frerun-cse-after-loop  -frerun-loop-opt @gol\n+-frerun-cse-after-loop  @gol\n -fcaller-saves @gol\n -fpeephole2 @gol\n -fschedule-insns  -fschedule-insns2 @gol\n@@ -4670,8 +4669,7 @@ register, compare it against zero, then branch based upon the result.\n This option is only meaningful on architectures that support such\n instructions, which include x86, PowerPC, IA-64 and S/390.\n \n-The default is @option{-fbranch-count-reg}, enabled when\n-@option{-fstrength-reduce} is enabled.\n+The default is @option{-fbranch-count-reg}.\n \n @item -fno-function-cse\n @opindex fno-function-cse\n@@ -4730,13 +4728,6 @@ instrumentation (and therefore faster execution) and still provides\n some protection against outright memory corrupting writes, but allows\n erroneously read data to propagate within a program.\n \n-@item -fstrength-reduce\n-@opindex fstrength-reduce\n-Perform the optimizations of loop strength reduction and\n-elimination of iteration variables.\n-\n-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n-\n @item -fthread-jumps\n @opindex fthread-jumps\n Perform optimizations where we check to see if a jump branches to a\n@@ -5130,9 +5121,9 @@ better job.\n @item -funroll-loops\n @opindex funroll-loops\n Unroll loops whose number of iterations can be determined at compile\n-time or upon entry to the loop.  @option{-funroll-loops} implies both\n-@option{-fstrength-reduce} and @option{-frerun-cse-after-loop}.  This\n-option makes code larger, and may or may not make it run faster.\n+time or upon entry to the loop.  @option{-funroll-loops} implies\n+@option{-frerun-cse-after-loop}.  This option makes code larger,\n+and may or may not make it run faster.\n \n @item -funroll-all-loops\n @opindex funroll-all-loops\n@@ -5160,15 +5151,15 @@ With this option, the compiler will create multiple copies of some\n local variables when unrolling a loop which can result in superior code.\n \n @item -fprefetch-loop-arrays\n-@itemx -fprefetch-loop-arrays-rtl\n @opindex fprefetch-loop-arrays\n-@opindex fprefetch-loop-arrays-rtl\n If supported by the target machine, generate instructions to prefetch\n memory to improve the performance of loops that access large arrays.\n \n-These options may generate better or worse code; results are highly\n+This option may generate better or worse code; results are highly\n dependent on the structure of loops within the source code.\n \n+Disabled at level @option{-Os}.\n+\n @item -fno-peephole\n @itemx -fno-peephole2\n @opindex fno-peephole\n@@ -5698,15 +5689,6 @@ at level @option{-O1}\n Move branches with loop invariant conditions out of the loop, with duplicates\n of the loop on both branches (modified according to result of the condition).\n \n-@item -fprefetch-loop-arrays\n-@itemx -fprefetch-loop-arrays-rtl\n-@opindex fprefetch-loop-arrays\n-@opindex fprefetch-loop-arrays-rtl\n-If supported by the target machine, generate instructions to prefetch\n-memory to improve the performance of loops that access large arrays.\n-\n-Disabled at level @option{-Os}.\n-\n @item -ffunction-sections\n @itemx -fdata-sections\n @opindex ffunction-sections"}, {"sha": "bb6a3f0056d0c71dcbcac5391822a3be1a925d07", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -574,20 +574,15 @@ are in @file{lcm.c}.\n \n @item Loop optimization\n \n-This pass moves constant expressions out of loops, and optionally does\n-strength-reduction as well.  The pass is located in @file{loop.c}.\n-Loop dependency analysis routines are contained in @file{dependence.c}.\n-This pass is seriously out-of-date and is supposed to be replaced by\n-a new one described below in near future.\n-\n-A second loop optimization pass takes care of basic block level\n-optimizations---unrolling, peeling and unswitching loops.  The source\n-files are @file{cfgloopanal.c} and @file{cfgloopmanip.c} containing\n-generic loop analysis and manipulation code, @file{loop-init.c} with\n-initialization and finalization code, @file{loop-unswitch.c} for loop\n-unswitching and @file{loop-unroll.c} for loop unrolling and peeling.\n-It also contains a separate loop invariant motion pass implemented in\n-@file{loop-invariant.c}.\n+This pass performs several loop related optimizations.\n+The source files @file{cfgloopanal.c} and @file{cfgloopmanip.c} contain\n+generic loop analysis and manipulation code.  Initialization and finalization\n+of loop structures is handled by @file{loop-init.c}.\n+A loop invariant motion pass is implemented in @file{loop-invariant.c}.\n+Basic block level optimizations---unrolling, peeling and unswitching loops---\n+are implemented in @file{loop-unswitch.c} and @file{loop-unroll.c}.\n+Replacing of the exit condition of loops by special machine-dependent\n+instructions is handled by @file{loop-doloop.c}.\n \n @item Jump bypassing\n "}, {"sha": "d804761cfd2dce13d4d02e5fa1a322aeda073c16", "filename": "gcc/opts.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -564,7 +564,6 @@ decode_options (unsigned int argc, const char **argv)\n       flag_gcse = 1;\n       flag_expensive_optimizations = 1;\n       flag_ipa_type_escape = 1;\n-      flag_strength_reduce = 1;\n       flag_rerun_cse_after_loop = 1;\n       flag_caller_saves = 1;\n       flag_peephole2 = 1;\n@@ -1083,6 +1082,12 @@ common_handle_option (size_t scode, const char *arg, int value,\n       warning (0, \"-f[no-]force-mem is nop and option will be removed in 4.2\");\n       break;\n \n+    case OPT_floop_optimize:\n+    case OPT_frerun_loop_opt:\n+    case OPT_fstrength_reduce:\n+      /* These are no-ops, preserved for backward compatability.  */\n+      break;\n+\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */"}, {"sha": "4d272f7de4c615c865cdac781e549f818b9f76d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -1,3 +1,8 @@\n+2006-02-26  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* gcc.target/i386/20000614-2.c: Do not use -fno-strength-reduce.\n+\t* gcc.dg/20030324-1.c: Do not use -fstrength-reduce.\n+\n 2006-02-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/26421"}, {"sha": "67db669fda282c0df56f52b954a6f4c2051ed115", "filename": "gcc/testsuite/gcc.dg/20030324-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftestsuite%2Fgcc.dg%2F20030324-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftestsuite%2Fgcc.dg%2F20030324-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030324-1.c?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -fstrength-reduce -fstrict-aliasing -fgcse\" } */\n+/* { dg-options \"-O -fstrict-aliasing -fgcse\" } */\n \n /* PR optimization/10087 */\n /* Contributed by Peter van Hoof <p.van-hoof@qub.ac.uk> */"}, {"sha": "9eba76149dca22cd28894fe81e31e278541a1983", "filename": "gcc/testsuite/gcc.target/i386/20000614-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20000614-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20000614-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20000614-2.c?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target i?86-*-* x86_64-*-*} } */\n-/* { dg-options \"-O2 -fno-strength-reduce\" } */\n+/* { dg-options \"-O2\" } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "8657dac18820c879296f3a2a6a2ec8734fe0582b", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa1cdf01850b28c2f6f7035ebd4420259494615/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=efa1cdf01850b28c2f6f7035ebd4420259494615", "patch": "@@ -416,7 +416,7 @@ tree_ssa_loop_prefetch (void)\n static bool\n gate_tree_ssa_loop_prefetch (void)\n {\n-  return flag_prefetch_loop_arrays == 1;\n+  return flag_prefetch_loop_arrays != 0;\n }\n \n struct tree_opt_pass pass_loop_prefetch ="}]}