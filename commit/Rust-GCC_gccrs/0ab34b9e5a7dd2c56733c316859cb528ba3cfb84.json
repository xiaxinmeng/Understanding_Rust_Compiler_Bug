{"sha": "0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiMzRiOWU1YTdkZDJjNTY3MzNjMzE2ODU5Y2I1MjhiYTNjZmI4NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-04-15T07:28:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-04-15T07:28:44Z"}, "message": "re PR tree-optimization/70130 (h264ref fails with verification error starting with r231674 (r224221 is the true start of the problem))\n\n2016-04-15  Richard Biener  <rguenther@suse.de>\n\tAlan Modra  <amodra@gmail.com>\n\n\tPR tree-optimization/70130\n\t* tree-vect-data-refs.c (vect_supportable_dr_alignment): Detect\n\twhen alignment stays not the same and no not use the realign\n\tscheme then.\n\n\t* gcc.dg/vect/O3-pr70130.c: New testcase.\n\nCo-Authored-By: Alan Modra <amodra@gmail.com>\n\nFrom-SVN: r235006", "tree": {"sha": "5abe4f214c09354e4ba722b97daf7dc9a5bff84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5abe4f214c09354e4ba722b97daf7dc9a5bff84f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e718ecbb0ded9686113e64c9241c083b7afc620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e718ecbb0ded9686113e64c9241c083b7afc620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e718ecbb0ded9686113e64c9241c083b7afc620"}], "stats": {"total": 125, "additions": 121, "deletions": 4}, "files": [{"sha": "7d35837be7fa9b360da811af276237cc899e1e2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "patch": "@@ -1,3 +1,11 @@\n+2016-04-15  Richard Biener  <rguenther@suse.de>\n+\tAlan Modra  <amodra@gmail.com>\n+\n+\tPR tree-optimization/70130\n+\t* tree-vect-data-refs.c (vect_supportable_dr_alignment): Detect\n+\twhen alignment stays not the same and no not use the realign\n+\tscheme then.\n+\n 2016-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/70669"}, {"sha": "69ea1854678b6bd232d7fae73e9818e11fb05018", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "patch": "@@ -1,3 +1,9 @@\n+2016-04-15  Richard Biener  <rguenther@suse.de>\n+\tAlan Modra  <amodra@gmail.com>\n+\n+\tPR tree-optimization/70130\n+\t* gcc.dg/vect/O3-pr70130.c: New testcase.\n+\n 2016-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/70669"}, {"sha": "e9938c21f413d2fddf89cc362e0b13bf343b8934", "filename": "gcc/testsuite/gcc.dg/vect/O3-pr70130.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr70130.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr70130.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr70130.c?ref=0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw { target powerpc*-*-* } } */\n+/* { dg-additional-options \"-mcpu=power7\" { target powerpc*-*-* } } */\n+\n+struct foo\n+{\n+  short a[3][16][16];\n+  short pad;\n+} images[8];\n+\n+void __attribute__ ((noinline, noclone))\n+Loop_err (struct foo *img, const int s[16][2], int s0)\n+{\n+  int i, j;\n+\n+  for (j = 0; j < 16; j++)\n+    {\n+      for (i=0; i < 16; i++)\n+\t{\n+\t  img->a[0][j][i] = s[i][0];\n+\t  img->a[1][j][i] = s[j][1];\n+\t  img->a[2][j][i] = s0;\n+\t}\n+    }\n+}\n+\n+const int s[16][2] = { { 1, 16 }, { 2, 15 }, { 3, 14 }, { 4, 13 },\n+\t\t       { 5, 12 }, { 6, 11 }, { 7, 10 }, { 8, 9 },\n+\t\t       { 9, 8 }, { 10, 7 }, { 11, 6 }, { 12, 5 },\n+\t\t       { 13, 4 }, { 14, 3 }, { 15, 2 }, { 16, 1 } };\n+const struct foo expected\n+= { { { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 } },\n+      { { 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 },\n+\t{ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },\n+\t{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 },\n+\t{ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 },\n+\t{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12 },\n+\t{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11 },\n+\t{ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },\n+\t{ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 },\n+\t{ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 },\n+\t{ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },\n+\t{ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },\n+\t{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },\n+\t{ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },\n+\t{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },\n+\t{ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },\n+\t{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } },\n+      { { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n+\t{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 } } },\n+    0 };\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    Loop_err (images + i, s, -1);\n+\n+  for (i = 0; i < 8; i++)\n+    if (__builtin_memcmp (&expected, images + i, sizeof (expected)))\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "7652e216eb6ec7b800967c81c33dc243a844f8bf", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "patch": "@@ -5983,10 +5983,19 @@ vect_supportable_dr_alignment (struct data_reference *dr,\n \t      || targetm.vectorize.builtin_mask_for_load ()))\n \t{\n \t  tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-\t  if ((nested_in_vect_loop\n-\t       && (TREE_INT_CST_LOW (DR_STEP (dr))\n-\t \t   != GET_MODE_SIZE (TYPE_MODE (vectype))))\n-              || !loop_vinfo)\n+\n+\t  /* If we are doing SLP then the accesses need not have the\n+\t     same alignment, instead it depends on the SLP group size.  */\n+\t  if (loop_vinfo\n+\t      && STMT_SLP_TYPE (stmt_info)\n+\t      && (LOOP_VINFO_VECT_FACTOR (loop_vinfo)\n+\t\t  * GROUP_SIZE (vinfo_for_stmt (GROUP_FIRST_ELEMENT (stmt_info)))\n+\t\t  % TYPE_VECTOR_SUBPARTS (vectype) != 0))\n+\t    ;\n+\t  else if (!loop_vinfo\n+\t\t   || (nested_in_vect_loop\n+\t\t       && (TREE_INT_CST_LOW (DR_STEP (dr))\n+\t\t\t   != GET_MODE_SIZE (TYPE_MODE (vectype)))))\n \t    return dr_explicit_realign;\n \t  else\n \t    return dr_explicit_realign_optimized;"}]}