{"sha": "a62346841c154b7ca97071aa107a690c051e89e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYyMzQ2ODQxYzE1NGI3Y2E5NzA3MWFhMTA3YTY5MGMwNTFlODllNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-16T00:05:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-16T00:05:30Z"}, "message": "tree-cfg.c (verify_expr): Replace TREE_OPERAND with COND_EXPR_COND.\n\n\t* tree-cfg.c (verify_expr): Replace TREE_OPERAND with\n\tCOND_EXPR_COND.\n\t* tree-if-conv.c (tree_if_convert_cond_expr): Likewise.\n\t* tree-ssa-dom.c (thread_across_edge): Likewise.\n\t* tree-vectorizer.c (vect_transform_loop_bound): Replace\n\tTREE_OPERAND with COND_EXPR_COND, COND_EXPR_THEN, or\n\tCOND_EXPR_ELSE.\n\nFrom-SVN: r90703", "tree": {"sha": "90fa1ecf74451155046ce19e84a431531ea5ed2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90fa1ecf74451155046ce19e84a431531ea5ed2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a62346841c154b7ca97071aa107a690c051e89e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62346841c154b7ca97071aa107a690c051e89e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a62346841c154b7ca97071aa107a690c051e89e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62346841c154b7ca97071aa107a690c051e89e5/comments", "author": null, "committer": null, "parents": [{"sha": "88f862a9e05cf60971367fe6a25c5f013218762d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f862a9e05cf60971367fe6a25c5f013218762d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f862a9e05cf60971367fe6a25c5f013218762d"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "2f20dbf51e18883819214f5187087b3aa9104e49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a62346841c154b7ca97071aa107a690c051e89e5", "patch": "@@ -1,3 +1,13 @@\n+2004-11-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (verify_expr): Replace TREE_OPERAND with\n+\tCOND_EXPR_COND.\n+\t* tree-if-conv.c (tree_if_convert_cond_expr): Likewise.\n+\t* tree-ssa-dom.c (thread_across_edge): Likewise.\n+\t* tree-vectorizer.c (vect_transform_loop_bound): Replace\n+\tTREE_OPERAND with COND_EXPR_COND, COND_EXPR_THEN, or\n+\tCOND_EXPR_ELSE.\n+\n 2004-11-15  Eric Christopher  <echristo@redhat.com>\n \n \t* sched-deps.c (set_sched_group_p): Delete."}, {"sha": "1ec6fc2c57d37ae8d62819babacca87385b19d20", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a62346841c154b7ca97071aa107a690c051e89e5", "patch": "@@ -3224,7 +3224,7 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       break;\n \n     case COND_EXPR:\n-      x = TREE_OPERAND (t, 0);\n+      x = COND_EXPR_COND (t);\n       if (TREE_CODE (TREE_TYPE (x)) != BOOLEAN_TYPE)\n \t{\n \t  error (\"non-boolean used in condition\");"}, {"sha": "c9bde4e33c5238c5f3009764468a213ad642ef85", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=a62346841c154b7ca97071aa107a690c051e89e5", "patch": "@@ -277,7 +277,7 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n \n   gcc_assert (TREE_CODE (stmt) == COND_EXPR);\n \n-  c = TREE_OPERAND (stmt, 0);\n+  c = COND_EXPR_COND (stmt);\n \n   /* Create temp. for condition.  */\n   if (!is_gimple_condexpr (c))"}, {"sha": "e47b3f8ec887c9d2ce1a2699a37c5eb12ceb90c0", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=a62346841c154b7ca97071aa107a690c051e89e5", "patch": "@@ -730,9 +730,9 @@ thread_across_edge (struct dom_walk_data *walk_data, edge e)\n \t    }\n \t  else\n \t    {\n-\t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), cond_code);\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op0;\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1) = op1;\n+\t      TREE_SET_CODE (COND_EXPR_COND (dummy_cond), cond_code);\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 0) = op0;\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 1) = op1;\n \t    }\n \n \t  /* If the conditional folds to an invariant, then we are done,\n@@ -1805,9 +1805,9 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \t    }\n           else\n \t    {\n-\t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), GT_EXPR);\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n+\t      TREE_SET_CODE (COND_EXPR_COND (dummy_cond), GT_EXPR);\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 0) = op;\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 1)\n \t\t= integer_zero_node;\n \t    }\n \t  val = simplify_cond_and_lookup_avail_expr (dummy_cond, NULL, false);\n@@ -1857,18 +1857,18 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \t    }\n \t  else\n \t    {\n-\t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), LE_EXPR);\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n+\t      TREE_SET_CODE (COND_EXPR_COND (dummy_cond), LE_EXPR);\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 0) = op;\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 1)\n \t\t= build_int_cst (type, 0);\n \t    }\n \t  val = simplify_cond_and_lookup_avail_expr (dummy_cond, NULL, false);\n \n \t  if (!val)\n \t    {\n-\t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), GE_EXPR);\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n-\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n+\t      TREE_SET_CODE (COND_EXPR_COND (dummy_cond), GE_EXPR);\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 0) = op;\n+\t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 1)\n \t\t= build_int_cst (type, 0);\n \n \t      val = simplify_cond_and_lookup_avail_expr (dummy_cond,"}, {"sha": "f258e4668f53156854efd3a1b7101e5a855f6007", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62346841c154b7ca97071aa107a690c051e89e5/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=a62346841c154b7ca97071aa107a690c051e89e5", "patch": "@@ -2860,7 +2860,7 @@ vect_transform_loop_bound (loop_vec_info loop_vinfo, tree niters)\n   gcc_assert (bsi_stmt (loop_exit_bsi) == orig_cond_expr);\n \n   /* new loop exit test:  */\n-  lb_type = TREE_TYPE (TREE_OPERAND (TREE_OPERAND (orig_cond_expr, 0), 1));\n+  lb_type = TREE_TYPE (TREE_OPERAND (COND_EXPR_COND (orig_cond_expr), 1));\n   if (!symbol_niters)\n     new_loop_bound = fold_convert (lb_type, \n \t\t\t\t   build_int_cst (unsigned_type_node, \n@@ -2876,7 +2876,8 @@ vect_transform_loop_bound (loop_vec_info loop_vinfo, tree niters)\n \t\t   indx_after_incr, new_loop_bound);\n \n   cond_stmt = build3 (COND_EXPR, TREE_TYPE (orig_cond_expr), cond,\n-\tTREE_OPERAND (orig_cond_expr, 1), TREE_OPERAND (orig_cond_expr, 2));\n+\t\t      COND_EXPR_THEN (orig_cond_expr),\n+\t\t      COND_EXPR_ELSE (orig_cond_expr));\n \n   bsi_insert_before (&loop_exit_bsi, cond_stmt, BSI_SAME_STMT);   \n "}]}