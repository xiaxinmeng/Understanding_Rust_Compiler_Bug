{"sha": "9f714d5eec05594569dd89920353272606622d8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY3MTRkNWVlYzA1NTk0NTY5ZGQ4OTkyMDM1MzI3MjYwNjYyMmQ4YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-20T11:37:41Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T11:37:41Z"}, "message": "BufferedWriter.java, [...]: Fixed javadocs all over, rename arguments to match javadocs, fixed coding style.\n\n2004-04-20  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/BufferedWriter.java,\n\tjava/io/ByteArrayInputStream.java,\n\tjava/io/CharArrayWriter.java,\n\tjava/io/DataInput.java,\n\tjava/io/DataInputStream.java,\n\tjava/io/File.java,\n\tjava/io/FilterInputStream.java,\n\tjava/io/InputStream.java,\n\tjava/io/InputStreamReader.java,\n\tjava/io/ObjectInputStream.java,\n\tjava/io/ObjectStreamClass.java,\n\tjava/io/PipedInputStream.java,\n\tjava/io/PipedReader.java,\n\tjava/io/PushbackInputStream.java,\n\tjava/io/PushbackReader.java,\n\tjava/io/RandomAccessFile.java,\n\tjava/io/SerializablePermission.java,\n\tjava/io/StreamTokenizer.java,\n\tjava/io/StringWriter.java,\n\tjava/io/WriteAbortedException.java,\n\tjava/io/Writer.java:\n\tFixed javadocs all over, rename arguments to match javadocs,\n\tfixed coding style.\n\nFrom-SVN: r80897", "tree": {"sha": "009937b32fd6b3926fccb11ba8049b174994633b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/009937b32fd6b3926fccb11ba8049b174994633b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f714d5eec05594569dd89920353272606622d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f714d5eec05594569dd89920353272606622d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f714d5eec05594569dd89920353272606622d8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f714d5eec05594569dd89920353272606622d8a/comments", "author": null, "committer": null, "parents": [{"sha": "7aebacee26b0b9f43a246e94c91ca99a150700b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aebacee26b0b9f43a246e94c91ca99a150700b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aebacee26b0b9f43a246e94c91ca99a150700b0"}], "stats": {"total": 362, "additions": 193, "deletions": 169}, "files": [{"sha": "db7bf5910a3364e7f7d62fc9ad451226cf15adca", "filename": "libjava/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -1,3 +1,29 @@\n+2004-04-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/BufferedWriter.java,\n+\tjava/io/ByteArrayInputStream.java,\n+\tjava/io/CharArrayWriter.java,\n+\tjava/io/DataInput.java,\n+\tjava/io/DataInputStream.java,\n+\tjava/io/File.java,\n+\tjava/io/FilterInputStream.java,\n+\tjava/io/InputStream.java,\n+\tjava/io/InputStreamReader.java,\n+\tjava/io/ObjectInputStream.java,\n+\tjava/io/ObjectStreamClass.java,\n+\tjava/io/PipedInputStream.java,\n+\tjava/io/PipedReader.java,\n+\tjava/io/PushbackInputStream.java,\n+\tjava/io/PushbackReader.java,\n+\tjava/io/RandomAccessFile.java,\n+\tjava/io/SerializablePermission.java,\n+\tjava/io/StreamTokenizer.java,\n+\tjava/io/StringWriter.java,\n+\tjava/io/WriteAbortedException.java,\n+\tjava/io/Writer.java:\n+\tFixed javadocs all over, rename arguments to match javadocs,\n+\tfixed coding style.\n+\n 2004-04-20  Ingo Proetel  <proetel@aicas.com>\n \n \t* java/awt/FontMetrics.java:"}, {"sha": "87236896afb1c680e8557dcf2d10eb4253b54123", "filename": "libjava/java/io/BufferedWriter.java", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FBufferedWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FBufferedWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedWriter.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -44,18 +44,17 @@\n  */\n \n /**\n-  * This class accumulates chars written in a buffer instead of immediately\n-  * writing the data to the underlying output sink. The chars are instead\n-  * as one large block when the buffer is filled, or when the stream is\n-  * closed or explicitly flushed. This mode operation can provide a more\n-  * efficient mechanism for writing versus doing numerous small unbuffered\n-  * writes.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 25, 1998 \n-  */\n-\n+ * This class accumulates chars written in a buffer instead of immediately\n+ * writing the data to the underlying output sink. The chars are instead\n+ * as one large block when the buffer is filled, or when the stream is\n+ * closed or explicitly flushed. This mode operation can provide a more\n+ * efficient mechanism for writing versus doing numerous small unbuffered\n+ * writes.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey (tromey@cygnus.com)\n+ * @date September 25, 1998 \n+ */\n public class BufferedWriter extends Writer\n {\n   /**\n@@ -90,6 +89,8 @@ public BufferedWriter (Writer ox, int size)\n    * This method flushes any remaining buffered chars then closes the \n    * underlying output stream.  Any further attempts to write to this stream\n    * may throw an exception\n+   *\n+   * @exception IOException If an error occurs.\n    */\n   public void close () throws IOException\n   {\n@@ -138,7 +139,7 @@ public void newLine () throws IOException\n    * is filled as a result of this write request, it will be flushed to the\n    * underlying output stream.\n    *\n-   * @param b The char of data to be written, passed as an int\n+   * @param oneChar The char of data to be written, passed as an int\n    *\n    * @exception IOException If an error occurs\n    */"}, {"sha": "45a09a77b5d77697366a0a679bef7b47ba5ed677", "filename": "libjava/java/io/ByteArrayInputStream.java", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FByteArrayInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FByteArrayInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FByteArrayInputStream.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -83,7 +83,7 @@ public class ByteArrayInputStream extends InputStream\n    * bytes supplied to the reader.  Please use caution in changing the \n    * contents of the buffer while this stream is open.\n    *\n-   * @param buf The byte array buffer this stream will read from.\n+   * @param buffer The byte array buffer this stream will read from.\n    */\n   public ByteArrayInputStream(byte[] buffer)\n   {\n@@ -105,7 +105,7 @@ public ByteArrayInputStream(byte[] buffer)\n    * bytes supplied to the reader.  Please use caution in changing the \n    * contents of the buffer while this stream is open.\n    *\n-   * @param buf The byte array buffer this stream will read from.\n+   * @param buffer The byte array buffer this stream will read from.\n    * @param offset The index into the buffer to start reading bytes from\n    * @param length The number of bytes to read from the buffer\n    */\n@@ -146,12 +146,12 @@ public synchronized int available()\n    * position 0 in the stream.  This is in constrast to some other\n    * stream types where there is no default mark position.\n    *\n-   * @param readlimit The number of bytes this stream must remember.\n+   * @param readLimit The number of bytes this stream must remember.\n    * This parameter is ignored.\n    */\n-  public synchronized void mark(int readAheadLimit)\n+  public synchronized void mark(int readLimit)\n   {\n-    // readAheadLimit is ignored per Java Class Lib. book, p.220.\n+    // readLimit is ignored per Java Class Lib. book, p.220.\n     mark = pos;\n   }\n \n@@ -197,19 +197,19 @@ public synchronized int read()\n    * <p>\n    * This method does not block.\n    *\n-   * @param buf The array into which the bytes read should be stored.\n+   * @param buffer The array into which the bytes read should be stored.\n    * @param offset The offset into the array to start storing bytes\n-   * @param len The requested number of bytes to read\n+   * @param length The requested number of bytes to read\n    *\n    * @return The actual number of bytes read, or -1 if end of stream.\n    */\n-  public synchronized int read(byte[] b, int off, int len)\n+  public synchronized int read(byte[] buffer, int offset, int length)\n   {\n     if (pos >= count)\n       return -1;\n \n-    int numBytes = Math.min(count - pos, len);\n-    System.arraycopy(buf, pos, b, off, numBytes);\n+    int numBytes = Math.min(count - pos, length);\n+    System.arraycopy(buf, pos, buffer, offset, numBytes);\n     pos += numBytes;\n     return numBytes;\n   }\n@@ -234,17 +234,17 @@ public synchronized void reset()\n    * position the stream at the end of the buffer.  The actual number\n    * of bytes skipped is returned.\n    *\n-   * @param num_bytes The requested number of bytes to skip\n+   * @param num The requested number of bytes to skip\n    *\n    * @return The actual number of bytes skipped.\n    */\n-  public synchronized long skip(long n)\n+  public synchronized long skip(long num)\n   {\n     // Even though the var numBytes is a long, in reality it can never\n     // be larger than an int since the result of subtracting 2 positive\n     // ints will always fit in an int.  Since we have to return a long\n     // anyway, numBytes might as well just be a long.\n-    long numBytes = Math.min((long) (count - pos), n < 0 ? 0L : n);\n+    long numBytes = Math.min((long) (count - pos), num < 0 ? 0L : num);\n     pos += numBytes;\n     return numBytes;\n   }"}, {"sha": "106fd9ee2dff8fae00c6de70975288408de7afa1", "filename": "libjava/java/io/CharArrayWriter.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharArrayWriter.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -50,8 +50,8 @@\n   * following two properties:\n   * <p>\n   * <ul>\n-  * <li><xmp>gnu.java.io.CharArrayWriter.initialBufferSize</xmp>\n-  * <li><xmp>gnu.java.io.CharArrayWriter.bufferIncrementSize</xmp>\n+  * <li><xmp>gnu.java.io.CharArrayWriter.initialBufferSize</xmp></li>\n+  * <li><xmp>gnu.java.io.CharArrayWriter.bufferIncrementSize</xmp></li>\n   * </ul>\n   * <p>\n   * There is a constructor that specified the initial buffer size and"}, {"sha": "52cd246110db9f0e6fc2c9c03657848187845f22", "filename": "libjava/java/io/DataInput.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FDataInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FDataInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInput.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -360,7 +360,7 @@\n    * patterns which indicate a two byte character encoding, then they would be\n    * converted to a Java <code>char</code> like so:\n    * <p>\n-   * <code>(char)(((byte1 & 0x1F) << 6) + (byte2 & 0x3F))</code>\n+   * <code>(char)(((byte1 &amp; 0x1F) &lt;&lt; 6) + (byte2 &amp; 0x3F))</code>\n    * <p>\n    * If the first byte has a 1110 as its high order bits, then the\n    * character consists of three bytes.  The bits that make up the character\n@@ -375,19 +375,19 @@\n    * then they would be converted to a Java <code>char</code> like so:\n    *\n    * <code>\n-   * (char)(((byte1 & 0x0F) << 12) + ((byte2 & 0x3F) + (byte3 & 0x3F))\n+   * (char)(((byte1 &amp; 0x0F) &lt;&lt; 12) + ((byte2 &amp; 0x3F) + (byte3 &amp; 0x3F))\n    * </code>\n    *\n    * Note that all characters are encoded in the method that requires the\n    * fewest number of bytes with the exception of the character with the\n-   * value of <code>\\<llll>u0000</code> which is encoded as two bytes.  \n+   * value of <code>\\&lt;llll&gt;u0000</code> which is encoded as two bytes.  \n    * This is a modification of the UTF standard used to prevent C language \n    * style <code>NUL</code> values from appearing in the byte stream.\n    * <p>\n    * This method can read data that was written by an object implementing the\n    * <code>writeUTF()</code> method in <code>DataOutput</code>.\n    * \n-   * @returns The <code>String</code> read\n+   * @return The <code>String</code> read\n    *\n    * @exception EOFException If end of file is reached before reading the \n    * String"}, {"sha": "b33cbe756baafa0fde6df21c236cf34731a7e770", "filename": "libjava/java/io/DataInputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FDataInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FDataInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInputStream.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -277,16 +277,16 @@ public final void readFully (byte[] b) throws IOException\n    * buffer\n    * @exception IOException If any other error occurs\n    */\n-  public final void readFully (byte[] b, int off, int len) throws IOException\n+  public final void readFully (byte[] buf, int offset, int len) throws IOException\n   {\n     while (len > 0)\n       {\n \t// in.read will block until some data is available.\n-\tint numread = in.read (b, off, len);\n+\tint numread = in.read (buf, offset, len);\n \tif (numread < 0)\n \t  throw new EOFException ();\n \tlen -= numread;\n-\toff += numread;\n+\toffset += numread;\n       }\n   }\n "}, {"sha": "53ae529c6fe554e33e416eccd4cb8f6392baf146", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -1,5 +1,6 @@\n /* File.java -- Class representing a file on disk\n-   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -121,7 +122,7 @@ public class File implements Serializable, Comparable\n   {\n     if (Configuration.INIT_LOAD_LIBRARY)\n       {\n-        System.loadLibrary (\"javaio\");\n+        System.loadLibrary(\"javaio\");\n       }\n     \n     init_native();\n@@ -187,7 +188,7 @@ public boolean canWrite()\n    * the path of this <code>File</code> object if an only if that file\n    * does not already exist.\n    * <p>\n-   * A <code>SecurityManager</code>checkWrite</code> check is done prior\n+   * A <code>SecurityManager.checkWrite</code> check is done prior\n    * to performing this action.\n    *\n    * @return <code>true</code> if the file was created, <code>false</code> if\n@@ -224,7 +225,7 @@ public synchronized boolean delete()\n     SecurityManager s = System.getSecurityManager();\n     \n     if (s != null)\n-      s.checkDelete (path);\n+      s.checkDelete(path);\n     \n     return performDelete();\n   }\n@@ -244,17 +245,17 @@ public synchronized boolean delete()\n    * @return <code>true</code> if the two objects are equal, \n    * <code>false</code> otherwise.\n    */\n-  public boolean equals (Object obj)\n+  public boolean equals(Object obj)\n   {\n     if (! (obj instanceof File))\n       return false;\n     \n     File other = (File) obj;\n \n     if (caseSensitive)\n-      return path.equals (other.path);\n+      return path.equals(other.path);\n     else\n-      return path.equalsIgnoreCase (other.path);\n+      return path.equalsIgnoreCase(other.path);\n   }\n \n   /**\n@@ -277,7 +278,7 @@ public boolean exists()\n    *\n    * @param name The path name of the file\n    */\n-  public File (String name)\n+  public File(String name)\n   {\n     path = normalizePath (name);\n   }\n@@ -354,7 +355,7 @@ private String normalizePath(String p)\n    * @param dirPath The path to the directory the file resides in\n    * @param name The name of the file\n    */\n-  public File (String dirPath, String name)\n+  public File(String dirPath, String name)\n   {\n     if (name == null)\n       throw new NullPointerException();\n@@ -381,7 +382,7 @@ public File (String dirPath, String name)\n    * @param directory The directory this file resides in\n    * @param name The name of the file\n    */\n-  public File (File directory, String name)\n+  public File(File directory, String name)\n   {\n     this (directory == null ? null : directory.path, name);\n   }\n@@ -448,7 +449,7 @@ else if (separatorChar == '\\\\'\n    */\n   public File getAbsoluteFile()\n   {\n-    return new File (getAbsolutePath());\n+    return new File(getAbsolutePath());\n   }\n \n   /**\n@@ -479,7 +480,7 @@ public File getAbsoluteFile()\n    */\n   public File getCanonicalFile() throws IOException\n   {\n-    return new File (getCanonicalPath());\n+    return new File(getCanonicalPath());\n   }\n \n   /**\n@@ -591,7 +592,7 @@ else if (last == 0)\n   public File getParentFile()\n   {\n     String parent = getParent();\n-    return parent != null ? new File (parent) : null;\n+    return parent != null ? new File(parent) : null;\n   }\n \n   /**\n@@ -748,7 +749,7 @@ private final native Object[] performList (FilenameFilter filter,\n    * @exception SecurityException If read access is not allowed to the \n    * directory by the <code>SecurityManager</code>\n    */\n-  public String[] list (FilenameFilter filter)\n+  public String[] list(FilenameFilter filter)\n   {\n     checkRead();\n     return (String[]) performList (filter, null, String.class);\n@@ -826,7 +827,7 @@ public File[] listFiles()\n    *\n    * @since 1.2\n    */\n-  public File[] listFiles (FilenameFilter filter)\n+  public File[] listFiles(FilenameFilter filter)\n   {\n     checkRead();\n     return (File[]) performList (filter, null, File.class);\n@@ -856,7 +857,7 @@ public File[] listFiles (FilenameFilter filter)\n    *\n    * @since 1.2\n    */\n-  public File[] listFiles (FileFilter filter)\n+  public File[] listFiles(FileFilter filter)\n   {\n     checkRead();\n     return (File[]) performList (null, filter, File.class);\n@@ -982,8 +983,8 @@ private static synchronized String nextValue()\n    *\n    * @since 1.2\n    */\n-  public static File createTempFile (String prefix, String suffix,\n-\t\t\t\t     File directory)\n+  public static File createTempFile(String prefix, String suffix,\n+\t\t\t\t    File directory)\n     throws IOException\n   {\n     // Grab the system temp directory if necessary\n@@ -1005,7 +1006,7 @@ public static File createTempFile (String prefix, String suffix,\n \n     // Check if prefix is at least 3 characters long\n     if (prefix.length() < 3)\n-      throw new IllegalArgumentException (\"Prefix too short: \" + prefix);\n+      throw new IllegalArgumentException(\"Prefix too short: \" + prefix);\n \n     // Set default value of suffix\n     if (suffix == null)\n@@ -1146,10 +1147,10 @@ public static File[] listRoots()\n    * this operation\n    * @exception IOException If an error occurs\n    */\n-  public static File createTempFile (String prefix, String suffix)\n+  public static File createTempFile(String prefix, String suffix)\n     throws IOException\n   {\n-    return createTempFile (prefix, suffix, null);\n+    return createTempFile(prefix, suffix, null);\n   }\n \n   /**\n@@ -1168,7 +1169,7 @@ public static File createTempFile (String prefix, String suffix)\n    *\n    * @since 1.2\n    */\n-  public int compareTo (File other)\n+  public int compareTo(File other)\n   {\n     if (caseSensitive)\n       return path.compareTo (other.path);\n@@ -1197,9 +1198,9 @@ public int compareTo (File other)\n    *\n    * @since 1.2\n    */\n-  public int compareTo (Object obj)\n+  public int compareTo(Object obj)\n   {\n-    return compareTo ((File) obj);\n+    return compareTo((File) obj);\n   }\n \n   /*\n@@ -1219,7 +1220,7 @@ public int compareTo (Object obj)\n    * @exception SecurityException If write access is not allowed to the \n    * file by the <code>SecurityMananger</code>.\n    */\n-  public synchronized boolean renameTo (File dest)\n+  public synchronized boolean renameTo(File dest)\n   {\n     SecurityManager s = System.getSecurityManager();\n     String sname = getName();\n@@ -1253,7 +1254,7 @@ public synchronized boolean renameTo (File dest)\n    *\n    * @since 1.2\n    */\n-  public boolean setLastModified (long time) \n+  public boolean setLastModified(long time) \n   {\n     if (time < 0)\n       throw new IllegalArgumentException(\"Negative modification time: \" + time);\n@@ -1268,7 +1269,7 @@ private void checkWrite()\n     SecurityManager s = System.getSecurityManager();\n     \n     if (s != null)\n-      s.checkWrite (path);\n+      s.checkWrite(path);\n   }\n \n   private void checkRead()\n@@ -1277,7 +1278,7 @@ private void checkRead()\n     SecurityManager s = System.getSecurityManager();\n     \n     if (s != null)\n-      s.checkRead (path);\n+      s.checkRead(path);\n   }\n \n   /** \n@@ -1299,13 +1300,13 @@ public void deleteOnExit()\n     FileDeleter.add (this);\n   }\n \n-  private void writeObject (ObjectOutputStream oos) throws IOException\n+  private void writeObject(ObjectOutputStream oos) throws IOException\n   {\n     oos.defaultWriteObject();\n-    oos.writeChar (separatorChar);\n+    oos.writeChar(separatorChar);\n   }\n \n-  private void readObject (ObjectInputStream ois)\n+  private void readObject(ObjectInputStream ois)\n     throws ClassNotFoundException, IOException\n   {\n     ois.defaultReadObject();\n@@ -1315,7 +1316,7 @@ private void readObject (ObjectInputStream ois)\n     char oldSeparatorChar = ois.readChar();\n     \n     if (oldSeparatorChar != separatorChar)\n-      path = path.replace (oldSeparatorChar, separatorChar);\n+      path = path.replace(oldSeparatorChar, separatorChar);\n   }\n   \n } // class File"}, {"sha": "c81259bd25b4a36422a2b6d24260be128956dd2b", "filename": "libjava/java/io/FilterInputStream.java", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FFilterInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FFilterInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterInputStream.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -104,7 +104,7 @@ public void mark(int readlimit)\n     */\n   public boolean markSupported()\n   {\n-    return(in.markSupported());\n+    return in.markSupported();\n   }\n \n   /**\n@@ -126,7 +126,7 @@ public void reset() throws IOException\n     */\n   public int available() throws IOException\n   {\n-    return(in.available());\n+    return in.available();\n   }\n \n   /**\n@@ -138,9 +138,9 @@ public int available() throws IOException\n     *\n     * @exception IOException If an error occurs\n     */\n-  public long skip(long num_bytes) throws IOException\n+  public long skip(long numBytes) throws IOException\n   {\n-    return(in.skip(num_bytes));\n+    return in.skip(numBytes);\n   }\n \n   /**\n@@ -152,7 +152,7 @@ public long skip(long num_bytes) throws IOException\n     */\n   public int read() throws IOException\n   {\n-    return(in.read());\n+    return in.read();\n   }\n \n   /**\n@@ -170,7 +170,7 @@ public int read() throws IOException\n     */\n   public int read(byte[] buf) throws IOException\n   {\n-    return(read(buf, 0, buf.length));\n+    return read(buf, 0, buf.length);\n   }\n \n   /**\n@@ -186,7 +186,7 @@ public int read(byte[] buf) throws IOException\n     */\n   public int read(byte[] buf, int offset, int len) throws IOException\n   {\n-    return(in.read(buf, offset, len));\n+    return in.read(buf, offset, len);\n   }\n \n   /**\n@@ -200,6 +200,4 @@ public void close() throws IOException\n   {\n     in.close();\n   }\n-\n-} // class FilterInputStream\n-\n+}"}, {"sha": "610ccf1f1775f6d68618fb345669eee16262938f", "filename": "libjava/java/io/InputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInputStream.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -105,7 +105,7 @@ public void close() throws IOException\n    * @param readLimit The number of bytes that can be read before the\n    *                  mark becomes invalid\n    */\n-  public void mark(int readlimit)\n+  public void mark(int readLimit)\n   {\n     // Do nothing\n   }\n@@ -117,7 +117,7 @@ public void mark(int readlimit)\n    * point.\n    * <p>\n    * This method always returns <code>false</code> in this class, but\n-   * subclasses can override this method to return </code>true</code>\n+   * subclasses can override this method to return <code>true</code>\n    * if they support mark/reset functionality.\n    *\n    * @return <code>true</code> if mark/reset functionality is"}, {"sha": "3ebbb4ec9e417eb094ba7716a41524a623db8a75", "filename": "libjava/java/io/InputStreamReader.java", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FInputStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FInputStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInputStreamReader.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -56,18 +56,18 @@\n  * Here is a list of standard encoding names that may be available:\n  * <p>\n  * <ul>\n- * <li>8859_1 (ISO-8859-1/Latin-1)\n- * <li>8859_2 (ISO-8859-2/Latin-2)\n- * <li>8859_3 (ISO-8859-3/Latin-3)\n- * <li>8859_4 (ISO-8859-4/Latin-4)\n- * <li>8859_5 (ISO-8859-5/Latin-5)\n- * <li>8859_6 (ISO-8859-6/Latin-6)\n- * <li>8859_7 (ISO-8859-7/Latin-7)\n- * <li>8859_8 (ISO-8859-8/Latin-8)\n- * <li>8859_9 (ISO-8859-9/Latin-9)\n- * <li>ASCII (7-bit ASCII)\n- * <li>UTF8 (UCS Transformation Format-8)\n- * <li>More later\n+ * <li>8859_1 (ISO-8859-1/Latin-1)</li>\n+ * <li>8859_2 (ISO-8859-2/Latin-2)</li>\n+ * <li>8859_3 (ISO-8859-3/Latin-3)</li>\n+ * <li>8859_4 (ISO-8859-4/Latin-4)</li>\n+ * <li>8859_5 (ISO-8859-5/Latin-5)</li>\n+ * <li>8859_6 (ISO-8859-6/Latin-6)</li>\n+ * <li>8859_7 (ISO-8859-7/Latin-7)</li>\n+ * <li>8859_8 (ISO-8859-8/Latin-8)</li>\n+ * <li>8859_9 (ISO-8859-9/Latin-9)</li>\n+ * <li>ASCII (7-bit ASCII)</li>\n+ * <li>UTF8 (UCS Transformation Format-8)</li>\n+ * <li>More later</li>\n  * </ul>\n  * <p>\n  * It is recommended that applications do not use \n@@ -170,7 +170,7 @@ public void close() throws IOException\n    * by this object.  If the stream has been closed, this method is allowed\n    * to return <code>null</code>.\n    *\n-   * @param The current encoding name\n+   * @return The current encoding name\n    */\n   public String getEncoding()\n   {\n@@ -296,5 +296,4 @@ private int refill(char[] buf, int offset, int length) throws IOException\n \t  return count;\n       }\n   }\n-} // class InputStreamReader\n-\n+}"}, {"sha": "9747699a562b64604a7ceeec39e8c5add2cd9b8d", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -38,24 +38,20 @@\n \n package java.io;\n \n+import gnu.classpath.Configuration;\n+import gnu.java.io.ObjectIdentityWrapper;\n+\n import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.lang.reflect.Proxy;\n-import java.security.PrivilegedAction;\n-import java.security.AccessController;\n import java.util.Arrays;\n import java.util.Hashtable;\n import java.util.Vector;\n \n \n-import gnu.java.io.ObjectIdentityWrapper;\n-import gnu.java.lang.reflect.TypeSignature;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.InvocationTargetException;\n-\n-import gnu.classpath.Configuration;\n-\n public class ObjectInputStream extends InputStream\n   implements ObjectInput, ObjectStreamConstants\n {"}, {"sha": "ee23f5996b5eb1cfd2811a6421e386cffa66f254", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -104,17 +104,17 @@ static ObjectStreamClass lookupForClassObject(Class cl)\n       }\n   }\n \n-\n   /**\n    * Returns the name of the class that this\n    * <code>ObjectStreamClass</code> represents.\n+   *\n+   * @return the name of the class.\n    */\n   public String getName()\n   {\n     return name;\n   }\n \n-\n   /**\n    * Returns the class that this <code>ObjectStreamClass</code>\n    * represents.  Null could be returned if this\n@@ -129,32 +129,34 @@ public Class forClass()\n     return clazz;\n   }\n \n-\n   /**\n    * Returns the serial version stream-unique identifier for the class\n    * represented by this <code>ObjectStreamClass</code>.  This SUID is\n    * either defined by the class as <code>static final long\n    * serialVersionUID</code> or is calculated as specified in\n    * Javasoft's \"Object Serialization Specification\" XXX: add reference\n+   *\n+   * @return the serial version UID.\n    */\n   public long getSerialVersionUID()\n   {\n     return uid;\n   }\n \n-\n-  // Returns the serializable (non-static and non-transient) Fields\n-  // of the class represented by this ObjectStreamClass.  The Fields\n-  // are sorted by name.\n-  // XXX doc\n+  /**\n+   * Returns the serializable (non-static and non-transient) Fields\n+   * of the class represented by this ObjectStreamClass.  The Fields\n+   * are sorted by name.\n+   *\n+   * @return the fields.\n+   */\n   public ObjectStreamField[] getFields()\n   {\n     ObjectStreamField[] copy = new ObjectStreamField[ fields.length ];\n     System.arraycopy(fields, 0, copy, 0, fields.length);\n     return copy;\n   }\n \n-\n   // XXX doc\n   // Can't do binary search since fields is sorted by name and\n   // primitiveness.\n@@ -166,7 +168,6 @@ public ObjectStreamField getField (String name)\n     return null;\n   }\n \n-\n   /**\n    * Returns a textual representation of this\n    * <code>ObjectStreamClass</code> object including the name of the\n@@ -181,7 +182,6 @@ public String toString()\n     return \"java.io.ObjectStreamClass< \" + name + \", \" + uid + \" >\";\n   }\n \n-\n   // Returns true iff the class that this ObjectStreamClass represents\n   // has the following method:\n   //"}, {"sha": "91fca676fd97be50fb220ac6f79aef852caf7336", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -277,7 +277,7 @@ public int read() throws IOException\n     * @param offset The index into the buffer at which to start writing.\n     * @param len The maximum number of bytes to read.\n     *\n-    * @exception IOException If <code>close()/code> was called on this Piped\n+    * @exception IOException If <code>close()</code> was called on this Piped\n     *                        InputStream.\n     */  \n   public synchronized int read(byte[] buf, int offset, int len)"}, {"sha": "3991ba94e457b67d67658e13f0becded066191cf", "filename": "libjava/java/io/PipedReader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPipedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPipedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedReader.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -256,7 +256,7 @@ public int read() throws IOException\n     * @param offset The index into the buffer at which to start writing.\n     * @param len The maximum number of chars to read.\n     *\n-    * @exception IOException If <code>close()/code> was called on this Piped\n+    * @exception IOException If <code>close()</code> was called on this Piped\n     *                        Reader.\n     */  \n   public int read(char[] buf, int offset, int len)"}, {"sha": "379677d66132a4f86c9929f5e48b197b38c791ef", "filename": "libjava/java/io/PushbackInputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackInputStream.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -263,7 +263,7 @@ public synchronized void unread(byte[] b) throws IOException\n   /**\n    * This method pushed back bytes from the passed in array into the\n    * pushback buffer.  The bytes from <code>b[offset]</code> to\n-   * <cdoe>b[offset + len]</code> are pushed in reverse order so that\n+   * <code>b[offset + len]</code> are pushed in reverse order so that\n    * the next byte read from the stream after this operation will be\n    * <code>b[offset]</code> followed by <code>b[offset + 1]</code>,\n    * etc."}, {"sha": "cc2473a6c343d8f7ce4dcc45300c7cc35ee34e44", "filename": "libjava/java/io/PushbackReader.java", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPushbackReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FPushbackReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackReader.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -266,33 +266,34 @@ public int read() throws IOException\n    * of the chars requested, the remaining chars are read from the \n    * underlying stream.\n    *\n-   * @param buf The array into which the chars read should be stored\n+   * @param buffer The array into which the chars read should be stored\n    * @param offset The offset into the array to start storing chars\n-   * @param len The requested number of chars to read\n+   * @param length The requested number of chars to read\n    *\n    * @return The actual number of chars read, or -1 if end of stream.\n    *\n    * @exception IOException If an error occurs.\n    */\n-  public synchronized int read(char[] b, int offset, int len) throws IOException\n+  public synchronized int read(char[] buffer, int offset, int length)\n+    throws IOException\n   {\n     synchronized (lock)\n       {\n \tif (buf == null)\n           throw new IOException(\"stream closed\");\n \n-\tif (offset < 0 || len < 0 || offset + len > b.length)\n+\tif (offset < 0 || length < 0 || offset + length > buffer.length)\n           throw new ArrayIndexOutOfBoundsException();\n \n-\tint numBytes = Math.min(buf.length - pos, len);\n+\tint numBytes = Math.min(buf.length - pos, length);\n \tif (numBytes > 0)\n \t  {\n-\t    System.arraycopy (buf, pos, b, offset, numBytes);\n+\t    System.arraycopy (buf, pos, buffer, offset, numBytes);\n \t    pos += numBytes;\n \t    return numBytes;\n \t  }\n \n-\treturn super.read(b, offset, len);\n+\treturn super.read(buffer, offset, length);\n       }\n   }\n \n@@ -353,30 +354,30 @@ public synchronized void unread(char[] buf) throws IOException\n    * If the pushback buffer cannot hold all of the requested chars, an\n    * exception is thrown.\n    *\n-   * @param buf The char array to be pushed back\n+   * @param buffer The char array to be pushed back\n    * @param offset The index into the array where the chars to be push start\n-   * @param len The number of chars to be pushed.\n+   * @param length The number of chars to be pushed.\n    *\n    * @exception IOException If the pushback buffer is full\n    */\n-  public synchronized void unread(char[] b, int offset, int len)\n+  public synchronized void unread(char[] buffer, int offset, int length)\n     throws IOException\n   {\n     synchronized (lock)\n       {\n \tif (buf == null)\n           throw new IOException(\"stream closed\");\n-\tif (pos < len)\n+\tif (pos < length)\n \t  throw new IOException(\"Pushback buffer is full\");\n \n \t// Note the order that these chars are being added is the opposite\n \t// of what would be done if they were added to the buffer one at a time.\n \t// See the Java Class Libraries book p. 1397.\n-\tSystem.arraycopy(b, offset, buf, pos - len, len);\n+\tSystem.arraycopy(buffer, offset, buf, pos - length, length);\n \n \t// Don't put this into the arraycopy above, an exception might be thrown\n \t// and in that case we don't want to modify pos.\n-\tpos -= len;\n+\tpos -= length;\n       }\n   }\n }"}, {"sha": "c20549c12df626747daee8787627d80f3c8bf6c8", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -318,12 +318,12 @@ public final byte readByte () throws IOException\n    * significant byte first (i.e., \"big endian\") regardless of the native\n    * host byte ordering. \n    * <p>\n-   * As an example, if <code>byte1</code> and code{byte2</code> represent \n+   * As an example, if <code>byte1</code> and <code>byte2</code> represent \n    * the first\n    * and second byte read from the stream respectively, they will be\n    * transformed to a <code>char</code> in the following manner:\n    * <p>\n-   * <code>(char)(((byte1 & 0xFF) << 8) | (byte2 & 0xFF)</code>\n+   * <code>(char)(((byte1 &amp; 0xFF) &lt;&lt; 8) | (byte2 &amp; 0xFF)</code>\n    * <p>\n    * This method can read a <code>char</code> written by an object \n    * implementing the\n@@ -539,12 +539,12 @@ public final long readLong () throws IOException\n    * significant byte first (i.e., \"big endian\") regardless of the native\n    * host byte ordering. \n    * <p>\n-   * As an example, if <code>byte1</code> and code{byte2</code> \n+   * As an example, if <code>byte1</code> and <code>byte2</code> \n    * represent the first\n    * and second byte read from the stream respectively, they will be\n    * transformed to a <code>short</code> in the following manner:\n    * <p>\n-   * <code>(short)(((byte1 & 0xFF) << 8) | (byte2 & 0xFF)</code>\n+   * <code>(short)(((byte1 &amp; 0xFF) &lt;&lt; 8) | (byte2 &amp; 0xFF)</code>\n    * <p>\n    * The value returned is in the range of -32768 to 32767.\n    * <p>"}, {"sha": "1d2636bc19bc8c9322ab40ce5d360add8e738ea1", "filename": "libjava/java/io/SerializablePermission.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FSerializablePermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FSerializablePermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSerializablePermission.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -48,9 +48,9 @@\n   * There are currently two allowable permission names for this class:\n   * <ul>\n   * <li><code>enableSubclassImplementation</code> - Allows a subclass to\n-  * override the default serialization behavior of objects.\n+  * override the default serialization behavior of objects.</li>\n   * <li><code>enableSubstitution</code> - Allows substitution of one object\n-  * for another during serialization or deserialization.\n+  * for another during serialization or deserialization.</li>\n   * </ul>\n   *\n   * @see java.security.BasicPermission"}, {"sha": "5c777b3723ca3bda1d8934d3971f613dc9a5c5e3", "filename": "libjava/java/io/StreamTokenizer.java", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStreamTokenizer.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -73,12 +73,12 @@\n    * The rules are as follows:\n    * <ul>\n    * <li>For a token consisting of a single ordinary character, this is the \n-   *     value of that character.\n-   * <li>For a quoted string, this is the value of the quote character\n-   * <li>For a word, this is TT_WORD\n-   * <li>For a number, this is TT_NUMBER\n-   * <li>For the end of the line, this is TT_EOL\n-   * <li>For the end of the stream, this is TT_EOF\n+   *     value of that character.</li>\n+   * <li>For a quoted string, this is the value of the quote character</li>\n+   * <li>For a word, this is TT_WORD</li>\n+   * <li>For a number, this is TT_NUMBER</li>\n+   * <li>For the end of the line, this is TT_EOL</li>\n+   * <li>For the end of the stream, this is TT_EOF</li>\n    * </ul>\n    */\n   public int ttype = TT_NONE;\n@@ -141,13 +141,13 @@ public StreamTokenizer(InputStream is)\n    * following manner:\n    * <ul>\n    * <li>The values 'A' through 'Z', 'a' through 'z' and 0xA0 through 0xFF\n-   *     are initialized as alphabetic\n-   * <li>The values 0x00 through 0x20 are initialized as whitespace\n-   * <li>The values '\\'' and '\"' are initialized as quote characters\n-   * <li>'/' is a comment character\n-   * <li>Numbers will be parsed\n-   * <li>EOL is not treated as significant\n-   * <li>C  and C++ (//) comments are not recognized\n+   *     are initialized as alphabetic</li>\n+   * <li>The values 0x00 through 0x20 are initialized as whitespace</li>\n+   * <li>The values '\\'' and '\"' are initialized as quote characters</li>\n+   * <li>'/' is a comment character</li>\n+   * <li>Numbers will be parsed</li>\n+   * <li>EOL is not treated as significant</li>\n+   * <li>C  and C++ (//) comments are not recognized</li>\n    * </ul>\n    *\n    * @param in The <code>Reader</code> to read chars from\n@@ -251,13 +251,13 @@ private boolean isComment(int ch)\n    * returns it.  It also can set <code>sval</code> or <code>nval</code>\n    * as described below.  The parsing strategy is as follows:\n    * <ul>\n-   * <li>Skip any whitespace characters.\n+   * <li>Skip any whitespace characters.</li>\n    * <li>If a numeric character is encountered, attempt to parse a numeric\n    * value.  Leading '-' characters indicate a numeric only if followed by\n    * another non-'-' numeric.  The value of the numeric token is terminated\n    * by either the first non-numeric encountered, or the second occurrence of\n    * '-' or '.'.  The token type returned is TT_NUMBER and <code>nval</code>\n-   * is set to the value parsed.\n+   * is set to the value parsed.</li>\n    * <li>If an alphabetic character is parsed, all subsequent characters\n    * are read until the first non-alphabetic or non-numeric character is\n    * encountered.  The token type returned is TT_WORD and the value parsed\n@@ -266,10 +266,10 @@ private boolean isComment(int ch)\n    * sequence terminates a word only if EOL signficance has been turned on.\n    * The start of a comment also terminates a word.  Any character with a \n    * non-alphabetic and non-numeric attribute (such as white space, a quote,\n-   * or a commet) are treated as non-alphabetic and terminate the word.\n+   * or a commet) are treated as non-alphabetic and terminate the word.</li>\n    * <li>If a comment character is parsed, then all remaining characters on\n    * the current line are skipped and another token is parsed.  Any EOL or\n-   * EOF's encountered are not discarded, but rather terminate the comment.\n+   * EOF's encountered are not discarded, but rather terminate the comment.</li>\n    * <li>If a quote character is parsed, then all characters up to the \n    * second occurrence of the same quote character are parsed into a\n    * <code>String</code>.  This <code>String</code> is stored as\n@@ -280,18 +280,18 @@ private boolean isComment(int ch)\n    * (carriage return), \\\" (double quote), \\' (single quote), \\\\\n    * (backslash), \\XXX (octal esacpe)) are converted to the appropriate\n    * char values.  Invalid esacape sequences are left in untranslated.  \n-   * Unicode characters like ('\\ u0000') are not recognized. \n+   * Unicode characters like ('\\ u0000') are not recognized. </li>\n    * <li>If the C++ comment sequence \"//\" is encountered, and the parser\n    * is configured to handle that sequence, then the remainder of the line\n    * is skipped and another token is read exactly as if a character with\n-   * the comment attribute was encountered.\n+   * the comment attribute was encountered.</li>\n    * <li>If the C comment sequence \"/*\" is encountered, and the parser\n    * is configured to handle that sequence, then all characters up to and\n    * including the comment terminator sequence are discarded and another\n-   * token is parsed.\n+   * token is parsed.</li>\n    * <li>If all cases above are not met, then the character is an ordinary\n    * character that is parsed as a token by itself.  The char encountered\n-   * is returned as the token type.\n+   * is returned as the token type.</li>\n    * </ul>\n    *\n    * @return The token type\n@@ -635,15 +635,15 @@ public void slashStarComments(boolean flag)\n    * 'x' is determined as follows.\n    * <p>\n    * <ul>\n-   * <li>If no token has been read, then 'x' is \"NOTHING\" and 'n' is 0\n-   * <li>If <code>ttype</code> is TT_EOF, then 'x' is \"EOF\"\n-   * <li>If <code>ttype</code> is TT_EOL, then 'x' is \"EOL\"\n-   * <li>If <code>ttype</code> is TT_WORD, then 'x' is <code>sval</code>\n+   * <li>If no token has been read, then 'x' is \"NOTHING\" and 'n' is 0</li>\n+   * <li>If <code>ttype</code> is TT_EOF, then 'x' is \"EOF\"</li>\n+   * <li>If <code>ttype</code> is TT_EOL, then 'x' is \"EOL\"</li>\n+   * <li>If <code>ttype</code> is TT_WORD, then 'x' is <code>sval</code></li>\n    * <li>If <code>ttype</code> is TT_NUMBER, then 'x' is \"n=strnval\" where\n-   * 'strnval' is <code>String.valueOf(nval)</code>.\n+   * 'strnval' is <code>String.valueOf(nval)</code>.</li>\n    * <li>If <code>ttype</code> is a quote character, then 'x' is\n-   * <code>sval</code>\n-   * <li>For all other cases, 'x' is <code>ttype</code>\n+   * <code>sval</code></li>\n+   * <li>For all other cases, 'x' is <code>ttype</code></li>\n    * </ul>\n    */\n   public String toString()"}, {"sha": "c5aab8d157c0f76ce64c4bfc4c79636544ae919a", "filename": "libjava/java/io/StringWriter.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FStringWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FStringWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStringWriter.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -60,6 +60,8 @@ public class StringWriter extends Writer\n   /**\n    * This method closes the stream.  The contents of the internal buffer\n    * can still be retrieved, but future writes are not guaranteed to work.\n+   *\n+   * @exception IOException If an error orrurs.\n    */\n   public void close () throws IOException\n   {"}, {"sha": "7b683854d3d463fa7ca96e5e084263a450856110", "filename": "libjava/java/io/WriteAbortedException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FWriteAbortedException.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -81,7 +81,7 @@ public WriteAbortedException(String msg, Exception detail)\n   /**\n    * This method returns a message indicating what went wrong, in this\n    * format:\n-   * <code>super.getMessage() + (detail == null ? \"\" : \"; \" + detail)<code>.\n+   * <code>super.getMessage() + (detail == null ? \"\" : \"; \" + detail)</code>.\n    *\n    * @return the chained message\n    */"}, {"sha": "60939c8ce99a5ca831c0576a3daba1ae4dd275b7", "filename": "libjava/java/io/Writer.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f714d5eec05594569dd89920353272606622d8a/libjava%2Fjava%2Fio%2FWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FWriter.java?ref=9f714d5eec05594569dd89920353272606622d8a", "patch": "@@ -75,8 +75,8 @@ protected Writer()\n    * This method initializes a <code>Writer</code> that will synchronize\n    * on the specified <code>Object</code>.\n    *\n-   * @param obj The <code>Object</code> to use for synchronizing critical\n-   *            sections\n+   * @param lock The <code>Object</code> to use for synchronizing critical\n+   *             sections\n    */\n   protected Writer(Object lock)\n   {\n@@ -157,7 +157,7 @@ public abstract void write(char[] buf, int offset, int len)\n    *\n    * @param str The <code>String</code> whose chars are to be written.\n    *\n-   * @param IOException If an error occurs\n+   * @exception IOException If an error occurs\n    */\n   public void write(String str) throws IOException\n   {"}]}