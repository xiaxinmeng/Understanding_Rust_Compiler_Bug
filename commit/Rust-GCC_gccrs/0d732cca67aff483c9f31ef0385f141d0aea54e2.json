{"sha": "0d732cca67aff483c9f31ef0385f141d0aea54e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ3MzJjY2E2N2FmZjQ4M2M5ZjMxZWYwMzg1ZjE0MWQwYWVhNTRlMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-06-02T19:12:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-06-02T19:12:08Z"}, "message": "re PR rtl-optimization/61094 (-O3 insn Internal compiler error in copyprop_hardreg_forward_1, at regcprop.c:775)\n\n\tPR rtl-optimization/61094\n\t* ree.c (combine_reaching_defs): Do not reextend an insn if it\n\twas marked as do_no_reextend.  If a copy is needed to eliminate\n\tan extension, then mark it as do_not_reextend.\n\n\tPR rtl-optimization/61094\n\t* g++.dg/pr61094: New test.\n\nFrom-SVN: r211142", "tree": {"sha": "2bb3966093d33c4ba030af9dc89d13ceacc97766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb3966093d33c4ba030af9dc89d13ceacc97766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d732cca67aff483c9f31ef0385f141d0aea54e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d732cca67aff483c9f31ef0385f141d0aea54e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d732cca67aff483c9f31ef0385f141d0aea54e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d732cca67aff483c9f31ef0385f141d0aea54e2/comments", "author": null, "committer": null, "parents": [{"sha": "a2adad8b0f7d079085a8771987ca0ff2a58958a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2adad8b0f7d079085a8771987ca0ff2a58958a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2adad8b0f7d079085a8771987ca0ff2a58958a7"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "acefcc0b400f62e79f1e4a82e929c37a67b156dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d732cca67aff483c9f31ef0385f141d0aea54e2", "patch": "@@ -1,3 +1,10 @@\n+2014-06-02  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/61094\n+\t* ree.c (combine_reaching_defs): Do not reextend an insn if it\n+\twas marked as do_no_reextend.  If a copy is needed to eliminate\n+\tan extension, then mark it as do_not_reextend.\n+\n 2014-06-02  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.md (set_fpcr): Drop ISB after FPCR write."}, {"sha": "ade413e8bede5cf7e48be6c43d0fefb7b4c6d8ad", "filename": "gcc/ree.c", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=0d732cca67aff483c9f31ef0385f141d0aea54e2", "patch": "@@ -507,6 +507,8 @@ struct ATTRIBUTE_PACKED ext_modified\n   /* Kind of modification of the insn.  */\n   ENUM_BITFIELD(ext_modified_kind) kind : 2;\n \n+  unsigned int do_not_reextend : 1;\n+\n   /* True if the insn is scheduled to be deleted.  */\n   unsigned int deleted : 1;\n };\n@@ -712,8 +714,10 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n      register than the source operand, then additional restrictions\n      are needed.  Note we have to handle cases where we have nested\n      extensions in the source operand.  */\n-  if (REGNO (SET_DEST (PATTERN (cand->insn)))\n-      != REGNO (get_extended_src_reg (SET_SRC (PATTERN (cand->insn)))))\n+  bool copy_needed\n+    = (REGNO (SET_DEST (PATTERN (cand->insn)))\n+       != REGNO (get_extended_src_reg (SET_SRC (PATTERN (cand->insn)))));\n+  if (copy_needed)\n     {\n       /* In theory we could handle more than one reaching def, it\n \t just makes the code to update the insn stream more complex.  */\n@@ -722,7 +726,7 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \n       /* We require the candidate not already be modified.  It may,\n \t for example have been changed from a (sign_extend (reg))\n-\t into (zero_extend (sign_extend (reg)).\n+\t into (zero_extend (sign_extend (reg))).\n \n \t Handling that case shouldn't be terribly difficult, but the code\n \t here and the code to emit copies would need auditing.  Until\n@@ -777,6 +781,31 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \t  || reg_set_between_p (SET_DEST (PATTERN (cand->insn)),\n \t\t\t\tdef_insn, cand->insn))\n \treturn false;\n+\n+      /* We must be able to copy between the two registers.   Generate,\n+\t recognize and verify constraints of the copy.  Also fail if this\n+\t generated more than one insn.\n+\n+         This generates garbage since we throw away the insn when we're\n+\t done, only to recreate it later if this test was successful.  */\n+      start_sequence ();\n+      rtx sub_rtx = *get_sub_rtx (def_insn);\n+      rtx pat = PATTERN (cand->insn);\n+      rtx new_dst = gen_rtx_REG (GET_MODE (SET_DEST (sub_rtx)),\n+                                 REGNO (XEXP (SET_SRC (pat), 0)));\n+      rtx new_src = gen_rtx_REG (GET_MODE (SET_DEST (sub_rtx)),\n+                                 REGNO (SET_DEST (pat)));\n+      emit_move_insn (new_dst, new_src);\n+\n+      rtx insn = get_insns();\n+      end_sequence ();\n+      if (NEXT_INSN (insn))\n+\treturn false;\n+      if (recog_memoized (insn) == -1)\n+\treturn false;\n+      extract_insn (insn);\n+      if (!constrain_operands (1))\n+\treturn false;\n     }\n \n \n@@ -843,11 +872,15 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n             fprintf (dump_file, \"All merges were successful.\\n\");\n \n \t  FOR_EACH_VEC_ELT (state->modified_list, i, def_insn)\n-\t    if (state->modified[INSN_UID (def_insn)].kind == EXT_MODIFIED_NONE)\n-\t      state->modified[INSN_UID (def_insn)].kind\n-\t\t= (cand->code == ZERO_EXTEND\n-\t\t   ? EXT_MODIFIED_ZEXT : EXT_MODIFIED_SEXT);\n+\t    {\n+\t      ext_modified *modified = &state->modified[INSN_UID (def_insn)];\n+\t      if (modified->kind == EXT_MODIFIED_NONE)\n+\t\tmodified->kind = (cand->code == ZERO_EXTEND ? EXT_MODIFIED_ZEXT\n+\t\t\t\t\t\t            : EXT_MODIFIED_SEXT);\n \n+\t      if (copy_needed)\n+\t\tmodified->do_not_reextend = 1;\n+\t    }\n           return true;\n         }\n       else"}, {"sha": "590969e82cc19d6cd7f425759cbea806f036ec7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d732cca67aff483c9f31ef0385f141d0aea54e2", "patch": "@@ -1,3 +1,8 @@\n+2014-06-02  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/61094\n+\t* g++.dg/pr61094: New test.\n+\n 2014-06-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/xop-rotate1-vector.c (dg-options): Add -mno-avx2."}, {"sha": "35adc256c218cdff89047ae7855ef47c370df12b", "filename": "gcc/testsuite/g++.dg/pr61094.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr61094.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d732cca67aff483c9f31ef0385f141d0aea54e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr61094.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr61094.C?ref=0d732cca67aff483c9f31ef0385f141d0aea54e2", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" }  */\n+\n+template <typename> struct A {\n+  unsigned _width, _height, _depth, _spectrum;\n+  template <typename t> A(t p1) {\n+    int a = p1.size();\n+    if (a) {\n+      _width = p1._width;\n+      _depth = _height = _spectrum = p1._spectrum;\n+    }\n+  }\n+  long size() { return (long)_width * _height * _depth * _spectrum; }\n+};\n+\n+int d;\n+void fn1(void *);\n+A<int> *fn2();\n+void fn3() {\n+  int b;\n+  for (;;) {\n+    A<char> c(*fn2());\n+    fn1(&c);\n+    if (d || !b)\n+      throw;\n+  }\n+}\n+\n+\n+\n+"}]}