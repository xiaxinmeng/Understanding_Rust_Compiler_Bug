{"sha": "597fdf45ede583ca1e88ce9f2923673b1238cdf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk3ZmRmNDVlZGU1ODNjYTFlODhjZTlmMjkyMzY3M2IxMjM4Y2RmOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-22T17:00:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-22T17:00:56Z"}, "message": "range_int_cst_p handling in extract_range_from_binary_expr_1\n\nextract_range_from_binary_expr_1 had:\n\n      if (range_int_cst_p (&vr0)\n          && range_int_cst_p (&vr1)\n          && TYPE_OVERFLOW_WRAPS (expr_type))\n        ...\n      ...\n      extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n\nbut extract_range_from_multiplicative_op_1 also requires range_int_cst_p.\nI think we should bail out if either range isn't a constant.\n\nThis might only be theoretical with current sources, but it's needed\nonce polynomial constants are added.\n\n2017-09-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vrp.c (extract_range_from_multiplicative_op_1): Assert\n\tfor VR_RANGE only; don't allow VR_ANTI_RANGE.\n\t(extract_range_from_binary_expr_1): Don't call\n\textract_range_from_multiplicative_op_1 if !range_int_cst_p.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253102", "tree": {"sha": "4a572a40b3cced5108697792f74cbbf93337f428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a572a40b3cced5108697792f74cbbf93337f428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/597fdf45ede583ca1e88ce9f2923673b1238cdf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597fdf45ede583ca1e88ce9f2923673b1238cdf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597fdf45ede583ca1e88ce9f2923673b1238cdf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597fdf45ede583ca1e88ce9f2923673b1238cdf8/comments", "author": null, "committer": null, "parents": [{"sha": "f702e7d43f2aec71640d0db7ecf1543ba75f37c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f702e7d43f2aec71640d0db7ecf1543ba75f37c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f702e7d43f2aec71640d0db7ecf1543ba75f37c3"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "fdb7221848ce5027a6fe49bc4dde52f11d1bb403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597fdf45ede583ca1e88ce9f2923673b1238cdf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597fdf45ede583ca1e88ce9f2923673b1238cdf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=597fdf45ede583ca1e88ce9f2923673b1238cdf8", "patch": "@@ -1,3 +1,12 @@\n+2017-09-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vrp.c (extract_range_from_multiplicative_op_1): Assert\n+\tfor VR_RANGE only; don't allow VR_ANTI_RANGE.\n+\t(extract_range_from_binary_expr_1): Don't call\n+\textract_range_from_multiplicative_op_1 if !range_int_cst_p.\n+\n 2017-09-22  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "3dba35627893e7af44109c3388c89f4997d0e7f0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597fdf45ede583ca1e88ce9f2923673b1238cdf8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597fdf45ede583ca1e88ce9f2923673b1238cdf8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=597fdf45ede583ca1e88ce9f2923673b1238cdf8", "patch": "@@ -1851,8 +1851,7 @@ extract_range_from_multiplicative_op_1 (value_range *vr,\n \t      || code == ROUND_DIV_EXPR\n \t      || code == RSHIFT_EXPR\n \t      || code == LSHIFT_EXPR);\n-  gcc_assert ((vr0->type == VR_RANGE\n-\t       || (code == MULT_EXPR && vr0->type == VR_ANTI_RANGE))\n+  gcc_assert (vr0->type == VR_RANGE\n \t      && vr0->type == vr1->type);\n \n   rtype = vr0->type;\n@@ -2462,9 +2461,14 @@ extract_range_from_binary_expr_1 (value_range *vr,\n       signop sign = TYPE_SIGN (expr_type);\n       unsigned int prec = TYPE_PRECISION (expr_type);\n \n-      if (range_int_cst_p (&vr0)\n-\t  && range_int_cst_p (&vr1)\n-\t  && TYPE_OVERFLOW_WRAPS (expr_type))\n+      if (!range_int_cst_p (&vr0)\n+\t  || !range_int_cst_p (&vr1))\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+\n+      if (TYPE_OVERFLOW_WRAPS (expr_type))\n \t{\n \t  typedef FIXED_WIDE_INT (WIDE_INT_MAX_PRECISION * 2) vrp_int;\n \t  typedef generic_wide_int"}]}