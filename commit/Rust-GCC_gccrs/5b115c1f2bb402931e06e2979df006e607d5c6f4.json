{"sha": "5b115c1f2bb402931e06e2979df006e607d5c6f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxMTVjMWYyYmI0MDI5MzFlMDZlMjk3OWRmMDA2ZTYwN2Q1YzZmNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-05-17T09:32:01Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-05-17T09:32:01Z"}, "message": "Add tree-ssa-strlen optimization.\n\nFrom-SVN: r199006", "tree": {"sha": "37045e2b3b3747a97aa02b2f03011ed1fee86477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37045e2b3b3747a97aa02b2f03011ed1fee86477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b115c1f2bb402931e06e2979df006e607d5c6f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b115c1f2bb402931e06e2979df006e607d5c6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b115c1f2bb402931e06e2979df006e607d5c6f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b115c1f2bb402931e06e2979df006e607d5c6f4/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68119618f7a027c1c0205319fc9d315169e6d60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68119618f7a027c1c0205319fc9d315169e6d60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68119618f7a027c1c0205319fc9d315169e6d60f"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "7bb4e28051892120d81ab61f50e41c40713af73c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b115c1f2bb402931e06e2979df006e607d5c6f4", "patch": "@@ -1,3 +1,12 @@\n+2013-05-17  Marek Polacek  <polacek@redhat.com>\n+\n+\t* tree-ssa-strlen.c (handle_char_store): Don't invalidate\n+\tcached length when doing non-zero store of storing '\\0' to\n+\t'\\0'.\n+\n+\t* gcc.dg/strlenopt-25.c: New test.\n+\t* gcc.dg/strlenopt-26.c: Likewise.\n+\n 2013-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-patterns.c (vect_recog_rotate_pattern): For"}, {"sha": "4862156546eb59fe62f3edb11180573a9dad4f0b", "filename": "gcc/testsuite/gcc.dg/strlenopt-25.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-25.c?ref=5b115c1f2bb402931e06e2979df006e607d5c6f4", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-strlen\" } */\n+\n+#include \"strlenopt.h\"\n+\n+int\n+main ()\n+{\n+  char p[] = \"foobar\";\n+  int len, len2;\n+  len = strlen (p);\n+  p[0] = 'O';\n+  len2 = strlen (p);\n+  return len - len2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */"}, {"sha": "089355e498b1c19c0efd2c150a8b5eddb68c3d35", "filename": "gcc/testsuite/gcc.dg/strlenopt-26.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c?ref=5b115c1f2bb402931e06e2979df006e607d5c6f4", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-strlen\" } */\n+\n+#include \"strlenopt.h\"\n+\n+__attribute__((noinline, noclone)) size_t\n+fn1 (char *p, const char *r)\n+{\n+  size_t len1 = strlen (r);\n+  char *q = strchr (p, '\\0');\n+  *q = '\\0';\n+  return len1 - strlen (r); // This strlen should be optimized into len1.\n+}\n+\n+int\n+main (void)\n+{\n+  char p[] = \"foobar\";\n+  const char *volatile q = \"xyzzy\";\n+  fn1 (p, q);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */"}, {"sha": "c0f9ccd564284d2bfb1f33802d18e2f54eb5aaf5", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b115c1f2bb402931e06e2979df006e607d5c6f4/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=5b115c1f2bb402931e06e2979df006e607d5c6f4", "patch": "@@ -1694,7 +1694,8 @@ handle_char_store (gimple_stmt_iterator *gsi)\n \t      else\n \t\t{\n \t\t  si->writable = true;\n-\t\t  si->dont_invalidate = true;\n+\t\t  gsi_next (gsi);\n+\t\t  return false;\n \t\t}\n \t    }\n \t  else\n@@ -1717,6 +1718,33 @@ handle_char_store (gimple_stmt_iterator *gsi)\n \t    si->endptr = ssaname;\n \t  si->dont_invalidate = true;\n \t}\n+      /* If si->length is non-zero constant, we aren't overwriting '\\0',\n+\t and if we aren't storing '\\0', we know that the length of the\n+\t string and any other zero terminated string in memory remains\n+\t the same.  In that case we move to the next gimple statement and\n+\t return to signal the caller that it shouldn't invalidate anything.  \n+\n+\t This is benefical for cases like:\n+\n+\t char p[20];\n+\t void foo (char *q)\n+\t {\n+\t   strcpy (p, \"foobar\");\n+\t   size_t len = strlen (p);        // This can be optimized into 6\n+\t   size_t len2 = strlen (q);        // This has to be computed\n+\t   p[0] = 'X';\n+\t   size_t len3 = strlen (p);        // This can be optimized into 6\n+\t   size_t len4 = strlen (q);        // This can be optimized into len2\n+\t   bar (len, len2, len3, len4);\n+        }\n+\t*/ \n+      else if (si != NULL && si->length != NULL_TREE\n+\t       && TREE_CODE (si->length) == INTEGER_CST\n+\t       && integer_nonzerop (gimple_assign_rhs1 (stmt)))\n+\t{\n+\t  gsi_next (gsi);\n+\t  return false;\n+\t}\n     }\n   else if (idx == 0 && initializer_zerop (gimple_assign_rhs1 (stmt)))\n     {"}]}