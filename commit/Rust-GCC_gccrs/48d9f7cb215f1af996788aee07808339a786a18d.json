{"sha": "48d9f7cb215f1af996788aee07808339a786a18d", "node_id": "C_kwDOANBUbNoAKDQ4ZDlmN2NiMjE1ZjFhZjk5Njc4OGFlZTA3ODA4MzM5YTc4NmExOGQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-07T16:54:37Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-03T09:29:53Z"}, "message": "ada: Another small adjustment to special resolution of membership test\n\nThis goes back to the original implementation but keeps the special size\ntest with universal_integer to cope with its limited range.\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Membership_Op): Adjust again latest change.", "tree": {"sha": "0fcb4d1ed4e0205f961decb0fd607415a2f259d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fcb4d1ed4e0205f961decb0fd607415a2f259d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48d9f7cb215f1af996788aee07808339a786a18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d9f7cb215f1af996788aee07808339a786a18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d9f7cb215f1af996788aee07808339a786a18d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d9f7cb215f1af996788aee07808339a786a18d/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83d52e6de23f65cefde615183cdef1eb94d18b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d52e6de23f65cefde615183cdef1eb94d18b1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d52e6de23f65cefde615183cdef1eb94d18b1f"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "348d272a399d9a8499289ff5a3defacd184b81cd", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d9f7cb215f1af996788aee07808339a786a18d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d9f7cb215f1af996788aee07808339a786a18d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=48d9f7cb215f1af996788aee07808339a786a18d", "patch": "@@ -10105,11 +10105,11 @@ package body Sem_Res is\n       then\n          T := Etype (R);\n \n-      --  If the type of the left operand is universal_integer and that of the\n-      --  right operand is smaller, then we do not resolve the operands to the\n-      --  tested type but to universal_integer instead. If not conforming to\n-      --  the letter, it's conforming to the spirit of the specification of\n-      --  membership tests, which are typically used to guard an operation and\n+      --  If the left operand is of a universal numeric type and the right\n+      --  operand is not, we do not resolve the operands to the tested type\n+      --  but to the universal type instead. If not conforming to the letter,\n+      --  it's conforming to the spirit of the specification of membership\n+      --  tests, which are typically used to guard a specific operation and\n       --  ought not to fail a check in doing so. Without this, in the case of\n \n       --    type Small_Length is range 1 .. 16;\n@@ -10127,9 +10127,14 @@ package body Sem_Res is\n       --  for example the large values of Long_Long_Long_Unsigned.\n \n       elsif not Is_Overloaded (L)\n-        and then Etype (L) = Universal_Integer\n+        and then Is_Universal_Numeric_Type (Etype (L))\n         and then (Is_Overloaded (R)\n-                   or else RM_Size (Etype (R)) < RM_Size (Universal_Integer))\n+                   or else\n+                     (not Is_Universal_Numeric_Type (Etype (R))\n+                       and then\n+                         (not Is_Integer_Type (Etype (R))\n+                           or else\n+                          RM_Size (Etype (R)) < RM_Size (Universal_Integer))))\n       then\n          T := Etype (L);\n "}]}