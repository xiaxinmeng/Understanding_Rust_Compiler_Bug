{"sha": "f5850e7da93a6b1e4bec3e8740d08e985433eef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4NTBlN2RhOTNhNmIxZTRiZWMzZTg3NDBkMDhlOTg1NDMzZWVmMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-02T12:01:47Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-02T14:03:26Z"}, "message": "ipa: do not DECL_IS_MALLOC for void fns\n\ngcc/ChangeLog:\n\n\tPR ipa/98075\n\t* cgraph.c (cgraph_node::dump): Dump decl_is_malloc flag.\n\t* ipa-pure-const.c (propagate_malloc): Do not set malloc\n\tattribute for void functions.\n\ngcc/testsuite/ChangeLog:\n\n\tPR ipa/98075\n\t* g++.dg/ipa/pr98075.C: New test.", "tree": {"sha": "6c704bfc4da1dd95e4417d6735fcae892cefd321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c704bfc4da1dd95e4417d6735fcae892cefd321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5850e7da93a6b1e4bec3e8740d08e985433eef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5850e7da93a6b1e4bec3e8740d08e985433eef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5850e7da93a6b1e4bec3e8740d08e985433eef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5850e7da93a6b1e4bec3e8740d08e985433eef3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "694d4a6d0c466d0fbc97920a9c6641a7b349ca35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694d4a6d0c466d0fbc97920a9c6641a7b349ca35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694d4a6d0c466d0fbc97920a9c6641a7b349ca35"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "cb59a5a71fc0d18687697739a4f157f159c063b2", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5850e7da93a6b1e4bec3e8740d08e985433eef3/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5850e7da93a6b1e4bec3e8740d08e985433eef3/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=f5850e7da93a6b1e4bec3e8740d08e985433eef3", "patch": "@@ -2190,6 +2190,8 @@ cgraph_node::dump (FILE *f)\n     fprintf (f, \" optimize_size\");\n   if (parallelized_function)\n     fprintf (f, \" parallelized_function\");\n+  if (DECL_IS_MALLOC (decl))\n+    fprintf (f, \" decl_is_malloc\");\n   if (DECL_IS_OPERATOR_NEW_P (decl))\n     fprintf (f, \" %soperator_new\",\n \t     DECL_IS_REPLACEABLE_OPERATOR (decl) ? \"replaceable_\" : \"\");"}, {"sha": "4c47eec8509dead50e0cf3ba264e74408d42a1ee", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5850e7da93a6b1e4bec3e8740d08e985433eef3/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5850e7da93a6b1e4bec3e8740d08e985433eef3/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=f5850e7da93a6b1e4bec3e8740d08e985433eef3", "patch": "@@ -1973,7 +1973,8 @@ propagate_malloc (void)\n \tfunct_state l = funct_state_summaries->get (node);\n \tif (!node->alias\n \t    && l->malloc_state == STATE_MALLOC\n-\t    && !node->inlined_to)\n+\t    && !node->inlined_to\n+\t    && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (node->decl))))\n \t  {\n \t    if (dump_file && (dump_flags & TDF_DETAILS))\n \t      fprintf (dump_file, \"Function %s found to be malloc\\n\","}, {"sha": "0c4219d1ff39a460c2509ca0022c2686f6f1aba3", "filename": "gcc/testsuite/g++.dg/ipa/pr98075.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5850e7da93a6b1e4bec3e8740d08e985433eef3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr98075.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5850e7da93a6b1e4bec3e8740d08e985433eef3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr98075.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr98075.C?ref=f5850e7da93a6b1e4bec3e8740d08e985433eef3", "patch": "@@ -0,0 +1,30 @@\n+/* PR ipa/98075 */\n+/* { dg-do compile } */                                                                        \n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+template <typename BS>\n+class xg {\n+public:\n+  BS *\n+  fw ()\n+  {\n+    return static_cast<BS *> (operator new (sizeof (BS)));\n+  }\n+};\n+\n+class zp : xg<int> {\n+public:\n+  __attribute__ ((always_inline)) zp ()\n+  {\n+    hy = xg<int>::fw ();\n+  }\n+\n+private:\n+  int *hy;\n+};\n+\n+void\n+e5 ()\n+{\n+  zp ix;\n+}"}]}