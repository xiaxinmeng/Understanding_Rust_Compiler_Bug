{"sha": "0e7754560f694b4e702baebdc481f6b0e82f7b14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3NzU0NTYwZjY5NGI0ZTcwMmJhZWJkYzQ4MWY2YjBlODJmN2IxNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-14T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-14T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "b13c4988e6ca8f6173a15b7a26fdbf88931e0b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b13c4988e6ca8f6173a15b7a26fdbf88931e0b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7754560f694b4e702baebdc481f6b0e82f7b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7754560f694b4e702baebdc481f6b0e82f7b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7754560f694b4e702baebdc481f6b0e82f7b14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7754560f694b4e702baebdc481f6b0e82f7b14/comments", "author": null, "committer": null, "parents": [{"sha": "8695bf78dad1a42636775843ca832a2f4dba4da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8695bf78dad1a42636775843ca832a2f4dba4da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8695bf78dad1a42636775843ca832a2f4dba4da3"}], "stats": {"total": 363, "additions": 362, "deletions": 1}, "files": [{"sha": "ebeb27414ff583874a01a1ac57802e47ee1e0a07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7754560f694b4e702baebdc481f6b0e82f7b14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7754560f694b4e702baebdc481f6b0e82f7b14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e7754560f694b4e702baebdc481f6b0e82f7b14", "patch": "@@ -1,3 +1,189 @@\n+2021-07-13  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* combine.c (combine_simplify_rtx): Add vec_select -> subreg\n+\tsimplification.\n+\t* config/aarch64/aarch64.md (*zero_extend<SHORT:mode><GPI:mode>2_aarch64):\n+\tAdd Neon to general purpose register case for zero-extend\n+\tpattern.\n+\t* config/arm/vfp.md (*arm_movsi_vfp): Remove \"*\" from *t -> r\n+\tcase to prevent some cases opting to go through memory.\n+\t* cse.c (fold_rtx): Add vec_select -> subreg simplification.\n+\t* rtl.c (rtvec_series_p): Define predicate to determine\n+\twhether a vector contains a linear series of integers.\n+\t* rtl.h (rtvec_series_p): Define.\n+\t* rtlanal.c (vec_series_lowpart_p): Define predicate to\n+\tdetermine if a vector selection is equivalent to the low part\n+\tof the vector.\n+\t* rtlanal.h (vec_series_lowpart_p): Define.\n+\t* simplify-rtx.c (simplify_context::simplify_binary_operation_1):\n+\tAdd vec_select -> subreg simplification.\n+\n+2021-07-13  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_testz_si128, _mm_testc_si128,\n+\t_mm_testnzc_si128, _mm_test_all_ones, _mm_test_all_zeros,\n+\t_mm_test_mix_ones_zeros): New.\n+\n+2021-07-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_could_trap_p_1):  Make S argument a\n+\t\"const gimple*\".  Preserve constness in call to\n+\tgimple_asm_volatile_p.\n+\t(gimple_could_trap_p): Make S argument a \"const gimple*\".\n+\t* gimple.h (gimple_could_trap_p_1, gimple_could_trap_p):\n+\tUpdate function prototypes.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_reusable_accumulator): New structure.\n+\t(_loop_vec_info::main_loop_edge): New field.\n+\t(_loop_vec_info::skip_main_loop_edge): Likewise.\n+\t(_loop_vec_info::skip_this_loop_edge): Likewise.\n+\t(_loop_vec_info::reusable_accumulators): Likewise.\n+\t(_stmt_vec_info::reduc_scalar_results): Likewise.\n+\t(_stmt_vec_info::reused_accumulator): Likewise.\n+\t(vect_get_main_loop_result): Declare.\n+\t* tree-vectorizer.c (vec_info::new_stmt_vec_info): Initialize\n+\treduc_scalar_inputs.\n+\t(vec_info::free_stmt_vec_info): Free reduc_scalar_inputs.\n+\t* tree-vect-loop-manip.c (vect_get_main_loop_result): New function.\n+\t(vect_do_peeling): Fill an epilogue loop's main_loop_edge,\n+\tskip_main_loop_edge and skip_this_loop_edge fields.\n+\t* tree-vect-loop.c (INCLUDE_ALGORITHM): Define.\n+\t(vect_emit_reduction_init_stmts): New function.\n+\t(get_initial_def_for_reduction): Use it.\n+\t(get_initial_defs_for_reduction): Likewise.  Change the vinfo\n+\tparameter to a loop_vec_info.\n+\t(vect_create_epilog_for_reduction): Store the scalar results\n+\tin the reduc_info.  If an epilogue loop is reusing an accumulator\n+\tfrom the main loop, and if the epilogue loop can also be skipped,\n+\ttry to place the reduction code in the join block.  Record\n+\taccumulators that could potentially be reused by epilogue loops.\n+\t(vect_transform_cycle_phi): When vectorizing epilogue loops,\n+\ttry to reuse accumulators from the main loop.  Record the initial\n+\tvalue in reduc_info for non-SLP reductions too.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Remove\n+\tadjustment handling.  Take the neutral value as an argument,\n+\tin place of the code argument.\n+\t(vect_transform_cycle_phi): Update accordingly.  Handle the\n+\tinitial values of cond reductions separately from code reductions.\n+\tChoose the adjustment here rather than in\n+\tget_initial_def_for_reduction.  Sink the splat of vec_initial_def.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (neutral_op_for_slp_reduction): Replace with...\n+\t(neutral_op_for_reduction): ...this, providing a more general\n+\tinterface.\n+\t(vect_create_epilog_for_reduction): Update accordingly.\n+\t(vectorizable_reduction): Likewise.\n+\t(vect_transform_cycle_phi): Likewise.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Take the\n+\treduc_info instead of the original stmt_vec_info.\n+\t(vect_transform_cycle_phi): Update accordingly.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (get_initial_defs_for_reduction): Take the\n+\treduc_info as an additional parameter.\n+\t(vect_transform_cycle_phi): Update accordingly.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h: Include tree-ssa-operands.h.\n+\t(vect_phi_initial_value): New function.\n+\t* tree-vect-loop.c (neutral_op_for_slp_reduction): Use it.\n+\t(get_initial_defs_for_reduction, info_for_reduction): Likewise.\n+\t(vect_create_epilog_for_reduction, vectorizable_reduction): Likewise.\n+\t(vect_transform_cycle_phi, vectorizable_induction): Likewise.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Convert\n+\tthe phi results to vectype after creating them.  Remove later\n+\tconversion code that thus becomes redundant.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Replace\n+\tthe new_phis vector with a reduc_inputs vector.  Combine handling\n+\tof reduction chains and ncopies > 1.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Truncate\n+\tscalar_results to group_size elements after reducing down from\n+\tN*group_size elements.  Construct an array_slice of the live-out\n+\tstmts and assert that there is one stmt per scalar result.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Remove\n+\tnested_in_vect_loop and use double_reduc everywhere.  Remove dead\n+\tassignment to \"loop\".\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.c (vectorized_internal_fn_supported_p): Handle\n+\tvector types first.  For scalar types, consider both the preferred\n+\tvector mode and the alternative vector modes.\n+\t* optabs-query.c (can_vec_mask_load_store_p): Use the same\n+\tstructure as above, in particular using related_vector_mode\n+\tfor modes provided by autovectorize_vector_modes.\n+\n+2021-07-13  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101419\n+\t* tree-pass.h (PROP_objsz): Define.\n+\t(make_pass_early_object_sizes): Declare.\n+\t* passes.def (pass_all_early_optimizations): Rename pass_object_sizes\n+\tthere to pass_early_object_sizes, drop parameter.\n+\t(pass_all_optimizations): Move pass_object_sizes right after pass_ccp,\n+\tdrop parameter, move pass_post_ipa_warn right after that.\n+\t* tree-object-size.c (pass_object_sizes::execute): Rename to...\n+\t(object_sizes_execute): ... this.  Add insert_min_max_p argument.\n+\t(pass_data_object_sizes): Move after object_sizes_execute.\n+\t(pass_object_sizes): Likewise.  In execute method call\n+\tobject_sizes_execute, drop set_pass_param method and insert_min_max_p\n+\tnon-static data member and its initializer in the ctor.\n+\t(pass_data_early_object_sizes, pass_early_object_sizes,\n+\tmake_pass_early_object_sizes): New.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Use\n+\t(cfun->curr_properties & PROP_objsz) instead of cfun->after_inlining.\n+\n+2021-07-13  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/101275\n+\t* config/riscv/constraints.md (\"S\"): Update description and remove\n+\t@internal.\n+\t* doc/md.texi (Machine Constraints): Document the 'S' constraints\n+\tfor RISC-V.\n+\n+2021-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert:\n+\t2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_slp_region): Show the number of\n+\tSLP graph entries in the optimization message.\n+\n+2021-07-13  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.md (xxspltiw_v4sf): Change local variable\n+\tvalue to to long.\n+\t* config/rs6000/rs6000-protos.h (rs6000_const_f32_to_i32): Change\n+\treturn type to long.\n+\t* config/rs6000/rs6000.c (rs6000_const_f32_to_i32): Change return\n+\ttype to long.\n+\n 2021-07-12  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-fold.cc (fold_using_range::range_of_builtin_ubsan_call):"}, {"sha": "4b4dbab796b41a6c2374abb9f5b0a0189ed03e43", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7754560f694b4e702baebdc481f6b0e82f7b14/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7754560f694b4e702baebdc481f6b0e82f7b14/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0e7754560f694b4e702baebdc481f6b0e82f7b14", "patch": "@@ -1 +1 @@\n-20210713\n+20210714"}, {"sha": "0ed2e934e14a288ec8a9734c1ee2497f30eac76d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7754560f694b4e702baebdc481f6b0e82f7b14/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7754560f694b4e702baebdc481f6b0e82f7b14/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e7754560f694b4e702baebdc481f6b0e82f7b14", "patch": "@@ -1,3 +1,160 @@\n+2021-07-13  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/extract_zero_extend.c: Remove dump scan\n+\tfor RTL pattern match.\n+\t* gcc.target/aarch64/narrow_high_combine.c: Add new tests.\n+\t* gcc.target/aarch64/simd/vmulx_laneq_f64_1.c: Update\n+\tscan-assembler regex to look for a scalar register instead of\n+\tlane 0 of a vector.\n+\t* gcc.target/aarch64/simd/vmulxd_laneq_f64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmulxs_lane_f32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmulxs_laneq_f32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlalh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlals_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlslh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsls_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmullh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmullh_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulls_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulls_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/dup_lane_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/live_1.c: Update scan-assembler regex\n+\tcases to look for 'b' and 'h' registers instead of 'w'.\n+\t* gcc.target/arm/crypto-vsha1cq_u32.c: Update scan-assembler\n+\tregex to reflect lane 0 vector extractions being simplified\n+\tto scalar register moves.\n+\t* gcc.target/arm/crypto-vsha1h_u32.c: Likewise.\n+\t* gcc.target/arm/crypto-vsha1mq_u32.c: Likewise.\n+\t* gcc.target/arm/crypto-vsha1pq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f16.c: Extract\n+\tlane 1 as the moves for lane 0 now get optimized away.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u8.c: Likewise.\n+\n+2021-07-13  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-ptest-1.c: Copy from\n+\tgcc/testsuite/gcc.target/i386.\n+\n+2021-07-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/93781\n+\t* gcc.dg/tree-ssa/pr93781-1.c: Check that call is removed.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/reduc_9.c: New test.\n+\t* gcc.target/aarch64/sve/reduc_9_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_10_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_11.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_11_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_12.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_12_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_13.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_13_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_14.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_14_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_15.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_15_run.c: Likewise.\n+\n+2021-07-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_arith_6.c: New test.\n+\n+2021-07-13  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101419\n+\t* gcc.dg/builtin-object-size-10.c: Pass -fdump-tree-early_objsz-details\n+\tinstead of -fdump-tree-objsz1-details in dg-options and adjust names\n+\tof dump file in scan-tree-dump.\n+\t* gcc.dg/pr101419.c: New test.\n+\n+2021-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert:\n+\t2021-07-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/vect/slp-pr87105.cc: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr54400.c: Likewise.\n+\n+2021-07-13  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR testsuite/100166\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-bb-slp-9a-pr63175.c: Update\n+\tinsn counts to account for power10 prefixed loads and stores.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-char.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-double.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-float.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-int.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-longlong.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-short.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-char.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-double.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-float.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-int.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-longlong.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-short.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_xl-char.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_xl-double.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_xl-float.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_xl-int.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_xl-longlong.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-load-vec_xl-short.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-splat-floatdouble.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-splat-longlong.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-builtin_vec_xst-char.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-builtin_vec_xst-double.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-builtin_vec_xst-float.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-builtin_vec_xst-int.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-builtin_vec_xst-longlong.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-builtin_vec_xst-short.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-char.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-double.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-float.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-int.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-longlong.c:\n+\tLikewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_vsx_st-short.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-char.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-double.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-float.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-int.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-longlong.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-store-vec_xst-short.c: Likewise.\n+\t* gcc.target/powerpc/lvsl-lvsr.c: Likewise.\n+\t* gcc.target/powerpc/pr86731-fwrapv-longlong.c: Likewise.\n+\n+2021-07-13  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-splati-runnable.c: Run test with -O2\n+\toptimization.  Do not check what XXSPLTIDP generates if the value\n+\tis undefined.\n+\n 2021-07-12  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/79501"}, {"sha": "beaba0fb75c080bc1d706ff37dc1fd662eda6c87", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7754560f694b4e702baebdc481f6b0e82f7b14/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7754560f694b4e702baebdc481f6b0e82f7b14/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=0e7754560f694b4e702baebdc481f6b0e82f7b14", "patch": "@@ -1,3 +1,10 @@\n+2021-07-13  Jakub Jelinek  <jakub@redhat.com>\n+\t    Florian Weimer  <fweimer@redhat.com>\n+\n+\t* config/linux/sem.h: Don't include limits.h.\n+\t(SEM_WAIT): Define to -__INT_MAX__ - 1 instead of INT_MIN.\n+\t* config/linux/affinity.c: Include limits.h.\n+\n 2021-07-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/94366"}, {"sha": "f00ea64569aed76321e5b5dcf8f41650cb29a785", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7754560f694b4e702baebdc481f6b0e82f7b14/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7754560f694b4e702baebdc481f6b0e82f7b14/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e7754560f694b4e702baebdc481f6b0e82f7b14", "patch": "@@ -1,3 +1,14 @@\n+2021-07-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/101361\n+\t* include/std/string_view (ends_with): Use traits_type::compare\n+\tdirectly.\n+\n+2021-07-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/string_view: Only include <bits/ranges_base.h>\n+\tonce, and only for C++20 and later.\n+\n 2021-07-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101411"}]}