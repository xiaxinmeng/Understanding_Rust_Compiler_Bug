{"sha": "34442f32a2407deff70df24c62713044748caf84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0NDJmMzJhMjQwN2RlZmY3MGRmMjRjNjI3MTMwNDQ3NDhjYWY4NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-06-15T18:59:15Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-15T18:59:15Z"}, "message": "BufferedOutputStream.java: Re-merged with Classpath.\n\n\t* java/io/BufferedOutputStream.java: Re-merged with Classpath.\n\t* java/io/CharConversionException.java: Likewise.\n\t* java/io/EOFException.java: Likewise.\n\t* java/io/FileNotFoundException.java: Likewise.\n\t* java/io/IOException.java: Likewise.\n\t* java/io/InterruptedIOException.java: Likewise.\n\t* java/io/InvalidClassException.java: Likewise.\n\t* java/io/InvalidObjectException.java: Likewise.\n\t* java/io/NotActiveException.java: Likewise.\n\t* java/io/NotSerializableException.java: Likewise.\n\t* java/io/ObjectStreamException.java: Likewise.\n\t* java/io/ObjectStreamConstants.java: Likewise.\n\t* java/io/OptionalDataException.java: Likewise.\n\t* java/io/PipedInputStream.java: Likewise.\n\t* java/io/PushbackInputStream.java: Likewise.\n\t* java/io/StreamCorruptedException.java: Likewise.\n\t* java/io/SyncFailedException.java: Likewise.\n\t* java/io/UTFDataFormatException.java: Likewise.\n\t* java/io/UnsupportedEncodingException.java: Likewise.\n\t* java/io/WriteAbortedException.java: Likewise.\n\nFrom-SVN: r54655", "tree": {"sha": "1552fa58fe7792b5a7327cb8881602dd3ea5a4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1552fa58fe7792b5a7327cb8881602dd3ea5a4aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34442f32a2407deff70df24c62713044748caf84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34442f32a2407deff70df24c62713044748caf84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34442f32a2407deff70df24c62713044748caf84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34442f32a2407deff70df24c62713044748caf84/comments", "author": null, "committer": null, "parents": [{"sha": "945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945dabcd7ac1a6b7aedb28b8e192aec12c601a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945dabcd7ac1a6b7aedb28b8e192aec12c601a85"}], "stats": {"total": 1329, "additions": 609, "deletions": 720}, "files": [{"sha": "a6b89c1f63f74ee0bc4d7607f29e4d7b2219dbb2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,3 +1,26 @@\n+2002-06-15  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/BufferedOutputStream.java: Re-merged with Classpath.\n+\t* java/io/CharConversionException.java: Likewise.\n+\t* java/io/EOFException.java: Likewise.\n+\t* java/io/FileNotFoundException.java: Likewise.\n+\t* java/io/IOException.java: Likewise.\n+\t* java/io/InterruptedIOException.java: Likewise.\n+\t* java/io/InvalidClassException.java: Likewise.\n+\t* java/io/InvalidObjectException.java: Likewise.\n+\t* java/io/NotActiveException.java: Likewise.\n+\t* java/io/NotSerializableException.java: Likewise.\n+\t* java/io/ObjectStreamException.java: Likewise.\n+\t* java/io/ObjectStreamConstants.java: Likewise.\n+\t* java/io/OptionalDataException.java: Likewise.\n+\t* java/io/PipedInputStream.java: Likewise.\n+\t* java/io/PushbackInputStream.java: Likewise.\n+\t* java/io/StreamCorruptedException.java: Likewise.\n+\t* java/io/SyncFailedException.java: Likewise.\n+\t* java/io/UTFDataFormatException.java: Likewise.\n+\t* java/io/UnsupportedEncodingException.java: Likewise.\n+\t* java/io/WriteAbortedException.java: Likewise.\n+\n 2002-06-15  Nathanael Nerode  <neroden@twcny.rr.com>\n \n \t* java/text/ChoiceFormat.java: Update comments from Classpath."}, {"sha": "2cbdd4a16879a63ba2c5d1b6dd83ba0b13c1eb1e", "filename": "libjava/java/io/BufferedOutputStream.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FBufferedOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FBufferedOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedOutputStream.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -140,6 +140,7 @@ public class BufferedOutputStream extends FilterOutputStream\n \n   out.write(buf, 0, count);\n   count = 0;\n+  out.flush();\n }\n \n /*************************************************************************/"}, {"sha": "0cb83d2d0205efa3cbe2fa25a0057ec7ad744b1c", "filename": "libjava/java/io/CharConversionException.java", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FCharConversionException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FCharConversionException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharConversionException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n /* CharConversionException.java -- Character conversion exceptions\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,49 +38,36 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Complete to 1.1.\n- */\n-\n /**\n-  * This exception is thrown to indicate that a problem occurred with\n-  * an attempted character conversion.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 25, 1998\n-  */\n-public class CharConversionException extends IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown to indicate that a problem occurred with\n+ * an attempted character conversion.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new CharConversionException without a descriptive error message\n-  */\n-public\n-CharConversionException()\n+public class CharConversionException extends IOException\n {\n-  super();\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -8680016352018427031L;\n \n-/**\n-  * Create a new CharConversionException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-CharConversionException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public CharConversionException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public CharConversionException(String message)\n+  {\n+    super(message);\n+  }\n } // class CharConversionException\n-"}, {"sha": "d129cd692499dbe217aeed6bf588461f5195978e", "filename": "libjava/java/io/EOFException.java", "status": "modified", "additions": 33, "deletions": 47, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FEOFException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FEOFException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FEOFException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* EOFException.java -- Unexpected end of file exception\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* EOFException.java -- unexpected end of file exception\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,53 +38,39 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Complete to 1.1.\n- */\n-\n /**\n-  * This exception is thrown when the end of the file or stream was \n-  * encountered unexpectedly.  This is not the normal way that a normal\n-  * EOF condition is reported.  Normally a special value such as -1 is\n-  * returned.  However, certain types of streams expecting certain data\n-  * in a certain format might reach EOF before reading their expected\n-  * data pattern and thus throw this exception.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 24, 1998\n-  */\n-public class EOFException extends IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when the end of the file or stream was \n+ * encountered unexpectedly.  This is not the normal way that an EOF\n+ * condition is reported; such as a special value like -1 being returned.\n+ *  However, certain types of streams expecting certain data in a certain\n+ * format might reach EOF before reading their expected data pattern and\n+ * thus throw this exception.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new EOFException without a descriptive error message\n-  */\n-public\n-EOFException()\n+public class EOFException extends IOException\n {\n-  super();\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 6433858223774886977L;\n \n-/**\n-  * Create a new EOFException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-EOFException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public EOFException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public EOFException(String message)\n+  {\n+    super(message);\n+  }\n } // class EOFException\n-"}, {"sha": "7877aba150da8858e47734af6027b89b65d65127", "filename": "libjava/java/io/FileNotFoundException.java", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FFileNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FFileNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileNotFoundException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* FileNotFoundException.java -- The requested file could not be found\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* FileNotFoundException.java -- the requested file could not be found\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,49 +38,36 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Complete to 1.1.\n- */\n-\n /**\n-  * This exception is thrown when an attempt is made to access a file that\n-  * does not exist.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 24, 1998\n-  */\n-public class FileNotFoundException extends IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when an attempt is made to access a file that\n+ * does not exist, or is inaccessible for some other reason (such as writing\n+ * a read-only file).\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new FileNotFoundException without a descriptive error message\n-  */\n-public\n-FileNotFoundException()\n+public class FileNotFoundException extends IOException\n {\n-  super();\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = -897856973823710492L;\n \n-/**\n-  * Create a new FileNotFoundException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-FileNotFoundException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public FileNotFoundException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public FileNotFoundException(String message)\n+  {\n+    super(message);\n+  }\n } // class FileNotFoundException\n-"}, {"sha": "8baf593c9c2d9afcdd16424824e4d41b9a33c21a", "filename": "libjava/java/io/IOException.java", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FIOException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FIOException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FIOException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n /* IOException.java -- Generic input/output exception\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,51 +38,37 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Complete to 1.1.\n- */\n-\n /**\n   * This exception is thrown to indicate an I/O problem of some sort\n   * occurred.  Since this is a fairly generic exception, often a subclass\n   * of IOException will actually be thrown in order to provide a more\n   * detailed indication of what happened.\n   *\n-  * @version 0.0\n-  *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 24, 1998\n+  * @status updated to 1.4\n   */\n public class IOException extends Exception\n {\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 7818375828146090155L;\n \n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Create a new IOException without a descriptive error message\n-  */\n-public\n-IOException()\n-{\n-  super();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Create a new IOException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-IOException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public IOException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public IOException(String message)\n+  {\n+    super(message);\n+  }\n } // class IOException\n-"}, {"sha": "321c2697b437ec93e7ea2d6b9fc511e75d7a57bb", "filename": "libjava/java/io/InterruptedIOException.java", "status": "modified", "additions": 50, "deletions": 71, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FInterruptedIOException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FInterruptedIOException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInterruptedIOException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* InterruptedIOException.java -- An I/O operation was interrupted.\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* InterruptedIOException.java -- an I/O operation was interrupted\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,78 +38,57 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Complete to 1.1.\n- */\n-\n /**\n-  * This exception is thrown when a in process I/O operation is \n-  * interrupted for some reason.  The field bytesTransferred will contain\n-  * the number of bytes that were read/written prior to the interruption.\n+  * This exception is thrown when a in process I/O operation is interrupted\n+  * for some reason.  The field bytesTransferred will contain the number of\n+  * bytes that were read/written prior to the interruption.\n   *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Aaron M. Renn <arenn@urbanophile.com>\n   * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 24, 1998\n+  * @see Thread#interrupt()\n+  * @status updated to 1.4\n   */\n public class InterruptedIOException extends IOException\n {\n-\n-private static final long serialVersionUID = 4020568460727500567L;\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * The number of bytes read/written prior to the interruption\n-  */\n-public int bytesTransferred;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Create a new InterruptedIOException without a descriptive error message\n-  */\n-public\n-InterruptedIOException()\n-{\n-  super();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Create a new InterruptedIOException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-InterruptedIOException(String message)\n-{\n-  super(message);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Create a new InterruptedIOException with a descriptive error message \n-  * String.  Also sets the value of the bytesTransferred field.\n-  * \n-  * @param message The descriptive error message\n-  * @param bytesTransferred The number of bytes tranferred before the interruption\n-  */\n-InterruptedIOException(String message, int bytesTransferred)\n-{\n-  super(message);\n-  this.bytesTransferred = bytesTransferred;\n-}\n-\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 4020568460727500567L;\n+\n+  /**\n+   * The number of bytes read/written prior to the interruption.\n+   *\n+   * @serial count of bytes successfully transferred\n+   */\n+  public int bytesTransferred;\n+\n+  /**\n+   * Create an extends without a descriptive error message.\n+   */\n+  public InterruptedIOException()\n+  {\n+  }\n+\n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public InterruptedIOException(String message)\n+  {\n+    super(message);\n+  }\n+\n+  /**\n+   * Create an exception with a descriptive error message and count of\n+   * bytes transferred.\n+   *\n+   * @param message the descriptive error message\n+   * @param bytesTransferred number of bytes tranferred before interruption\n+   */\n+  InterruptedIOException(String message, int bytesTransferred)\n+  {\n+    super(message);\n+    this.bytesTransferred = bytesTransferred;\n+  }\n } // class InterruptedIOException\n-"}, {"sha": "a98a22b91619df4414db4db2c357100ac07ce28d", "filename": "libjava/java/io/InvalidClassException.java", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FInvalidClassException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FInvalidClassException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInvalidClassException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* InvalidClassException.java -- An I/O operation was interrupted.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* InvalidClassException.java -- deserializing a class failed\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,60 +39,73 @@\n package java.io;\n \n /**\n-  * This exception is thrown when there is some sort of problem with a\n-  * class during a serialization operation.  This could be that the\n-  * versions don't match, that there are unknown datatypes in the class\n-  * or that the class doesn't have a default no-arg constructor.\n-  * <p>\n-  * The field <code>classname</code> will contain the name of the\n-  * class that caused the problem if known.  The getMessage() method\n-  * for this exception will always include the name of that class\n-  * if known.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This exception is thrown when there is some sort of problem with a\n+ * class during a serialization operation.  This could be:<br><ul>\n+ * <li>the serial version of the class doesn't match</li>\n+ * <li>the class contains unknown datatypes</li>\n+ * <li>the class does not have an accessible no-arg constructor</li>\n+ * </ul>.\n+ *\n+ * <p>The field <code>classname</code> will contain the name of the\n+ * class that caused the problem if known.  The getMessage() method\n+ * for this exception will always include the name of that class\n+ * if known.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n public class InvalidClassException extends ObjectStreamException\n {\n   /**\n-    * The name of the class which encountered the error.\n-    */\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -4333316296251054416L;\n+\n+  /**\n+   * The name of the class which encountered the error.\n+   *\n+   * @serial the classname causing the error\n+   */\n   public String classname;\n \n   /**\n-    * Create a new InvalidClassException with a descriptive error message String\n-    *\n-    * @param message The descriptive error message\n-    */\n+   * Create an exception with a descriptive error message, but a null\n+   * classname.\n+   *\n+   * @param message the descriptive error message\n+   */\n   public InvalidClassException(String message)\n   {\n     super(message);\n   }\n \n   /**\n-    * Create a new InvalidClassException with a descriptive error message \n-    * String, and the name of the class that caused the problem.\n-    * \n-    * @param classname The number of bytes tranferred before the interruption\n-    * @param message The descriptive error message\n-    */\n+   * Create an exception with a descriptive error message, and the name of\n+   * the class that caused the problem.\n+   *\n+   * @param classname the name of the faulty class\n+   * @param message the descriptive error message\n+   */\n   public InvalidClassException(String classname, String message)\n   {\n     super(message);\n     this.classname = classname;\n   }\n \n   /**\n-    * Returns the descriptive error message for this exception.  It will\n-    * include the class name that caused the problem if known.  This method\n-    * overrides Throwable.getMessage()\n-    *\n-    * @return A descriptive error message\n-    */\n+   * Returns the descriptive error message for this exception. It will\n+   * include the class name that caused the problem if known, in the format:\n+   * <code>[classname][; ][super.getMessage()]</code>.\n+   *\n+   * @return A descriptive error message, may be null\n+   */\n   public String getMessage()\n   {\n-    return super.getMessage() + (classname == null ? \"\" : \": \" + classname);\n+    String msg = super.getMessage();\n+    if (msg == null)\n+      return classname;\n+    return (classname == null ? \"\" : classname + \"; \") + msg;\n   }\n }\n "}, {"sha": "c7846a53952f9f8f5d1ca9a40ac726808d202000", "filename": "libjava/java/io/InvalidObjectException.java", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FInvalidObjectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FInvalidObjectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInvalidObjectException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* InvalidObjectException.java -- An I/O operation was interrupted.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* InvalidObjectException.java -- deserialization failed verification\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,30 +39,28 @@\n package java.io;\n \n /**\n-  * This exception is thrown when an object fails a validation test\n-  * during serialization.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class InvalidObjectException extends ObjectStreamException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when an object fails a validation test\n+ * during serialization.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new InvalidObjectException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-InvalidObjectException(String message)\n+public class InvalidObjectException extends ObjectStreamException\n {\n-  super(message);\n-}\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 3233174318281839583L;\n \n+  /**\n+   * Create an exception with a descriptive error message String. This should\n+   * be the cause of the verification failure.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public InvalidObjectException(String message)\n+  {\n+    super(message);\n+  }\n } // class InvalidObjectException\n-"}, {"sha": "22c7e63d88855a8cfaac1a09d9746cd8586594d0", "filename": "libjava/java/io/NotActiveException.java", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FNotActiveException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FNotActiveException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FNotActiveException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* NotActiveException.java -- Unexpected end of file exception\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* NotActiveException.java -- thrown when serialization is not active\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,41 +39,34 @@\n package java.io;\n \n /**\n-  * This exception is thrown when a problem occurs due to the fact that\n-  * serialization is not active.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class NotActiveException extends ObjectStreamException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when a problem occurs due to the fact that\n+ * serialization is not active.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new NotActiveException without a descriptive error message\n-  */\n-public\n-NotActiveException()\n+public class NotActiveException extends ObjectStreamException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -3893467273049808895L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Create a new NotActiveException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-NotActiveException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public NotActiveException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public NotActiveException(String message)\n+  {\n+    super(message);\n+  }\n } // class NotActiveException\n-"}, {"sha": "fbafd3dd555d2e6821806961da941422ddf6f4a0", "filename": "libjava/java/io/NotSerializableException.java", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FNotSerializableException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FNotSerializableException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FNotSerializableException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* NotSerializableException.java -- Unexpected end of file exception\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* NotSerializableException.java -- a Serializable class that isn't\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,42 +39,36 @@\n package java.io;\n \n /**\n-  * This exception is thrown when a class may not be serialized.  The\n-  * descriptive message will consist of the name of the class in question.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class NotSerializableException extends ObjectStreamException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when a class implements Serializable because\n+ * of a superclass, but should not be serialized.  The descriptive message\n+ * will consist of the name of the class in question.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new NotSerializableException without a descriptive error message\n-  */\n-public\n-NotSerializableException()\n+public class NotSerializableException extends ObjectStreamException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 2906642554793891381L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Create a new NotSerializableException with a descriptive error message String\n-  * This should be the name of the class that cannot be serialized.\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-NotSerializableException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public NotSerializableException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message, which should\n+   * be the name of the class.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public NotSerializableException(String message)\n+  {\n+    super(message);\n+  }\n } // class NotSerializableException\n-"}, {"sha": "111a0f3fa26673cfdf9a47e3b60e35e749acd5da", "filename": "libjava/java/io/ObjectStreamConstants.java", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FObjectStreamConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FObjectStreamConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamConstants.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -54,18 +54,20 @@\n   final static short STREAM_MAGIC = (short)0xaced;\n   final static short STREAM_VERSION = 5;\n \n-  final static byte TC_NULL = (byte)112;\n-  final static byte TC_REFERENCE = (byte)113;\n-  final static byte TC_CLASSDESC = (byte)114;\n-  final static byte TC_OBJECT = (byte)115;\n-  final static byte TC_STRING = (byte)116;\n-  final static byte TC_ARRAY = (byte)117;\n-  final static byte TC_CLASS = (byte)118;\n-  final static byte TC_BLOCKDATA = (byte)119;\n-  final static byte TC_ENDBLOCKDATA = (byte)120;\n-  final static byte TC_RESET = (byte)121;\n-  final static byte TC_BLOCKDATALONG = (byte)122;\n-  final static byte TC_EXCEPTION = (byte)123;\n+  final static byte TC_NULL = (byte)112;            //0x70\n+  final static byte TC_REFERENCE = (byte)113;       //0x71\n+  final static byte TC_CLASSDESC = (byte)114;       //0x72\n+  final static byte TC_OBJECT = (byte)115;          //0x73\n+  final static byte TC_STRING = (byte)116;          //0x74\n+  final static byte TC_ARRAY = (byte)117;           //0x75\n+  final static byte TC_CLASS = (byte)118;           //0x76\n+  final static byte TC_BLOCKDATA = (byte)119;       //0x77\n+  final static byte TC_ENDBLOCKDATA = (byte)120;    //0x78\n+  final static byte TC_RESET = (byte)121;           //0x79\n+  final static byte TC_BLOCKDATALONG = (byte)122;   //0x7A\n+  final static byte TC_EXCEPTION = (byte)123;       //0x7B\n+  final static byte TC_LONGSTRING = (byte)124;      //0x7C\n+  final static byte TC_PROXYCLASSDESC = (byte)125;  //0x7D\n \n   final static byte TC_BASE = TC_NULL;\n   final static byte TC_MAX = TC_EXCEPTION;"}, {"sha": "ee4a34167d1cb62a0554068619fb573afe4a62f0", "filename": "libjava/java/io/ObjectStreamException.java", "status": "modified", "additions": 31, "deletions": 43, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FObjectStreamException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FObjectStreamException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* ObjectStreamException.java -- Superclass of all serialisation exceptions\n-   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n+/* ObjectStreamException.java -- Superclass of all serialization exceptions\n+   Copyright (C) 1998, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,49 +38,37 @@\n \n package java.io;\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n-  * This exception is thrown when a problem occurs during serialization.\n-  * There are more specific subclasses than give more fine grained \n-  * indications of the precise failure.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date February 7, 2000. \n-  */\n-public abstract class ObjectStreamException extends IOException \n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when a problem occurs during serialization.\n+ * There are more specific subclasses than give more fine grained\n+ * indications of the precise failure.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new ObjectStreamException without a descriptive error message\n-  */\n-protected\n-ObjectStreamException()\n+public abstract class ObjectStreamException extends IOException\n {\n-  super();\n-}\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 7260898174833392607L;\n \n-/*************************************************************************/\n-\n-/**\n-  * Create a new ObjectStreamException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-protected\n-ObjectStreamException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  protected ObjectStreamException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  protected ObjectStreamException(String message)\n+  {\n+    super(message);\n+  }\n } // class ObjectStreamException\n-"}, {"sha": "919c2bf0f4d392647c895f9d0fde23f29e9370a3", "filename": "libjava/java/io/OptionalDataException.java", "status": "modified", "additions": 50, "deletions": 57, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FOptionalDataException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FOptionalDataException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOptionalDataException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* OptionalDataException.java -- indicates unexpected data in serialised stream\n-   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n+/* OptionalDataException.java -- indicates unexpected data in serialized stream\n+   Copyright (C) 1998, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,61 +38,54 @@\n \n package java.io;\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n-  * This exception is thrown when unexpected data appears in the input\n-  * stream from which a serialized object is being read.  The field\n-  * <code>eof</code> will always be set to true (***Why even have it?***) and \n-  * the <code>count</code> field will contain the number of valid bytes\n-  * available to be read.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date February 7, 2000. \n-  */\n-public class OptionalDataException extends ObjectStreamException\n-{\n-\n-private static final long serialVersionUID = -8011121865681257820L;\n-\n-/*\n- * Instance Variables\n+ * This exception is thrown when unexpected data appears in the input\n+ * stream from which a serialized object is being read. There are two\n+ * cases:<br><ul>\n+ * <li>The next stream element is primitive data. <code>eof</code> will\n+ *     be false, and <code>count</code> is the number of bytes of primitive\n+ *     data available.</li>\n+ * <li>The data consumable by readObject or readExternal has been exhausted.\n+ *     <code>eof</code> is true, and <code>count</code> is 0.</li>\n+ * </ul>\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Whether or not the end of the stream has been reached\n-  */\n-public boolean eof;\n-\n-/**\n-  * The number of valid bytes that can be read\n-  */\n-public int length;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Create a new OptionalDataException with an eof parameter indicating\n-  * whether or not the end of stream is reached and the number of valid\n-  * bytes that may be read.\n-  *\n-  * @param eof 'true' if end of stream reached, 'false' otherwise\n-  * @param count The number of valid bytes to be read.\n-  */\n-OptionalDataException(boolean eof, int count)\n+public class OptionalDataException extends ObjectStreamException\n {\n-  this.eof = eof;\n-  this.length = count;\n-}\n-\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -8011121865681257820L;\n+\n+  /**\n+   * Whether or not the end of the stream has been reached.\n+   *\n+   * @serial the end of the buffer was reached\n+   */\n+  public boolean eof;\n+\n+  /**\n+   * The number of valid bytes that can be read.\n+   *\n+   * @serial the bytes of the buffer remaining\n+   */\n+  public int length;\n+\n+  /**\n+   * Create a new OptionalDataException with an eof parameter indicating\n+   * whether or not the end of stream is reached and the number of valid\n+   * bytes that may be read.\n+   *\n+   * @param eof 'true' if end of stream reached, 'false' otherwise\n+   * @param count The number of valid bytes to be read\n+   */\n+  OptionalDataException(boolean eof, int count)\n+  {\n+    this.eof = eof;\n+    this.length = count;\n+  }\n } // class OptionalDataException\n-"}, {"sha": "4816ce6f79b5bdb3edcc0e9ad6d1f422c2d0c8ea", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -67,10 +67,15 @@ public class PipedInputStream extends InputStream\n   /** Set to true if close() has been called on this InputStream. */\n   boolean closed;\n \n+\n   /**\n-    * The size of the internal buffer used for input/output.\n-    */\n-  protected static final int PIPE_SIZE = 2048;\n+   * The size of the internal buffer used for input/output.\n+   */\n+  /* The \"Constant Field Values\" Javadoc of the Sun J2SE 1.4\n+   * specifies 1024.\n+   */\n+  protected static final int PIPE_SIZE = 1024;\n+\n \n   /**\n     * This is the internal circular buffer used for storing bytes written"}, {"sha": "ffc582f9ecf22d65d95ea3235ee51dd694d7f40d", "filename": "libjava/java/io/PushbackInputStream.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackInputStream.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -201,6 +201,7 @@ public synchronized int read() throws IOException\n   public synchronized int read(byte[] b, int off, int len) throws IOException\n   {\n     int numBytes = Math.min(buf.length - pos, len);\n+\n     if (numBytes > 0)\n       {\n \tSystem.arraycopy (buf, pos, b, off, numBytes);\n@@ -209,10 +210,10 @@ public synchronized int read(byte[] b, int off, int len) throws IOException\n \toff += numBytes;\n       }\n \n-    if (len > 0)\n+    if (len > 0) \n       {\n         len = super.read(b, off, len);\n-\tif (len == -1) // EOF\n+        if (len == -1) //EOF\n \t  return numBytes > 0 ? numBytes : -1;\n \tnumBytes += len;\n       }\n@@ -318,7 +319,8 @@ public synchronized long skip(long n) throws IOException\n \tint numread = (int) Math.min((long) (buf.length - pos), n);\n \tpos += numread;\n \tn -= numread;\n-\tn -= super.skip(n);\n+\tif (n > 0)\n+\t  n -= super.skip(n);\n       }\n \n     return origN - n;"}, {"sha": "004047fb6542f2aabb7ea150485fa935511eb8a7", "filename": "libjava/java/io/StreamCorruptedException.java", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FStreamCorruptedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FStreamCorruptedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStreamCorruptedException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n /* StreamCorruptedException.java -- Error in stream during serialization\n-   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,48 +38,36 @@\n \n package java.io;\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct. \n- */\n-  \n /**\n-  * This exception is thrown when there is an error in the data that is\n-  * read from a stream during de-serialization.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @date February 7, 2000.\n-  */\n-public class StreamCorruptedException extends ObjectStreamException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when there is an error in the data that is\n+ * read from a stream during de-serialization.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new StreamCorruptedException without a descriptive error message\n-  */\n-public\n-StreamCorruptedException()\n+public class StreamCorruptedException extends ObjectStreamException\n {\n-  super();\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 8983558202217591746L;\n \n-/**\n-  * Create a new StreamCorruptedException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-StreamCorruptedException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public StreamCorruptedException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public StreamCorruptedException(String message)\n+  {\n+    super(message);\n+  }\n } // class StreamCorruptedException\n-"}, {"sha": "a896ffb5e43da3505d689e014cf9a6656c0c77e8", "filename": "libjava/java/io/SyncFailedException.java", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FSyncFailedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FSyncFailedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSyncFailedException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* SyncFailedException.java -- The sync failed (?)\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* SyncFailedException.java -- a file sync failed\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,49 +38,29 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Complete to 1.1.\n- */\n-\n /**\n-  * I really wish I knew what caused this exception to be thrown.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 24, 1998\n-  */\n-public class SyncFailedException extends IOException\n-{\n-\n-private static final long serialVersionUID = -2353342684412443330L;\n-\n-/*\n- * Constructors\n+ * Thrown when a file synchronization fails.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @see FileDescriptor#sync()\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new SyncFailedException without a descriptive error message\n-  */\n-SyncFailedException()\n-{\n-  super();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Create a new SyncFailedException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-SyncFailedException(String message)\n+public class SyncFailedException extends IOException\n {\n-  super(message);\n-}\n-\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -2353342684412443330L;\n+\n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public SyncFailedException(String message)\n+  {\n+    super(message);\n+  }\n } // class SyncFailedException\n-"}, {"sha": "a38e25179f5794ed9471943c538b6ebdf48db6d7", "filename": "libjava/java/io/UTFDataFormatException.java", "status": "modified", "additions": 31, "deletions": 43, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FUTFDataFormatException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FUTFDataFormatException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FUTFDataFormatException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* UTFDataFormatException.java -- Bad format in UTF data\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* UTFDataFormatException.java -- thrown on bad format in UTF data\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,49 +38,37 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Complete to 1.1.\n- */\n-\n /**\n-  * When reading a UTF string from an input stream, this exception is thrown\n-  * to indicate that the data read is invalid.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  * @date September 24, 1998\n-  */\n-public class UTFDataFormatException extends IOException\n-{\n-\n-/*\n- * Constructors\n+ * When reading a UTF string from an input stream, this exception is thrown\n+ * to indicate that the data read is invalid.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @see DataInput\n+ * @see DataInputStream#readUTF(DataInput)\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new UTFDataFormatException without a descriptive error message\n-  */\n-public\n-UTFDataFormatException()\n+public class UTFDataFormatException extends IOException\n {\n-  super();\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 420743449228280612L;\n \n-/**\n-  * Create a new UTFDataFormatException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-UTFDataFormatException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create a new UTFDataFormatException without a descriptive error message.\n+   */\n+  public UTFDataFormatException()\n+  {\n+  }\n \n+  /**\n+   * Create a new UTFDataFormatException with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public UTFDataFormatException(String message)\n+  {\n+    super(message);\n+  }\n } // class UTFDataFormatException\n-"}, {"sha": "8ee686bde0322d278f67db05867c686e6fb03251", "filename": "libjava/java/io/UnsupportedEncodingException.java", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FUnsupportedEncodingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FUnsupportedEncodingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FUnsupportedEncodingException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,13 +1,13 @@\n-/* UnsupportedEncodingException.java -- The requested encoding isn't supported\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+/* UnsupportedEncodingException.java -- the requested encoding isn't supported\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,49 +38,36 @@\n \n package java.io;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, plus online\n- * API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n- \n /**\n-  * This exception is thrown when the requested character encoding is \n-  * not supported.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Per Bothner <bothner@cygnus.com>\n-  * @date April 17, 1998.\n-  */\n-public class UnsupportedEncodingException extends IOException\n-{\n-\n-/*\n- * Constructors\n+ * This exception is thrown when the requested character encoding is \n+ * not supported.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-\n-/**\n-  * Create a new UnsupportedEncodingException without a descriptive error message\n-  */\n-public\n-UnsupportedEncodingException()\n+public class UnsupportedEncodingException extends IOException\n {\n-  super();\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -4274276298326136670L;\n \n-/**\n-  * Create a new UnsupportedEncodingException with a descriptive error message String\n-  *\n-  * @param message The descriptive error message\n-  */\n-public\n-UnsupportedEncodingException(String message)\n-{\n-  super(message);\n-}\n+  /**\n+   * Create an exception without a descriptive error message.\n+   */\n+  public UnsupportedEncodingException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message the descriptive error message\n+   */\n+  public UnsupportedEncodingException(String message)\n+  {\n+    super(message);\n+  }\n } // class UnsupportedEncodingException\n-"}, {"sha": "0204862ef14e27bfbdde8b4de0d79c6759b9fa52", "filename": "libjava/java/io/WriteAbortedException.java", "status": "modified", "additions": 65, "deletions": 56, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34442f32a2407deff70df24c62713044748caf84/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FWriteAbortedException.java?ref=34442f32a2407deff70df24c62713044748caf84", "patch": "@@ -1,14 +1,13 @@\n-/* WriteAbortedException.java -- An exception occurred while writing a \n-   serialization stream\n-   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+/* WriteAbortedException.java -- wraps an exception thrown while writing\n+   Copyright (C) 1998, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -40,61 +39,71 @@\n package java.io;\n \n /**\n-  * This exception is thrown when one of the other ObjectStreamException \n-  * subclasses was thrown during a serialization write.\n-  *\n-  * @version 0.0\n+  * This exception is thrown when another ObjectStreamException occurs during\n+  * a serialization read or write. The stream is reset, and deserialized\n+  * objects are discarded.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Eric Blake <ebb9@email.byu.edu>\n+  * @since 1.1\n+  * @status updated to 1.4\n   */\n public class WriteAbortedException extends ObjectStreamException\n {\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * The detailed exception that caused this exception to be thrown\n-  */\n-public Exception detail;\n-private transient String message;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Create a new WriteAbortedException with an eof parameter indicating\n-  * the detailed Exception that caused this exception to be thrown.\n-  *\n-  * @param detail The exception that caused this exception to be thrown\n-  */\n-public\n-WriteAbortedException(String msg, Exception detail)\n-{\n-  this.message = msg;\n-  this.detail = detail;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * This method returns a message indicating what went wrong, including \n-  * the message text from the initial exception that caused this one to\n-  * be thrown\n-  */\n-public String\n-getMessage()\n-{\n-  return(message + \": \" + detail.getMessage());\n-}\n-\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -3326426625597282442L;\n+\n+  /**\n+   * The cause of this exception. This pre-dates the exception chaining\n+   * of Throwable; and although you can change this field, you are wiser\n+   * to leave it alone.\n+   *\n+   * @serial the exception cause\n+   */\n+  public Exception detail;\n+\n+  /**\n+   * Create a new WriteAbortedException with a specified message and\n+   * cause.\n+   *\n+   * @param msg the message\n+   * @param detail the cause\n+   */\n+  public WriteAbortedException(String msg, Exception detail)\n+  {\n+    super(msg);\n+    initCause(detail);\n+    this.detail = detail;\n+  }\n+\n+  /**\n+   * This method returns a message indicating what went wrong, in this\n+   * format:\n+   * <code>super.getMessage() + (detail == null ? \"\" : \"; \" + detail)<code>.\n+   *\n+   * @return the chained message\n+   */\n+  public String getMessage()\n+  {\n+    if (detail == this || detail == null)\n+      return super.getMessage();\n+    return super.getMessage() + \"; \" + detail;\n+  }\n+\n+  /**\n+   * Returns the cause of this exception. Note that this may not be the\n+   * original cause, thanks to the <code>detail</code> field being public\n+   * and non-final (yuck). However, to avoid violating the contract of\n+   * Throwable.getCause(), this returns null if <code>detail == this</code>,\n+   * as no exception can be its own cause.\n+   *\n+   * @return the cause\n+   * @since 1.4\n+   */\n+  public Throwable getCause()\n+  {\n+    return detail == this ? null : detail;\n+  }\n } // class WriteAbortedException\n-"}]}