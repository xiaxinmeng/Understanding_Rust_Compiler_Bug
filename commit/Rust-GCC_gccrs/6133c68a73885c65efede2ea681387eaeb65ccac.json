{"sha": "6133c68a73885c65efede2ea681387eaeb65ccac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEzM2M2OGE3Mzg4NWM2NWVmZWRlMmVhNjgxMzg3ZWFlYjY1Y2NhYw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-02-11T22:35:56Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-02-11T22:35:56Z"}, "message": "re PR fortran/30478 (FAIL: gfortran.dg/enum_2.f90  -O  (internal compiler error))\n\n2007-02-11  Tobias Schlueter  <tobi@gcc.gnu.org>\n\nPR fortran/30478\nfortran/\n* decl.c (add_init_expr_to_sym): Remove ENUM specific code.\n(variable_decl): Likewise.  Rewrap comment.\n(match_attr_spec): Remove ENUM specific code.\n(gfc_match_enum): Fix typo in error message.\n(enumerator_decl): New function.\n(gfc_match_enumerator_def): Use enumerator_decl instead of\nvariable_decl.  Adapt code accordingly.\ntestsuite/\n* gfortran.dg/enum_4.f90: Update error message checks.\n\nFrom-SVN: r121830", "tree": {"sha": "dbbd0b4104946ff6c819c8ec87937749c095eb36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbbd0b4104946ff6c819c8ec87937749c095eb36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6133c68a73885c65efede2ea681387eaeb65ccac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6133c68a73885c65efede2ea681387eaeb65ccac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6133c68a73885c65efede2ea681387eaeb65ccac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6133c68a73885c65efede2ea681387eaeb65ccac/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c54531839e70d618c115e818bc1b964a1fe77c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c54531839e70d618c115e818bc1b964a1fe77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c54531839e70d618c115e818bc1b964a1fe77c"}], "stats": {"total": 196, "additions": 128, "deletions": 68}, "files": [{"sha": "63144257818f15e6d22191bf6567ec7b71c48b80", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6133c68a73885c65efede2ea681387eaeb65ccac", "patch": "@@ -1,3 +1,14 @@\n+2007-02-11  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/30478\n+\t* decl.c (add_init_expr_to_sym): Remove ENUM specific code.\n+\t(variable_decl): Likewise.  Rewrap comment.\n+\t(match_attr_spec): Remove ENUM specific code.\n+\t(gfc_match_enum): Fix typo in error message.\n+\t(enumerator_decl): New function.\n+\t(gfc_match_enumerator_def): Use enumerator_decl instead of\n+\tvariable_decl.  Adapt code accordingly.\n+\n 2007-02-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30554"}, {"sha": "8165c79d6744c2cdf292dff9f0950625be515ec4", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 109, "deletions": 65, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=6133c68a73885c65efede2ea681387eaeb65ccac", "patch": "@@ -960,10 +960,6 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp,\n       *initp = NULL;\n     }\n \n-  /* Maintain enumerator history.  */\n-  if (gfc_current_state () == COMP_ENUM)\n-    create_enum_history (sym, init);\n-\n   return SUCCESS;\n }\n \n@@ -1137,14 +1133,6 @@ variable_decl (int elem)\n \n   if (m == MATCH_NO)\n     as = gfc_copy_array_spec (current_as);\n-  else if (gfc_current_state () == COMP_ENUM)\n-    {\n-      gfc_error (\"Enumerator cannot be array at %C\");\n-      gfc_free_enum_history ();\n-      m = MATCH_ERROR;\n-      goto cleanup;\n-    }\n-\n \n   char_len = NULL;\n   cl = NULL;\n@@ -1243,10 +1231,11 @@ variable_decl (int elem)\n       goto cleanup;\n     }\n \n-  /* An interface body specifies all of the procedure's characteristics and these\n-     shall be consistent with those specified in the procedure definition, except\n-     that the interface may specify a procedure that is not pure if the procedure\n-     is defined to be pure(12.3.2).  */\n+  /* An interface body specifies all of the procedure's\n+     characteristics and these shall be consistent with those\n+     specified in the procedure definition, except that the interface\n+     may specify a procedure that is not pure if the procedure is\n+     defined to be pure(12.3.2).  */\n   if (current_ts.type == BT_DERIVED\n       && gfc_current_ns->proc_name\n       && gfc_current_ns->proc_name->attr.if_source == IFSRC_IFBODY\n@@ -1360,30 +1349,6 @@ variable_decl (int elem)\n       goto cleanup;\n     }\n \n-  /* Check if we are parsing an enumeration and if the current enumerator\n-     variable has an initializer or not. If it does not have an\n-     initializer, the initialization value of the previous enumerator \n-     (stored in last_initializer) is incremented by 1 and is used to\n-     initialize the current enumerator.  */\n-  if (gfc_current_state () == COMP_ENUM)\n-    {\n-      if (initializer == NULL)\n-\tinitializer = gfc_enum_initializer (last_initializer, old_locus);\n- \n-      if (initializer == NULL || initializer->ts.type != BT_INTEGER)\n-\t{\n-\t  gfc_error(\"ENUMERATOR %L not initialized with integer expression\",\n-\t\t    &var_locus);\n-\t  m = MATCH_ERROR; \n-\t  gfc_free_enum_history ();\n-\t  goto cleanup;\n-\t}\n-\n-      /* Store this current initializer, for the next enumerator\n-\t variable to be parsed.  */\n-      last_initializer = initializer;\n-    }\n-\n   /* Add the initializer.  Note that it is fine if initializer is\n      NULL here, because we sometimes also need to check if a\n      declaration *must* have an initialization expression.  */\n@@ -2195,12 +2160,6 @@ match_attr_spec (void)\n       if (d == DECL_NONE || d == DECL_COLON)\n \tbreak;\n        \n-      if (gfc_current_state () == COMP_ENUM)\n-\t{\n-\t  gfc_error (\"Enumerator cannot have attributes %C\");\n-\t  return MATCH_ERROR;\n-\t}\n-\n       seen[d]++;\n       seen_at[d] = gfc_current_locus;\n \n@@ -2219,18 +2178,6 @@ match_attr_spec (void)\n \t}\n     }\n \n-  /* If we are parsing an enumeration and have ensured that no other\n-     attributes are present we can now set the parameter attribute.  */\n-  if (gfc_current_state () == COMP_ENUM)\n-    {\n-      t = gfc_add_flavor (&current_attr, FL_PARAMETER, NULL, NULL);\n-      if (t == FAILURE)\n-\t{\n-\t  m = MATCH_ERROR;\n-\t  goto cleanup;\n-\t}\n-    }\n-\n   /* No double colon, so assume that we've been looking at something\n      else the whole time.  */\n   if (d == DECL_NONE)\n@@ -4457,27 +4404,124 @@ gfc_match_enum (void)\n   if (m != MATCH_YES)\n     return m;\n \n-  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: ENUM AND ENUMERATOR at %C\")\n+  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: ENUM and ENUMERATOR at %C\")\n       == FAILURE)\n     return MATCH_ERROR;\n \n   return MATCH_YES;\n }\n \n \n+/* Match a variable name with an optional initializer.  When this\n+   subroutine is called, a variable is expected to be parsed next.\n+   Depending on what is happening at the moment, updates either the\n+   symbol table or the current interface.  */\n+\n+static match\n+enumerator_decl (void)\n+{\n+  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  gfc_expr *initializer;\n+  gfc_array_spec *as = NULL;\n+  gfc_symbol *sym;\n+  locus var_locus;\n+  match m;\n+  try t;\n+  locus old_locus;\n+\n+  initializer = NULL;\n+  old_locus = gfc_current_locus;\n+\n+  /* When we get here, we've just matched a list of attributes and\n+     maybe a type and a double colon.  The next thing we expect to see\n+     is the name of the symbol.  */\n+  m = gfc_match_name (name);\n+  if (m != MATCH_YES)\n+    goto cleanup;\n+\n+  var_locus = gfc_current_locus;\n+\n+  /* OK, we've successfully matched the declaration.  Now put the\n+     symbol in the current namespace. If we fail to create the symbol,\n+     bail out.  */\n+  if (build_sym (name, NULL, &as, &var_locus) == FAILURE)\n+    {\n+      m = MATCH_ERROR;\n+      goto cleanup;\n+    }\n+\n+  /* The double colon must be present in order to have initializers.\n+     Otherwise the statement is ambiguous with an assignment statement.  */\n+  if (colon_seen)\n+    {\n+      if (gfc_match_char ('=') == MATCH_YES)\n+\t{\n+\t  m = gfc_match_init_expr (&initializer);\n+\t  if (m == MATCH_NO)\n+\t    {\n+\t      gfc_error (\"Expected an initialization expression at %C\");\n+\t      m = MATCH_ERROR;\n+\t    }\n+\n+\t  if (m != MATCH_YES)\n+\t    goto cleanup;\n+\t}\n+    }\n+\n+  /* If we do not have an initializer, the initialization value of the\n+     previous enumerator (stored in last_initializer) is incremented\n+     by 1 and is used to initialize the current enumerator.  */\n+  if (initializer == NULL)\n+    initializer = gfc_enum_initializer (last_initializer, old_locus);\n+ \n+  if (initializer == NULL || initializer->ts.type != BT_INTEGER)\n+    {\n+      gfc_error(\"ENUMERATOR %L not initialized with integer expression\",\n+\t\t&var_locus);\n+      m = MATCH_ERROR; \n+      gfc_free_enum_history ();\n+      goto cleanup;\n+    }\n+\n+  /* Store this current initializer, for the next enumerator variable\n+     to be parsed.  add_init_expr_to_sym() zeros initializer, so we\n+     use last_initializer below.  */\n+  last_initializer = initializer;\n+  t = add_init_expr_to_sym (name, &initializer, &var_locus);\n+\n+  /* Maintain enumerator history.  */\n+  gfc_find_symbol (name, NULL, 0, &sym);\n+  create_enum_history (sym, last_initializer);\n+\n+  return (t == SUCCESS) ? MATCH_YES : MATCH_ERROR;\n+\n+cleanup:\n+  /* Free stuff up and return.  */\n+  gfc_free_expr (initializer);\n+\n+  return m;\n+}\n+\n+\n /* Match the enumerator definition statement. */\n \n match\n gfc_match_enumerator_def (void)\n {\n   match m;\n-  int elem; \n+  try t;\n   \n   gfc_clear_ts (&current_ts);\n   \n   m = gfc_match (\" enumerator\");\n   if (m != MATCH_YES)\n     return m;\n+\n+  m = gfc_match (\" :: \");\n+  if (m == MATCH_ERROR)\n+    return m;\n+\n+  colon_seen = (m == MATCH_YES);\n   \n   if (gfc_current_state () != COMP_ENUM)\n     {\n@@ -4489,17 +4533,17 @@ gfc_match_enumerator_def (void)\n   (&current_ts)->type = BT_INTEGER;\n   (&current_ts)->kind = gfc_c_int_kind;\n   \n-  m = match_attr_spec ();\n-  if (m == MATCH_ERROR)\n+  gfc_clear_attr (&current_attr);\n+  t = gfc_add_flavor (&current_attr, FL_PARAMETER, NULL, NULL);\n+  if (t == FAILURE)\n     {\n-      m = MATCH_NO;\n+      m = MATCH_ERROR;\n       goto cleanup;\n     }\n \n-  elem = 1;\n   for (;;)\n     {\n-      m = variable_decl (elem++);\n+      m = enumerator_decl ();\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_NO)"}, {"sha": "b6a6c0a88325ec382e0f6f725a6a07ac99404cc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6133c68a73885c65efede2ea681387eaeb65ccac", "patch": "@@ -1,3 +1,8 @@\n+2007-02-11  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/30478\n+\t* gfortran.dg/enum_4.f90: Update error message checks.\n+\n 2007-02-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30554"}, {"sha": "be506b400db7f8206605c15b7beb9b0a066fc100", "filename": "gcc/testsuite/gfortran.dg/enum_4.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6133c68a73885c65efede2ea681387eaeb65ccac/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_4.f90?ref=6133c68a73885c65efede2ea681387eaeb65ccac", "patch": "@@ -5,12 +5,12 @@ program main\n   implicit none\n   enum, bind (c)\n     enumerator :: red, black = 2     \n-    enumerator :: blue = 1, red  ! { dg-error \"already\" }\n+    enumerator :: blue = 1, red  ! { dg-error \"already has basic type\" }\n   end enum\n \n   enum, bind (c)\n-    enumerator :: r, b(10) = 2  ! { dg-error \"cannot be array\" }\n-    enumerator , save :: g = 1  ! { dg-error \"cannot have attributes\" }  \n+    enumerator :: r, b(10) = 2  ! { dg-error \"Syntax error\" }\n+    enumerator , save :: g = 1  ! { dg-error \"Syntax error\" }  \n   end  ! { dg-error \" END ENUM\" } \n \n end program main  ! { dg-excess-errors \"\" }"}]}