{"sha": "3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "node_id": "C_kwDOANBUbNoAKDNhZGEzZDgzNjViYTM4ODlmOTExNDBkZmUxMDhkM2M3NGQzZTRlMzg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-17T10:53:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T10:53:07Z"}, "message": "Merge #1022 #1033\n\n1022: attribute expansion: Fix spurious stripping of tail expression r=CohenArthur a=CohenArthur\n\nThis commit fixes the issue reported in #391, but highlights another\r\none, which will be reported.\r\n\r\nCloses #391 \n\n1033: Fix bad copy-paste in can equal interface for pointer types r=philberty a=philberty\n\nWhen we perform method resolution we check if the self arguments can be\r\nmatched. Here the bug was that pointer types had a bad vistitor and only\r\ncould ever match reference types which is wrong and was a copy paste error.\r\n\r\nFixes #1031\r\nAddresses #849 \r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "489a121691b7debb22e5ee2978e70378c12778d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/489a121691b7debb22e5ee2978e70378c12778d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMxMTCRBK7hj4Ov3rIwAAw+QIAIb9eO71TpKEyXje6ESzsyHm\nptxaa4oeYOON2Lw3r5aJF5zqDPeRvwySReNUO8rb0DYg9HocUrmWuA6Bqq+/bNCq\noziGM/wVytDyMYxU14NwvDrN/ej+lnCTb5Fovroa5Jh7F+DTaFkS+Q7iToBTa0zq\ngKtTxeLhI1k/mJQgy14YIuRwLQoWAsOGcoyfLEvEalY7otrmG+12Zs6fCi00/IL4\nLNiFa5rMUuQmP81eV4X0TIi6Yd17tWMYSO/RChFrtRTWLMN5gU/qJ5RSy6tebP+v\nGx27/TUcACOJ+8t2XXRBsu3F+N2cujacOfpgB+W/VtXmVknsuVPYl+b86TS6H68=\n=82Iz\n-----END PGP SIGNATURE-----\n", "payload": "tree 489a121691b7debb22e5ee2978e70378c12778d7\nparent fe13ad49b1da5285719b176bb5d00a94b9260ebf\nparent b6b567171c1f5e947dd80b3c9958b1d9520d4888\nparent 6e385d2f257c5cba10e569bd540bdfa9f91960d2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647514387 +0000\ncommitter GitHub <noreply@github.com> 1647514387 +0000\n\nMerge #1022 #1033\n\n1022: attribute expansion: Fix spurious stripping of tail expression r=CohenArthur a=CohenArthur\n\nThis commit fixes the issue reported in #391, but highlights another\r\none, which will be reported.\r\n\r\nCloses #391 \n\n1033: Fix bad copy-paste in can equal interface for pointer types r=philberty a=philberty\n\nWhen we perform method resolution we check if the self arguments can be\r\nmatched. Here the bug was that pointer types had a bad vistitor and only\r\ncould ever match reference types which is wrong and was a copy paste error.\r\n\r\nFixes #1031\r\nAddresses #849 \r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe13ad49b1da5285719b176bb5d00a94b9260ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe13ad49b1da5285719b176bb5d00a94b9260ebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe13ad49b1da5285719b176bb5d00a94b9260ebf"}, {"sha": "b6b567171c1f5e947dd80b3c9958b1d9520d4888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b567171c1f5e947dd80b3c9958b1d9520d4888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b567171c1f5e947dd80b3c9958b1d9520d4888"}, {"sha": "6e385d2f257c5cba10e569bd540bdfa9f91960d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e385d2f257c5cba10e569bd540bdfa9f91960d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e385d2f257c5cba10e569bd540bdfa9f91960d2"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "c254712f4aeaceaecfb0a7ff11733d759b50e1f2", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "patch": "@@ -249,7 +249,8 @@ struct Literal\n     BYTE_STRING,\n     INT,\n     FLOAT,\n-    BOOL\n+    BOOL,\n+    ERROR\n   };\n \n private:\n@@ -274,11 +275,11 @@ struct Literal\n \n   static Literal create_error ()\n   {\n-    return Literal (\"\", CHAR, PrimitiveCoreType::CORETYPE_UNKNOWN);\n+    return Literal (\"\", ERROR, PrimitiveCoreType::CORETYPE_UNKNOWN);\n   }\n \n   // Returns whether literal is in an invalid state.\n-  bool is_error () const { return value_as_string == \"\"; }\n+  bool is_error () const { return type == ERROR; }\n };\n \n /* Forward decl - definition moved to rust-expr.h as it requires LiteralExpr to"}, {"sha": "4bfcbc80db4d2e5811694563087ff0da34815d6e", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "patch": "@@ -359,6 +359,10 @@ class ASTLoweringExpr : public ASTLoweringBase\n       case AST::Literal::LitType::BOOL:\n \ttype = HIR::Literal::LitType::BOOL;\n \tbreak;\n+\t// Error literals should have been stripped during expansion\n+      case AST::Literal::LitType::ERROR:\n+\tgcc_unreachable ();\n+\tbreak;\n       }\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),"}, {"sha": "684c41abc2f8a140606069132b8907b8de97f7d4", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "patch": "@@ -1240,7 +1240,7 @@ class PointerCmp : public BaseCmp\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (const ReferenceType &type) override\n+  void visit (const PointerType &type) override\n   {\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();"}, {"sha": "6727f34336f31aab012c2ea2660b045475e132a2", "filename": "gcc/testsuite/rust/compile/issue-1031.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs?ref=3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "patch": "@@ -0,0 +1,16 @@\n+extern \"rust-intrinsic\" {\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *const T {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { self.offset(count as isize) }\n+    }\n+}"}, {"sha": "3087d4d0a5f8ad01382e81aa244a325563ac0c80", "filename": "gcc/testsuite/rust/compile/xfail/slice1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Ftestsuite%2Frust%2Fcompile%2Fxfail%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ada3d8365ba3889f91140dfe108d3c74d3e4e38/gcc%2Ftestsuite%2Frust%2Fcompile%2Fxfail%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fxfail%2Fslice1.rs?ref=3ada3d8365ba3889f91140dfe108d3c74d3e4e38", "patch": "@@ -1,3 +1,5 @@\n-fn foo (e: &str) -> &str {\n-    &\"\" // { dg-bogus \"cannot strip expression in this position - outer attributes not allowed\" \"#391\" { xfail *-*-* } }\n+// { dg-additional-options \"-w\" }\n+\n+fn foo(e: &str) -> &str { // { dg-bogus \"expected\" \"#391\" { xfail *-*-* } }\n+    &\"\" // { dg-bogus \"expected\" \"#391\" { xfail *-*-* } }\n }"}]}