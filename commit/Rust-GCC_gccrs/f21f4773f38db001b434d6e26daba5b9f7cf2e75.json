{"sha": "f21f4773f38db001b434d6e26daba5b9f7cf2e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxZjQ3NzNmMzhkYjAwMWI0MzRkNmUyNmRhYmE1YjlmN2NmMmU3NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-17T23:21:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-17T23:21:08Z"}, "message": "compiler: List imported packages in export information.\n\nFrom-SVN: r184355", "tree": {"sha": "8d741a435b92dd40a98b3a05ddacc3d2b3c78639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d741a435b92dd40a98b3a05ddacc3d2b3c78639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f21f4773f38db001b434d6e26daba5b9f7cf2e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f4773f38db001b434d6e26daba5b9f7cf2e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21f4773f38db001b434d6e26daba5b9f7cf2e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f4773f38db001b434d6e26daba5b9f7cf2e75/comments", "author": null, "committer": null, "parents": [{"sha": "b2c4b7b9408b401e4ad668a3a005516d9af32c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c4b7b9408b401e4ad668a3a005516d9af32c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c4b7b9408b401e4ad668a3a005516d9af32c53"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "174596753ef8b4acd01a1f41939835f0522f4770", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=f21f4773f38db001b434d6e26daba5b9f7cf2e75", "patch": "@@ -93,6 +93,7 @@ void\n Export::export_globals(const std::string& package_name,\n \t\t       const std::string& unique_prefix,\n \t\t       int package_priority,\n+\t\t       const std::map<std::string, Package*>& imports,\n \t\t       const std::string& import_init_fn,\n \t\t       const std::set<Import_init>& imported_init_fns,\n \t\t       const Bindings* bindings)\n@@ -149,6 +150,8 @@ Export::export_globals(const std::string& package_name,\n   snprintf(buf, sizeof buf, \"priority %d;\\n\", package_priority);\n   this->write_c_string(buf);\n \n+  this->write_imports(imports);\n+\n   this->write_imported_init_fns(package_name, package_priority, import_init_fn,\n \t\t\t\timported_init_fns);\n \n@@ -177,7 +180,46 @@ Export::export_globals(const std::string& package_name,\n   this->stream_->write_checksum(s);\n }\n \n-// Write out the import control variables for this package.\n+// Sort imported packages.\n+\n+static bool\n+import_compare(const std::pair<std::string, Package*>& a,\n+\t       const std::pair<std::string, Package*>& b)\n+{\n+  return a.first < b.first;\n+}\n+\n+// Write out the imported packages.\n+\n+void\n+Export::write_imports(const std::map<std::string, Package*>& imports)\n+{\n+  // Sort the imports for more consistent output.\n+  std::vector<std::pair<std::string, Package*> > imp;\n+  for (std::map<std::string, Package*>::const_iterator p = imports.begin();\n+       p != imports.end();\n+       ++p)\n+    imp.push_back(std::make_pair(p->first, p->second));\n+\n+  std::sort(imp.begin(), imp.end(), import_compare);\n+\n+  for (std::vector<std::pair<std::string, Package*> >::const_iterator p =\n+\t imp.begin();\n+       p != imp.end();\n+       ++p)\n+    {\n+      this->write_c_string(\"import \");\n+      this->write_string(p->second->name());\n+      this->write_c_string(\" \");\n+      this->write_string(p->second->unique_prefix());\n+      this->write_c_string(\" \\\"\");\n+      this->write_string(p->first);\n+      this->write_c_string(\"\\\";\\n\");\n+    }\n+}\n+\n+// Write out the initialization functions which need to run for this\n+// package.\n \n void\n Export::write_imported_init_fns(\n@@ -189,7 +231,7 @@ Export::write_imported_init_fns(\n   if (import_init_fn.empty() && imported_init_fns.empty())\n     return;\n \n-  this->write_c_string(\"import\");\n+  this->write_c_string(\"init\");\n \n   if (!import_init_fn.empty())\n     {"}, {"sha": "0e03f4853d649519c6753bb75f3d86e35979dae2", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=f21f4773f38db001b434d6e26daba5b9f7cf2e75", "patch": "@@ -14,6 +14,7 @@ class Gogo;\n class Import_init;\n class Bindings;\n class Type;\n+class Package;\n \n // Codes used for the builtin types.  These are all negative to make\n // them easily distinct from the codes assigned by Export::write_type.\n@@ -126,6 +127,7 @@ class Export : public String_dump\n   export_globals(const std::string& package_name,\n \t\t const std::string& unique_prefix,\n \t\t int package_priority,\n+\t\t const std::map<std::string, Package*>& imports,\n \t\t const std::string& import_init_fn,\n \t\t const std::set<Import_init>& imported_init_fns,\n \t\t const Bindings* bindings);\n@@ -158,6 +160,10 @@ class Export : public String_dump\n   Export(const Export&);\n   Export& operator=(const Export&);\n \n+  // Write out the imported packages.\n+  void\n+  write_imports(const std::map<std::string, Package*>& imports);\n+\n   // Write out the imported initialization functions.\n   void\n   write_imported_init_fns(const std::string& package_name, int priority,"}, {"sha": "acc92317dcc53bedb4f57521c2b532a161038a4f", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=f21f4773f38db001b434d6e26daba5b9f7cf2e75", "patch": "@@ -2859,6 +2859,7 @@ Gogo::do_exports()\n   exp.export_globals(this->package_name(),\n \t\t     this->unique_prefix(),\n \t\t     this->package_priority(),\n+\t\t     this->imports_,\n \t\t     (this->need_init_fn_ && !this->is_main_package()\n \t\t      ? this->get_init_fn_name()\n \t\t      : \"\"),"}, {"sha": "58b0355c6c6fc3ece54fbe4c56cca683d6e35005", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=f21f4773f38db001b434d6e26daba5b9f7cf2e75", "patch": "@@ -304,7 +304,10 @@ Import::import(Gogo* gogo, const std::string& local_name,\n       this->package_->set_priority(prio);\n       this->require_c_string(\";\\n\");\n \n-      if (stream->match_c_string(\"import \"))\n+      while (stream->match_c_string(\"import\"))\n+\tthis->read_one_import();\n+\n+      if (stream->match_c_string(\"init\"))\n \tthis->read_import_init_fns(gogo);\n \n       // Loop over all the input data for this package.\n@@ -344,12 +347,24 @@ Import::import(Gogo* gogo, const std::string& local_name,\n   return this->package_;\n }\n \n+// Read an import line.  We don't actually care about these.\n+\n+void\n+Import::read_one_import()\n+{\n+  this->require_c_string(\"import \");\n+  Stream* stream = this->stream_;\n+  while (stream->peek_char() != ';')\n+    stream->advance(1);\n+  this->require_c_string(\";\\n\");\n+}\n+\n // Read the list of import control functions.\n \n void\n Import::read_import_init_fns(Gogo* gogo)\n {\n-  this->require_c_string(\"import\");\n+  this->require_c_string(\"init\");\n   while (!this->match_c_string(\";\"))\n     {\n       this->require_c_string(\" \");"}, {"sha": "67bdcb02d57dbe64d6d210c4be90a085e0946390", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=f21f4773f38db001b434d6e26daba5b9f7cf2e75", "patch": "@@ -213,6 +213,10 @@ class Import\n   find_archive_export_data(const std::string& filename, int fd,\n \t\t\t   Location);\n \n+  // Read an import line.\n+  void\n+  read_one_import();\n+\n   // Read the import control functions.\n   void\n   read_import_init_fns(Gogo*);"}, {"sha": "9508feaaf97232f4ad02fca0d7ed4f4931daeda6", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f4773f38db001b434d6e26daba5b9f7cf2e75/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=f21f4773f38db001b434d6e26daba5b9f7cf2e75", "patch": "@@ -34,6 +34,8 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   package->set_location(location);\n   package->set_is_imported();\n \n+  this->imports_.insert(std::make_pair(\"unsafe\", package));\n+\n   Bindings* bindings = package->bindings();\n \n   // The type may have already been created by an import."}]}