{"sha": "014397c22e3a682f24b4d0e69ce2d336412b7264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0Mzk3YzIyZTNhNjgyZjI0YjRkMGU2OWNlMmQzMzY0MTJiNzI2NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-05-14T20:56:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-05-14T20:56:04Z"}, "message": "cp-tree.h (DIRECT_LIST_INIT_P): Add.\n\n2014-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.h (DIRECT_LIST_INIT_P): Add.\n\t* call.c (convert_like_real, build_new_method_call_1): Use it.\n\t* decl2.c (grokfield): Likewise.\n\t* init.c (perform_member_init, build_aggr_init, expand_default_init,\n\tbuild_new_1): Likewise.\n\t* mangle.c (write_expression): Likewise.\n\t* parser.c (cp_parser_late_parse_one_default_arg): Likewise.\n\nFrom-SVN: r210438", "tree": {"sha": "191dc471b8036ec4c2b7f7df0484c89e1646827c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/191dc471b8036ec4c2b7f7df0484c89e1646827c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/014397c22e3a682f24b4d0e69ce2d336412b7264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014397c22e3a682f24b4d0e69ce2d336412b7264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014397c22e3a682f24b4d0e69ce2d336412b7264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014397c22e3a682f24b4d0e69ce2d336412b7264/comments", "author": null, "committer": null, "parents": [{"sha": "d40aeed84da43a8839e7ee1ce135f68a2b5a7003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40aeed84da43a8839e7ee1ce135f68a2b5a7003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40aeed84da43a8839e7ee1ce135f68a2b5a7003"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "d60f6b34952520285b7e877be8c397bc29e637c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=014397c22e3a682f24b4d0e69ce2d336412b7264", "patch": "@@ -1,3 +1,13 @@\n+2014-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cp-tree.h (DIRECT_LIST_INIT_P): Add.\n+\t* call.c (convert_like_real, build_new_method_call_1): Use it.\n+\t* decl2.c (grokfield): Likewise.\n+\t* init.c (perform_member_init, build_aggr_init, expand_default_init,\n+\tbuild_new_1): Likewise.\n+\t* mangle.c (write_expression): Likewise.\n+\t* parser.c (cp_parser_late_parse_one_default_arg): Likewise.\n+\n 2014-05-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/20332"}, {"sha": "1b8c38c29f583a38e371bfbcdc82e67fabffdb9a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=014397c22e3a682f24b4d0e69ce2d336412b7264", "patch": "@@ -6119,8 +6119,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t   constructors, but actually trying to call one is an error.  */\n \tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n \t    /* Unless this is for direct-list-initialization.  */\n-\t    && !(BRACE_ENCLOSED_INITIALIZER_P (expr)\n-\t\t && CONSTRUCTOR_IS_DIRECT_INIT (expr)))\n+\t    && !DIRECT_LIST_INIT_P (expr))\n \t  {\n \t    if (!(complain & tf_error))\n \t      return error_mark_node;\n@@ -7859,8 +7858,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n   /* If CONSTRUCTOR_IS_DIRECT_INIT is set, this was a T{ } form\n      initializer, not T({ }).  */\n   if (DECL_CONSTRUCTOR_P (fn) && args != NULL && !vec_safe_is_empty (*args)\n-      && BRACE_ENCLOSED_INITIALIZER_P ((**args)[0])\n-      && CONSTRUCTOR_IS_DIRECT_INIT ((**args)[0]))\n+      && DIRECT_LIST_INIT_P ((**args)[0]))\n     {\n       tree init_list = (**args)[0];\n       tree init = NULL_TREE;"}, {"sha": "3bd2e8c2bc51f0d32da054c5079b64bd24c74200", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=014397c22e3a682f24b4d0e69ce2d336412b7264", "patch": "@@ -3437,6 +3437,9 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    B b{1,2}, not B b({1,2}) or B b = {1,2}.  */\n #define CONSTRUCTOR_IS_DIRECT_INIT(NODE) (TREE_LANG_FLAG_0 (CONSTRUCTOR_CHECK (NODE)))\n \n+#define DIRECT_LIST_INIT_P(NODE) \\\n+   (BRACE_ENCLOSED_INITIALIZER_P (NODE) && CONSTRUCTOR_IS_DIRECT_INIT (NODE))\n+\n /* True if NODE represents a conversion for direct-initialization in a\n    template.  Set by perform_implicit_conversion_flags.  */\n #define IMPLICIT_CONV_EXPR_DIRECT_INIT(NODE) \\"}, {"sha": "b18f65a383f6c71593357ad524f4a0ff9d8b50e6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=014397c22e3a682f24b4d0e69ce2d336412b7264", "patch": "@@ -983,8 +983,7 @@ grokfield (const cp_declarator *declarator,\n   if (attrlist)\n     cplus_decl_attributes (&value, attrlist, 0);\n \n-  if (init && BRACE_ENCLOSED_INITIALIZER_P (init)\n-      && CONSTRUCTOR_IS_DIRECT_INIT (init))\n+  if (init && DIRECT_LIST_INIT_P (init))\n     flags = LOOKUP_NORMAL;\n   else\n     flags = LOOKUP_IMPLICIT;"}, {"sha": "80764f9142110226f565d04f5fa11ba7440ed5c6", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=014397c22e3a682f24b4d0e69ce2d336412b7264", "patch": "@@ -642,8 +642,7 @@ perform_member_init (tree member, tree init)\n \t\t     && TREE_TYPE (init) == type)\n \t\t    /* { } mem-initializer.  */\n \t\t    || (TREE_CODE (init) == TREE_LIST\n-\t\t\t&& TREE_CODE (TREE_VALUE (init)) == CONSTRUCTOR\n-\t\t\t&& CONSTRUCTOR_IS_DIRECT_INIT (TREE_VALUE (init))))\n+\t\t\t&& DIRECT_LIST_INIT_P (TREE_VALUE (init))))\n \t\t   && (CP_AGGREGATE_TYPE_P (type)\n \t\t       || is_std_init_list (type)))))\n     {\n@@ -1515,8 +1514,7 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n       && TREE_CODE (init) != TREE_LIST\n       && !(TREE_CODE (init) == TARGET_EXPR\n \t   && TARGET_EXPR_DIRECT_INIT_P (init))\n-      && !(BRACE_ENCLOSED_INITIALIZER_P (init)\n-\t   && CONSTRUCTOR_IS_DIRECT_INIT (init)))\n+      && !DIRECT_LIST_INIT_P (init))\n     flags |= LOOKUP_ONLYCONVERTING;\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n@@ -1589,8 +1587,7 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n   /* If we have direct-initialization from an initializer list, pull\n      it out of the TREE_LIST so the code below can see it.  */\n   if (init && TREE_CODE (init) == TREE_LIST\n-      && BRACE_ENCLOSED_INITIALIZER_P (TREE_VALUE (init))\n-      && CONSTRUCTOR_IS_DIRECT_INIT (TREE_VALUE (init)))\n+      && DIRECT_LIST_INIT_P (TREE_VALUE (init)))\n     {\n       gcc_checking_assert ((flags & LOOKUP_ONLYCONVERTING) == 0\n \t\t\t   && TREE_CHAIN (init) == NULL_TREE);\n@@ -2791,8 +2788,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t{\n \t  tree vecinit = NULL_TREE;\n \t  if (vec_safe_length (*init) == 1\n-\t      && BRACE_ENCLOSED_INITIALIZER_P ((**init)[0])\n-\t      && CONSTRUCTOR_IS_DIRECT_INIT ((**init)[0]))\n+\t      && DIRECT_LIST_INIT_P ((**init)[0]))\n \t    {\n \t      vecinit = (**init)[0];\n \t      if (CONSTRUCTOR_NELTS (vecinit) == 0)"}, {"sha": "34a0c958108b28265b53fde35b287cca7e45f9ef", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=014397c22e3a682f24b4d0e69ce2d336412b7264", "patch": "@@ -2806,8 +2806,7 @@ write_expression (tree expr)\n       write_type (type);\n \n       if (init && TREE_CODE (init) == TREE_LIST\n-\t  && TREE_CODE (TREE_VALUE (init)) == CONSTRUCTOR\n-\t  && CONSTRUCTOR_IS_DIRECT_INIT (TREE_VALUE (init)))\n+\t  && DIRECT_LIST_INIT_P (TREE_VALUE (init)))\n \twrite_expression (TREE_VALUE (init));\n       else\n \t{"}, {"sha": "dae4393d6e21ea5112a9f36a59048e100a7f0819", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014397c22e3a682f24b4d0e69ce2d336412b7264/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=014397c22e3a682f24b4d0e69ce2d336412b7264", "patch": "@@ -23674,8 +23674,7 @@ cp_parser_late_parse_one_default_arg (cp_parser *parser, tree decl,\n       else\n \t{\n \t  int flags = LOOKUP_IMPLICIT;\n-\t  if (BRACE_ENCLOSED_INITIALIZER_P (parsed_arg)\n-\t      && CONSTRUCTOR_IS_DIRECT_INIT (parsed_arg))\n+\t  if (DIRECT_LIST_INIT_P (parsed_arg))\n \t    flags = LOOKUP_NORMAL;\n \t  parsed_arg = digest_init_flags (TREE_TYPE (decl), parsed_arg, flags);\n \t  if (TREE_CODE (parsed_arg) == TARGET_EXPR)"}]}