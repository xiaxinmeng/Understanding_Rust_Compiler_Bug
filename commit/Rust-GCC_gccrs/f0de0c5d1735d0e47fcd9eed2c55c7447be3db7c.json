{"sha": "f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBkZTBjNWQxNzM1ZDBlNDdmY2Q5ZWVkMmM1NWM3NDQ3YmUzZGI3Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-01T10:28:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-01T10:28:32Z"}, "message": "stmt.c (expand_start_null_loop): New.\n\n        * stmt.c (expand_start_null_loop): New.\n        (expand_end_null_loop): New.\n        * c-semantics.c (genrtl_do_stmt): Use them.\n        * tree.h: Declare them.\n\nFrom-SVN: r37186", "tree": {"sha": "d2b3df2dede1479fa71732f0f3a0c2144a986dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2b3df2dede1479fa71732f0f3a0c2144a986dfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/comments", "author": null, "committer": null, "parents": [{"sha": "faafaee632fa113c37c2d97cc8ebcc4ce4bc6e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faafaee632fa113c37c2d97cc8ebcc4ce4bc6e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faafaee632fa113c37c2d97cc8ebcc4ce4bc6e8c"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "c8b0dff26d3b94e253e2d7e9c8cd2a2dc7989e21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "patch": "@@ -1,3 +1,10 @@\n+2000-11-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* stmt.c (expand_start_null_loop): New.\n+\t(expand_end_null_loop): New.\t\n+\t* c-semantics.c (genrtl_do_stmt): Use them.\n+\t* tree.h: Declare them.\n+\n 2000-11-01  Richard Henderson  <rth@redhat.com>\n \n \t* cppmain.c (scan_buffer): Don't avoid paste for assembly."}, {"sha": "f3210633ad9229278bae19ea3a80b5c5e6aa53e6", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "patch": "@@ -487,7 +487,11 @@ genrtl_do_stmt (t)\n      avoids cluttering the rtl with dummy loop notes, which can affect\n      alignment of adjacent labels.  */\n   if (integer_zerop (cond))\n-    expand_stmt (DO_BODY (t));\n+    {\n+      expand_start_null_loop ();\n+      expand_stmt (DO_BODY (t));\n+      expand_end_null_loop ();\n+    }\n   else\n     {\n       emit_nop ();"}, {"sha": "fd0647aef18cc667a278b6a3923c01e8d139411e", "filename": "gcc/stmt.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "patch": "@@ -2294,6 +2294,30 @@ expand_start_loop_continue_elsewhere (exit_flag)\n   return thisloop;\n }\n \n+/* Begin a null, aka do { } while (0) \"loop\".  But since the contents\n+   of said loop can still contain a break, we must frob the loop nest.  */\n+\n+struct nesting *\n+expand_start_null_loop ()\n+{\n+  register struct nesting *thisloop = ALLOC_NESTING ();\n+\n+  /* Make an entry on loop_stack for the loop we are entering.  */\n+\n+  thisloop->next = loop_stack;\n+  thisloop->all = nesting_stack;\n+  thisloop->depth = ++nesting_depth;\n+  thisloop->data.loop.start_label = emit_note (NULL, NOTE_INSN_DELETED);\n+  thisloop->data.loop.end_label = gen_label_rtx ();\n+  thisloop->data.loop.alt_end_label = NULL_RTX;\n+  thisloop->data.loop.continue_label = NULL_RTX;\n+  thisloop->exit_label = thisloop->data.loop.end_label;\n+  loop_stack = thisloop;\n+  nesting_stack = thisloop;\n+\n+  return thisloop;\n+}\n+\n /* Specify the continuation point for a loop started with\n    expand_start_loop_continue_elsewhere.\n    Use this at the point in the code to which a continue statement\n@@ -2620,6 +2644,19 @@ expand_end_loop ()\n   last_expr_type = 0;\n }\n \n+/* Finish a null loop, aka do { } while (0).  */\n+\n+void\n+expand_end_null_loop ()\n+{\n+  do_pending_stack_adjust ();\n+  emit_label (loop_stack->data.loop.end_label);\n+\n+  POPSTACK (loop_stack);\n+\n+  last_expr_type = 0;\n+}\n+\n /* Generate a jump to the current loop's continue-point.\n    This is usually the top of the loop, but may be specified\n    explicitly elsewhere.  If not currently inside a loop,"}, {"sha": "2c8e1fa2cd489e47b898a36df8fa5833654d0ef8", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f0de0c5d1735d0e47fcd9eed2c55c7447be3db7c", "patch": "@@ -2460,8 +2460,10 @@ extern void expand_start_else\t\t\tPARAMS ((void));\n extern void expand_start_elseif\t\t\tPARAMS ((tree));\n extern struct nesting *expand_start_loop \tPARAMS ((int));\n extern struct nesting *expand_start_loop_continue_elsewhere \tPARAMS ((int));\n+extern struct nesting *expand_start_null_loop \tPARAMS ((void));\n extern void expand_loop_continue_here\t\tPARAMS ((void));\n extern void expand_end_loop\t\t\tPARAMS ((void));\n+extern void expand_end_null_loop\t\tPARAMS ((void));\n extern int expand_continue_loop\t\t\tPARAMS ((struct nesting *));\n extern int expand_exit_loop\t\t\tPARAMS ((struct nesting *));\n extern int expand_exit_loop_if_false\t\tPARAMS ((struct nesting *,"}]}