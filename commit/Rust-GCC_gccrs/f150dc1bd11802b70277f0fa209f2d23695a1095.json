{"sha": "f150dc1bd11802b70277f0fa209f2d23695a1095", "node_id": "C_kwDOANBUbNoAKGYxNTBkYzFiZDExODAyYjcwMjc3ZjBmYTIwOWYyZDIzNjk1YTEwOTU", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-02T08:16:44Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-03T03:03:26Z"}, "message": "loongarch: use -mno-check-zero-division as the default for optimized code\n\nInteger division by zero is undefined behavior anyway, and there are\nalready many platforms where neither the GCC port and the hardware do\nanything to trap on division by zero.  So any portable program shall not\nrely on SIGFPE on division by zero, in both theory and practice.  As the\nresult, there is no real reason to cost two additional instructions just\nfor the trap on division by zero with a new ISA.\n\nOne remaining reason to trap on division by zero may be debugging,\nespecially while -fsanitize=integer-divide-by-zero is not implemented\nfor LoongArch yet.  To make debugging easier, keep -mcheck-zero-division\nas the default for -O0 and -Og, but use -mno-check-zero-division as the\ndefault for all other optimization levels.\n\nCo-authored-by: Lulu Cheng <chenglulu@loongson.cn>\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_check_zero_div_p):\n\tNew static function.\n\t(loongarch_idiv_insns): Use loongarch_check_zero_div_p instead\n\tof TARGET_CHECK_ZERO_DIV.\n\t(loongarch_output_division): Likewise.\n\t* common/config/loongarch/loongarch-common.cc\n\t(TARGET_DEFAULT_TARGET_FLAGS): Remove unneeded hook.\n\t* doc/invoke.texi: Update to match the new behavior.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/execute/20101011-1.c (dg-additional-options):\n\tadd -mcheck-zero-division for LoongArch targets.", "tree": {"sha": "9133d8fb81d95414f60ea7a3065c96e4d97bd7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9133d8fb81d95414f60ea7a3065c96e4d97bd7fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f150dc1bd11802b70277f0fa209f2d23695a1095", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYsEHBwAKCRCsqtIOGecQ\n4/o+AQCne784Mw0NOTuZlLh/N6cKz/nuH0IHNKv1npzu+7Hh1wEAimwAztyXkMCC\nE+Q8RY+fZ2RdTqx9qaWl2U5ytio2aQQ=\n=5tUP\n-----END PGP SIGNATURE-----", "payload": "tree 9133d8fb81d95414f60ea7a3065c96e4d97bd7fd\nparent b5c3dd3df381896b09fa76b52cd7a49b9b24afb3\nauthor Xi Ruoyao <xry111@xry111.site> 1656749804 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1656817406 +0800\n\nloongarch: use -mno-check-zero-division as the default for optimized code\n\nInteger division by zero is undefined behavior anyway, and there are\nalready many platforms where neither the GCC port and the hardware do\nanything to trap on division by zero.  So any portable program shall not\nrely on SIGFPE on division by zero, in both theory and practice.  As the\nresult, there is no real reason to cost two additional instructions just\nfor the trap on division by zero with a new ISA.\n\nOne remaining reason to trap on division by zero may be debugging,\nespecially while -fsanitize=integer-divide-by-zero is not implemented\nfor LoongArch yet.  To make debugging easier, keep -mcheck-zero-division\nas the default for -O0 and -Og, but use -mno-check-zero-division as the\ndefault for all other optimization levels.\n\nCo-authored-by: Lulu Cheng <chenglulu@loongson.cn>\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_check_zero_div_p):\n\tNew static function.\n\t(loongarch_idiv_insns): Use loongarch_check_zero_div_p instead\n\tof TARGET_CHECK_ZERO_DIV.\n\t(loongarch_output_division): Likewise.\n\t* common/config/loongarch/loongarch-common.cc\n\t(TARGET_DEFAULT_TARGET_FLAGS): Remove unneeded hook.\n\t* doc/invoke.texi: Update to match the new behavior.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/execute/20101011-1.c (dg-additional-options):\n\tadd -mcheck-zero-division for LoongArch targets.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f150dc1bd11802b70277f0fa209f2d23695a1095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f150dc1bd11802b70277f0fa209f2d23695a1095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f150dc1bd11802b70277f0fa209f2d23695a1095/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "ed3730fce8b6d7c7e406c6d4657e2249e29bcfc6", "filename": "gcc/common/config/loongarch/loongarch-common.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Fcommon%2Fconfig%2Floongarch%2Floongarch-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Fcommon%2Fconfig%2Floongarch%2Floongarch-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Floongarch%2Floongarch-common.cc?ref=f150dc1bd11802b70277f0fa209f2d23695a1095", "patch": "@@ -37,7 +37,4 @@ static const struct default_options loongarch_option_optimization_table[] =\n   { OPT_LEVELS_NONE, 0, NULL, 0 }\n };\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS\tMASK_CHECK_ZERO_DIV\n-\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "d72b256df51a1eaed80f47d655b43c3a1c9424c2", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=f150dc1bd11802b70277f0fa209f2d23695a1095", "patch": "@@ -2102,6 +2102,19 @@ loongarch_load_store_insns (rtx mem, rtx_insn *insn)\n   return loongarch_address_insns (XEXP (mem, 0), mode, might_split_p);\n }\n \n+/* Return true if we need to trap on division by zero.  */\n+\n+static bool\n+loongarch_check_zero_div_p (void)\n+{\n+  /* if -m[no-]check-zero-division is given explicitly.  */\n+  if (target_flags_explicit & MASK_CHECK_ZERO_DIV)\n+    return TARGET_CHECK_ZERO_DIV;\n+\n+  /* if not, don't trap for optimized code except -Og.  */\n+  return !optimize || optimize_debug;\n+}\n+\n /* Return the number of instructions needed for an integer division.  */\n \n int\n@@ -2110,7 +2123,7 @@ loongarch_idiv_insns (machine_mode mode ATTRIBUTE_UNUSED)\n   int count;\n \n   count = 1;\n-  if (TARGET_CHECK_ZERO_DIV)\n+  if (loongarch_check_zero_div_p ())\n     count += 2;\n \n   return count;\n@@ -4051,7 +4064,6 @@ loongarch_do_optimize_block_move_p (void)\n   return !optimize_size;\n }\n \n-\n /* Expand a QI or HI mode atomic memory operation.\n \n    GENERATOR contains a pointer to the gen_* function that generates\n@@ -5263,7 +5275,7 @@ loongarch_output_division (const char *division, rtx *operands)\n   const char *s;\n \n   s = division;\n-  if (TARGET_CHECK_ZERO_DIV)\n+  if (loongarch_check_zero_div_p ())\n     {\n       output_asm_insn (s, operands);\n       s = \"bne\\t%2,%.,1f\\n\\tbreak\\t7\\n1:\";"}, {"sha": "d5ff1018372dbcf09b420782c6b61a8af1d4215b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f150dc1bd11802b70277f0fa209f2d23695a1095", "patch": "@@ -24806,7 +24806,8 @@ Set the cost of branches to roughly @var{n} instructions.\n @itemx -mno-check-zero-divison\n @opindex -mcheck-zero-division\n Trap (do not trap) on integer division by zero.  The default is\n-@option{-mcheck-zero-division}.\n+@option{-mcheck-zero-division} for @option{-O0} or @option{-Og}, and\n+@option{-mno-check-zero-division} for other optimization levels.\n \n @item -mcond-move-int\n @itemx -mno-cond-move-int"}, {"sha": "d2c0f9ab7ece33bb1facce45028e93bc368ee453", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f150dc1bd11802b70277f0fa209f2d23695a1095/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=f150dc1bd11802b70277f0fa209f2d23695a1095", "patch": "@@ -1,6 +1,7 @@\n /* { dg-options \"-fnon-call-exceptions\" } */\n /* With -fnon-call-exceptions 0 / 0 should not be eliminated.  */\n /* { dg-additional-options \"-DSIGNAL_SUPPRESS\" { target { ! signal } } } */\n+/* { dg-additional-options \"-mcheck-zero-division\" { target { loongarch*-*-* } } } */\n \n #ifdef SIGNAL_SUPPRESS\n # define DO_TEST 0"}]}