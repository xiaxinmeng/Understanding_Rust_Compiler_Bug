{"sha": "b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MGJkOGYyMGVhMjNhM2M3NGJhMjNkNWYzYmRjMmE0YjM3ZDFkNg==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2007-05-04T07:13:28Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2007-05-04T07:13:28Z"}, "message": "sched-ebb.c (debug_ebb_dependencies): New static function.\n\n* sched-ebb.c (debug_ebb_dependencies): New static function.\n(init_ready_list): Use it.\n\n* sched-rgn.c (debug_dependencies): Split into 'debug_dependencies ()'\nwith changed signature and 'debug_rgn_dependencies ()'.\n(debug_rgn_dependencies): New static function.\n(init_ready_list): Use it.\n\t\n* sched-int.h (debug_dependencies): Declare.\n\nFrom-SVN: r124409", "tree": {"sha": "3e5b8ff805643ec509c3606e93c551f0092c32d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e5b8ff805643ec509c3606e93c551f0092c32d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/comments", "author": null, "committer": null, "parents": [{"sha": "04749f41afccf46351be136b14fb1580472053c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04749f41afccf46351be136b14fb1580472053c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04749f41afccf46351be136b14fb1580472053c6"}], "stats": {"total": 142, "additions": 90, "deletions": 52}, "files": [{"sha": "2416eef941bce11e6a833189f8f1ebb70a1d59b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "patch": "@@ -1,3 +1,15 @@\n+2007-05-04  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\t* sched-ebb.c (debug_ebb_dependencies): New static function.\n+\t(init_ready_list): Use it.\n+\n+\t* sched-rgn.c (debug_dependencies): Split into 'debug_dependencies ()'\n+\twith changed signature and 'debug_rgn_dependencies ()'.\n+\t(debug_rgn_dependencies): New static function.\n+\t(init_ready_list): Use it.\n+\t\n+\t* sched-int.h (debug_dependencies): Declare.\n+\n 2007-05-04  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* libgcc-std.ver (__ffssi2): Added to GCC_4.3.0 section."}, {"sha": "76c65ee71b766ce9574290e1ee9a310766ebfe07", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "patch": "@@ -86,6 +86,19 @@ schedule_more_p (void)\n   return sched_n_insns < n_insns;\n }\n \n+/* Print dependency information about ebb between HEAD and TAIL.  */\n+static void\n+debug_ebb_dependencies (rtx head, rtx tail)\n+{\n+  fprintf (sched_dump,\n+\t   \";;   --------------- forward dependences: ------------ \\n\");\n+\n+  fprintf (sched_dump, \"\\n;;   --- EBB Dependences --- from bb%d to bb%d \\n\",\n+\t   BLOCK_NUM (head), BLOCK_NUM (tail));\n+\n+  debug_dependencies (head, tail);\n+}\n+\n /* Add all insns that are initially ready to the ready list READY.  Called\n    once before scheduling a set of insns.  */\n \n@@ -99,11 +112,9 @@ init_ready_list (void)\n \n   sched_n_insns = 0;\n \n-#if 0\n   /* Print debugging information.  */\n   if (sched_verbose >= 5)\n-    debug_dependencies ();\n-#endif\n+    debug_ebb_dependencies (NEXT_INSN (prev_head), PREV_INSN (next_tail));\n \n   /* Initialize ready list with all 'ready' insns in target block.\n      Count number of insns in the target block being scheduled.  */"}, {"sha": "e196a81f39d2c01d8bd0d7fa1225910803265f20", "filename": "gcc/sched-int.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "patch": "@@ -877,4 +877,7 @@ extern rtx bb_note (basic_block);\n extern void check_reg_live (bool);\n #endif\n \n+/* Functions in sched-rgn.c.  */\n+extern void debug_dependencies (rtx, rtx);\n+\n #endif /* GCC_SCHED_INT_H */"}, {"sha": "d0d94da399157d9c519547aadf6623172175355a", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 61, "deletions": 49, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=b640bd8f20ea23a3c74ba23d5f3bdc2a4b37d1d6", "patch": "@@ -288,7 +288,6 @@ static bool sets_likely_spilled (rtx);\n static void sets_likely_spilled_1 (rtx, rtx, void *);\n static void add_branch_dependences (rtx, rtx);\n static void compute_block_backward_dependences (int);\n-void debug_dependencies (void);\n \n static void init_regions (void);\n static void schedule_region (int);\n@@ -1946,6 +1945,8 @@ static void check_dead_notes1 (int, sbitmap);\n static int region_head_or_leaf_p (basic_block, int);\n #endif\n \n+static void debug_rgn_dependencies (int);\n+\n /* Return nonzero if there are more insns that should be scheduled.  */\n \n static int\n@@ -1971,7 +1972,7 @@ init_ready_list (void)\n \n   /* Print debugging information.  */\n   if (sched_verbose >= 5)\n-    debug_dependencies ();\n+    debug_rgn_dependencies (target_bb);\n \n   /* Prepare current target block info.  */\n   if (current_nr_blocks > 1)\n@@ -2549,73 +2550,84 @@ free_pending_lists (void)\n     }\n }\n \f\n-/* Print dependences for debugging, callable from debugger.  */\n \n+/* Print dependences for debugging starting from FROM_BB.\n+   Callable from debugger.  */\n void\n-debug_dependencies (void)\n+debug_rgn_dependencies (int from_bb)\n {\n   int bb;\n \n-  fprintf (sched_dump, \";;   --------------- forward dependences: ------------ \\n\");\n-  for (bb = 0; bb < current_nr_blocks; bb++)\n+  fprintf (sched_dump,\n+\t   \";;   --------------- forward dependences: ------------ \\n\");\n+\n+  for (bb = from_bb; bb < current_nr_blocks; bb++)\n     {\n       rtx head, tail;\n-      rtx next_tail;\n-      rtx insn;\n \n       gcc_assert (EBB_FIRST_BB (bb) == EBB_LAST_BB (bb));\n       get_ebb_head_tail (EBB_FIRST_BB (bb), EBB_LAST_BB (bb), &head, &tail);\n-      next_tail = NEXT_INSN (tail);\n       fprintf (sched_dump, \"\\n;;   --- Region Dependences --- b %d bb %d \\n\",\n \t       BB_TO_BLOCK (bb), bb);\n \n-      fprintf (sched_dump, \";;   %7s%6s%6s%6s%6s%6s%14s\\n\",\n-\t       \"insn\", \"code\", \"bb\", \"dep\", \"prio\", \"cost\",\n-\t       \"reservation\");\n-      fprintf (sched_dump, \";;   %7s%6s%6s%6s%6s%6s%14s\\n\",\n-\t       \"----\", \"----\", \"--\", \"---\", \"----\", \"----\",\n-\t       \"-----------\");\n+      debug_dependencies (head, tail);\n+    }\n+}\n \n-      for (insn = head; insn != next_tail; insn = NEXT_INSN (insn))\n-\t{\n-\t  dep_link_t link;\n+/* Print dependencies information for instructions between HEAD and TAIL.\n+   ??? This function would probably fit best in haifa-sched.c.  */\n+void debug_dependencies (rtx head, rtx tail)\n+{\n+  rtx insn;\n+  rtx next_tail = NEXT_INSN (tail);\n+\n+  fprintf (sched_dump, \";;   %7s%6s%6s%6s%6s%6s%14s\\n\",\n+\t   \"insn\", \"code\", \"bb\", \"dep\", \"prio\", \"cost\",\n+\t   \"reservation\");\n+  fprintf (sched_dump, \";;   %7s%6s%6s%6s%6s%6s%14s\\n\",\n+\t   \"----\", \"----\", \"--\", \"---\", \"----\", \"----\",\n+\t   \"-----------\");\n \n-\t  if (! INSN_P (insn))\n+  for (insn = head; insn != next_tail; insn = NEXT_INSN (insn))\n+    {\n+      dep_link_t link;\n+\n+      if (! INSN_P (insn))\n+\t{\n+\t  int n;\n+\t  fprintf (sched_dump, \";;   %6d \", INSN_UID (insn));\n+\t  if (NOTE_P (insn))\n \t    {\n-\t      int n;\n-\t      fprintf (sched_dump, \";;   %6d \", INSN_UID (insn));\n-\t      if (NOTE_P (insn))\n-\t\t{\n-\t\t  n = NOTE_LINE_NUMBER (insn);\n-\t\t  if (n < 0)\n-\t\t    fprintf (sched_dump, \"%s\\n\", GET_NOTE_INSN_NAME (n));\n-\t\t}\n-\t      else\n-\t\tfprintf (sched_dump, \" {%s}\\n\", GET_RTX_NAME (GET_CODE (insn)));\n-\t      continue;\n+\t      n = NOTE_LINE_NUMBER (insn);\n+\t      if (n < 0)\n+\t\tfprintf (sched_dump, \"%s\\n\", GET_NOTE_INSN_NAME (n));\n \t    }\n-\n-\t  fprintf (sched_dump,\n-\t\t   \";;   %s%5d%6d%6d%6d%6d%6d   \",\n-\t\t   (SCHED_GROUP_P (insn) ? \"+\" : \" \"),\n-\t\t   INSN_UID (insn),\n-\t\t   INSN_CODE (insn),\n-\t\t   INSN_BB (insn),\n-\t\t   INSN_DEP_COUNT (insn),\n-\t\t   INSN_PRIORITY (insn),\n-\t\t   insn_cost (insn));\n-\n-\t  if (recog_memoized (insn) < 0)\n-\t    fprintf (sched_dump, \"nothing\");\n \t  else\n-\t    print_reservation (sched_dump, insn);\n-\n-\t  fprintf (sched_dump, \"\\t: \");\n-\t  FOR_EACH_DEP_LINK (link, INSN_FORW_DEPS (insn))\n-\t    fprintf (sched_dump, \"%d \", INSN_UID (DEP_LINK_CON (link)));\n-\t  fprintf (sched_dump, \"\\n\");\n+\t    fprintf (sched_dump, \" {%s}\\n\", GET_RTX_NAME (GET_CODE (insn)));\n+\t  continue;\n \t}\n+\n+      fprintf (sched_dump,\n+\t       \";;   %s%5d%6d%6d%6d%6d%6d   \",\n+\t       (SCHED_GROUP_P (insn) ? \"+\" : \" \"),\n+\t       INSN_UID (insn),\n+\t       INSN_CODE (insn),\n+\t       BLOCK_NUM (insn),\n+\t       INSN_DEP_COUNT (insn),\n+\t       INSN_PRIORITY (insn),\n+\t       insn_cost (insn));\n+\n+      if (recog_memoized (insn) < 0)\n+\tfprintf (sched_dump, \"nothing\");\n+      else\n+\tprint_reservation (sched_dump, insn);\n+\n+      fprintf (sched_dump, \"\\t: \");\n+      FOR_EACH_DEP_LINK (link, INSN_FORW_DEPS (insn))\n+\tfprintf (sched_dump, \"%d \", INSN_UID (DEP_LINK_CON (link)));\n+      fprintf (sched_dump, \"\\n\");\n     }\n+\n   fprintf (sched_dump, \"\\n\");\n }\n \f"}]}