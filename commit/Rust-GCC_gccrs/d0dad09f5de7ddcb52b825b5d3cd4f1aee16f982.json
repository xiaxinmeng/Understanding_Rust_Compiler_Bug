{"sha": "d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982", "node_id": "C_kwDOANBUbNoAKGQwZGFkMDlmNWRlN2RkY2I1MmI4MjViNWQzY2Q0ZjFhZWUxNmY5ODI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2023-01-30T23:46:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-30T23:46:48Z"}, "message": "Merge #1775\n\n1775: Create and use CompilePatternLet visitor for compiling let statments r=philberty a=powerboat9\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>\r\n\r\nImplements and utilizes CompilePatternLet to compile let statements\n\nCo-authored-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "131d1a073723e60be8c01be2a017338cc4fc04fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/131d1a073723e60be8c01be2a017338cc4fc04fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2FboCRBK7hj4Ov3rIwAACr4IAKRPHriH//00IJJKBcs8WAAA\n6zF2F65rbKeyqhU21lM8PKFq+RxtxpARszC0IH85UXPbOPw6w9sWS6fWpH+mt9Jf\nPVx0qxrebsdJ9VLrbpGfWY6Ekyx7S5kFrEKjpNYs50UCGXSv0bDaSGi+nYnmpxTZ\nP4USUQTGuQDFXXQiB2DW7xsUYPDKeGzJLBKXELbxWPYOhKS/k0hoOhizzAdc80HP\ntblMq7i2bYbJiBt2FxaeTe5mB8tA9xKvObIqsqLsLxivsK4nZZfc/ns1YXkbYzA4\nmk4n11k6VMABvp5XcJXSS8iCQySirCHo5EqepGAhJk0tMSzY9B9tJFzDkPKNuXg=\n=yBmt\n-----END PGP SIGNATURE-----\n", "payload": "tree 131d1a073723e60be8c01be2a017338cc4fc04fd\nparent 026e20b1dcc4765f17d593031fe8c1114e4bfaa5\nparent a731476b50301c0f551ec7964d08e669a2b13e66\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1675122408 +0000\ncommitter GitHub <noreply@github.com> 1675122408 +0000\n\nMerge #1775\n\n1775: Create and use CompilePatternLet visitor for compiling let statments r=philberty a=powerboat9\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>\r\n\r\nImplements and utilizes CompilePatternLet to compile let statements\n\nCo-authored-by: Owen Avery <powerboat9.gamer@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026e20b1dcc4765f17d593031fe8c1114e4bfaa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026e20b1dcc4765f17d593031fe8c1114e4bfaa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026e20b1dcc4765f17d593031fe8c1114e4bfaa5"}, {"sha": "a731476b50301c0f551ec7964d08e669a2b13e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a731476b50301c0f551ec7964d08e669a2b13e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a731476b50301c0f551ec7964d08e669a2b13e66"}], "stats": {"total": 176, "additions": 148, "deletions": 28}, "files": [{"sha": "ba8374a17c515f1a9e65fc8d0b1185dd187e11d6", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982", "patch": "@@ -341,5 +341,63 @@ CompilePatternBindings::visit (HIR::GroupedPattern &pattern)\n   pattern.get_item ()->accept_vis (*this);\n }\n \n+void\n+CompilePatternLet::visit (HIR::IdentifierPattern &pattern)\n+{\n+  Bvariable *var = nullptr;\n+  rust_assert (\n+    ctx->lookup_var_decl (pattern.get_pattern_mappings ().get_hirid (), &var));\n+\n+  auto fnctx = ctx->peek_fn ();\n+  if (ty->is_unit ())\n+    {\n+      ctx->add_statement (init_expr);\n+\n+      tree stmt_type = TyTyResolveCompile::compile (ctx, ty);\n+\n+      auto unit_type_init_expr\n+\t= ctx->get_backend ()->constructor_expression (stmt_type, false, {}, -1,\n+\t\t\t\t\t\t       rval_locus);\n+      auto s = ctx->get_backend ()->init_statement (fnctx.fndecl, var,\n+\t\t\t\t\t\t    unit_type_init_expr);\n+      ctx->add_statement (s);\n+    }\n+  else\n+    {\n+      auto s\n+\t= ctx->get_backend ()->init_statement (fnctx.fndecl, var, init_expr);\n+      ctx->add_statement (s);\n+    }\n+}\n+\n+void\n+CompilePatternLet::visit (HIR::WildcardPattern &pattern)\n+{\n+  Bvariable *var = nullptr;\n+  rust_assert (\n+    ctx->lookup_var_decl (pattern.get_pattern_mappings ().get_hirid (), &var));\n+\n+  auto fnctx = ctx->peek_fn ();\n+  if (ty->is_unit ())\n+    {\n+      ctx->add_statement (init_expr);\n+\n+      tree stmt_type = TyTyResolveCompile::compile (ctx, ty);\n+\n+      auto unit_type_init_expr\n+\t= ctx->get_backend ()->constructor_expression (stmt_type, false, {}, -1,\n+\t\t\t\t\t\t       rval_locus);\n+      auto s = ctx->get_backend ()->init_statement (fnctx.fndecl, var,\n+\t\t\t\t\t\t    unit_type_init_expr);\n+      ctx->add_statement (s);\n+    }\n+  else\n+    {\n+      auto s\n+\t= ctx->get_backend ()->init_statement (fnctx.fndecl, var, init_expr);\n+      ctx->add_statement (s);\n+    }\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "5272137662be2ba60b691c9479eba4b90d36f27f", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982", "patch": "@@ -91,5 +91,92 @@ class CompilePatternBindings : public HIRCompileBase,\n   tree match_scrutinee_expr;\n };\n \n+class CompilePatternLet : public HIRCompileBase, public HIR::HIRPatternVisitor\n+{\n+public:\n+  static void Compile (HIR::Pattern *pattern, tree init_expr,\n+\t\t       TyTy::BaseType *ty, Location rval_locus, Context *ctx)\n+  {\n+    CompilePatternLet compiler (ctx, init_expr, ty, rval_locus);\n+    pattern->accept_vis (compiler);\n+  }\n+\n+  void visit (HIR::IdentifierPattern &) override;\n+  void visit (HIR::WildcardPattern &) override;\n+\n+  // check for unimplemented Pattern HIR nodes.\n+  void visit (HIR::GroupedPattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"grouped pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::LiteralPattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"literal pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::PathInExpression &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"path-in-expression pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::QualifiedPathInExpression &pattern) override\n+  {\n+    rust_sorry_at (\n+      pattern.get_locus (),\n+      \"qualified-path-in-expression pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::RangePattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"range pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::ReferencePattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"reference pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::SlicePattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"slice pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::StructPattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"struct pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::TuplePattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"tuple pattern let statements not supported\");\n+  }\n+\n+  void visit (HIR::TupleStructPattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"tuple-struct pattern let statements not supported\");\n+  }\n+\n+protected:\n+  CompilePatternLet (Context *ctx, tree init_expr, TyTy::BaseType *ty,\n+\t\t     Location rval_locus)\n+    : HIRCompileBase (ctx), init_expr (init_expr), ty (ty),\n+      rval_locus (rval_locus)\n+  {}\n+\n+  tree init_expr;\n+  TyTy::BaseType *ty;\n+  Location rval_locus;\n+};\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "04da76b7ecce9327778d2b86748a948eb3c5fd56", "filename": "gcc/rust/backend/rust-compile-stmt.cc", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982/gcc%2Frust%2Fbackend%2Frust-compile-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982/gcc%2Frust%2Fbackend%2Frust-compile-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.cc?ref=d0dad09f5de7ddcb52b825b5d3cd4f1aee16f982", "patch": "@@ -16,6 +16,7 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include \"rust-compile-pattern.h\"\n #include \"rust-compile-stmt.h\"\n #include \"rust-compile-expr.h\"\n \n@@ -53,7 +54,7 @@ CompileStmt::visit (HIR::LetStmt &stmt)\n   if (!stmt.has_init_expr ())\n     return;\n \n-  const HIR::Pattern &stmt_pattern = *stmt.get_pattern ();\n+  HIR::Pattern &stmt_pattern = *stmt.get_pattern ();\n   HirId stmt_id = stmt_pattern.get_pattern_mappings ().get_hirid ();\n \n   TyTy::BaseType *ty = nullptr;\n@@ -65,15 +66,6 @@ CompileStmt::visit (HIR::LetStmt &stmt)\n       return;\n     }\n \n-  Bvariable *var = nullptr;\n-  if (!ctx->lookup_var_decl (stmt_id, &var))\n-    {\n-      // FIXME this should be an assertion instead and use error mark node\n-      rust_fatal_error (stmt.get_locus (),\n-\t\t\t\"failed to lookup compiled variable declaration\");\n-      return;\n-    }\n-\n   tree init = CompileExpr::Compile (stmt.get_init_expr (), ctx);\n   // FIXME use error_mark_node, check that CompileExpr returns error_mark_node\n   // on failure and make this an assertion\n@@ -84,31 +76,14 @@ CompileStmt::visit (HIR::LetStmt &stmt)\n   bool ok = ctx->get_tyctx ()->lookup_type (\n     stmt.get_init_expr ()->get_mappings ().get_hirid (), &actual);\n   rust_assert (ok);\n-  tree stmt_type = TyTyResolveCompile::compile (ctx, ty);\n \n   Location lvalue_locus = stmt.get_pattern ()->get_locus ();\n   Location rvalue_locus = stmt.get_init_expr ()->get_locus ();\n   TyTy::BaseType *expected = ty;\n   init = coercion_site (stmt.get_mappings ().get_hirid (), init, actual,\n \t\t\texpected, lvalue_locus, rvalue_locus);\n \n-  auto fnctx = ctx->peek_fn ();\n-  if (ty->is_unit ())\n-    {\n-      ctx->add_statement (init);\n-\n-      auto unit_type_init_expr\n-\t= ctx->get_backend ()->constructor_expression (stmt_type, false, {}, -1,\n-\t\t\t\t\t\t       rvalue_locus);\n-      auto s = ctx->get_backend ()->init_statement (fnctx.fndecl, var,\n-\t\t\t\t\t\t    unit_type_init_expr);\n-      ctx->add_statement (s);\n-    }\n-  else\n-    {\n-      auto s = ctx->get_backend ()->init_statement (fnctx.fndecl, var, init);\n-      ctx->add_statement (s);\n-    }\n+  CompilePatternLet::Compile (&stmt_pattern, init, ty, rvalue_locus, ctx);\n }\n \n } // namespace Compile"}]}