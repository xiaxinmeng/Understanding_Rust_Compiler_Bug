{"sha": "6c11790df95634c3911e7990770c6dac72eb8961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxMTc5MGRmOTU2MzRjMzkxMWU3OTkwNzcwYzZkYWM3MmViODk2MQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-10-06T19:38:00Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-10-06T19:38:00Z"}, "message": "re PR c++/22488 (C++ frontend generates RECORD_TYPEs with overlapping FIELD_DECLs)\n\n2005-10-06  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/22488\n\t* tree-ssa-structalias.c (check_for_overlaps): New function.\n\t(create_variable_info_for): Use it.\n\nFrom-SVN: r105052", "tree": {"sha": "35204d303db0ac31ddd4180b2a397aabddc209d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35204d303db0ac31ddd4180b2a397aabddc209d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c11790df95634c3911e7990770c6dac72eb8961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c11790df95634c3911e7990770c6dac72eb8961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c11790df95634c3911e7990770c6dac72eb8961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c11790df95634c3911e7990770c6dac72eb8961/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5597a350f4143b458bbc4c9a558d5bac43c141c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5597a350f4143b458bbc4c9a558d5bac43c141c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5597a350f4143b458bbc4c9a558d5bac43c141c5"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "16aeadb53de9d1509b8929dc2e8b4a90e1bcfbd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c11790df95634c3911e7990770c6dac72eb8961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c11790df95634c3911e7990770c6dac72eb8961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c11790df95634c3911e7990770c6dac72eb8961", "patch": "@@ -1,3 +1,9 @@\n+2005-10-06  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\tFix PR tree-optimization/22488\n+\t* tree-ssa-structalias.c (check_for_overlaps): New function.\n+\t(create_variable_info_for): Use it.\n+\n 2005-10-06  Richard Henderson  <rth@redhat.com>\n \n \tPR debug/24070"}, {"sha": "9063b067a5202f74c4badb6b3b1a94d6b72ab18f", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr22488.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c11790df95634c3911e7990770c6dac72eb8961/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22488.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c11790df95634c3911e7990770c6dac72eb8961/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22488.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22488.C?ref=6c11790df95634c3911e7990770c6dac72eb8961", "patch": "@@ -0,0 +1,33 @@\n+// PR tree-optimization/22488\n+// This testcase is really a C++ FE bug in represnting virtual inheritance\n+// It gives the appearance to the middle end that the fields exist twice\n+// which resulted in a very confused structure analyzer\n+// { dg-do compile }\n+// { dg-options \"-O\" }\n+struct X\n+{\n+    int i0, i1;\n+      char c;\n+};\n+\n+struct A\n+{\n+    int i;\n+      char c0, c1;\n+\n+        virtual ~A();\n+};\n+\n+struct B : virtual A {};\n+\n+struct C : B\n+{\n+    X x;\n+\n+      void bar(X y) { x = y; }\n+};\n+\n+void foo()\n+{\n+    C().bar(X());\n+}"}, {"sha": "f6ac3ca5365f740fcde83a3fdd50c3add425e022", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c11790df95634c3911e7990770c6dac72eb8961/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c11790df95634c3911e7990770c6dac72eb8961/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6c11790df95634c3911e7990770c6dac72eb8961", "patch": "@@ -3020,6 +3020,26 @@ make_constraint_to_anything (varinfo_t vi)\n   process_constraint (new_constraint (lhs, rhs));\n }\n \n+\n+/* Return true if FIELDSTACK contains fields that overlap. \n+   FIELDSTACK is assumed to be sorted by offset.  */\n+\n+static bool\n+check_for_overlaps (VEC (fieldoff_s,heap) *fieldstack)\n+{\n+  fieldoff_s *fo = NULL;\n+  unsigned int i;\n+  unsigned int lastoffset = ~0;\n+\n+  for (i = 0; VEC_iterate (fieldoff_s, fieldstack, i, fo); i++)\n+    {\n+      if (fo->offset == lastoffset)\n+\treturn true;\n+      lastoffset = fo->offset;\n+    }\n+  return false;\n+}\n+\n /* Create a varinfo structure for NAME and DECL, and add it to VARMAP.\n    This will also create any varinfo structures necessary for fields\n    of DECL.  */\n@@ -3104,8 +3124,16 @@ create_variable_info_for (tree decl, const char *name)\n \t which will make notokay = true.  In that case, we are going to return\n \t without creating varinfos for the fields anyway, so sorting them is a\n \t waste to boot.  */\n-      if (!notokay)\t\n-\tsort_fieldstack (fieldstack);\n+      if (!notokay)\n+\t{\t\n+\t  sort_fieldstack (fieldstack);\n+\t  /* Due to some C++ FE issues, like PR 22488, we might end up\n+\t     what appear to be overlapping fields even though they,\n+\t     in reality, do not overlap.  Until the C++ FE is fixed,\n+\t     we will simply disable field-sensitivity for these cases.  */\n+\t  notokay = check_for_overlaps (fieldstack);\n+\t}\n+      \n       \n       if (VEC_length (fieldoff_s, fieldstack) != 0)\n \tfo = VEC_index (fieldoff_s, fieldstack, 0);"}]}