{"sha": "aff2c0666a8bee4aa6643c79bd9abd581e166db6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmMmMwNjY2YThiZWU0YWE2NjQzYzc5YmQ5YWJkNTgxZTE2NmRiNg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-06-01T23:36:32Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-06-01T23:36:32Z"}, "message": "sh.h (CPP_SPEC): Add -D__NOMACSAVE__ for -mnomacsave.\n\n\t* sh.h (CPP_SPEC): Add -D__NOMACSAVE__ for -mnomacsave.\n\t(CONDITIONAL_REGISTER_USAGE): Mac registers are call used\n\tfor TARGET_NOMACSAVE.\n\t(NOMACSAVE_BIT): Define.\n\t(TARGET_NOMACSAVE): Define.\n\t(TARGET_SWITCHES): Add \"nomacsave\".\n\nFrom-SVN: r34350", "tree": {"sha": "a516bb82583cc6ba62d20699789b29d1f54218d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a516bb82583cc6ba62d20699789b29d1f54218d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aff2c0666a8bee4aa6643c79bd9abd581e166db6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff2c0666a8bee4aa6643c79bd9abd581e166db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff2c0666a8bee4aa6643c79bd9abd581e166db6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff2c0666a8bee4aa6643c79bd9abd581e166db6/comments", "author": null, "committer": null, "parents": [{"sha": "18fa855f72928698ab520e2f8536c273867096e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fa855f72928698ab520e2f8536c273867096e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fa855f72928698ab520e2f8536c273867096e7"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "8636b7918ab798ad65e8795c69f0dc2307288b5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff2c0666a8bee4aa6643c79bd9abd581e166db6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff2c0666a8bee4aa6643c79bd9abd581e166db6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aff2c0666a8bee4aa6643c79bd9abd581e166db6", "patch": "@@ -1,3 +1,12 @@\n+Fri Jun  2 00:22:52 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sh.h (CPP_SPEC): Add -D__NOMACSAVE__ for -mnomacsave.\n+\t(CONDITIONAL_REGISTER_USAGE): Mac registers are call used\n+\tfor TARGET_NOMACSAVE.\n+\t(NOMACSAVE_BIT): Define.\n+\t(TARGET_NOMACSAVE): Define.\n+\t(TARGET_SWITCHES): Add \"nomacsave\".\n+\n 2000-06-02  Toshiyasu Morita  <toshi.morita@sega.com>\n \n \t* sh.md (untyped_call): Remove excess parameters"}, {"sha": "6f14d3c5bed4701abc9c1eb89c5d8efde9418bb2", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff2c0666a8bee4aa6643c79bd9abd581e166db6/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff2c0666a8bee4aa6643c79bd9abd581e166db6/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=aff2c0666a8bee4aa6643c79bd9abd581e166db6", "patch": "@@ -48,6 +48,7 @@ extern int code_for_indirect_jump_scratch;\n %{m4-single:-D__SH4_SINGLE__} \\\n %{m4:-D__SH4__} \\\n %{!m1:%{!m2:%{!m3:%{!m3e:%{!m4:%{!m4-single:%{!m4-single-only:-D__sh1__}}}}}}} \\\n+%{mnomacsave:-D__NOMACSAVE__} \\\n %{mhitachi:-D__HITACHI__}\"\n \n #define CPP_PREDEFINES \"-D__sh__ -Acpu(sh) -Amachine(sh)\"\n@@ -77,7 +78,7 @@ extern int code_for_indirect_jump_scratch;\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   /* Hitachi saves and restores mac registers on call.  */\t\t\\\n-  if (TARGET_HITACHI)\t\t\t\t\t\t\t\\\n+  if (TARGET_HITACHI && ! TARGET_NOMACSAVE)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       call_used_regs[MACH_REG] = 0;\t\t\t\t\t\\\n       call_used_regs[MACL_REG] = 0;\t\t\t\t\t\\\n@@ -103,6 +104,7 @@ extern int target_flags;\n #define BIGTABLE_BIT  \t(1<<14)\n #define RELAX_BIT\t(1<<15)\n #define HITACHI_BIT     (1<<22)\n+#define NOMACSAVE_BIT   (1<<23)\n #define PADSTRUCT_BIT  (1<<28)\n #define LITTLE_ENDIAN_BIT (1<<29)\n #define IEEE_BIT (1<<30)\n@@ -162,6 +164,9 @@ extern int target_flags;\n /* Nonzero if using Hitachi's calling convention.  */\n #define TARGET_HITACHI \t\t(target_flags & HITACHI_BIT)\n \n+/* Nonzero if not saving macl/mach when using -mhitachi */\n+#define TARGET_NOMACSAVE\t(target_flags & NOMACSAVE_BIT)\n+\n /* Nonzero if padding structures to a multiple of 4 bytes.  This is\n    incompatible with Hitachi's compiler, and gives unusual structure layouts\n    which confuse programmers.\n@@ -185,6 +190,7 @@ extern int target_flags;\n   {\"dalign\",  \tDALIGN_BIT},\t\t\t\\\n   {\"fmovd\",  \tFMOVD_BIT},\t\t\t\\\n   {\"hitachi\",\tHITACHI_BIT},\t\t\t\\\n+  {\"nomacsave\", NOMACSAVE_BIT},\t\t\t\\\n   {\"ieee\",  \tIEEE_BIT},\t\t\t\\\n   {\"isize\", \tISIZE_BIT},\t\t\t\\\n   {\"l\",\t\tLITTLE_ENDIAN_BIT},  \t\t\\"}]}