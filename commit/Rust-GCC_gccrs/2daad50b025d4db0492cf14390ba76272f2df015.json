{"sha": "2daad50b025d4db0492cf14390ba76272f2df015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhYWQ1MGIwMjVkNGRiMDQ5MmNmMTQzOTBiYTc2MjcyZjJkZjAxNQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-06-01T09:42:49Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-06-01T09:42:49Z"}, "message": "[ARC] Prevent moving stores to the frame before the stack adjustment.\n\nIf the stack pointer is needed, emit a special barrier that will prevent\nthe scheduler from moving stores to the frame before the stack adjustment.\n\nFor example:\n\n[snip]\n\tmov_s\tfp,sp \t; frame pointer is set here\n[snip]\n\tst\tr1,[fp,-24]\t; frame pointer is used here\n[snip]\n\tsub_s\tsp,sp,0x20\t; stack pointer adjusted\n\nSo we can easily see that any interrupt between the `st` and `sub`\ninstruction will lead to faulty code as the interrupt routine will use\na faulty sp register, and, potentially, overwriting the value stored\nby 'st' instruction. Thus, adding a scheduler barrier will force the\ncompiler to emit the `sub` instruction before the store one.\n\n2017-06-01  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_expand_prologue): Emit a special barrier\n\tto prevent store reordering.\n\t* config/arc/arc.md (UNSPEC_ARC_STKTIE): Define.\n\t(type): Add block type.\n\t(stack_tie): Define special instruction to be used in\n\texpand_prologue.\n\nFrom-SVN: r248781", "tree": {"sha": "88daa1be2a4a806cb29bc537e8228e901f7240ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88daa1be2a4a806cb29bc537e8228e901f7240ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2daad50b025d4db0492cf14390ba76272f2df015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2daad50b025d4db0492cf14390ba76272f2df015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2daad50b025d4db0492cf14390ba76272f2df015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2daad50b025d4db0492cf14390ba76272f2df015/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f70ebc3d13809a2846a0831e190e5633aa9b688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f70ebc3d13809a2846a0831e190e5633aa9b688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f70ebc3d13809a2846a0831e190e5633aa9b688"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "92a7c0ab6bca7dd8eb6054f1aff8f99ce30f8568", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2daad50b025d4db0492cf14390ba76272f2df015/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2daad50b025d4db0492cf14390ba76272f2df015/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2daad50b025d4db0492cf14390ba76272f2df015", "patch": "@@ -1,3 +1,12 @@\n+2017-06-01  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_expand_prologue): Emit a special barrier\n+\tto prevent store reordering.\n+\t* config/arc/arc.md (UNSPEC_ARC_STKTIE): Define.\n+\t(type): Add block type.\n+\t(stack_tie): Define special instruction to be used in\n+\texpand_prologue.\n+\n 2017-06-01  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (commutative_binary_comparison): Remove 'I'"}, {"sha": "caf01c8b6e135210c0375a51f13b4fdc65f6c833", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2daad50b025d4db0492cf14390ba76272f2df015/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2daad50b025d4db0492cf14390ba76272f2df015/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=2daad50b025d4db0492cf14390ba76272f2df015", "patch": "@@ -2968,7 +2968,15 @@ arc_expand_prologue (void)\n   frame_size_to_allocate -= first_offset;\n   /* Allocate the stack frame.  */\n   if (frame_size_to_allocate > 0)\n-    frame_stack_add ((HOST_WIDE_INT) 0 - frame_size_to_allocate);\n+    {\n+      frame_stack_add ((HOST_WIDE_INT) 0 - frame_size_to_allocate);\n+      /* If the frame pointer is needed, emit a special barrier that\n+\t will prevent the scheduler from moving stores to the frame\n+\t before the stack adjustment.  */\n+      if (arc_frame_pointer_needed ())\n+\temit_insn (gen_stack_tie (stack_pointer_rtx,\n+\t\t\t\t  hard_frame_pointer_rtx));\n+    }\n \n   /* Setup the gp register, if needed.  */\n   if (crtl->uses_pic_offset_table)"}, {"sha": "501413854dde7e3c7575df0360c07488c15781fa", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2daad50b025d4db0492cf14390ba76272f2df015/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2daad50b025d4db0492cf14390ba76272f2df015/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=2daad50b025d4db0492cf14390ba76272f2df015", "patch": "@@ -135,6 +135,7 @@\n   UNSPEC_ARC_VMAC2HU\n   UNSPEC_ARC_VMPY2H\n   UNSPEC_ARC_VMPY2HU\n+  UNSPEC_ARC_STKTIE\n   ])\n \n (define_c_enum \"vunspec\" [\n@@ -205,7 +206,7 @@\n    simd_vcompare, simd_vpermute, simd_vpack, simd_vpack_with_acc,\n    simd_valign, simd_valign_with_acc, simd_vcontrol,\n    simd_vspecial_3cycle, simd_vspecial_4cycle, simd_dma, mul16_em, div_rem,\n-   fpu\"\n+   fpu, block\"\n   (cond [(eq_attr \"is_sfunc\" \"yes\")\n \t (cond [(match_test \"!TARGET_LONG_CALLS_SET && (!TARGET_MEDIUM_CALLS || GET_CODE (PATTERN (insn)) != COND_EXEC)\") (const_string \"call\")\n \t\t(match_test \"flag_pic\") (const_string \"sfunc\")]\n@@ -6606,6 +6607,18 @@\n   (set_attr \"predicable\" \"yes,no,no,yes,no\")\n   (set_attr \"cond\" \"canuse,nocond,nocond,canuse_limm,nocond\")])\n \n+(define_insn \"stack_tie\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK [(match_operand:SI 0 \"register_operand\" \"rb\")\n+\t\t     (match_operand:SI 1 \"register_operand\" \"rb\")]\n+\t\t    UNSPEC_ARC_STKTIE))]\n+  \"\"\n+  \"\"\n+  [(set_attr \"length\" \"0\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"type\" \"block\")]\n+  )\n+\n ;; include the arc-FPX instructions\n (include \"fpx.md\")\n "}]}