{"sha": "07ec81f958b765032f234d08623b9a23c374a09e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlYzgxZjk1OGI3NjUwMzJmMjM0ZDA4NjIzYjlhMjNjMzc0YTA5ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-28T14:53:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-28T14:53:52Z"}, "message": "re PR middle-end/58742 (pointer arithmetic simplification)\n\n2014-01-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58742\n\t* tree-ssa-forwprop.c (associate_plusminus): Handle\n\tpointer subtraction of the form (T)(P + A) - (T)P.\n\nFrom-SVN: r207194", "tree": {"sha": "cbd321c0a8325f0dd1c5d1f02a29798d81d3d147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd321c0a8325f0dd1c5d1f02a29798d81d3d147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07ec81f958b765032f234d08623b9a23c374a09e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ec81f958b765032f234d08623b9a23c374a09e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ec81f958b765032f234d08623b9a23c374a09e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ec81f958b765032f234d08623b9a23c374a09e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5facb998d920cb29d4390c6ab04230b19aa0ff12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5facb998d920cb29d4390c6ab04230b19aa0ff12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5facb998d920cb29d4390c6ab04230b19aa0ff12"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "0dc6d605318f49906e93e70796a6ab4bc4c8d7d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ec81f958b765032f234d08623b9a23c374a09e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ec81f958b765032f234d08623b9a23c374a09e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07ec81f958b765032f234d08623b9a23c374a09e", "patch": "@@ -1,3 +1,9 @@\n+2014-01-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58742\n+\t* tree-ssa-forwprop.c (associate_plusminus): Handle\n+\tpointer subtraction of the form (T)(P + A) - (T)P.\n+\n 2014-01-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.c (arm_new_rtx_costs): Remove useless statement"}, {"sha": "6389811c986f1299c8d643e57a2dbcc0f2920064", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ec81f958b765032f234d08623b9a23c374a09e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ec81f958b765032f234d08623b9a23c374a09e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=07ec81f958b765032f234d08623b9a23c374a09e", "patch": "@@ -2543,6 +2543,7 @@ associate_plusminus (gimple_stmt_iterator *gsi)\n \tCST +- (CST +- A)  ->  CST +- A\n \tCST +- (A +- CST)  ->  CST +- A\n \tA + ~A             ->  -1\n+\t(T)(P + A) - (T)P  -> (T)A\n \n      via commutating the addition and contracting operations to zero\n      by reassociation.  */\n@@ -2646,6 +2647,55 @@ associate_plusminus (gimple_stmt_iterator *gsi)\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t    }\n+\t  else if (CONVERT_EXPR_CODE_P (def_code) && code == MINUS_EXPR\n+\t\t   && TREE_CODE (rhs2) == SSA_NAME)\n+\t    {\n+\t      /* (T)(ptr + adj) - (T)ptr -> (T)adj.  */\n+\t      gimple def_stmt2 = SSA_NAME_DEF_STMT (rhs2);\n+\t      if (TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n+\t\t  && is_gimple_assign (def_stmt2)\n+\t\t  && can_propagate_from (def_stmt2)\n+\t\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt2))\n+\t\t  && TREE_CODE (gimple_assign_rhs1 (def_stmt2)) == SSA_NAME)\n+\t\t{\n+\t\t  /* Now we have (T)A - (T)ptr.  */\n+\t\t  tree ptr = gimple_assign_rhs1 (def_stmt2);\n+\t\t  def_stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (def_stmt));\n+\t\t  if (is_gimple_assign (def_stmt2)\n+\t\t      && gimple_assign_rhs_code (def_stmt2) == POINTER_PLUS_EXPR\n+\t\t      && gimple_assign_rhs1 (def_stmt2) == ptr)\n+\t\t    {\n+\t\t      /* And finally (T)(ptr + X) - (T)ptr.  */\n+\t\t      tree adj = gimple_assign_rhs2 (def_stmt2);\n+\t\t      /* If the conversion of the pointer adjustment to the\n+\t\t         final type requires a sign- or zero-extension we\n+\t\t\t have to punt - it is not defined which one is\n+\t\t\t correct.  */\n+\t\t      if (TYPE_PRECISION (TREE_TYPE (rhs1))\n+\t\t\t  <= TYPE_PRECISION (TREE_TYPE (adj))\n+\t\t\t  || (TREE_CODE (adj) == INTEGER_CST\n+\t\t\t      && tree_int_cst_sign_bit (adj) == 0))\n+\t\t\t{\n+\t\t\t  if (useless_type_conversion_p (TREE_TYPE (rhs1),\n+\t\t\t\t\t\t\t TREE_TYPE (adj)))\n+\t\t\t    {\n+\t\t\t      code = TREE_CODE (adj);\n+\t\t\t      rhs1 = adj;\n+\t\t\t    }\n+\t\t\t  else\n+\t\t\t    {\n+\t\t\t      code = NOP_EXPR;\n+\t\t\t      rhs1 = adj;\n+\t\t\t    }\n+\t\t\t  rhs2 = NULL_TREE;\n+\t\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1,\n+\t\t\t\t\t\t\t  NULL_TREE);\n+\t\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n+\t\t\t  gimple_set_modified (stmt, true);\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n \t}\n     }\n "}]}