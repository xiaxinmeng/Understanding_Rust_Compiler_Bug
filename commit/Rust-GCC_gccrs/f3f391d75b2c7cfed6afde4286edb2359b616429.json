{"sha": "f3f391d75b2c7cfed6afde4286edb2359b616429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmMzkxZDc1YjJjN2NmZWQ2YWZkZTQyODZlZGIyMzU5YjYxNjQyOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:49:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:49:13Z"}, "message": "(expand_binop, expand_unop): Don't make SUBREG for promoted variables as\noperands.\n\nFrom-SVN: r2179", "tree": {"sha": "494724a7ac19e29d559ec8b0c671e7aa560a6576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/494724a7ac19e29d559ec8b0c671e7aa560a6576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f391d75b2c7cfed6afde4286edb2359b616429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f391d75b2c7cfed6afde4286edb2359b616429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f391d75b2c7cfed6afde4286edb2359b616429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f391d75b2c7cfed6afde4286edb2359b616429/comments", "author": null, "committer": null, "parents": [{"sha": "09d7f5a53f6632026262532403b6b7d1e8863c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d7f5a53f6632026262532403b6b7d1e8863c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d7f5a53f6632026262532403b6b7d1e8863c67"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "65fd00871e2ff10e9eaf80b670103b82ea0d5ba4", "filename": "gcc/optabs.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f391d75b2c7cfed6afde4286edb2359b616429/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f391d75b2c7cfed6afde4286edb2359b616429/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=f3f391d75b2c7cfed6afde4286edb2359b616429", "patch": "@@ -474,15 +474,20 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \n \t    /* If an operand is a constant integer, we might as well\n \t       convert it since that is more efficient than using a SUBREG,\n-\t       unlike the case for other operands.  */\n+\t       unlike the case for other operands.  Similarly for\n+\t       SUBREGs that were made due to promoted objects.  */\n \n-\t    if (no_extend && GET_MODE (xop0) != VOIDmode)\n+\t    if (no_extend && GET_MODE (xop0) != VOIDmode\n+\t\t&& ! (GET_CODE (xop0) == SUBREG\n+\t\t      && SUBREG_PROMOTED_VAR_P (xop0)))\n \t      xop0 = gen_rtx (SUBREG, wider_mode,\n \t\t\t      force_reg (GET_MODE (xop0), xop0), 0);\n \t    else\n \t      xop0 = convert_to_mode (wider_mode, xop0, unsignedp);\n \n-\t    if (no_extend && GET_MODE (xop1) != VOIDmode)\n+\t    if (no_extend && GET_MODE (xop1) != VOIDmode\n+\t\t&& ! (GET_CODE (xop1) == SUBREG\n+\t\t      && SUBREG_PROMOTED_VAR_P (xop1)))\n \t      xop1 = gen_rtx (SUBREG, wider_mode,\n \t\t\t\tforce_reg (GET_MODE (xop1), xop1), 0);\n \t    else\n@@ -1133,15 +1138,20 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \n \t      /* If an operand is a constant integer, we might as well\n \t\t convert it since that is more efficient than using a SUBREG,\n-\t\t unlike the case for other operands.  */\n+\t\t unlike the case for other operands.  Similarly for\n+\t\t SUBREGs that were made due to promoted objects.*/\n \n-\t      if (no_extend && GET_MODE (xop0) != VOIDmode)\n+\t      if (no_extend && GET_MODE (xop0) != VOIDmode\n+\t\t&& ! (GET_CODE (xop0) == SUBREG\n+\t\t      && SUBREG_PROMOTED_VAR_P (xop0)))\n \t\txop0 = gen_rtx (SUBREG, wider_mode,\n \t\t\t\tforce_reg (GET_MODE (xop0), xop0), 0);\n \t      else\n \t\txop0 = convert_to_mode (wider_mode, xop0, unsignedp);\n \n-\t      if (no_extend && GET_MODE (xop1) != VOIDmode)\n+\t      if (no_extend && GET_MODE (xop1) != VOIDmode\n+\t\t&& ! (GET_CODE (xop1) == SUBREG\n+\t\t      && SUBREG_PROMOTED_VAR_P (xop1)))\n \t\txop1 = gen_rtx (SUBREG, wider_mode,\n \t\t\t\tforce_reg (GET_MODE (xop1), xop1), 0);\n \t      else\n@@ -1456,11 +1466,14 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n \n \t    /* For certain operations, we need not actually extend\n \t       the narrow operand, as long as we will truncate the\n-\t       results to the same narrowness.  */\n+\t       results to the same narrowness.  But it is faster to\n+\t       convert a SUBREG due to mode promotion.  */\n \n \t    if ((unoptab == neg_optab || unoptab == one_cmpl_optab)\n \t\t&& GET_MODE_SIZE (wider_mode) <= UNITS_PER_WORD\n-\t\t&& class == MODE_INT)\n+\t\t&& class == MODE_INT\n+\t\t&& ! (GET_CODE (xop0) == SUBREG\n+\t\t      && SUBREG_PROMOTED_VAR_P (xop0)))\n \t      xop0 = gen_rtx (SUBREG, wider_mode, force_reg (mode, xop0), 0);\n \t    else\n \t      xop0 = convert_to_mode (wider_mode, xop0, unsignedp);\n@@ -1558,7 +1571,9 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n \n \t      if ((unoptab == neg_optab || unoptab == one_cmpl_optab)\n \t\t  && GET_MODE_SIZE (wider_mode) <= UNITS_PER_WORD\n-\t\t  && class == MODE_INT)\n+\t\t  && class == MODE_INT\n+\t\t  && ! (GET_CODE (xop0) == SUBREG\n+\t\t\t&& SUBREG_PROMOTED_VAR_P (xop0)))\n \t\txop0 = gen_rtx (SUBREG, wider_mode, force_reg (mode, xop0), 0);\n \t      else\n \t\txop0 = convert_to_mode (wider_mode, xop0, unsignedp);"}]}