{"sha": "258325dddf752c578f1da15f63577090b1db2de5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4MzI1ZGRkZjc1MmM1NzhmMWRhMTVmNjM1NzcwOTBiMWRiMmRlNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-13T08:07:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:07:18Z"}, "message": "[Ada] Spurious error on nested instantiation\n\nThis fixes a spurious error given by the compiler for a call to a\nsubprogram which is the formal subprogram parameter of a generic\npackage, if the generic package is instantiated in the body of an\nenclosing generic package with two formal types and two formal\nsubprogram parameter homonyms taking them, and this instantiation takes\none the two formal types as actual, and the enclosing generic package is\ninstantiated on the same actual type with a single actual subprogram\nparameter, and the aforementioned call is overloaded.\n\nIn this case, the renaming generated for the actual subprogram parameter\nin the nested instantiation is ambiguous and must be disambiguated using\nthe corresponding formal parameter of the enclosing instantiation,\notherwise a (sub)type mismatch is created and later subprogram\ndisambiguation is not really possible.\n\n2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Analyze_One_Call): Remove bypass for type\n\tmismatch in nested instantiations.\n\t* sem_ch8.adb (Find_Nearer_Entity): New function.\n\t(Find_Renamed_Entity): Use it to disambiguate the candidates for\n\tthe renaming generated for an instantiation when it is\n\tambiguous.\n\ngcc/testsuite/\n\n\t* gnat.dg/generic_inst9.adb, gnat.dg/generic_inst9.ads,\n\tgnat.dg/generic_inst9_pkg1-operator.ads,\n\tgnat.dg/generic_inst9_pkg1.ads, gnat.dg/generic_inst9_pkg2.adb,\n\tgnat.dg/generic_inst9_pkg2.ads: New testcase.\n\nFrom-SVN: r274343", "tree": {"sha": "ca59335f2e7442884a652520b533a5e973a44d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca59335f2e7442884a652520b533a5e973a44d5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/258325dddf752c578f1da15f63577090b1db2de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258325dddf752c578f1da15f63577090b1db2de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258325dddf752c578f1da15f63577090b1db2de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258325dddf752c578f1da15f63577090b1db2de5/comments", "author": null, "committer": null, "parents": [{"sha": "2e8362bc219d6e900756128450c365dd31045a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8362bc219d6e900756128450c365dd31045a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8362bc219d6e900756128450c365dd31045a7b"}], "stats": {"total": 275, "additions": 210, "deletions": 65}, "files": [{"sha": "34f41fde3f09ccac29df42a8a38ce9683349b19b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -1,3 +1,12 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_One_Call): Remove bypass for type\n+\tmismatch in nested instantiations.\n+\t* sem_ch8.adb (Find_Nearer_Entity): New function.\n+\t(Find_Renamed_Entity): Use it to disambiguate the candidates for\n+\tthe renaming generated for an instantiation when it is\n+\tambiguous.\n+\n 2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat1drv.adb (Adjust_Global_Switches): Do not set"}, {"sha": "c049f9db5883b853ea166f662e8bf8e07442d206", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -3619,59 +3619,6 @@ package body Sem_Ch4 is\n                   Next_Actual (Actual);\n                   Next_Formal (Formal);\n \n-               --  In a complex case where an enclosing generic and a nested\n-               --  generic package, both declared with partially parameterized\n-               --  formal subprograms with the same names, are instantiated\n-               --  with the same type, the types of the actual parameter and\n-               --  that of the formal may appear incompatible at first sight.\n-\n-               --   generic\n-               --      type Outer_T is private;\n-               --      with function Func (Formal : Outer_T)\n-               --                         return ... is <>;\n-\n-               --   package Outer_Gen is\n-               --      generic\n-               --         type Inner_T is private;\n-               --         with function Func (Formal : Inner_T)   --  (1)\n-               --           return ... is <>;\n-\n-               --      package Inner_Gen is\n-               --         function Inner_Func (Formal : Inner_T)  --  (2)\n-               --           return ... is (Func (Formal));\n-               --      end Inner_Gen;\n-               --   end Outer_Generic;\n-\n-               --   package Outer_Inst is new Outer_Gen (Actual_T);\n-               --   package Inner_Inst is new Outer_Inst.Inner_Gen (Actual_T);\n-\n-               --  In the example above, the type of parameter\n-               --  Inner_Func.Formal at (2) is incompatible with the type of\n-               --  Func.Formal at (1) in the context of instantiations\n-               --  Outer_Inst and Inner_Inst. In reality both types are generic\n-               --  actual subtypes renaming base type Actual_T as part of the\n-               --  generic prologues for the instantiations.\n-\n-               --  Recognize this case and add a type conversion to allow this\n-               --  kind of generic actual subtype conformance. Note that this\n-               --  is done only when the call is non-overloaded because the\n-               --  resolution mechanism already has the means to disambiguate\n-               --  similar cases.\n-\n-               elsif not Is_Overloaded (Name (N))\n-                 and then Is_Type (Etype (Actual))\n-                 and then Is_Type (Etype (Formal))\n-                 and then Is_Generic_Actual_Type (Etype (Actual))\n-                 and then Is_Generic_Actual_Type (Etype (Formal))\n-                 and then Base_Type (Etype (Actual)) =\n-                          Base_Type (Etype (Formal))\n-               then\n-                  Rewrite (Actual,\n-                    Convert_To (Etype (Formal), Relocate_Node (Actual)));\n-                  Analyze_And_Resolve (Actual, Etype (Formal));\n-                  Next_Actual (Actual);\n-                  Next_Formal (Formal);\n-\n                --  Handle failed type check\n \n                else"}, {"sha": "8795dc07f958cf44067c532923fc32f87d1c999f", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 130, "deletions": 12, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -6721,6 +6721,15 @@ package body Sem_Ch8 is\n       Old_S : Entity_Id;\n       Inst  : Entity_Id;\n \n+      function Find_Nearer_Entity\n+        (New_S  : Entity_Id;\n+         Old1_S : Entity_Id;\n+         Old2_S : Entity_Id) return Entity_Id;\n+      --  Determine whether one of Old_S1 and Old_S2 is nearer to New_S than\n+      --  the other, and return it if so. Return Empty otherwise. We use this\n+      --  in conjunction with Inherit_Renamed_Profile to simplify later type\n+      --  disambiguation for actual subprograms in instances.\n+\n       function Is_Visible_Operation (Op : Entity_Id) return Boolean;\n       --  If the renamed entity is an implicit operator, check whether it is\n       --  visible because its operand type is properly visible. This check\n@@ -6736,6 +6745,99 @@ package body Sem_Ch8 is\n       --  Determine whether a candidate subprogram is defined within the\n       --  enclosing instance. If yes, it has precedence over outer candidates.\n \n+      --------------------------\n+      --  Find_Nearer_Entity  --\n+      --------------------------\n+\n+      function Find_Nearer_Entity\n+        (New_S  : Entity_Id;\n+         Old1_S : Entity_Id;\n+         Old2_S : Entity_Id) return Entity_Id\n+      is\n+         New_F  : Entity_Id;\n+         Old1_F : Entity_Id;\n+         Old2_F : Entity_Id;\n+         Anc_T  : Entity_Id;\n+\n+      begin\n+         New_F  := First_Formal (New_S);\n+         Old1_F := First_Formal (Old1_S);\n+         Old2_F := First_Formal (Old2_S);\n+\n+         --  The criterion is whether the type of the formals of one of Old1_S\n+         --  and Old2_S is an ancestor subtype of the type of the corresponding\n+         --  formals of New_S while the other is not (we already know that they\n+         --  are all subtypes of the same base type).\n+\n+         --  This makes it possible to find the more correct renamed entity in\n+         --  the case of a generic instantiation nested in an enclosing one for\n+         --  which different formal types get the same actual type, which will\n+         --  in turn make it possible for Inherit_Renamed_Profile to preserve\n+         --  types on formal parameters and ultimately simplify disambiguation.\n+\n+         --  Consider the follow package G:\n+\n+         --    generic\n+         --       type Item_T is private;\n+         --       with function Compare (L, R: Item_T) return Boolean is <>;\n+\n+         --       type Bound_T is private;\n+         --       with function Compare (L, R : Bound_T) return Boolean is <>;\n+         --    package G is\n+         --       ...\n+         --    end G;\n+\n+         --    package body G is\n+         --       package My_Inner is Inner_G (Bound_T);\n+         --       ...\n+         --    end G;\n+\n+         --    with the following package Inner_G:\n+\n+         --    generic\n+         --       type T is private;\n+         --       with function Compare (L, R: T) return Boolean is <>;\n+         --    package Inner_G is\n+         --       function \"<\" (L, R: T) return Boolean is (Compare (L, R));\n+         --    end Inner_G;\n+\n+         --  If G is instantiated on the same actual type with a single Compare\n+         --  function:\n+\n+         --    type T is ...\n+         --    function Compare (L, R : T) return Boolean;\n+         --    package My_G is new (T, T);\n+\n+         --  then the renaming generated for Compare in the inner instantiation\n+         --  is ambiguous: it can rename either of the renamings generated for\n+         --  the outer instantiation. Now if the first one is picked up, then\n+         --  the subtypes of the formal parameters of the renaming will not be\n+         --  preserved in Inherit_Renamed_Profile because they are subtypes of\n+         --  the Bound_T formal type and not of the Item_T formal type, so we\n+         --  need to arrange for the second one to be picked up instead.\n+\n+         while Present (New_F) loop\n+            if Etype (Old1_F) /= Etype (Old2_F) then\n+               Anc_T := Ancestor_Subtype (Etype (New_F));\n+\n+               if Etype (Old1_F) = Anc_T then\n+                  return Old1_S;\n+               elsif Etype (Old2_F) = Anc_T then\n+                  return Old2_S;\n+               end if;\n+            end if;\n+\n+            Next_Formal (New_F);\n+            Next_Formal (Old1_F);\n+            Next_Formal (Old2_F);\n+         end loop;\n+\n+         pragma Assert (No (Old1_F));\n+         pragma Assert (No (Old2_F));\n+\n+         return Empty;\n+      end Find_Nearer_Entity;\n+\n       --------------------------\n       -- Is_Visible_Operation --\n       --------------------------\n@@ -6860,21 +6962,37 @@ package body Sem_Ch8 is\n                      if Present (Inst) then\n                         if Within (It.Nam, Inst) then\n                            if Within (Old_S, Inst) then\n-\n-                              --  Choose the innermost subprogram, which would\n-                              --  have hidden the outer one in the generic.\n-\n-                              if Scope_Depth (It.Nam) <\n-                                Scope_Depth (Old_S)\n-                              then\n-                                 return Old_S;\n-                              else\n-                                 return It.Nam;\n-                              end if;\n+                              declare\n+                                 It_D  : constant Uint := Scope_Depth (It.Nam);\n+                                 Old_D : constant Uint := Scope_Depth (Old_S);\n+                                 N_Ent : Entity_Id;\n+                              begin\n+                                 --  Choose the innermost subprogram, which\n+                                 --  would hide the outer one in the generic.\n+\n+                                 if Old_D > It_D then\n+                                    return Old_S;\n+                                 elsif It_D > Old_D then\n+                                    return It.Nam;\n+                                 end if;\n+\n+                                 --  Otherwise, if we can determine that one\n+                                 --  of the entities is nearer to the renaming\n+                                 --  than the other, choose it. If not, then\n+                                 --  return the newer one as done historically.\n+\n+                                 N_Ent :=\n+                                     Find_Nearer_Entity (New_S, Old_S, It.Nam);\n+                                 if Present (N_Ent) then\n+                                    return N_Ent;\n+                                 else\n+                                    return It.Nam;\n+                                 end if;\n+                              end;\n                            end if;\n \n                         elsif Within (Old_S, Inst) then\n-                           return (Old_S);\n+                           return Old_S;\n \n                         else\n                            return Report_Overload;"}, {"sha": "3ae70d6ee5a17a6429dad8dd1d24d733edf8b8eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -1,3 +1,10 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/generic_inst9.adb, gnat.dg/generic_inst9.ads,\n+\tgnat.dg/generic_inst9_pkg1-operator.ads,\n+\tgnat.dg/generic_inst9_pkg1.ads, gnat.dg/generic_inst9_pkg2.adb,\n+\tgnat.dg/generic_inst9_pkg2.ads: New testcase.\n+\n 2019-08-13  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/anon3.adb, gnat.dg/anon3.ads: New testcase."}, {"sha": "1a5bbaf1978f4c1d1cf57d972226f7786084e942", "filename": "gcc/testsuite/gnat.dg/generic_inst9.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9.adb?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Generic_Inst9 is\n+  procedure Dummy is null;\n+end Generic_Inst9;"}, {"sha": "ace55662aab39360fccf7f2f199670410fa941e8", "filename": "gcc/testsuite/gnat.dg/generic_inst9.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9.ads?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -0,0 +1,11 @@\n+with Generic_Inst9_Pkg2;\n+with Generic_Inst9_Pkg1; use Generic_Inst9_Pkg1;\n+\n+package Generic_Inst9 is\n+\n+  package Partition is new Generic_Inst9_Pkg2\n+    (Item_T => Generic_Inst9_Pkg1.R, Bound_T => Generic_Inst9_Pkg1.R);\n+\n+  procedure Dummy;\n+\n+end Generic_Inst9;"}, {"sha": "f6bb43f130db8f403996f9cd106ad6e799471f86", "filename": "gcc/testsuite/gnat.dg/generic_inst9_pkg1-operator.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg1-operator.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg1-operator.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg1-operator.ads?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -0,0 +1,10 @@\n+generic\n+  type T is private;\n+  with function Compare\n+    (Left, Right: T) return Generic_Inst9_Pkg1.T is <>;\n+package Generic_Inst9_Pkg1.Operator is\n+  function Compare (Left, Right: Integer) return Generic_Inst9_Pkg1.T is\n+    (Equal);\n+  function \"<\"  (Left, Right: T) return Boolean is\n+    (Compare (Left, Right) = Smaller);\n+end Generic_Inst9_Pkg1.Operator;"}, {"sha": "50b62f166de5395685c80737dc96b9f75eebd054", "filename": "gcc/testsuite/gnat.dg/generic_inst9_pkg1.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg1.ads?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -0,0 +1,12 @@\n+\n+package Generic_Inst9_Pkg1 is\n+\n+  type T is (None, Smaller, Equal, Larger);\n+\n+  type R is record\n+    Val : Integer;\n+  end record;\n+\n+  function Compare (Left, Right : R) return T;\n+\n+end;"}, {"sha": "d008888fbe220764a17a92d4b34503c61aa77108", "filename": "gcc/testsuite/gnat.dg/generic_inst9_pkg2.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg2.adb?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -0,0 +1,9 @@\n+with Generic_Inst9_Pkg1.Operator;\n+\n+package body Generic_Inst9_Pkg2 is\n+\n+  package My_Operator is new Generic_Inst9_Pkg1.Operator (Bound_T);\n+\n+  procedure Dummy is begin null; end;\n+\n+end Generic_Inst9_Pkg2;"}, {"sha": "4bd3dccbaefafa9fe4db4069c5a94cbe8737fc86", "filename": "gcc/testsuite/gnat.dg/generic_inst9_pkg2.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258325dddf752c578f1da15f63577090b1db2de5/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst9_pkg2.ads?ref=258325dddf752c578f1da15f63577090b1db2de5", "patch": "@@ -0,0 +1,17 @@\n+with Generic_Inst9_Pkg1;\n+\n+generic\n+\n+  type Item_T is private;\n+  with function Compare\n+    (Left, Right: Item_T) return Generic_Inst9_Pkg1.T is <>;\n+\n+  type Bound_T is private;\n+  with function Compare\n+    (Left, Right : Bound_T) return Generic_Inst9_Pkg1.T is <>;\n+\n+package Generic_Inst9_Pkg2 is\n+\n+  procedure Dummy;\n+\n+end Generic_Inst9_Pkg2;"}]}