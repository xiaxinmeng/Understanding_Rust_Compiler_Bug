{"sha": "57016b4723d40263c4765d0c94ab20a0e3c2335f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcwMTZiNDcyM2Q0MDI2M2M0NzY1ZDBjOTRhYjIwYTBlM2MyMzM1Zg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-09-03T21:09:54Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2002-09-03T21:09:54Z"}, "message": "ia64.h (EXTRA_SPECS): Remove cpp_cpu.\n\n\t* config/ia64/ia64.h (EXTRA_SPECS): Remove cpp_cpu.\n\t(CPP_CPU_SPEC): Remove.\n\t(TARGET_CPU_CPP_BUILTINS): New.\n\t* config/ia64/hpux.h (CPP_PREDEFINES): Remove.\n\t(CPP_SPEC): Remove.\n\t(TARGET_OS_CPP_BUILTINS): New.\n\t* config/ia64/linux.h (CPP_PREDEFINES): Remove.\n\t(TARGET_OS_CPP_BUILTINS): New.\n\t* config/ia64/aix.h (CPP_SPEC): Move some stuff to\n\tTARGET_OS_CPP_BUILTINS.\n\t(CPP_PREDEFINES): Remove.\n\t(CPLUSPLUS_CPP_SPEC): Remove.\n\t(TARGET_OS_CPP_BUILTINS): New.\n\nFrom-SVN: r56771", "tree": {"sha": "db107e82a0b93713e876deb9e1efae6e72ccce45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db107e82a0b93713e876deb9e1efae6e72ccce45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57016b4723d40263c4765d0c94ab20a0e3c2335f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57016b4723d40263c4765d0c94ab20a0e3c2335f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57016b4723d40263c4765d0c94ab20a0e3c2335f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57016b4723d40263c4765d0c94ab20a0e3c2335f/comments", "author": null, "committer": null, "parents": [{"sha": "5e25fa22638feeb77bd830ec219edd34f4abe9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e25fa22638feeb77bd830ec219edd34f4abe9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e25fa22638feeb77bd830ec219edd34f4abe9dd"}], "stats": {"total": 146, "additions": 90, "deletions": 56}, "files": [{"sha": "5b94861025cd6ac92586ee6573af9d1aafb771b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57016b4723d40263c4765d0c94ab20a0e3c2335f", "patch": "@@ -1,3 +1,19 @@\n+2002-09-03  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.h (EXTRA_SPECS): Remove cpp_cpu.\n+\t(CPP_CPU_SPEC): Remove.\n+\t(TARGET_CPU_CPP_BUILTINS): New.\n+\t* config/ia64/hpux.h (CPP_PREDEFINES): Remove.\n+\t(CPP_SPEC): Remove.\n+\t(TARGET_OS_CPP_BUILTINS): New.\n+\t* config/ia64/linux.h (CPP_PREDEFINES): Remove.\n+\t(TARGET_OS_CPP_BUILTINS): New.\n+\t* config/ia64/aix.h (CPP_SPEC): Move some stuff to\n+\tTARGET_OS_CPP_BUILTINS.\n+\t(CPP_PREDEFINES): Remove.\n+\t(CPLUSPLUS_CPP_SPEC): Remove.\n+\t(TARGET_OS_CPP_BUILTINS): New.\n+\n 2002-09-03  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (USER_H): Add ginclude/float.h."}, {"sha": "9d656bdff6e08a2bf74a13b579f40fe269b2d63a", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=57016b4723d40263c4765d0c94ab20a0e3c2335f", "patch": "@@ -71,32 +71,36 @@ Boston, MA 02111-1307, USA.  */\n /* Define this so we can compile MS code for use with WINE.  */\n #define HANDLE_PRAGMA_PACK_PUSH_POP\n \n+/* Target OS builtins.  */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+\tif (iso_flag)\t\t\t\t\t\\\n+\t  builtin_define(\"_ANSI_C_SOURCE\");\t\t\\\n+\tbuiltin_define(\"_AIX\");\t\t\t\t\\\n+\tbuiltin_define(\"_AIX64\");\t\t\t\\\n+\tbuiltin_define(\"unix\");\t\t\t\t\\\n+\tbuiltin_assert(\"system=unix\");\t\t\t\\\n+\tbuiltin_assert(\"system=aix\");\t\t\t\\\n+\tbuiltin_define(\"__64BIT__\");\t\t\t\\\n+\tbuiltin_define(\"_LONG_LONG\");\t\t\t\\\n+\tbuiltin_define(\"_IA64\");\t\t\t\\\n+\tbuiltin_define(\"__int128=__size128_t\");\t\t\\\n+\tif (c_language == clk_cplusplus)\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define(\"_XOPEN_SOURCE=500\");\t\\\n+\t    builtin_define(\"_XOPEN_SOURCE_EXTENDED=1\");\t\\\n+\t    builtin_define(\"_LARGE_FILE_API\");\t\t\\\n+\t    builtin_define(\"_ALL_SOURCE\");\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+} while (0)\n+\n /* A C string constant that tells the GNU CC driver program options to pass to\n    CPP.  It can also specify how to translate options you give to GNU CC into\n    options for GNU CC to pass to the CPP.  */\n \n-/* If -ansi, we need to define _ANSI_C_SOURCE to get the right headers.  */\n #undef CPP_SPEC\n #define CPP_SPEC \"\\\n-%{mcpu=itanium:-D__itanium__} %{mbig-endian:-D__BIG_ENDIAN__} \\\n-%{ansi:-D_ANSI_C_SOURCE} \\\n-%{posix:-D_POSIX_SOURCE} \\\n-%{cpp_cpu}\"\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n-  -D_AIX -D_AIX64 -D_LONGLONG -Dunix \\\n-  -Asystem=unix -Asystem=aix \\\n-  -D__64BIT__ -D_LONG_LONG -D_IA64 -D__int128=__size128_t\"\n-\n-/* The GNU C++ standard library requires that these macros be defined.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC                      \\\n-  \"-D_XOPEN_SOURCE=500                          \\\n-   -D_XOPEN_SOURCE_EXTENDED=1                   \\\n-   -D_LARGE_FILE_API                            \\\n-   -D_ALL_SOURCE                                \\\n-   %{cpp_cpu}\"\n+%{posix:-D_POSIX_SOURCE}\"\n \n /* Define this for shared library support.  */\n "}, {"sha": "968d0ed9147f83c102dc2f802916aa62d1a07155", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=57016b4723d40263c4765d0c94ab20a0e3c2335f", "patch": "@@ -25,26 +25,29 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (IA-64) HP-UX\");\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n-  -D__IA64__ -D__hpux -D__hpux__ -Dhpux -Dunix \\\n-  -D__BIG_ENDIAN__ -D_LONGLONG \\\n-  -Asystem=hpux -Asystem=posix -Asystem=unix \\\n-  -D_UINT128_T\"\n-\n-/* -D__fpreg=long double is needed to compensate for the lack of __fpreg\n-   which is a primitive type in HP C but does not exist in GNU C.  Same\n-   for __float80 and __float128.  These types appear in HP-UX header\n-   files and so must have some definition.  */\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n-  %{mcpu=itanium:-D__itanium__} \\\n-  %{mlp64:-D__LP64__ -D_LP64} \\\n-  %{!ansi:%{!std=c*:%{!std=i*: -D_HPUX_SOURCE -D__STDC_EXT__}}} \\\n-  -D__fpreg=long\\\\ double \\\n-  -D__float80=long\\\\ double \\\n-  -D__float128=long\\\\ double\"\n+/* Target OS builtins.  */\n+/* -D__fpreg=long double is needed to compensate for\n+   the lack of __fpreg which is a primative type in\n+   HP C but does not exist in GNU C.  */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+\tbuiltin_assert(\"system=hpux\");\t\t\t\\\n+\tbuiltin_assert(\"system=posix\");\t\t\t\\\n+\tbuiltin_assert(\"system=unix\");\t\t\t\\\n+\tbuiltin_define_std(\"hpux\");\t\t\t\\\n+\tbuiltin_define_std(\"unix\");\t\t\t\\\n+\tbuiltin_define(\"__IA64__\");\t\t\t\\\n+\tbuiltin_define(\"_LONGLONG\");\t\t\t\\\n+\tbuiltin_define(\"_UINT128_T\");\t\t\t\\\n+\tbuiltin_define(\"__fpreg=long double\");\t\t\\\n+\tbuiltin_define(\"__float80=long double\");\t\\\n+\tbuiltin_define(\"__float128=long double\");\t\\\n+\tif (c_language == clk_cplusplus || !flag_iso)\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define(\"_HPUX_SOURCE\");\t\t\\\n+\t    builtin_define(\"__STDC_EXT__\");\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+} while (0)\n \n #undef  ASM_EXTRA_SPEC\n #define ASM_EXTRA_SPEC \"%{milp32:-milp32} %{mlp64:-mlp64}\""}, {"sha": "bf5b995b157cd8826870c5291b35b877f8da30f9", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=57016b4723d40263c4765d0c94ab20a0e3c2335f", "patch": "@@ -31,14 +31,27 @@ Boston, MA 02111-1307, USA.  */\n \f\n /* Run-time target specifications */\n \n+/* Target CPU builtins.  */\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n+do {\t\t\t\t\t\t\\\n+\tbuiltin_assert(\"cpu=ia64\");\t\t\\\n+\tbuiltin_assert(\"machine=ia64\");\t\t\\\n+\tbuiltin_define(\"__ia64\");\t\t\\\n+\tbuiltin_define(\"__ia64__\");\t\t\\\n+\tbuiltin_define(\"__itanium__\");\t\t\\\n+\tbuiltin_define(\"__ELF__\");\t\t\\\n+\tif (!TARGET_ILP32)\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    builtin_define(\"_LP64\");\t\t\\\n+\t    builtin_define(\"__LP64__\");\t\t\\\n+\t  }\t\t\t\t\t\\\n+\tif (TARGET_BIG_ENDIAN)\t\t\t\\\n+\t  builtin_define(\"__BIG_ENDIAN__\");\t\\\n+} while (0)\n+\n #define EXTRA_SPECS \\\n-  { \"cpp_cpu\", CPP_CPU_SPEC }, \\\n   { \"asm_extra\", ASM_EXTRA_SPEC },\n \n-#define CPP_CPU_SPEC \" \\\n-  -Acpu=ia64 -Amachine=ia64 -D__ia64 -D__ia64__ %{!milp32:-D_LP64 -D__LP64__} \\\n-  -D__ELF__\"\n-\n #define CC1_SPEC \"%(cc1_cpu) \"\n \n #define ASM_EXTRA_SPEC \"\"\n@@ -208,13 +221,6 @@ extern const char *ia64_tls_size_string;\n \f\n /* Driver configuration */\n \n-/* A C string constant that tells the GNU CC driver program options to pass to\n-   CPP.  It can also specify how to translate options you give to GNU CC into\n-   options for GNU CC to pass to the CPP.  */\n-\n-#define CPP_SPEC \\\n-  \"%{mcpu=itanium:-D__itanium__} %{mbig-endian:-D__BIG_ENDIAN__} %(cpp_cpu)\"\n-\n /* A C string constant that tells the GNU CC driver program options to pass to\n    `cc1'.  It can also specify how to translate options you give to GNU CC into\n    options for GNU CC to pass to the `cc1'.  */"}, {"sha": "e1d60f7d8c48731db4bf0ade5f6364648a6436d6", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57016b4723d40263c4765d0c94ab20a0e3c2335f/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=57016b4723d40263c4765d0c94ab20a0e3c2335f", "patch": "@@ -9,10 +9,15 @@\n #undef CC1_SPEC\n #define CC1_SPEC \"%{profile:-p} %{G*}\"\n \n-/* ??? Maybe this should be in sysv4.h?  */\n-#define CPP_PREDEFINES \"\\\n-  -D__gnu_linux__ -D__linux -D__linux__ -D_LONGLONG \\\n-  -Dlinux -Dunix -Asystem=linux\"\n+/* Target OS builtins.  */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+do {\t\t\t\t\t\t\\\n+\tbuiltin_assert(\"system=linux\");\t\t\\\n+\tbuiltin_define_std(\"linux\");\t\t\\\n+\tbuiltin_define_std(\"unix\");\t\t\\\n+\tbuiltin_define(\"__gnu_linux__\");\t\\\n+\tbuiltin_define(\"_LONGLONG\");\t\t\\\n+} while (0)\n \n /* Need to override linux.h STARTFILE_SPEC, since it has crtbeginT.o in.  */\n #undef STARTFILE_SPEC"}]}