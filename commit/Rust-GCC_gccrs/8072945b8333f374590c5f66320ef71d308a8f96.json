{"sha": "8072945b8333f374590c5f66320ef71d308a8f96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3Mjk0NWI4MzMzZjM3NDU5MGM1ZjY2MzIwZWY3MWQzMDhhOGY5Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-02-17T11:17:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-02-17T11:17:15Z"}, "message": "visium.c (machine_libfunc_index): New enum.\n\n\t* config/visium/visium.c (machine_libfunc_index): New enum.\n\t(machine_libfuncs): New structure.\n\t(visium_libfuncs): New static variable.\n\t(TARGET_INIT_LIBFUNCS): Define to...\n\t(visium_init_libfuncs): ...this.  New function.\n\t(expand_block_move_4): Use the appropriate libfunc.\n\t(expand_block_move_2): Likewise.\n\t(expand_block_move_1): Likewise.\n\t(expand_block_set_4): Likewise.\n\t(expand_block_set_2): Likewise.\n\t(expand_block_set_1): Likewise.\n\t(visium_trampoline_init): Likewise.\n\nFrom-SVN: r233488", "tree": {"sha": "eaed7ebfcce77e147922204e4172ba1fcab6b6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaed7ebfcce77e147922204e4172ba1fcab6b6a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8072945b8333f374590c5f66320ef71d308a8f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8072945b8333f374590c5f66320ef71d308a8f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8072945b8333f374590c5f66320ef71d308a8f96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8072945b8333f374590c5f66320ef71d308a8f96/comments", "author": null, "committer": null, "parents": [{"sha": "01c93899e2c390fd53399d43cd15f4adb7f9c945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c93899e2c390fd53399d43cd15f4adb7f9c945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c93899e2c390fd53399d43cd15f4adb7f9c945"}], "stats": {"total": 106, "additions": 88, "deletions": 18}, "files": [{"sha": "2178ae6095d45692562bd3dd71e1990b2abc8bb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8072945b8333f374590c5f66320ef71d308a8f96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8072945b8333f374590c5f66320ef71d308a8f96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8072945b8333f374590c5f66320ef71d308a8f96", "patch": "@@ -1,3 +1,18 @@\n+2016-02-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/visium/visium.c (machine_libfunc_index): New enum.\n+\t(machine_libfuncs): New structure.\n+\t(visium_libfuncs): New static variable.\n+\t(TARGET_INIT_LIBFUNCS): Define to...\n+\t(visium_init_libfuncs): ...this.  New function.\n+\t(expand_block_move_4): Use the appropriate libfunc.\n+\t(expand_block_move_2): Likewise.\n+\t(expand_block_move_1): Likewise.\n+\t(expand_block_set_4): Likewise.\n+\t(expand_block_set_2): Likewise.\n+\t(expand_block_set_1): Likewise.\n+\t(visium_trampoline_init): Likewise.\n+\n 2016-02-17  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.c (msp430_mcu_data): Sync with data from"}, {"sha": "cd28f9bf90af5f5b9aa36ef832ecfe4668593f64", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 73, "deletions": 18, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8072945b8333f374590c5f66320ef71d308a8f96/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8072945b8333f374590c5f66320ef71d308a8f96/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=8072945b8333f374590c5f66320ef71d308a8f96", "patch": "@@ -57,6 +57,41 @@\n /* This file should be included last.  */\n #include \"target-def.h\"\n \n+/* Enumeration of indexes into machine_libfunc_table.  */\n+enum machine_libfunc_index\n+{\n+  MLTI_long_int_memcpy,\n+  MLTI_wrd_memcpy,\n+  MLTI_byt_memcpy,\n+\n+  MLTI_long_int_memset,\n+  MLTI_wrd_memset,\n+  MLTI_byt_memset,\n+\n+  MLTI_set_trampoline_parity,\n+\n+  MLTI_MAX\n+};\n+\n+struct GTY(()) machine_libfuncs\n+{\n+  rtx table[MLTI_MAX];\n+};\n+\n+/* The table of Visium-specific libfuncs.  */\n+static GTY(()) struct machine_libfuncs visium_libfuncs;\n+\n+#define vlt visium_libfuncs.table\n+\n+/* Accessor macros for visium_libfuncs.  */\n+#define long_int_memcpy_libfunc\t\t(vlt[MLTI_long_int_memcpy])\n+#define wrd_memcpy_libfunc\t\t(vlt[MLTI_wrd_memcpy])\n+#define byt_memcpy_libfunc\t\t(vlt[MLTI_byt_memcpy])\n+#define long_int_memset_libfunc\t\t(vlt[MLTI_long_int_memset])\n+#define wrd_memset_libfunc\t\t(vlt[MLTI_wrd_memset])\n+#define byt_memset_libfunc\t\t(vlt[MLTI_byt_memset])\n+#define set_trampoline_parity_libfunc\t(vlt[MLTI_set_trampoline_parity])\n+\n /* Machine specific function data. */\n struct GTY (()) machine_function\n {\n@@ -187,6 +222,8 @@ static bool visium_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n \n static void visium_option_override (void);\n \n+static void visium_init_libfuncs (void);\n+\n static unsigned int visium_reorg (void);\n \n /* Setup the global target hooks structure.  */\n@@ -282,6 +319,9 @@ static unsigned int visium_reorg (void);\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE visium_option_override\n \n+#undef  TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS visium_init_libfuncs\n+\n #undef  TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE visium_conditional_register_usage\n \n@@ -422,6 +462,23 @@ visium_option_override (void)\n   register_pass (&insert_pass_visium_reorg);\n }\n \n+/* Register the Visium-specific libfuncs with the middle-end.  */\n+\n+static void\n+visium_init_libfuncs (void)\n+{\n+  if (!TARGET_BMI)\n+    long_int_memcpy_libfunc = init_one_libfunc (\"__long_int_memcpy\");\n+  wrd_memcpy_libfunc = init_one_libfunc (\"__wrd_memcpy\");\n+  byt_memcpy_libfunc = init_one_libfunc (\"__byt_memcpy\");\n+\n+  long_int_memset_libfunc = init_one_libfunc (\"__long_int_memset\");\n+  wrd_memset_libfunc = init_one_libfunc (\"__wrd_memset\");\n+  byt_memset_libfunc = init_one_libfunc (\"__byt_memset\");\n+\n+  set_trampoline_parity_libfunc = init_one_libfunc (\"__set_trampoline_parity\");\n+}\n+\n /* Return the number of instructions that can issue on the same cycle.  */\n \n static int\n@@ -2226,7 +2283,6 @@ visium_split_cstore (enum rtx_code op_code, rtx op0, rtx op1,\n static void\n expand_block_move_4 (rtx dst, rtx dst_reg, rtx src, rtx src_reg, rtx bytes_rtx)\n {\n-  const rtx sym = gen_rtx_SYMBOL_REF (Pmode, \"__long_int_memcpy\");\n   unsigned HOST_WIDE_INT bytes = UINTVAL (bytes_rtx);\n   unsigned int rem = bytes % 4;\n \n@@ -2250,8 +2306,9 @@ expand_block_move_4 (rtx dst, rtx dst_reg, rtx src, rtx src_reg, rtx bytes_rtx)\n       emit_insn (insn);\n     }\n   else\n-    emit_library_call (sym, LCT_NORMAL, VOIDmode, 3, dst_reg, Pmode, src_reg,\n-\t\t       Pmode,\n+    emit_library_call (long_int_memcpy_libfunc, LCT_NORMAL, VOIDmode, 3,\n+\t\t       dst_reg, Pmode,\n+\t\t       src_reg, Pmode,\n \t\t       convert_to_mode (TYPE_MODE (sizetype),\n \t\t\t\t\tGEN_INT (bytes >> 2),\n \t\t\t\t        TYPE_UNSIGNED (sizetype)),\n@@ -2282,12 +2339,12 @@ expand_block_move_4 (rtx dst, rtx dst_reg, rtx src, rtx src_reg, rtx bytes_rtx)\n static void\n expand_block_move_2 (rtx dst, rtx dst_reg, rtx src, rtx src_reg, rtx bytes_rtx)\n {\n-  const rtx sym = gen_rtx_SYMBOL_REF (Pmode, \"__wrd_memcpy\");\n   unsigned HOST_WIDE_INT bytes = UINTVAL (bytes_rtx);\n   unsigned int rem = bytes % 2;\n \n-  emit_library_call (sym, LCT_NORMAL, VOIDmode, 3, dst_reg, Pmode, src_reg,\n-\t\t     Pmode,\n+  emit_library_call (wrd_memcpy_libfunc, LCT_NORMAL, VOIDmode, 3,\n+\t\t     dst_reg, Pmode,\n+\t\t     src_reg, Pmode,\n \t\t     convert_to_mode (TYPE_MODE (sizetype),\n \t\t\t\t      GEN_INT (bytes >> 1),\n \t\t\t\t      TYPE_UNSIGNED (sizetype)),\n@@ -2309,9 +2366,8 @@ expand_block_move_2 (rtx dst, rtx dst_reg, rtx src, rtx src_reg, rtx bytes_rtx)\n static void\n expand_block_move_1 (rtx dst_reg, rtx src_reg, rtx bytes_rtx)\n {\n-  const rtx sym = gen_rtx_SYMBOL_REF (Pmode, \"__byt_memcpy\");\n-\n-  emit_library_call (sym, LCT_NORMAL, VOIDmode, 3, dst_reg, Pmode,\n+  emit_library_call (byt_memcpy_libfunc, LCT_NORMAL, VOIDmode, 3,\n+\t\t     dst_reg, Pmode,\n \t\t     src_reg, Pmode,\n \t\t     convert_to_mode (TYPE_MODE (sizetype),\n \t\t\t\t      bytes_rtx,\n@@ -2325,12 +2381,12 @@ expand_block_move_1 (rtx dst_reg, rtx src_reg, rtx bytes_rtx)\n static void\n expand_block_set_4 (rtx dst, rtx dst_reg, rtx value_rtx, rtx bytes_rtx)\n {\n-  const rtx sym = gen_rtx_SYMBOL_REF (Pmode, \"__long_int_memset\");\n   unsigned HOST_WIDE_INT bytes = UINTVAL (bytes_rtx);\n   unsigned int rem = bytes % 4;\n \n   value_rtx = convert_to_mode (Pmode, value_rtx, 1);\n-  emit_library_call (sym, LCT_NORMAL, VOIDmode, 3, dst_reg, Pmode,\n+  emit_library_call (long_int_memset_libfunc, LCT_NORMAL, VOIDmode, 3,\n+\t\t     dst_reg, Pmode,\n \t\t     value_rtx, Pmode,\n \t\t     convert_to_mode (TYPE_MODE (sizetype),\n \t\t\t\t      GEN_INT (bytes >> 2),\n@@ -2371,12 +2427,12 @@ expand_block_set_4 (rtx dst, rtx dst_reg, rtx value_rtx, rtx bytes_rtx)\n static void\n expand_block_set_2 (rtx dst, rtx dst_reg, rtx value_rtx, rtx bytes_rtx)\n {\n-  const rtx sym = gen_rtx_SYMBOL_REF (Pmode, \"__wrd_memset\");\n   unsigned HOST_WIDE_INT bytes = UINTVAL (bytes_rtx);\n   unsigned int rem = bytes % 2;\n \n   value_rtx = convert_to_mode (Pmode, value_rtx, 1);\n-  emit_library_call (sym, LCT_NORMAL, VOIDmode, 3, dst_reg, Pmode,\n+  emit_library_call (wrd_memset_libfunc, LCT_NORMAL, VOIDmode, 3,\n+\t\t     dst_reg, Pmode,\n \t\t     value_rtx, Pmode,\n \t\t     convert_to_mode (TYPE_MODE (sizetype),\n \t\t\t\t      GEN_INT (bytes >> 1),\n@@ -2398,10 +2454,9 @@ expand_block_set_2 (rtx dst, rtx dst_reg, rtx value_rtx, rtx bytes_rtx)\n static void\n expand_block_set_1 (rtx dst_reg, rtx value_rtx, rtx bytes_rtx)\n {\n-  const rtx sym = gen_rtx_SYMBOL_REF (Pmode, \"__byt_memset\");\n-\n   value_rtx = convert_to_mode (Pmode, value_rtx, 1);\n-  emit_library_call (sym, LCT_NORMAL, VOIDmode, 3, dst_reg, Pmode,\n+  emit_library_call (byt_memset_libfunc, LCT_NORMAL, VOIDmode, 3,\n+\t\t     dst_reg, Pmode,\n \t\t     value_rtx, Pmode,\n \t\t     convert_to_mode (TYPE_MODE (sizetype),\n \t\t\t\t      bytes_rtx,\n@@ -2552,8 +2607,8 @@ visium_trampoline_init (rtx m_tramp, tree fndecl, rtx static_chain)\n \t\t\t\t\t     GEN_INT (0xffff), NULL_RTX),\n \t\t\t\t 0x04940000));\n \n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__set_trampoline_parity\"),\n-\t\t     LCT_NORMAL, VOIDmode, 1, addr, SImode);\n+  emit_library_call (set_trampoline_parity_libfunc, LCT_NORMAL, VOIDmode, 1,\n+\t\t     addr, SImode);\n }\n \n /* Return true if the current function must have and use a frame pointer.  */"}]}