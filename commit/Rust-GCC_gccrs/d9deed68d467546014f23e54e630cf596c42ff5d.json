{"sha": "d9deed68d467546014f23e54e630cf596c42ff5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkZWVkNjhkNDY3NTQ2MDE0ZjIzZTU0ZTYzMGNmNTk2YzQyZmY1ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-09T12:35:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-09T12:35:28Z"}, "message": "i386.md (ahi?v*3): Set third operand type to TImode.\n\n\t* i386.md (ahi?v*3): Set third operand type to TImode.\n\t* i386.c (ix86_expand_binop_builtin): Extend operand when needed.\n\n\t* simplify-rtx.c (simplify_subreg): Fix conversion from vector into\n\tinteger mode.\n\n\t* rtl.def (VEC_MERGE, VEC_SELECT, VEC_CONCAT, VEC_DUPLICATE):\n\tChange code so they are arithmetic expressions now.\n\t* simplify-rtx.c (simplify_unary_operation, simplify_binary_operation,\n\tsimplify_ternary_operation): Deal with VEC_* expressions.\n\n\t* i386.md (vmaskcmp, pinsrw, movd patterns):  Fix RTL representation.\n\nFrom-SVN: r62600", "tree": {"sha": "703dc561ba11a34e2a0c453032326a663273f8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/703dc561ba11a34e2a0c453032326a663273f8bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9deed68d467546014f23e54e630cf596c42ff5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9deed68d467546014f23e54e630cf596c42ff5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9deed68d467546014f23e54e630cf596c42ff5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9deed68d467546014f23e54e630cf596c42ff5d/comments", "author": null, "committer": null, "parents": [{"sha": "83fd323c4c5fd8f067803028a71870b0dfd8ae30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fd323c4c5fd8f067803028a71870b0dfd8ae30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fd323c4c5fd8f067803028a71870b0dfd8ae30"}], "stats": {"total": 126, "additions": 109, "deletions": 17}, "files": [{"sha": "85981b36788476e9f8317575842c9b34dee54d7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9deed68d467546014f23e54e630cf596c42ff5d", "patch": "@@ -1,3 +1,18 @@\n+Sun Feb  9 13:33:34 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (ahi?v*3): Set third operand type to TImode.\n+\t* i386.c (ix86_expand_binop_builtin): Extend operand when needed.\n+\n+\t* simplify-rtx.c (simplify_subreg): Fix conversion from vector into\n+\tinteger mode.\n+\n+\t* rtl.def (VEC_MERGE, VEC_SELECT, VEC_CONCAT, VEC_DUPLICATE):\n+\tChange code so they are arithmetic expressions now.\n+\t* simplify-rtx.c (simplify_unary_operation, simplify_binary_operation,\n+\tsimplify_ternary_operation): Deal with VEC_* expressions.\n+\n+\t* i386.md (vmaskcmp, pinsrw, movd patterns):  Fix RTL representation.\n+\n Sat Feb  8 00:21:22 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgrtl.c (verify_flow_info):  Use control_flow_insn_p."}, {"sha": "b9b2c32d3dafc3e329bf0b46fd7862d4bf2f5995", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d9deed68d467546014f23e54e630cf596c42ff5d", "patch": "@@ -13434,6 +13434,13 @@ ix86_expand_binop_builtin (icode, arglist, target)\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n \n+  if (GET_MODE (op1) == SImode && mode1 == TImode)\n+    {\n+      rtx x = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_sse2_loadd (x, op1));\n+      op1 = gen_lowpart (TImode, x);\n+    }\n+\n   /* In case the insn wants input operands in modes different from\n      the result, abort.  */\n   if (GET_MODE (op0) != mode0 || GET_MODE (op1) != mode1)"}, {"sha": "97c6d9e6a75b857f68c7dfbc928944ac4b6af3ef", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d9deed68d467546014f23e54e630cf596c42ff5d", "patch": "@@ -19917,7 +19917,7 @@\n \t (match_operator:V4SI 3 \"sse_comparison_operator\"\n \t\t[(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t\t (match_operand:V4SF 2 \"register_operand\" \"x\")])\n-\t (match_dup 1)\n+\t (subreg:V4SI (match_dup 1) 0)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n   \"cmp%D3ss\\t{%2, %0|%0, %2}\"\n@@ -21496,7 +21496,7 @@\n \t (match_operator:V2DI 3 \"sse_comparison_operator\"\n \t\t\t      [(match_operand:V2DF 1 \"register_operand\" \"0\")\n \t\t\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x\")])\n-\t (match_dup 1)\n+\t (subreg:V2DI (match_dup 1) 0)\n \t (const_int 1)))]\n   \"TARGET_SSE2\"\n   \"cmp%D3sd\\t{%2, %0|%0, %2}\"\n@@ -22107,7 +22107,8 @@\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (vec_merge:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n \t\t\t(vec_duplicate:V8HI\n-\t\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))\n+\t\t\t (truncate:HI\n+\t\t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n \t\t\t(match_operand:SI 3 \"immediate_operand\" \"i\")))]\n   \"TARGET_SSE2\"\n   \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\"\n@@ -22256,7 +22257,7 @@\n (define_insn \"ashrv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psraw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22265,7 +22266,7 @@\n (define_insn \"ashrv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrad\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22274,7 +22275,7 @@\n (define_insn \"lshrv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrlw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22283,7 +22284,7 @@\n (define_insn \"lshrv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrld\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22292,7 +22293,7 @@\n (define_insn \"lshrv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psrlq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22301,7 +22302,7 @@\n (define_insn \"ashlv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashift:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psllw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22310,7 +22311,7 @@\n (define_insn \"ashlv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ashift:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"pslld\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22319,7 +22320,7 @@\n (define_insn \"ashlv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (ashift:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"xi\")))]\n+\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n   \"TARGET_SSE2\"\n   \"psllq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -22707,7 +22708,7 @@\n (define_insn \"sse2_loadd\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4SI\n-\t (vec_duplicate:V4HI (match_operand:SI 1 \"nonimmediate_operand\" \"mr\"))\n+\t (vec_duplicate:V4SI (match_operand:SI 1 \"nonimmediate_operand\" \"mr\"))\n \t (const_vector:V4SI [(const_int 0)\n \t\t\t     (const_int 0)\n \t\t\t     (const_int 0)"}, {"sha": "b2087241e171d4daace95cf3121d826618e19d95", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=d9deed68d467546014f23e54e630cf596c42ff5d", "patch": "@@ -1174,24 +1174,24 @@ DEF_RTL_EXPR(CALL_PLACEHOLDER, \"call_placeholder\", \"uuuu\", 'x')\n    that specifies where the parts of the result are taken from.  Set bits\n    indicate operand 0, clear bits indicate operand 1.  The parts are defined\n    by the mode of the vectors.  */\n-DEF_RTL_EXPR(VEC_MERGE, \"vec_merge\", \"eee\", 'x')\n+DEF_RTL_EXPR(VEC_MERGE, \"vec_merge\", \"eee\", '3')\n \n /* Describes an operation that selects parts of a vector.\n    Operands 0 is the source vector, operand 1 is a PARALLEL that contains\n    a CONST_INT for each of the subparts of the result vector, giving the\n    number of the source subpart that should be stored into it.  */\n-DEF_RTL_EXPR(VEC_SELECT, \"vec_select\", \"ee\", 'x')\n+DEF_RTL_EXPR(VEC_SELECT, \"vec_select\", \"ee\", '2')\n \n /* Describes a vector concat operation.  Operands 0 and 1 are the source\n    vectors, the result is a vector that is as long as operands 0 and 1\n    combined and is the concatenation of the two source vectors.  */\n-DEF_RTL_EXPR(VEC_CONCAT, \"vec_concat\", \"ee\", 'x')\n+DEF_RTL_EXPR(VEC_CONCAT, \"vec_concat\", \"ee\", '2')\n \n /* Describes an operation that converts a small vector into a larger one by\n    duplicating the input values.  The output vector mode must have the same\n    submodes as the input vector mode, and the number of output parts must be\n    an integer multiple of the number of input parts.  */\n-DEF_RTL_EXPR(VEC_DUPLICATE, \"vec_duplicate\", \"e\", 'x')\n+DEF_RTL_EXPR(VEC_DUPLICATE, \"vec_duplicate\", \"e\", '1')\n      \n /* Addition with signed saturation */\n DEF_RTL_EXPR(SS_PLUS, \"ss_plus\", \"ee\", 'c')"}, {"sha": "9685de0b6930bea21f0b51a5871dbb1cea84983d", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9deed68d467546014f23e54e630cf596c42ff5d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d9deed68d467546014f23e54e630cf596c42ff5d", "patch": "@@ -372,6 +372,44 @@ simplify_unary_operation (code, mode, op, op_mode)\n   unsigned int width = GET_MODE_BITSIZE (mode);\n   rtx trueop = avoid_constant_pool_reference (op);\n \n+  if (code == VEC_DUPLICATE)\n+    {\n+      if (!VECTOR_MODE_P (mode))\n+\tabort ();\n+      if (GET_MODE (trueop) != VOIDmode\n+\t  && !VECTOR_MODE_P (GET_MODE (trueop))\n+\t  && GET_MODE_INNER (mode) != GET_MODE (trueop))\n+\tabort ();\n+      if (GET_MODE (trueop) != VOIDmode\n+\t  && VECTOR_MODE_P (GET_MODE (trueop))\n+\t  && GET_MODE_INNER (mode) != GET_MODE_INNER (GET_MODE (trueop)))\n+\tabort ();\n+      if (GET_CODE (trueop) == CONST_INT || GET_CODE (trueop) == CONST_DOUBLE\n+\t  || GET_CODE (trueop) == CONST_VECTOR)\n+\t{\n+          int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+          unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n+\t  rtvec v = rtvec_alloc (n_elts);\n+\t  unsigned int i;\n+\n+\t  if (GET_CODE (trueop) != CONST_VECTOR)\n+\t    for (i = 0; i < n_elts; i++)\n+\t      RTVEC_ELT (v, i) = trueop;\n+\t  else\n+\t    {\n+\t      enum machine_mode inmode = GET_MODE (trueop);\n+              int in_elt_size = GET_MODE_SIZE (GET_MODE_INNER (inmode));\n+              unsigned in_n_elts = (GET_MODE_SIZE (inmode) / in_elt_size);\n+\n+\t      if (in_n_elts >= n_elts || n_elts % in_n_elts)\n+\t\tabort ();\n+\t      for (i = 0; i < n_elts; i++)\n+\t        RTVEC_ELT (v, i) = CONST_VECTOR_ELT (trueop, i % in_n_elts);\n+\t    }\n+\t  return gen_rtx_CONST_VECTOR (mode, v);\n+\t}\n+    }\n+\n   /* The order of these tests is critical so that, for example, we don't\n      check the wrong mode (input vs. output) for a conversion operation,\n      such as FIX.  At some point, this should be simplified.  */\n@@ -1476,6 +1514,10 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  /* ??? There are simplifications that can be done.  */\n \t  return 0;\n \n+\tcase VEC_SELECT:\n+\tcase VEC_CONCAT:\n+\t  return 0;\n+\n \tdefault:\n \t  abort ();\n \t}\n@@ -2332,6 +2374,30 @@ simplify_ternary_operation (code, mode, op0_mode, op0, op1, op2)\n \t    }\n \t}\n       break;\n+    case VEC_MERGE:\n+      if (GET_MODE (op0) != mode\n+\t  || GET_MODE (op1) != mode\n+\t  || !VECTOR_MODE_P (mode))\n+\tabort ();\n+      op0 = avoid_constant_pool_reference (op0);\n+      op1 = avoid_constant_pool_reference (op1);\n+      op2 = avoid_constant_pool_reference (op2);\n+      if (GET_CODE (op0) == CONST_VECTOR\n+\t  && GET_CODE (op1) == CONST_VECTOR\n+\t  && GET_CODE (op2) == CONST_INT)\n+\t{\n+          int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+\t  unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n+\t  rtvec v = rtvec_alloc (n_elts);\n+\t  unsigned int i;\n+\n+\t  for (i = 0; i < n_elts; i++)\n+\t    RTVEC_ELT (v, i) = (INTVAL (op2) & (1 << i)\n+\t\t\t\t? CONST_VECTOR_ELT (op0, i)\n+\t\t\t\t: CONST_VECTOR_ELT (op1, i));\n+\t  return gen_rtx_CONST_VECTOR (mode, v);\n+\t}\n+      break;\n \n     default:\n       abort ();\n@@ -2413,13 +2479,16 @@ simplify_subreg (outermode, op, innermode, byte)\n \t\t}\n \t      if (GET_CODE (elt) != CONST_INT)\n \t\treturn NULL_RTX;\n+\t      /* Avoid overflow.  */\n+\t      if (high >> (HOST_BITS_PER_WIDE_INT - shift))\n+\t\treturn NULL_RTX;\n \t      high = high << shift | sum >> (HOST_BITS_PER_WIDE_INT - shift);\n \t      sum = (sum << shift) + INTVAL (elt);\n \t    }\n \t  if (GET_MODE_BITSIZE (outermode) <= HOST_BITS_PER_WIDE_INT)\n \t    return GEN_INT (trunc_int_for_mode (sum, outermode));\n \t  else if (GET_MODE_BITSIZE (outermode) == 2* HOST_BITS_PER_WIDE_INT)\n-\t    return immed_double_const (high, sum, outermode);\n+\t    return immed_double_const (sum, high, outermode);\n \t  else\n \t    return NULL_RTX;\n \t}"}]}