{"sha": "55994b971b02a3808f3776ce66e890ecc1c7b759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU5OTRiOTcxYjAyYTM4MDhmMzc3NmNlNjZlODkwZWNjMWM3Yjc1OQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-06-28T14:13:02Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-06-28T14:13:02Z"}, "message": "Improve Cortex-A53 shift bypass\n\nThe aarch_forward_to_shift_is_not_shifted_reg bypass always returns true\non AArch64 shifted instructions.  This causes the bypass to activate in\ntoo many cases, resulting in slower execution on Cortex-A53 like reported\nin PR79665.\n\nThis patch uses the arm_no_early_alu_shift_dep condition instead which\nimproves the example in PR79665 by ~7%.  Given it is no longer used,\nremove aarch_forward_to_shift_is_not_shifted_reg.  Also remove an\nunnecessary REG_P check.\n\n    gcc/\n\tPR target/79665\n\t* config/arm/aarch-common.c (arm_no_early_alu_shift_dep):\n\tRemove redundant if.\n\t(aarch_forward_to_shift_is_not_shifted_reg): Remove.\n\t* config/arm/aarch-common-protos.h\n\t(aarch_forward_to_shift_is_not_shifted_re): Remove.\n\t* config/arm/cortex-a53.md: Use arm_no_early_alu_shift_dep in bypass.\n\nFrom-SVN: r249740", "tree": {"sha": "dff29e7e29c7b161ca55e3d7bcf2469727c7c2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff29e7e29c7b161ca55e3d7bcf2469727c7c2f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55994b971b02a3808f3776ce66e890ecc1c7b759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55994b971b02a3808f3776ce66e890ecc1c7b759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55994b971b02a3808f3776ce66e890ecc1c7b759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55994b971b02a3808f3776ce66e890ecc1c7b759/comments", "author": null, "committer": null, "parents": [{"sha": "926c786507a69f31253d6c904cf582b9ba162ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926c786507a69f31253d6c904cf582b9ba162ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926c786507a69f31253d6c904cf582b9ba162ded"}], "stats": {"total": 52, "additions": 12, "deletions": 40}, "files": [{"sha": "0ed9bfc8580ff3e9ce21f75ce3c1546ea775f802", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55994b971b02a3808f3776ce66e890ecc1c7b759", "patch": "@@ -1,3 +1,13 @@\n+2017-06-28  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/79665\n+\t* config/arm/aarch-common.c (arm_no_early_alu_shift_dep):\n+\tRemove redundant if.\n+\t(aarch_forward_to_shift_is_not_shifted_reg): Remove.\n+\t* config/arm/aarch-common-protos.h\n+\t(aarch_forward_to_shift_is_not_shifted_re): Remove.\n+\t* config/arm/cortex-a53.md: Use arm_no_early_alu_shift_dep in bypass.\n+\n 2017-06-28  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR ipa/81238"}, {"sha": "a51121193ce3d852e1ced594dfd954559a85999e", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=55994b971b02a3808f3776ce66e890ecc1c7b759", "patch": "@@ -25,7 +25,6 @@\n \n extern int aarch_accumulator_forwarding (rtx_insn *, rtx_insn *);\n extern int aarch_crypto_can_dual_issue (rtx_insn *, rtx_insn *);\n-extern int aarch_forward_to_shift_is_not_shifted_reg (rtx_insn *, rtx_insn *);\n extern bool aarch_rev16_p (rtx);\n extern bool aarch_rev16_shleft_mask_imm_p (rtx, machine_mode);\n extern bool aarch_rev16_shright_mask_imm_p (rtx, machine_mode);"}, {"sha": "979f86e5bedce8a7f89872b00544f4f574685fee", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=55994b971b02a3808f3776ce66e890ecc1c7b759", "patch": "@@ -272,12 +272,7 @@ arm_no_early_alu_shift_dep (rtx producer, rtx consumer)\n     return 0;\n \n   if ((early_op = arm_find_shift_sub_rtx (op)))\n-    {\n-      if (REG_P (early_op))\n-\tearly_op = op;\n-\n-      return !reg_overlap_mentioned_p (value, early_op);\n-    }\n+    return !reg_overlap_mentioned_p (value, early_op);\n \n   return 0;\n }\n@@ -508,38 +503,6 @@ aarch_accumulator_forwarding (rtx_insn *producer, rtx_insn *consumer)\n   return (REGNO (dest) == REGNO (accumulator));\n }\n \n-/* Return nonzero if the CONSUMER instruction is some sort of\n-   arithmetic or logic + shift operation, and the register we are\n-   writing in PRODUCER is not used in a register shift by register\n-   operation.  */\n-\n-int\n-aarch_forward_to_shift_is_not_shifted_reg (rtx_insn *producer,\n-\t\t\t\t\t   rtx_insn *consumer)\n-{\n-  rtx value, op;\n-  rtx early_op;\n-\n-  if (!arm_get_set_operands (producer, consumer, &value, &op))\n-    return 0;\n-\n-  if ((early_op = arm_find_shift_sub_rtx (op)))\n-    {\n-      if (REG_P (early_op))\n-\tearly_op = op;\n-\n-      /* Any other canonicalisation of a shift is a shift-by-constant\n-\t so we don't care.  */\n-      if (GET_CODE (early_op) == ASHIFT)\n-\treturn (!REG_P (XEXP (early_op, 0))\n-\t\t|| !REG_P (XEXP (early_op, 1)));\n-      else\n-\treturn 1;\n-    }\n-\n-  return 0;\n-}\n-\n /* Return non-zero if the consumer (a multiply-accumulate instruction)\n    has an accumulator dependency on the result of the producer (a\n    multiplication instruction) and no other dependency on that result.  */"}, {"sha": "6734e37be49613f3cd55cc49f2410aa14f0ce5f7", "filename": "gcc/config/arm/cortex-a53.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55994b971b02a3808f3776ce66e890ecc1c7b759/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=55994b971b02a3808f3776ce66e890ecc1c7b759", "patch": "@@ -211,7 +211,7 @@\n \n (define_bypass 1 \"cortex_a53_alu*\"\n \t\t \"cortex_a53_alu_shift*\"\n-\t\t \"aarch_forward_to_shift_is_not_shifted_reg\")\n+\t\t \"arm_no_early_alu_shift_dep\")\n \n (define_bypass 2 \"cortex_a53_alu*\"\n \t\t \"cortex_a53_alu_*,cortex_a53_shift*\")"}]}