{"sha": "2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIyYTJlOWUxZWI3NWNjYjFhZGFiYWEyYTY1NzE2YzE3NzA3YTdiOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-18T21:59:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-18T21:59:30Z"}, "message": "trans.c (elaborate_all_entities_for_package): New function extracted from...\n\n\t* gcc-interface/trans.c (elaborate_all_entities_for_package): New\n\tfunction extracted from...  Recurse on packages.\n\t(elaborate_all_entities): ...here.  Call it on packages.\n\nFrom-SVN: r230576", "tree": {"sha": "277c4dbb068d71428faef196ee30a4c0be14c8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/277c4dbb068d71428faef196ee30a4c0be14c8d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9/comments", "author": null, "committer": null, "parents": [{"sha": "642357660ae1f36651519fb41f81a997f5fdae53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642357660ae1f36651519fb41f81a997f5fdae53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642357660ae1f36651519fb41f81a997f5fdae53"}], "stats": {"total": 108, "additions": 79, "deletions": 29}, "files": [{"sha": "77ac16211cc5788cafa912da51b06fc36dd333fa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "patch": "@@ -1,3 +1,9 @@\n+2015-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (elaborate_all_entities_for_package): New\n+\tfunction extracted from...  Recurse on packages.\n+\t(elaborate_all_entities): ...here.  Call it on packages.\n+\n 2015-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (DECL_INVARIANT_P): New macro."}, {"sha": "5ee82ec6f92ab582080cf4d3354b9f0d11474b68", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 73, "deletions": 29, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "patch": "@@ -8353,7 +8353,69 @@ gnat_gimplify_stmt (tree *stmt_p)\n     }\n }\n \f\n-/* Force references to each of the entities in packages withed by GNAT_NODE.\n+/* Force a reference to each of the entities in GNAT_PACKAGE recursively.\n+\n+   This routine is exclusively called in type_annotate mode, to compute DDA\n+   information for types in withed units, for ASIS use.  */\n+\n+static void\n+elaborate_all_entities_for_package (Entity_Id gnat_package)\n+{\n+  Entity_Id gnat_entity;\n+\n+  for (gnat_entity = First_Entity (gnat_package);\n+       Present (gnat_entity);\n+       gnat_entity = Next_Entity (gnat_entity))\n+    {\n+      const Entity_Kind kind = Ekind (gnat_entity);\n+\n+      /* We are interested only in entities visible from the main unit.  */\n+      if (!Is_Public (gnat_entity))\n+\tcontinue;\n+\n+      /* Skip stuff internal to the compiler.  */\n+      if (Convention (gnat_entity) == Convention_Intrinsic)\n+\tcontinue;\n+      if (kind == E_Operator)\n+\tcontinue;\n+      if (IN (kind, Subprogram_Kind) && Is_Intrinsic_Subprogram (gnat_entity))\n+\tcontinue;\n+\n+      /* Skip named numbers.  */\n+      if (IN (kind, Named_Kind))\n+\tcontinue;\n+\n+      /* Skip generic declarations.  */\n+      if (IN (kind, Generic_Unit_Kind))\n+\tcontinue;\n+\n+      /* Skip package bodies.  */\n+      if (kind == E_Package_Body)\n+\tcontinue;\n+\n+      /* Skip limited views that point back to the main unit.  */\n+      if (IN (kind, Incomplete_Kind)\n+\t  && From_Limited_With (gnat_entity)\n+\t  && In_Extended_Main_Code_Unit (Non_Limited_View (gnat_entity)))\n+\tcontinue;\n+\n+      /* Skip types that aren't frozen.  */\n+      if (IN (kind, Type_Kind) && !Is_Frozen (gnat_entity))\n+\tcontinue;\n+\n+      /* Recurse on real packages that aren't in the main unit.  */\n+      if (kind == E_Package)\n+\t{\n+\t  if (No (Renamed_Entity (gnat_entity))\n+\t      && !In_Extended_Main_Code_Unit (gnat_entity))\n+\t    elaborate_all_entities_for_package (gnat_entity);\n+\t}\n+      else\n+\tgnat_to_gnu_entity (gnat_entity, NULL_TREE, 0);\n+    }\n+}\n+\n+/* Force a reference to each of the entities in packages withed by GNAT_NODE.\n    Operate recursively but check that we aren't elaborating something more\n    than once.\n \n@@ -8363,7 +8425,7 @@ gnat_gimplify_stmt (tree *stmt_p)\n static void\n elaborate_all_entities (Node_Id gnat_node)\n {\n-  Entity_Id gnat_with_clause, gnat_entity;\n+  Entity_Id gnat_with_clause;\n \n   /* Process each unit only once.  As we trace the context of all relevant\n      units transitively, including generic bodies, we may encounter the\n@@ -8381,35 +8443,17 @@ elaborate_all_entities (Node_Id gnat_node)\n \t&& !present_gnu_tree (Library_Unit (gnat_with_clause))\n \t&& Library_Unit (gnat_with_clause) != Library_Unit (Cunit (Main_Unit)))\n       {\n-\telaborate_all_entities (Library_Unit (gnat_with_clause));\n+\tNode_Id gnat_unit = Library_Unit (gnat_with_clause);\n+\tEntity_Id gnat_entity = Entity (Name (gnat_with_clause));\n \n-\tif (Ekind (Entity (Name (gnat_with_clause))) == E_Package)\n-\t  {\n-\t    for (gnat_entity = First_Entity (Entity (Name (gnat_with_clause)));\n-\t\t Present (gnat_entity);\n-\t\t gnat_entity = Next_Entity (gnat_entity))\n-\t      if (Is_Public (gnat_entity)\n-\t\t  && Convention (gnat_entity) != Convention_Intrinsic\n-\t\t  && Ekind (gnat_entity) != E_Package\n-\t\t  && Ekind (gnat_entity) != E_Package_Body\n-\t\t  && Ekind (gnat_entity) != E_Operator\n-\t\t  && !(IN (Ekind (gnat_entity), Type_Kind)\n-\t\t       && !Is_Frozen (gnat_entity))\n-\t\t  && !(IN (Ekind (gnat_entity), Incomplete_Kind)\n-\t\t       && From_Limited_With (gnat_entity)\n-\t\t       && In_Extended_Main_Code_Unit\n-\t\t\t  (Non_Limited_View (gnat_entity)))\n-\t\t  && !((Ekind (gnat_entity) == E_Procedure\n-\t\t\t|| Ekind (gnat_entity) == E_Function)\n-\t\t       && Is_Intrinsic_Subprogram (gnat_entity))\n-\t\t  && !IN (Ekind (gnat_entity), Named_Kind)\n-\t\t  && !IN (Ekind (gnat_entity), Generic_Unit_Kind))\n-\t\tgnat_to_gnu_entity (gnat_entity, NULL_TREE, 0);\n-\t  }\n-\telse if (Ekind (Entity (Name (gnat_with_clause))) == E_Generic_Package)\n+\telaborate_all_entities (gnat_unit);\n+\n+\tif (Ekind (gnat_entity) == E_Package)\n+\t  elaborate_all_entities_for_package (gnat_entity);\n+\n+\telse if (Ekind (gnat_entity) == E_Generic_Package)\n \t  {\n-\t    Node_Id gnat_body\n-\t      = Corresponding_Body (Unit (Library_Unit (gnat_with_clause)));\n+\t    Node_Id gnat_body = Corresponding_Body (Unit (gnat_unit));\n \n \t    /* Retrieve compilation unit node of generic body.  */\n \t    while (Present (gnat_body)"}]}