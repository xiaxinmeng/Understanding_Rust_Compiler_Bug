{"sha": "a9ba50984962ded3e7e9aff23bb2ab8266519f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliYTUwOTg0OTYyZGVkM2U3ZTlhZmYyM2JiMmFiODI2NjUxOWY3MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-25T17:28:19Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-25T17:28:19Z"}, "message": "mips-protos.h: Remove the prototypes for mips_setup_incoming_varargs and mips_return_in_memory.\n\n\t* config/mips/mips-protos.h: Remove the prototypes for\n\tmips_setup_incoming_varargs and mips_return_in_memory.\n\t* config/mips/mips.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n\t(mips_setup_incoming_varargs): Match the prototype for\n\tTARGET_SETUP_INCOMING_VARARGS.\n\t(mips_return_in_memory): Make it static.  Add argument fntype.\n\t(mips_strict_argument_naming): New.\n\t* config/mips/mips.h (PROMOTE_PROTOTYPES): Remove.\n\t(PROMOTE_FUNCTION_ARGS): Likewise.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(SETUP_INCOMING_VARARGS): Likewise.\n\t(STRICT_ARGUMENT_NAMING): Likewise.\n\nFrom-SVN: r76569", "tree": {"sha": "39f2d4df9c31469534eedb7fa688914975411f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f2d4df9c31469534eedb7fa688914975411f95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ba50984962ded3e7e9aff23bb2ab8266519f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba50984962ded3e7e9aff23bb2ab8266519f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ba50984962ded3e7e9aff23bb2ab8266519f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba50984962ded3e7e9aff23bb2ab8266519f70/comments", "author": null, "committer": null, "parents": [{"sha": "0c8da56022ba96dde8db25548f149b57e66619f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8da56022ba96dde8db25548f149b57e66619f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8da56022ba96dde8db25548f149b57e66619f6"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "23152f37e2920eecb8f59c9649d13cfd125499f6", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba50984962ded3e7e9aff23bb2ab8266519f70/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba50984962ded3e7e9aff23bb2ab8266519f70/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=a9ba50984962ded3e7e9aff23bb2ab8266519f70", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in mmix.c\n-   Copyright (C) 2000, 2001, 2002, 2003  Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004  Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n This file is part of GCC.\n@@ -60,8 +60,6 @@ extern int mmix_function_value_regno_p (int);\n extern int mmix_data_alignment (tree, int);\n extern int mmix_constant_alignment (tree, int);\n extern int mmix_local_alignment (tree, int);\n-extern void mmix_setup_incoming_varargs\n-  (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n extern void mmix_asm_output_pool_prologue (FILE *, const char *, tree, int);\n extern void mmix_asm_output_aligned_common (FILE *, const char *, int, int);\n extern void mmix_asm_output_aligned_local (FILE *, const char *, int, int);"}, {"sha": "8c74d226537b3bc257832f4bc4ba5e9f7969f790", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba50984962ded3e7e9aff23bb2ab8266519f70/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba50984962ded3e7e9aff23bb2ab8266519f70/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a9ba50984962ded3e7e9aff23bb2ab8266519f70", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for MMIX.\n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n This file is part of GCC.\n@@ -133,9 +133,12 @@ static void mmix_target_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n static void mmix_reorg (void);\n static void mmix_asm_output_mi_thunk\n   (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n+static void mmix_setup_incoming_varargs\n+  (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n static void mmix_file_start (void);\n static void mmix_file_end (void);\n static bool mmix_rtx_costs (rtx, int, int, int *);\n+static rtx mmix_struct_value_rtx (tree, int);\n \n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n@@ -187,6 +190,21 @@ static bool mmix_rtx_costs (rtx, int, int, int *);\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG mmix_reorg\n \n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#if 0\n+/* Apparently not doing TRT if int < register-size.  FIXME: Perhaps\n+   FUNCTION_VALUE and LIBCALL_VALUE needs tweaking as some ports say.  */\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#endif\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX mmix_struct_value_rtx\n+\n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS mmix_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Functions that are expansions for target macros.\n@@ -803,9 +821,11 @@ mmix_function_profiler (FILE *stream ATTRIBUTE_UNUSED,\n   sorry (\"function_profiler support for MMIX\");\n }\n \n-/* SETUP_INCOMING_VARARGS.  */\n+/* Worker function for TARGET_SETUP_INCOMING_VARARGS.  For the moment,\n+   let's stick to pushing argument registers on the stack.  Later, we\n+   can parse all arguments in registers, to improve performance.  */\n \n-void\n+static void\n mmix_setup_incoming_varargs (CUMULATIVE_ARGS *args_so_farp,\n \t\t\t     enum machine_mode mode,\n \t\t\t     tree vartype,\n@@ -2938,6 +2958,15 @@ mmix_intval (rtx x)\n   fatal_insn (\"MMIX Internal: This is not a constant:\", x);\n }\n \n+/* Worker function for TARGET_STRUCT_VALUE_RTX.  */\n+\n+static rtx\n+mmix_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+\t\t       int incoming ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (Pmode, MMIX_STRUCT_VALUE_REGNUM);\n+}\n+\n /*\n  * Local variables:\n  * eval: (c-set-style \"gnu\")"}, {"sha": "19a0afecfee3cfcc46b6523e4c22f0f1f9c99154", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba50984962ded3e7e9aff23bb2ab8266519f70/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba50984962ded3e7e9aff23bb2ab8266519f70/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=a9ba50984962ded3e7e9aff23bb2ab8266519f70", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for MMIX.\n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n This file is part of GCC.\n@@ -293,14 +293,6 @@ extern int target_flags;\n    }\t\t\t\t\t\t\\\n  } while (0)\n \n-#define PROMOTE_FUNCTION_ARGS\n-\n-#if 0\n-/* Apparently not doing TRT if int < register-size.  FIXME: Perhaps\n-   FUNCTION_VALUE and LIBCALL_VALUE needs tweaking as some ports say.  */\n-#define PROMOTE_FUNCTION_RETURN\n-#endif\n-\n /* I'm a little bit undecided about this one.  It might be beneficial to\n    promote all operations.  */\n #define PROMOTE_FOR_CALL_ONLY\n@@ -779,11 +771,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n  mmix_function_value_regno_p (REGNO)\n \n \n-/* Node: Aggregate Return */\n-\n-#define STRUCT_VALUE_REGNUM MMIX_STRUCT_VALUE_REGNUM\n-\n-\n /* Node: Caller Saves */\n /* (empty) */\n \n@@ -806,12 +793,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n /* Node: Varargs */\n \n-/* For the moment, let's stick to pushing argument registers on the stack.\n-   Later, we can parse all arguments in registers, to improve\n-   performance.  */\n-#define SETUP_INCOMING_VARARGS(A, M, T, P, S)\t\\\n- mmix_setup_incoming_varargs(&(A), M, T, &(P), S)\n-\n /* FIXME: This and other EXPAND_BUILTIN_VA_... target macros are not\n    documented, although used by several targets.  */\n #define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\"}]}