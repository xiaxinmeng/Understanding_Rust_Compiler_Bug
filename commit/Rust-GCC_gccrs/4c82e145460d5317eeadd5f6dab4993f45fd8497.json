{"sha": "4c82e145460d5317eeadd5f6dab4993f45fd8497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4MmUxNDU0NjBkNTMxN2VlYWRkNWY2ZGFiNDk5M2Y0NWZkODQ5Nw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-11-30T11:05:05Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-11-30T11:05:05Z"}, "message": "Fix psimode truncation patterns to not accept MEMs that are not valid for\nPSImode.\n\nFrom-SVN: r30721", "tree": {"sha": "1d47ab902ea3c5c82832b4c6c5f260f78f17e998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d47ab902ea3c5c82832b4c6c5f260f78f17e998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c82e145460d5317eeadd5f6dab4993f45fd8497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c82e145460d5317eeadd5f6dab4993f45fd8497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c82e145460d5317eeadd5f6dab4993f45fd8497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c82e145460d5317eeadd5f6dab4993f45fd8497/comments", "author": null, "committer": null, "parents": [{"sha": "4dc9341c04ba95ac73093573f645b49dcff494bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc9341c04ba95ac73093573f645b49dcff494bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc9341c04ba95ac73093573f645b49dcff494bf"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "052c3901241caeb842e06e494c068ca24adc74bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c82e145460d5317eeadd5f6dab4993f45fd8497", "patch": "@@ -1,3 +1,15 @@\n+Tue Nov 30 14:58:14 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/mn10200/mn10200.h (PREDICATE_CODES): Add\n+\tpsimode_truncation_operand.\n+\n+\t* config/mn10200/mn10200.c (psimode_truncation_operand): New\n+\tfunction.  Return true if the operand is either a MEM valid\n+\tfor a PSImode address or not a MEM at all.\n+\n+\t* config/mn10200/mn10200.md (truncsipsi2): Use\n+\tpsimode_truncation_operand.\n+\n 1999-11-30  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* flow.c (flow_nodes_print, flow_loops_cfg_dump): New functions."}, {"sha": "6c39af3cbe3dfbd12178e551df8b7dae204e33a1", "filename": "gcc/config/mn10200/mn10200.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.c?ref=4c82e145460d5317eeadd5f6dab4993f45fd8497", "patch": "@@ -875,6 +875,19 @@ constant_memory_operand (op, mode)\n   return GET_CODE (op) == MEM && CONSTANT_ADDRESS_P (XEXP (op, 0));\n }\n \n+/* Return true if OP is valid for a psi mode truncation operand.\n+   It must either be a memory operand which is valid for a PSImode\n+   address, or if it is not a memory operand at all.  */\n+int\n+psimode_truncation_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return (general_operand (op, mode)\n+\t  && (GET_CODE (op) != MEM\n+\t      || memory_address_p (PSImode, XEXP (op, 0))));\n+}\n+\n /* What (if any) secondary registers are needed to move IN with mode\n    MODE into a register from in register class CLASS. \n "}, {"sha": "abb50c97dff4975125917522385db18e74d2ec20", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=4c82e145460d5317eeadd5f6dab4993f45fd8497", "patch": "@@ -1063,6 +1063,8 @@ do { char dstr[30];\t\t\t\t\t\\\n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n   {\"call_address_operand\",\t{ SYMBOL_REF, REG }},\t\t\t\\\n   {\"constant_memory_operand\",\t{ MEM }},\t\t\t\t\\\n+  {\"psimode_truncation_operand\",{ PLUS, CONST_INT, CONST_DOUBLE, CONST,\t\\\n+\t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG, REG, MEM }},\\\n   {\"extendpsi_operand\",\t\t{ PLUS, CONST_INT, CONST_DOUBLE, CONST,\t\\\n \t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG, REG, MEM }}, \\\n   {\"nshift_operator\",\t\t{ ASHIFTRT, LSHIFTRT, ASHIFT }},\n@@ -1078,5 +1080,6 @@ extern enum reg_class secondary_reload_class ();\n extern char *emit_a_shift ();\n extern char *output_tst ();\n extern int extendpsi_operand ();\n+extern int psimode_truncation_operand ();\n extern struct rtx_def *zero_dreg;\n extern struct rtx_def *zero_areg;"}, {"sha": "3bfb204227dd2ae777b32a71a669745c2831e3ce", "filename": "gcc/config/mn10200/mn10200.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c82e145460d5317eeadd5f6dab4993f45fd8497/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.md?ref=4c82e145460d5317eeadd5f6dab4993f45fd8497", "patch": "@@ -1165,7 +1165,7 @@\n \n (define_insn \"truncsipsi2\"\n   [(set (match_operand:PSI 0 \"general_operand\" \"=a,?d,?*d,da\")\n-\t(truncate:PSI (match_operand:SI 1 \"general_operand\" \"m,?m,?*d,i\")))]\n+\t(truncate:PSI (match_operand:SI 1 \"psimode_truncation_operand\" \"m,?m,?*d,i\")))]\n    \"\"\n    \"@\n    mov %1,%0\n@@ -1785,7 +1785,7 @@\n (define_insn \"\"\n   [(set (match_operand:PSI 0 \"general_operand\" \"=d,d,a,da\")\n \t(truncate:PSI\n-\t  (ashift:SI (match_operand:SI 1 \"general_operand\" \"d,m,m,i\")\n+\t  (ashift:SI (match_operand:SI 1 \"psimode_truncation_operand\" \"d,m,m,i\")\n \t\t     (match_operand:HI 2 \"const_int_operand\" \"i,i,i,i\"))))]\n   \"\"\n   \"*"}]}