{"sha": "091426d3f9058fed52e3ddb28161f720ec89672b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxNDI2ZDNmOTA1OGZlZDUyZTNkZGIyODE2MWY3MjBlYzg5NjcyYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-23T16:02:41Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-23T16:02:41Z"}, "message": "(addsi3, subsi3, andsi3, iorsi3, ashlsi3, ashrsi3, lshrsi3, rotrsi3):\n\nRewrite as expand patterns.\n(rotlsi3): New expand.\n(matchers, and split patterns for above): New.\n(all patterns with shifts): Let arm_print_operand output the \", \" before a\nshift if it is needed.\n(zero_extendqihi2): Delete.\n(zero_extendqisi2): Expand to (and ...) if not memory.\n(movsi): Call arm_split_constant to generate a constant.\n(movqi): Only force a MEM into a register if not reloading.\n(movsf, movdf): If loading a non-immediate floating point value, or loading\nand floating point immediate into integer regs, push the constant straight\ninto the pool.\n(movdf): Get rid of the scratch register.\n(reload_outdf): Rewrite to expand to the two required insns.\n(matcher for movdf): Remove alternative that used scratch register for\nstoring.\n(movxf): rewrite as expand.\n(matcher for movxf): Recognize even when XFmode code is disabled, so that\nprologue insns can be generated.\n(Matcher for reversed conditional jump): Don't match if the mode of the\nCC register is not reversible.\n(prologue): New expand.\n(matcher for multi_register_push insn): New.\n\nFrom-SVN: r7533", "tree": {"sha": "8e6ea6234cfe49006e74b19b535886afcf5131f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e6ea6234cfe49006e74b19b535886afcf5131f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/091426d3f9058fed52e3ddb28161f720ec89672b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091426d3f9058fed52e3ddb28161f720ec89672b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091426d3f9058fed52e3ddb28161f720ec89672b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091426d3f9058fed52e3ddb28161f720ec89672b/comments", "author": null, "committer": null, "parents": [{"sha": "ff4b82d0834e44ffe4600b3a70ae0a84088133b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4b82d0834e44ffe4600b3a70ae0a84088133b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4b82d0834e44ffe4600b3a70ae0a84088133b9"}], "stats": {"total": 761, "additions": 454, "deletions": 307}, "files": [{"sha": "521d765ca5ca4274820416b052a3c93221437a96", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 454, "deletions": 307, "changes": 761, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091426d3f9058fed52e3ddb28161f720ec89672b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091426d3f9058fed52e3ddb28161f720ec89672b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=091426d3f9058fed52e3ddb28161f720ec89672b", "patch": "@@ -31,6 +31,8 @@\n ;;   the mode is MODE_FLOAT\n ;; 1 `cos' operation: operand 0 is the result, operand 1 the parameter,\n ;;   the mode is MODE_FLOAT\n+;; 2 `push multiple' operation: operand 0 is the first register.  Subsequent\n+;;   registers are in parallel (use...) expressions.\n \f\n ;; Attributes\n \n@@ -169,14 +171,45 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t (match_operand:SI 2 \"arm_add_operand\" \"rI,L\")))]\n+(define_expand \"addsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  \"\"\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      arm_split_constant (PLUS, SImode, INTVAL (operands[2]), operands[0],\n+\t\t\t  operands[1],\n+\t\t\t  (reload_in_progress || reload_completed ? 0\n+\t\t\t   : preserve_subexpressions_p ()));\n+      DONE;\n+    }\n+\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  \"! (const_ok_for_arm (INTVAL (operands[2]))\n+      || const_ok_for_arm (-INTVAL (operands[2])))\"\n+  [(clobber (const_int 0))]\n+  \"\n+  arm_split_constant (PLUS, SImode, INTVAL (operands[2]), operands[0],\n+\t\t      operands[1], 0);\n+  DONE;\n+\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"rI,L,?n\")))]\n   \"\"\n   \"@\n    add%?\\\\t%0, %1, %2\n-   sub%?\\\\t%0, %1, #%n2\")\n+   sub%?\\\\t%0, %1, #%n2\n+   #\"\n+[(set_attr \"length\" \"4,4,16\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -398,14 +431,43 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"subsi3\"\n+(define_expand \"subsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"\")\n+\t\t  (match_operand:SI 2 \"s_register_operand\" \"\")))]\n+  \"\"\n+  \"\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      arm_split_constant (MINUS, SImode, INTVAL (operands[1]), operands[0],\n+\t\t\t  operands[2],\n+\t\t\t  (reload_in_progress || reload_completed ? 0\n+\t\t\t   : preserve_subexpressions_p ()));\n+      DONE;\n+    }\n+\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,I\")\n-\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\")))]\n+\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,?n\")\n+\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")))]\n   \"\"\n   \"@\n-   sub%?\\\\t%0, %1, %2\n-   rsb%?\\\\t%0, %2, %1\")\n+   rsb%?\\\\t%0, %2, %1\n+   #\"\n+[(set_attr \"length\" \"4,16\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(minus:SI (match_operand:SI 1 \"const_int_operand\" \"\")\n+\t\t  (match_operand:SI 2 \"s_register_operand\" \"\")))]\n+  \"! const_ok_for_arm (INTVAL (operands[1]))\"\n+  [(clobber (const_int 0))]\n+  \"\n+  arm_split_constant (MINUS, SImode, INTVAL (operands[1]), operands[0],\n+\t\t      operands[2], 0);\n+  DONE;\n+\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -758,14 +820,45 @@\n   \"and%?\\\\t%0, %1, %2\\;and%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n \n-(define_insn \"andsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t(match_operand:SI 2 \"arm_not_operand\" \"rI,K\")))]\n+(define_expand \"andsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  \"\"\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      arm_split_constant (AND, SImode, INTVAL (operands[2]), operands[0],\n+\t\t\t  operands[1],\n+\t\t\t  (reload_in_progress || reload_completed\n+\t\t\t   ? 0 : preserve_subexpressions_p ()));\n+      DONE;\n+    }\n+\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,K,?n\")))]\n   \"\"\n   \"@\n    and%?\\\\t%0, %1, %2\n-   bic%?\\\\t%0, %1, #%B2\")\n+   bic%?\\\\t%0, %1, #%B2\n+   #\"\n+[(set_attr \"length\" \"4,4,16\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  \"! (const_ok_for_arm (INTVAL (operands[2]))\n+      || const_ok_for_arm (~ INTVAL (operands[2])))\"\n+  [(clobber (const_int 0))]\n+  \"\n+  arm_split_constant  (AND, SImode, INTVAL (operands[2]), operands[0],\n+\t\t       operands[1], 0);\n+  DONE;\n+\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -932,13 +1025,44 @@\n   \"orr%?\\\\t%0, %1, %2\\;orr%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n \n-(define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t(match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n+(define_expand \"iorsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  \"\"\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      arm_split_constant (IOR, SImode, INTVAL (operands[2]), operands[0],\n+\t\t\t  operands[1],\n+\t\t\t  (reload_in_progress || reload_completed\n+\t\t\t   ? 0 : preserve_subexpressions_p ()));\n+      DONE;\n+    }\n+\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,?n\")))]\n   \"\"\n-  \"orr%?\\\\t%0, %1, %2\")\n+  \"@\n+   orr%?\\\\t%0, %1, %2\n+   #\"\n+[(set_attr \"length\" \"4,16\")])\n \n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  \"! const_ok_for_arm (INTVAL (operands[2]))\"\n+  [(clobber (const_int 0))]\n+  \"\n+  arm_split_constant (IOR, SImode, INTVAL (operands[2]), operands[0],\n+\t\t      operands[1], 0);\n+  DONE;\n+\")\n+  \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n@@ -1145,99 +1269,132 @@\n \f\n ;; Shift and rotation insns\n \n-(define_insn \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(ashift:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")))]\n+(define_expand \"ashlsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ashift:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n   \"\"\n-  \"mov%?\\\\t%0, %1, asl %2\")\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+    {\n+      emit_insn (gen_movsi (operands[0], const0_rtx));\n+      DONE;\n+    }\n+\")\n \n-(define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")))]\n+(define_expand \"ashrsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n   \"\"\n-  \"mov%?\\\\t%0, %1, asr %2\")\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+    operands[2] = GEN_INT (31);\n+\")\n \n-(define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")))]\n+(define_expand \"lshrsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n   \"\"\n-  \"mov%?\\\\t%0, %1, lsr %2\")\n-\n-;; rotlsi3 is not defined yet to see what happens\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+    {\n+      emit_insn (gen_movsi (operands[0], const0_rtx));\n+      DONE;\n+    }\n+\")\n \n-(define_insn \"rotrsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(rotatert:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"r,n\")))]\n+(define_expand \"rotlsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(rotatert:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n   \"\"\n-  \"*\n-  switch (which_alternative)\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT ((32 - INTVAL (operands[2])) % 32);\n+  else\n     {\n-    case 0:\n-      return \\\"mov%?\\\\t%0, %1, ror %2\\\";\n-    case 1:\n-      if (INTVAL(operands[2]) > 31)\n-\toperands[2] = GEN_INT (INTVAL (operands[2]) % 32);\n-      output_asm_insn (\\\"mov%?\\\\t%0, %1, ror %2\\\", operands);\n-      return \\\"\\\";\n+      rtx reg = gen_reg_rtx (SImode);\n+      emit_insn (gen_subsi3 (reg, GEN_INT (32), operands[2]));\n+      operands[2] = reg;\n     }\n \")\n \n+(define_expand \"rotrsi3\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(rotatert:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n+  \"\"\n+  \"\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) > 31)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) % 32);\n+\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(match_operator:SI 3 \"shift_operator\"\n+\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t  (match_operand:SI 2 \"reg_or_int_operand\" \"rM\")]))]\n+  \"\"\n+  \"mov%?\\\\t%0, %1%S3\")\n+\n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (match_operator:SI 1 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn\")])\n+\t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(match_op_dup 1 [(match_dup 2) (match_dup 3)]))]\n+\t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n   \"\"\n-  \"mov%?s\\\\t%0, %2, %S1\"\n+  \"mov%?s\\\\t%0, %1%S3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (match_operator:SI 1 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn\")])\n+\t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"mov%?s\\\\t%0, %2, %S1\"\n+  \"mov%?s\\\\t%0, %1%S3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(not:SI (match_operator:SI 1 \"shift_operator\"\n-\t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t  (match_operand:SI 3 \"arm_rhs_operand\" \"rn\")])))]\n+\t(not:SI (match_operator:SI 3 \"shift_operator\"\n+\t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])))]\n   \"\"\n-  \"mvn%?\\\\t%0, %2, %S1\")\n+  \"mvn%?\\\\t%0, %1%S3\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (not:SI (match_operator:SI 1 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn\")]))\n+\t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(not:SI (match_op_dup 1 [(match_dup 2) (match_dup 3)])))]\n+\t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n   \"\"\n-  \"mvn%?s\\\\t%0, %2, %S1\"\n+  \"mvn%?s\\\\t%0, %1%S3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (not:SI (match_operator:SI 1 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn\")]))\n+\t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"mvn%?s\\\\t%0, %2, %S1\"\n+  \"mvn%?s\\\\t%0, %1%S3\"\n [(set_attr \"conds\" \"set\")])\n \n \f\n@@ -1566,70 +1723,52 @@\n [(set_attr \"length\" \"8\")])\n \n (define_expand \"zero_extendhisi2\"\n-  [(set (match_dup 2)\n-\t(ashift:SI (match_operand:HI 1 \"s_register_operand\" \"\")\n-\t\t   (const_int 16)))\n+  [(set (match_dup 2) (ashift:SI (match_operand:HI 1 \"s_register_operand\" \"\")\n+\t\t\t\t (const_int 16)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(lshiftrt:SI (match_dup 2)\n-\t\t     (const_int 16)))]\n+\t(lshiftrt:SI (match_dup 2) (const_int 16)))]\n   \"\"\n   \"\n { operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n-(define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")\n-\t(zero_extend:HI\n-\t (match_operand:QI 1 \"s_register_operand\" \"r\")))]\n-  \"\"\n-  \"and%?\\\\t%0, %1, #255\\\\t%@ zero_extendqihi2\")\n-\n-(define_insn \"\"\n-  [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (match_operand:QI 1 \"s_register_operand\" \"r\")\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(zero_extend:HI (match_dup 1)))]\n-  \"\"\n-  \"and%?s\\\\t%0, %1, #255\"\n-[(set_attr \"conds\" \"set\")])\n-\n-(define_insn \"\"\n-  [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (match_operand:QI 0 \"s_register_operand\" \"r\")\n-\t\t\t (const_int 0)))]\n-  \"\"\n-  \"tst%?\\\\t%0, #255\"\n-[(set_attr \"conds\" \"set\")])\n+  operands[2] = gen_reg_rtx (SImode); \n+}\")\n \n-(define_insn \"zero_extendqisi2\"\n+(define_expand \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(zero_extend:SI\n \t (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"\"\n-  \"@\n-   and%?\\\\t%0, %1, #255\\\\t%@ zero_extendqisi2\n-   ldr%?b\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n-[(set_attr \"type\" \"*,load\")])\n+  \"\n+  if (GET_CODE (operands[1]) != MEM)\n+    {\n+      emit_insn (gen_andsi3 (operands[0], gen_lowpart (SImode, operands[1]),\n+\t\t\t     GEN_INT (255)));\n+      DONE;\n+    }\n+\")\n \n (define_insn \"\"\n-  [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (match_operand:QI 1 \"s_register_operand\" \"r\")\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(zero_extend:SI (match_dup 1)))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n   \"\"\n-  \"and%?s\\\\t%0, %1, #255\"\n-[(set_attr \"conds\" \"set\")])\n+  \"ldr%?b\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n+[(set_attr \"type\" \"load\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(zero_extend:SI (subreg:QI (match_operand:SI 1 \"\" \"\") 0)))\n+   (clobber (match_operand:SI 2 \"s_register_operand\" \"\"))]\n+  \"GET_CODE (operands[1]) != MEM\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (and:SI (match_dup 2) (const_int 255)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (match_operand:QI 1 \"s_register_operand\" \"r\")\n-\t\t\t (const_int 0)))\n-   (set (match_operand:QI 0 \"s_register_operand\" \"=r\")\n-\t(match_dup 1))]\n+\t(compare:CC_NOOV (match_operand:QI 0 \"s_register_operand\" \"r\")\n+\t\t\t (const_int 0)))]\n   \"\"\n-  \"and%?s\\\\t%0, %1, #255\"\n+  \"tst\\\\t%0, #255\"\n [(set_attr \"conds\" \"set\")])\n \n (define_expand \"extendhisi2\"\n@@ -1774,114 +1913,18 @@\n       && !(const_ok_for_arm (INTVAL (operands[1]))\n            || const_ok_for_arm (~INTVAL (operands[1]))))\n     {\n-      int n = INTVAL (operands[1]);\n-      rtx tmpreg, tmpreg2;\n-      int i, n_ones = 0, first = 1, last = 0;\n-\n-      if (GET_CODE (operands[0]) != REG\n-          && GET_CODE (operands[0]) != SUBREG)\n-        abort ();\n-      for (i = 0; i < 32; i++)\n-        if (n & 1 << i)\n-          n_ones++;\n-      /* These loops go the opposite way around to those in arm.c so that\n-         the last constant may be more likely to be eliminted into the\n-         next instruction */\n-\n-      if (n_ones > 16)\n-        {\n-          n = (~n) & 0xffffffff;\n-          for (i = 30; i >= 0; i -= 2)\n-            {\n-              if (n & (3 << i))\n-                {\n-                  i -= 6;\n-                  if (i < 0)\n-                    i = 0;\n-                  if ((n & (255 << i)) == n)\n-                    last = 1;\n-                  if (first)\n-                    {\n-                      rtx equal;\n-                      rtx insn =\n-                        emit_insn (gen_movsi (tmpreg = (reload_in_progress\n-                                                        || reload_completed)\n-                                                      ? operands[0]\n-                                                      : gen_reg_rtx (SImode),\n-                                      equal = gen_rtx (CONST_INT, VOIDmode,\n-                                                       ~(n & (255 << i)))));\n-                      first = 0;\n-                    }\n-                  else\n-                    {\n-                      rtx constant;\n-                      rtx insn =\n-                        emit_insn (gen_subsi3 (tmpreg2 = (reload_in_progress\n-                                                          || reload_completed\n-                                                          || last)\n-                                                        ? operands[0]\n-                                                        : gen_reg_rtx (SImode),\n-                                               tmpreg,\n-                                    constant = gen_rtx (CONST_INT, VOIDmode,\n-                                                        n & (255 << i))));\n-                      tmpreg = tmpreg2;\n-                    }\n-                  n &= ~(255 << i);\n-                }\n-            }\n-        }\n-      else\n-        {\n-          for (i = 30; i >= 0; i -= 2)\n-            {\n-              if (n & (3 << i))\n-                {\n-                  i -= 6;\n-                  if (i < 0)\n-                    i = 0;\n-                  if ((n & (255 << i)) == n)\n-                    last = 1;\n-                  if (first)\n-                    {\n-                      rtx equal;\n-                      rtx insn =\n-                        emit_insn (gen_movsi (tmpreg = (reload_in_progress\n-                                                        || reload_completed)\n-                                                      ? operands[0]\n-                                                      : gen_reg_rtx (SImode),\n-                                      equal = gen_rtx (CONST_INT, VOIDmode,\n-                                                       n & (255 << i))));\n-                      first = 0;\n-                    }\n-                  else\n-                    {\n-                      rtx constant;\n-                      rtx insn =\n-                        emit_insn (gen_addsi3 (tmpreg2 = (reload_in_progress\n-                                                          || reload_completed\n-                                                          || last)\n-                                                        ? operands[0]\n-                                                        : gen_reg_rtx (SImode),\n-                                               tmpreg,\n-                                    constant = gen_rtx (CONST_INT, VOIDmode,\n-                                                        n & (255 << i))));\n-                      tmpreg = tmpreg2;\n-                    }\n-                  n &= ~(255 << i);\n-                }\n-            }\n-        }\n+      arm_split_constant (SET, SImode, INTVAL (operands[1]), operands[0],\n+\t\t\t  NULL_RTX,\n+\t\t\t  (reload_in_progress || reload_completed ? 0\n+\t\t\t   : preserve_subexpressions_p ()));\n       DONE;\n     }\n \")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,m,r\")\n-\t(match_operand:SI 1 \"general_operand\"  \"R,m,K,rI,r,S\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,m,r,r\")\n+\t(match_operand:SI 1 \"general_operand\"  \"R,m,K,rI,r,S,?n\"))]\n   \"(register_operand (operands[0], SImode)\n-    && (GET_CODE (operands[1]) != CONST_INT\n-        || const_ok_for_arm (INTVAL (operands[1]))\n-        || const_ok_for_arm (~INTVAL (operands[1])))\n     && (GET_CODE (operands[1]) != SYMBOL_REF\n \t|| CONSTANT_ADDRESS_P (operands[1])))\n    || register_operand (operands[1], SImode)\"\n@@ -1921,6 +1964,8 @@\n       return \\\"str%?\\\\t%1, %0\\\";\n     case 5:\n       return output_load_symbol (insn, operands);\n+    case 6:\n+      return \\\"#\\\";\n     }\n \"\n [(set (attr \"length\")\n@@ -1932,9 +1977,22 @@\n                   (const_int 4087))\n               (const_int 8)\n               (const_int 4))\n-             (eq_attr \"alternative\" \"5\") (const_int 16)]\n+             (ior (eq_attr \"alternative\" \"5\")\n+\t\t  (eq_attr \"alternative\" \"6\")) (const_int 16)]\n             (const_int 4)))\n- (set_attr \"type\" \"load,load,*,*,store1,*\")])\n+ (set_attr \"type\" \"load,load,*,*,store1,*,*\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n+  \"! (const_ok_for_arm (INTVAL (operands[1]))\n+      || const_ok_for_arm (~INTVAL (operands[1])))\"\n+  [(clobber (const_int 0))]\n+  \"\n+  arm_split_constant (SET, SImode, INTVAL (operands[1]), operands[0],\n+\t\t      NULL_RTX, 0);\n+  DONE;\n+\")\n \n ;; If copying one reg to another we can set the condition codes according to\n ;; its value.  Such a move is common after a return from subroutine and the\n@@ -2183,9 +2241,9 @@\n \t  emit_insn (gen_movsi (reg, operands[1]));\n \t  operands[1] = gen_rtx (SUBREG, QImode, reg, 0);\n \t}\n+      if (GET_CODE (operands[0]) == MEM)\n+\toperands[1] = force_reg (QImode, operands[1]);\n     }\n-  if (GET_CODE (operands[0]) == MEM)\n-    operands[1] = force_reg (QImode, operands[1]);\n \")\n \n \n@@ -2201,10 +2259,37 @@\n    str%?b\\\\t%1, %0\"\n [(set_attr \"type\" \"*,*,load,store1\")])\n \n-(define_insn \"movsf\"\n+(define_expand \"movsf\"\n+  [(set (match_operand:SF 0 \"general_operand\" \"\")\n+\t(match_operand:SF 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+  if (GET_CODE (operands[1]) == CONST_DOUBLE\n+      && ((GET_CODE (operands[0]) == REG\n+\t   && REGNO (operands[0]) < 16)\n+\t  || ! (const_double_rtx_ok_for_fpu (operands[1])\n+\t\t|| neg_const_double_rtx_ok_for_fpu (operands[1]))))\n+    {\n+      extern int optimize;\n+      rtx mem = force_const_mem (SFmode, operands[1]);\n+      rtx addr = gen_reg_rtx (SImode);\n+      if (optimize == 0)\n+\t{\n+\t  rtx ptr = force_const_mem (SImode, XEXP (mem, 0));\n+\t  emit_insn (gen_movsi (addr, ptr));\n+\t}\n+      else\n+\temit_insn (gen_movsi (addr, XEXP (mem, 0)));\n+      operands[1] = gen_rtx (MEM, SFmode, addr);\n+    }\n+  if (GET_CODE (operands[0]) == MEM)\n+    operands[1] = force_reg (SFmode, operands[1]);\n+\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=f,f,f,m,f,r,r,r,m\")\n \t(match_operand:SF 1 \"general_operand\" \"fG,H,m,f,r,f,r,m,r\"))]\n-  \"\"\n+  \"GET_CODE (operands[0]) != MEM || register_operand (operands[1], SFmode)\"\n   \"@\n    mvf%?s\\\\t%0, %1\n    mnf%?s\\\\t%0, #%N1\n@@ -2219,29 +2304,51 @@\n  (set_attr \"type\" \"float,float,f_load,f_store,r_mem_f,f_mem_r,*,load,store1\")])\n \n (define_expand \"movdf\"\n-  [(parallel [(set (match_operand:DF 0 \"general_operand\" \"\")\n-\t\t   (match_operand:DF 1 \"general_operand\" \"\"))\n-\t      (clobber (match_scratch:SI 2 \"\"))])]\n+  [(set (match_operand:DF 0 \"general_operand\" \"\")\n+\t(match_operand:DF 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n+  if (GET_CODE (operands[1]) == CONST_DOUBLE\n+      && ((GET_CODE (operands[0]) == REG\n+\t   && REGNO (operands[0]) < 16)\n+\t  || ! (const_double_rtx_ok_for_fpu (operands[1])\n+\t\t|| neg_const_double_rtx_ok_for_fpu (operands[1]))))\n+    {\n+      extern int optimize;\n+      rtx mem = force_const_mem (DFmode, operands[1]);\n+      rtx addr = gen_reg_rtx (SImode);\n+      if (optimize == 0)\n+\t{\n+\t  rtx ptr = force_const_mem (SImode, XEXP (mem, 0));\n+\t  emit_insn (gen_movsi (addr, ptr));\n+\t}\n+      else\n+\temit_insn (gen_movsi (addr, XEXP (mem, 0)));\n+      operands[1] = gen_rtx (MEM, DFmode, addr);\n+    }\n   if (GET_CODE (operands[0]) == MEM)\n     operands[1] = force_reg (DFmode, operands[1]);\n \")\n \n ;; Reloading a df mode value stored in integer regs to memory can require a\n ;; scratch reg.\n (define_expand \"reload_outdf\"\n-  [(parallel [(set (match_operand:DF 0 \"reload_memory_operand\" \"=o\")\n-\t\t   (match_operand:DF 1 \"s_register_operand\" \"r\"))\n-\t      (clobber (match_operand:SI 2 \"s_register_operand\" \"=&r\"))])]\n+  [(match_operand:DF 0 \"reload_memory_operand\" \"=o\")\n+   (match_operand:DF 1 \"s_register_operand\" \"r\")\n+   (match_operand:SI 2 \"s_register_operand\" \"=&r\")]\n   \"\"\n-  \"\")\n+  \"\n+  emit_insn (gen_addsi3 (operands[2], XEXP (XEXP (operands[0], 0), 0),\n+\t\t\t XEXP (XEXP (operands[0], 0), 1)));\n+  emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (MEM, DFmode, operands[2]),\n+\t\t      operands[1]));\n+  DONE;\n+\")\n \n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=r,Q,r,o,f,f,f,f,m,!f,!r,r\")\n+  [(set (match_operand:DF 0 \"general_operand\" \"=r,Q#m,r,f,f,f,f,m,!f,!r,r\")\n \t(match_operand:DF 1 \"general_operand\" \n-\t \t\"Q,r,?o,?r,?f,!G,!H,m,f,r,f,??r\"))\n-   (clobber (match_scratch:SI 2 \"=X,X,X,&r,X,X,X,X,X,X,X,X\"))]\n+\t \t\"Q,r,?o,?f,!G,!H,m,f,r,f,??r\"))]\n   \"GET_CODE (operands[0]) != MEM || register_operand (operands[1], DFmode)\"\n   \"*\n {\n@@ -2266,36 +2373,35 @@\n       return \\\"ldm%?ia\\\\t%0, {%0, %R0}\\\\t%@ double\\\";\n \n     case 3:\n-      ops[0] = operands[2];\n-      ops[1] = XEXP (XEXP (operands[0], 0), 0);\n-      ops[2] = XEXP (XEXP (operands[0], 0), 1);\n-      if (!INTVAL (ops[2]) || const_ok_for_arm (INTVAL (ops[2])))\n-\toutput_asm_insn (\\\"add%?\\\\t%0, %1, %2\\\", ops);\n-      else\n-\toutput_asm_insn (\\\"sub%?\\\\t%0, %1, #%n2\\\", ops);\n-      return \\\"stm%?ia\\\\t%2, {%1, %R1}\\\\t%@ double\\\";\n-\n     case 4:\n-    case 5:\n       return \\\"mvf%?d\\\\t%0, %1\\\";\n \n-    case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n-    case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n-    case 8: return \\\"stf%?d\\\\t%1, %0\\\";\n-    case 9: return output_mov_double_fpu_from_arm (operands);\n-    case 10: return output_mov_double_arm_from_fpu (operands);\n-    case 11: return output_move_double (operands);\n+    case 5: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n+    case 6: return \\\"ldf%?d\\\\t%0, %1\\\";\n+    case 7: return \\\"stf%?d\\\\t%1, %0\\\";\n+    case 8: return output_mov_double_fpu_from_arm (operands);\n+    case 9: return output_mov_double_arm_from_fpu (operands);\n+    case 10: return output_move_double (operands);\n     }\n }\n \"\n-[(set_attr \"length\" \"4,4,8,8,4,4,4,4,4,8,8,8\")\n+[(set_attr \"length\" \"4,4,8,4,4,4,4,4,8,8,8\")\n  (set_attr \"type\" \n-\"load,store2,load,store2,float,float,float,f_load,f_store,r_mem_f,f_mem_r,*\")])\n+\"load,store2,load,float,float,float,f_load,f_store,r_mem_f,f_mem_r,*\")])\n \n-(define_insn \"movxf\"\n+(define_expand \"movxf\"\n+  [(set (match_operand:XF 0 \"general_operand\" \"\")\n+\t(match_operand:XF 1 \"general_operand\" \"\"))]\n+  \"ENABLE_XF_PATTERNS\"\n+  \"\")\n+\n+;; Even when the XFmode patterns aren't enabled, we enable this after\n+;; reloading so that we can push floating point registers in the prologue.\n+\n+(define_insn \"\"\n   [(set (match_operand:XF 0 \"general_operand\" \"=f,f,f,m,f,r,r\")\n \t(match_operand:XF 1 \"general_operand\" \"fG,H,m,f,r,f,r\"))]\n-  \"ENABLE_XF_PATTERNS\"\n+  \"ENABLE_XF_PATTERNS || reload_completed\"\n   \"*\n   switch (which_alternative)\n     {\n@@ -2639,19 +2745,19 @@\n \t(compare (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t (match_operator:SI 2 \"shift_operator\"\n \t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rn\")])))]\n+\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rM\")])))]\n   \"\"\n-  \"cmp%?\\\\t%1, %3, %S2\"\n+  \"cmp%?\\\\t%1, %3%S2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (match_operand 0 \"cc_register\" \"\")\n \t(compare (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t (neg:SI (match_operator:SI 2 \"shift_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rn\")]))))]\n+\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rM\")]))))]\n   \"\"\n-  \"cmn%?\\\\t%1, %3, %S2\"\n+  \"cmn%?\\\\t%1, %3%S2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -2938,7 +3044,7 @@\n \t\t\t\t\t[(reg 24) (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"\"\n+  \"REVERSIBLE_CC_MODE (GET_MODE (XEXP (operands[1], 0)))\"\n   \"*\n {\n   extern int arm_ccfsm_state;\n@@ -3360,61 +3466,61 @@\n         (match_operator:SI 1 \"shiftable_operator\"\n           [(match_operator:SI 3 \"shift_operator\"\n              [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-              (match_operand:SI 5 \"nonmemory_operand\" \"rI\")])\n+              (match_operand:SI 5 \"reg_or_int_operand\" \"rI\")])\n            (match_operand:SI 2 \"s_register_operand\" \"r\")]))]\n   \"\"\n-  \"%i1%?\\\\t%0, %2, %4, %S3\")\n+  \"%i1%?\\\\t%0, %2, %4%S3\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n         (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n \t\t          [(match_operator:SI 3 \"shift_operator\"\n \t\t            [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t             (match_operand:SI 5 \"nonmemory_operand\" \"rI\")])\n+\t\t             (match_operand:SI 5 \"reg_or_int_operand\" \"rI\")])\n \t\t           (match_operand:SI 2 \"s_register_operand\" \"r\")])\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(match_op_dup 1 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n \t\t\t (match_dup 2)]))]\n   \"\"\n-  \"%i1%?s\\\\t%0, %2, %4, %S3\"\n+  \"%i1%?s\\\\t%0, %2, %4%S3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n         (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n \t\t          [(match_operator:SI 3 \"shift_operator\"\n \t\t            [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t             (match_operand:SI 5 \"nonmemory_operand\" \"rI\")])\n+\t\t             (match_operand:SI 5 \"reg_or_int_operand\" \"rI\")])\n \t\t           (match_operand:SI 2 \"s_register_operand\" \"r\")])\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"%i1%?s\\\\t%0, %2, %4, %S3\"\n+  \"%i1%?s\\\\t%0, %2, %4%S3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operator:SI 2 \"shift_operator\"\n \t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:SI 4 \"nonmemory_operand\" \"rn\")])))]\n+\t\t    (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])))]\n   \"\"\n-  \"sub%?\\\\t%0, %1, %3, %S2\")\n+  \"sub%?\\\\t%0, %1, %3%S2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n \t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"nonmemory_operand\" \"rn\")]))\n+\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")]))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n \t\t\t\t\t\t (match_dup 4)])))]\n   \"\"\n-  \"sub%?s\\\\t%0, %1, %3, %S2\"\n+  \"sub%?s\\\\t%0, %1, %3%S2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -3423,11 +3529,11 @@\n \t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n \t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"nonmemory_operand\" \"rn\")]))\n+\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")]))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"sub%?s\\\\t%0, %1, %3, %S2\"\n+  \"sub%?s\\\\t%0, %1, %3%S2\"\n [(set_attr \"conds\" \"set\")])\n \n ;; These variants of the above insns can occur if the first operand is the\n@@ -3442,12 +3548,12 @@\n   [(set (match_operand:SI 0 \"\" \"=&r\")\n \t(plus:SI (plus:SI (match_operator:SI 5 \"shift_operator\"\n \t\t\t   [(match_operand:SI 3 \"\" \"r\")\n-\t\t\t    (match_operand:SI 4 \"\" \"rn\")])\n+\t\t\t    (match_operand:SI 4 \"\" \"rM\")])\n \t\t\t  (match_operand:SI 2 \"\" \"r\"))\n \t\t (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n   \"reload_in_progress\"\n   \"*\n-  output_asm_insn (\\\"add%?\\\\t%0, %2, %3, %S5\\\", operands);\n+  output_asm_insn (\\\"add%?\\\\t%0, %2, %3%S5\\\", operands);\n   operands[2] = operands[1];\n   operands[1] = operands[0];\n   return output_add_immediate (operands);\n@@ -3461,7 +3567,7 @@\n \t\t\t  (plus:SI \n \t\t\t   (match_operator:SI 5 \"shift_operator\"\n \t\t\t    [(match_operand:SI 3 \"\" \"r\")\n-\t\t\t     (match_operand:SI 4 \"\" \"rn\")])\n+\t\t\t     (match_operand:SI 4 \"\" \"rM\")])\n \t\t\t   (match_operand:SI 1 \"\" \"r\"))\n \t\t\t  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t\t (const_int 0)))\n@@ -3472,7 +3578,7 @@\n   \"reload_in_progress\"\n   \"*\n   output_add_immediate (operands);\n-  return \\\"add%?s\\\\t%0, %0, %3, %S5\\\";\n+  return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n \"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"20\")])\n@@ -3483,15 +3589,15 @@\n \t\t\t  (plus:SI \n \t\t\t   (match_operator:SI 5 \"shift_operator\"\n \t\t\t    [(match_operand:SI 3 \"\" \"r\")\n-\t\t\t     (match_operand:SI 4 \"\" \"rn\")])\n+\t\t\t     (match_operand:SI 4 \"\" \"rM\")])\n \t\t\t   (match_operand:SI 1 \"\" \"r\"))\n \t\t\t  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=&r\"))]\n   \"reload_in_progress\"\n   \"*\n   output_add_immediate (operands);\n-  return \\\"add%?s\\\\t%0, %0, %3, %S5\\\";\n+  return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n \"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"20\")])\n@@ -4272,15 +4378,15 @@\n \t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L,rI,L\")])\n \t (match_operator:SI 7 \"shift_operator\"\n \t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn,rn,rn,rn\")])\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM,rM,rM\")])\n \t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")))\n    (clobber (reg 24))]\n   \"\"\n   \"@\n-   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %2, %S7\n-   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %2, %S7\n-   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2, %S7\n-   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2, %S7\"\n+   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %2%S7\n+   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %2%S7\n+   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2%S7\n+   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2%S7\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12,12\")])\n \n@@ -4293,14 +4399,14 @@\n \t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")\n \t (match_operator:SI 7 \"shift_operator\"\n \t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rn,rn,rn,rn\")])))\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM,rM,rM\")])))\n    (clobber (reg 24))]\n   \"\"\n   \"@\n-   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %2, %S7\n-   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %2, %S7\n-   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2, %S7\n-   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2, %S7\"\n+   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %2%S7\n+   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %2%S7\n+   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2%S7\n+   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2%S7\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12,12\")])\n \n@@ -4312,15 +4418,15 @@\n \t   (match_operand:SI 6 \"arm_add_operand\" \"rI,L\")])\n \t (match_operator:SI 8 \"shift_operator\"\n \t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rn,rn\")])\n+\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM,rM\")])\n \t (match_operator:SI 9 \"shift_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n \t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI,rI\")])))\n    (clobber (reg 24))]\n   \"\"\n   \"@\n-   cmp\\\\t%5, %6\\;mov%d7\\\\t%0, %1, %S8\\;mov%D7\\\\t%0, %3, %S9\n-   cmn\\\\t%5, #%n6\\;mov%d7\\\\t%0, %1, %S8\\;mov%D7\\\\t%0, %3, %S9\"\n+   cmp\\\\t%5, %6\\;mov%d7\\\\t%0, %1%S8\\;mov%D7\\\\t%0, %3%S9\n+   cmn\\\\t%5, #%n6\\;mov%d7\\\\t%0, %1%S8\\;mov%D7\\\\t%0, %3%S9\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n@@ -4652,7 +4758,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"str%?b\\\\t%5, [%0, %3, %S2]!\"\n+  \"str%?b\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -4667,7 +4773,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"str%?b\\\\t%5, [%0, -%3, %S2]!\"\n+  \"str%?b\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -4682,7 +4788,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"ldr%?b\\\\t%5, [%0, %3, %S2]!\"\n+  \"ldr%?b\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -4697,7 +4803,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"ldr%?b\\\\t%5, [%0, -%3, %S2]!\"\n+  \"ldr%?b\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -4712,7 +4818,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"str%?\\\\t%5, [%0, %3, %S2]!\"\n+  \"str%?\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -4727,7 +4833,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"str%?\\\\t%5, [%0, -%3, %S2]!\"\n+  \"str%?\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -4742,7 +4848,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"ldr%?\\\\t%5, [%0, %3, %S2]!\"\n+  \"ldr%?\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -4757,7 +4863,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"ldr%?\\\\t%5, [%0, -%3, %S2]!\"\n+  \"ldr%?\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -4773,7 +4879,7 @@\n    && REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"ldr%?\\\\t%5, [%0, %3, %S2]!\\\\t%@ loadhi\"\n+  \"ldr%?\\\\t%5, [%0, %3%S2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -4789,7 +4895,7 @@\n    && REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"ldr%?\\\\t%5, [%0, -%3, %S2]!\\\\t%@ loadhi\"\n+  \"ldr%?\\\\t%5, [%0, -%3%S2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n ; It can also support extended post-inc expressions, but combine doesn't\n@@ -4858,13 +4964,13 @@\n (define_peephole\n   [(set (mem:QI (plus:SI (match_operator:SI 4 \"shift_operator\"\n \t\t\t  [(match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand 1 \"const_int_operand\" \"n\")])\n+\t\t\t   (match_operand:SI 1 \"const_int_operand\" \"n\")])\n \t\t\t (match_operand:SI 2 \"s_register_operand\" \"+r\")))\n \t(match_operand:QI 3 \"s_register_operand\" \"r\"))\n    (set (match_dup 2) (plus:SI (match_op_dup 4 [(match_dup 0) (match_dup 1)])\n \t\t\t       (match_dup 2)))]\n   \"\"\n-  \"str%?b\\\\t%3, [%2, %0, %S4]!\")\n+  \"str%?b\\\\t%3, [%2, %0%S4]!\")\n \n ; This pattern is never tried by combine, so do it as a peephole\n \n@@ -5200,7 +5306,7 @@\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t       [(match_operator:SI 1 \"shift_operator\"\n \t\t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 3 \"nonmemory_operand\" \"rn\")])\n+\t\t\t  (match_operand:SI 3 \"reg_or_int_operand\" \"rM\")])\n \t\t\t(match_operand:SI 4 \"s_register_operand\" \"r\")])\n \t\t      (label_ref (match_operand 5 \"\" \"\"))\n \t\t      (pc)))\n@@ -5256,6 +5362,14 @@\n  (set_attr \"length\" \"8\")\n  (set_attr \"type\" \"load\")])\n \n+(define_expand \"prologue\"\n+  [(clobber (const_int 0))]\n+  \"\"\n+  \"\n+  arm_expand_prologue ();\n+  DONE;\n+\")\n+\n (define_expand \"save_stack_nonlocal\"\n   [(match_operand:DI 0 \"memory_operand\" \"\")\n    (match_operand:SI 1 \"s_register_operand\" \"\")]\n@@ -5359,3 +5473,36 @@\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n+\n+;; Push multiple registers to the stack.  The first register is in the\n+;; unspec part of the insn; subsequent registers are in parallel (use ...)\n+;; expressions.\n+(define_insn \"\"\n+  [(match_parallel 2 \"multi_register_push\"\n+    [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t  (unspec:BLK [(match_operand:SI 1 \"s_register_operand\" \"r\")] 2))])]\n+  \"\"\n+  \"*\n+{\n+  char pattern[100];\n+  int i;\n+  extern int lr_save_eliminated;\n+\n+  if (lr_save_eliminated)\n+    {\n+      if (XVECLEN (operands[2], 0) > 1)\n+\tabort ();\n+      return \\\"\\\";\n+    }\n+  strcpy (pattern, \\\"stmfd\\\\t%m0!, {%|%1\\\");\n+  for (i = 1; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      strcat (pattern, \\\", %|\\\");\n+      strcat (pattern, reg_names[REGNO (XEXP (XVECEXP (operands[2], 0, i),\n+\t\t\t\t\t      0))]);\n+    }\n+  strcat (pattern, \\\"}\\\");\n+  output_asm_insn (pattern, operands);\n+  return \\\"\\\";\n+}\"\n+[(set_attr \"type\" \"store4\")])"}]}