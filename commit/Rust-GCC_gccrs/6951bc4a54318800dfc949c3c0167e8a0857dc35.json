{"sha": "6951bc4a54318800dfc949c3c0167e8a0857dc35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk1MWJjNGE1NDMxODgwMGRmYzk0OWMzYzAxNjdlOGEwODU3ZGMzNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-12-04T07:34:21Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-04T07:34:21Z"}, "message": "* cppinternals.texi: New file.\n\nFrom-SVN: r37990", "tree": {"sha": "a890aa7f63a466e4fe7e00d453289646d872c405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a890aa7f63a466e4fe7e00d453289646d872c405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6951bc4a54318800dfc949c3c0167e8a0857dc35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6951bc4a54318800dfc949c3c0167e8a0857dc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6951bc4a54318800dfc949c3c0167e8a0857dc35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6951bc4a54318800dfc949c3c0167e8a0857dc35/comments", "author": null, "committer": null, "parents": [{"sha": "614c7d3716281075f8ef704f37895a121a14d9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614c7d3716281075f8ef704f37895a121a14d9bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614c7d3716281075f8ef704f37895a121a14d9bd"}], "stats": {"total": 229, "additions": 229, "deletions": 0}, "files": [{"sha": "aaa31987ef91c87c788fe0b5bd6fc045bc9933a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6951bc4a54318800dfc949c3c0167e8a0857dc35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6951bc4a54318800dfc949c3c0167e8a0857dc35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6951bc4a54318800dfc949c3c0167e8a0857dc35", "patch": "@@ -1,3 +1,7 @@\n+2000-12-04  Neil Booth  <neilb@earthling.net>\n+\n+        * cppinternals.texi: New file.\n+\n 2000-12-04  Neil Booth  <neilb@earthling.net>\n \n         * cppfiles.c (cpp_make_system_header): Take 2 booleans,"}, {"sha": "c1604e907f2b12c9dca3e488389328657645b7a4", "filename": "gcc/cppinternals.texi", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6951bc4a54318800dfc949c3c0167e8a0857dc35/gcc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6951bc4a54318800dfc949c3c0167e8a0857dc35/gcc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinternals.texi?ref=6951bc4a54318800dfc949c3c0167e8a0857dc35", "patch": "@@ -0,0 +1,225 @@\n+\\input texinfo\n+@setfilename cppinternals.info\n+@settitle The GNU C Preprocessor Internals\n+\n+@ifinfo\n+@dircategory Programming\n+@direntry\n+* Cpplib:\t\t       Cpplib internals.\n+@end direntry\n+@end ifinfo\n+\n+@c @smallbook\n+@c @cropmarks\n+@c @finalout\n+@setchapternewpage odd\n+@ifinfo\n+This file documents the internals of the GNU C Preprocessor.\n+\n+Copyright 2000 Free Software Foundation, Inc.\n+\n+Permission is granted to make and distribute verbatim copies of\n+this manual provided the copyright notice and this permission notice\n+are preserved on all copies.\n+\n+@ignore\n+Permission is granted to process this file through Tex and print the\n+results, provided the printed document carries copying permission\n+notice identical to this one except for the removal of this paragraph\n+(this paragraph not being relevant to the printed manual).\n+\n+@end ignore\n+Permission is granted to copy and distribute modified versions of this\n+manual under the conditions for verbatim copying, provided also that\n+the entire resulting derived work is distributed under the terms of a\n+permission notice identical to this one.\n+\n+Permission is granted to copy and distribute translations of this manual\n+into another language, under the above conditions for modified versions.\n+@end ifinfo\n+\n+@titlepage\n+@c @finalout\n+@title Cpplib Internals\n+@subtitle Last revised Dec 2000\n+@subtitle for GCC version 3.0\n+@author Neil Booth\n+@page\n+@vskip 0pt plus 1filll\n+@c man begin COPYRIGHT\n+Copyright @copyright{} 2000\n+Free Software Foundation, Inc.\n+\n+Permission is granted to make and distribute verbatim copies of\n+this manual provided the copyright notice and this permission notice\n+are preserved on all copies.\n+\n+Permission is granted to copy and distribute modified versions of this\n+manual under the conditions for verbatim copying, provided also that\n+the entire resulting derived work is distributed under the terms of a\n+permission notice identical to this one.\n+\n+Permission is granted to copy and distribute translations of this manual\n+into another language, under the above conditions for modified versions.\n+@c man end\n+@end titlepage\n+@page\n+\n+@node Top, Conventions,, (DIR)\n+@chapter Cpplib - the core of the GNU C Preprocessor\n+\n+The GNU C preprocessor in GCC 3.0 has been completely rewritten.  It is\n+now implemented as a library, cpplib, so it can be easily shared between\n+a stand-alone preprocessor, and a preprocessor integrated with the C,\n+C++ and Objective C front ends.  It is also available for use by other\n+programs, though this is not recommended as its exposed interface has\n+not yet reached a point of reasonable stability.\n+\n+This library has been written to be re-entrant, so that it can be used\n+to preprocess many files simultaneously if necessary.  It has also been\n+written with the preprocessing token as the fundamental unit; the\n+preprocessor in previous versions of GCC would operate on text strings\n+as the fundamental unit.\n+\n+This brief manual documents some of the internals of cpplib, and a few\n+tricky issues encountered.  It also describes certain behaviour we would\n+like to preserve, such as the format and spacing of its output.\n+\n+Identifiers, macro expansion, hash nodes, lexing.\n+\n+@menu\n+* Conventions::\t    Conventions used in the code.\n+* Lexer::\t    The combined C, C++ and Objective C Lexer.\n+* Whitespace::      Input and output newlines and whitespace.\n+* Concept Index::   Index of concepts and terms.\n+* Index::           Index.\n+@end menu\n+\n+@node Conventions, Lexer, Top, Top\n+\n+cpplib has two interfaces - one is exposed internally only, and the\n+other is for both internal and external use.\n+\n+The convention is that functions and types that are exposed to multiple\n+files internally are prefixed with @samp{_cpp_}, and are to be found in\n+the file @samp{cpphash.h}.  Functions and types exposed to external\n+clients are in @samp{cpplib.h}, and prefixed with @samp{cpp_}.\n+\n+We are striving to reduce the information exposed in cpplib.h to the\n+bare minimum necessary, and then to keep it there.  This makes clear\n+exactly what external clients are entitled to assume, and allows us to\n+change internals in the future without worrying whether library clients\n+are perhaps relying on some kind of undocumented implementation-specific\n+behaviour.\n+\n+@node Lexer, Whitespace, Conventions, Top\n+\n+The lexer is contained in the file @samp{cpplex.c}.  We want to have a\n+lexer that is single-pass, for efficiency reasons.  We would also like\n+the lexer to only step forwards through the input files, and not step\n+back.  This will make future changes to support different character\n+sets, in particular state or shift-dependent ones, much easier.\n+\n+This file also contains all information needed to spell a token, i.e. to\n+output it either in a diagnostic or to a preprocessed output file.  This\n+information is not exported, but made available to clients through such\n+functions as @samp{cpp_spell_token} and @samp{cpp_token_len}.\n+\n+The most painful aspect of lexing ISO-standard C and C++ is handling\n+trigraphs and backlash-escaped newlines.  Trigraphs are processed before\n+any interpretation of the meaning of a character is made, and unfortunately\n+there is a trigraph representation for a backslash, so it is possible for\n+the trigraph @samp{??/} to introduce an escaped newline.\n+\n+Escaped newlines are tedious because theoretically they can occur\n+anywhere - between the @samp{+} and @samp{=} of the @samp{+=} token,\n+within the characters of an identifier, and even between the @samp{*}\n+and @samp{/} that terminates a comment.  Moreover, you cannot be sure\n+there is just one - there might be an arbitrarily long sequence of them.\n+\n+So the routine @samp{parse_identifier}, that lexes an identifier, cannot\n+assume that it can scan forwards until the first non-identifier\n+character and be done with it, because this could be the @samp{\\}\n+introducing an escaped newline, or the @samp{?} introducing the trigraph\n+sequence that represents the @samp{\\} of an escaped newline.  Similarly\n+for the routine that handles numbers, @samp{parse_number}.  If these\n+routines stumble upon a @samp{?} or @samp{\\}, they call\n+@samp{skip_escaped_newlines} to skip over any potential escaped newlines\n+before checking whether they can finish.\n+\n+Similarly code in the main body of @samp{_cpp_lex_token} cannot simply\n+check for a @samp{=} after a @samp{+} character to determine whether it\n+has a @samp{+=} token; it needs to be prepared for an escaped newline of\n+some sort.  These cases use the function @samp{get_effective_char},\n+which returns the first character after any intervening newlines.\n+\n+The lexer needs to keep track of the correct column position,\n+including counting tabs as specified by the @samp{-ftabstop=} option.\n+This should be done even within comments; C-style comments can appear in\n+the middle of a line, and we want to report diagnostics in the correct\n+position for text appearing after the end of the comment.\n+\n+Some identifiers, such as @samp{__VA_ARGS__} and poisoned identifiers,\n+may be invalid and require a diagnostic.  However, if they appear in a\n+macro expansion we don't want to complain with each use of the macro.\n+It is therefore best to catch them during the lexing stage, in\n+@samp{parse_identifier}.  In both cases, whether a diagnostic is needed\n+or not is dependent upon lexer state.  For example, we don't want to\n+issue a diagnostic for re-poisoning a poisoned identifier, or for using\n+@samp{__VA_ARGS__} in the expansion of a variable-argument macro.\n+Therefore @samp{parse_identifier} makes use of flags to determine\n+whether a diagnostic is appropriate.  Since we change state on a\n+per-token basis, and don't lex whole lines at a time, this is not a\n+problem.\n+\n+Another place where state flags are used to change behaviour is whilst\n+parsing header names.  Normally, a @samp{<} would be lexed as a single\n+token.  After a @samp{#include} directive, though, it should be lexed\n+as a single token as far as the nearest @samp{>} character.  Note that\n+we don't allow the terminators of header names to be escaped; the first\n+@samp{\"} or @samp{>} terminates the header name.\n+\n+Interpretation of some character sequences depends upon whether we are\n+lexing C, C++ or Objective C, and on the revision of the standard in\n+force.  For example, @samp{@@foo} is a single identifier token in\n+objective C, but two separate tokens @samp{@@} and @samp{foo} in C or\n+C++.  Such cases are handled in the main function @samp{_cpp_lex_token},\n+based upon the flags set in the @samp{cpp_options} structure.\n+\n+Note we have almost, but not quite, achieved the goal of not stepping\n+backwards in the input stream.  Currently @samp{skip_escaped_newlines}\n+does step back, though with care it should be possible to adjust it so\n+that this does not happen.  For example, one tricky issue is if we meet\n+a trigraph, but the command line option @samp{-trigraphs} is not in\n+force but @samp{-Wtrigraphs} is, we need to warn about it but then\n+buffer it and continue to treat it as 3 separate characters.\n+\n+@node Whitespace, Concept Index, Lexer, Top\n+\n+The lexer has been written to treat each of @samp{\\r}, @samp{\\n},\n+@samp{\\r\\n} and @samp{\\n\\r} as a single new line indicator.  This allows\n+it to transparently preprocess MS-DOS, Macintosh and Unix files without\n+their needing to pass through a special filter beforehand.\n+\n+We also decided to treat a backslash, either @samp{\\} or the trigraph\n+@samp{??/}, separated from one of the above newline forms by whitespace\n+only (one or more space, tab, form-feed, vertical tab or NUL characters),\n+as an intended escaped newline.  The library issues a diagnostic in this\n+case.\n+\n+Handling newlines in this way is made simpler by doing it in one place\n+only.  The function @samp{handle_newline} takes care of all newline\n+characters, and @samp{skip_escaped_newlines} takes care of all escaping\n+of newlines, deferring to @samp{handle_newline} to handle the newlines\n+themselves.\n+\n+@node Concept Index, Index, Whitespace, Top\n+@unnumbered Concept Index\n+@printindex cp\n+\n+@node Index,, Concept Index, Top\n+@unnumbered Index of Directives, Macros and Options\n+@printindex fn\n+\n+@contents\n+@bye"}]}