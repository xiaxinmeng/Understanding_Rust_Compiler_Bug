{"sha": "d388179a798c6528563873cbabd80a0e7272c013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4ODE3OWE3OThjNjUyODU2Mzg3M2NiYWJkODBhMGU3MjcyYzAxMw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-17T13:13:52Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-30T17:41:25Z"}, "message": "aarch64: Use RTL builtins for FP ml[as][q]_laneq intrinsics\n\nRewrite floating-point vml[as][q]_laneq Neon intrinsics to use RTL\nbuiltins rather than relying on the GCC vector extensions. Using RTL\nbuiltins allows control over the emission of fmla/fmls instructions\n(which we don't want here.)\n\nWith this commit, the code generated by these intrinsics changes from\na fused multiply-add/subtract instruction to an fmul followed by an\nfadd/fsub instruction. If the programmer really wants fmla/fmls\ninstructions, they can use the vfm[as] intrinsics.\n\ngcc/ChangeLog:\n\n2021-02-17  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add\n\tfloat_ml[as][q]_laneq builtin generator macros.\n\t* config/aarch64/aarch64-simd.md (mul_laneq<mode>3): Define.\n\t(aarch64_float_mla_laneq<mode>): Define.\n\t(aarch64_float_mls_laneq<mode>): Define.\n\t* config/aarch64/arm_neon.h (vmla_laneq_f32): Use RTL builtin\n\tinstead of GCC vector extensions.\n\t(vmlaq_laneq_f32): Likewise.\n\t(vmls_laneq_f32): Likewise.\n\t(vmlsq_laneq_f32): Likewise.", "tree": {"sha": "ccff0a4779c0fbe66220f178c0750ba506560556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccff0a4779c0fbe66220f178c0750ba506560556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d388179a798c6528563873cbabd80a0e7272c013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d388179a798c6528563873cbabd80a0e7272c013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d388179a798c6528563873cbabd80a0e7272c013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d388179a798c6528563873cbabd80a0e7272c013/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1baf4ed878639536c50a7aab9e7be64da43356fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1baf4ed878639536c50a7aab9e7be64da43356fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1baf4ed878639536c50a7aab9e7be64da43356fd"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "1e81bb53287e9797f3539c2c64ed11c6c26d6e4e", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d388179a798c6528563873cbabd80a0e7272c013/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d388179a798c6528563873cbabd80a0e7272c013/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d388179a798c6528563873cbabd80a0e7272c013", "patch": "@@ -674,6 +674,8 @@\n   BUILTIN_VDQSF (TERNOP, float_mls_n, 0, FP)\n   BUILTIN_VDQSF (QUADOP_LANE, float_mla_lane, 0, FP)\n   BUILTIN_VDQSF (QUADOP_LANE, float_mls_lane, 0, FP)\n+  BUILTIN_VDQSF (QUADOP_LANE, float_mla_laneq, 0, FP)\n+  BUILTIN_VDQSF (QUADOP_LANE, float_mls_laneq, 0, FP)\n \n   /* Implemented by aarch64_simd_bsl<mode>.  */\n   BUILTIN_VDQQH (BSL_P, simd_bsl, 0, NONE)"}, {"sha": "234762960bd6df057394f753072ef65a6628a43d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d388179a798c6528563873cbabd80a0e7272c013/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d388179a798c6528563873cbabd80a0e7272c013/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d388179a798c6528563873cbabd80a0e7272c013", "patch": "@@ -734,6 +734,22 @@\n   [(set_attr \"type\" \"neon<fp>_mul_<stype>_scalar<q>\")]\n )\n \n+(define_insn \"mul_laneq<mode>3\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(mult:VDQSF\n+\t  (vec_duplicate:VDQSF\n+\t    (vec_select:<VEL>\n+\t      (match_operand:V4SF 2 \"register_operand\" \"w\")\n+\t      (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n+\t  (match_operand:VDQSF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[3] = aarch64_endian_lane_rtx (V4SFmode, INTVAL (operands[3]));\n+    return \"fmul\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\";\n+  }\n+  [(set_attr \"type\" \"neon_fp_mul_s_scalar<q>\")]\n+)\n+\n (define_insn \"*aarch64_mul3_elt_<vswap_width_name><mode>\"\n   [(set (match_operand:VMUL_CHANGE_NLANES 0 \"register_operand\" \"=w\")\n      (mult:VMUL_CHANGE_NLANES\n@@ -2742,6 +2758,46 @@\n   }\n )\n \n+(define_expand \"aarch64_float_mla_laneq<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\")\n+\t(plus:VDQSF\n+\t  (mult:VDQSF\n+\t    (vec_duplicate:VDQSF\n+\t      (vec_select:<VEL>\n+\t\t(match_operand:V4SF 3 \"register_operand\")\n+\t\t(parallel [(match_operand:SI 4 \"immediate_operand\")])))\n+\t    (match_operand:VDQSF 2 \"register_operand\"))\n+\t  (match_operand:VDQSF 1 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_mul_laneq<mode>3 (scratch, operands[2],\n+\t\t\t\t     operands[3], operands[4]));\n+    emit_insn (gen_add<mode>3 (operands[0], operands[1], scratch));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"aarch64_float_mls_laneq<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\")\n+\t(minus:VDQSF\n+\t  (match_operand:VDQSF 1 \"register_operand\")\n+\t  (mult:VDQSF\n+\t    (vec_duplicate:VDQSF\n+\t      (vec_select:<VEL>\n+\t\t(match_operand:V4SF 3 \"register_operand\")\n+\t\t(parallel [(match_operand:SI 4 \"immediate_operand\")])))\n+\t    (match_operand:VDQSF 2 \"register_operand\"))))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_mul_laneq<mode>3 (scratch, operands[2],\n+\t\t\t\t     operands[3], operands[4]));\n+    emit_insn (gen_sub<mode>3 (operands[0], operands[1], scratch));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"fma<mode>4\"\n   [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n        (fma:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")"}, {"sha": "17e059efb80fa86a8a32127ace4fc7f43e2040a8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d388179a798c6528563873cbabd80a0e7272c013/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d388179a798c6528563873cbabd80a0e7272c013/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d388179a798c6528563873cbabd80a0e7272c013", "patch": "@@ -20420,7 +20420,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_laneq_f32 (float32x2_t __a, float32x2_t __b,\n \t        float32x4_t __c, const int __lane)\n {\n-  return (__a + (__b * __aarch64_vget_lane_any (__c, __lane)));\n+  return __builtin_aarch64_float_mla_laneqv2sf (__a, __b, __c, __lane);\n }\n \n __extension__ extern __inline int16x4_t\n@@ -20504,7 +20504,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_laneq_f32 (float32x4_t __a, float32x4_t __b,\n \t\t float32x4_t __c, const int __lane)\n {\n-  return (__a + (__b * __aarch64_vget_lane_any (__c, __lane)));\n+  return __builtin_aarch64_float_mla_laneqv4sf (__a, __b, __c, __lane);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -20618,7 +20618,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_laneq_f32 (float32x2_t __a, float32x2_t __b,\n \t       float32x4_t __c, const int __lane)\n {\n-  return (__a - (__b * __aarch64_vget_lane_any (__c, __lane)));\n+  return __builtin_aarch64_float_mls_laneqv2sf (__a, __b, __c, __lane);\n }\n \n __extension__ extern __inline int16x4_t\n@@ -20702,7 +20702,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_laneq_f32 (float32x4_t __a, float32x4_t __b,\n \t\tfloat32x4_t __c, const int __lane)\n {\n-  return (__a - (__b * __aarch64_vget_lane_any (__c, __lane)));\n+  return __builtin_aarch64_float_mls_laneqv4sf (__a, __b, __c, __lane);\n }\n \n __extension__ extern __inline int16x8_t"}]}