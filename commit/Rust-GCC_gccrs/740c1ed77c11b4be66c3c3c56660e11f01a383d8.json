{"sha": "740c1ed77c11b4be66c3c3c56660e11f01a383d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwYzFlZDc3YzExYjRiZTY2YzNjM2M1NjY2MGUxMWYwMWEzODNkOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-12-07T15:01:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-12-07T15:01:47Z"}, "message": "[AArch64][SVE] Remove unnecessary PTRUEs from FP arithmetic\n\nWhen using the unpredicated all-register forms of FADD, FSUB and FMUL,\nthe rtl patterns would still have the predicate operand we created for\nthe other forms.  This patch splits the patterns after reload in order\nto get rid of the predicate, like we already do for WHILE.\n\n2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_UNPRED_FP_BINARY): New code\n\titerator.\n\t(sve_fp_op): Handle minus and mult.\n\t* config/aarch64/aarch64-sve.md (*add<mode>3, *sub<mode>3)\n\t(*mul<mode>3): Split the patterns after reload if we don't\n\tneed the predicate operand.\n\t(*post_ra_<sve_fp_op><mode>3): New pattern.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/pred_elim_1.c: New test.\n\nFrom-SVN: r266891", "tree": {"sha": "d94f381bbf9f39e2564351a3299cf464c0b47da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d94f381bbf9f39e2564351a3299cf464c0b47da0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/740c1ed77c11b4be66c3c3c56660e11f01a383d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740c1ed77c11b4be66c3c3c56660e11f01a383d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740c1ed77c11b4be66c3c3c56660e11f01a383d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740c1ed77c11b4be66c3c3c56660e11f01a383d8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a58929be88a9f83881668f3d0fb7961c4ef5e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a58929be88a9f83881668f3d0fb7961c4ef5e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a58929be88a9f83881668f3d0fb7961c4ef5e58"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "d1a4025423263d00a8f9a6b757e304afd1bcd785", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=740c1ed77c11b4be66c3c3c56660e11f01a383d8", "patch": "@@ -1,3 +1,13 @@\n+2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_UNPRED_FP_BINARY): New code\n+\titerator.\n+\t(sve_fp_op): Handle minus and mult.\n+\t* config/aarch64/aarch64-sve.md (*add<mode>3, *sub<mode>3)\n+\t(*mul<mode>3): Split the patterns after reload if we don't\n+\tneed the predicate operand.\n+\t(*post_ra_<sve_fp_op><mode>3): New pattern.\n+\n 2018-12-07  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \t* profile-count.h (profile_count::oeprator>=): Fix typo by inverting"}, {"sha": "edc6cff8fbda29e143c10921b4fac72930ec1315", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=740c1ed77c11b4be66c3c3c56660e11f01a383d8", "patch": "@@ -2194,7 +2194,7 @@\n )\n \n ;; Floating-point addition predicated with a PTRUE.\n-(define_insn \"*add<mode>3\"\n+(define_insn_and_split \"*add<mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n@@ -2206,7 +2206,12 @@\n   \"@\n    fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n    fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\n-   fadd\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\"\n+   #\"\n+  ; Split the unpredicated form after reload, so that we don't have\n+  ; the unnecessary PTRUE.\n+  \"&& reload_completed\n+   && register_operand (operands[3], <MODE>mode)\"\n+  [(set (match_dup 0) (plus:SVE_F (match_dup 2) (match_dup 3)))]\n )\n \n ;; Unpredicated floating-point subtraction.\n@@ -2225,7 +2230,7 @@\n )\n \n ;; Floating-point subtraction predicated with a PTRUE.\n-(define_insn \"*sub<mode>3\"\n+(define_insn_and_split \"*sub<mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w, w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n@@ -2240,7 +2245,13 @@\n    fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n    fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\n    fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n-   fsub\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\"\n+   #\"\n+  ; Split the unpredicated form after reload, so that we don't have\n+  ; the unnecessary PTRUE.\n+  \"&& reload_completed\n+   && register_operand (operands[2], <MODE>mode)\n+   && register_operand (operands[3], <MODE>mode)\"\n+  [(set (match_dup 0) (minus:SVE_F (match_dup 2) (match_dup 3)))]\n )\n \n ;; Unpredicated floating-point multiplication.\n@@ -2259,7 +2270,7 @@\n )\n \n ;; Floating-point multiplication predicated with a PTRUE.\n-(define_insn \"*mul<mode>3\"\n+(define_insn_and_split \"*mul<mode>3\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n@@ -2270,9 +2281,25 @@\n   \"TARGET_SVE\"\n   \"@\n    fmul\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n-   fmul\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\"\n+   #\"\n+  ; Split the unpredicated form after reload, so that we don't have\n+  ; the unnecessary PTRUE.\n+  \"&& reload_completed\n+   && register_operand (operands[3], <MODE>mode)\"\n+  [(set (match_dup 0) (mult:SVE_F (match_dup 2) (match_dup 3)))]\n )\n \n+;; Unpredicated floating-point binary operations (post-RA only).\n+;; These are generated by splitting a predicated instruction whose\n+;; predicate is unused.\n+(define_insn \"*post_ra_<sve_fp_op><mode>3\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w\")\n+\t(SVE_UNPRED_FP_BINARY:SVE_F\n+\t  (match_operand:SVE_F 1 \"register_operand\" \"w\")\n+\t  (match_operand:SVE_F 2 \"register_operand\" \"w\")))]\n+  \"TARGET_SVE && reload_completed\"\n+  \"<sve_fp_op>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\")\n+\n ;; Unpredicated fma (%0 = (%1 * %2) + %3).\n (define_expand \"fma<mode>4\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")"}, {"sha": "a80755734d67e90d25b4570d36de2f82d38addc6", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=740c1ed77c11b4be66c3c3c56660e11f01a383d8", "patch": "@@ -1220,6 +1220,9 @@\n ;; SVE integer binary division operations.\n (define_code_iterator SVE_INT_BINARY_SD [div udiv])\n \n+;; SVE floating-point operations with an unpredicated all-register form.\n+(define_code_iterator SVE_UNPRED_FP_BINARY [plus minus mult])\n+\n ;; SVE integer comparisons.\n (define_code_iterator SVE_INT_CMP [lt le eq ne ge gt ltu leu geu gtu])\n \n@@ -1423,6 +1426,8 @@\n \n ;; The floating-point SVE instruction that implements an rtx code.\n (define_code_attr sve_fp_op [(plus \"fadd\")\n+\t\t\t     (minus \"fsub\")\n+\t\t\t     (mult \"fmul\")\n \t\t\t     (neg \"fneg\")\n \t\t\t     (abs \"fabs\")\n \t\t\t     (sqrt \"fsqrt\")])"}, {"sha": "996cacda1cbf891f25d7d94cdb273cd68d7a1c35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=740c1ed77c11b4be66c3c3c56660e11f01a383d8", "patch": "@@ -1,3 +1,7 @@\n+2018-12-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pred_elim_1.c: New test.\n+\n 2018-12-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/ipa-stack-alignment-2.c: Add"}, {"sha": "6b0faf1edefe49c3eb5751ba7090c30b5665cf97", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pred_elim_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred_elim_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740c1ed77c11b4be66c3c3c56660e11f01a383d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred_elim_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred_elim_1.c?ref=740c1ed77c11b4be66c3c3c56660e11f01a383d8", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define TEST_OP(NAME, TYPE, OP)\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  NAME##_##TYPE (TYPE *restrict a, TYPE *restrict b,\t\\\n+\t\t TYPE *restrict c, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      a[i] = b[i] OP c[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(TYPE) \\\n+  TEST_OP (add, TYPE, +) \\\n+  TEST_OP (sub, TYPE, -) \\\n+  TEST_OP (mult, TYPE, *) \\\n+\n+TEST_TYPE (float)\n+TEST_TYPE (double)\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\t} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tptrue\\t} } } */"}]}