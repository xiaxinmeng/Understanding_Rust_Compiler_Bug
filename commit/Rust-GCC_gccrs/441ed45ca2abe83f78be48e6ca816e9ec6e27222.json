{"sha": "441ed45ca2abe83f78be48e6ca816e9ec6e27222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxZWQ0NWNhMmFiZTgzZjc4YmU0OGU2Y2E4MTZlOWVjNmUyNzIyMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-28T19:39:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-28T19:39:48Z"}, "message": "PR libstdc++/90634 reduce allocations in filesystem::path construction\n\n\tPR libstdc++/90634\n\t* include/experimental/bits/fs_path.h (path::path(path&&)): Only call\n\t_M_split_cmpts() for a path with multiple components.\n\t(path::_S_is_dir_sep()): Add missing 'static' keyword to function.\n\t* src/filesystem/path.cc (path::_M_split_cmpts()): Count number of\n\tcomponents and reserve space in vector. Return early when there is\n\tonly one component.\n\t* testsuite/27_io/filesystem/path/construct/90634.cc: New test.\n\t* testsuite/experimental/filesystem/path/construct/90634.cc: New test.\n\nFrom-SVN: r271717", "tree": {"sha": "c1876a43ff7fce4b9302209be2ba1be30429da12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1876a43ff7fce4b9302209be2ba1be30429da12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/441ed45ca2abe83f78be48e6ca816e9ec6e27222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441ed45ca2abe83f78be48e6ca816e9ec6e27222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441ed45ca2abe83f78be48e6ca816e9ec6e27222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441ed45ca2abe83f78be48e6ca816e9ec6e27222/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b401df8f3eda8bcb647cae0c07c9bd19bff00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b401df8f3eda8bcb647cae0c07c9bd19bff00b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b401df8f3eda8bcb647cae0c07c9bd19bff00b"}], "stats": {"total": 219, "additions": 215, "deletions": 4}, "files": [{"sha": "31f7766b8317e3423fee7e561b2d2560840ccb12", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=441ed45ca2abe83f78be48e6ca816e9ec6e27222", "patch": "@@ -1,5 +1,15 @@\n 2019-05-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90634\n+\t* include/experimental/bits/fs_path.h (path::path(path&&)): Only call\n+\t_M_split_cmpts() for a path with multiple components.\n+\t(path::_S_is_dir_sep()): Add missing 'static' keyword to function.\n+\t* src/filesystem/path.cc (path::_M_split_cmpts()): Count number of\n+\tcomponents and reserve space in vector. Return early when there is\n+\tonly one component.\n+\t* testsuite/27_io/filesystem/path/construct/90634.cc: New test.\n+\t* testsuite/experimental/filesystem/path/construct/90634.cc: New test.\n+\n \t* testsuite/util/testsuite_fs.h (compare_paths): Use three-argument\n \tform of std::equals for C++11 compatibility.\n "}, {"sha": "9a68a272e34bb4360d21f5c79948c8fd3c1cd153", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=441ed45ca2abe83f78be48e6ca816e9ec6e27222", "patch": "@@ -195,7 +195,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path(path&& __p) noexcept\n     : _M_pathname(std::move(__p._M_pathname)), _M_type(__p._M_type)\n     {\n-      _M_split_cmpts();\n+      if (_M_type == _Type::_Multi)\n+\t_M_split_cmpts();\n       __p.clear();\n     }\n \n@@ -490,7 +491,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn _S_convert_loc(__s.data(), __s.data() + __s.size(), __loc);\n       }\n \n-    bool _S_is_dir_sep(value_type __ch)\n+    static bool _S_is_dir_sep(value_type __ch)\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       return __ch == L'/' || __ch == preferred_separator;"}, {"sha": "dfc3bd53c0053c58d78c1eaad2947fab83a7e9c1", "filename": "libstdc++-v3/src/filesystem/path.cc", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc?ref=441ed45ca2abe83f78be48e6ca816e9ec6e27222", "patch": "@@ -340,6 +340,28 @@ path::_M_split_cmpts()\n   if (_M_pathname.empty())\n     return;\n \n+  {\n+    // Approximate count of components, to reserve space in _M_cmpts vector:\n+    int count = 1;\n+    bool saw_sep_last = _S_is_dir_sep(_M_pathname[0]);\n+    bool saw_non_sep = !saw_sep_last;\n+    for (value_type c : _M_pathname)\n+      {\n+       if (_S_is_dir_sep(c))\n+         saw_sep_last = true;\n+       else if (saw_sep_last)\n+         {\n+           ++count;\n+           saw_sep_last = false;\n+           saw_non_sep = true;\n+         }\n+      }\n+    if (saw_non_sep && saw_sep_last)\n+      ++count; // empty filename after trailing slash\n+    if (count > 1)\n+      _M_cmpts.reserve(count);\n+  }\n+\n   size_t pos = 0;\n   const size_t len = _M_pathname.size();\n \n@@ -362,9 +384,13 @@ path::_M_split_cmpts()\n \t      pos = 3;\n \t      while (pos < len && !_S_is_dir_sep(_M_pathname[pos]))\n \t\t++pos;\n+\t      if (pos == len)\n+\t\t{\n+\t\t  _M_type = _Type::_Root_name;\n+\t\t  return;\n+\t\t}\n \t      _M_add_root_name(pos);\n-\t      if (pos < len) // also got root directory\n-\t\t_M_add_root_dir(pos);\n+\t      _M_add_root_dir(pos);\n \t    }\n \t  else\n \t    {\n@@ -373,6 +399,11 @@ path::_M_split_cmpts()\n \t      _M_add_root_dir(0);\n \t    }\n \t}\n+      else if (len == 1) // got root directory only\n+\t{\n+\t  _M_type = _Type::_Root_dir;\n+\t  return;\n+\t}\n       else // got root directory\n \t_M_add_root_dir(0);\n       ++pos;\n@@ -381,12 +412,28 @@ path::_M_split_cmpts()\n   else if (len > 1 && _M_pathname[1] == L':')\n     {\n       // got disk designator\n+      if (len == 2)\n+\t{\n+\t  _M_type = _Type::_Root_name;\n+\t  return;\n+\t}\n       _M_add_root_name(2);\n       if (len > 2 && _S_is_dir_sep(_M_pathname[2]))\n \t_M_add_root_dir(2);\n       pos = 2;\n     }\n #endif\n+  else\n+    {\n+      size_t n = 1;\n+      for (; n < _M_pathname.size() && !_S_is_dir_sep(_M_pathname[n]); ++n)\n+\t{ }\n+      if (n == _M_pathname.size())\n+\t{\n+\t  _M_type = _Type::_Filename;\n+\t  return;\n+\t}\n+    }\n \n   size_t back = pos;\n   while (pos < len)"}, {"sha": "03ec2b1a95ad342693f208e07c8780899ff9e348", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/90634.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F90634.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F90634.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F90634.cc?ref=441ed45ca2abe83f78be48e6ca816e9ec6e27222", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <filesystem>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+std::size_t bytes_allocated = 0;\n+\n+void* operator new(std::size_t n)\n+{\n+  bytes_allocated += n;\n+  return std::malloc(n);\n+}\n+\n+void operator delete(void* p) noexcept { std::free(p); }\n+#if __cpp_sized_deallocation\n+void operator delete(void* p, std::size_t) noexcept { std::free(p); }\n+#endif\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  std::wstring s0;\n+  std::wstring s1 = L\"/\";\n+  std::wstring s2 = L\"///\";\n+  std::wstring s3 = L\"file\";\n+  std::wstring s4 = L\"C:\";\n+  std::wstring s5 = L\"\\\\\";\n+#else\n+  std::string s0;\n+  std::string s1 = \"/\";\n+  std::string s2 = \"///\";\n+  std::string s3 = \"file\";\n+  std::string s4 = \"C:\";\n+  std::string s5 = \"\\\\\";\n+#endif\n+\n+  using std::filesystem::path;\n+\n+  bytes_allocated = 0;\n+  path p0 = std::move(s0);\n+  VERIFY( bytes_allocated == 0 );\n+  path p1 = std::move(s1);\n+  VERIFY( bytes_allocated == 0 );\n+  path p2 = std::move(s2);\n+  VERIFY( bytes_allocated == 0 );\n+  path p3 = std::move(s3);\n+  VERIFY( bytes_allocated == 0 );\n+  path p4 = std::move(s4);\n+  VERIFY( bytes_allocated == 0 );\n+  path p5 = std::move(s5);\n+  VERIFY( bytes_allocated == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "6dce1df3d63b4ffcba07d48bbe20ec4b901490ee", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/construct/90634.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2F90634.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441ed45ca2abe83f78be48e6ca816e9ec6e27222/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2F90634.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2F90634.cc?ref=441ed45ca2abe83f78be48e6ca816e9ec6e27222", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-DUSE_FILESYSTEM_TS -lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+std::size_t bytes_allocated = 0;\n+\n+void* operator new(std::size_t n)\n+{\n+  bytes_allocated += n;\n+  return std::malloc(n);\n+}\n+\n+void operator delete(void* p) noexcept { std::free(p); }\n+#if __cpp_sized_deallocation\n+void operator delete(void* p, std::size_t) noexcept { std::free(p); }\n+#endif\n+\n+void\n+test01()\n+{\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  std::wstring s0;\n+  std::wstring s1 = L\"/\";\n+  std::wstring s2 = L\"file\";\n+  std::wstring s3 = L\"C:\";\n+  std::wstring s4 = L\"\\\\\";\n+#else\n+  std::string s0;\n+  std::string s1 = \"/\";\n+  std::string s2 = \"file\";\n+  std::string s3 = \"C:\";\n+  std::string s4 = \"\\\\\";\n+#endif\n+\n+  using std::experimental::filesystem::path;\n+\n+  bytes_allocated = 0;\n+  path p0 = std::move(s0);\n+  VERIFY( bytes_allocated == 0 );\n+  path p1 = std::move(s1);\n+  VERIFY( bytes_allocated == 0 );\n+  path p2 = std::move(s2);\n+  VERIFY( bytes_allocated == 0 );\n+  path p3 = std::move(s3);\n+  VERIFY( bytes_allocated == 0 );\n+  path p4 = std::move(s4);\n+  VERIFY( bytes_allocated == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}