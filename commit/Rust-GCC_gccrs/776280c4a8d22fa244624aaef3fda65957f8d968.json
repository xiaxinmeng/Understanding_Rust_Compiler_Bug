{"sha": "776280c4a8d22fa244624aaef3fda65957f8d968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2MjgwYzRhOGQyMmZhMjQ0NjI0YWFlZjNmZGE2NTk1N2Y4ZDk2OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-07-24T16:25:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-24T16:25:56Z"}, "message": "re PR target/64003 (valgrind complains about get_attr_length_nobnd in insn-attrtab.c from i386.md)\n\n\tPR target/64003\n\t* config/i386/i386.h (ADJUST_INSN_LENGTH): New define.\n\t* config/i386/i386.md (maybe_prefix_bnd): New attribute.\n\t(*jcc_1, *jcc_2, jump, simple_return_internal)\n\t(simple_return_pop_internal): Set attribute maybe_prefix_bnd.\n\tSet length_nobnd attribute instead of length attribute.\n\t(indirect_jump, *tablejump_1): Set attribute maybe_prefix_bnd.\n\t(length_nobnd): Remove attribute.\n\t(length): Remove length_nobnd processing.\n\nFrom-SVN: r226173", "tree": {"sha": "904a8a353d3769661f88579ff35a8c96a1f144b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904a8a353d3769661f88579ff35a8c96a1f144b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/776280c4a8d22fa244624aaef3fda65957f8d968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776280c4a8d22fa244624aaef3fda65957f8d968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776280c4a8d22fa244624aaef3fda65957f8d968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776280c4a8d22fa244624aaef3fda65957f8d968/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72500605c11edd0ba6ea2af2e9ee78facabb18da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72500605c11edd0ba6ea2af2e9ee78facabb18da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72500605c11edd0ba6ea2af2e9ee78facabb18da"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "9f2f87bdc217546d76682dda05d0ff0793388f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776280c4a8d22fa244624aaef3fda65957f8d968/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776280c4a8d22fa244624aaef3fda65957f8d968/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=776280c4a8d22fa244624aaef3fda65957f8d968", "patch": "@@ -1,3 +1,15 @@\n+2015-07-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/64003\n+\t* config/i386/i386.h (ADJUST_INSN_LENGTH): New define.\n+\t* config/i386/i386.md (maybe_prefix_bnd): New attribute.\n+\t(*jcc_1, *jcc_2, jump, simple_return_internal)\n+\t(simple_return_pop_internal): Set attribute maybe_prefix_bnd.\n+\tSet length_nobnd attribute instead of length attribute.\n+\t(indirect_jump, *tablejump_1): Set attribute maybe_prefix_bnd.\n+\t(length_nobnd): Remove attribute.\n+\t(length): Remove length_nobnd processing.\n+\n 2015-07-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gimplify.c (omp_default_clause): New function.  Reorganize flow"}, {"sha": "72ec74d8b94c1c5e07f57f421a9a300e807fefdf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776280c4a8d22fa244624aaef3fda65957f8d968/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776280c4a8d22fa244624aaef3fda65957f8d968/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=776280c4a8d22fa244624aaef3fda65957f8d968", "patch": "@@ -2260,6 +2260,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Default threshold for putting data in large sections\n    with x86-64 medium memory model */\n #define DEFAULT_LARGE_SECTION_THRESHOLD 65536\n+\n+/* Adjust the length of the insn with the length of BND prefix.  */\n+#define ADJUST_INSN_LENGTH(INSN, LENGTH)\t\\\n+do {\t\t\t\t\t\t\\\n+  if (recog_memoized (INSN) >= 0\t\t\\\n+      && get_attr_maybe_prefix_bnd (INSN))\t\\\n+    LENGTH += ix86_bnd_prefixed_insn_p (INSN);\t\\\n+} while (0)\n \f\n /* Which processor to tune code generation for.  These must be in sync\n    with processor_target_table in i386.c.  */ "}, {"sha": "6b924e7e154521f4fd75f6812c7c3edaee5772bf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776280c4a8d22fa244624aaef3fda65957f8d968/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776280c4a8d22fa244624aaef3fda65957f8d968/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=776280c4a8d22fa244624aaef3fda65957f8d968", "patch": "@@ -568,6 +568,9 @@\n \t]\n \t(const_int 0)))\n \n+;; Set when BND opcode prefix may be used.\n+(define_attr \"maybe_prefix_bnd\" \"\" (const_int 0))\n+\n ;; Prefix used: original, VEX or maybe VEX.\n (define_attr \"prefix\" \"orig,vex,maybe_vex,evex,maybe_evex\"\n   (cond [(eq_attr \"mode\" \"OI,V8SF,V4DF\")\n@@ -635,19 +638,12 @@\n \t ]\n \t (const_int 1)))\n \n-;; When this attribute is set, calculate total insn length from\n-;; length_nobnd attribute, prefixed with eventual bnd prefix byte\n-(define_attr \"length_nobnd\" \"\" (const_int 0))\n-\n ;; The (bounding maximum) length of an instruction in bytes.\n ;; ??? fistp and frndint are in fact fldcw/{fistp,frndint}/fldcw sequences.\n ;; Later we may want to split them and compute proper length as for\n ;; other insns.\n (define_attr \"length\" \"\"\n-  (cond [(eq_attr \"length_nobnd\" \"!0\")\n-\t   (plus (symbol_ref (\"ix86_bnd_prefixed_insn_p (insn)\"))\n-\t\t (attr \"length_nobnd\"))\n-\t (eq_attr \"type\" \"other,multi,fistp,frndint\")\n+  (cond [(eq_attr \"type\" \"other,multi,fistp,frndint\")\n \t   (const_int 16)\n \t (eq_attr \"type\" \"fcmp\")\n \t   (const_int 4)\n@@ -11133,14 +11129,15 @@\n   \"%!%+j%C1\\t%l0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"modrm\" \"0\")\n-   (set (attr \"length_nobnd\")\n+   (set (attr \"length\")\n \t(if_then_else\n \t  (and (ge (minus (match_dup 0) (pc))\n \t\t   (const_int -126))\n \t       (lt (minus (match_dup 0) (pc))\n \t\t   (const_int 128)))\n \t  (const_int 2)\n-\t  (const_int 6)))])\n+\t  (const_int 6)))\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n (define_insn \"*jcc_2\"\n   [(set (pc)\n@@ -11152,14 +11149,15 @@\n   \"%!%+j%c1\\t%l0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"modrm\" \"0\")\n-   (set (attr \"length_nobnd\")\n+   (set (attr \"length\")\n \t(if_then_else\n \t  (and (ge (minus (match_dup 0) (pc))\n \t\t   (const_int -126))\n \t       (lt (minus (match_dup 0) (pc))\n \t\t   (const_int 128)))\n \t  (const_int 2)\n-\t  (const_int 6)))])\n+\t  (const_int 6)))\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n ;; In general it is not safe to assume too much about CCmode registers,\n ;; so simplify-rtx stops when it sees a second one.  Under certain\n@@ -11425,14 +11423,15 @@\n   \"%!jmp\\t%l0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"modrm\" \"0\")\n-   (set (attr \"length_nobnd\")\n+   (set (attr \"length\")\n \t(if_then_else\n \t  (and (ge (minus (match_dup 0) (pc))\n \t\t   (const_int -126))\n \t       (lt (minus (match_dup 0) (pc))\n \t\t   (const_int 128)))\n \t  (const_int 2)\n-\t  (const_int 5)))])\n+\t  (const_int 5)))\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n (define_expand \"indirect_jump\"\n   [(set (pc) (match_operand 0 \"indirect_branch_operand\"))]\n@@ -11447,7 +11446,8 @@\n   \"\"\n   \"%!jmp\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n-   (set_attr \"length_immediate\" \"0\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n (define_expand \"tablejump\"\n   [(parallel [(set (pc) (match_operand 0 \"indirect_branch_operand\"))\n@@ -11496,7 +11496,8 @@\n   \"\"\n   \"%!jmp\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n-   (set_attr \"length_immediate\" \"0\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \f\n ;; Convert setcc + movzbl to xor + setcc if operands don't overlap.\n \n@@ -12072,10 +12073,11 @@\n   [(simple_return)]\n   \"reload_completed\"\n   \"%!ret\"\n-  [(set_attr \"length_nobnd\" \"1\")\n+  [(set_attr \"length\" \"1\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"modrm\" \"0\")])\n+   (set_attr \"modrm\" \"0\")\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n ;; Used by x86_machine_dependent_reorg to avoid penalty on single byte RET\n ;; instruction Athlon and K8 have.\n@@ -12101,18 +12103,20 @@\n    (use (match_operand:SI 0 \"const_int_operand\"))]\n   \"reload_completed\"\n   \"%!ret\\t%0\"\n-  [(set_attr \"length_nobnd\" \"3\")\n+  [(set_attr \"length\" \"3\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"2\")\n-   (set_attr \"modrm\" \"0\")])\n+   (set_attr \"modrm\" \"0\")\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n (define_insn \"simple_return_indirect_internal\"\n   [(simple_return)\n    (use (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"reload_completed\"\n   \"%!jmp\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n-   (set_attr \"length_immediate\" \"0\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]"}]}