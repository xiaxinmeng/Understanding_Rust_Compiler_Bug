{"sha": "1cda629f96b4e982bb87343a35a6db39445d3962", "node_id": "C_kwDOANBUbNoAKDFjZGE2MjlmOTZiNGU5ODJiYjg3MzQzYTM1YTZkYjM5NDQ1ZDM5NjI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-19T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-19T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "334e3269a070d647fe015051fff878c7b8e61521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334e3269a070d647fe015051fff878c7b8e61521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cda629f96b4e982bb87343a35a6db39445d3962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cda629f96b4e982bb87343a35a6db39445d3962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cda629f96b4e982bb87343a35a6db39445d3962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cda629f96b4e982bb87343a35a6db39445d3962/comments", "author": null, "committer": null, "parents": [{"sha": "7da9a089608b0ca09683332ce014fb6184842724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da9a089608b0ca09683332ce014fb6184842724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da9a089608b0ca09683332ce014fb6184842724"}], "stats": {"total": 464, "additions": 463, "deletions": 1}, "files": [{"sha": "66fe54bf59de80783854b195eba77b2107aa28ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,75 @@\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/105131\n+\t* doc/invoke.texi: Document -Wenum-int-mismatch.\n+\n+2022-05-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/gnu-user-common.h (defined): Only define\n+\tTARGET_CAN_SPLIT_STACK for glibc targets.\n+\t* config/i386/gnu.h (defined): Ditto.\n+\n+2022-05-18  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.cc (ix86_rtx_costs) [MULT]: When mode size\n+\tis wider than word_mode, a multiplication costs three word_mode\n+\tmultiplications and two word_mode additions.\n+\n+2022-05-18  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.md (define_split):  Split *andsi_1\n+\tand *andn_si_ccno after reload with -Oz.\n+\n+2022-05-18  Frederik Harwath  <frederik@codesourcery.com>\n+\n+\t* graphite-scop-detection.cc (scop_detection::can_represent_loop):\n+\tOutput reason for failure to dump file.\n+\t(scop_detection::harmful_loop_in_region): Likewise.\n+\t(scop_detection::graphite_can_represent_expr): Likewise.\n+\t(scop_detection::stmt_has_simple_data_refs_p): Likewise.\n+\t(scop_detection::stmt_simple_for_scop_p): Likewise.\n+\t(print_sese_loop_numbers): New function.\n+\t(scop_detection::add_scop): Use from here.\n+\n+2022-05-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR middle-end/103462\n+\t* match.pd (bitwise_induction_p): New match.\n+\t* tree-scalar-evolution.cc (gimple_bitwise_induction_p):\n+\tDeclare.\n+\t(analyze_and_compute_bitwise_induction_effect): New function.\n+\t(enum bit_op_kind): New enum.\n+\t(final_value_replacement_loop): Enhanced to handle bitwise\n+\tinduction.\n+\n+2022-05-18  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/95737\n+\t* config/rs6000/rs6000.md (*subfsi3_carry_in_xx_64): New.\n+\n+2022-05-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/104375\n+\t* config/i386/i386.md (*bmi2_bzhi_zero_extendsidi_4): New\n+\tdefine_insn.\n+\n+2022-05-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/104610\n+\t* config/i386/i386-expand.cc (ix86_expand_branch): Use ptest\n+\tfor QImode when code is EQ or NE.\n+\t* config/i386/i386.md (cbranchoi4): New expander.\n+\n+2022-05-18  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/105556\n+\t* config/rs6000/mma.md (mma_<vv>, mma_<avv>, mma_<pv>, mma_<apv>,\n+\tmma_<vvi4i4i8>, mma_<avvi4i4i8>, mma_<vvi4i4i2>, mma_<avvi4i4i2>,\n+\tmma_<vvi4i4>, mma_<avvi4i4>, mma_<pvi4i2>, mma_<apvi4i2>,\n+\tmma_<vvi4i4i4>, mma_<avvi4i4i4>): Replace \"wa\" constraints with \"v,?wa\".\n+\tUpdate other operands accordingly.\n+\n 2022-05-17  Marek Polacek  <polacek@redhat.com>\n \n \t* godump.cc (go_output_typedef): Use the DECL_INITIAL of the TREE_VALUE."}, {"sha": "756cdcb135987a3322d538716bb28318488b9b96", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1 +1 @@\n-20220518\n+20220519"}, {"sha": "746aee8e771d27a357972ad6cd93f5f97d45328a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,240 @@\n+2022-05-18  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-imageu.adb (Set_Image_Unsigned): Change assertion.\n+\n+2022-05-18  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sigtramp-qnx.c: Change struct sigcontext * to mcontext_t *.\n+\n+2022-05-18  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sigtramp-arm-qnx.c: Rewrite.\n+\n+2022-05-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb (Big3): Change return type.\n+\t(Lemma_Mult_Non_Negative, Lemma_Mult_Non_Positive): Reorder\n+\talphabetically.\n+\t(Lemma_Concat_Definition, Lemma_Double_Big_2xxsingle): New\n+\tlemmas.\n+\t(Double_Divide, Scaled_Divide): Add assertions.\n+\n+2022-05-18  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-valueu.adb (Scan_Raw_Unsigned): Add assertions.\n+\n+2022-05-18  K\u00e9vin Le Gouguec  <legouguec@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb (Read_Aranges_Header): Initialize output\n+\tparameter in case we return early.\n+\n+2022-05-18  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-crbtgo.ads, libgnat/a-rbtgbo.ads,\n+\tlibgnat/a-cbdlli.adb, libgnat/a-cbhama.adb,\n+\tlibgnat/a-cbhase.adb, libgnat/a-cdlili.adb,\n+\tlibgnat/a-cfdlli.adb, libgnat/a-cfhama.adb,\n+\tlibgnat/a-cfhase.adb, libgnat/a-cidlli.adb,\n+\tlibgnat/a-cihama.adb, libgnat/a-cihase.adb,\n+\tlibgnat/a-cohama.adb, libgnat/a-cohase.adb,\n+\tlibgnat/a-crbtgo.adb, libgnat/a-crdlli.adb, libgnat/a-rbtgbo.adb\n+\t(Vet): Make the Vet functions do nothing when\n+\tContainer_Checks'Enabled is False, and inline them, so the calls\n+\tdisappear when optimizing.\n+\n+2022-05-18  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (arm-qnx): Use default (non-fma) target pair.\n+\n+2022-05-18  K\u00e9vin Le Gouguec  <legouguec@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb (Aranges_Lookup, Enable_Cache): Adapt to\n+\tchanges in the signature of Read_Aranges_*.\n+\t(Debug_Info_Lookup): Do not control address size read from\n+\tDWARF.\n+\t(Read_Aranges_Header): Do not control address size read from\n+\tDWARF; return this size.\n+\t(Read_Aranges_Entry): Use the size returned by\n+\tRead_Aranges_Header.\n+\n+2022-05-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* errout.ads (Error_Msg_GNAT_Extension): Add formal Loc and\n+\trevise comment.\n+\t* errout.adb (Error_Msg_GNAT_Extension): Condition message on\n+\tthe flag Ada_Version_Pragma, and add suggestion to use of pragma\n+\tExtensions_Allowed in messages.\n+\t* par-ch3.adb, par-ch5.adb, par-ch6.adb, par-ch11.adb,\n+\tpar-ch12.adb: Add actual Token_Ptr on calls to\n+\tError_Msg_GNAT_Extension.\n+\t* par-ch4.adb: Change Error_Msg to Error_Msg_GNAT_Extension for\n+\terror calls related to use of extension features.\n+\t* sem_ch13.adb: Likewise.\n+\n+2022-05-18  Johannes Kliemann  <kliemann@adacore.com>\n+\n+\t* libgnarl/s-osinte__qnx.adb (To_Target_Priority): Perform\n+\tarithmetic in int.\n+\n+2022-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch7.adb (Build_BIP_Cleanup_Stmts): Use Needs_BIP_Alloc_Form.\n+\n+2022-05-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (Find_Corresponding_Spec): Avoid calling\n+\tIs_Null_Extension with a class-wide type entity.\n+\t(Overrides_Visible_Function): Handle alias entities.\n+\t* sem_res.adb (Has_Applicable_User_Defined_Literal): Conversion\n+\tnot needed if the result type of the call is class-wide or if\n+\tthe result type matches the context type.\n+\t* sem_util.ads (Is_Null_Extension): Adding documentation.\n+\t(Is_Null_Extension_Of): Adding documentation.\n+\t* sem_util.adb (Is_Null_Extension): Adding assertion.\n+\t(Is_Null_Extension_Of): Adding assertions.\n+\n+2022-05-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* snames.ads-tmpl (Name_Index): New attribute name.\n+\t(Attribute_Id): Adding Attribute_Index as regular attribute.\n+\t* sem_attr.adb (Attribute_22): Adding Attribute_Index as Ada\n+\t2022 attribute.\n+\t(Analyze_Index_Attribute): Check that 'Index appears in a\n+\tpre-/postcondition aspect or pragma associated with an entry\n+\tfamily.\n+\t(Analyze_Attribute): Adding semantic analysis for 'Index.\n+\t(Eval_Attribute): Register 'Index as can never be folded.\n+\t(Resolve_Attribute): Resolve attribute 'Index.\n+\t* sem_ch9.adb (Check_Wrong_Attribute_In_Postconditions): New\n+\tsubprogram.\n+\t(Analyze_Requeue): Check that the requeue target shall not have\n+\tan applicable specific or class-wide postcondition which\n+\tincludes an Index attribute reference.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Transform\n+\tattribute Index into a renaming of the second formal of the\n+\twrapper built for an entry family that has contract cases.\n+\t* einfo.ads (Is_Entry_Wrapper): Complete documentation.\n+\n+2022-05-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-imagei.adb (Set_Digits): Add assertion.\n+\t* libgnat/s-imgboo.adb (Image_Boolean): Add assertions.\n+\t* libgnat/s-valueu.adb (Scan_Raw_Unsigned): Add assertion.\n+\n+2022-05-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_aux.adb (Is_Immutably_Limited_Type): Do not look through\n+\tprivate types as per RM 7.5(8.1).\n+\t* sem_ch6.adb (Analyze_Function_Return): Use\n+\tIs_Immutably_Limited_Type as per RM 6.5(5.10).\n+\n+2022-05-18  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* gen_il-gen-gen_nodes.adb (Gen_IL.Gen.Gen_Nodes): Add\n+\tIs_Homogeneous_Aggregate field for N_Delta_Aggregate nodes.\n+\t* par-ch4.adb (P_Aggregate_Or_Paren_Expr): Minor reformatting.\n+\t* sem_aggr.adb (Resolve_Delta_Aggregate): Reject square brackets\n+\tfor record aggregate.\n+\t(Resolve_Record_Aggregate): Uniformise error message.\n+\n+2022-05-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ali.adb (Scan_ALI): Special case a-tags.ali when setting\n+\tSec_Stack_Used.\n+\t* bindgen.adb (Gen_Adainit): Simplify handling of secondary\n+\tstack related code, and only import __gnat_binder_ss_count when\n+\tneeded.\n+\t* libgnat/s-secsta.adb (Binder_SS_Count): Default initialize to\n+\t0.\n+\n+2022-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-dourea.adb (\"/\"): Add guard for zero and infinite\n+\tdivisor.\n+\t* libgnat/s-valuer.adb (Scan_Raw_Real): Add guard for very large\n+\texponent values.\n+\n+2022-05-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_elab.adb (Is_Suitable_Construct): Fix for generated\n+\tconstructs.\n+\n+2022-05-18  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Skip predicate check\n+\tfor type conversion if object's subtype and expression's subtype\n+\tstatically match.\n+\t* exp_prag.adb (Expand_Pragma_Check): Typo fix in comment.\n+\n+2022-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dbug.ads (Build_Subprogram_Instance_Renamings): Fix typo.\n+\t* exp_dbug.adb (Build_Subprogram_Instance_Renamings): Build the\n+\trenaming only for actuals of formal objects.\n+\n+2022-05-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Abstract_Overriding): If the type is\n+\tderived from an untagged type, then don't perform any of the\n+\tabstract overriding error checks.\n+\n+2022-05-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Component_Count): Calculate size as an Uint and\n+\tonly then check if it is in the range of Int, as otherwise the\n+\tmultiplication of Int values can overflow.\n+\n+2022-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add g-gfmafu$(objext).\n+\t(SIMD_PATH_TARGET_PAIRS): New variable.\n+\t(TRASYM_DWARF_COMMON_OBJS): Minor tweak.\n+\t(x86-64/Linux): Use SIMD_PATH_TARGET_PAIRS.\n+\t(x32/Linux): Likewise.\n+\t* doc/gnat_rm/the_gnat_library.rst (Generic_Fast_Math_Functions):\n+\tNew entry.\n+\t* gnat_rm.texi: Regenerate.\n+\t* impunit.adb (Non_Imp_File_Names_95): Add g-gfmafu.\n+\t* sem_ch7.adb (Has_Referencer): Do not set In_Nested_Instance for\n+\tinstances of generic packages that do not have a body.\n+\t* libgnat/a-nalofl__simd.ads: New SIMD-enabled version.\n+\t* libgnat/a-nuaufl__simd.ads: Likewise.\n+\t* libgnat/g-gfmafu.ads: New package renaming unit.\n+\n+2022-05-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* freeze.adb (Should_Freeze_Type): Fix handling of freezing in\n+\tinstances.\n+\n+2022-05-18  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Generic_Parent): Use\n+\tGet_Unit_Instantiation_Node instead of Next.\n+\n+2022-05-18  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* libgnat/a-nagefl.ads: Replace mentions of C/unix math library\n+\twith intrinsics.\n+\t* libgnat/a-nallfl.ads: Likewise.  State compatibility\n+\trequirements.\n+\t* libgnat/a-nalofl.ads: Likewise.\n+\t* libgnat/a-nuaufl.ads: Likewise.\n+\n+2022-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Move final test on\n+\tIn_Instance to outer condition.\n+\n+2022-05-18  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl: Rename system-qnx-aarch64.ads to\n+\tsystem-qnx-arm.ads.\n+\t(AARCH64 QNX section): Modify to handle both arm and arch64.\n+\t* tracebak.c (__QNX__): Add new __ARMEL__ section.\n+\t* sigtramp-arm-qnx.c: New file.\n+\t* libgnat/system-qnx-aarch64.ads: Renamed to ...\n+\t* libgnat/system-qnx-arm.ads: this.\n+\n 2022-05-17  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_res.adb (Flag_Effectively_Volatile_Objects): Restore"}, {"sha": "2f69aebbc537d8a1ad846f1a2abb6379831596c3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,21 @@\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/105131\n+\t* c.opt (Wenum-int-mismatch): New.\n+\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105497\n+\t* c-warn.cc (c_do_switch_warnings): Don't warn about unhandled\n+\tenumerator when it was marked with attribute unused.\n+\n+2022-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.cc (dump_ada_node) <COMPLEX_TYPE>: Deal with usual\n+\tfloating-point complex types.\n+\t<POINTER_TYPE>: Do not use limited_with clause if the designated\n+\ttype is a scalar type.\n+\n 2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-omp.cc (c_finish_omp_depobj): Handle"}, {"sha": "00e236c9ae2ad6b71da59e62f2e43cf5b162035c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,11 @@\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/105131\n+\t* c-decl.cc (diagnose_mismatched_decls): Warn about enum/integer type\n+\tmismatches.\n+\t* c-tree.h (comptypes_check_enum_int): Declare.\n+\t* c-typeck.cc (comptypes): No longer static.\n+\n 2022-05-17  Marek Polacek  <polacek@redhat.com>\n \n \t* c-decl.cc (finish_enum): Store the CONST_DECL into TREE_VALUE, not"}, {"sha": "41a2615b9f56b8a590d6ca58829dd7cbbc025c94", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,8 @@\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105634\n+\t* call.cc (maybe_warn_class_memaccess): Avoid % by zero.\n+\n 2022-05-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/102307"}, {"sha": "1b9cb915b63e35773285426d66b0029223d957c7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,13 @@\n+2022-05-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (enum gfc_omp_depend_op): Add OMP_DEPEND_INOUTSET.\n+\t(gfc_omp_clauses): Enlarge ENUM_BITFIELD.\n+\t* dump-parse-tree.cc (show_omp_namelist, show_omp_clauses): Handle\n+\t'inoutset' depend modifier.\n+\t* openmp.cc (gfc_match_omp_clauses, gfc_match_omp_depobj): Likewise.\n+\t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):\n+\tLikewise.\n+\n 2022-05-17  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.cc (show_omp_namelist): Handle omp_all_memory."}, {"sha": "e4c2c4614df6fd3803e3c834456789e5443aac9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,83 @@\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/105131\n+\t* gcc.dg/Wenum-int-mismatch-1.c: New test.\n+\t* gcc.dg/Wenum-int-mismatch-2.c: New test.\n+\t* gcc.dg/Wenum-int-mismatch-3.c: New test.\n+\t* gcc.dg/Wenum-int-mismatch-4.c: New test.\n+\t* gcc.dg/Wenum-int-mismatch-5.c: New test.\n+\n+2022-05-18  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/105620\n+\t* g++.target/powerpc/pr69667.C: Move to ...\n+\t* g++.dg/pr69667.C: here. Also, revert recent dg directives changes.\n+\n+2022-05-18  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/bmi-andn-3.c: New test case.\n+\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105497\n+\t* c-c++-common/Wswitch-1.c: New test.\n+\t* g++.dg/warn/Wswitch-4.C: New test.\n+\n+2022-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105634\n+\t* g++.dg/Wclass-memaccess-2.C: Moved to...\n+\t* g++.dg/warn/Wclass-memaccess-2.C: ...here.\n+\t* g++.dg/Wclass-memaccess-3.C: Moved to...\n+\t* g++.dg/warn/Wclass-memaccess-3.C: ...here.\n+\t* g++.dg/Wclass-memaccess-4.C: Moved to...\n+\t* g++.dg/warn/Wclass-memaccess-4.C: ...here.\n+\t* g++.dg/Wclass-memaccess-5.C: Moved to...\n+\t* g++.dg/warn/Wclass-memaccess-5.C: ...here.\n+\t* g++.dg/Wclass-memaccess-6.C: Moved to...\n+\t* g++.dg/warn/Wclass-memaccess-6.C: ...here.\n+\t* g++.dg/Wclass-memaccess.C: Moved to...\n+\t* g++.dg/warn/Wclass-memaccess.C: ...here.\n+\t* g++.dg/warn/Wclass-memaccess-7.C: New test.\n+\n+2022-05-18  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pr83660.C: Moved to...\n+\t* g++.target/powerpc/pr83660.C: ...here.\n+\n+2022-05-18  Frederik Harwath  <frederik@codesourcery.com>\n+\n+\t* gcc.dg/graphite/scop-22a.c: New test.\n+\n+2022-05-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/all-memory-1.f90: Add inoutset test.\n+\t* gfortran.dg/gomp/all-memory-2.f90: Likewise.\n+\t* gfortran.dg/gomp/depobj-1.f90: Likewise.\n+\t* gfortran.dg/gomp/depobj-2.f90: Likewise.\n+\n+2022-05-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr103462-1.c: New test.\n+\t* gcc.target/i386/pr103462-2.c: New test.\n+\t* gcc.target/i386/pr103462-3.c: New test.\n+\t* gcc.target/i386/pr103462-4.c: New test.\n+\t* gcc.target/i386/pr103462-5.c: New test.\n+\t* gcc.target/i386/pr103462-6.c: New test.\n+\n+2022-05-18  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/95737\n+\t* gcc.target/powerpc/pr95737.c: New.\n+\n+2022-05-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr104375.c: New test.\n+\n+2022-05-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr104610.c: New test.\n+\n 2022-05-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/102307"}, {"sha": "2f0b5f607c99911f86058634a4c43dfb6b050fac", "filename": "include/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,15 @@\n+2022-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* cuda/cuda.h (enum CUjit_option): Add\n+\t'CU_JIT_GENERATE_DEBUG_INFO', 'CU_JIT_GENERATE_LINE_INFO'.\n+\t(enum CUlimit): Add 'CU_LIMIT_STACK_SIZE',\n+\t'CU_LIMIT_MALLOC_HEAP_SIZE'.\n+\t(cuCtxSetLimit, cuGetErrorName): Add.\n+\n+2022-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* cuda/cuda.h: For C++, wrap in 'extern \"C\"'.\n+\n 2022-05-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* demangle.h (enum demangle_component_type): Add"}, {"sha": "cc7ba37b3c6a9b0c0e4a2909fc2ebf6c4b7d0d3b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,12 @@\n+2022-05-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.1): Set 'inoutset' to Y.\n+\t(OpenMP Context Selectors): Add missing comma.\n+\t* testsuite/libgomp.fortran/depend-5.f90: Add inoutset test.\n+\t* testsuite/libgomp.fortran/depend-6.f90: Likewise.\n+\t* testsuite/libgomp.fortran/depend-7.f90: Likewise.\n+\t* testsuite/libgomp.fortran/depend-inoutset-1.f90: New test.\n+\n 2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi (OpenMP 5.1): Remove \"Not inside target regions\""}, {"sha": "455dbbad288487b6e61cf6a630e6c84fb4d04ffc", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cda629f96b4e982bb87343a35a6db39445d3962/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cda629f96b4e982bb87343a35a6db39445d3962/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=1cda629f96b4e982bb87343a35a6db39445d3962", "patch": "@@ -1,3 +1,14 @@\n+2022-05-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-demangle.c (d_name): Add SUBSTABLE parameter,\n+\tpush substitution if requested. Adjust unscoped name handling.\n+\t(d_prefix): Reorder main loop. Adjust all calls.\n+\t(d_unqualified_name): Add SCOPE parameter, create qualified\n+\tname here. Adjust all calls.\n+\t(cplus_demangle_type): Do not handle 'S' here, leave all\n+\tto d_class_enum_type.\n+\t(d_class_enum_type): Add SUBSTABLE parameter.\n+\n 2022-05-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-demangle.c (d_make_comp): Adjust."}]}