{"sha": "ef6ab4abc41268b7065be61a0c4686ae68370883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY2YWI0YWJjNDEyNjhiNzA2NWJlNjFhMGM0Njg2YWU2ODM3MDg4Mw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:41:56Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T07:00:12Z"}, "message": "AVX512FP16: Add testcase for fp16 bitwise operations.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-neg-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-neg-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-scalar-bitwise-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-scalar-bitwise-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vector-bitwise-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vector-bitwise-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-neg-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-neg-1b.c: Ditto.", "tree": {"sha": "d481fc8d7f09ec04c6842710e854f86d2ac0fa98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d481fc8d7f09ec04c6842710e854f86d2ac0fa98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef6ab4abc41268b7065be61a0c4686ae68370883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6ab4abc41268b7065be61a0c4686ae68370883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6ab4abc41268b7065be61a0c4686ae68370883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6ab4abc41268b7065be61a0c4686ae68370883/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a97b59e1eb4cef28fd87c9c45b7c15620a84b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a97b59e1eb4cef28fd87c9c45b7c15620a84b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a97b59e1eb4cef28fd87c9c45b7c15620a84b8"}], "stats": {"total": 456, "additions": 456, "deletions": 0}, "files": [{"sha": "bf7693e0b1d567dc12a5fea87f01ee250495b7a3", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-neg-1a.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-neg-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-neg-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-neg-1a.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+/* { dg-final { scan-assembler-times \"vpxord\\[ \\\\t\\]+\\[^\\n\\r\\]*%zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\r\\]*%xmm0\" 1 } } */\n+\n+#include<immintrin.h>\n+\n+_Float16\n+neghf (_Float16 a)\n+{\n+  return -a;\n+}\n+\n+__m512h\n+neghf512 (__m512h a)\n+{\n+  return -a;\n+}"}, {"sha": "770f7b283d81dad9a7a5a0b52e13d2e1e18eeab8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-neg-1b.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-neg-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-neg-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-neg-1b.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+static void\n+test_512 (void)\n+{\n+  V512 v1, v2, v3, v4, exp, res;\n+  int i;\n+  init_src();\n+  \n+  unpack_ph_2twops(src1, &v1, &v2);\n+  v1.f32[0] = -v1.f32[0];\n+  exp = pack_twops_2ph(v1, v2);\n+  res.zmmh = src1.zmmh;\n+  res.f16[0] = -res.f16[0];\n+  check_results(&res, &exp, 32, \"neg\");\n+\n+  unpack_ph_2twops(src1, &v1, &v2);\n+  for (i=0; i<16; i++)\n+  {\n+    v1.f32[i] = -v1.f32[i];  \n+    v2.f32[i] = -v2.f32[i];  \n+  }\n+  exp = pack_twops_2ph(v1, v2);\n+  res.zmmh = -src1.zmmh;\n+  check_results(&res, &exp, 32, \"neg\");\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}"}, {"sha": "a9e45fb1af5dc0f3361bfa358ff92c34fc661ce8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-scalar-bitwise-1a.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-scalar-bitwise-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-scalar-bitwise-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-scalar-bitwise-1a.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512fp16 -mavx512vl\" } */\n+\n+_Float16\n+f1 (_Float16 x)\n+{\n+  return __builtin_fabsf16 (x);\n+}\n+\n+_Float16\n+f2 (_Float16 x, _Float16 y)\n+{\n+  return __builtin_copysignf16 (x, y);\n+}\n+\n+_Float16\n+f3 (_Float16 x)\n+{\n+  return -x;\n+}\n+\n+_Float16\n+f4 (_Float16 x, _Float16 y)\n+{\n+  return x * __builtin_copysignf16 (1, y);\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"vandps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpternlogd\\[^\\n\\r\\]*xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */"}, {"sha": "7a292519a4e896ca735eb9fc6457470481a6987e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-scalar-bitwise-1b.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-scalar-bitwise-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-scalar-bitwise-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-scalar-bitwise-1b.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-Ofast -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+void NOINLINE\n+emulate_absneg_ph (V512 * dest, V512 op1, int abs)\n+{\n+  V512 v1, v2, v3, v4;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v3, &v4);\n+\n+  for (i = 0; i != 16; i++) {\n+    if (abs) {\n+      v3.f32[i] = __builtin_fabsf (v1.f32[i]);\n+      v4.f32[i] = __builtin_fabsf (v2.f32[i]);\n+    }\n+    else {\n+      v3.f32[i] = -v1.f32[i];\n+      v4.f32[i] = -v2.f32[i];\n+    }\n+  }\n+  *dest = pack_twops_2ph(v3, v4);\n+}\n+\n+void NOINLINE\n+emulate_copysign_ph (V512 * dest, V512 op1, V512 op2, int xorsign)\n+{\n+  V512 v1, v2, v3, v4, v5, v6;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v5, &v6);\n+\n+  for (i = 0; i != 16; i++) {\n+    if (xorsign) {\n+      v5.f32[i] = v1.f32[i] * __builtin_copysignf (1, v3.f32[i]);\n+      v6.f32[i] = v2.f32[i] * __builtin_copysignf (1, v4.f32[i]);\n+    }\n+    else {\n+      v5.f32[i] = __builtin_copysignf (v1.f32[i], v3.f32[i]);\n+      v6.f32[i] = __builtin_copysignf (v2.f32[i], v4.f32[i]);\n+    }\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res, exp;\n+\n+  init_src ();\n+\n+  /* Abs for float16.  */\n+  emulate_absneg_ph (&exp, src1, 1);\n+  res.f16[0] = __builtin_fabsf16 (src1.f16[0]);\n+  check_results (&res, &exp, 1, \"abs_float16\");\n+\n+  /* Neg for float16.  */\n+  emulate_absneg_ph (&exp, src1, 0);\n+  res.f16[0] = -(src1.f16[0]);\n+  check_results (&res, &exp, 1, \"neg_float16\");\n+\n+  /* Copysign for float16.  */\n+  emulate_copysign_ph (&exp, src1, src2, 0);\n+  res.f16[0] = __builtin_copysignf16 (src1.f16[0], src2.f16[0]);\n+  check_results (&res, &exp, 1, \"copysign_float16\");\n+\n+  /* Xorsign for float16.  */\n+  emulate_copysign_ph (&exp, src1, src2, 1);\n+  res.f16[0] = src1.f16[0] * __builtin_copysignf16 (1, src2.f16[0]);\n+  check_results (&res, &exp, 1, \"xorsign_float16\");\n+\n+  if (n_errs != 0) {\n+    abort ();\n+  }\n+}"}, {"sha": "758aec1974fec33fd3c5f21aa8a7b294a576fe05", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vector-bitwise-1a.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vector-bitwise-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vector-bitwise-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vector-bitwise-1a.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,121 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512vl -mavx512fp16 -mprefer-vector-width=512\" } */\n+\n+#include<immintrin.h>\n+__m128h\n+f1 (__m128h x)\n+{\n+  int i = 0;\n+  __m128h y;\n+  for (; i != 8; i++)\n+    y[i] = __builtin_fabsf16 (x[i]);\n+  return y;\n+}\n+\n+__m256h\n+f2 (__m256h x)\n+{\n+  int i = 0;\n+  __m256h y;\n+  for (; i != 16; i++)\n+    y[i] = __builtin_fabsf16 (x[i]);\n+  return y;\n+}\n+\n+__m512h\n+f3 (__m512h x)\n+{\n+  int i = 0;\n+  __m512h y;\n+  for (; i != 32; i++)\n+    y[i] = __builtin_fabsf16 (x[i]);\n+  return y;\n+}\n+\n+__m128h\n+f4 (__m128h x)\n+{\n+  return -x;\n+}\n+\n+__m256h\n+f5 (__m256h x)\n+{\n+  return -x;\n+}\n+\n+__m512h\n+f6 (__m512h x)\n+{\n+  return -x;\n+}\n+\n+__m128h\n+f7 (__m128h x, __m128h y)\n+{\n+  int i = 0;\n+  __m128h z;\n+  for (; i != 8; i++)\n+    z[i] = __builtin_copysignf16 (x[i], y[i]);\n+  return z;\n+}\n+\n+__m256h\n+f8 (__m256h x, __m256h y)\n+{\n+  int i = 0;\n+  __m256h z;\n+  for (; i != 16; i++)\n+    z[i] = __builtin_copysignf16 (x[i], y[i]);\n+  return z;\n+}\n+\n+__m512h\n+f9 (__m512h x, __m512h y)\n+{\n+  int i = 0;\n+  __m512h z;\n+  for (; i != 32; i++)\n+    z[i] = __builtin_copysignf16 (x[i], y[i]);\n+  return z;\n+}\n+\n+__m128h\n+f10 (__m128h x, __m128h y)\n+{\n+  int i = 0;\n+  __m128h z;\n+  for (; i != 8; i++)\n+    z[i] = x[i] * __builtin_copysignf16 (1, y[i]);\n+  return z;\n+}\n+\n+__m256h\n+f11 (__m256h x, __m256h y)\n+{\n+  int i = 0;\n+  __m256h z;\n+  for (; i != 16; i++)\n+    z[i] = x[i] * __builtin_copysignf16 (1, y[i]);\n+  return z;\n+}\n+\n+__m512h\n+f12 (__m512h x, __m512h y)\n+{\n+  int i = 0;\n+  __m512h z;\n+  for (; i != 32; i++)\n+    z[i] = x[i] * __builtin_copysignf16 (1, y[i]);\n+  return z;\n+}\n+\n+/* { dg-final { scan-assembler \"vandps\\[^\\n\\r\\]*xmm0\" } } */\n+/* { dg-final { scan-assembler \"vandps\\[^\\n\\r\\]*ymm0\" } } */\n+/* { dg-final { scan-assembler \"vpandd\\[^\\n\\r\\]*zmm0\" } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpxord\\[^\\n\\r\\]*zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpternlogd\\[^\\n\\r\\]*xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpternlogd\\[^\\n\\r\\]*ymm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpternlogd\\[^\\n\\r\\]*zmm\\[0-9\\]\" 2 } } */"}, {"sha": "1398b360064d98887ecc52c34b46b216bda4d0dd", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vector-bitwise-1b.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vector-bitwise-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vector-bitwise-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vector-bitwise-1b.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-Ofast -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+void NOINLINE\n+emulate_absneg_ph (V512 * dest, V512 op1, int abs)\n+{\n+  V512 v1, v2, v3, v4;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v3, &v4);\n+\n+  for (i = 0; i != 16; i++) {\n+    if (abs) {\n+      v3.f32[i] = __builtin_fabsf (v1.f32[i]);\n+      v4.f32[i] = __builtin_fabsf (v2.f32[i]);\n+    }\n+    else {\n+      v3.f32[i] = -v1.f32[i];\n+      v4.f32[i] = -v2.f32[i];\n+    }\n+  }\n+  *dest = pack_twops_2ph(v3, v4);\n+}\n+\n+void NOINLINE\n+emulate_copysign_ph (V512 * dest, V512 op1, V512 op2, int xorsign)\n+{\n+  V512 v1, v2, v3, v4, v5, v6;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v5, &v6);\n+\n+  for (i = 0; i != 16; i++) {\n+    if (xorsign) {\n+      v5.f32[i] = v1.f32[i] * __builtin_copysignf (1, v3.f32[i]);\n+      v6.f32[i] = v2.f32[i] * __builtin_copysignf (1, v4.f32[i]);\n+    }\n+    else {\n+      v5.f32[i] = __builtin_copysignf (v1.f32[i], v3.f32[i]);\n+      v6.f32[i] = __builtin_copysignf (v2.f32[i], v4.f32[i]);\n+    }\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+\n+void\n+test_512 (void)\n+{\n+  V512 res, exp;\n+\n+  init_src ();\n+\n+  /* Abs for vector float16.  */\n+  emulate_absneg_ph (&exp, src1, 1);\n+  for (int i = 0; i != 8; i++)\n+    res.f16[i] = __builtin_fabsf16 (src1.f16[i]);\n+  check_results (&res, &exp, 8, \"abs_m128h\");\n+\n+  for (int i = 0; i != 16; i++)\n+    res.f16[i] = __builtin_fabsf16 (src1.f16[i]);\n+  check_results (&res, &exp, 16, \"abs_m256h\");\n+\n+  for (int i = 0; i != 32; i++)\n+    res.f16[i] = __builtin_fabsf16 (src1.f16[i]);\n+  check_results (&res, &exp, 32, \"abs_m512h\");\n+\n+  /* Neg for vector float16.  */\n+  emulate_absneg_ph (&exp, src1, 0);\n+  for (int i = 0; i != 8; i++)\n+    res.f16[i] = -(src1.f16[i]);\n+  check_results (&res, &exp, 8, \"neg_m128h\");\n+\n+  for (int i = 0; i != 16; i++)\n+    res.f16[i] = -(src1.f16[i]);\n+  check_results (&res, &exp, 16, \"neg_m256h\");\n+\n+  for (int i = 0; i != 32; i++)\n+    res.f16[i] = -(src1.f16[i]);\n+  check_results (&res, &exp, 32, \"neg_m512h\");\n+\n+  /* Copysign for vector float16.  */\n+  emulate_copysign_ph (&exp, src1, src2, 0);\n+  for (int i = 0; i != 8; i++)\n+    res.f16[i] = __builtin_copysignf16 (src1.f16[i], src2.f16[i]);\n+  check_results (&res, &exp, 8, \"copysign_m128h\");\n+\n+  for (int i = 0; i != 16; i++)\n+    res.f16[i] = __builtin_copysignf16 (src1.f16[i], src2.f16[i]);\n+  check_results (&res, &exp, 16, \"copysign_m256h\");\n+\n+  for (int i = 0; i != 32; i++)\n+    res.f16[i] = __builtin_copysignf16 (src1.f16[i], src2.f16[i]);\n+  check_results (&res, &exp, 32, \"copysign_m512h\");\n+\n+  /* Xorsign for vector float16.  */\n+  emulate_copysign_ph (&exp, src1, src2, 1);\n+  for (int i = 0; i != 8; i++)\n+    res.f16[i] = src1.f16[i] * __builtin_copysignf16 (1, src2.f16[i]);\n+  check_results (&res, &exp, 8, \"xorsign_m128h\");\n+\n+  for (int i = 0; i != 16; i++)\n+    res.f16[i] = src1.f16[i] * __builtin_copysignf16 (1, src2.f16[i]);\n+  check_results (&res, &exp, 16, \"xorsign_m256h\");\n+\n+  for (int i = 0; i != 32; i++)\n+    res.f16[i] = src1.f16[i] * __builtin_copysignf16 (1, src2.f16[i]);\n+  check_results (&res, &exp, 32, \"xorsign_m512h\");\n+\n+  if (n_errs != 0) {\n+    abort ();\n+  }\n+}"}, {"sha": "a40a0d88dd28fdd2ec07b707808e48b2da36b0ae", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-neg-1a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-neg-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-neg-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-neg-1a.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\r\\]*%xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\r\\]*%ymm0\" 1 } } */\n+#include<immintrin.h>\n+\n+__m128h\n+neghf128 (__m128h a)\n+{\n+  return -a;\n+}\n+\n+__m256h\n+neghf256 (__m256h a)\n+{\n+  return -a;\n+}"}, {"sha": "d8f65fb3f60f0c2b6054b05967bfbc25590768f9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-neg-1b.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-neg-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6ab4abc41268b7065be61a0c4686ae68370883/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-neg-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-neg-1b.c?ref=ef6ab4abc41268b7065be61a0c4686ae68370883", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+static void\n+test_512 (void)\n+{\n+  V512 v1, v2, v3, v4, exp, res;\n+  int i;\n+  init_src();\n+  \n+  unpack_ph_2twops(src1, &v1, &v2);\n+  v1.f32[0] = -v1.f32[0];\n+  exp = pack_twops_2ph(v1, v2);\n+  res.zmmh = src1.zmmh;\n+  res.f16[0] = -res.f16[0];\n+  check_results(&res, &exp, 32, \"neg\");\n+\n+  unpack_ph_2twops(src1, &v1, &v2);\n+  for (i=0; i<16; i++)\n+  {\n+    v1.f32[i] = -v1.f32[i];  \n+    v2.f32[i] = -v2.f32[i];  \n+  }\n+  exp = pack_twops_2ph(v1, v2);\n+  res.zmmh = -src1.zmmh;\n+  check_results(&res, &exp, 32, \"neg\");\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}"}]}