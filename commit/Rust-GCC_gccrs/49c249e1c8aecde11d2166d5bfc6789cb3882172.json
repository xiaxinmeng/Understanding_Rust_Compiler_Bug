{"sha": "49c249e1c8aecde11d2166d5bfc6789cb3882172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDljMjQ5ZTFjOGFlY2RlMTFkMjE2NmQ1YmZjNjc4OWNiMzg4MjE3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-08-21T00:50:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-08-21T00:50:39Z"}, "message": "[multiple changes]\n\nWed Aug 20 17:25:08 1997  Jason Merrill  <jason@yorick.cygnus.com>\n\n\t* call.c (is_subseq): Don't try to be clever.\n\nWed Aug 20 03:13:36 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n\n\t* parse.y, pt.c: Include \"except.h\".\n\t* call.c, class.c, class.h, cp-tree.h, cvt.c, decl.c, decl2.c,\n \terror.c, except.c, expr.c, friend.c, g++spec.c, init.c, input.c,\n \tlex.c, lex.h, method.c, parse.y, pt.c, repo.c, rtti.c, search.c,\n \tsig.c, spew.c, tree.c, typeck.c, typeck2.c, xref.c: Finish\n \tprototyping.\n\nWed Aug 20 01:34:40 1997  Jason Merrill  <jason@yorick.cygnus.com>\n\n\t* decl2.c (mark_vtable_entries): Instead of replacing pure\n\tvirtuals with a reference to __pure_virtual, copy the decl and\n\tchange the RTL.\n\nFrom-SVN: r14868", "tree": {"sha": "c9fa739ae50f1adb0f63b8a81e6fb2113c2dacc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9fa739ae50f1adb0f63b8a81e6fb2113c2dacc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49c249e1c8aecde11d2166d5bfc6789cb3882172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c249e1c8aecde11d2166d5bfc6789cb3882172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49c249e1c8aecde11d2166d5bfc6789cb3882172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c249e1c8aecde11d2166d5bfc6789cb3882172/comments", "author": null, "committer": null, "parents": [{"sha": "177873a5216e3c6c526885d9fcb836c17e6e0cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177873a5216e3c6c526885d9fcb836c17e6e0cd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177873a5216e3c6c526885d9fcb836c17e6e0cd4"}], "stats": {"total": 789, "additions": 587, "deletions": 202}, "files": [{"sha": "6744f7320bfa7add54322f2248c1b62aca62df92", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -1,3 +1,22 @@\n+Wed Aug 20 17:25:08 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (is_subseq): Don't try to be clever.\n+\n+Wed Aug 20 03:13:36 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n+\n+\t* parse.y, pt.c: Include \"except.h\".\n+\t* call.c, class.c, class.h, cp-tree.h, cvt.c, decl.c, decl2.c,\n+ \terror.c, except.c, expr.c, friend.c, g++spec.c, init.c, input.c,\n+ \tlex.c, lex.h, method.c, parse.y, pt.c, repo.c, rtti.c, search.c,\n+ \tsig.c, spew.c, tree.c, typeck.c, typeck2.c, xref.c: Finish\n+ \tprototyping.\n+\n+Wed Aug 20 01:34:40 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (mark_vtable_entries): Instead of replacing pure\n+\tvirtuals with a reference to __pure_virtual, copy the decl and\n+\tchange the RTL.\n+\n Tue Aug 19 02:26:07 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (lookup_nested_type_by_name): Handle typedef wierdness."}, {"sha": "cdec02df92d6be48db516b5fe3dfc99b360c8f6c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -31,12 +31,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"flags.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n #include \"obstack.h\"\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern void sorry ();\n-\n extern int inhibit_warnings;\n extern tree ctor_label, dtor_label;\n \n@@ -46,6 +48,59 @@ extern tree ctor_label, dtor_label;\n static struct harshness_code convert_harshness PROTO((register tree, register tree, tree));\n static tree build_new_method_call\t\tPROTO((tree, tree, tree, tree, int));\n \n+static int rank_for_ideal PROTO((struct candidate *,\n+\t\t\t\t struct candidate *));\n+static int user_harshness PROTO((tree, tree));\n+static int strictly_better PROTO((unsigned short, unsigned short));\n+static struct candidate * ideal_candidate PROTO((struct candidate *,\n+\t\t\t\t\t\t int, int));\n+static int may_be_remote PROTO((tree));\n+static tree build_field_call PROTO((tree, tree, tree, tree));\n+static tree find_scoped_type PROTO((tree, tree, tree));\n+static void print_candidates PROTO((tree));\n+static struct z_candidate * tourney PROTO((struct z_candidate *));\n+static int joust PROTO((struct z_candidate *, struct z_candidate *));\n+static int compare_qual PROTO((tree, tree));\n+static int compare_ics PROTO((tree, tree));\n+static tree build_over_call PROTO((tree, tree, tree, int));\n+static tree convert_default_arg PROTO((tree, tree));\n+static void enforce_access PROTO((tree, tree));\n+static tree convert_like PROTO((tree, tree));\n+static void op_error PROTO((enum tree_code, enum tree_code, tree, tree,\n+\t\t\t    tree, char *));\n+static tree build_object_call PROTO((tree, tree));\n+static tree resolve_args PROTO((tree));\n+static struct z_candidate * build_user_type_conversion_1\n+\tPROTO ((tree, tree, int));\n+static void print_z_candidates PROTO((struct z_candidate *));\n+static tree build_this PROTO((tree));\n+static struct z_candidate * splice_viable PROTO((struct z_candidate *));\n+static int any_viable PROTO((struct z_candidate *));\n+static struct z_candidate * add_template_candidate\n+\tPROTO((struct z_candidate *, tree, tree, int));\n+static struct z_candidate * add_builtin_candidates\n+\tPROTO((struct z_candidate *, enum tree_code, enum tree_code,\n+\t       tree, tree *, int));\n+static struct z_candidate * add_builtin_candidate\n+\tPROTO((struct z_candidate *, enum tree_code, enum tree_code,\n+\t       tree, tree, tree, tree *, tree *, int));\n+static int is_complete PROTO((tree));\n+static struct z_candidate * build_builtin_candidate \n+\tPROTO((struct z_candidate *, tree, tree, tree, tree *, tree *,\n+\t       int));\n+static struct z_candidate * add_conv_candidate \n+\tPROTO((struct z_candidate *, tree, tree, tree));\n+static struct z_candidate * add_function_candidate \n+\tPROTO((struct z_candidate *, tree, tree, int));\n+static tree implicit_conversion PROTO((tree, tree, tree, int));\n+static tree standard_conversion PROTO((tree, tree, tree));\n+static tree reference_binding PROTO((tree, tree, tree, int));\n+static tree strip_top_quals PROTO((tree));\n+static tree non_reference PROTO((tree));\n+static tree build_conv PROTO((enum tree_code, tree, tree));\n+static void print_n_candidates PROTO((struct candidate *, int));\n+static tree default_parm_conversions PROTO((tree, tree *));\n+\n #define EVIL_RETURN(ARG)\t((ARG).code = EVIL_CODE, (ARG))\n #define STD_RETURN(ARG)\t\t((ARG).code = STD_CODE, (ARG))\n #define QUAL_RETURN(ARG)\t((ARG).code = QUAL_CODE, (ARG))\n@@ -1072,7 +1127,7 @@ ideal_candidate (candidates, n_candidates, len)\n      functions.  */\n \n   qsort (candidates, n_candidates, sizeof (struct candidate),\n-\t rank_for_overload);\n+\t (int (*) PROTO((const void *, const void *))) rank_for_overload);\n   best_code = cp[-1].h.code;\n \n   /* If they're at least as good as each other, do an arg-by-arg check.  */\n@@ -1086,7 +1141,7 @@ ideal_candidate (candidates, n_candidates, len)\n \t  break;\n \n       qsort (candidates+j, n_candidates-j, sizeof (struct candidate),\n-\t     rank_for_ideal);\n+\t     (int (*) PROTO((const void *, const void *))) rank_for_ideal);\n       for (i = 0; i < len; i++)\n \t{\n \t  if (cp[-1].harshness[i].code < cp[-2].harshness[i].code)\n@@ -2936,12 +2991,6 @@ struct z_candidate {\n \n #define USER_CONV_FN(NODE) TREE_OPERAND (NODE, 1)\n \n-static struct z_candidate * build_user_type_conversion_1 ();\n-static tree convert_like ();\n-static tree build_over_call ();\n-static struct z_candidate * tourney ();\n-static void enforce_access ();\n-\n int\n null_ptr_cst_p (t)\n      tree t;\n@@ -5460,10 +5509,8 @@ static int\n is_subseq (ics1, ics2)\n      tree ics1, ics2;\n {\n-  for (;;)\n+  for (;; ics2 = TREE_OPERAND (ics2, 0))\n     {\n-      ics2 = TREE_OPERAND (ics2, 0);\n-\n       if (TREE_CODE (ics2) == TREE_CODE (ics1)\n \t  && comptypes (TREE_TYPE (ics2), TREE_TYPE (ics1), 1)\n \t  && comptypes (TREE_TYPE (TREE_OPERAND (ics2, 0)),"}, {"sha": "3270bff5dbde5f7dbc1e740355004e4634099009", "filename": "gcc/cp/class.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -82,7 +82,50 @@ tree current_class_type;\t/* _TYPE: the type of the current class */\n tree previous_class_type;\t/* _TYPE: the previous type that was a class */\n tree previous_class_values;\t\t/* TREE_LIST: copy of the class_shadowed list\n \t\t\t\t   when leaving an outermost class scope.  */\n+\n+struct base_info;\n+\n static tree get_vfield_name PROTO((tree));\n+static void finish_struct_anon PROTO((tree));\n+static tree build_vbase_pointer PROTO((tree, tree));\n+static int complete_type_p PROTO((tree));\n+static int typecode_p PROTO((tree, enum tree_code));\n+static tree build_vtable_entry PROTO((tree, tree));\n+static tree get_vtable_name PROTO((tree));\n+static tree get_derived_offset PROTO((tree, tree));\n+static tree get_basefndecls PROTO((tree, tree));\n+static void set_rtti_entry PROTO((tree, tree, tree));\n+static tree build_vtable PROTO((tree, tree));\n+static tree build_type_pathname PROTO((char *, tree, tree));\n+static void prepare_fresh_vtable PROTO((tree, tree));\n+static void fixup_vtable_deltas1 PROTO((tree, tree));\n+static void fixup_vtable_deltas PROTO((tree, int, tree));\n+static void grow_method PROTO((tree, tree *));\n+static void finish_vtbls PROTO((tree, int, tree));\n+static void modify_vtable_entry PROTO((tree, tree, tree));\n+static tree get_vtable_entry_n PROTO((tree, unsigned HOST_WIDE_INT));\n+static tree add_virtual_function PROTO((tree, int *, tree, tree));\n+static tree delete_duplicate_fields_1 PROTO((tree, tree));\n+static void delete_duplicate_fields PROTO((tree));\n+static void finish_struct_bits PROTO((tree, int));\n+static int alter_access PROTO((tree, tree, tree));\n+static int overrides PROTO((tree, tree));\n+static int strictly_overrides PROTO((tree, tree));\n+static void merge_overrides PROTO((tree, tree, int, tree));\n+static void override_one_vtable PROTO((tree, tree, tree));\n+static void mark_overriders PROTO((tree, tree));\n+static void check_for_override PROTO((tree, tree));\n+static tree maybe_fixup_vptrs PROTO((tree, tree, tree));\n+static tree get_class_offset_1 PROTO((tree, tree, tree, tree, tree));\n+static tree get_class_offset PROTO((tree, tree, tree, tree));\n+static void modify_one_vtable PROTO((tree, tree, tree, tree));\n+static void modify_all_vtables PROTO((tree, tree, tree));\n+static void modify_all_direct_vtables PROTO((tree, int, tree, tree,\n+\t\t\t\t\t     tree));\n+static void modify_all_indirect_vtables PROTO((tree, int, int, tree,\n+\t\t\t\t\t       tree, tree));\n+static void build_class_init_list PROTO((tree));\n+static int finish_base_struct PROTO((tree, struct base_info *, tree));\n \n /* Way of stacking language names.  */\n tree *current_lang_base, *current_lang_stack;"}, {"sha": "12e45f78415c0f7610067fb0474afd2cffa2934e", "filename": "gcc/cp/class.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fclass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fclass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.h?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -103,7 +103,7 @@ struct candidate\n \t\t\t\t   -5 if contravariance violation.  */\n     } u;\n };\n-int rank_for_overload ();\n+int rank_for_overload PROTO ((struct candidate *, struct candidate *));\n \n /* Variables shared between class.c and call.c.  */\n "}, {"sha": "e13839787057003db1f06e8386429355453472ac", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -1424,7 +1424,7 @@ extern int flag_new_for_scope;\n #define DEFARG_POINTER(NODE)\tIDENTIFIER_POINTER(NODE)\n \n #define builtin_function(NAME, TYPE, CODE, LIBNAME) \\\n-  define_function (NAME, TYPE, CODE, (void (*)())pushdecl, LIBNAME)\n+  define_function (NAME, TYPE, CODE, (void (*) PROTO((tree)))pushdecl, LIBNAME)\n \n /* An enumeration of the kind of tags that C++ accepts.  */\n enum tag_types { record_type, class_type, union_type, enum_type,\n@@ -1976,6 +1976,7 @@ extern void print_class_statistics\t\tPROTO((void));\n extern void maybe_push_cache_obstack\t\tPROTO((void));\n extern unsigned HOST_WIDE_INT skip_rtti_stuff\tPROTO((tree *));\n extern tree build_self_reference\t\tPROTO((void));\n+extern void warn_hidden\t\t\t\tPROTO((tree));\n \n /* in cvt.c */\n extern tree convert_to_reference\t\tPROTO((tree, tree, int, int, tree));\n@@ -2006,15 +2007,15 @@ extern void pushlevel\t\t\t\tPROTO((int));\n extern void note_level_for_for\t\t\tPROTO((void));\n extern void pushlevel_temporary\t\t\tPROTO((int));\n extern tree poplevel\t\t\t\tPROTO((int, int, int));\n-/* resume_level */\n+extern void resume_level\t\t\tPROTO((struct binding_level *));\n extern void delete_block\t\t\tPROTO((tree));\n extern void insert_block\t\t\tPROTO((tree));\n extern void add_block_current_level\t\tPROTO((tree));\n extern void set_block\t\t\t\tPROTO((tree));\n extern void pushlevel_class\t\t\tPROTO((void));\n extern tree poplevel_class\t\t\tPROTO((int));\n-/* skip print_other_binding_stack and print_binding_level */\n extern void print_binding_stack\t\t\tPROTO((void));\n+extern void print_binding_level\t\t\tPROTO((struct binding_level *));\n extern void push_namespace\t\t\tPROTO((tree));\n extern void pop_namespace\t\t\tPROTO((void));\n extern void maybe_push_to_top_level\t\tPROTO((int));\n@@ -2055,7 +2056,9 @@ extern tree lookup_name_current_level\t\tPROTO((tree));\n extern tree auto_function\t\t\tPROTO((tree, tree, enum built_in_function));\n extern void init_decl_processing\t\tPROTO((void));\n extern int init_type_desc\t\t\tPROTO((void));\n-/* skipped define_function */\n+extern tree define_function\n+\tPROTO((char *, tree, enum built_in_function,\n+\t       void (*) (tree), char *));\n extern void shadow_tag\t\t\t\tPROTO((tree));\n extern tree groktypename\t\t\tPROTO((tree));\n extern tree start_decl\t\t\t\tPROTO((tree, tree, int));\n@@ -2094,6 +2097,9 @@ extern int id_in_current_class\t\t\tPROTO((tree));\n extern void push_cp_function_context\t\tPROTO((tree));\n extern void pop_cp_function_context\t\tPROTO((tree));\n extern int in_function_p\t\t\tPROTO((void));\n+extern void replace_defarg\t\t\tPROTO((tree, tree));\n+extern void print_other_binding_stack\t\tPROTO((struct binding_level *));\n+extern tree strip_attrs\t\t\t\tPROTO((tree));\n \n /* in decl2.c */\n extern int flag_assume_nonnull_objects;\n@@ -2127,8 +2133,10 @@ extern tree coerce_delete_type\t\t\tPROTO((tree));\n extern void comdat_linkage\t\t\tPROTO((tree));\n extern void import_export_vtable\t\tPROTO((tree, tree, int));\n extern int finish_prevtable_vardecl\t\tPROTO((tree, tree));\n-extern int walk_vtables\t\t\t\tPROTO((void (*)(), int (*)()));\n-extern void walk_sigtables\t\t\tPROTO((void (*)(), void (*)()));\n+extern int walk_vtables\t\t\t\tPROTO((void (*)(tree, tree),\n+\t\t\t\t\t\t       int (*)(tree, tree)));\n+extern void walk_sigtables\t\t\tPROTO((void (*)(tree, tree),\n+\t\t\t\t\t\t       void (*)(tree, tree)));\n extern void import_export_decl\t\t\tPROTO((tree));\n extern tree build_cleanup\t\t\tPROTO((tree));\n extern void finish_file\t\t\t\tPROTO((void));\n@@ -2146,6 +2154,7 @@ extern tree do_class_using_decl\t\t\tPROTO((tree));\n extern void do_using_directive\t\t\tPROTO((tree));\n extern void check_default_args\t\t\tPROTO((tree));\n extern void mark_used\t\t\t\tPROTO((tree));\n+extern tree handle_class_head\t\t\tPROTO((tree, tree, tree));\n \n /* in errfn.c */\n extern void cp_error\t\t\t\t();\n@@ -2171,6 +2180,8 @@ extern char *op_as_string\t\t\tPROTO((enum tree_code, int));\n extern char *assop_as_string\t\t\tPROTO((enum tree_code, int));\n extern char *cv_as_string\t\t\tPROTO((tree, int));\n extern char *lang_decl_name\t\t\tPROTO((tree, int));\n+extern char *cp_file_of\t\t\t\tPROTO((tree));\n+extern int cp_line_of\t\t\t\tPROTO((tree));\n \n /* in except.c */\n extern void init_exception_processing\t\tPROTO((void));\n@@ -2240,13 +2251,11 @@ extern void print_parse_statistics\t\tPROTO((void));\n extern void extract_interface_info\t\tPROTO((void));\n extern void do_pending_inlines\t\t\tPROTO((void));\n extern void process_next_inline\t\t\tPROTO((tree));\n-/* skip save_pending_input */\n-/* skip restore_pending_input */\n+extern struct pending_input *save_pending_input PROTO((void));\n+extern void restore_pending_input\t\tPROTO((struct pending_input *));\n extern void yyungetc\t\t\t\tPROTO((int, int));\n extern void reinit_parse_for_method\t\tPROTO((int, tree));\n-#if 0\n extern void reinit_parse_for_block\t\tPROTO((int, struct obstack *));\n-#endif\n extern tree cons_up_default_function\t\tPROTO((tree, tree, int));\n extern void check_for_missing_semicolon\t\tPROTO((tree));\n extern void note_got_semicolon\t\t\tPROTO((tree));\n@@ -2266,6 +2275,12 @@ extern tree make_lang_type\t\t\tPROTO((enum tree_code));\n extern void dump_time_statistics\t\tPROTO((void));\n /* extern void compiler_error\t\t\tPROTO((char *, HOST_WIDE_INT, HOST_WIDE_INT)); */\n extern void yyerror\t\t\t\tPROTO((char *));\n+extern void clear_inline_text_obstack\t\tPROTO((void));\n+extern void maybe_snarf_defarg\t\t\tPROTO((void));\n+extern tree snarf_defarg\t\t\tPROTO((void));\n+extern void add_defarg_fn\t\t\tPROTO((tree));\n+extern void do_pending_defargs\t\t\tPROTO((void));\n+extern int identifier_type\t\t\tPROTO((tree));\n \n /* in method.c */\n extern void init_method\t\t\t\tPROTO((void));\n@@ -2281,6 +2296,7 @@ extern tree hack_identifier\t\t\tPROTO((tree, tree));\n extern tree make_thunk\t\t\t\tPROTO((tree, int));\n extern void emit_thunk\t\t\t\tPROTO((tree));\n extern void synthesize_method\t\t\tPROTO((tree));\n+extern tree get_id_2\t\t\t\tPROTO((char *, tree));\n \n /* in pt.c */\n extern tree tsubst\t\t\t\tPROTO ((tree, tree*, int, tree));\n@@ -2312,6 +2328,11 @@ extern tree *get_bindings\t\t\tPROTO((tree, tree));\n /* CONT ... */\n extern void add_tree\t\t\t\tPROTO((tree));\n extern void add_maybe_template\t\t\tPROTO((tree, tree));\n+extern void pop_tinst_level\t\t\tPROTO((void));\n+extern tree most_specialized\t\t\tPROTO((tree, tree));\n+extern tree most_specialized_class\t\tPROTO((tree, tree));\n+extern int more_specialized_class\t\tPROTO((tree, tree));\n+extern void do_pushlevel\t\t\tPROTO((void));\n \n /* in repo.c */\n extern void repo_template_used\t\t\tPROTO((tree));\n@@ -2355,7 +2376,7 @@ extern void add_mi_virtuals\t\t\tPROTO((int, tree));\n extern void report_ambiguous_mi_virtuals\tPROTO((int, tree));\n extern void note_debug_info_needed\t\tPROTO((tree));\n extern void push_class_decls\t\t\tPROTO((tree));\n-extern void pop_class_decls\t\t\tPROTO(());\n+extern void pop_class_decls\t\t\tPROTO((void));\n extern void unuse_fields\t\t\tPROTO((tree));\n extern void unmark_finished_struct\t\tPROTO((tree));\n extern void print_search_statistics\t\tPROTO((void));\n@@ -2375,7 +2396,7 @@ extern void append_signature_fields\t\tPROTO((tree));\n \n /* in spew.c */\n extern void init_spew\t\t\t\tPROTO((void));\n-extern int peek_yylex\t\t\t\tPROTO((void));\n+extern int peekyylex\t\t\t\tPROTO((void));\n extern int yylex\t\t\t\tPROTO((void));\n extern tree arbitrate_lookup\t\t\tPROTO((tree, tree, tree));\n \n@@ -2410,12 +2431,12 @@ extern tree fnaddr_from_vtable_entry\t\tPROTO((tree));\n extern tree function_arg_chain\t\t\tPROTO((tree));\n extern int promotes_to_aggr_type\t\tPROTO((tree, enum tree_code));\n extern int is_aggr_type_2\t\t\tPROTO((tree, tree));\n-extern void message_2_types\t\t\tPROTO((void (*)(), char *, tree, tree));\n extern char *lang_printable_name\t\tPROTO((tree, int));\n extern tree build_exception_variant\t\tPROTO((tree, tree));\n extern tree copy_to_permanent\t\t\tPROTO((tree));\n extern void print_lang_statistics\t\tPROTO((void));\n-/* skip __eprintf */\n+extern void __eprintf\n+\tPROTO((const char *, const char *, unsigned, const char *));\n extern tree array_type_nelts_total\t\tPROTO((tree));\n extern tree array_type_nelts_top\t\tPROTO((tree));\n extern tree break_out_target_exprs\t\tPROTO((tree));\n@@ -2424,6 +2445,13 @@ extern tree vec_binfo_member\t\t\tPROTO((tree, tree));\n extern tree hack_decl_function_context \t\tPROTO((tree));\n extern tree lvalue_type\t\t\t\tPROTO((tree));\n extern tree error_type\t\t\t\tPROTO((tree));\n+extern tree make_temp_vec\t\t\tPROTO((int));\n+extern int varargs_function_p\t\t\tPROTO((tree));\n+extern int really_overloaded_fn\t\t\tPROTO((tree));\n+extern int cp_tree_equal\t\t\tPROTO((tree, tree));\n+extern int can_free\t\t\t\tPROTO((struct obstack *, tree));\n+extern tree mapcar\t\t\t\tPROTO((tree, tree (*) (tree)));\n+extern void debug_binfo\t\t\t\tPROTO((tree));\n \n /* in typeck.c */\n extern tree condition_conversion\t\tPROTO((tree));\n@@ -2509,7 +2537,8 @@ extern tree build_m_component_ref\t\tPROTO((tree, tree));\n extern tree build_functional_cast\t\tPROTO((tree, tree));\n extern char *enum_name_string\t\t\tPROTO((tree, tree));\n extern void report_case_error\t\t\tPROTO((int, tree, tree, tree));\n-extern void check_for_new_typeid\t\tPROTO((char *,flagged_type_tree));\n+extern void check_for_new_type\t\t\tPROTO((char *,flagged_type_tree));\n+extern tree initializer_constant_valid_p\tPROTO((tree, tree));\n \n /* in xref.c */\n extern void GNU_xref_begin\t\t\tPROTO((char *));"}, {"sha": "b488c0d343ea51380854adb59146a35c6596edeb", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -33,8 +33,20 @@ Boston, MA 02111-1307, USA.  */\n #include \"class.h\"\n #include \"convert.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n extern tree static_aggregates;\n \n+static tree build_thunk PROTO((tree, tree));\n+static tree convert_fn_ptr PROTO((tree, tree));\n+static tree cp_convert_to_pointer PROTO((tree, tree));\n+static tree convert_to_pointer_force PROTO((tree, tree));\n+static tree build_up_reference PROTO((tree, tree, int, int));\n+static tree build_type_conversion_1 PROTO((tree, tree, tree, tree,\n+\t\t\t\t\t   int));\n+\n /* Change of width--truncation and extension of integers or reals--\n    is represented with NOP_EXPR.  Proper functioning of many things\n    assumes that no other conversions can be NOP_EXPRs.\n@@ -780,7 +792,7 @@ convert_to_aggr (type, expr, msgp, protect)\n \t  qsort (candidates,\t/* char *base */\n \t\t cp - candidates, /* int nel */\n \t\t sizeof (struct candidate), /* int width */\n-\t\t rank_for_overload); /* int (*compar)() */\n+\t\t (int (*) PROTO((const void *, const void *))) rank_for_overload); /* int (*compar)() */\n \n \t--cp;\n \tif (cp->h.code & EVIL_CODE)"}, {"sha": "fff54e64a589d33f821a5ca6c9f90bba8a2a952b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -39,6 +39,8 @@ Boston, MA 02111-1307, USA.  */\n #include <signal.h>\n #include \"obstack.h\"\n #include \"defaults.h\"\n+#include \"output.h\"\n+#include \"except.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -130,8 +132,43 @@ static void revert_static_member_fn\t\tPROTO((tree *, tree *, tree *));\n static tree push_overloaded_decl\t\tPROTO((tree, int));\n static void push_overloaded_decl_top_level\tPROTO((tree, int));\n \n-tree define_function\t\t\n-\tPROTO((char *, tree, enum built_in_function, void (*)(), char *));\n+static struct stack_level *push_decl_level PROTO((struct stack_level *,\n+\t\t\t\t\t\t  struct obstack *));\n+static void push_binding_level PROTO((struct binding_level *, int,\n+\t\t\t\t      int));\n+static void pop_binding_level PROTO((void));\n+static void suspend_binding_level PROTO((void));\n+static void resume_binding_level PROTO((struct binding_level *));\n+static struct binding_level *make_binding_level PROTO((void));\n+static int namespace_bindings_p PROTO((void));\n+static void declare_namespace_level PROTO((void));\n+static tree get_unique_name PROTO((void));\n+static void signal_catch PROTO((int));\n+static void storedecls PROTO((tree));\n+static void storetags PROTO((tree));\n+static void require_complete_types_for_parms PROTO((tree));\n+static void push_overloaded_decl_1 PROTO((tree));\n+static int ambi_op_p PROTO((tree));\n+static int unary_op_p PROTO((tree));\n+static tree store_bindings PROTO((tree, tree));\n+static tree lookup_tag_reverse PROTO((tree, tree));\n+static tree obscure_complex_init PROTO((tree, tree));\n+static tree maybe_build_cleanup_1 PROTO((tree, tree));\n+static tree lookup_name_real PROTO((tree, int, int));\n+static void warn_extern_redeclared_static PROTO((tree, tree));\n+static void grok_reference_init PROTO((tree, tree, tree, tree *));\n+static tree grokfndecl PROTO((tree, tree, tree, int,\n+\t\t\t      enum overload_flags,\n+\t\t\t      tree, tree, tree, int, int, int, int));\n+static tree grokvardecl PROTO((tree, tree, RID_BIT_TYPE *, int, int));\n+static tree lookup_tag PROTO((enum tree_code, tree,\n+\t\t\t      struct binding_level *, int));\n+static void set_identifier_type_value_with_scope\n+\tPROTO((tree, tree, struct binding_level *));\n+static void record_builtin_type PROTO((enum rid, char *, tree));\n+static int member_function_or_else PROTO((tree, tree, char *));\n+static void bad_specifiers PROTO((tree, char *, int, int, int, int,\n+\t\t\t\t  int));\n \n /* a node which has tree code ERROR_MARK, and whose type is itself.\n    All erroneous expressions are replaced with this node.  All functions\n@@ -4625,7 +4662,7 @@ auto_function (name, type, code)\n      enum built_in_function code;\n {\n   return define_function\n-    (IDENTIFIER_POINTER (name), type, code, (void (*)())push_overloaded_decl_1,\n+    (IDENTIFIER_POINTER (name), type, code, push_overloaded_decl_1,\n      IDENTIFIER_POINTER (build_decl_overload (name, TYPE_ARG_TYPES (type),\n \t\t\t\t\t      0)));\n }\n@@ -5555,7 +5592,7 @@ define_function (name, type, function_code, pfn, library_name)\n      char *name;\n      tree type;\n      enum built_in_function function_code;\n-     void (*pfn)();\n+     void (*pfn) PROTO((tree));\n      char *library_name;\n {\n   tree decl = build_lang_decl (FUNCTION_DECL, get_identifier (name), type);"}, {"sha": "701489e974bb74afc6cdbd81759a6bc7342caec9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -36,10 +36,26 @@ Boston, MA 02111-1307, USA.  */\n #include \"decl.h\"\n #include \"lex.h\"\n #include \"output.h\"\n+#include \"except.h\"\n \n extern tree get_file_function_name ();\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+static tree get_sentry PROTO((tree));\n+static void mark_vtable_entries PROTO((tree));\n+static void import_export_template PROTO((tree));\n static void grok_function_init PROTO((tree, tree));\n-void import_export_decl ();\n+static int finish_vtable_vardecl PROTO((tree, tree));\n+static int prune_vtable_vardecl PROTO((tree, tree));\n+static void finish_sigtable_vardecl PROTO((tree, tree));\n+\n extern int current_class_depth;\n \n /* A list of virtual function tables we must make sure to write out.  */\n@@ -2324,7 +2340,10 @@ mark_vtable_entries (decl)\n       tree fn = TREE_OPERAND (fnaddr, 0);\n       TREE_ADDRESSABLE (fn) = 1;\n       if (DECL_LANG_SPECIFIC (fn) && DECL_ABSTRACT_VIRTUAL_P (fn))\n-\tTREE_OPERAND (fnaddr, 0) = fn = abort_fndecl;\n+\t{\n+\t  TREE_OPERAND (fnaddr, 0) = fn = copy_node (fn);\n+\t  DECL_RTL (fn) = DECL_RTL (abort_fndecl);\n+\t}\n       if (TREE_CODE (fn) == THUNK_DECL && DECL_EXTERNAL (fn))\n \t{\n \t  DECL_EXTERNAL (fn) = 0;\n@@ -2520,8 +2539,8 @@ prune_vtable_vardecl (prev, vars)\n \n int\n walk_vtables (typedecl_fn, vardecl_fn)\n-     register void (*typedecl_fn)();\n-     register int (*vardecl_fn)();\n+     register void (*typedecl_fn) PROTO ((tree, tree));\n+     register int (*vardecl_fn) PROTO ((tree, tree));\n {\n   tree prev, vars;\n   int flag = 0;\n@@ -2568,8 +2587,8 @@ finish_sigtable_vardecl (prev, vars)\n \n void\n walk_sigtables (typedecl_fn, vardecl_fn)\n-     register void (*typedecl_fn)();\n-     register void (*vardecl_fn)();\n+     register void (*typedecl_fn) PROTO((tree, tree));\n+     register void (*vardecl_fn) PROTO((tree, tree));\n {\n   tree prev, vars;\n \n@@ -2697,7 +2716,6 @@ extern tree pending_templates;\n extern tree maybe_templates;\n \n extern struct obstack permanent_obstack;\n-extern tree get_id_2 ();\n \n static tree\n get_sentry (base)\n@@ -2814,7 +2832,8 @@ finish_file ()\n \n   /* Walk to mark the inline functions we need, then output them so\n      that we can pick up any other tdecls that those routines need.  */\n-  walk_vtables ((void (*)())0, finish_prevtable_vardecl);\n+  walk_vtables ((void (*) PROTO ((tree, tree))) 0,\n+\t\tfinish_prevtable_vardecl);\n \n   for (vars = pending_statics; vars; vars = TREE_CHAIN (vars))\n     {\n@@ -3056,7 +3075,8 @@ finish_file ()\n   start_time = get_run_time ();\n \n   if (flag_handle_signatures)\n-    walk_sigtables ((void (*)())0, finish_sigtable_vardecl);\n+    walk_sigtables ((void (*) PROTO ((tree, tree))) 0,\n+\t\t    finish_sigtable_vardecl);\n \n   for (fnname = saved_inlines; fnname; fnname = TREE_CHAIN (fnname))\n     {\n@@ -3082,7 +3102,8 @@ finish_file ()\n \tSET_DECL_ARTIFICIAL (vars);\n \tpushdecl (vars);\n \n-\treconsider |= walk_vtables ((void (*)())0, finish_vtable_vardecl);\n+\treconsider |= walk_vtables ((void (*) PROTO((tree, tree))) 0, \n+\t\t\t\t    finish_vtable_vardecl);\n \n \twhile (*p)\n \t  {\n@@ -3138,7 +3159,8 @@ finish_file ()\n   /* Now delete from the chain of variables all virtual function tables.\n      We output them all ourselves, because each will be treated specially.  */\n \n-  walk_vtables ((void (*)())0, prune_vtable_vardecl);\n+  walk_vtables ((void (*) PROTO((tree, tree))) 0,\n+\t\tprune_vtable_vardecl);\n \n   for (vars = getdecls (); vars; vars = TREE_CHAIN (vars))\n     {"}, {"sha": "cc7908c5556237b43f537c8cca6b85b6a3c4278b", "filename": "gcc/cp/error.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -86,10 +86,24 @@ static char *scratch_firstobj;\n \n # define NEXT_CODE(t) (TREE_CODE (TREE_TYPE (t)))\n \n-static void dump_type (), dump_decl (), dump_function_decl ();\n-static void dump_expr (), dump_unary_op (), dump_binary_op ();\n-static void dump_aggr_type (), dump_type_prefix (), dump_type_suffix ();\n-static void dump_function_name ();\n+enum pad { none, before, after };\n+\n+static void dump_type PROTO((tree, int));\n+static void dump_decl PROTO((tree, int));\n+static void dump_function_decl PROTO((tree, int));\n+static void dump_expr PROTO((tree, int));\n+static void dump_unary_op PROTO((char *, tree, int));\n+static void dump_binary_op PROTO((char *, tree));\n+static void dump_aggr_type PROTO((tree, int));\n+static void dump_type_prefix PROTO((tree, int));\n+static void dump_type_suffix PROTO((tree, int));\n+static void dump_function_name PROTO((tree));\n+static void dump_expr_list PROTO((tree));\n+static void dump_global_iord PROTO((tree));\n+static void dump_readonly_or_volatile PROTO((tree, enum pad));\n+static void dump_char PROTO((char));\n+static char *aggr_variety PROTO((tree));\n+static tree ident_fndecl PROTO((tree));\n \n void\n init_error ()\n@@ -98,8 +112,6 @@ init_error ()\n   scratch_firstobj = (char *)obstack_alloc (&scratch_obstack, 0);\n }\n \n-enum pad { none, before, after };\n-\n static void\n dump_readonly_or_volatile (t, p)\n      tree t;\n@@ -154,7 +166,7 @@ dump_type (t, v)\n \t  if (TREE_PURPOSE (t) && v)\n \t    {\n \t      OB_PUTS (\" = \");\n-\t      dump_expr (TREE_PURPOSE (t));\n+\t      dump_expr (TREE_PURPOSE (t), 0);\n \t    }\n \t  if (TREE_CHAIN (t))\n \t    {\n@@ -183,7 +195,7 @@ dump_type (t, v)\n \t  && (IS_SIGNATURE_POINTER (t) || IS_SIGNATURE_REFERENCE (t)))\n \t{\n \t  if (TYPE_READONLY (t) | TYPE_VOLATILE (t))\n-\t    dump_readonly_or_volatile (t);\n+\t    dump_readonly_or_volatile (t, after);\n \t  dump_type (SIGNATURE_TYPE (t), v);\n \t  if (IS_SIGNATURE_POINTER (t))\n \t    OB_PUTC ('*');\n@@ -535,7 +547,7 @@ dump_type_suffix (t, v)\n /* Return a function declaration which corresponds to the IDENTIFIER_NODE\n    argument.  */\n \n-tree\n+static tree\n ident_fndecl (t)\n      tree t;\n {\n@@ -567,7 +579,7 @@ ident_fndecl (t)\n #define GLOBAL_IORD_P(NODE) \\\n   ! strncmp (IDENTIFIER_POINTER(NODE), GLOBAL_THING, sizeof (GLOBAL_THING) - 1)\n \n-void\n+static void\n dump_global_iord (t)\n      tree t;\n {\n@@ -1280,7 +1292,7 @@ dump_expr (t, nop)\n \t  if (integer_all_onesp (idx))\n \t    {\n \t      tree pfn = PFN_FROM_PTRMEMFUNC (t);\n-\t      dump_expr (pfn);\n+\t      dump_expr (pfn, 0);\n \t      break;\n \t    }\n \t  if (TREE_CODE (idx) == INTEGER_CST\n@@ -1306,7 +1318,7 @@ dump_expr (t, nop)\n \t\t}\n \t      if (virtuals)\n \t\t{\n-\t\t  dump_expr (FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (virtuals)));\n+\t\t  dump_expr (FNADDR_FROM_VTABLE_ENTRY (TREE_VALUE (virtuals)), 0);\n \t\t  break;\n \t\t}\n \t    }"}, {"sha": "a5849f0d26b661c612cc290a039c8f022940ad3d", "filename": "gcc/cp/except.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -44,6 +44,13 @@ tree builtin_return_address_fndecl;\n /* Used to cache a call to __builtin_return_address.  */\n static tree BuiltinReturnAddress;\n      \n+static void easy_expand_asm PROTO((char *));\n+static void push_eh_cleanup PROTO((void));\n+static void do_unwind PROTO((rtx));\n+static rtx do_function_call PROTO((tree, tree, tree));\n+static tree build_eh_type_type PROTO((tree));\n+static tree build_eh_type PROTO((tree));\n+static void expand_end_eh_spec PROTO((tree));\n \n static void\n easy_expand_asm (str)\n@@ -156,9 +163,6 @@ asm (TEXT_SECTION_ASM_OP);\n      \n      ===================================================================== */\n \n-extern rtx emit_insn\t\tPROTO((rtx));\n-extern rtx gen_nop\t\tPROTO(());\n-\n /* local globals for function calls\n    ====================================================================== */\n \n@@ -230,7 +234,6 @@ do_function_call (func, params, return_type)\n void\n init_exception_processing ()\n {\n-  extern tree define_function ();\n   tree unexpected_fndecl, terminate_fndecl;\n   tree set_unexpected_fndecl, set_terminate_fndecl;\n   tree catch_match_fndecl;"}, {"sha": "1967b76ea44fe5692edcd3baa119390660d6c2ad", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -28,6 +28,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"cp-tree.h\"\n \n+static tree extract_aggr_init PROTO((tree, tree));\n+static tree extract_scalar_init PROTO((tree, tree));\n+\n /* Hook used by expand_expr to expand language-specific tree codes.  */\n \n rtx"}, {"sha": "f73ed97e3c766bda8691bfa96d8cc048651ad61d", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -26,6 +26,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+static void add_friend PROTO((tree, tree));\n+static void add_friends PROTO((tree, tree, tree));\n+\n /* Friend data structures:\n \n    Lists of friend functions come from TYPE_DECL nodes.  Since all"}, {"sha": "beb8c570f961d9151e79f0335f6185b64af58e81", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -5,6 +5,14 @@\n \n #include \"gansidecl.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n /* This bit is set if we saw a `-xfoo' language specification.  */\n #define LANGSPEC\t(1<<1)\n /* This bit is set if they did `-lm' or `-lmath'.  */"}, {"sha": "1f032e07c13248bd6a71175378b6d40e865c6098", "filename": "gcc/cp/init.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -30,6 +30,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n \n+extern void compiler_error ();\n+\n /* In C++, structures with well-defined constructors are initialized by\n    those constructors, unasked.  CURRENT_BASE_INIT_LIST\n    holds a list of stmts for a BASE_INIT term in the grammar.\n@@ -41,15 +43,23 @@ Boston, MA 02111-1307, USA.  */\n    line.  Perhaps this was not intended.  */\n tree current_base_init_list, current_member_init_list;\n \n-void emit_base_init ();\n-void check_base_init ();\n-static void expand_aggr_vbase_init ();\n-void expand_member_init ();\n-void expand_aggr_init ();\n-\n-static void expand_aggr_init_1 PROTO((tree, tree, tree, tree, int, int));\n+static void expand_aggr_vbase_init_1 PROTO((tree, tree, tree, tree));\n+static void expand_aggr_vbase_init PROTO((tree, tree, tree, tree));\n+static void expand_aggr_init_1 PROTO((tree, tree, tree, tree, int,\n+\t\t\t\t      int));\n+static void expand_default_init PROTO((tree, tree, tree, tree, int,\n+\t\t\t\t       int));\n+static tree build_vec_delete_1 PROTO((tree, tree, tree, tree, tree,\n+\t\t\t\t      int));\n+static void perform_member_init PROTO((tree, tree, tree, int));\n+static void sort_base_init PROTO((tree, tree *, tree *));\n+static tree build_builtin_call PROTO((tree, tree, tree));\n+static tree build_array_eh_cleanup PROTO((tree, tree, tree));\n+static int member_init_ok_or_else PROTO((tree, tree, char *));\n static void expand_virtual_init PROTO((tree, tree));\n-tree expand_vec_init ();\n+static tree sort_member_init PROTO((tree));\n+static tree build_partial_cleanup_for PROTO((tree));\n+static tree initializing_context PROTO((tree));\n \n /* Cache _builtin_new and _builtin_delete exprs.  */\n static tree BIN, BID, BIVN, BIVD;"}, {"sha": "e884ed2ebb8ac02916057cf7c1f195f64c627283", "filename": "gcc/cp/input.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finput.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -33,9 +33,6 @@ Boston, MA 02111-1307, USA.  */\n \n extern FILE *finput;\n \n-struct pending_input *save_pending_input ();\n-void restore_pending_input ();\n-\n struct input_source {\n   /* saved string */\n   char *str;\n@@ -62,6 +59,17 @@ extern int lineno;\n #define inline\n #endif\n \n+extern void feed_input PROTO((char *, int));\n+extern void put_input PROTO((int));\n+extern void put_back PROTO((int));\n+extern int getch PROTO((void));\n+extern int input_redirected PROTO((void));\n+\n+static inline struct input_source * allocate_input PROTO((void));\n+static inline void free_input PROTO((struct input_source *));\n+static inline void end_input PROTO((void));\n+static inline int sub_getch PROTO((void));\n+\n static inline struct input_source *\n allocate_input ()\n {"}, {"sha": "b2b0c504d284cfe8c8149cb8d46ad24542a69f7a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -44,6 +44,21 @@ Boston, MA 02111-1307, USA.  */\n #include <locale.h>\n #endif\n \n+#ifdef HAVE_STDLIB_H\n+#ifndef MULTIBYTE_CHARS\n+#include <stdlib.h>\n+#endif\n+#else\n+extern double atof ();\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+extern char *index ();\n+extern char *rindex ();\n+#endif\n+\n #ifndef errno\n extern int errno;\t\t/* needed for VAX.  */\n #endif\n@@ -54,9 +69,27 @@ extern int errno;\t\t/* needed for VAX.  */\n extern struct obstack permanent_obstack;\n extern struct obstack *current_obstack, *saveable_obstack;\n \n-extern double atof ();\n-\n-extern char *get_directive_line ();\t/* In c-common.c */\n+extern void yyprint PROTO((FILE *, int, YYSTYPE));\n+extern void set_float_handler PROTO((jmp_buf));\n+extern void compiler_error PROTO((char *, HOST_WIDE_INT,\n+\t\t\t\t  HOST_WIDE_INT));\n+\n+static tree get_time_identifier PROTO((char *));\n+static int check_newline PROTO((void));\n+static int skip_white_space PROTO((int));\n+static int yynextch PROTO((void));\n+static void finish_defarg PROTO((void));\n+static int my_get_run_time PROTO((void));\n+static int get_last_nonwhite_on_line PROTO((void));\n+static int interface_strcmp PROTO((char *));\n+static int readescape PROTO((int *));\n+static char *extend_token_buffer PROTO((char *));\n+static void consume_string PROTO((struct obstack *, int));\n+static void set_typedecl_interface_info PROTO((tree, tree));\n+static void feed_defarg PROTO((tree, tree));\n+static int set_vardecl_interface_info PROTO((tree, tree));\n+static void store_pending_inline PROTO((tree, struct pending_inline *));\n+static void reinit_parse_for_expr PROTO((struct obstack *));\n \n /* Given a file name X, return the nondirectory portion.\n    Keep in mind that X can be computed more than once.  */\n@@ -65,10 +98,6 @@ extern char *get_directive_line ();\t/* In c-common.c */\n  (rindex (X, '/') != 0 ? rindex (X, '/') + 1 : X)\n #endif\n \n-extern char *index ();\n-extern char *rindex ();\n-void yyerror ();\n-\n /* This obstack is needed to hold text.  It is not safe to use\n    TOKEN_BUFFER because `check_newline' calls `yylex'.  */\n struct obstack inline_text_obstack;\n@@ -123,7 +152,6 @@ tree ridpointers[(int) RID_MAX];\n \n /* We may keep statistics about how long which files took to compile.  */\n static int header_time, body_time;\n-static tree get_time_identifier ();\n static tree filename_times;\n static tree this_filename_time;\n \n@@ -272,13 +300,10 @@ char *token_buffer;\t\t/* Pointer to token buffer.\n \n #include \"hash.h\"\n \f\n-static int check_newline ();\n \n /* Nonzero tells yylex to ignore \\ in string constants.  */\n static int ignore_escape_flag = 0;\n \n-static int skip_white_space ();\n-\n static tree\n get_time_identifier (name)\n      char *name;\n@@ -402,12 +427,9 @@ reinit_lang_specific ()\n }\n #endif\n \n-int *init_parse ();\n-\n void\n init_lex ()\n {\n-  extern char *(*decl_printable_name) ();\n   extern int flag_no_gnu_keywords;\n   extern int flag_operator_names;\n \n@@ -1414,8 +1436,6 @@ store_pending_inline (decl, t)\n   pending_inlines = t;\n }\n \n-static void reinit_parse_for_block PROTO((int, struct obstack *));\n-\n void\n reinit_parse_for_method (yychar, decl)\n      int yychar;\n@@ -1465,7 +1485,7 @@ reinit_parse_for_method (yychar, decl)\n /* Consume a block -- actually, a method beginning\n    with `:' or `{' -- and save it away on the specified obstack.  */\n \n-static void\n+void\n reinit_parse_for_block (pyychar, obstackp)\n      int pyychar;\n      struct obstack *obstackp;\n@@ -2159,9 +2179,9 @@ get_last_nonwhite_on_line ()\n int linemode;\n \n #ifdef HANDLE_SYSV_PRAGMA\n-static int handle_sysv_pragma ();\n+static int handle_sysv_pragma PROTO((FILE *, int));\n #endif\n-static int handle_cp_pragma ();\n+static int handle_cp_pragma PROTO((char *));\n \n static int\n check_newline ()\n@@ -2691,7 +2711,6 @@ readescape (ignore_ptr)\n int looking_for_typename = 0;\n \n #ifdef __GNUC__\n-extern __inline int identifier_type ();\n __inline\n #endif\n int\n@@ -3122,7 +3141,7 @@ real_yylex ()\n \t\t  p = extend_token_buffer (p);\n \n \t\t*p++ = c;\n-\t\tc = getch (finput);\n+\t\tc = getc (finput);\n \t      }\n \n \t    if (linemode && c == '\\n')\n@@ -3633,7 +3652,7 @@ real_yylex ()\n \t\t      p = extend_token_buffer (p);\n \t\t    *p++ = c;\n \t\t    *p = 0;\n-\t\t    c = getch (finput);\n+\t\t    c = getc (finput);\n \t\t  }\n \n \t\t/* The second argument, machine_mode, of REAL_VALUE_ATOF\n@@ -3741,7 +3760,7 @@ real_yylex ()\n \t\tif (p >= token_buffer + maxtoken - 3)\n \t\t  p = extend_token_buffer (p);\n \t\t*p++ = c;\n-\t\tc = getch (finput);\n+\t\tc = getc (finput);\n \t      }\n \n \t    /* If the constant is not long long and it won't fit in an"}, {"sha": "8df6b76a270baa4c15c983bd2210efb14cd776ec", "filename": "gcc/cp/lex.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.h?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -132,7 +132,4 @@ extern tree got_object;\n    Positive is push count, negative is pop count.  */\n extern int pending_lang_change;\n \n-extern tree make_pointer_declarator (), make_reference_declarator ();\n-extern void reinit_parse_for_function ();\n-extern void reinit_parse_for_method ();\n-extern int yylex ();\n+extern int yylex PROTO((void));"}, {"sha": "24026e793280e567c0356e050bb409d482b79585", "filename": "gcc/cp/method.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -39,6 +39,12 @@ Boston, MA 02111-1307, USA.  */\n #include \"hard-reg-set.h\"\n #include \"flags.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+extern char *index ();\n+#endif\n+\n /* TREE_LIST of the current inline functions that need to be\n    processed.  */\n struct pending_inline *pending_inlines;\n@@ -52,6 +58,20 @@ int static_labelno;\n static struct obstack scratch_obstack;\n static char *scratch_firstobj;\n \n+static void icat PROTO((HOST_WIDE_INT));\n+static void dicat PROTO((HOST_WIDE_INT, HOST_WIDE_INT));\n+static void flush_repeats PROTO((tree));\n+static void build_overload_identifier PROTO((tree));\n+static void build_overload_nested_name PROTO((tree));\n+static void build_overload_int PROTO((tree));\n+static void build_overload_identifier PROTO((tree));\n+static void build_qualified_name PROTO((tree));\n+static void build_overload_value PROTO((tree, tree));\n+static char *thunk_printable_name PROTO((tree));\n+static void do_build_assign_ref PROTO((tree));\n+static void do_build_copy_constructor PROTO((tree));\n+static tree largest_union_member PROTO((tree));\n+\n # define OB_INIT() (scratch_firstobj ? (obstack_free (&scratch_obstack, scratch_firstobj), 0) : 0)\n # define OB_PUTC(C) (obstack_1grow (&scratch_obstack, (C)))\n # define OB_PUTC2(C1,C2)\t\\\n@@ -355,7 +375,6 @@ flush_repeats (type)\n }\n \n static int numeric_output_need_bar;\n-static void build_overload_identifier ();\n \n static void\n build_overload_nested_name (decl)\n@@ -477,7 +496,6 @@ build_overload_value (type, value)\n       {\n \tREAL_VALUE_TYPE val;\n \tchar *bufp = digit_buffer;\n-\textern char *index ();\n \n \tpedwarn (\"ANSI C++ forbids floating-point template arguments\");\n "}, {"sha": "1554259877cdaf88f158914567e56b9084125fbb", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"lex.h\"\n #include \"cp-tree.h\"\n #include \"output.h\"\n+#include \"except.h\"\n \n /* Since parsers are distinct for each language, put the language string\n    definition here.  (fnf) */\n@@ -61,8 +62,6 @@ extern tree last_tree;\n extern tree strip_attrs\t\tPROTO((tree));\n /* END FSF LOCAL */\n \n-void yyerror ();\n-\n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n \n@@ -73,12 +72,12 @@ void yyerror ();\n    error message if the user supplies an empty conditional expression.  */\n static char *cond_stmt_keyword;\n \n+static tree empty_parms PROTO((void));\n+\n /* Nonzero if we have an `extern \"C\"' acting as an extern specifier.  */\n int have_extern_spec;\n int used_extern_spec;\n \n-void yyhook ();\n-\n /* Cons up an empty parameter list.  */\n #ifdef __GNUC__\n __inline\n@@ -301,7 +300,7 @@ static tree current_aggr;\n /* Tell yyparse how to print a token's value, if yydebug is set.  */\n \n #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)\n-extern void yyprint ();\n+extern void yyprint\t\t\tPROTO((FILE *, int, YYSTYPE));\n extern tree combine_strings\t\tPROTO((tree));\n %}\n \f\n@@ -2215,7 +2214,7 @@ structsp:\n \t\t  if (! semi)\n \t\t    check_for_missing_semicolon ($1); \n \t\t  if (current_scope () == current_function_decl)\n-\t\t    do_pending_defargs ($1);\n+\t\t    do_pending_defargs ();\n \t\t}\n \t  pending_defargs\n \t\t{"}, {"sha": "31007ec84ecac8459635f539387605ad3635164e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -40,6 +40,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"lex.h\"\n #include \"output.h\"\n #include \"defaults.h\"\n+#include \"except.h\"\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n \n extern struct obstack permanent_obstack;\n \n@@ -61,18 +66,17 @@ int minimal_parse_mode;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static int unify ();\n-\n-void pop_template_decls ();\n-\n-static tree classtype_mangled_name ();\n-static char * mangle_class_name_for_template ();\n-static tree tsubst_expr_values ();\n+static int unify PROTO((tree, tree *, int, tree, tree, int *, int));\n+static void add_pending_template PROTO((tree));\n+static int push_tinst_level PROTO((tree));\n+static tree classtype_mangled_name PROTO((tree));\n+static char *mangle_class_name_for_template PROTO((char *, tree, tree));\n+static tree tsubst_expr_values PROTO((tree, tree));\n static int comp_template_args PROTO((tree, tree));\n-tree most_specialized_class PROTO((tree, tree));\n+static int list_eq PROTO((tree, tree));\n static tree get_class_bindings PROTO((tree, tree, tree));\n-tree make_temp_vec PROTO((int));\n-static tree tsubst_enum\t\t\t\tPROTO((tree, tree *, int));\n+static tree coerce_template_parms PROTO((tree, tree, tree));\n+static tree tsubst_enum\tPROTO((tree, tree *, int));\n \n /* We've got a template header coming up; push to a new level for storing\n    the parms.  */"}, {"sha": "001a94309651b586f84c4772c268c45d3eaa8970", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -32,9 +32,25 @@ Boston, MA 02111-1307, USA.  */\n #include \"input.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n extern char * rindex ();\n+#endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#else\n extern char * getenv ();\n-extern char * getpwd ();\n+#endif\n+extern char * getpwd PROTO((void));\n+\n+static tree repo_get_id PROTO((tree));\n+static char *save_string PROTO((char *, int));\n+static char *extract_string PROTO((char **));\n+static char *get_base_filename PROTO((char *));\n+static void open_repo_file PROTO((char *));\n+static char *afgets PROTO((FILE *));\n+static void reopen_repo_file_for_write PROTO((void));\n \n static tree pending_repo;\n static tree original_repo;"}, {"sha": "dd82e34335f1c9ab071434fe70dd9177f4e2f464", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -32,10 +32,23 @@ Boston, MA 02111-1307, USA.  */\n #define INT_TYPE_SIZE BITS_PER_WORD\n #endif\n \n-extern tree define_function ();\n-extern tree build_t_desc_overload ();\n extern struct obstack permanent_obstack;\n \n+static tree call_void_fn PROTO((char *));\n+static tree build_headof_sub PROTO((tree));\n+static tree build_headof PROTO((tree));\n+static tree get_tinfo_var PROTO((tree));\n+static tree get_typeid_1 PROTO((tree));\n+static tree ifnonnull PROTO((tree, tree));\n+static tree build_dynamic_cast_1 PROTO((tree, tree));\n+static void expand_si_desc PROTO((tree, tree));\n+static void expand_class_desc PROTO((tree, tree));\n+static void expand_attr_desc PROTO((tree, tree));\n+static void expand_ptr_desc PROTO((tree, tree));\n+static void expand_generic_desc PROTO((tree, tree, char *));\n+static tree throw_bad_cast PROTO((void));\n+static tree throw_bad_typeid PROTO((void));\n+\n tree type_info_type_node;\n tree tinfo_fn_id;\n tree tinfo_fn_type;"}, {"sha": "29f8ef345198f21083b90ae82e524e50415bf009", "filename": "gcc/cp/search.c", "status": "modified", "additions": 67, "deletions": 12, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -75,12 +75,69 @@ pop_stack_level (stack)\n #define search_level stack_level\n static struct search_level *search_stack;\n \n-static tree lookup_field_1 ();\n+static void clear_memoized_cache PROTO((void));\n+static tree make_memoized_table_entry PROTO((tree, tree, int));\n+static tree get_abstract_virtuals_1 PROTO((tree, int, tree));\n+static tree get_vbase_1 PROTO((tree, tree, unsigned int *));\n+static tree convert_pointer_to_vbase PROTO((tree, tree));\n+static tree lookup_field_1 PROTO((tree, tree));\n+static tree convert_pointer_to_single_level PROTO((tree, tree));\n static int lookup_fnfields_1 PROTO((tree, tree));\n-static void dfs_walk ();\n-static int markedp ();\n-static void dfs_unmark ();\n-static void dfs_init_vbase_pointers ();\n+static int lookup_fnfields_here PROTO((tree, tree));\n+static int is_subobject_of_p PROTO((tree, tree));\n+static int hides PROTO((tree, tree));\n+static tree virtual_context PROTO((tree, tree, tree));\n+static tree get_template_base_recursive\n+\tPROTO((tree, tree, tree, int));\n+static void dfs_walk PROTO((tree, void (*) (tree), int (*) (tree)));\n+static void envelope_add_decl PROTO((tree, tree, tree *));\n+static int get_base_distance_recursive\n+\tPROTO((tree, int, int, int, int *, tree *, tree, tree *,\n+\t       int, int *, int, int));\n+static void expand_upcast_fixups \n+\tPROTO((tree, tree, tree, tree, tree, tree, tree *));\n+static void fixup_virtual_upcast_offsets\n+\tPROTO((tree, tree, int, int, tree, tree, tree, tree,\n+\t       tree *));\n+static int markedp PROTO((tree));\n+static int unmarkedp PROTO((tree));\n+static int numberedp PROTO((tree));\n+static int unnumberedp PROTO((tree));\n+static int marked_vtable_pathp PROTO((tree));\n+static int unmarked_vtable_pathp PROTO((tree));\n+static int marked_new_vtablep PROTO((tree));\n+static int unmarked_new_vtablep PROTO((tree));\n+static int dfs_debug_unmarkedp PROTO((tree));\n+static void dfs_number PROTO((tree));\n+static void dfs_unnumber PROTO((tree));\n+static void dfs_debug_mark PROTO((tree));\n+static void dfs_find_vbases PROTO((tree));\n+static void dfs_clear_vbase_slots PROTO((tree));\n+static void dfs_unmark PROTO((tree));\n+static void dfs_init_vbase_pointers PROTO((tree));\n+static void dfs_get_vbase_types PROTO((tree));\n+static void dfs_record_inheritance PROTO((tree));\n+static void dfs_pushdecls PROTO((tree));\n+static void dfs_compress_decls PROTO((tree));\n+static void dfs_unuse_fields PROTO((tree));\n+static void add_conversions PROTO((tree));\n+static tree get_virtuals_named_this PROTO((tree));\n+static tree get_virtual_destructor PROTO((tree, int));\n+static int tree_has_any_destructor_p PROTO((tree, int));\n+static struct search_level *push_search_level\n+\tPROTO((struct stack_level *, struct obstack *));\n+static struct search_level *pop_search_level\n+\tPROTO((struct stack_level *));\n+static struct type_level *push_type_level\n+\tPROTO((struct stack_level *, struct obstack *));\n+static struct type_level *pop_type_level\n+\tPROTO((struct type_level *));\n+static tree my_tree_cons PROTO((tree, tree, tree));\n+static tree my_build_string PROTO((char *));\n+static struct memoized_entry * my_new_memoized_entry\n+\tPROTO((struct memoized_entry *));\n+static HOST_WIDE_INT breadth_first_search\n+\tPROTO((tree, int (*) (tree, int), int (*) (tree, int)));\n \n static tree vbase_types;\n static tree vbase_decl_ptr_intermediate, vbase_decl_ptr;\n@@ -136,7 +193,6 @@ static tree _vptr_name;\n /* Make things that look like tree nodes, but allocate them\n    on type_obstack_entries.  */\n static int my_tree_node_counter;\n-static tree my_tree_cons (), my_build_string ();\n \n extern int flag_memoize_lookups, flag_save_memoized_contexts;\n \n@@ -1919,8 +1975,8 @@ lookup_fnfields (basetype_path, name, complain)\n static HOST_WIDE_INT\n breadth_first_search (binfo, testfn, qfn)\n      tree binfo;\n-     int (*testfn)();\n-     int (*qfn)();\n+     int (*testfn) PROTO((tree, int));\n+     int (*qfn) PROTO((tree, int));\n {\n   int head = 0, tail = 0;\n   int rval = 0;\n@@ -1978,8 +2034,7 @@ breadth_first_search (binfo, testfn, qfn)\n }\n \n /* Functions to use in breadth first searches.  */\n-typedef tree (*pft)();\n-typedef int (*pfi)();\n+typedef int (*pfi) PROTO((tree, int));\n \n static tree declarator;\n \n@@ -2383,8 +2438,8 @@ convert_pointer_to_single_level (to_type, expr)\n static void\n dfs_walk (binfo, fn, qfn)\n      tree binfo;\n-     void (*fn)();\n-     int (*qfn)();\n+     void (*fn) PROTO((tree));\n+     int (*qfn) PROTO((tree));\n {\n   tree binfos = BINFO_BASETYPES (binfo);\n   int i, n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;"}, {"sha": "ba3af4253840709668633800579147b0fbfe2748", "filename": "gcc/cp/sig.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsig.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -32,12 +32,22 @@ extern struct obstack *current_obstack;\n extern struct obstack permanent_obstack;\n extern struct obstack *saveable_obstack;\n \n-extern void error ();\n-extern void sorry ();\n extern void compiler_error ();\n-extern void make_decl_rtl\t\t\tPROTO((tree, char *, int));\n \n-static tree build_sptr_ref\t\t\tPROTO((tree));\n+static tree save_this PROTO((tree));\n+static tree build_sptr_ref PROTO((tree));\n+static tree build_member_function_pointer PROTO((tree));\n+static void undo_casts PROTO((tree));\n+static tree build_signature_pointer_or_reference_name\n+\tPROTO((tree, int, int, int));\n+static void build_signature_pointer_or_reference_decl\n+\tPROTO((tree, tree));\n+static tree build_signature_pointer_or_reference_type \n+\tPROTO((tree, int, int, int));\n+static tree get_sigtable_name PROTO((tree, tree));\n+static tree build_signature_table_constructor PROTO((tree, tree));\n+static int match_method_types PROTO((tree, tree));\n+static tree build_sigtable PROTO((tree, tree, tree));\n \n /* Used to help generate globally unique names for signature tables.  */\n "}, {"sha": "c82f1ecf55d9d600e14b6473714c3f5b3bb824ea", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -45,7 +45,9 @@ struct token  {\n   YYSTYPE\tyylval;\n };\n \n-static int do_aggr ();\n+static int do_aggr PROTO((void));\n+static int probe_obstack PROTO((struct obstack *, tree, unsigned int));\n+static void scan_tokens PROTO((int));\n \n /* From lex.c: */\n /* the declaration found for the last IDENTIFIER token read in.\n@@ -228,8 +230,6 @@ peekyylex ()\n   return nth_token (0)->yychar;\n }\n \n-extern tree snarf_defarg ();\n-\n int\n yylex ()\n {"}, {"sha": "e12050ddd30c19e656192bd2eb8c40d6ee583af0", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -32,6 +32,17 @@ Boston, MA 02111-1307, USA.  */\n #include <varargs.h>\n #endif\n \n+extern void compiler_error ();\n+\n+static tree get_identifier_list PROTO((tree));\n+static tree bot_manip PROTO((tree));\n+static tree perm_manip PROTO((tree));\n+static tree build_cplus_array_type_1 PROTO((tree, tree));\n+static void list_hash_add PROTO((int, tree));\n+static int list_hash PROTO((tree, tree, tree));\n+static tree list_hash_lookup PROTO((int, int, int, int, tree, tree,\n+\t\t\t\t    tree));\n+\n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n \n /* Return nonzero if REF is an lvalue valid for this language.\n@@ -1291,25 +1302,6 @@ is_aggr_type_2 (t1, t2)\n     return 0;\n   return IS_AGGR_TYPE (t1) && IS_AGGR_TYPE (t2);\n }\n-\n-/* Give message using types TYPE1 and TYPE2 as arguments.\n-   PFN is the function which will print the message;\n-   S is the format string for PFN to use.  */\n-\n-void\n-message_2_types (pfn, s, type1, type2)\n-     void (*pfn) ();\n-     char *s;\n-     tree type1, type2;\n-{\n-  tree name1 = TYPE_NAME (type1);\n-  tree name2 = TYPE_NAME (type2);\n-  if (TREE_CODE (name1) == TYPE_DECL)\n-    name1 = DECL_NAME (name1);\n-  if (TREE_CODE (name2) == TYPE_DECL)\n-    name2 = DECL_NAME (name2);\n-  (*pfn) (s, IDENTIFIER_POINTER (name1), IDENTIFIER_POINTER (name2));\n-}\n \f\n #define PRINT_RING_SIZE 4\n \n@@ -1406,7 +1398,7 @@ build_exception_variant (type, raises)\n tree\n mapcar (t, func)\n      tree t;\n-     tree (*func)();\n+     tree (*func) PROTO((tree));\n {\n   tree tmp;\n "}, {"sha": "3350a9295b1f2e4ede8b503f8a435aed2d07ecc9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -29,9 +29,6 @@ Boston, MA 02111-1307, USA.  */\n    and to process initializations in declarations (since they work\n    like a strange sort of assignment).  */\n \n-extern void error ();\n-extern void warning ();\n-\n #include \"config.h\"\n #include <stdio.h>\n #include \"tree.h\"\n@@ -40,19 +37,29 @@ extern void warning ();\n #include \"flags.h\"\n #include \"output.h\"\n \n-int mark_addressable PROTO((tree));\n-static tree convert_for_assignment PROTO((tree, tree, char*, tree, int));\n-/* static */ tree convert_for_initialization PROTO((tree, tree, tree, int, char*, tree, int));\n-extern tree shorten_compare ();\n-static tree pointer_int_sum PROTO((enum tree_code, register tree, register tree));\n-static tree pointer_diff PROTO((register tree, register tree));\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+extern void compiler_error ();\n+\n+static tree convert_for_assignment PROTO((tree, tree, char*, tree,\n+\t\t\t\t\t  int));\n+static tree pointer_int_sum PROTO((enum tree_code, tree, tree));\n+static tree rationalize_conditional_expr PROTO((enum tree_code, tree));\n static int comp_target_parms PROTO((tree, tree, int));\n+static int comp_ptr_ttypes_real PROTO((tree, tree, int));\n static int comp_ptr_ttypes_const PROTO((tree, tree));\n static int comp_ptr_ttypes_reinterpret PROTO((tree, tree));\n-#if 0\n-static tree convert_sequence ();\n-#endif\n-/* static */ tree unary_complex_lvalue PROTO((enum tree_code, tree));\n+static int comp_array_types PROTO((int (*) (tree, tree, int), tree,\n+\t\t\t\t   tree, int));\n+static tree build_ptrmemfunc1 PROTO((tree, tree, tree, tree, tree));\n+static tree common_base_type PROTO((tree, tree));\n+static tree convert_sequence PROTO((tree, tree));\n+static tree lookup_anon_field PROTO((tree, tree));\n+static tree pointer_diff PROTO((tree, tree));\n+static tree qualify_type PROTO((tree, tree));\n+static tree expand_target_expr PROTO((tree));\n static tree get_delta_difference PROTO((tree, tree, int));\n \n /* Return the target type of TYPE, which meas return T for:\n@@ -589,7 +596,7 @@ compexcepttypes (t1, t2)\n \n static int\n comp_array_types (cmp, t1, t2, strict)\n-     register int (*cmp)();\n+     register int (*cmp) PROTO((tree, tree, int));\n      tree t1, t2;\n      int strict;\n {\n@@ -6254,14 +6261,14 @@ build_ptrmemfunc1 (type, delta, idx, pfn, delta2)\n   if (pfn)\n     {\n       allconstant = TREE_CONSTANT (pfn);\n-      allsimple = initializer_constant_valid_p (pfn, TREE_TYPE (pfn));\n+      allsimple = (int) initializer_constant_valid_p (pfn, TREE_TYPE (pfn));\n       u = tree_cons (pfn_field, pfn, NULL_TREE);\n     }\n   else\n     {\n       delta2 = convert_and_check (delta_type_node, delta2);\n       allconstant = TREE_CONSTANT (delta2);\n-      allsimple = initializer_constant_valid_p (delta2, TREE_TYPE (delta2));\n+      allsimple = (int) initializer_constant_valid_p (delta2, TREE_TYPE (delta2));\n       u = tree_cons (delta2_field, delta2, NULL_TREE);\n     }\n "}, {"sha": "b03cb5da1ab8f65a3c79fd90193ab10f19c9e9f7", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -36,8 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cp-tree.h\"\n #include \"flags.h\"\n \n-static tree process_init_constructor ();\n-extern void pedwarn (), error ();\n+static tree process_init_constructor PROTO((tree, tree, tree *));\n \n extern int errorcount;\n extern int sorrycount;"}, {"sha": "fc2d1078ac2f021e87f631811aaa10575a8467b9", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c249e1c8aecde11d2166d5bfc6789cb3882172/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=49c249e1c8aecde11d2166d5bfc6789cb3882172", "patch": "@@ -28,10 +28,22 @@ Boston, MA 02111-1307, USA.  */\n \n #include <ctype.h>\n \n-extern char *getpwd ();\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+extern char *getpwd PROTO((void));\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n extern char *index ();\n extern char *rindex ();\n+#endif\n \n /* The character(s) used to join a directory specification (obtained with\n    getwd or equivalent) with a non-absolute file name.  */\n@@ -125,30 +137,14 @@ static\ttree\t\tlast_fndecl = NULL;\n /*\tForward definitions\t\t\t\t\t\t*/\n /*\t\t\t\t\t\t\t\t\t*/\n /************************************************************************/\n-\n-extern\tvoid\t\tGNU_xref_begin();\n-extern\tvoid\t\tGNU_xref_end();\n-extern\tvoid\t\tGNU_xref_file();\n-extern\tvoid\t\tGNU_xref_start_scope();\n-extern\tvoid\t\tGNU_xref_end_scope();\n-extern\tvoid\t\tGNU_xref_ref();\n-extern\tvoid\t\tGNU_xref_decl();\n-extern\tvoid\t\tGNU_xref_call();\n-extern\tvoid\t\tGNU_xref_function();\n-extern\tvoid\t\tGNU_xref_assign();\n-extern\tvoid\t\tGNU_xref_hier();\n-extern\tvoid\t\tGNU_xref_member();\n-\n-static\tvoid\t\tgen_assign();\n-static\tXREF_FILE\tfind_file();\n-static\tchar *\t\tfilename();\n-static\tchar *\t\tfctname();\n-static\tchar *\t\tdeclname();\n-static\tvoid\t\tsimplify_type();\n-static\tchar *\t\tfixname();\n-static\tvoid\t\topen_xref_file();\n-\n-extern\tchar *\t\ttype_as_string();\n+static\tvoid\t\tgen_assign PROTO((XREF_FILE, tree));\n+static\tXREF_FILE\tfind_file PROTO((char *));\n+static\tchar *\t\tfilename PROTO((XREF_FILE));\n+static\tchar *\t\tfctname PROTO((tree));\n+static\tchar *\t\tdeclname PROTO((tree));\n+static\tvoid\t\tsimplify_type PROTO((char *));\n+static\tchar *\t\tfixname PROTO((char *, char *));\n+static\tvoid\t\topen_xref_file PROTO((char *));\n \n /* Start cross referencing.  FILE is the name of the file we xref.  */\n "}]}