{"sha": "e864d395b4e862cece37abe178e7ebd631b5348b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2NGQzOTViNGU4NjJjZWNlMzdhYmUxNzhlN2ViZDYzMWI1MzQ4Yg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-19T15:03:44Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-20T18:46:08Z"}, "message": "Convert -Wrestrict pass to ranger.\n\nThere is one adjustment to a C++ test which now gives a false positive.\nAfter talking with Martin Sebor, we've concluded this is expected.  There\nis no way to communicate that libstdc++ allocated objects are always\nless than PTRDIFF_MAX.\n\ngcc/ChangeLog:\n\n\t* calls.c (get_size_range): Adjust to work with ranger.\n\t* calls.h (get_size_range): Add ranger argument to prototype.\n\t* gimple-ssa-warn-restrict.c (class wrestrict_dom_walker): Remove.\n\t(check_call): Pull out of wrestrict_dom_walker into a\n\tstatic function.\n\t(wrestrict_dom_walker::before_dom_children): Rename to...\n\t(wrestrict_walk): ...this.\n\t(pass_wrestrict::execute): Instantiate ranger.\n\t(class builtin_memref): Add stmt and query fields.\n\t(builtin_access::builtin_access): Add range_query field.\n\t(builtin_memref::builtin_memref): Same.\n\t(builtin_memref::extend_offset_range): Same.\n\t(builtin_access::builtin_access): Make work with ranger.\n\t(wrestrict_dom_walker::check_call): Pull out into...\n\t(check_call): ...here.\n\t(check_bounds_or_overlap): Add range_query argument.\n\t* gimple-ssa-warn-restrict.h (check_bounds_or_overlap):\n\tAdd range_query and gimple stmt arguments.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wrestrict-22.c: New test.\n\t* g++.dg/torture/pr92421.C: Adjust for ranger.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/21_strings/basic_string/capacity/1.cc: Pass\n\t-Wno-stringop-overflow to test.", "tree": {"sha": "e98603a69dac2fbaa26c12802bcca7ab1c702e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e98603a69dac2fbaa26c12802bcca7ab1c702e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e864d395b4e862cece37abe178e7ebd631b5348b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e864d395b4e862cece37abe178e7ebd631b5348b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e864d395b4e862cece37abe178e7ebd631b5348b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e864d395b4e862cece37abe178e7ebd631b5348b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "495ec0b2aa808a6463b8c24288a1730cbae1cfca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495ec0b2aa808a6463b8c24288a1730cbae1cfca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/495ec0b2aa808a6463b8c24288a1730cbae1cfca"}], "stats": {"total": 145, "additions": 104, "deletions": 41}, "files": [{"sha": "a12b84744c0897b27d4da108c8479acbedb73e3e", "filename": "gcc/calls.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e864d395b4e862cece37abe178e7ebd631b5348b", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"gimple-fold.h\"\n #include \"attr-fnspec.h\"\n+#include \"value-query.h\"\n \n #include \"tree-pretty-print.h\"\n \n@@ -1244,7 +1245,8 @@ alloc_max_size (void)\n    in a multi-range, otherwise to the smallest valid subrange.  */\n \n bool\n-get_size_range (tree exp, tree range[2], int flags /* = 0 */)\n+get_size_range (range_query *query, tree exp, gimple *stmt, tree range[2],\n+\t\tint flags /* = 0 */)\n {\n   if (!exp)\n     return false;\n@@ -1263,7 +1265,21 @@ get_size_range (tree exp, tree range[2], int flags /* = 0 */)\n   enum value_range_kind range_type;\n \n   if (integral)\n-    range_type = determine_value_range (exp, &min, &max);\n+    {\n+      value_range vr;\n+      if (query && query->range_of_expr (vr, exp, stmt))\n+\t{\n+\t  range_type = vr.kind ();\n+\t  if (!vr.undefined_p ())\n+\t    {\n+\t      min = wi::to_wide (vr.min ());\n+\t      max = wi::to_wide (vr.max ());\n+\t    }\n+\t}\n+      else\n+\trange_type = determine_value_range (exp, &min, &max);\n+\n+    }\n   else\n     range_type = VR_VARYING;\n \n@@ -1369,6 +1385,12 @@ get_size_range (tree exp, tree range[2], int flags /* = 0 */)\n   return true;\n }\n \n+bool\n+get_size_range (tree exp, tree range[2], int flags /* = 0 */)\n+{\n+  return get_size_range (/*query=*/NULL, exp, /*stmt=*/NULL, range, flags);\n+}\n+\n /* Diagnose a call EXP to function FN decorated with attribute alloc_size\n    whose argument numbers given by IDX with values given by ARGS exceed\n    the maximum object size or cause an unsigned oveflow (wrapping) when"}, {"sha": "f32b6308b5811b8ceb8f7884a78b8ca33c48ee79", "filename": "gcc/calls.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=e864d395b4e862cece37abe178e7ebd631b5348b", "patch": "@@ -142,6 +142,8 @@ enum size_range_flags\n    SR_USE_LARGEST = 2\n   };\n extern bool get_size_range (tree, tree[2], int = 0);\n+extern bool get_size_range (class range_query *, tree, gimple *,\n+\t\t\t    tree[2], int = 0);\n extern rtx rtx_for_static_chain (const_tree, bool);\n extern bool cxx17_empty_base_field_p (const_tree);\n "}, {"sha": "3a79e7240f9562e18fdb3e3bf1e7634bacf3628f", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 60, "deletions": 39, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=e864d395b4e862cece37abe178e7ebd631b5348b", "patch": "@@ -25,7 +25,6 @@\n #include \"backend.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n-#include \"domwalk.h\"\n #include \"tree-pass.h\"\n #include \"builtins.h\"\n #include \"ssa.h\"\n@@ -41,6 +40,7 @@\n #include \"calls.h\"\n #include \"cfgloop.h\"\n #include \"intl.h\"\n+#include \"gimple-range.h\"\n \n namespace {\n \n@@ -77,21 +77,10 @@ pass_wrestrict::gate (function *fun ATTRIBUTE_UNUSED)\n   return warn_array_bounds || warn_restrict || warn_stringop_overflow;\n }\n \n-/* Class to walk the basic blocks of a function in dominator order.  */\n-class wrestrict_dom_walker : public dom_walker\n-{\n- public:\n-  wrestrict_dom_walker () : dom_walker (CDI_DOMINATORS) {}\n+static void check_call (range_query *, gimple *);\n \n-  edge before_dom_children (basic_block) FINAL OVERRIDE;\n-  bool handle_gimple_call (gimple_stmt_iterator *);\n-\n- private:\n-  void check_call (gimple *);\n-};\n-\n-edge\n-wrestrict_dom_walker::before_dom_children (basic_block bb)\n+static void\n+wrestrict_walk (range_query *query, basic_block bb)\n {\n   /* Iterate over statements, looking for function calls.  */\n   for (gimple_stmt_iterator si = gsi_start_bb (bb); !gsi_end_p (si);\n@@ -101,21 +90,17 @@ wrestrict_dom_walker::before_dom_children (basic_block bb)\n       if (!is_gimple_call (stmt))\n \tcontinue;\n \n-      check_call (stmt);\n+      check_call (query, stmt);\n     }\n-\n-  return NULL;\n }\n \n-/* Execute the pass for function FUN, walking in dominator order.  */\n-\n unsigned\n pass_wrestrict::execute (function *fun)\n {\n-  calculate_dominance_info (CDI_DOMINATORS);\n-\n-  wrestrict_dom_walker walker;\n-  walker.walk (ENTRY_BLOCK_PTR_FOR_FN (fun));\n+  gimple_ranger ranger;\n+  basic_block bb;\n+  FOR_EACH_BB_FN (bb, fun)\n+    wrestrict_walk (&ranger, bb);\n \n   return 0;\n }\n@@ -159,11 +144,15 @@ class builtin_memref\n      only the destination reference is.  */\n   bool strbounded_p;\n \n-  builtin_memref (tree, tree);\n+  builtin_memref (range_query *, gimple *, tree, tree);\n \n   tree offset_out_of_bounds (int, offset_int[3]) const;\n \n private:\n+  /* Call statement to the built-in.  */\n+  gimple *stmt;\n+\n+  range_query *query;\n \n   /* Ctor helper to set or extend OFFRANGE based on argument.  */\n   void extend_offset_range (tree);\n@@ -197,7 +186,7 @@ class builtin_access\n \t    && detect_overlap != &builtin_access::no_overlap);\n   }\n \n-  builtin_access (gimple *, builtin_memref &, builtin_memref &);\n+  builtin_access (range_query *, gimple *, builtin_memref &, builtin_memref &);\n \n   /* Entry point to determine overlap.  */\n   bool overlap ();\n@@ -233,9 +222,10 @@ class builtin_access\n \n /* Initialize a memory reference representation from a pointer EXPR and\n    a size SIZE in bytes.  If SIZE is NULL_TREE then the size is assumed\n-   to be unknown.  */\n+   to be unknown.  STMT is the statement in which expr appears in.  */\n \n-builtin_memref::builtin_memref (tree expr, tree size)\n+builtin_memref::builtin_memref (range_query *query, gimple *stmt, tree expr,\n+\t\t\t\ttree size)\n : ptr (expr),\n   ref (),\n   base (),\n@@ -245,7 +235,9 @@ builtin_memref::builtin_memref (tree expr, tree size)\n   offrange (),\n   sizrange (),\n   maxobjsize (tree_to_shwi (max_object_size ())),\n-  strbounded_p ()\n+  strbounded_p (),\n+  stmt (stmt),\n+  query (query)\n {\n   /* Unfortunately, wide_int default ctor is a no-op so array members\n      of the type must be set individually.  */\n@@ -264,7 +256,7 @@ builtin_memref::builtin_memref (tree expr, tree size)\n       tree range[2];\n       /* Determine the size range, allowing for the result to be [0, 0]\n \t for SIZE in the anti-range ~[0, N] where N >= PTRDIFF_MAX.  */\n-      get_size_range (size, range, SR_ALLOW_ZERO);\n+      get_size_range (query, size, stmt, range, SR_ALLOW_ZERO);\n       sizrange[0] = wi::to_offset (range[0]);\n       sizrange[1] = wi::to_offset (range[1]);\n       /* get_size_range returns SIZE_MAX for the maximum size.\n@@ -341,7 +333,24 @@ builtin_memref::extend_offset_range (tree offset)\n       /* A pointer offset is represented as sizetype but treated\n \t as signed.  */\n       wide_int min, max;\n-      value_range_kind rng = get_range_info (offset, &min, &max);\n+      value_range_kind rng;\n+      value_range vr;\n+      if (query && query->range_of_expr (vr, offset, stmt))\n+\t{\n+\t  rng = vr.kind ();\n+\t  if (!vr.undefined_p ())\n+\t    {\n+\t      min = wi::to_wide (vr.min ());\n+\t      max = wi::to_wide (vr.max ());\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* There is a global version here because\n+\t     check_bounds_or_overlap may be called from gimple\n+\t     fold during gimple lowering.  */\n+\t  rng = get_range_info (offset, &min, &max);\n+\t}\n       if (rng == VR_ANTI_RANGE && wi::lts_p (max, min))\n \t{\n \t  /* Convert an anti-range whose upper bound is less than\n@@ -658,7 +667,8 @@ builtin_memref::offset_out_of_bounds (int strict, offset_int ooboff[3]) const\n /* Create an association between the memory references DST and SRC\n    for access by a call EXPR to a memory or string built-in funtion.  */\n \n-builtin_access::builtin_access (gimple *call, builtin_memref &dst,\n+builtin_access::builtin_access (range_query *query, gimple *call,\n+\t\t\t\tbuiltin_memref &dst,\n \t\t\t\tbuiltin_memref &src)\n : dstref (&dst), srcref (&src), sizrange (), ovloff (), ovlsiz (),\n   dstoff (), srcoff (), dstsiz (), srcsiz ()\n@@ -797,7 +807,7 @@ builtin_access::builtin_access (gimple *call, builtin_memref &dst,\n \n       tree size = gimple_call_arg (call, sizeargno);\n       tree range[2];\n-      if (get_size_range (size, range, true))\n+      if (get_size_range (query, size, call, range, true))\n \t{\n \t  bounds[0] = wi::to_offset (range[0]);\n \t  bounds[1] = wi::to_offset (range[1]);\n@@ -1873,8 +1883,8 @@ maybe_diag_access_bounds (gimple *call, tree func, int strict,\n /* Check a CALL statement for restrict-violations and issue warnings\n    if/when appropriate.  */\n \n-void\n-wrestrict_dom_walker::check_call (gimple *call)\n+static void\n+check_call (range_query *query, gimple *call)\n {\n   /* Avoid checking the call if it has already been diagnosed for\n      some reason.  */\n@@ -1964,7 +1974,7 @@ wrestrict_dom_walker::check_call (gimple *call)\n       || (dstwr && !INTEGRAL_TYPE_P (TREE_TYPE (dstwr))))\n     return;\n \n-  if (!check_bounds_or_overlap (call, dst, src, dstwr, NULL_TREE))\n+  if (!check_bounds_or_overlap (query, call, dst, src, dstwr, NULL_TREE))\n     return;\n \n   /* Avoid diagnosing the call again.  */\n@@ -1984,15 +1994,26 @@ int\n check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n \t\t\t tree srcsize, bool bounds_only /* = false */,\n \t\t\t bool do_warn /* = true */)\n+{\n+  return check_bounds_or_overlap (/*range_query=*/NULL,\n+\t\t\t\t  call, dst, src, dstsize, srcsize,\n+\t\t\t\t  bounds_only, do_warn);\n+}\n+\n+int\n+check_bounds_or_overlap (range_query *query,\n+\t\t\t gimple *call, tree dst, tree src, tree dstsize,\n+\t\t\t tree srcsize, bool bounds_only /* = false */,\n+\t\t\t bool do_warn /* = true */)\n {\n   tree func = gimple_call_fndecl (call);\n \n-  builtin_memref dstref (dst, dstsize);\n-  builtin_memref srcref (src, srcsize);\n+  builtin_memref dstref (query, call, dst, dstsize);\n+  builtin_memref srcref (query, call, src, srcsize);\n \n   /* Create a descriptor of the access.  This may adjust both DSTREF\n      and SRCREF based on one another and the kind of the access.  */\n-  builtin_access acs (call, dstref, srcref);\n+  builtin_access acs (query, call, dstref, srcref);\n \n   /* Set STRICT to the value of the -Warray-bounds=N argument for\n      string functions or when N > 1.  */"}, {"sha": "3dba9c0fe582d7768634fb7d094b59717e55023e", "filename": "gcc/gimple-ssa-warn-restrict.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fgimple-ssa-warn-restrict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Fgimple-ssa-warn-restrict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.h?ref=e864d395b4e862cece37abe178e7ebd631b5348b", "patch": "@@ -22,5 +22,8 @@\n \n extern int check_bounds_or_overlap (gimple *, tree, tree, tree, tree,\n \t\t\t\t    bool = false, bool = true);\n+extern int check_bounds_or_overlap (class range_query *, gimple *,\n+\t\t\t\t    tree, tree, tree, tree,\n+\t\t\t\t    bool = false, bool = true);\n \n #endif /* GIMPLE_SSA_WARN_RESTRICT_H */"}, {"sha": "0489eb75d9a644233273e3deefce5bd63c19613d", "filename": "gcc/testsuite/g++.dg/torture/pr92421.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C?ref=e864d395b4e862cece37abe178e7ebd631b5348b", "patch": "@@ -2,6 +2,10 @@\n // { dg-do compile }\n // { dg-additional-options \"-Wno-return-type\" }\n \n+// VRP jump threading will create additional __builtin___memcpy_chk calls that\n+// may be out of bounds.\n+// { dg-additional-options \"-Wno-stringop-overflow\" }\n+\n typedef long a;\n void *b, *c;\n template <typename, typename> class d {};"}, {"sha": "46f507b56b65c7d63e9271f6ea591a660333c49f", "filename": "gcc/testsuite/gcc.dg/Wrestrict-22.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e864d395b4e862cece37abe178e7ebd631b5348b/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-22.c?ref=e864d395b4e862cece37abe178e7ebd631b5348b", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wrestrict\" } */\n+\n+void test_memcpy_warn (char *d, unsigned n)\n+{\n+  for (unsigned i = n; i < 30; ++i)\n+    if (i > 10)\n+      __builtin_memcpy (d, d + 2, i); /* { dg-warning \"overlaps\" } */\n+}"}, {"sha": "92f2bf40f142d4d659d3ab500240a7c557c1c952", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e864d395b4e862cece37abe178e7ebd631b5348b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e864d395b4e862cece37abe178e7ebd631b5348b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc?ref=e864d395b4e862cece37abe178e7ebd631b5348b", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-Wno-stringop-overflow\" }\n+\n // 21.3.3 string capacity\n \n #include <string>"}]}