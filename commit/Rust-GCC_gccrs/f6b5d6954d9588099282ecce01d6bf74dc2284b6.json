{"sha": "f6b5d6954d9588099282ecce01d6bf74dc2284b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiNWQ2OTU0ZDk1ODgwOTkyODJlY2NlMDFkNmJmNzRkYzIyODRiNg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2010-05-27T23:06:31Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2010-05-27T23:06:31Z"}, "message": "constraints.md (\"z\" constraint): Change to CA_REGS.\n\n2010-05-28  Segher Boessenkool  <segher@kernel.crashing.org>\n\n        * config/rs6000/constraints.md (\"z\" constraint): Change to CA_REGS.\n        * config/rs6000/predicates.md: Change XER_REGNO_P to CA_REGNO_P\n        throughout.\n        * config/rs6000/rs6000.c (rs6000_reg_names, alt_reg_names): Change\n        \"xer\" to \"ca\".\n        Change XER_REGNO_P to CA_REGNO_P, XER_REGNO to CA_REGNO, and\n        XER_REGS to CA_REGS throughout.\n        * config/rs6000/rs6000.h: Same.\n        (ADDITIONAL_REGISTER_NAMES): Add \"xer\".\n        * config/rs6000/rs6000.md: Change XER_REGNO to CA_REGNO.  Document\n        that mode_iterator \"P\" is the size for arithmetic carries as well.\n        * doc/md.texi (rs6000 section, \"z\" constraint): Fix documentation.\n\nFrom-SVN: r159953", "tree": {"sha": "860d83076a9f22ea8c36c8a9e80fa3186040321a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/860d83076a9f22ea8c36c8a9e80fa3186040321a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b5d6954d9588099282ecce01d6bf74dc2284b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b5d6954d9588099282ecce01d6bf74dc2284b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b5d6954d9588099282ecce01d6bf74dc2284b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b5d6954d9588099282ecce01d6bf74dc2284b6/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47027bf3985b99614a97efc76b49ec87339e3722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47027bf3985b99614a97efc76b49ec87339e3722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47027bf3985b99614a97efc76b49ec87339e3722"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "5cc16f7beee1f72ea21c37a5e723b380c3ba6599", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6b5d6954d9588099282ecce01d6bf74dc2284b6", "patch": "@@ -1,3 +1,18 @@\n+2010-05-28  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (\"z\" constraint): Change to CA_REGS.\n+\t* config/rs6000/predicates.md: Change XER_REGNO_P to CA_REGNO_P\n+\tthroughout.\n+\t* config/rs6000/rs6000.c (rs6000_reg_names, alt_reg_names): Change\n+\t\"xer\" to \"ca\".\n+\tChange XER_REGNO_P to CA_REGNO_P, XER_REGNO to CA_REGNO, and\n+\tXER_REGS to CA_REGS throughout.\n+\t* config/rs6000/rs6000.h: Same.\n+\t(ADDITIONAL_REGISTER_NAMES): Add \"xer\".\n+\t* config/rs6000/rs6000.md: Change XER_REGNO to CA_REGNO.  Document\n+\tthat mode_iterator \"P\" is the size for arithmetic carries as well.\n+\t* doc/md.texi (rs6000 section, \"z\" constraint): Fix documentation.\n+\n 2010-05-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/44255"}, {"sha": "bd4a1a1b8ae8d48aa59e92c233f2b43bebf57c57", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=f6b5d6954d9588099282ecce01d6bf74dc2284b6", "patch": "@@ -51,7 +51,7 @@\n (define_register_constraint \"y\" \"CR_REGS\"\n   \"@internal\")\n \n-(define_register_constraint \"z\" \"XER_REGS\"\n+(define_register_constraint \"z\" \"CA_REGS\"\n   \"@internal\")\n \n ;; Use w as a prefix to add VSX modes"}, {"sha": "b4de82b6612c4b16a87d0b9664cfd0a81aff81b1", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=f6b5d6954d9588099282ecce01d6bf74dc2284b6", "patch": "@@ -69,10 +69,10 @@\n \t\t     || VLOGICAL_REGNO_P (REGNO (op))\n \t\t     || REGNO (op) > LAST_VIRTUAL_REGISTER\")))\n \n-;; Return 1 if op is XER register.\n-(define_predicate \"xer_operand\"\n+;; Return 1 if op is the carry register.\n+(define_predicate \"ca_operand\"\n   (and (match_code \"reg\")\n-       (match_test \"XER_REGNO_P (REGNO (op))\")))\n+       (match_test \"CA_REGNO_P (REGNO (op))\")))\n \n ;; Return 1 if op is a signed 5-bit constant integer.\n (define_predicate \"s5bit_cint_operand\"\n@@ -116,7 +116,7 @@\n    (and (match_operand 0 \"register_operand\")\n \t(match_test \"(GET_CODE (op) != REG\n \t\t      || (REGNO (op) >= ARG_POINTER_REGNUM\n-\t\t\t  && !XER_REGNO_P (REGNO (op)))\n+\t\t\t  && !CA_REGNO_P (REGNO (op)))\n \t\t      || REGNO (op) < MQ_REGNO)\n \t\t     && !((TARGET_E500_DOUBLE || TARGET_SPE)\n \t\t\t  && invalid_e500_subreg (op, mode))\")))"}, {"sha": "b1cc4c784a52d21b61474fb9a2ade0da07df9d44", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f6b5d6954d9588099282ecce01d6bf74dc2284b6", "patch": "@@ -1210,7 +1210,7 @@ char rs6000_reg_names[][8] =\n      \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n      \"mq\", \"lr\", \"ctr\",\"ap\",\n       \"0\",  \"1\",  \"2\",  \"3\",  \"4\",  \"5\",  \"6\",  \"7\",\n-      \"xer\",\n+      \"ca\",\n       /* AltiVec registers.  */\n       \"0\",  \"1\",  \"2\",  \"3\",  \"4\",  \"5\",  \"6\", \"7\",\n       \"8\",  \"9\",  \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n@@ -1236,7 +1236,7 @@ static const char alt_reg_names[][8] =\n   \"%f24\",  \"%f25\", \"%f26\", \"%f27\", \"%f28\", \"%f29\", \"%f30\", \"%f31\",\n     \"mq\",    \"lr\",  \"ctr\",   \"ap\",\n   \"%cr0\",  \"%cr1\", \"%cr2\", \"%cr3\", \"%cr4\", \"%cr5\", \"%cr6\", \"%cr7\",\n-   \"xer\",\n+   \"ca\",\n   /* AltiVec registers.  */\n    \"%v0\",  \"%v1\",  \"%v2\",  \"%v3\",  \"%v4\",  \"%v5\",  \"%v6\", \"%v7\",\n    \"%v8\",  \"%v9\", \"%v10\", \"%v11\", \"%v12\", \"%v13\", \"%v14\", \"%v15\",\n@@ -1649,8 +1649,8 @@ rs6000_hard_regno_mode_ok (int regno, enum machine_mode mode)\n   if (CR_REGNO_P (regno))\n     return GET_MODE_CLASS (mode) == MODE_CC;\n \n-  if (XER_REGNO_P (regno))\n-    return mode == PSImode;\n+  if (CA_REGNO_P (regno))\n+    return mode == BImode;\n \n   /* AltiVec only in AldyVec registers.  */\n   if (ALTIVEC_REGNO_P (regno))\n@@ -1771,7 +1771,7 @@ rs6000_debug_reg_global (void)\n   rs6000_debug_reg_print (CTR_REGNO, CTR_REGNO, \"ctr\");\n   rs6000_debug_reg_print (CR0_REGNO, CR7_REGNO, \"cr\");\n   rs6000_debug_reg_print (MQ_REGNO, MQ_REGNO, \"mq\");\n-  rs6000_debug_reg_print (XER_REGNO, XER_REGNO, \"xer\");\n+  rs6000_debug_reg_print (CA_REGNO, CA_REGNO, \"ca\");\n   rs6000_debug_reg_print (VRSAVE_REGNO, VRSAVE_REGNO, \"vrsave\");\n   rs6000_debug_reg_print (VSCR_REGNO, VSCR_REGNO, \"vscr\");\n   rs6000_debug_reg_print (SPE_ACC_REGNO, SPE_ACC_REGNO, \"spe_a\");\n@@ -1896,7 +1896,7 @@ rs6000_init_hard_regno_mode_ok (void)\n   rs6000_regno_regclass[MQ_REGNO] = MQ_REGS;\n   rs6000_regno_regclass[LR_REGNO] = LINK_REGS;\n   rs6000_regno_regclass[CTR_REGNO] = CTR_REGS;\n-  rs6000_regno_regclass[XER_REGNO] = XER_REGS;\n+  rs6000_regno_regclass[CA_REGNO] = CA_REGS;\n   rs6000_regno_regclass[VRSAVE_REGNO] = VRSAVE_REGS;\n   rs6000_regno_regclass[VSCR_REGNO] = VRSAVE_REGS;\n   rs6000_regno_regclass[SPE_ACC_REGNO] = SPE_ACC_REGS;\n@@ -25745,8 +25745,8 @@ rs6000_dbx_register_number (unsigned int regno)\n     return 109;\n   if (CR_REGNO_P (regno))\n     return regno - CR0_REGNO + 86;\n-  if (regno == XER_REGNO)\n-    return 101;\n+  if (regno == CA_REGNO)\n+    return 101;  /* XER */\n   if (ALTIVEC_REGNO_P (regno))\n     return regno - FIRST_ALTIVEC_REGNO + 1124;\n   if (regno == VRSAVE_REGNO)"}, {"sha": "327673e160c5d812f4be59116a2e43f2f3a89db6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f6b5d6954d9588099282ecce01d6bf74dc2284b6", "patch": "@@ -946,7 +946,7 @@ extern unsigned rs6000_pointer_size;\n \tmq\t\t(not saved; best to use it if we can)\n \tctr\t\t(not saved; when we have the choice ctr is better)\n \tlr\t\t(saved)\n-\tcr5, r1, r2, ap, xer (fixed)\n+\tcr5, r1, r2, ap, ca (fixed)\n \tv0 - v1\t\t(not saved or used for anything)\n \tv13 - v3\t(not saved; incoming vector arg registers)\n \tv2\t\t(not saved; incoming vector arg reg; return value)\n@@ -1008,8 +1008,8 @@ extern unsigned rs6000_pointer_size;\n /* PAIRED SIMD registers are just the FPRs.  */\n #define PAIRED_SIMD_REGNO_P(N) ((N) >= 32 && (N) <= 63)\n \n-/* True if register is the XER register.  */\n-#define XER_REGNO_P(N) ((N) == XER_REGNO)\n+/* True if register is the CA register.  */\n+#define CA_REGNO_P(N) ((N) == CA_REGNO)\n \n /* True if register is an AltiVec register.  */\n #define ALTIVEC_REGNO_P(N) ((N) >= FIRST_ALTIVEC_REGNO && (N) <= LAST_ALTIVEC_REGNO)\n@@ -1229,7 +1229,7 @@ enum reg_class\n   CR0_REGS,\n   CR_REGS,\n   NON_FLOAT_REGS,\n-  XER_REGS,\n+  CA_REGS,\n   ALL_REGS,\n   LIM_REG_CLASSES\n };\n@@ -1260,7 +1260,7 @@ enum reg_class\n   \"CR0_REGS\",\t\t\t\t\t\t\t\t\\\n   \"CR_REGS\",\t\t\t\t\t\t\t\t\\\n   \"NON_FLOAT_REGS\",\t\t\t\t\t\t\t\\\n-  \"XER_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"CA_REGS\",\t\t\t\t\t\t\t\t\\\n   \"ALL_REGS\"\t\t\t\t\t\t\t\t\\\n }\n \n@@ -1290,7 +1290,7 @@ enum reg_class\n   { 0x00000000, 0x00000000, 0x00000010, 0x00000000 }, /* CR0_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000ff0, 0x00000000 }, /* CR_REGS */\t     \\\n   { 0xffffffff, 0x00000000, 0x0000efff, 0x00020000 }, /* NON_FLOAT_REGS */   \\\n-  { 0x00000000, 0x00000000, 0x00001000, 0x00000000 }, /* XER_REGS */\t     \\\n+  { 0x00000000, 0x00000000, 0x00001000, 0x00000000 }, /* CA_REGS */\t     \\\n   { 0xffffffff, 0xffffffff, 0xffffffff, 0x0003ffff }  /* ALL_REGS */\t     \\\n }\n \n@@ -1311,15 +1311,15 @@ enum reg_class\n   GENERAL_REGS, SPECIAL_REGS, FLOAT_REGS, ALTIVEC_REGS, /* VSX_REGS, */\t     \\\n   /* VRSAVE_REGS,*/ VSCR_REGS, SPE_ACC_REGS, SPEFSCR_REGS,\t\t     \\\n   /* MQ_REGS, LINK_REGS, CTR_REGS, */\t\t\t\t\t     \\\n-  CR_REGS, XER_REGS, LIM_REG_CLASSES\t\t\t\t\t     \\\n+  CR_REGS, CA_REGS, LIM_REG_CLASSES\t\t\t\t\t     \\\n }\n \n #define IRA_COVER_CLASSES_VSX\t\t\t\t\t\t     \\\n {\t\t\t\t\t\t\t\t\t     \\\n   GENERAL_REGS, SPECIAL_REGS, /* FLOAT_REGS, ALTIVEC_REGS, */ VSX_REGS,\t     \\\n   /* VRSAVE_REGS,*/ VSCR_REGS, SPE_ACC_REGS, SPEFSCR_REGS,\t\t     \\\n   /* MQ_REGS, LINK_REGS, CTR_REGS, */\t\t\t\t\t     \\\n-  CR_REGS, XER_REGS, LIM_REG_CLASSES\t\t\t\t\t     \\\n+  CR_REGS, CA_REGS, LIM_REG_CLASSES\t\t\t\t\t     \\\n }\n \n /* The same information, inverted:\n@@ -2259,7 +2259,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   &rs6000_reg_names[74][0],\t/* cr6  */\t\t\t\t\\\n   &rs6000_reg_names[75][0],\t/* cr7  */\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  &rs6000_reg_names[76][0],\t/* xer  */\t\t\t\t\\\n+  &rs6000_reg_names[76][0],\t/* ca  */\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   &rs6000_reg_names[77][0],\t/* v0  */\t\t\t\t\\\n   &rs6000_reg_names[78][0],\t/* v1  */\t\t\t\t\\\n@@ -2333,6 +2333,8 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   {\"cr0\",  68}, {\"cr1\",  69}, {\"cr2\",  70}, {\"cr3\",  71},\t\\\n   {\"cr4\",  72}, {\"cr5\",  73}, {\"cr6\",  74}, {\"cr7\",  75},\t\\\n   {\"cc\",   68}, {\"sp\",    1}, {\"toc\",   2},\t\t\t\\\n+  /* CA is only part of XER, but we do not model the other parts (yet).  */ \\\n+  {\"xer\",  76},\t\t\t\t\t\t\t\\\n   /* VSX registers overlaid on top of FR, Altivec registers */\t\\\n   {\"vs0\",  32}, {\"vs1\",  33}, {\"vs2\",  34}, {\"vs3\",  35},\t\\\n   {\"vs4\",  36}, {\"vs5\",  37}, {\"vs6\",  38}, {\"vs7\",  39},\t\\"}, {"sha": "bcb66ec1479c74f175c9b0f13c3acc0e390941d8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f6b5d6954d9588099282ecce01d6bf74dc2284b6", "patch": "@@ -39,7 +39,7 @@\n    (CR6_REGNO\t\t\t74)\n    (CR7_REGNO\t\t\t75)\n    (MAX_CR_REGNO\t\t75)\n-   (XER_REGNO\t\t\t76)\n+   (CA_REGNO\t\t\t76)\n    (FIRST_ALTIVEC_REGNO\t\t77)\n    (LAST_ALTIVEC_REGNO\t\t108)\n    (VRSAVE_REGNO\t\t109)\n@@ -201,7 +201,7 @@\n (define_mode_iterator SDI [SI DI])\n \n ; The size of a pointer.  Also, the size of the value that a record-condition\n-; (one with a '.') will compare.\n+; (one with a '.') will compare; and the size used for arithmetic carries.\n (define_mode_iterator P [(SI \"TARGET_32BIT\") (DI \"TARGET_64BIT\")])\n \n ; Any hardware-supported floating-point mode"}, {"sha": "fb3a4c1bc73fb51488b3eaa42e952fa6c549ad7a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5d6954d9588099282ecce01d6bf74dc2284b6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=f6b5d6954d9588099282ecce01d6bf74dc2284b6", "patch": "@@ -1949,7 +1949,7 @@ Any VSX register\n @samp{CR} register (condition register)\n \n @item z\n-@samp{FPMEM} stack memory for FPR-GPR transfers\n+@samp{XER[CA]} carry bit (part of the XER register)\n \n @item I\n Signed 16-bit constant"}]}