{"sha": "b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhmZjNmOGVmZWRhMDJhNmJlZGViZmFmMjBiOTM2NDVhZTNiYjViOA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-15T16:13:36Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-25T19:24:52Z"}, "message": "coroutines : Call promise CTOR with parm copies [PR97587].\n\nAs the PR notes, we were calling the promise CTOR with the original\nfunction parameters, not the copy (as pointed, a previous wording of\nthe section was unambiguous).  Fixed thus.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97587\n\t* coroutines.cc (struct param_info): Track rvalue refs.\n\t(morph_fn_to_coro): Track rvalue refs, and call the promise\n\tCTOR with the frame copy of passed parms.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97587\n\t* g++.dg/coroutines/coro1-refs-and-ctors.h: Add a CTOR with two\n\treference parms, to distinguish the rvalue ref. variant.\n\t* g++.dg/coroutines/pr97587.C: New test.", "tree": {"sha": "87d97f7bc9458a6334c8431af597e447d591de48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87d97f7bc9458a6334c8431af597e447d591de48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7005a50d0121954031a223ea5a6c57aaa7e3efd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7005a50d0121954031a223ea5a6c57aaa7e3efd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7005a50d0121954031a223ea5a6c57aaa7e3efd3"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "0b63914ef9bfaa5d67426faca784e7d7266f4f54", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8", "patch": "@@ -1817,6 +1817,7 @@ struct param_info\n   tree orig_type;    /* The original type of the parm (not as passed).  */\n   bool by_ref;       /* Was passed by reference.  */\n   bool pt_ref;       /* Was a pointer to object.  */\n+  bool rv_ref;       /* Was an rvalue ref.  */\n   bool trivial_dtor; /* The frame type has a trivial DTOR.  */\n   bool this_ptr;     /* Is 'this' */\n   bool lambda_cobj;  /* Lambda capture object */\n@@ -4121,16 +4122,18 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t  if (actual_type == NULL_TREE)\n \t    actual_type = error_mark_node;\n \t  parm.orig_type = actual_type;\n-\t  parm.by_ref = parm.pt_ref = false;\n+\t  parm.by_ref = parm.pt_ref = parm.rv_ref =  false;\n \t  if (TREE_CODE (actual_type) == REFERENCE_TYPE)\n \t    {\n \t      /* If the user passes by reference, then we will save the\n \t\t pointer to the original.  As noted in\n \t\t [dcl.fct.def.coroutine] / 13, if the lifetime of the\n \t\t referenced item ends and then the coroutine is resumed,\n \t\t we have UB; well, the user asked for it.  */\n-\t      actual_type = build_pointer_type (TREE_TYPE (actual_type));\n-\t      parm.pt_ref = true;\n+\t      if (TYPE_REF_IS_RVALUE (actual_type))\n+\t\tparm.rv_ref = true;\n+\t      else\n+\t\tparm.pt_ref = true;\n \t    }\n \t  else if (TYPE_REF_P (DECL_ARG_TYPE (arg)))\n \t    parm.by_ref = true;\n@@ -4498,16 +4501,22 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t      tree this_ref = build1 (INDIRECT_REF, ct, arg);\n \t      tree rt = cp_build_reference_type (ct, false);\n \t      this_ref = convert_to_reference (rt, this_ref, CONV_STATIC,\n-\t\t\t\t\t       LOOKUP_NORMAL , NULL_TREE,\n+\t\t\t\t\t       LOOKUP_NORMAL, NULL_TREE,\n \t\t\t\t\t       tf_warning_or_error);\n \t      vec_safe_push (promise_args, this_ref);\n \t    }\n-\t  else if (parm.by_ref)\n-\t    vec_safe_push (promise_args, fld_idx);\n+\t  else if (parm.rv_ref)\n+\t    vec_safe_push (promise_args, rvalue(fld_idx));\n \t  else\n-\t    vec_safe_push (promise_args, arg);\n+\t    vec_safe_push (promise_args, fld_idx);\n \n-\t  if (TYPE_NEEDS_CONSTRUCTING (parm.frame_type))\n+\t  if (parm.rv_ref || parm.pt_ref)\n+\t    /* Initialise the frame reference field directly.  */\n+\t    r = build_modify_expr (fn_start, TREE_OPERAND (fld_idx, 0),\n+\t\t\t\t   parm.frame_type, INIT_EXPR,\n+\t\t\t\t   DECL_SOURCE_LOCATION (arg), arg,\n+\t\t\t\t   DECL_ARG_TYPE (arg));\n+\t  else if (TYPE_NEEDS_CONSTRUCTING (parm.frame_type))\n \t    {\n \t      vec<tree, va_gc> *p_in;\n \t      if (CLASS_TYPE_P (parm.frame_type)"}, {"sha": "dd45a0e1f8113d39239316f7d0b3894038274a10", "filename": "gcc/testsuite/g++.dg/coroutines/coro1-refs-and-ctors.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-refs-and-ctors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-refs-and-ctors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-refs-and-ctors.h?ref=b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8", "patch": "@@ -3,10 +3,13 @@ struct coro1 {\n   struct promise_type {\n \n   promise_type () : vv(-1) {  PRINT (\"Promise def. CTOR\"); }\n-  promise_type (int __x) : vv(__x) {  PRINTF (\"Created Promise with %d\\n\",__x); }\n+  promise_type (int __x) : vv(__x) {  PRINTF (\"promise_type1 with %d\\n\",__x); }\n   promise_type (int __x, int& __y, int&& __z)\n     : vv(__x), v2(__y), v3(__z)\n-    {  PRINTF (\"Created Promise with %d, %d, %d\\n\", __x, __y, __z); }\n+    {  PRINTF (\"promise_type2 with %d, %d, %d\\n\", __x, __y, __z); }\n+  promise_type (int __x, int& __y, int& __z)\n+    : vv(__x), v2(__y), v3(__z)\n+    {  PRINTF (\"promise_type3 with %d, %d, %d\\n\", __x, __y, __z); }\n \n   ~promise_type() { PRINT (\"Destroyed Promise\"); }\n "}, {"sha": "081c3a94b3c038ebf05a22e021a4be5029fc119a", "filename": "gcc/testsuite/g++.dg/coroutines/pr97587.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr97587.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr97587.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr97587.C?ref=b8ff3f8efeda02a6bedebfaf20b93645ae3bb5b8", "patch": "@@ -0,0 +1,32 @@\n+//  { dg-do run }\n+\n+#include<cassert>\n+#include<coroutine>\n+\n+int *parameter_addr_in_promise_ctor;\n+\n+struct return_object{\n+    struct promise_type{\n+\n+        promise_type(int &parameter)\n+        {\n+            parameter_addr_in_promise_ctor = &parameter;\n+        }\n+\n+        return_object get_return_object(){ return {}; }\n+\n+        void return_void(){}\n+\n+        auto initial_suspend(){ return std::suspend_never{}; }\n+        auto final_suspend() noexcept { return std::suspend_never{}; }\n+        void unhandled_exception(){}\n+    };\n+};\n+return_object coroutine(int parameter = 42){\n+    assert(&parameter == parameter_addr_in_promise_ctor);\n+    co_return;\n+}\n+\n+int main(int,char**){\n+    coroutine();\n+}"}]}