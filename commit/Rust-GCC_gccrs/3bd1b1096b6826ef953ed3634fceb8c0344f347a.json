{"sha": "3bd1b1096b6826ef953ed3634fceb8c0344f347a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkMWIxMDk2YjY4MjZlZjk1M2VkMzYzNGZjZWI4YzAzNDRmMzQ3YQ==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2009-08-10T04:05:54Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-10T04:05:54Z"}, "message": "alpha.c (TARGET_ASM_UNALIGNED_*_OP): Define if on VMS.\n\n\n\t* config/alpha/alpha.c (TARGET_ASM_UNALIGNED_*_OP): Define if on VMS.\n\t* config/alpha/vms.h (OBJECT_FORMAT_ELF): Define.\n\t(ASM_WEAKEN_LABEL): Define.\n\t(CRT_CALL_STATIC_FUNCTION): Define.\n\t(STARTFILE_SPEC): Add crtbegin.o crtbeginS.o.\n\t(ENDFILE_SPEC): Define.\n\t(INIT_SECTION_ASM_OP): Define.\n\t* config/alpha/vms-dwarf2eh.asm (__EH_FRAME_BEGIN__): Remove.\n\t* config/alpha/t-vms (EXTRA_PARTS): Add crtbegin.o crtbeginS.o\n\tcrtend.o crtendS.o.\n\t(MULTILIB_OSDIRNAMES): Define.\n\t(shlib_version): Define.\n\t(SHLIB_EXT): Define.\n\t(SHLIB_OBJS): Define.\n\t(SHLIB_NAME): Define.\n\t(SHLIB_MULTILIB): Define.\n\t(SHLIB_INSTALL): Define.\n\t(SHLIB_SYMVEC): Define.\n\t(SHLIB_SYMVECX2): Define.\n\t(SHLIB_LINK): Define.\n\nFrom-SVN: r150610", "tree": {"sha": "74112d76523e4da5aa378f79b2ba20af5f43652d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74112d76523e4da5aa378f79b2ba20af5f43652d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd1b1096b6826ef953ed3634fceb8c0344f347a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd1b1096b6826ef953ed3634fceb8c0344f347a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd1b1096b6826ef953ed3634fceb8c0344f347a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd1b1096b6826ef953ed3634fceb8c0344f347a/comments", "author": null, "committer": null, "parents": [{"sha": "fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "19382f45e0875867b98871dfc4e8edf70d784346", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bd1b1096b6826ef953ed3634fceb8c0344f347a", "patch": "@@ -1,3 +1,26 @@\n+2009-08-09  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c (TARGET_ASM_UNALIGNED_*_OP): Define if on VMS.\n+\t* config/alpha/vms.h (OBJECT_FORMAT_ELF): Define.\n+\t(ASM_WEAKEN_LABEL): Define.\n+\t(CRT_CALL_STATIC_FUNCTION): Define.\n+\t(STARTFILE_SPEC): Add crtbegin.o crtbeginS.o.\n+\t(ENDFILE_SPEC): Define.\n+\t(INIT_SECTION_ASM_OP): Define.\n+\t* config/alpha/vms-dwarf2eh.asm (__EH_FRAME_BEGIN__): Remove.\n+\t* config/alpha/t-vms (EXTRA_PARTS): Add crtbegin.o crtbeginS.o\n+\tcrtend.o crtendS.o.\n+\t(MULTILIB_OSDIRNAMES): Define.\n+\t(shlib_version): Define.\n+\t(SHLIB_EXT): Define.\n+\t(SHLIB_OBJS): Define.\n+\t(SHLIB_NAME): Define.\n+\t(SHLIB_MULTILIB): Define.\n+\t(SHLIB_INSTALL): Define.\n+\t(SHLIB_SYMVEC): Define.\n+\t(SHLIB_SYMVECX2): Define.\n+\t(SHLIB_LINK): Define.\n+\n 2009-08-09  Douglas B Rupp  <rupp@gnat.com>\n \n \t* config/alpha/alpha.c (alpha_initialize_trampoline):"}, {"sha": "829160723f177fe19c46f29ebb21f1cf34e66485", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3bd1b1096b6826ef953ed3634fceb8c0344f347a", "patch": "@@ -10792,7 +10792,7 @@ alpha_init_libfuncs (void)\n \n /* Default unaligned ops are provided for ELF systems.  To get unaligned\n    data for non-ELF systems, we have to turn off auto alignment.  */\n-#ifndef OBJECT_FORMAT_ELF\n+#if !defined (OBJECT_FORMAT_ELF) || TARGET_ABI_OPEN_VMS\n #undef TARGET_ASM_UNALIGNED_HI_OP\n #define TARGET_ASM_UNALIGNED_HI_OP \"\\t.align 0\\n\\t.word\\t\"\n #undef TARGET_ASM_UNALIGNED_SI_OP"}, {"sha": "e11051278f0187cffe75658a1af6d3672f5e34a0", "filename": "gcc/config/alpha/t-vms", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms?ref=3bd1b1096b6826ef953ed3634fceb8c0344f347a", "patch": "@@ -17,10 +17,8 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# VMS_EXTRA_PARTS is defined in x-vms and represent object files that\n-# are only needed for VMS targets, but can only be compiled on a VMS host\n-# (because they need DEC C).\n-EXTRA_PARTS = vms-dwarf2.o vms-dwarf2eh.o $(VMS_EXTRA_PARTS)\n+EXTRA_PARTS = vms-dwarf2.o vms-dwarf2eh.o $(VMS_EXTRA_PARTS) \\\n+  crtbegin.o crtbeginS.o crtend.o crtendS.o\n \n # This object must be linked with in order to make the executable debuggable.\n # vms-ld handles it automatically when passed -g.\n@@ -32,5 +30,34 @@ $(T)vms-dwarf2eh.o : $(srcdir)/config/alpha/vms-dwarf2eh.asm\n \n MULTILIB_OPTIONS = mcpu=ev6\n MULTILIB_DIRNAMES = ev6\n+MULTILIB_OSDIRNAMES = ev6\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n+\n+shlib_version:=$(shell echo $(BASEVER_c) | sed -e 's/\\./,/' -e 's/\\.//g')\n+SHLIB_EXT = .exe\n+SHLIB_OBJS = @shlib_objs@\n+SHLIB_NAME = @shlib_base_name@.exe\n+SHLIB_MULTILIB =\n+SHLIB_INSTALL = $(INSTALL_DATA) $(SHLIB_NAME) $$(DESTDIR)$$(libsubdir)/$(SHLIB_NAME)\n+SHLIB_SYMVEC = \\\n+  grep -F -e \"\\$$BSS\\$$\" -e \"\\$$DATA\\$$\" -e \" sdata \" -e \" data.rel \" -e \" data.rel.ro \" -e \" sbss \" \\\n+        -e \"\\$$LINK\\$$\" -e \"\\$$READONLY\\$$\" | \\\n+  sed -e \"s/.*\\$$LINK\\$$   \\(.*\\)/SYMBOL_VECTOR=(\\1=PROCEDURE)/\" \\\n+      -e \"s/.*\\$$DATA\\$$   \\(.*\\)/SYMBOL_VECTOR=(\\1=DATA)/\" \\\n+      -e \"s/.* sbss     \\(.*\\)/SYMBOL_VECTOR=(\\1=DATA)/\" \\\n+      -e \"s/.* sdata    \\(.*\\)/SYMBOL_VECTOR=(\\1=DATA)/\" \\\n+      -e \"s/.* data.rel \\(.*\\)/SYMBOL_VECTOR=(\\1=DATA)/\" \\\n+      -e \"s/.* data.rel.ro \\(.*\\)/SYMBOL_VECTOR=(\\1=DATA)/\" \\\n+      -e \"s/.*\\$$BSS\\$$    \\(.*\\)/SYMBOL_VECTOR=(\\1=DATA)/\" \\\n+      -e \"s/.*\\$$READONLY\\$$ \\(.*\\)/SYMBOL_VECTOR=(\\1=DATA)/\"\n+SHLIB_SYMVECX2 := $(subst $$,$$$$,$(SHLIB_SYMVEC))\n+SHLIB_LINK = \\\n+  echo \"case_sensitive=yes\" > SYMVEC_$$$$$$$$.opt; \\\n+  objdump --syms $(SHLIB_OBJS) | \\\n+  $(SHLIB_SYMVECX2) >> SYMVEC_$$$$$$$$.opt ; \\\n+  echo \"case_sensitive=NO\" >> SYMVEC_$$$$$$$$.opt; \\\n+  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -nodefaultlibs \\\n+  -shared --for-linker=/noinform -o $(SHLIB_NAME) $(SHLIB_OBJS) \\\n+  --for-linker=SYMVEC_$$$$$$$$.opt \\\n+  --for-linker=gsmatch=equal,$(shlib_version)"}, {"sha": "e0eaf9d37417a2e4fcf7ef13a717fa79b8474e0f", "filename": "gcc/config/alpha/vms-dwarf2eh.asm", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Fvms-dwarf2eh.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Fvms-dwarf2eh.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-dwarf2eh.asm?ref=3bd1b1096b6826ef953ed3634fceb8c0344f347a", "patch": "@@ -28,5 +28,3 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n .section\t.eh_frame,NOWRT\n \t\t.align 0\n-\t\t.global __EH_FRAME_BEGIN__\n-__EH_FRAME_BEGIN__:"}, {"sha": "ff5e5d238af4e7ff2b9ef2a3d4346a60c819cd76", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd1b1096b6826ef953ed3634fceb8c0344f347a/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=3bd1b1096b6826ef953ed3634fceb8c0344f347a", "patch": "@@ -22,6 +22,10 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_OBJECT_SUFFIX \".obj\"\n #define TARGET_EXECUTABLE_SUFFIX \".exe\"\n \n+/* Alpha/VMS object format is not really Elf, but this makes compiling\n+   crtstuff.c and dealing with shared library initialization much easier.  */\n+#define OBJECT_FORMAT_ELF\n+\n /* This enables certain macros in alpha.h, which will make an indirect\n    reference to an external symbol an invalid address.  This needs to be\n    defined before we include alpha.h, since it determines which macros\n@@ -202,9 +206,17 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n #undef STACK_CHECK_BUILTIN\n #define STACK_CHECK_BUILTIN 0\n \n+#undef  ASM_WEAKEN_LABEL\n+#define ASM_WEAKEN_LABEL(FILE, NAME)                            \\\n+   do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME);  \\\n+        fputc ('\\n', FILE); } while (0)\n+\n #define READONLY_DATA_SECTION_ASM_OP \"\\t.rdata\"\n #define CTORS_SECTION_ASM_OP \"\\t.ctors\"\n #define DTORS_SECTION_ASM_OP \"\\t.dtors\"\n+#define SDATA_SECTION_ASM_OP \"\\t.sdata\"\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)              \\\n+   asm (SECTION_OP \"\\n\\t.long \" #FUNC\"\\n\");\n \n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) gcc_unreachable ()\n@@ -335,13 +347,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{g2:-g2 vms-dwarf2.o%s} %{g3:-g3 vms-dwarf2.o%s} %{shared} %{v} %{map}\"\n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{!shared:%{mvms-return-codes:vcrt0.o%s} \\\n-%{!mvms-return-codes:pcrt0.o%s}}\"\n+#define STARTFILE_SPEC \\\n+\"%{!shared:%{mvms-return-codes:vcrt0.o%s} %{!mvms-return-codes:pcrt0.o%s} \\\n+    crtbegin.o%s} \\\n+ %{!static:%{shared:crtbeginS.o%s}}\"\n+\n+#define ENDFILE_SPEC \\\n+\"%{!shared:crtend.o%s} %{!static:%{shared:crtendS.o%s}}\"\n \n #undef LIB_SPEC\n #define LIB_SPEC \"-lc\"\n \n #define NAME__MAIN \"__gccmain\"\n #define SYMBOL__MAIN __gccmain\n \n+#define INIT_SECTION_ASM_OP \"\\t.section LIB$INITIALIZE,GBL,NOWRT\"\n+\n #define LONGLONG_STANDALONE 1"}]}