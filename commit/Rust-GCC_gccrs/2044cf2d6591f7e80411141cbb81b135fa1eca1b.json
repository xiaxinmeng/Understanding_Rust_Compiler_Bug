{"sha": "2044cf2d6591f7e80411141cbb81b135fa1eca1b", "node_id": "C_kwDOANBUbNoAKDIwNDRjZjJkNjU5MWY3ZTgwNDExMTQxY2JiODFiMTM1ZmExZWNhMWI", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T20:09:07Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T20:09:07Z"}, "message": "middle-end: Fix addsub patch removing return statements\n\nMy recent patch had return statements in the match.pd expressions\nwhich were recently outlawed.. Unfornately I didn't rebase this\npatch before committing so this broke the build.\n\nI've just reflowed the conditions to avoid the returns.\n\ngcc/ChangeLog:\n\n\t* match.pd: Remove returns.", "tree": {"sha": "2a61eb22d4bd324d488e2063803050699f398a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a61eb22d4bd324d488e2063803050699f398a41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2044cf2d6591f7e80411141cbb81b135fa1eca1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2044cf2d6591f7e80411141cbb81b135fa1eca1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2044cf2d6591f7e80411141cbb81b135fa1eca1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2044cf2d6591f7e80411141cbb81b135fa1eca1b/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab3d2d17dd8fedc856cf175a3f2174770ecb64d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab3d2d17dd8fedc856cf175a3f2174770ecb64d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab3d2d17dd8fedc856cf175a3f2174770ecb64d"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "0476753ee1803e65485d45deae4092aa19e38c09", "filename": "gcc/match.pd", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044cf2d6591f7e80411141cbb81b135fa1eca1b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044cf2d6591f7e80411141cbb81b135fa1eca1b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2044cf2d6591f7e80411141cbb81b135fa1eca1b", "patch": "@@ -7931,51 +7931,51 @@ and,\n    {\n      /* Build a vector of integers from the tree mask.  */\n      vec_perm_builder builder;\n-     if (!tree_to_vec_perm_builder (&builder, @2))\n-       return NULL_TREE;\n-\n-     /* Create a vec_perm_indices for the integer vector.  */\n-     poly_uint64 nelts = TYPE_VECTOR_SUBPARTS (type);\n-     vec_perm_indices sel (builder, 2, nelts);\n    }\n-   (if (sel.series_p (0, 2, 0, 2))\n+   (if (tree_to_vec_perm_builder (&builder, @2))\n     (with\n      {\n+       /* Create a vec_perm_indices for the integer vector.  */\n+       poly_uint64 nelts = TYPE_VECTOR_SUBPARTS (type);\n+       vec_perm_indices sel (builder, 2, nelts);\n        machine_mode vec_mode = TYPE_MODE (type);\n        machine_mode wide_mode;\n-       if (!GET_MODE_WIDER_MODE (vec_mode).exists (&wide_mode)\n-\t   || !VECTOR_MODE_P (wide_mode)\n-\t   || (GET_MODE_UNIT_BITSIZE (vec_mode) * 2\n-\t\t!= GET_MODE_UNIT_BITSIZE (wide_mode)))\n-\t return NULL_TREE;\n-\n-       tree stype = lang_hooks.types.type_for_mode (GET_MODE_INNER (wide_mode),\n-\t\t\t\t\t\t    TYPE_UNSIGNED (type));\n-       if (TYPE_MODE (stype) == BLKmode)\n-\t return NULL_TREE;\n-       tree ntype = build_vector_type_for_mode (stype, wide_mode);\n-       if (!VECTOR_TYPE_P (ntype))\n-\t return NULL_TREE;\n-\n-       /* The format has to be a non-extended ieee format.  */\n-       const struct real_format *fmt_old = FLOAT_MODE_FORMAT (vec_mode);\n-       const struct real_format *fmt_new = FLOAT_MODE_FORMAT (wide_mode);\n-       if (fmt_old == NULL || fmt_new == NULL)\n-\t return NULL_TREE;\n-\n-       /* If the target doesn't support v1xx vectors, try using scalar mode xx\n-\t  instead.  */\n-       if (known_eq (GET_MODE_NUNITS (wide_mode), 1)\n-\t   && !target_supports_op_p (ntype, NEGATE_EXPR, optab_vector))\n-\t ntype = stype;\n      }\n-     (if (fmt_new->signbit_rw\n-\t     == fmt_old->signbit_rw + GET_MODE_UNIT_BITSIZE (vec_mode)\n-\t  && fmt_new->signbit_rw == fmt_new->signbit_ro\n-\t  && targetm.can_change_mode_class (TYPE_MODE (ntype), TYPE_MODE (type), ALL_REGS)\n-\t  && ((optimize_vectors_before_lowering_p () && VECTOR_TYPE_P (ntype))\n-\t      || target_supports_op_p (ntype, NEGATE_EXPR, optab_vector)))\n-      (plus (view_convert:type (negate (view_convert:ntype @1))) @0)))))))\n+     (if (sel.series_p (0, 2, 0, 2)\n+          && GET_MODE_WIDER_MODE (vec_mode).exists (&wide_mode)\n+\t  && VECTOR_MODE_P (wide_mode)\n+\t  && (GET_MODE_UNIT_BITSIZE (vec_mode) * 2\n+\t      == GET_MODE_UNIT_BITSIZE (wide_mode)))\n+\t(with\n+\t {\n+\t   tree stype\n+\t     = lang_hooks.types.type_for_mode (GET_MODE_INNER (wide_mode),\n+\t\t\t\t\t       TYPE_UNSIGNED (type));\n+\t   tree ntype = build_vector_type_for_mode (stype, wide_mode);\n+\n+\t   /* The format has to be a non-extended ieee format.  */\n+\t   const struct real_format *fmt_old = FLOAT_MODE_FORMAT (vec_mode);\n+\t   const struct real_format *fmt_new = FLOAT_MODE_FORMAT (wide_mode);\n+\t }\n+\t (if (TYPE_MODE (stype) != BLKmode\n+\t      && VECTOR_TYPE_P (ntype)\n+\t      && fmt_old != NULL\n+\t      && fmt_new != NULL)\n+\t  (with\n+\t   {\n+\t     /* If the target doesn't support v1xx vectors, try using\n+\t\tscalar mode xx instead.  */\n+\t    if (known_eq (GET_MODE_NUNITS (wide_mode), 1)\n+\t\t&& !target_supports_op_p (ntype, NEGATE_EXPR, optab_vector))\n+\t      ntype = stype;\n+\t   }\n+\t   (if (fmt_new->signbit_rw\n+\t        == fmt_old->signbit_rw + GET_MODE_UNIT_BITSIZE (vec_mode)\n+\t\t&& fmt_new->signbit_rw == fmt_new->signbit_ro\n+\t\t&& targetm.can_change_mode_class (TYPE_MODE (ntype), TYPE_MODE (type), ALL_REGS)\n+\t\t&& ((optimize_vectors_before_lowering_p () && VECTOR_TYPE_P (ntype))\n+\t\t    || target_supports_op_p (ntype, NEGATE_EXPR, optab_vector)))\n+\t    (plus (view_convert:type (negate (view_convert:ntype @1))) @0)))))))))))\n \n (simplify\n  (vec_perm @0 @1 VECTOR_CST@2)"}]}