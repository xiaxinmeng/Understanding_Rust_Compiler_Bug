{"sha": "630efc56d1059bac464b38807dab58cd322f7a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwZWZjNTZkMTA1OWJhYzQ2NGIzODgwN2RhYjU4Y2QzMjJmN2E3Zg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-06T07:04:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-06T07:04:19Z"}, "message": "Merge #552\n\n552: UTF-8 BOM handling r=dkm a=dkm\n\nMark Wielaard (https://gcc.gnu.org/pipermail/gcc-rust/2021-July/000072.html ) :\r\n\r\n> A rust source file can start with a UTF-8 BOM sequence (EF BB\r\n> BF). This simply indicates that the file is encoded as UTF-8 (all rust\r\n> input is interpreted as asequence of Unicode code points encoded in\r\n> UTF-8) so can be skipped before starting real lexing.\r\n> \r\n> It isn't necessary to keep track of the BOM in the AST or HIR Crate\r\n> classes. So I removed the has_utf8bom flag.\r\n> \r\n> Also included are a couple of simple tests to show we handle the BOM\r\n> correctly now.\r\n\r\n\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "6e3a1c42920a2dd59c1509c92dba376e51a1ffa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e3a1c42920a2dd59c1509c92dba376e51a1ffa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630efc56d1059bac464b38807dab58cd322f7a7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5ABzCRBK7hj4Ov3rIwAA9y4IAD9n7HUpCQBIrh20mYx7r251\nfJDw4ZHJKTTedlQUqnlZmZgPLU/xh6K8Z4wWUry8UsYTnOPOWuq0UEnPCcZyQN0k\nTMxFJxb4R5St7H318JCkgP9kOOwXbbvJ1cTKNiCZywlaaVJLbbXsj+KejJGnDHmd\nbTg9UjHe4PESY8mOG+ften3BeZ+73A5euA0Q+Vpuy/VkqmvoEWPzsfeTnTT7EoV5\nvviDn6kiaOk8ut7dO4H4sqUZw5bZ/VaqOu1/ZGGFGBSVR5ORYmmHikRZWoDjw/QL\nCTl9p+7+VzpMoYl/UHYrDMWycoHXm5o1thCQvBsw1bXUwHg4eeQL+R9sWGT12dI=\n=g4Oj\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e3a1c42920a2dd59c1509c92dba376e51a1ffa4\nparent 27b3d34428801397e562b7fcc5ca10b13961f3e1\nparent 94ada647bf35c727c17ade60d06af6803a7e5668\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625555059 +0000\ncommitter GitHub <noreply@github.com> 1625555059 +0000\n\nMerge #552\n\n552: UTF-8 BOM handling r=dkm a=dkm\n\nMark Wielaard (https://gcc.gnu.org/pipermail/gcc-rust/2021-July/000072.html ) :\r\n\r\n> A rust source file can start with a UTF-8 BOM sequence (EF BB\r\n> BF). This simply indicates that the file is encoded as UTF-8 (all rust\r\n> input is interpreted as asequence of Unicode code points encoded in\r\n> UTF-8) so can be skipped before starting real lexing.\r\n> \r\n> It isn't necessary to keep track of the BOM in the AST or HIR Crate\r\n> classes. So I removed the has_utf8bom flag.\r\n> \r\n> Also included are a couple of simple tests to show we handle the BOM\r\n> correctly now.\r\n\r\n\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630efc56d1059bac464b38807dab58cd322f7a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630efc56d1059bac464b38807dab58cd322f7a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630efc56d1059bac464b38807dab58cd322f7a7f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b3d34428801397e562b7fcc5ca10b13961f3e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b3d34428801397e562b7fcc5ca10b13961f3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b3d34428801397e562b7fcc5ca10b13961f3e1"}, {"sha": "94ada647bf35c727c17ade60d06af6803a7e5668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ada647bf35c727c17ade60d06af6803a7e5668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ada647bf35c727c17ade60d06af6803a7e5668"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "dd55e1ddbd2ad5b60e9a71b4bdb31af14db7631d", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -172,9 +172,6 @@ Crate::as_string () const\n   rust_debug (\"beginning crate recursive as-string\");\n \n   std::string str (\"Crate: \");\n-  // add utf8bom\n-  if (has_utf8bom)\n-    str += \"\\n has utf8bom\";\n \n   // inner attributes\n   str += append_attributes (inner_attrs, INNER);"}, {"sha": "75b08f8aa66c56b7268085245bcff082f7d96023", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -1550,8 +1550,6 @@ class MacroInvocationSemi : public MacroItem,\n // A crate AST object - holds all the data for a single compilation unit\n struct Crate\n {\n-  bool has_utf8bom;\n-\n   std::vector<Attribute> inner_attrs;\n   // dodgy spacing required here\n   /* TODO: is it better to have a vector of items here or a module (implicit\n@@ -1563,16 +1561,14 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items,\n-\t std::vector<Attribute> inner_attrs, bool has_utf8bom = false)\n-    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n-      items (std::move (items)),\n+\t std::vector<Attribute> inner_attrs)\n+    : inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n-      node_id (other.node_id)\n+    : inner_attrs (other.inner_attrs), node_id (other.node_id)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -1585,7 +1581,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_utf8bom = other.has_utf8bom;\n     node_id = other.node_id;\n \n     items.reserve (other.items.size ());"}, {"sha": "01abd84627ba4e8e17428636e5051319556e4894", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -40,7 +40,6 @@ HIR::Crate\n ASTLowering::go ()\n {\n   std::vector<std::unique_ptr<HIR::Item> > items;\n-  bool has_utf8bom = false;\n \n   for (auto it = astCrate.items.begin (); it != astCrate.items.end (); it++)\n     {\n@@ -55,8 +54,7 @@ ASTLowering::go ()\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n-  return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping,\n-\t\t     has_utf8bom);\n+  return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping);\n }\n \n // rust-ast-lower-block.h"}, {"sha": "05c75e0640390b898d8315da64d8f44825a29c90", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -73,11 +73,6 @@ std::string\n Crate::as_string () const\n {\n   std::string str (\"HIR::Crate: \");\n-  // add utf8bom\n-  if (has_utf8bom)\n-    {\n-      str += \"\\n has utf8bom\";\n-    }\n \n   // inner attributes\n   str += \"\\n inner attributes: \";"}, {"sha": "1819d17b585eb354d49ef3abc051e9aa5b6ee9ec", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -678,8 +678,6 @@ class ImplItem\n // A crate HIR object - holds all the data for a single compilation unit\n struct Crate\n {\n-  bool has_utf8bom;\n-\n   AST::AttrVec inner_attrs;\n   // dodgy spacing required here\n   /* TODO: is it better to have a vector of items here or a module (implicit\n@@ -691,15 +689,14 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items, AST::AttrVec inner_attrs,\n-\t Analysis::NodeMapping mappings, bool has_utf8bom = false)\n-    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n-      items (std::move (items)), mappings (mappings)\n+\t Analysis::NodeMapping mappings)\n+    : inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n+      mappings (mappings)\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n-      mappings (other.mappings)\n+    : inner_attrs (other.inner_attrs), mappings (other.mappings)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -712,7 +709,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_utf8bom = other.has_utf8bom;\n     mappings = other.mappings;\n \n     items.reserve (other.items.size ());"}, {"sha": "617dd69a0801e091f58e3141dcda3230ad79d351", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -237,6 +237,19 @@ Lexer::build_token ()\n       current_char = peek_input ();\n       skip_input ();\n \n+      // detect UTF8 bom\n+      //\n+      // Must be the first thing on the first line.\n+      // There might be an optional BOM (Byte Order Mark), which for UTF-8 is\n+      // the three bytes 0xEF, 0xBB and 0xBF. These can simply be skipped.\n+      if (current_line == 1 && current_column == 1 && current_char == 0xef\n+\t  && peek_input () == 0xbb && peek_input (1) == 0xbf)\n+\t{\n+\t  skip_input (1);\n+\t  current_char = peek_input ();\n+\t  skip_input ();\n+\t}\n+\n       // detect shebang\n       // Must be the first thing on the first line, starting with #!\n       // But since an attribute can also start with an #! we don't count it as a"}, {"sha": "a8597fa401ef8a3625f1feccbb51d8e152b626e0", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -393,12 +393,6 @@ template <typename ManagedTokenSource>\n AST::Crate\n Parser<ManagedTokenSource>::parse_crate ()\n {\n-  /* TODO: determine if has utf8bom. Currently, is eliminated\n-   * by the lexing phase. Not useful for the compiler anyway, so maybe a\n-   * better idea would be to eliminate\n-   * the has_utf8bom variable from the crate data structure. */\n-  bool has_utf8bom = false;\n-\n   // parse inner attributes\n   AST::AttrVec inner_attrs = parse_inner_attributes ();\n \n@@ -429,7 +423,7 @@ Parser<ManagedTokenSource>::parse_crate ()\n   for (const auto &error : error_table)\n     error.emit_error ();\n \n-  return AST::Crate (std::move (items), std::move (inner_attrs), has_utf8bom);\n+  return AST::Crate (std::move (items), std::move (inner_attrs));\n }\n \n // Parse a contiguous block of inner attributes."}, {"sha": "5edcab227ee20bfbedd3fd3c7f7a2bac7da9324b", "filename": "gcc/testsuite/rust/compile/torture/bom.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom.rs?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -0,0 +1 @@\n+\ufeffpub fn main () { }"}, {"sha": "020e1707b556438ebedf4e5ff5c9b05596d17b08", "filename": "gcc/testsuite/rust/compile/torture/bom_comment.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_comment.rs?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -0,0 +1,2 @@\n+\ufeff// UTF8 BOM\n+pub fn main () { }"}, {"sha": "4c552e8d71dc116e8f1c0d8154eca69b511f43fe", "filename": "gcc/testsuite/rust/compile/torture/bom_shebang.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_shebang.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_shebang.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_shebang.rs?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -0,0 +1,2 @@\n+\ufeff#!/usr/bin/cat\n+pub fn main () { }"}, {"sha": "b10d5654473e7024d3f5134c5cbe26a1b57bed4b", "filename": "gcc/testsuite/rust/compile/torture/bom_whitespace.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_whitespace.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630efc56d1059bac464b38807dab58cd322f7a7f/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_whitespace.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_whitespace.rs?ref=630efc56d1059bac464b38807dab58cd322f7a7f", "patch": "@@ -0,0 +1,2 @@\n+\ufeff\n+pub fn main () { }"}]}