{"sha": "e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwNmZiMzk5ZTU5ZjU5YmYwYzU2ZTNmMmEwNGMxOGI4NWI0ZWE0Zg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2005-05-15T15:37:18Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T15:37:18Z"}, "message": "pack_generic.c (pack): Remove unneeded calculation.\n\n\t* intrinsics/pack_generic.c (pack): Remove unneeded calculation.\n\n\t* m4/matmull.m4 (matmul_): Remove unneeded calculations, fix\n\tpointer cast to avoid warning.\n\t* generated/matmul_l4.c: Regenerated.\n\t* generated/matmul_l8.c: Regenerated.\n\n\t* Makefile.am: Remove AM_CFLAGS here.\n\t* configure.ac: Define AM_CFLAGS and AM_FCFLAGS so that warnings\n\tare set.  Set additionally -Wstrict-prototypes for CFLAGS.\n\t* Makefile.in: Regenerated\n\t* configure: Regenerated.\n\nFrom-SVN: r99723", "tree": {"sha": "86a911fd57b949150311c11e562e0608b3efc89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a911fd57b949150311c11e562e0608b3efc89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b0215364d3709b555115d4a1bdcdea70350dbc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0215364d3709b555115d4a1bdcdea70350dbc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0215364d3709b555115d4a1bdcdea70350dbc0"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "729af7f1e3a2b86fe2dc020e30a7cbdf8147abc8", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "patch": "@@ -1,5 +1,18 @@\n 2005-05-15  Andreas Jaeger  <aj@suse.de>\n \n+\t* intrinsics/pack_generic.c (pack): Remove unneeded calculation.\n+\n+\t* m4/matmull.m4 (matmul_): Remove unneeded calculations, fix\n+\tpointer cast to avoid warning.\n+\t* generated/matmul_l4.c: Regenerated.\n+\t* generated/matmul_l8.c: Regenerated.\n+\n+\t* Makefile.am: Remove AM_CFLAGS here.\n+\t* configure.ac: Define AM_CFLAGS and AM_FCFLAGS so that warnings\n+\tare set.  Set additionally -Wstrict-prototypes for CFLAGS.\n+\t* Makefile.in: Regenerated\n+\t* configure: Regenerated.\n+\n \t* intrinsics/system_clock.c (system_clock_4, system_clock_8): Add\n \tmissing returns, reformat a bit.\n "}, {"sha": "485ce9a39adc5de135195f2a844dd140c5b78ff8", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "patch": "@@ -1,8 +1,6 @@\n ## Process this file with automake to produce Makefile.in\n \n-## We like to use C99 routines when available.  This makes sure that\n-## __STDC_VERSION__ is set such that libc includes make them available.\n-AM_CFLAGS = -std=gnu99\n+\n ACLOCAL_AMFLAGS = -I ../config\n \n ## May be used by toolexeclibdir.\n@@ -193,7 +191,7 @@ i_dotprod_c= \\\n generated/dotprod_i4.c \\\n generated/dotprod_i8.c \\\n generated/dotprod_r4.c \\\n-generated/dotprod_r8.c \n+generated/dotprod_r8.c\n \n i_dotprodl_c= \\\n generated/dotprod_l4.c \\\n@@ -530,4 +528,3 @@ $(gfor_built_specific2_src): m4/specific2.m4 m4/head.m4\n endif\n \n EXTRA_DIST = $(m4_files)\n-"}, {"sha": "0fb6db5179725bef10b56930f026468af7162c2c", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.2 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -206,14 +206,15 @@ distuninstallcheck_listfiles = find . -type f -print\n distcleancheck_listfiles = find . -type f -print\n ACLOCAL = @ACLOCAL@\n AMTAR = @AMTAR@\n+AM_CFLAGS = @AM_CFLAGS@\n+AM_FCFLAGS = @AM_FCFLAGS@\n AR = @AR@\n AS = @AS@\n AUTOCONF = @AUTOCONF@\n AUTOHEADER = @AUTOHEADER@\n AUTOMAKE = @AUTOMAKE@\n AWK = @AWK@\n CC = @CC@\n-CFLAGS = @CFLAGS@\n CPP = @CPP@\n CPPFLAGS = @CPPFLAGS@\n CYGPATH_W = @CYGPATH_W@\n@@ -300,7 +301,6 @@ target_os = @target_os@\n target_vendor = @target_vendor@\n toolexecdir = @toolexecdir@\n toolexeclibdir = @toolexeclibdir@\n-AM_CFLAGS = -std=gnu99\n ACLOCAL_AMFLAGS = -I ../config\n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n toolexeclib_LTLIBRARIES = libgfortran.la libgfortranbegin.la\n@@ -480,7 +480,7 @@ i_dotprod_c = \\\n generated/dotprod_i4.c \\\n generated/dotprod_i8.c \\\n generated/dotprod_r4.c \\\n-generated/dotprod_r8.c \n+generated/dotprod_r8.c\n \n i_dotprodl_c = \\\n generated/dotprod_l4.c \\"}, {"sha": "43b87a82b216c52f3b33466b29470a685f2bed81", "filename": "libgfortran/configure", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "patch": "@@ -308,7 +308,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT multi_basedir toolexecdir toolexeclibdir CC ac_ct_CC EXEEXT OBJEXT CFLAGS AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB LN_S LIBTOOL enable_shared enable_static FC FCFLAGS LDFLAGS ac_ct_FC extra_ldflags_libgfortran CPP CPPFLAGS EGREP MATH_OBJ LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT multi_basedir toolexecdir toolexeclibdir CC ac_ct_CC EXEEXT OBJEXT AM_FCFLAGS AM_CFLAGS AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB LN_S LIBTOOL enable_shared enable_static FC FCFLAGS LDFLAGS ac_ct_FC extra_ldflags_libgfortran CPP CPPFLAGS EGREP MATH_OBJ LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -2932,13 +2932,16 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-\n-\n # Add -Wall if we are using GCC.\n if test \"x$GCC\" = \"xyes\"; then\n-  CFLAGS=\"$CFLAGS -Wall\"\n+  AM_FCFLAGS=\"-Wall\"\n+  ## We like to use C99 routines when available.  This makes sure that\n+  ## __STDC_VERSION__ is set such that libc includes make them available.\n+  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes\"\n fi\n \n+\n+\n # Find other programs we need.\n if test -n \"$ac_tool_prefix\"; then\n   # Extract the first word of \"${ac_tool_prefix}as\", so it can be a program name with args.\n@@ -4086,7 +4089,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4089 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4092 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -4472,7 +4475,7 @@ fi\n \n \n # Provide some information about the compiler.\n-echo \"$as_me:4475:\" \\\n+echo \"$as_me:4478:\" \\\n      \"checking for Fortran compiler version\" >&5\n ac_compiler=`set X $ac_compile; echo $2`\n { (eval echo \"$as_me:$LINENO: \\\"$ac_compiler --version </dev/null >&5\\\"\") >&5\n@@ -12201,7 +12204,8 @@ s,@CC@,$CC,;t t\n s,@ac_ct_CC@,$ac_ct_CC,;t t\n s,@EXEEXT@,$EXEEXT,;t t\n s,@OBJEXT@,$OBJEXT,;t t\n-s,@CFLAGS@,$CFLAGS,;t t\n+s,@AM_FCFLAGS@,$AM_FCFLAGS,;t t\n+s,@AM_CFLAGS@,$AM_CFLAGS,;t t\n s,@AS@,$AS,;t t\n s,@ac_ct_AS@,$ac_ct_AS,;t t\n s,@AR@,$AR,;t t"}, {"sha": "b372a7b2a1a02f1155341b964d4f075e664a56aa", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "patch": "@@ -109,12 +109,15 @@ m4_define([_AC_ARG_VAR_PRECIOUS],[])\n AC_PROG_CC\n m4_rename([real_PRECIOUS],[_AC_ARG_VAR_PRECIOUS])\n \n-AC_SUBST(CFLAGS)\n-\n # Add -Wall if we are using GCC.\n if test \"x$GCC\" = \"xyes\"; then\n-  CFLAGS=\"$CFLAGS -Wall\"\n+  AM_FCFLAGS=\"-Wall\"\n+  ## We like to use C99 routines when available.  This makes sure that\n+  ## __STDC_VERSION__ is set such that libc includes make them available.\n+  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes\"\n fi\n+AC_SUBST(AM_FCFLAGS)\n+AC_SUBST(AM_CFLAGS)\n \n # Find other programs we need.\n AC_CHECK_TOOL(AS, as)"}, {"sha": "06298bb23ef68eada42f9d592f1846f1ae792211", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "patch": "@@ -1,5 +1,5 @@\n /* Generic implementation of the PACK intrinsic\n-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n /* PACK is specified as follows:\n \n    13.14.80 PACK (ARRAY, MASK, [VECTOR])\n-   \n+\n    Description: Pack an array into an array of rank one under the\n    control of a mask.\n \n@@ -49,7 +49,7 @@ Boston, MA 02111-1307, USA.  */\n       VECTOR  (optional) shall be of the same type and type parameters\n               as ARRAY. VECTOR shall have at least as many elements as\n               there are true elements in MASK. If MASK is a scalar\n-              with the value true, VECTOR shall have at least as many \n+              with the value true, VECTOR shall have at least as many\n               elements as there are in ARRAY.\n \n    Result Characteristics: The result is an array of rank one with the\n@@ -69,7 +69,7 @@ Boston, MA 02111-1307, USA.  */\n    | 9 0 0 | may be \"gathered\" by the function PACK. The result of\n    | 0 0 7 |\n    PACK (M, MASK = M.NE.0) is [9,7] and the result of PACK (M, M.NE.0,\n-   VECTOR = (/ 2,4,6,8,10,12 /)) is [9,7,6,8,10,12].  \n+   VECTOR = (/ 2,4,6,8,10,12 /)) is [9,7,6,8,10,12].\n \n There are two variants of the PACK intrinsic: one, where MASK is\n array valued, and the other one where MASK is scalar.  */\n@@ -125,7 +125,6 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n         runtime_error (\"Funny sized logical array\");\n       for (n = 0; n < dim; n++)\n         mstride[n] <<= 1;\n-      mstride0 <<= 1;\n       mptr = GFOR_POINTER_L8_TO_L4 (mptr);\n     }\n \n@@ -134,15 +133,15 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n       /* Allocate the memory for the result.  */\n       int total;\n \n-      if (vector != NULL) \n-\t{ \n+      if (vector != NULL)\n+\t{\n \t  /* The return array will have as many\n-\t     elements as there are in VECTOR.  */ \n-\t  total = vector->dim[0].ubound + 1 - vector->dim[0].lbound; \n-\t} \n-      else \n-\t{ \n-\t  /* We have to count the true elements in MASK.  */ \n+\t     elements as there are in VECTOR.  */\n+\t  total = vector->dim[0].ubound + 1 - vector->dim[0].lbound;\n+\t}\n+      else\n+\t{\n+\t  /* We have to count the true elements in MASK.  */\n \n \t  /* TODO: We could speed up pack easily in the case of only\n \t     few .TRUE. entries in MASK, by keeping track of where we\n@@ -152,7 +151,7 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t     only have to traverse the list, and copy those elements\n \t     into the result array. In the case of datatypes which fit\n \t     in one of the integer types we could also cache the\n-\t     value instead of a pointer to it. \n+\t     value instead of a pointer to it.\n \t     This approach might be bad from the point of view of\n \t     cache behavior in the case where our cache is not big\n \t     enough to hold all elements that have to be copied.  */\n@@ -195,7 +194,7 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t\t}\n \t    }\n \t}\n-      \n+\n       /* Setup the array descriptor.  */\n       ret->dim[0].lbound = 0;\n       ret->dim[0].ubound = total - 1;\n@@ -344,7 +343,7 @@ pack_s (gfc_array_char *ret, const gfc_array_char *array,\n \t      ret->dim[0].stride = 1;\n \t      ret->data = internal_malloc_size (0);\n \t      ret->base = 0;\n-\t      \n+\n \t      return;\n \t    }\n \t}\n@@ -363,7 +362,7 @@ pack_s (gfc_array_char *ret, const gfc_array_char *array,\n     rstride0 = size;\n   rptr = ret->data;\n \n-  /* The remaining possibilities are now: \n+  /* The remaining possibilities are now:\n        If MASK is .TRUE., we have to copy the source array into the\n      result array. We then have to fill it up with elements from VECTOR.\n        If MASK is .FALSE., we have to copy VECTOR into the result\n@@ -404,7 +403,7 @@ pack_s (gfc_array_char *ret, const gfc_array_char *array,\n \t    }\n \t}\n     }\n-  \n+\n   /* Add any remaining elements from VECTOR.  */\n   if (vector)\n     {"}, {"sha": "02a5adb37d078a99ea546ae46bce3ab9e34127c5", "filename": "libgfortran/m4/matmull.m4", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fm4%2Fmatmull.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f/libgfortran%2Fm4%2Fmatmull.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmull.m4?ref=e606fb399e59f59bf0c56e3f2a04c18b85b4ea4f", "patch": "@@ -1,5 +1,5 @@\n `/* Implementation of the MATMUL intrinsic\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -91,7 +91,7 @@ matmul_`'rtype_code (rtype * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (rtype_name) * size0 (retarray));\n+\t= internal_malloc_size (sizeof (rtype_name) * size0 ((array_t *) retarray));\n       retarray->base = 0;\n     }\n \n@@ -100,14 +100,12 @@ matmul_`'rtype_code (rtype * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n     {\n       assert (GFC_DESCRIPTOR_SIZE (a) == 8);\n       abase = GFOR_POINTER_L8_TO_L4 (abase);\n-      astride <<= 1;\n     }\n   bbase = b->data;\n   if (GFC_DESCRIPTOR_SIZE (b) != 4)\n     {\n       assert (GFC_DESCRIPTOR_SIZE (b) == 8);\n       bbase = GFOR_POINTER_L8_TO_L4 (bbase);\n-      bstride <<= 1;\n     }\n   dest = retarray->data;\n "}]}