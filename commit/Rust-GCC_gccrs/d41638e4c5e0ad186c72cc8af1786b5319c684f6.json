{"sha": "d41638e4c5e0ad186c72cc8af1786b5319c684f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxNjM4ZTRjNWUwYWQxODZjNzJjYzhhZjE3ODZiNTMxOWM2ODRmNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-29T07:40:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-29T07:40:51Z"}, "message": "combine.c (force_to_mode): Convert subtraction from a constant to NEG or NOT when conditions allow.\n\n        * combine.c (force_to_mode) [MINUS]: Convert subtraction from\n        a constant to NEG or NOT when conditions allow.\n\nFrom-SVN: r34248", "tree": {"sha": "b2aed1ebcca2488360c1ebd0d03f0c01bbc73d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2aed1ebcca2488360c1ebd0d03f0c01bbc73d10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d41638e4c5e0ad186c72cc8af1786b5319c684f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41638e4c5e0ad186c72cc8af1786b5319c684f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41638e4c5e0ad186c72cc8af1786b5319c684f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41638e4c5e0ad186c72cc8af1786b5319c684f6/comments", "author": null, "committer": null, "parents": [{"sha": "085f17143f3444e9fedce6501e21d28bedac8702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085f17143f3444e9fedce6501e21d28bedac8702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085f17143f3444e9fedce6501e21d28bedac8702"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "d49783c626cc2c383a3e4fb57c75066db9b80b37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41638e4c5e0ad186c72cc8af1786b5319c684f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41638e4c5e0ad186c72cc8af1786b5319c684f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d41638e4c5e0ad186c72cc8af1786b5319c684f6", "patch": "@@ -1,5 +1,8 @@\n 2000-05-29  Richard Henderson  <rth@cygnus.com>\n \n+\t* combine.c (force_to_mode) [MINUS]: Convert subtraction from\n+\ta constant to NEG or NOT when conditions allow.\n+\n \t* combine.c (combine_simplify_rtx): Don't create an if_then_else\n \tunless both args are general_operand.  Don't canonicalize plus\n \tto ior unless it helps."}, {"sha": "47642f3d42f0012f3e7f23ce48040b9ad1f175f7", "filename": "gcc/combine.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d41638e4c5e0ad186c72cc8af1786b5319c684f6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d41638e4c5e0ad186c72cc8af1786b5319c684f6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d41638e4c5e0ad186c72cc8af1786b5319c684f6", "patch": "@@ -6846,14 +6846,35 @@ force_to_mode (x, mode, mask, reg, just_select)\n \n       /* ... fall through ...  */\n \n-    case MINUS:\n     case MULT:\n       /* For PLUS, MINUS and MULT, we need any bits less significant than the\n \t most significant bit in MASK since carries from those bits will\n \t affect the bits we are interested in.  */\n       mask = fuller_mask;\n       goto binop;\n \n+    case MINUS:\n+      /* If X is (minus C Y) where C's least set bit is larger than any bit\n+\t in the mask, then we may replace with (neg Y).  */\n+      if (GET_CODE (XEXP (x, 0)) == CONST_INT\n+\t  && (INTVAL (XEXP (x, 0)) & -INTVAL (XEXP (x, 0))) > mask)\n+\t{\n+\t  x = gen_unary (NEG, GET_MODE (x), GET_MODE (x), XEXP (x, 1));\n+\t  return force_to_mode (x, mode, mask, reg, next_select);\n+\t}\n+\n+      /* Similarly, if C contains every bit in the mask, then we may\n+\t replace with (not Y).  */\n+      if (GET_CODE (XEXP (x, 0)) == CONST_INT\n+          && (INTVAL (XEXP (x, 0)) | mask) == INTVAL (XEXP (x, 0)))\n+\t{\n+\t  x = gen_unary (NOT, GET_MODE (x), GET_MODE (x), XEXP (x, 1));\n+\t  return force_to_mode (x, mode, mask, reg, next_select);\n+\t}\n+\n+      mask = fuller_mask;\n+      goto binop;\n+\n     case IOR:\n     case XOR:\n       /* If X is (ior (lshiftrt FOO C1) C2), try to commute the IOR and"}]}