{"sha": "e41ebdf1c8fa94e1bb724a939d014b5f515496f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxZWJkZjFjOGZhOTRlMWJiNzI0YTkzOWQwMTRiNWY1MTU0OTZmMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-28T16:35:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-28T16:35:03Z"}, "message": "i386.md (zeroing peephole2): Use general_reg_operand.\n\n\t* config/i386/i386.md (zeroing peephole2): Use general_reg_operand.\n\t(or $-1,reg peephole2): Ditto.\n\t(strict_low_part zeroing peephole2): Use SWI12 mode iterator.\n\nFrom-SVN: r235581", "tree": {"sha": "bb600818c2bafaac6b42257bbb69acc3b3a34455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb600818c2bafaac6b42257bbb69acc3b3a34455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e41ebdf1c8fa94e1bb724a939d014b5f515496f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ebdf1c8fa94e1bb724a939d014b5f515496f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41ebdf1c8fa94e1bb724a939d014b5f515496f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ebdf1c8fa94e1bb724a939d014b5f515496f0/comments", "author": null, "committer": null, "parents": [{"sha": "893100c3fa9b3049ce84dcc0c1a839ddc7a21387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893100c3fa9b3049ce84dcc0c1a839ddc7a21387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893100c3fa9b3049ce84dcc0c1a839ddc7a21387"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "3defcd2adf0fbab2e835449cda279fe5add76a12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ebdf1c8fa94e1bb724a939d014b5f515496f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ebdf1c8fa94e1bb724a939d014b5f515496f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e41ebdf1c8fa94e1bb724a939d014b5f515496f0", "patch": "@@ -1,4 +1,10 @@\n-2016-04-28  Markus Trippelsdorf  <markus@trippelsdorf.de> \n+2016-04-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (zeroing peephole2): Use general_reg_operand.\n+\t(or $-1,reg peephole2): Ditto.\n+\t(strict_low_part zeroing peephole2): Use SWI12 mode iterator.\n+\n+2016-04-28  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \t* doc/extend.texi (Common Function Attributes) [optimize]:\n \tDiscourage use of the optimize attribute."}, {"sha": "30c0997a5232daf721c761bc0df7a119d6715c0b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41ebdf1c8fa94e1bb724a939d014b5f515496f0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41ebdf1c8fa94e1bb724a939d014b5f515496f0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e41ebdf1c8fa94e1bb724a939d014b5f515496f0", "patch": "@@ -18124,34 +18124,30 @@\n \t\t\t\tcopy_rtx (operands[2]));\n })\n \n-;; Attempt to always use XOR for zeroing registers.\n+;; Attempt to always use XOR for zeroing registers (including FP modes).\n (define_peephole2\n-  [(set (match_operand 0 \"register_operand\")\n+  [(set (match_operand 0 \"general_reg_operand\")\n \t(match_operand 1 \"const0_operand\"))]\n   \"GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n    && (! TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n-   && GENERAL_REGNO_P (REGNO (operands[0]))\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"operands[0] = gen_lowpart (word_mode, operands[0]);\")\n \n (define_peephole2\n-  [(set (strict_low_part (match_operand 0 \"register_operand\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"general_reg_operand\"))\n \t(const_int 0))]\n-  \"(GET_MODE (operands[0]) == QImode\n-    || GET_MODE (operands[0]) == HImode)\n-   && (! TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n+  \"(! TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (strict_low_part (match_dup 0)) (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n ;; For HI, SI and DI modes, or $-1,reg is smaller than mov $-1,reg.\n (define_peephole2\n-  [(set (match_operand:SWI248 0 \"register_operand\")\n+  [(set (match_operand:SWI248 0 \"general_reg_operand\")\n \t(const_int -1))]\n-  \"(optimize_insn_for_size_p () || TARGET_MOVE_M1_VIA_OR)\n-   && GENERAL_REGNO_P (REGNO (operands[0]))\n+  \"(TARGET_MOVE_M1_VIA_OR || optimize_insn_for_size_p ())\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (const_int -1))\n \t      (clobber (reg:CC FLAGS_REG))])]"}]}