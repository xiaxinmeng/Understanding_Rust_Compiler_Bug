{"sha": "038acbbaa8abcf66c2341e648651b0af8f7102d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4YWNiYmFhOGFiY2Y2NmMyMzQxZTY0ODY1MWIwYWY4ZjcxMDJkMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-04-27T09:00:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-04-27T09:00:27Z"}, "message": "i386.md (*movti_internal): Substitute Ye constraint with Yd constraint.\n\n\t* config/i386/i386.md (*movti_internal): Substitute Ye constraint\n\twith Yd constraint. Set \"preferred_for_speed\" attribute from\n\tTARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC for alternatives\n\twith Yd constraint.\n\t(*movdi_internal): Ditto.\n\t(movti_interunit splitters): Remove\n\tTARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC from insn condition.\n\t(movdi_interunit splitters): Ditto.\n\t* config/i386/constraints.md (Ye): Remove.\n\t(Yd): Do not depend on TARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC.\n\nFrom-SVN: r259701", "tree": {"sha": "3190cab78380655de282a04cfd6a428ef110c125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3190cab78380655de282a04cfd6a428ef110c125"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038acbbaa8abcf66c2341e648651b0af8f7102d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038acbbaa8abcf66c2341e648651b0af8f7102d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038acbbaa8abcf66c2341e648651b0af8f7102d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038acbbaa8abcf66c2341e648651b0af8f7102d2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d318d551b372bed91d00e50c8efd6f60f94db819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d318d551b372bed91d00e50c8efd6f60f94db819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d318d551b372bed91d00e50c8efd6f60f94db819"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "1eff3f4de739caa4185c2d0b9158c103a3b32adb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038acbbaa8abcf66c2341e648651b0af8f7102d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038acbbaa8abcf66c2341e648651b0af8f7102d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=038acbbaa8abcf66c2341e648651b0af8f7102d2", "patch": "@@ -1,3 +1,16 @@\n+2018-04-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movti_internal): Substitute Ye constraint\n+\twith Yd constraint. Set \"preferred_for_speed\" attribute from\n+\tTARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC for alternatives\n+\twith Yd constraint.\n+\t(*movdi_internal): Ditto.\n+\t(movti_interunit splitters): Remove\n+\tTARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC from insn condition.\n+\t(movdi_interunit splitters): Ditto.\n+\t* config/i386/constraints.md (Ye): Remove.\n+\t(Yd): Do not depend on TARGET_INTER_UNIT_MOVES_{FROM,TO}_VEC.\n+\n 2018-04-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/85512\n@@ -29,7 +42,7 @@\n 2018-04-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (\"isa\" attribute): Add x64_sse2.\n-\t(\"enabled\" attribute): Handle \"isa\" attribute.\n+\t(\"enabled\" attribute): Handle x64_sse2 \"isa\" attribute.\n \t(*movdi_internal): Substitute Yi and Yj constraint with x\n \tand Ym and Yn constraint with y constraint.  Update \"isa\"\n \tattribute and set \"preferred_for_speed\" attribute from"}, {"sha": "51f0f51863265c90f62e690c92d6caaff39ad29f", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038acbbaa8abcf66c2341e648651b0af8f7102d2/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038acbbaa8abcf66c2341e648651b0af8f7102d2/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=038acbbaa8abcf66c2341e648651b0af8f7102d2", "patch": "@@ -99,10 +99,8 @@\n \n ;; We use the Y prefix to denote any number of conditional register sets:\n ;;  z\tFirst SSE register.\n-;;  d\tany EVEX encodable SSE register for AVX512BW target or any SSE register\n-;;\tfor SSE4_1 target, when inter-unit moves to SSE register are enabled\n-;;  e\tany EVEX encodable SSE register for AVX512BW target or any SSE register\n-;;\tfor SSE4_1 target, when inter-unit moves from SSE register are enabled\n+;;  d\tany EVEX encodable SSE register for AVX512BW target or\n+;;\tany SSE register for SSE4_1 target.\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  a\tInteger register when zero extensions with AND are disabled\n ;;  b\tAny register that can be used as the GOT base when calling\n@@ -120,20 +118,8 @@\n  \"First SSE register (@code{%xmm0}).\")\n \n (define_register_constraint \"Yd\"\n- \"TARGET_INTER_UNIT_MOVES_TO_VEC\n-  ? (TARGET_AVX512DQ\n-     ? ALL_SSE_REGS\n-     : (TARGET_SSE4_1 ? SSE_REGS : NO_REGS))\n-  : NO_REGS\"\n- \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512DQ target or any SSE register for SSE4_1 target, when inter-unit moves to vector registers are enabled.\")\n-\n-(define_register_constraint \"Ye\"\n- \"TARGET_INTER_UNIT_MOVES_FROM_VEC\n-  ? (TARGET_AVX512DQ\n-     ? ALL_SSE_REGS\n-     : (TARGET_SSE4_1 ? SSE_REGS : NO_REGS))\n-  : NO_REGS\"\n- \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512DQ target or any SSE register for SSE4_1 target, when inter-unit moves from vector registers are enabled.\")\n+ \"TARGET_AVX512DQ ? ALL_SSE_REGS : TARGET_SSE4_1 ? SSE_REGS : NO_REGS\"\n+ \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512DQ target or any SSE register for SSE4_1 target.\")\n \n (define_register_constraint \"Yp\"\n  \"TARGET_PARTIAL_REG_STALL ? NO_REGS : GENERAL_REGS\""}, {"sha": "eacc3bb6d4e38b6d8a3bea4a0711cf2fd1cfcac1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038acbbaa8abcf66c2341e648651b0af8f7102d2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038acbbaa8abcf66c2341e648651b0af8f7102d2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=038acbbaa8abcf66c2341e648651b0af8f7102d2", "patch": "@@ -2123,7 +2123,7 @@\n \n (define_insn \"*movti_internal\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,v,v ,v ,m,?r,?Yd\")\n-\t(match_operand:TI 1 \"general_operand\"\t   \"riFo,re,C,BC,vm,v,Ye,r\"))]\n+\t(match_operand:TI 1 \"general_operand\"\t   \"riFo,re,C,BC,vm,v,Yd,r\"))]\n   \"(TARGET_64BIT\n     && !(MEM_P (operands[0]) && MEM_P (operands[1])))\n    || (TARGET_SSE\n@@ -2203,12 +2203,19 @@\n \t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t (const_string \"V4SF\")\n \t       ]\n-\t       (const_string \"TI\")))])\n+\t       (const_string \"TI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"6\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"7\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n (define_split\n   [(set (match_operand:TI 0 \"sse_reg_operand\")\n         (match_operand:TI 1 \"general_reg_operand\"))]\n-  \"TARGET_64BIT && TARGET_SSE4_1 && TARGET_INTER_UNIT_MOVES_TO_VEC\n+  \"TARGET_64BIT && TARGET_SSE4_1\n    && reload_completed\"\n   [(set (match_dup 2)\n   \t(vec_merge:V2DI\n@@ -2227,7 +2234,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n     \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,m,?r ,?*Yd,?r,?*v,?*y,?*x,*k,*k ,*r,*m\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,v,*Ye,r   ,*v,r  ,*x ,*y ,*r,*km,*k,*k\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,v,*Yd,r   ,*v,r  ,*x ,*y ,*r,*km,*k,*k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2379,9 +2386,9 @@\n \t   ]\n \t   (const_string \"DI\")))\n    (set (attr \"preferred_for_speed\")\n-     (cond [(eq_attr \"alternative\" \"10,19\")\n+     (cond [(eq_attr \"alternative\" \"10,17,19\")\n \t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n-\t    (eq_attr \"alternative\" \"11,20\")\n+\t    (eq_attr \"alternative\" \"11,18,20\")\n \t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n \t   ]\n \t   (symbol_ref \"true\")))\n@@ -2402,7 +2409,7 @@\n (define_split\n   [(set (match_operand:<DWI> 0 \"general_reg_operand\")\n         (match_operand:<DWI> 1 \"sse_reg_operand\"))]\n-  \"TARGET_SSE4_1 && TARGET_INTER_UNIT_MOVES_FROM_VEC\n+  \"TARGET_SSE4_1\n    && reload_completed\"\n   [(set (match_dup 2)\n   \t(vec_select:DWIH\n@@ -2426,7 +2433,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"sse_reg_operand\")\n         (match_operand:DI 1 \"general_reg_operand\"))]\n-  \"!TARGET_64BIT && TARGET_SSE4_1 && TARGET_INTER_UNIT_MOVES_TO_VEC\n+  \"!TARGET_64BIT && TARGET_SSE4_1\n    && reload_completed\"\n   [(set (match_dup 2)\n   \t(vec_merge:V4SI"}]}