{"sha": "b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmNzFjNTFjZDU3OGM2YWI2YWQyOTg2ZWRiODBiYTQ4YWE0NzdiYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-15T13:52:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-15T13:52:09Z"}, "message": "re PR tree-optimization/92512 (ICE in gimple_op, at gimple.h:2436)\n\n2019-11-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92512\n\t* tree-vect-loop.c (check_reduction_path): Fix operand index\n\tcomputability check.  Add check for second use in COND_EXPRs.\n\n\t* gcc.dg/torture/pr92512.c: New testcase.\n\nFrom-SVN: r278293", "tree": {"sha": "cf974b1e2f625191918c751588797b77128c1090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf974b1e2f625191918c751588797b77128c1090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6d53324092ee2b15c4a34fb55f2556863223d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d53324092ee2b15c4a34fb55f2556863223d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d53324092ee2b15c4a34fb55f2556863223d86"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "22fe571eec62220963402d8fd083deb7a110c804", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "patch": "@@ -1,3 +1,9 @@\n+2019-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92512\n+\t* tree-vect-loop.c (check_reduction_path): Fix operand index\n+\tcomputability check.  Add check for second use in COND_EXPRs.\n+\n 2019-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/92515"}, {"sha": "82f559bd04f7d10277d62586f9f5571aa7099b7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "patch": "@@ -1,3 +1,8 @@\n+2019-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92512\n+\t* gcc.dg/torture/pr92512.c: New testcase.\n+\n 2019-11-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92324"}, {"sha": "2d873ade96a045659fa2242130b687af1b72eedf", "filename": "gcc/testsuite/gcc.dg/torture/pr92512.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92512.c?ref=b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+long int\n+nl (long int fy, int k3, int zr)\n+{\n+  while (k3 < 1)\n+    {\n+      if (zr == 0)\n+        fy = 0;\n+\n+      fy *= fy < zr;\n+      ++k3;\n+    }\n+\n+  return fy;\n+}"}, {"sha": "e6ba91c858bb3f124b3c64f0d49ee10de0f09119", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f71c51cd578c6ab6ad2986edb80ba48aa477bc/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b9f71c51cd578c6ab6ad2986edb80ba48aa477bc", "patch": "@@ -2813,9 +2813,11 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \t  /* The following make sure we can compute the operand index\n \t     easily plus it mostly disallows chaining via COND_EXPR condition\n \t     operands.  */\n-\t  || (gimple_assign_rhs1 (use_stmt) != op\n-\t      && gimple_assign_rhs2 (use_stmt) != op\n-\t      && gimple_assign_rhs3 (use_stmt) != op))\n+\t  || (gimple_assign_rhs1_ptr (use_stmt) != path[i].second->use\n+\t      && (gimple_num_ops (use_stmt) <= 2\n+\t\t  || gimple_assign_rhs2_ptr (use_stmt) != path[i].second->use)\n+\t      && (gimple_num_ops (use_stmt) <= 3\n+\t\t  || gimple_assign_rhs3_ptr (use_stmt) != path[i].second->use)))\n \t{\n \t  fail = true;\n \t  break;\n@@ -2828,7 +2830,18 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n       FOR_EACH_IMM_USE_STMT (op_use_stmt, imm_iter, op)\n \tif (!is_gimple_debug (op_use_stmt)\n \t    && flow_bb_inside_loop_p (loop, gimple_bb (op_use_stmt)))\n-\t  cnt++;\n+\t  {\n+\t    /* We want to allow x + x but not x < 1 ? x : 2.  */\n+\t    if (is_gimple_assign (op_use_stmt)\n+\t\t&& gimple_assign_rhs_code (op_use_stmt) == COND_EXPR)\n+\t      {\n+\t\tuse_operand_p use_p;\n+\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n+\t\t  cnt++;\n+\t      }\n+\t    else\n+\t      cnt++;\n+\t  }\n       if (cnt != 1)\n \t{\n \t  fail = true;"}]}