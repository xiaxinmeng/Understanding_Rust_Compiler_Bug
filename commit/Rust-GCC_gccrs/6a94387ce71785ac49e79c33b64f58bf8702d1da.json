{"sha": "6a94387ce71785ac49e79c33b64f58bf8702d1da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5NDM4N2NlNzE3ODVhYzQ5ZTc5YzMzYjY0ZjU4YmY4NzAyZDFkYQ==", "commit": {"author": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-25T10:17:32Z"}, "committer": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-25T10:17:32Z"}, "message": "Initial revision\n\nFrom-SVN: r5470", "tree": {"sha": "121c36df8a65b3663397e8d3ff09f5d18bef6610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/121c36df8a65b3663397e8d3ff09f5d18bef6610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a94387ce71785ac49e79c33b64f58bf8702d1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a94387ce71785ac49e79c33b64f58bf8702d1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a94387ce71785ac49e79c33b64f58bf8702d1da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a94387ce71785ac49e79c33b64f58bf8702d1da/comments", "author": null, "committer": null, "parents": [{"sha": "1e513cfbd62037cb9bf996ab19f28e520eb1b84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e513cfbd62037cb9bf996ab19f28e520eb1b84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e513cfbd62037cb9bf996ab19f28e520eb1b84f"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "954638a2eae3902d7a1fded819af29cf961b2d82", "filename": "gcc/bi-lexer.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a94387ce71785ac49e79c33b64f58bf8702d1da/gcc%2Fbi-lexer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a94387ce71785ac49e79c33b64f58bf8702d1da/gcc%2Fbi-lexer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbi-lexer.c?ref=6a94387ce71785ac49e79c33b64f58bf8702d1da", "patch": "@@ -0,0 +1,171 @@\n+/* Lexer for scanner of bytecode definition file.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include <stdio.h>\n+#include \"bi-parser.h\"\n+\n+extern char *malloc ();\n+extern char *realloc ();\n+\n+\n+/* Current read buffer and point */\n+static char *buffer = NULL;\n+static char *inpoint = NULL;\n+\n+\n+/* Safely allocate NBYTES bytes of memory. Reuturns pointer to block of\n+   memory. */\n+\n+static char *\n+xmalloc (nbytes)\n+     int nbytes;\n+{\n+  char *tmp = malloc (nbytes);\n+\n+  if (!tmp)\n+    {\n+      fprintf (stderr, \"can't allocate %d bytes (out of virtual memory)\\n\", nbytes);\n+      exit (1);\n+    }\n+\n+  return tmp;\n+}\n+\n+\n+/* Safely reallocate BLOCK so its size becomes NBYTES.\n+   The block returned may be different from the one supplied. */\n+\n+static char *\n+xrealloc (block, nbytes)\n+     char *block;\n+     int nbytes;\n+{\n+  char *tmp = realloc (block, nbytes);\n+\n+  if (!tmp)\n+    {\n+      fprintf (stderr, \"can't reallocate %d bytes (out of virtual memory)\\n\", nbytes);\n+      exit (1);\n+    }\n+\n+  return tmp;\n+}\n+\n+\n+/* Scan for string token on standard input.  A string is, for our\n+   purposes here, a sequence of characters that starts with the regexp\n+   ``[^ #\\t\\n(),]'' and is then followed by the regexp ``[^#(),]*''. Any\n+   character is accepted if preceded by a backslash, \"\\\\\".  It is assumed\n+   that the first character has already been checked by the main loop. */\n+\n+static char *\n+scan_string ()\n+{\n+  char *buffer = NULL;\n+  char *point = NULL;\n+  int buffer_size = 0;\n+  int c;\n+\n+  while ((c = getc (stdin)) != EOF\n+\t && c != '#' && c != '(' && c != ')' && c != ',')\n+    {\n+      /* Extend buffer, if necessary (minus two so there's room for the NUL\n+\t trailer as well as another character if this one is a backslash).  */\n+      if (!buffer_size || (point - buffer >= buffer_size-2))\n+\t{\n+\t  int previous_point_index = point - buffer;\n+\n+\t  buffer_size = (!buffer_size ? 32 : buffer_size * 2);\n+\t  if (buffer)\n+\t    buffer = xmalloc (buffer_size);\n+\t  else\n+\t    buffer = xrealloc (buffer, buffer_size);\n+\t  \n+\t  point = buffer + previous_point_index;\n+\t}\n+      *point++ = c & 0xff;\n+\n+      if (c == '\\\\')\n+\t{\n+\t  c = getc (stdin);\n+\n+\t  /* Catch special case: backslash at end of file */\n+\t  if (c == EOF)\n+\t    break;\n+\n+\t  *point++ = c;\n+\t}\n+    }\n+  *point = 0;\n+\n+  if (c != EOF)\n+    ungetc (c, stdin);\n+\n+  return buffer;\n+}\n+\n+\n+int\n+yylex ()\n+{\n+  int c;\n+  char *token;\n+\n+\n+  /* First char determines what token we're looking at */\n+  for (;;)\n+    {\n+      c = getc (stdin);\n+\n+      switch (c)\n+\t{\n+\tcase EOF:\n+\t  return 0;\n+\t  \n+\tcase ' ':\n+\tcase '\\t':\n+\tcase '\\n':\n+\t  /* Ignore whitespace */\n+\t  continue;\n+\t  \n+\tcase '#':\n+\t  /* Comments advance to next line */\n+\t  while ((c = getc (stdin)) != '\\n' && c != EOF);\n+\t  continue;\n+\t  \n+\tdefault:\n+\t  if (c != '(' && c != ')' && c != '\\\\' && c != ',')\n+\t    {\n+\t      ungetc (c, stdin);\n+\t      yylval.string = scan_string ();\n+\n+\t      /* Check if string is \"define_operator\"; if so, return\n+\t\t a DEFOP token instead.  */\n+\t      if (!strcmp (yylval.string, \"define_operator\"))\n+\t\t{\n+\t\t  free (yylval.string);\n+\t\t  yylval.string = 0;\n+\t\t  return DEFOP;\n+\t\t}\n+\t      return STRING;\n+\t    }\n+\t  return c & 0xff;\n+\t}\n+    }\n+}"}]}